- en: Chapter 6. Advanced PDO Usage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。PDO的高级用法
- en: Now that we have familiarized ourselves with the basic features of PDO and used
    them to build a data-driven web applications, let’s see some advanced functionality.
    In this chapter, we will look at getting and setting connection attributes (such
    as column names, case conversion, and the name of the underlying PDO driver) as
    well as connecting to a database by specifying a connection configuration filename
    or an option in the `php.ini` file. We will also discuss transactions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经熟悉了PDO的基本特性，并用它们来构建了数据驱动的Web应用程序，让我们来看一些高级功能。在这一章中，我们将看到如何获取和设置连接属性（比如列名、大小写转换以及底层PDO驱动的名称），以及通过指定连接配置文件名或在`php.ini`文件中的选项来连接数据库。我们还将讨论事务。
- en: We will modify our library application to display the name of the database driver
    in the footer of every page. In addition to this simple change, we will extend
    the application to keep track of how many copies of a single book we have and
    to keep track of those people who have borrowed a book. We will use transactions
    for this functionality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改我们的图书馆应用程序，以在每个页面的页脚显示数据库驱动程序的名称。除了这个简单的改变，我们还将扩展应用程序，以跟踪我们拥有的单本书的副本数量，并跟踪那些借阅了书的人。我们将使用事务来实现这个功能。
- en: Setting and Getting Connection Attributes
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和获取连接属性
- en: We have briefly covered setting connection attributes in [Chapter 3](ch03.html
    "Chapter 3. Error Handling") when we saw how to use exceptions as a means of error
    reporting. Connection attributes allow us to control certain aspects of the connection
    as well as to query such things as the driver name and version.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章。错误处理")中简要介绍了设置连接属性，当我们看到如何使用异常作为错误报告的手段时。连接属性允许我们控制连接的某些方面，以及查询诸如驱动程序名称和版本之类的东西。
- en: One way is to specify an array of attribute name/value pairs in the PDO constructor.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种方法是在PDO构造函数中指定属性名称/值对的数组。
- en: 'Another way is to call the `PDO::setAttribute()` method, which accepts two
    parameters:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种方法是调用`PDO::setAttribute()`方法，它接受两个参数：
- en: The attribute's name
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性的名称
- en: The attribute's value
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性的值
- en: 'In PDO, attributes and their values are defined as constants in the `PDO` class
    as in the following call in the `common.inc.php` file:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在PDO中，属性及其值被定义为`PDO`类中的常量，就像在`common.inc.php`文件中的以下调用一样：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It includes two such constants—`PDO::ATTR_ERRMODE` and `PDO::ERRMODE_EXCEPTION`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它包括两个这样的常量——`PDO::ATTR_ERRMODE`和`PDO::ERRMODE_EXCEPTION`。
- en: To get the value of an attribute, there is the `PDO::getAttribute()` method.
    It accepts a single parameter, the attribute name, and returns the value of the
    attribute. For example, the following code would print `Exception:`
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取属性的值，有`PDO::getAttribute()`方法。它接受一个参数，属性名称，并返回属性的值。例如，下面的代码将打印`Exception:`。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, let's see what connection attributes there are in PDO.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看PDO中有哪些连接属性。
- en: '`PDO::ATTR_CASE`. This attribute controls the case of column names that are
    returned by the `PDOStatement::fetch()` method. It is useful if the fetch mode
    is `PDO::FETCH_ASSOC` or `PDO::FETCH_BOTH` (as when the row is returned as an
    array that contains columns indexed by their name). This attribute can have one
    of the following three values: `PDO::CASE_LOWER, PDO::CASE_NATURAL`, and `PDO::CASE_UPPER`.
    Depending on this value, the column names will be lowercase, left without changes,
    or uppercase, respectively as in the following code snippet:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ATTR_CASE`。这个属性控制了`PDOStatement::fetch()`方法返回的列名的大小写。如果获取模式是`PDO::FETCH_ASSOC`或`PDO::FETCH_BOTH`（当行以包含按名称索引的列的数组返回时），这将非常有用。这个属性可以有以下三个值：`PDO::CASE_LOWER,
    PDO::CASE_NATURAL`和`PDO::CASE_UPPER`。根据这个值，列名将分别是小写、不改变、或大写，就像下面的代码片段一样：'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'would print:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将会打印：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The default behavior is not to change the column name case, that is `PDO::CASE_NATURAL.`
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认行为是不改变列名的大小写，即`PDO::CASE_NATURAL`。
- en: '`PDO::ATTR_ORACLE_NULLS:` This attribute, despite its name, works for all databases,
    not just Oracle. It controls how the `NULL` values and empty strings are passed
    in PHP. The possible values are `PDO::NULL_NATURAL` (for no transformation to
    happen), `PDO::NULL_EMPTY_STRING` (for empty strings to be replaced by PHP''s
    null value), and `PDO::NULL_TO_STRING` (for the SQL NULL value is converted to
    an empty string in PHP).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ATTR_ORACLE_NULLS:` 这个属性，尽管名字是这样，但是对所有数据库都有效，不仅仅是Oracle。它控制了`NULL`值和空字符串在PHP中的传递。可能的取值有`PDO::NULL_NATURAL`（表示不进行任何转换），`PDO::NULL_EMPTY_STRING`（表示空字符串将被替换为PHP的null值），以及`PDO::NULL_TO_STRING`（表示SQL的NULL值在PHP中被转换为空字符串）。'
- en: 'You can see how this attribute works in the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到这个属性是如何工作的，下面是代码：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Would result with:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将会产生：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, the highlighted fields are reported as strings, not NULLs (which
    would be the case if we didn't set the `PDO::ATTR_ORACLE_NULLS` attribute).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，高亮显示的字段被报告为字符串，而不是NULL（如果我们没有设置`PDO::ATTR_ORACLE_NULLS`属性的话）。
- en: '`PDO::ATTR_ERRMODE`. This attribute sets the error reporting mode for the connection.
    It accepts three values:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ATTR_ERRMODE`。这个属性设置了连接的错误报告模式。它接受三个值：'
- en: '`PDO::ERRMODE_SILENT:` No action is taken, and the error codes are available
    via `PDO::errorCode()` and `PDO::errorInfo()` methods (or their equivalents in
    the `PDOStatement` class). This is the default value.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ERRMODE_SILENT:` 不采取任何行动，错误代码可以通过`PDO::errorCode()`和`PDO::errorInfo()`方法（或它们在`PDOStatement`类中的等价物）获得。这是默认值。'
- en: '`PDO::ERRMODE_WARNING:` As before, no action is taken, but an error will be
    raised with `E_WARNING` level.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ERRMODE_WARNING:` 与以前一样，不采取任何行动，但会引发一个`E_WARNING`级别的错误。'
- en: '`PDO::ERRMODE_EXCEPTION` will set the error codes (as with `PDO::ERRMODE_SILENT)`,
    and an exception of class `PDOException` will be thrown.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ERRMODE_EXCEPTION`将设置错误代码（与`PDO::ERRMODE_SILENT`一样），并且将抛出一个`PDOException`类的异常。'
- en: 'There are also driver-specific attributes, which we will not cover here. Refer
    to [http://www.php.net/pdo](http://www.php.net/pdo) for more information. However,
    there is one driver-specific attribute worth our attention: `PDO::ATTR_PERSISTENT`.
    You can use it to specify that the MySQL driver should use persistent connections,
    which gives better performance (You can think of this as a counterpart for `mysql_pconnect()`
    function.) This attribute should be set in the PDO constructor rather than via
    a PDO::setAttribute() call:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 还有特定于驱动程序的属性，我们在这里不会涉及。有关更多信息，请参阅[http://www.php.net/pdo](http://www.php.net/pdo)。但是，有一个值得我们关注的特定于驱动程序的属性：`PDO::ATTR_PERSISTENT`。您可以使用它来指定MySQL驱动程序应该使用持久连接，这样可以获得更好的性能（您可以将其视为`mysql_pconnect()`函数的对应物）。此属性应该在PDO构造函数中设置，而不是通过PDO::setAttribute()调用：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The above three attributes are read/write attributes, which means that they
    can be read and written. There are also read-only attributes, available only via
    the `PDO::getAttribute()` method. These attributes may return string values (rather
    than constants defined in the PDO class).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述三个属性是读/写属性，这意味着它们可以被读取和写入。还有只能通过`PDO::getAttribute()`方法获得的只读属性。这些属性可能返回字符串值（而不是在PDO类中定义的常量）。
- en: '`PDO::ATTR_DRIVER_NAME:` This returns the name of the underlying database driver:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ATTR_DRIVER_NAME:` 这将返回底层数据库驱动程序的名称：'
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will print either MySQL or SQLite depending on the driver you use.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出MySQL或SQLite，具体取决于您使用的驱动程序。
- en: '`PDO::ATTR_CLIENT_VERSION:` This returns the name of the underlying database
    client library version. For example, for MySQL this may be something like 5.0.37.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ATTR_CLIENT_VERSION:` 这将返回底层数据库客户端库版本的名称。例如，对于MySQL，这可能是类似于5.0.37的东西。'
- en: '`PDO::ATTR_SERVER_VERSION:` This returns the version of the database server
    you are connecting to. For MySQL, this can be a string such as`"4.1.8-nt"`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ATTR_SERVER_VERSION:` 这将返回您正在连接的数据库服务器的版本。对于MySQL，这可以是一个字符串，比如`"4.1.8-nt"`。'
- en: Let's now get back to our application and modify it to show the database driver
    in the footer of every page. To achieve this, we will modify the `showFooter()`
    function in `common.inc.php:`
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到我们的应用程序，并修改它以在每个页面的页脚中显示数据库驱动程序。为了实现这一点，我们将修改`common.inc.php`中的`showFooter()`函数：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this function, we are importing the `$conn` variable from the global namespace.
    If this variable is an object of the `PDO` class, then we will call the `getAttribute()`
    method as discussed above. We have to do this check because in some situations
    the `$conn` variable may not be set. For example, if the `PDO` constructor fails
    and throws an exception, we will not be able to call any methods on the `$conn`
    variable (this will lead to a fatal error—calling member functions on non-objects
    are fatal errors.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在此函数中，我们从全局命名空间导入了`$conn`变量。如果此变量是`PDO`类的对象，那么我们将调用上面讨论的`getAttribute()`方法。我们必须进行此检查，因为在某些情况下，`$conn`变量可能未设置。例如，如果`PDO`构造函数失败并抛出异常，我们将无法调用`$conn`变量上的任何方法（这将导致致命错误——在非对象上调用成员函数是致命错误）。
- en: 'Since all pages in our application call the `showFooter()` method function,
    this change will be visible everywhere:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们应用程序中的所有页面都调用`showFooter()`方法函数，这个改变将在所有地方都可见：
- en: '![Setting and Getting Connection Attributes](graphics/2660_06_01.jpg)![Setting
    and Getting Connection Attributes](graphics/2660_06_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![设置和获取连接属性](graphics/2660_06_01.jpg)![设置和获取连接属性](graphics/2660_06_02.jpg)'
- en: MySQL Buffered Queries
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL缓冲查询
- en: 'If you are working with a MySQL database only, then you may want to employ
    MySQL''s PDO driver buffered query mode. When the connection is set to the buffered
    query mode, the whole result set for every SELECT query is pre-fetched into memory
    before it is returned to the application. This gives us one benefit—we can use
    the `PDOStatement::rowCount()` method to inspect how many rows the result set
    contains. In [Chapter 2](ch02.html "Chapter 2. Using PHP Data Objects: First Steps"),
    we discussed this method and showed that it returns 0 for MySQL and SQLite databases.
    Now, when PDO is instructed to use buffered queries, this method will return meaningful
    values.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只使用MySQL数据库，那么您可能希望使用MySQL的PDO驱动程序缓冲查询模式。当连接设置为缓冲查询模式时，每个SELECT查询的整个结果集都会在返回到应用程序之前预先获取到内存中。这给我们带来了一个好处——我们可以使用`PDOStatement::rowCount()`方法来检查结果集包含多少行。在[第2章](ch02.html
    "第2章。使用PHP数据对象：第一步")中，我们讨论了这个方法，并展示了它对MySQL和SQLite数据库返回0的情况。现在，当PDO被指示使用缓冲查询时，这个方法将返回有意义的值。
- en: 'To force PDO into MySQL buffered query mode, you have to specify the `PDO::MYSQL_ATTR_USE_BUFFERED_QUERY`
    connection attribute. Consider the following example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要强制PDO进入MySQL缓冲查询模式，您必须指定`PDO::MYSQL_ATTR_USE_BUFFERED_QUERY`连接属性。考虑以下示例：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will print the number of rows returned.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印返回的行数。
- en: 'Please note that this attribute works for MySQL only and is not portable across
    databases. You should use it if your application will be working with MySQL only.
    Also, remember that buffered queries that return large result sets are very expensive
    with respect to resource and should be avoided. If you are going to use buffered
    queries, make sure you disable them before issuing such expensive queries. This
    can be done by turning this attribute off:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此属性仅适用于MySQL，并且在数据库之间不可移植。如果您的应用程序只使用MySQL，应该使用它。此外，请记住，返回大型结果集的缓冲查询在资源方面非常昂贵，应该避免使用。如果要使用缓冲查询，请确保在发出此类昂贵的查询之前禁用它们。可以通过关闭此属性来实现：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can query whether MySQL buffered queries are currently enabled by calling
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用查询MySQL缓冲查询是否当前启用
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I have switched databases for every screenshot (and in the first screenshot
    the page is scrolled down to the bottom to save space).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经为每个截图切换了数据库（并且在第一个截图中，页面向下滚动到底部以节省空间）。
- en: Connecting Using the Connection Configuration File and php.ini Setting
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用连接配置文件和php.ini设置连接
- en: 'When we discussed the connection strings (or the data source names for PDO),
    we saw that the connection string starts with the driver name followed by a semicolon.
    PDO also supports configuration files—a file that contains the connection string.
    For example, we can create a file called `pdo.dsn` in the directory where we can
    keep the application files and put the connection string there:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论连接字符串（或PDO的数据源名称）时，我们看到连接字符串以驱动程序名称开头，后跟一个分号。PDO还支持配置文件 - 包含连接字符串的文件。例如，我们可以在应用程序文件所在的目录中创建一个名为`pdo.dsn`的文件，并在其中放置连接字符串：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Alternatively, we can create two files, `mysql.dsn` and `sqlite.dsn`, containing
    the first and the second connection strings respectively.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以创建两个文件，`mysql.dsn`和`sqlite.dsn`，分别包含第一个和第二个连接字符串。
- en: 'Then in the PDO constructor, we can specify the configuration file path or
    URL, not just the connection string:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在PDO构造函数中，我们可以指定配置文件路径或URL，而不仅仅是连接字符串：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: PDO will read the file and use the connection string specified there. The advantage
    of using this method is that you can specify not just a local file, but any URL
    so that a remote file can be included (provided a suitable stream handler is registered
    in the system for a protocol such as HTTP or FTP). On the other hand, if the file
    is not properly protected from web access by all users, then it can potentially
    leak secure information to a third party, so care should be taken when this method
    is being used to specify the connection string.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: PDO将读取文件并使用其中指定的连接字符串。使用此方法的优势在于，您不仅可以指定本地文件，还可以指定任何URL，以便包含远程文件（前提是系统为诸如HTTP或FTP之类的协议注册了合适的流处理程序）。另一方面，如果文件未受到所有用户的网络访问保护，则可能会向第三方泄露安全信息，因此在使用此方法指定连接字符串时应谨慎。
- en: 'There is also another way of specifying the connection string: in the `php.ini`
    file. For example, you can define the following directives in the `php.ini` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种指定连接字符串的方法：在`php.ini`文件中。例如，您可以在`php.ini`文件中定义以下指令：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'then it is possible to pass ''mysql'' or ''sqlite'' strings to the `PDO` constructor
    instead of the whole connection strings for mysql and sqlite, respectively:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以分别将'mysql'或'sqlite'字符串传递给`PDO`构造函数，而不是整个mysql和sqlite的连接字符串：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, the connection string in this case should match the corresponding
    option in the `php.ini` file with the `'pdo.dsn'` prefix.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此处的连接字符串应与`php.ini`文件中的相应选项匹配，带有`'pdo.dsn'`前缀。
- en: Getting the List of Available Drivers
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取可用驱动程序列表
- en: 'PDO allows you to programmatically get the list of all installed drivers. The
    `PDO::getAvailableDrivers()` method can be called to return an array containing
    the names of the database drivers that can be used. For example, this code will
    print something similar to the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: PDO允许您以编程方式获取所有已安装驱动程序的列表。可以调用`PDO::getAvailableDrivers()`方法返回一个包含可以使用的数据库驱动程序名称的数组。例如，此代码将打印类似以下内容的内容：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The names of drivers, contained in this array, are the prefixes for the connection
    strings. Also, the same name is returned as the value of the `PDO::ATTR_DRIVER_NAME`
    attribute.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此数组中包含的驱动程序名称是连接字符串的前缀。同时，相同的名称作为`PDO::ATTR_DRIVER_NAME`属性的值返回。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `PDO::getAvailableDrivers()` method returns the names of drivers that are
    registered with the PDO system in the `php.ini` file. You may not be able to use
    all of these drivers on the local machine—for example, if the MySQL server is
    not running then the presence of a MySQL item in the returned array does not mean
    that you can connect to the local MySQL server, and if a certain database server
    is running on the local machine but its driver is not registered with PDO, then
    you will not be able to connect to that database server.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`PDO::getAvailableDrivers()`方法返回在`php.ini`文件中注册到PDO系统的驱动程序的名称。您可能无法在本地机器上使用所有这些驱动程序
    - 例如，如果MySQL服务器未运行，则返回的数组中存在MySQL项目并不意味着您可以连接到本地MySQL服务器，如果某个数据库服务器在本地机器上运行，但其驱动程序未注册到PDO，则您将无法连接到该数据库服务器。'
- en: Transactions
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易
- en: PDO API also standardises the transaction handling methods. By default, after
    the successful creation of the PDO connection, it is set to `autocommit` mode.
    This means that for every database that supports transactions, every query is
    wrapped in an implicit transaction. For those database that do not support transactions,
    every query is executed as is.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: PDO API还标准化了事务处理方法。默认情况下，在成功创建PDO连接后，它被设置为`autocommit`模式。这意味着对于每个支持事务的数据库，每个查询都包装在一个隐式事务中。对于那些不支持事务的数据库，每个查询都会按原样执行。
- en: 'Typically, the transaction handling strategy is this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，事务处理策略是这样的：
- en: Begin the transaction.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始交易。
- en: Wrap the database-related code in a *try...catch* block.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将与数据库相关的代码放在*try...catch*块中。
- en: The database-related code (within the *try* block) should commit the changes
    after all the updates have been done.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与数据库相关的代码（在*try*块中）应在所有更新完成后提交更改。
- en: The *catch* block should rollback the transaction.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*catch*块应回滚事务。'
- en: 'Of course, only the code that updates the database and the code that can break
    data integrity should be handled in a transaction. A classic example of a transaction
    is a money transfer:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，只有更新数据库的代码和可能破坏数据完整性的代码应该在事务中处理。交易的一个经典例子是资金转移：
- en: Begin the transaction.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始交易。
- en: 'If there is enough money on the payer''s account:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果付款人的帐户上有足够的钱：
- en: Subtract the amount from the payer's account.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从付款人的帐户中扣除金额。
- en: Add the amount to the beneficiary's account.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向受益人的帐户中添加金额。
- en: Commit the transaction.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交交易。
- en: If anything bad happens in the middle of a transaction, the database does not
    get updated and the data integrity is preserved. Also, by wrapping the account
    balance check into the transaction, we ensure that a concurrent update does not
    corrupt data integrity.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在交易中间发生了任何不好的事情，数据库不会得到更新，数据完整性得到保留。此外，通过将帐户余额检查包装到交易中，我们确保并发更新不会破坏数据完整性。
- en: 'PDO offers just three methods for transactions handling: `PDO::beginTransaction()`
    which initiates the transaction, `PDO::commit()` which commits the changes made
    since the call to `PDO::beginTransaction()`, and `PDO::rollBack()`, which rolls
    back any changes since the transaction has been initiated.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: PDO只提供了三种处理事务的方法：`PDO::beginTransaction()`用于启动事务，`PDO::commit()`用于提交自从调用`PDO::beginTransaction()`以来所做的更改，`PDO::rollBack()`用于回滚自从启动事务以来的任何更改。
- en: The `PDO::beginTransaction()` method does not accept any parameters and returns
    a Boolean value depending on the success of the transaction initiation. If the
    call to this method fails, then PDO will throw an exception (for example, if you
    are already in the middle of a transaction, PDO will tell you so). Likewise, the
    `PDO::rollBack()` method will throw an exception if there is no active transaction,
    and the same will happen if you call the `PDO::commit()` method before calling
    `PDO::beginTransaction()`. (Of course, your error handling mode must be set to
    `PDO::ERRMODE_EXCEPTION` for the exceptions to be thrown.)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`PDO::beginTransaction()`方法不接受任何参数，并根据事务启动的成功与否返回一个布尔值。如果调用此方法失败，PDO将抛出一个异常（例如，如果您已经处于事务中，PDO会告诉您）。同样，如果没有活动事务，`PDO::rollBack()`方法将抛出一个异常，如果在调用`PDO::beginTransaction()`之前调用`PDO::commit()`方法，也会发生相同的情况。（当然，您的错误处理模式必须设置为`PDO::ERRMODE_EXCEPTION`才能抛出异常。）'
- en: You should also be noted that you should not use direct queries to control transactions
    if you are using PDO for that task. By this, we mean that you should not issue
    queries such as `BEGIN TRANSATION, COMMIT`, or `ROLLBACK` with the `PDO::query()`
    method. Otherwise, the behaviour of these three methods will be inconsistent.
    Also, PDO does not currently support savepoints.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 还应该注意，如果您正在使用PDO进行任务控制，不应该使用直接查询来控制事务。我们的意思是，您不应该使用诸如`BEGIN TRANSATION，COMMIT`或`ROLLBACK`等查询来使用`PDO::query()`方法。否则，这三种方法的行为将是不一致的。此外，PDO目前不支持保存点。
- en: Let’s now get back to our library application. To see how transactions work
    in practice, we will modify it by allowing it to track how many copies of a certain
    book we have, and we will implement a function to keep track of people to whom
    we have lent books.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到我们的图书馆应用程序。为了看看事务是如何实际工作的，我们将修改它，使其能够跟踪我们有多少本特定书籍的副本，并实现一个函数来跟踪我们借出书籍的人。
- en: 'This modification will encompass the following changes:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个修改将包括以下更改：
- en: We will have to alter the books table by adding a new column to keep the number
    of copies of every book. The `editBook.php` page will need to be modified in order
    to change this value
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将不得不通过向书籍表添加一个新列来修改书籍表，以保留每本书的副本数量。`editBook.php`页面将需要修改以更改这个值。
- en: We will create a table to keep track of all borrowers, but to keep the example
    simple, we will not create a table of borrowers (as we for a real-life library
    application). We will just associate a borrowers name with the book ID of the
    book that we have lent them.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将创建一个表来跟踪所有借阅者，但为了简化示例，我们不会创建一个借阅者表（就像我们为真实的图书馆应用程序所做的那样）。我们只会将借阅者的姓名与我们借给他们的书籍的书籍ID关联起来。
- en: We will create a page that will be used when we lend a book. This page, will
    ask for the borrowers name and then insert a record into the borrowers table and
    decrease the number of copies in the books table.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将创建一个页面，用于借出书籍。这个页面将要求借阅者的姓名，然后将记录插入到借阅者表中，并减少书籍表中的副本数量。
- en: We will also need a page, which will list all borrowers and another script,
    which will allow them to return a book. This script will delete a record from
    the borrowers table and increase the number of copies in the books table.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要一个页面，用于列出所有借阅者，以及另一个脚本，允许他们归还书籍。这个脚本将从借阅者表中删除一条记录，并增加书籍表中的副本数量。
- en: We will use transactions only when we update two tables at once (as in the last
    two points in the above list).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只在同时更新两个表时使用事务（就像上面列表中的最后两点）。
- en: 'Before we do the coding, we will alter the books table:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行编码之前，我们将修改书籍表：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The same command should be executed for SQLite.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQLite，应该执行相同的命令。
- en: 'Now, let''s modify `books.php` a bit to show how many copies of each book we
    have and to provide a link. Here are the line of code that will need to be changed
    (lines 20 to 58):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们稍微修改`books.php`，以显示每本书的副本数量，并提供一个链接。以下是需要更改的代码行（第20至58行）：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, for both MySQL and SQLite you should see a page like the following screenshot
    (where we have scrolled downwards and to the right so that it will fit onto the
    page):'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于MySQL和SQLite，您应该看到一个页面，就像以下的屏幕截图一样（我们已经向下滚动并向右滚动，以便它适合页面）：
- en: '![Transactionsdriver listgetting, getAvailableDrivers() method used](graphics/2660_06_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Transactionsdriver listgetting, getAvailableDrivers() method used](graphics/2660_06_03.jpg)'
- en: 'Now, let''s create the borrowers table. As we have previously discussed, the
    table will contain an ID field, the book''s ID field, borrower''s name, and a
    timestamp column. We will need an ID (primary key) on this table to prevent possible
    data corruption; for example, if the same borrower takes the same book twice.
    If we were tracking borrowers by name and book ID only, then we could have duplicate
    records in that table and the return of a single book could delete several rows
    in this table, which would lead to data corruption:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建借阅者表。正如我们之前讨论过的，该表将包含一个ID字段，书籍的ID字段，借阅者的姓名和一个时间戳列。我们需要在这个表上有一个ID（主键），以防止可能的数据损坏；例如，如果同一个借阅者两次借同一本书。如果我们只通过姓名和书籍ID跟踪借阅者，那么在该表中可能会有重复的记录，而归还一本书可能会删除该表中的多行，这将导致数据损坏：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'For SQLite, the syntax will be a bit different:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQLite，语法会有些不同：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The page to *lend* the book (`lendBook.php`) is probably the most difficult
    part. This page will consist of a form where you can enter the borrower's name.
    Upon successful submission, the script will initiate the transaction, check that
    there is at least one copy of the book available, insert a record into the borrowers
    table and decrease the copies column in the books table, commit the transaction,
    and redirect to the `books.php` page.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 借出图书的页面（`lendBook.php`）可能是最困难的部分。这个页面将包括一个表单，您可以在其中输入借阅者的姓名。提交成功后，脚本将启动事务，检查图书是否至少有一本可用，向借阅者表插入一条记录并减少图书表中的副本列，提交事务，并重定向到`books.php`页面。
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let's run through the code now. We begin by checking that the book's ID has
    been passed to the script either via the URL or via the form. (We keep the ID
    in the hidden field of the form.) Then, if there is a form submission (with the
    submit button pressed), we check that the name field was correctly filled. If
    the test succeeds, we proceed to the transaction, where we count how many copies
    are left and check that this number is greater than zero, we decrease the copies
    column and use a prepared statement to insert a record into the `borrowers` table.
    If there is less than one copy, we add a message to the `$warnings` array so that
    a warning is displayed on the page.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看代码。我们首先检查图书的ID是否通过URL或表单传递给脚本。（我们将ID保存在表单的隐藏字段中。）然后，如果有表单提交（按下提交按钮），我们检查姓名字段是否填写正确。如果测试成功，我们继续进行事务，在其中计算剩余的副本数量，并检查这个数字是否大于零，我们减少副本列，并使用准备好的语句将一条记录插入到`borrowers`表中。如果副本少于一本，我们向`$warnings`数组添加一条消息，以便在页面上显示警告。
- en: If there is some failure within the transaction, the `catch` block will be executed.
    The transaction will be rolled back and the exception will be thrown again. We
    do this in order to let our default error handler do its job.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事务中出现故障，将执行`catch`块。事务将被回滚，并且异常将再次被抛出。我们这样做是为了让我们的默认错误处理程序发挥作用。
- en: 'Now, if you save the above code listing in `lendBook.php` and click on one
    of the **Lend** links on the books listing page, you should arrive at the following
    page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您将上面的代码列表保存在`lendBook.php`中，并点击图书列表页面上的一个**借出**链接，您应该会到达以下页面：
- en: '![Transactionsdriver listgetting, getAvailableDrivers() method used](graphics/2660_06_04.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Transactionsdriver listgetting, getAvailableDrivers() method used](graphics/2660_06_04.jpg)'
- en: Of course, you should switch between databases to see that the code works with
    MySQL and SQLite.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你应该在数据库之间切换，以查看代码是否与MySQL和SQLite一起工作。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To enhance the page, we should also show the title and the author of the book,
    but we will leave that to you. Also, if you are wondering why we are alerting
    users that there are no more copies only after the form submission, this is because
    we can decide on that within the transaction only. If we detect that there are
    copies available within the transaction, only then we may be assured that no concurrent
    update will change that. Of course, from the user's perspective, another addition
    might be a warning displayed along with the book's details. However, a check within
    the transaction is required too.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强页面，我们还应该显示图书的标题和作者，但这部分留给你。另外，如果你想知道为什么我们在表单提交后才警告用户没有更多的副本，这是因为我们只能在事务中决定这一点。如果我们在事务中检测到有副本可用，那么我们才能确保没有并发更新会改变这一点。当然，从用户的角度来看，另一个补充可能是在图书详情旁边显示一个警告。然而，事务中也需要进行检查。
- en: 'Now, if you *lend* a book you will see that the **Copies** column on the books
    listing page has decreased. Let''s now create the page where all the borrowers
    and the books lent to them will be listed. Let''s call it `borrowers.php`. While
    this page does not process any user input, it contains a query that joins three
    tables (borrowers, books, and authors):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您借出一本书，您会看到图书列表页面上的**副本**列已经减少。现在，让我们创建一个页面，列出所有借阅者和借给他们的图书。让我们称之为`borrowers.php`。虽然这个页面不处理任何用户输入，但它包含一个查询，连接了三个表（借阅者、图书和作者）：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The code is easy to follow; it follows the same logic as `books.php` or `authors.php`.
    However, since this page isn't linked from anywhere, we should add a link to it
    in the site header (the `showHeader()` function in `common.inc.php):`
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 代码很容易理解；它遵循与`books.php`或`authors.php`相同的逻辑。但是，由于这个页面没有从任何地方链接过来，我们应该在网站页眉（`common.inc.php`中的`showHeader()`函数）中添加一个链接：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, if you navigate to `borrowers.php`, you should see something like this
    screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您导航到`borrowers.php`，您应该看到类似于这个屏幕截图的东西：
- en: '![Transactionsdriver listgetting, getAvailableDrivers() method used](graphics/2660_06_05.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![Transactionsdriver listgetting, getAvailableDrivers() method used](graphics/2660_06_05.jpg)'
- en: 'As we can see, this page contains links to the `returnBook.php` page, which
    does not exist as yet. This script will delete the relevant record from the borrowers
    table and increment the copies column in the books table. This operation will
    be wrapped in a transaction, too. Also, `returnBook.php` accepts the borrower''s
    table ID field, (as opposed to `lendBook.php`, which accepted the book''s ID).
    So we should also get the book''s ID from the borrowers table:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，这个页面包含指向`returnBook.php`页面的链接，但这个页面还不存在。这个脚本将从借阅者表中删除相关记录，并增加图书表中的副本列。这个操作也将被包装在一个事务中。此外，`returnBook.php`接受借阅者表的ID字段（与`lendBook.php`接受图书的ID相反）。因此，我们还应该从借阅者表中获取图书的ID：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The code should be fairly self-descriptive. In the first place we check that
    the request contains the borrower's ID and then update both tables. Upon successful
    completion we get redirected to the books listing page, otherwise, the error handler
    will display a relevant message.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 代码应该是相当自解释的。首先，我们检查请求是否包含借阅者的ID，然后更新两个表。成功完成后，我们将被重定向到图书列表页面，否则，错误处理程序将显示相关消息。
- en: 'Now, the final touch: the `editBook.php` page, which can be used to edit how
    many copies of the book we have. We will leave this to you, but here are some
    considerations. The suggested way of keeping track of books that have been lent
    is not very good for a real life library application. Instead of keeping the number
    of copies available, we should keep the total number of copies in the library
    in one column and the number of copies that have been lent in another column.
    This should be done, because editing the number of books available may lead to
    data corruption. Returning a book will increment the copies column in the books
    table. If someone else is editing the number of copies available at the same time,
    they may not know that a borrower is returning a book and hence may enter an incorrect
    number.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，最后的一步：`editBook.php`页面，可以用来编辑我们拥有的书籍副本数量。我们将把这个任务留给你，但这里有一些考虑。跟踪已借出的书籍的建议方式对于实际的图书馆应用来说并不是很好。我们应该保留图书馆中总副本数的一个列，以及已借出的副本数的另一个列，而不是保留可用副本数。这样做是因为编辑可用书籍的数量可能会导致数据损坏。归还一本书将增加图书表中的副本列。如果同时有其他人在编辑可用副本数，他们可能不知道借阅者正在归还一本书，因此可能输入一个不正确的数字。
- en: On the other hand, if there were two separate columns, then updating the total
    number of copies would be completely independent from the updates caused by the
    books being lent and returned. In this scenario, however, the script that lends
    a book should check that the number of copies that have been lent is less than
    the total number of copies. The transaction should continue only if this condition
    is satisfied.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果有两个独立的列，那么更新总副本数将完全独立于借出和归还书籍所引起的更新。然而，在这种情况下，借书的脚本应该检查已借出的副本数是否小于总副本数。只有在满足这个条件的情况下，事务才能继续。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have taken a look at some of the extended functionality
    offered by PDO, especially transactions. Our application example was modified
    to provide additional functionality that relies on transactions. We also looked
    at the organization of the transaction-aware code.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一些PDO提供的扩展功能，特别是事务。我们修改了应用示例，提供了依赖事务的额外功能。我们还看了事务感知代码的组织。
- en: However, as you might have noticed, we were mixing code that updates databases,
    processes user input, and renders pages in one file. While we tried to keep the
    input processing and presentation in different parts of one file (first data processing,
    then page rendering), we could not separate data processing.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如你可能已经注意到的，我们在一个文件中混合了更新数据库、处理用户输入和呈现页面的代码。虽然我们试图将输入处理和呈现分开放在一个文件的不同部分（首先是数据处理，然后是页面呈现），但我们无法分开数据处理。
- en: In the next chapter, we will see how to separate the data model and the application
    logic so that the data can be accessed and manipulated from elsewhere, not just
    from our application. We will develop a data model class that will encapsulate
    our library application data handling methods. This class can then be used from
    other applications.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何分离数据模型和应用逻辑，以便数据不仅可以从我们的应用程序中访问和操作，还可以从其他地方访问和操作。我们将开发一个数据模型类，封装我们的图书馆应用程序数据处理方法。然后这个类可以被其他应用程序使用。
