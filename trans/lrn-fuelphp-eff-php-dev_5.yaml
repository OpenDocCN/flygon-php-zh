- en: Chapter 5. Packages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。包
- en: In the previous chapter, we used packages to make our lives easier. We used
    Oil to quickly get up and running, as well as the Auth package that helped with
    user authentication.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用包来使我们的生活更轻松。我们使用了Oil来快速启动和运行，以及帮助用户认证的Auth包。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is a package?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是包？
- en: Recommended packages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐的包
- en: Working with the Auth package for user authentication
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Auth包进行用户认证
- en: What is Composer and how to use it?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Composer以及如何使用它？
- en: An introduction to building your own package
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自己的包的介绍
- en: What is a package?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是包？
- en: As developers, we often have code that we use on multiple projects. It could
    be as simple as string manipulation, but we would be lost without the code we
    are familiar with.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们经常有一些我们在多个项目中使用的代码。它可能只是简单的字符串操作，但如果没有我们熟悉的代码，我们会感到迷失。
- en: This is where packages come in useful. They give a great way of organizing,
    re-using, and sharing your code. Packages can contain all sorts of code, such
    as models, configurations, and even third-party libraries.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是包派上用场的地方。它们提供了一个很好的组织、重用和共享代码的方式。包可以包含各种代码，比如模型、配置，甚至第三方库。
- en: Due to the class structure of FuelPHP and other packages, it's possible to extend
    other packages and to the FuelPHP core. This is all possible without changing
    the core files—making upgrades easier and more straightforward.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于FuelPHP和其他包的类结构，可以扩展其他包和FuelPHP核心。这一切都可以在不更改核心文件的情况下实现，使升级更加容易和简单。
- en: Although there is a lot that packages can do, there are some things that packages
    can't do. For example, they can't map to a URL; this is the role of the application
    or project code. If there is a functionality that you'll re-use in multiple projects
    and which also requires URL access, it is recommended to use modules. These will
    be introduced in the next chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管包可以做很多事情，但也有一些包做不到的事情。例如，它们无法映射到URL；这是应用程序或项目代码的作用。如果有一个功能在多个项目中需要重复使用，并且还需要URL访问，建议使用模块。这将在下一章中介绍。
- en: Running through some recommended packages is a great way to demonstrate what
    is possible when using packages.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 运行一些推荐的包是展示使用包时可能发生的事情的好方法。
- en: Recommended packages
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐的包
- en: Although your requirements may differ, in this section we'll introduce a few
    packages that often come in useful.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您的需求可能不同，在本节中我们将介绍一些经常有用的包。
- en: OAuth
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OAuth
- en: The internet nowadays is filled with big players like Facebook and Twitter,
    each one has a different structure and use; but they all support a version of
    **OAuth** for user authentication. This means that many projects may require the
    use of OAuth for user authentication and single sign-ins.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如今的互联网充满了像Facebook和Twitter这样的大玩家，每个玩家都有不同的结构和用途；但它们都支持用户认证的**OAuth**的一个版本。这意味着许多项目可能需要使用OAuth进行用户认证和单一登录。
- en: One highly-recommended package is a port from the Kohana PHP framework ([http://kohanaframework.org](http://kohanaframework.org)).
    It can be found at [https://github.com/fuel-packages/fuel-oauth](https://github.com/fuel-packages/fuel-oauth).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个高度推荐的包是从Kohana PHP框架（[http://kohanaframework.org](http://kohanaframework.org)）移植而来的。它可以在[https://github.com/fuel-packages/fuel-oauth](https://github.com/fuel-packages/fuel-oauth)找到。
- en: 'This package handles the authentication with third-party services such as:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包处理与第三方服务的认证，比如：
- en: Dropbox
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dropbox
- en: Flickr
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flickr
- en: LinkedIn
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领英
- en: Tumblr
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tumblr
- en: Twitter
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推特
- en: Vimeo
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vimeo
- en: When using this package, you'll need to copy the configuration file to your
    application configuration directory. This will allow you to add your consumer
    key and secret for the third party systems.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这个包时，您需要将配置文件复制到应用程序配置目录。这将允许您为第三方系统添加您的消费者密钥和密钥。
- en: OAuth2
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OAuth2
- en: 'You would have noticed that Facebook was missing from the available interactions
    for the OAuth package. This was mainly due to Facebook using the **OAuth2** standard
    ([http://oauth.net/2](http://oauth.net/2)). Although it does a similar job to
    the first package, you may find the OAuth2 package useful. This package can be
    found at [https://github.com/fuel-packages/fuel-oauth2](https://github.com/fuel-packages/fuel-oauth2)
    and supports the following third-party services:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，Facebook在OAuth包的可用交互中缺失了。这主要是因为Facebook使用**OAuth2**标准（[http://oauth.net/2](http://oauth.net/2)）。尽管它与第一个包执行的工作类似，但您可能会发现OAuth2包有用。这个包可以在[https://github.com/fuel-packages/fuel-oauth2](https://github.com/fuel-packages/fuel-oauth2)找到，并支持以下第三方服务：
- en: Facebook
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脸书
- en: Foursquare
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Foursquare
- en: GitHub
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: Google
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌
- en: PayPal
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PayPal
- en: Instagram
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Instagram
- en: Soundcloud
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Soundcloud
- en: Windows Live
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Live
- en: YouTube
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YouTube
- en: As with the previous package, you will need to create the controller and application
    code to make use of the authentication data from OAuth.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的包一样，您需要创建控制器和应用程序代码，以利用来自OAuth的认证数据。
- en: Mandrill
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mandrill
- en: Sometimes, we need to send e-mails. Although it is certainly easier to use the
    default `mail()` PHP function, this method is not always reliable. Sometimes,
    the `mail()` function will silently fail. This is where third-party systems come
    in handy. There are several large e-mail services, such as **Campaign Monitor**
    and **MailChimp**. These tend to be e-mail campaign and mailing lists. Luckily
    for us, MailChimp have opened their infrastructure in the form of **Mandrill**
    ([http://mandrill.com](http://mandrill.com)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要发送电子邮件。尽管使用默认的`mail()` PHP函数肯定更容易，但这种方法并不总是可靠的。有时，`mail()`函数会悄悄失败。这就是第三方系统派上用场的地方。有几个大型的电子邮件服务，比如**Campaign
    Monitor**和**MailChimp**。这些通常是电子邮件活动和邮件列表。幸运的是，MailChimp已经以**Mandrill**（[http://mandrill.com](http://mandrill.com)）的形式开放了他们的基础设施。
- en: The Fuel Mandrill package is an unofficial one and can be obtained from [https://github.com/Izikd/fuel-mandrill](https://github.com/Izikd/fuel-mandrill).
    It is a package wrapper for the official Mandrill API library, so you can be confident
    that it will work fine.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Fuel Mandrill包是一个非官方包，可以从[https://github.com/Izikd/fuel-mandrill](https://github.com/Izikd/fuel-mandrill)获取。它是官方Mandrill
    API库的包装器，因此您可以放心它会正常工作。
- en: Sprockets
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sprockets
- en: Frontend development and HTML is starting to become more structured with compilers
    such as LESS, Sass, and Compass. Usually, we need to compile the assets for serving
    on the Web with external libraries or tools. The Sprockets package is inspired
    by the Ruby on Rails asset pipeline ([http://guides.rubyonrails.org/asset_pipeline.html](http://guides.rubyonrails.org/asset_pipeline.html)).
    It handles this compiling for using ports of Sass, LESS, and CoffeeScript compilers.
    More information and installation instructions are available at [https://github.com/vesselinv/fuel-sprockets](https://github.com/vesselinv/fuel-sprockets).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前端开发和HTML正开始变得更加结构化，使用诸如LESS、Sass和Compass之类的编译器。通常，我们需要使用外部库或工具编译Web上的资产。Sprockets包受到Ruby
    on Rails资产管道的启发（[http://guides.rubyonrails.org/asset_pipeline.html](http://guides.rubyonrails.org/asset_pipeline.html)）。它处理了使用Sass、LESS和CoffeeScript编译器的端口进行编译。更多信息和安装说明可在[https://github.com/vesselinv/fuel-sprockets](https://github.com/vesselinv/fuel-sprockets)找到。
- en: Using the Auth package for user authentication
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Auth包进行用户身份验证
- en: Although we touched upon the Auth package in [Chapter 4](ch04.html "Chapter 4. Demo
    Application"), *Demo Application*, let's examine the package in detail.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在[第4章](ch04.html "第4章。演示应用程序")中提到了Auth包，*演示应用程序*，让我们详细地检查一下这个包。
- en: The `Auth` package is not part of the FuelPHP core, it provides a standardized
    interface for the user authentication in FuelPHP. This allows developers to write
    their own drivers and easily integrate a new driver to work with the old code,
    but still keep the methods consistent.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auth`包不是FuelPHP核心的一部分，它为FuelPHP中的用户身份验证提供了一个标准化的接口。这使开发人员可以编写自己的驱动程序，并轻松地集成新的驱动程序以与旧代码一起工作，但仍然保持方法一致。'
- en: 'The `Auth` package includes three basic drivers: login, group, and **ACL**
    (**Access Control List**). It is worth noting that login drivers can handle multiple
    login drivers at the same time. For example, users could log in using a username
    and password pair, or authenticate via a third-party system, such as Twitter.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`Auth`包包括三个基本驱动程序：登录、组和**ACL**（**访问控制列表**）。值得注意的是，登录驱动程序可以同时处理多个登录驱动程序。例如，用户可以使用用户名和密码对进行登录，或者通过第三方系统（如Twitter）进行身份验证。'
- en: Three of the included drivers are **SimpleAuth**, **ORMAuth**, and **OPAuth**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 包括的三个驱动程序是**SimpleAuth**、**ORMAuth**和**OPAuth**。
- en: SimpleAuth
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SimpleAuth
- en: 'This is a simple authentication system that uses a database table to store
    user information. It stores information regarding groups, roles, and ACLs in a
    configuration file. It was used as part of the administration system. As we saw
    in [Chapter 4](ch04.html "Chapter 4. Demo Application"), *Demo Application*, SimpleAuth
    includes the migrations necessary to create the database tables that store the
    user information. Simply configuring your application to use SimpleAuth and then
    running the following command will create the tables:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的身份验证系统，它使用数据库表来存储用户信息。它在配置文件中存储有关组、角色和ACL的信息。它被用作管理系统的一部分。正如我们在[第4章](ch04.html
    "第4章。演示应用程序")中所看到的，*演示应用程序*，SimpleAuth包括创建存储用户信息的数据库表所需的迁移。只需配置应用程序以使用SimpleAuth，然后运行以下命令即可创建表格：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'More information on configuring SimpleAuth, along with usage examples can be
    found at the following link:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置SimpleAuth的更多信息以及使用示例可以在以下链接找到：
- en: '[http://fuelphp.com/docs/packages/auth/simpleauth/intro.html](http://fuelphp.com/docs/packages/auth/simpleauth/intro.html)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/packages/auth/simpleauth/intro.html](http://fuelphp.com/docs/packages/auth/simpleauth/intro.html)'
- en: ORMAuth
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ORMAuth
- en: This is similar to SimpleAuth in many aspects except that it stores all the
    configuration in the database rather than in a configuration file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，这与SimpleAuth类似，只是它将所有配置存储在数据库中，而不是在配置文件中。
- en: The user controls and roles can be more fine grained and assigned to individual
    users. Unlike SimpleAuth, the user attributes are stored in a metadata table rather
    than a serialized array in the user table. Another nice feature is that a history
    of user login times is kept.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 用户控件和角色可以更加精细化，并分配给个别用户。与SimpleAuth不同，用户属性存储在元数据表中，而不是在用户表中的序列化数组中。另一个不错的功能是保留用户登录时间的历史记录。
- en: To enable the ORMAuth package, you will need to add `ORMAuth` to the `always
    load` code section in the `app/config/config.php` file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用ORMAuth包，您需要将`ORMAuth`添加到`app/config/config.php`文件中的`always load`代码部分。
- en: 'More information can be found at the following link:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以在以下链接找到：
- en: '[http://fuelphp.com/docs/packages/auth/ormauth/usage.html](http://fuelphp.com/docs/packages/auth/ormauth/usage.html)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/packages/auth/ormauth/usage.html](http://fuelphp.com/docs/packages/auth/ormauth/usage.html)'
- en: OPAuth
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OPAuth
- en: This is the most complex of the three provided drivers. It supports authentication
    against OAuth and OpenID providers. It also supports single sign-in; so, when
    a user is logged into a third-party site, such as Twitter, OPAuth will be able
    to detect the session and log in the user transparently.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是提供的三个驱动程序中最复杂的一个。它支持对OAuth和OpenID提供程序进行身份验证。它还支持单一登录；因此，当用户登录到第三方网站（如Twitter）时，OPAuth将能够检测到会话并透明地登录用户。
- en: 'More information on the OPAuth driver can be obtained at the following link:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有关OPAuth驱动程序的更多信息可以在以下链接找到：
- en: '[http://fuelphp.com/docs/packages/auth/opauth/intro.html](http://fuelphp.com/docs/packages/auth/opauth/intro.html)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/packages/auth/opauth/intro.html](http://fuelphp.com/docs/packages/auth/opauth/intro.html)'
- en: 'As you saw in the scaffolding of the journal administration system, the authentication
    methods will need to be implemented in our application. The Auth methods are well
    documented and named as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在日志管理系统的脚手架中所看到的，身份验证方法将需要在我们的应用程序中实现。Auth方法有很好的文档，并且命名如下：
- en: '`Auth::check()`: This method checks if the user is authenticated and returns
    a Boolean true or false'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Auth::check()`: 此方法检查用户是否已经认证，并返回一个布尔值true或false'
- en: '`Auth::remember_me()`: This method creates a "remember me" cookie'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Auth::remember_me()`: 此方法创建一个“记住我”cookie'
- en: '`Auth::dont_remember_me()`: This method deletes the "remember me" cookie'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Auth::dont_remember_me()`: 此方法删除“记住我”cookie'
- en: '`Auth::logout()`: This method logs the user out'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Auth::logout()`: 此方法注销用户'
- en: '`Auth::create_user( array())`: This method registers a user'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Auth::create_user( array())`: 此方法注册一个用户'
- en: Every web application is different, but at least the FuelPHP Auth package gives
    a good starting point for user authentication. It's usually good enough for the
    majority of uses.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Web应用程序都是不同的，但至少FuelPHP Auth软件包为用户认证提供了一个很好的起点。对于大多数用途来说，这通常已经足够了。
- en: Composer
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer
- en: There are currently a lot of ways to manage code and install third-party functionality.
    The Ruby world has the Gem packaging system. As mentioned in [Chapter 1](ch01.html
    "Chapter 1. What is FuelPHP?") *, What is FuelPHP?*, the framework is adopting
    the PHP coding and interoperability standards. Part of this is the ability to
    use code from other frameworks without rewriting them to a FuelPHP package.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有很多种方法来管理代码和安装第三方功能。Ruby世界有Gem打包系统。正如在[第1章](ch01.html "第1章。什么是FuelPHP?")中提到的，FuelPHP正在采用PHP编码和互操作标准。其中之一是能够在不重写为FuelPHP软件包的情况下使用其他框架的代码。
- en: During the life span of a project, the packages may change with new functionality
    and security fixes. Like Bundler for Ruby on Rails, PHP has a dependency manager
    called Composer.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的生命周期中，软件包可能会随着新功能和安全修复而发生变化。就像Ruby on Rails的Bundler一样，PHP有一个名为Composer的依赖管理器。
- en: Composer allows you to declare which versions of libraries to install in your
    project, and it will install them for you. This is great when developing and testing,
    as you know exactly what code is installed. It also allows you to source control
    any changes to those libraries.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Composer允许您声明要在项目中安装哪些库的版本，并将为您安装它们。在开发和测试时非常有用，因为您知道确切安装了哪些代码。它还允许您对这些库的任何更改进行源代码控制。
- en: 'Although it is still early days for FuelPHP packages and Composer, there are
    a few packages available at the following link:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管FuelPHP软件包和Composer仍处于早期阶段，但可以在以下链接找到一些软件包：
- en: '[https://packagist.org/search/?q=fuel-](https://packagist.org/search/?q=fuel-)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packagist.org/search/?q=fuel-](https://packagist.org/search/?q=fuel-)'
- en: To add more dependencies to your project, simply change the `composer.json`
    file found at `~/Sites/journal/composer.json`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要向项目添加更多依赖项，只需更改`~/Sites/journal/composer.json`中找到的`composer.json`文件。
- en: 'Once you have found a package you would like to use with Composer, it is a
    case of adding something like the following code in your `composer.json` file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到要在Composer中使用的软件包，就需要在您的`composer.json`文件中添加类似以下代码：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will ensure that you have the latest point release of the Monolog 1.2 package.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保您拥有Monolog 1.2软件包的最新点版本。
- en: An introduction to building your own package
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自己的软件包简介
- en: As you have seen so far, packages are very useful, besides they can also be
    simple to create. We will run through some of the basics in this section while
    creating a text manipulation package.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经看到软件包非常有用，而且创建起来也很简单。在本节中，我们将通过创建一个文本操作软件包来介绍一些基础知识。
- en: Setting up a repository
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置存储库
- en: The first thing to do is set up a repository. Like in the previous chapter,
    we will use GitHub.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是设置一个存储库。就像在上一章中一样，我们将使用GitHub。
- en: We will be creating a package called **Journal String**; this will have a repository
    name of `journal-string`. Ordinarily, it is recommend to use something like Fuel
    String, but since this is a simple example, it's not necessary to include Fuel
    within the title of the package.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为**Journal String**的软件包；这将有一个名为`journal-string`的存储库名称。通常建议使用类似Fuel String的名称，但由于这只是一个简单的例子，因此不需要在软件包标题中包含Fuel。
- en: We will be using the new repository as a submodule within the journal project,
    so make sure you make a note of the repository address, which will be something
    like `git@github.com:digitales/journal-string.git`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用新的存储库作为日志项目中的一个子模块，因此请确保记下存储库地址，类似于`git@github.com:digitales/journal-string.git`。
- en: Working the package as a submodule
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将软件包作为子模块使用
- en: We need to add this new submodule into our project, so it's time to load a console/terminal
    window. In the terminal, navigate to the top level of the journal project and
    then add the submodule. Make sure that it is cloned to the packages directory.
    In this example, we are checking out the submodule into a directory called string,
    rather than `journal-string`; this is to save typing and make it easier to autoload.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将这个新的子模块添加到我们的项目中，所以现在是加载控制台/终端窗口的时候了。在终端中，导航到日志项目的顶层，然后添加子模块。确保它被克隆到软件包目录中。在这个例子中，我们将子模块检出到一个名为string的目录中，而不是`journal-string`；这样做是为了节省输入并使自动加载更容易。
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The last command takes us into the `string` package directory. Git submodules
    act as a completely separate repository enclosed within the main project repository.
    This means that any changes made to the `journal-text` package will need to be
    committed to its own repository, and then the main repository will need to be
    updated.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令将我们带入`string`软件包目录。Git子模块充当主项目存储库中封装的完全独立的存储库。这意味着对`journal-text`软件包所做的任何更改都需要提交到其自己的存储库，然后需要更新主存储库。
- en: Structuring your package
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建软件包
- en: 'Since you will be sharing the package with your team or yourself or with the
    community, in the future, the structure of the directories and files is important.
    It will help you with a quick familiarization when working with the package. The
    recommended directory structure is given as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您将与您的团队或自己或社区共享软件包，因此将来目录和文件的结构非常重要。在使用软件包时，这将帮助您快速熟悉。建议的目录结构如下所示：
- en: '[PRE3]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Every package should include a `bootstrap.php` file in the top directory of
    the package. This file can be used to add a namespace for the package and to add
    the package classes for better performance and auto-loading purposes. If you want
    to override the core classes, you will need to add the package namespace to the
    core namespace, for example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个包都应该在包的顶级目录中包含一个 `bootstrap.php` 文件。这个文件可以用来为包添加命名空间，并为了更好的性能和自动加载目的添加包类。如果您想要覆盖核心类，您需要将包命名空间添加到核心命名空间中，例如：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s create our package structure, as shown in the following hierarchy:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的包结构，如下所示的层次结构：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this example, we will create some basic two-way encryption for a string
    of text and give it the namespace `String`. We will have a configuration file
    to allow us to salt the encrypted string. So, let''s first create the example
    configuration file. Load the `string.php` file located at `/journal/config/`,
    and add the following code snippet:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将为一串文本创建一些基本的双向加密，并给它命名空间 `String`。我们将有一个配置文件，允许我们对加密后的字符串进行加盐。所以，让我们首先创建示例配置文件。加载位于
    `/journal/config/` 的 `string.php` 文件，并添加以下代码片段：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the `string.php` file, there are a couple of example environments. In the
    configuration file, we are also dynamically setting the environment with `Fuel::$env`.
    This will be used within the main string class to load the configuration for the
    correct environment. Then, the correct values will be assigned to a static class
    variable called `$_config`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `string.php` 文件中，有一些示例环境。在配置文件中，我们还动态设置环境为 `Fuel::$env`。这将在主字符串类中用于加载正确环境的配置。然后，正确的值将被分配给一个名为
    `$_config` 的静态类变量。
- en: 'In the `encode` and `decode` functions, we are making use of the FuelPHP **Crypt**
    functionality. We are also including some uppercase and lowercase string manipulation
    functions for demonstration purposes later. Without further adieu, an example
    of the string manipulation class is given as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `encode` 和 `decode` 函数中，我们使用了 FuelPHP **Crypt** 功能。我们还包括了一些大写和小写字符串操作函数，以供后续演示目的使用。不再拖延，以下是字符串操作类的示例：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This class will include a `StringExeption` exception that extends the FuelPHP
    `Exception` class, allowing us to customize the exceptions when we need to:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类将包括一个 `StringExeption` 异常，它扩展了 FuelPHP 的 `Exception` 类，允许我们在需要时自定义异常：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following function is used to get the `string.php` file from within the
    application configuration directory:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数用于从应用程序配置目录中获取 `string.php` 文件：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `encode()` function will encode the string and return the encrypted string.
    Next, we will decode the string in the `decode()` function:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`encode()` 函数将对字符串进行编码并返回加密后的字符串。接下来，我们将在 `decode()` 函数中解码字符串：'
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let''s introduce a quick **password hashing** method. It is worth noting
    that in PHP 5.5 we can use the new password hasher:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们介绍一个快速的**密码哈希**方法。值得注意的是，在PHP 5.5中，我们可以使用新的密码哈希算法：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the next few functions, we will perform some straightforward text string
    manipulations. First, let''s change the string to be all lowercase:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个函数中，我们将执行一些简单的文本字符串操作。首先，让我们将字符串改为全部小写：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let''s convert the string to uppercase:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将字符串转换为大写：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s make the first character lowercase:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将每个单词的第一个字符变为小写：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s make the first character uppercase:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将每个单词的第一个字符变为大写：
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let''s make the first character of each word uppercase:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将每个单词的第一个字符大写：
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that we have the basic functionality sorted, the application code will need
    to be capable of accessing it. For this, we can use the `bootstrap.php` file in
    the top level of the journal package directory.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解决了基本功能，应用程序代码需要能够访问它。为此，我们可以使用日志包目录顶层的 `bootstrap.php` 文件。
- en: 'Load the `bootstrap.php` file located at `packages/journal-string/`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 加载位于 `packages/journal-string/` 的 `bootstrap.php` 文件：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, we will be able to call the functionality using something like the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们就可以使用类似以下的方式调用功能：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Configuring your package
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置您的包
- en: 'The first thing to do when using the package will be to create a project-specific
    version of the package configuration. To do this, run the following in your terminal:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该包时的第一件事是创建一个特定于项目的包配置版本。要做到这一点，在您的终端中运行以下命令：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We need to add some custom `salt` text strings which will be used as keys in
    the newly copied `string.php` configuration:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一些自定义的 `salt` 文本字符串，这些将作为新复制的 `string.php` 配置中的键使用：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Using your package
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用您的包
- en: 'Now that you have configured the package and created the string functions,
    it''s time to demonstrate using the new package. First, let''s add the `String`
    package to our `config.php` applications file:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经配置了包并创建了字符串函数，是时候演示如何使用新包了。首先，让我们将 `String` 包添加到我们的 `config.php` 应用程序文件中：
- en: 'As we added a core namespace `String`, we can call our string functions using
    the following method:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们添加了一个核心命名空间 `String`，我们可以使用以下方法调用我们的字符串函数：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can test the functionality in your controllers and then display the results
    in the views. Creating packages is a simple process and one that you should get
    familiar with. Once you have created your package, you may want to share it with
    others.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在控制器中测试功能，然后在视图中显示结果。创建包是一个简单的过程，您应该熟悉它。一旦您创建了您的包，您可能希望与他人分享。
- en: Letting people know about your package
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让人们了解您的包
- en: So, you've created your package, it's time to publish it. First, it is a good
    idea to check that the functions are all commented and you have documented how
    to use the package in the `Readme.md` file (or a `Readme.txt` file). If you are
    using GitHub for your code, they provide a quick way of creating a webpage to
    publicize your package or project. When creating a page with GitHub, they will
    use the Readme file as a starting point and then let you customize any of the
    information you may like to include about your package. More information can be
    seen at [https://help.github.com/categories/20/articles](https://help.github.com/categories/20/articles).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，您已经创建了您的包，现在是时候发布它了。首先，检查所有函数是否都有注释，并且您已经在`Readme.md`文件（或`Readme.txt`文件）中记录了如何使用该包的方法是个好主意。如果您在GitHub上编写代码，他们提供了一个快速创建网页来宣传您的包或项目的方法。在GitHub上创建页面时，他们将使用Readme文件作为起点，然后让您自定义关于您的包的任何信息。更多信息可以在[https://help.github.com/categories/20/articles](https://help.github.com/categories/20/articles)中找到。
- en: Once you are happy that the code is ready to be shared, send a tweet to the
    FuelPHP Twitter account ([https://twitter.com/FuelPHP](https://twitter.com/FuelPHP)).
    They will often "retweet" your message to their followers. In addition to this,
    you can share your package link on the FuelPHP forums at [http://fuelphp.com/forums/categories/codeshare](http://fuelphp.com/forums/categories/codeshare).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您确定代码已经准备好分享，就发送一条推文到FuelPHP的Twitter账号（[https://twitter.com/FuelPHP](https://twitter.com/FuelPHP)）。他们经常会“转推”您的消息给他们的关注者。除此之外，您还可以在FuelPHP论坛上分享您的包链接，网址是[http://fuelphp.com/forums/categories/codeshare](http://fuelphp.com/forums/categories/codeshare)。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered some of the package basics, along with examples
    of useful packages that can make our development life easier. With a collection
    of dependable packages, we can concentrate on the fun job of creating the application
    and delivering what the client wants. We have created a package, configured it,
    and demonstrated its use.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经涵盖了一些包的基础知识，以及一些有用的包的示例，这些包可以让我们的开发工作更加轻松。有了一系列可靠的包，我们可以集中精力去创建应用程序，并交付客户想要的东西。我们已经创建了一个包，配置了它，并演示了它的使用。
- en: In the next chapter we will cover some of the more advanced topics, including
    functionality portability, unit testing, and profiling within FuelPHP.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将涵盖一些更高级的主题，包括功能可移植性、单元测试和在FuelPHP中进行性能分析。
