- en: Chapter 1. Building a URL Shortener Website
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。构建 URL 缩短网站
- en: Throughout the book, we will be using the Laravel PHP framework to build different
    types of web projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们将使用 Laravel PHP 框架来构建不同类型的 Web 项目。
- en: 'In this chapter, we''ll see how to build a URL Shortener website with the basics
    of Laravel framework. The covered topics include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何使用 Laravel 框架的基础知识构建 URL 缩短网站。涵盖的主题包括：
- en: Creating a database and migrating our URL Shortener's table
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库并迁移我们的 URL 缩短器表
- en: Creating our form
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的表单
- en: Creating our Link model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的链接模型
- en: Saving data to the database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据保存到数据库
- en: Getting individual URL from the database and redirecting
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库获取单个 URL 并重定向
- en: Creating a database and migrating our URL shortener's table
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库并迁移我们的 URL 缩短器表
- en: 'Migrations are like version control for your application''s database. They
    permit a team (or yourself) to modify the database schema, and provide up-to-date
    information on the current schema state. To create and migrate your URL Shortener''s
    database, perform the following steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移就像是应用程序数据库的版本控制。它们允许团队（或您自己）修改数据库模式，并提供有关当前模式状态的最新信息。要创建和迁移 URL 缩短器的数据库，请执行以下步骤：
- en: First of all, we have to create a database, and define the connection information
    to Laravel. To do this, we open the `database.php` file under `app/config`, and
    then fill the required credentials. Laravel supports MySQL, SQLite, PostgreSQL,
    and SQLSRV (Microsoft SQL Server) by default. For this tutorial, we will be using
    MySQL.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个数据库，并定义到 Laravel 的连接信息。为此，我们打开 `app/config` 下的 `database.php` 文件，然后填写所需的凭据。Laravel
    默认支持 MySQL、SQLite、PostgreSQL 和 SQLSRV（Microsoft SQL Server）。在本教程中，我们将使用 MySQL。
- en: 'We will have to create a MySQL database. To do this, open your MySQL console
    (or phpMyAdmin), and write down the following query:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将不得不创建一个 MySQL 数据库。为此，打开您的 MySQL 控制台（或 phpMyAdmin），并写下以下查询：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The previous command will generate a new MySQL database named `urls` for us.
    After having successfully generated the database, we will be defining the database
    credentials. To do this, open your `database.php` file under `app/config`. In
    that file, you will see multiple arrays being returned with database definitions.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一个命令将为我们生成一个名为 `urls` 的新的 MySQL 数据库。成功生成数据库后，我们将定义数据库凭据。要做到这一点，打开 `app/config`
    下的 `database.php` 文件。在该文件中，您将看到返回多个包含数据库定义的数组。
- en: 'The `default` key defines what database driver to be used, and each database
    driver key holds individual credentials. We just need to fill the one that we
    will be using. In our case, I''ve made sure that the default key''s value is `mysql`.
    To set the connection credentials, we will be filling the value of the `mysql`
    key with our database name, username, and password. In our case, since we have
    a `database` named `urls`, with the `username` as `root` and without a password,
    our `mysql` connection settings in the `database.php` file will be as follows:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`default` 键定义要使用的数据库驱动程序，每个数据库驱动程序键都保存各自的凭据。我们只需要填写我们将要使用的凭据。在我们的情况下，我确保默认键的值是
    `mysql`。要设置连接凭据，我们将填写 `mysql` 键的值，其中包括我们的数据库名称、用户名和密码。在我们的情况下，由于我们有一个名为 `urls`
    的 `database`，用户名为 `root`，没有密码，因此 `database.php` 文件中的 `mysql` 连接设置如下：'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的帐户中下载您购买的所有 Packt
    图书的示例代码文件。如果您在其他地方购买了本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便直接通过电子邮件接收文件。
- en: 'Now, we will be using the **Artisan CLI** to create migrations. Artisan is
    a command-line interface specially made for Laravel. It provides numerous helpful
    commands to help us in development. We''ll be using the following `migrate:make`
    command to create a migration on Artisan:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用 **Artisan CLI** 来创建迁移。Artisan 是专为 Laravel 制作的命令行界面。它提供了许多有用的命令来帮助我们开发。我们将使用以下
    `migrate:make` 命令在 Artisan 上创建一个迁移：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The command has two parts:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令有两部分：
- en: The first is `migrate:make create_links_table`. This part of the command creates
    a migration file which is named something like `2013_05_01_194506_create_links_table.php`.
    We'll examine the file further.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是 `migrate:make create_links_table`。命令的这一部分创建一个迁移文件，文件名类似于 `2013_05_01_194506_create_links_table.php`。我们将进一步检查该文件。
- en: The second part of the command is `--table=links --create`.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令的第二部分是 `--table=links --create`。
- en: The `--table=links` option points to the database name.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--table=links` 选项指向数据库名称。'
- en: The `--create` option is for creating the table on the database server to which
    we've given the `--table=links` option.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--create` 选项用于在我们给定 `--table=links` 选项的数据库服务器上创建表。'
- en: 'As you can see, unlike Laravel 3, when you run the previous command, it will
    create both the migrations table and our migration. You can access the migration
    file under `app/database/migrations`, having the following code:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，与 Laravel 3 不同，当您运行上一个命令时，它将同时创建迁移表和我们的迁移。您可以在 `app/database/migrations`
    下访问迁移文件，其中包含以下代码：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s inspect the sample migration file. There are two public functions which
    are declared as `up()` and `down()`. When you execute the following `migrate`
    command, the contents of the `up()` function will be executed:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查示例迁移文件。有两个公共函数声明为 `up()` 和 `down()`。当您执行以下 `migrate` 命令时，将执行 `up()` 函数的内容：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command will execute all of the migrations and create the `links` table
    in our case.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将执行所有迁移并在我们的情况下创建 `links` 表。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you receive a `class not found` error when running the migration file, try
    running the `composer update` command.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行迁移文件时收到 `class not found` 错误，请尝试运行 `composer update` 命令。
- en: 'We can also roll back to the last migration, like it was never executed in
    the first place. We can do this by using the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以回滚到上一个迁移，就像它从未执行过一样。我们可以使用以下命令完成：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In some cases, we may also want to roll back all migrations we have created.
    This can be done with the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能还想回滚我们创建的所有迁移。这可以通过以下命令完成：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'While in the development stages, we may forget to add/remove some fields, or
    even forget to create some tables, and we may want to roll back everything and
    remigrate them all. This can be done using the following command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发阶段，我们可能会忘记添加/删除一些字段，甚至忘记创建一些表，我们可能希望回滚所有内容并重新迁移它们。这可以使用以下命令完成：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s add our fields. We''ve created two additional fields called `url`
    and `hash`. The `url` field will hold the actual URL, to which the URL present
    in the `hash` field will be redirected. The `hash` field will hold the shortened
    version of the URL that is present in the `url` field. The final content of the
    migration file is as shown in the following code:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加我们的字段。我们创建了两个额外的字段，称为`url`和`hash`。`url`字段将保存实际的URL，而`hash`字段中的URL将被重定向到`hash`字段中的URL的缩短版本。迁移文件的最终内容如下所示：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Creating our form
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的表单
- en: Now let's make our first form view.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们制作我们的第一个表单视图。
- en: Save the following code as `form.blade.php` under `app/views`. The file's extension
    is `blade.php` because we will be benefiting from Laravel 4's built-in template
    engine called **Blade**. There may be some methods you don't understand in the
    form yet, but don't worry. We will cover everything regarding this form in this
    chapter.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码保存为`form.blade.php`，放在`app/views`下。文件的扩展名是`blade.php`，因为我们将受益于Laravel 4内置的模板引擎**Blade**。在表单中可能有一些您尚不理解的方法，但不要担心。我们将在本章中涵盖有关此表单的所有内容。
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now save the following codes as `styles.css` under `public/assets/css`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将以下代码保存为`styles.css`，放在`public/assets/css`下：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code will produce you a form that looks like the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将生成一个看起来像以下截图的表单：
- en: '![Creating our form](graphics/2111OS_01_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的表单](graphics/2111OS_01_01.jpg)'
- en: As you can see, we have used a CSS file to tidy up the form a bit, but the actual
    part of the form is at the bottom of the `View` file, inside `div` with the ID
    of the container.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们使用了一个CSS文件来整理表单，但是表单的实际部分位于`View`文件的底部，位于ID为container的`div`内部。
- en: 'We have used the Laravel''s built-in `Form` class to generate a form, and we
    have used the `old()` method of the `Input` library. Now let''s dig the code:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了Laravel内置的`Form`类来生成一个表单，并使用了`Input`库的`old()`方法。现在让我们来看看代码：
- en: '`Form::open()`: It creates a `<form>` opening tag. Within the first provided
    parameter, you can define how the form is sent, and where it is going to be sent.
    It can be a controller''s action, a direct URL, or a named route.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Form::open()`: 它创建一个`<form>`开放标签。在第一个提供的参数中，您可以定义表单的发送方式以及将要发送到哪里。它可以是控制器的操作，直接URL或命名路由。'
- en: '`Form::text()`: It creates an `<input>` tag with type as text. The first parameter
    is the name of the input, the second parameter is the value of the input, and
    within the array given in the third parameter, you can define assets and other
    attributes of the `<input>` tag.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Form::text()`: 它创建一个类型为文本的`<input>`标签。第一个参数是输入的名称，第二个参数是输入的值，在第三个参数给定的数组中，您可以定义`<input>`标签的属性和其他属性。'
- en: '`Input::old()`: It will return the old input from a form, after the form is
    returned with the inputs. The first parameter is the name of the old input submitted.
    In our case, if the form is returned after submission (for example, if the form
    validation fails), the text field will be filled with our old input and we can
    reuse it for later requests.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Input::old()`: 它将返回表单中的旧输入，在表单返回输入后。第一个参数是提交的旧输入的名称。在我们的情况下，如果表单在提交后返回（例如，如果表单验证失败），文本字段将填充我们的旧输入，我们可以在以后的请求中重用它。'
- en: '`Form::close()`: It closes the `<form>` tag.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Form::close()`: 它关闭`<form>`标签。'
- en: Creating our Link model
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的Link模型
- en: 'To benefit from Laravel''s ORM class called `Eloquent`, we need to define a
    model. Save the following code as `Link.php` under `app/models`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从Laravel的ORM类`Eloquent`中受益，我们需要定义一个模型。将以下代码保存为`Link.php`，放在`app/models`下：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Eloquent model is quite easy to understand.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent模型非常容易理解。
- en: The variable `$table` is used to define the table name for the model, but it's
    not compulsory. Even if we don't define this variable, it would use the plural
    form of the model name as a database table name. For example, if the model name
    was post, it would look for the post's table as default. This way, you can use
    any model names for the tables.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`$table`用于定义模型的表名，但这并不是强制性的。即使我们不定义这个变量，它也会将模型名称的复数形式作为数据库表名。例如，如果模型名称是post，它将默认查找post的表。这样，您可以为表使用任何模型名称。
- en: The protected `$fillable` variable defines what columns can be (mass) created
    and updated. Laravel 4 blocks the mass-assignment of the values of all the columns
    with `Eloquent` by default. This way, for example, if you have a `users` table,
    and you are the only user/administrator, the mass-assignment protects your database
    from another user being added.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受保护的`$fillable`变量定义了可以（批量）创建和更新的列。默认情况下，Laravel 4会阻止使用`Eloquent`批量赋值所有列的值。例如，如果您有一个`users`表，并且您是唯一的用户/管理员，批量赋值将保护您的数据库免受其他用户的添加。
- en: The public `$timestamps` variable checks whether the model should try setting
    the timestamps `created_at` and `updated_at` by default, while creating and updating
    the query respectively. Since we don't need these features for our chapter, we
    will disable this by setting the value to `false`.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$timestamps`变量检查模型是否应该默认尝试设置时间戳`created_at`和`updated_at`，分别在创建和更新查询时。由于我们不需要这些功能，我们将通过将值设置为`false`来禁用它。'
- en: 'We now need to define this view to show whether we can navigate to our virtual
    host''s index page. You can do this either from the controllers defined in `routes.php`,
    or from `routes.php` directly. Since our application is small, defining them directly
    from `routes.php` should suffice. To define this, open the `routes.php` file under
    the `app` folder and add the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要定义这个视图，以显示我们是否可以导航到我们的虚拟主机的索引页面。您可以从`routes.php`中定义的控制器，或直接从`routes.php`中定义。由于我们的应用程序很小，直接从`routes.php`中定义它们应该就足够了。要定义这个，打开`app`文件夹下的`routes.php`文件，并添加以下代码：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you already have a section starting with `Route::get('/', function()`, you
    should replace that section with the previous code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个以`Route::get('/', function()`开头的部分，您应该用先前的代码替换该部分。
- en: Laravel can listen `get`, `post`, `put`, and `delete` requests. Since our action
    is a `get` action (because we will be navigating through the browser without posting),
    our route type will be `get`, and because we want to show the view on the root
    page, our first parameter of the `Route::get()` method will be `/`, and we wrap
    a closure function as the second parameter to define what we want to do. In our
    case, we will be returning `form.blade.php` placed under `app/views` that we had
    generated before, so we just type `return View::make('form')`. This method returns
    the `form.blade.php` view from the `views` folder.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel可以监听`get`、`post`、`put`和`delete`请求。由于我们的操作是一个`get`操作（因为我们将通过浏览器导航而不是发布），所以我们的路由类型将是`get`，因为我们想在根页面上显示视图，所以`Route::get()`方法的第一个参数将是`/`，我们将包装一个闭包函数作为第二个参数来定义我们想要做的事情。在我们的情况下，我们将返回`app/views`下放置的`form.blade.php`，所以我们只需输入`return
    View::make('form')`。这个方法从`views`文件夹返回`form.blade.php`视图。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the view was in a subdirectory, it would be called `subfolder.form`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果视图在子目录中，它将被称为`subfolder.form`。
- en: Saving data to the database
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据保存到数据库
- en: 'Now we need to write a route that will have to listen to our `post` request.
    For this, we open our `routes.php` file under the `app` folder and add the following
    code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写一个路由来监听我们的`post`请求。为此，我们打开`app`文件夹下的`routes.php`文件，并添加以下代码：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Validating the users' input
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证用户的输入
- en: Using the `post` action function that we've coded now, we will be validating
    the user's input with the Laravel's built-in `Validation` class. This class helps
    us prevent invalid inputs from getting into our database.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们现在编写的`post`动作函数，我们将使用Laravel内置的`Validation`类验证用户的输入。这个类帮助我们防止无效的输入进入我们的数据库。
- en: 'We first define a `$rules` array to set the rules for each field. In our case,
    we want the link to have a valid URL format. Then we can run the form validation
    using the `Validator::make()` method and assign it to the `$validation` variable.
    Let''s understand the parameters of the `Validator::make()` method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义一个`$rules`数组来设置每个字段的规则。在我们的情况下，我们希望链接具有有效的URL格式。然后我们可以使用`Validator::make()`方法运行表单验证，并将其赋值给`$validation`变量。让我们了解`Validator::make()`方法的参数：
- en: The first parameter of the `Validator::make()` method takes an array of inputs
    and values to be validated. In our case, the whole form has only one field called
    link, so we've put the `Input::all()` method, which returns all the inputs from
    the form.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Validator::make()`方法的第一个参数接受一个输入和要验证的值的数组。在我们的情况下，整个表单只有一个名为link的字段，所以我们使用了`Input::all()`方法，该方法返回表单中的所有输入。'
- en: The second parameter takes the validation rules to be checked. The stored `$validation`
    variable holds some information for us. For example, we can check whether the
    validation has failed or passed (using `$validation->fails()` and `$validation->passes()`).
    These two methods return Boolean results, so we can easily check if the validation
    has passed or failed. Also, the `$validation` variable holds a method `messages()`,
    which contains the information of a failed validation. And we can catch them using
    `$validation->messages()`.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数接受要检查的验证规则。存储的`$validation`变量为我们提供了一些信息。例如，我们可以检查验证是否失败或通过（使用`$validation->fails()`和`$validation->passes()`）。这两种方法返回布尔结果，因此我们可以轻松地检查验证是否通过或失败。此外，`$validation`变量包含一个`messages()`方法，其中包含验证失败的信息。我们可以使用`$validation->messages()`捕获它们。
- en: If the form validation fails, we redirect the user back to our index page (`return
    Redirect::to('/')`), which holds the URL shortener form, and we return some flash
    data back to the form. In Laravel, we do this by adding the `withVariableName`
    object to the redirected page. Using `with` is mandatory here, which will tell
    Laravel that we are returning something additional. We can do this for both redirecting
    and making views. If we are making views and showing some content to the end user,
    those `withVariableName` will be variables, and we can call them directly using
    `$VariableName`, but if we are redirecting to a page with the `withVariableName`
    object, `VariableName` will be a flash session data, and we can call it using
    the `Session` class (`Session::get('VariableName')`).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单验证失败，我们将用户重定向回我们的索引页面（`return Redirect::to('/')`），该页面包含URL缩短器表单，并将一些闪存数据返回给表单。在Laravel中，我们通过向重定向的页面添加`withVariableName`对象来实现这一点。在这里使用`with`是强制的，这将告诉Laravel我们正在返回一些额外的东西。我们可以在重定向和制作视图时都这样做。如果我们正在制作视图并向最终用户显示一些内容，那么`withVariableName`将是变量，我们可以直接使用`$VariableName`调用它们，但如果我们正在重定向到一个带有`withVariableName`对象的页面，`VariableName`将是一个闪存会话数据，我们可以使用`Session`类（`Session::get('VariableName')`）来调用它。
- en: In our example, to return the errors, we used a special method `withErrors($validation)`,
    instead of returning `$validation->messages()`. We could also return using that,
    but the `$errors` variable is always defined on views, so we can use our `$validation`
    variable as a parameter with `withErrors()` directly. The `withInput()` method
    is also a special method, which will return the results back to the form.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，为了返回错误，我们使用了一个特殊的`withErrors($validation)`方法，而不是返回`$validation->messages()`。我们也可以使用那个返回，但是`$errors`变量总是在视图上定义的，所以我们可以直接使用我们的`$validation`变量作为参数与`withErrors()`一起使用。`withInput()`方法也是一个特殊的方法，它将结果返回到表单。
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If the user forgets one field in the form, and if the validation fails and shows
    the form again with error messages, using the `withInput()` method, the form can
    be filled with the old inputs again. To show these old inputs in Laravel, we use
    the `old()` method of the `Input` class. For example, `Input::old('link')` will
    return us the old input of the form field named `link`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在表单中忘记了一个字段，并且验证失败并显示带有错误消息的表单，使用`withInput()`方法，表单可以再次填充旧的输入。为了在Laravel中显示这些旧的输入，我们使用`Input`类的`old()`方法。例如，`Input::old('link')`将返回表单字段`link`的旧输入。
- en: Returning the messages to the view
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将消息返回给视图
- en: 'To return the error message back to the form, we can add the following HTML
    code into `form.blade.php`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将错误消息返回到表单中，我们可以将以下HTML代码添加到`form.blade.php`中：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can already guess, `Session::has('variableName')` returns a Boolean value
    to check whether there is a variable name for the session. Then, with the `first('formFieldName')`
    method of Laravel's `Validator` class, we are returning the first error message
    of a form field. In our case, we are showing the first error message of our `link`
    form field.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经猜到的那样，`Session::has('variableName')`返回一个布尔值，用于检查会话中是否有变量名。然后，使用Laravel的`Validator`类的`first('formFieldName')`方法，我们返回表单字段的第一个错误消息。在我们的情况下，我们正在显示`link`表单字段的第一个错误消息。
- en: Diving further into controller and processing the form
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入控制器和处理表单
- en: 'The `else` part of the validation checking part that is executed when the form
    validation is completed successfully in our example, holds the further processing
    of the link. In this section, we will perform the following steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，验证检查部分的`else`部分在表单验证成功完成时执行，包含了链接的进一步处理。在这一部分，我们将执行以下步骤：
- en: Checking whether the link is already in our database.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查链接是否已经在我们的数据库中。
- en: If the link is already in our database, returning the shortened link.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果链接已经在我们的数据库中，返回缩短后的链接。
- en: If the link is not present in our database, creating a new random string (the
    hash that will be in our URL) for the link.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果链接不在我们的数据库中，为链接创建一个新的随机字符串（将在我们的URL中）。
- en: Creating a new record in our database with the provided values.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的数据库中使用提供的数值创建一个新的记录。
- en: Returning the shortened link back to the user.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将缩短后的链接返回给用户。
- en: Now, let's dig the code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解代码。
- en: 'Here''s the first part of our code:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是我们代码的第一部分：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: First, we check if the URL is already present in our database using the `where()`
    method of **Fluent Query Builder** , and get the first result via the method `first()`,
    and assign it to the `$link` variable. You can use the Fluent query methods along
    with the Eloquent ORM easily. If this confuses you, don't worry, we will cover
    this further in the later chapters.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用**Fluent Query Builder**的`where()`方法检查URL是否已经存在于我们的数据库中，并通过`first()`方法获取第一个结果，并将其赋给`$link`变量。您可以轻松地使用Fluent查询方法和Eloquent
    ORM。如果这让您感到困惑，不用担心，我们将在后面的章节中进一步介绍。
- en: 'This is the next part of our controller method''s code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们控制器方法代码的下一部分：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If we have the URL saved in our database, the `$link` variable will hold the
    object of our link's information taken from the database. So with a simple `if()`
    clause, we can check if there is a result. If there is a result returned, we can
    access it using `$link->columnname`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在数据库中保存了URL，`$link`变量将保存从数据库中获取的链接信息的对象。因此，通过简单的`if()`子句，我们可以检查是否有结果。如果有结果返回，我们可以使用`$link->columnname`来访问它。
- en: 'In our case, if the query has a result, we redirect the inputs and the link
    back to the form. As we''ve used here, the `with()` method can also be used with
    two parameters instead of using a camel case—`withName(''value'')` is exactly
    the same as `with(''name'',''value'')`. So, we can return the hash code with a
    flash data named link `with(''link'',$link->hash)`. To show this, we can add the
    following code to our form:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，如果查询有结果，我们将输入和链接重定向回表单。正如我们在这里使用的，`with()`方法也可以用两个参数而不是使用驼峰命名法——`withName('value')`与`with('name','value')`完全相同。因此，我们可以使用闪存数据名为链接`with('link',$link->hash)`来返回哈希码。为了显示这一点，我们可以将以下代码添加到我们的表单中：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `Html` class helps us write HTML codes easily. The `link()` method requires
    the following two parameters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`Html`类帮助我们轻松编写HTML代码。`link()`方法需要以下两个参数：'
- en: The first parameter is `link`. If we provide a string directly (the hash string
    in our case), the class will identify it automatically and make an internal URL
    from our website.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是`link`。如果我们直接提供一个字符串（在我们的例子中是哈希字符串），该类将自动识别它并从我们的网站创建内部URL。
- en: The second parameter is the string that has the link.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是包含链接的字符串。
- en: The optional third parameter has to be an array, holding attributes (such as
    class, ID, and target) as a two-dimensional array.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的第三个参数必须是一个数组，包含属性（例如class、ID和target）作为二维数组。
- en: 'The following is the next part of our code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是我们代码的下一部分：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If there is no result (the else clause of the variable), we are creating a six-character-long
    alphanumeric random string with the `Str` class's `random()` method and checking
    it each time to make sure that it is a unique string, using PHP's own do-while
    statement. For real world application, you can use an alternative method to shorten,
    for example, converting an entry in the ID column to base_62 and using it as a
    hash value. This way, the URL would be cleaner, and it's always a better practice.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有结果（变量的else子句），我们将使用`Str`类的`random()`方法创建一个六个字符长的字母数字随机字符串，并使用PHP自己的do-while语句每次检查它是否是唯一的字符串。对于真实世界的应用，您可以使用另一种方法来缩短，例如将ID列中的条目转换为base_62并将其用作哈希值。这样，URL将更清晰，这总是一个更好的做法。
- en: 'This is the next part of our code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们代码的下一部分：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Once we have a unique hash, we can add the link and the hash values to the database
    with the `create()` method of the Laravel's Eloquent ORM. The only parameter should
    be a two-dimensional array, in which the keys of the array are holding the database
    column names, and the values of the array are holding the values to be inserted
    as a new row.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了唯一的哈希，我们可以使用Laravel的Eloquent ORM的`create()`方法将链接和哈希值添加到数据库中。唯一的参数应该是一个二维数组，其中数组的键保存数据库列名，数组的值保存要插入为新行的值。
- en: In our case, the `url` column has to have the `link` field's value that came
    from the form. We can catch these values that came from the `post` request using
    Laravel's `Input` class's `get()` method. In our case, we can catch the value
    of the `link` form field that came from the `post` request (which we would catch
    using the spaghetti code `$_POST['link']`) using `Input::get('link')`, and return
    the hash value to the view as we did earlier.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，`url`列必须具有来自表单的`link`字段的值。我们可以使用Laravel的`Input`类的`get()`方法捕获来自`post`请求的这些值。在我们的情况下，我们可以使用`Input::get('link')`捕获来自`post`请求的`link`表单字段的值（我们可以使用`$_POST['link']`的混乱代码捕获），并像之前一样将哈希值返回给视图。
- en: 'This is the final part of our code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是我们代码的最后部分：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, at the output, we're redirected to `oursite.dev/hashcode`. There is a link
    stored in the variable `$newHash`; we need to catch this hash code and query our
    database, and if there is a record, we need to redirect to the actual URL.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在输出中，我们被重定向到`oursite.dev/hashcode`。变量`$newHash`中存储了一个链接；我们需要捕获这个哈希码并查询我们的数据库，如果有记录，我们需要重定向到实际的URL。
- en: Getting individual URL from the database and redirecting
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中获取单个URL并重定向
- en: 'Now, in the final part of our first chapter, we need to get the `hash` part
    from the generated URL, and if there is a value, we need to redirect it to the
    URL which is stored in our database. To do this, add the following code at the
    end of your `routes.php` file under the `app` folder:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们第一章的最后部分，我们需要从生成的URL中获取`hash`部分，如果有值，我们需要将其重定向到存储在我们数据库中的URL。为此，请在`app`文件夹下的`routes.php`文件末尾添加以下代码：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the previous code, unlike other route definitions, we added curly brackets
    around the name `hash`, which tells Laravel that it''s a parameter; and with the
    `where()` method we defined how the name parameter will be. The first parameter
    is the name of the variable (which is `hash` in our case), and the second parameter
    is a regular expression that will filter the parameter. In our case, the regular
    expression filters an exact alphanumeric string that is six-characters long. This
    way, we can filter our URLs and secure them from start, and we won''t have to
    check if the `url` parameter has something we don''t want (for example, if alphabets
    are entered instead of numbers in the ID column). To get individual URL from the
    database and redirect, we perform the following steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，与其他路由定义不同，我们在名称`hash`周围添加了花括号，告诉Laravel它是一个参数；并且使用`where()`方法定义了名称参数的方式。第一个参数是变量的名称（在我们的情况下是`hash`），第二个参数是一个正则表达式，用于过滤参数。在我们的情况下，正则表达式过滤了一个精确的六个字符长的字母数字字符串。这样，我们可以过滤我们的URL并从一开始就保护它们，而且我们不必检查`url`参数是否有我们不想要的内容（例如，在ID列中输入字母而不是数字）。要从数据库中获取单个URL并重定向，我们执行以下步骤：
- en: In the `Route` class, we first make a search query, as we did in the earlier
    section, and check if we have a link with the given hash from a URL in our database,
    and set it to a variable called `$link`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Route`类中，我们首先进行搜索查询，就像在前面的部分中所做的那样，然后检查我们的数据库中是否有一个具有给定哈希的链接，并将其设置为名为`$link`的变量。
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If there is a result, we redirect the page to the `url` column of our database,
    which has the link to which the user should be redirected.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有结果，我们将页面重定向到我们数据库的`url`列，该列包含用户应重定向到的链接。
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If there is no result, we redirect the user back to our index page using the
    `$message` variable, which holds the value `Invalid Link`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有结果，我们将使用`$message`变量将用户重定向回我们的索引页面，该变量保存了`Invalid Link`的值。
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To show the `Invalid Link` message in the form, add the following code in your
    `form.blade.php` file placed under `app/views`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表单中显示`Invalid Link`消息，请在`app/views`下的`form.blade.php`文件中添加以下代码。
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered the basic usage of Laravel's routes, models,
    artisan commands, and database drivers by making a simple URL shortener website.
    Once you've followed this chapter, you can now create database tables with migrations,
    write simple forms with the Laravel Form Builder Class, validate these forms with
    the `Validation` class, and process these forms and insert new data to the table(s)
    with the Fluent Query Builder or Eloquent ORM. In the next chapter, we'll cover
    the advanced usage of these awesome features.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过制作一个简单的URL缩短网站，介绍了Laravel路由、模型、artisan命令和数据库驱动的基本用法。一旦您完成了本章，您就可以使用迁移创建数据库表，使用Laravel表单构建器类编写简单的表单，使用`Validation`类验证这些表单，并使用Fluent查询构建器或Eloquent
    ORM处理这些表单并将新数据插入表中。在下一章中，我们将介绍这些强大功能的高级用法。
