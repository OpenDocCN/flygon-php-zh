["```php\n    <?php\n    declare(strict_types=1);\n    /**\n     * This is a demonstration class.\n     *\n     * The purpose of this class is to get and set \n     * a protected property $test\n     *\n     */\n    class Test\n    {\n\n      protected $test = 'TEST';\n\n      /**\n       * This method returns the current value of $test\n       *\n       * @return string $test\n       */\n      public function getTest() : string\n      {\n        return $this->test;\n      }\n\n      /**\n       * This method sets the value of $test\n       *\n       * @param string $test\n       * @return Test $this\n       */\n      public function setTest(string $test)\n      {\n        $this->test = $test;\n        return $this;\n      }\n    }\n    ```", "```php\n    <?php\n    declare(strict_types=1);\n    class Name\n    {\n\n      protected $name = '';\n\n      public function getName() : string\n      {\n        return $this->name;\n      }\n\n      public function setName(string $name)\n      {\n        $this->name = $name;\n\n        return $this;\n      }\n    }\n\n    class Address\n    {\n\n      protected $address = '';\n\n      public function getAddress() : string\n      {\n        return $this->address;\n      }\n\n      public function setAddress(string $address)\n      {\n        $this->address = $address;\n        return $this;\n      }\n    }\n    ```", "```php\n    <?php\n    class TwoClass\n    {\n      public function showOne()\n      {\n        return 'ONE';\n      }\n    }\n\n    // a fatal error will occur when the second class definition is parsed\n    class twoclass\n    {\n      public function showTwo()\n      {\n        return 'TWO';\n      }\n    }\n    ```", "```php\n    $obj = new stdClass();\n    ```", "```php\n    $stmt = $connection->pdo->query($sql);\n    $row  = $stmt->fetch(PDO::FETCH_OBJ);\n    ```", "```php\nrequire __DIR__ . '/Test.php';\n\n$test = new Test();\necho $test->getTest();\necho PHP_EOL;\n\n$test->setTest('ABC');\necho $test->getTest();\necho PHP_EOL;\n```", "```php\nrequire __DIR__ . '/NameAddress.php';\n\n$name = new Name();\n$name->setName('TEST');\n$addr = new Address();\n$addr->setAddress('123 Main Street');\n\necho $name->getName() . ' lives at ' . $addr->getAddress();\n```", "```php\n$obj = new stdClass();\n$obj->test = 'TEST';\necho $obj->test;\necho PHP_EOL;\n\ninclude (__DIR__ . '/../Application/Database/Connection.php');\n$connection = new Application\\Database\\Connection(\n  include __DIR__ . DB_CONFIG_FILE);\n\n$sql  = 'SELECT * FROM iso_country_codes';\n$stmt = $connection->pdo->query($sql);\n$row  = $stmt->fetch(PDO::FETCH_OBJ);\nvar_dump($row);\n```", "```php\n    class Base\n    {\n      protected $id;\n      public function getId()\n      {\n        return $this->id;\n      }\n      public function setId($id)\n      {\n        $this->id = $id;\n      }\n    }\n\n    class Customer extends Base\n    {\n      protected $name;\n      public function getName()\n      {\n        return $this->name;\n      }\n      public function setName($name)\n      {\n        $this->name = $name;\n      }\n    }\n    ```", "```php\n    abstract class Base\n    {\n      protected $id;\n      public function getId()\n      {\n        return $this->id;\n      }\n      public function setId($id)\n      {\n        $this->id = $id;\n      }\n      public function validate();\n    }\n    ```", "```php\n    class Base\n    {\n      protected $id;\n      public function getId()\n      {\n        return $this->id;\n      }\n      public function setId($id)\n      {\n        $this->id = $id;\n      }\n    }\n\n    class Customer extends Base\n    {\n      protected $name;\n      public function getName()\n      {\n        return $this->name;\n      }\n      public function setName($name)\n      {\n        $this->name = $name;\n      }\n    }\n\n    class Member extends Customer\n    {\n      protected $membership;\n      public function getMembership()\n      {\n        return $this->membership;\n      }\n      public function setMembership($memberId)\n      {\n        $this->membership = $memberId;\n      }\n    }\n    ```", "```php\n    function test(Base $object)\n    {\n      return $object->getId();\n    }\n    ```", "```php\n$customer = new Customer();\n$customer->setId(100);\n$customer->setName('Fred');\nvar_dump($customer);\n```", "```php\nclass Customer extends Base\n{\n  protected $name;\n  public function getName()\n  {\n    return $this->name;\n  }\n  public function setName($name)\n  {\n    $this->name = $name;\n  }\n  public function validate()\n  {\n    $valid = 0;\n    $count = count(get_object_vars($this));\n    if (!empty($this->id) &&is_int($this->id)) $valid++;\n    if (!empty($this->name) \n    &&preg_match('/[a-z0-9 ]/i', $this->name)) $valid++;\n    return ($valid == $count);\n  }\n}\n```", "```php\n$customer = new Customer();\n\n$customer->setId(100);\n$customer->setName('Fred');\necho \"Customer [id]: {$customer->getName()}\" .\n     . \"[{$customer->getId()}]\\n\";\necho ($customer->validate()) ? 'VALID' : 'NOT VALID';\n$customer->setId('XXX');\n$customer->setName('$%\u00a3&*()');\necho \"Customer [id]: {$customer->getName()}\"\n  . \"[{$customer->getId()}]\\n\";\necho ($customer->validate()) ? 'VALID' : 'NOT VALID';\n```", "```php\nclass Member extends Customer\n{\n  protected $membership;\n  public function getMembership()\n  {\n    return $this->membership;\n  }\n  public function setMembership($memberId)\n  {\n    $this->membership = $memberId;\n  }\n}\n```", "```php\n$member = new Member();\n$member->setId(100);\n$member->setName('Fred');\n$member->setMembership('A299F322');\nvar_dump($member);\n```", "```php\nfunction test(Base $object)\n{\n  return $object->getId();\n}\n```", "```php\n$base = new Base();\n$base->setId(100);\n\n$customer = new Customer();\n$customer->setId(101);\n\n$member = new Member();\n$member->setId(102);\n\n// all 3 classes work in test()\necho test($base)     . PHP_EOL;\necho test($customer) . PHP_EOL;\necho test($member)   . PHP_EOL;\n```", "```php\nclass Orphan\n{\n  protected $id;\n  public function getId()\n  {\n    return $this->id;\n  }\n  public function setId($id)\n  {\n    $this->id = $id;\n  }\n}\ntry {\n    $orphan = new Orphan();\n    $orphan->setId(103);\n    echo test($orphan) . PHP_EOL;\n} catch (TypeError $e) {\n    echo 'Does not work!' . PHP_EOL;\n    echo $e->getMessage();\n}\n```", "```php\n    class Test\n    {\n      public static $test = 'TEST';\n      public static function getTest()\n      {\n        return self::$test;\n      }\n    }\n    ```", "```php\n    class Test2\n    {\n      public static $test = 'TEST2';\n      public static function getEarlyTest()\n      {\n        return self::$test;\n      }\n      public static function getLateTest()\n      {\n        return static::$test;\n      }\n    }\n\n    class Child extends Test2\n    {\n      public static $test = 'CHILD';\n    }\n    ```", "```php\n    public static function factory(\n      $driver,$dbname,$host,$user,$pwd,array $options = [])\n      {\n        $dsn = sprintf('%s:dbname=%s;host=%s', \n        $driver, $dbname, $host);\n        try {\n            return new PDO($dsn, $user, $pwd, $options);\n        } catch (PDOException $e) {\n            error_log($e->getMessage);\n        }\n      }\n    ```", "```php\necho Test::$test;\necho PHP_EOL;\necho Test::getTest();\necho PHP_EOL;\n```", "```php\necho Test2::$test;\necho Child::$test;\necho Child::getEarlyTest();\necho Child::getLateTest();\n```", "```php\ninclude __DIR__ . '/../Application/Database/Connection.php';\nuse Application\\Database\\Connection;\n$connection = Connection::factory(\n'mysql', 'php7cookbook', 'localhost', 'test', 'password');\n$stmt = $connection->query('SELECT name FROM iso_country_codes');\nwhile ($country = $stmt->fetch(PDO::FETCH_COLUMN)) \necho $country . '';\n```", "```php\n    namespace Application\\Entity;\n    ```", "```php\n    <?php\n    declare(strict_types=1);\n    namespace Application\\Entity;\n    /**\n     * Address\n     *\n     */\n    class Address\n    {\n      // some code\n    }\n    ```", "```php\n    use Application\\Entity;\n    $name = new Entity\\Name();\n    $addr = new Entity\\Address();\n    $prof = new Entity\\Profile();\n    ```", "```php\n    use Application\\Entity\\Name;\n    use Application\\Entity\\Address;\n    use Application\\Entity\\Profile;\n    $name = new Name();\n    $addr = new Address();\n    $prof = new Profile();\n    ```", "```php\n    use Application\\Entity\\ {\n      Name,\n      Address,\n      Profile\n    };\n    $name = new Name();\n    $addr = new Address();\n    $prof = new Profile();\n    ```", "```php\n    function __autoload($class)\n    {\n      echo \"Argument Passed to Autoloader = $class\\n\";\n      include __DIR__ . '/../' . str_replace('\\\\', DIRECTORY_SEPARATOR, $class) . '.php';\n    }\n    ```", "```php\n<?php\ndeclare(strict_types=1);\nnamespace Application\\Entity;\n/**\n * Name\n *\n */\nclass Name\n{\n\n  protected $name = '';\n\n  /**\n   * This method returns the current value of $name\n   *\n   * @return string $name\n   */\n  public function getName() : string\n  {\n    return $this->name;\n  }\n\n  /**\n   * This method sets the value of $name\n   *\n   * @param string $name\n   * @return name $this\n   */\n  public function setName(string $name)\n  {\n    $this->name = $name;\n    return $this;\n  }\n}\n```", "```php\nuse Application\\Entity;\n$name = new Entity\\Name();\n$addr = new Entity\\Address();\n$prof = new Entity\\Profile();\n\nvar_dump($name);\nvar_dump($addr);\nvar_dump($prof);\n```", "```php\nuse Application\\Entity\\Name;\nuse Application\\Entity\\Address;\nuse Application\\Entity\\Profile;\n```", "```php\n$name = new Name();\n$addr = new Address();\n$prof = new Profile();\n```", "```php\nuse Application\\Entity\\ {\n  Name,\n  Address,\n  Profile\n};\n$name = new Name();\n$addr = new Address();\n$prof = new Profile();\n```", "```php\n    class Base\n    {\n      protected $id;\n      private $key = 12345;\n      public function getId()\n      {\n        return $this->id;\n      }\n      public function setId()\n      {\n        $this->id = $this->generateRandId();\n      }\n      protected function generateRandId()\n      {\n        return unpack('H*', random_bytes(8))[1];\n      }\n    }\n\n    class Customer extends Base\n    {\n      protected $name;\n      public function getName()\n      {\n        return $this->name;\n      }\n      public function setName($name)\n      {\n        $this->name = $name;\n      }\n    }\n    ```", "```php\n    class Registry\n    {\n      protected static $instance = NULL;\n      protected $registry = array();\n      private function __construct()\n      {\n        // nobody can create an instance of this class\n      }\n      public static function getInstance()\n      {\n        if (!self::$instance) {\n          self::$instance = new self();\n        }\n        return self::$instance;\n      }\n      public function __get($key)\n      {\n        return $this->registry[$key] ?? NULL;\n      }\n      public function __set($key, $value)\n      {\n        $this->registry[$key] = $value;\n      }\n    }\n    ```", "```php\n    class Test\n    {\n\n      public const TEST_WHOLE_WORLD  = 'visible.everywhere';\n\n      // NOTE: only works in PHP 7.1 and above\n      protected const TEST_INHERITED = 'visible.in.child.classes';\n\n      // NOTE: only works in PHP 7.1 and above\n      private const TEST_LOCAL= 'local.to.class.Test.only';\n\n      public static function getTestInherited()\n      {\n        return static::TEST_INHERITED;\n      }\n\n      public static function getTestLocal()\n      {\n        return static::TEST_LOCAL;\n      }\n\n    }\n    ```", "```php\n$base     = new Base();\n$customer = new Customer();\n```", "```php\n$customer->setId();\n$customer->setName('Test');\necho 'Welcome ' . $customer->getName() . PHP_EOL;\necho 'Your new ID number is: ' . $customer->getId() . PHP_EOL;\n```", "```php\necho 'Key (does not work): ' . $base->key;\necho 'Key (does not work): ' . $customer->key;\necho 'Name (does not work): ' . $customer->name;\necho 'Random ID (does not work): ' . $customer->generateRandId();\n```", "```php\n    interface ConnectionAwareInterface\n    {\n      public function setConnection(Connection $connection);\n    }\n    ```", "```php\n    class CountryList implements ConnectionAwareInterface\n    {\n      protected $connection;\n      public function setConnection(Connection $connection)\n      {\n        $this->connection = $connection;\n      }\n      public function list()\n      {\n        $list = [];\n        $stmt = $this->connection->pdo->query(\n          'SELECT iso3, name FROM iso_country_codes');\n        while ($country = $stmt->fetch(PDO::FETCH_ASSOC)) {\n          $list[$country['iso3']] =  $country['name'];\n        }\n        return $list;\n      }\n\n    }\n    class CustomerList implements ConnectionAwareInterface\n    {\n      protected $connection;\n      public function setConnection(Connection $connection)\n      {\n        $this->connection = $connection;\n      }\n      public function list()\n      {\n        $list = [];\n        $stmt = $this->connection->pdo->query(\n          'SELECT id, name FROM customer');\n        while ($customer = $stmt->fetch(PDO::FETCH_ASSOC)) {\n          $list[$customer['id']] =  $customer['name'];\n        }\n        return $list;\n      }\n\n    }\n    ```", "```php\n    namespace Application\\Generic;\n\n    use PDO;\n    use Exception;\n    use Application\\Database\\Connection;\n    use Application\\Database\\ConnectionAwareInterface;\n\n    class ListFactory\n    {\n      const ERROR_AWARE = 'Class must be Connection Aware';\n      public static function factory(\n        ConnectionAwareInterface $class, $dbParams)\n      {\n        if ($class instanceofConnectionAwareInterface) {\n            $class->setConnection(new Connection($dbParams));\n            return $class;\n        } else {\n            throw new Exception(self::ERROR_AWARE);\n        }\n        return FALSE;\n      }\n    }\n    ```", "```php\n    interface DateAware\n    {\n      public function setDate($date);\n      public function setBoth(DateTime $dateTime);\n    }\n\n    interface TimeAware\n    {\n      public function setTime($time);\n      public function setBoth($date, $time);\n    }\n\n    class DateTimeHandler implements DateAware, TimeAware\n    {\n      protected $date;\n      protected $time;\n      public function setDate($date)\n      {\n        $this->date = $date;\n      }\n      public function setTime($time)\n      {\n        $this->time = $time;\n      }\n      public function setBoth(DateTime $dateTime)\n      {\n        $this->date = $date;\n      }\n    }\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n$params = include __DIR__ . DB_CONFIG_FILE;\n```", "```php\n  $list = Application\\Generic\\ListFactory::factory(\n    new Application\\Generic\\CountryList(), $params);\n  foreach ($list->list() as $item) echo $item . '';\n```", "```php\n  $list = Application\\Generic\\ListFactory::factory(\n    new Application\\Generic\\CustomerList(), $params);\n  foreach ($list->list() as $item) echo $item . '';\n```", "```php\ninterface TimeAware\n{\n  public function setTime($time);\n  // this will cause a problem\n  public function setBoth(DateTime $dateTime);\n}\n```", "```php\n    trait ListTrait\n    {\n      public function list()\n      {\n        $list = [];\n        $sql  = sprintf('SELECT %s, %s FROM %s', \n          $this->key, $this->value, $this->table);\n        $stmt = $this->connection->pdo->query($sql);\n        while ($item = $stmt->fetch(PDO::FETCH_ASSOC)) {\n          $list[$item[$this->key]] = $item[$this->value];\n        }\n        return $list;\n      }\n    }\n    ```", "```php\n    class CountryListUsingTrait implements ConnectionAwareInterface\n    {\n\n      use ListTrait;\n\n      protected $connection;\n      protected $key   = 'iso3';\n      protected $value = 'name';\n      protected $table = 'iso_country_codes';\n\n      public function setConnection(Connection $connection)\n      {\n        $this->connection = $connection;\n      }\n\n    }\n    ```", "```php\n    namespace Application\\Generic;\n\n    use PDO;\n\n    trait ListTrait\n    {\n      public function list()\n      {\n        // code as shown above\n      }\n    }\n    ```", "```php\n    trait Test\n    {\n      public function setId($id)\n      {\n        $obj = new stdClass();\n        $obj->id = $id;\n        $this->id = $obj;\n      }\n    }\n\n    class Base\n    {\n      protected $id;\n      public function getId()\n      {\n        return $this->id;\n      }\n      public function setId($id)\n      {\n        $this->id = $id;\n      }\n    }\n\n    class Customer extends Base\n    {\n      use Test;\n      protected $name;\n      public function getName()\n      {\n        return $this->name;\n      }\n      public function setName($name)\n      {\n        $this->name = $name;\n      }\n    }\n    ```", "```php\n    trait Test\n    {\n      protected $id;\n      public function getId()\n      {\n        return $this->id;\n      }\n      public function setId($id)\n      {\n        $this->id = $id;\n      }\n      public function setName($name)\n      {\n        $obj = new stdClass();\n        $obj->name = $name;\n        $this->name = $obj;\n      }\n    }\n\n    class Customer\n    {\n      use Test;\n      protected $name;\n      public function getName()\n      {\n        return $this->name;\n      }\n      public function setName($name)\n      {\n        $this->name = $name;\n      }\n    }\n    ```", "```php\n    trait IdTrait\n    {\n      protected $id;\n      public $key;\n      public function setId($id)\n      {\n        $this->id = $id;\n      }\n      public function setKey()\n      {\n        $this->key = date('YmdHis') \n        . sprintf('%04d', rand(0,9999));\n      }\n    }\n\n    trait NameTrait\n    {\n      protected $name;\n      public $key;\n      public function setName($name)\n      {\n        $this->name = $name;\n      }\n      public function setKey()\n      {\n        $this->key = unpack('H*', random_bytes(18))[1];\n      }\n    }\n\n    class Test\n    {\n      use IdTrait, NameTrait {\n        NameTrait::setKeyinsteadofIdTrait;\n        IdTrait::setKey as setKeyDate;\n      }\n    }\n    ```", "```php\n$customer = new Customer();\n$customer->setId(100);\n$customer->setName('Fred');\nvar_dump($customer);\n```", "```php\n$customer = new Customer();\n$customer->setId(100);\n$customer->setName('Fred');\nvar_dump($customer);\n```", "```php\n$a = new Test();\n$a->setId(100);\n$a->setName('Fred');\n$a->setKey();\nvar_dump($a);\n\n$a->setKeyDate();\nvar_dump($a);\n```", "```php\n    $a = new class (123.45, 'TEST') {\n      public $total = 0;\n      public $test  = '';\n      public function __construct($total, $test)\n      {\n        $this->total = $total;\n        $this->test  = $test;\n      }\n    };\n    ```", "```php\n    $b = new ArrayIterator(range(10,100,10));\n    $f = new class ($b, 50) extends FilterIterator {\n      public $limit = 0;\n      public function __construct($iterator, $limit)\n      {\n        $this->limit = $limit;\n        parent::__construct($iterator);\n      }\n      public function accept()\n      {\n        return ($this->current() <= $this->limit);\n      }\n    };\n    ```", "```php\n    define('MAX_COLORS', 256 ** 3);\n\n    $d = new class () implements Countable {\n      public $current = 0;\n      public $maxRows = 16;\n      public $maxCols = 64;\n      public function cycle()\n      {\n        $row = '';\n        $max = $this->maxRows * $this->maxCols;\n        for ($x = 0; $x < $this->maxRows; $x++) {\n          $row .= '<tr>';\n          for ($y = 0; $y < $this->maxCols; $y++) {\n            $row .= sprintf(\n              '<td style=\"background-color: #%06X;\"', \n              $this->current);\n            $row .= sprintf(\n              'title=\"#%06X\">&nbsp;</td>', \n              $this->current);\n            $this->current++;\n            $this->current = ($this->current >MAX_COLORS) ? 0 \n                 : $this->current;\n          }\n          $row .= '</tr>';\n        }\n        return $row;\n      }\n      public function count()\n      {\n        return MAX_COLORS;\n      }\n    };\n    ```", "```php\n    $a = new class() {\n      use IdTrait, NameTrait {\n        NameTrait::setKeyinsteadofIdTrait;\n        IdTrait::setKey as setKeyDate;\n      }\n    };\n    ```", "```php\necho \"\\nAnonymous Class\\n\";\necho $a->total .PHP_EOL;\necho $a->test . PHP_EOL;\n```", "```php\necho \"\\nAnonymous Class Extends FilterIterator\\n\";\nforeach ($f as $item) echo $item . '';\necho PHP_EOL;\n```", "```php\n$d->current = $_GET['current'] ?? 0;\n$d->current = hexdec($d->current);\n$factor = ($d->maxRows * $d->maxCols);\n$next = $d->current + $factor;\n$prev = $d->current - $factor;\n$next = ($next <MAX_COLORS) ? $next : MAX_COLORS - $factor;\n$prev = ($prev>= 0) ? $prev : 0;\n$next = sprintf('%06X', $next);\n$prev = sprintf('%06X', $prev);\n?>\n```", "```php\n<h1>Total Possible Color Combinations: <?= count($d); ?></h1>\n<hr>\n<table>\n<?= $d->cycle(); ?>\n</table>\t\n<a href=\"?current=<?= $prev ?>\"><<PREV</a>\n<a href=\"?current=<?= $next ?>\">NEXT >></a>\n```", "```php\n$a = new class() {\n  use IdTrait, NameTrait {\n    NameTrait::setKeyinsteadofIdTrait;\n    IdTrait::setKey as setKeyDate;\n  }\n};\n```", "```php\n$a = new Test();\n```"]