- en: Appendix A. Tools to Make Life Easy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 使生活更轻松的工具
- en: 'We covered many things in this book, starting with new features in PHP 7 and
    ending with the best techniques in programming. In each chapter, we used and talked
    about some tools, but due to the finite length of chapters and the book, we did
    not go too much in detail for these tools. In this appendix, we will discuss three
    of these tools in much more detail. The tools we will to discuss are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中涵盖了许多内容，从PHP 7中的新功能开始，到编程中的最佳技术结束。在每一章中，我们都使用并讨论了一些工具，但由于章节和书籍的有限长度，我们没有对这些工具进行太多详细介绍。在这个附录中，我们将更详细地讨论其中三个工具。我们将讨论的工具如下：
- en: Composer
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer
- en: Git
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Grunt watch
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grunt watch
- en: So, let's start.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始吧。
- en: Composer – A dependency manager for PHP
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer – PHP的依赖管理器
- en: Composer is a dependency management tool for PHP that enables us to define dependencies
    for a PHP application, and Composer installs/updates them. Composer is completely
    written in PHP and is an application in the PHP Archive (PHAR) format.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是PHP的依赖管理工具，它使我们能够为PHP应用程序定义依赖关系，并安装/更新它们。Composer完全由PHP编写，并且是PHP存档（PHAR）格式的应用程序。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Composer downloads dependencies from [https://packagist.org/](https://packagist.org/).
    Any dependency for an application can be installed through Composer as long as
    it is available on Packagist. Also, complete applications can be installed through
    Composer if they are available at Packagist.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Composer从[https://packagist.org/](https://packagist.org/)下载依赖项。只要在Packagist上可用，就可以通过Composer安装应用程序的任何依赖项。此外，如果在Packagist上可用，还可以通过Composer安装完整的应用程序。
- en: Composer installation
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Composer安装
- en: 'Composer is a command line tool and can be installed globally in the operating
    system, or the `composer.phar` file can be placed in the root of the application
    and then executed from the command line. For Windows, an executable setup file
    is provided, which can be used to install Composer globally. For this book, we
    will follow the instructions for Debian/Ubuntu globally. Perform the following
    steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是一个命令行工具，可以在操作系统中全局安装，或者可以将`composer.phar`文件放在应用程序的根目录中，然后从命令行执行。对于Windows，提供了一个可执行的安装程序文件，可以用于全局安装Composer。对于本书，我们将遵循Debian/Ubuntu全局安装的说明。执行以下步骤：
- en: 'Issue the following command to download the Composer installer. The file name
    is `installer` and can only be executed with PHP once installed via the following
    code:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发出以下命令以下载Composer安装程序。文件名为`installer`，安装后只能通过以下代码使用PHP执行：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Issue the following command to install it globally on Debian or Ubuntu:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发出以下命令在Debian或Ubuntu上全局安装它：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command will download Composer and will install it in the `/usr/local/bin`
    directory with the file name `composer`. Now, we will be able to run Composer
    globally.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将下载Composer并将其安装在`/usr/local/bin`目录中，文件名为`composer`。现在，我们将能够全局运行Composer。
- en: 'Verify the Composer installation by issuing the following command in the terminal:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中发出以下命令来验证Composer安装：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If the Composer version is displayed, then Composer is successfully installed
    globally.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果显示Composer版本，则Composer已成功全局安装。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If Composer is installed locally to an application, then we will have a `composer.phar`
    file. The commands are the same, but all the commands should be executed with
    PHP. For example, `php composer.phar --version` will display the Composer version.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Composer是安装在应用程序本地的，那么我们将有一个`composer.phar`文件。命令是相同的，但所有命令都应该使用PHP执行。例如，`php
    composer.phar --version`将显示Composer版本。
- en: Now, Composer is installed successfully and is working; it's time to use it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Composer已成功安装并且正在工作；是时候使用它了。
- en: Using Composer
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Composer
- en: To use Composer in our project, we will need a `composer.json` file. This file
    contains all the dependencies required for the project and some other metadata.
    Composer uses this file to install and update different libraries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的项目中使用Composer，我们将需要一个`composer.json`文件。该文件包含项目所需的所有依赖项和一些其他元数据。Composer使用此文件来安装和更新不同的库。
- en: 'Let''s assume that our application needs to log different information in different
    ways. For this, we can use the `monolog` library. First, we will create a `composer.json`
    file in the root of our application and add the following code to it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的应用程序需要以不同的方式记录不同的信息。为此，我们可以使用`monolog`库。首先，在应用程序的根目录中创建一个`composer.json`文件，并添加以下代码：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After saving the file, execute the following command to install the dependencies
    of the application:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，执行以下命令安装应用程序的依赖项：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command will download the dependencies and place them in the `vendor`
    directory, as can be seen in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将下载依赖项并将它们放在`vendor`目录中，如下面的屏幕截图所示：
- en: '![Using Composer](graphics/B05225_appendix_a_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![使用Composer](graphics/B05225_appendix_a_01.jpg)'
- en: As can be seen in the preceding screenshot, monolog version 1.0.2 is downloaded,
    and a `vendor` directory is created. The `monolog` library is placed in this directory.
    Also, if a package has to autoload information, then Composer places the library
    in the Composer autoloader, which is also placed in the `vendor` directory. So,
    any new libraries or dependencies will be autoloaded automatically during the
    application's execution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，下载了monolog版本1.0.2，并创建了一个`vendor`目录。`monolog`库放在这个目录中。此外，如果一个包需要自动加载信息，Composer会将库放在Composer自动加载器中，该自动加载器也放在`vendor`目录中。因此，在应用程序执行期间，任何新的库或依赖项都将自动加载。
- en: Also a new file can be seen, which is `composer.lock`. When Composer downloads
    and installs any dependencies, the exact version and other information is written
    to this file to lock the application to this specific version of dependencies.
    This ensures that all the team members or whoever wants to set up the application
    will use the exact same version of the dependencies, and thus, it will reduce
    the chances of using different versions of dependencies.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以看到一个新文件，名为`composer.lock`。当Composer下载和安装任何依赖项时，确切的版本和其他信息将写入此文件，以锁定应用程序到这些依赖项的特定版本。这确保所有团队成员或任何想要设置应用程序的人将使用相同的依赖项版本，从而减少使用不同版本的依赖项的可能性。
- en: Nowadays, Composer is widely used for package management. Big open source projects
    such as Magento, Zend Framework, Laravel, Yii, and many others are easily available
    for installation through Composer. We will install some of these in the next appendix
    using Composer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Composer被广泛用于包管理。大型开源项目，如Magento、Zend Framework、Laravel、Yii等，都可以通过Composer轻松安装。我们将在下一个附录中使用Composer安装其中一些。
- en: Git – A version control system
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git-版本控制系统
- en: Git is the most widely used version control system. According to the Git official
    website, it is a distributed version control system capable of handling everything
    from small- to large-sized projects with speed and efficiency.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Git是最广泛使用的版本控制系统。根据Git官方网站，它是一个分布式版本控制系统，能够处理从小型到大型项目的一切事务，并具有速度和效率。
- en: Git installation
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git安装
- en: 'Git is available for all major operating systems. For Windows, an executable
    setup file is provided that can be used to install Git and use it in the command
    line. On OS X, Git comes already installed, but if it is not found, it can be
    downloaded from their official website. To install Git on Debian/Ubuntu, just
    issue the following command in the terminal:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Git适用于所有主要操作系统。对于Windows，提供了一个可执行的安装程序文件，可以用于安装Git并在命令行中使用它。在OS X上，Git已经安装好了，但如果找不到，可以从官方网站下载。要在Debian/Ubuntu上安装Git，只需在终端中发出以下命令：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After installation, issue the following command to check whether it is properly
    installed:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，发出以下命令检查是否已正确安装：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, we will see the current installed version of Git.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将查看Git的当前安装版本。
- en: Using Git
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Git
- en: For a better understanding of Git, we will start with a test project. Our test
    project name is `packt-git`. For this project, we also created a GitHub repository
    named `packt-git`, where will push our project files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Git，我们将从一个测试项目开始。我们的测试项目名称是`packt-git`。对于这个项目，我们还创建了一个名为`packt-git`的GitHub存储库，我们将在其中推送我们的项目文件。
- en: 'First, we will initialize Git in our project by issuing the following command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将通过发出以下命令在我们的项目中初始化Git：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding command will initialize an empty Git repository in our project
    root directory, and the head will be kept on the master branch, which is the default
    branch for every Git repository. It will create a hidden `.git` directory that
    will contain all the information about the repository. Next, we will add a remote
    repository that we will create on GitHub. I created a test repository at GitHub
    that has the URL [https://github.com/altafhussain10/packt-git.git](https://github.com/altafhussain10/packt-git.git).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在我们的项目根目录中初始化一个空的Git存储库，并将头保留在主分支上，这是每个Git存储库的默认分支。它将创建一个名为`.git`的隐藏目录，其中包含有关存储库的所有信息。接下来，我们将添加一个远程存储库，我们将在GitHub上创建。我在GitHub上创建了一个测试存储库，其URL为[https://github.com/altafhussain10/packt-git.git](https://github.com/altafhussain10/packt-git.git)。
- en: 'Now, issue the following command to add the GitHub repository to our empty
    repository:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，发出以下命令将GitHub存储库添加到我们的空存储库中：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, create a `README.md` file at your project root and add some content to
    it. The `README.md` file is used to display the repository information and other
    details about the repository at Git. This file is also used to display instructions
    regarding how to use the repository and/or the project for which this repository
    is created.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在项目根目录创建一个`README.md`文件，并向其中添加一些内容。`README.md`文件用于显示存储库信息和有关Git存储库的其他详细信息。该文件还用于显示有关如何使用创建此存储库的项目的存储库和/或项目的说明。
- en: 'Now, issue the following command to see the status of our Git repository:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，发出以下命令来查看我们的Git存储库的状态：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This command will display the status of the repository, as can be seen in the
    following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将显示存储库的状态，如下面的屏幕截图所示：
- en: '![Using Git](graphics/B05225_appendix_a_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![使用Git](graphics/B05225_appendix_a_02.jpg)'
- en: 'As can be seen in the preceding screenshot, we have an untracked file in our
    repository that is not committed yet. First, we will add the files to be tracked
    by issuing the following command in the terminal:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，我们的存储库中有一个未跟踪的文件尚未提交。首先，我们将通过在终端中发出以下命令来添加要跟踪的文件：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `git add` command updates the index using the current contents found in
    the working tree. This command adds all the changes made to the path. There are
    some options that can be used to add some specific changes. The previous command
    we used will only add the `README.md` file to the track in the repository. So,
    if we want to track all the files, then we will use the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`git add`命令使用当前工作树中找到的当前内容更新索引。此命令将添加对路径所做的所有更改。有一些选项可用于添加一些特定更改。我们之前使用的命令将只将`README.md`文件添加到存储库中进行跟踪。因此，如果我们想要跟踪所有文件，那么我们将使用以下命令：'
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will start tracking all the files in the current working directory or
    at the root of the current branch. Now, if we want to track some specific files,
    such as all files with the `.php` extension, then we can use it as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将开始跟踪当前工作目录中的所有文件或当前分支的根目录。现在，如果我们想要跟踪一些特定的文件，比如所有带有`.php`扩展名的文件，那么我们可以使用如下方式：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will add all the files with the `.php` extension to track.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加所有带有`.php`扩展名的文件进行跟踪。
- en: 'Next, we will commit changes or additions to our repository using the following
    command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下命令提交对我们的存储库的更改或添加：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `git commit` command commits all the changes to the local repository. The
    `-m` flag specifies any log message to `commit`. Remember that the changes are
    only committed to the local repository.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`git commit`命令将所有更改提交到本地存储库。`-m`标志指定要`commit`的任何日志消息。请记住，更改只提交到本地存储库。'
- en: 'Now, we will push the changes to our remote repository using the following
    command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用以下命令将更改推送到我们的远程存储库：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding command will push all the changes from the local repository to
    the remote repository or origin. The `-u` flag is used to set the upstream, and
    it links our local repo to our remote central repo. As we pushed our changes for
    the first time, we have to use the `-u` option. After this, we can just use the
    following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将把本地存储库中的所有更改推送到远程存储库或原始存储库。`-u`标志用于设置上游，它将我们的本地存储库链接到我们的远程中央存储库。因为我们第一次推送了更改，所以我们必须使用`-u`选项。之后，我们只需使用以下命令：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will push all the changes to the main repository of the current branch
    at which we are.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把所有更改推送到我们当前所在的主分支的主存储库。
- en: Creating new branches and merging
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新分支和合并
- en: New branches are always required during development. If any kind of changes
    are required, it is good to create a new branch for these changes. Then, make
    all the changes on this branch and finally commit, merge, and push them to the
    remote origin.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中总是需要新分支。如果需要任何更改，最好为这些更改创建一个新分支。然后，在此分支上进行所有更改，最后提交、合并并推送到远程存储库。
- en: 'To better understand this, let''s suppose we want to fix an issue in the login
    page. The issue is about validation errors. We will name our new branch `login_validation_errors_fix`.
    It is good practice to give a more understandable name to branches. Also, we would
    like to create this new branch from the master branch head. This means that we
    want the new branch to inherit all the data from the master branch. So, if we
    are not at the master branch, we have to use the following command to switch to
    the master branch:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，让我们假设我们想要修复登录页面上的问题。问题是关于验证错误的。我们将为我们的新分支命名为`login_validation_errors_fix`。给分支起一个更易理解的名字是一个好习惯。此外，我们希望从主分支头部创建这个新分支。这意味着我们希望新分支继承主分支的所有数据。因此，如果我们不在主分支上，我们必须使用以下命令切换到主分支：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding command will switch us to the master branch no matter which branch
    we are at. To create the branch, issue the following command in the terminal:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将无论我们在哪个分支，都会将我们切换到主分支。要创建分支，在终端中发出以下命令：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, our new branch is created from the master branch head, so all the changes
    should be made to this new branch. After all the changes and fixes are done, we
    have to commit the changes to the local and remote repositories. Note that we
    did not create the new branch in our remote repository. Now, let''s commit the
    changes using the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的新分支是从主分支头部创建的，因此所有更改都应该在这个新分支上进行。完成所有更改和修复后，我们必须将更改提交到本地和远程存储库。请注意，我们没有在远程存储库中创建新分支。现在，让我们使用以下命令提交更改：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Note that we did not use `git add` to add the changes or new additions. To
    automatically commit our changes, we used the `-a` option in `commit`, which will
    add all the files automatically. If `git add` is used, then there is no need to
    use the `-a` option in `commit`. Now, our changes are committed to the local repository.
    We will need to push the changes to the remote origin. Issue the following command
    in the terminal:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们没有使用`git add`来添加更改或新添加。为了自动提交我们的更改，我们在`commit`中使用了`-a`选项，这将自动添加所有文件。如果使用了`git
    add`，则在`commit`中就不需要使用`-a`选项。现在，我们的更改已经提交到本地存储库。我们需要将更改推送到远程存储库。在终端中发出以下命令：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding command will create a new branch at the remote repository, set
    the tracking of the same local branch to the remote branch, and push all the changes
    to it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在远程存储库创建一个新分支，将相同的本地分支跟踪到远程分支，并将所有更改推送到远程存储库。
- en: 'Now, we want to merge the changes with our master branch. First, we need to
    switch to our master branch using the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要将更改与我们的主分支合并。首先，我们需要使用以下命令切换到我们的主分支：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we will issue the following commands to merge our new branch `login_validation_errors_fix`
    with the master branch:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将发出以下命令，将我们的新分支`login_validation_errors_fix`与主分支合并：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: It is important to switch to the branch to which we want to merge our new branch.
    After this, we need to use the `git merge branch_to_merge` syntax to merge this
    branch with the current branch. Finally, we can just push to the remote origin.
    Now, if we take a look at our remote repository, we will see the new branch and
    also the changes in our master branch.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要切换到我们想要合并新分支的分支。之后，我们需要使用`git merge branch_to_merge`语法将此分支与当前分支合并。最后，我们只需推送到远程存储库。现在，如果我们查看远程存储库，我们将看到新分支以及主分支中的更改。
- en: Cloning a repository
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆存储库
- en: 'Sometimes, we need to work on a project that is hosted on a repository. For
    this, we will first clone this repository, which will download the complete repository
    to our local system, and then create a local repository for this remote repository.
    The rest of the working is the same as we discussed before. To clone a repository,
    we should first know the remote repository web address. Let''s say that we want
    to clone the `PHPUnit` repository. If we go to the GitHub repository for PHPUnit,
    we will see the web address of the repository at the upper right-hand side, as
    shown in the screenshot that follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要在托管在存储库上的项目上工作。为此，我们将首先克隆此存储库，这将把完整的存储库下载到我们的本地系统，并为此远程存储库创建一个本地存储库。其余的工作与我们之前讨论的一样。要克隆存储库，我们应该首先知道远程存储库的网址。假设我们想要克隆`PHPUnit`存储库。如果我们转到PHPUnit的GitHub存储库，我们将在右上角看到存储库的网址，如下面的截图所示：
- en: '![Cloning a repository](graphics/B05225_appendix_a_03.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![克隆存储库](graphics/B05225_appendix_a_03.jpg)'
- en: 'The URL just after the **HTTPS** button is the web address for this repository.
    Copy this URL and use the following command to clone this repository:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTTPS**按钮后面的URL是此存储库的网址。复制此URL并使用以下命令克隆此存储库：'
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will start downloading the repository. After it is completed, we will have
    a `PHPUnit` folder that will have the repository and all its files. Now, all the
    operations mentioned in the preceding topics can be performed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将开始下载存储库。完成后，我们将有一个`PHPUnit`文件夹，其中包含存储库及其所有文件。现在，可以执行前面主题中提到的所有操作。
- en: Webhooks
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Webhooks
- en: One of the most powerful features of Git is webhooks. Webhooks are events that
    are fired when a specific action occurs on the repository. If an event or hook
    for the `Push` request is made, then this hook will be fired every time a push
    is made to this repository.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Git最强大的功能之一是webhooks。Webhooks是在存储库上发生特定操作时触发的事件。如果对`Push`请求进行了事件或挂钩，那么每次向此存储库进行推送时都会触发此挂钩。
- en: 'To add a webhook to a repository, click on the **Settings** link for the repository
    in the upper right-hand side. In the new page, on the left-hand side, we will
    have a **Webhooks and Services** link. Click on it, and we will see a page similar
    to the following one:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要向存储库添加webhook，请单击右上角的**设置**链接。在新页面中，左侧将有一个**Webhooks and Services**链接。单击它，我们将看到类似以下页面的页面：
- en: '![Webhooks](graphics/B05225_appendix_a_04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![Webhooks](graphics/B05225_appendix_a_04.jpg)'
- en: As can be seen in the preceding screenshot, we have to enter a payload URL,
    which will be called every time our selected event is fired. In **Content type**,
    we will select the data format in which the payload will be sent to our URL. In
    the events section, we can select whether we want only push events or all the
    events; we can select multiple events for which we want this hook to be fired.
    After saving this hook, it will be fired every time the selected event occurs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，我们必须输入有效负载URL，每次选择的事件触发时都会调用它。在**内容类型**中，我们将选择将有效负载发送到我们的URL的数据格式。在事件部分，我们可以选择是否只想要推送事件或所有事件；我们可以选择多个事件，希望此挂钩被触发。保存此挂钩后，每次发生所选事件时都会触发它。
- en: Webhooks are mostly used for deployment. When the changes are pushed and if
    there is a webhook for the push event, the specific URL is called. Then, this
    URL executes some command to download the changes and processes them on the local
    server and places them at the appropriate place. Also, webhooks are used for continues
    integration and to deploy to cloud services.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Webhooks主要用于部署。当更改被推送并且推送事件有一个webhook时，将调用特定的URL。然后，此URL执行一些命令来下载更改并在本地服务器上处理它们，并将它们放置在适当的位置。此外，webhooks用于持续集成和部署到云服务。
- en: Desktop tools to manage repositories
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理存储库的桌面工具
- en: 'There are several tools that can be used to manage Git repositories. GitHub
    provides its own tool called GitHub Desktop that can be used to manage GitHub
    repositories. This can be used to create new repositories, see the history, and
    push, pull, and clone repositories. It provides every feature that we can use
    in the command line. The screenshot that follows shows our test `packt-git` repository:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种工具可用于管理Git存储库。GitHub提供了自己的名为GitHub Desktop的工具，可用于管理GitHub存储库。它可用于创建新存储库，查看历史记录，并推送、拉取和克隆存储库。它提供了我们可以在命令行中使用的每个功能。接下来的屏幕截图显示了我们的测试`packt-git`存储库：
- en: '![Desktop tools to manage repositories](graphics/B05225_appendix_a_05.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![管理存储库的桌面工具](graphics/B05225_appendix_a_05.jpg)'
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: GitHub Desktop can be downloaded from [https://desktop.github.com/](https://desktop.github.com/)
    and is available for Mac and Windows only. Also, GitHub Desktop can be only used
    with GitHub unless some hacks are used to make it work with other repositories,
    such as GitLab or Bitbucket.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Desktop可以从[https://desktop.github.com/](https://desktop.github.com/)下载，仅适用于Mac和Windows。此外，GitHub
    Desktop只能与GitHub一起使用，除非使用一些技巧使其与其他存储库（如GitLab或Bitbucket）一起工作。
- en: 'Another powerful tool is SourceTree. SourceTree can be used with GitHub, GitLab,
    and Bitbucket easily. It provides complete features to manage repositories, pull,
    push, commit, merge, and other actions. SourceTree provides a very powerful and
    beautiful graph tool for the branches and commits. The following is a screenshot
    for SourceTree that is used to connect with our `packt-git` test repository:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个强大的工具是SourceTree。SourceTree可以轻松与GitHub、GitLab和Bitbucket一起使用。它提供了完整的功能来管理存储库，包括拉取、推送、提交、合并和其他操作。SourceTree为分支和提交提供了一个非常强大和美观的图形工具。以下是用于连接到我们的`packt-git`测试存储库的SourceTree的屏幕截图：
- en: '![Desktop tools to manage repositories](graphics/B05225_appendix_a_06.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![管理存储库的桌面工具](graphics/B05225_appendix_a_06.jpg)'
- en: Besides the previous two nice tools, every development IDE provides version
    control systems with full support and also provides features such as different
    colors for modified and newly added files.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面介绍的两个好工具外，每个开发IDE都提供完整支持的版本控制系统，并提供诸如不同颜色表示修改和新添加文件等功能。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Git is a powerful tool; it can't be covered in this appendix. There are several
    books available, but Git Book is a very good place to start. This can be downloaded
    in different formats from [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)
    or can be read online.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个强大的工具；这个附录无法涵盖它。有几本书可供选择，但Git Book是一个很好的起点。可以从[https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)以不同格式下载，也可以在线阅读。
- en: Grunt watch
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Grunt watch
- en: We studied Grunt in [Chapter 3,](ch03.html "Chapter 3. Improving PHP 7 Application
    Performance") *Improving PHP 7 Application Performance*. We only used it to merge
    CSS and JavaScript files and minify them. However, Grunt is not used only for
    this purpose. It is a JavaScript task runner, which can run tasks either by watching
    specific files for changes or by manually running tasks. We studied how we can
    run tasks manually, so now we will study how to use grunt watch to run specific
    tasks when some changes are made.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章。改进PHP 7应用程序性能")中学习了Grunt，*改进PHP 7应用程序性能*。我们只用它来合并CSS和JavaScript文件并对其进行缩小。然而，Grunt不仅用于此目的。它是一个JavaScript任务运行器，可以通过监视特定文件的更改或手动运行任务来运行任务。我们学习了如何手动运行任务，现在我们将学习如何使用grunt
    watch在进行一些更改时运行特定任务。
- en: Grunt watch is useful and saves a lot of time because it runs the specific tasks
    automatically instead of running the tasks manually every time we change something.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt watch非常有用，可以节省大量时间，因为它会自动运行特定任务，而不是每次更改时手动运行任务。
- en: Let's recall our examples from [Chapter 3](ch03.html "Chapter 3. Improving PHP
    7 Application Performance"), *Improving PHP 7 Application Performance*. We used
    Grunt to combine and compress CSS and JavaScript files. For this purpose, we created
    four tasks. One task was combining all CSS files, the second task was combining
    all JavaScript files, the third task was compressing the CSS files, and the fourth
    task was compressing all JavaScript files. It will be very time consuming if we
    run all these tasks manually every time we make some changes. Grunt provides a
    feature called watch that watches different destinations for file changes, and
    if any change occurs, it executes the tasks that are defined in the watch.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下[第3章](ch03.html "第3章。改进PHP 7应用程序性能")中的例子，*改进PHP 7应用程序性能*。我们使用Grunt来合并和压缩CSS和JavaScript文件。为此，我们创建了四个任务。一个任务是合并所有CSS文件，第二个任务是合并所有JavaScript文件，第三个任务是压缩CSS文件，第四个任务是压缩所有JavaScript文件。如果我们每次进行一些更改都要手动运行所有这些任务，那将会非常耗时。Grunt提供了一个名为watch的功能，它会监视不同的目标文件夹以检测文件更改，如果发生任何更改，它会执行在watch中定义的任务。
- en: 'First, check whether the `grunt watch` module is installed or not. Check the
    `node_modules` directory and see whether there is another directory with the name
    `grunt-contrib-watch`. If this directory is there, then watch is already installed.
    If the directory is not there, then just issue the following command in the terminal
    at the project root directory where `GruntFile.js` is located:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检查`grunt watch`模块是否已安装。检查`node_modules`目录，看看是否有另一个名为`grunt-contrib-watch`的目录。如果有这个目录，那么watch已经安装。如果没有这个目录，那么只需在项目根目录中包含`GruntFile.js`的终端中发出以下命令：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding command will install Grunt watch and the `grunt-contrib-watch`
    directory will be available with the `watch` module.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令将安装Grunt watch，`grunt-contrib-watch`目录将与`watch`模块一起可用。
- en: 'Now, we will modify this `GruntFile.js` file to add the `watch` module, which
    will monitor all the files in our defined directories, and if any changes occur,
    it will run these tasks automatically. This will save a lot of time in manually
    executing these tasks again and again. Look at the following code; the highlighted
    code is the modified section:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将修改`GruntFile.js`文件以添加`watch`模块，它将监视我们定义的目录中的所有文件，如果发生任何更改，它将自动运行这些任务。这将节省大量时间，不再需要手动执行这些任务。看一下以下代码；高亮显示的代码是修改后的部分：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In preceding highlighted code, we added a `watch` block. The `mywatch` title
    can be any name. The `files` block is required, and it takes an array of the source
    paths. The Grunt watch watches for changes in these destinations and executes
    the tasks that are defined in the tasks block. Also, the tasks that are mentioned
    in the `tasks` block are already created in `GruntFile.js`. Also, we have to load
    the `watch` module using `grunt.loadNpmTasks`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的高亮代码中，我们添加了一个`watch`块。`mywatch`标题可以是任何名称。`files`块是必需的，它接受一个源路径的数组。Grunt
    watch会监视这些目的地的更改，并执行在tasks块中定义的任务。此外，tasks块中提到的任务已经在`GruntFile.js`中创建。此外，我们必须使用`grunt.loadNpmTasks`加载`watch`模块。
- en: 'Now, open the terminal at the root of the project where `GruntFile.js` is located
    and run the following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在项目根目录打开终端，其中包含`GruntFile.js`，并运行以下命令：
- en: '[PRE25]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Grunt will start watching the source files for changes. Now, modify any file
    in the paths defined in the `files` block in `GruntFile.js` and save the file.
    As soon as the file is saved, the tasks will be executed and the output for the
    tasks will be displayed in the terminal. A sample output can be seen in the following
    screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt将开始监视源文件的更改。现在，在`GruntFile.js`中的`files`块中修改任何文件，并保存该文件。一旦保存文件，任务将被执行，并且任务的输出将显示在终端中。以下截图中可以看到示例输出：
- en: '![Grunt watch](graphics/B05225_appendix_a_07.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![Grunt watch](graphics/B05225_appendix_a_07.jpg)'
- en: It is possible to watch as many tasks as required in the `watch` block, but
    these tasks should be present in `GruntFile.js`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在`watch`块中可以监视尽可能多的任务，但是这些任务应该存在于`GruntFile.js`中。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this appendix, we discussed Composer and how to use it to install and update
    packages. Also, we discussed Git in detail, including pushing, pulling, committing,
    creating branches, and merging different branches. Also, we discussed Git hooks.
    Lastly, we discussed Grunt watch and created a watch that executed four tasks
    whenever any changes occurred in the files paths defined in `GruntFile.js`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们讨论了Composer以及如何使用它来安装和更新软件包。此外，我们详细讨论了Git，包括推送、拉取、提交、创建分支和合并不同的分支。此外，我们还讨论了Git钩子。最后，我们讨论了Grunt
    watch，并创建了一个监视器，每当`GruntFile.js`中定义的文件路径发生更改时，就会执行四个任务。
