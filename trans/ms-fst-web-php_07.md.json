["```php\n<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>JS Variables</title>\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n\n<body onload=\"myJS()\" style=\"margin:0;\">\n\n<div id=\"main\"></div>\n\n<script type=\"text/javascript\">\n\n    function Sum(n1, n2)\n    {\n        // These will be global when called from the myJSAgain() function.\n        this.number1 = Number(n1);\n        this.number2 = Number(n2);\n\n        return this.number1 + this.number2;\n    }\n\n    function myJS()\n    {\n        // Side-effect: creates a global variable named 'total'.\n        total = new Sum(3, 4);\n        alert( window.total ); // Object\n\n        // Side-effect: modifies the global variable named 'total'.\n        myJSAgain();\n\n        // Global 'total' variable got clobbered.\n        alert( window.total ); // 3\n    }\n\n    function myJSAgain()\n    {\n        // Missing 'new' keyword. Will clobber the global 'total' variable.\n        total = Sum(1, 2);\n\n        // There are now two sets of 'number1' and 'number2' variables!\n        alert( window.number2 ); // 2\n    }\n\n</script>\n\n</body>\n\n</html>\n```", "```php\nfunction myJS()\n    {\n        function MyJSObject(n1, n2)\n        {\n            let number1 = Number(n1);\n            let number2 = Number(n2);\n\n            return {\n                set_number1: function (n1) {\n                    number1 = Number(n1);\n                },\n                set_number2: function (n2) {\n                    number2 = Number(n2);\n                },\n                sum: function ( ) {\n                    return number1 + number2;\n                }\n            };\n        }\n\n        let oApp1 = new MyJSObject(3, 4);\n        alert( oApp1.sum() ); // 7\n\n        let app2 = MyJSObject(1, 2);\n        alert( app2.sum() ); // 3\n        alert( oApp1.sum() ); // 7\n        alert( window.number1 ); // undefined\n    }\n```", "```php\nfoo.bar.baz.myVar    = false;\nfoo.bar.baz.otherVar = false;\n\nwith (foo.bar.baz) {\n    myVar = true;\n    otherVar = true;\n}\n```", "```php\nlet fBrBz = foo.bar.baz;\n\nfBrBz.myVar = true;\nfBrBz.otherVar = true;\n```", "```php\nfunction getObjectProperty(oString)\n{\n    let oRef;\n    eval(\"oRef = foo.bar.baz.\" + oString);\n    return oRef;\n}\n```", "```php\nfunction getObjectProperty(oString)\n{\n    return foo.bar.baz[oString];\n}\n```", "```php\nfunction myJS()\n{\n    let myString = \"abcdefg\";\n\n    let result = \"\";\n\n    for(let i = 0; i < myString.length; i++) {\n        result += i + \" = \" + myString.charAt(i) + \", \";\n        console.log(myString);\n    }\n\n    alert(result);\n}\n```", "```php\nfunction myJS()\n{\n    let oMyString = new String(\"abcdefg\");\n\n    let result = \"\";\n\n    for(let i = 0; i < oMyString.length; i++) {\n        result += i + \" = \" + oMyString.charAt(i) + \", \";\n        console.log(oMyString);\n    }\n\n    alert(result);\n}\n```", "```php\nfunction myJS()\n{\n    let docFragment = document.createDocumentFragment();\n    let element, content;\n\n    for(let i = 0; i < list.length; i++) {\n        element = document.createElement(\"p\");\n        content = document.createTextNode(list[i]);\n        element.appendChild(content);\n        docFragment.appendChild(element);\n    }\n\n    document.body.appendChild(docFragment);\n}\n```", "```php\nfunction myJS()\n{\n    let container = document.getElementById(\"container1\");\n\n    let cloned = container.cloneNode(true);\n\n    cloned.setAttribute(\"width\", \"50%\");\n\n    let element, content;\n\n    for(let i = 0; i < list.length; i++) {\n        element = document.createElement(\"p\");\n        content = document.createTextNode(list[i]);\n        element.appendChild(content);\n        cloned.appendChild(element);\n    }\n\n    container.parentNode.replaceChild(cloned, container);\n}\n```", "```php\nfunction myJS()\n{\n    let container = document.getElementById(\"container1\");\n\n    container.style.display = \"none\";\n    container.style.color = \"red\";\n    container.appendChild(moreNodes);\n    container.style.display = \"block\";\n}\n```", "```php\nfunction myJS()\n{\n    let container = document.getElementById(\"container1\");\n    let modifStyle = \"background: \" + newBackgound + \";\" +\n        \"color: \" + newColor + \";\" +\n        \"border: \" + newBorder + \";\";\n    if(typeof(container.style.cssText) != \"undefined\") {\n        container.style.cssText = modifStyle;\n    } else {\n        container.setAttribute(\"style\", modifStyle);\n    }\n}\n```", "```php\nfunction myJS()\n{\n    let elements = document.getElementsByTagName(\"*\");\n\n    for(let i = 0; i < elements.length; i++) {\n        if(elements[i].tagName.match(\"/^h[2-4]$/i\")) {\n            // Do something with the node that was found\n        }\n    }\n}\n```", "```php\nfunction myJS()\n{\n    let allHeadings = document.evaluate(\"//h2|//h3|//h4\", document, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\n    let singleheading;\n\n    while(singleheading = allHeadings.iterateNext()) {\n        // Do something with the node that was found\n    }\n}\n```", "```php\nfunction myJS()\n{\n    let subsetElements = document.getElementById(\"specific-div\").getElementsByTagName(\"*\");\n\n    for(let i = 0; i < subsetElements.length; i++) {\n        if(subsetElements[i].hasAttribute(\"someattribute\")) {\n            // Do something with the node that was found...\n            break;\n        }\n    }\n}\n```", "```php\nfunction myJS()\n{\n    let group = document.getElementById(\"grouped\");\n\n    group.property1 = \"value1\";\n    group.property2 = \"value2\";\n    group.property3 = \"value3\";\n    group.property4 = \"value4\";\n\n    // Instead of:\n    //\n    // document.getElementById(\"grouped\").property1 = \"value1\";\n    // document.getElementById(\"grouped\").property2 = \"value2\";\n    // document.getElementById(\"grouped\").property3 = \"value3\";\n    // document.getElementById(\"grouped\").property4 = \"value4\";\n\n}\n```"]