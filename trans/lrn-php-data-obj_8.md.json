["```php\nclass Dog\n{\npublic $weight;\npublic $age;\nfunction bark()\n{\nprint \"woof!\";\n}\n}\n$lessie = new Dog();\n$lessie->weight = 15;\n$lessie->age = 3;\n$lessie->bark();\n\n```", "```php\n$lessie = new Dog();\n\n```", "```php\n$k9 = new Dog();\n$k9->age = 5;\n$k9->weight = 18;\n\n```", "```php\n<?php\nclass Dog\n{\npublic $weight;\npublic $age;\nfunction bark()\n{\nprint \"woof!\";\n}\n**function getInfo()\n{\nreturn 'Weight: ' . $this->weight . ' kg, age: ' . $this->age .\n' years';\n}**\n}\n$lessie = new Dog();\n$lessie->weight = 15;\n$lessie->age = 3;\n$k9 = new Dog();\n$k9->age = 5;\n$k9->weight = 18;\necho 'Lessie: ', $lessie->getInfo(), \"\\n\";\necho 'K9: ', $k9->getInfo(), \"\\n\";\n\n```", "```php\nLessie: Weight: 15 kg, age: 3 years\nK9: Weight: 18 kg, age: 5 years\n\n```", "```php\n<?php\nclass Dog\n{\npublic $weight;\npublic $age;\n**public $name;\nfunction __construct($name, $age, $weight)\n{\n$this->name = $name;\n$this->weight = $weight;\n$this->age = $age;\n}**\nfunction bark()\n{\nprint \"woof!\";\n}\n**function getInfo()\n{\nreturn\n'Name: ' . $this->name .\n', weight: ' . $this->weight .\n' kg, age: ' . $this->age .\n' years';\n}\n}\n$lessie = new Dog('Lessie', 3, 15);\n$k9 = new Dog('K9', 5, 18);\necho $lessie->getInfo(), \"\\n\";\necho $k9->getInfo(), \"\\n\";**\n\n```", "```php\nName: Lessie, weight: 15 kg, age: 3 years\nName: K9, weight: 18 kg, age: 5 years\n\n```", "```php\nclass Dog\n{\npublic $weight;\npublic $age;\npublic $name;\npublic $hasCollar = true;\nfunction __construct($name, $age, $weight)\n{\n$this->name = $name;\n$this->weight = $weight;\n$this->age = $age;\n}\nfunction bark()\n{\nprint \"woof!\";\n}\n**function getInfo()\n{\nreturn\n'Name: ' . $this->name .\n', weight: ' . $this->weight .\n' kg, age: ' . $this->age .\n' years, has collar: ' . ($this->hasCollar ? 'yes' : 'no');\n}**\n}\n\n```", "```php\nName: Lessie, weight: 15 kg, age: 3 years, has collar: yes\nName: K9, weight: 18 kg, age: 5 years, has collar: yes\n\n```", "```php\nclass Dog {\npublic $weight;\npublic $age;\npublic $name;\npublic $hasCollar = true;\nfunction __construct($name, $age, $weight) {\n$this->name = $name;\n$this->weight = $weight;\n$this->age = $age;\n}\nfunction bark() {\nprint \"woof!\";\n}\nfunction getInfo() {\nreturn\n'Name: ' . $this->name .\n', weight: ' . $this->weight .\n' kg, age: ' . $this->age .\n' years, has collar: \u2019 . ($this->hasCollar ? 'yes\u2019 : 'no\u2019);\n}\nfunction __destruct() {\nprint \"Freeing $this->name\\n\";\n}\n}\n\n```", "```php\nName: Lessie, weight: 15 kg, age: 3 years, has collar: yes\nName: K9, weight: 18 kg, age: 5 years, has collar: yes\nFreeing K9\nFreeing Lessie\n\n```", "```php\nclass Fruit\n{\npublic $color;\npublic $weight;\n}\nclass Apple extends Fruit\n{\nfunction __construct()\n{\n$this->color = 'green';\n$this->weight = 200;\n}\n}\nclass Banana extends Fruit\n{\nfunction __construct()\n{\n$this->color = 'yellow';\n$this->weight = 250;\n}\n}\n$a[] = new Apple();\n$a[] = new Banana();\nforeach($a as $f)\n{\necho $f->color, \"\\t\", $f->weight, \"\\n\";\n}\n\n```", "```php\nclass Fruit\n{\npublic $color;\npublic $weight;\npublic $price;\nfunction getPrice()\n{\nreturn $this->weight / 1000 * $this->price;\n}\n}\n\n```", "```php\nclass Apple extends Fruit\n{\nfunction __construct()\n{\n$this->color = 'green';\n$this->weight = 200;\n$this->price = 2;\n}\n}\nclass Banana extends Fruit\n{\nfunction __construct()\n{\n$this->color = 'yellow';\n$this->weight = 250;\n$this->price = 3;\n}\n}\n$a[] = new Apple();\n$a[] = new Banana();\nforeach($a as $f)\n{\necho $f->getPrice(), \"\\n\";\n}\n\n```", "```php\nclass Banana extends Fruit\n{\nfunction __construct()\n{\n$this->color = 'yellow';\n$this->weight = 250;\n$this->price = 3;\n}\nfunction getPrice()\n{\nreturn $this->weight / 1000 * $this->price * 0.9;\n}\n}\n\n```", "```php\nfunction getPrice()\n{\nreturn parent::getPrice() * 0.9;\n}\n\n```", "```php\nclass Banana extends Fruit\n{\n**private $mySecretProperty;**\nfunction __construct()\n{\n$this->color = 'yellow';\n$this->weight = 250;\n$this->price = 3;\n}\nfunction getPrice()\n{\nreturn parent::getPrice() * 0.9;\n}\n}\n\n```", "```php\ninterface Tradeable\n{\npublic isImported();\n}\n\n```", "```php\nclass Fruit **implements Tradeable**\n{\npublic $color;\npublic $weight;\npublic $price;\nfunction getPrice()\n{\nreturn $this->weight / 1000 * $this->price;\n}\nfunction isImported()\n{\nreturn false;\n}\n}\n\n```", "```php\nclass Banana extends Fruit\n{\nfunction __construct()\n{\n$this->color = 'yellow';\n$this->weight = 250;\n$this->price = 3;\n}\nfunction getPrice()\n{\nreturn parent::getPrice() * 0.9;\n}\nfunction isImported()\n{\nreturn true;\n}\n}\n\n```", "```php\nclass Car implements Tradeable\n{\npublic $year;\npublic $make;\npublic $model;\nfunction isImported()\n{\nreturn true;\n}\n}\n\n```", "```php\n$a[] = new Apple();\n$a[] = new Banana();\n$a[] = new Car();\nforeach($a as $item)\n{\necho $item->isImported();\n}\n\n```", "```php\nclass DataModel\n{\n**public static $conn = null;**\n}\n\n```", "```php\nif(!DataModel::$conn) {\necho 'Connection not established!';\n}\n\n```", "```php\nclass DataModel\n{\npublic static $conn = null;\n**static function getConn()**\n{\nif(!DataModel::$conn) {\nDataModel::$conn = new PDO('sqlite:./my.db', 'user', 'pass');\n}\nreturn DataModel::$conn;\n}\n}\n**$conn = DataModel::getConn();**\n\n```", "```php\nclass DataModel\n{\npublic static $conn = null;\nstatic function getConn()\n{\n**if(!self::$conn) {\nself::$conn = new PDO('sqlite:./my.db', 'user', 'pass');**\n}\n**return self::$conn;**\n}\n}\n**$conn = DataModel::getConn();**\n\n```", "```php\nclass DataModel\n{\npublic static $conn = null;\n**const ORDER_AZ = 1;\nconst ORDER_ZA = 2;**\nstatic function getConn()\n{\nif(!self::$conn) {\nself::$conn = new PDO('sqlite:./my.db', 'user', 'pass');\n}\nreturn self::$conn;\n}\nstatic function getItems($sortMode)\n{\nif($sortMode == self::ORDER_AZ) {\n$sql = // SQL for ascending\n}\nelse {\n$sql = // SQL for descending\n}\n}\n}\n$items = DataModel::getItems(DataModel::ORDER_ZA);\n\n```", "```php\n$dbh = mysql_connect($host, $user, $pass);\nif(!$dbh) {\ndie('Could not connect to the DB!');\n}\nif(!mysql_select_db('mydb')) {\ndie('Could not select the DB');\n}\n$q = mysql_query('SELECT * FROM test');\nif(!$q) {\ndie('Could not execute query');\n}\nwhile($r = mysql_fetch_row($q))\n{\n...\n}\n\n```", "```php\ntry\nexception handlingexception, throwing{\nmysql_connect($host, $user, $pass);\nmysql_select_db('mydb');\n$q = mysql_query('SELECT * FROM test');\nwhile($r = mysql_fetch_row($q))\n{\n...\n}\n}\ncatch(Exception $e)\n{\ndie(e->getMessage());\n}\n\n```", "```php\ntry\n{\n// do something exceptional\n}\ncatch(Exception $e)\n{\n// display warnings etc\n// $e->getMessage() contains error message\n}\n\n```", "```php\ntry\n{\n$conn = new PDO('sqlite:./mydb', '', '');\n$q = $conn->query('SELECT * FROM test');\nwhile($r = $q->fetch())\n{\n...\n}\n**}\ncatch(PDOException $pdoe)\n{**\ndie('Database error: ' . $pdoe->getMessage());\n**}\ncatch(Exception $e)\n{**\ndie('Unexpected error: ' . $e->getMessage());\n}\n\n```"]