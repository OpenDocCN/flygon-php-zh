["```php\ninterface SplSubject  { \n  public function attach (SplObserver $observer); \n   public function detach (SplObserver $observer); \n   public function notify (); \n} \n\n```", "```php\ninterface SplObserver  { \n  public function update (SplSubject $subject); \n} \n\n```", "```php\n<?php \n\nclass Feed implements SplSubject \n{ \n  private $name; \n  private $observers = array(); \n  private $content; \n\n  public function __construct($name) \n  { \n    $this->name = $name; \n  } \n\n  public function attach(SplObserver $observer) \n  { \n    $observerHash = spl_object_hash($observer); \n    $this->observers[$observerHash] = $observer; \n  } \n\n  public function detach(SplObserver $observer) \n  { \n    $observerHash = spl_object_hash($observer); \n    unset($this->observers[$observerHash]); \n  } \n\n  public function breakOutNews($content) \n  { \n    $this->content = $content; \n    $this->notify(); \n  } \n\n  public function getContent() \n  { \n    return $this->content . \" on \". $this->name . \".\"; \n  } \n\n  public function notify() \n  { \n    foreach ($this->observers as $value) { \n      $value->update($this); \n    } \n  } \n} \n\n```", "```php\n<?php \n\nclass Reader implements SplObserver \n{ \n  private $name; \n\n  public function __construct($name) \n  { \n    $this->name = $name; \n  } \n\n  public function update(SplSubject $subject) \n  { \n    echo $this->name . ' is reading the article ' . $subject->getContent() . ' '; \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Feed.php'); \nrequire_once('Reader.php'); \n\n$newspaper = new  Feed('Junade.com'); \n\n$allen = new Reader('Mark'); \n$jim = new Reader('Lily'); \n$linda = new Reader('Caitlin'); \n\n//add reader \n$newspaper->attach($allen); \n$newspaper->attach($jim); \n$newspaper->attach($linda); \n\n//remove reader \n$newspaper->detach($linda); \n\n//set break outs \n$newspaper->breakOutNews('PHP Design Patterns'); \n\n```", "```php\n<?php \n\nclass timeIterator implements IteratorAggregate { \n\n  public function getIterator() \n  { \n    return new ArrayIterator(array( \n      'property1' => 1, \n      'property2' => 2, \n      'property4' => 3 \n    )); \n  } \n} \n\n```", "```php\n<?php \n\n$time = new timeIterator; \n\nforeach($time as $key => $value) { \n  var_dump($key, $value); \n  echo \"n\"; \n} \n\n```", "```php\n<?php \n\nclass timeIterator implements IteratorAggregate \n{ \n\n  public function __construct(int $time) \n  { \n    $this->weekAgo   = $time - 604800; \n    $this->yesterday = $time - 86400; \n    $this->now       = $time; \n    $this->tomorrow  = $time + 86400; \n    $this->nextWeek  = $time + 604800; \n  } \n\n  public function getIterator() \n  { \n    return new ArrayIterator($this); \n  } \n} \n\n$time = new timeIterator(time()); \n\nforeach ($time as $key => $value) { \n  var_dump($key, $value); \n  echo \"n\"; \n} \n\n```", "```php\n<?php \nfunction squaredNumbers() \n{ \n  var_dump(\"Generator starts.\"); \n  for ($i = 0; $i < 5; ++$i) { \n    var_dump($i . \" in series.\"); \n    yield pow($i, 2); \n  } \n  var_dump(\"Generator ends.\"); \n} \n\nforeach (squaredNumbers() as $number) { \n  var_dump($number); \n} \n\n```", "```php\n<?php \nfunction squaredNumbers(int $start, int $end): Generator \n{ \n  for ($i = $start; $i <= $end; ++$i) { \n    yield pow($i, 2); \n  } \n} \n\nforeach (squaredNumbers(1, 5) as $number) { \n  var_dump($number); \n} \n\n```", "```php\n**$data = (yield $value);**\n\n```", "```php\n**$data = yield $value;**\n\n```", "```php\n<?php \n\nfunction squaredNumbers(int $start, int $end): Generator \n{ \n  for ($i = $start; $i <= $end; ++$i) { \n    yield $i => pow($i, 2); \n  } \n} \n\nforeach (squaredNumbers(1, 5) as $key => $number) { \n  var_dump([$key, $number]); \n} \n\n```", "```php\n**yield;**\n\n```", "```php\n[1, 2] \n\n```", "```php\n<?php \n\nfunction innerGenerator() \n{ \n  yield from [1, 2]; \n} \n\nforeach (innerGenerator() as $number) { \n  var_dump($number); \n} \n\n```", "```php\n<?php \n\nfunction innerGenerator() \n{ \n  yield [1, 2]; \n} \n\nforeach (innerGenerator() as $number) { \n  var_dump($number); \n} \n\n```", "```php\n<?php \n\nabstract class Pasta \n{ \n  public function __construct(bool $cheese = true) \n  { \n    $this->cheese = $cheese; \n  } \n\n  public function cook() \n  { \n\n    var_dump('Cooked pasta.'); \n\n    $this->boilPasta(); \n    $this->addSauce(); \n    $this->addMeat(); \n\n    if ($this->cheese) { \n      $this->addCheese(); \n    } \n  } \n\n  public function boilPasta(): bool \n  { \n    return true; \n  } \n\n  public abstract function addSauce(): bool; \n\n  public abstract function addMeat(): bool; \n\n  public abstract function addCheese(): bool; \n\n} \n\n```", "```php\n<?php \n\nclass MeatballPasta extends Pasta \n{ \n\n  public function addSauce(): bool \n  { \n    var_dump(\"Added tomato sauce\"); \n\n    return true; \n  } \n\n  public function addMeat(): bool \n  { \n    var_dump(\"Added meatballs.\"); \n\n    return true; \n\n  } \n\n  public function addCheese(): bool \n  { \n    var_dump(\"Added cheese.\"); \n\n    return true; \n  } \n\n} \n\n```", "```php\n<?php \n\nrequire_once('Pasta.php'); \nrequire_once('MeatballPasta.php'); \n\nvar_dump(\"Meatball pasta\"); \n$dish = new MeatballPasta(true); \n$dish->cook(); \n\n```", "```php\n<?php \n\nclass VeganPasta extends Pasta \n{ \n\n  public function addSauce(): bool \n  { \n    var_dump(\"Added tomato sauce\"); \n\n    return true; \n  } \n\n  public function addMeat(): bool \n  { \n    return false; \n  } \n\n  public function addCheese(): bool \n  { \n    return false; \n  } \n\n} \n\n```", "```php\n<?php \n\nrequire_once('Pasta.php'); \nrequire_once('MeatballPasta.php'); \n\nvar_dump(\"Meatball pasta\"); \n$dish = new MeatballPasta(true); \n$dish->cook(); \n\nvar_dump(\"\"); \nvar_dump(\"Vegan pasta\"); \nrequire_once('VeganPasta.php'); \n\n$dish = new VeganPasta(true); \n$dish->cook(); \n\n```", "```php\n<?php \n\ninterface Purchaser \n{ \n  public function setNextPurchaser(Purchaser $nextPurchaser): bool; \n\n  public function buy($price): bool; \n} \n\n```", "```php\n<?php \n\nclass AssociatePurchaser implements Purchaser \n{ \n  public function setNextPurchaser(Purchaser $nextPurchaser): bool \n  { \n    $this->nextPurchaser = $nextPurchaser; \n    return true; \n  } \n\n  public function buy($price): bool \n  { \n    if ($price < 100) { \n      var_dump(\"Associate purchased\"); \n      return true; \n    } else { \n      if (isset($this->nextPurchaser)) { \n        reurn $this->nextPurchaser->buy($price); \n      } else { \n        var_dump(\"Could not buy\"); \n        return false; \n      } \n    } \n  } \n} \n\n```", "```php\n<?php \n\nclass ManagerPurchaser implements Purchaser \n{ \n  public function setNextPurchaser(Purchaser $nextPurchaser): bool \n  { \n    $this->nextPurchaser = $nextPurchaser; \n    return true; \n  } \n\n  public function buy($price): bool \n  { \n    if ($price < 500) { \n      var_dump(\"Associate purchased\"); \n      return true; \n    } else { \n      if (isset($this->nextPurchaser)) { \n        return $this->nextPurchaser->buy($price); \n      } else { \n        var_dump(\"Could not buy\"); \n        return false; \n      } \n    } \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Purchaser.php'); \nrequire_once('AssociatePurchaser.php'); \n\n$associate = new AssociatePurchaser(); \n\n$associate->buy(50); \n\n```", "```php\n<?php \n\nrequire_once('Purchaser.php'); \nrequire_once('AssociatePurchaser.php'); \nrequire_once('ManagerPurchaser.php'); \n\n$associate = new AssociatePurchaser(); \n$manager = new ManagerPurchaser(); \n\n$associate->setNextPurchaser($manager); \n\n$associate->buy(400); \n\n```", "```php\n<?php \n\nrequire_once('Purchaser.php'); \nrequire_once('AssociatePurchaser.php'); \nrequire_once('ManagerPurchaser.php'); \n\n$associate = new AssociatePurchaser(); \n$manager = new ManagerPurchaser(); \n\n$associate->setNextPurchaser($manager); \n\n$associate->buy(600); \n\n```", "```php\n<?php \n\nclass DirectorPurchaser implements Purchaser \n{ \n  public function setNextPurchaser(Purchaser $nextPurchaser): bool \n  { \n    $this->nextPurchaser = $nextPurchaser; \n    return true; \n  } \n\n  public function buy($price): bool \n  { \n    if ($price < 10000) { \n      var_dump(\"Director purchased\"); \n      return true; \n    } else { \n      if (isset($this->nextPurchaser)) { \n        return $this->nextPurchaser->buy($price); \n      } else { \n        var_dump(\"Could not buy\"); \n        return false; \n      } \n    } \n  } \n} \n\n```", "```php\n<?php \n\nclass BoardPurchaser implements Purchaser \n{ \n  public function setNextPurchaser(Purchaser $nextPurchaser): bool \n  { \n    $this->nextPurchaser = $nextPurchaser; \n    return true; \n  } \n\n  public function buy($price): bool \n  { \n    if ($price < 100000) { \n      var_dump(\"Board purchased\"); \n      return true; \n    } else { \n      if (isset($this->nextPurchaser)) { \n        return $this->nextPurchaser->buy($price); \n      } else { \n        var_dump(\"Could not buy\"); \n        return false; \n      } \n    } \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Purchaser.php'); \nrequire_once('AssociatePurchaser.php'); \nrequire_once('ManagerPurchaser.php'); \nrequire_once('DirectorPurchaser.php'); \nrequire_once('BoardPurchaser.php'); \n\n$associate = new AssociatePurchaser(); \n$manager = new ManagerPurchaser(); \n$director = new DirectorPurchaser(); \n$board = new BoardPurchaser(); \n\n$associate->setNextPurchaser($manager); \n$manager->setNextPurchaser($director); \n$director->setNextPurchaser($board); \n\n$associate->buy(11000); \n\n```", "```php\n<?php \n\ninterface Power \n{ \n  public function raise(int $number): int; \n} \n\n```", "```php\n<?php \n\nclass Square implements Power \n{ \n  public function raise(int $number): int \n  { \n    return pow($number, 2); \n  } \n} \n\n```", "```php\n<?php \n\nclass Cube implements Power \n{ \n  public function raise(int $number): int \n  { \n    return pow($number, 3); \n  } \n} \n\n```", "```php\n<?php \n\nclass RaiseNumber \n{ \n  public function __construct(Power $strategy) \n  { \n    $this->strategy = $strategy; \n  } \n\n  public function raise(int $number) \n  { \n    return $this->strategy->raise($number); \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Power.php'); \nrequire_once('Square.php'); \nrequire_once('Cube.php'); \nrequire_once('RaiseNumber.php'); \n\n$processor = new RaiseNumber(new Square()); \n\nvar_dump($processor->raise(5)); \n\n```", "```php\n<?php \n\nrequire_once('Power.php'); \nrequire_once('Square.php'); \nrequire_once('Cube.php'); \nrequire_once('RaiseNumber.php'); \n\n$processor = new RaiseNumber(new Cube()); \n\nvar_dump($processor->raise(5)); \n\n```", "```php\n<?php \n\nrequire_once('Power.php'); \nrequire_once('Square.php'); \nrequire_once('Cube.php'); \nrequire_once('RaiseNumber.php'); \n\nif (isset($_GET['n'])) { \n  $number = $_GET['n']; \n} else { \n  $number = 0; \n} \n\nif ($number < 5) { \n  $power = new Cube(); \n} else { \n  $power = new Square(); \n} \n\n$processor = new RaiseNumber($power); \n\nvar_dump($processor->raise($number)); \n\n```", "```php\n<?php \n\n$workers = array(); \n\n$workers['A'] = new StdClass(); \n$workers['A']->title = \"Developer\"; \n$workers['A']->department = \"Engineering\"; \n$workers['A']->salary = 50000; \n\n$workers['B'] = new StdClass(); \n$workers['B']->title = \"Data Analyst\"; \n$workers['B']->department = \"Engineering\"; \n$workers['B']->salary = 30000; \n\n$workers['C'] = new StdClass(); \n$workers['C']->title = \"Personal Assistant\"; \n$workers['C']->department = \"CEO\"; \n$workers['C']->salary = 25000; \n\nThe workers array will look like this if we var_dump it: \narray(3) { \n  [\"A\"]=> \n  object(stdClass)#1 (3) { \n    [\"title\"]=> \n    string(9) \"Developer\" \n    [\"department\"]=> \n    string(11) \"Engineering\" \n    [\"salary\"]=> \n    int(50000) \n  } \n  [\"B\"]=> \n  object(stdClass)#2 (3) { \n    [\"title\"]=> \n    string(12) \"Data Analyst\" \n    [\"department\"]=> \n    string(11) \"Engineering\" \n    [\"salary\"]=> \n    int(30000) \n  } \n  [\"C\"]=> \n  object(stdClass)#3 (3) { \n    [\"title\"]=> \n    string(18) \"Personal Assistant\" \n    [\"department\"]=> \n    string(3) \"CEO\" \n    [\"salary\"]=> \n    int(25000) \n  } \n} \n\n```", "```php\n<?php \n\ninterface EmployeeSpecification \n{ \n  public function isSatisfiedBy(StdClass $customer): bool; \n} \n\n```", "```php\n<?php \n\nclass EmployeeIsEngineer implements EmployeeSpecification \n{ \n  public function isSatisfiedBy(StdClass $customer): bool \n  { \n    if ($customer->department === \"Engineering\") { \n      return true; \n    } \n\n    return false; \n  } \n} \n\n```", "```php\n$isEngineer = new EmployeeIsEngineer(); \n\nforeach ($workers as $id => $worker) { \n  if ($isEngineer->isSatisfiedBy($worker)) { \n    var_dump($id); \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('EmployeeSpecification.php'); \nrequire_once('EmployeeIsEngineer.php'); \n\n$workers = array(); \n\n$workers['A'] = new StdClass(); \n$workers['A']->title = \"Developer\"; \n$workers['A']->department = \"Engineering\"; \n$workers['A']->salary = 50000; \n\n$workers['B'] = new StdClass(); \n$workers['B']->title = \"Data Analyst\"; \n$workers['B']->department = \"Engineering\"; \n$workers['B']->salary = 30000; \n\n$workers['C'] = new StdClass(); \n$workers['C']->title = \"Personal Assistant\"; \n$workers['C']->department = \"CEO\"; \n$workers['C']->salary = 25000; \n\n$isEngineer = new EmployeeIsEngineer(); \n\nforeach ($workers as $id => $worker) { \n  if ($isEngineer->isSatisfiedBy($worker)) { \n    var_dump($id); \n  } \n} \n\n```", "```php\n **# \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 min (0 - 59)\n     # \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n     # \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of month (1 - 31)\n     # \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12)\n     # \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of week (0 - 6) (0 to 6 are Sunday to\n     # \u2502 \u2502 \u2502 \u2502 \u2502                  Saturday, or use names; 7 is also Sunday)\n     # \u2502 \u2502 \u2502 \u2502 \u2502\n     # \u2502 \u2502 \u2502 \u2502 \u2502\n     # * * * * *  command to execute** \n\n```", "```php\n**0 20 * * * /usr/bin/php /opt/test.php**\n\n```"]