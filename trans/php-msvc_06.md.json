["```php\n**FROM php:7-fpm**\n**RUN apt-get update && apt-get -y install** \n**git g++ libcurl4-gnutls-dev libicu-dev libmcrypt-dev libpq-dev libxml2-dev unzip zlib1g-dev** \n**&& git clone -b php7 https://github.com/phpredis/phpredis.git /usr/src/php/ext/redis** \n**&& docker-php-ext-install curl intl json mbstring mcrypt pdo pdo_mysql redis xml** \n**&& apt-get autoremove && apt-get autoclean** \n**&& rm -rf /var/lib/apt/lists/***\n**RUN apt-get update && apt-get upgrade -y && apt-get autoremove -y** \n**&& apt-get install -y git libmcrypt-dev libpng12-dev libjpeg-dev libpq-dev mysql-client curl** \n**&& rm -rf /var/lib/apt/lists/*** \n**&& docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr** \n**&& docker-php-ext-install mcrypt gd mbstring pdo pdo_mysql zip** \n**&& pecl install xdebug** \n**&& rm -rf /tmp/pear** \n**&& echo \"zend_extension=$(find /usr/local/lib/php/extensions/ -name xdebug.so)n\" >> /usr/local/etc/php/conf.d/xdebug.ini** \n**&& echo \"xdebug.remote_enable=on\" >> /usr/local/etc/php/conf.d/xdebug.ini** \n**&& echo \"xdebug.remote_autostart=off\" >> /usr/local/etc/php/conf.d/xdebug.ini** \n**&& echo \"xdebug.remote_port=9000\" >> /usr/local/etc/php/conf.d/xdebug.ini** \n**&& curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer**\n**RUN echo 'date.timezone=\"Europe/Madrid\"' >> /usr/local/etc/php/conf.d/date.ini\nRUN echo 'session.save_path = \"/tmp\"' >> /usr/local/etc/php/conf.d/session.ini\n\n{{ Omited code }}\n\nRUN curl -sSL https://phar.phpunit.de/phpunit.phar -o /usr/bin/phpunit && chmod +x /usr/bin/phpunit\n\nADD ./config/php.ini /usr/local/etc/php/\nCMD [ \"/usr/local/bin/containerpilot\", \n\"php-fpm\", \n\"--nodaemonize\"]**\n\n```", "```php\n    memory_limit = 128M\n    post_max_size = 100M\n    upload_max_filesize = 200M\n\n    [Xdebug]\n    xdebug.remote_host=**YOUR_LOCAL_IP_ADDRESS**\n\n```", "```php\n**docker-compose build microservice_user_fpm**\n\n```", "```php\n**docker-compose stop**\n**docker-compose up -d**\n\n```", "```php\n**RUN apt-get update && apt-get upgrade -y && apt-get autoremove -y \n&& apt-get install -y git libmcrypt-dev libpng12-dev libjpeg-dev libpq-dev mysql-client curl \n&& rm -rf /var/lib/apt/lists/* \n&& docker-php-ext-configure gd --with-png-dir=/usr --with-jpeg-dir=/usr \n&& docker-php-ext-install mcrypt gd mbstring pdo pdo_mysql zip \n&& pecl install xdebug \n&& rm -rf /tmp/pear \n&& echo \"zend_extension=$(find /usr/local/lib/php/extensions/ -name xdebug.so)n\" >> /usr/local/etc/php/conf.d/xdebug.ini \n&& echo \"xdebug.remote_enable=onn\" >> /usr/local/etc/php/conf.d/xdebug.ini \n&& echo \"xdebug.remote_autostart=offn\" >> /usr/local/etc/php/conf.d/xdebug.ini \n&& echo \"xdebug.remote_port=9000n\" >> /usr/local/etc/php/conf.d/xdebug.ini**\n**&& echo \"xdebug.profiler_enable=onn\" >> /usr/local/etc/php/conf.d/xdebug.ini** \n**&& echo \"xdebug.profiler_output_dir=/var/www/html/tmpn\" >> /usr/local/etc/php/conf.d/xdebug.ini** \n**&& echo \"xdebug.profiler_enable_trigger=onn\" >> /usr/local/etc/php/conf.d/xdebug.ini** \n**&& curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer**\n\n```", "```php\n**docker-compose build microservice_user_fpm**\n\n```", "```php\n**docker-compose stop**\n**docker-compose up -d**\n\n```", "```php\n    <?php\n      $file=fopen(\"test.txt\",\"r\");\n    ?>\n```", "```php\n**Warning: fopen(test.txt) [function.fopen]: failed to open stream:\nNo such file or directory in /var/www/html/die_example.php on line 2**\n\n```", "```php\n    <?php\n      if(!file_exists(\"test.txt\")) {\n        die(\"The file does not exist\");\n      } else {\n        $file=fopen(\"test.txt\",\"r\");\n      }\n    ?>\n```", "```php\n    public function report(Exception $e)\n    {\n      if ($e instanceof CustomException) {\n        //\n      } else if ($e instanceof OtherCustomException) {\n        //\n      }\n      return parent::report($e);\n    }\n```", "```php\n    protected $dontReport = [\n      HttpException::class,\n      ValidationException::class\n    ];\n```", "```php\n    public function render($request, Exception $e)\n    {\n      if ($e instanceof CustomException) {\n        return response('Custom Message');\n      }\n      return parent::render($request, $e);\n    }\n```", "```php\n    public function render($request, Exception $e)\n    {\n      if ($e instanceof CustomException) {\n        return response()->json([\n            'error' => $e->getMessage(),\n            'code' => 44 ,\n          ],\n        Response::HTTP_UNPROCESSABLE_ENTITY);\n      }\n      return parent::render($request, $e);\n    }\n```", "```php\n    sentry_redis:\n      image: redis\n    expose:\n      - 6379\n\n    sentry_postgres:\n      image: postgres\n      environment:\n        - POSTGRES_PASSWORD=sentry\n        - POSTGRES_USER=sentry\n      volumes:\n        - /var/lib/postgresql/data\n      expose:\n        - 5432\n\n      sentry:\n        image: sentry\n      links:\n        - sentry_redis\n        - sentry_postgres\n      ports:\n        - 9876:9000\n      environment:\n        SENTRY_SECRET_KEY: mymicrosecret\n        SENTRY_POSTGRES_HOST: sentry_postgres\n        SENTRY_REDIS_HOST: sentry_redis\n        SENTRY_DB_USER: sentry\n        SENTRY_DB_PASSWORD: sentry\n\n      sentry_celery-beat:\n        image: sentry\n      links:\n        - sentry_redis\n        - sentry_postgres\n        command: sentry celery beat\n      environment:\n        SENTRY_SECRET_KEY: mymicrosecret\n        SENTRY_POSTGRES_HOST: sentry_postgres\n        SENTRY_REDIS_HOST: sentry_redis\n        SENTRY_DB_USER: sentry\n        SENTRY_DB_PASSWORD: sentry\n\n      sentry_celery-worker:\n        image: sentry\n      links:\n        - sentry_redis\n        - sentry_postgres\n        command: sentry celery worker\n      environment:\n        SENTRY_SECRET_KEY: mymicrosecret\n        SENTRY_POSTGRES_HOST: sentry_postgres\n        SENTRY_REDIS_HOST: sentry_redis\n        SENTRY_DB_USER: sentry\n        SENTRY_DB_PASSWORD: sentry\n```", "```php\n**docker-compose up -d sentry_redis sentry_postgres sentry**\n\n```", "```php\n**docker exec -it docker_sentry_1 sentry upgrade**\n\n```", "```php\n**docker-compose up -d**\n\n```", "```php\n**docker exec -it docker_microservice_user_fpm_1 /bin/bash**\n\n```", "```php\n**composer require sentry/sentry-laravel**\n\n```", "```php\n**$app->register('SentrySentryLaravelSentryLumenServiceProvider');**\n# Sentry must be registered before routes are included\nrequire __DIR__ . '/../app/Http/routes.php';\n```", "```php\n    public function report(Exception $e)\n    {\n       if ($this->shouldReport($e)) {\n         app('sentry')->captureException($e);\n       }\n       parent::report($e);\n    }\n```", "```php\n    <?php\n      return array(\n        'dsn' => '___DSN___',\n        'breadcrumbs.sql_bindings' => true,\n      );\n```", "```php\n**error_log('Your log message!', 0);**\n\n```", "```php\n    Log::info('User unable to login.', ['id' => $user->id]);\n```", "```php\n    $app->configureMonologUsing(function($monolog) {\n      $client = new Raven_Client('sentry-dsn');\n      $monolog->pushHandler(\n        new MonologHandlerRavenHandler($client, \n                                       MonologLogger::WARNING)\n      );\n      return $monolog;\n    });\n```", "```php\n    \"datadog/php-datadogstatsd\": \"0.3.*\"\n```", "```php\n    use Datadogstatsd;\n\n    /** \u2026 Code omitted ... **/\n    const APM_API_KEY = 'api-key-from-your-account';\n    const APM_APP_KEY = 'app-key-from-your-account';\n\n    public function index(Manager $fractal, SecretTransformer                          \n    $secretTransformer, Request $request)\n    {\n      Datadogstatsd::configure(self::APM_API_KEY, self::APM_APP_KEY);\n      $startTime = microtime(true);\n      $records = Secret::all();\n\n      $collection = new Collection($records, $secretTransformer);\n      $data = $fractal->createData($collection)->toArray();\n      Datadogstatsd::timing('secrets.loading.time', microtime(true) -                              \n      $startTime, [\u2018service\u2019 => \u2018secret\u2019]);\n\n      return response()->json($data);\n    }\n```", "```php\n    Datadogstatsd::increment('another.data.point');\n    Datadogstatsd::increment('my.data.point.with.custom.increment', .5);\n    Datadogstatsd::increment('your.data.point', 1, ['mytag\u2019' => 'value']);\n```", "```php\n    telemetry:\n      build: ./telemetry/\n      links:\n        - autodiscovery\n      expose:\n        - 9090\n      ports:\n        - 9090:9090\n```", "```php\n**FROM prom/prometheus:latest\nADD ./etc/prometheus.yml /etc/prometheus/**\n\n```", "```php\n    global:\n      scrape_interval: 15s\n      evaluation_interval: 15s\n      external_labels:\n      monitor: 'codelab-monitor'\n\n    scrape_configs:\n      - job_name: 'containerpilot-telemetry'\n\n    consul_sd_configs:\n      - server: 'autodiscovery:8500'\n      services: ['containerpilot']\n```", "```php\n    \"telemetry\": {\n      \"port\": 9090,\n      \"sensors\": [\n        {\n          \"name\": \"nginx_connections_unhandled_total\",\n          \"help\": \"Number of accepted connnections that were not \n                   handled\",\n          \"type\": \"gauge\",\n          \"poll\": 5,\n          \"check\": [\"/usr/local/bin/sensor.sh\", \"unhandled\"]\n        },\n        {\n          \"name\": \"nginx_connections_load\",\n          \"help\": \"Ratio of active connections (less waiting) to the                   \n                   maximum worker connections\",\n          \"type\": \"gauge\",\n          \"poll\": 5,\n          \"check\": [\"/usr/local/bin/sensor.sh\", \"connections_load\"]\n        }\n      ]\n    }\n```", "```php\n**sudo curl -L git.io/scope -o /usr/local/bin/scope\nsudo chmod a+x /usr/local/bin/scope\nscope launch**\n\n```"]