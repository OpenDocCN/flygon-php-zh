- en: Continuous Profiling and Monitoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续分析和监控
- en: In this chapter, we will learn how to install and configure profiling and monitoring
    tools that will help you easily optimize PHP code in a **continuous integration**
    (**CI**) and a **continuous deployment** (**CD**) environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何安装和配置分析和监控工具，这将帮助您在**持续集成**（**CI**）和**持续部署**（**CD**）环境中轻松优化PHP代码。
- en: We will start by installing and configuring a basic `Blackfire.io` setup in
    order to easily and automatically profile code when committing it to a repository.
    We will also learn how to install a TICK Stack in order to continuously monitor
    our code's performance after its deployment on a live production server.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从安装和配置基本的`Blackfire.io`设置开始，以便在提交到存储库时轻松自动地对代码进行分析。我们还将学习如何安装TICK Stack，以便在将代码部署到实时生产服务器后持续监视我们代码的性能。
- en: 'Thus, in this chapter, we will cover the following points:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下几点：
- en: Installing and configuring the `Blackfire.io` agent, client and PHP extension
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置`Blackfire.io`代理，客户端和PHP扩展
- en: Integrating the `Blackfire.io` client with Google Chrome
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Blackfire.io`客户端与Google Chrome集成
- en: Integrating the `Blackfire.io` client with a known CI tool like Travis
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Blackfire.io`客户端集成到像Travis这样的已知CI工具
- en: Installing and configuring a complete TICK Stack with Grafana
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置完整的TICK Stack与Grafana
- en: What is Blackfire.io?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Blackfire.io？
- en: As stated on the official Blackfire website ([https://blackfire.io](https://blackfire.io)),
    *Blackfire empowers all developers and IT/Ops to continuously verify and improve
    their app's performance, throughout its life cycle, by getting the right information
    at the right moment. It is, therefore, a performance management solution that
    allows you to automatically profile your code and set performance standards through
    assertions throughout your application's life cycle, especially in the development
    phase*. `Blackfire.io` is a tool that makes what Fabien Potencier calls *performance
    as a feature* possible, by making performance tests a part of the development
    cycle from the very beginning of a project.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如官方Blackfire网站所述（[https://blackfire.io](https://blackfire.io)），*Blackfire赋予所有开发人员和IT/Ops持续验证和改进其应用程序性能的能力，通过在适当的时刻获取正确的信息。因此，它是一种性能管理解决方案，允许您在整个应用程序生命周期中自动对代码进行分析，并通过断言设置性能标准，特别是在开发阶段*。`Blackfire.io`是一种工具，使Fabien
    Potencier所说的*性能作为特性*成为可能，通过使性能测试成为项目从一开始就开发周期的一部分。
- en: Installing and configuring Blackfire.io
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Blackfire.io
- en: 'Installing and configuring `Blackfire.io` means setting up three components:
    the agent, the client and the PHP Probe. In the context of this book, we will
    be installing `Blackfire.io` inside our Linux for PHP container. To get more information
    on installing `Blackfire.io` on another operating system, please see the following
    instructions: [https://blackfire.io/docs/up-and-running/installation](https://blackfire.io/docs/up-and-running/installation).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置`Blackfire.io`意味着设置三个组件：代理，客户端和PHP探针。在本书的背景下，我们将在Linux的PHP容器中安装`Blackfire.io`。要获取有关在其他操作系统上安装`Blackfire.io`的更多信息，请参阅以下说明：[https://blackfire.io/docs/up-and-running/installation](https://blackfire.io/docs/up-and-running/installation)。
- en: 'We will start by installing the Blackfire agent. On the container''s command-line
    interface, enter the following commands:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从安装Blackfire代理开始。在容器的命令行界面上，输入以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the download is completed, you should see the following result:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，您应该看到以下结果：
- en: '![](assets/65c9d459-6f78-4931-b408-136785016f85.png)Blackfire agent download
    is done'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/65c9d459-6f78-4931-b408-136785016f85.png)Blackfire代理下载完成'
- en: 'If so, please continue by typing these commands:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，请继续输入以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, we will copy a basic agent configuration file to our `etc` directory:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把一个基本的代理配置文件复制到我们的`etc`目录：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is the content of the file we just copied. It is a basic configuration
    file, as suggested by the Blackfire team:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们刚刚复制的文件的内容。这是一个基本的配置文件，正如Blackfire团队建议的那样：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, create an empty file that will be used as the agent''s socket:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个空文件，将用作代理的套接字：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we will register our agent with the Blackfire service:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将注册我们的代理到Blackfire服务：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once you will have entered the last command, you will have to supply your Blackfire
    server credentials. These can be found in your Blackfire account at: [https://blackfire.io/account#server](https://blackfire.io/account#server).
    Once you have entered your credentials, you can start the agent by entering the
    following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您输入了最后一个命令，您将需要提供您的Blackfire服务器凭据。这些可以在您的Blackfire帐户中找到：[https://blackfire.io/account#server](https://blackfire.io/account#server)。输入凭据后，您可以通过输入以下命令启动代理：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After starting the agent, you should see the agent''s PID number. This tells
    you that the agent is listening on the default UNIX socket that we created previously.
    In this example, the agent has a PID number of eight (8):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 启动代理后，您应该看到代理的PID号。这告诉您代理正在监听我们之前创建的默认UNIX套接字。在本例中，代理的PID号为8：
- en: '![](assets/e7dcf06d-e85a-4ffc-8f14-27769d0ba0dc.png)Blackfire agent process
    ID number is displayed'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e7dcf06d-e85a-4ffc-8f14-27769d0ba0dc.png)Blackfire代理进程ID号显示'
- en: 'Once the agent is installed and configured, you can install the Blackfire client.
    We will install and configure the client by issuing the following commands. Let''s
    start by downloading the binary:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和配置代理后，您可以安装Blackfire客户端。我们将通过以下命令安装和配置客户端。让我们首先下载二进制文件：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After the download is done, you should see the following message:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，您应该看到以下消息：
- en: '![](assets/81e2991b-5479-46af-8597-b0842fd7c96d.png)Blackfire client download
    is done'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/81e2991b-5479-46af-8597-b0842fd7c96d.png)Blackfire客户端下载完成'
- en: 'You can now proceed to configure the client. Enter the following commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以继续配置客户端。输入以下命令：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After entering the final command, you will have to supply your Blackfire client
    credentials. These can also be found in your Blackfire account at the following
    URL: [https://blackfire.io/account#client](https://blackfire.io/account#client).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入最终命令后，您将需要提供Blackfire客户端凭据。这些也可以在以下URL的Blackfire帐户中找到：[https://blackfire.io/account#client](https://blackfire.io/account#client)。
- en: 'The final step in order to run `Blackfire.io` on our server is to install the
    Blackfire Probe as a PHP extension. In order to do this, please start by downloading
    the library:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的服务器上运行`Blackfire.io`，最后一步是将Blackfire探针安装为PHP扩展。为了做到这一点，请首先下载库：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once the download is completed, you should get this confirmation message:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，您应该会收到以下确认消息：
- en: '![](assets/dbbc8f29-df0d-45ed-b35a-b66504dc1821.png)Blackfire probe download
    is done'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/dbbc8f29-df0d-45ed-b35a-b66504dc1821.png)Blackfire探针下载完成'
- en: 'You can then copy the shared library file into your PHP extensions directory.
    If you are not sure of this directory''s location, you can issue the following
    command before moving the library file into it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将共享库文件复制到PHP扩展目录中。如果您不确定该目录的位置，可以在将库文件移动到该目录之前发出以下命令：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, the extension's directory is `/usr/lib/php/extensions/no-debug-non-zts-20160303`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，扩展的目录是`/usr/lib/php/extensions/no-debug-non-zts-20160303`。
- en: 'You can now configure the extension in the `PHP.INI` file. When activating
    the Blackfire Probe, it is recommended that you deactivate other debugging and
    profiling extensions such as xdebug. Please run the following commands (alternatively,
    you can copy and paste the `PHP.INI` file that is included in our repository and
    already contains these modifications):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在`PHP.INI`文件中配置扩展。激活Blackfire探针时，建议停用其他调试和分析扩展，如xdebug。请运行以下命令（或者，您可以复制并粘贴我们存储库中已包含这些修改的`PHP.INI`文件）：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Please complete the extension''s installation and configuration by restarting
    PHP-FPM:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请通过重新启动PHP-FPM来完成扩展的安装和配置：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s profile our first script from the command line. You can now run the
    client by entering the following command on the container''s CLI:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从命令行对我们的第一个脚本进行分析。您现在可以通过在容器的CLI上输入以下命令来运行客户端：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once the profile is completed, you will obtain a URL and some profile statistics.
    If you browse to the URL, you will see the profile''s call graph and get more
    detailed information on the profiled script:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 分析完成后，您将获得一个URL和一些分析统计信息。如果浏览到该URL，您将看到分析的调用图，并获得有关分析脚本的更详细信息：
- en: '![](assets/61a6dd68-99c9-46e6-8447-9012886ceadb.png)The Blackfire client returns
    a preliminary profiling report and a URL to view the script’s call graph'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/61a6dd68-99c9-46e6-8447-9012886ceadb.png)Blackfire客户端返回一个初步的分析报告和一个URL，以查看脚本的调用图'
- en: 'You also have the option of installing the client as a browser plugin. In this
    example, we will be using the Blackfire Companion, a Google Chrome extension.
    To install the extension, visit the following URL with Chrome and click on the
    install button: [https://blackfire.io/docs/integrations/chrome](https://blackfire.io/docs/integrations/chrome).
    Once done, it will be possible to profile the resources on the server by browsing
    to the page and clicking on the Blackfire Companion''s icon in the toolbar and
    then, on the Profile button:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择将客户端安装为浏览器插件。在本例中，我们将使用Blackfire Companion，一个Google Chrome扩展程序。要安装该扩展，请使用Chrome访问以下URL并单击安装按钮：[https://blackfire.io/docs/integrations/chrome](https://blackfire.io/docs/integrations/chrome)。安装完成后，可以通过浏览到页面并单击工具栏中的Blackfire
    Companion图标，然后单击Profile按钮来对服务器上的资源进行分析：
- en: '![](assets/6f6c1807-4dee-4cea-bf6e-0f5525a9485c.png)Blackfire Companion for
    Chrome allows you to profile a PHP script directly from the browser'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6f6c1807-4dee-4cea-bf6e-0f5525a9485c.png)Chrome的Blackfire Companion允许您直接从浏览器对PHP脚本进行分析'
- en: Profiling manually with Blackfire.io
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Blackfire.io手动进行分析
- en: 'We will start by profiling manually two PHP scripts in order to better understand
    how useful and powerful the Blackfire tools can be. We will use the following
    script, which can be found in our repository (`chap2pre.php`):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先手动对两个PHP脚本进行分析，以更好地了解Blackfire工具的用途和功能。我们将使用以下脚本，可以在我们的存储库（`chap2pre.php`）中找到：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The script essentially lists all files contained in our repository (the directory
    and its subdirectories) and calculates the size of each file. Also, it gives an
    aggregate result of the sizes of each directory. Please browse to the following
    URL with Chrome to see the script''s output and launch a profile using the Blackfire
    Companion: `http://localhost:8181/chap2pre.php`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本基本上列出了存储库中包含的所有文件（目录及其子目录），并计算了每个文件的大小。此外，它还给出了每个目录大小的汇总结果。请使用Chrome浏览到以下URL以查看脚本的输出并使用Blackfire
    Companion启动分析：`http://localhost:8181/chap2pre.php`：
- en: '![](assets/171e5bab-1f71-40f1-9f7b-125aa6bd05f3.png)Clicking on the Blackfire
    icon in the upper-right toolbar will allow you to launch a profiling session'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/171e5bab-1f71-40f1-9f7b-125aa6bd05f3.png)单击右上方工具栏中的Blackfire图标将允许您启动分析会话'
- en: 'After clicking on the Profile button and waiting a few seconds, you should
    then have the option of clicking the View Call Graph button:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 单击Profile按钮并等待几秒钟后，您应该可以单击View Call Graph按钮：
- en: '![](assets/f7030d4d-e30b-437b-820e-6c5d3e56b125.png)You can click on the ‘View
    call graph’ button to view the script’s call graph'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f7030d4d-e30b-437b-820e-6c5d3e56b125.png)您可以单击“查看调用图”按钮查看脚本的调用图'
- en: 'The results should be as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该如下：
- en: '![](assets/55a58fb4-3274-4c85-bd77-17660c01d532.png)The script took 14.3 ms
    to complete its execution and five processes were created using the ''popen''
    function'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/55a58fb4-3274-4c85-bd77-17660c01d532.png)该脚本执行完成所需的时间为14.3毫秒，并且使用''popen''函数创建了五个进程'
- en: The result shows us that this script has a real time (wall time[1]) of 14.3
    ms and that the only functions with important exclusive times are `stream_get_contents`
    and `popen`. This is logical, as the script has to deal with disk access and possibly
    a lot of I/O latency. What is less logical is that the script seems to be creating
    five sub-processes in order to get a simple file listing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，这个脚本的实际时间（墙时间[1]）为14.3毫秒，而唯一具有重要独占时间的函数是`stream_get_contents`和`popen`。这是合理的，因为脚本必须处理磁盘访问和可能大量的I/O延迟。不太合理的是，脚本似乎要创建五个子进程来获取一个简单的文件列表。
- en: 'Also, if we scroll down, we notice that `SplInfo::getFilename` is called sixty-seven
    times, which is almost twice the number of files in the directory:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们向下滚动，我们会注意到`SplInfo::getFilename`被调用了六十七次，几乎是目录中文件数量的两倍：
- en: '![](assets/6be50866-01b2-444c-8ac4-7ff1716958e1.png)The SplFileInfo::getFilename
    function was called 67 times'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6be50866-01b2-444c-8ac4-7ff1716958e1.png)SplFileInfo::getFilename函数被调用了67次'
- en: 'The information obtained from the profiler allows us to quickly identify which
    parts of our code base should become code review candidates and what to look for
    when reviewing them. A quick look at our code shows us that we are calling `popen`
    on every directory iteration, rather than only once at the beginning. A simple
    fix would be to replace these two lines of code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从分析器获得的信息使我们能够快速确定我们代码库的哪些部分应该成为代码审查的候选项，以及在审查它们时要寻找什么。快速查看我们的代码表明，我们在每个目录迭代中都调用了`popen`，而不是只在开始时调用一次。一个简单的修复方法是用以下两行代码替换：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following lines of code could then be inserted in their place:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以下代码行可以插入到它们的位置：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The final adjustment would be to replace all calls to `SplInfo::getFilename()`
    with a variable containing the result of the function call. The modified script
    would then look as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的调整是用包含函数调用结果的变量替换所有对`SplInfo::getFilename()`的调用。修改后的脚本如下所示：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s try profiling the new script (`chap2post.php`) in order to measure our
    improvements. Again, please browse to the following URL with Chrome to see the
    script''s output and launch a profile using the Blackfire Companion: `http://localhost:8181/chap2post.php`.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试对新脚本（`chap2post.php`）进行分析，以衡量我们的改进。同样，请使用Chrome浏览到以下网址查看脚本的输出，并使用Blackfire
    Companion启动分析：`http://localhost:8181/chap2post.php`。
- en: 'The results should be as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该如下：
- en: '![](assets/da3260d9-14de-48b4-b1ec-735d990cd3d2.png)Now, the script takes only
    4.26 ms to complete its execution and only one process was created using the ''popen''
    function'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/da3260d9-14de-48b4-b1ec-735d990cd3d2.png)现在，脚本只需要4.26毫秒来完成执行，并且只使用''popen''函数创建了一个进程'
- en: 'The result shows us that this script now has a wall time of 4.26 ms and that
    the function `popen` is only creating one sub-process. Also, if we scroll down,
    we now notice that `SplInfo::getFilename` is only called thirty-three times which
    is two times less than before:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，这个脚本现在的墙时间为4.26毫秒，而`popen`函数只创建了一个子进程。此外，如果我们向下滚动，我们现在注意到`SplInfo::getFilename`只被调用了三十三次，比之前少了两倍：
- en: '![](assets/4bcc5dee-e4c1-47c0-b10e-3387d621b989.png)Now, the SplFileInfo::getFilename
    function gets called only 33 times'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4bcc5dee-e4c1-47c0-b10e-3387d621b989.png)现在，SplFileInfo::getFilename函数只被调用了33次'
- en: These are significant improvements, especially if this script is to be called
    thousands of times per minute on different directory structures. A good way to
    make sure that these improvements are not lost in future iterations of our application's
    development cycle would be to automate the profiler through performance tests.
    We will now give a quick example of how to automate performance testing with `Blackfire.io`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是重大的改进，特别是如果这个脚本要在不同的目录结构上每分钟被调用数千次。确保这些改进不会在应用程序开发周期的未来迭代中丢失的一个好方法是通过性能测试自动化分析器。现在我们将快速介绍如何使用`Blackfire.io`自动化性能测试。
- en: Performance testing with Blackfire.io
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Blackfire.io进行性能测试
- en: Before we start, please note that this feature is available only to premium
    and enterprise users and that, therefore, it requires a paid subscription.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请注意，此功能仅适用于高级和企业用户，因此需要付费订阅。
- en: 'In order to automate performance testing, we will start by creating a very
    simple `blackfire.yml` file in our repository. This file will contain our tests.
    A test should be composed of a name, a regular expression and a set of assertions.
    It is always preferable to avoid creating volatile time tests as these make for
    very brittle tests that might yield very different results from one profiling
    session to the next. Examples of strong performance tests would be to check CPU
    or memory consumption, number of SQL queries or testing results by profile comparisons.
    In our case, we will create a very basic and volatile time test just for the sake
    of giving a short and simple example. Here is the content of our `.blackfire.yml`
    file:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化性能测试，我们将首先在我们的存储库中创建一个非常简单的`blackfire.yml`文件。这个文件将包含我们的测试。一个测试应该由一个名称、一个正则表达式和一组断言组成。最好避免创建易变的时间测试，因为这些测试很容易变得非常脆弱，可能会导致从一个分析会话到下一个分析会话产生非常不同的结果。强大的性能测试示例包括检查CPU或内存消耗、SQL查询数量或通过配置比较测试结果。在我们的情况下，我们将创建一个非常基本和易变的时间测试，只是为了举一个简短和简单的例子。以下是我们`.blackfire.yml`文件的内容：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The final step would be to integrate this performance test with a continuous
    integration tool. To select the tool of your choice, please consult the documentation
    at the following URL: [https://blackfire.io/docs/integrations/index](https://blackfire.io/docs/integrations/index).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将这个性能测试与持续集成工具集成。要选择您喜欢的工具，请参阅以下网址的文档：[https://blackfire.io/docs/integrations/index](https://blackfire.io/docs/integrations/index)。
- en: In our case, we will integrate with *Travis CI*. To do so, we must create two
    files. One will include our credentials and must be encrypted (`.blackfire.travis.ini.enc`).
    The other will include our Travis instructions (`.travis.yml`).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将与*Travis CI*集成。为此，我们必须创建两个文件。一个将包括我们的凭据，并且必须加密（`.blackfire.travis.ini.enc`）。另一个将包括我们的Travis指令（`.travis.yml`）。
- en: 'Here is the content of our `.blackfire.travis.ini` file before encryption (replace
    the credentials with your own):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`.blackfire.travis.ini`文件在加密之前的内容（用您自己的凭据替换）：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This file must then be encrypted before being committed to your repository.
    To do so, please issue the following commands inside the Linux for PHP container:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，必须在提交到存储库之前对该文件进行加密。为此，请在Linux for PHP容器内部发出以下命令：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here is the content of our `.travis.yml` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`.travis.yml`文件的内容：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Once committed, this configuration will ensure that the performance tests will
    run on each git push to your Github repository. Thus, performance becomes a feature
    and is continuously tested like any other of your application's features. The
    next step is to monitor your code's performance after deployment on a production
    server. Let's discover some of the available tools in order to do so.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提交，此配置将确保性能测试将在每次git推送到您的Github存储库时运行。因此，性能成为一个特性，并且像应用程序的其他任何特性一样持续测试。下一步是在生产服务器上部署代码后监视代码的性能。让我们了解一些可用的工具，以便这样做。
- en: Monitoring performance with the TICK Stack
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TICK堆栈监控性能
- en: The TICK Stack was developed by InfluxData (*InfluxDB*) and is made of a series
    of integrated components that allow you to easily process time-series data generated
    by different services through time. TICK is an acronym that is composed of the
    first letters of each main product of the monitoring suite. T is for Telegraf,
    which collects the information we wish to obtain on our production server. I is
    for InfluxDB, which is a time-series database that contains the information collected
    by Telegraf or by any other application which is configured to do so. C is for
    Chronograf, a graph tool that allows us to easily understand the collected data.
    Finally, K is for Kapacitor, an alert automation tool.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: TICK堆栈是由InfluxData（*InfluxDB*）开发的，由一系列集成组件组成，允许您轻松处理通过时间生成的不同服务的时间序列数据。TICK是一个首字母缩写词，由监控套件的每个主要产品的首字母组成。T代表Telegraf，它收集我们希望在生产服务器上获取的信息。I代表InfluxDB，这是一个包含Telegraf或任何其他配置为这样做的应用程序收集的信息的时间序列数据库。C代表Chronograf，这是一个图形工具，可以让我们轻松地理解收集的数据。最后，K代表Kapacitor，这是一个警报自动化工具。
- en: Monitoring infrastructure performance is not only important to determine if
    applications and scripts are running as expected, but also allows for development
    of more advanced algorithms such as failure prediction and unexpected behavior
    pattern recognition, thus making it possible to automate many aspects of performance
    monitoring.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 监控基础设施性能不仅对于确定应用程序和脚本是否按预期运行很重要，而且还可以开发更高级的算法，如故障预测和意外行为模式识别，从而使得可以自动化性能监控的许多方面。
- en: 'Of course, there are many other great performance monitoring tools, like Prometheus
    and Graphite, but we decided to use the TICK stack instead, because we are more
    interested in doing event logging than doing pure metrics. For more information
    on what the TICK stack is, how it works internally and what it is used for, please
    read this very informative article by Gianluca Arbezzano published on the Codeship
    website: [https://blog.codeship.com/infrastructure-monitoring-with-tick-stack/](https://blog.codeship.com/infrastructure-monitoring-with-tick-stack/).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有许多其他出色的性能监控工具，比如Prometheus和Graphite，但我们决定使用TICK堆栈，因为我们更感兴趣的是事件日志记录，而不是纯粹的指标。有关TICK堆栈是什么，内部工作原理以及用途的更多信息，请阅读Gianluca
    Arbezzano在Codeship网站上发表的这篇非常信息丰富的文章：[https://blog.codeship.com/infrastructure-monitoring-with-tick-stack/](https://blog.codeship.com/infrastructure-monitoring-with-tick-stack/)。
- en: Now, in order to see how useful our `Blackfire.io` supported analysis was and
    how much more efficient our code has become, we will run the two scripts again
    but, this time, while using copies of the official TICK Docker images so that
    we may monitor any improvement in the Web server's overall performance once the
    optimized PHP script is deployed on it. We will also be replacing Chronograf with
    Grafana, a highly customizable graph tool, and we will not be setting up Kapacitor,
    since configuring alerts is slightly beyond the scope of our current objectives.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了查看我们的`Blackfire.io`支持的分析有多有用，以及我们的代码变得更加高效，我们将再次运行这两个脚本，但是这次使用官方TICK Docker镜像的副本，以便我们可以监视优化后的PHP脚本部署到Web服务器上后，Web服务器的整体性能是否有所改善。我们还将用Grafana替换Chronograf，这是一个高度可定制的图形工具，我们不会设置Kapacitor，因为配置警报略微超出了我们当前目标的范围。
- en: 'Let''s begin by activating `mod_status` on our Apache server. From our Linux
    for PHP''s CLI, enter the following commands:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始激活Apache服务器上的`mod_status`。从我们的Linux for PHP的CLI中，输入以下命令：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once you have done this, you should be able to see the server's status report
    by browsing with Chrome to the following URL: `http://localhost:8181/server-status?auto`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您应该能够通过Chrome浏览器浏览以下URL来查看服务器的状态报告：`http://localhost:8181/server-status?auto`。
- en: The next step is to launch the TICK suite. Please open two new Terminal windows
    in order to do so.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是启动TICK套件。请打开两个新的终端窗口以执行此操作。
- en: 'In the first Terminal window, type this command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个终端窗口中，输入此命令：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, in the second newly opened Terminal window, get the IP addresses of our
    two containers by issuing this command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第二个新打开的终端窗口中，通过发出此命令获取我们两个容器的IP地址：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is the result of this command on my computer:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在我的计算机上运行此命令的结果：
- en: '![](assets/ce8758b7-ec84-4df8-88cd-455cec441844.png)The IP addresses of the
    two containers'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/ce8758b7-ec84-4df8-88cd-455cec441844.png)两个容器的IP地址'
- en: Please retain these two addresses as they will be needed to configure Telegraf
    and Grafana.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请保留这两个地址，因为配置Telegraf和Grafana时将需要它们。
- en: We will now generate a sample configuration file for Telegraf with a simple
    command (this step is optional, as a sample file is already included in this book's
    repository).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用一个简单的命令生成Telegraf的示例配置文件（此步骤是可选的，因为示例文件已经包含在本书的存储库中）。
- en: 'Firstly, change the directory to our project''s working directory (Git repository)
    and enter the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将目录更改为我们项目的工作目录（Git存储库），然后输入以下命令：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Secondly, open the new file with your favorite editor and uncomment the following
    lines in the `inputs.apache` section. Do not forget to enter our Linux *for PHP*
    container''s IP address on the `urls` line:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，用您喜欢的编辑器打开新文件，并取消注释`inputs.apache`部分中的以下行。不要忘记在`urls`行上输入我们Linux *for PHP*容器的IP地址：
- en: '![](assets/e8c183a7-d96c-49b5-8d1b-1120d6acac48.png)Configuring Telegraf in
    order to have it monitor the Apache server running in the other container'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e8c183a7-d96c-49b5-8d1b-1120d6acac48.png)配置Telegraf以监视在另一个容器中运行的Apache服务器'
- en: 'In the Terminal window, we can now launch Telegraf with this command (please
    make sure that you are in our project''s working directory):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口中，现在可以使用以下命令启动Telegraf（请确保您在我们项目的工作目录中）：
- en: '[PRE26]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the second newly spawned Terminal window, launch Grafana with the following
    command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个新生成的终端窗口中，使用以下命令启动Grafana：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With Chrome, browse to `http://localhost:3000/login`. You will see Grafana''s
    login page. Please authenticate with the User admin using the Password admin:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Chrome浏览到`http://localhost:3000/login`。您将看到Grafana的登录页面。请使用用户名admin和密码admin进行身份验证：
- en: '![](assets/56f9895a-06a5-4188-8875-ac3e1220d599.png)The Grafana login page
    is displayed'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/56f9895a-06a5-4188-8875-ac3e1220d599.png)显示Grafana登录页面'
- en: 'Then, add a new data source:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，添加新数据源：
- en: '![](assets/2a0326db-90f7-4ce5-b350-936ee3e6acfd.png)Connecting Grafana to a
    data source'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2a0326db-90f7-4ce5-b350-936ee3e6acfd.png)将Grafana连接到数据源'
- en: 'Please choose a name for the InfluxDB data source. Select InfluxDB as the type.
    Enter the URL for the InfluxDB container instance, which includes the IP address
    that you obtained in one of our previous steps, followed by the default port number
    for InfluxDB, which is 8086\. You can select direct access. The database''s name
    is telegraf and the database''s user and password are root:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '请选择InfluxDB数据源的名称。选择InfluxDB作为类型。输入InfluxDB容器实例的URL，其中包括您在之前步骤中获得的IP地址，后跟InfluxDB的默认端口号8086。您可以选择直接访问。数据库名称是telegraf，数据库用户和密码是root:'
- en: '![](assets/efe9ed1a-b23c-411e-bff9-69b844c5a244.png)Configuring Grafana''s
    data source'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/efe9ed1a-b23c-411e-bff9-69b844c5a244.png)配置Grafana的数据源'
- en: 'Finally, click the Add button:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，单击添加按钮：
- en: '![](assets/01c2e253-e68f-4b92-9070-5da430a891c8.png)Adding the data source'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/01c2e253-e68f-4b92-9070-5da430a891c8.png)添加数据源'
- en: 'Now that the data source has been added, let''s add a couple of dashboards
    that we will import from the Grafana website. Start by clicking Import under the
    Dashboards menu entry:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据源已添加，让我们添加一些从Grafana网站导入的仪表板。首先点击仪表板菜单项下的导入：
- en: '![](assets/aaa308c4-dd9a-4ba5-9a9d-0891eac34f73.png)Click on the import menu
    item to begin importing dashboards'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/aaa308c4-dd9a-4ba5-9a9d-0891eac34f73.png)单击导入菜单项开始导入仪表板'
- en: 'The two dashboards that we will add are the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加的两个仪表板如下：
- en: 'Telegraf Host Metrics ([https://grafana.com/dashboards/1443](https://grafana.com/dashboards/1443)):'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Telegraf主机指标（[https://grafana.com/dashboards/1443](https://grafana.com/dashboards/1443)）：
- en: '![](assets/f33d00fa-ffd4-457c-8190-0a263d1a5105.png)The homepage of the Telegraf
    Host Metrics dashboard'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f33d00fa-ffd4-457c-8190-0a263d1a5105.png)Telegraf主机指标仪表板的主页'
- en: 'Apache Overview ([https://grafana.com/dashboards/331](https://grafana.com/dashboards/331)):'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache概览（[https://grafana.com/dashboards/331](https://grafana.com/dashboards/331)）：
- en: '![](assets/2356dfeb-5bca-458a-aba8-8bd40c185f83.png)The homepage of the Apache
    Overview dashboard'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2356dfeb-5bca-458a-aba8-8bd40c185f83.png)Apache概览仪表板的主页'
- en: 'On the import screen, simply enter the number of the dashboard and click Load:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入屏幕上，只需输入仪表板的编号，然后单击加载：
- en: '![](assets/5f6f1fe5-7540-4412-a155-4989ae0098a7.png)Loading the Telegraf Host
    Metrics dashboard'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/5f6f1fe5-7540-4412-a155-4989ae0098a7.png)加载Telegraf主机指标仪表板'
- en: 'Then, confirm the name of the new dashboard and select our Local InfluxDB connection:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，确认新仪表板的名称并选择我们的本地InfluxDB连接：
- en: '![](assets/96777062-1a40-4a25-aba2-3e1101f5239d.png)Connecting the Telegraf
    Host Metrics dashboard to the InfluxDB data source'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/96777062-1a40-4a25-aba2-3e1101f5239d.png)将Telegraf主机指标仪表板连接到InfluxDB数据源'
- en: 'You should now see the new dashboard:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到新的仪表板：
- en: '![](assets/d04fec9b-f9c4-4ddb-9df5-8d6c708a9156.png)The Telegraf Host Metrics
    dashboard is displayed'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/d04fec9b-f9c4-4ddb-9df5-8d6c708a9156.png)显示Telegraf主机指标仪表板'
- en: 'We will now repeat the final two steps in order to import the Apache Overview
    dashboard. After clicking on the Import button under the Dashboards menu entry,
    enter the dashboard''s identifier (`331`) and click the Load button:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将重复最后两个步骤，以导入Apache概览仪表板。单击仪表板菜单项下的导入按钮后，输入仪表板的标识符（`331`），然后单击加载按钮：
- en: '![](assets/e0c0faa6-3265-4e1d-ae5a-2afac962ffdc.png)Loading the Apache Overview
    dashboard'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e0c0faa6-3265-4e1d-ae5a-2afac962ffdc.png)加载Apache概览仪表板'
- en: 'Then, confirm the name and select our Local InfluxDB data source:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，确认名称并选择我们的本地InfluxDB数据源：
- en: '![](assets/a207e4f0-7695-4895-856e-3a6d5a821eec.png)Connecting the Apache Overview
    dashboard to the InfluxDB data source'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a207e4f0-7695-4895-856e-3a6d5a821eec.png)将Apache概览仪表板连接到InfluxDB数据源'
- en: 'You should now see the second dashboard in the browser:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该在浏览器中看到第二个仪表板：
- en: '![](assets/bf9d26a3-d85b-4964-a48c-3a462ffb0c93.png)The Apache Overview dashboard
    is displayed'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bf9d26a3-d85b-4964-a48c-3a462ffb0c93.png)显示Apache概览仪表板'
- en: All TICK suite dashboards allow for more advanced configuration and customization
    of graphs. It would therefore be possible to collect a custom set of time-series
    data points through the execution of custom cron scripts for example, and then
    configure the dashboards to display this data as you see fit.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 所有TICK套件仪表板都允许更高级的图形配置和自定义。因此，通过执行自定义cron脚本，可以收集一组自定义的时间序列数据点，然后配置仪表板以按您的要求显示这些数据。
- en: 'In the case of our current example, the TICK suite is now installed and configured.
    Thus, we can begin testing and monitoring the PHP script that was optimized using
    `Blackfire.io` in the first part of this chapter in order to measure the changes
    in its performance. We will start by deploying, benchmarking and monitoring the
    old version. On the Linux for PHP''s CLI, enter the following command in order
    to benchmark the old version of the script:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们当前的例子中，TICK套件现在已安装和配置。因此，我们可以开始测试和监视使用`Blackfire.io`在本章第一部分中进行优化的PHP脚本，以测量其性能的变化。我们将首先部署、进行基准测试和监视旧版本。在Linux上的PHP
    CLI中，输入以下命令以对旧版本的脚本进行基准测试：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The benchmark test should yield something similar to the following result:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试应该产生类似以下结果：
- en: '![](assets/845dd1b4-a034-4c57-bfe1-6dd3fda39694.png)The results of the performance
    benchmark of the original script are displayed'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/845dd1b4-a034-4c57-bfe1-6dd3fda39694.png)显示了原始脚本的性能基准测试结果'
- en: 'Then, after waiting approximately ten minutes, start benchmarking the new version
    of the script by entering the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，等待大约十分钟后，通过输入以下命令开始对新版本的脚本进行基准测试：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here is the result of this latest benchmark on my computer:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我电脑上最新基准测试的结果：
- en: '![](assets/23505778-9583-41ba-be5d-b6a440b2c7f0.png)The results of the performance
    benchmark of the optimized script are displayed'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/23505778-9583-41ba-be5d-b6a440b2c7f0.png)显示了优化脚本的性能基准测试结果'
- en: The results already reveal to us a considerable improvement in performance.
    Indeed, the new script allows for more than three times the number of transactions
    per second and more than three times fewer failed transactions.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 结果已经显示出性能上的显著改善。事实上，新脚本每秒允许的交易数量是原来的三倍多，失败交易的数量也减少了三分之一以上。
- en: 'Now, let''s have a look at what data our TICK Stack collected concerning the
    performance of these two versions of our PHP script:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们的TICK Stack收集了关于这两个版本的PHP脚本性能的哪些数据：
- en: '![](assets/148e9e94-8227-4989-8ddb-1de83c5f8a0b.png)The gain in performance
    is clearly seen in the monitoring graphs'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/148e9e94-8227-4989-8ddb-1de83c5f8a0b.png)监控图表中清楚地显示了性能的提升'
- en: The graphs in our Grafana dashboard clearly show a performance boost of the
    same order of magnitude as the benchmark results themselves. The benchmark test
    launched after 08:00 against the new version of our script clearly generated two
    times less load on the server, caused two times less input (I/O) and was more
    than three times faster in general than the old version that was benchmarked previously
    around 7:40. Therefore, our `Blackfire.io` optimizations have, without a doubt,
    made the new version of our PHP script more efficient.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Grafana仪表板中的图表清楚地显示了与基准测试结果本身相同数量级的性能提升。在08:00之后对新版本脚本进行的基准测试明显使服务器负载减少了一半，输入（I/O）减少了一半以上，并且总体上比之前在7:40左右进行基准测试的旧版本快了三倍以上。因此，毫无疑问，我们的`Blackfire.io`优化使得新版本的PHP脚本更加高效。
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to install and configure a basic `Blackfire.io`
    setup in order to easily and automatically profile code when committing it to
    a repository. We have also explored how to install a TICK Stack in order to continuously
    monitor our code's performance after its deployment on a live production server.
    Thus, we have seen how to install and configure profiling and monitoring tools
    that help us easily optimize PHP code in a **continuous integration** (**CI**)
    and a **continuous deployment** (**CD**) environment.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装和配置基本的`Blackfire.io`设置，以便在提交到存储库时轻松自动地对代码进行分析。我们还探讨了如何安装TICK Stack，以便在将代码部署到实时生产服务器后持续监视其性能。因此，我们已经了解了如何安装和配置分析和监视工具，这些工具可以帮助我们在**持续集成**（**CI**）和**持续部署**（**CD**）环境中轻松优化PHP代码。
- en: In the next chapter, we will explore how better understanding PHP data structures
    and using simplified functions can help an application's global performance along
    its critical execution path. We will start by analyzing a project's critical path
    and, then, fine-tune certain of its data structures and functions.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何更好地理解PHP数据结构并使用简化的函数可以帮助应用程序在其关键执行路径上的全局性能。我们将首先分析项目的关键路径，然后微调其某些数据结构和函数。
- en: References
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[1] For further explanations on these performance testing terms, please go
    to this URL: [https://blackfire.io/docs/reference-guide/time](https://blackfire.io/docs/reference-guide/time).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 关于这些性能测试术语的进一步解释，请访问以下网址：[https://blackfire.io/docs/reference-guide/time](https://blackfire.io/docs/reference-guide/time)。'
