- en: Chapter 4. Advanced Queries – Filter Queries and Faceting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。高级查询-过滤器查询和分面
- en: 'This chapter starts by defining filter queries and their benefits compared
    to the normal search queries that we have used earlier. We will see how we can
    use filter queries in Solr with PHP and the Solarium library. We will then explore
    faceting in Solr. We will also see how PHP can be used to facet in Solr. We will
    explore faceting by field, faceting by query, and faceting by range. We will also
    look at faceting by using pivots. The topics that will be covered are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先定义了过滤器查询及其与我们之前使用的普通搜索查询相比的优点。我们将看到如何在Solr中使用PHP和Solarium库使用过滤器查询。然后我们将探讨Solr中的分面。我们还将看到如何使用PHP在Solr中进行分面。我们将探索按字段进行分面、按查询进行分面和按范围进行分面。我们还将看看如何使用枢轴进行分面。将涵盖的主题如下：
- en: Filter queries and their benefits
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器查询及其优点
- en: Executing filter queries using PHP and Solarium
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP和Solarium执行过滤器查询
- en: Creating a filter query configuration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建过滤器查询配置
- en: Faceting
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分面
- en: Faceting by field, query, and range
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按字段、查询和范围进行分面
- en: Faceting pivots
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分面枢轴
- en: Filter queries and their benefits
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器查询及其优点
- en: Filter queries are used to put a **filter** on the results from a Solr query
    without affecting the score. Suppose we are looking for all books that are in
    stock. The related query will be `q=cat:book AND inStock:true`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器查询用于在不影响评分的情况下对Solr查询的结果进行**过滤**。假设我们正在寻找所有有库存的书籍。相关查询将是`q=cat:book AND inStock:true`。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Another way to handle the same query is by using filter queries. The query will
    change to `q=cat:book&fq=inStock:true`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 处理相同查询的另一种方法是使用过滤器查询。查询将变为`q=cat:book&fq=inStock:true`。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Though the results are the same, there are certain benefits of using filter
    queries. A filter query stores only document IDs. This makes it very fast to apply
    filters to include or exclude documents in a query. A normal query on the other
    hand has a complex scoring function causing reduced performance. Scoring or relevance
    calculation and ranking is not done on a filter query. Another benefit of using
    filter queries is that they are cached at Solr level resulting in an even better
    performance. It is recommended to use filter queries instead of normal queries.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管结果相同，但使用过滤器查询有一定的好处。过滤器查询仅存储文档ID。这使得在查询中应用过滤器以包括或排除文档非常快速。另一方面，普通查询具有复杂的评分函数，导致性能降低。过滤器查询不进行评分或相关性计算和排名。使用过滤器查询的另一个好处是它们在Solr级别被缓存，从而获得更好的性能。建议使用过滤器查询而不是普通查询。
- en: Executing filter queries
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行过滤器查询
- en: To add a filter query to our existing query, first we need to create a filter
    query from our Solr query module.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要向现有查询添加过滤器查询，首先需要从我们的Solr查询模块创建一个过滤器查询。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The string provided as a parameter to the `createFilterQuery()` function is
    used as *key* for the filter query. This key can be used to retrieve the filter
    query associated with this query. Once the filter query module is available, we
    can use the `setQuery()` function to set a filter query for this Solarium query.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`createFilterQuery()`函数的参数提供的字符串被用作过滤器查询的*key*。此键可用于检索与此查询关联的过滤器查询。一旦过滤器查询模块可用，我们可以使用`setQuery()`函数为此Solarium查询设置过滤器查询。
- en: 'In the preceding piece of code, we have created a filter query by the name
    of `Availability`. We will set the filter query for key `Availability` as `instock:true`
    and then execute the complete query as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，我们创建了一个名为`Availability`的过滤器查询。我们将为键`Availability`设置过滤器查询为`instock:true`，然后执行完整的查询如下：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once the resultset is available, it can be iterated over to get and process
    the results.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦结果集可用，就可以迭代它以获取和处理结果。
- en: Let us check Solr logs and see the query that was sent to Solr.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查Solr日志，看看发送到Solr的查询。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can see the `fq` parameter `inStock:true` appended to the parameter list
    of our Solr query.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`fq`参数`inStock:true`附加到我们Solr查询的参数列表中。
- en: The `getFilterQuery(string $key)` function can be used to retrieve the filter
    query associated with a Solarium query.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`getFilterQuery(string $key)`函数可用于检索与Solarium查询关联的过滤器查询。'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating filter query configuration
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建过滤器查询配置
- en: We can also pass filter query as a configuration parameter to the Solarium query
    using the `addFilterQuery()` function. For this, we need to first define the filter
    query as a configuration array and then add it to the Solarium query.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`addFilterQuery()`函数将过滤器查询作为配置参数传递给Solarium查询。为此，我们需要首先将过滤器查询定义为配置数组，然后将其添加到Solarium查询中。
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Solr query created by the preceding configuration is similar to the one
    created earlier. The benefit of using filter query configuration is that we can
    define multiple standard filter queries as configurations and add them in our
    Solr query as required. The `addTag(String $tag)` and `addTags(array $tags)` functions
    are used to define tags in the filter queries. We can use these tags to exclude
    certain filter queries in facets. We will go through an example later.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置创建的Solr查询与之前创建的查询类似。使用过滤器查询配置的好处是我们可以将多个标准过滤器查询定义为配置，并根据需要将它们添加到我们的Solr查询中。`addTag(String
    $tag)`和`addTags(array $tags)`函数用于在过滤器查询中定义标签。我们可以使用这些标签在分面中排除某些过滤器查询。稍后我们将通过一个示例进行说明。
- en: Faceting
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分面
- en: Faceted searches break up the search results into multiple categories, showing
    counts for each category. Faceting is used in searches to drill down into a subset
    of results from a query. To get an idea of how facets are helpful, let us go to
    [www.amazon.com](http://www.amazon.com) and search for mobile phones. We will
    see facets on the left-hand side such as brand, display size, and carrier. Once
    we select a facet to drill down, we will see more facets that will help us narrow
    down the phone we would like to purchase.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 分面搜索将搜索结果分成多个类别，显示每个类别的计数。分面用于搜索以深入查询结果的子集。要了解分面有多么有用，让我们转到[www.amazon.com](http://www.amazon.com)搜索手机。我们将在左侧看到分面，如品牌、显示尺寸和运营商。一旦选择一个分面进行深入，我们将看到更多的分面，这将帮助我们缩小我们想购买的手机范围。
- en: Faceting is generally done on human readable text that is predefined such as
    location, price, and author name. It would not make sense tokenizing these fields.
    So, *facet fields* are kept separate from search and sorting fields in the Solr
    schema. They are also not converted to lowercase but are kept as they are. Faceting
    is done on indexed fields on Solr. So there is no need to store faceted fields.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: facet通常用于预定义的人类可读文本，例如位置、价格和作者姓名。对这些字段进行标记化是没有意义的。因此，*facet字段*在Solr模式中与搜索和排序字段分开。它们也不转换为小写，而是保留原样。facet是在Solr上索引字段上完成的。因此，不需要存储facet字段。
- en: 'Solarium introduces the concept of **facetset**, which is one central component
    and can be used to create and manage facets and also set global facet options.
    Let us push the `books.csv` file from this chapter into the Solr index. We can
    use the same command that was used in [Chapter 2](ch02.html "Chapter 2. Inserting,
    Updating, and Deleting Documents from Solr"), *Inserting, Updating, and Deleting
    Documents from Solr*, which is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Solarium引入了**facetset**的概念，这是一个中央组件，可用于创建和管理facet，并设置全局facet选项。让我们将本章的`books.csv`文件推送到Solr索引中。我们可以使用与[第2章](ch02.html
    "第2章。向Solr插入、更新和删除文档")中使用的相同命令，*向Solr插入、更新和删除文档*，如下所示：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Facet by field
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按字段facet
- en: Faceting by field counts the number of occurrences of a term in a specific field.
    Let us create facets on **author** and **genre**. There are separate string fields
    in our Solr index for indexing facet-related strings without any tokenization.
    In this case, the fields are `author_s` and `genre_s`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 按字段facet计算特定字段中术语的出现次数。让我们在**作者**和**流派**上创建facet。在我们的Solr索引中，有专门的字符串字段用于索引与facet相关的字符串，而不进行任何标记。在这种情况下，字段是`author_s`和`genre_s`。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Fields ending with `_s` are dynamic fields defined in our Solr `schema.xml`.
    Dynamic fields defined as `*_s` match any field that ends in `_s` and all attributes
    in the field definition are applied on this field.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以`_s`结尾的字段是在我们的Solr `schema.xml`中定义的动态字段。定义为`*_s`的动态字段匹配以`_s`结尾的任何字段，并且字段定义中的所有属性都应用在这个字段上。
- en: To create a facet on our `author_s` field, we need to get the `facetset` component
    from the Solarium query, create a `facet field` key and set the actual field using
    the facets that will be created.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个在我们的`author_s`字段上的facet，我们需要从Solarium查询中获取`facetset`组件，创建一个`facet field`键，并使用将要创建的facet来设置实际字段。
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Set the number of facets to get using the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码设置要获取的facet数量：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Return all facets that have at least one term in them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 返回至少有一个术语的所有facet。
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Also return documents that do not have any value for the facet field.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还返回没有facet字段值的文档。
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After executing the query, we will have to get the facets and counts by the
    facet field key.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 执行查询后，我们将需要通过facet字段键获取facet和计数。
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In addition, we can use the `setOffset(int $offset)` function to show faceting
    starting from this offset. The `setOffset(int $offset)` and `setLimit(int $limit)`
    functions can be used for pagination within facets.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用`setOffset(int $offset)`函数从此偏移开始显示facet。`setOffset(int $offset)`和`setLimit(int
    $limit)`函数可用于facet内的分页。
- en: On going through the Solr logs, we can see the query that was executed on Solr.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Solr日志，我们可以看到在Solr上执行的查询。
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The parameter `facet=true` is passed to enable faceting. Fields on which we
    need faceting are passed as multiple `facet.field` values. Other parameters that
    we can see here are `facet.missing`, `facet.mincount`, and `facet.limit`. To check
    out the Solr response to facet query, let us copy the query from logs, paste it
    to our Solr URL, and remove the `omitHeaders` and `wt` parameters.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 传递参数`facet=true`以启用facet。需要facet的字段作为多个`facet.field`值传递。我们在这里看到的其他参数是`facet.missing`，`facet.mincount`和`facet.limit`。要检查Solr对facet查询的响应，让我们从日志中复制查询，将其粘贴到我们的Solr
    URL中，并删除`omitHeaders`和`wt`参数。
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Facet by field](graphics/4920_04_01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![按字段facet](graphics/4920_04_01.jpg)'
- en: Facets are on fields – author and genre. Counts for different authors and genres
    are visible.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: facet是在字段上的-作者和流派。不同作者和流派的计数是可见的。
- en: Facet by query
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按查询facet
- en: We can use a facet query in addition to the normal query to get counts with
    respect to the facet query. The counts are not affected by the main query and
    filter queries can be excluded from it. Let's see the code to get counts of facets
    where `genre` is `fantasy` and also see an example of excluding a filter query.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用facet查询来获取与facet查询相关的计数，而不受主查询的影响，并且可以排除过滤查询。让我们看看获取`genre`为`fantasy`的facet计数的代码，并且还看一个排除过滤查询的示例。
- en: Let us first create a query to select all books in our index.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个查询，以选择我们索引中的所有书籍。
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Create a filter query for books that are in stock and tag it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为库存中的书籍创建一个过滤查询并对其进行标记。
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Get the `facetset` component from our query using the following code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码从我们的查询中获取`facetset`组件：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a facet by query to count the number of books of a particular genre.
    Also, exclude the filter query we added earlier.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个facet查询，以计算特定流派的书籍数量。还要排除我们之前添加的过滤查询。
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let us add another facet query where the filter query is not excluded:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加另一个facet查询，其中不排除过滤查询：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: After the query is executed, we can get the count from the resultset.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 执行查询后，我们可以从结果集中获取计数。
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here the count for the `fantasy` facet contains books that are not in stock
    as well because we had excluded the filter query for getting books that are in
    stock. Whereas, the `fiction` facet contains only books that are in stock as the
    filter query has not been excluded in this facet query.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`fantasy` facet的计数包含了不在库存中的书籍，因为我们已经排除了获取库存中的书籍的过滤查询。而`fiction` facet只包含库存中的书籍，因为在这个facet查询中没有排除过滤查询。
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: From Solr logs, we can see that the parameter being passed for creating facets
    using query is `facet.query`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从Solr日志中，我们可以看到传递用于使用查询创建facet的参数是`facet.query`。
- en: '![Facet by query](graphics/4920_04_03.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![按查询facet](graphics/4920_04_03.jpg)'
- en: Facet counts for queries on genre fantasy and fiction
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 流派幻想和小说的查询计数
- en: 'We can create multiple facet queries for getting counts of different query
    facets. But it is easier to use the **facet multiquery** feature provided by Solarium.
    Let us see the code to get facet counts for `genre` as `fantasy` and `fiction`
    using the facet multiquery feature:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建多个facet查询来获取不同查询facet的计数。但使用Solarium提供的**facet multiquery**功能更容易。让我们看看使用facet
    multiquery功能获取`genre`为`fantasy`和`fiction`的facet计数的代码：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here is the code to get the facet counts for all facet queries after executing
    the main query.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在执行主查询后获取所有facet查询的facet计数的代码。
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The Solr query created using `facetMultiQuery` and `facetQuery` is the same.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`facetMultiQuery`和`facetQuery`创建的Solr查询是相同的。
- en: Facet by range
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按范围分面
- en: Faceting can also be done on range basis. So for example, we can create facet
    counts of books for every two dollars. Using range faceting, we can give counts
    of books with prices between 0-2 dollars and from 2-4 dollars and so on.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 分面也可以基于范围进行。例如，我们可以为每两美元的书籍创建facet计数。使用范围分面，我们可以给出价格在0-2美元之间的书籍的计数，以及2-4美元之间的书籍的计数，依此类推。
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the preceding code, we start faceting from price `0` dollars and up to `16`
    dollars. The following code will be used to display the range facets along with
    their counts after executing the query:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们从价格`0`美元开始进行分面，直到`16`美元。在执行查询后，将使用以下代码显示范围facet及其计数：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![Facet by range](graphics/4920_04_04.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![按范围分面](graphics/4920_04_04.jpg)'
- en: Facet by range output
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 按范围输出的分面
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The parameter used in the Solr query in this case is `facet.range`. It is possible
    to provide more than one faceting parameters together. For example, we can facet
    by query and facet by range in a single query.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下Solr查询中使用的参数是`facet.range`。可以同时提供多个facet参数。例如，我们可以在单个查询中进行按查询分面和按范围分面。
- en: Facet by pivot
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按枢轴分面
- en: In addition to the different ways of creating facets, there is a concept of
    **facet by pivots** that is provided by Solr and is exposed via Solarium. Pivot
    faceting allows us to create facets within the results of the parent facet. The
    input to pivot faceting is a set of fields to pivot on. Multiple fields create
    multiple sections in the response.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建facet的不同方式之外，Solr还提供了**按枢轴分面**的概念，并通过Solarium公开。枢轴分面允许我们在父facet的结果中创建facet。枢轴分面的输入是一组要进行枢轴的字段。多个字段在响应中创建多个部分。
- en: 'Here is the code to create a facet pivot on `genre` and `availability` (in
    stock):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在`genre`和`availability`（有库存）上创建facet枢轴的代码：
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To display the pivots, we have to get all facets from the resultset.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示枢轴，我们必须从结果集中获取所有的facet。
- en: '[PRE28]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: And for each facet, get the field, value, and count for the facet and more facet
    pivots within the facet.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个facet，获取facet的字段、值和计数，以及facet内的更多facet枢轴。
- en: '[PRE29]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Also get all pivots inside this facet and process them in the same fashion using
    recursive calls if required.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 还要获取此facet内的所有枢轴，并在需要时以相同的方式进行递归调用处理。
- en: '[PRE30]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This feature is very helpful in creating a complete categorization of data as
    facets at different levels. From Solr query logs it is seen that the parameter
    used here is `facet.pivot`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能在创建数据的完整分类方面非常有帮助，可以在不同级别上进行facet。从Solr查询日志中可以看到，这里使用的参数是`facet.pivot`。
- en: '[PRE31]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: On executing the same query on the Solr interface, we get the following output.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Solr界面上执行相同的查询时，我们得到以下输出。
- en: '[PRE32]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![Facet by pivot](graphics/4920_04_02.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![按枢轴分面](graphics/4920_04_02.jpg)'
- en: The first level of categorization happens on the genre field. Inside the genre,
    the second level of categorization happens on the inStock field.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 第一级分类发生在genre字段上。在genre内部，第二级分类发生在inStock字段上。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw advanced query functionalities of Solr. We defined filter
    queries and saw the benefits of using filter queries instead of normal queries.
    We saw how to do faceting on Solr using PHP and Solarium. We saw different ways
    to facet results as facets by field, facets by query, facets by range and creating
    facet pivots. We also saw the actual queries being executed on Solr and in some
    cases executed the query on Solr and saw the results.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了Solr的高级查询功能。我们定义了过滤查询，并看到了使用过滤查询而不是普通查询的好处。我们看到了如何使用PHP和Solarium在Solr上进行分面处理。我们看到了不同的分面结果的方式，如按字段分面、按查询分面、按范围分面以及创建分面枢轴。我们还看到了在Solr上执行的实际查询，并在某些情况下执行了Solr上的查询并查看了结果。
- en: In the next chapter, we will explore highlighting of search results using PHP
    and Solr.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用PHP和Solr对搜索结果进行高亮显示。
