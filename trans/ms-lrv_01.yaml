- en: Chapter 1. Designing Done Right with phpspec
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。使用phpspec正确设计
- en: Many things have happened since Laravel's humble beginnings in 2011\. Taylor
    Otwell, a .NET programmer, sought out PHP as a way to do a side project, since
    he was told that hosted PHP was cheap and ubiquitous. What originally started
    out as an extension to CodeIgniter become its own code. Freeing up the code base
    from the limitations of CodeIgniter's PHP 5.2, all of the new features that PHP
    5.3 had to offer, such as namespacing and closures, could be used. The time span
    between the release of versions 1 and 3 of Laravel was only one year. With version
    3, things happened very quickly. After its explosion in popularity, which happened
    around the time that version 4 was released, it quickly began to steal the market
    share from other popular frameworks such as CodeIgniter, Zend, Symfony, Yii, and
    CakePHP to eventually take the pole position. Along with its expressive syntax,
    great documentation, and a passionate founder came large community mainstays the
    IRC and Slack chat room, The Laravel Podcast, and the Laracasts instructional
    video website. Also, the newly created commercial support such as Envoyer, which
    provides *100 percent uptime*, means that Laravel was also welcomed by enterprises.
    With the release of Laravel 4.2, the minimum required PHP version was increased
    to 5.4 to take advantage of modern PHP features such as *traits*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自2011年Laravel谦虚的开始以来，发生了许多事情。Taylor Otwell，一名.NET程序员，寻求使用PHP来进行一项副业项目，因为他被告知托管PHP便宜且无处不在。最初作为CodeIgniter的扩展开始，最终成为自己的代码。将代码库从CodeIgniter的PHP
    5.2的限制中释放出来，可以使用PHP 5.3提供的所有新功能，如命名空间和闭包。版本1和3之间的时间跨度仅为一年。版本3后，事情发生得非常迅速。在其爆炸式的流行之后，即版本4发布时，它迅速开始从其他流行框架（如CodeIgniter、Zend、Symfony、Yii和CakePHP）那里夺取市场份额，最终占据了领先地位。除了其表达性语法、出色的文档和充满激情的创始人外，还有大型社区的主要支柱IRC和Slack聊天室、Laravel播客和Laracasts教学视频网站。此外，新创建的商业支持，如提供*100%正常运行时间*的Envoyer，也意味着Laravel也受到了企业的欢迎。随着Laravel
    4.2的发布，最低要求的PHP版本提高到了5.4，以利用现代PHP特性，如*traits*。
- en: Using Laravel's traits along with the new syntax, such as the [] array shortcut,
    makes coding a breeze. Laravel's expressive syntax, coupled with these modern
    PHP features, makes it a great choice for any developer who wishes to build robust
    applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Laravel的特性以及新的语法，比如[]数组快捷方式，使编码变得轻松。Laravel的表达性语法，再加上这些现代PHP特性，使它成为任何希望构建强大应用的开发者的绝佳选择。
- en: '![Designing Done Right with phpspec](graphics/B04559_01_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![使用phpspec正确设计](graphics/B04559_01_01.jpg)'
- en: Laravel's rise in success, as reported by Google Trends
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel在Google趋势报告中的成功崛起
- en: A new era
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个新时代
- en: In late 2014, the second most important part of the history of Laravel occurred.
    When what was scheduled to be version 4.3 changed many of the core principals
    of Laravel, the community decided that it should become version 5.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年底，Laravel历史上第二个最重要的时刻发生了。原定的4.3版本改变了许多Laravel的核心原则，社区决定将其成为5.0版本。
- en: The arrival of Laravel 5 brings about many changes in the way we use it to build
    software. The built-in MVC architecture that was inherited from frameworks such
    as CodeIgniter has been abandoned in favor of being more dynamic, modular, and
    even daringly framework-agnostic. Many of the components have been decoupled as
    much as possible. The most important part of Laravel's history will be the arrival
    of Laravel version 5.1, which will have **long-term support** (**LTS**). Thus,
    Laravel's place in enterprises will be solidified even more. Also, the minimum
    PHP requirements will be changed to version 5.5\. So, for any new projects, PHP
    5.5, or even PHP 5.6, is recommended because upgrading to PHP version 7 will be
    even easier.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5的到来带来了许多在构建软件时使用它的方式的变化。从诸如CodeIgniter等框架继承的内置MVC架构已被放弃，以更具动态性、模块化甚至大胆的框架不可知性为代价。许多组件已尽可能解耦。Laravel历史上最重要的部分将是Laravel
    5.1版本的到来，它将有**长期支持**（**LTS**）。因此，Laravel在企业中的地位将更加稳固。此外，最低的PHP要求将更改为5.5版本。因此，对于任何新项目，建议使用PHP
    5.5，甚至PHP 5.6，因为升级到PHP 7版本将更加容易。
- en: A leaner app
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个更精简的应用程序
- en: The `/app` directory was slimmed down, leaving in only the most essential parts
    of the application. Directories such as `config`, `database`, `storage`, and `tests`
    have been moved out of the `app` directory since they are auxiliary to the application
    itself. Most importantly, the integration of the testing tools has matured drastically.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`/app`目录变得更加精简，只留下了应用程序中最基本的部分。诸如`config`、`database`、`storage`和`tests`等目录已经从`app`目录中移出，因为它们是辅助应用程序本身的。最重要的是，测试工具的集成已经大大成熟。'
- en: PSR
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PSR
- en: Thanks to the efforts of the **Framework Interoperability Group** (**PHP-FIG**),
    the developer of the **PHP Standard Recommendation** (**PSR**), the reading, writing,
    and formatting of the framework code is becoming easier. It even allows developers
    to more easily work in more than one framework. Laravel is a part of the FIG and
    continues to adopt its recommendations into the framework. Laravel 5.1, for example,
    will adopt the PSR-2 standard. For more information about the PHP FIG and PSR,
    visit the PHP-FIG website, [http://www.php-fig.org](http://www.php-fig.org).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**框架互操作性组**（**PHP-FIG**）的努力，**PHP标准推荐**（**PSR**）的开发者，框架代码的阅读、编写和格式化变得更加容易。它甚至允许开发者更容易地在多个框架中工作。Laravel是FIG的一部分，并继续将其建议纳入框架中。例如，Laravel
    5.1将采用PSR-2标准。有关PHP FIG和PSR的更多信息，请访问PHP-FIG网站[http://www.php-fig.org](http://www.php-fig.org)。
- en: Installing and configuring Laravel
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Laravel
- en: 'The latest up-to-date instructions to install Laravel can always be found at
    the Laravel website, [http://laravel.com](http://laravel.com). To begin using
    Laravel in a development environment, the current best practices suggest using
    the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Laravel的最新更新说明始终可以在Laravel网站[http://laravel.com](http://laravel.com)找到。要在开发环境中开始使用Laravel，当前的最佳实践建议使用以下方法：
- en: '**Vagrant**: This provides a convenient way to manage a virtual machine, such
    as Virtualbox.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant：这提供了一种方便的方式来管理虚拟机，如Virtualbox。
- en: '**PuPHPet**: This is an excellent tool that can be used to create a virtual
    machine of various types. For more information about PuPHPet, visit [https://puphpet.com](https://puphpet.com).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PuPHPet：这是一个可以用来创建各种类型虚拟机的优秀工具。有关PuPHPet的更多信息，请访问[https://puphpet.com](https://puphpet.com)。
- en: '**Phansible**: This is an alternative to PuPHPet. For information about Phansible,
    visit [http://phansible.com](http://phansible.com).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Phansible：这是PuPHPet的另一种选择。有关Phansible的信息，请访问[http://phansible.com](http://phansible.com)。
- en: '**Homestead**: This is maintained by the Laravel community, and is a virtual
    machine that is created specifically for Laravel and which uses NGINX instead
    of Apache. For more information about Homestead, visit [https://github.com/laravel/homestead](https://github.com/laravel/homestead).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homestead：这是由Laravel社区维护的，是专门为Laravel创建的虚拟机，使用的是NGINX而不是Apache。有关Homestead的更多信息，请访问[https://github.com/laravel/homestead](https://github.com/laravel/homestead)。
- en: Installation
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: The basic process involves downloading and installing Composer and then adding
    Laravel as a dependency. An important detail is that the storage directory, which
    is located parallel to the `/app` directory, needs to be set in such a way that
    it is writable by the web server user in order to allow Laravel 5 to do things
    like writing the log files. It is also important to make sure that `$ php artisan
    key:generate` is used to generate a 32-character key that is used for hashing
    because, since the release of PHP 5.6, Mcrypt is more strict as regards its requirements.
    For Laravel 5.1, OpenSSL will replace Mcrypt.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 基本过程涉及下载和安装Composer，然后将Laravel添加为依赖项。一个重要的细节是，存储目录，它位于`/app`目录的平行位置，需要以可写的方式设置，以便允许Laravel
    5执行诸如写日志文件之类的操作。还很重要的是确保使用`$ php artisan key:generate`生成一个用于哈希的32字符密钥，因为自PHP 5.6发布以来，Mcrypt对其要求更为严格。对于Laravel
    5.1，OpenSSL将取代Mcrypt。
- en: Configuration
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: In Laravel 4, the environments were configured in a manner that relied on the
    hostname of the server or a development machine, and this was rather contrived.
    Laravel 5 instead uses a `.env` file that sets up the various environments. This
    file is included in `.gitignore`. Thus, each machine should receive its configuration
    from a source outside the source code control.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel 4中，环境是以服务器或开发机器的主机名配置的，这相当牵强。相反，Laravel 5使用一个`.env`文件来设置各种环境。该文件包含在`.gitignore`中。因此，每台机器都应该从源代码控制之外的源接收其配置。
- en: 'So for example, something like the following code can be used to set up a local
    development:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，可以使用以下代码来设置本地开发：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Namespacing
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间
- en: A nice new feature of Laravel is that it allows you to set the highest level
    namespace to something such as `MyCompany` through the `app:name` command. This
    command will actually change the namespace of all the relevant files inside the
    `/app` directory from App to `MyCompany`, for example. This namespace then lives
    inside the `/app` directory. This builds namespacing right into virtually every
    file whereas previously, in version 4.x, it was optional.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的一个很好的新功能是，它允许您将最高级别的命名空间设置为诸如`MyCompany`之类的内容，通过`app:name`命令。这个命令实际上会将`/app`目录中所有相关文件的命名空间从App更改为`MyCompany`，例如。然后，这个命名空间存在于`/app`目录中。这将命名空间化到几乎每个文件中，而在之前的4.x版本中，这是可选的。
- en: TDD done right
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正确的TDD
- en: The culture of test-driven development is not new. Rather, it has been around
    even before Kent Beck wrote SUnit in the 1990's. The xUNIT family of unit testing
    frameworks, which stemmed from SUnit, has grown to provide a testing solution
    for PHP.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发的文化并不新鲜。相反，甚至在肯特·贝克（Kent Beck）在1990年代编写SUnit之前就已经存在。源自SUnit的xUNIT系列单元测试框架已经发展成为为PHP提供测试解决方案。
- en: PHPUnit
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHPUnit
- en: The PHP port of the PHP testing software is named PHPUnit. Yet, test-driven
    development in the PHP language is a fairly recent concept. For example, in his
    book, "*The Grumpy Programmer's Guide To Building Testable PHP Applications*",
    which was published at the end of 2012, *Chris Hartjes* wrote "I started looking
    into the culture of testing surrounding CodeIgniter. It's weaker than a newborn
    baby."
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: PHP端口的PHP测试软件名为PHPUnit。然而，在PHP语言中进行测试驱动开发是一个相当新的概念。例如，在他的书《*The Grumpy Programmer's
    Guide To Building Testable PHP Applications*》中，*Chris Hartjes*在2012年底出版，写道“我开始研究围绕CodeIgniter的测试文化。它比新生儿还弱。”
- en: Testing has been a part of the Laravel framework since version 3 that uses the
    PHPUnit unit-testing tool, and therefore Laravel's inclusion of the `phpunit.xml`
    file was a huge leap forward in the effort to encourage developers to embrace
    test-driven development.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 自Laravel 3版本以来，测试一直是Laravel框架的一部分，使用PHPUnit单元测试工具，因此Laravel包含`phpunit.xml`文件是在努力鼓励开发人员接受测试驱动开发的努力中迈出的重要一步。
- en: phpspec
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: phpspec
- en: Another testing tool, RSpec, emerged in the Ruby community in 2007 and was a
    refinement on test-driven development. It featured **behavior driven development**
    (**BDD**). The phpspec tool, which brought ported RSpec's BDD to PHP, is growing
    rapidly in popularity. Its co-creator, Marcello Duarte, repeatedly states that
    "BDD is TDD done right". Therefore, BDD is simply an *improvement* or evolution
    of TDD. Laravel 5 now cleverly includes phpspec as a way to accentuate the *design
    by specification* paradigm of behavior-driven development.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个测试工具RSpec在2007年出现在Ruby社区，并对测试驱动开发进行了改进。它具有**行为驱动开发**（**BDD**）。phpspec工具将RSpec的BDD移植到PHP中，正在迅速增长。它的共同创始人Marcello
    Duarte多次表示“BDD是正确的TDD”。因此，BDD只是对TDD的*改进*或演变。Laravel 5现在巧妙地将phpspec包含为一种突出*按规范设计*行为驱动开发范式的方式。
- en: Since an essential step in building a Laravel 5 application is to specify which
    entities to create, after installing and configuring Laravel 5, the developer
    may immediately start designing by running phpspec as a design tool.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在构建Laravel 5应用程序的基本步骤是指定要创建的实体，因此在安装和配置Laravel 5后，开发人员可以立即通过运行phpspec作为设计工具开始设计。
- en: Entity creation
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实体创建
- en: Let's create a sample web application. If the client has asked us to build a
    booking system for tourism structures, then the system may contain the entities
    such as accommodations (hotels and bed and breakfasts, for example), rooms, rates,
    and reservations.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个示例Web应用程序。如果客户要求我们为旅游结构构建预订系统，那么系统可能包含诸如住宿（例如酒店和早餐客栈）、房间、价格和预订等实体。
- en: 'The simplified database schema will look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 简化的数据库架构如下所示：
- en: '![Entity creation](graphics/B04559_01_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![实体创建](graphics/B04559_01_02.jpg)'
- en: The MyCompany database schema
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MyCompany数据库架构
- en: 'The database schema has the following assumptions:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库架构有以下假设：
- en: An accommodation has many rooms
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个住宿有很多房间
- en: Reservations are made for a single user
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订仅适用于单个用户
- en: A reservation may include more than one room
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订可能包括多个房间
- en: A reservation has a start date and an end date
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订有一个开始日期和一个结束日期
- en: Rates are valid for one room from a start date to an end date
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格从开始日期到结束日期对一个房间有效
- en: A room has many amenities
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个房间有很多设施
- en: The start date of the reservation must come before the end date
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订的开始日期必须在结束日期之前
- en: A reservation cannot be made for more than fifteen days
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订不能超过十五天
- en: A reservation cannot include more than four rooms
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订不能包括超过四个房间
- en: Designing with phpspec
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用phpspec进行设计
- en: Now, let's begin using phpspec as a design tool to build our entities.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始使用phpspec作为设计工具来构建我们的实体。
- en: 'If the top-level namespace is `MyCompany`, then use phpspec and simply type
    the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果顶级命名空间是`MyCompany`，那么使用phpspec，只需输入以下命令：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On typing the preceding command, `spec/AccommodationSpecRepository.php` gets
    created:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入上述命令后，将创建`spec/AccommodationSpecRepository.php`：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The path to phpspec should be added to either the `.bashrc` or the `.bash_profile`
    file so that phpspec can be run directly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 应将phpspec的路径添加到`.bashrc`或`.bash_profile`文件中，以便可以直接运行phpspec。
- en: 'Then, type the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，输入以下命令：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On typing the preceding command, the developer is shown, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入上述命令后，开发人员将显示如下：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After typing *Y*, the `AccommodationRepository.php` class is created, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输入*Y*后，将创建`AccommodationRepository.php`类，如下所示：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载示例代码文件，用于您购买的所有Packt
    Publishing图书。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: The beauty of phpspec lies in its simplicity and the ability to speed up the
    creation of classes which carry along with the specification.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: phpspec的美妙之处在于其简单性和加速类的创建，这些类与规范一起。
- en: '![Designing with phpspec](graphics/B04559_01_03.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![使用phpspec进行设计](graphics/B04559_01_03.jpg)'
- en: The basic steps involved in describing and creating a class with phpspec
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用phpspec描述和创建类的基本步骤
- en: Specifying with phpspec
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用phpspec进行规范说明
- en: 'At the core of phpspec is the ability to allow us to specify the behavior of
    entities and simultaneously test them. By simply specifying what the business
    rules are as given by the customer, we can easily create tests for each business
    rule. However, the real power of phpspec lies in how it uses an expressive, natural
    language syntax. Let''s take a look at the business rules that were previously
    given to us regarding reservations:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: phpspec的核心在于允许我们指定实体的行为并同时对其进行测试。通过简单地指定客户给出的业务规则，我们可以轻松为每个业务规则创建测试。然而，phpspec的真正力量在于它如何使用表达自然语言的语法。让我们来看看之前给我们关于预订的业务规则：
- en: The start date of the reservation must come before the end date
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订的开始日期必顶在结束日期之前
- en: A reservation cannot be made for more than fifteen days
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订不能超过十五天
- en: A reservation cannot include more than four rooms
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订不能包括超过四个房间
- en: 'Run the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'phpspec will produce the following output for the preceding command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: phpspec将为上述命令产生以下输出：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, run phpspec by using the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令运行phpspec：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'phpspec will respond as usual with the following output:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: phpspec将像往常一样以以下输出做出响应：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, phpspec will create the `ReservationValidator` class, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，phpspec将创建`ReservationValidator`类，如下所示：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s create a `validate()` function that will take the following parameters:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们创建一个`validate()`函数，它将采用以下参数： '
- en: A start date string that determines the start of the reservation
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定预订开始的开始日期字符串
- en: An end date string that determines the end of the reservation
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定预订结束的结束日期字符串
- en: An array of `room` objects to add to the reservation
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要添加到预订的`room`对象数组
- en: 'The following is the code snippet that creates the `validate()` function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建`validate()`函数的代码片段：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will include the `Carbon` class, which will help us to work with the dates.
    For the first business rule, which states that the start date of the reservation
    must come before the end date, we can now create our first specification method
    in the `ReservationValidatorSpec` class, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将包括`Carbon`类，这将帮助我们处理日期。对于第一个业务规则，即预订的开始日期必须在结束日期之前，我们现在可以在`ReservationValidatorSpec`类中创建我们的第一个规范方法，如下所示：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding function, phpspec starts the specification with `it` or `its`.
    phpspec uses the snake case for high legibility, and `start_date_must_be_less_than_the_end_date`
    is an exact copy of the specification. Isn't this just wonderful?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的函数中，phpspec以`it`或`its`开始规范。phpspec使用蛇形命名法以提高可读性，而`start_date_must_be_less_than_the_end_date`则是规范的精确副本。这不是很棒吗？
- en: When `$start_date`, `$end_date`, and the `room` are passed, they automatically
    get mocked. Nothing else is needed. We will create a `$rooms` array that is valid.
    However, we will set the `$start_date` and `$end_date` in such a way that they
    both have the same values to cause the test to fail. The expression syntax is
    shown in the preceding code. The `shouldThrow` comes before `during`, which then
    takes the method name `Validate`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当传入`$start_date`，`$end_date`和`room`时，它们会自动被模拟。不需要其他任何东西。我们将创建一个有效的`$rooms`数组。然而，我们将设置`$start_date`和`$end_date`，使它们具有相同的值，以导致测试失败。表达式语法如前面的代码所示。`shouldThrow`出现在`during`之前，然后采用方法名`Validate`。
- en: 'We have given phpspec what it needs to automatically create the `validate()`
    method for us. We will specify that `$this`, which is the `ReservationValidator`
    class, will throw an `InvalidArgumentException`. Run the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经给了phpspec自动为我们创建`validate()`方法所需的东西。我们将指定`$this`，即`ReservationValidator`类，将抛出`InvalidArgumentException`。运行以下命令：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once again, phpspec asks us the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，phpspec问我们以下问题：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'By simply typing *Y* at the prompt, the method is created inside the `ReservationValidator`
    class. It is that easy. When phpspec is run again, it will fail because the method
    has not thrown an exception yet. So now, the code needs to be written. Inside
    the function, we will create two `Carbon` objects from a string that is formatted
    like "2015-06-02" so that we are able to harness the power of Carbon''s powerful
    date comparisons. In this case, we will use the `$date1->diffInDays($date2);`
    method to test whether the difference between the `$end` and the `$start` is less
    than one. If this is the case, we will throw the `InvalidArgumentException` and
    display a user-friendly message. Now, when we rerun phpspec, the test will pass:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在提示处简单地输入*Y*，方法就会在`ReservationValidator`类中创建。就是这么简单。当再次运行phpspec时，它会因为方法尚未抛出异常而失败。所以现在需要编写代码。在函数内部，我们将从格式为"2015-06-02"的字符串创建两个`Carbon`对象，以便能够利用Carbon强大的日期比较功能。在这种情况下，我们将使用`$date1->diffInDays($date2);`方法来测试`$end`和`$start`之间的差异是否小于一。如果是这样，我们将抛出`InvalidArgumentException`并显示用户友好的消息。现在，当我们重新运行phpspec时，测试将通过：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Red, green, refactor
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 红，绿，重构
- en: The rules of test-driven development call for *red*, *green*, *refactor*, which
    means that once the tests pass (green), we should try to refactor or simplify
    the code inside the method without altering the functionality.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发的规则要求*红*，*绿*，*重构*，这意味着一旦测试通过（绿色），我们应该尝试重构或简化方法内的代码，而不改变功能。
- en: 'Have a look at the `if` test:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下`if`测试：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code isn''t quite readable. We can refactor it in the following
    way:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码不太可读。我们可以以以下方式重构它：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: However, even the preceding code is not very legible, and we are also using
    an integer directly in the code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使前面的代码也不太易读，我们还在代码中直接使用整数。
- en: 'Let''s move `0` into a constant. To improve the readability, we''ll change
    it to the minimum amount of days required for a reservation, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将`0`移入一个常量中。为了提高可读性，我们将其更改为预订所需的最少天数，如下所示：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s extract the comparison into a method, as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将比较提取到一个方法中，如下所示：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can now write the `if` statement like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以这样写`if`语句：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding statement is much more expressive and readable.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的陈述更加表达和可读。
- en: 'Now, for the next rule, which states that a reservation cannot be made for
    more than fifteen days, we''ll need to create the method in the following way:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于下一个规则，即预订不能超过十五天，我们需要以以下方式创建方法：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here, we set the `$end_date` so that it is assigned a date that occurs more
    than a month after the `$start_date` to cause the method to throw an `InvalidArgumentException`.
    Once again, upon execution of the `phpspec` command, the test will fail. Let''s
    modify the existing method to check the date range. We''ll add the following code
    to the method:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们设置`$end_date`，使其被分配一个比`$start_date`晚一个月以上的日期，以导致方法抛出`InvalidArgumentException`。再次执行`phpspec`命令后，测试将失败。让我们修改现有方法来检查日期范围。我们将向方法添加以下代码：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once again, phpspec happily runs all the tests successfully. Refactoring, we
    will once again extract the `if` condition and create the constant, as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，phpspec愉快地成功运行所有测试。重构后，我们将再次提取`if`条件并创建常量，如下所示：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tidying things up
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整理一下
- en: We could leave things like this, but let's clean it up since we have tests.
    Since the `endDateIsGreaterThanStartDate($end, $start)` and `daysAreGreaterThanMaximumAllowed($end,
    $start)` functions both check for the minimum and maximum allowed stay respectively,
    we can call them from another method.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把事情留在这里，但是让我们清理一下，因为我们有测试。由于`endDateIsGreaterThanStartDate($end, $start)`和`daysAreGreaterThanMaximumAllowed($end,
    $start)`函数分别检查最小和最大允许的停留时间，我们可以从另一个方法中调用它们。
- en: 'We will refactor `endDateIsGreaterThanStartDate()` into `daysAreLessThanMinimumAllowed($end,
    $start)` and then create another method that checks both the minimum and maximum
    stay length, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`endDateIsGreaterThanStartDate()`重构为`daysAreLessThanMinimumAllowed($end,
    $start)`，然后创建另一个方法来检查最小和最大停留长度，如下所示：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This leaves us with simply one function, instead of two, in the `createNew`
    function, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们只剩下一个函数，而不是两个，在`createNew`函数中，如下所示：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For the third rule, which states that a reservation cannot contain more than
    four rooms, the process is the same. Create the specification, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第三条规则，即预订不能包含超过四个房间，流程是一样的。创建规范，如下：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The change here will be in the parameters. This time, we will mock five rooms
    so that the test will fail, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的改变将在参数中。这次，我们将模拟五个房间，以便测试失败，如下所示：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Five room objects will be loaded into the `$rooms` array, and the test will
    fail as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 五个房间对象将被加载到`$rooms`数组中，测试将会失败，如下所示：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After adding code to check the size of the array, the final class will look
    like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加代码以检查数组大小后，最终类将如下所示：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The method is very clean. There are only two `if` statements—the first to verify
    that the date range is valid, and other one to verify that the number of rooms
    is within the valid range. The constants are easily accessible and can be changed
    as the business requirements change. Clearly, the addition of phpspec into the
    development workflow combines what earlier required two steps—writing the assertions
    with PHPUnit and then writing the code. Now, we will leave phpspec and move on
    to Artisan, which developers are familiar with as it was a feature of the previous
    versions of Laravel.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法非常干净。只有两个`if`语句——第一个用于验证日期范围是否有效，另一个用于验证房间数量是否在有效范围内。常量很容易访问，并且可以根据业务需求进行更改。显然，将phpspec添加到开发工作流程中，将之前需要两个步骤——使用PHPUnit编写断言，然后编写代码——合并在一起。现在，我们将离开phpspec，转而使用Artisan，开发人员对此很熟悉，因为它是Laravel先前版本的一个特性。
- en: Controllers
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: 'Next, we''ll create some sample controllers. At the time of writing this book,
    we need to use Artisan and phpspec together. Let''s create a controller for the
    `room` entity, as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一些示例控制器。在撰写本书时，我们需要同时使用Artisan和phpspec。让我们为`room`实体创建一个控制器，如下所示：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this will be created in `app/Http/Controllers` directory, which is
    a new location for Laravel 5\. The new HTTP directory houses the controllers,
    middleware, and requests directories, grouping together the files related to the
    HTTP request or the actual request. Additionally, this directory configuration
    is optional, and routes can call any autoloaded location, usually through a namespaced
    PSR-4 structure.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这将在`app/Http/Controllers`目录中创建，这是Laravel 5的新位置。新的HTTP目录包含控制器、中间件和请求目录，将与HTTP请求或实际请求相关的文件分组在一起。此外，此目录配置是可选的，路由可以调用任何自动加载的位置，通常通过命名空间PSR-4结构。
- en: The command bus
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令总线
- en: Laravel 5 has adopted the command bus pattern, which creates commands that get
    created in the `app/Commands` directory. Whereas commands in Laravel 4 were thought
    of as command-line tools, in Laravel 5, the command is thought of as a class whose
    methods can be used from within the application, allowing for an excellent reuse
    of code. The concept of a command here is a task that needs to be done, or in
    our example, a room to be reserved for a user. The paradigm of a bus then transports
    the command using the new `DispatchesCommands` trait, which is used in the base
    controller class. Every controller created by Artisan extends this class to a
    handler method, where the actual work is performed.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5采用了命令总线模式，创建的命令存储在`app/Commands`目录中。而在Laravel 4中，命令被认为是命令行工具，而在Laravel
    5中，命令被认为是一个类，其方法可以在应用程序内部使用，从而实现代码的优秀重用。这里的命令概念是需要完成的任务，或者在我们的例子中，是为用户预订的房间。总线的范式然后使用新的`DispatchesCommands`特性传输命令，该特性用于基本控制器类中。Artisan创建的每个控制器都扩展了这个类到一个处理程序方法，实际工作在其中执行。
- en: 'To use Laravel''s command bus design pattern, we''ll now use Artisan to create
    a few commands. We''ll go into detail about commands in a future chapter, but
    to begin, we will type the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Laravel的命令总线设计模式，我们现在将使用Artisan创建一些命令。我们将在未来的章节中详细介绍命令，但首先，我们将输入以下命令：
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Typing this creates a command to reserve a room which could be called from anywhere
    in the code, isolating the business logic from the controllers and models, and
    also allowing the command to be executed in an asynchronous mode.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 输入此命令将创建一个用于预订房间的命令，可以从代码的任何位置调用，将业务逻辑与控制器和模型隔离，并允许以异步模式执行命令。
- en: '[PRE32]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After filling in the details of the command, the class will now look like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完命令的细节后，该类现在看起来是这样的：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `--handler` parameter creates an additional class, `ReserveRoomCommandHandler`,
    containing a constructor and a handle method, which injects the `ReserveRoomCommand`.
    This file will be present in the `app/Handlers/Commands` directory. If the `--handler`
    flag is not used, then the `ReserveRoomCommand` class will contain its own `handler`
    method, and the separate handler class will not get created:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`--handler`参数创建了一个额外的类`ReserveRoomCommandHandler`，其中包含一个构造函数和一个handle方法，该方法注入了`ReserveRoomCommand`。此文件将存在于`app/Handlers/Commands`目录中。如果未使用`--handler`标志，则`ReserveRoomCommand`类将包含自己的`handler`方法，并且不会创建单独的处理程序类：'
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We will fill in the handle method with the validation of the reservation, as
    follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将填写处理预订验证的handle方法，如下所示：
- en: '[PRE35]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: phpspec adds a mature, robust, test-first, test-driven, and a specification-by-example
    approach to creating the business logic aspect of the software. This, coupled
    with the ease of creation of models, controllers, commands, events, and event
    handlers, sets Laravel at the front of the PHP framework race. Also, it has adopted
    many best practices that are used by the best programmers in the industry.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: phpspec为软件的业务逻辑方面添加了成熟、健壮、测试驱动和示例驱动的规范方法。再加上模型、控制器、命令、事件和事件处理程序的轻松创建，使得Laravel成为PHP框架竞争中的佼佼者。此外，它还采用了许多行业最佳程序员使用的最佳实践。
- en: In this chapter, we learned how to use phpspec to easily design classes and
    their accompanying tests from the command line. This workflow, accompanied by
    Artisan, makes the process of setting up the basic structure of a Laravel 5 application
    very easy.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用phpspec轻松地从命令行设计类及其相应的测试。这种工作流程，加上Artisan，使得设置Laravel 5应用程序的基本结构变得非常容易。
- en: In the next chapter, we'll take a look at database migrations, the mechanics
    behind them, and ways to create a seed for testing.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍数据库迁移、其背后的机制以及创建用于测试的种子的方法。
