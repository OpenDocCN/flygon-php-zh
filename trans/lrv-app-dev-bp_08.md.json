["```php\n    require __DIR__.'/../bootstrap/autoload.php';\n    ```", "```php\n    require __DIR__.'/bootstrap/autoload.php';\n    ```", "```php\n    $app = require_once __DIR__.'/../bootstrap/start.php';\n    ```", "```php\n    $app = require_once __DIR__.'/bootstrap/start.php';\n    ```", "```php\n    'public' => __DIR__.'/../public',\n    ```", "```php\n    'public' => __DIR__.'/..',\n    ```", "```php\n    \"cartalyst/sentry\": \"2.0.*\"\n    ```", "```php\n    php composer.phar update\n    ```", "```php\n    'Cartalyst\\Sentry\\SentryServiceProvider',\n    ```", "```php\n    'Sentry' => 'Cartalyst\\Sentry\\Facades\\Laravel\\Sentry',\n    ```", "```php\n    php artisan migrate --package=cartalyst/sentry\n    ```", "```php\n    php artisan config:publish cartalyst/sentry\n    ```", "```php\n    <?php\n    class User extends Cartalyst\\Sentry\\Users\\Eloquent\\User {\n    }\n    ```", "```php\n    /**\n    * This method is to create an admin once.\n    * Just run it once, and then remove or comment it out.\n    **/\n    Route::get('create_user',function(){\n\n    $user = Sentry::getUserProvider()->create(array(\n      'email' => 'admin@admin.com',\n      //password will be hashed upon creation by Sentry 2\n      'password' => 'password',\n      'first_name' => 'John',\n      'last_name' => 'Doe',\n      'activated' => 1,\n      'permissions' => array (\n        'admin' => 1\n      )\n    ));\n    return 'admin created with id of '.$user->id;\n    });\n    ```", "```php\n//Auth Resource\nRoute::get('signup',array('as'=>'signup_form', 'before'=>\n'is_guest', 'uses'=>'AuthController@getSignup'));\nRoute::post('signup',array('as'=>'signup_form_post', 'before' =>\n'csrf|is_guest', 'uses' => 'AuthController@postSignup'));\nRoute::post('login',array('as'=>'login_post', 'before' =>\n'csrf| is_guest', 'uses' => 'AuthController@postLogin'));\nRoute::get('logout',array('as'=>'logout', 'before'=>'\nuser', 'uses' => 'AuthController@getLogout'));\n//---- Q & A Resources\nRoute::get('/',array('as'=>'index','uses'=>\n'MainController@getIndex'));\n```", "```php\n/*\n |----------------------------------------------------------- \n | Q&A Custom Filters\n |-----------------------------------------------------------\n*/\n\nRoute::filter('user',function($route,$request){\n  if(Sentry::check()) {\n    //is logged in\n  } else {\n    return Redirect::route('index')\n      ->with('error','You need to log in first');\n  }\n});\n\nRoute::filter('is_guest',function($route,$request){\n  if(!Sentry::check()) {\n    //is a guest\n  } else {\n    return Redirect::route('index')\n      ->with('error','You are already logged in');\n  }\n});\n\nRoute::filter('access_check',function($route,$request,$right){\n  if(Sentry::check()) {\n    if(Sentry::getUser()->hasAccess($right)) {\n      //logged in and can access\n    } else {\n      return Redirect::route('index')\n        ->with('error','You don\\'t have enough priviliges to access that page');\n    }\n  } else {\n    return Redirect::route('index')\n      ->with('error','You need to log in first');\n  }\n});\n```", "```php\n    <!DOCTYPE html>\n    <!--[if lt IE 7]> <html class=\"no-js lt-ie9 lt-ie8 lt-ie7\">\n    <![endif]-->\n    <!--[if IE 7]> <html class=\"no-js lt-ie9 lt-ie8\">\n    <![endif]-->\n    <!--[if IE 8]> <html class=\"no-js lt-ie9\">\n    <![endif]-->\n    <!--[if gt IE 8]><!--> <html class=\"no-js\">\n    <!--<![endif]-->\n\n    <head>\n      <meta charset=\"utf-8\" />\n      <title>{{isset($title)?$title.' | ':''}} LARAVEL Q & A\n      </title>\n      {{ HTML::style('assets/css/style.css') }}\n    </head>\n    <body>\n\n      {{-- We include the top menu view here --}}\n      @include('template.topmenu')\n\n      <div class=\"centerfix\" id=\"header\">\n      <div class=\"centercontent\">\n        <a href=\"{{URL::route('index')}}\">\n          {{HTML::image('assets/img/header/logo.png')}}\n        </a>\n      </div>\n      </div>\n      <div class=\"centerfix\" id=\"main\" role=\"main\">\n      <div class=\"centercontent clearfix\">\n        <div id=\"contentblock\">\n\n        {{-- Showing the Error and Success Messages--}}\n        @if(Session::has('error'))\n        <div class=\"warningx wredy\">\n          {{Session::get('error')}}\n        </div>\n        @endif\n\n        @if(Session::has('success'))\n        <div class=\"warningx wgreeny\">\n          {{Session::get('success')}}\n        </div>\n        @endif\n\n        {{-- Content section of the template --}}\n        @yield('content')\n        </div>\n      </div>\n      </div>\n      {{-- JavaScript Files --}}\n      {{ HTML::script('assets/js/libs.js') }}\n      {{ HTML::script('assets/js/plugins.js') }}\n      {{ HTML::script('assets/js/script.js') }}\n\n      {{-- Each page's custom assets (if available) will be yielded here --}}\n      @yield('footer_assets')\n\n    </body>\n    </html>\n    ```", "```php\n    {{-- Top error (about login etc.) --}}\n    @if(Session::has('topError'))\n      <div class=\"centerfix\" id=\"infobar\">\n        <div class=\"centercontent\">{{ Session::get('topError') }}\n        </div>\n      </div>\n    @endif\n\n    {{-- Check if a user is logged in, login and logout has different templates --}}\n    @if(!Sentry::check())\n    <div class=\"centerfix\" id=\"login\">\n      <div class=\"centercontent\">\n        {{Form::open(array('route'=>'login_post'))}}\n        {{Form::email('email', Input::old('email'), array('placeholder'=>'E-mail Address'))}}\n        {{Form::password('password', array('placeholder' => 'Password'))}}\n        {{Form::submit('Log in!')}}\n        {{Form::close()}}\n\n        {{HTML::link('signup_form','Register',array(),array('class'=>'wybutton'))}}\n      </div>\n    </div>\n    @else\n      <div class=\"centerfix\" id=\"login\">\n        <div class=\"centercontent\">\n          <div id=\"userblock\">Hello again, {{HTML::link('#',Sentry::getUser()->first_name.' '.Sentry::getUser()->last_name)}}</div>\n          {{HTML::linkRoute('logout','Logout',array(),array('class'=>'wybutton'))}}\n        </div>\n      </div>\n    @endif\n    ```", "```php\n    //Auth Resource\n    Route::get('signup',array('as'=>'signup_form', 'before' => 'is_guest', 'uses' => 'AuthController@getSignup'));\n    Route::post('signup',array('as' => 'signup_form_post', 'before' => 'csrf|is_guest', 'uses' => 'AuthController@postSignup'));\n    ```", "```php\n    **php artisan controller:make AuthController**\n\n    ```", "```php\n    /**\n      * Signup GET method\n    **/\n    public function getSignup() {\n      return View::make('qa.signup')\n        ->with('title','Sign Up!');\n    }\n    ```", "```php\n    @extends('template_masterpage')\n\n    @section('content')\n      <h1 id=\"replyh\">Sign Up</h1>\n      <p class=\"bluey\">Please fill all the credentials correctly to register to our site</p>\n      {{Form::open(array('route'=>'signup_form_post'))}}\n        <p class=\"minihead\">First Name:</p>\n        {{Form::text('first_name',Input::get('first_name'),array('class'=>'fullinput'))}}\n        <p class=\"minihead\">Last Name:</p>\n        {{Form::text('last_name',Input::get('last_name'),array('class'=>'fullinput'))}}<p class=\"minihead\">E-mail address:</p>\n        {{Form::email('email',Input::get('email'),array('class'=>'fullinput'))}}\n        <p class=\"minihead\">Password:</p>\n        {{Form::password('password','',array('class'=>'fullinput'))}}\n        <p class=\"minihead\">Re-password:</p>\n        {{Form::password('re_password','',array('class'=>'fullinput'))}}\n        <p class=\"minihead\">Your personal info will not be shared with any 3rd party companies.</p>\n        {{Form::submit('Register now!')}}\n      {{Form::close()}}\n    @stop\n    ```", "```php\npublic static $signup_rules = array(\n  'first_name' => 'required|min:2',\n  'last_name' => 'required|min:2',\n  'email' => 'required|email|unique:users,email',\n  'password' => 'required|min:6',\n  're_password' => 'required|same:password'\n);\n```", "```php\n    **php artisan controller:make MainController**\n\n    ```", "```php\n    public function getIndex() {\n      return View::make('qa.index');\n    }\n    ```", "```php\n    @extends('template_masterpage')\n\n    @section('content')\n    Heya!\n    @stop\n    ```", "```php\n    /**\n      * Signup Post Method\n    **/\n    public function postSignup() {\n\n      //Let's validate the form first\n      $validation = Validator::make(Input::all(),User::$signup_rules);\n\n      //let's check if the validation passed\n      if($validation->passes()) {\n\n        //Now let's create the user with Sentry 2's create method\n        $user = Sentry::getUserProvider()->create(array(\n          'email' => Input::get('email'),\n          'password' => Input::get('password'),\n          'first_name' => Input::get('first_name'),\n          'last_name' => Input::get('last_name'),\n          'activated' => 1\n        ));\n\n        //Since we don't use an email validation in this example, let's log the user in directly\n        $login = Sentry::authenticate(array('email'=>Input::get('email'),'password'=>Input::get('password')));\n\n        return Redirect::route('index')\n          ->with('success','You\\'ve signed up and logged in successfully!');\n        //if the validation failed, let's return the user \n        //to the signup form with the first error message\n      } else {\n        return Redirect::route('signup_form')\n        ->withInput(Input::except('password','re_password'))\n          ->with('error',$validation->errors()->first());\n      }\n    }\n    ```", "```php\n    public static $login_rules = array(\n    \t'email'\t\t=> 'required|email|exists:users,email',\n    \t'password'\t=> 'required|min:6'\n    );\n    ```", "```php\n    /**\n     * Login Post Method Resource\n    **/\n    public function postLogin() {\n      //let's first validate the form:\n      $validation = Validator::make(Input::all(),User::$login_rules);\n\n      //if the validation fails, return to the index page with first error message\n      if($validation->fails()) {\n        return Redirect::route('index')\n          ->withInput(Input::except('password'))\n          ->with('topError',$validation->errors()->first());\n      } else {\n\n        //if everything looks okay, we try to authenticate the user\n        try {\n\n          // Set login credentials\n          $credentials = array('email' => Input::get('email'),'password' => Input::get('password'),);\n\n          // Try to authenticate the user, remember me is set to false\n          $user = Sentry::authenticate($credentials, false);\n          //if everything went okay, we redirect to index route with success message\n          return Redirect::route('index')\n            ->with('success','You\\'ve successfully logged in!');\n        } catch (Cartalyst\\Sentry\\Users\\LoginRequiredException $e) {\n          return Redirect::route('index')\n            -> withInput(Input::except('password'))\n            ->with('topError','Login field is required.');\n        } catch (Cartalyst\\Sentry\\Users\\PasswordRequiredException $e) {\n          return Redirect::route('index')\n            -> withInput(Input::except('password'))\n            ->with('topError','Password field is required.');\n        } catch (Cartalyst\\Sentry\\Users\\WrongPasswordException $e) {\n          return Redirect::route('index')\n            -> withInput(Input::except('password'))\n            ->with('topError','Wrong password, try again.');\n        } catch (Cartalyst\\Sentry\\Users\\UserNotFoundException $e) {\n          return Redirect::route('index')\n            -> withInput(Input::except('password'))\n            ->with('topError','User was not found.');\n        } catch (Cartalyst\\Sentry\\Users\\UserNotActivatedException $e) {\n          return Redirect::route('index')\n            -> withInput(Input::except('password'))\n            ->with('topError','User is not activated.');\n        }\n\n        // The following is only required if throttle is enabled\n        catch (Cartalyst\\Sentry\\Throttling\\UserSuspendedException $e) {\n        return Redirect::route('index')\n          -> withInput(Input::except('password'))\n          ->with('topError','User is suspended.');\n        } catch (Cartalyst\\Sentry\\Throttling\\UserBannedException $e) {\n          return Redirect::route('index')\n            -> withInput(Input::except('password'))\n            ->with('topError','User is banned.');\n        }\n      }\n    }\n    ```", "```php\n    /**\n      * Logout method \n    **/\n    public function getLogout() {\n      //we simply log out the user\n      Sentry::logout();\n\n      //then, we return to the index route with a success message\n      return Redirect::route('index')\n        ->with('success','You\\'ve successfully signed out');\n    }\n    ```", "```php\n**php artisan migrate:make create_questions_table --table= questions --create**\n\n```", "```php\nSchema::create('questions', function(Blueprint $table)\n{\n  //Question's ID\n  $table->increments('id');\n  //title of the question\n  $table->string('title',400)->default('');\n  //asker's id\n  $table->integer('userID')->unsigned()->default(0);\n  //question's details\n  $table->text('question')->default('');\n  //how many times it's been viewed:\n  $table->integer('viewed')->unsigned()->default(0);\n  //total number of votes:\n  $table->integer('votes')->default(0);\n  //Foreign key to match userID (asker's id) to users\n  $table->foreign('userID')->references('id')->on('users')->onDelete('cascade');\n  //we will get asking time from the created_at column\n  $table->timestamps();\n});\n```", "```php\n    **php artisan migrate**\n\n    ```", "```php\n    <?php\n\n    class Question extends Eloquent {\n\n      protected $fillable = array('title', 'userID', 'question', 'viewed', 'answered', 'votes');\n\n    }\n    ```", "```php\n    public function questions() {\n      return $this->hasMany('Question','userID');\n    }\n    ```", "```php\n    public function users() {\n      return $this->belongsTo('User','userID');\n    }\n    ```", "```php\n    **php artisan migrate:make create_tags_table --table= tags --create**\n\n    ```", "```php\n    Schema::create('tags', function(Blueprint $table)\n    {\n      //id is needed to match pivot\n      $table->increments('id');\n\n      //Tag's name\n      $table->string('tag')->default('');\n      //Tag's URL-friendly name\n      $table->string('tagFriendly')->unique();\n\n      //I like to keep timestamps\n      $table->timestamps();\n    });\n    ```", "```php\n    **php artisan migrate**\n\n    ```", "```php\n    <?php\n\n    class Tag extends Eloquent {\n\n      protected $fillable = array('tag', 'tagFriendly');\n\n    }\n    ```", "```php\n    **php artisan migrate:make create_question_tags_table --table=question_tags --create**\n\n    ```", "```php\n    Schema::create('question_tags', function(Blueprint $table)\n    {\n      $table->increments('id');\n\n      $table->integer('question_id')->unsigned()->default(0);\n      $table->integer('tag_id')->unsigned()->default(0);\n\n      $table->foreign('question_id')->references('id')->on('questions')->onDelete('cascade');\n      $table->foreign('tag_id')->references('id')->on('tags')->onDelete('cascade');\n\n      $table->timestamps();\n    });\n    ```", "```php\n    **php artisan migrate**\n\n    ```", "```php\n    public function tags() {\n      return $this->belongsToMany('Tag','question_tags')->withTimestamps();\n    }\n    ```", "```php\n    public function questions() {\n      return $this->belongsToMany('Question','question_tags')->withTimestamps();\n    }\n    ```", "```php\n    $this->belongsToMany('Question ', 'question_tags')->withPivot('column1', 'column2')->withTimestamps();\n    ```", "```php\n    Route::get('ask',array('as'=>'ask', 'before'=>'user', \n       'uses' => 'QuestionsController@getNew'));\n\n    Route::post('ask',array('as'=>'ask_post', \n      'before'=>'user|csrf', 'uses' => \n      'QuestionsController@postNew'));\n    ```", "```php\n    {{HTML::linkRoute('logout','Logout',array(), array('class'=>'wybutton'))}}\n    ```", "```php\n    {{HTML::linkRoute('ask','Ask a Question!', array(), array('class'=>'wybutton'))}}\n    ```", "```php\n    **php artisan controller:make QuestionsController**\n\n    ```", "```php\n    /**\n      * A new question asking form\n    **/\n    public function getNew() {\n      return View::make('qa.ask')\n        ->with('title','New Question');\n    }\n    ```", "```php\n    @extends('template_masterpage')\n\n    @section('content')\n\n      <h1 id=\"replyh\">Ask A Question</h1>\n      <p class=\"bluey\">Note: If you think your question's been answered correctly, please don't forget to click \"\u2713\" icon to mark the answer as \"correct\".</p>\n      {{Form::open(array('route'=>'ask_post'))}}\n\n      <p class=\"minihead\">Question's title:</p>\n      {{Form::text('title',Input::old('title'),array('class'=>'fullinput'))}}\n\n      <p class=\"minihead\">Explain your question:</p>\n      {{Form::textarea('question',Input::old('question'),array('class'=>'fullinput'))}}\n\n      <p class=\"minihead\">Tags: Use commas to split tags (tag1, tag2 etc.). To join multiple words in a tag, use - between the words (tag-name, tag-name-2):</p>\n      {{Form::text('tags',Input::old('tags'),array('class'=>'fullinput'))}}\n      {{Form::submit('Ask this Question')}}\n      {{Form::close()}}\n\n    @stop\n    @section('footer_assets')\n\n      {{-- A simple jQuery code to lowercase all tags before submission --}}\n      <script type=\"text/javascript\">\n        $('input[name=\"tags\"]').keyup(function(){\n          $(this).val($(this).val().toLowerCase());\n        });\n      </script>\n\n    @stop\n    ```", "```php\n    public static $add_rules = array('title' => 'required|min:2','question' => 'required|min:10');\n    ```", "```php\n    Route::get('question/{id}/{title}',array('as'=> 'question_details', 'uses' => 'QuestionsController@getDetails' ))-> where(array('id'=>'[0-9]+' , 'title' => '[0-9a-zA-Z\\-\\_]+'));\n    ```", "```php\n    /**\n     * Post method to process the form\n    **/\n    public function postNew() {\n\n      //first, let's validate the form\n      $validation = Validator::make(Input::all(), Question::$add_rules);\n\n      if($validation->passes()) {\n        //First, let's create the question\n        $create = Question::create(array('userID' => Sentry::getUser()->id,'title' => Input::get('title'),'question' => Input::get('question')\n        ));\n\n        //We get the insert id of the question\n        $insert_id = $create->id;\n\n        //Now, we need to re-find the question to \"attach\" the tag to the question\n        $question = Question::find($insert_id);\n\n        //Now, we should check if tags column is filled, and split the string and add a new tag and a relation\n        if(Str::length(Input::get('tags'))) {\n          //let's explode all tags from the comma\n          $tags_array = explode(',', Input::get('tags'));\n          //if there are any tags, we will check if they are new, if so, we will add them to database\n          //After checking the tags, we will have to \"attach\" tag(s) to the new question \n          if(count($tags_array)) {\n            foreach ($tags_array as $tag) {\n              //first, let's trim and get rid of the extra space bars between commas \n              //(tag1, tag2, vs tag1,tag2) \n              $tag = trim($tag);\n\n              //We should double check its length, because the user may have just typed \"tag1,,tag2\" (two or more commas) accidentally\n              //We check the slugged version of the tag, because tag string may only be meaningless character(s), like \"tag1,+++//,tag2\"\n              if(Str::length(Str::slug($tag))) {\n                //the URL-Friendly version of the tag\n                $tag_friendly = Str::slug($tag);\n\n                //Now let's check if there is a tag with the url friendly version of the provided tag already in our database:\n                $tag_check = Tag::where('tagFriendly',$tag_friendly);\n\n                //if the tag is a new tag, then we will create a new one\n                if($tag_check->count() == 0) {\n                  $tag_info = Tag::create(array('tag' => $tag,'tagFriendly' => $tag_friendly));\n\n                  //If the tag is not new, this means There was a tag previously added on the same name to another question previously\n                  //We still need to get that tag's info from our database \n                } else {\n                  $tag_info = $tag_check->first();\n                }\n              }\n\n              //Now the attaching the current tag to the question\n              $question->tags()->attach($tag_info->id);\n            }\n          }\n        }\n\n        //lastly, we should return the user to the asking page with a permalink of the question\n        return Redirect::route('ask')\n          ->with('success','Your question has been created successfully! '.HTML::linkRoute('question_details','Click here to see your question',array('id'=>$insert_id,'title'=>Str::slug($question->title))));\n\n      } else {\n        return Redirect::route('ask')\n          ->withInput()\n          ->with('error',$validation->errors()->first());\n      }\n    }\n    ```", "```php\npublic function getIndex() {\n  return View::make('qa.index')\n    ->with('title','Hot Questions!')\n    ->with('questions',Question::with('users','tags')->orderBy('id','desc')->paginate(2));\n}\n```", "```php\n//Upvoting and Downvoting\nRoute::get('question/vote/{direction}/{id}',array('as'=> 'vote', 'before'=>'user', 'uses'=> 'QuestionsController@getvote'))->where (array('direction'=>'(up|down)', 'id'=>'[0-9]+'));\n\n//Question tags page\nRoute::get('question/tagged/{tag}',array('as'=>'tagged','uses'=>'QuestionsController@getTaggedWith'))->where('tag','[0-9a-zA-Z\\-\\_]+');\n```", "```php\n@extends('template_masterpage')\n\n@section('content')\n  <h1>{{$title}}</h1>\n\n  @if(count($questions))\n\n    @foreach($questions as $question)\n\n      <?php\n        //Question's asker and tags info\n        $asker = $question->users;\n        $tags = $question->tags;\t \n      ?>\n\n      <div class=\"qwrap questions\">\n        {{-- Guests cannot see the vote arrows --}}\n        @if(Sentry::check())\n          <div class=\"arrowbox\">\n            {{HTML::linkRoute('vote','',array('up', $question->id),array('class'=>'like', 'title'=>'Upvote'))}}\n            {{HTML::linkRoute('vote','',array('down',$question->id),array('class'=>'dislike','title'=>'Downvote'))}}\n          </div>\n        @endif\n\n        {{-- class will differ on the situation --}}\n        @if($question->votes > 0)\n          <div class=\"cntbox cntgreen\">\n        @elseif($question->votes == 0)\n          <div class=\"cntbox\">\n        @else\n          <div class=\"cntbox cntred\">\n        @endif\n        <div class=\"cntcount\">{{$question->votes}}</div>\n        <div class=\"cnttext\">vote</div>\n        </div>\n\n        {{--Answer section will be filled later in this chapter--}}\n        <div class=\"cntbox\">\n          <div class=\"cntcount\">0</div>\n          <div class=\"cnttext\">answer</div>\n        </div>\n\n        <div class=\"qtext\">\n          <div class=\"qhead\">\n            {{HTML::linkRoute('question_details',$question->title,array($question->id,Str::slug($question->title)))}}\n          </div>\n          <div class=\"qinfo\"\">Asked by <a href=\"#\">{{$asker->first_name.' '.$asker->last_name}}</a> around {{date('m/d/Y H:i:s',strtotime($question->created_at))}}</div>\n          @if($tags!=null)\n            <ul class=\"qtagul\">\n              @foreach($tags as $tag)\n                <li>{{HTML::linkRoute('tagged',$tag->tag,$tag->tagFriendly)}}</li>\n              @endforeach\n            </ul>\n          @endif\n        </div>\n      </div>\n    @endforeach\n\n    {{-- and lastly, the pagination --}}\n    {{$questions->links()}}\n\n  @else\n    No questions found. {{HTML::linkRoute('ask','Ask a question?')}}\n  @endif\n\n@stop\n```", "```php\n@yield('footer_assets')\n```", "```php\n{{-- if the user is logged in and on index or question details page--}}\n@if(Sentry::check() && (Route::currentRouteName() == 'index' || Route::currentRouteName() == 'question_details'))\n  <script type=\"text/javascript\">\n    $('.questions .arrowbox .like, .questions .arrowbox .dislike').click(function(e){\n      e.preventDefault();\n      var $this = $(this);\n      $.get($(this).attr('href'),function($data){\n        $this.parent('.arrowbox').next('.cntbox').find('.cntcount').text($data);\n      }).fail(function(){\n        alert('An error has been occurred, please try again later');\n      });\n    });\n  </script>\n@endif\n```", "```php\n/**\n  * Vote AJAX Request\n**/\npublic function getVote($direction,$id) {\n\n  //request has to be AJAX Request\n  if(Request::ajax()) {\n\n    $question = Question::find($id);\n\n    //if the question id is valid\n    if($question) {\n\n      //new vote count\n      if($direction == 'up') {\n        $newVote = $question->votes+1;\n      } else {\n        $newVote = $question->votes-1;\n      }\n\n      //now the update\n      $update = $question->update(array(\n        'votes' => $newVote\n      ));\n\n      //we return the new number\n      return $newVote;\n    } else {\n      //question not found\n      Response::make(\"FAIL\", 400);\n    }\n  } else {\n    return Redirect::route('index');\n  }\n}\n```", "```php\n    /**\n     * Details page\n    **/\n    public function getDetails($id,$title) {\n      //First, let's try to find the question:\n      $question = Question::with('users','tags')->find($id);\n\n      if($question) {\n\n        //We should increase the \"viewed\" amount\n        $question->update(array(\n          'viewed' => $question->viewed+1\n        ));\n\n        return View::make('qa.details')\n          ->with('title',$question->title)\n          ->with('question',$question);\n\n      } else {\n        return Redirect::route('index')\n        ->with('error','Question not found');\n      }\n    }\n    ```", "```php\n    //Reply Question:\n    Route::post('question/{id}/{title}',array('as'=>'question_reply','before'=>'csrf|user', 'uses'=>'AnswersController@postReply'))->where(array('id'=>'[0-9]+','title'=>'[0-9a-zA-Z\\-\\_]+'));\n\n    //Admin Question Deletion\n    Route::get('question/delete/{id}',array('as'=>'delete_question','before'=>'access_check:admin','uses'=>'QuestionsController@getDelete'))->where('id','[0-9]+');\n    ```", "```php\n    @extends('template_masterpage')\n\n    @section('content')\n\n    <h1 id=\"replyh\">{{$question->title}}</h1>\n    <div class=\"qwrap questions\">\n      <div id=\"rcount\">Viewed {{$question->viewed}} time{{$question->viewed>0?'s':''}}.</div>\n\n      @if(Sentry::check())\n        <div class=\"arrowbox\">\n          {{HTML::linkRoute('vote',''array('up',$question->id),array('class'=>'like', 'title'=>'Upvote'))}}\n          {{HTML::linkRoute('vote','',array('down',$question->id),array('class'=>'dislike','title'=>'Downvote'))}}\n        </div>\n      @endif\n\n      {{-- class will differ on the situation --}}\n      @if($question->votes > 0)\n        <div class=\"cntbox cntgreen\">\n      @elseif($question->votes == 0)\n        <div class=\"cntbox\">\n      @else\n        <div class=\"cntbox cntred\">\n      @endif\n          <div class=\"cntcount\">{{$question->votes}}</div>\n          <div class=\"cnttext\">vote</div>\n        </div>\n    ```", "```php\n      <div class=\"rblock\">\n        <div class=\"rbox\">\n          <p>{{nl2br($question->question)}}</p>\n        </div>\n        <div class=\"qinfo\">Asked by <a href=\"#\">{{$question->users->first_name.' '.$question->users->last_name}}</a> around {{date('m/d/Y H:i:s',strtotime($question->created_at))}}</div>\n\n        {{--if the question has tags, show them --}}\n        @if($question->tags!=null)\n          <ul class=\"qtagul\">\n            @foreach($question->tags as $tag)\n              <li>{{HTML::linkRoute('tagged',$tag->tag,$tag->tagFriendly)}}</li>\n            @endforeach\n          </ul>\n        @endif\n    ```", "```php\n        {{-- if the user/admin is logged in, we will have a buttons section --}}\n        @if(Sentry::check())\n          <div class=\"qwrap\">\n            <ul class=\"fastbar\">\n              @if(Sentry::getUser()->hasAccess('admin'))\n                <li class=\"close\">{{HTML::linkRoute('delete_question','delete',$question->id)}}</li>\n              @endif\n              <li class=\"answer\"><a href=\"#\">answer</a></li>\n            </ul>\n          </div>\n        @endif\n      </div>\n      <div id=\"rreplycount\">{{count($question->answers)}} answers</div>\n    ```", "```php\n      {{-- if it's a user, we will also have the answer block inside our view--}}\n      @if(Sentry::check())\n        <div class=\"rrepol\" id=\"replyarea\" style=\"margin-bottom:10px\">\n          {{Form::open(array('route'=>array('question_reply',$question->id,Str::slug($question->title))))}}\n          <p class=\"minihead\">Provide your Answer:</p>\n          {{Form::textarea('answer',Input::old('answer'),array('class'=>'fullinput'))}}\n          {{Form::submit('Answer the Question!')}}\n          {{Form::close()}}\n        </div>\n      @endif\n\n    </div>\n    @stop\n    ```", "```php\n    @section('footer_assets')\n\n      {{--If it's a user, hide the answer area and make a simple show/hide button --}}\n      @if(Sentry::check())\n        <script type=\"text/javascript\">\n\n        var $replyarea = $('div#replyarea');\n        $replyarea.hide();\n\n        $('li.answer a').click(function(e){\n          e.preventDefault();\n\n          if($replyarea.is(':hidden')) {\n            $replyarea.fadeIn('fast');\n          } else {\n            $replyarea.fadeOut('fast');\n          }\n        });\n        </script>\n      @endif\n\n      {{-- If the admin is logged in, make a confirmation to delete attempt --}}\n      @if(Sentry::check())\n        @if(Sentry::getUser()->hasAccess('admin'))\n          <script type=\"text/javascript\">\n          $('li.close a').click(function(){\n            return confirm('Are you sure you want to delete this? There is no turning back!');\n          });\n          </script>\n        @endif\n      @endif\n    @stop\n    ```", "```php\n/**\n * Deletes the question\n**/\n\npublic function getDelete($id) {\n  //First, let's try to find the question:\n  $question = Question::find($id);\n\n  if($question) {\n    //We delete the question directly\n    Question::delete();\n    //We won't have to think about the tags and the answers,\n    //because they are set as foreign key and we defined them cascading on deletion, \n    //they will be automatically deleted\n\n    //Let's return to the index page with a success message\n    return Redirect::route('index')\n      ->with('success','Question deleted successfully!');\n  } else {\n    return Redirect::route('index')\n      ->with('error','Nothing to delete!');\n  }\n}\n```", "```php\n    **php artisan migrate:make create_answers_table --table=answers --create**\n\n    ```", "```php\n    Schema::create('answers', function(Blueprint $table)\n    {\n      $table->increments('id');\n\n      //question's id\n      $table->integer('questionID')->unsigned()->default(0);\n      //answerer's user id\n      $table->integer('userID')->unsigned()->default(0);\n      $table->text('answer');\n      //if the question's been marked as correct\n      $table->enum('correct',array('0','1'))->default(0);\n      //total number of votes:\n      $table->integer('votes')->default(0);\n      //foreign keys\n      $table->foreign('questionID')->references('id')->on('questions')->onDelete('cascade');\n      $table->foreign('userID')->references('id')->on('users')->onDelete('cascade');\n\n      $table->timestamps();\n    });\n    ```", "```php\n    <?php\n\n    class Answer extends Eloquent {\n\n      //The relation with users\n      public function users() {\n        return $this->belongsTo('User','userID');\n      }\n\n      //The relation with questions\n      public function questions() {\n        return $this->belongsTo('Question','questionID');\n      }\n\n      //which fields can be filled\n      protected $fillable = array('questionID', 'userID', 'answer', 'correct', 'votes');\n\n      //Answer Form Validation Rules\n      public static $add_rules = array(\n        'answer'\t=> 'required|min:10'\n      );\n\n    }\n    ```", "```php\n    public function answers() {\n      return $this->hasMany('Answer','questionID');\n    }\n    ```", "```php\n    **php artisan controller:make AnswersController**\n\n    ```", "```php\n    /**\n     * Adds a reply to the questions\n    **/\n    public function postReply($id,$title) {\n\n      //First, let's check if the question id is valid\n      $question = Question::find($id);\n\n      //if question is found, we keep on processing\n      if($question) {\n\n        //Now let's run the form validation\n        $validation = Validator::make(Input::all(), Answer::$add_rules);\n\n        if($validation->passes()) {\n\n          //Now let's create the answer\n          Answer::create(array('questionID' => $question->id,'userID' => Sentry::getUser()->id,'answer' => Input::get('answer')\n          ));\n\n          //Finally, we redirect the user back to the question page with a success message\n          return Redirect::route('question_details',array($id,$title))\n            ->with('success','Answer submitted successfully!');\n\n        } else {\n          return Redirect::route('question_details',array($id,$title))\n            ->withInput()\n            ->with('error',$validation->errors()->first());\n        }\n\n      } else {\n        return Redirect::route('index')\n          ->with('error','Question not found');\n      }\n\n    }\n    ```", "```php\n               $question = Question::with('users','tags')->find($id);\n        ```", "```php\n               $question = Question::with('users','tags','answers')->find($id);\n        ```", "```php\n              ->with('questions',Question::with('users','tags')-> orderBy('id','desc')->paginate(2));\n        ```", "```php\n             ->with('questions',Question::with('users', 'tags', 'answers')->orderBy('id','desc')->paginate(2));\n        ```", "```php\n              {{--Answer section will be filled later in this chapter--}}\n              <div class=\"cntbox\">\n                <div class=\"cntcount\">0</div>\n                <div class=\"cnttext\">answer</div>\n              </div>\n        ```", "```php\n               <?php\n               //does the question have an accepted answer?\n               $answers = $question->answers; \n               $accepted = false; //default false\n\n               //We loop through each answer, and check if there is an accepted answer\n               if($question->answers!=null) {\n                 foreach ($answers as $answer) {\n                   //If an accepted answer is found, we break       the loop\n                   if($answer->correct==1) {\n                     $accepted=true;\n                     break;\n                   }\n                 }\n               }\n               ?>\n               @if($accepted)\n                 <div class=\"cntbox cntgreen\">\n               @else\n                 <div class=\"cntbox cntred\">\n               @endif\n                 <div class=\"cntcount\">{{count($answers)}}</div>\n                 <div class=\"cnttext\">answer</div>\n               </div>\n        ```", "```php\n           //Answer upvoting and Downvoting\n           Route::get('answer/vote/{direction}}/{id}',array('as'=>'vote_answer', 'before'=>'user', 'uses'=>'AnswersController@getVote'))->where(array('direction'=>'(up|down)', 'id'=>'[0-9]+'));\n    ```", "```php\n               <div id=\"rreplycount\">0 answers</div>\n        ```", "```php\n               <div id=\"rreplycount\">{{count($question->answers)}} answers</div>\n        ```", "```php\n               </div>\n               @stop\n\n               @section('footer_assets')\n        ```", "```php\n               @if(count($question->answers))\n                 @foreach($question->answers as $answer)\n\n                   @if($answer->correct==1)\n                     <div class=\"rrepol correct\">\n                   @else\n                     <div class=\"rrepol\">\n            @endif\n                   @if(Sentry::check())\n                     <div class=\"arrowbox\">\n                       {{HTML::linkRoute('vote_answer','',array('up', $answer->id),array('class'=>'like', 'title'=>'Upvote'))}}\n                       {{HTML::linkRoute('vote_answer','', array('down',$answer->id), array('class'=>'dislike','title'=>'Downvote'))}}\n\n                     </div>\n                   @endif\n\n                   <div class=\"cntbox\">\n                     <div class=\"cntcount\">{{$answer->votes}}</div>\n                     <div class=\"cnttext\">vote</div>\n                   </div>\n\n                   @if($answer->correct==1)\n                     <div class=\"bestanswer\">best answer</div>\n                   @else\n                     {{-- if the user is admin or the owner of the question, show the best answer button --}}\n                     @if(Sentry::check())\n                       @if(Sentry::getUser()->hasAccess('admin') || Sentry::getUser()->id == $question->userID)\n                           <a class=\"chooseme\" href=\"{{URL::route('choose_answer',$answer->id)}}\"><div class=\"choosebestanswer\">choose</div></a>\n                       @endif\n                     @endif\n                   @endif\n                   <div class=\"rblock\">\n                     <div class=\"rbox\">\n                       <p>{{nl2br($answer->answer)}}</p>\n                     </div>\n                     <div class=\"rrepolinf\">\n                     <p>Answered by <a href=\"#\">{{$answer->users->first_name.' '.$answer->users->last_name}}</a> around {{date('m/d/Y H:i:s',strtotime($answer->created_at))}}</p>\n                     </div>\n                   </div>\n                 </div>\n                 @endforeach\n               @endif\n        ```", "```php\n               {{-- for admins and question owners --}}\n               @if(Sentry::check())\n                 @if(Sentry::getUser()->hasAccess('admin') || Sentry::getUser()->id == $question->userID)\n                   <script type=\"text/javascript\">\n                     $('a.chooseme').click(function(){\n                       return confirm('Are you sure you want to choose this answer as best answer?');\n                     });\n                   </script>\n                 @endif\n               @endif\n        ```", "```php\n    /**\n      * Vote AJAX Request\n    **/\n    public function getVote($direction, $id) {\n\n      //request has to be AJAX Request\n      if(Request::ajax()) {\n        $answer = Answer::find($id);\n        //if the answer id is valid\n        if($answer) {\n          //new vote count\n          if($direction == 'up') {\n            $newVote = $answer->votes+1;\n          } else {\n            $newVote = $answer->votes-1;\n          }\n\n          //now the update\n          $update = $answer->update(array(\n            'votes' => $newVote\n          ));\n\n          //we return the new number\n          return $newVote;\n        } else {\n          //answer not found\n          Response::make(\"FAIL\", 400);\n        }\n      } else {\n        return Redirect::route('index');\n      }\n    }\n    ```", "```php\n    /**\n      * Chooses a best answer\n    **/\n    public function getChoose($id) {\n\n      //First, let's check if there is an answer with that given ID\n      $answer = Answer::with('questions')->find($id);\n\n      if($answer) {\n        //Now we should check if the user who clicked is an admin or the owner of the question \n        if(Sentry::getUser()->hasAccess('admin') || $answer->userID == Sentry::getUser()->id) {\n            //First we should unmark all the answers of the question from correct (1) to incorrect (0)\n            Answer::where('questionID',$answer->questionID)\n              ->update(array(\n                'correct' => 0\n              ));\n\n            //And we should mark the current answer as correct/best answer\n          $answer->update(array(\n            'correct' => 1\n          ));\n\n          //And now let's return the user back to the questions page\n          return Redirect::route('question_details',array($answer->questionID, Str::slug($answer->questions->title)))\n              ->with('success','Best answer chosen successfully');\n        } else {\n          return Redirect::route('question_details',array($answer->questionID, Str::slug($answer->questions->title)))\n            ->with('error','You don\\'t have access to this attempt!');\n        }\n\n      } else {\n        return Redirect::route('index')\n          ->with('error','Answer not found');\n      }\n\n    }\n    ```", "```php\n    //Deleting an answer\n    Route::get('answer/delete/{id}',array('as'=>'delete_answer','before'=>'user', 'uses'=> 'AnswersController@getDelete'))->where('id','[0-9]+');\n    ```", "```php\n    <p>Answered by <a href=\"#\">{{$answer->users->first_name.' '.$answer->users->last_name}}</a> around {{date('m/d/Y H:i:s',strtotime($answer->created_at))}}</p>\n    ```", "```php\n    {{-- Only the answer's owner or the admin can delete the answer --}}\n    @if(Sentry::check())\n      <div class=\"qwrap\">\n        <ul class=\"fastbar\">\n          @if(Sentry::getUser()->hasAccess('admin') || Sentry::getUser()->id == $answer->userID)\n            <li class=\"close\">{{HTML::linkRoute('delete_answer','delete',$answer->id)}}</li>\n          @endif\n        </ul>\n      </div>\n    @endif\n    ```", "```php\n    /**\n     * Deletes an answer\n    **/\n    public function getDelete($id) {\n\n      //First, let's check if there is an answer with that given ID\n      $answer = Answer::with('questions')->find($id);\n\n      if($answer) {\n        //Now we should check if the user who clicked is an admin or the owner of the question \n        if(Sentry::getUser()->hasAccess('admin') || $answer->userID==Sentry::getUser()->id) {\n\n          //Now let's delete the answer\n          $delete = Answer::find($id)->delete();\n\n          //And now let's return the user back to the questions page\n          return Redirect::route('question_details',array($answer->questionID, Str::slug($answer->questions->title)))\n            ->with('success','Answer deleted successfully');\n        } else {\n          return Redirect::route('question_details',array($answer->questionID, Str::slug($answer->questions->title)))\n            ->with('error','You don\\'t');\n        }\n\n      } else {\n        return Redirect::route('index')\n          ->with('error','Answer not found');\n      }\n    }\n    ```", "```php\n    /**\n      * Shows the questions tagged with $tag friendly URL\n    **/\n    public function getTaggedWith($tag) {\n\n      $tag = Tag::where('tagFriendly',$tag)->first();\n\n      if($tag) {\n        return View::make('qa.index')\n          ->with('title','Questions Tagged with: '.$tag->tag)\n          ->with('questions',$tag->questions()->with('users','tags','answers')->paginate(2));\n      } else {\n        return Redirect::route('index')\n          ->with('error','Tag not found');\n      }\n    }\n    ```", "```php\n    @if(Sentry::check() && (Route::currentRouteName() == 'index' || Route::currentRouteName() == 'question_details'))\n    ```", "```php\n    @if(Sentry::check() && (Route::currentRouteName() == 'index' || Route::currentRouteName() == 'tagged' || Route::currentRouteName() == 'question_details'))\n    ```"]