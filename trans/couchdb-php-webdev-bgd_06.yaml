- en: Chapter 6. Modeling Users
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。建模用户
- en: Believe it or not, we've already done quite a bit to make our interactions with
    CouchDB a simple process. In this chapter, we'll get right into the meat of CouchDB
    and start to model our user documents.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 信不信由你，我们已经做了很多工作，使我们与CouchDB的交互变得简单。在本章中，我们将直接进入CouchDB的核心，并开始对用户文档进行建模。
- en: 'To be more specific we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将：
- en: Install Bootstrap, a toolkit from Twitter that will handle the heavy lifting
    of CSS, forms, buttons, and more
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Bootstrap，这是Twitter的一个工具包，将处理CSS、表单、按钮等繁重的工作
- en: Take a close look at how CouchDB stores user documents by default and how we
    can add fields to them
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细观察CouchDB默认存储用户文档的方式以及我们如何向其中添加字段
- en: Add basic functionality for users so they can sign up, log in, and log out of
    our application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户添加基本功能，以便他们可以在我们的应用程序中注册、登录和注销
- en: Learn how to handle exceptions and errors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何处理异常和错误
- en: This is going to be our most rewarding chapter yet; you'll love offloading some
    of the standard authentication and security to CouchDB. Buckle up. It's going
    to be a fun ride!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们迄今为止最有价值的一章；您将喜欢将一些标准的身份验证和安全性外包给CouchDB。系好安全带。这将是一次有趣的旅程！
- en: Before we get started
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们开始之前
- en: We've played around with a lot of files to test Bones and Sag, but you'll notice
    that our application is still looking pretty barren. So, let's spruce up the design
    a bit. Since designing and implementing UIs isn't the purpose of this book, we'll
    use a toolkit called **Bootstrap** to do the heavy lifting for us. Bootstrap ([http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/))
    was created by Twitter to kickstart the development of web applications and sites.
    It will allow us to breeze past front-end development without too much work. Let's
    get Bootstrap up and running and then do some housekeeping on our layout.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经玩弄了很多文件来测试Bones和Sag，但您会注意到我们的应用程序看起来仍然相当空旷。所以，让我们稍微改善一下设计。由于设计和实现UI并不是本书的目的，我们将使用一个名为**Bootstrap**的工具包来为我们做大部分工作。Bootstrap
    ([http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/))是由Twitter创建的，旨在启动Web应用程序和网站的开发。它将使我们能够轻松进行前端开发而不需要太多工作。让我们先让Bootstrap运行起来，然后对我们的布局进行一些整理。
- en: Cleaning up our interface by installing Bootstrap
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过安装Bootstrap来清理我们的界面
- en: Setting up Bootstrap is incredibly easy. We could reference the CSS on their
    remote servers, but we'll download and call the CSS locally since it's best practice
    to reduce the amount of external calls.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Bootstrap非常容易。我们可以引用它们的远程服务器上的CSS，但我们将下载并在本地调用CSS，因为最佳实践是减少外部调用的数量。
- en: Time for action — installing Bootstrap locally
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行时间-本地安装Bootstrap
- en: Installing Bootstrap is a breeze; we'll cover the basics of getting it installed
    in this section.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Bootstrap非常简单；我们将在本节中介绍安装它的基础知识。
- en: Open your browser, and go to [http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/).
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，转到[http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)。
- en: Click on **Download Bootstrap**.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下载Bootstrap**。
- en: A `.zip` file will be downloaded into your `downloads` folder; unzip it by double-clicking
    on it or by using your favorite unzip tool.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个`.zip`文件将被下载到您的`downloads`文件夹中；双击它或使用您喜欢的解压工具解压它。
- en: You will find three directories inside the `bootstrap` folder, namely `css,
    img`, and `js`, each containing a number of files.![Time for action — installing
    Bootstrap locally](graphics/3586_06_002.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在`bootstrap`文件夹中找到三个目录，分别是`css, img`和`js`，每个目录中都包含若干文件。![执行时间-本地安装Bootstrap](graphics/3586_06_002.jpg)
- en: 'Copy all of the files in each of these folders into the respective folders
    in your `verge` project: `/public/css, public/img`, and `public/js`. Your `verge`
    directory should look similar to the following screenshot when you''re done:![Time
    for action — installing Bootstrap locally](graphics/3586_06_003.jpg)'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些文件夹中的所有文件复制到您的`verge`项目的相应文件夹中：`/public/css, public/img`和`public/js`。完成后，您的`verge`目录应该类似于以下屏幕截图：![执行时间-本地安装Bootstrap](graphics/3586_06_003.jpg)
- en: What just happened?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just installed Twitter's Bootstrap into our project by downloading a `.zip`
    file containing all of the assets and by placing them in the correct folders on
    our local machine.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚通过下载一个包含所有资产的`.zip`文件并将它们放在本地机器的正确文件夹中，将Twitter的Bootstrap安装到我们的项目中。
- en: Just by looking at the new files that we have in our project, you might notice
    that each file appears to show up twice, one with `min` inside of the filename
    and one without. These two files are identical, except for the fact that the one
    that contains `min` in the file name has been minified. **Minified** means that
    all of the non-essential characters are removed from the code to decrease the
    file size. The removed characters include things such as white-spaces, new-line
    characters, comments, and much more. Because these files are loaded on demand
    from the website, it's important that they are as small as possible to speed your
    application up. If you tried to open a minified file, it's usually pretty hard
    to tell what's going on, which is fine because we don't want to make any changes
    in these files to begin with.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅通过查看我们项目中的新文件，您可能会注意到每个文件似乎出现了两次，一个带有文件名中的`min`，一个没有。这两个文件是相同的，除了包含`min`在文件名中的文件已经被压缩。**压缩**意味着从代码中删除所有非必要的字符以减小文件大小。删除的字符包括空格、换行符、注释等。因为这些文件是从网站上按需加载的，所以它们尽可能小以加快应用程序的速度是很重要的。如果您尝试打开一个压缩文件，通常很难看出发生了什么，这没关系，因为我们一开始就不想对这些文件进行任何更改。
- en: It might be clear what all of these files do－the `css` files are defining some
    of the global styles of Bootstrap. The `img` files are used to help us use icons
    around our site if we want to, and the `js` files are used to help us add interaction,
    transitions, and effects to our site. But, inside of the `css` folder, there are
    both `bootstrap` and `bootstrap-responsive` css files, which can be confusing.
    **Responsive design** is something that has really exploded over the past few
    years, and in itself, has many books written about it. In short `bootstrap` includes
    styles in the `bootstrap-responsive` file to help our site work on different resolutions
    and devices. Out of the box, our website therefore should work on both web and
    modern mobile devices (for the most part).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些文件的作用可能很明显——`css`文件定义了Bootstrap的一些全局样式。`img`文件用于帮助我们在网站周围使用图标，如果我们愿意的话，`js`文件用于帮助我们为网站添加交互、过渡和效果。但是，在`css`文件夹中，有`bootstrap`和`bootstrap-responsive`两个css文件，这可能会让人感到困惑。**响应式设计**是近年来真正爆发的东西，本身已经有很多书籍写到了这个主题。简而言之，`bootstrap`包括了`bootstrap-responsive`文件中的样式，以帮助我们的网站在不同的分辨率和设备上工作。因此，我们的网站应该可以在Web和现代移动设备上正常工作（大部分情况下）。
- en: Now, you can probably tell why I chose to use Bootstrap; we just gained a whole
    lot of functionality just by copying files into our project. But, everything isn't
    hooked up quite yet; we need to tell our `layout.php` file where to look so that
    it can use these new files.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能能够理解为什么我选择使用Bootstrap了；我们只需复制文件到我们的项目中，就获得了很多功能。但是，还没有完全连接好；我们需要告诉我们的`layout.php`文件去哪里查找，以便它可以使用这些新文件。
- en: Time for action — including Bootstrap and adjusting our layout to work with
    it
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动——包括Bootstrap并调整我们的布局以适应它
- en: Because the Bootstrap framework is just a series of files, it'll be a breeze
    for us to include it in our project, just as we did with our `master.css` file
    in [Chapter 4](ch04.html "Chapter 4. Starting your Application"),
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Bootstrap框架只是一系列文件，所以我们可以像在[第4章](ch04.html "第4章。开始你的应用程序")中处理`master.css`文件一样轻松地将其包含在我们的项目中，
- en: 'Start by adding a link to `bootstrap.min.css` and `bootstrap-responsive.min.css`
    before `master.css` in the `layout.php` file:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`layout.php`文件中，在`master.css`之前添加一个链接到`bootstrap.min.css`和`bootstrap-responsive.min.css`：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, let''s make sure that Bootstrap works well in older versions of Internet
    Explorer and mobile browsers by adding the following little bit of code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们确保Bootstrap在较旧版本的Internet Explorer和移动浏览器中能够良好运行，通过添加以下一小段代码：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s make a clean and simple wrapper for our application by replacing the
    contents of the `views/layout.php` file with the following:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下内容替换`views/layout.php`文件的内容，为我们的应用程序创建一个干净简单的包装：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Remove the contents of the `master.css` file, and replace them with the following
    to make a few small adjustments to our layout:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`master.css`文件的内容，并用以下内容替换，对我们的布局进行一些小的调整：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What just happened?
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We included Bootstrap in our `layout.php` file and made sure that the versions
    of Internet Explorer would work okay by adding an HTML5 shim that a lot of developers
    use. If you want to find out more about how this works, feel free to visit [http://html5shim.googlecode.com/](http://html5shim.googlecode.com/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`layout.php`文件中包含了Bootstrap，并确保了Internet Explorer的版本可以正常工作，通过添加了许多开发人员使用的HTML5
    shim。如果你想了解更多关于这是如何工作的，可以随时访问[http://html5shim.googlecode.com/](http://html5shim.googlecode.com/)。
- en: Next, we added some HTML to conform to the CSS definitions defined in Bootstrap.
    It's not too important for you to understand why the HTML is set up like it is,
    but if you're curious, you can refer to the main page of Bootstrap to learn more
    ([http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)).
    We then added a few rules to our `main.css` file that added additional styles
    on top of Bootstrap. I did this to create a little bit of space in our application,
    so things weren't cluttered.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加了一些HTML来符合Bootstrap中定义的CSS。你不需要太在意HTML为什么设置成这样，但如果你好奇的话，你可以参考Bootstrap的主页了解更多（[http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/)）。然后，我们在`main.css`文件中添加了一些规则，以在Bootstrap的基础上添加额外的样式。我这样做是为了在我们的应用程序中创造一些空间，使事情不会杂乱。
- en: If you were to go to the home page now by going to [http://localhost/verge/](http://localhost/verge/),
    the header definitely looks cool, but the home page needs some love. Let's quickly
    clean up the home page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在去首页[http://localhost/verge/](http://localhost/verge/)，标题看起来确实很酷，但首页需要一些爱。让我们快速清理一下首页。
- en: Time for action — sprucing up the home page
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动——装饰首页
- en: 'Bootstrap is going to save us some real time again; we just need a little bit
    of HTML markup for our application to look pretty nice! Replace the contents of
    `views/home.php` with the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap将再次为我们节省一些真正的时间；我们只需要一点HTML标记，我们的应用程序就会看起来相当不错！用以下内容替换`views/home.php`的内容：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What just happened?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just added a nice clean layout for our home page with a button to prompt
    people to sign up when they come to our site. Notice that we removed`<? php echo
    $message; ?>` from the file, when we originally added that to display simple messages
    to our users, but we're going to explore a cleaner way of doing that later in
    this chapter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为我们的首页添加了一个漂亮简洁的布局，还有一个按钮，提示人们在来到我们的网站时注册。请注意，我们从文件中删除了`<? php echo $message;
    ?>`，当我们最初添加它来向用户显示简单的消息时，但我们将在本章后面探索更清晰的方法。
- en: Ready to see some magic? Open your browser, and go to [http://localhost/verge/](http://localhost/verge/).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 准备看到一些魔法吗？打开你的浏览器，转到[http://localhost/verge/](http://localhost/verge/)。
- en: '![What just happened?](graphics/3586_06_005.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](graphics/3586_06_005.jpg)'
- en: We've barely had to spend any time on the design, but we already have a much
    friendlier application. This new design is going to come in handy later, when
    we get deeper into handling users.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎没有花费任何时间在设计上，但我们已经有了一个更友好的应用程序。当我们深入处理用户时，这种新设计将会派上用场。
- en: Ready to see something cool? Try making your browser window smaller, and see
    what happens.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 准备看到一些很酷的东西吗？试着把浏览器窗口缩小，看看会发生什么。
- en: '![What just happened?](graphics/3586_06_007.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](graphics/3586_06_007.jpg)'
- en: Notice how the content adjusts to the screen size; this means that on a mobile
    device, your application will adjust so that it's easy to view. Bootstrap's responsive
    boilerplate code is just the beginning. You could choose to show and hide content,
    depending on the size of the browser.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意内容如何根据屏幕大小调整；这意味着在移动设备上，您的应用程序将调整以便轻松查看。Bootstrap的响应式样板代码只是一个开始。您可以选择根据浏览器的大小来显示和隐藏内容。
- en: With the browser window smaller, you'll notice that the navigation bar has also
    been condensed, and instead of seeing your links, you see a button with three
    bars on it. Try clicking on it...nothing happens!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器窗口变小后，您会注意到导航栏也被压缩了，而不是看到您的链接，您会看到一个有三条杠的按钮。尝试点击它...什么也没有发生！
- en: This component requires Bootstrap's JavaScript file, as well as a JavaScript
    library called **jQuery**. It's not crucial for us to have this all working yet,
    so let's come back to it in the next chapter!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组件需要Bootstrap的JavaScript文件，以及一个名为**jQuery**的JavaScript库。我们现在还没有必要让这一切都工作，所以让我们在下一章回来吧！
- en: Moving all user files into the user folder
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有用户文件移动到用户文件夹中
- en: Our application is going to start growing quite a bit in this section. Our views
    are going to get pretty messy if we keep throwing our files around as we currently
    are. Let's perform a little housekeeping and add some structure to our `views`
    directory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序在这一部分将开始大幅增长。如果我们继续像现在这样随意地把文件扔来扔去，我们的视图将变得非常混乱。让我们进行一些整理工作，并为我们的`views`目录添加一些结构。
- en: Time for action — organizing our user views
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 组织我们的用户视图
- en: As we continue to create views for our application, it will be smart for us
    to have some organization to make sure that we keep things nice and straightforward.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续为我们的应用程序创建视图，对我们来说很聪明的是要有一些组织，以确保我们保持事情简单明了。
- en: Create a folder called `user` inside the `views` directory.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中创建一个名为`user`的文件夹。
- en: Move the existing `signup.php` view into this folder. The resulting directory
    structure will look similar to the following screenshot:![Time for action — organizing
    our user views](graphics/3586_06_010.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的`signup.php`视图移动到这个文件夹中。结果的目录结构将类似于以下截图：![行动时间 - 组织我们的用户视图](graphics/3586_06_010.jpg)
- en: 'We need to update `index.php` and let it know where to find the signup view
    that we just moved:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要更新`index.php`并让它知道在哪里找到我们刚刚移动的注册视图：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What just happened?
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We cleaned up our `views` folder structure by creating a `user` folder, into
    which we will put all of the views that relate to users. We then moved our existing
    `signup.php` file into the `user` folder and told our `index.php` file where to
    find the `user/signup.php` file. Notice that the route for the signup page, `/signup`,
    hasn't changed at all.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建一个`user`文件夹来清理我们的`views`文件夹结构，将所有与用户相关的视图放入其中。然后我们将现有的`signup.php`文件移动到`user`文件夹，并告诉我们的`index.php`文件在哪里找到`user/signup.php`文件。请注意，注册页面的路由`/signup`并没有改变。
- en: Designing our user documents
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计我们的用户文档
- en: We've seen in [Chapter 3](ch03.html "Chapter 3. Getting Started with CouchDB
    and Futon"), *Getting Started with CouchDB and Futon*, how CouchDB looks at user
    documents. In this chapter, we are going to learn how to leverage existing CouchDB
    functionality and add some additional fields on top of it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章。与CouchDB和Futon入门")中已经看到了CouchDB如何查看用户文档。在本章中，我们将学习如何利用现有的CouchDB功能，并在其上添加一些额外的字段。
- en: How CouchDB looks at basic user documents
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CouchDB如何查看基本用户文档
- en: 'CouchDB already has a mechanism for storing user documents, which we''ve already
    seen and used. We are going to use this same structure for the users of our application:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB已经有一个存储用户文档的机制，我们已经看到并使用过。我们将使用相同的结构来处理我们应用程序的用户：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'These seven fields are required by CouchDB for users to operate correctly in
    CouchDB:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这七个字段是CouchDB要求用户在CouchDB中正确操作所必需的：
- en: '`_id` is the unique identifier of the user. It needs to start with `org.couchdb.user:`
    and end with the same value of the `name` attribute. These roles are enforced
    by the `_auth` design document. We haven''t talked too much about design documents
    yet. But, at this point, it''s good for you to know that design documents are
    code that run directly inside the database. They can be used to enforce validation
    and business roles.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_id`是用户的唯一标识符。它需要以`org.couchdb.user:`开头，并以`name`属性的相同值结尾。这些角色由`_auth`设计文档强制执行。我们还没有太多讨论设计文档。但是，此时，您需要知道设计文档是直接在数据库中运行的代码。它们可以用于强制执行验证和业务角色。'
- en: '`_rev` is the revision identifier of the document. We quickly touched on revisions
    in [Chapter 3](ch03.html "Chapter 3. Getting Started with CouchDB and Futon").'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_rev`是文档的修订标识符。我们在[第3章](ch03.html "第3章。与CouchDB和Futon入门")中快速涉及了修订。'
- en: '`name` is the username of the user. This field is required by the `_auth` design
    document, and it also needs to match the value of the `_id` of the document after
    the `:` character.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`是用户的用户名。这个字段是`_auth`设计文档所必需的，并且它还需要与冒号后文档的`_id`的值匹配。'
- en: '`password_sha` is the SHA-1 encrypted value of the password after it has been
    combined with the `salt`. We''ll cover SHA-1 encryption in just a bit.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password_sha`是密码与`salt`组合后进行SHA-1加密的值。我们稍后会介绍SHA-1加密。'
- en: '`password_sha` is the SHA-1 encrypted value of the password after it has been
    combined with the `salt`. We''ll cover SHA-1 encryption in just a bit.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password_sha`是密码与`salt`组合后进行SHA-1加密的值。我们稍后会介绍SHA-1加密。'
- en: '`roles` is an array of privileges that a user might have. By having a value
    of `[]`, we know that this user has no special privileges.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roles`是用户可能拥有的特权数组。通过具有`[]`的值，我们知道这个用户没有特权。'
- en: '`salt` is the unique `salt` of the user. The `salt` is combined with the plaintext
    value of the password and is passed through SHA-1 encryption to result in the
    value of `password_sha`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`salt`是用户的唯一`salt`。`salt`与密码的明文值组合，并通过SHA-1加密得到`password_sha`的值。'
- en: '`type` is the identifier that CouchDB uses to identify the document type. Remember
    that CouchDB is a flat document store. This `type` field identifies the classification
    of a document.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`是CouchDB用来标识文档类型的标识符。请记住，CouchDB是一个扁平的文档存储。这个`type`字段标识了文档的分类。'
- en: These user documents are unique in that they have a small amount of structure
    that is required, but we can always add additional fields to these. Let's do that
    next!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些用户文档是独特的，因为它们需要一定结构，但我们总是可以向其添加额外字段。让我们接着做吧！
- en: Adding more fields to the user document
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向用户文档添加更多字段
- en: Let's talk about a few extra fields that we know we'll want to collect information
    from the users of Verge. Keep in mind that you can always add more fields if your
    application needs it.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈一些额外的字段，我们知道我们将想要从Verge的用户那里收集信息。请记住，如果您的应用程序需要，您总是可以添加更多字段。
- en: '**Username:** We know that we''ll want to be able to store a unique username,
    so that our users will have a unique URL, such as `/user/johndoe`. Luckily, this
    functionality is already handled by CouchDB''s `name` field. With that in mind,
    there''s nothing to do here. We''ll just use the existing `name` instead!'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名：** 我们知道我们将想要存储一个唯一的用户名，这样我们的用户将拥有一个唯一的URL，例如`/user/johndoe`。幸运的是，这个功能已经由CouchDB的`name`字段处理了。考虑到这一点，这里没有什么要做的。我们只需使用现有的`name`即可！'
- en: '**Full name:** The full name of the user, so we can display the name of the
    user as `John Doe`. This will be a user-friendly name that we can use to display
    to visiting users, we''ll need to add a field to the documents to support this.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全名：** 用户的全名，这样我们就可以显示用户的名称为`John Doe`。这将是一个用户友好的名称，我们可以用来展示给访问用户，我们需要向文档中添加一个字段来支持这一点。'
- en: '**E-mail:** An e-mail address, so that we can communicate with the user, such
    as for notification e-mails: `<[john@example.com](mailto:john@example.com)>`.
    We''re actually already saving the e-mails in our current class, so we can ignore
    this as well.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件：** 电子邮件地址，以便我们可以与用户进行通信，例如通知电子邮件：`<[john@example.com](mailto:john@example.com)>`。实际上，我们已经在当前类中保存了电子邮件，所以我们也可以忽略这一点。'
- en: Sounds easy enough; we just need to add one field! Any time you add new fields
    to a document, you should think about how you need to format it. Let's talk about
    the different approaches that we could take with CouchDB.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很容易；我们只需要添加一个字段！每当您向文档添加新字段时，您都应该考虑如何格式化它。让我们讨论一下我们可以采用的CouchDB的不同方法。
- en: Discussing options for adding these fields
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论添加这些字段的选项
- en: 'There are a variety of ways that we might use to add fields on top of CouchDB''s
    basic user documents:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会使用各种方法来在CouchDB的基本用户文档上添加字段：
- en: We could create a new type of document and call it `verge_user`. This document
    would contain any additional user attributes that we need in our application and
    then would have a reference back to the user document.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以创建一个新类型的文档，称之为`verge_user`。这个文档将包含我们在应用程序中需要的任何额外用户属性，然后将引用回用户文档。
- en: We could create an array inside our user document with the application-specific
    attributes and add all of our user attributes there.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在用户文档内创建一个数组，其中包含特定于应用程序的属性，并将所有用户属性添加到其中。
- en: Or we could just add the two new fields inside our user documents.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者我们可以只是在用户文档内添加这两个新字段。
- en: I think, for now, we can all agree that by adding one field, we can just go
    with the last option mentioned.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，目前我们可以一致同意通过添加一个字段来选择最后提到的选项。
- en: 'With that in mind, our final document will look similar to the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们的最终文档将类似于以下内容：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It might be strange for you to see variations of the user''s name in so many
    places: `_id, name`, and `full_name`. But remember that CouchDB has a good reason
    for doing this. By storing the username in the `_id`, CouchDB will automatically
    check to make sure that each username is unique.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会觉得在许多地方看到用户名称的变化很奇怪：`_id、name`和`full_name`。但请记住，CouchDB有充分的理由这样做。通过将用户名存储在`_id`中，CouchDB将自动检查每个用户名是否唯一。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Keep in mind that we might want to get more creative if we want to start storing
    fields such as `website, biography`, or `location`. We'll talk more about this
    later on in the book.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果我们想要开始存储诸如`网站、传记`或`位置`等字段，我们可能会想要更有创意。我们将在本书后面更详细地讨论这个问题。
- en: Adding support for the additional fields
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加对额外字段的支持
- en: In order for us to add these fields to our user documents, we don't have to
    change much in our code; we just need to add a few more variables into our `user.php`
    class.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向用户文档中添加这些字段，我们不需要在代码中做太多更改；我们只需要在`user.php`类中添加一些变量即可。
- en: Time for action — adding the fields to support the user documents
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动-添加字段以支持用户文档
- en: We already have the basic structure of user documents set up in the `classes/user.php`
    file, but let's go through and add a few more fields.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在`classes/user.php`文件中设置了用户文档的基本结构，但让我们继续添加一些字段。
- en: We currently aren't setting `_id` in any of our projects, but we'll need to
    do that for our user documents. Let's open up `classes/base.php`, and add `_id`
    so that we have the option of setting `_id` on any document.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们目前没有在任何项目中设置`_id`，但我们需要为我们的用户文档这样做。让我们打开`classes/base.php`，并添加`_id`，这样我们就有了在任何文档上设置`_id`的选项。
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need to add all of the user fields that we just discussed into the `classes/user.php`
    file, and a few others. Add the following code to `classes/user.php` so that it
    looks as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将我们刚刚讨论的所有用户字段添加到`classes/user.php`文件中，以及一些其他字段。将以下代码添加到`classes/user.php`中，使其看起来如下：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What just happened?
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added all the fields that we'll need to be able to save user documents into
    our system. We added `_id` to the `base.php` class, because we know that every
    CouchDB document requires this field. We have been able to live without `_id`
    because CouchDB has automatically set one for us so far. However, in this chapter,
    we'll need to be able to set and retrieve `_id` for our user documents. We then
    added `full_name` and a few other fields that might throw you off a bit. `$salt`
    and `$password_sha` are used to safely store passwords. This process is easier
    to explain with an example, so we'll go over this in detail in our signup process.
    Lastly, we added roles, which will be empty in this book but can be useful for
    you to develop a role-based system, allowing certain users to be able to see certain
    parts of your application, and so on.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了所有需要保存用户文档到系统中的字段。我们在`base.php`类中添加了`_id`，因为我们知道每个CouchDB文档都需要这个字段。到目前为止，我们已经能够在没有`_id`的情况下生活，因为CouchDB自动为我们设置了一个。然而，在本章中，我们需要能够设置和检索我们的用户文档的`_id`。然后，我们添加了`full_name`和其他一些可能让您感到困惑的字段。`$salt`和`$password_sha`用于安全存储密码。这个过程通过一个例子更容易解释，所以我们将在我们的注册过程中详细介绍这个过程。最后，我们添加了角色，在本书中将为空，但对于您开发基于角色的系统可能会有用，允许某些用户能够看到应用程序的某些部分等。
- en: Now that we have the user structure defined, we need to walk through the signup
    process, which is a bit more complex than the CouchDB document creation we've
    done so far.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了用户结构，我们需要走一遍注册过程，这比我们迄今为止所做的CouchDB文档创建要复杂一些。
- en: The signup process
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册过程
- en: 'Now that we have support for all of the fields in the user class, let''s add
    support for users to sign up for Verge. Signing up is a bit of a complicated process,
    but we''ll try to break it down by going step-by-step. In this section we will:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经支持用户类中的所有字段，让我们为用户注册Verge添加支持。注册是一个有点复杂的过程，但我们将尝试逐步分解它。在本节中，我们将：
- en: Define our database admin user and password so that we can create new user documents
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义我们的数据库管理员用户名和密码，以便我们可以创建新的用户文档
- en: Create a new signup interface to support all the fields we've added
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的注册界面来支持我们添加的所有字段
- en: Add a Bootstrap helper to make creating form inputs much easier
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个Bootstrap助手，使创建表单输入更容易
- en: Develop a quick and dirty implementation of the signup process
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发一个快速而简单的注册过程的实现
- en: Dig deeper into using SHA-1 encryption for our passwords
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 深入了解我们密码的SHA-1加密
- en: Refactor our signup process so that it is a bit more structured
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构我们的注册过程，使其更加结构化
- en: A little administrator setup
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一点管理员设置
- en: In [Chapter 3](ch03.html "Chapter 3. Getting Started with CouchDB and Futon"),
    we locked down `our _users` database, so we could secure our user data, meaning
    that any time we deal with the `_users` database, we need to provide the administrator
    login. For this, we'll add PHP constants for the user and the password at the
    top of the `index.php` file, so that we can reference it any time we need to perform
    an administrator function. Don't worry if this seems messy; we'll clean this up
    later in the book.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。使用CouchDB和Futon入门")中，我们锁定了`our _users`数据库，这样我们就可以保护我们的用户数据，这意味着每当我们处理`_users`数据库时，我们需要提供管理员登录。为此，我们将在`index.php`文件的顶部添加用户和密码的PHP常量，以便我们在需要执行管理员功能时随时引用它。如果这看起来混乱，不要担心；我们将在本书的后面整理这一点。
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Updating the interface
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新界面
- en: 'If you were to open your browser and look at the signup page now by going to:
    `http://localhost/verge/signup`, you''d notice that it''s out of date with our
    new Bootstrap changes. In fact, you probably can''t even see all of the input
    boxes! Let''s use Bootstrap to help clean up our signup interface so that it looks
    correct.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在打开浏览器并转到`http://localhost/verge/signup`，您会注意到它与我们的新Bootstrap更改不符。实际上，您可能甚至看不到所有的输入框！让我们使用Bootstrap来帮助清理我们的注册界面，使其看起来正确。
- en: 'Replace all of the contents of the `views/user/signup.php` page with the following
    HTML code:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下HTML代码替换`views/user/signup.php`页面的所有内容：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Refresh the signup page, and you'll see our awesome form now!![Updating the
    interface](graphics/3586_06_015.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新注册页面，您将看到我们的表单现在很棒！![更新界面](graphics/3586_06_015.jpg)
- en: 'Our form looks nice and clean. But, let''s be honest, adding the code for the
    input fields will start to become a pain as we add more fields. Let''s create
    a little helper class to help us create an HTML markup that can play nicely with
    Bootstrap:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的表单看起来很干净。但是，让我们诚实点，随着我们添加更多字段，为输入字段添加代码将开始变得痛苦。让我们创建一个小的辅助类，帮助我们创建一个可以与Bootstrap很好地配合的HTML标记：
- en: Create a new file in the `lib` directory called `bootstrap.php`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`lib`目录中创建一个名为`bootstrap.php`的新文件。
- en: Make a reference to `lib/bootstrap.php` in `bones.php`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bones.php`中引用`lib/bootstrap.php`。
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open up `lib/bootstrap.php`, and create a basic class.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`lib/bootstrap.php`，并创建一个基本类。
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We''re going to create a function called `make_input` that will accept four
    arguments: `$id, $label, $type`, and `$value`.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`make_input`的函数，它将接受四个参数：`$id, $label, $type`和`$value`。
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Go back to `views/user/signup.php`, and simplify the code to use the new `make_input`
    function.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`views/user/signup.php`，并简化代码以使用新的`make_input`函数。
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that we have `lib/bootstrap.php` to make our life easier, let''s ask our
    users for two more fields: `username` and `password`.'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了`lib/bootstrap.php`来让我们的生活更轻松，让我们向用户询问另外两个字段：`username`和`password`。
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Refresh your browser, and you'll see a dramatically improved signup form. If
    it doesn't look like the following screenshot, check to make sure your code matches
    mine.![Updating the interface](graphics/3586_06_017.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新您的浏览器，您会看到一个大大改进的注册表单。如果它看起来不像下面的截图，请检查您的代码是否与我的匹配。![更新界面](graphics/3586_06_017.jpg)
- en: Our form looks great! Unfortunately, it doesn't actually sign up a user yet
    when you click on **Sign Up!**. Let's change that in this next section.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表单看起来很棒！不幸的是，当您点击**注册！**时，它实际上还没有注册用户。让我们在下一节中改变这一点。
- en: Quick and dirty signup
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速而简单的注册
- en: For now, we will write the user signup code directly into `index.php`. We'll
    refactor this code a few times, and by the end of the chapter, we will move the
    bulk of the signup functionality into the `classes/user.php` file.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将直接将用户注册代码写入`index.php`。我们将多次重构此代码，并在本章结束时，将大部分注册功能移至`classes/user.php`文件。
- en: Time for action — handling simple user signup
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-处理简单用户注册
- en: Let's go through the signup process step-by-step, in which we'll rebuild the
    code in our signup `POST` route from scratch. I'll explain each piece of code
    on the way, and then, we will do a full recap at the end of this section.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步进行注册过程，在此过程中，我们将从头开始重建注册`POST`路由中的代码。我会逐步解释每段代码，然后在本节结束时进行全面回顾。
- en: 'Open `index.php`, and start by collecting the simple fields: `full_name, email`,
    and `roles`. The fields `full_name` and `email` will come directly from the form
    submission, and `roles` we will set to an empty array because this user has no
    special permissions.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`，并开始收集简单字段：`full_name, email`和`roles`。`full_name`和`email`字段将直接来自表单提交，`roles`我们将设置为空数组，因为此用户没有特殊权限。
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Next, we'll want to capture the username that the user submitted, but we'll
    want to safeguard against weird characters or spaces, so we'll use a regular expression
    to convert the posted username to a lowercase string without any special characters.
    The end result will serve as our `name` field and also as a part of the ID. Remember
    that user documents require that `_id` starts with `org.couchdb.user` and ends
    with the `name` of the user.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将捕获用户提交的用户名，但我们希望防止奇怪的字符或空格，因此我们将使用正则表达式将提交的用户名转换为不带任何特殊字符的小写字符串。最终结果将作为我们的`name`字段，也将作为ID的一部分。请记住，用户文档要求`_id`必须以`org.couchdb.user`开头，并以用户的`name`结尾。
- en: '[PRE18]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In order to encrypt the plain-text value of the password that the user entered,
    we'll temporarily set a string as the value of `salt`. We'll then pass the plain-text
    password into a SHA-1 function, and save it in `password_sha`. We'll go deeper
    into how SHA-1 works in just a few moments.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了加密用户输入的明文密码值，我们将临时设置一个字符串作为`salt`的值。然后，我们将明文密码传递给SHA-1函数，并将其保存在`password_sha`中。我们将在接下来的几分钟内深入了解SHA-1的工作原理。
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In order to save the user document, we need to set the database to `_users`,
    and log in as the admin user that we set with our PHP constants. Then, we will
    `put` the user to CouchDB using Sag.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保存用户文档，我们需要将数据库设置为`_users`，并以我们在PHP常量中设置的管理员用户身份登录。然后，我们将使用Sag将用户放入CouchDB。
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Finally, let's close the user signup function and render the home page.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们关闭用户注册功能并呈现主页。
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What just happened?
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just added code to set all of the values for our CouchDB user documents.
    Collecting the values of `full_name, email`, and `roles` was pretty straightforward;
    we just performed a simple call to grab the values from the posted form. Setting
    `name` got more complex with us transforming the posted value of username to a
    lowercase string, from which we used a **Regular Expression (Regex)** function
    to change any special characters to blank characters. With a clean name, we appended
    it to `org.couchdb.user` and saved it to the document's `_id`. Whew! That was
    a mouthful.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了代码来设置CouchDB用户文档的所有值。收集`full_name, email`和`roles`的值非常简单；我们只需从提交的表单中获取这些值。设置`name`变得更加复杂，我们将用户名的提交值转换为小写字符串，然后使用**正则表达式（Regex）**函数将任何特殊字符更改为空字符。有了干净的名称，我们将其附加到`org.couchdb.user`并保存到文档的`_id`中。哇！这真是一大堆。
- en: Stepping quickly into the world of encryption, we set a static (and very unsafe)
    `salt`. Combining the `salt`, along with the plain-text password in a SHA-1 function,
    resulted in an encrypted password that was saved to our object's `password_sha`
    field. Next, we set the database of Sag by using `setDatabase`, so that we could
    talk to CouchDB's `_users` database. In order for us to communicate with the users,
    we needed to have administrator credentials. So, we used the `ADMIN_USER` and
    `ADMIN_PASSWORD` constants to log in to CouchDB. Finally, we used the HTTP verb
    `PUT` to create the document in CouchDB and rendered the home page for the user.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 迅速进入加密世界，我们设置了一个静态（非常不安全的）`salt`。将`salt`与明文密码结合在SHA-1函数中，得到了一个加密密码，保存在我们对象的`password_sha`字段中。接下来，我们使用`setDatabase`设置了Sag的数据库，以便我们可以与CouchDB的`_users`数据库进行通信。为了与用户进行通信，我们需要管理员凭据。因此，我们使用`ADMIN_USER`和`ADMIN_PASSWORD`常量登录到CouchDB。最后，我们使用HTTP动词`PUT`在CouchDB中创建文档，并为用户呈现主页。
- en: Let's test this all out and see what happens when we submit the signup form.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下，看看当我们提交注册表单时会发生什么。
- en: Open up the signup page by going to `http://localhost/verge/signup` in your
    browser.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开注册页面，访问`http://localhost/verge/signup`。
- en: Fill in the form, with **Full Name** set as `John Doe`, **Email** set as `<[john@example.com](mailto:john@example.com)>`
    , **Username** set as `johndoe`, and **Password** set as `temp123`. When you're
    finished, click on **Sign Up!**![What just happened?](graphics/3586_06_020.jpg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格，将**全名**设置为`John Doe`，**电子邮件**设置为`<[john@example.com](mailto:john@example.com)>`，**用户名**设置为`johndoe`，**密码**设置为`temp123`。完成后，点击**注册**！![刚刚发生了什么？](graphics/3586_06_020.jpg)
- en: Your user has been created! Let's go to Futon by going to `http://localhost:5984/_utils`,
    and look at the `_users` database for the new document.![What just happened?](graphics/3586_06_025.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的用户已创建！让我们通过访问`http://localhost:5984/_utils`，并查看`_users`数据库的新文档。![刚刚发生了什么？](graphics/3586_06_025.jpg)
- en: Perfect, everything should have saved correctly! When you are finished looking
    at this, delete the user by clicking on **Delete Document**. If you are not currently
    logged in as an admin user, you'll need to log in first before CouchDB will allow
    you to delete the document.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完美，一切应该已经保存正确！查看完毕后，点击**删除文档**删除用户。如果您当前未以管理员用户身份登录，您需要先登录，然后CouchDB才允许您删除文档。
- en: I had you delete the user because our password might as well be in plain-text
    if every user has a `salt` equal to `secret_salt`. In order for you to understand
    why this is so, let's take a step back and look at what SHA-1 does.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我让您删除用户，因为如果每个用户的“盐”等于“secret_salt”，我们的密码实际上就是明文。为了让您理解为什么会这样，让我们退一步看看SHA-1的作用。
- en: SHA-1
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SHA-1
- en: Storing plain-text passwords is one of the biggest no-no's when it comes to
    security. Because of that, we are using SHA-1 ([http://en.wikipedia.org/wiki/SHA-1](http://en.wikipedia.org/wiki/SHA-1))
    to create a cryptographic hash. SHA-1 is a cryptographic hash function created
    by the **National Security Agency (NSA)**. The basic principle behind SHA-1 is
    that we combine a password with a **salt** to make our password indistinguishable.
    **Salt** is a string of random bits that we combine with our password to make
    our password encrypted in a unique fashion.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全方面，存储明文密码是最大的禁忌之一。因此，我们使用SHA-1 ([http://en.wikipedia.org/wiki/SHA-1](http://en.wikipedia.org/wiki/SHA-1))来创建加密哈希。SHA-1是由**国家安全局（NSA）**创建的加密哈希函数。SHA-1的基本原理是我们将密码与**盐**结合在一起，使我们的密码无法辨认。**盐**是一串随机位，我们将其与密码结合在一起，使我们的密码以独特的方式加密。
- en: In the signup code we just wrote, we skipped over something pretty important.
    Our `salt` was being set to `secret_salt` every time. What we really need to do
    is create a random `salt` for each password.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚刚编写的注册代码中，我们忽略了一些非常重要的事情。我们的“盐”每次都被设置为“secret_salt”。我们真正需要做的是为每个密码创建一个随机的“盐”。
- en: In order to create the random salt, we can use CouchDB's RESTful JSON API. Couch
    provides a resource at `http://localhost:5984/_uuids` that, when called, will
    return a unique `UUID` for us to use. Each `UUID` is a long and random string,
    which is exactly what a salt needs! Sag makes getting a UUID super easy with the
    help of a function called `generateIDs`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建随机盐，我们可以使用CouchDB的RESTful JSON API。Couch在`http://localhost:5984/_uuids`提供了一个资源，当调用时，将为我们返回一个唯一的`UUID`供我们使用。每个`UUID`都是一个长而随机的字符串，这正是盐所需要的！Sag通过一个名为`generateIDs`的函数非常容易地获取UUID。
- en: 'Let''s update our signup code to reflect what we just talked about. Open `index.php`,
    and change the setting of the `salt` value to match the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们的注册代码，以反映我们刚刚讨论的内容。打开`index.php`，并更改`盐`值的设置以匹配以下内容：
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Testing the signup process again
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 再次测试注册流程
- en: Now that we've fixed the insecurities of our salt, let's go back and try the
    signup process again.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解决了盐的不安全性，让我们回去再试一次注册流程。
- en: Open up the signup page by going to `http://localhost/verge/signup` in your
    browser.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在浏览器中转到`http://localhost/verge/signup`来打开注册页面。
- en: Fill in the form, with **Full Name** being `John Doe`, **Email** being `<[john@example.com](mailto:john@example.com)>`
    , **Username** being `johndoe`, and **Password** being `temp123`. When you're
    finished, click on **Sign Up!**.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格，**全名**为`John Doe`，**电子邮件**为`<john@example.com>`，**用户名**为`johndoe`，**密码**为`temp123`。完成后，点击**注册**。
- en: Your user has been created! Let's go to Futon by going to `http://localhost:5984/_utils`,
    and look for our new document in the `_users` database. This time our `salt` is
    random and unique!![Testing the signup process again](graphics/3586_06_027.jpg)
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的用户已创建！让我们通过转到`http://localhost:5984/_utils`，并在`_users`数据库中查找我们的新文档来到Futon。这次我们的“盐”是随机且唯一的！[再次测试注册流程](graphics/3586_06_027.jpg)
- en: Refactoring the signup process
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构注册流程
- en: As I mentioned earlier, we are going to refactor this code into clean functions
    inside our user class, instead of it sitting directly in `index.php`. We want
    to reserve using `index.php` for handling routes, passing values, and rendering
    views.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，我们将把这段代码重构为干净的函数，放在我们的用户类内部，而不是直接放在`index.php`中。我们希望保留`index.php`用于处理路由、传递值和渲染视图。
- en: Time for action — cleaning up the signup process
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-清理注册流程
- en: Let's clean up our signup code by creating a public function, called `signup`,
    inside the `User` class.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`User`类内创建一个名为`signup`的公共函数来清理我们的注册代码。
- en: Open `classes/user.php`, and create a `public` function for signup.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`classes/user.php`，并创建一个用于注册的`public`函数。
- en: '[PRE23]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Enter the code to match the code below. It's almost identical to the code that
    we entered in the last section, except that instead of referencing `$user`, we
    are referencing `$this`. You'll also notice that `full_name` and `email` aren't
    located in this function; you'll see them in just a second.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码以匹配下面的代码。它几乎与我们在上一节输入的代码相同，只是不再引用`$user`，而是引用`$this`。您还会注意到`full_name`和`email`不在这个函数中；您马上就会看到它们。
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open up `index.php`, and clean up the signup route so that it matches the following
    code:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`，清理注册路由，使其与以下代码匹配：
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: What just happened?
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a public function, called `signup`, that will house all of the signup
    code needed for our users to sign up. We then copied much of the code from the
    `index.php` signup route. You'll notice that there are some new things in there
    that we didn't see before. For instance, all references to `$user` have been changed
    to `$this`, because all of the variables we are using are attached to the current
    user object. You'll also notice that, at the beginning, we created a new `Bones`
    object so that we could use it. We also created Sag, which we've connected to
    Bones, which we were able to initialize without causing any overheard, because
    we are using the singleton pattern. Remember that the singleton pattern allows
    us to call the same object that we are using elsewhere on this request without
    creating a new one. Finally, we went back to the `index.php` file and simplified
    our signup code route so that we are only dealing with values that are coming
    directly from the forms. We then passed the untouched username and password through
    the signup function, so we could process them and execute the signup code.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`signup`的公共函数，它将包含我们的用户注册所需的所有注册代码。然后我们从`index.php`注册路由中复制了大部分代码。你会注意到里面有一些以前没有看到的新东西。例如，所有对`$user`的引用都已更改为`$this`，因为我们使用的所有变量都附加到当前用户对象上。你还会注意到，在开始时，我们创建了一个新的`Bones`对象，以便我们可以使用它。我们还创建了Sag，我们已经连接到Bones，我们能够初始化而不会造成任何开销，因为我们使用了单例模式。请记住，单例模式允许我们在此请求中调用我们在其他地方使用的相同对象，而不创建新对象。最后，我们回到`index.php`文件，并简化了我们的注册代码路由，以便我们只处理直接来自表单的值。然后我们通过注册函数传递了未经修改的用户名和密码，以便我们可以处理它们并执行注册代码。
- en: Our signup code is now clean and operating on the class level and out of our
    application's hair. But, if you were to test our form a bit, you would realize
    that it's not foolproof yet.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的注册代码现在清晰并且在类级别上运行，并且不再影响我们的应用程序。但是，如果你尝试测试我们的表单，你会意识到它还不够完善。
- en: Exception handling and resolving errors
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常处理和解决错误
- en: 'If you were to try to go back to your signup form and save another document
    with the name `John Doe`, you would see a pretty unfriendly error page that looks
    something similar to the following screenshot:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图返回到你的注册表单并保存另一个名为`John Doe`的文档，你会看到一个相似于以下截图的相当不友好的错误页面：
- en: '![Exception handling and resolving errors](graphics/3586_06_030.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![异常处理和解决错误](graphics/3586_06_030.jpg)'
- en: If you are using a browser other than Chrome, you probably received a different
    message, but the result is still the same. Something bad happened that we didn't
    expect, and even worse, we aren't capturing these exceptions.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Chrome以外的浏览器，你可能收到了不同的消息，但结果仍然是一样的。发生了我们没有预料到的不好的事情，更糟糕的是，我们没有捕获这些异常。
- en: 'What happens when something goes wrong? How will we figure out what broke?
    The answer is: we look at the logs.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现问题时会发生什么？我们如何找出出了什么问题？答案是：我们查看日志。
- en: Deciphering error logs
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解读错误日志
- en: When PHP and Apache are working together, they produce a lot of logs for us
    to look at. Some are access-level logs, and others are error-level. So let's see
    if we can investigate what's happening here by looking at the Apache error log.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 当PHP和Apache一起工作时，它们会为我们产生大量的日志。有些是访问级别的日志，而另一些是错误级别的。所以让我们看看是否可以通过查看Apache错误日志来调查这里发生了什么。
- en: Time for action — examining Apache's log
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——检查Apache的日志
- en: Let's start by finding Apache's error log.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始找Apache的错误日志。
- en: Open Terminal.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Run the following command to ask Apache''s `config` file where it''s saving
    the logs to:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令询问Apache的`config`文件保存日志的位置：
- en: '[PRE26]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Terminal will return something similar to the following:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端会返回类似以下的内容：
- en: '[PRE27]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Retrieve the last few lines of the log by running the following command:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令检索日志的最后几行：
- en: '[PRE28]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The log will show you a bunch of things, but the most important message is this
    one, that says PHP `Fatal error`. Yours might be slightly different, but the overall
    message is the same.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志会显示很多东西，但最重要的消息是这个，它说PHP`致命错误`。你的消息可能略有不同，但总体消息是一样的。
- en: '[PRE29]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: What just happened?
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We asked Apache where it was storing the logs, once we found out where the log
    file was being saved. We used a `tail` command to return the last few lines of
    the Apache log.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们询问Apache它存储日志的位置，一旦我们找到日志文件的保存位置。我们使用`tail`命令返回Apache日志的最后几行。
- en: Note
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are a variety of ways to read logs that we won't go deep into, but do
    what makes you feel comfortable. You can research more on `tail` by searching
    the Internet, or you can open logs in the console application that comes pre-installed
    on your Mac OSX machine.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样的方法来阅读日志，我们不会深入讨论，但你可以选择让自己感到舒适的方式。你可以通过搜索互联网来研究`tail`，或者你可以在预装在你的Mac OSX机器上的控制台应用程序中打开日志。
- en: 'Looking at the PHP Fatal error that we received is pretty confusing. If you
    start looking deeper into this, you''ll see that it''s a CouchDB error. To be
    more specific, the main line in this error is:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们收到的PHP致命错误相当令人困惑。如果你开始深入研究，你会发现这是一个CouchDB错误。更具体地说，这个错误的主要行是：
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This message means that CouchDB isn't happy with what we are passing to it,
    and we aren't handling the exception that Sag is throwing to us in the form of
    `SagCouchException. SagCouchException` is a class that will help us decipher exceptions
    thrown by CouchDB, but in order to do that, we'll need to know what status code
    is being passed back by CouchDB.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这个消息意味着CouchDB对我们传递给它的内容不满意，而且我们没有处理Sag以`SagCouchException`形式抛出的异常。`SagCouchException`是一个类，将帮助我们解读CouchDB抛出的异常，但为了做到这一点，我们需要知道CouchDB返回的状态码是什么。
- en: In order to get the status code, we'll need to look at our CouchDB logs.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取状态码，我们需要查看我们的CouchDB日志。
- en: 'Time for action : Examine CouchDB''s log'
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间：检查CouchDB的日志
- en: Since we all installed CouchDB the same way with Homebrew, we can be sure that
    our CouchDB logs all live in the same location. With that in mind, let's look
    at our CouchDB log.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们都是用Homebrew相同的方式安装了CouchDB，我们可以确保我们的CouchDB日志都在同一个位置。考虑到这一点，让我们看看我们的CouchDB日志。
- en: Open Terminal.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Retrieve the last few lines of the log by running the following command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令检索日志的最后几行：
- en: '[PRE31]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Terminal will return something similar to the following:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端将返回类似以下内容：
- en: '[PRE32]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: What just happened?
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used a `tail` command to return the last few lines of the CouchDB log.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`tail`命令返回CouchDB日志的最后几行。
- en: The first record you'll notice is `/uuids?count=1`, which is us grabbing the
    UUIDs for `salt` in our `signup` function. Notice that it returned a `200` status,
    which means that it executed successfully.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到的第一条记录是`/uuids?count=1`，这是我们在`signup`函数中抓取`salt`的UUID。请注意，它返回了`200`状态，这意味着它执行成功。
- en: The next line says`'PUT' /_users/org.couchdb.user:johndoe`, and it returned
    a `409` response. The `409` response means that there was an update conflict,
    which is due to the fact that the name we are passing to the user is the same
    as the one that already exists. This should be easy enough for us to fix, but
    we first need to talk about catching errors.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行说`'PUT' /_users/org.couchdb.user:johndoe`，并返回了`409`响应。`409`响应意味着存在更新冲突，这是因为我们传递给用户的名称与已存在的名称相同。这应该很容易解决，但首先我们需要讨论如何捕获错误。
- en: Catching errors
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获错误
- en: Luckily, catching errors is relatively easy with the help of our friendly `try...catch`
    statements. `try...catch` statements allow you to test a block of code for errors.
    The `try` block contains code that you are attempting to run, and if a problem
    occurs, the `catch` block is executed.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，借助我们友好的`try...catch`语句，捕获错误相对容易。`try...catch`语句允许您测试一段代码块是否存在错误。`try`块包含您要尝试运行的代码，如果出现问题，将执行`catch`块。
- en: 'The syntax of a `try...catch` statement looks similar to the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`try...catch`语句的语法看起来类似于以下内容：'
- en: '[PRE33]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As I mentioned before, Sag includes an exception class called `SagCouchException`.
    This class gives us the ability to see how CouchDB responded and then we can take
    action accordingly.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，Sag包括一个名为`SagCouchException`的异常类。这个类让我们能够看到CouchDB的响应，然后我们可以相应地采取行动。
- en: Time for action — handling document update conflicts using SagCouchException
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 使用SagCouchException处理文档更新冲突
- en: We determined in the last section that our code is breaking due to a `409` response.
    So, let's adjust the signup function in our `classes/user.php` file to handle
    the exception using `SagCouchException`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中确定，我们的代码由于`409`响应而中断。因此，让我们调整`classes/user.php`文件中的注册功能，以使用`SagCouchException`处理异常。
- en: '[PRE34]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: What just happened?
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used a `try...catch` statement to resolve the duplicate document update conflict
    that was triggered. By casting it with `(SagCouchException $e)`, we are telling
    it to only catch `SagCouchExceptions` for now that come through. Once this exception
    is caught, we are checking to see what code was returned. If it's a code of `409`,
    we are setting an `error` variable with an error message. Then we need to re-display
    the user/signup form, so that the user has an opportunity to try the sign up process
    again. To make sure that no more code is executed after this error, we used the
    `exit` command so that the application stops right where it is.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`try...catch`语句来解决触发的重复文档更新冲突。通过将其转换为`(SagCouchException $e)`，我们告诉它现在只捕获通过的`SagCouchExceptions`。一旦捕获到这个异常，我们就会检查返回的代码是什么。如果是`409`的代码，我们将设置一个带有错误消息的`error`变量。然后我们需要重新显示用户/注册表单，以便用户有机会再次尝试注册流程。为了确保在此错误之后不再执行任何代码，我们使用`exit`命令，以便应用程序停在那里。
- en: We just set an `error` variable. Let's talk about how we can display this variable.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚设置了一个`error`变量。让我们讨论如何显示这个变量。
- en: Showing alerts
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示警报
- en: In our application, we will display standard notifications in response to user
    interaction, which we'll call alerts. We just set an error variable to be used
    in an error alert, but we also would like to be able to show a success message.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将根据用户交互显示标准通知，我们将其称为警报。我们刚刚设置了一个错误变量，用于错误警报，但我们也希望能够显示成功消息。
- en: Time for action — showing alerts
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 显示警报
- en: In this section, we'll use our existing variables in bones to allow us to show
    alert messages to our users.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用我们现有的变量在bones中允许我们向用户显示警报消息。
- en: Open `lib/bones.php` and create a new function called `display_alert()`. This
    function will be called to see if the `alert` variable is set. If the `alert`
    variable is set, we will echo some HTML to show the alert box on the layout.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`lib/bones.php`并创建一个名为`display_alert()`的新函数。将调用此函数以查看`alert`变量是否设置。如果设置了`alert`变量，我们将回显一些HTML以在布局上显示警报框。
- en: '[PRE35]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Add code to `layout.php`, right inside of the container `div` to display the
    Flash call the `display_flash` function.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`layout.php`中添加代码，就在容器`div`内部显示Flash调用`display_flash`函数。
- en: '[PRE36]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now that we've added these Flash messages, let's go back to our signup `POST`
    route in `index.php` and add back in a Flash message that thanks the user for
    signing up.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经添加了这些Flash消息，让我们回到`index.php`中的注册`POST`路由，并添加一个Flash消息，感谢用户注册。
- en: '[PRE37]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: What just happened?
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a function called `display_alert` that checked to see if a variable
    with the passed variable was set. If it was set, then we displayed the contents
    of the variable in an alert box with help from Bootstrap. We then added two lines
    of code to `layout.php`, so we can display Flash messages for errors and success.
    Finally, we added a success Flash message to our signup process.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`display_alert`的函数，用于检查传递变量的变量是否设置。如果设置了，我们将借助Bootstrap在警报框中显示变量的内容。然后我们在`layout.php`中添加了两行代码，以便我们可以显示错误和成功的Flash消息。最后，我们为我们的注册流程添加了一个成功的Flash消息。
- en: Let's test this all out.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下。
- en: Go back and try to sign up for a user with the username of `johndoe` again.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回并尝试再次注册用户名为`johndoe`的用户。
- en: 'You''ll see this friendly error message, informing you of a problem:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到这个友好的错误消息，告诉你有问题：
- en: '![What just happened?](graphics/3586_06_032.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![刚刚发生了什么？](graphics/3586_06_032.jpg)'
- en: Now, let's test the success alert message. Change the username to `johndoe2`.
    Click on **Sign Up!**, and you'll retrieve a nice and green alert.![What just
    happened?](graphics/3586_06_035.jpg)
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们测试一下成功的警报消息。将用户名更改为`johndoe2`。点击**注册！**，你将收到一个漂亮的绿色警报。![刚刚发生了什么？](graphics/3586_06_035.jpg)
- en: Even with these simple alerts, our signup form isn't perfect. Random exceptions
    and errors could occur, and we wouldn't be able to handle them. Even more concerning
    is that we aren't requiring fields in the form to be filled out. These items need
    to be on our radar, but we're not going to be able to cover all of that in this
    book.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使有了这些简单的警报，我们的注册表单还不完美。随机的异常和错误可能会发生，我们无法处理。更令人担忧的是，我们并没有要求表单中的字段填写。这些项目需要在我们的视线范围内，但我们无法在本书中涵盖所有这些。
- en: Let's move on to talk about user authentication.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续讨论用户认证。
- en: User authentication
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户认证
- en: 'Now that we''ve created users, we definitely need to find a way for them to
    log in to our system. Luckily, CouchDB and Sag will really do a lot of the heavy
    lifting for us in this area. In this section we will:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了用户，我们肯定需要找到一种让他们登录到我们系统的方法。幸运的是，CouchDB和Sag在这个领域真的会为我们做很多繁重的工作。在这一部分，我们将：
- en: Set up a login form
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置登录表单
- en: Learn about sessions, cookies, and how CouchDB and Sag handle authentication
    for us
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解会话、cookie，以及CouchDB和Sag如何处理我们的认证
- en: Add support for users to log out
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加支持用户登出
- en: Handle the UI differently for logged in and not logged in users
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为已登录和未登录的用户不同处理UI
- en: Setting up for the login form
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置登录表单
- en: Let's create some login forms so that our users can log in to our website and
    use their newly created accounts.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一些登录表单，这样我们的用户就可以登录到我们的网站并使用他们新创建的账户。
- en: Have a go hero — setting up the routes and forms for login
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试吧——设置登录的路由和表单
- en: We've gone through the process of creating pages, setting up routes, and creating
    forms a few times before. So, let's see if you can give it a shot by yourself
    this time. I won't leave you completely without help. I'll first tell you what
    you need to try to do, and then when you are finished, we'll review and make sure
    our code matches up.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经多次经历了创建页面、设置路由和创建表单的过程。所以，让我们看看这次你能否自己尝试一下。我不会完全不帮助你。我会先告诉你需要尝试做什么，然后当你完成时，我们会进行回顾，确保我们的代码匹配起来。
- en: 'Here''s what you need to do:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的是：
- en: Create a new page called `user/login.php`.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`user/login.php`的新页面。
- en: Create new `GET` and `POST` routes for the login page in the `index.php` file.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.php`文件中为登录页面创建新的`GET`和`POST`路由。
- en: Tell the `GET` route of the login page to render the `user/login` view.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉登录页面的`GET`路由渲染`user/login`视图。
- en: Create a form with the `username` and `password` fields using `user/signup.php`
    as a guide.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`user/signup.php`作为指南创建一个包含`username`和`password`字段的表单。
- en: Add fields called `username` and `password` using the Bootstrap helper and a
    `submit` button.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Bootstrap助手和`submit`按钮添加名为`username`和`password`的字段。
- en: While you are doing that, I'm going to watch some TV. Turn over to the next
    page when you're ready, and we'll see how it went!
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在你这样做的时候，我会去看电视。当你准备好了，翻到下一页，我们看看进展如何！
- en: Good job! I hope you were able to do that without needing too much help. If
    you needed to go back and look at the old code for help, don't worry, as that's
    what a lot of developers end up doing when they are stuck. Let's go through and
    see how your code matches up to what I have.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我希望你能够在不需要太多帮助的情况下完成。如果你需要回头看旧代码寻求帮助，不要担心，因为当开发者陷入困境时，很多人最终都会这样做。让我们看看你的代码与我的代码匹配程度如何。
- en: 'The addition to this, your `index.php` file, should look similar to the following:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你的`index.php`文件应该类似于以下内容：
- en: '[PRE38]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Your `views/user/login.php` page should look similar to the following:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 你的`views/user/login.php`页面应该类似于以下内容：
- en: '[PRE39]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Make sure to update your code to what I have if it's different, so our code
    matches up down the road.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将你的代码更新到与我的相匹配，这样我们的代码在未来能够匹配起来。
- en: Logging in and logging out
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录和登出
- en: Now that we have the forms ready to go, let's talk about what we need to do
    to make the form actually work. Let's quickly talk about what we are trying to
    accomplish in the login process.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好表单了，让我们谈谈我们需要做什么才能让表单真正起作用。让我们快速谈谈我们在登录过程中要实现的目标。
- en: Sag will connect to the CouchDB `_users` database.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sag将连接到CouchDB的`_users`数据库。
- en: Sag will pass the login information from our PHP directly to CouchDB.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sag将从我们的PHP直接将登录信息传递给CouchDB。
- en: If the login is successful, CouchDB will pass back a cookie that says you are
    authenticated.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果登录成功，CouchDB将返回一个认证的cookie。
- en: We'll then query CouchDB to grab the currently logged-in username and save it
    to a session variable for later use.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将查询CouchDB以获取当前登录的用户名，并将其保存到会话变量中以供以后使用。
- en: If you've been developing with other databases for a while, you'll immediately
    see what's so cool about the login process. CouchDB is handling most of the authentication
    problems that we usually have to handle ourselves!
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经使用其他数据库开发了一段时间，你会立刻看到登录过程有多酷。CouchDB正在处理我们通常需要自己处理的大部分认证问题！
- en: Let's go through the login functionality. Luckily, it's much easier than the
    signup process.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看登录功能。幸运的是，它比注册过程要简单得多。
- en: Time for action — adding functionality for users to log in
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——为用户添加登录功能
- en: We're going to go through this slowly, but I think you're going to love how
    quickly we're able to add this functionality with all of the code we've written
    so far.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将慢慢地进行这个过程，但我认为你会喜欢我们能够如此快速地添加这个功能，因为我们迄今为止编写的所有代码。
- en: Open `classes/user.php`.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`classes/user.php`。
- en: Create a `public` function called `login` to which we can pass our plain-text
    `$password` as a parameter.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`login`的`public`函数，我们可以将我们的明文`$password`作为参数传递。
- en: '[PRE40]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Create a `try...catch` statement for our login code to live in. In the `catch`
    block, we are going to catch the error code `401`. If it is triggered, we want
    to tell the user that their login was incorrect.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的登录代码创建一个`try...catch`语句。在`catch`块中，我们将捕获错误代码`401`。如果触发了错误代码，我们希望告诉用户他们的登录是不正确的。
- en: '[PRE41]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Add code to start the session, and then to pass the username and password into
    CouchDB through Sag. When the user is successfully logged in, grab the current
    user's username from CouchDB.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加代码来启动会话，然后通过Sag将用户名和密码传递到CouchDB。当用户成功登录时，从CouchDB获取当前用户的用户名。
- en: '[PRE42]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: What just happened?
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a `public` function called `login` in our `user` class that will
    allow users to log in. We then created a new reference to Bones so that we can
    access Sag. In order to handle invalid login credentials, we created a `try...catch`
    block and moved onto handling the `catch` block first. This time, we are checking
    against an error code of `401`. If the error code matched up, we set the `error`
    variable to display an error message, rendered the login page, and finally exited
    the current code.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`user`类中创建了一个名为`login`的`public`函数，允许用户登录。然后我们创建了一个新的Bones引用，以便我们可以访问Sag。为了处理无效的登录凭据，我们创建了一个`try...catch`块，并先处理`catch`块。这次，我们检查错误代码是否为`401`。如果错误代码匹配，我们设置`error`变量来显示错误消息，渲染登录页面，最后退出当前代码。
- en: Next, we worked on the login code by passing the username and the plain-text
    password to the login method of Sag, along with the setting `Sag::$AUTH_COOKIE`.
    This parameter is telling us to use CouchDB's cookie authentication. By using
    cookie authentication, we can handle authentication without having to pass the
    username and password each time.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过将用户名和明文密码传递给Sag的登录方法来处理登录代码，同时设置`Sag::$AUTH_COOKIE`。这个参数告诉我们使用CouchDB的cookie身份验证。通过使用cookie身份验证，我们可以处理身份验证，而无需每次传递用户名和密码。
- en: Behind the scenes, what's happening is that our username and password are being
    posted to the `/_session` URL. If the login was a success, it will return a cookie
    that we can use for each request from here on, in place of the username and password.
    Luckily, Sag handles all of that for us!
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，正在发生的是我们的用户名和密码被发布到`/_session` URL。如果登录成功，它将返回一个cookie，我们可以在此之后的每个请求中使用它，而不是用户名和密码。幸运的是，Sag为我们处理了所有这些！
- en: 'Next, we initialized a session with the `session_start` function, which allows
    us to set session variables that persist as long as our session exists. We then
    set a session variable for the username equal to the username of the currently
    logged in user. We did this by using Sag to grab the session information using
    `$bones->couch->getSession().We` then grabbed the body of the response with `->body()`
    and finally grabbed the current user with `userCtx` and, one step further, to
    grab the `username` attribute. This all resulted in one line of code as follows:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`session_start`函数初始化了一个会话，这允许我们设置会话变量，只要我们的会话存在，它就会持续存在。然后，我们为用户名设置了一个会话变量，等于当前登录用户的用户名。我们通过使用Sag来获取会话信息，使用`$bones->couch->getSession()`。然后使用`->body()`获取响应的主体，最后使用`userCtx`获取当前用户，并进一步获取`username`属性。这一切都导致了一行代码，如下所示：
- en: '[PRE43]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Finally, we used `session_write_close` to write the session variable and close
    down the session. This will increase the speed and decrease the chances of locking.
    Don't worry; by calling `session_start()` again, we can retrieve our `session`
    variables again.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`session_write_close`来写入会话变量并关闭会话。这将提高速度并减少锁定的机会。别担心；通过再次调用`session_start()`，我们可以再次检索我们的`session`变量。
- en: Finally, we need to add the login function to our `post` route in `index.php`.
    Let's do that quickly together.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将登录函数添加到`index.php`中的`post`路由。让我们一起快速完成。
- en: '[PRE44]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We could go and test this right now, but let's finish out a few more things
    so that we can fully test what's going on here.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以去测试这个，但让我们完成更多的事情，以便完全测试这里发生了什么。
- en: Time for action – adding functionality for users to log out
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-为用户添加注销功能
- en: I bet you thought the login script was pretty easy. Wait until you see how easy
    it is for us to allow users to log out.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌你认为登录脚本非常简单。等到你看到我们如何让用户注销时，你会觉得更容易。
- en: Open `classes/user.php`, and create a `public static` function called `logout.`
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`classes/user.php`，创建一个名为`logout`的`public static`函数。
- en: '[PRE45]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Add a route into the `index.php` file, and have it call the `logout` function.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.php`文件中添加一个路由，并调用`logout`函数。
- en: '[PRE46]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Notice that we are calling a new feature inside of Bones `a `redirect` function.
    In order for this to work, let's add a quick new function at the bottom of our
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，我们在Bones内部调用了一个新功能`redirect`函数。为了使其工作，让我们在底部添加一个快速的新功能
- en: '[PRE47]`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE47]`'
- en: '`What just happened?`'
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`刚刚发生了什么？`'
- en: '`We added a `public static` function called `logout`. The reason we made it
    `public static` is that it really doesn''t matter to us which user is currently
    logged in. We just need to perform some simple session-level operations. First,
    we created a `$bones` instantiation as usual, but then, the next part is pretty
    interesting, so we set `$bones->couch->login(null, null)`. By doing this, we are
    making the current user an anonymous user, effectively logging them out. Then,
    we called `session_start` and `session_destroy.` Remember that with `session_start`,
    we are making our session accessible, then we are destroying it, which removes
    all the data associated with the current session.`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`我们添加了一个名为`logout`的`public static`函数。我们将其设置为`public static`的原因是，我们目前登录的用户对我们来说并不重要。我们只需要执行一些简单的会话级操作。首先，我们像往常一样创建了一个`$bones`实例，但接下来的部分非常有趣，所以我们设置了`$bones->couch->login(null,
    null)`。通过这样做，我们将当前用户设置为匿名用户，有效地注销了他们。然后，我们调用了`session_start`和`session_destroy`。请记住，通过`session_start`，我们使我们的会话可访问，然后我们销毁它，这将删除与当前会话相关的所有数据。'
- en: '`After we were done with the `login` function, we opened up `index.php` and
    made a call to our `public static` function using `User::logout().``'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`在完成`login`函数后，我们打开了`index.php`，并调用了我们的`public static`函数，使用`User::logout()`。'
- en: '`Finally, we used a redirect function that we added into the `index.php` file.
    So, we quickly added a function to Bones, which would allow us to redirect a user
    to a route by using `make_route.``'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用了一个重定向函数，将其添加到了`index.php`文件中。因此，我们迅速在Bones中添加了一个函数，这样就可以使用`make_route`将用户重定向到一个路由。
- en: '`Handling the current user`'
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理当前用户
- en: '`We''ll really want to be able to determine if a user is logged in or not and
    change thenavigation accordingly. Luckily, we can accomplish this in just a few
    lines of code.`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真的希望能够确定用户是否已登录，并相应地更改导航。幸运的是，我们可以在几行代码中实现这一点。
- en: '`# Time for action – handling the current user'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '# 行动时间 - 处理当前用户'
- en: With most of the pieces of the puzzle in place, let's go through the process
    of changing the layout for users, depending on if they are logged in or not.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分拼图已经就位，让我们来看看根据用户是否已登录来更改用户布局的过程。
- en: Let's add a function called `current_user` in `classes/user.php`, so that we
    can retrieve the current user's username from the session.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`classes/user.php`中添加一个名为`current_user`的函数，这样我们就可以从会话中检索当前用户的用户名。
- en: '[PRE48]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Add a public static function called `is_authenticated` into `classes/user.php`
    so we can see if the user is authenticated or not.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`classes/user.php`中添加一个名为`is_authenticated`的`public static`函数，以便我们可以查看用户是否已经认证。
- en: '[PRE49]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Now that we have our authentication in order, let's tighten up the navigation
    in `layout.php`, so that different navigation items are displayed depending on
    if the user is logged in or not.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们的身份验证已经就绪，让我们来收紧`layout.php`中的导航，以便根据用户是否已登录来显示不同的导航项。
- en: '[PRE50]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: What just happened?
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We started by creating a `public static` function called `current_user` that
    will retrieve the username that is stored inside the session. We then created
    another `public static` function called `is_authenticated`. This function checks
    `current_user` for a username, and, if it's available, the user is logged in.
    If it's not, the user is not currently logged in.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个名为`current_user`的`public static`函数，用于检索存储在会话中的用户名。然后我们创建了另一个名为`is_authenticated`的`public
    static`函数。该函数检查`current_user`是否有用户名，如果有，则用户已登录。如果没有，则用户当前未登录。
- en: Finally, we quickly went into our layout so that we could show links to home
    and log out if a user is logged in, and links to home, signup, login if the user
    is not currently logged in.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们迅速进入我们的布局，这样我们就可以在用户登录时显示首页和注销的链接，以及在用户当前未登录时显示首页、注册和登录的链接。
- en: 'Let''s test this out:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下：
- en: Open your browser to the login page by going to `http://localhost/verge/` login.
    Notice that the header is displaying **Home, Signup**, and **Login** for you because
    you aren't currently logged in.![What just happened?](graphics/3586_06_040.jpg)
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://localhost/verge/`登录页面在浏览器中打开。请注意，标题显示**首页、注册**和**登录**，因为您当前未登录。![刚刚发生了什么？](graphics/3586_06_040.jpg)
- en: Log in with the credentials of one of your user accounts. You'll receive a nice
    alert message, and the header changes to display **Home** and **Logout.**![What
    just happened?](graphics/3586_06_045.jpg)
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的一个用户帐户的凭据登录。您将收到一个很好的警报消息，并且标题更改为显示**首页**和**注销**。![刚刚发生了什么？](graphics/3586_06_045.jpg)
- en: Summary
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope you're blown away by how much we've been able to accomplish in this chapter.
    Our application is really starting to come together.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你对我们在本章中所取得的成就感到震惊。我们的应用程序真的开始成形了。
- en: 'Specifically, we covered:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们涵盖了：
- en: How to dramatically improve the interface by using Bootstrap from Twitter
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过使用Twitter的Bootstrap大大改善界面
- en: How to create additional fields on top of existing CouchDB user documents
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在现有CouchDB用户文档的基础上创建额外的字段
- en: How to handle errors and debug issues with logs
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何处理错误并通过日志调试问题
- en: How to completely build out the ability, so that users can sign up, log in,
    and log out of our application with the help of Sag and CouchDB
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何完全构建出用户可以使用Sag和CouchDB注册、登录和注销应用程序的能力
- en: This is just the beginning of our application. We still have a lot to do. In
    the next chapter, we will start to work on a user profile and work on the creation
    of new documents in CouchDB. These documents will be our users' posts.`
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是我们应用程序的开始。我们还有很多工作要做。在下一章中，我们将开始着手用户个人资料，并开始创建CouchDB中的新文档。这些文档将是我们用户的帖子。
