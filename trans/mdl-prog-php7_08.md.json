["```php\n**php bin/console generate:bundle --namespace=Foggyline/CustomerBundle**\n\n```", "```php\nnew Foggyline\\CustomerBundle\\FoggylineCustomerBundle()\n```", "```php\nfoggyline_customer:\n  resource: \"@FoggylineCustomerBundle/Resources/config/routing.xml\"\n  prefix:   /\n```", "```php\n**php bin/console generate:doctrine:entity**\n\n```", "```php\n**php bin/console doctrine:schema:update --force**\n\n```", "```php\n**php bin/console generate:doctrine:crud**\n\n```", "```php\nfoggyline_customer_customer:\n  resource: \"@FoggylineCustomerBundle/Controller/CustomerController.php\"\n  type:     annotation\n```", "```php\nfoggyline_customer:\n  entity:\n    class: FoggylineCustomerBundle:Customer\n  property: username\n```", "```php\nFoggyline\\CustomerBundle\\Entity\\Customer:\n  algorithm: bcrypt\n  cost: 12\n```", "```php\nfoggyline_customer:\n  anonymous: ~\n  provider: foggyline_customer\n  form_login:\n    login_path: foggyline_customer_login\n    check_path: foggyline_customer_login\n    default_target_path: customer_account\n  logout:\n    path:   /customer/logout\n    target: /\n```", "```php\n- { path: customer/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }\n- { path: customer/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }\n- { path: customer/forgotten_password, roles: IS_AUTHENTICATED_ANONYMOUSLY }\n- { path: customer/account, roles: ROLE_USER }\n- { path: customer/logout, roles: ROLE_USER }\n- { path: customer/, roles: ROLE_ADMIN }\n```", "```php\npublic function getSalt()\n{\n  return null;\n}\n\npublic function getRoles()\n{\n  return array('ROLE_USER');\n}\n\npublic function eraseCredentials()\n{\n}\n\npublic function serialize()\n{\n  return serialize(array(\n    $this->id,\n    $this->username,\n    $this->password\n  ));\n}\n\npublic function unserialize($serialized)\n{\n  list (\n    $this->id,\n    $this->username,\n    $this->password,\n  ) = unserialize($serialized);\n}\n```", "```php\n<service id=\"foggyline_customer.customer_orders\" class=\"Foggyline\\CustomerBundle\\Service\\CustomerOrders\">\n</service>\n```", "```php\nnamespace Foggyline\\CustomerBundle\\Service;\n\nclass CustomerOrders\n{\n  public function getOrders()\n  {\n    return array(\n      array(\n        'id' => '0000000001',\n        'date' => '23/06/2016 18:45',\n        'ship_to' => 'John Doe',\n        'order_total' => 49.99,\n        'status' => 'Processing',\n        'actions' => array(\n          array(\n            'label' => 'Cancel',\n            'path' => '#'\n          ),\n          array(\n            'label' => 'Print',\n            'path' => '#'\n          )\n        )\n      ),\n    );\n  }\n}\n```", "```php\n<service id=\"foggyline_customer.customer_menu\" class=\"Foggyline\\CustomerBundle\\Service\\Menu\\CustomerMenu\">\n  <argument type=\"service\" id=\"security.token_storage\"/>\n  <argument type=\"service\" id=\"router\"/>\n</service>\n```", "```php\nnamespace Foggyline\\CustomerBundle\\Service\\Menu;\n\nclass CustomerMenu\n{\n  private $token;\n  private $router;\n\n  public function __construct(\n    $tokenStorage,\n    \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router\n  )\n  {\n    $this->token = $tokenStorage->getToken();\n    $this->router = $router;\n  }\n\n  public function getItems()\n  {\n    $items = array();\n    $user = $this->token->getUser();\n\n    if ($user instanceof \\Foggyline\\CustomerBundle\\Entity\\Customer) {\n      // customer authentication\n      $items[] = array(\n        'path' => $this->router->generate('customer_account'),\n        'label' => $user->getFirstName() . ' ' . $user->getLastName(),\n      );\n      $items[] = array(\n        'path' => $this->router->generate('customer_logout'),\n        'label' => 'Logout',\n      );\n    } else {\n      $items[] = array(\n        'path' => $this->router->generate('foggyline_customer_login'),\n        'label' => 'Login',\n      );\n      $items[] = array(\n        'path' => $this->router->generate('foggyline_customer_register'),\n        'label' => 'Register',\n      );\n    }\n\n    return $items;\n  }\n}\n```", "```php\nnamespace Foggyline\\CustomerBundle\\DependencyInjection\\Compiler;\n\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n\nclass OverrideServiceCompilerPass implements CompilerPassInterface\n{\n  public function process(ContainerBuilder $container)\n  {\n    // Override the core module 'onsale' service\n    $container->removeDefinition('customer_menu');\n    $container->setDefinition('customer_menu', $container->getDefinition('foggyline_customer.customer_menu'));\n  }\n}\n```", "```php\nnamespace Foggyline\\CustomerBundle;\n\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Foggyline\\CustomerBundle\\DependencyInjection\\Compiler\\OverrideServiceCompilerPass;\n\nclass FoggylineCustomerBundle extends Bundle\n{\n  public function build(ContainerBuilder $container)\n  {\n    parent::build($container);;\n    $container->addCompilerPass(new OverrideServiceCompilerPass());\n  }\n}\n```", "```php\n/**\n * @Route(\"/register\", name=\"foggyline_customer_register\")\n */\npublic function registerAction(Request $request)\n{\n  // 1) build the form\n  $user = new Customer();\n  $form = $this->createForm(CustomerType::class, $user);\n\n  // 2) handle the submit (will only happen on POST)\n  $form->handleRequest($request);\n  if ($form->isSubmitted() && $form->isValid()) {\n\n    // 3) Encode the password (you could also do this via Doctrine listener)\n    $password = $this->get('security.password_encoder')\n    ->encodePassword($user, $user->getPlainPassword());\n    $user->setPassword($password);\n\n    // 4) save the User!\n    $em = $this->getDoctrine()->getManager();\n    $em->persist($user);\n    $em->flush();\n\n    // ... do any other work - like sending them an email, etc\n    // maybe set a \"flash\" success message for the user\n\n    return $this->redirectToRoute('customer_account');\n  }\n\n  return $this->render(\n    'FoggylineCustomerBundle:default:customer/register.html.twig',\n    array('form' => $form->createView())\n  );\n}\n```", "```php\n{% extends 'base.html.twig' %}\n{% block body %}\n  {{ form_start(form) }}\n  {{ form_widget(form) }}\n  <button type=\"submit\">Register!</button>\n  {{ form_end(form) }}\n{% endblock %}\n```", "```php\n/**\n * Creates a new Customer entity.\n *\n * @Route(\"/login\", name=\"foggyline_customer_login\")\n */\npublic function loginAction(Request $request)\n{\n  $authenticationUtils = $this->get('security.authentication_utils');\n\n  // get the login error if there is one\n  $error = $authenticationUtils->getLastAuthenticationError();\n\n  // last username entered by the user\n  $lastUsername = $authenticationUtils->getLastUsername();\n\n  return $this->render(\n    'FoggylineCustomerBundle:default:customer/login.html.twig',\n    array(\n      // last username entered by the user\n      'last_username' => $lastUsername,\n      'error'         => $error,\n    )\n  );\n}\n```", "```php\n{% extends 'base.html.twig' %}\n{% block body %}\n{% if error %}\n<div>{{ error.messageKey|trans(error.messageData, 'security') }}</div>\n{% endif %}\n\n<form action=\"{{ path('foggyline_customer_login') }}\" method=\"post\">\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"_username\" value=\"{{ last_username }}\"/>\n  <label for=\"password\">Password:</label>\n  <input type=\"password\" id=\"password\" name=\"_password\"/>\n  <button type=\"submit\">login</button>\n</form>\n\n<div class=\"row\">\n  <a href=\"{{ path('customer_forgotten_password') }}\">Forgot your password?</a>\n</div>\n{% endblock %}\n```", "```php\n/**\n * Finds and displays a Customer entity.\n *\n * @Route(\"/account\", name=\"customer_account\")\n * @Method({\"GET\", \"POST\"})\n */\npublic function accountAction(Request $request)\n{\n  if (!$this->get('security.authorization_checker')->isGranted('ROLE_USER')) {\n    throw $this->createAccessDeniedException();\n  }\n\n  if ($customer = $this->getUser()) {\n\n    $editForm = $this->createForm('Foggyline\\CustomerBundle\\Form\\CustomerType', $customer, array( 'action' => $this->generateUrl('customer_account')));\n    $editForm->handleRequest($request);\n\n    if ($editForm->isSubmitted() && $editForm->isValid()) {\n      $em = $this->getDoctrine()->getManager();\n      $em->persist($customer);\n      $em->flush();\n\n      $this->addFlash('success', 'Account updated.');\n      return $this->redirectToRoute('customer_account');\n    }\n\n    return $this->render('FoggylineCustomerBundle:default:customer/account.html.twig', array(\n    'customer' => $customer,\n    'form' => $editForm->createView(),\n    'customer_orders' => $this->get('foggyline_customer.customer_orders')->getOrders()\n    ));\n  } else {\n    $this->addFlash('notice', 'Only logged in customers can access account page.');\n    return $this->redirectToRoute('foggyline_customer_login');\n  }\n}\n```", "```php\n{% extends 'base.html.twig' %}\n{% block body %}\n<h1>My Account</h1>\n{{ form_start(form) }}\n<div class=\"row\">\n  <div class=\"medium-6 columns\">\n    {{ form_row(form.email) }}\n    {{ form_row(form.username) }}\n    {{ form_row(form.plainPassword.first) }}\n    {{ form_row(form.plainPassword.second) }}\n    {{ form_row(form.firstName) }}\n    {{ form_row(form.lastName) }}\n    {{ form_row(form.company) }}\n    {{ form_row(form.phoneNumber) }}\n  </div>\n  <div class=\"medium-6 columns\">\n    {{ form_row(form.country) }}\n    {{ form_row(form.state) }}\n    {{ form_row(form.city) }}\n    {{ form_row(form.postcode) }}\n    {{ form_row(form.street) }}\n    <button type=\"submit\">Save</button>\n  </div>\n</div>\n{{ form_end(form) }}\n<!-- customer_orders -->\n{% endblock %}\n```", "```php\n{% block customer_orders %}\n<h2>My Orders</h2>\n<div class=\"row\">\n  <table>\n    <thead>\n      <tr>\n        <th width=\"200\">Order Id</th>\n        <th>Date</th>\n        <th width=\"150\">Ship To</th>\n        <th width=\"150\">Order Total</th>\n        <th width=\"150\">Status</th>\n        <th width=\"150\">Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for order in customer_orders %}\n      <tr>\n        <td>{{ order.id }}</td>\n        <td>{{ order.date }}</td>\n        <td>{{ order.ship_to }}</td>\n        <td>{{ order.order_total }}</td>\n        <td>{{ order.status }}</td>\n        <td>\n          <div class=\"small button-group\">\n            {% for action in order.actions %}\n            <a class=\"button\" href=\"{{ action.path }}\">{{ action.label }}</a>\n            {% endfor %}\n          </div>\n        </td>\n      </tr>\n      {% endfor %}\n    /tbody>\n  </table>\n</div>\n{% endblock %}\n```", "```php\n/**\n * @Route(\"/logout\", name=\"customer_logout\")\n */\npublic function logoutAction()\n{\n\n}\n```", "```php\n/**\n * @Route(\"/forgotten_password\", name=\"customer_forgotten_password\")\n * @Method({\"GET\", \"POST\"})\n */\npublic function forgottenPasswordAction(Request $request)\n{\n\n  // Build a form, with validation rules in place\n  $form = $this->createFormBuilder()\n  ->add('email', EmailType::class, array(\n    'constraints' => new Email()\n  ))\n  ->add('save', SubmitType::class, array(\n    'label' => 'Reset!',\n    'attr' => array('class' => 'button'),\n  ))\n  ->getForm();\n\n  // Check if this is a POST type request and if so, handle form\n  if ($request->isMethod('POST')) {\n    $form->handleRequest($request);\n\n    if ($form->isSubmitted() && $form->isValid()) {\n      $this->addFlash('success', 'Please check your email for reset password.');\n\n      // todo: Send an email out to website admin or something...\n\n      return $this->redirect($this->generateUrl('foggyline_customer_login'));\n    }\n  }\n\n  // Render \"contact us\" page\n  return $this->render('FoggylineCustomerBundle:default:customer/forgotten_password.html.twig', array(\n      'form' => $form->createView()\n    ));\n}\n```", "```php\n{% extends 'base.html.twig' %}\n{% block body %}\n<div class=\"row\">\n  <h1>Forgotten Password</h1>\n</div>\n\n<div class=\"row\">\n  {{ form_start(form) }}\n  {{ form_widget(form) }}\n  {{ form_end(form) }}\n</div>\n{% endblock %}\n```", "```php\n<directory>src/Foggyline/CustomerBundle/Tests</directory>\n```", "```php\nnamespace Foggyline\\CustomerBundle\\Tests\\Service;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\n\nclass CustomerOrders extends KernelTestCase\n{\n  private $container;\n\n  public function setUp()\n  {\n    static::bootKernel();\n    $this->container = static::$kernel->getContainer();\n  }\n\n  public function testGetItemsViaService()\n  {\n    $orders = $this->container->get('foggyline_customer.customer_orders');\n    $this->assertNotEmpty($orders->getOrders());\n  }\n\n  public function testGetItemsViaClass()\n  {\n    $orders = new \\Foggyline\\CustomerBundle\\Service\\CustomerOrders();\n    $this->assertNotEmpty($orders->getOrders());\n  }\n}\n```", "```php\nnamespace Foggyline\\CustomerBundle\\Tests\\Service\\Menu;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\n\nclass CustomerMenu extends KernelTestCase\n{\n  private $container;\n  private $tokenStorage;\n  private $router;\n\n  public function setUp()\n  {\n    static::bootKernel();\n    $this->container = static::$kernel->getContainer();\n    $this->tokenStorage = $this->container->get('security.token_storage');\n    $this->router = $this->container->get('router');\n  }\n\n  public function testGetItemsViaService()\n  {\n    $menu = $this->container->get('foggyline_customer.customer_menu');\n    $this->assertNotEmpty($menu->getItems());\n  }\n\n  public function testGetItemsViaClass()\n  {\n    $menu = new \\Foggyline\\CustomerBundle\\Service\\Menu\\CustomerMenu(\n      $this->tokenStorage,\n      $this->router\n    );\n\n    $this->assertNotEmpty($menu->getItems());\n  }\n}\n```", "```php\n**phpunit src/Foggyline/CustomerBundle/Tests/Service/CustomerOrders.php**\n**phpunit src/Foggyline/CustomerBundle/Tests/Service/Menu/CustomerMenu.php**\n\n```", "```php\nnamespace Foggyline\\CustomerBundle\\Tests\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\nuse Symfony\\Component\\BrowserKit\\Cookie;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\n\nclass CustomerControllerTest extends WebTestCase\n{\n  private $client = null;\n\n  public function setUp()\n  {\n    $this->client = static::createClient();\n  }\n\n  public function testMyAccountAccess()\n  {\n    $this->logIn();\n    $crawler = $this->client->request('GET', '/customer/account');\n\n    $this->assertTrue($this->client->getResponse()->\n      isSuccessful());\n    $this->assertGreaterThan(0, $crawler->filter('html:contains(\"My Account\")')->count());\n  }\n\n  private function logIn()\n  {\n    $session = $this->client->getContainer()->get('session');\n    $firewall = 'foggyline_customer'; // firewall name\n    $em = $this->client->getContainer()->get('doctrine')->getManager();\n    $user = $em->getRepository('FoggylineCustomerBundle:Customer')->findOneByUsername('john@test.loc');\n    $token = new UsernamePasswordToken($user, null, $firewall, array('ROLE_USER'));\n    $session->set('_security_' . $firewall, serialize($token));\n    $session->save();\n    $cookie = new Cookie($session->getName(), $session->getId());\n    $this->client->getCookieJar()->set($cookie);\n  }\n}\n```", "```php\npublic function testRegisterForm()\n{\n  $crawler = $this->client->request('GET', '/customer/register');\n  $uniqid = uniqid();\n  $form = $crawler->selectButton('Register!')->form(array(\n    'customer[email]' => 'john_' . $uniqid . '@test.loc',\n    'customer[username]' => 'john_' . $uniqid,\n    'customer[plainPassword][first]' => 'pass123',\n    'customer[plainPassword][second]' => 'pass123',\n    'customer[firstName]' => 'John',\n    'customer[lastName]' => 'Doe',\n    'customer[company]' => 'Foggyline',\n    'customer[phoneNumber]' => '00 385 111 222 333',\n    'customer[country]' => 'HR',\n    'customer[state]' => 'Osijek',\n    'customer[city]' => 'Osijek',\n    'customer[postcode]' => '31000',\n    'customer[street]' => 'The Yellow Street',\n  ));\n\n  $this->client->submit($form);\n  $crawler = $this->client->followRedirect();\n  //var_dump($this->client->getResponse()->getContent());\n  $this->assertGreaterThan(0, $crawler->filter('html:contains(\"customer/login\")')->count());\n}\n```"]