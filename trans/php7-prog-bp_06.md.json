["```php\nGET /chat HTTP/1.1 \nHost: localhost \n**Upgrade: websocketConnection: upgrade** \nOrigin: http://localhost \n**Sec-WebSocket-Key: de7PkO6qMKuGvUA3OQNYiw==** \n**Sec-WebSocket-Protocol: chat** \n**Sec-WebSocket-Version: 13**\n\n```", "```php\nHTTP/1.1 101 Switching Protocols \nUpgrade: websocket \nConnection: Upgrade \nSec-WebSocket-Accept: BKb5cchTfWayrC7SKtvK5yW413s= \nSec-WebSocket-Protocol: chat \n\n```", "```php\n**$ composer init .**\n\n```", "```php\n**$ composer require cboden/ratchet**\n\n```", "```php\n'autoload': { \n  'PSR-4': { \n    'Packt\\Chp6\\Example': 'src/' \n  } \n} \n\n```", "```php\n$app = new \\Ratchet\\App('localhost', 8080, '0.0.0.0'); \n$app->run() \n\n```", "```php\n**$ php server.php**\n\n```", "```php\n**$ docker run --rm -v $PWD:/opt/app -p 8080:8080 php:7 php /opt/app/server.php**\n\n```", "```php\nnamespace Packt\\Chp6\\Example; \n\nuse Ratchet\\ConnectionInterface; \nuse Ratchet\\MessageComponentInterface; \n\nclass ReverseEchoComponent implements MessageComponentInterface \n{ \n    public function onOpen(ConnectionInterface $conn) \n    {} \n\n    public function onClose(ConnectionInterface $conn) \n    {} \n\n    public function onMessage(ConnectionInterface $sender, $msg) \n    {} \n\n    public function onError(ConnectionInterface $conn, \n                            Exception $e) \n    {} \n} \n\n```", "```php\npublic function onOpen(ConnectionInterface $conn) \n{ \n    echo \"new connection from \" . $conn->remoteAddress . \"\\n\"; \n} \n\npublic function onClose(ConnectionInterface $conn) \n{ \n    echo \"connection closed by \" . $conn->remoteAddress . \"\\n\"; \n} \n\n```", "```php\npublic function onMessage(ConnectionInterface $sender, $msg) \n{ \n    echo \"received message '$msg' from {$conn->remoteAddress}\\n\"; \n    $response = strrev($msg); \n    $sender->send($response); \n} \n\n```", "```php\n$app = new \\Ratchet\\App('localhost', 8080, '0.0.0.0'); \n**$app->route('/reverse', new Packt\\Chp6\\Example\\ReverseEchoComponent);** \n$app->run(); \n\n```", "```php\n**$ npm install -g wscat**\n\n```", "```php\n**$ wscat -o localhost --connect localhost:8080/reverse**\n\n```", "```php\n$loop = \\React\\EventLoop\\Factory::create(); \n\n```", "```php\n$app = new \\Ratchet\\App('localhost', 8080, '0.0.0.0', $loop) \n$app->run(); \n\n```", "```php\nnamespace Packt\\Chp6\\Example; \n\nuse Ratchet\\MessageComponentInterface; \nuse React\\EventLoop\\LoopInterface; \n\nclass PingCompoment extends MessageComponentInterface \n{ \n    private $loop; \n    private $users; \n\n    public function __construct(LoopInterface $loop) \n    { \n        $this->loop  = $loop; \n        $this->users = new \\SplObjectStorage(); \n    } \n\n    // ... \n} \n\n```", "```php\npublic function onOpen(ConnectionInterface $conn) \n{ \n **$this->users->attach($conn);** \n} \n\npublic function onClose(ConnectionInterface $conn) \n{ \n **$this->users->detach($conn);** \n} \n\n```", "```php\npublic function __construct(LoopInterface $loop) \n{ \n    $this->loop  = $loop; \n    $this->users = new \\SplObjectStorage(); \n\n **$i = 0;** \n **$this->loop->addPeriodicTimer(5, function() use (&$i) {** \n **foreach ($this->users as $user) {** \n **$user->send('Ping ' . $i);** \n **}** \n **$i ++;** \n **});** \n} \n\n```", "```php\n$loop = \\React\\EventLoop\\Factory::create(); \n$app = new \\Ratchet\\App('localhost', 8080, '0.0.0.0', $loop) \n**$app->route('/ping', new PingCompoment($loop));** \n$app->run(); \n\n```", "```php\nFROM php:7 \nRUN pecl install ev-beta && \\ \n    docker-php-ext-enable ev \nWORKDIR /opt/app \nCMD [\"/usr/local/bin/php\", \"server.php\"] \n\n```", "```php\n**$ docker build -t packt-chp6**\n**$ docker run -d --name chat-app -v $PWD:/opt/app -p 8080:8080 \n      packt-chp6**\n\n```", "```php\n{ \n    \"name\": \"packt-php7/chp6-chat\", \n    \"type\": \"project\", \n    \"authors\": [{ \n        \"name\": \"Martin Helmich\", \n        \"email\": \"php7-book@martin-helmich.de\" \n    }], \n    \"require\": { \n        \"php\": \">= 7.0.0\", \n        \"cboden/ratchet\": \"^0.3.4\" \n    }, \n    \"autoload\": { \n        \"psr-4\": { \n            \"Packt\\\\Chp6\": \"src/\" \n        } \n    } \n} \n\n```", "```php\n<?php \nrequire_once 'vendor/autoload.php'; \n\n$app = new \\Ratchet\\App('localhost', 8080, '0.0.0.0'); \n$app->run(); \n\n```", "```php\n**$ docker run --rm -v $PWD:/opt/app -p 8080:8080 packt-chp6**\n\n```", "```php\n**$ npm install -g bower**\n\n```", "```php\n{ \n    \"name\": \"packt-php7/chp6-chat\", \n    \"authors\": [ \n        \"Martin Helmich <php7-book@martin-helmich.de>\" \n    ], \n    \"private\": true, \n    \"dependencies\": { \n        \"bootstrap\": \"~3.3.6\" \n    } \n} \n\n```", "```php\n**$ bower install**\n\n```", "```php\n**$ docker run -d --name chat-web -v $PWD:/var/www -p 80:80 nginx**\n\n```", "```php\nnamespace Packt\\Chp6\\Chat; \n\nuse Ratchet\\MessageComponentInterface; \nuse Ratchet\\ConnectionInterface; \n\nclass ChatComponent implements MessageComponentInterface \n{ \n    public function onOpen(ConnectionInterface $conn) {} \n    public function onClose(ConnectionInterface $conn) {} \n    public function onMessage(ConnectionInterface $from, $msg) {} \n    public function onError(ConnectionInterface $conn, \\Exception $err) {} \n} \n\n```", "```php\n**private $users;** \n\npublic function __construct() \n{ \n **$this->users = new \\SplObjectStorage();** \n} \n\n```", "```php\npublic function onOpen(ConnectionInterface $conn) \n{ \n **echo \"user {$conn->remoteAddress} connected.\\n\";** \n **$this->users->attach($conn);** \n} \n\npublic function onClose(ConnectionInterface $conn) \n{ \n **echo \"user {$conn->remoteAddress} disconnected.\\n\";** \n **$this->users->detach($conn);**} \n\n```", "```php\npublic function onMessage(ConnectionInterface $from, $msg) \n{ \n **echo \"received message '$msg' from user {$from->remoteAddress}\\n\";**\n **foreach($this->users as $user) {** \n **if ($user != $from) {** \n **$user->send($msg);** \n **}** \n **}**} \n\n```", "```php\n$app = new \\Ratchet\\App('localhost', 8080, '0.0.0.0'); \n**$app->route('/chat', new \\Packt\\Chp6\\Chat\\ChatComponent);** \n$app->run(); \n\n```", "```php\n<!DOCTYPE html>\n<html> \n  <head> \n    <title>Chat application</title> \n **<script src=\"bower_components/jquery/dist/jquery.min.js\"></script>** \n **<script src=\"bower_components/bootstrap/dist/js/bootstrap.min.js\"></script>**\n **<link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.min.css\"/>** \n  </head> \n  <body> \n  </body> \n</html> \n\n```", "```php\n<head> \n  <title>Chat application</title> \n  <script src=\"bower_components/jquery/dist/jquery.min.js\"></script> \n  <script src=\"bower_components/bootstrap/dist/js/bootstrap.min.js\"></script> \n **<script src=\"js/app.js\"></script>** \n  <link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.min.css\"/> \n</head> \n\n```", "```php\n<div class=\"container\"> \n  <div class=\"row\"> \n    <div class=\"col-md-12\"> \n      <div class=\"input-group\"> \n        <input class=\"form-control\" type=\"text\" id=\"message\"  placeholder=\"Your message...\" /> \n        <span class=\"input-group-btn\"> \n          <button id=\"submit\" class=\"btn btn-primary\">Send</button> \n        </span> \n      </div> \n    </div> \n  </div> \n  <div class=\"row\"> \n    <div id=\"messages\"></div> \n  </div> \n</div> \n\n```", "```php\nvar connection = new WebSocket('ws://localhost:8080/chat'); \n\n```", "```php\nconnection.onopen = function() { \n    console.log('connection established'); \n} \n\nconnection.onclose = function() { \n    console.log('connection closed'); \n} \n\nconnection.onmessage = function(event) { \n    console.log('message received: ' + event.data); \n} \n\n```", "```php\nvar appendMessage = function(message, sentByMe) { \n    var text = sentByMe ? 'Sent at' : 'Received at'; \n     var html = $('<div class=\"msg\">' + text + ' <span class=\"date\"></span>: <span \n    class=\"text\"></span></div>'); \n\n    html.find('.date').text(new Date().toLocaleTimeString()); \n    html.find('.text').text(message); \n\n    $('#messages').prepend(html); \n} \n\n```", "```php\nconnection.onmessage = function(event) { \n    console.log('message received: ' + event.data); \n **appendMessage(event.data, false);** \n} \n\n```", "```php\n$(document).ready(function() { \n    $('#submit').click(function() { \n        var message = $('#message').val(); \n\n        if (message) { \n            console.log('sending message: \"' + message + '\"'); \n            connection.send(message); \n\n            appendMessage(message, true); \n        } \n    }); \n}); \n\n```", "```php\nconnection.onclose = function(event) { \n    console.error(e); \n    setTimeout(function() { \n        connection = new WebSocket('ws://localhost:8080/chat'); \n    }, 5000); \n} \n\n```", "```php\n**var interval;** \n\nconnection.onopen = function() { \n    console.log('connection established'); \n **interval = setInterval(function() {** \n **connection.send('ping');** \n **}, 120000);** \n} \n\nconnection.onclose = function() { \n    console.error(e); \n **clearInterval(interval);** \n    setTimeout(function() { \n        connection = new WebSocket('ws://localhost:8080/chat'); \n    }, 5000); \n} \n\n```", "```php\npublic function onMessage(ConnectionInterface $from, $msg) \n{ \n **if ($msg == 'ping') {** \n **return;** \n **}** \n\n    echo \"received message '$msg' from user {$from->remoteAddress}\\n\"; \n    foreach($this->users as $user) { \n        if ($user != $from) { \n            $user->send($msg); \n        } \n    } \n} \n\n```", "```php\n**$options = getopt('l:p:', ['listen:', 'port:']);** \n**$port = $options['port'] ?? $options['p'] ?? 8080;** \n**$addr = $options['listen'] ?? $options['l'] ?? '127.0.0.1';** \n\n$app = new \\Ratchet\\App('localhost', $port, $addr); \n$app->route('/chat', new \\Packt\\Chp6\\Chat\\ChatComponent); \n$app->run(); \n\n```", "```php\n**$ apt-get install supervisor**\n\n```", "```php\n[program:chat] \nnumprocs=4 \ncommand=php /path/to/application -port=80%(process_num)02d \nprocess_name=%(program_name)s-%(process_num)02d \nautostart=true \nautorestart=unexpected \n\n```", "```php\n**$ apt-get install nginx**\n\n```", "```php\nupstream chat { \n    server localhost:8000; \n    server localhost:8001; \n    server localhost:8002; \n    server localhost:8003; \n} \nserver { \n    listen 80; \n    server_name chat.example.com; \n\n    location /chat/ { \n        proxy_pass http://chat; \n        proxy_http_version 1.1; \n        proxy_set_header Upgrade $http_upgrade; \n        proxy_set_header Connection \"upgrade\"; \n    } \n\n    // Additional PHP-FPM configuration here \n    // ... \n} \n\n```", "```php\nnamespace Packt\\Chp6\\Http; \n\nuse Guzzle\\Http\\Message\\RequestInterface; \nuse Ratchet\\ConnectionInterface; \nuse Ratchet\\HttpServerInterface; \n\nclass HelloWorldServer implements HttpServerInterface \n{ \n    public function onOpen(ConnectionInterface $conn, RequestInterface $request = null) \n    {} \n\n    public function onClose(ConnectionInterface $conn) \n    {} \n\n    public function onError(ConnectionInterface $conn, \\Exception $e) \n    {} \n\n    public function onMessage(ConnectionInterface $from, $msg) \n    {} \n} \n\n```", "```php\npublic function onOpen(ConnectionInterface $conn, RequestInterface $request = null) \n{ \n   $conn->send(\"HTTP/1.1 200 OK\\r\\n\");\n    $conn->send(\"Content-Type: text/plain\\r\\n\"); \n    $conn->send(\"Content-Length: 13\\r\\n\"); \n    $conn->send(\"\\r\\n\"); \n    $conn->send(\"Hello World\\n\"); \n    $conn->close(); \n} \n\n```", "```php\n$app = new \\Ratchet\\App('localhost', $port, $addr); \n$app->route('/chat', new \\Packt\\Chp6\\Chat\\ChatComponent); \n**$app->route('/hello', new \\Packt\\Chp6\\Http\\HelloWorldServer, ['*']);** \n$app->run(); \n\n```", "```php\n**$ composer require slim/slim**\n\n```", "```php\nnamespace Packt\\Chp6\\Http; \n\nuse Guzzle\\Http\\Message\\RequestInterface; \nuse Ratchet\\ConnectionInterface; \nuse Ratchet\\HttpServerInterface; \nuse Slim\\App; \n\nclass SlimAdapterServer implements HttpServerInterface \n{ \n    private $app; \n\n    public function __construct(App $app) \n    { \n        $this->app = $app; \n    } \n\n    // onOpen, onClose, onError and onMessage omitted \n    // ... \n} \n\n```", "```php\n$guzzleUri = $request->getUrl(true); \n$slimUri = new \\Slim\\Http\\Uri( \n    $guzzleUri->getScheme() ?? 'http', \n    $guzzleUri->getHost() ?? 'localhost', \n    $guzzleUri->getPort(), \n    $guzzleUri->getPath(), \n    $guzzleUri->getQuery() . '', \n    $guzzleUri->getFragment(), \n    $guzzleUri->getUsername(), \n    $guzzleUri->getPassword() \n); \n\n```", "```php\n$headerValues = []; \nforeach ($request->getHeaders() as $name => $header) { \n    $headerValues[$name] = $header->toArray(); \n} \n$slimHeaders = new \\Slim\\Http\\Headers($headerValues); \n\n```", "```php\n$slimRequest = new \\Slim\\Http\\Request( \n    $request->getMethod(), \n    $slimUri, \n    $slimHeaders, \n    $request->getCookies(), \n    [], \n    new \\Slim\\Http\\Stream($request->getBody()->getStream()); \n); \n\n```", "```php\n$slimResponse = new \\Slim\\Http\\Response(200); \n$slimResponse = $this->app->process($slimRequest, $slimResponse); \n\n```", "```php\n$statusLine = sprintf('HTTP/%s %d %s', \n    $slimResponse->getProtocolVersion(), \n    $slimResponse->getStatusCode(), \n    $slimResponse->getReasonPhrase() \n); \n$headerLines = [$statusLine]; \n\nforeach ($slimResponse->getHeaders() as $name => $values) { \n    foreach ($values as $value) { \n        $headerLines[] = $headerName . ': ' . $value; \n    } \n} \n\n$conn->send(implode(\"\\r\\n\", $headerLines) . \"\\r\\n\\r\\n\"); \n\n```", "```php\n$body = $slimResponse->getBody(); \n$body->rewind(); \n\nwhile (!$body->eof()) { \n    $conn->send($body->read(4096)); \n} \n$conn->close(); \n\n```", "```php\n**use Slim\\App;** \n**use Slim\\Http\\Request;** \n**use Slim\\Http\\Response;** \n**$slim = new App();** \n**$slim->get('/hello', function(Request $req, Response $res): Response {** \n **$res->getBody()->write(\"Hello World!\");** \n **return $res;** \n**});** \n**$adapter = new \\Packt\\Chp6\\Http\\SlimAdapterServer($slim);** \n\n$app = new \\Ratchet\\App('localhost', $port, $addr); \n$app->route('/chat', new \\Packt\\Chp6\\Chat\\ChatComponent); \n**$app->route('/hello', $adapter, ['*']);** \n$app->run(); \n\n```", "```php\nmap $http_upgrade $connection_upgrade { \n    default upgrade; \n    '' close; \n} \n\nserver { \n    location / { \n        root /var/www; \n        try_files $uri $uri/index.html @phpsite; \n    } \n\n    location @phpsite { \n        proxy_http_version 1.1; \n        proxy_set_header X-Real-IP  $remote_addr; \n        proxy_set_header Host $host; \n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \n        proxy_set_header Upgrade $http_upgrade; \n        proxy_set_header Connection $connection_upgrade; \n        proxy_pass http://app:8080; \n    } \n} \n\n```", "```php\n**$ docker rm -f chat-web** \n**$ docker run -d --name chat-web **--link chat-app:app** -v $PWD/public:/var/www -p 80:80 nginx**\n\n```", "```php\nnamespace Packt\\Chp6\\Authentication; \n\nclass SessionProvider \n{ \n    private $users = []; \n\n    public function hasSession(string $sessionId): bool \n    { \n        return array_key_exists($sessionId, $this->users); \n    } \n\n    public function getUserBySession(string $sessionId): string \n    { \n        return $this->users[$sessionId]; \n    } \n\n    public function registerSession(string $user): string \n    { \n        $id = sha1(random_bytes(64)); \n        $this->users[$id] = $user; \n        return $id; \n    } \n} \n\n```", "```php\n$app = new \\Ratchet\\App('localhost', $port, $addr); \n$app->route('/chat', new \\Packt\\Chp6\\Chat\\ChatComponent); \n**$app->route('/', $adapter, ['*']);** \n**$app->route('/login', $adapter, ['*']);** \n**$app->route('/authenticate', $adapter, ['*']);** \n$app->run(); \n\n```", "```php\n**$provider = new \\Packt\\Chp6\\Authentication\\SessionProvider();** \n$slim = new \\Slim\\App(); \n**$slim->get('/', function(Request $req, Response $res) use ($provider): Response {** \n **$sessionId = $req->getCookieParams()['session'] ?? '';** \n **if (!$provider->hasSession($sessionId)) {** \n **return $res->withRedirect('/login');** \n **}** \n **$res->getBody()->write(file_get_contents('templates/index.html'));** \n **return $res** \n **->withHeader('Content-Type', 'text/html;charset=utf8');** \n**});**\n\n```", "```php\n$slim->get('/login', function(Request $req, Response $res): Response { \n    $res->getBody()->write(file_get_contents('templates/login.html')); \n    return $res \n        ->withHeader('Content-Type', 'text/html;charset=utf8'); \n}); \n\n```", "```php\n<!DOCTYPE html> \n<html lang=\"en\"> \n<head> \n    <meta charset=\"UTF-8\"> \n    <title>Chap application: Login</title> \n    <script src=\"bower_components/jquery/dist/jquery.min.js\"></script> \n    <script src=\"bower_components/bootstrap/dist/js/bootstrap.min.js\"></script> \n    <link rel=\"stylesheet\" href=\"bower_components/bootstrap/dist/css/bootstrap.min.css\"/> \n</head> \n<body> \n</body> \n</html> \n\n```", "```php\n<div class=\"row\" id=\"login\"> \n    <div class=\"col-md-4 col-md-offset-4\"> \n        <div class=\"panel panel-default\"> \n            <div class=\"panel-heading\">Login</div> \n            <div class=\"panel-body\"> \n                <form action=\"/authenticate\" method=\"post\"> \n                    <div class=\"form-group\"> \n                        <label for=\"username\">Username</label> \n                        <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" class=\"form-control\"> \n                    </div> \n                    <div class=\"form-group\"> \n                        <label for=\"password\">Password</label> \n                        <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Password\" class=\"form-control\"> \n                    </div> \n                    <button type=\"submit\" id=\"do-login\" class=\"btn btn-primary btn-block\"> \n                        Log in \n                    </button> \n                </form> \n            </div> \n        </div> \n    </div> \n</div> \n\n```", "```php\n$slim->post('/authenticate', function(Request $req, Response $res) use ($provider): Response { \n    $username = $req->getParsedBodyParam('username'); \n    $password = $req->getParsedBodyParam('password'); \n\n    if (!$username || !$password) { \n        return $res->withStatus(403); \n    } \n\n    if (!$username == 'mhelmich' || !$password == 'secret') { \n        return $res->withStatus(403); \n    } \n\n    $session = $provider->registerSession($username); \n    return $res \n        ->withHeader('Set-Cookie', 'session=' . $session) \n        ->withRedirect('/'); \n}); \n\n```", "```php\nnamespace Packt\\Chp6\\Authentication; \n\nuse Ratchet\\MessageComponentInterface; \nuse Ratchet\\ConnectionInterface; \n\nclass AuthenticationComponent implements MessageComponentInterface \n{ \n    private $wrapped; \n    private $sessionProvider; \n\n    public function __construct(MessageComponentInterface $wrapped, SessionProvider $sessionProvider) \n    { \n        $this->wrapped         = $wrapped; \n        $this->sessionProvider = $sessionProvider; \n    } \n} \n\n```", "```php\npublic function onOpen(ConnectionInterface $conn) \n{ \n    $this->wrapped->onOpen($conn); \n} \n\npublic function onClose(ConnectionInterface $conn) \n{ \n    $this->wrapped->onClose($conn); \n} \n\npublic function onError(ConnectionInterface $conn, \\Exception $e) \n{ \n    $this->wrapped->onError($conn, $e); \n} \n\npublic function onMessage(ConnectionInterface $from, $msg) \n{ \n    $this->wrapped->onMessage($from, $msg); \n} \n\n```", "```php\npublic function onOpen(ConnectionInterface $conn) \n{ \n **$sessionId = $conn->WebSocket->request->getCookie('session');** \n **if (!$sessionId || !$this->sessionProvider->hasSession($sessionId)) {** \n **$conn->send('Not authenticated');** \n **$conn->close();** \n **return;** \n **}** \n **$user = $this->sessionProvider->getUserBySession($sessionId);** \n **$conn->user = $user;** \n\n    $this->wrapped->onOpen($conn); \n} \n\n```", "```php\npublic function onMessage(ConnectionInterface $from, $msg) \n{ \n    if ($msg == 'ping') { \n        return; \n    } \n\n **$decoded = json_decode($msg);** \n **$decoded->author = $from->user;** \n **$msg = json_encode($decoded);** \n\n    foreach ($this->users as $user) { \n        if ($user != $from) { \n            $user->send($msg); \n        } \n    } \n} \n\n```", "```php\nvar appendMessage = function(message, sentByMe) { \n    var text = sentByMe ? 'Sent at' : 'Received at'; \n var html = $('<div class=\"msg\">' + text + ' <span class=\"date\"></span> by <span class=\"author\"></span>: <span class=\"text\"></span></div>'); \n\n    html.find('.date').text(new Date().toLocaleTimeString()); \n **html.find('.author').text(message.author);** \n    html.find('.text').text(message.msg); \n\n    $('#messages').prepend(html); \n}; \n\n```", "```php\nconnection.onmessage = function(event) { \n **var msg = JSON.parse(event.data);** \n    appendMessage(**msg**, false); \n} \n\n```", "```php\n$(document).ready(function () { \n    $('#submit').click(function () { \n        var text = $('#message').val(); \n **var msg = JSON.stringify({** \n **msg: text** \n **});** \n        connection.send(msg); \n\n        appendMessage({ \n **author: \"me\",** \n **message: text** \n        }, true); \n    }) \n}); \n\n```"]