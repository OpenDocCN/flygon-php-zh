["```php\n$component->attachBehavior($name, $behavior);\n```", "```php\n$component->myBehaviorMethod();\n```", "```php\npublic function behaviors() \n{\n  return array(\n     'CTimestampBehavior' => array(\n       'class' => 'zii.behaviors.CTimestampBehavior',\n       'createAttribute' => 'create_time',\n       'updateAttribute' => 'update_time',\n      'setUpdateOnCreate' => true,\n    ),\n   );\n}\n```", "```php\n<?php\nabstract class TrackStarActiveRecord extends CActiveRecord\n{\n   /**\n   * Prepares create_user_id and update_user_id attributes before saving.\n   */\n\n  protected function beforeSave()\n  {\n\n    if(null !== Yii::app()->user)\n      $id=Yii::app()->user->id;\n    else\n      $id=1;\n\n    if($this->isNewRecord)\n      $this->create_user_id=$id;\n\n    $this->update_user_id=$id;\n\n    return parent::beforeSave();\n  }\n\n  /**\n   * Attaches the timestamp behavior to update our create and update times\n   */\n  public function behaviors() \n  {\n    return array(\n       'CTimestampBehavior' => array(\n         'class' => 'zii.behaviors.CTimestampBehavior',\n         'createAttribute' => 'create_time',\n         'updateAttribute' => 'update_time',\n        'setUpdateOnCreate' => true,\n      ),\n     );\n  }\n\n}\n```", "```php\nclass User extends CActiveRecord\n{\n\u2026}\n```", "```php\nclass User extends TrackStarActiveRecord\n{ \n\u2026}\n```", "```php\n<div class=\"row\">\n    <?php echo $form->labelEx($model,'create_time'); ?>\n    <?php echo $form->textField($model,'create_time'); ?>\n    <?php echo $form->error($model,'create_time'); ?>\n  </div>\n\n  <div class=\"row\">\n    <?php echo $form->labelEx($model,'create_user_id'); ?>\n    <?php echo $form->textField($model,'create_user_id'); ?>\n    <?php echo $form->error($model,'create_user_id'); ?>\n  </div>\n\n  <div class=\"row\">\n    <?php echo $form->labelEx($model,'update_time'); ?>\n    <?php echo $form->textField($model,'update_time'); ?>\n    <?php echo $form->error($model,'update_time'); ?>\n  </div>\n\n  <div class=\"row\">\n    <?php echo $form->labelEx($model,'update_user_id'); ?>\n    <?php echo $form->textField($model,'update_user_id'); ?>\n    <?php echo $form->error($model,'update_user_id'); ?>\n  </div>\n```", "```php\n<div class=\"row\">\n    <?php echo $form->labelEx($model,'last_login_time'); ?>\n    <?php echo $form->textField($model,'last_login_time'); ?>\n    <?php echo $form->error($model,'last_login_time'); ?>\n  </div>\n```", "```php\n$model->attributes=$_POST['User'];\n```", "```php\narray('create_user_id, update_user_id', 'numerical', 'integerOnly'=>true),\narray('last_login_time, create_time, update_time', 'safe'),\n```", "```php\narray('email, username', 'unique'),\narray('email', 'email'),\n```", "```php\npublic function rules()\n  {\n    // NOTE: you should only define rules for those attributes that\n    // will receive user inputs.\n    return array(\n      array('email', 'required'),\narray('email, username, password', 'length', 'max'=>255,\narray('email, username', 'unique'),\narray('email', 'email'),\n      // The following rule is used by search().\n      // Please remove those attributes that should not be searched.\n      array('id, email, username, password, last_login_time, create_time, create_user_id, update_time, update_user_id', 'safe', 'on'=>'search'),\n    );\n  }\n```", "```php\npublic $password_repeat;\n```", "```php\narray('password', 'compare'),\n```", "```php\narray('password', 'compare', 'compareAttribute'=>'confirmPassword'),\n```", "```php\narray('password_repeat', 'safe'),\n```", "```php\narray('email, username, password, password_repeat', 'required'),\n```", "```php\n<div class=\"row\">\n    <?php echo $form->labelEx($model,'password_repeat'); ?>\n    <?php echo $form->passwordField($model,'password_repeat',array('size'=>60,'maxlength'=>255)); ?>\n    <?php echo $form->error($model,'password_repeat'); ?>\n  </div>\n```", "```php\n    /**\n   * apply a hash on the password before we store it in the database\n   */\n  protected function afterValidate()\n  {   \n    parent::afterValidate();\n  if(!$this->hasErrors())\n      $this->password = $this->hashPassword($this->password);\n  }\n\n  /**\n   * Generates the password hash.\n   * @param string password\n     * @return string hash\n   */\n    public function hashPassword($password)\n  {\n    return md5($password);\n  }\n```", "```php\n'user'=>array(\n  // enable cookie-based authentication\n  'allowAutoLogin'=>true,\n),\n```", "```php\n<?php\n/**\n * UserIdentity represents the data needed to identity a user.\n * It contains the authentication method that checks if the provided\n * data can identify the user.\n */\nclass UserIdentity extends CUserIdentity\n{\n  /**\n   * Authenticates a user.\n   * The example implementation makes sure if the username and password\n   * are both 'demo'.\n   * In practical applications, this should be changed to authenticate\n   * against some persistent user identity storage (e.g. database).\n   * @return boolean whether authentication succeeds.\n   */\n  public function authenticate()\n  {\n    $users=array(\n      // username => password\n      'demo'=>'demo',\n      'admin'=>'admin',\n    );\n    if(!isset($users[$this->username]))\n      $this->errorCode=self::ERROR_USERNAME_INVALID;\n    else if($users[$this->username]!==$this->password)\n      $this->errorCode=self::ERROR_PASSWORD_INVALID;\n    else\n      $this->errorCode=self::ERROR_NONE;\n    return !$this->errorCode;\n  }\n}\n```", "```php\npublic function rules()\n{\n  return array(\n    // username and password are required\n    array('username, password', 'required'),\n    // rememberMe needs to be a boolean\n    array('rememberMe', 'boolean'),\n    // password needs to be authenticated\n    array('password', 'authenticate'),\n  );\n}\n```", "```php\n/**\n   * Authenticates the password.\n   * This is the 'authenticate' validator as declared in rules().\n   */\n  public function authenticate($attribute,$params)\n  {\n    $this->_identity=new UserIdentity($this->username,$this->password);\n    if(!$this->_identity->authenticate())\n      $this->addError('password','Incorrect username or password.');\n  }\n```", "```php\n/**\n   * Authenticates a user.\n   * The example implementation makes sure if the username and password\n   * are both 'demo'.\n   * In practical applications, this should be changed to authenticate\n   * against some persistent user identity storage (e.g. database).\n   * @return boolean whether authentication succeeds.\n   */\n  public function authenticate()\n  {\n    $users=array(\n      // username => password\n      'demo'=>'demo',\n      'admin'=>'admin',\n    );\n    if(!isset($users[$this->username]))\n      $this->errorCode=self::ERROR_USERNAME_INVALID;\n    else if($users[$this->username]!==$this->password)\n      $this->errorCode=self::ERROR_PASSWORD_INVALID;\n    else\n      $this->errorCode=self::ERROR_NONE;\n    return !$this->errorCode;\n  }\n```", "```php\n/**\n   * Logs in the user using the given username and password in the model.\n   * @return boolean whether login is successful\n   */\n  public function login()\n  {\n    if($this->_identity===null)\n    {\n      $this->_identity=new UserIdentity($this->username,$this->password);\n      $this->_identity->authenticate();\n    }\n    if($this->_identity->errorCode===UserIdentity::ERROR_NONE)\n    {\n      $duration=$this->rememberMe ? 3600*24*30 : 0; // 30 days\n      Yii::app()->user->login($this->_identity,$duration);\n      return true;\n    }\n    else\n      return false;\n  }\n```", "```php\n<?php\n\n/**\n * UserIdentity represents the data needed to identity a user.\n * It contains the authentication method that checks if the provided\n * data can identity the user.\n */\n\nclass UserIdentity extends CUserIdentity\n{\n  private $_id;\n\n  public function authenticate()\n  {\n    $user=User::model()->find('LOWER(username)=?',array(strtolower($this->username)));\n    if($user===null)\n      $this->errorCode=self::ERROR_USERNAME_INVALID;\n    else if(!$user->validatePassword($this->password))\n      $this->errorCode=self::ERROR_PASSWORD_INVALID;\n    else\n    {\n      $this->_id=$user->id;\n      $this->username=$user->username;\n$this->setState('lastLogin', date(\"m/d/y g:i A\", strtotime($user->last_login_time)));\n      $user->saveAttributes(array(\n        'last_login_time'=>date(\"Y-m-d H:i:s\", time()),\n      ));\n      $this->errorCode=self::ERROR_NONE;\n    }\n    return $this->errorCode==self::ERROR_NONE;\n  }\n\n  public function getId()\n  {\n    return $this->_id;\n  }\n}\n```", "```php\n/**\n   * Checks if the given password is correct.\n   * @param string the password to be validated\n   * @return boolean whether the password is valid\n   */\n  public function validatePassword($password)\n  {\n    return $this->hashPassword($password)===$this->password;\n  }\n```", "```php\n$this->setState('lastLogin', date(\"m/d/y g:i A\", strtotime($user->last_login_time)));\n$user->saveAttributes(array(\n  'last_login_time'=>date(\"Y-m-d H:i:s\", time()),\n));\n```", "```php\nYii::app()->user->lastLogin;\n```", "```php\n<h1>Welcome to <i><?php echo CHtml::encode(Yii::app()->name); ?></i></h1>\n<?php if(!Yii::app()->user->isGuest):?>\n<p>\n   You last logged in on <?php echo Yii::app()->user->lastLogin; ?>.  \n</p>\n<?php endif;?>\n```"]