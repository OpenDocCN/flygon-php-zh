["```php\n    function test()\n    {\n        return [\n            1 => function () { return [\n                1 => function ($a) { return 'Level 1/1:' . ++$a; },\n                2 => function ($a) { return 'Level 1/2:' . ++$a; },\n            ];},\n            2 => function () { return [\n                1 => function ($a) { return 'Level 2/1:' . ++$a; },\n                2 => function ($a) { return 'Level 2/2:' . ++$a; },\n            ];}\n        ];\n    }\n\n    $a = 't';\n    $t = 'test';\n    echo $$a()[1]()[2](100);\n    ```", "```php\n    public function __construct()\n      {\n        $this->filter = [\n          'striptags' => function ($a) { return strip_tags($a); },\n          'digits'    => function ($a) { return preg_replace(\n          '/[^0-9]/', '', $a); },\n          'alpha'     => function ($a) { return preg_replace(\n          '/[^A-Z]/i', '', $a); }\n        ];\n        $this->validate = [\n          'alnum'  => function ($a) { return ctype_alnum($a); },\n          'digits' => function ($a) { return ctype_digit($a); },\n          'alpha'  => function ($a) { return ctype_alpha($a); }\n        ];\n      }\n    ```", "```php\n    $security->filterDigits($item));\n    ```", "```php\n    public function __call($method, $params)\n    {\n\n      preg_match('/^(filter|validate)(.*?)$/i', $method, $matches);\n      $prefix   = $matches[1] ?? '';\n      $function = strtolower($matches[2] ?? '');\n      if ($prefix && $function) {\n        return $this->$prefix[$function]($params[0]);\n      }\n      return $value;\n    }\n    ```", "```php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n$security = new Application\\Web\\Security();\n```", "```php\n$data = [\n    '<ul><li>Lots</li><li>of</li><li>Tags</li></ul>',\n    12345,\n    'This is a string',\n    'String with number 12345',\n];\n```", "```php\nforeach ($data as $item) {\n  echo 'ORIGINAL: ' . $item . PHP_EOL;\n  echo 'FILTERING' . PHP_EOL;\n  printf('%12s : %s' . PHP_EOL,'Strip Tags', $security->filterStripTags($item));\n  printf('%12s : %s' . PHP_EOL, 'Digits', $security->filterDigits($item));\n  printf('%12s : %s' . PHP_EOL, 'Alpha', $security->filterAlpha($item));\n\n  echo 'VALIDATORS' . PHP_EOL;\n  printf('%12s : %s' . PHP_EOL, 'Alnum',  \n  ($security->validateAlnum($item))  ? 'T' : 'F');\n  printf('%12s : %s' . PHP_EOL, 'Digits', \n  ($security->validateDigits($item)) ? 'T' : 'F');\n  printf('%12s : %s' . PHP_EOL, 'Alpha',  \n  ($security->validateAlpha($item))  ? 'T' : 'F');\n}\n```", "```php\n    $foo = 'bar';\n    $bar = 'baz';\n    echo $$foo; // returns  'baz'; \n    ```", "```php\n    $foo = 'bar';\n    $bar = ['bar' => ['baz' => 'bat']];\n    // returns 'bat'\n    echo $$foo['bar']['baz'];\n    ```", "```php\n    // PHP 5: $foo->{$bar['bada']}\n    // PHP 7: ($foo->$bar)['bada']\n    $bar = 'baz';\n    // $foo = new class \n    { \n        public $baz = ['bada' => 'boom']; \n    };\n    // returns 'boom'\n    echo $foo->$bar['bada'];\n    ```", "```php\n    // PHP 5: $foo->{$bar['bada']}()\n    // PHP 7: ($foo->$bar)['bada']()\n    $bar = 'baz';\n    // NOTE: this example uses the new PHP 7 anonymous class feature\n    $foo = new class \n    { \n         public function __construct() \n        { \n            $this->baz = ['bada' => function () { return 'boom'; }]; \n        } \n    };\n    // returns 'boom'\n    echo $foo->$bar['bada']();\n    ```", "```php\n    $a = [1, 2, 3];\n    foreach ($a as $v) {\n      printf(\"%2d\\n\", $v);\n      unset($a[1]);\n    }\n    ```", "```php\n     1\n     2\n     3\n    ```", "```php\n    $a = [1, 2, 3];\n    $b = &$a;\n    foreach ($a as $v) {\n      printf(\"%2d\\n\", $v);\n      unset($a[1]);\n    }\n    ```", "```php\n    $a = [1,2,3];\n    foreach($a as &$v) {\n        printf(\"%2d - %2d\\n\", $v, current($a));\n    }\n    ```", "```php\n    $a = [1];\n    foreach($a as &$v) {\n        printf(\"%2d -\\n\", $v);\n        $a[1]=2;\n    }\n    ```", "```php\n    $a=[1,2,3,4];\n    foreach($a as &$v) {\n        echo \"$v\\n\";\n        array_pop($a);\n    }\n    ```", "```php\n    $a = [0, 1, 2, 3];\n    foreach ($a as &$x) {\n           foreach ($a as &$y) {\n             echo \"$x - $y\\n\";\n             if ($x == 0 && $y == 1) {\n               unset($a[1]);\n               unset($a[2]);\n             }\n           }\n    }\n    ```", "```php\n    Namespace Application\\Web;\n\n    use Exception;\n    use SplFileObject;\n    class Access\n    {\n      const ERROR_UNABLE = 'ERROR: unable to open file';\n      protected $log;\n      public $frequency = array();\n      public function __construct($filename)\n      {\n        if (!file_exists($filename)) {\n          $message = __METHOD__ . ' : ' . self::ERROR_UNABLE . PHP_EOL;\n          $message .= strip_tags($filename) . PHP_EOL;\n          throw new Exception($message);\n        }\n        $this->log = new SplFileObject($filename, 'r');\n      }\n    ```", "```php\n    public function fileIteratorByLine()\n    {\n      $count = 0;\n      while (!$this->log->eof()) {\n        yield $this->log->fgets();\n        $count++;\n      }\n      return $count;\n    }\n    ```", "```php\n    public function getIp($line)\n    {\n      preg_match('/(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})/', $line, $match);\n      return $match[1] ?? '';\n      }\n    }\n    ```", "```php\ndefine('LOG_FILES', '/var/log/apache2/*access*.log');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n```", "```php\n// define functions\n$freq = function ($line) {\n  $ip = $this->getIp($line);\n  if ($ip) {\n    echo '.';\n    $this->frequency[$ip] = \n    (isset($this->frequency[$ip])) ? $this->frequency[$ip] + 1 : 1;\n  }\n};\n```", "```php\nforeach (glob(LOG_FILES) as $filename) {\n  echo PHP_EOL . $filename . PHP_EOL;\n  // access class\n  $access = new Application\\Web\\Access($filename);\n  foreach ($access->fileIteratorByLine() as $line) {\n    $freq->call($access, $line);\n  }\n}\n```", "```php\n$func = $freq->bindTo($access);\n$func($line);\n```", "```php\narsort($access->frequency);\nforeach ($access->frequency as $key => $value) {\n  printf('%16s : %6d' . PHP_EOL, $key, $value);\n}\n```", "```php\n    namespace Application\\Iterator;\n\n    use Exception;\n    use InvalidArgumentException;\n    use SplFileObject;\n    use NoRewindIterator;\n\n    class LargeFile\n    {\n      const ERROR_UNABLE = 'ERROR: Unable to open file';\n      const ERROR_TYPE   = 'ERROR: Type must be \"ByLength\", \"ByLine\" or \"Csv\"';     \n      protected $file;\n      protected $allowedTypes = ['ByLine', 'ByLength', 'Csv'];\n    ```", "```php\n    public function __construct($filename, $mode = 'r')\n    {\n      if (!file_exists($filename)) {\n        $message = __METHOD__ . ' : ' . self::ERROR_UNABLE . PHP_EOL;\n        $message .= strip_tags($filename) . PHP_EOL;\n        throw new Exception($message);\n      }\n      $this->file = new SplFileObject($filename, $mode);\n    }\n    ```", "```php\n    protected function fileIteratorByLine()\n    {\n      $count = 0;\n      while (!$this->file->eof()) {\n        yield $this->file->fgets();\n        $count++;\n      }\n      return $count;\n    }\n\n    protected function fileIteratorByLength($numBytes = 1024)\n    {\n      $count = 0;\n      while (!$this->file->eof()) {\n        yield $this->file->fread($numBytes);\n        $count++;\n      }\n      return $count; \n    }\n    ```", "```php\n    public function getIterator($type = 'ByLine', $numBytes = NULL)\n    {\n      if(!in_array($type, $this->allowedTypes)) {\n        $message = __METHOD__ . ' : ' . self::ERROR_TYPE . PHP_EOL;\n        throw new InvalidArgumentException($message);\n      }\n      $iterator = 'fileIterator' . $type;\n      return new NoRewindIterator($this->$iterator($numBytes));\n    }\n    ```", "```php\ndefine('MASSIVE_FILE', '/../data/files/war_and_peace.txt');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n```", "```php\ntry {\n  $largeFile = new Application\\Iterator\\LargeFile(__DIR__ . MASSIVE_FILE);\n  $iterator = $largeFile->getIterator('ByLine');\n```", "```php\n$words = 0;\nforeach ($iterator as $line) {\n  echo $line;\n  $words += str_word_count($line);\n}\necho str_repeat('-', 52) . PHP_EOL;\nprintf(\"%-40s : %8d\\n\", 'Total Words', $words);\nprintf(\"%-40s : %8d\\n\", 'Average Words Per Line', \n($words / $iterator->getReturn()));\necho str_repeat('-', 52) . PHP_EOL;\n```", "```php\n} catch (Throwable $e) {\n  echo $e->getMessage();\n}\n```", "```php\n    <?php\n      namespace Application\\Database;\n\n      use Exception;\n      use PDO;\n\n      class Connection\n      { \n        const ERROR_UNABLE = 'ERROR: Unable to create database connection';    \n        public $pdo;\n\n        public function __construct(array $config)\n        {\n          if (!isset($config['driver'])) {\n            $message = __METHOD__ . ' : ' . self::ERROR_UNABLE . PHP_EOL;\n            throw new Exception($message);\n        }\n        $dsn = $config['driver'] \n        . ':host=' . $config['host'] \n        . ';dbname=' . $config['dbname'];\n        try {\n          $this->pdo = new PDO($dsn, \n          $config['user'], \n          $config['password'], \n          [PDO::ATTR_ERRMODE => $config['errmode']]);\n        } catch (PDOException $e) {\n          error_log($e->getMessage());\n        }\n      }\n\n    }\n    ```", "```php\n    protected function fileIteratorCsv()\n    {\n      $count = 0;\n      while (!$this->file->eof()) {\n        yield $this->file->fgetcsv();\n        $count++;\n      }\n      return $count;        \n    }    \n    ```", "```php\n      const ERROR_UNABLE = 'ERROR: Unable to open file';\n      const ERROR_TYPE   = 'ERROR: Type must be \"ByLength\", \"ByLine\" or \"Csv\"';\n\n      protected $file;\n      protected $allowedTypes = ['ByLine', 'ByLength', 'Csv'];\n    ```", "```php\n<?php\nreturn [\n  'driver'   => 'mysql',\n  'host'     => 'localhost',\n  'dbname'   => 'php7cookbook',\n  'user'     => 'cook',\n  'password' => 'book',\n  'errmode'  => PDO::ERRMODE_EXCEPTION,\n];\n```", "```php\ndefine('DB_CONFIG_FILE', '/../data/config/db.config.php');\ndefine('CSV_FILE', '/../data/files/prospects.csv');\nrequire __DIR__ . '/../../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n```", "```php\ntry {\n  // code goes here  \n} catch (Throwable $e) {\n  echo $e->getMessage();\n}\n```", "```php\n$connection = new Application\\Database\\Connection(\ninclude __DIR__ . DB_CONFIG_FILE);\n$iterator  = (new Application\\Iterator\\LargeFile(__DIR__ . CSV_FILE))\n->getIterator('Csv');\n```", "```php\n$sql = 'INSERT INTO `prospects` '\n  . '(`id`,`first_name`,`last_name`,`address`,`city`,`state_province`,'\n  . '`postal_code`,`phone`,`country`,`email`,`status`,`budget`,`last_updated`) '\n  . ' VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)';\n$statement = $connection->pdo->prepare($sql);\n```", "```php\nforeach ($iterator as $row) {\n  echo implode(',', $row) . PHP_EOL;\n  $statement->execute($row);\n}\n```", "```php\n    namespace Application\\Iterator;\n\n    use Exception;\n    use RecursiveDirectoryIterator;\n    use RecursiveIteratorIterator;\n    use RecursiveRegexIterator;\n    use RegexIterator;\n\n    class Directory\n    {\n\n      const ERROR_UNABLE = 'ERROR: Unable to read directory';\n\n      protected $path;\n      protected $rdi;\n      // recursive directory iterator\n    ```", "```php\n    public function __construct($path)\n    {\n      try {\n        $this->rdi = new RecursiveIteratorIterator(\n          new RecursiveDirectoryIterator($path),\n          RecursiveIteratorIterator::SELF_FIRST);\n      } catch (\\Throwable $e) {\n        $message = __METHOD__ . ' : ' . self::ERROR_UNABLE . PHP_EOL;\n        $message .= strip_tags($path) . PHP_EOL;\n        echo $message;\n        exit;\n      }\n    }\n    ```", "```php\n    public function ls($pattern = NULL)\n    {\n      $outerIterator = ($pattern) \n      ? $this->regex($this->rdi, $pattern) \n      : $this->rdi;\n      foreach($outerIterator as $obj){\n        if ($obj->isDir()) {\n          if ($obj->getFileName() == '..') {\n            continue;\n          }\n          $line = $obj->getPath() . PHP_EOL;\n        } else {\n          $line = sprintf('%4s %1d %4s %4s %10d %12s %-40s' . PHP_EOL,\n          substr(sprintf('%o', $obj->getPerms()), -4),\n          ($obj->getType() == 'file') ? 1 : 2,\n          $obj->getOwner(),\n          $obj->getGroup(),\n          $obj->getSize(),\n          date('M d Y H:i', $obj->getATime()),\n          $obj->getFileName());\n        }\n        yield $line;\n      }\n    }\n    ```", "```php\n    protected function regex($iterator, $pattern)\n    {\n      $pattern = '!^.' . str_replace('.', '\\\\.', $pattern) . '$!';\n      return new RegexIterator($iterator, $pattern);\n    }\n    ```", "```php\n    public function dir($pattern = NULL)\n    {\n      $outerIterator = ($pattern) \n      ? $this->regex($this->rdi, $pattern) \n      : $this->rdi;\n      foreach($outerIterator as $name => $obj){\n          yield $name . PHP_EOL;\n        }        \n      }\n    }\n    ```", "```php\ndefine('EXAMPLE_PATH', realpath(__DIR__ . '/../'));\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n$directory = new Application\\Iterator\\Directory(EXAMPLE_PATH);\n```", "```php\ntry {\n  echo 'Mimics \"ls -l -R\" ' . PHP_EOL;\n  foreach ($directory->ls('*.php') as $info) {\n    echo $info;\n  }\n\n  echo 'Mimics \"dir /s\" ' . PHP_EOL;\n  foreach ($directory->dir('*.php') as $info) {\n    echo $info;\n  }\n\n} catch (Throwable $e) {\n  echo $e->getMessage();\n}\n```"]