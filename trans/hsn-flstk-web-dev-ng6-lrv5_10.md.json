["```php\n version: \"3.1\"\n services:\n     mysql:\n       image: mysql:5.7\n       container_name: chapter-10-mysql\n       working_dir: /application\n       volumes:\n         - .:/application\n         - ./storage-db:/var/lib/mysql\n       environment:\n         - MYSQL_ROOT_PASSWORD=123456\n         - MYSQL_DATABASE=chapter-10\n         - MYSQL_USER=chapter-10\n         - MYSQL_PASSWORD=123456\n       ports:\n         - \"8083:3306\"\n     webserver:\n       image: nginx:alpine\n       container_name: chapter-10-webserver\n       working_dir: /application\n       volumes:\n         - .:/application\n         -./phpdocker/nginx/nginx.conf:/etc/nginx/\n           conf.d/default.conf\n        ports:\n          - \"8081:80\"\n     php-fpm:\n       build: phpdocker/php-fpm\n       container_name: chapter-10-php-fpm\n       working_dir: /application\n       volumes:\n         - ./Server:/application\n         - ./phpdocker/php-fpm/php-ini-\n           overrides.ini:/etc/php/7.2/fpm/conf.d/99-overrides.ini\n```", "```php\n DB_CONNECTION=mysql\n DB_HOST=mysql\n DB_PORT=3306\n DB_DATABASE=chapter-10\n DB_USERNAME=chapter-10\n DB_PASSWORD=123456\n```", "```php\n git add .\n git commit -m \"Initial commit chapter 10\"\n```", "```php\n docker-compose up -d\n```", "```php\n ng add @ng-bootstrap/schematics\n```", "```php\n+ @ng-bootstrap/schematics@2.0.0-alpha.1\nadded 3 packages in 26.372s\nInstalled packages for tooling via npm.\nUPDATE package.json (1589 bytes)\nUPDATE src/app/app.module.ts (1516 bytes)\nUPDATE angular.json (3706 bytes)\n```", "```php\n     \"@ng-bootstrap/schematics\": \"^2.0.0-alpha.1\",\n        \"@ng-bootstrap/ng-bootstrap\": \"^2.0.0-alpha.0\",\n        \"bootstrap\": \"^4.0.0\"\n```", "```php\n     import { NgbModule } from  '@ng-bootstrap/ng-bootstrap';\n\n        imports: [\n                ...\n                NgbModule.forRoot()\n        ],\n```", "```php\n     \"styles\": [\n                \"src/styles.scss\",\n                {\n                        \"input\": \"./node_modules/bootstrap/dist/css/bootstrap.css\"\n                }\n        ],\n```", "```php\n     \"styles\": [\n                \"src/styles.scss\"\n        ],\n```", "```php\n/*! * Bootstrap v4.1.1 (https://getbootstrap.com/) * Copyright 2011-2018 The Bootstrap Authors * Copyright 2011-2018 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) */ @import \"../node_modules/bootstrap/scss/functions\"; @import \"../scss/bootstrap/_variables.scss\"; @import \"../node_modules/bootstrap/scss/_variables.scss\"; @import \"../node_modules/bootstrap/scss/mixins\"; @import \"../node_modules/bootstrap/scss/root\"; @import \"../node_modules/bootstrap/scss/reboot\"; @import \"../node_modules/bootstrap/scss/type\"; @import \"../node_modules/bootstrap/scss/images\"; @import \"../node_modules/bootstrap/scss/code\"; @import \"../node_modules/bootstrap/scss/grid\"; @import \"../node_modules/bootstrap/scss/tables\"; @import \"../node_modules/bootstrap/scss/forms\"; @import \"../node_modules/bootstrap/scss/buttons\"; @import \"../node_modules/bootstrap/scss/transitions\"; @import \"../node_modules/bootstrap/scss/dropdown\"; @import \"../node_modules/bootstrap/scss/button-group\"; @import \"../node_modules/bootstrap/scss/input-group\"; @import \"../node_modules/bootstrap/scss/custom-forms\"; @import \"../node_modules/bootstrap/scss/nav\"; @import \"../node_modules/bootstrap/scss/navbar\"; @import \"../node_modules/bootstrap/scss/card\"; @import \"../node_modules/bootstrap/scss/breadcrumb\"; @import \"../node_modules/bootstrap/scss/pagination\"; @import \"../node_modules/bootstrap/scss/badge\"; @import \"../node_modules/bootstrap/scss/jumbotron\"; @import \"../node_modules/bootstrap/scss/alert\"; @import \"../node_modules/bootstrap/scss/progress\"; @import \"../node_modules/bootstrap/scss/media\"; @import \"../node_modules/bootstrap/scss/list-group\"; @import \"../node_modules/bootstrap/scss/close\"; @import \"../node_modules/bootstrap/scss/modal\"; @import \"../node_modules/bootstrap/scss/tooltip\"; @import \"../node_modules/bootstrap/scss/popover\"; @import \"../node_modules/bootstrap/scss/carousel\"; @import \"../node_modules/bootstrap/scss/utilities\"; @import \"../node_modules/bootstrap/scss/print\";\n```", "```php\n <pre>Error: ENOENT: no such file or directory, open '/Users/fernandomonteiro/_bitbucket/scss/bootstrap/_variables.scss'</pre>  \n```", "```php\n     // Variables\n        //\n        // Removing border-radius and box-shadow from components\n\n        $border-radius: 0;\n        $border-radius-lg: 0;\n        $border-radius-sm: 0;\n\n        $box-shadow-sm: none;\n        $box-shadow: none;\n        $box-shadow-lg: none;\n```", "```php\n/*!\n * Bootstrap v4.1.1 (https://getbootstrap.com/) * Copyright 2011-2018 The Bootstrap Authors * Copyright 2011-2018 Twitter, Inc. * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE) */  @import  \"../node_modules/bootstrap/scss/functions\";\n  @import  \"../scss/bootstrap/_variables.scss\";\n  @import  \"../node_modules/bootstrap/scss/_variables.scss\";\n```", "```php\n npm start\n```", "```php\n<header> \n<nav class=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\"> \n<a class=\"navbar-brand\" [routerLink]=\"['/']\" (click)=\"setTitle('Custom Bikes Garage')\">Custom\nBikes Garage</a> \n<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-\ntarget=\"#navbarCollapse\" aria-controls=\"navbarCollapse\" aria-expanded=\"false\" aria- label=\"Toggle\nnavigation\"> \n<span class=\"navbar-toggler-icon\"></span> \n</button> \n<div class=\"collapse navbar-collapse\" id=\"navbarCollapse\"> \n<ul class=\"navbar-nav ml-auto\"> <li class=\"nav-item\"> <a class=\"nav-link\" [routerLink]=\"['/bikes']\" routerLinkActive=\"active\" (click)=\"setTitle('Bikes')\">Bikes</a> \n</li> <li class=\"nav-item\"> <a class=\"nav-link\" [routerLink]=\"['/builders']\" routerLinkActive=\"active\" (click)=\"setTitle('Builders')\">Builders</a> </li> \n<li *ngIf=\"!auth.isAuthenticated()\" class=\"nav-item\"> <a class=\"nav-link\" [routerLink]=\"['/login']\" routerLinkActive=\"active\" (click)=\"setTitle('Login')\">Login</a> </li> \n<li *ngIf=\"!auth.isAuthenticated()\" class=\"nav-item\"> <a class=\"nav-link\" [routerLink]=\"['/register']\" routerLinkActive=\"active\" (click)=\"setTitle('Register')\">Register</a> </li>\n <li *ngIf=\"auth.isAuthenticated()\" class=\"nav-item\"> \n<div ngbDropdown class=\"d-inline-block\">\n<button class=\"btn btn-secondary\" id=\"dropdownBasic1\" ngbDropdownToggle>{{ auth.currentUser?.name }}</button \n<div ngbDropdownMenu aria-labelledby=\"dropdownBasic1\"> \n<button class=\"dropdown-item\" (click)=\"onLogout();\">Logout</button>\n</div> \n</div>\n</li>\n</ul>\n</div>\n</nav> \n</header>\n```", "```php\n (ngSubmit)=\"onSubmit(loginForm)\" #loginForm=\"ngForm\"\n```", "```php\n <input  type=\"email\" [(ngModel)]=\"user.email\" name=\"email\" #email=\"ngModel\" class=\"form-control\"  id=\"email\"  aria-describedby=\"emailHelp\"  placeholder=\"Enter email\">\n```", "```php\n <input  type=\"password\" [(ngModel)]=\"user.password\" name=\"password\" #password=\"ngModel\" class=\"form-control\"  id=\"password\"  placeholder=\"Password\">\n```", "```php\n [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\"  class=\"form-signin\"  novalidate\n```", "```php\n <input type=\"name\"  formControlName=\"name\"  class=\"form-control\"  id=\"name\"  aria-describedby=\"nameHelp\"  placeholder=\"Enter your name\">\n```", "```php\n <input type=\"email\"  formControlName=\"email\" class=\"form-control\"  id=\"email\"  aria-describedby=\"emailHelp\"  placeholder=\"Enter email\">\n```", "```php\n <input  formControlName=\"password\"  type=\"password\"  name=\"password\" class=\"form-control\"  id=\"password\"  placeholder=\"Password\">\n```", "```php\n <main role=\"main\">\n        <div class=\"py-5\">\n        <div class=\"container\">\n        <div *ngIf=\"isLoading\" class=\"spinner\">\n                <div class=\"double-bounce1\"></div>\n                <div class=\"double-bounce2\"></div>\n        </div>\n        <ngb-tabset type=\"pills\" *ngIf=\"!isLoading\">\n                <ngb-tab title=\"Bike Detail\">\n                        <ng-template ngbTabContent>\n                        <br>\n                        <div class=\"row\">\n                                <div class=\"col-md-4\">\n                                <img class=\"card-img-top\" src=\"{{ bike?.picture }}\" alt=\"Card image cap\">\n                                </div>\n                                <div class=\"col-md-8\">\n                                <div class=\"card\">\n                                        <div class=\"card-body\">\n                                        <h5 class=\"card-title\">{{ bike?.model }} | {{ bike?.year }} | Ratings: {{ bike?.average_rating }}\n                                                <span *ngIf=\"userVote\">| Your Vote: {{ userVote }}</span>\n                                        </h5>\n                                        <p class=\"card-text\">{{ bike?.mods }}</p>\n                                        </div>\n                                        <div *ngIf=\"bike?.builder\" class=\"card-header\">\n                                        <strong>Builder</strong>:\n                                        <a routerLink=\"/builders/{{bike?.builder['id']}}\">{{ bike?.builder['name'] }}</a>\n                                        </div>\n                                        <div *ngIf=\"bike?.items\" class=\"card-header\">\n                                        <strong>Featured items</strong>:\n                                        </div>\n                                        <ul class=\"list-group list-group-flush\">\n                                        <li *ngFor=\"let item of bike?.items\" class=\"list-group-item\">\n                                                <strong>Type</strong>: {{ item.type }} |\n                                                <strong>Name</strong>: {{ item.name }} |\n                                                <strong>Company</strong>: {{ item.company }}\n                                        </li>\n                                        </ul>\n                                        <div class=\"card-body\">\n                                        <ul class=\"list-unstyled list-inline\">\n                                                <li class=\"list-inline-item\">Vote: </li>\n                                                <li class=\"list-inline-item\">\n                                                <a (click)=\"onVote('1')\" class=\"btn btn-outline-secondary\">1</a>\n                                                </li>\n                                                <li class=\"list-inline-item\">\n                                                <a (click)=\"onVote('2')\" class=\"btn btn-outline-primary\">2</a>\n                                                </li>\n                                                <li class=\"list-inline-item\">\n                                                <a (click)=\"onVote('3')\" class=\"btn btn-outline-success\">3</a>\n                                                </li>\n                                        </ul>\n                                        </div>\n                                </div>\n                                </div>\n                        </div>\n                        </ng-template>\n                </ngb-tab>\n                <ngb-tab>\n                        <ng-template ngbTabTitle *ngIf=\"checkBikeOwner()\">Edit bike</ng-template>\n                        <ng-template ngbTabContent>\n                        <br>\n                        <form (ngSubmit)=\"onSubmit(bikeAddForm)\" #bikeAddForm=\"ngForm\" name=bikeAddForm class=\"bg-light px-4 py-4\">\n                                <div class=\"form-group\">\n                                <label for=\"make\">Make</label>\n                                <input type=\"text\" [(ngModel)]=\"bike.make\"  name=\"make\" class=\"form-control\" id=\"make\" placeholder=\"Enter make\">\n                                </div>\n                                <div class=\"form-group\">\n                                <label for=\"model\">Model</label>\n                                <input type=\"text\" [(ngModel)]=\"bike.model\" name=\"model\" class=\"form-control\" id=\"model\" placeholder=\"Enter model\">\n                                </div>\n                                <div class=\"form-group\">\n                                <label for=\"year\">Year</label>\n                                <input type=\"text\" [(ngModel)]=\"bike.year\" name=\"year\" class=\"form-control\" id=\"year\" placeholder=\"Enter year, ex: 1990, 2000\">\n                                </div>\n                                <div class=\"form-group\">\n                                <label for=\"mods\">Mods</label>\n                                <textarea type=\"text\" [(ngModel)]=\"bike.mods\" name=\"mods\" class=\"form-control\" id=\"mods\" placeholder=\"Enter modifications\"></textarea>\n                                </div>\n                                <div class=\"form-group\">\n                                <label for=\"picture\">Picture</label>\n                                <input type=\"text\" [(ngModel)]=\"bike.picture\" name=\"picture\" class=\"form-control\" id=\"picture\" placeholder=\"Enter picture url\">\n                                </div>\n                                <div class=\"form-group\">\n                                <label for=\"inputState\">Builder</label>\n                                <select [(ngModel)]=\"bike.builder.id\" name=\"builder_id\" class=\"form-control\">\n                                        <option *ngFor=\"let builder of builders\" [(ngValue)]=\"builder['id']\">{{builder['name']}}</option>\n                                </select>\n                                </div>\n                                <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                        </form>\n                        </ng-template>\n                </ngb-tab>\n                </ngb-tabset>\n        </div>\n </div>\n </main>\n```", "```php\n<main role=\"main\">\n  <div class=\"py-5 bg-light\">\n    <div class=\"container\">\n      <form>\n        <div class=\"form-group row\">\n          <label for=\"search\" class=\"col-sm-2 col-form-label\">Bike List</label>\n          <div class=\"col-sm-8\">\n            <input [(ngModel)]=\"searchText\" [ngModelOptions]=\"{standalone: true}\" placeholder=\"buscar\" type=\"text\" class=\"form-control\"\n              id=\"search\" placeholder=\"Search\">\n          </div>\n          <div class=\"col-sm-2\">\n            <div ngbDropdown class=\"d-inline-block\">\n              <button class=\"btn btn-primary\" id=\"dropdownBasicFilter\" ngbDropdownToggle>Filter</button>\n              <div ngbDropdownMenu aria-labelledby=\"dropdownBasicFilter\">\n                <button class=\"dropdown-item\">Year</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n      <div *ngIf=\"isLoading\" class=\"spinner\">\n        <div class=\"double-bounce1\"></div>\n        <div class=\"double-bounce2\"></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-4\" *ngFor=\"let bike of bikes | bikeSearch: searchText \">\n          <div class=\"card mb-4 box-shadow\">\n            <img class=\"card-img-top\" src=\"{{ bike.picture }}\" alt=\"{{ bike.model }}\">\n            <div class=\"card-body\">\n              <p>{{ bike.model }} | {{ bike.year }}</p>\n              <p class=\"card-text\">{{ bike.mods }}</p>\n              <a routerLink=\"/bikes/{{ bike.id }}\" class=\"card-link\">Vote</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</main>\n```", "```php\n<main role=\"main\">\n  <div class=\"py-5\">\n  <div class=\"container\">\n  <div *ngIf=\"isLoading\" class=\"spinner\">\n    <div class=\"double-bounce1\"></div>\n    <div class=\"double-bounce2\"></div>\n  </div>\n  <ngb-tabset type=\"pills\" *ngIf=\"!isLoading\">\n    <ngb-tab title=\"Bike Detail\">\n      <ng-template ngbTabContent>\n      <br>\n      <div class=\"row\">\n        <div class=\"col-md-4\">\n        <img class=\"card-img-top\" src=\"{{ bike?.picture }}\" alt=\"Card image cap\">\n        </div>\n        <div class=\"col-md-8\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n          <h5 class=\"card-title\">{{ bike?.model }} | {{ bike?.year }} | Ratings: {{ bike?.average_rating }}\n            <span *ngIf=\"userVote\">| Your Vote: {{ userVote }}</span>\n          </h5>\n          <p class=\"card-text\">{{ bike?.mods }}</p>\n          </div>\n          <div *ngIf=\"bike?.builder\" class=\"card-header\">\n          <strong>Builder</strong>:\n          <a routerLink=\"/builders/{{bike?.builder['id']}}\">{{ bike?.builder['name'] }}</a>\n          </div>\n          <div *ngIf=\"bike?.items\" class=\"card-header\">\n          <strong>Featured items</strong>:\n          </div>\n          <ul class=\"list-group list-group-flush\">\n          <li *ngFor=\"let item of bike?.items\" class=\"list-group-item\">\n            <strong>Type</strong>: {{ item.type }} |\n            <strong>Name</strong>: {{ item.name }} |\n            <strong>Company</strong>: {{ item.company }}\n          </li>\n          </ul>\n          <div class=\"card-body\">\n          <ul class=\"list-unstyled list-inline\">\n            <li class=\"list-inline-item\">Vote: </li>\n            <li class=\"list-inline-item\">\n            <a (click)=\"onVote('1')\" class=\"btn btn-outline-secondary\">1</a>\n            </li>\n            <li class=\"list-inline-item\">\n            <a (click)=\"onVote('2')\" class=\"btn btn-outline-primary\">2</a>\n            </li>\n            <li class=\"list-inline-item\">\n            <a (click)=\"onVote('3')\" class=\"btn btn-outline-success\">3</a>\n            </li>\n          </ul>\n          </div>\n        </div>\n        </div>\n      </div>\n      </ng-template>\n    </ngb-tab>\n    <ngb-tab>\n      <ng-template ngbTabTitle *ngIf=\"checkBikeOwner()\">Edit bike</ng-template>\n      <ng-template ngbTabContent>\n      <br>\n      <form (ngSubmit)=\"onSubmit(bikeAddForm)\" #bikeAddForm=\"ngForm\" name=bikeAddForm class=\"bg-light px-4 py-4\">\n        <div class=\"form-group\">\n        <label for=\"make\">Make</label>\n        <input type=\"text\" [(ngModel)]=\"bike.make\"  name=\"make\" class=\"form-control\" id=\"make\" placeholder=\"Enter make\">\n        </div>\n        <div class=\"form-group\">\n        <label for=\"model\">Model</label>\n        <input type=\"text\" [(ngModel)]=\"bike.model\" name=\"model\" class=\"form-control\" id=\"model\" placeholder=\"Enter model\">\n        </div>\n        <div class=\"form-group\">\n        <label for=\"year\">Year</label>\n        <input type=\"text\" [(ngModel)]=\"bike.year\" name=\"year\" class=\"form-control\" id=\"year\" placeholder=\"Enter year, ex: 1990, 2000\">\n        </div>\n        <div class=\"form-group\">\n        <label for=\"mods\">Mods</label>\n        <textarea type=\"text\" [(ngModel)]=\"bike.mods\" name=\"mods\" class=\"form-control\" id=\"mods\" placeholder=\"Enter modifications\"></textarea>\n        </div>\n        <div class=\"form-group\">\n        <label for=\"picture\">Picture</label>\n        <input type=\"text\" [(ngModel)]=\"bike.picture\" name=\"picture\" class=\"form-control\" id=\"picture\" placeholder=\"Enter picture url\">\n        </div>\n        <div class=\"form-group\">\n        <label for=\"inputState\">Builder</label>\n        <select [(ngModel)]=\"bike.builder.id\" name=\"builder_id\" class=\"form-control\">\n          <option *ngFor=\"let builder of builders\" [(ngValue)]=\"builder['id']\">{{builder['name']}}</option>\n        </select>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n      </form>\n      </ng-template>\n    </ngb-tab>\n    </ngb-tabset>\n    </div>\n  </div>\n</main>\n```", "```php\n <main  role=\"main\">\n        <div  class=\"py-5 bg-light\">\n                <div  class=\"container\">\n                        <div *ngIf=\"isLoading\"  class=\"spinner\">\n                                <div  class=\"double-bounce1\"></div>\n                                <div  class=\"double-bounce2\"></div>\n                        </div>\n                        <div  class=\"row\">\n                                <div  class=\"col-md-4\" *ngFor=\"let builder of builders\">\n                                        <div  class=\"card mb-4 box-shadow\">\n                                                <div  class=\"card-header\">\n                                                        <h4  class=\"my-0 font-weight-normal\">{{ builder?.name }}</h4>\n                                                </div>\n                                                <div  class=\"card-body\">\n                                                        <p  class=\"mt-3 mb-4\">{{ builder?.description }</p>\n                                                        <button  routerLink=\"/builders/{{ builder?.id }}\"  type=\"button\"  class=\"btn btn-lg btn-block btn-outline-primary\">View Bike</button>\n                                                </div>\n                                                <div  class=\"card-footer text-muted\">\n                                                        {{ builder?.location }}\n                                                </div>\n                                        </div>\n                                </div>\n                        </div>\n                </div>\n        </div>\n </main>\n```", "```php\n docker-compose up -d\n```", "```php\n docker-compose exec php-fpm bash\n```", "```php\n composer require barryvdh/laravel-cors\n```", "```php\n protected $middlewareGroups = [\n\n        'web'  => [\n                ...\n        ],\n        'api'  => [\n                \\Barryvdh\\Cors\\HandleCors::class,\n                'throttle:60,1',\n                'bindings',\n        ],\n```", "```php\n     export  const  environment  = {\n                production: false,\n                apiUrl: 'http://localhost:8081/api'\n        };\n```", "```php\n import { Router } from  '@angular/router';\n import { Title } from  '@angular/platform-browser';\n\n // App imports\n import { AuthService } from  '../../pages/auth/_services/auth.service';\n```", "```php\n public  constructor(\n        private  titleTagService:  Title,\n        public  auth:  AuthService,\n        private  router:  Router ) {}\n```", "```php\n public  setTitle( pageTitle:  string) {\n        this.titleTagService.setTitle( pageTitle );\n }\n```", "```php\n if (this.auth.getToken()) {\n        this.auth.getUser().subscribe();\n }\n```", "```php\n onLogout() {\n        this.auth.onLogout().subscribe();\n }\n```", "```php\n import { ActivatedRoute } from  '@angular/router';\n\n // App imports\n import { Bike } from  '../bike';\n import { BikesService } from  '../_services/bikes.service';\n import { AuthService } from  '../../auth/_services/auth.service';\n import { User } from  './../../auth/user';\n```", "```php\n bike:  Bike;\n isLoading:  Boolean  =  false;\n userVote:  number;\n builders: Array<Object> = [\n        {id: 1, name: 'Diamond Atelier'},\n        {id: 2, name: 'Deus Ex Machina\\'s'},\n        {id: 3, name: 'Rough Crafts'},\n        {id: 4, name: 'Roldand Sands'},\n        {id: 5, name: 'Chopper Dave'}\n ];\n```", "```php\n constructor(\n        private  bikeService:  BikesService,\n        private  route:  ActivatedRoute,\n        private  auth:  AuthService ) {}\n```", "```php\n // Get bike details\n this.getBikeDetail();\n```", "```php\n getBikeDetail():  void {\n        this.isLoading  =  true;\n        const  id  =  +this.route.snapshot.paramMap.get('id');\n        this.bikeService.getBikeDetail(id)\n                .subscribe(bike  => {\n                        this.isLoading  =  false;\n                        this.bike  =  bike['data'];\n        });\n }\n```", "```php\n onVote(rating:  number, id:  number):  void {\n        // Check if user already vote on a bike\n        if (this.checkUserVote(this.bike.ratings)) {\n                alert('you already vote on this bike');\n                return;\n        }\n        // Get bike id\n        id  =  +this.route.snapshot.paramMap.get('id');\n        // post vote\n        this.bikeService.voteOnBike(rating, id)\n                .subscribe(\n                        (response) => {\n                                this.userVote  =  response.data.rating;\n                                // Update the average rating and rating object on bike\n                                this.bike['average_rating'] =  response.data.average_rating;\n                                // Update ratings array\n                                this.bike.ratings.push(response.data);\n                        }\n                );\n }\n```", "```php\n     public  function  store(Request $request, Bike $bike)\n        {\n                $rating =  Rating::firstOrCreate(\n                        [\n                        'user_id'  => $request->user()->id,\n                        'bike_id'  => $bike->id,\n                        ],\n                        ['rating'  => $request->rating]\n                );\n                return  new  RatingResource($rating);\n        }\n```", "```php\n checkUserVote(ratings:  any[]):  Boolean {\n        const  currentUserId  =  this.auth.currentUser.id;\n        let  ratingUserId:  number;\n        Object.keys(ratings).forEach( (i) => {\n                ratingUserId  =  ratings[i].user_id;\n        });\n        if ( currentUserId  ===  ratingUserId ) {\n                return  true;\n        } else {\n                return  false;\n        }\n }\n```", "```php\n onSubmit(bike) {\n        this.isLoading = true;\n        const id = +this.route.snapshot.paramMap.get('id');\n        this.bikeService.updateBike(id, bike.value)\n        .subscribe(response => {\n                this.isLoading = false;\n                this.bike = response['data'];\n        });\n }\n```", "```php\n checkBikeOwner(): Boolean {\n        if (this.auth.currentUser.id === this.bike.user.id) {\n                return true;\n        } else {\n                return false;\n        }\n }\n```", "```php\n import { NgbDropdown } from '@ng-bootstrap/ng-bootstrap/dropdown/dropdown.module';\n\n // App imports\n import { Bike } from '../bike';\n import { BikesService } from '../_services/bikes.service';\n```", "```php\n // Using Bike Model class\n bikes: Bike[];\n isLoading: Boolean = false;\n public searchText: string;\n```", "```php\n constructor(\n        private bikeService: BikesService) {}\n```", "```php\n // Get bike list\n this.getBikes();\n```", "```php\n getBikes(): void {\n this.isLoading = true;\n this.bikeService.getBikes()\n        .subscribe(\n        response => this.handleResponse(response),\n        error => this.handleError(error));\n }\n```", "```php\n protected handleResponse(response: Bike[]) {\n        this.isLoading = false,\n        this.bikes = response;\n }\n\n protected handleError(error: any) {\n        this.isLoading = false,\n        console.error(error);\n }\n```", "```php\n import { ActivatedRoute } from '@angular/router';\n\n // App imports\n import { Builder } from './../builder';\n import { BuildersService } from '../_services/builders.service';\n```", "```php\n   builder: Builder;\n   isLoading: Boolean = false;\n```", "```php\n constructor(\n        private buildersService: BuildersService,\n        private route: ActivatedRoute) { }\n```", "```php\n ngOnInit() {\n        // Get builder detail\n        this.getBuilderDetail();\n }\n```", "```php\n getBuilderDetail(): void {\n        this.isLoading = true;\n        const id = +this.route.snapshot.paramMap.get('id');\n        this.buildersService.getBuilderDetail(id)\n                .subscribe(builder => {\n                this.isLoading = false;\n                this.builder = builder['data'];\n        });\n }\n```", "```php\n // App imports\n import { Builder } from './../builder';\n import { BuildersService } from '../_services/builders.service';\n```", "```php\n // Using Builder Model class\n builders: Builder[];\n isLoading: Boolean = false;\n```", "```php\n constructor(private builderService: BuildersService) { }\n```", "```php\n ngOnInit() {\n        // Get builder detail\n        this.getBuilders();\n }\n```", "```php\n getBuilders(): void {\n this.isLoading = true;\n this.builderService.getBuilders()\n        .subscribe(\n        response => this.handleResponse(response),\n        error => this.handleError(error));\n }\n```", "```php\n protected handleResponse(response: Builder[]) {\n        this.isLoading = false,\n        this.builders = response;\n }\n protected handleError(error: any) {\n        this.isLoading = false,\n        console.error(error);\n }\n```", "```php\n ng g pipe pages/bikes/_pipes/bikeSearch\n```", "```php\n transform(items: any, searchText: string): any {\n if (searchText) {\n        searchText = searchText.toLowerCase();\n        return items.filter((item: any) => item.model.toLowerCase().indexOf(searchText) > -1);\n }\n return items;\n }\n```", "```php\n <input [(ngModel)]=\"searchText\" [ngModelOptions]=\"{standalone: true}\" placeholder=\"buscar\" type=\"text\" class=\"form-control\"\n       id=\"search\" placeholder=\"Search\">\n```", "```php\n <div class=\"col-md-4\" *ngFor=\"let bike of bikes | bikeSearch: searchText \">...</div>\n```", "```php\n [(ngModel)]=\"user.email\"  name=\"email\"\n [(ngModel)]=\"user.password\" name=\"password\"\n```", "```php\n import { Component, OnInit } from '@angular/core';\n import { Router, ActivatedRoute } from '@angular/router';\n\n // App imports\n import { AuthService } from '../_services/auth.service';\n import { User } from '../user';\n\n @Component({\n selector: 'app-login',\n templateUrl: './login.component.html',\n styleUrls: ['./login.component.scss']\n })\n export class LoginComponent implements OnInit {\n        user: User = new User();\n        error: any;\n        returnUrl: string;\n\n        constructor(\n                private authService: AuthService,\n                private router: Router,\n                private route: ActivatedRoute) { }\n\n        ngOnInit() {\n                //  Set the return url\n                this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n        }\n\n        onSubmit(loginForm): void {\n                this.authService.onLogin(this.user).subscribe(\n                (response) => {\n                        // get return url from route parameters or default to '/'\n                        this.router.navigate([this.returnUrl]);\n                },\n                (error) => {\n                        this.error = error.error;\n                }\n                );\n                // Clear form fields\n                loginForm.reset();\n        }\n\n }\n```", "```php\n formControlName=\"name\"\n formControlName=\"email\"\n formControlName=\"password\"\n```", "```php\n import { Component, OnInit } from '@angular/core';\n import { Router } from '@angular/router';\n import { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n // App imports\n import { User } from '../user';\n import { AuthService } from '../_services/auth.service';\n\n @Component({\n selector: 'app-register',\n templateUrl: './register.component.html',\n styleUrls: ['./register.component.scss']\n })\n export class RegisterComponent implements OnInit {\n\n        user: User = new User();\n        error: any;\n        registerForm: FormGroup;\n\n        constructor(private authService: AuthService, private router: Router, private fb: FormBuilder) {\n                this.createForm();\n        }\n\n        ngOnInit() {}\n\n        createForm() {\n                this.registerForm = this.fb.group({\n                name: [this.user.name, Validators.compose([Validators.required])],\n                email: [this.user.email, Validators.compose([Validators.required, Validators.email ])],\n                password: [this.user.password, Validators.compose([Validators.required, Validators.minLength(6)])],\n                });\n        }\n\n        onSubmit(): void {\n\n                this.authService.onRegister(this.registerForm.value).subscribe(\n                (response) => {\n                        this.router.navigate(['bikes']);\n                },\n                (response) => {\n                        if (response.status === 422) {\n                        Object.keys(response.error).map((err) => {\n                                this.error = `${response.error[err]}`;\n                        });\n\n                        } else {\n                        this.error = response.error;\n                        }\n                }\n                );\n        }\n\n }\n```", "```php\n     import { FormBuilder, FormGroup, Validators } from\n     '@angular/forms';\n```", "```php\n     import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n```", "```php\n     createForm() {\n                this.registerForm = this.fb.group({\n                        name: [this.user.name, Validators.compose([Validators.required])],\n                        email: [this.user.email, Validators.compose([Validators.required, Validators.email ])],\n                        password: [this.user.password, Validators.compose([Validators.required, Validators.minLength(6)])],\n                });\n        }\n```", "```php\n <form class=\"form-signin\" (ngSubmit)=\"onSubmit(loginForm)\" #loginForm=\"ngForm\">\n        <div class=\"text-center mb-4\">\n                <h1 class=\"h3 mt-3 mb-3 font-weight-normal\">Welcome</h1>\n                <p>Motorcycle builders and road lovers</p>\n                <hr>\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{ 'has-error': !email.valid && (email.dirty || email.touched) }\">\n                <label for=\"email\">Email address</label>\n                <input type=\"email\" [(ngModel)]=\"user.email\"  name=\"email\" #email=\"ngModel\" required class=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n                <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"form-feedback\">\n                        <div *ngIf=\"email?.errors.required\">Email is required</div>\n                        <div *ngIf=\"email?.errors.email\">Email must be a valid email address</div>\n                </div>\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{ 'has-error': !password.valid && (password.dirty || password.touched) }\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" [(ngModel)]=\"user.password\" name=\"password\" #password=\"ngModel\" required minlength=\"6\" class=\"form-control\" id=\"password\" placeholder=\"Password\">\n                <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"form-feedback\">\n                        <div *ngIf=\"password?.errors.required\">Password is required</div>\n                        <div *ngIf=\"password?.errors.minlength\">Password must be at least 6 characters</div>\n                </div>\n        </div>\n        <div  *ngIf=\"error\" class=\"alert alert-danger\" role=\"alert\">\n                Ops: {{ error.error }}\n        </div>\n        <button [disabled]=\"!loginForm.valid\" class=\"btn btn-lg btn-primary btn-block mt-5\" type=\"submit\">Login</button>\n </form>\n```", "```php\n     // Email field\n        class=\"form-group\" [ngClass]=\"{ 'has-error': !email.valid && (email.dirty || email.touched) }\"\n        // Password field\n        class=\"form-group\" [ngClass]=\"{ 'has-error': !password.valid && (password.dirty || password.touched) }\"\n```", "```php\n     // Email validation\n        <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"form-feedback\">\n                <div *ngIf=\"email?.errors.required\">Email is required</div>\n                <div *ngIf=\"email?.errors.email\">Email must be a valid email address</div>\n        </div>\n        // Password validation\n        <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"form-feedback\">\n                <div *ngIf=\"password?.errors.required\">Password is required</div>\n                <div *ngIf=\"password?.errors.minlength\">Password must be at least 6 characters</div>\n        </div>\n```", "```php\n     <div  *ngIf=\"error\" class=\"alert alert-danger\" role=\"alert\">\n                Ops: {{ error.error }}\n        </div>\n```", "```php\n     <button [disabled]=\"!loginForm.valid\" class=\"btn btn-lg btn-primary btn-block mt-5\" type=\"submit\">Login</button>\n```", "```php\n <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\"  class=\"form-register\" novalidate>\n        <div class=\"text-center mb-4\">\n                <h1 class=\"h3 mt-3 mb-3 font-weight-normal\">Welcome</h1>\n                <p>Motorcycle builders and road lovers</p>\n                <hr>\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{ 'has-error': !registerForm.get('name').valid && (registerForm.get('name').dirty || registerForm.get('name').touched) }\">\n                <label for=\"name\">Name</label>\n                <input type=\"name\" formControlName=\"name\" class=\"form-control\" id=\"name\" aria-describedby=\"nameHelp\" placeholder=\"Enter your name\">\n                <div class=\"form-feedback\"\n                        *ngIf=\"registerForm.get('name').errors && (registerForm.get('name').dirty || registerForm.get('name').touched)\">\n                        <div *ngIf=\"registerForm.get('name').hasError('required')\">Name is required</div>\n                </div>\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{ 'has-error': !registerForm.get('email').valid && (registerForm.get('email').dirty || registerForm.get('email').touched) }\">\n                <label for=\"email\">Email address</label>\n                <input type=\"email\" formControlName=\"email\" class=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\">\n                <div class=\"form-feedback\"\n                *ngIf=\"registerForm.get('email').errors && (registerForm.get('email').dirty || registerForm.get('email').touched)\">\n                        <div *ngIf=\"registerForm.get('email').hasError('required')\">Email is required</div>\n                        <div *ngIf=\"registerForm.get('email').hasError('email')\">Email must be a valid email address</div>\n                </div>\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{ 'has-error': !registerForm.get('password').valid && (registerForm.get('password').dirty || registerForm.get('password').touched) }\">\n                <label for=\"password\">Password</label>\n                <input type=\"password\" formControlName=\"password\"  class=\"form-control\" id=\"password\" placeholder=\"Password\">\n                <div class=\"form-feedback\"\n                *ngIf=\"registerForm.get('password').errors && (registerForm.get('password').dirty || registerForm.get('password').touched)\">\n                        <p *ngIf=\"registerForm.get('password').hasError('required')\">Password is required</p>\n                        <p *ngIf=\"registerForm.get('password').hasError('minlength')\">Password must be 6 characters long, we need another {{registerForm.get('password').errors['minlength'].requiredLength - registerForm.get('password').errors['minlength'].actualLength}} characters </p>\n                </div>\n        </div>\n        <div  *ngIf=\"error\" class=\"alert alert-danger\" role=\"alert\">\n                Ops: {{ error }}\n        </div>\n        <button [disabled]=\"!registerForm.valid\" class=\"btn btn-lg btn-primary btn-block mt-5\" type=\"submit\">Register</button>\n </form>\n```", "```php\n     // Name field\n        class=\"form-group\" [ngClass]=\"{ 'has-error': !registerForm.get('name').valid && (registerForm.get('name').dirty || registerForm.get('name').touched) }\"\n        // Email field\n        class=\"form-group\" [ngClass]=\"{ 'has-error': !registerForm.get('email').valid && (registerForm.get('email').dirty || registerForm.get('email').touched) }\"\n        // Password field\n        class=\"form-group\" [ngClass]=\"{ 'has-error': !registerForm.get('password').valid && (registerForm.get('password').dirty || registerForm.get('password').touched) }\"\n```", "```php\n     // Name validation\n        <div class=\"form-feedback\"\n                *ngIf=\"registerForm.get('name').errors && (registerForm.get('name').dirty || registerForm.get('name').touched)\">\n                <div *ngIf=\"registerForm.get('name').hasError('required')\">Name is required</div>\n        </div>\n\n        // Email validation\n        <div class=\"form-feedback\"\n                *ngIf=\"registerForm.get('email').errors && (registerForm.get('email').dirty || registerForm.get('email').touched)\">\n                <div *ngIf=\"registerForm.get('email').hasError('required')\">Email is required</div>\n                <div *ngIf=\"registerForm.get('email').hasError('email')\">Email must be a valid email address</div>\n        </div>\n\n        // Password validation\n        <div class=\"form-feedback\"\n                *ngIf=\"registerForm.get('password').errors && (registerForm.get('password').dirty || registerForm.get('password').touched)\">\n                <p *ngIf=\"registerForm.get('password').hasError('required')\">Password is required</p>\n                <p *ngIf=\"registerForm.get('password').hasError('minlength')\">Password must be 6 characters long, we need another {{registerForm.get('password').errors['minlength'].requiredLength - registerForm.get('password').errors['minlength'].actualLength}} characters </p>\n        </div>\n```", "```php\n     <div  *ngIf=\"error\" class=\"alert alert-danger\" role=\"alert\">\n                Ops: {{ error }}\n        </div>\n```", "```php\n     <button [disabled]=\"!registerForm.valid\" class=\"btn btn-lg btn-\n      primary btn-block mt-5\" type=\"submit\">Register</button>\n```"]