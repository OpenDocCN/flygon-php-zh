["```php\n<?php\n\nnamespace Blog\\Entity;\n\nuse Doctrine\\ORM\\Mapping\\Entity;\nuse Doctrine\\ORM\\Mapping\\Id;\nuse Doctrine\\ORM\\Mapping\\GeneratedValue;\nuse Doctrine\\ORM\\Mapping\\Column;\nuse Doctrine\\ORM\\Mapping\\ManyToOne;\n\n/**\n * Comment entity\n *\n * @Entity\n */\nclass Comment\n{\n    /**\n     * @var int\n     *\n     * @Id\n     * @GeneratedValue\n     * @Column(type=\"integer\")\n     */\n    protected $id;\n    /**\n     * @var string\n     *\n     * @Column(type=\"text\")\n     */\n    protected $body;\n    /**\n     * @var \\DateTime\n     *\n     * @Column(type=\"datetime\")\n     */\n    protected $publicationDate;\n    /**\n     * @var Post\n     *\n     * @ManyToOne(targetEntity=\"Post\", inversedBy=\"comments\")\n     */\n    protected $post;\n}\n```", "```php\n      use Doctrine\\ORM\\Mapping\\OneToMany;\n      use Doctrine\\Common\\Collections\\ArrayCollection;\n    ```", "```php\n        /**\n         * @var Comment[]\n         *\n         * @OneToMany(targetEntity=\"Comment\", mappedBy=\"post\")\n         */\n        protected $comments;\n    ```", "```php\n        /**\n         * Initializes collections\n         */\n        public function __construct()\n        {\n            $this->comments = new ArrayCollection();\n        }\n    ```", "```php\n    **php vendor/bin/doctrine.php orm:generate:entities src/**\n\n    ```", "```php\n        public function addComment(\\Blog\\Entity\\Comment$comments)\n        {\n            $this->comments[] = $comments;\n            $comments->setPost($this);\n\n            return $this;\n        }\n    ```", "```php\n**php vendor/bin/doctrine.php orm:schema-tool:update --force**\n\n```", "```php\n<?php\n\nnamespace Blog\\DataFixtures;\n\nuse Blog\\Entity\\Comment;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Common\\DataFixtures\\Doctrine;\nuse Doctrine\\Common\\DataFixtures\\FixtureInterface;\nuse Doctrine\\Common\\Persistence\\ObjectManager;\n\n/**\n * Comment fixtures\n */\nclass LoadCommentData implements FixtureInterface,DependentFixtureInterface\n{\n    /**\n     * Number of comments to add by post\n     */\n    const NUMBER_OF_COMMENTS_BY_POST = 5;\n\n    /**\n     * {@inheritDoc}\n     */\n    public function load(ObjectManager $manager)\n    {\n        $posts = $manager->getRepository('Blog\\Entity\\Post')->findAll();\n\n        foreach ($posts as $post) {\n            for ($i = 1; $i <= self::NUMBER_OF_COMMENTS_BY_POST;$i++) {\n                $comment = new Comment();\n                $comment\n                    ->setBody(<<<EOTLorem ipsum dolor sit amet, consectetur adipiscing elit.EOT\n                    )\n                    ->setPublicationDate(new \\DateTime(sprintf('-%ddays', self::NUMBER_OF_COMMENTS_BY_POST - $i)))\n                    ->setPost($post)\n                ;\n\n                $manager->persist($comment);\n            }\n        }\n\n        $manager->flush();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getDependencies()\n    {\n        return ['Blog\\DataFixtures\\LoadPostData'];\n    }\n}\n```", "```php\n<?php\n\n/**\n * View a blog post\n */\n\nuse Blog\\Entity\\Comment;\n\nrequire_once __DIR__ . '/../src/bootstrap.php';\n/** @var \\Blog\\Entity\\Post $post The post to edit */\n$post = $entityManager->find('Blog\\Entity\\Post', $_GET['id']);\n\nif (!$post) {\n    throw new \\Exception('Post not found');\n}\n\n// Add a comment\nif ('POST' === $_SERVER['REQUEST_METHOD']) {\n    $comment = new Comment();\n    $comment\n        ->setBody($_POST['body'])\n        ->setPublicationDate(new \\DateTime())\n        ->setPost($post)\n    ;\n\n    $entityManager->persist($comment);\n    $entityManager->flush();\n\n    header(sprintf('Location: view-post.php?id=%d', $post->getId()));\n    exit;\n}\n?>\n```", "```php\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title><?=htmlspecialchars($post->getTitle())?> - My blog</title>\n</head>\n<body>\n\n<article>\n    <h1>\n        <?=htmlspecialchars($post->getTitle())?>\n    </h1>\n    Date of publication: <?=$post->getPublicationDate()->format('Y-m-d H:i:s')?>\n    <p>\n        <?=nl2br(htmlspecialchars($post->getBody()))?>\n    </p>\n    <?php if (count($post->getComments())): ?>\n        <h2>Comments</h2>\n\n        <?php foreach ($post->getComments() as $comment): ?>\n            <article>\n                <?=$comment->getPublicationDate()->format('Y-m-dH:i:s')?>\n\n                <p><?=htmlspecialchars($comment->getBody())?></p>\n\n                <a href=\"delete-comment.php?id=<?=$comment->getId()?>\">Delete this comment</a>\n            </article>\n        <?php endforeach ?>\n    <?php endif ?>\n\n    <form method=\"POST\">\n        <h2>Post a comment</h2>\n\n        <label>\n            Comment\n            <textarea name=\"body\"></textarea>\n        </label><br>\n\n        <input type=\"submit\">\n    </form>\n</article>\n\n<a href=\"index.php\">Back to the index</a>\n```", "```php\n<?php\n\n/**\n * Deletes a comment\n */\n\nrequire_once __DIR__ . '/../src/bootstrap.php';\n/** @var Comment $comment The comment to delete */\n$comment = $entityManager->find('Blog\\Entity\\Comment', $_GET['id']);\n\nif (!$comment) {\n    throw new \\Exception('Comment not found');\n}\n\n// Delete the entity and flush\n$entityManager->remove($comment);\n$entityManager->flush();\n\n// Redirect to the blog post\nheader(sprintf('Location: view-post.php?id=%d', $comment->getPost()->getId()));\nexit;\n```", "```php\n        <h1>\n            <?=htmlspecialchars($post->getTitle())?>\n        </h1>\n```", "```php\n        <h1>\n            <a href=\"view-post.php?id=<?=$post->getId()?>\">\n                <?=htmlspecialchars($post->getTitle())?>\n            </a>\n        </h1>\n```", "```php\n    <?php\n\n    namespace Blog\\Entity;\n\n    use Doctrine\\Common\\Collections\\ArrayCollection;\n    use Doctrine\\ORM\\Mapping\\Entity;\n    use Doctrine\\ORM\\Mapping\\Column;\n    use Doctrine\\ORM\\Mapping\\Id;\n    use Doctrine\\ORM\\Mapping\\ManyToMany;\n\n    /**\n     * Tag entity\n     *\n     * @Entity\n     */\n    class Tag\n    {\n        /**\n         * @var string\n         *\n         * @Id\n         * @Column(type=\"string\")\n         */\n        protected $name;\n        /**\n         * @var Post[]\n         *\n         * @ManyToMany(targetEntity=\"Post\", mappedBy=\"tags\")\n         */\n        protected $posts;\n\n        /**\n         * Initializes collection\n         */\n        public function __construct()\n        {\n            $this->posts = new ArrayCollection();\n        }\n\n        /**\n         * String representation\n         *\n         * @return string\n         */\n        public function __toString()\n        {\n            return $this->getName();\n        }\n    }\n    ```", "```php\n    **php vendor/bin/doctrine.php orm:generate:entities src/**\n\n    ```", "```php\n    $posts->addTag($this);\n    ```", "```php\n    use Doctrine\\ORM\\Mapping\\ManyToMany;\n    use Doctrine\\ORM\\Mapping\\JoinTable;\n    use Doctrine\\ORM\\Mapping\\JoinColumn;\n    ```", "```php\n        /**\n         * @var Tag[]\n         *\n         * @ManyToMany(targetEntity=\"Tag\", inversedBy=\"posts\",fetch=\"EAGER\", cascade={\"persist\"}, orphanRemoval=true)\n         * @JoinTable(\n         *      inverseJoinColumns={@JoinColumn(name=\"tag_name\",referencedColumnName=\"name\")}\n         * )\n         */\n        protected $tags;\n    ```", "```php\n        public function __construct()\n        {\n            // \u2026\n            $this->tags = new ArrayCollection();\n        }\n    ```", "```php\n    **php vendor/bin/doctrine.php orm:generate:entities src/**\n\n    ```", "```php\n**php vendor/bin/doctrine.php orm:schema-tool:update --force**\n\n```", "```php\n<?php\n\nnamespace Blog\\DataFixtures;\n\nuse Blog\\Entity\\Tag;\nuse Doctrine\\Common\\DataFixtures\\DependentFixtureInterface;\nuse Doctrine\\Common\\DataFixtures\\Doctrine;\nuse Doctrine\\Common\\DataFixtures\\FixtureInterface;\nuse Doctrine\\Common\\Persistence\\ObjectManager;\n\n/**\n * Tag fixtures\n */\nclass LoadTagData implements FixtureInterface,DependentFixtureInterface\n{\n    /**\n     * Number of comments to add by post\n     */\n    const NUMBER_OF_TAGS = 5;\n    /**\n     * {@inheritDoc}\n     */\n    public function load(ObjectManager $manager)\n    {\n        $tags = [];\n        for ($i = 1; $i <= self::NUMBER_OF_TAGS; $i++) {\n            $tag = new Tag();\n            $tag->setName(sprintf(\"tag%d\", $i));\n\n            $tags[] = $tag;\n        }\n\n        $posts = $manager->getRepository('Blog\\Entity\\Post')->findAll();\n\n        $tagsToAdd = 1;\n        foreach ($posts as $post) {\n            for ($j = 0; $j < $tagsToAdd; $j++) {\n                $post->addTag($tags[$j]);\n            }\n\n            $tagsToAdd = $tagsToAdd % 5 + 1;\n        }\n\n        $manager->flush();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getDependencies()\n    {\n        return ['Blog\\DataFixtures\\LoadPostData'];\n    }\n}\n```", "```php\n    use Blog\\Entity\\Tag;\n    ```", "```php\n        $post\n            ->setTitle($_POST['title'])\n            ->setBody($_POST['body'])\n        ;\n    ```", "```php\n        $newTags = [];\n        foreach (explode(',', $_POST['tags']) as $tagName) {\n            $trimmedTagName = trim($tagName);\n            $tag = $entityManager->find('Blog\\Entity\\Tag',$trimmedTagName);\n            if (!$tag) {\n                $tag = new Tag();\n                $tag->setName($trimmedTagName);\n            }\n\n            $newTags[] = $tag;\n        }\n\n        // Removes unused tags\n        foreach (array_diff($post->getTags()->toArray(),$newTags) as $tag) {\n            $post->removeTag($tag);\n        }\n\n        // Adds new tags\n        foreach (array_diff($newTags, $post->getTags()->toArray()) as $tag) {\n            $post->addTag($tag);\n        }\n    ```", "```php\n        <label>\n            Body\n            <textarea name=\"body\" cols=\"20\" rows=\"10\"required><?=isset ($post) ? htmlspecialchars($post-\n            >getBody()) : ''?></textarea>\n        </label><br>\n    ```", "```php\n        <label>\n            Tags\n            <input type=\"text\" name=\"tags\" value=\"<?=isset($post) ? htmlspecialchars(implode(', ', $post->getTags()->toArray())) : ''?>\" required>\n        </label><br>\n    ```"]