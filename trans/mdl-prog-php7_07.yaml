- en: Chapter 7. Building the Catalog Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。构建目录模块
- en: The catalog module is an essential part of every web shop application. At the
    very basic level, it is responsible for the management and display of categories
    and products. It is a foundation for later modules, such as checkout, that add
    the actual sales capabilities to our web shop application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 目录模块是每个网店应用程序的基本组成部分。在最基本的级别上，它负责管理和显示类别和产品。这是以后模块的基础，例如结账，它为我们的网店应用程序添加了实际的销售功能。
- en: The more robust catalog features might include mass product imports, product
    exports, multi-warehouse inventory management, private members categories, and
    so on. These however, are out of the scope of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 更强大的目录功能可能包括大规模产品导入、产品导出、多仓库库存管理、私人会员类别等。然而，这些超出了本章的范围。
- en: 'In this chapter, we will be covering following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Requirements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求
- en: Dependencies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖关系
- en: Implementation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现
- en: Unit testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Functional testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: Requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求
- en: Following the high level application requirements, defined in [Chapter 4](ch04.html
    "Chapter 4. Requirement Specification for a Modular Web Shop App"), *Requirement
    Specification for Modular Web Shop App*, our module will have several entities
    and other specific features implemented.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[第4章](ch04.html "第4章。模块化网店应用的需求规范")中定义的高级应用程序要求，*模块化网店应用的需求规范*，我们的模块将实现多个实体和其他特定功能。
- en: 'Following is a list of required module entities:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所需模块实体的列表：
- en: Category
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类别
- en: Product
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品
- en: 'The Category entity includes the following properties and their data types:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 类别实体包括以下属性及其数据类型：
- en: '`id`: integer, auto-increment'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：整数，自增'
- en: '`title`: string'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：字符串'
- en: '`url_key`: string, unique'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url_key`：字符串，唯一'
- en: '`description`: text'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：文本'
- en: '`image`: string'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`：字符串'
- en: 'The Product entity includes the following properties:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 产品实体包括以下属性：
- en: '`id`: integer, auto-increment'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：整数，自增'
- en: '`category_id`: integer, foreign key that references the category table ID column'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`category_id`：整数，引用类别表ID列的外键'
- en: '`title`: string'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：字符串'
- en: '`price`: decimal'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`：十进制'
- en: '`sku`: string, unique'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sku`：字符串，唯一'
- en: '`url_key`: string, unique'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url_key`：字符串，唯一'
- en: '`description`: text'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：文本'
- en: '`qty`: integer'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qty`：整数'
- en: '`image`: string'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`：字符串'
- en: '`onsale`: boolean'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onsale`：布尔值'
- en: Aside from just adding these entities and their CRUD pages, we also need to
    override the core module services responsible for building the category menu and
    on sale items.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加这些实体及其CRUD页面之外，我们还需要覆盖负责构建类别菜单和特价商品的核心模块服务。
- en: Dependencies
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖关系
- en: The module has no firm dependencies on any other module. The Symfony framework
    service layer enables us to code modules in such a way that, most of the time,
    there is no need for a dependency between them. While the module does override
    a service defined in the core module, the module itself is not dependent on it,
    as nothing will break if the overriding service is missing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块对任何其他模块没有明确的依赖关系。Symfony框架服务层使我们能够以这样的方式编写模块，大多数情况下它们之间不需要依赖关系。虽然该模块确实覆盖了核心模块中定义的一个服务，但该模块本身并不依赖于它，如果覆盖的服务丢失，也不会出现任何问题。
- en: Implementation
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现
- en: 'We start off by creating a new module called `Foggyline\CatalogBundle`. We
    do so with the help of the console, by running the command as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为`Foggyline\CatalogBundle`的新模块。我们通过控制台运行以下命令来完成：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The command triggers an interactive process that asks us several questions
    along the way, as shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令触发一个交互过程，在这个过程中，会向我们询问几个问题，如下截图所示：
- en: '![Implementation](graphics/B05460_07_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![实现](graphics/B05460_07_01.jpg)'
- en: 'Once done, the following structure is generated for us:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们生成了以下结构：
- en: '![Implementation](graphics/B05460_07_03.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![实现](graphics/B05460_07_03.jpg)'
- en: 'If we now take a look at the `app/AppKernel.php` file, we would see the following
    line under the `registerBundles` method:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看`app/AppKernel.php`文件，我们会在`registerBundles`方法下看到以下行：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similarly, the `app/config/routing.yml` has the following route definition
    added to it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`app/config/routing.yml`中添加了以下路由定义：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here we need to change `prefix: /` into `prefix: /catalog/`, so we don''t collide
    with core module routes. Leaving it as `prefix: /` would simply overrun our core
    `AppBundle` and output `Hello World!` from the `src/Foggyline/CatalogBundle/Resources/views/Default/index.html.twig`
    template to the browser at this point. We want to keep things nice and separated.
    What this means is that the module does not define the root route for itself.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，我们需要将`prefix: /`更改为`prefix: /catalog/`，以便不与核心模块路由冲突。保持`prefix: /`将简单地覆盖我们的核心`AppBundle`，并从`src/Foggyline/CatalogBundle/Resources/views/Default/index.html.twig`模板向浏览器输出`Hello
    World!`。我们希望保持事情的清晰分离。这意味着该模块不为自身定义根路由。'
- en: Creating entities
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建实体
- en: 'Let''s go ahead and create a `Category` entity. We do so by using the console,
    as shown here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个`Category`实体。我们通过控制台来完成，如下所示：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Creating entities](graphics/B05460_07_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![创建实体](graphics/B05460_07_04.jpg)'
- en: 'This creates the `Entity/Category.php` and `Repository/CategoryRepository.php`
    files within the `src/Foggyline/CatalogBundle/` directory. After this, we need
    to update the database, so it pulls in the `Category` entity, as shown in the
    following command line instance:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`src/Foggyline/CatalogBundle/`目录中创建`Entity/Category.php`和`Repository/CategoryRepository.php`文件。之后，我们需要更新数据库，以便引入`Category`实体，如下命令行示例所示：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This results in a screen that looks similar to the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个类似于以下截图的屏幕：
- en: '![Creating entities](graphics/B05460_07_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![创建实体](graphics/B05460_07_05.jpg)'
- en: 'With entity in place, we are ready to generate its CRUD. We do so by using
    the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有了实体，我们就可以生成其CRUD。我们通过以下命令来完成：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This results with interactive output as shown here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生如下交互式输出：
- en: '![Creating entities](graphics/B05460_07_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![创建实体](graphics/B05460_07_06.jpg)'
- en: 'This results in `src/Foggyline/CatalogBundle/Controller/CategoryController.php`
    being created. It also adds an entry to our `app/config/routing.yml` file as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致创建了`src/Foggyline/CatalogBundle/Controller/CategoryController.php`。它还在我们的`app/config/routing.yml`文件中添加了一个条目，如下所示：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Furthermore, the view files are created under the `app/Resources/views/category/`
    directory, which is not what we might expect. We want them under our module `src/Foggyline/CatalogBundle/Resources/views/Default/category/`
    directory, so we need to copy them over. Additionally, we need to modify all of
    the `$this->render` calls within our `CategoryController` by appending the `FoggylineCatalogBundle:default:
    string` to each of the template paths.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，视图文件创建在`app/Resources/views/category/`目录下，这不是我们所期望的。我们希望它们在我们的模块`src/Foggyline/CatalogBundle/Resources/views/Default/category/`目录下，因此我们需要将它们复制过去。此外，我们需要修改`CategoryController`中的所有`$this->render`调用，通过在每个模板路径后附加`FoggylineCatalogBundle:default:
    string`来修改它们。'
- en: 'Next, we go ahead and create the `Product` entity by using the interactive
    generator as discussed earlier:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们继续使用之前讨论过的交互式生成器创建`Product`实体：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We follow the interactive generator, respecting the minimum of the following
    attributes: `title`, `price`, `sku`, `url_key`, `description`, `qty`, `category`,
    and `image`. Aside from `price` and `qty`, which are of types decimal and integer,
    all other attributes are of type string. Furthermore, `sku` and `url_key` are
    flagged as unique. This creates the `Entity/Product.php` and `Repository/ProductRepository.php`
    files within the `src/Foggyline/CatalogBundle/` directory.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遵循交互式生成器，尊重以下属性的最小值：`title`、`price`、`sku`、`url_key`、`description`、`qty`、`category`和`image`。除了`price`和`qty`是十进制和整数类型之外，所有其他属性都是字符串类型。此外，`sku`和`url_key`被标记为唯一。这将在`src/Foggyline/CatalogBundle/`目录中创建`Entity/Product.php`和`Repository/ProductRepository.php`文件。
- en: 'Similar to what we have done for the `Category view` templates, we need to
    do for the `Product view` templates. That is, copy them over from the `app/Resources/views/product/`
    directory to `src/Foggyline/CatalogBundle/Resources/views/Default/product/` and
    update all of the `$this->render` calls within our `ProductController` by appending
    the `FoggylineCatalogBundle:default: string` to each of the template paths.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '与我们为`Category view`模板所做的类似，我们需要为`Product view`模板做同样的事情。也就是说，将它们从`app/Resources/views/product/`目录复制到`src/Foggyline/CatalogBundle/Resources/views/Default/product/`，并通过在每个模板路径后附加`FoggylineCatalogBundle:default:
    string`来更新`ProductController`中的所有`$this->render`调用。'
- en: 'At this point, we won''t rush updating the schema, as we want to add proper
    relations to our code. Each product should be able to have a relation to a single
    `Category` entity. To achieve this, we need to edit `Category.php` and `Product.php`
    from within the `src/Foggyline/CatalogBundle/Entity/` directory, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们不会急于更新模式，因为我们想要为我们的代码添加适当的关系。每个产品应该能够与单个`Category`实体建立关系。为了实现这一点，我们需要编辑`src/Foggyline/CatalogBundle/Entity/`目录中的`Category.php`和`Product.php`，如下所示：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We further need to edit the `Category.php` file by adding the `__toString`
    method implementation to it, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要编辑`Category.php`文件，添加`__toString`方法的实现，如下所示：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The reason we are doing so is that, later on, our Product-editing form would
    know what labels to list under the Category selection, otherwise the system would
    throw the following error:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做的原因是，稍后，我们的产品编辑表单将知道在类别选择下列出什么标签，否则系统会抛出以下错误：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With the above changes in place, we can now run the schema update, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有了以上更改，我们现在可以运行模式更新，如下所示：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we now take a look at our database, the `CREATE` command syntax for our
    `product` table looks like the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的数据库，`product`表的`CREATE`命令语法如下所示：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can see two unique keys and one foreign key restraint defined, as per the
    entries provided to our interactive entity generator. Now we are ready to generate
    the CRUD for our `Product` entity. To do so, we run the `generate:doctrine:crud`
    command and follow the interactive generator as shown here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到定义了两个唯一键和一个外键约束，根据我们交互式实体生成器提供的条目。现在我们准备为我们的`Product`实体生成CRUD。为此，我们运行`generate:doctrine:crud`命令，并按照交互式生成器的指示进行操作，如下所示：
- en: '![Creating entities](graphics/B05460_07_07.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![创建实体](graphics/B05460_07_07.jpg)'
- en: Managing image uploads
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理图像上传
- en: 'At this point, if we access either `/category/new/` or `/product/new/` URL,
    the image field is just a simple input text field, not the actual image upload
    we would like. To make it into an image upload field, we need to edit the `$image`
    property of `Category.php` and `Product.php` as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，如果我们访问`/category/new/`或`/product/new/`URL，图像字段只是一个简单的文本输入字段，而不是我们想要的实际图像上传。为了将其变成图像上传字段，我们需要编辑`Category.php`和`Product.php`中的`$image`属性，如下所示：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As soon as we do so, the input fields turn into the file upload fields, as
    shown here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们这样做，输入字段就变成了文件上传字段，如下所示：
- en: '![Managing image uploads](graphics/B05460_07_09.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![管理图像上传](graphics/B05460_07_09.jpg)'
- en: Next, we will go ahead and implement the upload functionality into the forms.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将继续将上传功能实现到表单中。
- en: 'We do so by first defining the service that will handle the actual upload.
    Service is defined by adding the following entry into the `src/Foggyline/CatalogBundle/Resources/config/services.xml`
    file, under the `services` element:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过在`src/Foggyline/CatalogBundle/Resources/config/services.xml`文件的`services`元素下添加以下条目来定义处理实际上传的服务：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `%foggyline_catalog_images_directory%` argument value is the name of a parameter
    the we will soon define.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`%foggyline_catalog_images_directory%`参数值是我们即将定义的一个参数的名称。'
- en: 'We then create the `src/Foggyline/CatalogBundle/Service/ImageUploader.php`
    file with content as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建`src/Foggyline/CatalogBundle/Service/ImageUploader.php`文件，内容如下：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We then create our own `parameters.yml` file within the `src/Foggyline/CatalogBundle/Resources/config`
    directory with content as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在`src/Foggyline/CatalogBundle/Resources/config`目录中创建自己的`parameters.yml`文件，内容如下：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is the parameter our service expects to find. It can easily be overridden
    with the same entry under `app/config/parameters.yml` if needed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的服务期望找到的参数。如果需要，可以在`app/config/parameters.yml`下用相同的条目轻松覆盖它。
- en: 'In order for our bundle to see the `parameters.yml` file, we still need to
    edit the `FoggylineCatalogExtension.php` file within the `src/Foggyline/CatalogBundle/DependencyInjection/
    directory`, by adding the following `loader` to the end of the `load` method:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的bundle能够看到`parameters.yml`文件，我们仍然需要编辑`src/Foggyline/CatalogBundle/DependencyInjection/
    directory`中的`FoggylineCatalogExtension.php`文件，通过在`load`方法的末尾添加以下`loader`来实现：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'At this point, our Symfony module is able to read its `parameters.yml`, thus
    making it possible for the defined service to pickup the proper value for its
    argument. All that is left is to adjust the code for our `new` and `edit` forms,
    attaching the upload functionality to them. Since both forms are the same, the
    following is a `Category` example that equally applies to the `Product` form as
    well:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的Symfony模块能够读取其`parameters.yml`，从而使其定义的服务能够获取其参数的正确值。现在只需要调整我们的`new`和`edit`表单的代码，将上传功能附加到它们上。由于这两个表单是相同的，以下是一个同样适用于`Product`表单的`Category`示例：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Both the `new` and `edit` forms should now be able to handle file uploads.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`new`和`edit`表单都应该能够处理文件上传。
- en: Overriding core module services
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖核心模块服务
- en: Now let's go ahead and address the category menu and the on-sale items. Back
    when we were building the core module, we defined the global variables under the
    `twig:global` section of the `app/config/config.yml` file. These variables were
    pointing to services defined in the `app/config/services.yml` file. In order for
    us to change the content of the category menu and the on sale items, we need to
    override those services.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续处理类别菜单和特价商品。在构建核心模块时，我们在`app/config/config.yml`文件的`twig:global`部分定义了全局变量。这些变量指向了在`app/config/services.yml`文件中定义的服务。为了改变类别菜单和特价商品的内容，我们需要覆盖这些服务。
- en: 'We start off by adding the following two service definitions under the `src/Foggyline/CatalogBundle/Resources/config/services.xml`
    file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`src/Foggyline/CatalogBundle/Resources/config/services.xml`文件中添加以下两个服务定义：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Both of the services accept the Doctrine ORM entity manager and router service
    arguments, as we will need to use those internally.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个服务都接受Doctrine ORM实体管理器和路由器服务参数，因为我们需要在内部使用它们。
- en: 'We then create the actual `Category` and `OnSale` service classes within the
    `src/Foggyline/CatalogBundle/Service/Menu/` directory as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在`src/Foggyline/CatalogBundle/Service/Menu/`目录中创建了实际的`Category`和`OnSale`服务类，如下所示：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This alone won''t trigger the override of the core module services. Within
    the `src/Foggyline/CatalogBundle/DependencyInjection/Compiler/` directory we need
    to create an `OverrideServiceCompilerPass` class that implements the `CompilerPassInterface`.
    Within its process method, we can then change the definition of the service, as
    follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这样单独做不会触发核心模块服务的覆盖。在`src/Foggyline/CatalogBundle/DependencyInjection/Compiler/`目录中，我们需要创建一个实现`CompilerPassInterface`的`OverrideServiceCompilerPass`类。在其`process`方法中，我们可以改变服务的定义，如下所示：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we need to edit the `build` method of the `src/Foggyline/CatalogBundle/FoggylineCatalogBundle.php`
    file in order to add this compiler pass as shown here:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要编辑`src/Foggyline/CatalogBundle/FoggylineCatalogBundle.php`文件的`build`方法，以添加这个编译器通行证，如下所示：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now our `Category` and `OnSale` services should override the ones defined in
    the core module, thus providing the right values for the header **Category** menu
    and **On Sale** section of the homepage.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`Category`和`OnSale`服务应该覆盖核心模块中定义的服务，从而为主页的标题**类别**菜单和**特价**部分提供正确的值。
- en: Setting up a Category page
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置类别页面
- en: 'The auto-generated CRUD made a Category page for us with the layout as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的CRUD为我们创建了一个类别页面，布局如下：
- en: '![Setting up a Category page](graphics/B05460_07_10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![设置类别页面](graphics/B05460_07_10.jpg)'
- en: 'This is significantly different from the Category page defined under [Chapter
    4](ch04.html "Chapter 4. Requirement Specification for a Modular Web Shop App"),
    *Requirement Specification for Modular Web Shop App*. We therefore need to make
    amends to our Category Show page, by modifying the `show.html.twig` file within
    the `src/Foggyline/CatalogBundle/Resources/views/Default/category/` directory.
    We do so by replacing the entire content of `body` block with code as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这与[第4章](ch04.html "第4章。模块化网店应用的需求规范")中定义的类别页面有很大不同，因此我们需要修改`src/Foggyline/CatalogBundle/Resources/views/Default/category/`目录中的`show.html.twig`文件来修改我们的类别展示页面。我们通过用以下代码替换`body`块的整个内容来实现：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The body is now sectioned into three areas. First, we are addressing the category
    title and description output. We are then fetching and looping through the list
    of products assigned to category, rendering each individual product. Finally,
    we are using the `is_granted` Twig extension to check if the current user role
    is `ROLE_ADMIN`, in which case we show the `Edit` and `Delete` links for the category.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在主体分为三个区域。首先，我们处理类别标题和描述输出。然后，我们获取并循环遍历分配给类别的产品列表，渲染每个单独的产品。最后，我们使用`is_granted`
    Twig扩展来检查当前用户角色是否为`ROLE_ADMIN`，在这种情况下，我们显示类别的`编辑`和`删除`链接。
- en: Setting up a Product page
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置产品页面
- en: 'The auto-generated CRUD made a Product page for us with the layout as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的CRUD为我们创建了一个产品页面，布局如下：
- en: '![Setting up a Product page](graphics/B05460_07_11.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![设置产品页面](graphics/B05460_07_11.jpg)'
- en: 'This differs from the Product page defined under [Chapter 4](ch04.html "Chapter 4. Requirement
    Specification for a Modular Web Shop App"), *Requirement Specification for Modular
    Web Shop App*. To rectify the problem, we need to make amends to our Product Show
    page, by modifying the `show.html.twig` file within the `src/Foggyline/CatalogBundle/Resources/views/Default/product/`
    directory. We do so by replacing entire content of `body` block with code as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这与[第4章](ch04.html "第4章。模块化网店应用的需求规格")中定义的产品页面有所不同，*模块化网店应用的需求规格*。为了纠正问题，我们需要修改`src/Foggyline/CatalogBundle/Resources/views/Default/product/`目录中的`show.html.twig`文件，通过替换`body`块的整个内容来实现。
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The body is now sectioned into two main areas. First, we are addressing the
    product image, title, stock status, and add to cart output. The add to cart form
    uses the `add_to_cart_url` service to provide the right link. This service is
    defined under the core module and, at this point, only provides a dummy link.
    Later on, when we get to the checkout module, we will implement an override for
    this service and inject the right add to cart link. We then output the description
    section. Finally, we use the `is_granted` Twig extension, like we did on the Category
    example, to determine if the user can access the `Edit` and `Delete` links for
    a product.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，主体分为两个主要部分。首先，我们处理产品图片、标题、库存状态和添加到购物车输出。添加到购物车表单使用`add_to_cart_url`服务来提供正确的链接。这个服务在核心模块中定义，并且目前只提供一个虚拟链接。稍后，当我们到达结账模块时，我们将为这个服务实现一个覆盖，并注入正确的添加到购物车链接。然后我们输出描述部分。最后，我们使用`is_granted`
    Twig扩展，就像我们在Category示例中所做的那样，来确定用户是否可以访问产品的`编辑`和`删除`链接。
- en: Unit testing
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: We now have several class files that are not related to the controllers, meaning
    we can run unit tests against them. Still, we won't be going after a full code
    coverage as part of this book, rather focus on some of the little-big things,
    like using containers within our test classes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有几个与控制器无关的类文件，这意味着我们可以对它们进行单元测试。但是，作为本书的一部分，我们不会追求完整的代码覆盖率，而是专注于一些小而重要的事情，比如在我们的测试类中使用容器。
- en: 'We start of by adding the following line under the `testsuites` element of
    our `phpunit.xml.dist` file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`phpunit.xml.dist`文件的`testsuites`元素下添加以下行：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: With that in place, running the `phpunit` command from the root of our shop
    should pick up any test we have defined under the `src/Foggyline/CatalogBundle/Tests/`
    directory.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，从我们商店的根目录运行`phpunit`命令应该会捡起我们在`src/Foggyline/CatalogBundle/Tests/`目录下定义的任何测试。
- en: 'Now let''s go ahead and create a test for our Category service menu. We do
    so by creating an `src/Foggyline/CatalogBundle/Tests/Service/Menu/CategoryTest.php`
    file with the following content:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为我们的Category服务菜单创建一个测试。我们通过创建一个`src/Foggyline/CatalogBundle/Tests/Service/Menu/CategoryTest.php`文件来实现：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding example shows the usage of the `setUp` and `tearDown` method calls,
    which are analogous in behavior to the PHP's `__construct` and `__destruct` methods.
    We use the `setUp` method to set the entity manager and router service that we
    can use through out the rest of the class. The `tearDown` method is merely a clean
    up. Now if we run the `phpunit` command, we should see our test being picked up
    and executed alongside other tests.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子展示了`setUp`和`tearDown`方法的使用，它们的行为类似于PHP的`__construct`和`__destruct`方法。我们使用`setUp`方法来设置实体管理器和路由器服务，以便在类的其余部分中使用。`tearDown`方法只是一个清理工作。现在如果我们运行`phpunit`命令，我们应该能看到我们的测试被捡起并在其他测试之后执行。
- en: 'We can even target this class specifically by executing a `phpunit` command
    with the full class path, as shown here:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以通过执行带有完整类路径的`phpunit`命令来专门针对这个类，如下所示：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Similarly to what we did for `CategoryTest`, we can go ahead and create `OnSaleTest`;
    the only difference between the two being the class name.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们为`CategoryTest`所做的，我们可以继续创建`OnSaleTest`；两者之间唯一的区别是类名。
- en: Functional testing
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试
- en: The great thing about the auto-generate CRUD tool is that it generates even
    the functional tests for us. More specifically, in this case, it generated the
    `CategoryControllerTest.php` and `ProductControllerTest.php` files within the
    `src/Foggyline/CatalogBundle/Tests/Controller/` directory.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成CRUD工具的好处在于它甚至为我们生成了功能测试。具体来说，在这种情况下，它在`src/Foggyline/CatalogBundle/Tests/Controller/`目录下生成了`CategoryControllerTest.php`和`ProductControllerTest.php`文件。
- en: Tip
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Auto-generated functional tests have a commented out methods within class body.
    This throws an error during the `phpunit` run. We need to at least define a dummy
    `test` method in them to allow `phpunit` to overlook them.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的功能测试在类体内有注释掉的方法。这在`phpunit`运行时会报错。我们至少需要在其中定义一个虚拟的`test`方法，以便让`phpunit`忽略它们。
- en: 'If we look into these two files, we can see that they both have a single `testCompleteScenario`
    method defined, which is entirely commented out. Let''s go ahead and change the
    `CategoryControllerTest.php` content as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看这两个文件，我们会发现它们都定义了一个`testCompleteScenario`方法，但是这个方法完全被注释掉了。让我们继续并修改`CategoryControllerTest.php`的内容如下：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We started off by setting `PHP_AUTH_USER` and `PHP_AUTH_PW` as parameters for
    the `createClient` method. This is because our `/new` and `/edit` routes are protected
    by the core module security. These settings allow us to pass the basic HTTP authentication
    along the request. We then tested if the category listing page can be accessed
    and if its Create a new entry link can be clicked. Furthermore, both the `create`
    and `edit` forms were tested, along with their results.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将`PHP_AUTH_USER`和`PHP_AUTH_PW`设置为`createClient`方法的参数。这是因为我们的`/new`和`/edit`路由受核心模块安全保护。这些设置允许我们在请求中传递基本的HTTP身份验证。然后我们测试了类别列表页面是否可以访问以及它的`创建新条目`链接是否可以被点击。此外，我们还测试了`create`和`edit`表单以及它们的结果。
- en: All that remains is to repeat the approach we just used for `CategoryControllerTest.php`
    with `ProductControllerTest.php`. We simply need to change a few labels within
    the `ProductControllerTest` class file to match the `product` routes and expected
    results.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在剩下的就是重复我们刚才在`CategoryControllerTest.php`中使用的方法，在`ProductControllerTest.php`中进行。我们只需要在`ProductControllerTest`类文件中更改一些标签，以匹配`product`路由和预期结果。
- en: Running the `phpunit` command now should successfully execute our tests.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行`phpunit`命令应该能成功执行我们的测试。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter we have built a miniature, but functional, catalog module.
    It allowed us to create, edit, and delete categories and products. By adding a
    few custom lines of code on top of the auto-generated CRUD, we were able to achieve
    image upload functionality for both categories and products. We also saw how to
    override the core module service, by simply removing the existing service definition
    and providing a new one. In regard to tests, we saw how we can pass the authentication
    along our requests to test for protected routes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个微型但功能齐全的目录模块。它允许我们创建、编辑和删除类别和产品。通过在自动生成的CRUD之上添加几行自定义代码，我们能够为类别和产品实现图像上传功能。我们还看到了如何覆盖核心模块服务，只需删除现有的服务定义并提供一个新的定义。在测试方面，我们看到了如何在我们的请求中传递身份验证以测试受保护的路由。
- en: Moving forward, in the next chapter, we will build a customer module.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将构建一个客户模块。
