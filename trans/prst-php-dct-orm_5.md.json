["```php\n      <?php\n\n      namespace Blog\\Entity;\n\n      use Doctrine\\ORM\\Mapping\\MappedSuperclass;\n      use Doctrine\\ORM\\Mapping\\Id;\n      use Doctrine\\ORM\\Mapping\\GeneratedValue;\n      use Doctrine\\ORM\\Mapping\\Column;\n\n      /**\n      * Author superclass\n      *\n      * @**MappedSuperclass**\n      */\n      abstract class Author\n    {\n        /**\n         * @var int\n         *\n         * @Id\n         * @GeneratedValue\n         * @Column(type=\"integer\")\n         */\n        protected $id;\n        /**\n         * @var string\n         *\n         * @Column(type=\"string\")\n         */\n        protected $name;\n        /**\n         * @var string\n         *\n         * @Column(type=\"string\")\n         */\n        protected $email;\n    }\n    ```", "```php\n    <?php\n\n    namespace Blog\\Entity;\n\n    use Doctrine\\Common\\Collections\\ArrayCollection;\n    use Doctrine\\ORM\\Mapping\\Entity;\n    use Doctrine\\ORM\\Mapping\\OneToMany;\n    use Doctrine\\ORM\\Mapping\\Column;\n\n    /**\n     * Post author entity\n     *\n     * @Entity\n     */\n    class PostAuthor **extends Author**\n    {\n        /**\n         * @var string\n         *\n         * @Column(type=\"text\", nullable=true)\n         */\n        protected $bio;\n        /**\n         * @var Post[]\n         *\n         * @OneToMany(targetEntity=\"Post\", mappedBy=\"postAuthor\")\n         */\n        protected $posts;\n\n        /**\n         * Initializes collections\n         */\n        public function __construct()\n        {\n            $this->posts = new ArrayCollection();\n        }\n    }\n    ```", "```php\n        /**\n         * @var PostAuthor\n         *\n         * @ManyToOne(targetEntity=\"PostAuthor\", inversedBy=\"posts\")\n         */\n        protected $author;\n    ```", "```php\n      <?php\n\n      namespace Blog\\Entity;\n\n      use Doctrine\\ORM\\Mapping\\Entity;\n\n      /**\n      * Comment author entity\n      *\n      * @Entity\n      */\n      class CommentAuthor extends Author\n    {\n        /**\n         * @var Comment[]\n         *\n         * @OneToMany(targetEntity=\"Comment\", mappedBy=\"commentAuthor\")\n         */\n        protected $comments;\n    }\n    ```", "```php\n        /**\n         * @var CommentAuthor\n         *\n         * @ManyToOne(targetEntity=\"CommentAuthor\", inversedBy=\"comments\")\n         */\n        protected $author;\n    ```", "```php\n    <?php\n\n    namespace Blog\\DataFixtures;\n\n    use Blog\\Entity\\Comment;\n    use Blog\\Entity\\CommentAuthor;\n    use Blog\\Entity\\Post;\n    use Blog\\Entity\\PostAuthor;\n    use Doctrine\\Common\\DataFixtures\\Doctrine;\n    use Doctrine\\Common\\DataFixtures\\FixtureInterface;\n    use Doctrine\\Common\\Persistence\\ObjectManager;\n\n    /**\n     * Author fixtures\n     */\n    class LoadAuthorData implements FixtureInterface\n    {\n        /**\n         * {@inheritDoc}\n         */\n        public function load(ObjectManager $manager)\n        {\n            $postAuthor = new PostAuthor();\n            $postAuthor->setName('George Abitbol');\n            $postAuthor->setEmail('gabitbol@example.com');\n            $postAuthor->setBio('L\\'homme le plus classe du monde');\n\n            $manager->persist($postAuthor);\n\n            $post = new Post();\n            $post->setTitle('My post');\n            $post->setBody('Lorem ipsum');\n            $post->setPublicationDate(new \\DateTime());\n            $post->setauthor($postAuthor);\n\n            $manager->persist($post);\n\n            $commentAuthor = new CommentAuthor();\n            $commentAuthor->setName('K\u00e9vin Dunglas');\n            $commentAuthor->setEmail('dunglas@gmail.com');\n\n            $manager->persist($commentAuthor);\n\n            $comment = new Comment();\n            $comment->setBody('My comment');\n            $comment->setAuthor($commentAuthor);\n            $comment->setPublicationDate(new \\DateTime());\n\n            $post->addComment($comment);\n            $manager->persist($comment);\n\n            $manager->flush();\n        }\n    }\n    ```", "```php\n     **php vendor/bin/doctrine orm:schema-tool:update --force**\n\n    ```", "```php\n     **php bin/load-fixtures.php**\n\n    ```", "```php\n     **sqlite3 data/blog.db \"SELECT * FROM PostAuthor; SELECT * FROM CommentAuthor;\"**\n\n    ```", "```php\n      use Doctrine\\ORM\\Mapping\\MappedSuperclass;\n      use Doctrine\\ORM\\Mapping\\Id;\n      use Doctrine\\ORM\\Mapping\\GeneratedValue;\n      use Doctrine\\ORM\\Mapping\\Column;\n\n      /**\n      * Author mapped superclass\n      *\n      * @MappedSuperclass\n    ```", "```php\n      use Doctrine\\ORM\\Mapping\\Entity;\n      use Doctrine\\ORM\\Mapping\\InheritanceType;\n      use Doctrine\\ORM\\Mapping\\Id;\n      use Doctrine\\ORM\\Mapping\\GeneratedValue;\n      use Doctrine\\ORM\\Mapping\\Column;\n\n      /**\n      * Author superclass\n      *\n      * @Entity\n      * @InheritanceType(\"SINGLE_TABLE\")\n    ```", "```php\n     **php vendor/bin/doctrine orm:schema-tool:update --force**\n     **php bin/load-fixtures.php**\n\n    ```", "```php\n **sqlite3 data/blog.db \"SELECT * FROM Author\"**\n\n```", "```php\n      * @InheritanceType(\"SINGLE_TABLE\")\n    ```", "```php\n      * @InheritanceType(\"JOINED\")\n    ```", "```php\n     **php vendor/bin/doctrine orm:schema-tool:update --force**\n     **php bin/load-fixtures.php**\n\n    ```", "```php\n     **sqlite3 data/blog.db \"SELECT * FROM Author; SELECT * FROM PostAuthor; SELECT * FROM CommentAuthor;\"**\n\n    ```", "```php\n      use Doctrine\\ORM\\Mapping\\HasLifecycleCallbacks;\n      use Doctrine\\ORM\\Mapping\\PrePersist;\n    ```", "```php\n        /**\n         * Sets publication date to now at persist time\n         * \n         * @PrePersist\n         */\n        public function setPublicationDateOnPrePersist()\n        {\n            if (!$this->publicationDate) {\n                $this->publicationDate = new \\DateTime();\n            }\n        }\n    ```", "```php\n<?php\n\nnamespace Blog\\Event;\n\nuse Blog\\Entity\\Comment;\nuse Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs;\n\n/**\n * Censors French insults in comments\n */\nclass InsultEventListener\n{\n    /**\n     * Censors on the prePersist event\n     *\n     * @param LifecycleEventArgs $args\n     */\n    public function **prePersist(LifecycleEventArgs $args)**\n    {\n **$entity = $args->getObject();**\n\n        if (**$entity instanceof Comment**) {\n            // Use a black list instead, or better don't do that, it's useless\n            $entity->setBody(str_ireplace(['connard', 'lenancker'], 'censored', $entity->getBody()));\n        }\n    }\n}\n```", "```php\n<?php\n\nnamespace Blog\\Event;\n\nuse Doctrine\\Common\\EventSubscriber;\nuse Doctrine\\ORM\\Event\\LifecycleEventArgs;\nuse Doctrine\\ORM\\Events;\nuse Blog\\Entity\\Comment;\n\n/**\n * Mails a post author when a new comment is published\n */\nclass MailAuthorOnCommentEventSubscriber **implements EventSubscriber**\n{\n\n    /**\n     * {@inheritDoc}\n     */\n **public function getSubscribedEvents()**\n **{**\n **return [Events::postPersist];**\n **}**\n\n    /**\n     * Mails the Post's author when a new Comment is published\n     *\n     * @param LifecycleEventArgs $args\n     */\n    public function **postPersist(LifecycleEventArgs $args)**\n    {\n        $entity = $args->getObject();\n\n        if **($entity instanceof Comment**) {\n            if ($entity->getPost()->getAuthor() && $entity->getAuthor()) {\n                mail(\n                    $entity->getPost()->getAuthor()->getEmail(),'New comment!',\n                    sprintf('%s published a new comment on your post %s', $entity->getAuthor()->getName(), $entity->getPost()->getTitle())\n                );\n            }\n        }\n\n    }\n}\n```", "```php\n  use Doctrine\\ORM\\Events;\n  use Doctrine\\Common\\EventManager;\n  use Blog\\Event\\InsultEventListener;\n  use Blog\\Event\\MailAuthorOnCommentEventSubscriber;\n```", "```php\n  $entityManager = EntityManager::create($dbParams, $config, $eventManager);\n```", "```php\n**$eventManager = new EventManager();**\n**$eventManager->addEventListener([Events::prePersist], new InsultEventListener());**\n**$eventManager->addEventSubscriber(new MailAuthorOnCommentEventSubscriber());**\n\n  $entityManager = EntityManager::create($dbParams, $config, **$eventManager**);\n```", "```php\n<?php\n\nrequire_once __DIR__.'/../src/bootstrap.php';\n\nuse Doctrine\\ORM\\Query\\ResultSetMappingBuilder;\n\nconst NUMBER_OF_RESULTS = 100;\n\n **$resultSetMappingBuilder = new ResultSetMappingBuilder($entityManager);**\n **$resultSetMappingBuilder->addRootEntityFromClassMetadata('Blog\\Entity\\Comment', 'c');**\n **$resultSetMappingBuilder->addJoinedEntityFromClassMetadata(**\n **'Blog\\Entity\\Post','p','c','post',[**\n **'id' => 'post_id','body' => 'post_body','publicationDate' => 'post_publication_date','author_id' => 'post_author_id'**\n **])**\n **;**\n\n **$sql = <<<SQL**\n **SELECT id, publicationDate, body, post_id**\n **FROM Comment**\n **ORDER BY publicationDate DESC**\n **LIMIT :limit**\n **SQL;**\n\n **$query = $entityManager->createNativeQuery($sql, $resultSetMappingBuilder);**\n  $query->setParameter('limit', NUMBER_OF_RESULTS);\n  $comments = $query->getResult();\n\n  foreach ($comments as $comment) {\n    echo sprintf('Comment #%s%s', $comment->getId(), PHP_EOL);\n    echo sprintf('Post #%s%s', $comment->getPost()->getId(), PHP_EOL);\n    echo sprintf('Date of publication: %s%s', $comment->getPublicationDate()->format('r'), PHP_EOL);\n    echo sprintf('Body: %s%s', $comment->getBody(), PHP_EOL);\n    echo PHP_EOL;\n}\n```", "```php\n **php bin/list-comments.php**\n\n```", "```php\n<?php\n\nrequire_once __DIR__.'/../src/bootstrap.php';\n\n$sql = <<<SQL\nSELECT\n  COUNT(id) AS nb,\n  MAX(publicationDate) AS latest\nFROM Post\nUNION\nSELECT\n  COUNT(id),\n  MAX(publicationDate)\nFROM Comment\nSQL;\n\n**$query = $entityManager->getConnection()->query($sql);**\n**$result = $query->fetchAll();**\n\n  echo sprintf('Number of posts: %d%s', $result[0]['nb'], PHP_EOL);\n  echo sprintf('Last post: %s%s', $result[0]['latest'], PHP_EOL);\n  echo sprintf('Number of comments: %d%s', $result[1]['nb'], PHP_EOL);\n  echo sprintf('Last comment: %s%s', $result[1]['latest'], PHP_EOL);\n```", "```php\n **php bin/stats.php**\n\n```"]