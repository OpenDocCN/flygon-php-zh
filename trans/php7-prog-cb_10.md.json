["```php\n    $a = new class() {\n      protected $date;\n      public function setDate($date)\n      {\n        if (is_string($date)) {\n            $this->date = new DateTime($date);\n        } else {\n            $this->date = $date;\n        }\n      }\n      public function getDate($asString = FALSE)\n      {\n        if ($asString) {\n            return $this->date->format('Y-m-d H:i:s');\n        } else {\n            return $this->date;\n        }\n      }\n    };\n    ```", "```php\n    <?php\n    class GetSet\n    {\n      protected $intVal = NULL;\n      protected $arrVal = NULL;\n      // note the use of the null coalesce operator to return a default value\n      public function getIntVal() : int\n      {\n        return $this->intVal ?? 0;\n      }\n      public function getArrVal() : array\n      {\n        return $this->arrVal ?? array();\n      }\n      public function setIntVal($val)\n      {\n        $this->intVal = (int) $val ?? 0;\n      }\n      public function setArrVal(array $val)\n      {\n        $this->arrVal = $val ?? array();\n      }\n    }\n    ```", "```php\n    <?php\n    class LotsProps\n    {\n      protected $firstName  = NULL;\n      protected $lastName   = NULL;\n      protected $addr1      = NULL;\n      protected $addr2      = NULL;\n      protected $city       = NULL;\n      protected $state      = NULL;\n      protected $province   = NULL;\n      protected $postalCode = NULL;\n      protected $country    = NULL;\n      protected $values     = array();\n\n      public function __call($method, $params)\n      {\n        preg_match('/^(get|set)(.*?)$/i', $method, $matches);\n        $prefix = $matches[1] ?? '';\n        $key    = $matches[2] ?? '';\n        $key    = strtolower($key);\n        if ($prefix == 'get') {\n            return $this->values[$key] ?? '---';\n        } else {\n            $this->values[$key] = $params[0];\n        }\n      }\n    }\n    ```", "```php\n// set date using a string\n$a->setDate('2015-01-01');\nvar_dump($a->getDate());\n\n// retrieves the DateTime instance\nvar_dump($a->getDate(TRUE));\n\n// set date using a DateTime instance\n$a->setDate(new DateTime('now'));\nvar_dump($a->getDate());\n\n// retrieves the DateTime instance\nvar_dump($a->getDate(TRUE));\n```", "```php\n// create the instance\n$a = new GetSet();\n\n// set a \"proper\" value\n$a->setIntVal(1234);\necho $a->getIntVal();\necho PHP_EOL;\n\n// set a bogus value\n$a->setIntVal('some bogus value');\necho $a->getIntVal();\necho PHP_EOL;\n\n// NOTE: boolean TRUE == 1\n$a->setIntVal(TRUE);\necho $a->getIntVal();\necho PHP_EOL;\n\n// returns array() even though no value was set\nvar_dump($a->getArrVal());\necho PHP_EOL;\n\n// sets a \"proper\" value\n$a->setArrVal(['A','B','C']);\nvar_dump($a->getArrVal());\necho PHP_EOL;\n\ntry {\n    $a->setArrVal('this is not an array');\n    var_dump($a->getArrVal());\n    echo PHP_EOL;\n} catch (TypeError $e) {\n    echo $e->getMessage();\n}\n\necho PHP_EOL;\n```", "```php\n$a = new LotsProps();\n$a->setFirstName('Li\\'l Abner');\n$a->setLastName('Yokum');\n$a->setAddr1('1 Dirt Street');\n$a->setCity('Dogpatch');\n$a->setState('Kentucky');\n$a->setPostalCode('12345');\n$a->setCountry('USA');\n?>\n```", "```php\n<div class=\"container\">\n<div class=\"left blue1\">Name</div>\n<div class=\"right yellow1\">\n<?= $a->getFirstName() . ' ' . $a->getLastName() ?></div>   \n</div>\n<div class=\"left blue2\">Address</div>\n<div class=\"right yellow2\">\n    <?= $a->getAddr1() ?>\n    <br><?= $a->getAddr2() ?>\n    <br><?= $a->getCity() ?>\n    <br><?= $a->getState() ?>\n    <br><?= $a->getProvince() ?>\n    <br><?= $a->getPostalCode() ?>\n    <br><?= $a->getCountry() ?>\n</div>   \n</div>\n```", "```php\n    function buildLinkedList(array $primary,\n                             callable $makeLink)\n    {\n      $linked = new ArrayIterator();\n      foreach ($primary as $key => $row) {\n        $linked->offsetSet($makeLink($row), $key);\n      }\n      $linked->ksort();\n      return $linked;\n    }\n    ```", "```php\n    foreach ($linked as $key => $link) {\n      $output .= printRow($customer[$link]);\n    }\n    ```", "```php\n    function buildLinkedList(array $primary,\n                             callable $makeLink,\n                             $filterCol = NULL,\n                             $filterVal = NULL)\n    {\n      $linked = new ArrayIterator();\n      $filterVal = trim($filterVal);\n      foreach ($primary as $key => $row) {\n        if ($filterCol) {\n          if (trim($row[$filterCol]) == $filterVal) {\n            $linked->offsetSet($makeLink($row), $key);\n          }\n        } else {\n          $linked->offsetSet($makeLink($row), $key);\n        }\n      }\n      $linked->ksort();\n      return $linked;\n    }\n    ```", "```php\n    function buildDoublyLinkedList(ArrayIterator $linked)\n    {\n      $double = new SplDoublyLinkedList();\n      foreach ($linked as $key => $value) {\n        $double->push($value);\n      }\n      return $double;\n    }\n    ```", "```php\n\"id\",\"name\",\"balance\",\"email\",\"password\",\"status\",\"security_question\",\n\"confirm_code\",\"profile_id\",\"level\"\n```", "```php\nfunction readCsv($fn, &$headers)\n{\n  if (!file_exists($fn)) {\n    throw new Error('File Not Found');\n  }\n  $fileObj = new SplFileObject($fn, 'r');\n  $result = array();\n  $headers = array();\n  $firstRow = TRUE;\n  while ($row = $fileObj->fgetcsv()) {\n    // store 1st row as headers\n    if ($firstRow) {\n      $firstRow = FALSE;\n      $headers = $row;\n    } else {\n      if ($row && $row[0] !== NULL && $row[0] !== 0) {\n        $result[$row[0]] = $row;\n      }\n    }\n  }\n  return $result;\n}\n\nfunction printHeaders($headers)\n{\n  return sprintf('%4s : %18s : %8s : %32s : %4s' . PHP_EOL,\n                 ucfirst($headers[0]),\n                 ucfirst($headers[1]),\n                 ucfirst($headers[2]),\n                 ucfirst($headers[3]),\n                 ucfirst($headers[9]));\n}\n\nfunction printRow($row)\n{\n  return sprintf('%4d : %18s : %8.2f : %32s : %4s' . PHP_EOL,\n                 $row[0], $row[1], $row[2], $row[3], $row[9]);\n}\n\nfunction printCustomer($headers, $linked, $customer)\n{\n  $output = '';\n  $output .= printHeaders($headers);\n  foreach ($linked as $key => $link) {\n    $output .= printRow($customer[$link]);\n  }\n  return $output;\n}\n```", "```php\n<?php\ndefine('CUSTOMER_FILE', __DIR__ . '/../data/files/customer.csv');\ninclude __DIR__ . '/chap_10_linked_list_include.php';\n$headers = array();\n$customer = readCsv(CUSTOMER_FILE, $headers);\n```", "```php\n$makeLink = function ($row) {\n  list($first, $last) = explode(' ', $row[1]);\n  return trim($last) . trim($first);\n};\n```", "```php\n$linked = buildLinkedList($customer, $makeLink);\necho printCustomer($headers, $linked, $customer);\n```", "```php\ndefine('LEVEL_FILTER', 'INT');\n\n$filterCol = 9;\n$filterVal = LEVEL_FILTER;\n$linked = buildLinkedList($customer, $makeLink, $filterCol, $filterVal);\n```", "```php\n$makeLink = function ($row) {\n  [$first, $last] = explode(' ', $row[1]);\n  return trim($last) . trim($first);\n};\n```", "```php\n    function bubbleSort(&$linked, $primary, $sortField, $order = 'A')\n    {\n    ```", "```php\n      static $iterations = 0;\n      $swaps = 0;\n      $iterator = new ArrayIterator($linked);\n    ```", "```php\n    while ($iterator->valid()) {\n      $currentLink = $iterator->current();\n      $currentKey  = $iterator->key();\n      if (!$iterator->valid()) break;\n      $iterator->next();\n      $nextLink = $iterator->current();\n      $nextKey  = $iterator->key();\n    ```", "```php\n    if ($order == 'A') {\n        $expr = $primary[$linked->offsetGet\n                ($currentKey)][$sortField] > \n                $primary[$linked->offsetGet($nextKey)][$sortField];\n    } else {\n        $expr = $primary[$linked->offsetGet\n                ($currentKey)][$sortField] < \n                $primary[$linked->offsetGet($nextKey)][$sortField];\n    }\n    ```", "```php\n    if ($expr && $currentKey && $nextKey \n        && $linked->offsetExists($currentKey) \n        && $linked->offsetExists($nextKey)) {\n        $tmp = $linked->offsetGet($currentKey);\n        $linked->offsetSet($currentKey, \n        $linked->offsetGet($nextKey));\n        $linked->offsetSet($nextKey, $tmp);\n        $swaps++;\n      }\n    }\n    ```", "```php\n    if ($swaps) bubbleSort($linked, $primary, $sortField, $order);\n    ```", "```php\n      return ++$iterations;\n    }\n    ```", "```php\n<?php\ndefine('CUSTOMER_FILE', __DIR__ . '/../data/files/customer.csv');\ninclude __DIR__ . '/chap_10_linked_list_include.php';\n$headers = array();\n$customer = readCsv(CUSTOMER_FILE, $headers);\n```", "```php\n$makeLink = function ($row) {\n  return $row[0];\n};\n$linked = buildLinkedList($customer, $makeLink);\n```", "```php\necho 'Iterations: ' . bubbleSort($linked, $customer, 2, 'A') . PHP_EOL;\necho printCustomer($headers, $linked, $customer);\n```", "```php\n    namespace Application\\Generic;\n    use SplStack;\n    class Stack\n    {\n      // code\n    }\n    ```", "```php\n    protected $stack;\n    public function __construct()\n    {\n      $this->stack = new SplStack();\n    }\n    ```", "```php\n    public function push($message)\n    {\n      $this->stack->push($message);\n    }\n    public function pop()\n    {\n      return $this->stack->pop();\n    }\n    ```", "```php\n    public function __invoke()\n    {\n      return $this->stack;\n    }\n    ```", "```php\n<?php\n// setup class autoloading\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Generic\\Stack;\n$stack = new Stack();\n```", "```php\necho 'Do Something ... ' . PHP_EOL;\n$stack->push('1st Message: ' . date('H:i:s'));\nsleep(3);\n\necho 'Do Something Else ... ' . PHP_EOL;\n$stack->push('2nd Message: ' . date('H:i:s'));\nsleep(3);\n\necho 'Do Something Else Again ... ' . PHP_EOL;\n$stack->push('3rd Message: ' . date('H:i:s'));\nsleep(3);\n```", "```php\necho 'What Time Is It?' . PHP_EOL;\nforeach ($stack() as $item) {\n  echo $item . PHP_EOL;\n}\n```", "```php\n    namespace Application\\Generic;\n    class Search\n    {\n      protected $primary;\n      protected $iterations;\n      public function __construct($primary)\n      {\n        $this->primary = $primary;\n      }\n    ```", "```php\n    public function binarySearch(array $keys, $item)\n    {\n      $search = array();\n      foreach ($this->primary as $primaryKey => $data) {\n        $searchKey = function ($keys, $data) {\n          $key = '';\n          foreach ($keys as $k) $key .= $data[$k];\n    ```", "```php\n          return $key;\n        };\n        $search[$searchKey($keys, $data)] = $primaryKey;\n      }\n      ksort($search);\n    ```", "```php\n      $binary = array_keys($search);\n      $result = $this->doBinarySearch($binary, $item);\n      return $this->primary[$search[$result]] ?? FALSE;\n    }\n    ```", "```php\n    public function doBinarySearch($binary, $item)\n    {\n      $iterations = 0;\n      $found = FALSE;\n      $loop  = TRUE;\n      $done  = -1;\n      $max   = count($binary);\n      $lower = 0;\n      $upper = $max - 1;\n    ```", "```php\n      while ($loop && !$found) {\n        $mid = (int) (($upper - $lower) / 2) + $lower;\n    ```", "```php\n    switch ($item <=> $binary[$mid]) {\n      // $item < $binary[$mid]\n      case -1 :\n      $upper = $mid;\n      break;\n      // $item == $binary[$mid]\n      case 0 :\n      $found = $binary[$mid];\n      break;\n      // $item > $binary[$mid]\n      case 1 :\n      default :\n      $lower = $mid;\n    }\n    ```", "```php\n        $loop = (($iterations++ < $max) && ($done < 1));\n        $done += ($upper == $lower) ? 1 : 0;\n      }\n      $this->iterations = $iterations;\n      return $found;\n    }\n    ```", "```php\n<?php\ndefine('CUSTOMER_FILE', __DIR__ . '/../data/files/customer.csv');\ninclude __DIR__ . '/chap_10_linked_list_include.php';\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Generic\\Search;\n$headers = array();\n$customer = readCsv(CUSTOMER_FILE, $headers);\n```", "```php\n$search = new Search($customer);\n$item = 'Todd Lindsey';\n$cols = [1];\necho \"Searching For: $item\\n\";\nvar_dump($search->binarySearch($cols, $item));\n```", "```php\necho 'Upper:Mid:Lower:<=> | ' . $upper . ':' . $mid . ':' . $lower . ':' . ($item <=> $binary[$mid]);\n```", "```php\n    namespace Application\\Database\\Search;\n    class Criteria\n    {\n      public $key;\n      public $item;\n      public $operator;\n      public function __construct($key, $operator, $item = NULL)\n      {\n        $this->key  = $key;\n        $this->operator = $operator;\n        $this->item = $item;\n      }\n    }\n    ```", "```php\n    namespace Application\\Database\\Search;\n    use PDO;\n    use Application\\Database\\Connection;\n    class Engine\n    {\n      const ERROR_PREPARE = 'ERROR: unable to prepare statement';\n      const ERROR_EXECUTE = 'ERROR: unable to execute statement';\n      const ERROR_COLUMN  = 'ERROR: column name not on list';\n      const ERROR_OPERATOR= 'ERROR: operator not on list';\n      const ERROR_INVALID = 'ERROR: invalid search criteria';\n\n      protected $connection;\n      protected $table;\n      protected $columns;\n      protected $mapping;\n      protected $statement;\n      protected $sql = '';\n    ```", "```php\n      protected $operators = [\n          'LIKE'     => 'Equals',\n          '<'        => 'Less Than',\n          '>'        => 'Greater Than',\n          '<>'       => 'Not Equals',\n          'NOT NULL' => 'Exists',\n      ];\n    ```", "```php\n    public function __construct(Connection $connection, \n                                $table, array $columns, array $mapping)\n    {\n      $this->connection  = $connection;\n      $this->setTable($table);\n      $this->setColumns($columns);\n      $this->setMapping($mapping);\n    }\n    ```", "```php\n    public function setColumns($columns)\n    {\n      $this->columns = $columns;\n    }\n    public function getColumns()\n    {\n      return $this->columns;\n    }\n    // etc.\n    ```", "```php\n    public function prepareStatement(Criteria $criteria)\n    {\n      $this->sql = 'SELECT * FROM ' . $this->table . ' WHERE ';\n      $this->sql .= $this->mapping[$criteria->key] . ' ';\n      switch ($criteria->operator) {\n        case 'NOT NULL' :\n          $this->sql .= ' IS NOT NULL OR ';\n          break;\n        default :\n          $this->sql .= $criteria->operator . ' :' \n          . $this->mapping[$criteria->key] . ' OR ';\n      }\n    ```", "```php\n      $this->sql = substr($this->sql, 0, -4)\n        . ' ORDER BY ' . $this->mapping[$criteria->key];\n      $statement = $this->connection->pdo->prepare($this->sql);\n      return $statement;\n    }\n    ```", "```php\n    public function search(Criteria $criteria)\n    {\n      if (empty($criteria->key) || empty($criteria->operator)) {\n        yield ['error' => self::ERROR_INVALID];\n        return FALSE;\n      }\n    ```", "```php\n    try {\n        if (!$statement = $this->prepareStatement($criteria)) {\n          yield ['error' => self::ERROR_PREPARE];\n          return FALSE;\n    }\n    ```", "```php\n    $params = array();\n    switch ($criteria->operator) {\n      case 'NOT NULL' :\n        // do nothing: already in statement\n        break;\n        case 'LIKE' :\n        $params[$this->mapping[$criteria->key]] = \n        '%' . $criteria->item . '%';\n        break;\n        default :\n        $params[$this->mapping[$criteria->key]] = \n        $criteria->item;\n    }\n    ```", "```php\n        $statement->execute($params);\n        while ($row = $statement->fetch(PDO::FETCH_ASSOC)) {\n          yield $row;\n        }\n      } catch (Throwable $e) {\n        error_log(__METHOD__ . ':' . $e->getMessage());\n        throw new Exception(self::ERROR_EXECUTE);\n      }\n      return TRUE;\n    }\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n\nuse Application\\Database\\Connection;\nuse Application\\Database\\Search\\ { Engine, Criteria };\nuse Application\\Form\\Generic;\nuse Application\\Form\\Element\\Select;\n```", "```php\n$dbCols = [\n  'cname' => 'Customer Name',\n  'cbal' => 'Account Balance',\n  'cmail' => 'Email Address',\n  'clevel' => 'Level'\n];\n\n$mapping = [\n  'cname' => 'name',\n  'cbal' => 'balance',\n  'cmail' => 'email',\n  'clevel' => 'level'\n];\n```", "```php\n$conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n$engine = new Engine($conn, 'customer', $dbCols, $mapping);\n```", "```php\n$wrappers = [\n  Generic::INPUT => ['type' => 'td', 'class' => 'content'],\n  Generic::LABEL => ['type' => 'th', 'class' => 'label'],\n  Generic::ERRORS => ['type' => 'td', 'class' => 'error']\n];\n\n// define elements\n$fieldElement = new Select('field',\n                Generic::TYPE_SELECT,\n                'Field',\n                $wrappers,\n                ['id' => 'field']);\n                $opsElement = new Select('ops',\n                Generic::TYPE_SELECT,\n                'Operators',\n                $wrappers,\n                ['id' => 'ops']);\n                $itemElement = new Generic('item',\n                Generic::TYPE_TEXT,\n                'Searching For ...',\n                $wrappers,\n                ['id' => 'item','title' => 'If more than one item, separate with commas']);\n                $submitElement = new Generic('submit',\n                Generic::TYPE_SUBMIT,\n                'Search',\n                $wrappers,\n                ['id' => 'submit','title' => 'Click to Search', 'value' => 'Search']);\n```", "```php\n$key  = (isset($_GET['field'])) \n? strip_tags($_GET['field']) : NULL;\n$op   = (isset($_GET['ops'])) ? $_GET['ops'] : NULL;\n$item = (isset($_GET['item'])) ? strip_tags($_GET['item']) : NULL;\n$fieldElement->setOptions($dbCols, $key);\n$itemElement->setSingleAttribute('value', $item);\n$opsElement->setOptions($engine->getOperators(), $op);\n$criteria = new Criteria($key, $op, $item);\n$results = $engine->search($criteria);\n?>\n```", "```php\n  <form name=\"search\" method=\"get\">\n  <table class=\"display\" cellspacing=\"0\" width=\"100%\">\n    <tr><?= $fieldElement->render(); ?></tr>\n    <tr><?= $opsElement->render(); ?></tr>\n    <tr><?= $itemElement->render(); ?></tr>\n    <tr><?= $submitElement->render(); ?></tr>\n    <tr>\n    <th class=\"label\">Results</th>\n      <td class=\"content\" colspan=2>\n      <span style=\"font-size: 10pt;font-family:monospace;\">\n      <table>\n      <?php foreach ($results as $row) : ?>\n        <tr>\n          <td><?= $row['id'] ?></td>\n          <td><?= $row['name'] ?></td>\n          <td><?= $row['balance'] ?></td>\n          <td><?= $row['email'] ?></td>\n          <td><?= $row['level'] ?></td>\n        </tr>\n      <?php endforeach; ?>\n      </table>\n      </span>\n      </td>\n    </tr>\n  </table>\n  </form>\n```", "```php\n    define('ITEMS_PER_PAGE', 6);\n    define('SUBROWS_PER_PAGE', 6);\n    define('DB_CONFIG_FILE', '/../config/db.config.php');\n    include __DIR__ . '/../Application/Database/Connection.php';\n    use Application\\Database\\Connection;\n    $conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n    $sql  = 'SELECT c.id,c.name,c.balance,c.email,f.phone, '\n      . 'u.transaction,u.date,u.quantity,u.sale_price,r.title '\n      . 'FROM customer AS c '\n      . 'JOIN profile AS f '\n      . 'ON f.id = c.id '\n      . 'JOIN purchases AS u '\n      . 'ON u.customer_id = c.id '\n      . 'JOIN products AS r '\n      . 'ON u.product_id = r.id '\n      . 'WHERE c.id >= :min AND c.id < :max '\n      . 'ORDER BY c.id ASC, u.date DESC ';\n    ```", "```php\n    $page = $_GET['page'] ?? 1;\n    $page = (int) $page;\n    $next = $page + 1;\n    $prev = $page - 1;\n    $prev = ($prev >= 0) ? $prev : 0;\n    ```", "```php\n    $min  = $prev * ITEMS_PER_PAGE;\n    $max  = $page * ITEMS_PER_PAGE;\n    $stmt = $conn->pdo->prepare($sql);\n    $stmt->execute(['min' => $min, 'max' => $max]);\n    ```", "```php\n    $custId = 0;\n    $result = array();\n    $grandTotal = 0.0;\n    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n      if ($row['id'] != $custId) {\n        $custId = $row['id'];\n        $result[$custId] = [\n          'name'    => $row['name'],\n          'balance' => $row['balance'],\n          'email'   => $row['email'],\n          'phone'   => $row['phone'],\n        ];\n        $result[$custId]['total'] = 0;\n      }\n      $result[$custId]['purchases'][] = [\n        'transaction' => $row['transaction'],\n        'date'        => $row['date'],\n        'quantity'    => $row['quantity'],\n        'sale_price'  => $row['sale_price'],\n        'title'       => $row['title'],\n      ];\n      $result[$custId]['total'] += $row['sale_price'];\n      $grandTotal += $row['sale_price'];\n    }\n    ?>\n    ```", "```php\n    <div class=\"container\">\n    <?php foreach ($result as $key => $data) : ?>\n    <div class=\"mainLeft color0\">\n        <?= $data['name'] ?> [<?= $key ?>]\n    </div>\n    <div class=\"mainRight\">\n      <div class=\"row\">\n        <div class=\"left\">Balance</div>\n               <div class=\"right\"><?= $data['balance']; ?></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"left color2\">Email</div>\n               <div class=\"right\"><?= $data['email']; ?></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"left\">Phone</div>\n               <div class=\"right\"><?= $data['phone']; ?></div>\n        </div>\n      <div class=\"row\">\n            <div class=\"left color2\">Total Purchases</div>\n        <div class=\"right\">\n    <?= number_format($data['total'],2); ?>\n    </div>\n      </div>\n    ```", "```php\n    <!-- Purchases Info -->\n    <table>\n      <tr>\n      <th>Transaction</th><th>Date</th><th>Qty</th>\n       <th>Price</th><th>Product</th>\n      </tr>\n      <?php $count  = 0; ?>\n      <?php foreach ($data['purchases'] as $purchase) : ?>\n      <?php $class = ($count++ & 01) ? 'color1' : 'color2'; ?>\n      <tr>\n      <td class=\"<?= $class ?>\"><?= $purchase['transaction'] ?></td>\n      <td class=\"<?= $class ?>\"><?= $purchase['date'] ?></td>\n      <td class=\"<?= $class ?>\"><?= $purchase['quantity'] ?></td>\n      <td class=\"<?= $class ?>\"><?= $purchase['sale_price'] ?></td>\n      <td class=\"<?= $class ?>\"><?= $purchase['title'] ?></td>\n      </tr>\n      <?php endforeach; ?>\n    </table>\n    ```", "```php\n    <?php endforeach; ?>\n    <div class=\"container\">\n      <a href=\"?page=<?= $prev ?>\">\n            <input type=\"button\" value=\"Previous\"></a>\n      <a href=\"?page=<?= $next ?>\">\n            <input type=\"button\" value=\"Next\" class=\"buttonRight\"></a>\n    </div>\n    <div class=\"clearRow\"></div>\n    </div>\n    ```", "```php\n    <script type=\"text/javascript\">\n    function showOrHide(id) {\n      var div = document.getElementById(id);\n      div.style.display = div.style.display == \"none\" ? \"block\" : \"none\";\n    }\n    </script>\n    ```", "```php\n    <div class=\"row\" id=\"<?= 'purchase' . $key ?>\" style=\"display:none;\">\n      <table>\n        <tr>\n          <th>Transaction</th><th>Date</th><th>Qty</th>\n                     <th>Price</th><th>Product</th>\n        </tr>\n      <?php $count  = 0; ?>\n      <?php $first  = TRUE; ?>\n      <?php foreach ($data['purchases'] as $purchase) : ?>\n        <?php if ($count > SUBROWS_PER_PAGE && $first) : ?>\n        <?php     $first = FALSE; ?>\n        <?php     $subId = 'subrow' . $key; ?>\n        </table>\n        <a href=\"#\" onClick=\"showOrHide('<?= $subId ?>')\">More</a>\n        <div id=\"<?= $subId ?>\" style=\"display:none;\">\n        <table>\n        <?php endif; ?>\n      <?php $class = ($count++ & 01) ? 'color1' : 'color2'; ?>\n      <tr>\n      <td class=\"<?= $class ?>\"><?= $purchase['transaction'] ?></td>\n      <td class=\"<?= $class ?>\"><?= $purchase['date'] ?></td>\n      <td class=\"<?= $class ?>\"><?= $purchase['quantity'] ?></td>\n      <td class=\"<?= $class ?>\"><?= $purchase['sale_price'] ?></td>\n      <td class=\"<?= $class ?>\"><?= $purchase['title'] ?></td>\n      </tr>\n      <?php endforeach; ?>\n      </table>\n      <?php if (!$first) : ?></div><?php endif; ?>\n    </div>\n    ```", "```php\n    <input type=\"button\" value=\"Purchases\" class=\"buttonRight\" \n        onClick=\"showOrHide('<?= 'purchase' . $key ?>')\">\n    ```", "```php\nprintf('%6s : %20s : %8s : %20s' . PHP_EOL, \n    $row['id'], $row['name'], $row['transaction'], $row['title']);\n```", "```php\necho '<pre>', var_dump($result), '</pre>'; exit;\n```"]