["```php\n    namespace Application\\MiddleWare;\n    class Constants\n    {\n      const HEADER_HOST   = 'Host';     // host header\n      const HEADER_CONTENT_TYPE = 'Content-Type';\n      const HEADER_CONTENT_LENGTH = 'Content-Length';\n\n      const METHOD_GET    = 'get';\n      const METHOD_POST   = 'post';\n      const METHOD_PUT    = 'put';\n      const METHOD_DELETE = 'delete';\n      const HTTP_METHODS  = ['get','put','post','delete'];\n\n      const STANDARD_PORTS = [\n        'ftp' => 21, 'ssh' => 22, 'http' => 80, 'https' => 443\n      ];\n\n      const CONTENT_TYPE_FORM_ENCODED = \n        'application/x-www-form-urlencoded';\n      const CONTENT_TYPE_MULTI_FORM   = 'multipart/form-data';\n      const CONTENT_TYPE_JSON         = 'application/json';\n      const CONTENT_TYPE_HAL_JSON     = 'application/hal+json';\n\n      const DEFAULT_STATUS_CODE    = 200;\n      const DEFAULT_BODY_STREAM    = 'php://input';\n      const DEFAULT_REQUEST_TARGET = '/';\n\n      const MODE_READ = 'r';\n      const MODE_WRITE = 'w';\n\n      // NOTE: not all error constants are shown to conserve space\n      const ERROR_BAD = 'ERROR: ';\n      const ERROR_UNKNOWN = 'ERROR: unknown';\n\n      // NOTE: not all status codes are shown here!\n      const STATUS_CODES = [\n        200 => 'OK',\n        301 => 'Moved Permanently',\n        302 => 'Found',\n        401 => 'Unauthorized',\n        404 => 'Not Found',\n        405 => 'Method Not Allowed',\n        418 => 'I_m A Teapot',\n        500 => 'Internal Server Error',\n      ];\n    }\n    ```", "```php\n    namespace Application\\MiddleWare;\n    use InvalidArgumentException;\n    use Psr\\Http\\Message\\UriInterface;\n    class Uri implements UriInterface\n    {\n      protected $uriString;\n      protected $uriParts = array();\n\n      public function __construct($uriString)\n      {\n        $this->uriParts = parse_url($uriString);\n        if (!$this->uriParts) {\n          throw new InvalidArgumentException(\n            Constants::ERROR_INVALID_URI);\n        }\n        $this->uriString = $uriString;\n      }\n    ```", "```php\n    public function getScheme()\n    {\n      return strtolower($this->uriParts['scheme']) ?? '';\n    }\n    ```", "```php\n    public function getAuthority()\n    {\n      $val = '';\n      if (!empty($this->getUserInfo()))\n      $val .= $this->getUserInfo() . '@';\n      $val .= $this->uriParts['host'] ?? '';\n      if (!empty($this->uriParts['port']))\n      $val .= ':' . $this->uriParts['port'];\n      return $val;\n    }\n    ```", "```php\n    public function getUserInfo()\n    {\n      if (empty($this->uriParts['user'])) {\n        return '';\n      }\n      $val = $this->uriParts['user'];\n      if (!empty($this->uriParts['pass']))\n        $val .= ':' . $this->uriParts['pass'];\n      return $val;\n    }\n    ```", "```php\n    public function getHost()\n    {\n      if (empty($this->uriParts['host'])) {\n        return '';\n      }\n      return strtolower($this->uriParts['host']);\n    }\n    ```", "```php\n    public function getPort()\n    {\n      if (empty($this->uriParts['port'])) {\n          return NULL;\n      } else {\n          if ($this->getScheme()) {\n              if ($this->uriParts['port'] == \n                  Constants::STANDARD_PORTS[$this->getScheme()]) {\n                  return NULL;\n              }\n          }\n          return (int) $this->uriParts['port'];\n      }\n    }\n    ```", "```php\n    public function getPath()\n    {\n      if (empty($this->urlParts['path'])) {\n        return '';\n      }\n      return implode('/', array_map(\"rawurlencode\", explode('/', $this->urlParts['path'])));\n    }\n    ```", "```php\n    public function getQueryParams($reset = FALSE)\n    {\n      if ($this->queryParams && !$reset) {\n        return $this->queryParams;\n      }\n      $this->queryParams = [];\n      if (!empty($this->uriParts['query'])) {\n        foreach (explode('&', $this->uriParts['query']) as $keyPair) {\n          list($param,$value) = explode('=',$keyPair);\n          $this->queryParams[$param] = $value;\n        }\n      }\n      return $this->queryParams;\n    }\n\n    public function getQuery()\n    {\n      if (!$this->getQueryParams()) {\n        return '';\n      }\n      $output = '';\n      foreach ($this->getQueryParams() as $key => $value) {\n        $output .= rawurlencode($key) . '=' \n        . rawurlencode($value) . '&';\n      }\n      return substr($output, 0, -1);\n    }\n    ```", "```php\n    public function getFragment()\n    {\n      if (empty($this->urlParts['fragment'])) {\n        return '';\n      }\n      return rawurlencode($this->urlParts['fragment']);\n    }\n    ```", "```php\n    public function withScheme($scheme)\n    {\n      if (empty($scheme) && $this->getScheme()) {\n          unset($this->uriParts['scheme']);\n      } else {\n          if (isset(STANDARD_PORTS[strtolower($scheme)])) {\n              $this->uriParts['scheme'] = $scheme;\n          } else {\n              throw new InvalidArgumentException(Constants::ERROR_BAD . __METHOD__);\n          }\n      }\n      return $this;\n    }\n    ```", "```php\n    public function withUserInfo($user, $password = null)\n    {\n      if (empty($user) && $this->getUserInfo()) {\n          unset($this->uriParts['user']);\n      } else {\n          $this->urlParts['user'] = $user;\n          if ($password) {\n              $this->urlParts['pass'] = $password;\n          }\n      }\n      return $this;\n    }\n    // Not shown: withHost(),withPort(),withPath(),withFragment()\n\n    public function withQuery($query)\n    {\n      if (empty($query) && $this->getQuery()) {\n          unset($this->uriParts['query']);\n      } else {\n          $this->uriParts['query'] = $query;\n      }\n      // reset query params array\n      $this->getQueryParams(TRUE);\n      return $this;\n    }\n    ```", "```php\n    public function __toString()\n    {\n        $uri = ($this->getScheme())\n          ? $this->getScheme() . '://' : '';\n    ```", "```php\n    if ($this->getAuthority()) {\n        $uri .= $this->getAuthority();\n    } else {\n        $uri .= ($this->getHost()) ? $this->getHost() : '';\n        $uri .= ($this->getPort())\n          ? ':' . $this->getPort() : '';\n    }\n    ```", "```php\n    $path = $this->getPath();\n    if ($path) {\n        if ($path[0] != '/') {\n            $uri .= '/' . $path;\n        } else {\n            $uri .= $path;\n        }\n    }\n    $uri .= ($this->getQuery())\n      ? '?' . $this->getQuery() : '';\n    $uri .= ($this->getFragment())\n      ? '#' . $this->getFragment() : '';\n    return $uri;\n    }\n\n    public function getUriString()\n    {\n      return $this->__toString();\n    }\n\n    }\n    ```", "```php\n    namespace Application\\MiddleWare;\n    use SplFileInfo;\n    use Throwable;\n    use RuntimeException;\n    use Psr\\Http\\Message\\StreamInterface;\n    class Stream implements StreamInterface\n    {\n      protected $stream;\n      protected $metadata;\n      protected $info;\n    ```", "```php\n    public function __construct($input, $mode = self::MODE_READ)\n    {\n      $this->stream = fopen($input, $mode);\n      $this->metadata = stream_get_meta_data($this->stream);\n      $this->info = new SplFileInfo($input);\n    }\n    ```", "```php\n    public function getStream()\n    {\n      return $this->stream;\n    }\n\n    public function getInfo()\n    {\n      return $this->info;\n    }\n    ```", "```php\n    public function read($length)\n    {\n      if (!fread($this->stream, $length)) {\n          throw new RuntimeException(self::ERROR_BAD . __METHOD__);\n      }\n    }\n    public function write($string)\n    {\n      if (!fwrite($this->stream, $string)) {\n          throw new RuntimeException(self::ERROR_BAD . __METHOD__);\n      }\n    }\n    public function rewind()\n    {\n      if (!rewind($this->stream)) {\n          throw new RuntimeException(self::ERROR_BAD . __METHOD__);\n      }\n    }\n    public function eof()\n    {\n      return eof($this->stream);\n    }\n    public function tell()\n    {\n      try {\n          return ftell($this->stream);\n      } catch (Throwable $e) {\n          throw new RuntimeException(self::ERROR_BAD . __METHOD__);\n      }\n    }\n    public function seek($offset, $whence = SEEK_SET)\n    {\n      try {\n          fseek($this->stream, $offset, $whence);\n      } catch (Throwable $e) {\n          throw new RuntimeException(self::ERROR_BAD . __METHOD__);\n      }\n    }\n    public function close()\n    {\n      if ($this->stream) {\n        fclose($this->stream);\n      }\n    }\n    public function detach()\n    {\n      return $this->close();\n    }\n    ```", "```php\n    public function getMetadata($key = null)\n    {\n      if ($key) {\n          return $this->metadata[$key] ?? NULL;\n      } else {\n          return $this->metadata;\n      }\n    }\n    public function getSize()\n    {\n      return $this->info->getSize();\n    }\n    public function isSeekable()\n    {\n      return boolval($this->metadata['seekable']);\n    }\n    public function isWritable()\n    {\n      return $this->stream->isWritable();\n    }\n    public function isReadable()\n    {\n      return $this->info->isReadable();\n    }\n    ```", "```php\n    public function __toString()\n    {\n      $this->rewind();\n      return $this->getContents();\n    }\n\n    public function getContents()\n    {\n      ob_start();\n      if (!fpassthru($this->stream)) {\n        throw new RuntimeException(self::ERROR_BAD . __METHOD__);\n      }\n      return ob_get_clean();\n    }\n    }\n    ```", "```php\n    <?php\n    declare(strict_types=1);\n    namespace Application\\MiddleWare;\n    use Throwable;\n    use RuntimeException;\n    use SplFileInfo;\n    use Psr\\Http\\Message\\StreamInterface;\n\n    class TextStream implements StreamInterface\n    {\n      protected $stream;\n      protected $pos = 0;\n    ```", "```php\n    public function __construct(string $input)\n    {\n      $this->stream = $input;\n    }\n    public function getStream()\n    {\n      return $this->stream;\n    }\n      public function getInfo()\n    {\n      return NULL;\n    }\n    public function getContents()\n    {\n      return $this->stream;\n    }\n    public function __toString()\n    {\n      return $this->getContents();\n    }\n    public function getSize()\n    {\n      return strlen($this->stream);\n    }\n    public function close()\n    {\n      // do nothing: how can you \"close\" string???\n    }\n    public function detach()\n    {\n      return $this->close();  // that is, do nothing!\n    }\n    ```", "```php\n    public function tell()\n    {\n      return $this->pos;\n    }\n    public function eof()\n    {\n      return ($this->pos == strlen($this->stream));\n    }\n    public function isSeekable()\n    {\n      return TRUE;\n    }\n    public function seek($offset, $whence = NULL)\n    {\n      if ($offset < $this->getSize()) {\n          $this->pos = $offset;\n      } else {\n          throw new RuntimeException(\n            Constants::ERROR_BAD . __METHOD__);\n      }\n    }\n    public function rewind()\n    {\n      $this->pos = 0;\n    }\n    public function isWritable()\n    {\n      return TRUE;\n    }\n    ```", "```php\n    public function write($string)\n    {\n      $temp = substr($this->stream, 0, $this->pos);\n      $this->stream = $temp . $string;\n      $this->pos = strlen($this->stream);\n    }\n\n    public function isReadable()\n    {\n      return TRUE;\n    }\n    public function read($length)\n    {\n      return substr($this->stream, $this->pos, $length);\n    }\n    public function getMetadata($key = null)\n    {\n      return NULL;\n    }\n\n    }\n    ```", "```php\n    namespace Application\\MiddleWare;\n    use RuntimeException;\n    use InvalidArgumentException;\n    use Psr\\Http\\Message\\UploadedFileInterface;\n    class UploadedFile implements UploadedFileInterface\n    {\n\n      protected $field;   // original name of file upload field\n      protected $info;    // $_FILES[$field]\n      protected $randomize;\n      protected $movedName = '';\n    ```", "```php\n    public function __construct($field, array $info, $randomize = FALSE)\n    {\n      $this->field = $field;\n      $this->info = $info;\n      $this->randomize = $randomize;\n    }\n    ```", "```php\n    public function getStream()\n    {\n      if (!$this->stream) {\n          if ($this->movedName) {\n              $this->stream = new Stream($this->movedName);\n          } else {\n              $this->stream = new Stream($info['tmp_name']);\n          }\n      }\n      return $this->stream;\n    }\n    ```", "```php\n    public function moveTo($targetPath)\n    {\n      if ($this->moved) {\n          throw new Exception(Constants::ERROR_MOVE_DONE);\n      }\n      if (!file_exists($targetPath)) {\n          throw new InvalidArgumentException(Constants::ERROR_BAD_DIR);\n      }\n      $tempFile = $this->info['tmp_name'] ?? FALSE;\n      if (!$tempFile || !file_exists($tempFile)) {\n          throw new Exception(Constants::ERROR_BAD_FILE);\n      }\n      if (!is_uploaded_file($tempFile)) {\n          throw new Exception(Constants::ERROR_FILE_NOT);\n      }\n      if ($this->randomize) {\n          $final = bin2hex(random_bytes(8)) . '.txt';\n      } else {\n          $final = $this->info['name'];\n      }\n      $final = $targetPath . '/' . $final;\n      $final = str_replace('//', '/', $final);\n      if (!move_uploaded_file($tempFile, $final)) {\n          throw new RuntimeException(Constants::ERROR_MOVE_UNABLE);\n      }\n      $this->movedName = $final;\n      return TRUE;\n    }\n    ```", "```php\n    public function getMovedName()\n    {\n      return $this->movedName ?? NULL;\n    }\n    public function getSize()\n    {\n      return $this->info['size'] ?? NULL;\n    }\n    public function getError()\n    {\n      if (!$this->moved) {\n          return UPLOAD_ERR_OK;\n      }\n      return $this->info['error'];\n    }\n    public function getClientFilename()\n    {\n      return $this->info['name'] ?? NULL;\n    }\n    public function getClientMediaType()\n    {\n      return $this->info['type'] ?? NULL;\n    }\n\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\MiddleWare\\Uri;\n```", "```php\n$uri = new Uri();\n$uri->withScheme('https')\n    ->withHost('localhost')\n    ->withPort('8080')\n    ->withPath('chap_09_middleware_value_objects_uri.php')\n    ->withQuery('param=TEST');\n\necho $uri;\n```", "```php\n<?php\ndefine('TARGET_DIR', __DIR__ . '/uploads');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\MiddleWare\\UploadedFile;\n```", "```php\ntry {\n    $message = '';\n    $uploadedFiles = array();\n    if (isset($_FILES)) {\n        foreach ($_FILES as $key => $info) {\n          if ($info['tmp_name']) {\n              $uploadedFiles[$key] = new UploadedFile($key, $info, TRUE);\n              $uploadedFiles[$key]->moveTo(TARGET_DIR);\n          }\n        }\n    }\n} catch (Throwable $e) {\n    $message =  $e->getMessage();\n}\n?>\n```", "```php\n<form name=\"search\" method=\"post\" enctype=\"<?= Constants::CONTENT_TYPE_MULTI_FORM ?>\">\n<table class=\"display\" cellspacing=\"0\" width=\"100%\">\n    <tr><th>Upload 1</th><td><input type=\"file\" name=\"upload_1\" /></td></tr>\n    <tr><th>Upload 2</th><td><input type=\"file\" name=\"upload_2\" /></td></tr>\n    <tr><th>Upload 3</th><td><input type=\"file\" name=\"upload_3\" /></td></tr>\n    <tr><th>&nbsp;</th><td><input type=\"submit\" /></td></tr>\n</table>\n</form>\n<?= ($message) ? '<h1>' . $message . '</h1>' : ''; ?>\n```", "```php\n<?php if ($uploadedFiles) : ?>\n<table class=\"display\" cellspacing=\"0\" width=\"100%\">\n    <tr>\n        <th>Filename</th><th>Size</th>\n      <th>Moved Filename</th><th>Text</th>\n    </tr>\n    <?php foreach ($uploadedFiles as $obj) : ?>\n        <?php if ($obj->getMovedName()) : ?>\n        <tr>\n            <td><?= htmlspecialchars($obj->getClientFilename()) ?></td>\n            <td><?= $obj->getSize() ?></td>\n            <td><?= $obj->getMovedName() ?></td>\n            <td><?= $obj->getStream()->getContents() ?></td>\n        </tr>\n        <?php endif; ?>\n    <?php endforeach; ?>\n</table>\n<?php endif; ?>\n<?php phpinfo(INFO_VARIABLES); ?>\n```", "```php\n    namespace Application\\MiddleWare;\n    use Psr\\Http\\Message\\ { \n      MessageInterface, \n      StreamInterface, \n      UriInterface \n    };\n    class Message implements MessageInterface\n    {\n      protected $body;\n      protected $version;\n      protected $httpHeaders = array();\n    ```", "```php\n    public function getBody()\n    {\n      if (!$this->body) {\n          $this->body = new Stream(self::DEFAULT_BODY_STREAM);\n      }\n      return $this->body;\n    }\n    public function withBody(StreamInterface $body)\n    {\n      if (!$body->isReadable()) {\n          throw new InvalidArgumentException(self::ERROR_BODY_UNREADABLE);\n      }\n      $this->body = $body;\n      return $this;\n    }\n    ```", "```php\n    protected function findHeader($name)\n    {\n      $found = FALSE;\n      foreach (array_keys($this->getHeaders()) as $header) {\n        if (stripos($header, $name) !== FALSE) {\n            $found = $header;\n            break;\n        }\n      }\n      return $found;\n    }\n    ```", "```php\n    protected function getHttpHeaders()\n    {\n      if (!$this->httpHeaders) {\n          if (function_exists('apache_request_headers')) {\n              $this->httpHeaders = apache_request_headers();\n          } else {\n              $this->httpHeaders = $this->altApacheReqHeaders();\n          }\n      }\n      return $this->httpHeaders;\n    }\n    ```", "```php\n    protected function altApacheReqHeaders()\n    {\n      $headers = array();\n      foreach ($_SERVER as $key => $value) {\n        if (stripos($key, 'HTTP_') !== FALSE) {\n            $headerKey = str_ireplace('HTTP_', '', $key);\n            $headers[$this->explodeHeader($headerKey)] = $value;\n        } elseif (stripos($key, 'CONTENT_') !== FALSE) {\n            $headers[$this->explodeHeader($key)] = $value;\n        }\n      }\n      return $headers;\n    }\n    protected function explodeHeader($header)\n    {\n      $headerParts = explode('_', $header);\n      $headerKey = ucwords(implode(' ', strtolower($headerParts)));\n      return str_replace(' ', '-', $headerKey);\n    }\n    ```", "```php\n    public function getHeaders()\n    {\n      foreach ($this->getHttpHeaders() as $key => $value) {\n        header($key . ': ' . $value);\n      }\n    }\n    ```", "```php\n    public function withHeader($name, $value)\n    {\n      $found = $this->findHeader($name);\n      if ($found) {\n          $this->httpHeaders[$found] = $value;\n      } else {\n          $this->httpHeaders[$name] = $value;\n      }\n      return $this;\n    }\n\n    public function withAddedHeader($name, $value)\n    {\n      $found = $this->findHeader($name);\n      if ($found) {\n          $this->httpHeaders[$found] .= $value;\n      } else {\n          $this->httpHeaders[$name] = $value;\n      }\n      return $this;\n    }\n\n    public function withoutHeader($name)\n    {\n      $found = $this->findHeader($name);\n      if ($found) {\n          unset($this->httpHeaders[$found]);\n      }\n      return $this;\n    }\n    ```", "```php\n    public function hasHeader($name)\n    {\n      return boolval($this->findHeader($name));\n    }\n\n    public function getHeaderLine($name)\n    {\n      $found = $this->findHeader($name);\n      if ($found) {\n          return $this->httpHeaders[$found];\n      } else {\n          return '';\n      }\n    }\n\n    public function getHeader($name)\n    {\n      $line = $this->getHeaderLine($name);\n      if ($line) {\n          return explode(',', $line);\n      } else {\n          return array();\n      }\n    }\n    ```", "```php\n    public function getHeadersAsString()\n    {\n      $output = '';\n      $headers = $this->getHeaders();\n      if ($headers && is_array($headers)) {\n          foreach ($headers as $key => $value) {\n            if ($output) {\n                $output .= \"\\r\\n\" . $key . ': ' . $value;\n            } else {\n                $output .= $key . ': ' . $value;\n            }\n          }\n      }\n      return $output;\n    }\n    ```", "```php\n    public function getProtocolVersion()\n    {\n      if (!$this->version) {\n          $this->version = $this->onlyVersion($_SERVER['SERVER_PROTOCOL']);\n      }\n      return $this->version;\n    }\n\n    public function withProtocolVersion($version)\n    {\n      $this->version = $this->onlyVersion($version);\n      return $this;\n    }\n\n    protected function onlyVersion($version)\n    {\n      if (!empty($version)) {\n          return preg_replace('/[^0-9\\.]/', '', $version);\n      } else {\n          return NULL;\n      }\n    }\n\n    }\n    ```", "```php\n    namespace Application\\MiddleWare;\n\n    use InvalidArgumentException;\n    use Psr\\Http\\Message\\ { RequestInterface, StreamInterface, UriInterface };\n\n    class Request extends Message implements RequestInterface\n    {\n      protected $uri;\n      protected $method; // HTTP method\n      protected $uriObj; // Psr\\Http\\Message\\UriInterface instance\n    ```", "```php\n    public function __construct($uri = NULL,\n                                $method = NULL,\n                                StreamInterface $body = NULL,\n                                $headers = NULL,\n                                $version = NULL)\n    {\n      $this->uri = $uri;\n      $this->body = $body;\n      $this->method = $this->checkMethod($method);\n      $this->httpHeaders = $headers;\n      $this->version = $this->onlyVersion($version);\n    }\n    protected function checkMethod($method)\n    {\n      if (!$method === NULL) {\n          if (!in_array(strtolower($method), Constants::HTTP_METHODS)) {\n              throw new InvalidArgumentException(Constants::ERROR_HTTP_METHOD);\n          }\n      }\n      return $method;\n    }\n    ```", "```php\n    public function getRequestTarget()\n    {\n      return $this->uri ?? Constants::DEFAULT_REQUEST_TARGET;\n    }\n\n    public function withRequestTarget($requestTarget)\n    {\n      $this->uri = $requestTarget;\n      $this->getUri();\n      return $this;\n    }\n    ```", "```php\n    public function getMethod()\n    {\n      return $this->method;\n    }\n\n    public function withMethod($method)\n    {\n      $this->method = $this->checkMethod($method);\n      return $this;\n    }\n    ```", "```php\n    public function getUri()\n    {\n      if (!$this->uriObj) {\n          $this->uriObj = new Uri($this->uri);\n      }\n      return $this->uriObj;\n    }\n\n    public function withUri(UriInterface $uri, $preserveHost = false)\n    {\n      if ($preserveHost) {\n        $found = $this->findHeader(Constants::HEADER_HOST);\n        if (!$found && $uri->getHost()) {\n          $this->httpHeaders[Constants::HEADER_HOST] = $uri->getHost();\n        }\n      } elseif ($uri->getHost()) {\n          $this->httpHeaders[Constants::HEADER_HOST] = $uri->getHost();\n      }\n      $this->uri = $uri->__toString();\n      return $this;\n      }\n    }\n    ```", "```php\n    namespace Application\\MiddleWare;\n    use Psr\\Http\\Message\\ { ServerRequestInterface, UploadedFileInterface } ;\n\n    class ServerRequest extends Request implements ServerRequestInterface\n    {\n\n      protected $serverParams;\n      protected $cookies;\n      protected $queryParams;\n      protected $contentType;\n      protected $parsedBody;\n      protected $attributes;\n      protected $method;\n      protected $uploadedFileInfo;\n      protected $uploadedFileObjs;\n    ```", "```php\n    public function getServerParams()\n    {\n      if (!$this->serverParams) {\n          $this->serverParams = $_SERVER;\n      }\n      return $this->serverParams;\n    }\n    // getCookieParams() reads $_COOKIE\n    // getQueryParams() reads $_GET\n    // getUploadedFileInfo() reads $_FILES\n\n    public function getRequestMethod()\n    {\n      $method = $this->getServerParams()['REQUEST_METHOD'] ?? '';\n      $this->method = strtolower($method);\n      return $this->method;\n    }\n\n    public function getContentType()\n    {\n      if (!$this->contentType) {\n          $this->contentType = $this->getServerParams()['CONTENT_TYPE'] ?? '';\n          $this->contentType = strtolower($this->contentType);\n      }\n      return $this->contentType;\n    }\n    ```", "```php\n    public function getUploadedFiles()\n    {\n      if (!$this->uploadedFileObjs) {\n          foreach ($this->getUploadedFileInfo() as $field => $value) {\n            $this->uploadedFileObjs[$field] = new UploadedFile($field, $value);\n          }\n      }\n      return $this->uploadedFileObjs;\n    }\n    ```", "```php\n    public function withCookieParams(array $cookies)\n    {\n      array_merge($this->getCookieParams(), $cookies);\n      return $this;\n    }\n    public function withQueryParams(array $query)\n    {\n      array_merge($this->getQueryParams(), $query);\n      return $this;\n    }\n    public function withUploadedFiles(array $uploadedFiles)\n    {\n      if (!count($uploadedFiles)) {\n          throw new InvalidArgumentException(Constant::ERROR_NO_UPLOADED_FILES);\n      }\n      foreach ($uploadedFiles as $fileObj) {\n        if (!$fileObj instanceof UploadedFileInterface) {\n            throw new InvalidArgumentException(Constant::ERROR_INVALID_UPLOADED);\n        }\n      }\n      $this->uploadedFileObjs = $uploadedFiles;\n    }\n    ```", "```php\n    public function getParsedBody()\n    {\n      if (!$this->parsedBody) {\n          if (($this->getContentType() == Constants::CONTENT_TYPE_FORM_ENCODED\n               || $this->getContentType() == Constants::CONTENT_TYPE_MULTI_FORM)\n               && $this->getRequestMethod() == Constants::METHOD_POST)\n          {\n              $this->parsedBody = $_POST;\n          } elseif ($this->getContentType() == Constants::CONTENT_TYPE_JSON\n                    || $this->getContentType() == Constants::CONTENT_TYPE_HAL_JSON)\n          {\n              ini_set(\"allow_url_fopen\", true);\n              $this->parsedBody = json_decode(file_get_contents('php://input'));\n          } elseif (!empty($_REQUEST)) {\n              $this->parsedBody = $_REQUEST;\n          } else {\n              ini_set(\"allow_url_fopen\", true);\n              $this->parsedBody = file_get_contents('php://input');\n          }\n      }\n      return $this->parsedBody;\n    }\n\n    public function withParsedBody($data)\n    {\n      $this->parsedBody = $data;\n      return $this;\n    }\n    ```", "```php\n    public function getAttributes()\n    {\n      return $this->attributes;\n    }\n    public function getAttribute($name, $default = NULL)\n    {\n      return $this->attributes[$name] ?? $default;\n    }\n    public function withAttribute($name, $value)\n    {\n      $this->attributes[$name] = $value;\n      return $this;\n    }\n    public function withoutAttribute($name)\n    {\n      if (isset($this->attributes[$name])) {\n          unset($this->attributes[$name]);\n      }\n      return $this;\n    }\n\n    }\n    ```", "```php\n    public function initialize()\n    {\n      $this->getServerParams();\n      $this->getCookieParams();\n      $this->getQueryParams();\n      $this->getUploadedFiles;\n      $this->getRequestMethod();\n      $this->getContentType();\n      $this->getParsedBody();\n      return $this;\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\MiddleWare\\ServerRequest;\n\n$request = new ServerRequest();\n$request->initialize();\necho '<pre>', var_dump($request), '</pre>';\n```", "```php\n**php -S localhost:8080 chap_09_middleware_server.php'**\n\n```", "```php\n<?php\ndefine('READ_FILE', __DIR__ . '/gettysburg.txt');\ndefine('TEST_SERVER', 'http://localhost:8080');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\MiddleWare\\ { Request, Stream, Constants };\n```", "```php\n$body = new Stream(READ_FILE);\n```", "```php\n$request = new Request(\n    TEST_SERVER,\n    Constants::METHOD_POST,\n    $body,\n    [Constants::HEADER_CONTENT_TYPE => Constants::CONTENT_TYPE_FORM_ENCODED,Constants::HEADER_CONTENT_LENGTH => $body->getSize()]\n);\n```", "```php\n$uriObj = new Uri(TEST_SERVER);\n$request = new Request();\n$request->withRequestTarget(TEST_SERVER)\n        ->withMethod(Constants::METHOD_POST)\n        ->withBody($body)\n        ->withHeader(Constants::HEADER_CONTENT_TYPE, Constants::CONTENT_TYPE_FORM_ENCODED)\n        ->withAddedHeader(Constants::HEADER_CONTENT_LENGTH, $body->getSize());\n```", "```php\n$data = http_build_query(['data' => $request->getBody()->getContents()]);\n$defaults = array(\n    CURLOPT_URL => $request->getUri()->getUriString(),\n    CURLOPT_POST => true,\n    CURLOPT_POSTFIELDS => $data,\n);\n$ch = curl_init();\ncurl_setopt_array($ch, $defaults);\n$response = curl_exec($ch);\ncurl_close($ch);\n```", "```php\n    namespace Application\\MiddleWare;\n    use Psr\\Http\\Message\\ { Constants, ResponseInterface, StreamInterface };\n    class Response extends Message implements ResponseInterface\n    {\n      protected $statusCode;\n    ```", "```php\n    public function __construct($statusCode = NULL,\n                                StreamInterface $body = NULL,\n                                $headers = NULL,\n                                $version = NULL)\n    {\n      $this->body = $body;\n      $this->status['code'] = $statusCode ?? Constants::DEFAULT_STATUS_CODE;\n      $this->status['reason'] = Constants::STATUS_CODES[$statusCode] ?? '';\n      $this->httpHeaders = $headers;\n      $this->version = $this->onlyVersion($version);\n      if ($statusCode) $this->setStatusCode();\n    }\n    ```", "```php\n    public function setStatusCode()\n    {\n      http_response_code($this->getStatusCode());\n    }\n    ```", "```php\n    public function getStatusCode()\n    {\n      return $this->status['code'];\n    }\n    ```", "```php\n    public function withStatus($statusCode, $reasonPhrase = '')\n    {\n      if (!isset(Constants::STATUS_CODES[$statusCode])) {\n          throw new InvalidArgumentException(Constants::ERROR_INVALID_STATUS);\n      }\n      $this->status['code'] = $statusCode;\n      $this->status['reason'] = ($reasonPhrase) ? Constants::STATUS_CODES[$statusCode] : NULL;\n      $this->setStatusCode();\n      return $this;\n    }\n    ```", "```php\n    public function getReasonPhrase()\n    {\n      return $this->status['reason'] \n        ?? Constants::STATUS_CODES[$this->status['code']] \n        ?? '';\n      }\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\MiddleWare\\ { Constants, ServerRequest, Response, Stream };\n```", "```php\n$data = [\n  1 => 'churchill.txt',\n  2 => 'gettysburg.txt',\n  3 => 'star_trek.txt'\n];\n```", "```php\ntry {\n\n    $body['text'] = 'Initial State';\n    $request = new ServerRequest();\n    $request->initialize();\n    $tempFile = bin2hex(random_bytes(8)) . '.txt';\n    $code = 200;\n```", "```php\nif ($request->getMethod() == Constants::METHOD_GET) {\n    $id = $request->getQueryParams()['id'] ?? NULL;\n    $id = (int) $id;\n    if ($id && $id <= count($data)) {\n        $body['text'] = file_get_contents(\n        __DIR__ . '/' . $data[$id]);\n    } else {\n        $body['text'] = $data;\n    }\n```", "```php\n} elseif ($request->getMethod() == Constants::METHOD_POST) {\n    $size = $request->getBody()->getSize();\n    $body['text'] = $size . ' bytes of data received';\n    if ($size) {\n        $code = 201;\n    } else {\n        $code = 204;\n    }\n}\n```", "```php\n} catch (Exception $e) {\n    $code = 500;\n    $body['text'] = 'ERROR: ' . $e->getMessage();\n}\n```", "```php\ntry {\n    file_put_contents($tempFile, json_encode($body));\n    $body = new Stream($tempFile);\n    $header[Constants::HEADER_CONTENT_TYPE] = 'application/json';\n    $response = new Response($code, $body, $header);\n    $response->getHeaders();\n    echo $response->getBody()->getContents() . PHP_EOL;\n    var_dump($response);\n```", "```php\n} catch (Throwable $e) {\n    echo $e->getMessage();\n} finally {\n   unlink($tempFile);\n}\n```", "```php\n**php -S localhost:8080**\n\n```"]