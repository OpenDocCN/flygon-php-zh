- en: Chapter 7. Spell Check in Solr
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。Solr中的拼写检查
- en: 'The spell check component can be used to suggest spelling corrections based
    on the data we have in our index. In this chapter, we will see how to enable spell
    check in our index and use PHP to get and display spelling corrections. The topics
    that we will cover in this chapter are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 拼写检查组件可用于根据我们在索引中拥有的数据提供拼写更正的建议。在本章中，我们将看到如何在我们的索引中启用拼写检查，并使用PHP获取和显示拼写更正。本章将涵盖以下主题：
- en: Solr configuration for spell check
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拼写检查的Solr配置
- en: Spell checker implementations available in Solr
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solr中可用的拼写检查器实现
- en: Running a spell check query using PHP
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP运行拼写检查查询
- en: Displaying suggestions and collations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示建议和整理
- en: Building the autocomplete feature
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自动完成功能
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Spell check works on indexed words. If our index has incorrect spellings, the
    suggestions may also be misspelled.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 拼写检查适用于索引词。如果我们的索引中有拼写错误，建议也可能拼写错误。
- en: Spell check can be used to suggest spelling corrections to the user by providing
    a *did you mean* functionality. It is similar to the **showing results for** feature
    that Google provides. It can be used to provide a list of suggestions for autocompleting
    the user's input text. PHP also has a similar functionality known as **pspell**
    but this spellcheck is built on top of the index that we have created in Solr.
    This means that it is more customized to the type of documents that are there
    in the index and also can be tweaked for results that are more to our liking.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 拼写检查可用于向用户提供拼写更正的建议，提供*您是不是想要*的功能。这类似于Google提供的**显示结果**功能。它可用于为自动完成用户输入文本提供一系列建议。PHP也有一个类似的功能，称为**pspell**，但这个拼写检查是建立在我们在Solr中创建的索引之上的。这意味着它更加定制化，适用于索引中存在的文档类型，并且可以调整以获得更符合我们喜好的结果。
- en: Solr configuration for spell check
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拼写检查的Solr配置
- en: 'The demo schema and configuration that comes with Solr installation already
    has spell check configured in it. Let us look at its settings:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Solr安装中附带的演示模式和配置已经配置了拼写检查。让我们看看它的设置：
- en: Open up `solrconfig.xml` inside `<solr_dir>/example/solr/collection1/conf`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`<solr_dir>/example/solr/collection1/conf`中的`solrconfig.xml`。
- en: Search for `searchComponent` by the name of `spellcheck`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过名称为`spellcheck`的`searchComponent`进行搜索。
- en: 'Inside the `spellcheck` component there are multiple spellchecker(s). Here
    is the `default` spellchecker that comes along with Solr:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`spellcheck`组件内部有多个拼写检查器。这是Solr附带的`default`拼写检查器：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding block of code shows various variables used in spell check. Let
    us go through the important variables in spell check configuration and check out
    their meanings:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上面的代码块显示了拼写检查中使用的各种变量。让我们来看看拼写检查配置中的重要变量，并了解它们的含义：
- en: '`name`: This variable specifies the name of the spell check configuration of
    the Solr spellchecker. In our configuration the name is `default`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：此变量指定Solr拼写检查器的拼写检查配置的名称。在我们的配置中，名称是`default`。'
- en: '`field`: This variable specifies the field that will be used for spellchecking.
    We are using the text field to load tokens for spellchecking.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`field`：此变量指定用于拼写检查的字段。我们使用文本字段来加载拼写检查的标记。'
- en: '`classname`: This variable specifies the implementation of Solr spellchecker
    that is being used. We are using `DirectSolrSpellChecker`, which uses the Solr
    index directly and does not require us to build or rebuild the spell check index.
    We will look at other implementations as well.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`classname`：此变量指定正在使用的Solr拼写检查器的实现。我们使用`DirectSolrSpellChecker`，它直接使用Solr索引，不需要我们构建或重建拼写检查索引。我们还将查看其他实现。'
- en: '`accuracy`: This variable ranges from `0.0` to `1.0`, `1.0` being most accurate.
    This accuracy value is used by the Solr spell checking implementation to decide
    if the results can be used or not.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accuracy`：此变量的范围为`0.0`到`1.0`，`1.0`表示最准确。Solr拼写检查实现使用此准确度值来决定是否可以使用结果。'
- en: '`maxQueryFrequency`: This variable specifies the maximum threshold for the
    number of documents a query term must appear in to be considered as a suggestion.
    Here it is set to `0.01`. A lower threshold is better for smaller indexes.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxQueryFrequency`：此变量指定查询术语必须出现在文档中的最大阈值，才能被视为建议。这里设置为`0.01`。较小的阈值对于较小的索引更好。'
- en: '`thresholdTokenFrequency`: This variable specifies that the term must occur
    in one percent of the documents to be considered for spelling suggestions. This
    prevents low frequency terms from being offered as suggestions. But if your document
    base is small, you may need to reduce this further to get spelling suggestions.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thresholdTokenFrequency`：此变量指定术语必须出现在百分之一的文档中，才能被考虑为拼写建议。这可以防止低频率的术语被提供为建议。但是，如果您的文档基数很小，您可能需要进一步减少这个值以获得拼写建议。'
- en: Spell checker implementations available with Solr
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Solr中可用的拼写检查器实现
- en: 'Let us go through the different spell checker implementations available with
    Solr:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Solr提供的不同拼写检查器实现：
- en: '`DirectSolrSpellChecker`: This implementation does not require a separate index
    to be built for spell checking. It uses the main Solr index for spelling suggestions.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DirectSolrSpellChecker`：此实现不需要为拼写检查构建单独的索引。它使用主Solr索引进行拼写建议。'
- en: '`IndexBasedSpellChecker`: This implementation is used to create and maintain
    a spelling dictionary that is based on the Solr index. Since a separate index
    is created and maintained, we need to build/rebuild the index whenever the main
    index changes. This can be done automatically by enabling `buildOnCommit` or `buildOnOptimize`
    in the configuration. Also, we need to specify the location of the index to be
    created using the `spellcheckIndexDir` variable in our Solr spellcheck component
    configuration.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IndexBasedSpellChecker`：此实现用于创建和维护基于Solr索引的拼写词典。由于需要创建和维护一个单独的索引，我们需要在主索引发生变化时构建/重建索引。这可以通过在配置中启用`buildOnCommit`或`buildOnOptimize`来自动完成。此外，我们需要使用我们的Solr拼写检查组件配置中的`spellcheckIndexDir`变量来指定要创建的索引的位置。'
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `buildOnCommit` component is very expensive. It is recommended to use `buildOnOptimize`
    or explicit build using `spellcheck.build=true` in Solr URL.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`buildOnCommit`组件非常昂贵。建议使用`buildOnOptimize`或在Solr URL中使用`spellcheck.build=true`进行显式构建。'
- en: '`FileBasedSpellChecker`: This implementation uses a flat file to build a spellcheck
    index in Solr. Since there is no frequency information available, the index created
    using this component cannot be used to extract frequency based information such
    as threshold or most popular suggestions. The format of the file is one word per
    line, for example:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于文件的拼写检查器：此实现使用一个平面文件在Solr中构建拼写检查索引。由于没有可用的频率信息，使用此组件创建的索引不能用于提取基于频率的信息，例如阈值或最受欢迎的建议。文件的格式是每行一个单词，例如：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The index needs to be built using the `spellcheck.build=true` parameter in our
    Solr URL. In addition to the `spellcheckIndexDir` location to build and store
    the index, the `FileBasedSpellChecker` component also needs the `sourceLocation`
    variable to specify the location of the spelling file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 索引需要使用`spellcheck.build=true`参数在我们的Solr URL中构建。除了`spellcheckIndexDir`位置来构建和存储索引外，`FileBasedSpellChecker`组件还需要`sourceLocation`变量来指定拼写文件的位置。
- en: '`WordBreakSolrSpellChecker`: This spellcheck component generates suggestions
    by combining adjacent words or by breaking words into multiples. It can be configured
    along with one of the preceding spellcheckers. In this case, the results are combined
    and collations can contain a result from both spellcheckers.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WordBreakSolrSpellChecker`：此拼写检查组件通过组合相邻单词或将单词分解为多个部分来生成建议。它可以与前面的拼写检查器之一一起配置。在这种情况下，结果将被合并，整理可能包含来自两个拼写检查器的结果。'
- en: Spellcheckers generally give suggestions that are sorted by the score from the
    string distance calculation and then by frequency of suggestions in the index.
    These parameters can be tuned in the configuration file by providing different
    implementations of the distance calculation using the `distanceMeasure` variable
    or by providing different implementations of word frequency using the `comparatorClass`
    variable. Some available `comparatorClass` implementations are `score` (default)
    and `freq`. Similarly `org.apache.lucene.search.spell.JaroWinklerDistance` is
    an implementation of distance calculation, which is available with Solr.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 拼写检查器通常会提供通过字符串距离计算的分数排序的建议，然后按照索引中建议的频率进行排序。可以通过在配置文件中提供不同的距离计算实现使用`distanceMeasure`变量或通过提供不同的单词频率实现使用`comparatorClass`变量来调整这些参数。一些可用的`comparatorClass`实现是`score`（默认）和`freq`。类似地，`org.apache.lucene.search.spell.JaroWinklerDistance`是距离计算的实现，它在Solr中可用。
- en: Running a spell check query using PHP
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP运行拼写检查查询
- en: 'Let us configure Solr so that spell check happens on two fields, name and author:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置Solr，使拼写检查发生在两个字段上，名称和作者：
- en: 'Change the contents of the `schema.xml` file. Create a new field on which spellcheck
    will happen and copy the `name` and `author` fields to the new field using the
    following code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`schema.xml`文件的内容。创建一个新的字段，拼写检查将在该字段上进行，并使用以下代码将`name`和`author`字段复制到新字段中：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Change the spellchecker field for the default spellchecker in `solrconfig.xml`
    to the new field we have just created. The default spellchecker uses the `DirectSolrSpellChecker`
    implementation of spell checker available with Solr.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`solrconfig.xml`中更改默认拼写检查器的拼写检查字段为我们刚刚创建的新字段。默认的拼写检查器使用Solr提供的拼写检查器`DirectSolrSpellChecker`实现。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By default the `/select` request handler in Solr configuration does not have
    spellcheck settings and results. So let us add these variables in `requestHandler`
    named `/select`. Here we are specifying the spellcheck dictionary to be used as
    **default**, which we configured earlier and adding the spell check component
    as a part of the output.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Solr配置中的`/select`请求处理程序没有拼写检查设置和结果。因此，让我们在名为`/select`的`requestHandler`中添加这些变量。在这里，我们指定要使用的拼写检查词典为**default**，这是我们之前配置的，并将拼写检查组件添加为输出的一部分。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now restart Solr and reindex the `books.csv` file in the `exampledocs` folder
    and also the `books.csv` file provided in [Chapter 5](ch05.html "Chapter 5. Highlighting
    Results Using PHP and Solr"), *Highlighting Results Using PHP and Solr*. The reason
    why we need to index our books again is because we have changed our schema. Whenever
    schema is changed and new fields are added, the documents need to be indexed again
    to populate data in the new fields. Refer to the *Adding sample documents to Solr
    index* section in [Chapter 2](ch02.html "Chapter 2. Inserting, Updating, and Deleting
    Documents from Solr"), *Inserting, Updating, and Deleting Documents from Solr*,
    for indexing these CSV files in Solr.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在重新启动Solr，并在`exampledocs`文件夹中重新索引`books.csv`文件，以及在[第5章](ch05.html "第5章。使用PHP和Solr突出显示结果")中提供的`books.csv`文件，*使用PHP和Solr突出显示结果*。我们需要重新索引我们的书籍的原因是因为我们已经改变了我们的模式。每当模式更改并添加新字段时，需要重新索引文档以在新字段中填充数据。有关在Solr中索引这些CSV文件，请参阅[第2章](ch02.html
    "第2章。向Solr索引添加示例文档")中的*向Solr索引添加示例文档*部分。
- en: 'Let us do a spell check for the author *Stephen King* using PHP and see the
    corrections that Solr suggests:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用PHP对作者*Stephen King*进行拼写检查，并查看Solr建议的更正：
- en: 'First get the spell check component from the select query using the following
    code:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先使用以下代码从选择查询中获取拼写检查组件：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have set the number of suggestions to return via the `setCount()` function.
    By setting `setCollate()` as `true`, we are telling Solr to suggest the original
    query string with best suggestions replacing the original misspelled words. The
    `setExtendedResults()` and `setCollateExtendedResults()` functions tell Solr to
    provide additional information about the suggestion and the collations returned.
    This can be used for analysis if required.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经通过`setCount()`函数设置了要返回的建议数量。通过将`setCollate()`设置为`true`，我们告诉Solr建议原始查询字符串，并用最佳建议替换原始拼写错误的单词。`setExtendedResults()`和`setCollateExtendedResults()`函数告诉Solr提供有关建议和返回的整理的附加信息。如果需要，可以用于分析。
- en: After executing the query, we need to get the spellcheck component from the
    query resultset and use it for getting suggestions and collations. We use the
    `getCorrectlySpelled()` function to check if the query was correctly spelled.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行查询后，我们需要从查询结果集中获取拼写检查组件，并用它获取建议和整理。我们使用`getCorrectlySpelled()`函数来检查查询是否拼写正确。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next, we loop through the spellcheck results and for each term in the query
    we get the suggestions and related details such as number of suggestions, frequency
    of original term, and the suggested words with their frequency of occurrence.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们循环遍历拼写检查结果，并针对查询中的每个术语获取建议和相关详细信息，例如建议的数量、原始术语的频率以及建议的单词及其出现频率。
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Similarly, we get the collations and loop through it to get the corrected query
    and hits. We can also get the details of corrections for each term in the query.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们获取整理并循环遍历它以获取更正后的查询和命中。我们还可以获取查询中每个术语的更正详细信息。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Implementing the autocomplete feature using PHP and Solr
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP和Solr实现自动完成功能
- en: Autocomplete feature can be built by creating a Suggester in Solr and using
    the Suggester available in Solarium. The purpose of autocomplete is to suggest
    query terms based on incomplete user input. Suggester works very similarly to
    the spellcheck feature. It can be made to work either on the main index or any
    other dictionary.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在Solr中创建一个Suggester并使用Solarium中可用的Suggester来构建自动完成功能。自动完成的目的是根据不完整的用户输入建议查询术语。Suggester的工作方式与拼写检查功能非常相似。它可以在主索引或任何其他字典上工作。
- en: 'First let us change the `schema.xml` file to add a spellcheck component named
    `suggest`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们更改`schema.xml`文件，添加一个名为`suggest`的拼写检查组件：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We have specified the field to use for suggestions as `suggestfld`. The Solr
    component that is used to build the Suggester is mentioned in the classname as
    `org.apache.solr.spelling.suggest.Suggester`. The threshold is a value between
    0 and 1 that specifies the minimum fraction of documents where the term should
    appear to be added to the lookup dictionary. We are storing the index in the `suggest_idx`
    folder. The `lookupImpl` component provides the `inmemory` lookup implementations
    for creating suggestions. Available lookup implementations in Solr are:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经指定了用于建议的字段为`suggestfld`。用于构建Suggester的Solr组件在类名中被称为`org.apache.solr.spelling.suggest.Suggester`。阈值是一个介于0和1之间的值，指定了术语应出现在多少文档中才能添加到查找字典中的最小分数。我们将索引存储在`suggest_idx`文件夹中。`lookupImpl`组件提供了用于创建建议的`inmemory`查找实现。Solr中可用的查找实现有：
- en: '`JaspellLookup`: It is a tree-based representation based on Jaspell. Jaspell
    is a Java spelling checking package that creates a complex tree based structure
    for spelling corrections. It uses a data structure called `trie`.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JaspellLookup`：这是基于Jaspell的基于树的表示。Jaspell是一个创建拼写校正的复杂基于树的结构的Java拼写检查包。它使用一种称为`trie`的数据结构。'
- en: '`TSTLookup`: It is a simple and compact ternary tree based representation,
    capable of immediate data structure updates. It also uses the `trie` data structure.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TSTLookup`：这是一种简单而紧凑的三叉树表示，能够立即更新数据结构。它还使用`trie`数据结构。'
- en: '`FSTLookup`: It is an automaton based representation. It is slower to build,
    but consumes far less memory at runtime.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FSTLookup`：这是基于自动机的表示。它构建速度较慢，但在运行时消耗的内存要少得多。'
- en: '`WFSTLookup`: It is weighted automaton representation and an alternative to
    `FSTLookup` for more fine-grained ranking.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WFSTLookup`：这是加权自动机表示，是`FSTLookup`的另一种更精细的排名方法。'
- en: You can change the lookup implementations and check out how the suggestions
    change. Since the suggestions are based out of index, the larger the index is,
    the better the suggestions are.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更改查找实现并查看建议的变化。由于建议是基于索引的，因此索引越大，建议就越好。
- en: Let us create a separate request handler in Solr for suggestions and add our
    suggest spellcheck as a component in it. The default configuration options for
    providing suggestions are incorporated in the request handler itself.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Solr中为建议创建一个单独的请求处理程序，并将我们的建议拼写检查作为其中的一个组件添加进去。提供建议的默认配置选项已经合并在请求处理程序本身中。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we will need to create a separate field in our `schema.xml` which is indexed.
    We are copying the book name, author, and title into the field to provide suggestions
    on them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在我们的`schema.xml`中创建一个单独的字段，该字段被索引。我们将书名、作者和标题复制到该字段中，以便对它们进行建议。
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once this is done, restart the Apache Tomcat web server and build the spellcheck
    index using the following URL:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，重新启动Apache Tomcat Web服务器，并使用以下URL构建拼写检查索引：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We created a separate request handler named suggest, so our URL has /`suggest`/
    instead of /`select`/.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为suggest的单独请求处理程序，因此我们的URL为/`suggest`/而不是/`select`/。
- en: Now let's go see the Suggester provided by the Solarium library for integration
    with PHP. First, we need to create a Suggester query from the Solarium client
    instead of the normal query.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看Solarium库提供的用于与PHP集成的Suggester。首先，我们需要从Solarium客户端创建一个Suggester查询，而不是普通查询。
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next we have to set the request handler to use. Remember, we created a separate
    request handler named **suggest** to provide suggestions. Also set the dictionary
    we want to use. We can create multiple dictionaries and change them at runtime
    using the following functions:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须设置要使用的请求处理程序。请记住，我们创建了一个名为**suggest**的单独请求处理程序来提供建议。还要设置我们要使用的字典。我们可以创建多个字典，并使用以下函数在运行时更改它们：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now provide the query for the Suggester. Set the number of suggestions to return.
    Turn on the `collation` flag and the `onlyMorePopular` flag.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在提供Suggester的查询。设置要返回的建议数量。打开`collation`标志和`onlyMorePopular`标志。
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Execute the query using the `suggester()` function and then loop through the
    resultset to get all the terms and their suggestions. The original query can be
    displayed using the `getQuery()` function.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`suggester()`函数执行查询，然后循环遍历结果集以获取所有术语及其建议。可以使用`getQuery()`函数显示原始查询。
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, get and display the collations using the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下代码获取并显示整理：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This piece of code can be used to create an AJAX call and provide autocomplete
    suggestions as a JSON or XML string.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以用来创建一个AJAX调用，并提供JSON或XML字符串作为自动完成建议。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started with an understanding of how spell check works on Solr. We went through
    the configuration of Solr for creating spell check index and saw different implementations
    of the spellchecker available with Solr. We understood some of the fine tuning
    options available in spell check in Solr. Next, we created a field in Solr for
    doing spell check on book name and author and configured Solr to provide spelling
    suggestions using this field. We saw a variation of spell check that can be used
    to provide spelling suggestions for autocompletion. We created a separate Solr
    index for autocomplete suggestions and saw PHP code that takes a three-character
    word and provides suggestions from the index.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从理解Solr上的拼写检查是如何工作开始。我们通过配置Solr来创建拼写检查索引，并看到了Solr提供的不同拼写检查实现。我们了解了Solr中拼写检查的一些微调选项。接下来，我们在Solr中创建了一个用于对书名和作者进行拼写检查的字段，并配置Solr来使用这个字段提供拼写建议。我们看到了一种可以用于提供自动完成拼写建议的拼写检查变体。我们为自动完成建议创建了一个单独的Solr索引，并看到了一个PHP代码，它接受一个三个字符的单词，并从索引中提供建议。
