["```php\n    **cd /Library/Webserver/Documents/verge/** \n\n    ```", "```php\n    **git init** \n\n    ```", "```php\n    **Initialized empty Git repository in /Library/WebServer/Documents/verge/.git/** \n\n    ```", "```php\n    <?php echo 'Welcome to Verge'; ?>\n\n    ```", "```php\n    **Welcome to Verge** \n\n    ```", "```php\n    <IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule ^(.*)$ index.php?request=$1 [QSA,L]\n    </IfModule>\n\n    ```", "```php\n    <?php echo $_GET['request']; ?>\n\n    ```", "```php\nif ($_GET['request'] == '') {\necho \uff0dWelcome To Verge\uff0d;\n} elseif ($_GET['request'] == 'signup') {\necho \"Sign Up!\";\n}\n\n```", "```php\n**Welcome to Verge** \n\n```", "```php\n**Sign Up!** \n\n```", "```php\n    <?php\n    include 'lib/bones.php';\n\n    ```", "```php\n<?php\nclass Bones {\nprivate static $instance;\npublic static $route_found = false;\npublic $route = '';\npublic static function get_instance() {\nif (!isset(self::$instance)) {\nself::$instance = new Bones();\n}\nreturn self::$instance;\n}\n\n```", "```php\npublic static function get_instance() {\nif (!isset(self::$instance)) {\nself::$instance = new Bones();\n}\nreturn self::$instance;\n}\n**public function __construct() {\n$this->route = $this->get_route();\n}\nprotected function get_route() {\nparse_str($_SERVER['QUERY_STRING'], $route);\nif ($route) {\nreturn '/' . $route['request'];\n} else {\nreturn '/';\n}\n}** \n\n```", "```php\npublic static function register($route, $callback) {\n$bones = static::get_instance();\nif ($route == $bones->route && !static::$route_found) {\nstatic::$route_found = true;\necho $callback($bones);\n} else {\nreturn false;\n}\n}\n\n```", "```php\n}\n\n```", "```php\n<?php\nini_set('display_errors','On');\nerror_reporting(E_ERROR | E_PARSE);\n**function get($route, $callback) {\nBones::register($route, $callback);\n}** \nclass Bones {\n...\n}\n\n```", "```php\n<?php\nfunction get($route, $callback) {\nBones::register($route, $callback);\n}\nclass Bones {\nprivate static $instance;\npublic static $route_found = false;\npublic $route = '';\npublic function __construct() {\n$this->route = $this->get_route();\n}\npublic static function get_instance() {\nif (!isset(self::$instance)) {\nself::$instance = new Bones();\n}\nreturn self::$instance;\n}\npublic static function register($route, $callback) {\n$bones = static::get_instance();\nif ($route == $bones->route && !static::$route_found) {\nstatic::$route_found = true;\necho $callback($bones);\n} else {\nreturn false;\n}\n}\nprotected function get_route() {\nparse_str($_SERVER['QUERY_STRING'], $route);\nif ($route) {\nreturn '/' . $route['request'];\n} else {\nreturn '/';\n}\n}\n}\n\n```", "```php\n<?php\ninclude 'lib/bones.php';\n**get('/', function($app) {\necho \"Home\";\n});\nget('/signup', function($app) {\necho \"Signup!\";\n});** \n\n```", "```php\n    **cd /Library/Webserver/Documents/verge/** \n\n    ```", "```php\n    **git add .** \n\n    ```", "```php\n    **git commit am 'Created bones.php and added simple support for routing'** \n\n    ```", "```php\n<?php\nini_set('display_errors','On');\nerror_reporting(E_ERROR | E_PARSE);\n**define('ROOT', __DIR__ . '/..');** \nfunction get($route, $callback) {\n...\n}\n\n```", "```php\n    class Bones {\n    public $route = '';\n    **public $content = '';\n    public $vars = array();** \n    public function __construct() {\n    ...\n    }\n\n    ```", "```php\n    protected function get_route() {\n    ...\n    }\n    **public function set($index, $value) {\n    $this->vars[$index] = $value;\n    }** \n\n    ```", "```php\npublic function set($index, $value) {\n$this->vars[$index] = $value;\n}\n**public function render($view, $layout = \"layout\") {\n$this->content = ROOT. '/views/' . $view . '.php';\nforeach ($this->vars as $key => $value) {\n$$key = $value;\n}\nif (!$layout) {\ninclude($this->content);\n} else {\ninclude(ROOT. '/views/' . $layout . '.php');\n}\n}** \n\n```", "```php\n    <html>\n    <body>\n    <h1>Verge</h1>\n    <?php include($this->content); ?>\n    </body>\n    </html>\n\n    ```", "```php\nget('/', function($app) {\n**$app->set('message', 'Welcome Back!');\n$app->render('home');** \n});\nget('/signup', function($app) {\n**$app->render('signup');** \n});\n\n```", "```php\n    Home Page <br /><br />\n    <?php echo $message; ?>\n\n    ```", "```php\n    Signup Now!\n\n    ```", "```php\n    **cd /Library/Webserver/Documents/verge/** \n\n    ```", "```php\n    **git add .** \n\n    ```", "```php\n    **git commit am 'Added support for views and layouts'** \n\n    ```", "```php\n    class Bones {\n    private static $instance;\n    public static $route_found = false;\n    public $route = '';\n    **public $method = '';** \n    public $content = '';\n\n    ```", "```php\n    public function __construct() {\n    $this->route = $this->get_route();\n    **$this->method = $this->get_method();** \n    }\n\n    ```", "```php\n    protected function get_route() {\n    parse_str($_SERVER['QUERY_STRING'], $route);\n    if ($route) {\n    return '/' . $route['request'];\n    } else {\n    return '/';\n    }\n    }\n    protected function get_method() {\n    **return isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : 'GET';\n    }** \n\n    ```", "```php\n    **public static function register($route, $callback, $method) {** \n    $bones = static::get_instance();\n\n    ```", "```php\n    public static function register($route, $callback, $method) {\n    $bones = static::get_instance();\n    **if ($route == $bones->route && !static:: $route_found && $bones->method == $method) {** \n    static::$route_found = true;\n    echo $callback($bones);\n    } else {\n    return false;\n    }\n    }\n\n    ```", "```php\n<?php\nini_set('display_errors','On');\nerror_reporting(E_ERROR | E_PARSE);\ndefine('ROOT', dirname(dirname(__FILE__)));\nfunction get($route, $callback) {\nBones::register($route, $callback);\n}\n\n```", "```php\n<?php\nini_set('display_errors','On');\nerror_reporting(E_ERROR | E_PARSE);\ndefine('ROOT', dirname(dirname(__FILE__)));\n**function get($route, $callback) {\nBones::register($route, $callback, 'GET');\n}\nfunction post($route, $callback) {\nBones::register($route, $callback, 'POST');\n}\nfunction put($route, $callback) {\nBones::register($route, $callback, 'PUT');\n}\nfunction delete($route, $callback) {\nBones::register($route, $callback, 'DELETE');\n}** \n\n```", "```php\n    public function form($key) {\n    return $_POST[$key];\n    }\n\n    ```", "```php\n    public function make_route($path = '') {\n    $url = explode(\"/\", $_SERVER['PHP_SELF']);\n    if ($url[1] == \"index.php\") {\n    return $path;\n    } else {\n    return '/' . $url[1] . $path;\n    }\n    }\n\n    ```", "```php\nSignup\n**<form action=\"<?php echo $this->make_route('/signup') ?>\" method=\"post\">\n<label for=\"name\">Name</label>\n<input id=\"name\" name=\"name\" type=\"text\"> <br />\n<input type=\"Submit\" value=\"Submit\">\n</form>** \n\n```", "```php\nget('/signup', function($app) {\n$app->render('signup');\n});\n**post('/signup', function($app) {\n$app->set('message', 'Thanks for Signing Up ' . $app->form('name') . '!');\n$app->render('home');\n});** \n\n```", "```php\n    **cd /Library/Webserver/Documents/verge/** \n\n    ```", "```php\n    **git add .** \n\n    ```", "```php\n    **git commit -am 'Added support for all HTTP methods'** \n\n    ```", "```php\npublic $content = '';\npublic $vars = array();\n**public $route_segments = array();\npublic $route_variables = array();** \npublic function __construct() {\n$this->route = $this->get_route();\n**$this->route_segments = explode('/', trim($this->route, '/'));** \n$this->method = $this->get_method();\n}\n\n```", "```php\npublic static function register($route, $callback, $method) {\nif (!static::$route_found) {\n$bones = static::get_instance();\n$url_parts = explode('/', trim($route, '/'));\n$matched = null;\n\n```", "```php\nif (count($bones->route_segments) == count($url_parts)) {\n} else {\n// Routes are different lengths\n$matched = false;\n}\n\n```", "```php\nif (count($bones->route_segments) == count($url_parts)) {\n**foreach ($url_parts as $key=>$part) {\n}** \n} else {\n// Routes are different lengths\n$matched = false;\n}\n\n```", "```php\nif (count($bones->route_segments) == count($url_parts)) {\nforeach ($url_parts as $key=>$part) {\n**if (strpos($part, \":\") !== false) {\n// Contains a route variable\n} else {\n// Does not contain a route variable\n}** \n}\n} else {\n// Routes are different lengths\n$matched = false;\n}\n\n```", "```php\nif (strpos($part, \":\") !== false) {\n// Contains a route variable\n**$bones->route_variables[substr($part, 1)] = $bones->route_segments[$key];** \n} else {\n// Does not contain a route variable\n}\n\n```", "```php\n} else {\n// Does not contain a route variable\n**if ($part == $bones->route_segments[$key]) {\nif (!$matched) {\n// Routes match\n$matched = true;\n}\n} else {\n// Routes don't match\n$matched = false;\n}**\n}\n\n```", "```php\nif (!$matched || $bones->method != $method) {\nreturn false;\n} else {\nstatic::$route_found = true;\necho $callback($bones);\n}\n\n```", "```php\n}\n}\n\n```", "```php\npublic static function register($route, $callback, $method) {\nif (!static::$route_found) {\n$bones = static::get_instance();\n$url_parts = explode('/', trim($route, '/'));\n$matched = null;\nif (count($bones->route_segments) == count($url_parts)) {\nforeach ($url_parts as $key=>$part) {\nif (strpos($part, \":\") !== false) {\n// Contains a route variable\n$bones->route_variables[substr($part, 1)] = $bones-> route_segments[$key];\n} else {\n// Does not contain a route variable\nif ($part == $bones->route_segments[$key]) {\nif (!$matched) {\n// Routes match\n$matched = true;\n}\n} else {\n// Routes don't match\n$matched = false;\n}\n}\n}\n} else {\n// Routes are different lengths\n$matched = false;\n}\nif (!$matched || $bones->method != $method) {\nreturn false;\n} else {\nstatic::$route_found = true;\necho $callback($bones);\n}\n}\n}\n\n```", "```php\npublic function request($key) {\nreturn $this->route_variables[$key];\n}\n\n```", "```php\nget('/say/:message', function($app) {\n$app->set('message', $app->request('message'));\n$app->render('home');\n});\n\n```", "```php\n    **cd /Library/Webserver/Documents/verge/** \n\n    ```", "```php\n    **git add .** \n\n    ```", "```php\n    **git commit am 'Refactored route matching to handle more complex URLs and allow for route variables'** \n\n    ```", "```php\n    <IfModule mod_rewrite.c>\n    RewriteEngine On\n    **RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule ^css/([^/]+) public/css/$1 [L]\n    RewriteRule ^js/([^/]+) public/js/$1 [L]** \n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule ^(.*)$ index.php?request=$1 [QSA,L]\n    </IfModule>\n\n    ```", "```php\n    <html>\n    **<head>\n    <link href=\"<?php echo $this->make_route('/css/master.css') ?>\" rel=\"stylesheet\" type=\"text/css\" />\n    </head>** \n    <body>\n    <?php include($this->view_content); ?>\n    </body>\n    </html>\n\n    ```", "```php\n    body {background:#e4e4e4;}\n\n    ```", "```php\n    **cd /Library/Webserver/Documents/verge/** \n\n    ```", "```php\n    **git add .** \n\n    ```", "```php\n    **git commit am 'Added clean routes for public files, created a master.css file, linked to master.css in layout.php'** \n\n    ```", "```php\n    **cd /Library/WebServer/Documents/verge/** \n\n    ```", "```php\n    **git remote add origin git@github.com:username/verge.git** \n\n    ```", "```php\n    **git push -u origin master** \n\n    ```", "```php\n    **cd /Library/WebServer/Documents** \n\n    ```", "```php\n    **git clone git@github.com:timjuravich/bones.git** \n\n    ```"]