- en: Chapter 2. Basic Utilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。基本实用程序
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Validating a form using Ajax
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ajax验证表单
- en: Creating an autosuggest control
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个自动建议控件
- en: Making form wizards
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作表单向导
- en: Uploading a file using Ajax
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ajax上传文件
- en: Uploading multiple files using Ajax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ajax上传多个文件
- en: Creating a five-star rating system
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个五星评分系统
- en: Building a PHP Ajax contact form with validation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ajax构建一个带有验证的PHP联系表单
- en: Displaying a table in Ajax
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ajax中显示表格
- en: Building Pagination using PHP and Ajax
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP和Ajax构建分页
- en: In this chapter, we will learn how to build the basic Ajax forms. We will try
    to understand where we can use Ajax methodology and where we can't. There are
    a lot of ways in which we can use Ajax. Here are some "best" practices based on
    user experience and the performance of the specific system. Ajax makes our lives
    easier, faster, and better; how and where to use it is up to us.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何构建基本的Ajax表单。我们将尝试理解在哪里可以使用Ajax方法，以及在哪里不能。我们可以使用Ajax的方式有很多种。以下是一些基于用户体验和特定系统性能的“最佳”实践。Ajax使我们的生活更轻松，更快速，更好；如何以及在哪里使用取决于我们。
- en: Validating a form using Ajax
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ajax验证表单
- en: The main idea of Ajax is to get data from the server in real time without reloading
    the whole page. In this task we will build a simple form with validation using
    Ajax.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax的主要思想是实时从服务器获取数据，而不需要重新加载整个页面。在这个任务中，我们将使用Ajax构建一个带有验证的简单表单。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'As a JavaScript library is used in this task, we will choose jQuery. We will
    download (if we haven''t done it already) and include it in our page. We need
    to prepare some dummy PHP code to retrieve the validation results. In this example,
    let''s name it `inputValidation.php`. We are just checking for the existence of
    a `param` variable. If this variable is introduced in the `GET` request, we confirm
    the validation and send an `OK` status back to the page:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在此任务中使用了JavaScript库，我们将选择jQuery。我们将下载（如果我们还没有下载）并将其包含在我们的页面中。我们需要准备一些虚拟的PHP代码来检索验证结果。在这个例子中，让我们将其命名为`inputValidation.php`。我们只是检查`param`变量是否存在。如果这个变量在`GET`请求中被引入，我们确认验证并将一个`OK`状态发送回页面：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's start with basic HTML structure. We will define a form with three input
    boxes and one text area. Of course, it is placed in`<body>:`
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从基本的HTML结构开始。我们将定义一个带有三个输入框和一个文本区域的表单。当然，它是放在`<body>`中的：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For visual confirmation of the valid input, we will define CSS styles:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了对有效输入进行视觉确认，我们将定义CSS样式：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, it is time to include jQuery and its functionality:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候包括jQuery及其功能了：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will also initialize the document `ready` function:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还将初始化文档`ready`函数：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When everything is ready, our result is as follows:![How to do it...](graphics/3081_02_01.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一切准备就绪时，我们的结果如下：![如何做...](graphics/3081_02_01.jpg)
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We created a simple form with three input boxes and one text area. Objects
    with class `required` are automatically validated after the `keyup` event and
    calling the `ajaxValidation` function. Our `keyup` functionality also includes
    the `Timeoutfunction` to prevent unnecessary calls if the user is still writing.
    The validation is based on two steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个带有三个输入框和一个文本区域的简单表单。具有类`required`的对象在`keyup`事件后会自动进行验证，并调用`ajaxValidation`函数。我们的`keyup`功能还包括`Timeoutfunction`，以防止用户仍在输入时进行不必要的调用。验证基于两个步骤：
- en: 'Validation of the actual input box: We are passing the inserted text to `ajax/inputValidation.php`
    via Ajax. If the response from the server is not `OK` we will mark this input
    box as `failed`. If the response is `OK`, we proceed to the second step.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证实际输入框：我们通过Ajax将插入的文本传递给`ajax/inputValidation.php`。如果服务器的响应不是`OK`，我们将标记此输入框为“失败”。如果响应是`OK`，我们将进行第二步。
- en: Checking the other required fields in our form. When there is no `failed` input
    box left in the form, we will enable the submit button.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查我们表单中的其他必填字段。当表单中没有剩余的“失败”输入框时，我们将启用提交按钮。
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Validation in this example is really basic. We were just checking if the response
    status from the server is `OK`. We will probably never meet a validation of the
    required field like we have here. In this case, it's better to use the `length`
    property directly on the client side instead of bothering the server with a lot
    of requests, simply to check if the required field is empty or filled. This task
    was just a demonstration of the basic `Validation` method. It would be nice to
    extend it with regular expressions on the server side to directly check whether
    the URL form or the title already exist in our database, and let the user know
    what the problem is and how he/she can fix it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，验证是非常基本的。我们只是检查服务器的响应状态是否为`OK`。我们可能永远不会遇到像我们这里一样的必填字段验证。在这种情况下，最好直接在客户端使用`length`属性，而不是用很多请求打扰服务器，只是为了检查必填字段是空还是填充了。这个任务只是基本`Validation`方法的演示。最好在服务器端扩展它，直接检查URL表单或标题是否已经存在于我们的数据库中，并让用户知道问题所在以及如何解决。
- en: See also
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Building a PHP Ajax contact form with validation* recipe in this chapter'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中使用PHP Ajax联系表单和验证*配方'
- en: Creating an autosuggest control
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个自动建议控件
- en: This recipe will show us how to create an autosuggest control. This functionality
    is very useful when we need to search within huge amounts of data. The basic functionality
    is to display the list of suggested data based on text in the input box.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将向我们展示如何创建一个自动建议控件。当我们需要在大量数据中进行搜索时，这个功能非常有用。基本功能是根据输入框中的文本显示建议数据列表。
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We can start with the dummy PHP page that will serve as a data source. When
    we call this script with the `GET` method and the variable `string`, it will return
    the list of records (names) that include the selected string:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从虚拟的PHP页面开始，它将作为数据源。当我们用`GET`方法和变量`string`调用这个脚本时，它将返回包含所选字符串的记录（名称）列表：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: As always, we will start with HTML. We will define the form with one input box
    and an unsorted list `datalistPlaceHolder:`
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 和往常一样，我们将从HTML开始。我们将用一个输入框和一个未排序的列表`datalistPlaceHolder`来定义表单：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When the HTML is ready, we will play with CSS:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当HTML准备好后，我们将使用CSS进行调整：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now the real fun begins. We will include jQuery library and define our keyup
    events:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在真正的乐趣开始了。我们将包括jQuery库并定义我们的keyup事件：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When everything is set, we will call the `ajaxDropdownInit` function within
    the document `ready` function:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一切准备就绪时，我们将在文档`ready`函数中调用`ajaxDropdownInit`函数：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our autosuggest control is ready. The following screenshot shows the output:![How
    to do it...](graphics/3081_02_02.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的自动建议控件已经准备好了。以下截图显示了输出：![如何做...](graphics/3081_02_02.jpg)
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `autosuggest` control in this recipe is based on the input box and the list
    of items in `datalistPlaceHolder`. After each `keyup` event of the input box,
    `datalistPlaceHolder` will load the list of items from `ajax/dropDownList.php`
    via the Ajax function defined in `ajaxDropdownInit`. A good feature of this recipe
    is the `timerID` variable that, when used with the `setTimeout` method, will allow
    us to send the request to the server only when we stop typing (in our case it
    is 500 milliseconds). It may not look so important, but it will save a lot of
    resources. We do not want to wait for the response for "M" typed in the input
    box, when we have already typed in "Milan". Instead of 5 requests (150 milliseconds
    each), we have just one. Multiply it, for example, with 10,000 users per day and
    the effect is huge.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中的`autosuggest`控件基于输入框和`datalistPlaceHolder`中的项目列表。在输入框的每个`keyup`事件之后，`datalistPlaceHolder`将通过`ajax/dropDownList.php`中定义的Ajax函数加载项目列表。本教程的一个很好的特性是`timerID`变量，当与`setTimeout`方法一起使用时，将允许我们仅在停止输入时向服务器发送请求（在我们的情况下是500毫秒）。这可能看起来并不那么重要，但它将节省大量资源。当我们已经输入“米兰”时，我们不想等待“M”在输入框中的响应。而不是5个请求（每个150毫秒），我们只有一个。例如，每天有1万个用户，效果是巨大的。
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We always need to remember that the response from the server is in the JSON
    format.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终需要记住，服务器的响应是以JSON格式返回的。
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using JSON objects in JavaScript is not always useful from the performance point
    of view. Let's imagine we have 5000 contacts in one JSON file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中使用JSON对象并不总是从性能的角度来看都有用。让我们想象一下，我们有一个JSON文件中有5000个联系人。
- en: 'It may take a while to build HTML from 5000 objects but, if we build a JSON
    object, the code will be as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从5000个对象构建HTML可能需要一些时间，但是，如果我们构建一个JSON对象，代码将如下所示：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, we will have the complete data in HTML and there is no need to
    create any logic to create a simple list of items.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将在HTML中拥有完整的数据，不需要创建任何逻辑来创建一个简单的项目列表。
- en: Making Form Wizards
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作表单向导
- en: "**Form Wizards** are basically forms divided into several steps. They are useful\
    \ for polls or special cases of forms, when we want to divide the registration\
    \ process on our website. They are also used in e-commerce websites, in the purchase\
    \ process (shopping cart\x9Apayment methods\x9Ashipping address\x9Aconfirmation\x9A\
    purchase itself). In this recipe, we will build a Form Wizard (as simple as possible)."
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: "**表单向导**基本上是分成几个步骤的表单。它们对于投票或表单的特殊情况非常有用，当我们想要在网站上分割注册流程时。它们也用于电子商务网站，在购买过程中（购物车\x9A\
    付款方式\x9A送货地址\x9A确认\x9A购买本身）。在这个教程中，我们将构建一个表单向导（尽可能简单）。"
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will prepare the dummy PHP files `step1.php, step2.php`, and `step3.php`.
    The content of these files is simple:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将准备虚拟的PHP文件`step1.php, step2.php`和`step3.php`。这些文件的内容很简单：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here again we will include jQuery library:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将包括jQuery库：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We start by defining the HTML content:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先定义HTML内容：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we will include CSS styles in our HTML as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在HTML中包含CSS样式如下：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we will place JavaScript before the closing`</body>` tag:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在关闭`</body>`标签之前放置JavaScript：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The result is as follows:![How to do it...](graphics/3081_02_03.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果如下：![如何做...](graphics/3081_02_03.jpg)
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The wizard is divided into three parts:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 向导分为三个部分：
- en: The first part is `wizardNavigation`, which includes all the steps (tabs) in
    the wizard.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一部分是`wizardNavigation`，其中包括向导中的所有步骤（选项卡）。
- en: The second is `wizardBody`, with the content of the current step (tab).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个是`wizardBody`，其中包含当前步骤（选项卡）的内容。
- en: The last part is `wizardActionButtons`, which contains the **Back, Next**, and
    **Finish** buttons. The **Back** and **Next** buttons trigger the `submitThePage`
    function with the `buttonDirection` parameter (**Back** or **Next**). This function
    sends the Ajax request on to the next step, which is represented by the `target`
    parameter in the `$.get()` function. The target is taken automatically from the
    tab navigation.It is equal to `id` attribute of each navigation element.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一部分是`wizardActionButtons`，其中包含**返回**、**下一步**和**完成**按钮。**返回**和**下一步**按钮触发`submitThePage`函数，带有`buttonDirection`参数（**返回**或**下一步**）。此函数将通过`$.get()`函数将Ajax请求发送到下一步，该下一步由`target`参数表示。目标自动从选项卡导航中获取。它等于每个导航元素的`id`属性。
- en: There's more...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We have understood the basic idea of Form Wizards. But sometimes we do not have
    the time or resources to create our own jQuery functionality. In that case, we
    can just use some of the free jQuery plugins, such as the `formwizard` plugin
    from [http://plugins.jquery.com/project/formwizard](http://plugins.jquery.com/project/formwizard).
    Not all plugins are 100% functional; everything has its own 'bugs'. However,help
    is always easily available. We can modify the plugin to meet our requirements
    and then wait for the bugs to be fixed in the next release of the plugin, or we
    can just contribute.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经理解了表单向导的基本思想。但有时我们没有时间或资源来创建自己的jQuery功能。在这种情况下，我们可以使用一些免费的jQuery插件，比如来自[http://plugins.jquery.com/project/formwizard](http://plugins.jquery.com/project/formwizard)的`formwizard`插件。并非所有插件都是100%功能的；每样东西都有自己的“bug”。然而，帮助总是很容易得到的。我们可以修改插件以满足我们的要求，然后等待插件的下一个版本中修复bug，或者我们可以贡献自己的代码。
- en: Uploading a file using Ajax
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ajax上传文件
- en: In this recipe, we will talk about uploading a file via Ajax. Actually, there
    is no Ajax method to do this. We can use the `iframe` method to imitate the Ajax
    functionality.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将讨论通过Ajax上传文件。实际上，没有Ajax方法可以做到这一点。我们可以使用`iframe`方法来模拟Ajax功能。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In the beginning, we will prepare the `uploads` folder and make sure it is
    accessible. In Mac OS X/Linux, we will use:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将准备`uploads`文件夹，并确保它是可访问的。在Mac OS X/Linux中，我们将使用：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Windows 7, we can right-click on **Folder properties|Edit| Select user| Group**
    from permission windows (choose anyone) and select **Full control** under the
    **Allow** column to assign full access rights control permissions.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 7中，我们可以右键单击**文件夹属性|编辑|选择用户|组**，从权限窗口中选择（选择任何人），并在**允许**列下选择**完全控制**以分配完全访问权限控制权限。
- en: Now let's create an HTML `(ajaxUpload.html)` and a PHP file `(ajax/uploadFile.php)`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个HTML文件`(ajaxUpload.html)`和一个PHP文件`(ajax/uploadFile.php)`。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: '`ajaxUpload.html` will look like the following:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ajaxUpload.html`将如下所示：'
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Our HTML body is as follows:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的HTML主体如下：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The ajax/uploadFile.php content is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ajax/uploadFile.php的内容如下：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Initiate the result message on `$(document).ready:`
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$(document).ready`上初始化结果消息：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The result is as follows:![How to do it...](graphics/3081_02_04.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果如下：![如何做...](graphics/3081_02_04.jpg)
- en: How it works...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see in this task, we created a simple form with the ability to upload
    a file. The main point of this example is in the **iframe**, to which we are submitting
    the form. This iframe represents a container with PHP, which provides the physical
    upload of the selected file. When the upload is successful, we will display the
    result message in `placeHolder` in the parent document.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这个任务中所看到的，我们创建了一个简单的表单，可以上传文件。这个例子的主要重点在于**iframe**，我们将表单提交到这个**iframe**。这个**iframe**代表一个包含PHP的容器，它提供所选文件的物理上传。当上传成功时，我们将在父文档的`placeHolder`中显示结果消息。
- en: There's more...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'To increase the maximum allowable size of uploaded file we can use the `upload_max_filesize`
    directive in `php.ini`. There are more directives for uploading files:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要增加上传文件的最大允许大小，我们可以在`php.ini`中使用`upload_max_filesize`指令。还有更多用于上传文件的指令：
- en: '| Directive | Default value |   |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 指令 | 默认值 |   |'
- en: '| --- | --- | --- |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `file_uploads` | `1` | Allow/Disallow HTTP file uploads |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `file_uploads` | `1` | 允许/禁止HTTP文件上传|'
- en: '| `upload_tmp_dir` | `NULL` | Temporary directory for storing files during
    the file upload |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `upload_tmp_dir` | `NULL` | 文件上传期间存储文件的临时目录|'
- en: '| `upload_max_filesize` | `2M` | The maximum size of uploaded file |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `upload_max_filesize` | `2M` | 上传文件的最大大小|'
- en: '| `max_file_uploads` | `20` | The maximum number of file uploads made simultaneously
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `max_file_uploads` | `20` | 同时进行的文件上传的最大数量|'
- en: Uploading multiple files using Ajax
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ajax上传多个文件
- en: In the previous task, we have learned how to upload a single file via a fake
    Ajax method using iframe. This example has one big disadvantage; we cannot select
    more than one file. This is possible only by using HTML5 (which is not fully supported
    by all browsers), Flash, or Java. In this recipe, we will build a form that will
    allow us to select multiple files and upload them on the server with one single
    click.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个任务中，我们学习了如何通过伪Ajax方法使用iframe上传单个文件。这个例子有一个很大的缺点；我们无法选择多个文件。这只能通过使用HTML5（并非所有浏览器都完全支持）、Flash或Java来实现。在这个示例中，我们将构建一个表单，允许我们选择多个文件，并在单击一次后将它们上传到服务器。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this task, we will need to download jQuery library, SWFUpload library ([http://swfupload.org/](http://swfupload.org/)
    ), and Adam Royle's SWFUpload jQuery plugin ( [http://blogs.bigfish.tv/adam/](http://blogs.bigfish.tv/adam/)
    ).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个任务，我们需要下载jQuery库、SWFUpload库([http://swfupload.org/](http://swfupload.org/))，以及Adam
    Royle的SWFUpload jQuery插件([http://blogs.bigfish.tv/adam/](http://blogs.bigfish.tv/adam/))。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s start with HTML:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从HTML开始：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we define CSS:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义CSS：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we will include jQuery, `SWFUpload`, and SWFUpload jQuery library:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将包括jQuery、`SWFUpload`和SWFUpload jQuery库：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, we will define the `SWFUpload` object and binding events, as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义`SWFUpload`对象和绑定事件，如下所示：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The PHP for uploading the file is as follows:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于上传文件的PHP如下：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Our result looks like the following:![How to do it...](graphics/3081_02_05.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的结果如下：![如何做...](graphics/3081_02_05.jpg)
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the beginning, we define a simple HTML form for `swfupload-control`, including
    input button. This button is overwritten by an `swf` object, which will allow
    us to select multiple files. In JavaScript, we define the main `SWFUpload` object
    with the basic settings `(upload_url, file_post_name, flash_url, button_image_url`,
    and so on). We can use the predefined events to build a container with a progress
    bar for each file.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为`swfupload-control`定义一个简单的HTML表单，包括输入按钮。这个按钮被一个`swf`对象覆盖，它允许我们选择多个文件。在JavaScript中，我们使用基本设置`(upload_url、file_post_name、flash_url、button_image_url`等)定义主`SWFUpload`对象。我们可以使用预定义的事件为每个文件构建一个带有进度条的容器。
- en: There's more...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The defined events in `SWFUpload`, which provide us full control during the
    file upload, are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SWFUpload`中定义的事件为我们提供了在文件上传期间完全控制的能力，如下所示：
- en: '| **flashReady** | This is called by the Flash Control to notify `SWFUpload`
    that the Flash movie has loaded. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| **flashReady** | 这是由Flash控件调用的，通知`SWFUpload`Flash电影已加载。|'
- en: '| **swfUploadLoaded** | This is called to ensure that it is safe to call `SWFUpload`
    methods. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| **swfUploadLoaded** | 这是为了确保可以安全调用`SWFUpload`方法而调用的。|'
- en: '| **fileDialogStart** | This is fired after `selectFile` is called to select
    the files. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| **fileDialogStart** | 在调用`selectFile`选择文件后触发此事件。|'
- en: '| **fileQueued** | This is fired for each file that is queued after the **FileSelectionDialog**
    window is closed. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| **fileQueued** | 在**FileSelectionDialog**窗口关闭后，每个排队的文件都会触发此事件。|'
- en: '| **fileQueueError** | This is fired for each file that is not queued after
    the **FileSelectionDialog** window is closed. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| **fileQueueError** | 在**FileSelectionDialog**窗口关闭后，每个未排队的文件都会触发此事件。|'
- en: '| **fileDialogComplete** | This fires after the **FileSelectionDialog** window
    has been closed and all the selected files have been processed. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| **fileDialogComplete** | 这在**FileSelectionDialog**窗口关闭并且所有选定的文件都已处理后触发。 |'
- en: '| **uploadStart** | This is called immediately before the file is uploaded.
    |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| **uploadStart** | 这是在文件上传之前立即调用的。 |'
- en: '| **uploadProgress** | This is fired periodically by the Flash Control. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| **uploadProgress** | 这是由Flash控件定期触发的。 |'
- en: '| **uploadError** | This is fired any time an upload is interrupted or does
    not complete successfully. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| **uploadError** | 每当上传被中断或未成功完成时触发。 |'
- en: '| **uploadSuccess** | This is fired when the entire upload has been transmitted
    and the server returns a HTTP 200 status code. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| **uploadSuccess** | 当整个上传已传输并服务器返回HTTP 200状态代码时触发。 |'
- en: '| **uploadComplete** | This is always fired at the end of an upload cycle (after
    `uploadError` or `uploadSuccess).` |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| **uploadComplete** | 这总是在上传周期结束时触发（在`uploadError`或`uploadSuccess`之后）。 |'
- en: Creating a five-star rating system
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个五星级评分系统
- en: In this task, we will learn how to build a five-star rating system. This feature
    is often used by e-commerce websites to allow the rating of products, articles,
    or anything that is worth evaluating by the user.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将学习如何构建一个五星级评分系统。这个功能经常被电子商务网站使用，允许用户对产品、文章或任何值得用户评价的东西进行评分。
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s prepare a dummy PHP file `ajax/saveRating.php` to confirm the rating
    was saved:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备一个虚拟的PHP文件`ajax/saveRating.php`来确认评分已保存：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We need to prepare a `.gif` image with stars. This `.gif` includes three variations
    of the star: the first,for the inactive star, the second, for an "on hover" event,
    and the third for the active star.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要准备一个带有星星的.gif图像。这个.gif包括星星的三种变化：第一种是非活动状态的星星，第二种是“悬停”事件的星星，第三种是活动状态的星星。
- en: '![Getting ready](graphics/3081_02_06.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](graphics/3081_02_06.jpg)'
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We are ready to start with the HTML part:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们准备开始HTML部分：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s include jQuery library and define the JavaScript functionality:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们包括jQuery库并定义JavaScript功能：
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'CSS is one of the key parts in this task:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS是这项任务中的关键部分之一：
- en: '[PRE30]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Our result is as follows:![How to do it...](graphics/3081_02_07.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的结果如下：![如何做...](graphics/3081_02_07.jpg)
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Basically, the whole rating system is an unordered list of items. Each item
    represents a star, which can be provided in three states; default, active or highlighted.
    The change of the state is done by changing of the background position of each
    star. In our case, we are using `icons/star.gif`, which includes all three possible
    states (gray, red, and yellow). There is a `mouseover` event defined, which will
    highlight the hovered star and all previously selected stars. After clicking on
    the star, we call an Ajax post request to `ajax/saveRating.php` and set all the
    required stars to be activated.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，整个评分系统是一个项目的无序列表。每个项目代表一个星星，可以提供三种状态；默认、活动或突出显示。通过改变每颗星星的背景位置来改变状态。在我们的情况下，我们使用`icons/star.gif`，其中包括所有三种可能的状态（灰色、红色和黄色）。定义了一个`mouseover`事件，它将突出显示悬停的星星和之前选择的所有星星。点击星星后，我们调用一个Ajax
    post请求到`ajax/saveRating.php`并设置所有必需的星星为激活状态。
- en: There's more...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In most cases, we don''t want to allow multiple voting for one user. In that
    case, we can set the cookie as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们不希望允许一个用户进行多次投票。在这种情况下，我们可以设置cookie如下：
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When the cookie is set to expire in one year we can use it in our rating system:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当cookie设置为一年后过期时，我们可以在我们的评分系统中使用它：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Building a PHP Ajax contact form with validation
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用验证构建PHP Ajax联系表单
- en: Validation of the input box before submitting the form has become one of the
    very important Ajax functionalities. The user does not have to wait until the
    whole form gets back with some invalid input box messages and then try to refill
    it again. In this task, we will build a contact form with Ajax validation.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交表单之前对输入框进行验证已成为非常重要的Ajax功能之一。用户不必等到整个表单返回一些无效的输入框消息，然后再尝试重新填写。在这个任务中，我们将构建一个带有Ajax验证的联系表单。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s start with HTML:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从HTML开始：
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we can define styles:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以定义样式：
- en: '[PRE34]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The main PHP validation is as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要的PHP验证如下：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The JavaScript functionality with Ajax calls is as follows:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具有Ajax调用的JavaScript功能如下：
- en: '[PRE36]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The result is as follows:![How to do it...](graphics/3081_02_08.jpg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果如下：![如何做...](graphics/3081_02_08.jpg)
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We are starting with an HTML source. It contains four input boxes and one text
    area. As you can see in the source code, we are preparing two types of validation.
    The first is for checking the required fields (marked with `class="required")`
    and the second is based on the specific type of data (e-mail, URL, and phone).
    The first validation is done on the client side only and the second one involves
    sending a post request to `validators/main.php`, which evaluates the given parameter.
    If the input does not pass the validation, it is marked as `failed`. If there
    is no `failed` input box in the form, the `submit` event is enabled. The event
    returns the `true` value when all requests are finished. This was done by allowing
    synchronous requests—`$.ajaxSetup({async:false})` . Note that synchronous requests
    may temporarily lock the browser, disabling any actions while the request is active.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从HTML源代码开始。它包含四个输入框和一个文本区域。正如你在源代码中所看到的，我们准备了两种验证。第一种是检查必填字段（标有`class="required"`），第二种是基于特定类型的数据（电子邮件、URL和电话）。第一种验证仅在客户端进行，第二种涉及发送一个post请求到`validators/main.php`，对给定的参数进行评估。如果输入未通过验证，则标记为`failed`。如果表单中没有`failed`输入框，则启用`submit`事件。当所有请求完成时，该事件返回`true`值。这是通过允许同步请求来实现的——`$.ajaxSetup({async:false})`。请注意，同步请求可能会暂时锁定浏览器，禁用任何活动，而请求处于活动状态时。
- en: There's more...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this example, we were using validation of the fields on the server side.
    This logic is not exactly what we would use in real life. Of course, we should
    always have validation on the server side (in case the user has JavaScript turned
    off), but we don't need to bother the server with something that we can easily
    find out on the client side, such as validation of e-mails, URLs, or required
    fields. jQuery has a nice plugin for validation named `validate.js` ([http://docs.jquery.com/Plugins/validation](http://docs.jquery.com/Plugins/validation)).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了服务器端字段的验证。这个逻辑并不完全是我们在现实生活中会使用的。当然，我们应该始终在服务器端进行验证(以防用户关闭了JavaScript)，但我们不需要让服务器处理一些我们可以在客户端轻松找到的东西，比如验证电子邮件、URL或必填字段。jQuery有一个名为`validate.js`的很好的验证插件([http://docs.jquery.com/Plugins/validation](http://docs.jquery.com/Plugins/validation))。
- en: 'All we need to do is download jQuery library with the `validate` plugin and
    include it in our source:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的就是下载带有`validate`插件的jQuery库，并将其包含在我们的源代码中：
- en: '[PRE37]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define the class `required` for required fields and some additional classes
    for a specific validator, such as e-mail:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为必填字段定义`required`类，并为特定验证器定义一些额外的类，比如电子邮件：
- en: '[PRE38]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After that, call the `validate()` function in the specific form:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，在特定表单中调用`validate()`函数：
- en: '[PRE39]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Displaying a table in Ajax
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ajax中显示表格
- en: In this task, we will display data in a tabular format using Ajax. As a data
    source, we will use a predefined JSON object.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将使用Ajax以表格形式显示数据。作为数据源，我们将使用预定义的JSON对象。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First of all, we will need to prepare a dummy JSON data source with all the
    items that will be displayed in our table:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要准备一个虚拟的JSON数据源，其中包含我们表格中将显示的所有项目：
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How to do it...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: As base HTML, we can use this source with a container for the table and toolbar.
    This toolbar will include selecting functionality for our items.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为基本HTML，我们可以使用这个包含表格和工具栏的源代码。这个工具栏将包括我们项目的选择功能。
- en: '[PRE41]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we can set styles for our HTML:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以为我们的HTML设置样式：
- en: '[PRE42]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When the HTML and CSS is ready, we can start with JavaScript:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当HTML和CSS准备好后，我们可以开始使用JavaScript：
- en: '[PRE43]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The result looks like the following:![How to do it...](graphics/3081_02_09.jpg)
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果如下：![如何做...](graphics/3081_02_09.jpg)
- en: How it works...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the beginning, we started with a basic HTML structure for the table. We defined
    only the position of the header and the body of the table. In`(document).event`,
    we send a `getJSON` request to get a `json` object (`json/requests.json`) from
    the server. We put data into the `data` variable and continue to build a table.
    In the first step, we build the header (buildHeader(data)). This function takes
    the data, parses the keys from the JSON object, and uses them for the header cells.
    In the second step, we build the body (buildBody(data)). This function is based
    on a loop, which will specify each line of the table. We are using a switch that
    is able to provide specific functionality for each value based on its key.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，我们为表格制定了基本的HTML结构。我们只定义了表头和表体的位置。在`(document).event`中，我们发送一个`getJSON`请求，从服务器获取一个`json`对象(`json/requests.json`)。我们将数据放入`data`变量中，并继续构建表格。在第一步中，我们构建表头(buildHeader(data))。这个函数获取数据，从JSON对象中解析键，并将它们用于表头单元格。在第二步中，我们构建表体(buildBody(data))。这个函数基于一个循环，将指定表格的每一行。我们使用一个开关，它能够根据键提供每个值的特定功能。
- en: There's more...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In this task, we have built a table with a toolbox, which does not have any
    functionality; at least, not yet. In each line, we define a checkbox. With the
    definition of this checkbox, we can specify additional functionality:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们已经构建了一个带有工具箱的表格，但它还没有任何功能；至少目前还没有。在每一行中，我们定义了一个复选框。通过定义这个复选框，我们可以指定额外的功能：
- en: '[PRE44]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'For the toolbar mentioned in the preceding code snippet, we can specify:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面代码片段中提到的工具栏，我们可以指定：
- en: '[PRE45]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Building Pagination using PHP and Ajax
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP和Ajax构建分页
- en: In this task, we will learn how to build **pagination** with Ajax functionality.
    That means we will be able to turn the page in the contact list without reloading
    the whole website.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将学习如何使用Ajax功能构建**分页**。这意味着我们将能够在不重新加载整个网站的情况下翻页查看联系人列表。
- en: How to do it...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will start with HTML, which contains the page container, contact grid with
    the first displayed page of contacts, and the contact pagination:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从包含页面容器、显示联系人第一页的联系人网格和联系人分页的HTML开始：
- en: '[PRE46]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The required CSS is as follows:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所需的CSS如下：
- en: '[PRE47]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The JavaScript functionality of the pagination is as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分页的JavaScript功能如下：
- en: '[PRE48]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: To retrieve the required page, we will define `contact.php:`
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检索所需的页面，我们将定义`contact.php:`
- en: '[PRE49]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The result is as follows:![How to do it...](graphics/3081_02_10.jpg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果如下：![如何做...](graphics/3081_02_10.jpg)
- en: How it works...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We are defining the main functionality of the pagination in the `paginationInit()`
    function. The main step is to take each hyperlink in the pagination and assign
    it a specific functionality based on its `id` attribute. When the `id` is `next`
    or `previous` it means we have clicked on the **Next** or **Previous** buttons.
    In this case, we look for the page that is currently active and select the `next/previous`
    hyperlink. If we have reached the `first/last` hyperlink, we hide the `previous/next`
    button by calling the function `hidePreviousNextButtons()`. The default target
    in this example is one of the numeric items (pages). When we click, we save the
    current active page, call the `GET` request from `contacts.php` to get the required
    page, and display it in the `contactGrid`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`paginationInit()`函数中定义了分页的主要功能。主要步骤是获取分页中的每个超链接，并根据其`id`属性分配特定的功能。当`id`为`next`或`previous`时，这意味着我们点击了**下一页**或**上一页**按钮。在这种情况下，我们查找当前活动的页面，并选择`next/previous`超链接。如果我们已经到达了`first/last`超链接，我们通过调用`hidePreviousNextButtons()`函数隐藏`previous/next`按钮。在这个例子中，默认目标是数字项(页面)之一。当我们点击时，我们保存当前活动页面，从`contacts.php`调用`GET`请求以获取所需的页面，并在`contactGrid`中显示它。
- en: There's more...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We learned how to build basic pagination. Now we can play with the user experience.
    Our users like to see what is going on, on the page. In this case, we are clicking
    on the link representing the page and waiting for the contacts to be displayed
    in a contact grid. Now, we can provide our user with a classic spinner as a notification
    that the content is loading.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了如何构建基本的分页。现在我们可以玩一下用户体验。我们的用户喜欢看到页面上发生了什么。在这种情况下，我们点击代表页面的链接，并等待联系人在联系人网格中显示出来。现在，我们可以为我们的用户提供一个经典的旋转器，作为内容正在加载的通知。
- en: 'First of all, we will need to find a `.gif` image for the spinner. We can easily
    find one on the Internet. When the image is ready and saved in our image folder
    we can define CSS as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要找到一个`.gif`图像作为旋转器。我们可以在互联网上很容易找到一个。当图像准备好并保存在我们的图像文件夹中时，我们可以定义CSS如下：
- en: '[PRE50]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We can add the displaying of the spinner directly into the existing functions;
    this can be done right before the Ajax request, when the request `id` is done.
    We will overwrite the HTML content with a `.html()` function:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接将旋转器的显示添加到现有的函数中；这可以在Ajax请求之前完成，当请求`id`完成时。我们将使用`.html()`函数覆盖HTML内容。
- en: '[PRE51]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The modified version is as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的版本如下：
- en: '![There''s more...](graphics/3081_02_11.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](graphics/3081_02_11.jpg)'
