- en: Chapter 7. Creating and Using Composer Packages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。创建和使用Composer包
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Downloading and installing packages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装包
- en: Using the Generators package to set up an app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用生成器包设置应用程序
- en: Creating a Composer package in Laravel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Laravel中创建Composer包
- en: Adding your Composer package to Packagist
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的Composer包添加到Packagist
- en: Adding a non-Packagist package to Composer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将非Packagist包添加到Composer
- en: Creating a custom artisan command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义artisan命令
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: One of the great features in Laravel is the ease in which we can include the
    class libraries that others have made using bundles. On the Laravel site, there
    are already many useful bundles, some of which automate certain tasks while others
    easily integrate with third-party APIs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel中的一个很棒的功能是我们可以轻松地使用包含其他人使用bundles制作的类库。在Laravel网站上，已经有许多有用的bundles，其中一些自动化某些任务，而其他一些则可以轻松地与第三方API集成。
- en: A recent addition to the PHP world is Composer, which allows us to use libraries
    (or packages) that aren't specific to Laravel.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: PHP世界的最新补充是Composer，它允许我们使用不特定于Laravel的库（或包）。
- en: In this chapter, we'll get up-and-running with using bundles, and we'll even
    create our own bundle that others can download. We'll also see how to incorporate
    Composer into our Laravel installation to open up a wide range of PHP libraries
    that we can use in our application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始使用bundles，并创建自己的bundle供其他人下载。我们还将看到如何将Composer整合到我们的Laravel安装中，以打开我们可以在应用程序中使用的各种PHP库。
- en: Downloading and installing packages
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装包
- en: One of the best features of Laravel is how modular it is. Most of the framework
    is built using libraries, or **packages**, that are well tested and widely used
    in other projects. By using Composer for dependency management, we can easily
    include other packages and seamlessly integrate them into our Laravel app.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel最好的功能之一是它的模块化。大部分框架都是使用经过充分测试并在其他项目中广泛使用的库或**包**构建的。通过使用Composer进行依赖管理，我们可以轻松地包含其他包并将它们无缝地整合到我们的Laravel应用程序中。
- en: 'For this recipe, we''ll be installing two popular packages into our app: Jeffrey
    Way''s Laravel 4 Generators and the `Imagine` image processing packages.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将在我们的应用程序中安装两个流行的包：Jeffrey Way的Laravel 4生成器和`Imagine`图像处理包。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard installation of Laravel using Composer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要使用Composer进行Laravel的标准安装。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For this recipe, we will follow these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将按照以下步骤进行：
- en: Go to [https://packagist.org/](https://packagist.org/).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://packagist.org/](https://packagist.org/)。
- en: In the search box, search for `way generator` as shown in the following screenshot:![How
    to do it...](graphics/2827OS_07_01.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中，搜索`way generator`，如下截图所示：![如何操作...](graphics/2827OS_07_01.jpg)
- en: Click on the link for **way/generators**:![How to do it...](graphics/2827OS_07_02.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**way/generators**的链接：![如何操作...](graphics/2827OS_07_02.jpg)
- en: 'View the details at [https://packagist.org/packages/way/generators](https://packagist.org/packages/way/generators)
    and take notice of the **require** line to get the package''s version. For our
    purposes, we''ll use **"way/generators": "1.0.*"**.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在[https://packagist.org/packages/way/generators](https://packagist.org/packages/way/generators)查看详细信息，并注意获取包版本的**require**行。对于我们的目的，我们将使用**"way/generators":
    "1.0.*"**。'
- en: 'In our application''s root directory, open up the `composer.json` file and
    add in the package to the `require` section so it looks like this:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们应用程序的根目录中，打开`composer.json`文件，并在`require`部分中添加包，使其看起来像这样：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Go back to [http://packagist.org](http://packagist.org) and perform a search
    for `imagine` as shown in the following screenshot:![How to do it...](graphics/2827OS_07_03.jpg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到[http://packagist.org](http://packagist.org)，并按照以下截图中显示的方式搜索`imagine`：![如何操作...](graphics/2827OS_07_03.jpg)
- en: Click on the link to **imagine/imagine** and copy the require code for **dev-master**:![How
    to do it...](graphics/2827OS_07_04.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**imagine/imagine**的链接，并复制**dev-master**的require代码：![如何操作...](graphics/2827OS_07_04.jpg)
- en: 'Go back to our `composer.json` file and update the `require` section to include
    the `imagine` package . It should now look similar to the following code:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到我们的`composer.json`文件，并更新`require`部分以包括`imagine`包。现在它应该类似于以下代码：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Open the command line, and in the root of our application, run the Composer
    update as follows:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行，在我们应用程序的根目录中，运行Composer update如下：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we''ll add the Generator Service Provider, so open the `app/config/app.php`
    file and in the providers array, add the following line:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将添加生成器服务提供者，因此打开`app/config/app.php`文件，并在providers数组中添加以下行：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To get our package, we first go to [packagist.org](http://packagist.org) and
    search for the package we want. We could also click on the **Browse packages**
    link. It will display a list of the most recent packages as well as the most popular.
    After clicking on the package we want, we'll be taken to the detail page, which
    lists various links including the package's repository and home page. We could
    also click on the package's maintainer link to see other packages they have released.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取我们的包，我们首先转到[packagist.org](http://packagist.org)，并搜索我们想要的包。我们也可以点击**浏览包**链接。它将显示最近的包列表以及最受欢迎的包。点击我们想要的包后，我们将被带到详细页面，其中列出了各种链接，包括包的存储库和主页。我们还可以点击包的维护者链接，查看他们发布的其他包。
- en: Underneath, we'll see the various versions of the package. If we open that version's
    detail page, we'll find the code we need to use for our `composer.json` file.
    We could either choose to use a strict version number, add a wildcard to the version,
    or use `dev-master`, which will install whatever is updated on the package's master
    branch. For the `Generators` package, we'll only use Version 1.0, but allow any
    minor fixes to that version. For the `imagine` package, we'll use `dev-master`,
    so whatever is in their repository's master branch will be downloaded, regardless
    of version number.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，我们将看到包的各种版本。如果我们打开该版本的详细页面，我们将找到我们需要在`composer.json`文件中使用的代码。我们可以选择使用严格的版本号，为版本添加通配符，或者使用`dev-master`，这将安装包的主分支上更新的任何内容。对于`Generators`包，我们只会使用1.0版本，但允许对该版本进行任何次要修复。对于`imagine`包，我们将使用`dev-master`，因此无论版本号如何，都将下载其存储库的主分支中的内容。
- en: We then run update on Composer and it will automatically download and install
    all of the packages we chose. Finally, to use `Generators` in our app, we need
    to register the service provider in our app's config file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在Composer上运行更新，它将自动下载并安装我们选择的所有包。最后，要在我们的应用程序中使用`Generators`，我们需要在应用程序的配置文件中注册服务提供者。
- en: Using the Generators package to set up an app
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Generators包设置应用程序
- en: '`Generators` is a popular Laravel package that automates quite a bit of file
    creation. In addition to `controllers` and `models`, it can also generate `views`,
    `migrations`, `seeds`, and more, all through a command-line interface.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`Generators`是一个流行的Laravel包，可以自动化相当多的文件创建。除了`controllers`和`models`之外，它还可以通过命令行界面生成`views`、`migrations`、`seeds`等等。'
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll be using the Laravel 4 Generators package maintained
    by *Jeffrey Way* that was installed in the *Downloading and installing packages*
    recipe. We'll also need a properly configured MySQL database.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用由*Jeffrey Way*维护的Laravel 4 Generators包，该包在*下载和安装包*示例中安装。我们还需要一个正确配置的MySQL数据库。
- en: How to do it…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Follow these steps for this recipe:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这个示例的步骤：
- en: 'Open the command line in the root of our app and, using the generator, create
    a scaffold for our cities as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们应用程序的根目录中打开命令行，并使用生成器按如下方式为我们的城市创建一个脚手架：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the command line, create a scaffold for our superheroes as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，按如下方式为我们的超级英雄创建一个脚手架：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our project, look in the `app/database/seeds` directory and find a file
    named `CitiesTableSeeder.php`. Open it and add some data to the `$cities` array
    as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的项目中，查看`app/database/seeds`目录，并找到名为`CitiesTableSeeder.php`的文件。打开它，并按如下方式向`$cities`数组中添加一些数据：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `app/database/seeds` directory, open `SuperheroesTableSeeder.php` and
    add some data to it:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/database/seeds`目录中，打开`SuperheroesTableSeeder.php`并向其中添加一些数据：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the command line, run the migration then seed the database as follows:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，运行迁移，然后按如下方式对数据库进行种子处理：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Open up a web browser and go to `http://{your-server}/cities`. We will see our
    data as shown in the following screenshot:![How to do it…](graphics/2827OS_07_05.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个网页浏览器，转到`http://{your-server}/cities`。我们将看到我们的数据如下截图所示：![操作步骤…](graphics/2827OS_07_05.jpg)
- en: Now, navigate to `http://{your-server}/superheroes` and we will see our data
    as shown in the following screenshot:![How to do it…](graphics/2827OS_07_06.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到`http://{your-server}/superheroes`，我们将看到我们的数据如下截图所示：![操作步骤…](graphics/2827OS_07_06.jpg)
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We begin by running the scaffold generator for our cities and superheroes tables.
    Using the `--fields` tag, we can determine which columns we want in our table
    and also set options such as data type. For our cities table, we'll only need
    the name of the city. For our superheroes table, we'll want the name of the hero
    as well as the ID of the city where they live.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先运行城市和超级英雄表的脚手架生成器。使用`--fields`标签，我们可以确定我们想要在表中的列，并设置数据类型等选项。对于我们的城市表，我们只需要城市的名称。对于我们的超级英雄表，我们希望得到英雄的名称以及他们居住的城市的ID。
- en: When we run the generator, many files will automatically be created for us.
    For example, with cities, we'll get `City.php` in our models, `CitiesController.php`
    in controllers, and a `cities` directory in our views with the index, show, create,
    and edit views. We then get a migration named `Create_cities_table.php`, a `CitiesTableSeeder.php`
    seed file, and `CitiesTest.php` in our `tests` directory. We'll also have our
    `DatabaseSeeder.php` file and our `routes.php` file updated to include everything
    we need.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行生成器时，许多文件将自动为我们创建。例如，对于城市，我们将在我们的models中得到`City.php`，在controllers中得到`CitiesController.php`，在我们的views中得到一个`cities`目录，其中包括索引、显示、创建和编辑视图。然后我们得到一个名为`Create_cities_table.php`的迁移，一个`CitiesTableSeeder.php`种子文件，以及我们的`tests`目录中的`CitiesTest.php`。我们还将有我们的`DatabaseSeeder.php`文件和我们的`routes.php`文件更新以包含我们需要的一切。
- en: To add some data to our tables, we opened the `CitiesTableSeeder.php` file and
    updated our `$cities` array with arrays that represent each row we want to add.
    We did the same thing for our `SuperheroesTableSeeder.php` file. Finally, we run
    the migrations and seeder and our database will be created and all the data will
    be inserted.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向我们的表中添加一些数据，我们打开了`CitiesTableSeeder.php`文件，并更新了我们的`$cities`数组，其中包含我们想要添加的每一行的数组。我们对`SuperheroesTableSeeder.php`文件也做了同样的事情。最后，我们运行迁移和种子处理，我们的数据库将被创建，并且所有数据将被插入。
- en: The `Generators` package has already created the views and controllers we need
    to manipulate the data, so we can easily go to our browser and see all of our
    data. We can also create new rows, update existing rows, and delete rows.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`Generators`包已经创建了我们需要操纵数据的视图和控制器，因此我们可以轻松地转到我们的浏览器并查看所有数据。我们还可以创建新行，更新现有行和删除行。'
- en: Creating a Composer package in Laravel
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Laravel中创建一个Composer包
- en: Using Laravel's Workbench, we can easily create a package that can be used and
    installed by Composer. We can also add functionality so that the package integrates
    seamlessly into our Laravel app. In this recipe, we'll be creating a simple package
    that will display a list of Vimeo videos for a specified user.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Laravel的工作台，我们可以轻松创建一个可以由Composer使用和安装的包。我们还可以添加功能，使该包无缝集成到我们的Laravel应用程序中。在这个示例中，我们将创建一个简单的包，用于显示指定用户的Vimeo视频列表。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a standard Laravel installation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个标准的Laravel安装。
- en: How to do it…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To complete this recipe, follow these steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'In the `app/config` directory, open the `workbench.php` file and update it
    with the following information:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中，打开`workbench.php`文件并使用以下信息进行更新：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the command line, use artisan to set up our package:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，使用artisan来设置我们的包：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Find the directory that will hold our source files and create a file named
    `Vimeolist.php`. In this example, we would put the file in `workbench/matula/vimeolist/src/Matula/Vimeolist/`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到将保存我们源文件的目录，并创建一个名为`Vimeolist.php`的文件。在这个示例中，我们将文件放在`workbench/matula/vimeolist/src/Matula/Vimeolist/`中：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the same directory as the file we just created, open the file named `VimeolistServiceProvider.php`
    and update it:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在刚刚创建的文件所在的目录中，打开名为`VimeolistServiceProvider.php`的文件并更新它：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open the `app.php` file in the `app/config` directory, and in the `providers`
    array, add our service provider as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中的`app.php`文件中，在`providers`数组中，添加我们的服务提供程序如下：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the command line, run the following command:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，运行以下命令：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In `routes.php`, add a route to display the data as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，添加一个显示数据的路由如下：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Our first step is to update our workbench's configuration file to hold our name
    and e-mail address. This will then be used for any other packages that we create
    in Laravel.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是更新我们工作台的配置文件，以保存我们的姓名和电子邮件地址。然后，这将用于我们在Laravel中创建的任何其他包。
- en: Next, we run the artisan command to create the files we need for our package.
    By using the `--resources` flag, it will also generate other files and directories
    that can be used specifically for Laravel. Once it's completed, there will be
    a new folder in our workbench directory that holds all our package's files. After
    drilling down into the directories, we'll get to a directory that holds our service
    provider file, and in this directory, we'll add our class file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们运行artisan命令来创建我们包所需的文件。通过使用`--resources`标志，它还将生成其他文件和目录，可以专门用于Laravel。完成后，我们的工作台目录中将有一个包含所有包文件的新文件夹。在深入目录之后，我们将进入一个包含我们服务提供程序文件的目录，在这个目录中，我们将添加我们的类文件。
- en: This example class will simply get a list of videos for a user from the Vimeo
    API. We have methods that will allow us to set a username, get the contents of
    the API endpoint, turn the JSON into a PHP object, and then create and return
    a formatted array. As a best practice, we should also make sure our code is tested
    and that we can put those files in the `test` directory.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例类将简单地从Vimeo API中获取用户的视频列表。我们有一些方法可以允许我们设置用户名，获取API端点的内容，将JSON转换为PHP对象，然后创建并返回一个格式化的数组。作为最佳实践，我们还应该确保我们的代码经过测试，并且我们可以将这些文件放在`test`目录中。
- en: To better integrate with Laravel, we need to update the service provider. We
    first update the `register` method and set the name we want to pass to Laravel's
    `app` variable and then we update the `provides` method to return the package
    name. Next, we need to update our app configuration file to actually register
    the service provider. Then, once we run the `dump-autoload` command in Composer,
    our new package will be available to use.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地与Laravel集成，我们需要更新服务提供程序。我们首先更新`register`方法并设置要传递给Laravel的`app`变量的名称，然后我们更新`provides`方法以返回包名称。接下来，我们需要更新我们的应用程序配置文件以实际注册服务提供程序。然后，一旦我们在Composer中运行`dump-autoload`命令，我们的新包将可供使用。
- en: Finally, we create a route to interact with the package. We'll have one optional
    parameter, that is, the username. We also need to make sure the `$app` variable
    is available in our route. Then, when we call `$app['vimeolist']`, the service
    provider will automatically instantiate our class and allow us to access the Vimeo
    list. For our purposes, we're only using the `dd()` helper function of Laravel
    to display the data, but we could also pass it to a view and make it look nicer.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建一个与包交互的路由。我们将有一个可选参数，即用户名。我们还需要确保我们的路由中有`$app`变量。然后，当我们调用`$app['vimeolist']`时，服务提供程序将自动实例化我们的类，并允许我们访问Vimeo列表。对于我们的目的，我们只使用Laravel的`dd()`辅助函数来显示数据，但我们也可以将其传递给视图并使其看起来更好。
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Laravel also has the option to create a facade for our package, so we could
    call it using something similar to `$vimeo = Vimeolist::setUser()`. There are
    also many other options for packages that can be found in the documentation at
    [http://laravel.com/docs/packages](http://laravel.com/docs/packages).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel还可以选择为我们的包创建一个门面，因此我们可以使用类似`$vimeo = Vimeolist::setUser()`的方式进行调用。还有许多其他可以在[http://laravel.com/docs/packages](http://laravel.com/docs/packages)文档中找到的包选项。
- en: Adding your Composer package to Packagist
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的Composer包添加到Packagist
- en: To make it easier to distribute our packages, we should submit them to the website
    [packagist.org](http://packagist.org). In this recipe, we'll see how to set up
    our package on GitHub and add it to Packagist.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易地分发我们的包，我们应该将它们提交到网站[packagist.org](http://packagist.org)。在这个示例中，我们将看到如何在GitHub上设置我们的包并将其添加到Packagist。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need to have completed the *Creating a Composer package
    in Laravel* recipe, and we'll also need an active GitHub account.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要完成*Laravel中创建Composer包*示例，并且我们还需要一个活跃的GitHub帐户。
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To complete this recipe, follow these steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'In the command line, move to the `workbench/matula/vimeolist` directory and
    set up our `git` repository as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，移动到`workbench/matula/vimeolist`目录并设置我们的`git`仓库如下：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create a new GitHub repository at [https://github.com/new](https://github.com/new)
    and give it the name `vimeolist`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://github.com/new](https://github.com/new)创建一个新的GitHub存储库，并将其命名为`vimeolist`。
- en: 'Add our package to GitHub:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的包添加到GitHub：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Go to [https://packagist.org/login/](https://packagist.org/login/) and log in
    using your GitHub account.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://packagist.org/login/](https://packagist.org/login/)并使用您的GitHub帐户登录。
- en: Click on the green **Submit Package** button shown in the following screenshot:![How
    to do it...](graphics/2827OS_07_07.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击以下截图中显示的绿色**提交包**按钮：![如何做...](graphics/2827OS_07_07.jpg)
- en: In the **Repository URL** text field, add the Git read-only URL from GitHub
    as shown in the following screenshot:![How to do it...](graphics/2827OS_07_08.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**存储库URL**文本字段中，添加GitHub的只读Git URL，如下截图所示：![如何做...](graphics/2827OS_07_08.jpg)
- en: Click on **Check,** and if everything works, click on **Submit**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**检查**，如果一切正常，单击**提交**。
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We begin by creating a `git` repository in our package's main directory. We
    then create a repository in GitHub for our files, add that remote to our local
    repository, and then push our local repository to GitHub.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在包的主目录中创建一个`git`存储库。然后我们在GitHub中为我们的文件创建一个存储库，将该远程存储库添加到我们的本地存储库，然后将我们的本地存储库推送到GitHub。
- en: On the Packagist site, we log in using our GitHub account and allow the [packagist.org](http://packagist.org)
    access. Then, we submit our packages at [https://packagist.org/packages/submit](https://packagist.org/packages/submit)
    using the GitHub URL from our repository. After clicking on **Check**, Packagist
    will look through the code and format it for use with Composer. If there are any
    errors, we will be prompted with what we need to do to fix them.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Packagist网站上，我们使用我们的GitHub帐户登录，并允许[packagist.org](http://packagist.org)访问。然后，我们使用来自我们存储库的GitHub
    URL在[https://packagist.org/packages/submit](https://packagist.org/packages/submit)提交我们的包。单击**检查**后，Packagist将查看代码并将其格式化以供Composer使用。如果有任何错误，我们将收到提示需要做什么来修复它们。
- en: If everything checks out and we click on **Submit**, our package will then be
    listed on the Packagist website.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，并且我们单击**提交**，我们的包将被列在Packagist网站上。
- en: See also
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a Composer package in Laravel* recipe
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Laravel中创建一个Composer包*教程'
- en: Adding a non-Packagist package to Composer
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Composer添加一个非Packagist包
- en: Adding a single line to our `composer.json` file and having Composer automatically
    download and install a package is great, but it requires the package to be available
    on [packagist.org](http://packagist.org). In this recipe, we'll see how to install
    packages that aren't available on Packagist.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 向我们的`composer.json`文件添加一行，并让Composer自动下载和安装一个包非常好，但它要求该包在[packagist.org](http://packagist.org)上可用。在这个教程中，我们将看到如何安装在Packagist上不可用的包。
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a standard Laravel installation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，请按照以下步骤操作：
- en: On GitHub, we'll need to find a package we want to use. For this example, we'll
    use the `UniversalForms` package found at [https://github.com/wesleytodd/Universal-Forms-PHP](https://github.com/wesleytodd/Universal-Forms-PHP).
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GitHub上，我们需要找到一个我们想要使用的包。在这个例子中，我们将使用在[https://github.com/wesleytodd/Universal-Forms-PHP](https://github.com/wesleytodd/Universal-Forms-PHP)找到的`UniversalForms`包。
- en: 'Open our main `composer.json` file and update the `require` section as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的主`composer.json`文件，并按以下方式更新`require`部分：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In `composer.json`, under the `require` section, add the repository we want
    to use:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`composer.json`中，在`require`部分下，添加我们要使用的存储库：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the command line, update Composer as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，按以下方式更新Composer：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the `app/config/app.php` file and update the `providers` array with the
    following line:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/config/app.php`文件，并使用以下行更新`providers`数组：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In `routes.php`, instantiate the class and use it on our routes as follows:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，实例化该类，并在我们的路由上使用它，如下所示：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our first step is to add in the line for the required packages just like with
    other Composer packages. However, since this package isn't available on [packagist.org](http://packagist.org),
    it will throw an error if we try to update Composer. To get it to work, we need
    to add in a repository for Composer to use. Composer has many different options
    for using other repositories, and they can be found at [http://getcomposer.org/doc/05-repositories.md#vcs](http://getcomposer.org/doc/05-repositories.md#vcs).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是像其他Composer包一样添加所需包的行。但是，由于这个包在[packagist.org](http://packagist.org)上不可用，如果我们尝试更新Composer，它将抛出错误。为了使其工作，我们需要添加一个Composer要使用的存储库。Composer有许多不同的选项可用于使用其他存储库，它们可以在[http://getcomposer.org/doc/05-repositories.md#vcs](http://getcomposer.org/doc/05-repositories.md#vcs)找到。
- en: Next, we update Composer and it will install the package for us. Since this
    package comes with a Laravel service provider, we then update our configuration
    file to register it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们更新Composer，它将为我们安装包。由于这个包带有一个Laravel服务提供者，我们然后更新我们的配置文件以注册它。
- en: Now we're able to use the package in our app. For our purposes, we'll instantiate
    the class outside of the routes and pass it into the routes' closure. Then we
    can use the library like normal. This particular package will take a JSON string
    or file and automatically create our form output for us.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在我们的应用程序中使用该包。对于我们的目的，我们将在路由之外实例化该类，并将其传递到路由的闭包中。然后我们可以像平常一样使用该库。这个特定的包将接受一个JSON字符串或文件，并自动为我们创建表单输出。
- en: Creating a custom artisan command
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义artisan命令
- en: Laravel's artisan command-line tool makes many tasks easy to accomplish. If
    we want to make our own tasks and use artisan to run them, the process is quite
    simple. In this recipe, we'll see how to make an artisan task that automatically
    creates an HTML5 skeleton in our `views` directory.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的artisan命令行工具使许多任务变得容易完成。如果我们想要创建自己的任务并使用artisan来运行它们，这个过程非常简单。在这个教程中，我们将看到如何创建一个artisan任务，自动在我们的`views`目录中创建一个HTML5骨架。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a standard Laravel installation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，请按照以下步骤操作：
- en: 'In the command line, run the `artisan` command to create our needed files:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，运行`artisan`命令来创建我们需要的文件：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `app/commands` directory, open the `SkeletonCommand.php` file and update
    the code as follows:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/commands`目录中，打开`SkeletonCommand.php`文件并按以下方式更新代码：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `app/start` directory, open the `artisan.php` file and add the following
    line:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/start`目录中，打开`artisan.php`文件并添加以下行：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the command line, test out the new command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，测试新命令：
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our first step is to use the `command:make` function of artisan and pass in
    the name of the command we want to use. After this runs, we'll find a new file
    in our `app/commands` directory with the same name as the name we chose.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是使用artisan的`command:make`函数，并传入我们想要使用的命令的名称。运行后，我们会在`app/commands`目录中找到一个与我们选择的名称相同的新文件。
- en: In our `SkeletonCommand` file, we start by adding in a name. This will be the
    command to which artisan will respond. Next, we set a description, which will
    display when we list out all the artisan commands.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`SkeletonCommand`文件中，我们首先添加一个名称。这将是artisan要响应的命令。接下来，我们设置一个描述，当我们列出所有artisan命令时将显示。
- en: For this command, we'll be accessing the filesystem, so we need to make sure
    to add Laravel's `Filesystem` class and that we instantiate it in our constructor.
    Then, we come to the `fire()` method. This is where all the code we want to run
    should go. For our purpose, we use a single argument to determine what our `view`
    file name will be, and if the `--blade` parameter is set to `true`, we'll make
    it a `blade` file. Then, we create a string that holds our HTML5 skeleton, though
    we could also make this a separate file and pull in the text.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个命令，我们将访问文件系统，因此我们需要确保添加Laravel的`Filesystem`类，并在我们的构造函数中实例化它。然后，我们来到`fire()`方法。这是我们想要运行的所有代码的地方。为了我们的目的，我们使用一个单一参数来确定我们的`view`文件名将是什么，如果`--blade`参数设置为`true`，我们将把它变成一个`blade`文件。然后，我们创建一个包含我们的HTML5骨架的字符串，尽管我们也可以将其制作成一个单独的文件并引入文本。
- en: We then create the new file using the template as our HTML and display a success
    message in the console.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用模板创建新文件作为我们的HTML，并在控制台中显示成功消息。
