["```php\ncomposer require \"codeception/codeception\" --dev\n```", "```php\ncomposer exec codecept bootstrap\n```", "```php\ncodeception.yml\n\ntests/_data/\ntests/_output/\n\ntests/acceptance/\ntests/acceptance.suite.yml\ntests/_support/AcceptanceTester.php\ntests/_support/Helper/Acceptance.php\ntests/_support/_generated/AcceptanceTesterActions.php\n\ntests/functional/\ntests/functional.suite.yml\ntests/_support/FunctionalTester.php\ntests/_support/Helper/Functional.php\ntests/_support/_generated/FunctionalTesterActions.php\n\ntests/unit/\ntests/unit.suite.yml\ntests/_support/UnitTester.php\ntests/_support/Helper/Unit.php\ntests/_support/_generated/UnitTesterActions.php\n```", "```php\ncomposer exec codecept g:suite api\n```", "```php\ntests/api/\ntests/api.suite.yml\ntests/_support/ApiTester.php\ntests/_support/Helper/Api.php\ntests/_support/_generated/ApiTesterActions.php\n```", "```php\ncomposer exec codecept g:suite abc\n```", "```php\nclass_name: ApiTester\nmodules:\n enabled:  - REST:\n url: /api/v1\n            depends: Lumen\n        - \\Helper\\Api\n    config:\n  - Lumen:\n environment_file: .env.testing\n```", "```php\ncp .env .env.testing\n```", "```php\ncomposer exec codecept generate:cest api CreatePost\n```", "```php\n<?php   class CreatePostCest {\n  public function _before(ApiTester $I)\n { }    public function _after(ApiTester $I)\n { }    // tests\n  public function tryToTest(ApiTester $I)\n {  } } \n```", "```php\n<?php   /* |-------------------------------------------------------------------------- | Model Factories |-------------------------------------------------------------------------- | | Here you may define all of your model factories. Model factories give | you a convenient way to create models for testing and seeding your | database. Just tell the factory how a default model should look. | */   $factory->define(App\\User::class, function (Faker\\Generator $faker) {\n  return [\n  'name' => $faker->name,\n  'email' => $faker->email,\n ]; });   $factory->define(App\\Post::class, function (Faker\\Generator $faker) {\n    return [\n        'title' => $faker->name,\n        'content' => $faker->text(),\n        'status' => $faker->randomElement(['draft', 'published']),\n    ]; **});** \n```", "```php\n// tests if it let unauthorized user to create post public function tryToCreatePostWithoutLogin(ApiTester $I) {\n  //This will be in console like a comment but effect nothing\n  $I->wantTo(\"Send sending Post Data to create Post to test if it let it created without login?\");    //get random data generated through ModelFactory\n  $postData = factory(App\\Post::class, 1)->make();    //Send Post data through Post method\n  $I->sendPost(\"/posts\", $postData);    //This one will also be like a comment in console\n  $I->expect(\"To receive a unauthorized error resposne\");    //Response code of unauthorized request should be 401\n  $I->seeResponseCodeIs(401);  }\n```", "```php\ncomposer exec codecept run api\n```", "```php\nvendor/bin/codecept run api\n```", "```php\nvendor/bin/codecept run api -vv\n```", "```php\nalias codecept=vendor/bin/codecept\ncodecept run api -vv\n```", "```php\ncodecept run api -v\n```", "```php\n// tests if it let unauthorized user to create post public function tryToCreatePostAfterLogin(ApiTester $I) {\n  //This will be in console like a comment but effect nothing\n $I->wantTo(\"Sending Post Data to create Post after login\"**);**\n $user = App\\User::first();\n    $token = JWTAuth::fromUser($user**);**    //get random data generated through ModelFactory\n  $postData = factory(App\\Post::class, 1)->make()->first()->toArray();    //Send Post data through Post method\n $I->amBearerAuthenticated($token);   $I->sendPost(\"/posts\", $postData);    //This one will also be like a comment in console\n  $I->expect(\"To receive a unauthorized error resposne\");    //Response code of unauthorized request should be 401\n $I->seeResponseCodeIs(200**);**   }\n```", "```php\nOK (2 tests, 2 assertions)\n```", "```php\n<?php   use Tymon\\JWTAuth\\Facades\\JWTAuth;   class CreatePostCest {\n  public function _before(ApiTester $I)\n { }    public function _after(ApiTester $I)\n { }    // tests if it let unauthorized user to create post\n  public function tryToCreatePostWithoutLogin(ApiTester $I)\n {  //This will be in console like a comment but effect nothing\n  $I->wantTo(\"Send sending Post Data to create Post to test if it let it created without login?\");    //get random data generated through ModelFactory\n  $postData = factory(App\\Post::class, 1)->make()->first()->toArray();    //Send Post data through Post method\n  $I->sendPost(\"/posts\", $postData);    //This one will also be like a comment in console\n  $I->expect(\"To receive a unauthorized error resposne\");    //Response code of unauthorized request should be 401\n  $I->seeResponseCodeIs(401);\n     // Response should be in JSON format\n  $I->seeResponseIsJson();\n }    // tests if it let unauthorized user to create post\n  public function tryToCreatePostAfterLogin(ApiTester $I)\n {  //This will be in console like a comment but effect nothing\n  $I->wantTo(\"Sending Post Data to create Post after login\");    $user = App\\User::first();\n  $token = JWTAuth::fromUser($user);    //get random data generated through ModelFactory\n  $postData = factory(App\\Post::class, 1)->make()->first()->toArray();    //Send Post data through Post method\n  $I->amBearerAuthenticated($token);\n  $I->sendPost(\"/posts\", $postData);    //This one will also be like a comment in console\n  $I->expect(\"To receive a 200 response\");    //Response code of unauthorized request should be 200\n  $I->seeResponseCodeIs(200);\n        // Response should be in JSON format\n $I->seeResponseIsJson();        //Response should contain data that matches with request $I->seeResponseContainsJson($postData**);**  } } \n```", "```php\n$I->seeResponseJsonMatchesJsonPath('$.data[*].title');\n```", "```php\ntryToDeletePostWithWrongId()  and it should return 404 response.\n\ntryToDeletePostWithCorrectId() and it should return 200 with JSON we set there in PostController delete() method.\n\ntryToDeletePostWithIdBelongsToOtherUserPost() it should return 403 Forbidden response because a user is only allowed to delete his/her own Post.\n\ntryToDeletePostWithoutLogin() it should return 401 Unauthenticated because only a logged in user is allowed to delete his/her Post.\n```", "```php\ntryToUpdatePostWithWrongId()  and it should return 404 response.\n\ntryToUpdatePostWithCorrectId() and it should return 200 with JSON having that Post data.\n\ntryToUpdatePostWithIdBelongsToOtherUserPost() it should return 403 Forbidden response because a user is only allowed to update his/her own Post.\ntryToUpdatePostWithoutLogin() and it should return 401 unauthorized.\n```", "```php\ntryToListPosts() and it should return 200 response code with Post list having data and meta indices in JSON.\n```", "```php\ntryToSeePostWithId() and it should return 200 response code with Post data in JSON.\n\ntryToSeePostWithInvalidId() and it should return 404 Not Found error.\n```"]