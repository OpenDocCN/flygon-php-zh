["```php\n**CREATE DATABASE images**\n\n```", "```php\nphp artisan migrate:make create_photos_table --table=photos \u2013create\n```", "```php\n<?php\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreatePhotosTable extends Migration {\n\n  /**\n  * Run the migrations.\n  * @return void\n  */\n  public function up()\n    {\n    Schema::create('photos', function(Blueprint $table)\n    {\n      $table->increments('id');\n      $table->string('title',400)->default('');//the column that holds the image's name\n      $table->string('image',400)->default('');//the column that holds the image's filename\n      $table->timestamps();\n    });\n  }\n\n  /**\n  * Reverse the migrations.\n  * @return void\n  */\n  public function down()\n  {\n    Schema::drop('photos');\n  }\n}\n```", "```php\n**php artsian migrate**\n\n```", "```php\n<?php\nclass Photo extends Eloquent {\n\n  //the variable that sets the table name\n  protected $table = 'photos';\n\n  //the variable that sets which columns can be edited\n  protected $fillable = array('title','image');\n\n  //The variable which enables or disables the Laravel'stimestamps option. Default is true. We're leaving this hereanyways\n  public $timestamps = true;\n}\n```", "```php\n<?php\n\n/**\n * app/config/image.php\n*/\n\nreturn array(\n\n  //the folder that will hold original uploaded images\n  'upload_folder' => 'uploads',\n\n  //the folder that will hold thumbnails\n  'thumb_folder' => 'uploads/thumbs',\n\n  //width of the resized thumbnail\n  'thumb_width' => 320,\n\n  //height of the resized thumbnail\n  'thumb_height' => 240\n\n);\n```", "```php\nConfig::get('filename.key')\n```", "```php\nConfig::get('image.upload_folder')\n```", "```php\n    \"require\": {\n      \"laravel/framework\": \"4.0.*\",\n      \"intervention/image\": \"dev-master\"\n    }\n    ```", "```php\n    **php composer.phar update**\n\n    ```", "```php\n    Intervention\\Image\\ImageServiceProvider\n    ```", "```php\n    'Image' => 'Intervention\\Image\\Facades\\Image',\n    ```", "```php\n    Image::make(Input::file('photo')->getRealPath())->resize(300, 200)->save('foo.jpg');\n    ```", "```php\n    //This is for the get event of the index page\n    Route::get('/',array('as'=>'index_page','uses'=>'ImageController@getIndex'));\n    //This is for the post event of the index.page\n    Route::post('/',array('as'=>'index_page_post','before' =>'csrf', 'uses'=>'ImageController@postIndex'));\n    ```", "```php\n    <?php\n\n    class ImageController extends BaseController {\n\n      public function getIndex()\n      {\n        //Let's load the form view\n        return View::make('tpl.index');\n      }\n\n    }\n    ```", "```php\n    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \n    \"http://www.w3.org/TR/html4/loose.dtd\">\n\n    <html lang=\"en\">\n      <head>\n      <meta http-equiv=\"content-type\"content=\"text/html; charset=utf-8\">\n      <title>Laravel Image Sharing</title>\n      {{HTML::style('css/styles.css')}}\n      </head>\n\n      <body>\n        {{--Your title of the image (and yeah, blade enginehas its own commenting, cool, isn't it?)--}}\n        <h2>Your Awesome Image Sharing Website</h2>\n\n        {{--If there is an error flashdata in session(from form validation), we show the first one--}}\n        @if(Session::has('errors'))\n          <h3 class=\"error\">{{$errors->first()}}</h3>\n        @endif\n\n        {{--If there is an error flashdata in session whichis set manually, we will show it--}}\n        @if(Session::has('error'))\n          <h3 class=\"error\">{{Session::get('error')}}</h3>\n        @endif\n\n        {{--If we have a success message to show, we printit--}}\n        @if(Session::has('success'))\n          <h3 class=\"error\">{{Session::get('success')}}</h3>\n        @endif\n\n        {{--We yield (get the contents of) the section named'content' from the view files--}}\n        @yield('content')\n\n      </body>\n    </html>\n    ```", "```php\n    @extends('frontend_master')\n\n    @section('content')\n      {{Form::open(array('url' => '/', 'files' => true))}}\n      {{Form::text('title','',array('placeholder'=>'Please insert your title here'))}}\n      {{Form::file('image')}}\n      {{Form::submit('save!',array('name'=>'send'))}}\n      {{Form::close()}}\n    @stop\n    ```", "```php\n    <input name=\"_token\" type=\"hidden\" value=\"SnRocsQQlOnqEDH45ewP2GLxPFUy5eH4RyLzeKm3\">\n    ```", "```php\n    /*Body adjustment*/\n    body{width:60%; margin:auto; background:#dedede}\n    /*The title*/\n    h2{font-size:40px; text-align:center; font-family:Tahoma,Arial,sans-serif}\n    /*Sub title (success and error messages)*/\n    h3{font-size:25px; border-radius:4px; font-family:Tahoma,Arial,sans-serif; text-align:center;width:100%}\n    h3.error{border:3px solid #d00; background-color:#f66; color:#d00 }\n    h3.success{border:3px solid #0d0; background-color:#0f0; color:#0d0}p{font-size:25px; font-weight: bold; color: black;font-family: Tahoma,Arial,sans-serif}ul{float:left;width:100%;list-style:none}li{float:left;margin-right:10px}\n    /*For the input files of the form*/\n    input{float:left; width:100%; border-radius:13px;font-size:20px; height:30px; border:10px 0 10px 0;margin-bottom:20px}\n    ```", "```php\n    //rules of the image upload form\n    public static $upload_rules = array(\n      'title'=> 'required|min:3',\n      'image'=> 'required|image'\n    );\n    ```", "```php\n    public function postIndex()\n    {\n\n      //Let's validate the form first with the rules which areset at the model\n      $validation = Validator::make(Input::all(),Photo::$upload_rules);\n\n      //If the validation fails, we redirect the user to theindex page, with the error messages \n      if($validation->fails()) {\n        return Redirect::to('/')->withInput()->withErrors($validation);\n      }\n      else {\n\n        //If the validation passes, we upload the image to thedatabase and process it\n        $image = Input::file('image');\n\n        //This is the original uploaded client name of theimage\n        $filename = $image->getClientOriginalName();\n        //Because Symfony API does not provide filename//without extension, we will be using raw PHP here\n        $filename = pathinfo($filename, PATHINFO_FILENAME);\n\n        //We should salt and make an url-friendly version of//the filename\n        //(In ideal application, you should check the filename//to be unique)\n        $fullname = Str::slug(Str::random(8).$filename).'.'.$image->getClientOriginalExtension();\n\n        //We upload the image first to the upload folder, thenget make a thumbnail from the uploaded image\n        $upload = $image->move(Config::get( 'image.upload_folder'),$fullname);\n\n        //Our model that we've created is named Photo, thislibrary has an alias named Image, don't mix them two!\n        //These parameters are related to the image processingclass that we've included, not really related toLaravel\n        Image::make(Config::get( 'image.upload_folder').'/'.$fullname)->resize(Config::get( 'image.thumb_width'),null, true)->save(Config::get( 'image.thumb_folder').'/'.$fullname);\n\n        //If the file is now uploaded, we show an error messageto the user, else we add a new column to the databaseand show the success message\n        if($upload) {\n\n          //image is now uploaded, we first need to add columnto the database\n          $insert_id = DB::table('photos')->insertGetId(\n            array(\n              'title' => Input::get('title'),\n              'image' => $fullname\n            )\n          );\n\n          //Now we redirect to the image's permalink\n          return Redirect::to(URL::to('snatch/'.$insert_id))->with('success','Your image is uploadedsuccessfully!');\n        } else {\n          //image cannot be uploaded\n          return Redirect::to('/')->withInput()->with('error','Sorry, the image could not beuploaded, please try again later');\n        }\n      }\n    }\n    ```", "```php\n    //This is to show the image's permalink on our website\n    Route::get('snatch/{id}',\n      array('as'=>'get_image_information',\n      'uses'=>'ImageController@getSnatch'))\n      ->where('id', '[0-9]+');\n    ```", "```php\n    public function getSnatch($id) {\n      //Let's try to find the image from database first\n      $image = Photo::find($id);\n      //If found, we load the view and pass the image info asparameter, else we redirect to main page with errormessage\n      if($image) {\n        return View::make('tpl.permalink')->with('image',$image);\n      } else {\n        return Redirect::to('/')->with('error','Image not found');\n      }\n    }\n    ```", "```php\n    @extends('frontend_master')\n    @section('content')\n    <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\"width=\"100percent\">\n      <tr>\n        <td width=\"450\" valign=\"top\">\n          <p>Title: {{$image->title}}</p>\n        {{HTML::image(Config::get('image.thumb_folder').'/'.$image->image)}}\n        </td>\n          <td valign=\"top\">\n          <p>Direct Image URL</p>\n          <input onclick=\"this.select()\" type=\"text\"width=\"100percent\" value=\"{{URL::to(Config::get('image.upload_folder').'/'$image->image)}}\" />\n\n          <p>Thumbnail Forum BBCode</p>\n          <input onclick=\"this.select()\" type=\"text\"width=\"100percent\" value=\"[url={{URL::to('snatch/'$image->id)}}][img]{{URL::to(Config::get('image.thumb_folder')'/'.$image->image)}}[/img][/url]\" />\n\n          <p>Thumbnail HTML Code</p>\n          <input onclick=\"this.select()\" type=\"text\"width=\"100percent\"value=\"{{HTML::entities(HTML::link(URL::to('snatch/'.$image->id),HTML::image(Config::get('image.thumb_folder').'/'$image->image)))}}\" />\n        </td>\n      </tr>\n    </table>\n    @stop\n    ```", "```php\n    //This route is to show all images.\n    Route::get('all',array('as'=>'all_images','uses'=>'ImageController@getAll'));\n    ```", "```php\n    public function getAll(){\n\n      //Let's first take all images with a pagination feature\n      $all_images = DB::table('photos')->orderBy('id','desc')->paginate(6);\n\n      //Then let's load the view with found data and pass thevariable to the view\n      return View::make('tpl.all_images')->with('images',$all_images);\n    }\n    ```", "```php\n    @extends('frontend_master')\n\n    @section('content')\n\n    @if(count($images))\n      <ul>\n\n        @foreach($images as $each)\n          <li>\n            <a href=\"{{URL::to('snatch/'$each->id)}}\">{{HTML::image(Config::get('image.thumb_folder')'/'.$each->image)}}</a>\n          </li>\n        @endforeach\n      </ul> \n      <p>{{$images->links()}}</p>\n    @else\n      {{--If no images are found on the database, we will showa no image found error message--}}\n      <p>No images uploaded yet, {{HTML::link('/','care to upload one?')}}</p>\n    @endif\n    @stop\n    ```", "```php\n    //This route is to delete the image with given ID\n    Route::get('delete/{id}', array\n    ('as'=>'delete_image','uses'=>\n    'ImageController@getDelete'))\n    ->where('id', '[0-9]+');\n    ```", "```php\n    public function getDelete($id) {\n      //Let's first find the image\n      $image = Photo::find($id);\n\n      //If there's an image, we will continue to the deletingprocess\n      if($image) {\n        //First, let's delete the images from FTP\n        File::delete(Config::get('image.upload_folder').'/'$image->image);\n        File::delete(Config::get('image.thumb_folder').'/'$image->image);\n\n        //Now let's delete the value from database\n        $image->delete();\n\n        //Let's return to the main page with a success message\n        return Redirect::to('/')->with('success','Image deleted successfully');\n\n      } else {\n        //Image not found, so we will redirect to the indexpage with an error message flash data.\n        return Redirect::to('/')->with('error','No image with given ID found');\n      }\n    }\n    ```"]