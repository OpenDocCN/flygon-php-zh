["```php\n    namespace Application\\Parse;\n    use SimpleXMLIterator;\n    use SimpleXMLElement;\n    class ConvertXml\n    {\n    }\n    ```", "```php\n    public function xmlToArray(SimpleXMLIterator $xml) : array\n    {\n      $a = array();\n      for( $xml->rewind(); $xml->valid(); $xml->next() ) {\n        if(!array_key_exists($xml->key(), $a)) {\n          $a[$xml->key()] = array();\n        }\n        if($xml->hasChildren()){\n          $a[$xml->key()][] = $this->xmlToArray($xml->current());\n        }\n        else{\n          $a[$xml->key()] = (array) $xml->current()->attributes();\n          $a[$xml->key()]['value'] = strval($xml->current());\n        }\n      }\n      return $a;\n    }\n    ```", "```php\n    public function arrayToXml(array $a)\n    {\n      $xml = new SimpleXMLElement(\n      '<?xml version=\"1.0\" standalone=\"yes\"?><root></root>');\n      $this->phpToXml($a, $xml);\n      return $xml->asXML();\n    }\n    ```", "```php\n    protected function phpToXml($value, &$xml)\n    {\n      $node = $value;\n      if (is_object($node)) {\n        $node = get_object_vars($node);\n      }\n      if (is_array($node)) {\n        foreach ($node as $k => $v) {\n          if (is_numeric($k)) {\n            $k = 'number' . $k;\n          }\n          if (is_array($v)) {\n              $newNode = $xml->addChild($k);\n              $this->phpToXml($v, $newNode);\n          } elseif (is_object($v)) {\n              $newNode = $xml->addChild($k);\n              $this->phpToXml($v, $newNode);\n          } else {\n              $xml->addChild($k, $v);\n          }\n        }\n      } else  {\n          $xml->addChild(self::UNKNOWN_KEY, $node);\n      }\n    }\n    ```", "```php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Parse\\ConvertXml;\n$wsdl = 'http://graphical.weather.gov/xml/'\n. 'SOAP_server/ndfdXMLserver.php?wsdl';\n$xml = new SimpleXMLIterator($wsdl, 0, TRUE);\n$convert = new ConvertXml();\nvar_dump($convert->xmlToArray($xml));\n```", "```php\n$convert = new ConvertXml();\nheader('Content-Type: text/xml');\necho $convert->arrayToXml(include CONFIG_FILE);\n```", "```php\n    namespace Application\\Web;\n\n    class AbstractHttp\n    {\n    ```", "```php\n    const METHOD_GET = 'GET';\n    const METHOD_POST = 'POST';\n    const METHOD_PUT = 'PUT';\n    const METHOD_DELETE = 'DELETE';\n    const CONTENT_TYPE_HTML = 'text/html';\n    const CONTENT_TYPE_JSON = 'application/json';\n    const CONTENT_TYPE_FORM_URL_ENCODED = \n      'application/x-www-form-urlencoded';\n    const HEADER_CONTENT_TYPE = 'Content-Type';\n    const TRANSPORT_HTTP = 'http';\n    const TRANSPORT_HTTPS = 'https';\n    const STATUS_200 = '200';\n    const STATUS_401 = '401';\n    const STATUS_500 = '500';\n    ```", "```php\n    protected $uri;      // i.e. http://xxx.com/yyy\n    protected $method;    // i.e. GET, PUT, POST, DELETE\n    protected $headers;  // HTTP headers\n    protected $cookies;  // cookies\n    protected $metaData;  // information about the transmission\n    protected $transport;  // i.e. http or https\n    protected $data = array();\n    ```", "```php\n    public function setMethod($method)\n    {\n      $this->method = $method;\n    }\n    public function getMethod()\n    {\n      return $this->method ?? self::METHOD_GET;\n    }\n    // etc.\n    ```", "```php\n    public function setHeaderByKey($key, $value)\n    {\n      $this->headers[$key] = $value;\n    }\n    public function getHeaderByKey($key)\n    {\n      return $this->headers[$key] ?? NULL;\n    }\n    public function getDataByKey($key)\n    {\n      return $this->data[$key] ?? NULL;\n    }\n    public function getMetaDataByKey($key)\n    {\n      return $this->metaData[$key] ?? NULL;\n    }\n    ```", "```php\n    public function setUri($uri, array $params = NULL)\n    {\n      $this->uri = $uri;\n      $first = TRUE;\n      if ($params) {\n        $this->uri .= '?' . http_build_query($params);\n      }\n    }\n    public function getDataEncoded()\n    {\n      return http_build_query($this->getData());\n    }\n    ```", "```php\n    public function setTransport($transport = NULL)\n    {\n      if ($transport) {\n          $this->transport = $transport;\n      } else {\n          if (substr($this->uri, 0, 5) == self::TRANSPORT_HTTPS) {\n              $this->transport = self::TRANSPORT_HTTPS;\n          } else {\n              $this->transport = self::TRANSPORT_HTTP;\n          }\n        }\n      }\n    ```", "```php\n    namespace Application\\Web;\n    class Request extends AbstractHttp\n    {\n      public function __construct(\n        $uri = NULL, $method = NULL, array $headers = NULL, \n        array $data = NULL, array $cookies = NULL)\n        {\n          if (!$headers) $this->headers = $_SERVER ?? array();\n          else $this->headers = $headers;\n          if (!$uri) $this->uri = $this->headers['PHP_SELF'] ?? '';\n          else $this->uri = $uri;\n          if (!$method) $this->method = \n            $this->headers['REQUEST_METHOD'] ?? self::METHOD_GET;\n          else $this->method = $method;\n          if (!$data) $this->data = $_REQUEST ?? array();\n          else $this->data = $data;\n          if (!$cookies) $this->cookies = $_COOKIE ?? array();\n          else $this->cookies = $cookies;\n          $this->setTransport();\n        }  \n    }\n    ```", "```php\n    namespace Application\\Web;\n    class Received extends AbstractHttp\n    {\n      public function __construct(\n        $uri = NULL, $method = NULL, array $headers = NULL, \n        array $data = NULL, array $cookies = NULL)\n      {\n        $this->uri = $uri;\n        $this->method = $method;\n        $this->headers = $headers;\n        $this->data = $data;\n        $this->cookies = $cookies;\n        $this->setTransport();\n      }  \n    }\n    ```", "```php\n    namespace Application\\Web\\Client;\n    use Application\\Web\\ { Request, Received };\n    class Streams\n    {\n      const BYTES_TO_READ = 4096;\n    ```", "```php\n    public static function send(Request $request)\n    {\n      $data = $request->getDataEncoded();\n      $received = new Received();\n      switch ($request->getMethod()) {\n        case Request::METHOD_GET :\n          if ($data) {\n            $request->setUri($request->getUri() . '?' . $data);\n          }\n          $resource = fopen($request->getUri(), 'r');\n          break;\n        case Request::METHOD_POST :\n          $opts = [\n            $request->getTransport() => \n            [\n              'method'  => Request::METHOD_POST,\n              'header'  => Request::HEADER_CONTENT_TYPE \n              . ': ' . Request::CONTENT_TYPE_FORM_URL_ENCODED,\n              'content' => $data\n            ]\n          ];\n          $resource = fopen($request->getUri(), 'w', \n          stream_context_create($opts));\n          break;\n        }\n        return self::getResults($received, $resource);\n    }\n    ```", "```php\n    protected static function getResults(Received $received, $resource)\n    {\n      $received->setMetaData(stream_get_meta_data($resource));\n      $data = $received->getMetaDataByKey('wrapper_data');\n      if (!empty($data) && is_array($data)) {\n        foreach($data as $item) {\n          if (preg_match('!^HTTP/\\d\\.\\d (\\d+?) .*?$!', \n              $item, $matches)) {\n              $received->setHeaderByKey('status', $matches[1]);\n          } else {\n              list($key, $value) = explode(':', $item);\n              $received->setHeaderByKey($key, trim($value));\n          }\n        }\n      }\n      $payload = '';\n      while (!feof($resource)) {\n        $payload .= fread($resource, self::BYTES_TO_READ);\n      }\n      if ($received->getHeaderByKey(Received::HEADER_CONTENT_TYPE)) {\n        switch (TRUE) {\n          case stripos($received->getHeaderByKey(\n                       Received::HEADER_CONTENT_TYPE), \n                       Received::CONTENT_TYPE_JSON) !== FALSE:\n            $received->setData(json_decode($payload));\n            break;\n          default :\n            $received->setData($payload);\n            break;\n              }\n        }\n        return $received;\n    }\n    ```", "```php\n    namespace Application\\Web\\Client;\n    use Application\\Web\\ { Request, Received };\n    class Curl\n    {\n    ```", "```php\n    public static function send(Request $request)\n    {\n      $data = $request->getDataEncoded();\n      $received = new Received();\n      switch ($request->getMethod()) {\n        case Request::METHOD_GET :\n          $uri = ($data) \n            ? $request->getUri() . '?' . $data \n            : $request->getUri();\n              $options = [\n                CURLOPT_URL => $uri,\n                CURLOPT_HEADER => 0,\n                CURLOPT_RETURNTRANSFER => TRUE,\n                CURLOPT_TIMEOUT => 4\n              ];\n              break;\n    ```", "```php\n    case Request::METHOD_POST :\n      $options = [\n        CURLOPT_POST => 1,\n        CURLOPT_HEADER => 0,\n        CURLOPT_URL => $request->getUri(),\n        CURLOPT_FRESH_CONNECT => 1,\n        CURLOPT_RETURNTRANSFER => 1,\n        CURLOPT_FORBID_REUSE => 1,\n        CURLOPT_TIMEOUT => 4,\n        CURLOPT_POSTFIELDS => $data\n      ];\n      break;\n    }\n    ```", "```php\n    $ch = curl_init();\n    curl_setopt_array($ch, ($options));\n    if( ! $result = curl_exec($ch))\n    {\n      trigger_error(curl_error($ch));\n    }\n    $received->setMetaData(curl_getinfo($ch));\n    curl_close($ch);\n    return self::getResults($received, $result);\n    }\n    ```", "```php\n    protected static function getResults(Received $received, $payload)\n    {\n      $type = $received->getMetaDataByKey('content_type');\n      if ($type) {\n        switch (TRUE) {\n          case stripos($type, \n              Received::CONTENT_TYPE_JSON) !== FALSE):\n              $received->setData(json_decode($payload));\n              break;\n          default :\n              $received->setData($payload);\n              break;\n        }\n      }\n      return $received;\n    }\n    ```", "```php\n<?php\ndefine('DEFAULT_ORIGIN', 'New York City');\ndefine('DEFAULT_DESTINATION', 'Redondo Beach');\ndefine('DEFAULT_FORMAT', 'json');\n$apiKey = include __DIR__ . '/google_api_key.php';\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Web\\Request;\nuse Application\\Web\\Client\\Curl;\n```", "```php\n$start = $_GET['start'] ?? DEFAULT_ORIGIN;\n$end   = $_GET['end'] ?? DEFAULT_DESTINATION;\n$start = strip_tags($start);\n$end   = strip_tags($end);\n```", "```php\n$request = new Request(\n  'https://maps.googleapis.com/maps/api/directions/json',\n  Request::METHOD_GET,\n  NULL,\n  ['origin' => $start, 'destination' => $end, 'key' => $apiKey],\n  NULL\n);\n\n$received = Curl::send($request);\n$routes   = $received->getData()->routes[0];\ninclude __DIR__ . '/chap_07_simple_rest_client_google_maps_template.php';\n```", "```php\n<?php foreach ($routes->legs as $item) : ?>\n  <!-- Trip Info -->\n  <br>Distance: <?= $item->distance->text; ?>\n  <br>Duration: <?= $item->duration->text; ?>\n  <!-- Driving Directions -->\n  <table>\n    <tr>\n    <th>Distance</th><th>Duration</th><th>Directions</th>\n    </tr>\n    <?php foreach ($item->steps as $step) : ?>\n    <?php $class = ($count++ & 01) ? 'color1' : 'color2'; ?>\n    <tr>\n    <td class=\"<?= $class ?>\"><?= $step->distance->text ?></td>\n    <td class=\"<?= $class ?>\"><?= $step->duration->text ?></td>\n    <td class=\"<?= $class ?>\">\n    <?= $step->html_instructions ?></td>\n    </tr>\n    <?php endforeach; ?>\n  </table>\n<?php endforeach; ?>\n```", "```php\n    namespace Application\\Web;\n    class Response extends AbstractHttp\n    {\n\n      public function __construct(Request $request = NULL, \n                                  $status = NULL, $contentType = NULL)\n      {\n        if ($request) {\n          $this->uri = $request->getUri();\n          $this->data = $request->getData();\n          $this->method = $request->getMethod();\n          $this->cookies = $request->getCookies();\n          $this->setTransport();\n        }\n        $this->processHeaders($contentType);\n        if ($status) {\n          $this->setStatus($status);\n        }\n      }\n      protected function processHeaders($contentType)\n      {\n        if (!$contentType) {\n          $this->setHeaderByKey(self::HEADER_CONTENT_TYPE, \n            self::CONTENT_TYPE_JSON);\n        } else {\n          $this->setHeaderByKey(self::HEADER_CONTENT_TYPE, \n            $contentType);\n        }\n      }\n      public function setStatus($status)\n      {\n        $this->status = $status;\n      }\n      public function getStatus()\n      {\n        return $this->status;\n      }\n    }\n    ```", "```php\n    use Application\\Web\\ { Request,Response,Received }\n    ```", "```php\n    namespace Application\\Web\\Rest;\n    use Application\\Web\\ { Request, Response, Received };\n    class Server\n    {\n      protected $api;\n      public function __construct(ApiInterface $api)\n      {\n        $this->api = $api;\n      }\n    ```", "```php\n    $jsonData = json_decode(file_get_contents('php://input'),true);\n    ```", "```php\n    public function listen()\n    {\n      $request  = new Request();\n      $response = new Response($request);\n      $getPost  = $_REQUEST ?? array();\n      $jsonData = json_decode(\n        file_get_contents('php://input'),true);\n      $jsonData = $jsonData ?? array();\n      $request->setData(array_merge($getPost,$jsonData));\n    ```", "```php\n    if (!$this->api->authenticate($request)) {\n        $response->setStatus(Request::STATUS_401);\n        echo $this->api::ERROR;\n        exit;\n    }\n    ```", "```php\n    $id = $request->getData()[$this->api::ID_FIELD] ?? NULL;\n    switch (strtoupper($request->getMethod())) {\n      case Request::METHOD_POST :\n        $this->api->post($request, $response);\n        break;\n      case Request::METHOD_PUT :\n        $this->api->put($request, $response);\n        break;\n      case Request::METHOD_DELETE :\n        $this->api->delete($request, $response);\n        break;\n      case Request::METHOD_GET :\n      default :\n        // return all if no params\n      $this->api->get($request, $response);\n    }\n    ```", "```php\n      $this->processResponse($response);\n      echo json_encode($response->getData());\n    }\n    ```", "```php\n    protected function processResponse($response)\n    {\n      if ($response->getHeaders()) {\n        foreach ($response->getHeaders() as $key => $value) {\n          header($key . ': ' . $value, TRUE, \n                 $response->getStatus());\n        }\n      }        \n      header(Request::HEADER_CONTENT_TYPE \n      . ': ' . Request::CONTENT_TYPE_JSON, TRUE);\n      if ($response->getCookies()) {\n        foreach ($response->getCookies() as $key => $value) {\n          setcookie($key, $value);\n        }\n      }\n    }\n    ```", "```php\n    namespace Application\\Web\\Rest;\n    use Application\\Web\\ { Request, Response };\n    abstract class AbstractApi implements ApiInterface\n    {\n      const TOKEN_BYTE_SIZE  = 16;\n      protected $registeredKeys;\n      abstract public function get(Request $request, \n                                   Response $response);\n      abstract public function put(Request $request, \n                                   Response $response);\n      abstract public function post(Request $request, \n                                    Response $response);\n      abstract public function delete(Request $request, \n                                      Response $response);\n      abstract public function authenticate(Request $request);\n      public function __construct($registeredKeys, $tokenField)\n      {\n        $this->registeredKeys = $registeredKeys;\n      }\n      public static function generateToken()\n      {\n        return bin2hex(random_bytes(self::TOKEN_BYTE_SIZE));    \n      }\n    }\n    ```", "```php\n    namespace Application\\Web\\Rest;\n    use Application\\Web\\ { Request, Response };\n    interface ApiInterface\n    {\n      public function get(Request $request, Response $response);\n      public function put(Request $request, Response $response);\n      public function post(Request $request, Response $response);\n      public function delete(Request $request, Response $response);\n      public function authenticate(Request $request);\n    }\n    ```", "```php\n    namespace Application\\Web\\Rest;\n    use Application\\Web\\ { Request, Response, Received };\n    use Application\\Entity\\Customer;\n    use Application\\Database\\ { Connection, CustomerService };\n\n    class CustomerApi extends AbstractApi\n    {\n      const ERROR = 'ERROR';\n      const ERROR_NOT_FOUND = 'ERROR: Not Found';\n      const SUCCESS_UPDATE = 'SUCCESS: update succeeded';\n      const SUCCESS_DELETE = 'SUCCESS: delete succeeded';\n      const ID_FIELD = 'id';      // field name of primary key\n      const TOKEN_FIELD = 'token';  // field used for authentication\n      const LIMIT_FIELD = 'limit';\n      const OFFSET_FIELD = 'offset';\n      const DEFAULT_LIMIT = 20;\n      const DEFAULT_OFFSET = 0;\n\n      protected $service;\n\n      public function __construct($registeredKeys, \n                                  $dbparams, $tokenField = NULL)\n      {\n        parent::__construct($registeredKeys, $tokenField);\n        $this->service = new CustomerService(\n          new Connection($dbparams));\n      }\n    ```", "```php\n    public function get(Request $request, Response $response)\n    {\n      $result = array();\n      $id = $request->getDataByKey(self::ID_FIELD) ?? 0;\n      if ($id > 0) {\n          $result = $this->service->\n            fetchById($id)->entityToArray();  \n      } else {\n        $limit  = $request->getDataByKey(self::LIMIT_FIELD) \n          ?? self::DEFAULT_LIMIT;\n        $offset = $request->getDataByKey(self::OFFSET_FIELD) \n          ?? self::DEFAULT_OFFSET;\n        $result = [];\n        $fetch = $this->service->fetchAll($limit, $offset);\n        foreach ($fetch as $row) {\n          $result[] = $row;\n        }\n      }\n      if ($result) {\n          $response->setData($result);\n          $response->setStatus(Request::STATUS_200);\n      } else {\n          $response->setData([self::ERROR_NOT_FOUND]);\n          $response->setStatus(Request::STATUS_500);\n      }\n    }\n    ```", "```php\n    public function put(Request $request, Response $response)\n    {\n      $cust = Customer::arrayToEntity($request->getData(), \n                                      new Customer());\n      if ($newCust = $this->service->save($cust)) {\n          $response->setData(['success' => self::SUCCESS_UPDATE, \n                              'id' => $newCust->getId()]);\n          $response->setStatus(Request::STATUS_200);\n      } else {\n          $response->setData([self::ERROR]);\n          $response->setStatus(Request::STATUS_500);\n      }      \n    }\n    ```", "```php\n    public function post(Request $request, Response $response)\n    {\n      $id = $request->getDataByKey(self::ID_FIELD) ?? 0;\n      $reqData = $request->getData();\n      $custData = $this->service->\n        fetchById($id)->entityToArray();\n      $updateData = array_merge($custData, $reqData);\n      $updateCust = Customer::arrayToEntity($updateData, \n      new Customer());\n      if ($this->service->save($updateCust)) {\n          $response->setData(['success' => self::SUCCESS_UPDATE, \n                              'id' => $updateCust->getId()]);\n          $response->setStatus(Request::STATUS_200);\n      } else {\n          $response->setData([self::ERROR]);\n          $response->setStatus(Request::STATUS_500);\n      }      \n    }\n    ```", "```php\n    public function delete(Request $request, Response $response)\n    {\n      $id = $request->getDataByKey(self::ID_FIELD) ?? 0;\n      $cust = $this->service->fetchById($id);\n      if ($cust && $this->service->remove($cust)) {\n          $response->setData(['success' => self::SUCCESS_DELETE, \n                              'id' => $id]);\n          $response->setStatus(Request::STATUS_200);\n      } else {\n          $response->setData([self::ERROR_NOT_FOUND]);\n          $response->setStatus(Request::STATUS_500);\n      }\n    }\n    ```", "```php\n    public function authenticate(Request $request)\n    {\n      $authToken = $request->getDataByKey(self::TOKEN_FIELD) \n        ?? FALSE;\n      if (in_array($authToken, $this->registeredKeys, TRUE)) {\n          return TRUE;\n      } else {\n          return FALSE;\n      }\n    }\n    }\n    ```", "```php\n<?php\n$dbParams = include __DIR__ .  '/../../config/db.config.php';\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Web\\Rest\\Server;\nuse Application\\Web\\Rest\\CustomerApi;\n$apiKey = include __DIR__ . '/api_key.php';\n$server = new Server(new CustomerApi([$apiKey], $dbParams, 'id'));\n$server->listen();\n```", "```php\n**php -S localhost:8080 chap_07_simple_rest_server.php** \n\n```", "```php\n<?php return '79e9b5211bbf2458a4085707ea378129';\n```", "```php\n    $wsdl = 'http://graphical.weather.gov/xml/SOAP_server/'\n      . 'ndfdXMLserver.php?wsdl';\n    ```", "```php\n    $soap = new SoapClient($wsdl, array('trace' => TRUE));\n    ```", "```php\n    $units = 'm';\n    $params = '';\n    $numDays = 7;\n    $weather = '';\n    $format = '24 hourly';\n    $startTime = new DateTime();\n    ```", "```php\n    $xml = new SimpleXMLElement($soap->LatLonListCityNames(1));\n    ```", "```php\n    $cityNames = explode('|', $xml->cityNameList);\n    $latLonCity = explode(' ', $xml->latLonList);\n    $cityLatLon = array_combine($latLonCity, $cityNames);\n    asort($cityLatLon);\n    ```", "```php\n    $currentLatLon = (isset($_GET['city'])) ? strip_tags(urldecode($_GET['city'])) : '';\n    ```", "```php\n    <message name=\"NDFDgenByDayRequest\">\n    <part name=\"latitude\" type=\"xsd:decimal\"/>\n    <part name=\"longitude\" type=\"xsd:decimal\"/>\n    <part name=\"startDate\" type=\"xsd:date\"/>\n    <part name=\"numDays\" type=\"xsd:integer\"/>\n    <part name=\"Unit\" type=\"xsd:string\"/>\n    <part name=\"format\" type=\"xsd:string\"/>\n    </message>\n    ```", "```php\n    if ($currentLatLon) {\n      list($lat, $lon) = explode(',', $currentLatLon);\n      try {\n          $weather = $soap->NDFDgenByDay($lat,$lon,\n            $startTime->format('Y-m-d'),$numDays,$unit,$format);\n      } catch (Exception $e) {\n          $weather .= PHP_EOL;\n          $weather .= 'Latitude: ' . $lat . ' | Longitude: ' . $lon;\n          $weather .= 'ERROR' . PHP_EOL;\n          $weather .= $e->getMessage() . PHP_EOL;\n          $weather .= $soap->__getLastResponse() . PHP_EOL;\n      }\n    }\n    ?>\n    ```", "```php\n<form method=\"get\" name=\"forecast\">\n<br> City List: \n<select name=\"city\">\n<?php foreach ($cityLatLon as $latLon => $city) : ?>\n<?php $select = ($currentLatLon == $latLon) ? ' selected' : ''; ?>\n<option value=\"<?= urlencode($latLon) ?>\" <?= $select ?>>\n<?= $city ?></option>\n<?php endforeach; ?>\n</select>\n<br><input type=\"submit\" value=\"OK\"></td>\n</form>\n<pre>\n<?php var_dump($weather); ?>\n</pre>\n```", "```php\n    namespace Application\\Web\\Soap;\n    use PDO;\n    class ProspectsApi\n    {\n      protected $registerKeys;\n      protected $pdo;\n\n      public function __construct($pdo, $registeredKeys)\n      {\n        $this->pdo = $pdo;\n        $this->registeredKeys = $registeredKeys;\n      }\n    }\n    ```", "```php\n    public function get(array $request, array $response)\n    {\n      if (!$this->authenticate($request)) return FALSE;\n      $result = array();\n      $id = $request[self::ID_FIELD] ?? 0;\n      $email = $request[self::EMAIL_FIELD] ?? 0;\n      if ($id > 0) {\n          $result = $this->fetchById($id);  \n          $response[self::ID_FIELD] = $id;\n      } elseif ($email) {\n          $result = $this->fetchByEmail($email);\n          $response[self::ID_FIELD] = $result[self::ID_FIELD] ?? 0;\n      } else {\n          $limit = $request[self::LIMIT_FIELD] \n            ?? self::DEFAULT_LIMIT;\n          $offset = $request[self::OFFSET_FIELD] \n            ?? self::DEFAULT_OFFSET;\n          $result = [];\n          foreach ($this->fetchAll($limit, $offset) as $row) {\n            $result[] = $row;\n          }\n      }\n      $response = $this->processResponse(\n        $result, $response, self::SUCCESS, self::ERROR);\n        return $response;\n      }\n\n      protected function processResponse($result, $response, \n                                         $success_code, $error_code)\n      {\n        if ($result) {\n            $response['data'] = $result;\n            $response['code'] = $success_code;\n            $response['status'] = self::STATUS_200;\n        } else {\n            $response['data'] = FALSE;\n            $response['code'] = self::ERROR_NOT_FOUND;\n            $response['status'] = self::STATUS_500;\n        }\n        return $response;\n      }\n    ```", "```php\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <wsdl:definitions  targetNamespace=\"php7cookbook\"    >\n      <wsdl:message name=\"getSoapIn\">\n        <wsdl:part name=\"request\" type=\"tns:array\" />\n        <wsdl:part name=\"response\" type=\"tns:array\" />\n      </wsdl:message>\n      <wsdl:message name=\"getSoapOut\">\n        <wsdl:part name=\"return\" type=\"tns:array\" />\n      </wsdl:message>\n      <!\u2014some nodes removed to conserve space -->\n      <wsdl:portType name=\"CustomerApiSoap\">\n      <!\u2014some nodes removed to conserve space -->\n      <wsdl:binding name=\"CustomerApiSoap\" type=\"tns:CustomerApiSoap\">\n      <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\" style=\"rpc\" />\n        <wsdl:operation name=\"get\">\n          <soap:operation soapAction=\"php7cookbook#get\" />\n            <wsdl:input>\n              <soap:body use=\"encoded\" encodingStyle= \"http://schemas.xmlsoap.org/soap/encoding/\" namespace=\"php7cookbook\" parts=\"request response\" />\n            </wsdl:input>\n            <wsdl:output>\n              <soap:body use=\"encoded\" encodingStyle= \"http://schemas.xmlsoap.org/soap/encoding/\" namespace=\"php7cookbook\" parts=\"return\" />\n            </wsdl:output>\n        </wsdl:operation>\n      <!\u2014some nodes removed to conserve space -->\n      </wsdl:binding>\n      <wsdl:service name=\"CustomerApi\">\n        <wsdl:port name=\"CustomerApiSoap\" binding=\"tns:CustomerApiSoap\">\n        <soap:address location=\"http://localhost:8080/\" />\n        </wsdl:port>\n      </wsdl:service>\n      </wsdl:definitions>\n    ```", "```php\n    <?php\n    define('DB_CONFIG_FILE', '/../config/db.config.php');\n    define('WSDL_FILENAME', __DIR__ . '/chap_07_wsdl.xml');\n\n    if (isset($_GET['wsdl'])) {\n        readfile(WSDL_FILENAME);\n        exit;\n    }\n    $apiKey = include __DIR__ . '/api_key.php';\n    require __DIR__ . '/../Application/Web/Soap/ProspectsApi.php';\n    require __DIR__ . '/../Application/Database/Connection.php';\n    use Application\\Database\\Connection;\n    use Application\\Web\\Soap\\ProspectsApi;\n    $connection = new Application\\Database\\Connection(\n      include __DIR__ . DB_CONFIG_FILE);\n    $api = new Application\\Web\\Soap\\ProspectsApi(\n      $connection->pdo, [$apiKey]);\n    $server = new SoapServer(WSDL_FILENAME);\n    $server->setObject($api);\n    echo $server->handle();\n    ```", "```php\n    ini_set('soap.wsdl_cache_enabled', 0);\n    ```", "```php\n    ini_set('always_populate_raw_post_data', -1);\n    ```", "```php\n**php -S localhost:8080 chap_07_simple_soap_server.php** \n\n```", "```php\n<?php\ndefine('WSDL_URL', 'http://localhost:8080?wsdl=1');\n$clientKey = include __DIR__ . '/api_key.php';\ntry {\n  $client = new SoapClient(WSDL_URL);\n  $response = [];\n  $email = some_email_generated_by_test;\n  $email = 'test5393@unlikelysource.com';\n  echo \"\\nGet Prospect Info for Email: \" . $email . \"\\n\";\n  $request = ['token' => $clientKey, 'email' => $email];\n  $result = $client->get($request,$response);\n  var_dump($result);\n\n} catch (SoapFault $e) {\n  echo 'ERROR' . PHP_EOL;\n  echo $e->getMessage() . PHP_EOL;\n} catch (Throwable $e) {\n  echo 'ERROR' . PHP_EOL;\n  echo $e->getMessage() . PHP_EOL;\n} finally {\n  echo $client->__getLastResponse() . PHP_EOL;\n}\n```"]