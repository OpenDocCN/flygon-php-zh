- en: Chapter 2. Prerequisites
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。先决条件
- en: 'Before we begin modernizing our application, we need to make sure we have the
    necessary prerequisites in place to do the work of refactoring. These are as following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始现代化我们的应用程序之前，我们需要确保我们有必要的先决条件来进行重构工作。这些先决条件如下：
- en: A revision control system
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个修订控制系统
- en: A PHP version of 5.0 or higher
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 5.0或更高版本
- en: An editor or IDE with multi-file search-and-replace
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有多文件搜索和替换功能的编辑器或集成开发环境
- en: A style guide of some sort
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某种风格指南
- en: A test suite
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个测试套件
- en: Revision control
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修订控制
- en: Revision control (also known as source control or version control) allows us
    to keep track of the prerequisites:revision control" changes we make to our codebase.
    We can make a change, then commit it to source control, make more changes and
    commit them, and push our changes to other developers on the team. If we discover
    an error, we can revert to an earlier version of the codebase to a point where
    the error does not exist and start over.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 修订控制（也称为源代码控制或版本控制）允许我们跟踪我们对代码库所做的更改。我们可以进行更改，然后提交到源代码控制，进行更多更改并提交它们，然后将我们的更改推送给团队中的其他开发人员。如果我们发现错误，我们可以恢复到代码库的早期版本，到错误不存在的地方重新开始。
- en: If you are not using a source control tool like Git, Mercurial, Subversion,
    or some other revision control system, then that's the very first thing you need
    to put in place. Using source control will be a great benefit to you, even if
    you don't modernize your PHP application at all.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用Git、Mercurial、Subversion或其他修订控制系统等源代码控制工具，那么这是你需要首先安装的。即使你不对你的PHP应用进行现代化，使用源代码控制也会对你有很大的好处。
- en: I prefer Mercurial in many ways, but I recognize that Git is more widely used,
    and as such I must recommend Git for new users of source control systems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面我更喜欢Mercurial，但我承认Git被更广泛地使用，因此我必须推荐新用户使用Git作为源代码控制系统。
- en: While it is beyond the scope of this book to discuss how to set up and use a
    source control system, there are some good Git books and Mercurial books available
    for free.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书讨论如何设置和使用源代码控制系统已经超出了范围，但有一些很好的Git书籍和Mercurial书籍可以免费获取。
- en: PHP version
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP版本
- en: In order to prerequisites:PHP 5.0" apply the refactorings listed in this book,
    we need at least PHP 5.0 installed. Yes, I know that PHP 5.0 is ancient, but we
    are talking about legacy applications here. It is entirely possible that the business
    owners have not upgraded their PHP versions in years. PHP 5.0 is the bare minimum,
    because that was when class autoloading became available, and we depend on autoloading
    as one of our very first improvements. (If for whatever reason we are stuck on
    PHP 4.x, then this book will be of little use.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应用本书中列出的重构，我们至少需要安装PHP 5.0。是的，我知道PHP 5.0已经过时了，但我们在谈论遗留应用程序。完全有可能业务所有者多年来没有升级他们的PHP版本。PHP
    5.0是最低要求，因为那时类自动加载变得可用，我们依赖自动加载作为我们的第一个改进之一。（如果由于某种原因我们被困在PHP 4.x上，那么这本书将没有什么用处。）
- en: If we can get away with it, we should upgrade to the very latest version of
    PHP. I recommend using the most-recent version of PHP available to your chosen
    operating system. At the time of the latest update to this book, the most recent
    versions were PHP 5.6.11, 5.5.27, and 5.4.43.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能的话，我们应该升级到最新版本的PHP。我建议使用你选择操作系统上最新版本的PHP。在本书的最新更新时，最新版本分别是PHP 5.6.11、5.5.27和5.4.43。
- en: 'Doing an upgrade from an older PHP version might itself entail modifying the
    application, as there are changes between minor versions in PHP. Approach this
    with care and attention to detail: check the release notes for the release and
    all intervening releases, look over the codebase, identify problems, make fixes,
    spot check locally, commit, push, and notify QA.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从旧的PHP版本升级可能本身就需要修改应用程序，因为PHP的次要版本之间存在变化。要小心和注意细节地处理这个问题：查看发布说明和所有中间版本的发布说明，检查代码库，识别问题，进行修复，本地抽查，提交，推送，并通知QA。
- en: Editor/IDE
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑器/集成开发环境
- en: 'Throughout prerequisites: editor/IDE this book, we will be doing a lot of searching
    and modifying across the legacy codebase. We will need to have a text editor or
    IDE that allows us to find and replace text in multiple files at once. These include:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将在整个遗留代码库中进行大量搜索和修改。我们需要一个文本编辑器或集成开发环境，可以让我们同时在多个文件中查找和替换文本。这些包括：
- en: Emacs
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Emacs
- en: PHPStorm
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHPStorm
- en: SublimeText
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SublimeText
- en: TextMate
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TextMate
- en: Vim
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vim
- en: Zend Studio
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zend Studio
- en: There are likely to be others as well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能还有其他的。
- en: Alternatively, if our CLI-fu is strong, we may wish to use grep and `sed` at
    the command line across multiple files at once.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们的CLI-fu很强，我们可能希望在命令行中同时跨多个文件使用grep和`sed`。
- en: Style Guide
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风格指南
- en: 'Using a consistent prerequisites:style guide" coding style throughout the codebase
    is an important consideration. Most legacy codebases that I have seen are a mishmash
    of styles preferred by the various authors over time. One example of this kind
    of mishmash is the mixing of tabs and spaces for indenting code blocks: the developers
    early in the project used 2 spaces for indents, developers in the middle of the
    project used tabs, and recent developers used 4 spaces. This had the effect of
    putting some child blocks completely out prerequisites:style guide" of line with
    their parent blocks, either too much indented or not enough, making it difficult
    to scan for the beginning or end of a block.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个代码库中使用一致的“风格指南”编码风格是一个重要的考虑因素。我见过的大多数遗留代码库都是多年来各个作者喜欢的风格混合在一起。这种混合的一个例子是混合使用制表符和空格来缩进代码块：项目初期的开发人员使用2个空格缩进，项目中期的开发人员使用制表符，最近的开发人员使用4个空格。这导致一些子块完全与其父块不一致，要么缩进太多，要么不够，使得很难扫描块的开头或结尾。
- en: We all long for a consistent, familiar coding style. There are few urges stronger
    than the urge to reformat an unfamiliar or undesired coding style to one that
    is more preferable. But modifying the existing style, no matter how ugly or inconsistent
    it is, can give rise to subtle bugs and behavioral changes from something as simple
    as adding or removing braces in a conditional. Then again, we want the code to
    be consistent and familiar so that we can read it with a minimum of cognitive
    friction.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都渴望一致、熟悉的编码风格。几乎没有比将陌生或不受欢迎的编码风格重新格式化为更可取的风格更强烈的冲动。但是修改现有的风格，无论它有多丑陋或不一致，都可能引起微妙的错误和行为变化，甚至只是在条件语句中添加或删除大括号。另一方面，我们希望代码是一致和熟悉的，以便我们可以以最少的认知摩擦来阅读它。
- en: It is tough to give good advice here. I suggest that the only reason to modify
    the existing style is when it is inconsistent within an individual file. If it
    is ugly or unfamiliar but otherwise consistent throughout the codebase, reformatting
    is likely to cause more problems than it solves.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里很难给出好的建议。我建议唯一修改现有风格的原因是当单个文件内部不一致时。如果它很丑陋或陌生，但在整个代码库中是一致的，重新格式化可能会引起更多问题。
- en: If you decide to reformat, do so only as you move bits of code from one file
    to another, or as you move files from one location to another. This combines the
    large change of extraction-and-relocation with the more subtle change of style
    modification, and makes it possible to test those changes in a single pass.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定重新格式化，请在将代码从一个文件移动到另一个文件时进行，或者在将文件从一个位置移动到另一个位置时进行。这将大规模的提取和重定位与更微妙的样式修改相结合，使得可以在单次操作中测试这些更改。
- en: Finally, you may want to convert to a completely new style, even though the
    existing one is consistent throughout the codebase. Resist that urge. If your
    desire to reformat in toto is overwhelming and cannot be ignored, use a publicly
    documented non-project-specific coding style instead of trying to create or apply
    your own personal or project-specific style. The code in this book uses the PSR-1
    and PSR-2 style recommendations as a reflection of that advice.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可能希望转换为全新的风格，即使现有的风格在整个代码库中都是一致的。抵制这种冲动。如果您对全面重构的渴望是压倒性的，无法忽视，那么请使用公开记录的非项目特定的编码风格，而不是尝试创建或应用您自己的个人或项目特定的风格。本书中的代码使用PSR-1和PSR-2风格建议来反映这一建议。
- en: Test suite
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试套件
- en: As this is a bookprerequisites:test suite" about legacy applications, it would
    be the height of optimism to expect that the codebase has a suite of unit tests.
    Most legacy applications, especially include-oriented, page-based applications,
    are highly resistant to unit tests. There are no units to test, only a spaghetti
    mess of tightly coupled functionality.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一本关于遗留应用的书，期望代码库有一套单元测试套件是非常乐观的。大多数遗留应用程序，特别是包含导向、基于页面的应用程序，都对单元测试非常抵抗。没有要测试的单元，只有紧密耦合的功能的一团乱麻。
- en: And yet it is possible to test a legacy application. The key here is not to
    test what the system units ought to do, but what the system as a whole already
    does. The criteria for a successful test is that the system generates the same
    output after a change as it did before that change. This kind of test is called
    a *characterization test*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，测试遗留应用是可能的。关键在于不是测试系统单元应该做什么，而是测试系统作为一个整体已经做了什么。成功测试的标准是系统在更改后生成与更改前相同的输出。这种测试称为*表征测试*。
- en: It is not in the scope of this book to discuss how to write a characterization
    test suite. There are some good tools out there already for writing these kinds
    of tests, such as Selenium and Codeception. Having tests of this sort before we
    go about refactoring the codebase is invaluable. We will be able to run the tests
    after each change to make sure the application still operates properly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的范围不包括讨论如何编写表征测试套件。已经有一些很好的工具可以编写这些测试，例如Selenium和Codeception。在我们开始重构代码库之前进行这种测试是非常宝贵的。我们将能够在每次更改后运行测试，以确保应用程序仍然正常运行。
- en: I will not pretend prerequisites:test suite" that we are likely to spend the
    time writing these kinds of tests. If we were interested in testing to begin with,
    we would have a test suite of some sort already. The issue here is a very human
    one, not of doing the right thing for its own sake or even of rational expectations
    but of incentives based on rewards. The reward for writing tests is a longer-term
    one, whereas making an improvement to the codebase right now feels immediately
    rewarding, even if we have to suffer with manual checking of the application output.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会假装先决条件：测试套件"我们可能会花时间编写这些测试。如果我们一开始就对测试感兴趣，我们可能已经有某种测试套件了。这里的问题是一个非常人性化的问题，不是为了做正确的事情或甚至是理性期望，而是基于奖励的激励。编写测试的奖励是长期的，而立即对代码库进行改进的奖励感觉立即得到回报，即使我们必须忍受手动检查应用程序输出。
- en: If you have the time, the self-discipline, and the resources, the best option
    is to create a series of characterization tests for the parts of the application
    you know you will be refactoring. It is the most responsible and most professional
    approach. As a second-best option, if you have a QA team that already has a series
    of application-wide tests in place, you can delegate the testing process to them
    since they are doing it anyway. Perhaps they will show you how to run the test
    suite locally as you make changes to the codebase. Finally, as the least-professional
    but most-likely option, you will have to pseudo-test or spot check the application
    by hand when you make changes. This is probably what you are used to doing anyway.
    As your codebase improves, the reward for improving your own practices will become
    more evident; as with refactoring in general, the goal is to make things better
    than they were before in small increments, not to insist on immediate perfection.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有时间、自律和资源，最好的选择是为你知道你将要重构的应用程序部分创建一系列的特性测试。这是最负责任和最专业的方法。作为第二选择，如果你有一个QA团队，他们已经有一系列应用程序范围的测试，你可以委托测试过程给他们，因为他们已经在做了。也许他们会在你对代码库进行更改时向你展示如何在本地运行测试套件。最后，作为最不专业但最有可能的选择，当你进行更改时，你将不得不通过手工伪测试或抽查应用程序。这可能是你已经习惯做的事情。随着你的代码库的改进，改进自己的实践的回报将变得更加明显；就像重构一般，目标是通过小的增量使事情变得比以前更好，而不是坚持立即完美。
- en: Review and next steps
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: 'At this point we should have all our prerequisites in place, especially our
    revision control system and a modern version of PHP. Now we can begin with our
    very first step in refactoring: adding an autoloader to the codebase.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该已经准备好所有的先决条件，特别是我们的修订控制系统和一个现代版本的PHP。现在我们可以开始我们的重构的第一步：向代码库添加一个自动加载器。
