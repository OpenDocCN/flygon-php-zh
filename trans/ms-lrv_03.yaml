- en: Chapter 3. Building Services, Commands, and Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。构建服务、命令和事件
- en: In the first two chapters, we set up the basic structure of our accommodation
    reservation system. We designed our classes, created our database schema, and
    learned how to test them. Now we need to translate the business requirements into
    code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两章中，我们建立了我们的住宿预订系统的基本结构。我们设计了我们的类，创建了我们的数据库模式，并学会了如何测试它们。现在我们需要将业务需求转化为代码。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Commands
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令
- en: Events
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件
- en: Command handlers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令处理程序
- en: Event handlers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理程序
- en: Queued event handlers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排队的事件处理程序
- en: Queued commands
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排队的命令
- en: Console commands
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台命令
- en: The command scheduler
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令调度程序
- en: Request routing
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求路由
- en: As mentioned earlier, Laravel 5 has adopted the *command bus pattern*. Laravel
    4 viewed commands as something to be executed from the command line, whereas in
    Laravel 5, a command can be used in any context, allowing excellent reuse of code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Laravel 5采用了*命令总线模式*。Laravel 4将命令视为从命令行执行的内容，而在Laravel 5中，命令可以在任何上下文中使用，从而实现代码的优秀重用。
- en: 'The following is an example of the Laravel 4 HTTP request flow:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Laravel 4的HTTP请求流程示例：
- en: '![Request routing](graphics/B04559_03_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![请求路由](graphics/B04559_03_01.jpg)'
- en: 'Here is an example of the Laravel 5 HTTP request flow:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Laravel 5的HTTP请求流程示例：
- en: '![Request routing](graphics/B04559_03_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![请求路由](graphics/B04559_03_02.jpg)'
- en: The first image illustrates the Laravel 4 request flow. The request via HTTP
    was handled by the router, and then sent to the controller, where generally, we
    could then talk to either the repository or directory of the model. In Laravel
    5, this is still possible; however, as shown in the second image, we can see that
    the ability to add additional blocks, layers, or modules allows us to separate
    the life cycle of the request into individual isolated pieces. Laravel 4 allowed
    us to put all of our code to handle the request inside the controller, while in
    Laravel 5, we are free to do the same, although now we are also able to easily
    separate the request into various pieces. Some of these concepts are derived from
    **Domain-driven Design** (**DDD**).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一张图片说明了Laravel 4的请求流程。通过HTTP的请求由路由处理，然后发送到控制器，通常情况下，我们可以与存储库或模型的目录进行交互。在Laravel
    5中，这仍然是可能的；然而，正如第二张图片所示，我们可以看到添加额外的块、层或模块的能力使我们能够将请求的生命周期分离成单独的部分。Laravel 4允许我们将处理请求的所有代码放在控制器内，而在Laravel
    5中，我们可以自由地做同样的事情，尽管现在我们也能够轻松地将请求分离成各种部分。其中一些概念源自**领域驱动设计**（**DDD**）。
- en: 'Inside the controller, the command is instantiated using the **Data Transfer
    Object** (**DTO**) paradigm. Then, the command is sent to the command bus, where
    it is handled by a handler class, which has two methods: `__construct()` and `handle()`.
    Inside the handler, we fire or instantiate an event. The event is likewise handled
    in the same way by an event handler method with two methods: `__construct()` and
    `handle()`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器内，使用**数据传输对象**（**DTO**）范例实例化命令。然后，命令被发送到命令总线，在那里由处理程序类处理，该类有两个方法：`__construct()`和`handle()`。在处理程序内部，我们触发或实例化一个事件。同样，事件也由事件处理程序方法处理，该方法有两个方法：`__construct()`和`handle()`。
- en: 'The directory structure is very clean and looks like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 目录结构非常清晰，如下所示：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It's rather self-explanatory; the commands and events are in their respective
    directories, while the handlers for each have their own directories.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当直观；命令和事件分别在它们各自的目录中，而每个处理程序都有自己的目录。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Laravel 5.1 has changed the name of the `app/Commands` directory to `app/Jobs`
    to ensure that programmers do not get the concepts of the command bus and console
    commands mixed up.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5.1已将`app/Commands`目录的名称更改为`app/Jobs`，以确保程序员不会混淆命令总线和控制台命令的概念。
- en: User stories
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户故事
- en: 'The idea for the command component can easily derive from a user story or a
    task required by a user to achieve a goal. The most simple example would be to
    search for a room:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 命令组件的想法可以很容易地从用户故事或用户为实现目标而需要的任务中得出。最简单的例子是搜索一个房间：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: User stories, deriving from the agile methodology, guarantee that the code written
    closely matches the business requirement. They often follow the pattern "As a…
    I want to… so that...". This defines the `actor`, the `intent`, and the `benefit`.
    It helps us plan how each task will be converted into code. In our example, the
    user stories can transform into tasks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 源自敏捷方法论的用户故事保证编写的代码与业务需求紧密匹配。它们通常遵循“作为…我想要…以便…”的模式。这定义了`角色`、`意图`和`利益`。它帮助我们计划如何将每个任务转换为代码。在我们的例子中，用户故事可以转化为任务。
- en: 'As a hotel website user, I would create a list of the following tasks:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作为酒店网站用户，我会创建以下任务列表：
- en: As a hotel website user, I want to search for a room so that I can select a
    room from a list of results.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为酒店网站用户，我希望搜索房间，以便我可以从结果列表中选择一个房间。
- en: As a hotel website user, I want to reserve a room so that I can stay at the
    hotel.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为酒店网站用户，我希望预订一个房间，以便我可以住在酒店里。
- en: As a hotel website user, I want to receive an e-mail with the reservation details
    so that I can have a copy of the reservation.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为酒店网站用户，我希望收到包含预订详情的电子邮件，以便我可以拥有预订的副本。
- en: As a hotel website user, I want to be on a waiting list so that I can reserve
    a room when one becomes available.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为酒店网站用户，我希望在等候名单上，以便我可以在有房间可用时预订一个房间。
- en: As a hotel website user, I want to get notified of the room availability so
    that I can reserve a room.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为酒店网站用户，我希望收到房间的可用性通知，以便我可以预订房间。
- en: User stories to code
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户故事转换为代码
- en: The first task, searching for a room, would most likely be a RESTful call from
    a user or from an external service, so this task would be exposed to our controllers
    and thus, to our RESTful API.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索房间的第一个任务很可能是来自用户或外部服务的RESTful调用，因此这个任务会暴露给我们的控制器，从而暴露给我们的RESTful API。
- en: The second task, reserving a room, is a similar action initiated by the user
    or the other service. This task may require the user to be logged in.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个任务，预订房间，是由用户或其他服务发起的类似操作。这个任务可能需要用户登录。
- en: 'The third task could depend on the second task. This task requires an interaction
    with another process that sends the user a confirmation e-mail with the details
    of the booking. We can also write this as: *As a hotel website, I want to send
    an e-mail with the reservation details, so that he or she may have a copy of the
    reservation*.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个任务可能取决于第二个任务。这个任务需要与另一个过程进行交互，向用户发送包含预订详情的确认电子邮件。我们也可以这样写：*作为酒店网站，我想发送一封带有预订详情的电子邮件，以便他或她可以拥有预订的副本*。
- en: 'The fourth task, getting placed on the waiting list, could be a command that
    is executed after the request to reserve a room is launched; in the case of another
    user reserving the room at the same time. It would most likely be called from
    the application itself, not the user, since the user has no knowledge of the real-time
    accommodation inventory. This could help us handle a race condition. Also, we
    should assume that when the website user is deciding which room to reserve, there
    is no locking mechanism on that room that would guarantee the availability. We
    could also write this as: *As a hotel website, I want to put a user on the waiting
    list so that they can be notified when a room is available*.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个任务，加入等待列表，可能是在发出预订房间请求后执行的命令；如果另一个用户同时预订了房间。它很可能是从应用程序本身而不是用户那里调用的，因为用户对实时住宿库存没有了解。这可以帮助我们处理竞争条件。此外，我们应该假设当网站用户决定预订哪个房间时，该房间没有锁定机制来保证可用性。我们也可以这样写：*作为酒店网站，我想将用户放在等待列表中，以便在房间可用时通知他们*。
- en: 'For the fifth task, as the user is put on a waiting list, the user could also
    be notified of the room as it becomes available. This action checks for the availability
    of the rooms, and then checks for any users on the waiting list. The user story
    can be rewritten as follows: *As a hotel website, I want to notify a waiting list
    user of the availability of the rooms so that he or she may reserve a room*. If
    a room becomes available, the first user on the waiting list will be notified
    of the availability via an e-mail. This command would be executed frequently,
    as if it is a cron job. Luckily, Laravel 5 has a new mechanism to allow commands
    to be executed at a given frequency.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第五个任务，当用户被放在等待列表上时，用户也可以在房间可用时收到通知。此操作检查房间的可用性，然后检查等待列表上的任何用户。用户故事可以重写如下：*作为酒店网站，我想通知等待列表用户房间的可用性，以便他或她可以预订房间*。如果房间变得可用，等待列表上的第一个用户将通过电子邮件收到可用性通知。这个命令将经常执行，就像是一个定时任务。幸运的是，Laravel
    5有一种新的机制，允许命令以给定的频率执行。
- en: It becomes apparent that if the user story has to be written with both using
    the website as the actor ("As a hotel website...") or the website user as the
    actor ("As a hotel website user..."), a command is useful and can be launched
    either from the RESTful API (user side) or from within the Laravel application
    itself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，如果用户故事必须以使用网站作为行动者（“作为酒店网站...”）或网站用户作为行动者（“作为酒店网站用户...”）来编写，命令是有用的，并且可以从RESTful
    API（用户端）或Laravel应用程序内部启动。
- en: Since our first task most likely involves an external service, we will create
    a route and also a controller to handle the request.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的第一个任务很可能涉及外部服务，我们将创建一个路由和一个控制器来处理请求。
- en: The controller
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: The first step involves the creation of a route, and the second step involves
    the creation of a controller.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步涉及创建一个路由，第二步涉及创建一个控制器。
- en: Searching for the room
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索房间
- en: 'First, let''s create a route in the `routes.php` file and map it to the `controller`
    method as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`routes.php`文件中创建一个路由，并将其映射到`controller`方法，如下所示：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The request parameters, such as the start/end dates and location details will
    be as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请求参数，如开始/结束日期和位置详情将如下所示：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The search parameters will be sent as JSON-encoded objects. They will be sent
    as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索参数将以JSON编码的对象形式发送。它们将发送如下：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let''s add a `search` method to our `room` controller to handle the JSON
    input in the case of a request that comes in as an object, as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在我们的`room`控制器中添加一个`search`方法，以处理以对象形式输入的JSON请求，如下所示：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The request facade handles the input variable query, and then decodes its JSON
    structure into an object.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请求外观处理输入变量查询，然后将其JSON结构解码为对象。
- en: In [Chapter 4](ch04.html "Chapter 4. Creating RESTful APIs"), *Creating RESTful
    APIs*, we will complete the code for the `search` method, but for now, we will
    simply create the architecture of this part of our RESTful API system.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。创建RESTful API")中，*创建RESTful API*，我们将完成`search`方法的代码，但现在，我们将简单地创建我们的RESTful
    API系统的这一部分的架构。
- en: Controller to command
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器转命令
- en: For the second task, reserving the room, we'll create a command as we'll most
    likely need a follow up action, which we will enable via the publisher subscriber
    pattern. The publisher subscriber pattern is used to represent *publishers* that
    send messages and *subscribers* that listen to these messages.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个任务，预订房间，我们将创建一个命令，因为我们很可能需要后续操作，我们将通过发布者订阅者模式启用。发布者订阅者模式用于表示发送消息的*发布者*和监听这些消息的*订阅者*。
- en: 'Add the route to `routes.php` as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下路由添加到`routes.php`中：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We map the post to the room controller''s `store` method; this will create
    the reservation. Remember that we created the command like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将post映射到room控制器的`store`方法；这将创建预订。记住我们创建了这样的命令：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our `ReserveRoomCommand` class looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`ReserveRoomCommand`类如下所示：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need to add the following attributes to the constructor:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将以下属性添加到构造函数中：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Also, add the following assignments to the constructor:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将以下赋值添加到构造函数中：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This allows us to carry the values through.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够传递值。
- en: Command to event
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令转事件
- en: 'Now let''s create an event. Use `artisan` to create an event, `RoomWasReserved`,
    which is to be fired when the room gets created:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个事件。使用`artisan`创建一个事件`RoomWasReserved`，当房间被创建时触发：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `RoomWasReserved` event class looks like the following code snippet:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`RoomWasReserved`事件类看起来像以下代码片段：'
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We'll tell it to use the `MyCompany\Accommodation\Reservation` and `MyCompany\User`
    entities so that we can pass them to the constructor. Inside the constructor,
    we assign them to entities within the `event` object.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将告诉它使用`MyCompany\Accommodation\Reservation`和`MyCompany\User`实体，以便我们可以将它们传递给构造函数。在构造函数内部，我们将它们分配给`event`对象内的实体。
- en: 'Now, let''s fire the event from inside the command handler. Laravel provides
    you with a simple `event()` method as a convenience/helper method that will fire
    an event. We''ll inject the `RoomWasReserved` event with the instantiated reservation
    and `user` as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从命令处理程序内部触发事件。Laravel为您提供了一个简单的`event()`方法作为一个方便/辅助方法，它将触发一个事件。我们将实例化的预订和`user`注入`RoomWasReserved`事件如下：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The ReserveRoomCommandHandler class
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`ReserveRoomCommandHandler`类'
- en: 'Our `ReserveRoomCommandHandler` class now instantiates a new reservation, uses
    the `createNew` factory method to inject the dependencies, and finally, fires
    the `RoomWasReserved` event as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`ReserveRoomCommandHandler`类现在实例化一个新的预订，使用`createNew`工厂方法来注入依赖项，最后，触发`RoomWasReserved`事件如下：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Event to handler
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件到处理程序
- en: 'Now, we need to create the event handler. As you would have expected, the Artisan
    provides a convenient way of doing this, although the syntax is a bit different.
    This time, strangely, the word *make* doesn''t appear in the phrase:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建事件处理程序。正如您所期望的那样，Artisan提供了一个方便的方法来做到这一点，尽管语法有点不同。这一次，奇怪的是，*make*这个词没有出现在短语中：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we need to connect the event to its listener. We will edit the `app/Providers/EventServiceProvider.php`
    file as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将事件连接到其监听器。我们将编辑`app/Providers/EventServiceProvider.php`文件如下：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As shown in the preceding code snippet, we will add the key-value pair to the
    `$listen` array. The full path, as shown, is needed for the key, the event name,
    and the array of handlers. In this case, we only have one handler.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码片段所示，我们将向`$listen`数组添加键值对。如所示，需要完整路径作为键，事件名称和处理程序数组。在这种情况下，我们只有一个处理程序。
- en: Queued event handlers
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排队的事件处理程序
- en: 'If we would like to not have the event handled immediately, but rather, put
    into the queue, we can add `–queued` to the create command as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不希望事件立即处理，而是放入队列中，我们可以在创建命令中添加`-queued`如下：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This interface tells Laravel that the event handler should be queued and not
    executed synchronously:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个接口告诉Laravel事件处理程序应该被排队，而不是同步执行：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This trait allows us to interact with the queue to be able to do tasks, such
    as delete the job.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个trait允许我们与队列交互，以便执行任务，比如删除任务。
- en: The waiting list command
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等待列表命令
- en: 'For the fourth task, being placed on a waiting list, we''ll need to create
    another command that would be called from inside the reservation controller. Once
    again, using Artisan, we can easily create the command and its corresponding event
    as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第四个任务，被放置在等待列表中，我们需要创建另一个命令，该命令将从预订控制器内部调用。再次使用Artisan，我们可以轻松地创建命令及其相应的事件如下：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, in our reservation controller, we would add the check for `roomAvailability`
    and then dispatch the `PlaceOnWaitinglist` command as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们的预订控制器中，我们将添加`roomAvailability`的检查，然后按以下方式分派`PlaceOnWaitinglist`命令：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The queued commands
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排队的命令
- en: 'We can easily queue the commands by adding `queued` to the `create` command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`create`命令中添加`queued`，我们可以轻松地将命令加入队列：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will use whichever queuing system is available, such as beanstalkd, and
    not immediately run the command. Instead, it will be placed in the queue and run
    later. We''ll need to add an interface to the `Command` class:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用可用的任何队列系统，比如beanstalkd，并不会立即运行命令。相反，它将被放置在队列中，并稍后运行。我们需要为`Command`类添加一个接口：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In this case, the `ReserveRoomCommand` class will look like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`ReserveRoomCommand`类将如下所示：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, we can see that the `InteractsWithQueue` and `ShouldBeQueued` classes
    have been included, and the `ReserveRoomCommand` class extends the command and
    implements the `ShouldBeQueued` class. Another interesting feature is `SerializesModels`.
    This will serialize any models, which are passed in, to be available later.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`InteractsWithQueue`和`ShouldBeQueued`类已经被包含，`ReserveRoomCommand`类扩展了命令并实现了`ShouldBeQueued`类。另一个有趣的特性是`SerializesModels`。这将序列化传递的任何模型，以便稍后使用。
- en: The console command
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制台命令
- en: 'For the fifth task, let''s create a `console` command, which will be executed
    very often:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第五个任务，让我们创建一个`console`命令，这个命令将经常被执行：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will create a command that can be executed from the Artisan command-line
    tool. If you have used Laravel 4, you may be familiar with this type of command.
    These commands are stored in the `Console/Commands/` directory.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个可以从Artisan命令行工具执行的命令。如果您使用过Laravel 4，您可能对这种类型的命令很熟悉。这些命令存储在`Console/Commands/`目录中。
- en: 'To let Laravel know about it, we will need to add it to `app/Console/Kernel.php`
    in the `$commands` array:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Laravel知道这一点，我们需要将它添加到`app/Console/Kernel.php`中的`$commands`数组中：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The contents will look like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 内容如下：
- en: '[PRE27]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `$name` attribute is what will be called from Artisan. For example, if
    we set the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`$name`属性是从Artisan调用的名称。例如，如果我们设置如下：'
- en: '[PRE28]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, by running the following command, we can manage the waiting list:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过运行以下命令，我们可以管理等待列表：
- en: '[PRE29]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `getArguments()` and `getOptions()` methods are similar methods with the
    same signature, but have different uses.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`getArguments()`和`getOptions()`方法是具有相同签名的类似方法，但用途不同。'
- en: The `getArguments()` method specifies an array of arguments that must be used
    to launch the command. The `getOptions()` methods are specified with `–` and can
    be `optional`, `repeated`, and with the `VALUE_NONE` option, they can be simply
    used as flags.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`getArguments()`方法指定了必须用于启动命令的参数数组。`getOptions()`方法用`-`指定，并且可以是`optional`、`repeated`，并且使用`VALUE_NONE`选项，它们可以简单地用作标志。'
- en: 'We will write the command''s main code inside the `fire()` method. If we want
    to dispatch a command from within this command, we''ll add the `DispatchesCommands`
    trait to the class as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`fire()`方法中编写命令的主要代码。如果我们想要从该命令中调度一个命令，我们将在类中添加`DispatchesCommands` trait，如下所示：
- en: '[PRE30]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The command scheduler
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令调度程序
- en: Now, we will schedule this command to run every 10 minutes. Traditionally, this
    was done by creating a cron job to execute the Laravel console's command. Now,
    Laravel 5 provides a new mechanism to do this—the command scheduler.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将安排此命令每10分钟运行一次。传统上，这是通过创建一个cron作业来执行Laravel控制台命令来完成的。现在，Laravel 5提供了一个新的机制来做到这一点——命令调度程序。
- en: 'The new `artisan` command is run as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`artisan`命令的运行方式如下：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: By simply adding this command to the cron, Laravel will automatically run all
    of the commands that are in the `Kernel.php` file.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地将此命令添加到cron中，Laravel将自动运行`Kernel.php`文件中的所有命令。
- en: 'The commands need to be added to the `Schedule` function as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 命令需要添加到`Schedule`函数中，如下所示：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `inspire` command is a sample command provided by Laravel to demonstrate
    the functionality. We will simply add our command. This will call the `manage:waitinglist`
    command every 5 minutes—it couldn't be much easier than that.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`inspire`命令是Laravel提供的一个示例命令，用于演示功能。我们将简单地添加我们的命令。这将每5分钟调用`manage:waitinglist`命令——比这更简单的方式都没有了。'
- en: Now we need to modify the `crontab` file to have Artisan run the scheduler.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要修改`crontab`文件以使Artisan运行调度程序。
- en: 'The `crontab` is a file that contains commands to be run at certain times.
    To modify this file, type the following command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`crontab`是一个包含在特定时间运行的命令的文件。要修改此文件，请键入以下命令：'
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We will use `vi` or whichever the assigned editor is to modify the `cron` table.
    Adding the following line will tell `cron` to run the scheduler every minute:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`vi`或分配的编辑器来修改`cron`表。添加以下行将告诉`cron`每分钟运行调度程序：
- en: '[PRE34]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Laravel has evolved in just two short years, moving away from CodeIgniter's
    Model-View-Controller paradigm to adopt modern Domain-driven design's command
    bus and publisher subscriber event listener pattern. Whether or not to use these
    patterns will depend on the amount of separation that is desired between each
    layer. Certainly, even using a self-handling command is a start toward creating
    completely independent blocks of code, which promotes the code into a separate
    handler class, carrying the separation-of-concerns principle even further. By
    reducing the amount of code that resides inside the controller, the command becomes
    even more important.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel在短短两年内发生了变化，从CodeIgniter的模型-视图-控制器范式转变为采用现代领域驱动设计的命令总线和发布者-订阅者事件监听器模式。是否使用这些模式将取决于所需的每个层之间的分离程度。当然，即使使用自处理命令也是开始创建完全独立的代码块的一种方式，这将促使代码进入一个单独的处理程序类，进一步实现关注点分离原则。通过减少控制器内的代码量，命令变得更加重要。
- en: We have not yet even written the code for each user story to interact with the
    database, and we have only seeded and tested the database, but the structure is
    beginning to become very well designed; each class having a very meaningful name
    and being organized into a useful directory structure.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至还没有为每个用户故事编写与数据库交互的代码，我们只是对数据库进行了种子和测试，但结构开始变得非常设计良好；每个类都有一个非常有意义的名称，并且组织成一个有用的目录结构。
- en: In the next chapter, we will fill in the details of how the RESTful controller
    will accept input from another system or from the frontend of the website, and
    then how the model's attributes will be returned to the user to create the interface.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将填写有关RESTful控制器如何接受来自另一个系统或网站前端的输入，以及模型属性如何返回给用户以创建界面的详细信息。
