["```php\n<?php \n\nabstract class Notifier \n{ \n  protected $to; \n\n  public function __construct(string $to) \n  { \n    $this->to = $to; \n  } \n\n  abstract public function validateTo(): bool; \n\n  abstract public function sendNotification(): string; \n\n} \n\n```", "```php\n<?php \n\nclass SMS extends Notifier \n{ \n  public function validateTo(): bool \n  { \n    $pattern = '/^(\\+44\\s?7\\d{3}|\\(?07\\d{3}\\)?)\\s?\\d{3}\\s?\\d{3}$/'; \n    $isPhone = preg_match($pattern, $this->to); \n\n    return $isPhone ? true : false; \n\n  } \n\n  public function sendNotification(): string \n  { \n\n    if ($this->validateTo() === false) { \n      throw new Exception(\"Invalid phone number.\"); \n    } \n\n    $notificationType = get_class($this); \n    return \"This is a \" . $notificationType . \" to \" . $this->to . \".\"; \n  } \n} \n\n```", "```php\n<?php \n\nclass Email extends Notifier \n{ \n\n  private $from; \n\n  public function __construct($to, $from) \n  { \n    parent::__construct($to); \n\n    if (isset($from)) { \n      $this->from = $from; \n    } else { \n      $this->from = \"Anonymous\"; \n    } \n  } \n\n  public function validateTo(): bool \n  { \n    $isEmail = filter_var($this->to, FILTER_VALIDATE_EMAIL); \n\n    return $isEmail ? true : false; \n\n  } \n\n  public function sendNotification(): string \n  { \n    if ($this->validateTo() === false) { \n      throw new Exception(\"Invalid email address.\"); \n    } \n\n    $notificationType = get_class($this); \n    return \"This is a \" . $notificationType . \" to \" . $this->to . \" from \" . $this->from . \".\"; \n  } \n} \n\n```", "```php\n<?php \n\nclass NotifierFactory \n{ \n  public static function getNotifier($notifier, $to) \n  { \n\n    if (empty($notifier)) { \n      throw new Exception(\"No notifier passed.\"); \n    } \n\n    switch ($notifier) { \n      case 'SMS': \n        return new SMS($to); \n        break; \n      case 'Email': \n        return new Email($to, 'Junade'); \n        break; \n      default: \n        throw new Exception(\"Notifier invalid.\"); \n        break; \n    } \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Notifier.php'); \nrequire_once('NotifierFactory.php'); \n\nrequire_once('SMS.php'); \n$mobile = NotifierFactory::getNotifier(\"SMS\", \"07111111111\"); \necho $mobile->sendNotification(); \n\nrequire_once('Email.php'); \n$email = NotifierFactory::getNotifier(\"Email\", \"test@example.com\"); \necho $email->sendNotification(); \n\n```", "```php\n<?php \n\ninterface NotifierFactory \n{ \n  public static function getNotifier($notifier, $to); \n} \n\n```", "```php\n<?php \n\nclass ElectronicNotifierFactory implements NotifierFactory \n{ \n  public static function getNotifier($notifier, $to) \n  { \n\n    if (empty($notifier)) { \n      throw new Exception(\"No notifier passed.\"); \n    } \n\n    switch ($notifier) { \n      case 'SMS': \n        return new SMS($to); \n        break; \n      case 'Email': \n        return new Email($to, 'Junade'); \n        break; \n      default: \n        throw new Exception(\"Notifier invalid.\"); \n        break; \n    } \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Notifier.php'); \nrequire_once('NotifierFactory.php'); \nrequire_once('ElectronicNotifierFactory.php'); \n\nrequire_once('SMS.php'); \n$mobile = ElectronicNotifierFactory::getNotifier(\"SMS\", \"07111111111\"); \necho $mobile->sendNotification(); \n\necho \"\\n\"; \n\nrequire_once('Email.php'); \n$email = ElectronicNotifierFactory::getNotifier(\"Email\", \"test@example.com\"); \necho $email->sendNotification(); \n\n```", "```php\nThis is a SMS to 07111111111\\. \nThis is a Email to test@example.com from Junade. \n\n```", "```php\n<?php \n\nclass Post extends Notifier \n{ \n  public function validateTo(): bool \n  { \n    $address = explode(',', $this->to); \n    if (count($address) !== 2) { \n      return false; \n    } \n\n    return true; \n  } \n\n  public function sendNotification(): string \n  { \n\n    if ($this->validateTo() === false) { \n      throw new Exception(\"Invalid address.\"); \n    } \n\n    $notificationType = get_class($this); \n    return \"This is a \" . $notificationType . \" to \" . $this->to . \".\"; \n  } \n} \n\n```", "```php\n<?php \n\nclass CourierNotifierFactory implements NotifierFactory \n{ \n  public static function getNotifier($notifier, $to) \n  { \n\n    if (empty($notifier)) { \n      throw new Exception(\"No notifier passed.\"); \n    } \n\n    switch ($notifier) { \n      case 'Post': \n        return new Post($to); \n        break; \n      default: \n        throw new Exception(\"Notifier invalid.\"); \n        break; \n    } \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Notifier.php'); \nrequire_once('NotifierFactory.php'); \nrequire_once('ElectronicNotifierFactory.php'); \n\nrequire_once('SMS.php'); \n$mobile = ElectronicNotifierFactory::getNotifier(\"SMS\", \"07111111111\"); \necho $mobile->sendNotification(); \n\necho \"\\n\"; \n\nrequire_once('Email.php'); \n$email = ElectronicNotifierFactory::getNotifier(\"Email\", \"test@example.com\"); \necho $email->sendNotification(); \n\necho \"\\n\"; \n\nrequire_once('CourierNotifierFactory.php'); \n\nrequire_once('Post.php'); \n$post = CourierNotifierFactory::getNotifier(\"Post\", \"10 Downing Street, SW1A 2AA\"); \necho $post->sendNotification(); \n\n```", "```php\n<?php \n\ninterface ToyFactory { \n  function makeMaze(); \n  function makePuzzle(); \n} \n\n```", "```php\n<?php \n\nclass SFToyFactory implements ToyFactory \n{ \n  private $location = \"San Francisco\"; \n\n  public function makeMaze() \n  { \n    return new Toys\\SFMazeToy(); \n  } \n\n  public function makePuzzle() \n  { \n    return new Toys\\SFPuzzleToy; \n  } \n} \n\n```", "```php\n<?php \n\nclass UKToyFactory implements ToyFactory \n{ \n  private $location = \"United Kingdom\"; \n\n  public function makeMaze() \n  { \n    return new Toys\\UKMazeToy; \n  } \n\n  public function makePuzzle() \n  { \n    return new Toys\\UKPuzzleToy; \n  } \n} \n\n```", "```php\n<?php \n\nnamespace Toys; \n\nabstract class Toy \n{ \n  abstract public function getSize(): int; \n  abstract public function getPictureName(): string; \n} \n\n```", "```php\n<?php \n\nnamespace Toys; \n\nabstract class MazeToy extends Toy \n{ \n  private $type = \"Maze\"; \n} \n\n```", "```php\n<?php \n\nnamespace Toys; \n\nabstract class PuzzleToy extends Toy \n{ \n  private $type = \"Puzzle\"; \n} \n\n```", "```php\n<?php \n\nnamespace Toys; \n\nclass SFMazeToy extends MazeToy \n{ \n  private $size; \n  private $pictureName; \n\n  public function __construct() \n  { \n    $this->size = 9; \n    $this->pictureName = \"San Francisco Maze\"; \n  } \n\n  public function getSize(): int \n  { \n    return $this->size; \n  } \n\n  public function getPictureName(): string \n  { \n    return $this->pictureName; \n  } \n} \n\n```", "```php\n<?php \n\nnamespace Toys; \n\nclass SFPuzzleToy extends PuzzleToy \n{ \n  private $size; \n  private $pictureName; \n\n  public function __construct() \n  { \n    $rand = rand(1, 3); \n\n    switch ($rand) { \n      case 1: \n        $this->size = 3; \n        break; \n      case 2: \n        $this->size = 6; \n        break; \n      case 3: \n        $this->size = 9; \n        break; \n    } \n\n    $this->pictureName = \"San Francisco Puzzle\"; \n  } \n\n  public \n  function getSize(): int \n  { \n    return $this->size; \n  } \n\n  public function getPictureName(): string \n  { \n    return $this->pictureName; \n  } \n} \n\n```", "```php\n<?php \n\nnamespace Toys; \n\nclass UKMazeToy extends Toy \n{ \n  private $size; \n  private $pictureName; \n\n  public function __construct() \n  { \n    $this->size = 9; \n    $this->pictureName = \"London Maze\"; \n  } \n\n  public function getSize(): int \n  { \n    return $this->size; \n  } \n\n  public function getPictureName(): string \n  { \n    return $this->pictureName; \n  } \n} \n\n```", "```php\n<?php \n\nnamespace Toys; \n\nclass UKPuzzleToy extends PuzzleToy \n{ \n  private $size; \n  private $pictureName; \n\n  public function __construct() \n  { \n    $rand = rand(1, 2); \n\n    switch ($rand) { \n      case 1: \n        $this->size = 3; \n        break; \n      case 2: \n        $this->size = 9; \n        break; \n    } \n\n    $this->pictureName = \"London Puzzle\"; \n  } \n\n  public \n  function getSize(): int \n  { \n    return $this->size; \n  } \n\n  public \n  function getPictureName(): string \n  { \n    return $this->pictureName; \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('ToyFactory.php'); \nrequire_once('Toys/Toy.php'); \nrequire_once('Toys/MazeToy.php'); \nrequire_once('Toys/PuzzleToy.php'); \n\nrequire_once('SFToyFactory.php'); \nrequire_once('Toys/SFMazeToy.php'); \nrequire_once('Toys/SFPuzzleToy.php'); \n\n$sanFraciscoFactory = new SFToyFactory(); \nvar_dump($sanFraciscoFactory->makeMaze()); \necho \"\\n\"; \nvar_dump($sanFraciscoFactory->makePuzzle()); \necho \"\\n\"; \n\nrequire_once('UKToyFactory.php'); \nrequire_once('Toys/UKMazeToy.php'); \nrequire_once('Toys/UKPuzzleToy.php'); \n\n$britishToyFactory = new UKToyFactory(); \nvar_dump($britishToyFactory->makeMaze()); \necho \"\\n\"; \nvar_dump($britishToyFactory->makePuzzle()); \necho \"\\n\"; \n\n```", "```php\n<?php \nclass Burger \n{ \n  private $cheese; \n  private $chips; \n  private $price; \n\n  public function __construct(bool $cheese, bool $chips) \n  { \n    $this->cheese = $cheese; \n    $this->chips = $chips; \n\n    $this->price = rand(1, 2.50) + ($cheese ? 0.5 : 0) + ($chips ? 1 : 0); \n  } \n\n  public function getPrice(): int \n  { \n    return $this->price; \n  } \n} \n\n```", "```php\n<?php \nclass BurgerLazyLoader \n{ \n  private static $instances = array(); \n\n  public static function getBurger(bool $cheese, bool $chips): Burger \n  { \n    if (!isset(self::$instances[$cheese . $chips])) { \n      self::$instances[$cheese . $chips] = new Burger($cheese, $chips); \n    } \n\n    return self::$instances[$cheese . $chips]; \n  } \n\n  public static function getBurgerCount(): int \n  { \n    return count(self::$instances); \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Burger.php'); \nrequire_once('BurgerLazyLoader.php'); \n\n$burger = BurgerLazyLoader::getBurger(true, true); \necho \"Burger with cheese and fries costs: \u00a3\".$burger->getPrice(); \n\necho \"\\n\"; \necho \"Instances in lazy loader: \".BurgerLazyLoader::getBurgerCount(); \necho \"\\n\"; \n\n$burger = BurgerLazyLoader::getBurger(true, false); \necho \"Burger with cheese and no fries costs: \u00a3\".$burger->getPrice(); \n\necho \"\\n\"; \necho \"Instances in lazy loader: \".BurgerLazyLoader::getBurgerCount(); \necho \"\\n\"; \n\n$burger = BurgerLazyLoader::getBurger(true, true); \necho \"Burger with cheese and fries costs: \u00a3\".$burger->getPrice(); \n\necho \"\\n\"; \necho \"Instances in lazy loader: \".BurgerLazyLoader::getBurgerCount(); \necho \"\\n\"; \n\n```", "```php\n<?php \n\nclass Pizza \n{ \n\n  private $size; \n  private $cheese; \n  private $pepperoni; \n  private $bacon; \n\n  public function __construct($size, $cheese, $pepperoni, $bacon) \n  { \n    $this->size = $size; \n    $this->cheese = $cheese; \n    $this->pepperoni = $pepperoni; \n    $this->bacon = $bacon; \n  } \n\n  public function show() \n  { \n    $recipe = $this->size . \" inch pizza with the following toppings: \"; \n    $recipe .= $this->cheese ? \"cheese, \" : \"\"; \n    $recipe .= $this->pepperoni ? \"pepperoni, \" : \"\"; \n    $recipe .= $this->bacon ? \"bacon, \" : \"\"; \n\n    return $recipe; \n  } \n\n} \n\n```", "```php\n$pizzaRecipe = (new PizzaBuilder(9)) \n  ->cheese(true) \n  ->pepperoni(true) \n  ->bacon(true) \n  ->build(); \n\n$order = new Pizza($pizzaRecipe); \n\n```", "```php\n<?php \n\nclass PizzaBuilder \n{ \n  public $size; \n  public $cheese; \n  public $pepperoni; \n  public $bacon; \n\n  public function __construct(int $size) \n  { \n    $this->size = $size; \n  } \n\n  public function cheese(bool $present): PizzaBuilder \n  { \n    $this->cheese = $present; \n    return $this; \n  } \n\n  public function pepperoni(bool $present): PizzaBuilder \n  { \n    $this->pepperoni = $present; \n    return $this; \n  } \n\n  public function bacon(bool $present): PizzaBuilder \n  { \n    $this->bacon = $present; \n    return $this; \n  } \n\n  public function build() \n  { \n    return $this; \n  } \n} \n\n```", "```php\n<?php \n\nclass Pizza \n{ \n\n  private $size; \n  private $cheese; \n  private $pepperoni; \n  private $bacon; \n\n  public function __construct(PizzaBuilder $builder) \n  { \n    $this->size = $builder->size; \n    $this->cheese = $builder->cheese; \n    $this->pepperoni = $builder->pepperoni; \n    $this->bacon = $builder->bacon; \n  } \n\n  public function show() \n  { \n    $recipe = $this->size . \" inch pizza with the following toppings: \"; \n    $recipe .= $this->cheese ? \"cheese, \" : \"\"; \n    $recipe .= $this->pepperoni ? \"pepperoni, \" : \"\"; \n    $recipe .= $this->bacon ? \"bacon, \" : \"\"; \n\n    return $recipe; \n  } \n\n} \n\n```", "```php\n<?php \n\nrequire_once('Pizza.php'); \nrequire_once('PizzaBuilder.php'); \n\n$pizzaRecipe = (new PizzaBuilder(9)) \n  ->cheese(true) \n  ->pepperoni(true) \n  ->bacon(true) \n  ->build(); \n\n$order = new Pizza($pizzaRecipe); \necho $order->show(); \n\n```", "```php\n<?php \n\nclass Student \n{ \n  public $name; \n  public $year; \n  public $grade; \n\n  public function setName(string $name) \n  { \n    $this->name = $name; \n  } \n\n  public function setYear(int $year) \n  { \n    $this->year = $year; \n  } \n\n  public function setGrade(string $grade) \n  { \n    $this->grade = $grade; \n  } \n\n} \n\n```", "```php\nrequire_once('Student.php'); \n\n```", "```php\n$prototypeStudent = new Student(); \n$prototypeStudent->setName('Dave'); \n$prototypeStudent->setYear(2); \n$prototypeStudent->setGrade('A*'); \n\nvar_dump($prototypeStudent); \n\n```", "```php\n$theLesserChild = clone $prototypeStudent; \n$theLesserChild->setName('Mike'); \n$theLesserChild->setGrade('B'); \n\nvar_dump($theLesserChild); \n\n```", "```php\n$theChildProdigy = clone $prototypeStudent; \n$theChildProdigy->setName('Bob'); \n$theChildProdigy->setYear(3); \n$theChildProdigy->setGrade('A'); \n\n```", "```php\n$theChildProdigy->danceSkills = \"Outstanding\"; \n$theChildProdigy->dance = function (string $style) { \n  return \"Dancing $style style.\"; \n}; \n\n```", "```php\nvar_dump($theChildProdigy); \nvar_dump($theChildProdigy->dance->__invoke('Pogo')); \n\n```", "```php\n<?php \n\nrequire_once('Student.php'); \n\n$prototypeStudent = new Student(); \n$prototypeStudent->setName('Dave'); \n$prototypeStudent->setYear(2); \n$prototypeStudent->setGrade('A*'); \n\nvar_dump($prototypeStudent); \n\n$theLesserChild = clone $prototypeStudent; \n$theLesserChild->setName('Mike'); \n$theLesserChild->setGrade('B'); \n\nvar_dump($theLesserChild); \n\n$theChildProdigy = clone $prototypeStudent; \n$theChildProdigy->setName('Bob'); \n$theChildProdigy->setYear(3); \n$theChildProdigy->setGrade('A'); \n\n$theChildProdigy->danceSkills = \"Outstanding\"; \n$theChildProdigy->dance = function (string $style) { \n  return \"Dancing $style style.\"; \n}; \n\nvar_dump($theChildProdigy); \nvar_dump($theChildProdigy->dance->__invoke('Pogo')); \n\n```"]