- en: Chapter 7. Filtering Requests with Middleware
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 使用中间件过滤请求
- en: In this chapter, middleware will be discussed in detail and examples from the
    accommodation software will be provided. Middleware is a great mechanism to help
    separate a software application into separate layers. To illustrate this principle,
    middleware provides layers of protection around the innermost part of the application,
    which could be thought of as the kernel.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将详细讨论中间件，并提供来自住宿软件的示例。中间件是帮助将软件应用程序分隔成不同层的重要机制。为了说明这一原则，中间件在应用程序的最内部提供了保护层，可以将其视为内核。
- en: In Laravel 4, middleware was known as filters. These filters were used in routing
    to perform actions that came before the controller like authentication, where
    the user would be filtered based on certain criteria. Also, the filters could
    come after the controller.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel 4中，中间件被称为过滤器。这些过滤器用于路由中执行在控制器之前的操作，如身份验证，用户将根据特定标准进行过滤。此外，过滤器也可以在控制器之后执行。
- en: In Laravel 5, the concept of middleware, which was already present but not prominent
    in Laravel 4, is now brought into the foreground into the actual request workflow
    and can be used in various ways. Think of it as a Russian doll, where each doll
    represents a layer in the application—having the correct credentials will allow
    us to enter deeper into the application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel 5中，中间件的概念已经存在，但在Laravel 4中并不突出，现在已经被引入到实际请求工作流中，并可以以各种方式使用。可以将其视为俄罗斯套娃，其中每个套娃代表应用程序中的一层
    - 拥有正确凭据将允许我们深入应用程序。
- en: The HTTP kernel
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP内核
- en: 'The file located at `app/Http/Kernel.php` is a file that manages the configuration
    of the kernel of the program. The basic structure is as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`app/Http/Kernel.php`的文件是管理程序内核配置的文件。基本结构如下：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `$middleware` array is a list of middleware classes and their namespace,
    and it is executed at every request. The `$routeMiddleware` array is a key and
    value array that is created as list of *aliases* that can be used together with
    routes to filter requests.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`$middleware`数组是中间件类及其命名空间的列表，并在每个请求时执行。`$routeMiddleware`数组是一个键值数组，作为*别名*列表，可与路由一起使用以过滤请求。'
- en: The basic middleware structure
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本中间件结构
- en: 'The routing middleware classes implement the `Middleware` interface:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 路由中间件类实现了`Middleware`接口：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In any class that implements this base class, there must be a `handle` method
    that accepts the `$request` as well as a `Closure`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现此基类的任何类中，必须有一个接受`$request`和`Closure`的`handle`方法。
- en: 'The basic structure of a middleware is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件的基本结构如下：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, the `CheckForMaintenanceMode` middleware does exactly as its name suggests:
    the `handle` method checks if the application is in application mode. The `isDownForMaintenance`
    method of the app is called and if it returns `true`, then a 503 HTTP exception
    will be returned and execution of the method will stop. Otherwise, the `$next`
    closure with the `$request` parameter is returned to the calling class.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`CheckForMaintenanceMode`中间件确实如其名称所示：`handle`方法检查应用程序是否处于应用模式。调用应用程序的`isDownForMaintenance`方法，如果返回`true`，则会返回503
    HTTP异常并停止方法的执行。否则，将带有`$request`参数的`$next`闭包返回给调用类。
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Middleware such as `CheckForMaintenanceMode` could be removed from the `$middleware`
    array and moved into the `$routeMiddleware` array to not require it to be executed
    upon every request, but only when desired from a certain route.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如`CheckForMaintenanceMode`之类的中间件可以从`$middleware`数组中移除，并移入`$routeMiddleware`数组中，以便不需要在每个请求时执行，而只在从特定路由所需时执行。
- en: Route middleware unravelled
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由中间件揭秘
- en: Two route-based middleware classes are present in Laravel 5 in `app/Http/Middleware/`.
    One of these classes is named `Authenticate`. It provides basic authentication
    and uses a contract.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel 5中存在两个基于路由的中间件类，位于`app/Http/Middleware/`中。其中一个类名为`Authenticate`。它提供基本身份验证并使用合同。
- en: 'In reference to routes, the middleware sits between the route and the controller:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 关于路由，中间件位于路由和控制器之间：
- en: '![Route middleware unravelled](graphics/B04559_07_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![路由中间件揭秘](graphics/B04559_07_01.jpg)'
- en: Default middleware – the Authenticate class
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认中间件 - Authenticate类
- en: 'A class called `Authenticate.php` has the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`Authenticate.php`的类有以下代码：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first thing to note is `Illuminate\Contracts\Auth\Guard`, which handles
    the logic to check whether or not a user is logged in. It is injected into the
    constructor.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是`Illuminate\Contracts\Auth\Guard`，它处理检查用户是否已登录的逻辑。它被注入到构造函数中。
- en: Contracts
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合同
- en: Notice that the concept of a contract is a new way of using an interface to
    provide a nonconcrete class to separate the actual class from the calling class.
    This provides a nice layer of separation and allows the underlying class to be
    easily switched out if needed, while maintaining the parameters and return types
    of the methods.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，合同的概念是使用接口提供非具体类以将实际类与调用类分离的新方法。这提供了一个良好的分离层，并允许在需要时轻松切换底层类，同时保持方法的参数和返回类型。
- en: Handle
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理
- en: The `handle` class is where the real work is done. The `$request` object is
    passed in along with the `$next` closure. What happens next is really simple yet
    important. The code asks if the current user is a guest, that is, not authenticated
    or logged in. If the user is not logged in, then the method will not allow the
    user to access the next step. If the request has arrived via Ajax, then a 401
    message is returned to the browser.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`handle`类是真正工作的地方。`$request`对象与`$next`闭包一起传入。接下来发生的事情非常简单但重要。代码询问当前用户是否是访客，即未经身份验证或登录。如果用户未登录，则该方法将不允许用户访问下一步。如果请求是通过Ajax到达的，则会向浏览器返回401消息。'
- en: If the request does not arrive via an Ajax request, the code assumes that the
    request has arrived via a standard page request and the user is directed to the
    auth/login page which allows the user to log in to the application. Otherwise,
    if the user is authenticated (`guest()` is not equal to `true`), then the `$next`
    closure is returned to the software application with the `$request` object as
    its parameter. To summarize, the execution of the application is stopped only
    if the user is not authenticated; otherwise, the execution continues.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求不是通过Ajax请求到达的，代码会假定请求是通过标准页面请求到达的，并且用户被重定向到auth/login页面，允许用户登录应用程序。否则，如果用户已经认证（`guest()`不等于`true`），则将`$next`闭包与`$request`对象作为参数返回给软件应用程序。总之，只有在用户未经认证时才会停止应用程序的执行；否则，执行将继续。
- en: The important thing to remember is that, in this case, the `$request` object
    is returned to the software.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要记住的重要一点是，在这种情况下，`$request`对象被返回给软件。
- en: Custom middleware – Log
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义中间件 - 记录
- en: 'It is simple to create custom middleware using Artisan. The `artisan` command
    is as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Artisan创建自定义中间件很简单。`artisan`命令如下：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Our `LogMiddleware` class needs to be added to the `$middleware` array in the
    `Http/Kernel.php` file as shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`LogMiddleware`类需要添加到`Http/Kernel.php`文件中的`$middleware`数组中，如下所示：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `LogMiddleware` class is the name given to a middleware class that will
    be used to log users that use a website. The class produced has only one method,
    namely `handle`. As the authentication middleware, it accepts the `$request` object
    as well as the `$next` closure:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`LogMiddleware`类是给中间件类的名称，用于记录使用网站的用户。该类只有一个方法，即`handle`。与认证中间件一样，它接受`$request`对象以及`$next`闭包：'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this case, we want to simply log both the user ID and the date and time
    at which some action was performed. The `$request` object is assigned to the `$response`
    object and the `$response` object is returned instead of `$next`. The code is
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们只想简单地记录用户ID以及执行某个操作的日期和时间。将`$request`对象分配给`$response`对象，然后返回`$response`对象而不是`$next`。代码如下：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The Log model
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录模型
- en: 'Create the `Log` model using the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建`Log`模型：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Set the `Log` model to use a table named `log` instead of `logs` by using the
    protected `$table` attribute. Next, set the model to not use a timestamp by setting
    the public `$timestamps` attribute to `false`. Finally, allow both the `user_id`
    and `created_at` fields to be populated at the same time by setting the protected
    `$fillable` attribute to an array of the fields that are desired to be filled,
    allowing use of the `create` function. The class will look like this after the
    preceding modifications:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用受保护的`$table`属性将`Log`模型设置为使用名为`log`而不是`logs`的表。接下来，通过将公共`$timestamps`属性设置为`false`，设置模型不使用时间戳。最后，通过将受保护的`$fillable`属性设置为要填充的字段数组，允许使用`create`函数同时填充`user_id`和`created_at`字段。在进行上述修改后，该类将如下所示：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We could also create the `Log` model as a polymorphic model, allowing it to
    be used in more than one context by added the following code to the `Log` model:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将`Log`模型创建为多态模型，使其可以在多个上下文中使用，通过将以下代码添加到`Log`模型中：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: More information regarding this is available in the Laravel documentation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此更多信息，请参阅Laravel文档。
- en: Log model migration
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录模型迁移
- en: 'It is necessary to adjust the `database/migrations/[date_time]_create_logs_table.php`
    migration to use the `log` table and not `logs`. It is also necessary to create
    two fields: `user_id`, an unsigned small integer, and `created_at`, a `datetime`
    field that will mimic the Laravel timestamp format. The code is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 需要调整`database/migrations/[date_time]_create_logs_table.php`迁移，以使用`log`表而不是`logs`。还需要创建两个字段：`user_id`，一个无符号的小整数，以及`created_at`，一个将模仿Laravel时间戳格式的`datetime`字段。代码如下：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Terminable middleware
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可终止中间件
- en: 'In addition to performing operations after the request arrives or after the
    response arrives, it is possible to perform actions even after the response is
    sent to the browser. The class adds the `terminate` method and implements `TerminableMiddleware`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在请求到达或响应到达后执行操作之外，甚至可以在响应发送到浏览器后执行操作。该类添加了`terminate`方法并实现了`TerminableMiddleware`：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Logging as terminable
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为可终止的记录
- en: 'We could easily perform the logging of the user inside the `terminate` function
    as follows, since the logging could be the last action to occur in the lifecycle.
    The code is as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`terminate`函数中轻松地执行用户记录，因为记录可能是生命周期中的最后一个动作。代码如下：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The code has been placed into the `terminate` method, so it is outside the request-response
    pathway, allowing the code to remain clean.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 代码已放置到`terminate`方法中，因此它位于请求-响应路径之外，使得代码保持清晰。
- en: Using middleware
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用中间件
- en: 'If we want it that a user must be authenticated before being able to perform
    a certain operation, we can pass an array as the second parameter with `middleware`
    as the key to force the route to call the `auth` middleware on the `search` method
    of `AccommodationsController`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望用户在执行某个操作之前必须经过身份验证，我们可以将数组作为第二个参数传递，`middleware`作为键强制路由在`AccommodationsController`的`search`方法上调用`auth`中间件：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this case, the user will be redirected to the login page if not authenticated.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果用户未经认证，将被重定向到登录页面。
- en: Route groups
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由组
- en: 'Routes may be grouped together to share the same middleware. For example, if
    we want to protect all of the routes in our application, we can create a route
    group and just pass in the key-value pair `middleware` and `auth`. The code is
    as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 路由可以分组以共享相同的中间件。例如，如果我们想保护应用程序中的所有路由，我们可以创建一个路由组，并只传入键值对`middleware`和`auth`。代码如下：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This protects every method of every route that lies inside the route group.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将保护路由组内的每个路由的每个方法。
- en: Multiple middleware in route groups
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由组中的多个中间件
- en: If even more protection is desired against nonauthenticated users, we could
    create a whitelist to only allow users within a certain range of IP addresses
    to access the application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望进一步保护非经过身份验证的用户，可以创建一个白名单，只允许特定范围的IP地址访问应用程序。
- en: 'The following command will create the middleware that is needed:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将创建所需的中间件：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `WhitelistMiddleware` class looks like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`WhitelistMiddleware`类如下所示：'
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, a private `$whitelist` array was created with a list of the IP addresses
    that are set up within a company. Then, the remote port of the request is compared
    to the values in the array, and it is allowed to continue by returning the `$next`
    closure. Otherwise, an unauthorized response is returned.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，创建了一个私有的`$whitelist`数组，其中包含设置在公司内的IP地址列表。 然后，将请求的远程端口与数组中的值进行比较，并通过返回`$next`闭包来允许其继续。
    否则，将返回未经授权的响应。
- en: 'Now, the `whitelist` middleware needs to be combined with the `auth` middleware.
    To use the `whitelist` middleware within the route group, an alias for the middleware
    needs to be created and inserted into the `app/Http/Kernel.php` file in the `$routeMiddleware`
    array. The code is as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，需要将`whitelist`中间件与`auth`中间件结合使用。 要在路由组内使用`whitelist`中间件，需要为中间件创建别名，并将其插入到`app/Http/Kernel.php`文件的`$routeMiddleware`数组中。
    代码如下：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, to add this to the list of middlewares for this route group, it is necessary
    to substitute the string `auth` with an array, having both `auth` and `whitelist`
    as its contents. The code is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要将其添加到此路由组的中间件列表中，需要用数组替换字符串`auth`，其中包含`auth`和`whitelist`。 代码如下：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, even if the user is logged in, it will not be possible to access the protected
    content unless the IP address is in the whitelist.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，即使用户已登录，也将无法访问受保护的内容，除非IP地址在白名单中。
- en: 'Also, if only some of the routes are desired to be whitelisted, routes group
    may be nested as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果只想要对某些路由进行白名单操作，可以嵌套路由组如下：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will require both authentication (`auth`) and whitelisting for the `RoomsController`,
    while all of the other controllers inside the route group will require only authentication.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将要求对`RoomsController`进行身份验证（`auth`）和白名单操作，而路由组内的所有其他控制器将仅需要身份验证。
- en: Middleware exclusion and inclusion
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中间件排除和包含
- en: 'If it is desired to perform authentication or whitelisting only for certain
    routes, then the constructor method should be added to the controller and the
    `middleware` method of the class could be used as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果希望仅对某些路由执行身份验证或白名单操作，则应向控制器添加构造方法，并且可以使用类的`middleware`方法如下所示：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The first parameter is the key of the `$routeMiddleware` array in the `Kernel.php`
    file. The second parameter is a key and value array. The options are either `except`
    or `only`. The `except` option is obviously the exclusion, while the `only` option
    is the inclusion. In the preceding example, the `auth` middleware will be applied
    to all methods except for the `index` or `show` methods, which are the two read
    methods (they do not modify the data). Instead, if the `log` middleware should
    be applied on `index` and `show`, then the following constructor would be used:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是`Kernel.php`文件中`$routeMiddleware`数组的键。 第二个参数是键值数组。 选项要么是`except`，要么是`only`。
    `except`选项显然是排除，而`only`选项是包含。 在上面的示例中，`auth`中间件将应用于除`index`或`show`方法之外的所有方法，这两个方法是两种读取方法（它们不修改数据）。
    相反，如果`log`中间件应用于`index`和`show`，则将使用以下构造方法：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As expected, both approaches are applied as follows and the `whitelist` middleware
    is added in as well:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，两种方法都如下所示，并且还添加了`whitelist`中间件：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code would require authentication and a whitelisted IP address for all
    non-read operations, while it logs any requests to `index` and `show`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将要求对所有非读取操作进行身份验证和白名单IP地址，同时记录对`index`和`show`的任何请求。
- en: Conclusion
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Middleware can skillfully filter requests and secure the application or RESTful
    API from unwanted requests. It can also perform logging and redirect any requests
    that fall within a certain criteria.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件可以巧妙地过滤请求并保护应用程序或RESTful API免受不必要的请求。 它还可以执行日志记录并重定向任何符合特定条件的请求。
- en: Middleware can also provide added functionality to the existing application.
    For example, Laravel provides the `EncryptCookies` and `AddQueuedCookiesToResponse`
    middleware to deal with cookies, while `StartSession` and `ShareErrorsFromSession`
    deal with sessions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件还可以为现有应用程序提供附加功能。 例如，Laravel提供了`EncryptCookies`和`AddQueuedCookiesToResponse`中间件来处理cookies，而`StartSession`和`ShareErrorsFromSession`处理会话。
- en: 'The code inside `AddQueuedCookiesToResponse` does not filter the request, but
    rather adds to it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddQueuedCookiesToResponse`中的代码不会过滤请求，而是向其添加内容：'
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at middleware, which is a useful mechanism for any
    functionality that should either be executed for each and every request or attached
    to certain routes. It is a flexible mechanism and allows the programmer to *code
    to an interface*, since any middleware class that implements the `Middleware`
    interface must include the `handle` method. Following good development principles
    is not only encouraged, but rather required through this type of structure.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了中间件，这是一个对每个请求执行的任何功能或附加到某些路由的有用机制。 这是一种灵活的机制，并允许程序员*编码到接口*，因为任何实现`Middleware`接口的中间件类都必须包括`handle`方法。
    通过这种结构不仅鼓励，而且要求遵循良好的开发原则。
- en: In the next chapter, we will discuss the Eloquent ORM.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Eloquent ORM。
