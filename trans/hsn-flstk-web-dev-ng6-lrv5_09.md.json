["```php\n version: \"3.1\"\n services:\n     mysql:\n       image: mysql:5.7\n       container_name: chapter-09-mysql\n       working_dir: /application\n       volumes:\n         - .:/application\n         - ./storage-db:/var/lib/mysql\n       environment:\n         - MYSQL_ROOT_PASSWORD=123456\n         - MYSQL_DATABASE=chapter-09\n         - MYSQL_USER=chapter-09\n         - MYSQL_PASSWORD=123456\n       ports:\n         - \"8083:3306\"\n     webserver:\n       image: nginx:alpine\n       container_name: chapter-09-webserver\n       working_dir: /application\n       volumes:\n         - .:/application\n         -./phpdocker/nginx/nginx.conf:/etc/nginx/conf.d/default\n         .conf\n       ports:\n         - \"8081:80\"\n     php-fpm:\n       build: phpdocker/php-fpm\n       container_name: chapter-09-php-fpm\n       working_dir: /application\n       volumes:\n         - ./Server:/application\n         - ./phpdocker/php-fpm/php-ini-\n           overrides.ini:/etc/php/7.2/fpm/conf.d/99-overrides.ini\n```", "```php\n git add .\n git commit -m \"Initial commit chapter 09\"\n```", "```php\n ng g class pages/auth/user\n```", "```php\n export  class  User {\n        name?:  string;\n        email?:  string;\n        password?:  string;\n        constructor() {}\n }\n```", "```php\n ng g class pages/builders/builder\n```", "```php\n import { Bike } from  '../bikes/bike';\n\n export  class  Builder {\n        id:  number;\n        name:  string;\n        description:  string;\n        location:  string;\n        bike?:  Bike;\n\n        constructor() {}\n }\n```", "```php\n ng g class pages/bikes/bike\n```", "```php\n import { User } from  './../auth/user';\n import { Builder } from  '../builders/builder';\n\n export  class  Bike {\n        id:  number;\n        make:  string;\n        model:  string;\n        year:  string;\n        mods:  string;\n        picture:  string;\n        user_id:  number;\n        builder_id:  number;\n        average_rating?: number;\n        user?:  User;\n        builder?:  Builder;\n        items?:  any;\n        ratings?:  any;\n\n        constructor() {}\n }\n```", "```php\n ng g service pages/auth/_services/auth\n```", "```php\n import { HttpClient, HttpParams, HttpErrorResponse } from  '@angular/common/http';\n import { HttpHeaders } from  '@angular/common/http';\n import { Router } from  '@angular/router';\n import { Observable, throwError } from  'rxjs';\n import { catchError, map, tap } from  'rxjs/operators';\n\n // App imports\n import { environment } from  './../../../environments/environment';\n import { User } from  './user';\n```", "```php\n // Setup headers\n const httpOptions  = {\n```", "```php\n        headers: new  HttpHeaders({\n                'Content-Type': 'application/json'\n        })\n };\n```", "```php\n public  currentUser:  User;\n private  readonly  apiUrl  =  environment.apiUrl;\n private  registerUrl  =  this.apiUrl  +  '/register';\n private  loginUrl  =  this.apiUrl  +  '/login';\n```", "```php\n private  http:  HttpClient, private  router:  Router\n```", "```php\n     constructor(\n                private  http:  HttpClient,\n                private  router:  Router) {}\n```", "```php\n     onRegister(user: User): Observable<User> {\n                const request  =  JSON.stringify(\n                        { name: user.name, email: user.email, password:\n                 user.password }\n                );\n                return  this.http.post(this.registerUrl, request,\n                httpOptions)\n                .pipe(\n                        map((response:  User) => {\n                                // Receive jwt token in the response\n                                const  token: string  =\n                                response['access_token'];\n                                // If we have a token, proceed\n                                if (token) {\n                                        this.setToken(token);\n                                        this.getUser().subscribe();\n                                }\n                                return  response;\n                        }),\n                catchError(error  =>  this.handleError(error))\n                );\n        }\n```", "```php\n     onLogin(user: User): Observable<User> {\n                const request  =  JSON.stringify(\n                        { email: user.email, password: user.password }\n                );\n                return  this.http.post(this.registerUrl, request,\n                httpOptions)\n                .pipe(\n                        map((response:  User) => {\n                                // Receive jwt token in the response\n                                const  token: string  = \n                                response['access_token'];\n                                // If we have a token, proceed\n                                if (token) {\n                                        this.setToken(token);\n                                        this.getUser().subscribe();\n                                }\n                                return  response;\n                        }),\n                catchError(error  =>  this.handleError(error))\n                );\n        }\n```", "```php\nonLogout():  Observable<User> {\n        return  this.http.post(this.apiUrl  +  '/logout',\n          httpOptions).pipe(\n                tap(\n                        () => {\n                                localStorage.removeItem('token');\n                                this.router.navigate(['/']);\n                                }\n                        )\n                );\n}\n```", "```php\nsetToken(token:  string):  void {\n        return  localStorage.setItem('token', token );\n}\n\ngetToken():  string {\n        return  localStorage.getItem('token');\n}\n```", "```php\ngetUser():  Observable<User> {\n        return  this.http.get(this.apiUrl  +  '/me').pipe(\n                tap(\n                        (user: User) => {\n                                this.currentUser  =  user;\n                        }\n                )\n        );\n}\n```", "```php\n  isAuthenticated():  boolean { // get the token\n  const  token:  string  =  this.getToken();\n  if (token) {\n  return  true;\n }  return  false;\n }\n```", "```php\nprivate  handleError(error:  HttpErrorResponse) {\n        if (error.error  instanceof  ErrorEvent) {\n                // A client-side error.\n                console.error('An error occurred:',\n                error.error.message);\n        } else {\n                // The backend error.\n                return  throwError(error);\n        }\n        // return a custom error message\n        return  throwError('Ohps something wrong happen here; please try again later.');\n}\n```", "```php\n ng g service pages/bikes/_services/bike\n```", "```php\n import { Injectable } from  '@angular/core';\n import { HttpClient, HttpParams, HttpErrorResponse } from  '@angular/common/http';\n import { HttpHeaders } from  '@angular/common/http';\n import { Observable, throwError } from  'rxjs';\n import { catchError } from  'rxjs/operators';\n\n // App import\n import { environment } from  '../../../../environments/environment';\n import { Bike } from  '../bike';\n```", "```php\n private  readonly  apiUrl  =  environment.apiUrl;\n private  bikesUrl  =  this.apiUrl  +  '/bikes';\n```", "```php\n constructor(private  http:  HttpClient) {}\n```", "```php\n /** GET bikes from bikes endpoint */\n getBikes ():  Observable<Bike[]> {\n        return  this.http.get<Bike[]>(this.bikesUrl)\n        .pipe(\n                catchError(error  =>  this.handleError(error))\n        );\n }\n\n /** GET bike detail from bike-detail endpoint */\n getBikeDetail (id:  number):  Observable<Bike[]> {\n        return  this.http.get<Bike[]>(this.bikesUrl  +  `/${id}`)\n        .pipe(\n                catchError(error  =>  this.handleError(error))\n        );\n }\n\n /** POST bike to bikes endpoint */\n addBike (bike:  Bike):  Observable<Bike> {\n        return  this.http.post<Bike>(this.bikesUrl, bike)\n        .pipe(\n                catchError(error  =>  this.handleError(error))\n        );\n }\n\n /** PUT bike to bikes endpoint */\n updateBike (bike:  Bike, id:  number):  Observable<Bike> {\n        return  this.http.put<Bike>(this.bikesUrl  +  `/${id}`, bike)\n        .pipe(\n                catchError(error  =>  this.handleError(error))\n        );\n }\n\n /** DELETE bike bike endpoint */\n deleteBike (id:  number):  Observable<Bike[]> {\n        return  this.http.delete<Bike[]>(this.bikesUrl  +  `/${id}`)\n        .pipe(\n                catchError(error  =>  this.handleError(error))\n        );\n }\n\n /** Vote on bike */\n voteOnBike (vote:  any, bike:  number):  Observable<any> {\n        const  rating  =  vote;\n        return  this.http.post(this.bikesUrl  +  `/${bike}/ratings`, {rating})\n        .pipe(\n                catchError(error  =>  this.handleError(error))\n        );\n }\n```", "```php\nthis.bikesUrl  +  `/${id}`\nthis.bikesUrl  +  `/${bike}/ratings`, {rating}\n```", "```php`) characters, instead of single or double quotes marks, and an expression beginning with a dollar sign.\n\n# Creating the voteOnBike function\n\nOur service still has one more function, which we will use to send the user's votes for a specific bike. Remember, whenever you need to use the `HTTPClient` module, do this within a service. This is considered good practice in Angular development.\n\nAdd the following code right after the `deleteBike()` function:\n\n```", "```php\n\n# Creating the handleError function\n\nNow, let's add the error handling for the bikes service. Add the following code, right after the `voteOnBike()` function:\n\n```", "```php\n\nAs we can see, the `handleError()` function on the bike service is the same as the authentication service, and will be the same on the builders service. Whenever you need to write the same code more than once, it is highly\u00a0recommended that you use a service for this, thereby avoiding the repetition of code.\n\nLater, we will create a service to solve this problem, but for now we will create the service of builders.\n\n# Creating the builders service\n\nNow, we will create the `builder` service with the `Create`, `Read`, `Update`, and\u00a0`Delete`\u00a0methods:\n\n1.  Still in your Terminal, type the following command:\n\n```", "```php\n\nThe previous command will create a new folder and file in\u00a0`./app/pages/builders/_services/builder.service.ts`. Now, let's add some pieces of code.\n\n2.  Open `./app/pages/builders/_services/builder.service.ts` and replace its code with the following block:\n\n```", "```php\n\nThe previous code is pretty much the same as the bike service, and we can note that the last function is the `handleError()` function, so it is time to learn how to create an error service.\n\n# Dealing with the HttpErrorHandler service\n\nAs mentioned previously, it is not a good practice to repeat code in a modern web application, so we can use many resources to avoid this practice. In Angular development, we can use a shared service to handle the application errors in just one place.\n\n# Creating a handler error service\n\nAs mentioned earlier in this chapter, let's create our error handler service:\n\n1.  Open your Terminal window inside `./Client/src/app` and type the following command:\n\n```", "```php\n\nThe previous command will create a new folder called `_services` inside the `pages/shared` folder for a simple reason: we will share this service between all services that we created inside the\u00a0`bikes`, `builders`, and `auth` modules. The previous command also created a file called `http-handle-error.service.ts`.\n\n2.  Open `./Client/src/app/shared/_services/http-handle-error.service.ts` and add the following imports:\n\n```", "```php\n\n3.  Let's create an Angular `type` for our error. Add the following code right after the imports:\n\n```", "```php\n\nThe previous code creates a new `Type` called `HandleError`, and we will use it in the following lines.\n\nRemember that Angular has many types such as array, void, any many more. We already saw this in\u00a0[Chapter 3](55bf9899-fbc7-458e-b7f5-22be56951fe6.xhtml), *Understanding the Core Concepts of Angular 6*.\n\n4.  Let's add the error function. Add the following block of code right after the `constructor()` function:\n\n```", "```php\n\nThe previous code creates a function called\u00a0`handleError` that receive three parameters\u2014`serviceName`, `operation`, and\u00a0`result`\u2014and returns an observable type called\u00a0`HandleError`.\n\nWe are also using the basic built-in JavaScript function to show an alert to the user if we have an error, and a `console.log()` function with all the HTTP response.\n\nNowadays, it is very common to use a payed logging service to monitor web applications and issue silent errors to the user.\n\nSome private services for this, as is the case are Rollbar, TrackJS,\u00a0\u00a0Bugsnag, and Sentry. All of them offer a powerful API for tracking errors in production mode and sent then to a dashboard panel easy to use, without alarm the application users or search for application logs.\n\nWe also recommend, for beta and alpha applications, a free account from bugsnag at\u00a0[https://www.bugsnag.com/platforms/javascript/](https://www.bugsnag.com/platforms/javascript/).\n\n# Importing HttpErrorHandler into app.module.ts\n\nNow, we need to add our service to the central module of our application. Remember that we are using a directory called `shared`; the appropriate place to put our service is directly in the `app.module.ts`\u00a0file:\n\n1.  Open the `./Client/src/app/app.module.ts`\u00a0file and add following code right after the `NavComponent` import:\n\n```", "```php\n\n2.  Still on `./Client/src/app/app.module.ts`, add the `HttpErrorHandler` property to the `providers` array after the `Title` property:\n\n```", "```php\n\nAt the end of this step, we have the following directory structure in our app:\n\n![](assets/b6df6ddc-546e-445a-b949-09adb91c523e.png)Shared services folder\n\n# Refactoring the builders service\n\nNow that we have created the error handling service, we need to refactor our builders and bikes services to use the new error handling.\n\nOpen `./app/pages/builders/_services/builder.service.ts` and replace its content with the following code:\n\n```", "```php\n\nIn the previous code, we replaced our local error function to use the new error service. We added a new property called `handleError` and created a new handler named\u00a0`BuildersService` with the following code:\n\n```", "```php\n\nEach handler received the `serviceName` as\u00a0`getBuilders`, `getBuilderDetail`, `addBuilder`, `updateBuilder`, and\u00a0`deleteBuilder`.\n\nNow, we will do the same for the bikes service.\n\n# Refactoring the bikes service\n\nNow, let's add the new error handling to the bikes service.\n\nOpen `./app/pages/bikes/_services/bike.service.ts` and replace its contents with the following code:\n\n```", "```php\n\nIn the previous code, we did the same as we did in the builders service and added each handler with a `serviceName` as\u00a0`getBikes`, `getBikeDetail`, `addBike`, `updateBike`, and\u00a0`deleteBike`.\n\n# How to use authorization headers\n\nWhen we talk about authorization in the header, we are basically talking about making some modifications in the header of the application to send some kind of authorization. In our case, we are specifically talking about an authorization token generated by our API backend.\n\nThe best way to do this is by using Angular interceptors. An interceptor, as its name suggests, allows us to simply intercept and configure requests before they are triggered to the server.\n\nThis allows us to do a lot of things. An example of this would be to configure a token authentication on any request, or suddenly add custom headers that our application may need, until we handle answers before finishing the request.\n\nWhen a JWT token is sent to the backend, remember that we are using the `jwt-auth` library on our Laravel API: it is expected to be in the authorization header of the HTTP request.\n\nThe most common approach for adding an authorization header to an HTTP request in Angular is creating an interceptor class and having the interceptor make modifications to the requests by attaching a JWT (or other form of access token) as an authorization header with the Bearer scheme, as we explained previously.\n\n# Creating an HTTP interceptor\n\nLet's take a look at how to use Angular's `HttpInterceptor` interface to make authenticated HTTP requests.\n\nWhen we are handling authentication in an Angular app, most of the time, it's generally best to put everything you need in a dedicated service, like we did previously.\n\nAny authentication service should have a few basic methods for allowing users to log in and log out. It should also include a method for retrieving a JSON Web Token and putting it into\u00a0`localStorage`\u00a0(like we did previously), on the client, and a way to determine if the user is authenticated or not, in our case, using the `isAuthenticated()` function on `auth.service.ts`.\n\nSo, let's create the HTTP interceptor:\n\n1.  Open your Terminal window at `./Client/src/app` and type the following command:\n\n```", "```php\n\nThe previous command will generate the following file: `./Client/src/app/shared/_services/app-http-interceptor.service.ts`. Once again, we are creating a file in our `shared` directory, because we can use this service anywhere we want in our application.\n\n2.  Open `./Client/src/app/shared/_services/app-http-interceptor.service.ts`\u00a0and add the following code:\n\n```", "```php\n\n```", "```php\n\n3.  In the previous code, first we check if we have a token in `localStorage` with the\u00a0`this.auth.getToken();`\u00a0function from `AuthService`. So, if we have a token, we add it as a new header using\u00a0the following:\n\n```", "```php\n\n4.  If the token is invalid, or if the API returned a 401 error, we send the user to the home route using\u00a0the following:\n\n```", "```php\n\n# Adding AppHttpInterceptorService to the main module\n\nNow that we have our interceptor configured and ready to be used, we need to add it into the main application module:\n\n1.  Open `./Client/src/app/app.module.ts` and add the following import, right after the `HttpErrorHandler` import:\n\n```", "```php\n\n2.  Add the following code, inside the `providers` array, right after the HttpErrorHandler property:\n\n```", "```php\n\n3.  At the end of the previous step, our main application module will include the following code:\n\n```", "```php\n\nNote that we are separating the Angular imports from application imports. This is a good practice and helps keep your code organized.\n\nCongratulations! Now, we can intercept every request in our application.\n\n# How to protect application routes with route guards\n\nIn this section, we will talk about another powerful feature of the Angular framework. We call it guards, or even better, route guards.\n\nIt is available in the Angular CLI, as we will see in the following lines of code, but first let's understand a bit more about guards.\n\nProtecting routes is a very common task when building modern web applications, as we want to prevent our users from accessing areas that they're not allowed to access, in our case, the bike details. Remember that we define the access to bike details inside\u00a0`./Server/app/Http/Controllers/API/BikeController.php`:\n\n```", "```php\n\nThe previous code says that only the index route should not be protected.\n\nThere are four different guard types we can use to protect our routes:\n\n*   `CanActivate`:\u00a0Choose if a route can be activated\n*   `CanActivateChild`:\u00a0Choose if child routes of a route can be activated\n*   `CanDeactivate`:\u00a0Choose if a route can be deactivated\n*   `CanLoad`:\u00a0Choose if a module can be loaded lazily\n\nIn the next example, we will be using the `CanActivate` feature.\n\n# Creating the route guard for bike-detail\n\nGuards are implemented as services that need to be provided, so we typically create a guard class using the Angular CLI:\n\n1.  Open your Terminal window and type the following command:\n\n```", "```php\n\nThe previous code will generate the following file: `./Client/src/app/pages/auth/_guards/auth.guard.ts`.\n\n2.  Open the\u00a0`./Client/src/app/pages/auth/_guards/auth.guard.ts` file and add the following import after the observable import:\n\n```", "```php\n\n3.  Now, let's add `Router` and `AuthService` inside the `constructor()`\u00a0function, as shown in the following code:\n\n```", "```php\n\n4.  Add the following block of code inside the `canActivate()` function, before the `return` property:\n\n```", "```php\n\nIn the previous code, we are using the `auth.isAuthenticated()` function from `AuthService` to check if the user is authenticated. This means that, if the user is not authenticated/logged-in, we will redirect them to the login screen.\n\nWe are also using the `queryParams`\u00a0and\u00a0`returnUrl`\u00a0functions to send the user back to where they came from.\n\nThis means that, if the user clicks to look at the bike's details and they are not logged in to the application, they will be redirected to the login screen. After logging in, the user will be redirected to the details of the bike they intended to look at.\n\nThe last step is to add\u00a0`AuthGuard` to the\u00a0`bike-detail` route.\n\n5.  Open `./Client/src/app/bikes/bikes-routing.module.ts` and add the following import, right after the routes import:\n\n```", "```php\n\n6.  Now, add the `canActivate` property right after the `bikeDetailComponent`, as in the following code:\n\n```"]