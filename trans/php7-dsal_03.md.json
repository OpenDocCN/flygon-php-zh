["```php\nclass ListNode { \n\n    public $data = NULL; \n\n    public $next = NULL; \n\n    public function __construct(string $data = NULL) { \n\n        $this->data = $data; \n\n    } \n\n}\n\n```", "```php\nclass LinkedList { \n\n    private $_firstNode = NULL; \n\n    private $_totalNodes = 0; \n\n    public function insert(string $data = NULL) { \n\n       $newNode = new ListNode($data); \n\n        if ($this->_firstNode === NULL) {           \n\n            $this->_firstNode = &$newNode;             \n\n        } else { \n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode->next !== NULL) { \n\n                $currentNode = $currentNode->next; \n\n            } \n\n            $currentNode->next = $newNode; \n\n        } \n\n       $this->_totalNode++; \n\n        return TRUE; \n\n    } \n\n    public function display() { \n\n      echo \"Total book titles: \".$this->_totalNode.\"\\n\"; \n\n        $currentNode = $this->_firstNode; \n\n        while ($currentNode !== NULL) { \n\n            echo $currentNode->data . \"\\n\"; \n\n            $currentNode = $currentNode->next; \n\n        } \n\n    } \n\n} \n\n```", "```php\n$newNode = new ListNode($data); \n\nif ($this->_firstNode === NULL) {             \n\n          $this->_firstNode = &$newNode; \n\n}\n\n```", "```php\n$currentNode = $this->_firstNode;    \n\nwhile ($currentNode->next !== NULL) { \n\n  $currentNode = $currentNode->next; \n\n} \n\n$currentNode->next = $newNode; \n\n```", "```php\n$BookTitles = new LinkedList(); \n\n$BookTitles->insert(\"Introduction to Algorithm\"); \n\n$BookTitles->insert(\"Introduction to PHP and Data structures\"); \n\n$BookTitles->insert(\"Programming Intelligence\"); \n\n$BookTitles->display(); \n\n```", "```php\nTotal book titles: 3\n\nIntroduction to Algorithm\n\nIntroduction to PHP and Data structures\n\nProgramming Intelligence\n\n```", "```php\n    public function insertAtFirst(string $data = NULL) { \n\n        $newNode = new ListNode($data); \n\n        if ($this->_firstNode === NULL) {             \n\n            $this->_firstNode = &$newNode;             \n\n        } else { \n\n            $currentFirstNode = $this->_firstNode; \n\n            $this->_firstNode = &$newNode; \n\n            $newNode->next = $currentFirstNode;            \n\n        } \n\n        $this->_totalNode++; \n\n        return TRUE; \n\n    } \n\n```", "```php\n    public function search(string $data = NULL) { \n\n        if ($this->_totalNode) { \n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode !== NULL) { \n\n                if ($currentNode->data === $data) { \n\n                    return $currentNode; \n\n                } \n\n                $currentNode = $currentNode->next; \n\n            } \n\n        } \n\n        return FALSE; \n\n    } \n\n```", "```php\npublic function insertBefore(string $data = NULL, string $query = NULL) { \n\n        $newNode = new ListNode($data); \n\n        if ($this->_firstNode) { \n\n            $previous = NULL; \n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode !== NULL) { \n\n                if ($currentNode->data === $query) { \n\n                    $newNode->next = $currentNode; \n\n                    $previous->next = $newNode; \n\n                    $this->_totalNode++; \n\n                    break; \n\n                } \n\n                $previous = $currentNode; \n\n                $currentNode = $currentNode->next; \n\n            } \n\n        } \n\n    } \n\n```", "```php\n    public function insertAfter(string $data = NULL, string $query = \n\n      NULL) { \n\n        $newNode = new ListNode($data); \n\n        if ($this->_firstNode) { \n\n            $nextNode = NULL; \n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode !== NULL) { \n\n                if ($currentNode->data === $query) { \n\n                    if($nextNode !== NULL) { \n\n                        $newNode->next = $nextNode; \n\n                    } \n\n                    $currentNode->next = $newNode; \n\n                    $this->_totalNode++; \n\n                    break; \n\n                } \n\n                $currentNode = $currentNode->next; \n\n                $nextNode = $currentNode->next; \n\n            } \n\n        } \n\n    } \n\n```", "```php\npublic function deleteFirst() { \n\n        if ($this->_firstNode !== NULL) { \n\n            if ($this->_firstNode->next !== NULL) { \n\n                $this->_firstNode = $this->_firstNode->next; \n\n            } else { \n\n                $this->_firstNode = NULL; \n\n            } \n\n            $this->_totalNode--; \n\n            return TRUE; \n\n        } \n\n        return FALSE; \n\n    } \n\n```", "```php\n    public function deleteLast() { \n\n        if ($this->_firstNode !== NULL) { \n\n            $currentNode = $this->_firstNode; \n\n            if ($currentNode->next === NULL) { \n\n                $this->_firstNode = NULL; \n\n            } else { \n\n                $previousNode = NULL; \n\n                while ($currentNode->next !== NULL) { \n\n                    $previousNode = $currentNode; \n\n                    $currentNode = $currentNode->next; \n\n                } \n\n                $previousNode->next = NULL; \n\n                $this->_totalNode--; \n\n                return TRUE; \n\n            } \n\n        } \n\n        return FALSE; \n\n    } \n\n```", "```php\n    public function delete(string $query = NULL) { \n\n        if ($this->_firstNode) { \n\n            $previous = NULL; \n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode !== NULL) { \n\n                if ($currentNode->data === $query) { \n\n                    if ($currentNode->next === NULL) { \n\n                        $previous->next = NULL; \n\n                    } else { \n\n                        $previous->next = $currentNode->next; \n\n                    } \n\n                    $this->_totalNode--; \n\n                    break; \n\n                } \n\n                $previous = $currentNode; \n\n                $currentNode = $currentNode->next; \n\n            } \n\n        } \n\n    } \n\n```", "```php\nprev   = NULL; \n\ncurrent = first_node; \n\nnext = NULL; \n\nwhile (current != NULL) \n\n{ \n\n  next  = current->next;   \n\n  current->next = prev;    \n\n  prev = current; \n\n  current = next; \n\n} \n\nfirst_node = prev; \n\n```", "```php\n    public function reverse() { \n\n        if ($this->_firstNode !== NULL) { \n\n            if ($this->_firstNode->next !== NULL) { \n\n                $reversedList = NULL; \n\n                $next = NULL; \n\n                $currentNode = $this->_firstNode; \n\n                while ($currentNode !== NULL) { \n\n                    $next = $currentNode->next; \n\n                    $currentNode->next = $reversedList; \n\n                    $reversedList = $currentNode; \n\n                    $currentNode = $next; \n\n                } \n\n                $this->_firstNode = $reversedList; \n\n            } \n\n        } \n\n    } \n\n```", "```php\n    public function getNthNode(int $n = 0) { \n\n        $count = 1; \n\n        if ($this->_firstNode !== NULL) { \n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode !== NULL) { \n\n                if ($count === $n) { \n\n                    return $currentNode; \n\n                } \n\n                $count++; \n\n                $currentNode = $currentNode->next; \n\n            } \n\n        } \n\n    } \n\n```", "```php\n$BookTitles = new LinkedList(); \n\n$BookTitles->insert(\"Introduction to Algorithm\"); \n\n$BookTitles->insert(\"Introduction to PHP and Data structures\"); \n\n$BookTitles->insert(\"Programming Intelligence\"); \n\n$BookTitles->insertAtFirst(\"Mediawiki Administrative tutorial guide\"); \n\n$BookTitles->insertBefore(\"Introduction to Calculus\", \"Programming Intelligence\"); \n\n$BookTitles->insertAfter(\"Introduction to Calculus\", \"Programming Intelligence\"); \n\n$BookTitles->display(); \n\n$BookTitles->deleteFirst(); \n\n$BookTitles->deleteLast(); \n\n$BookTitles->delete(\"Introduction to PHP and Data structures\"); \n\n$BookTitles->reverse(); \n\n$BookTitles->display(); \n\necho \"2nd Item is: \".$BookTitles->getNthNode(2)->data; \n\n```", "```php\nTotal book titles: 6\n\nMediawiki Administrative tutorial guide\n\nIntroduction to Algorithm\n\nIntroduction to PHP and Data structures\n\nIntroduction to Calculus\n\nProgramming Intelligence\n\nIntroduction to Calculus\n\nTotal book titles: 3\n\nProgramming Intelligence\n\nIntroduction to Calculus\n\nIntroduction to Algorithm\n\n2nd Item is: Introduction to Calculus\n\n```", "```php\nprivate $_currentNode = NULL; \n\nprivate $_currentPosition = 0; \n\n```", "```php\nclass LinkedList implements Iterator{ \n\n} \n\n```", "```php\n    public function current() { \n\n        return $this->_currentNode->data; \n\n    } \n\n    public function next() { \n\n        $this->_currentPosition++; \n\n        $this->_currentNode = $this->_currentNode->next; \n\n    } \n\n    public function key() { \n\n        return $this->_currentPosition; \n\n    } \n\n    public function rewind() { \n\n        $this->_currentPosition = 0; \n\n        $this->_currentNode = $this->_firstNode; \n\n    } \n\n    public function valid() { \n\n        return $this->_currentNode !== NULL; \n\n    } \n\n```", "```php\nforeach ($BookTitles as $title) { \n\n    echo $title . \"\\n\"; \n\n}\n\n```", "```php\nfor ($BookTitles->rewind(); $BookTitles->valid(); \n\n  $BookTitles->next()) { \n\n    echo $BookTitles->current() . \"\\n\"; \n\n}\n\n```", "```php\nclass CircularLinkedList { \n\n    private $_firstNode = NULL; \n\n    private $_totalNode = 0; \n\n    public function insertAtEnd(string $data = NULL) { \n\n        $newNode = new ListNode($data); \n\n        if ($this->_firstNode === NULL) { \n\n            $this->_firstNode = &$newNode; \n\n        } else { \n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode->next !== $this->_firstNode) { \n\n                $currentNode = $currentNode->next; \n\n            } \n\n            $currentNode->next = $newNode; \n\n        } \n\n        $newNode->next = $this->_firstNode; \n\n        $this->_totalNode++; \n\n        return TRUE; \n\n    } \n\n}\n\n```", "```php\n$newNode->next = $this->_firstNode; \n\n```", "```php\n    public function display() { \n\n        echo \"Total book titles: \" . $this->_totalNode . \"\\n\"; \n\n        $currentNode = $this->_firstNode; \n\n        while ($currentNode->next !== $this->_firstNode) { \n\n            echo $currentNode->data . \"\\n\"; \n\n            $currentNode = $currentNode->next; \n\n        } \n\n        if ($currentNode) { \n\n            echo $currentNode->data . \"\\n\"; \n\n        } \n\n    }\n\n```", "```php\nclass ListNode {\n\n    public $data = NULL; \n\n    public $next = NULL; \n\n    public $prev = NULL; \n\n    public function __construct(string $data = NULL) {\n\n        $this->data = $data;\n\n    }\n\n}\n\nclass DoublyLinkedList {\n\n    private $_firstNode = NULL;\n\n    private $_lastNode = NULL;\n\n    private $_totalNode = 0;\n\n}\n\n```", "```php\n    public function insertAtFirst(string $data = NULL) {\n\n        $newNode = new ListNode($data);\n\n        if ($this->_firstNode === NULL) {\n\n            $this->_firstNode = &$newNode;\n\n            $this->_lastNode = $newNode; \n\n        } else {\n\n            $currentFirstNode = $this->_firstNode; \n\n            $this->_firstNode = &$newNode; \n\n            $newNode->next = $currentFirstNode; \n\n            $currentFirstNode->prev = $newNode; \n\n        }\n\n        $this->_totalNode++; \n\n        return TRUE;\n\n    }\n\n```", "```php\n    public function insertAtLast(string $data = NULL) { \n\n        $newNode = new ListNode($data);\n\n        if ($this->_firstNode === NULL) {\n\n            $this->_firstNode = &$newNode; \n\n            $this->_lastNode = $newNode; \n\n        } else {\n\n            $currentNode = $this->_lastNode; \n\n            $currentNode->next = $newNode; \n\n            $newNode->prev = $currentNode; \n\n            $this->_lastNode = $newNode; \n\n        }\n\n        $this->_totalNode++; \n\n        return TRUE;\n\n    }\n\n```", "```php\n    public function insertBefore(string $data = NULL, string $query =  \n\n      NULL) {\n\n        $newNode = new ListNode($data); \n\n        if ($this->_firstNode) { \n\n            $previous = NULL; \n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode !== NULL) { \n\n                if ($currentNode->data === $query) { \n\n                    $newNode->next = $currentNode; \n\n                    $currentNode->prev = $newNode; \n\n                    $previous->next = $newNode; \n\n                    $newNode->prev = $previous; \n\n                    $this->_totalNode++; \n\n                    break; \n\n                }\n\n                $previous = $currentNode; \n\n                $currentNode = $currentNode->next; \n\n            }\n\n        }\n\n    }\n\n```", "```php\n    public function insertAfter(string $data = NULL, string $query = \n\n      NULL) { \n\n        $newNode = new ListNode($data);\n\n        if ($this->_firstNode) { \n\n            $nextNode = NULL; \n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode !== NULL) { \n\n                if ($currentNode->data === $query) { \n\n                    if ($nextNode !== NULL) { \n\n                        $newNode->next = $nextNode; \n\n                    } \n\n                    if ($currentNode === $this->_lastNode) { \n\n                        $this->_lastNode = $newNode; \n\n                    } \n\n                    $currentNode->next = $newNode; \n\n                    $nextNode->prev = $newNode; \n\n                    $newNode->prev = $currentNode; \n\n                    $this->_totalNode++; \n\n                    break; \n\n                } \n\n                $currentNode = $currentNode->next; \n\n                $nextNode = $currentNode->next; \n\n            }\n\n        }\n\n    }\n\n```", "```php\n    public function deleteFirst() { \n\n        if ($this->_firstNode !== NULL) { \n\n            if ($this->_firstNode->next !== NULL) { \n\n                $this->_firstNode = $this->_firstNode->next; \n\n                $this->_firstNode->prev = NULL; \n\n            } else { \n\n                $this->_firstNode = NULL; \n\n            } \n\n            $this->_totalNode--; \n\n            return TRUE; \n\n        } \n\n        return FALSE; \n\n    }\n\n```", "```php\n    public function deleteLast() { \n\n        if ($this->_lastNode !== NULL) { \n\n            $currentNode = $this->_lastNode; \n\n            if ($currentNode->prev === NULL) { \n\n                $this->_firstNode = NULL; \n\n                $this->_lastNode = NULL; \n\n            } else { \n\n                $previousNode = $currentNode->prev; \n\n                $this->_lastNode = $previousNode; \n\n                $previousNode->next = NULL; \n\n                $this->_totalNode--; \n\n                return TRUE; \n\n            } \n\n        } \n\n        return FALSE; \n\n    }\n\n```", "```php\n    public function delete(string $query = NULL) { \n\n        if ($this->_firstNode) { \n\n            $previous = NULL;\n\n            $currentNode = $this->_firstNode; \n\n            while ($currentNode !== NULL) { \n\n                if ($currentNode->data === $query) { \n\n                    if ($currentNode->next === NULL) { \n\n                        $previous->next = NULL; \n\n                    } else { \n\n                        $previous->next = $currentNode->next; \n\n                        $currentNode->next->prev = $previous; \n\n                    }\n\n                    $this->_totalNode--; \n\n                    break; \n\n                }\n\n                $previous = $currentNode; \n\n                $currentNode = $currentNode->next; \n\n            }\n\n        }\n\n    }\n\n```", "```php\n    public function displayForward() { \n\n        echo \"Total book titles: \" . $this->_totalNode . \"\\n\"; \n\n        $currentNode = $this->_firstNode; \n\n        while ($currentNode !== NULL) { \n\n            echo $currentNode->data . \"\\n\"; \n\n            $currentNode = $currentNode->next; \n\n        } \n\n    } \n\n```", "```php\n    public function displayBackward() { \n\n        echo \"Total book titles: \" . $this->_totalNode . \"\\n\"; \n\n        $currentNode = $this->_lastNode; \n\n        while ($currentNode !== NULL) { \n\n            echo $currentNode->data . \"\\n\"; \n\n            $currentNode = $currentNode->prev; \n\n        }\n\n    }\n\n```", "```php\n$BookTitles = new SplDoublyLinkedList(); \n\n$BookTitles->push(\"Introduction to Algorithm\");\n\n$BookTitles->push(\"Introduction to PHP and Data structures\"); \n\n$BookTitles->push(\"Programming Intelligence\");\n\n$BookTitles->push(\"Mediawiki Administrative tutorial guide\"); \n\n$BookTitles->add(1,\"Introduction to Calculus\");\n\n$BookTitles->add(3,\"Introduction to Graph Theory\");\n\nfor($BookTitles->rewind();$BookTitles->valid();$BookTitles->next()){    \n\n    echo $BookTitles->current().\"\\n\";\n\n}\n\n```", "```php\nIntroduction to Algorithm\n\nIntroduction to Calculus\n\nIntroduction to PHP and Data structures\n\nIntroduction to Graph Theory\n\nProgramming Intelligence\n\nMediawiki Administrative tutorial guide\n\n```"]