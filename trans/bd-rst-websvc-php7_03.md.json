["```php\ncreate DATABASE blog;\n```", "```php\nCREATE TABLE `blog`.`users` (\n `id` INT NOT NULL AUTO_INCREMENT ,\n `name` VARCHAR(100) NOT NULL ,\n `email` VARCHAR(50) NOT NULL ,\n `password` VARCHAR(50) NOT NULL ,\n PRIMARY KEY (`id`), \n UNIQUE `email_unique` (`email`))\nENGINE = InnoDB;\n```", "```php\nINSERT INTO `users` (`id`, `name`, `email`, `password`)\n VALUES \n(NULL, 'Haafiz', 'kaasib@gmail.com', '$2y$10$ZGZkZmVyZXJlM2ZkZjM0Z.rUgJrCXgyCgUfAG1ds6ziWC8pgLiZ0m'), \n(NULL, 'Ali', 'abc@email.com', '$2y$10$ZGZkZmVyZXJlM2ZkZjM0Z.rUgJrCXgyCgUfAG1ds6ziWC8pgLiZ0m');\n```", "```php\npassword_hash(\"qwerty\", PASSWORD_DEFAULT, ['salt'=>'dfdferere3fdf34dfdfdsfdnuJ$er']);\n/* returns $2y$10$ZGZkZmVyZXJlM2ZkZjM0Z.rUgJrCXgyCgUfAG1ds6ziWC8pgLiZ0m\n*/\n```", "```php\nCREATE TABLE `blog`.`posts` ( \n `id` INT NOT NULL AUTO_INCREMENT ,\n `title` VARCHAR(100) NOT NULL , \n `status` ENUM('draft', 'published') NOT NULL DEFAULT 'draft' ,\n `content` TEXT NOT NULL ,\n `user_id` INT NOT NULL ,\n PRIMARY KEY (`id`), INDEX('user_id')\n) \nENGINE = InnoDB;\n\n```", "```php\nALTER TABLE `posts` \nADD CONSTRAINT `user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n```", "```php\nCREATE TABLE `blog`.`comments` ( \n `id` INT NOT NULL AUTO_INCREMENT ,\n `comment` VARCHAR(250) NOT NULL ,\n `post_id` INT NOT NULL ,\n `user_id` INT NOT NULL ,\n PRIMARY KEY (`id`), INDEX(`post_id`), INDEX(`user_id`)\n) ENGINE = InnoDB;\n```", "```php\nALTER TABLE `comments` ADD CONSTRAINT `post_id_comment_foreign` FOREIGN KEY (`post_id`) REFERENCES `posts`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT; \n\nALTER TABLE `comments` ADD CONSTRAINT `user_id_comment_foreign` FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT;\n```", "```php\n$ mkdir ~/blog //create blog directory\n$ cd ~/blog //chang directory to blog directory\n$ mkdir api //create api directory inside blog directory ~/blog\n$ cd api //change directory to api directory\n```", "```php\n<?php\n\necho \"hello World through PHP built-in server\";\n```", "```php\n~/blog/api$ php -S localhost:8000\n```", "```php\n<?php   ini_set('display_errors', 1); error_reporting(E_ALL);   require __DIR__.\"/../core/bootstrap.php\";\n```", "```php\n<?php   require __DIR__.'/DB.php'; require __DIR__.'/Router.php'; require __DIR__.'/../routes.php';\nrequire __DIR__ .'/../config.php';   $router = new Router; $router->setRoutes($routes);   $url = $_SERVER['REQUEST_URI']; require __DIR__.\"/../api/\".$router->direct($url); \n```", "```php\n<?php   $routes = [\n  'posts' => 'posts.php',\n  'comments' => 'comments.php' ]; \n```", "```php\n<?php /**\n * Config File */ $db = [\n  'host' => 'localhost',\n  'username' => 'root',\n  'password' => '786' ];\n```", "```php\n<?php   class DB {    function connect($db)\n {  try {\n  $conn = new PDO(\"mysql:host={$db['host']};dbname=blog\", $db['username'], $db['password']);    // set the PDO error mode to exception\n  $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);    return $conn;\n } catch (PDOException $exception) {\n  exit($exception->getMessage());\n } }  }\n```", "```php\n<?php   class Router {    private $routes = [];    function setRoutes(Array $routes) {\n  $this->routes = $routes;\n }    function getFilename(string $url) {\n  foreach($this->routes as $route => $file) {\n  if(strpos($url, $route) !== false){\n  return $file;\n } } } }\n```", "```php\n<?php   require __DIR__ . '/DB.php'; require __DIR__.'/Router.php'; require __DIR__.'/../routes.php';   $router = new Router; $router->setRoutes($routes);   $url = $_SERVER['REQUEST_URI']; require __DIR__.\"/../api/\".$router->getFilename($url);\n```", "```php\n<?php   echo \"Posts will come here\"; \n```", "```php\n<?php   $url = $_SERVER['REQUEST_URI'];\n\n// checking if slash is first character in route otherwise add it if(strpos($url,\"/\") !== 0){\n  $url = \"/$url\"; }    if($url == '/posts' && $_SERVER['REQUEST_METHOD'] == 'GET') {\n  $posts = getAllPosts();\n  echo json_encode($posts); }   function getAllPosts() {\n  return [\n [  'id' => 1,\n  'title' => 'First Post',\n  'content' => 'It is all about PHP'\n  ],\n [  'id' => 2,\n  'title' => 'Second Post',\n  'content' => 'RESTful web services'\n  ],\n ]; }\n```", "```php\n<?php   $url = $_SERVER['REQUEST_URI']; // checking if slash is first character in route otherwise add it  if(strpos($url,\"/\") !== 0){\n  $url = \"/$url\"; }   $dbInstance = new DB();\n$dbConn = $dbInstance->connect($db**);**   if($url == '/posts' && $_SERVER['REQUEST_METHOD'] == 'GET') {\n  $posts = getAllPosts($dbConn);\n  echo json_encode($posts); }   ;;\nfunction getAllPosts($db) {\n $statement = $db->prepare(\"SELECT * FROM posts\");\n $statement->execute();\n $result = $statement->setFetchMode(PDO::FETCH_ASSOC);\n return $statement->fetchAll();\n}\n```", "```php\n<?php   $url = $_SERVER['REQUEST_URI'];  // checking if slash is first character in route otherwise add it  if(strpos($url,\"/\") !== 0){\n  $url = \"/$url\"; }    $dbInstance = new DB(); $dbConn = $dbInstance->connect($db);   if($url == '/posts' && $_SERVER['REQUEST_METHOD'] == 'GET') {\n  $posts = getAllPosts($dbConn);\n  echo json_encode($posts); }   if($url == '/posts' && $_SERVER['REQUEST_METHOD'] == 'POST') {\n $input = $_POST;\n $postId = addPost($input, $dbConn);\n if($postId){\n     $input['id'] = $postId;\n     $input['link'] = \"/posts/$postId\";\n }\n\n echo json_encode($input); **}**     function getAllPosts($db) {\n  $statement = $db->prepare(\"SELECT * FROM posts\");\n  $statement->execute();\n  $result = $statement->setFetchMode(PDO::FETCH_ASSOC);\n  return $statement->fetchAll(); }  function addPost($input, $db){\n $sql = \"INSERT INTO posts \n (title, status, content, user_id) \n VALUES \n (:title, :status, :content, :user_id)\";\n\n $statement = $db->prepare($sql);\n\n $statement->bindValue(':title', $input['title']);\n $statement->bindValue(':status', $input['status']);\n $statement->bindValue(':content', $input['content']);\n $statement->bindValue(':user_id', $input['user_id']);\n\n $statement->execute();\n\n return $db->lastInsertId();\n}\n```", "```php\nfunction addPost($input, $db){    $sql = \"INSERT INTO posts \n          (title, status, content, user_id) \n          VALUES \n          (:title, :status, :content, :user_id)\";    $statement = $db->prepare($sql);   bindAllValues($statement, $input**);**    $statement->execute();    return $db->lastInsertId(); }\n```", "```php\nfunction bindAllValues($statement, $params){\n  $allowedFields = ['title', 'status', 'content', 'user_id'];    foreach($params as $param => $value){\n  if(in_array($param, $allowedFields)){\n  $statement->bindValue(':'.$param, $value);\n } }    return $statement; }\n```", "```php\nif(preg_match(\"/posts\\/([0-9])+/\", $url, $matches) && $_SERVER['REQUEST_METHOD'] == 'GET'){\n  $postId = $matches[1];\n  $post = getPost($dbConn, $postId);    echo json_encode($post); }\n```", "```php\nfunction getPost($db, $id) {\n  $statement = $db->prepare(\"SELECT * FROM posts where id=:id\");\n  $statement->bindValue(':id', $id);\n  $statement->execute();    return $statement->fetch(PDO::FETCH_ASSOC); }\n```", "```php\n//Code to update post, if /posts/{id} and method is PATCH\n\nif(preg_match(\"/posts\\/([0-9])+/\", $url, $matches) && $_SERVER['REQUEST_METHOD'] == 'PATCH'){\n  $input = $_GET;\n  $postId = $matches[1];\n updatePost($input, $dbConn, $postId);    $post = getPost($dbConn, $postId);\n  echo json_encode($post); }\n\n/**\n * Get fields as parameters to set in record * * @param $input\n * @return string\n */ function getParams($input) {\n  $allowedFields = ['title', 'status', 'content', 'user_id'];    $filterParams = [];\n  foreach($input as $param => $value){\n  if(in_array($param, $allowedFields)){\n  $filterParams[] = \"$param=:$param\";\n } }    return implode(\", \", $filterParams); }     /**\n * Update Post * * @param $input\n * @param $db\n * @param $postId\n * @return integer\n */ function updatePost($input, $db, $postId){    $fields = getParams($input);    $sql = \"\n UPDATE postsSET $fields           WHERE id=':postId'\n \";    $statement = $db->prepare($sql);\n $statement->bindValue(':id', $id); bindAllValues($statement, $input);    $statement->execute();   return $postId;  }\n```", "```php\n//if url is like /posts/{id} (id is integer) and method is DELETE\n\nif(preg_match(\"/posts\\/([0-9])+/\", $url, $matches) && $_SERVER['REQUEST_METHOD'] == 'DELETE'){\n  $postId = $matches[1];\n deletePost($dbConn, $postId);    echo json_encode([\n  'id'=> $postId,\n  'deleted'=> 'true'\n  ]); }\n\n/**\n * Delete Post record based on ID * * @param $db\n * @param $id\n */ function deletePost($db, $id) { $statement = $db->prepare(\"DELETE FROM posts where id=':id'\");\n    $statement->bindValue(':id', $id);\n    $statement->execute(); }\n```", "```php\nheader(\"Content-Type:application/json\");\n```", "```php\n<?php\n\n$url = $_SERVER['REQUEST_URI'];\nif(strpos($url,\"/\") !== 0){\n    $url = \"/$url\";\n}\n$urlArr = explode(\"/\", $url);\n\n$dbInstance = new DB();\n$dbConn = $dbInstance->connect($db);\n\nheader(\"Content-Type:application/json\");\n\nif($url == '/posts' && $_SERVER['REQUEST_METHOD'] == 'GET') {\n    $posts = getAllPosts($dbConn);\n    echo json_encode($posts);\n}\n\nif($url == '/posts' && $_SERVER['REQUEST_METHOD'] == 'POST') {\n    $input = $_POST;\n    $postId = addPost($input, $dbConn);\n    if($postId){\n        $input['id'] = $postId;\n        $input['link'] = \"/posts/$postId\";\n    }\n\n    echo json_encode($input);\n\n}\n\nif(preg_match(\"/posts\\/([0-9])+/\", $url, $matches) && $_SERVER['REQUEST_METHOD'] == 'PUT'){\n    $input = $_GET;\n    $postId = $matches[1];\n    updatePost($input, $dbConn, $postId);\n\n    $post = getPost($dbConn, $postId);\n    echo json_encode($post);\n}\n\nif(preg_match(\"/posts\\/([0-9])+/\", $url, $matches) && $_SERVER['REQUEST_METHOD'] == 'GET'){\n    $postId = $matches[1];\n    $post = getPost($dbConn, $postId);\n\n    echo json_encode($post);\n}\n\nif(preg_match(\"/posts\\/([0-9])+/\", $url, $matches) && $_SERVER['REQUEST_METHOD'] == 'DELETE'){\n    $postId = $matches[1];\n    deletePost($dbConn, $postId);\n\n    echo json_encode([\n        'id'=> $postId,\n        'deleted'=> 'true'\n    ]);\n}\n\n/**\n * Get Post based on ID\n *\n * @param $db\n * @param $id\n *\n * @return Associative Array\n */\nfunction getPost($db, $id) {\n    $statement = $db->prepare(\"SELECT * FROM posts where id=:id\");\n    $statement->bindValue(':id', $id);\n    $statement->execute();\n\n    return $statement->fetch(PDO::FETCH_ASSOC);\n}\n\n/**\n * Delete Post record based on ID\n *\n * @param $db\n * @param $id\n */\nfunction deletePost($db, $id) {\n    $statement = $db->prepare(\"DELETE FROM posts where id=':id'\");\n    $statement->bindValue(':id', $id);\n    $statement->execute();\n}\n\n/**\n * Get all posts\n *\n * @param $db\n * @return mixed\n */\nfunction getAllPosts($db) {\n    $statement = $db->prepare(\"SELECT * FROM posts\");\n    $statement->execute();\n    $statement->setFetchMode(PDO::FETCH_ASSOC);\n\n    return $statement->fetchAll();\n}\n\n/**\n * Add post\n *\n * @param $input\n * @param $db\n * @return integer\n */\nfunction addPost($input, $db){\n\n    $sql = \"INSERT INTO posts \n          (title, status, content, user_id) \n          VALUES \n          (:title, :status, :content, :user_id)\";\n\n    $statement = $db->prepare($sql);\n\n    bindAllValues($statement, $input);\n\n    $statement->execute();\n\n    return $db->lastInsertId();\n}\n\n/**\n * @param $statement\n * @param $params\n * @return PDOStatement\n */\nfunction bindAllValues($statement, $params){\n    $allowedFields = ['title', 'status', 'content', 'user_id'];\n\n    foreach($params as $param => $value){\n        if(in_array($param, $allowedFields)){\n            $statement->bindValue(':'.$param, $value);\n        }\n    }\n\n    return $statement;\n}\n\n/**\n * Get fields as parameters to set in record\n *\n * @param $input\n * @return string\n */\nfunction getParams($input) {\n    $allowedFields = ['title', 'status', 'content', 'user_id'];\n\n    $filterParams = [];\n    foreach($input as $param => $value){\n        if(in_array($param, $allowedFields)){\n            $filterParams[] = \"$param=:$param\";\n        }\n    }\n\n    return implode(\", \", $filterParams);\n}\n\n/**\n * Update Post\n *\n * @param $input\n * @param $db\n * @param $postId\n * @return integer\n */\nfunction updatePost($input, $db, $postId){\n\n    $fields = getParams($input);\n    $input['postId'] = $postId;\n\n    $sql = \"\n          UPDATE posts \n          SET $fields \n          WHERE id=':postId'\n           \";\n\n    $statement = $db->prepare($sql);\n\n    bindAllValues($statement, $input);\n\n    $statement->execute();\n\n    return $postId;\n\n}\n```"]