- en: Chapter 6. Replace new with Dependency Injection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。用依赖注入替换new
- en: Even though we have removed all `global` calls in our classes, they are likely
    to retain other hidden dependencies. In particular, we are probably creating new
    object instances in inappropriate locations, tightly coupling the classes together.
    These things make it much harder to write tests and to see what the internal dependencies
    are.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们在类中删除了所有`global`调用，它们可能仍然保留其他隐藏的依赖关系。特别是，我们可能在不合适的位置创建新的对象实例，将类紧密耦合在一起。这些事情使得编写测试和查看内部依赖关系变得更加困难。
- en: Embedded instantiation
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式实例化
- en: 'After converting the `global` calls in a hypothetical *ItemsGateway* class,
    we might have something like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在假设的*ItemsGateway*类中转换`global`调用后，我们可能会得到类似这样的代码：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are two dependency injection issues here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个依赖注入问题：
- en: First, the class probably got converted from a function that used `global $db_host`,
    `$db_user`, `$db_pass` and then constructed a `Db` object internally. Our initial
    pass at removing `global` calls got rid of the globals, but it left this `Db`
    dependency in place. This is what we will call a one-time creation dependency.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，该类可能是从一个使用`global $db_host`，`$db_user`，`$db_pass`的函数转换而来，然后在内部构造了一个`Db`对象。我们最初删除`global`调用时摆脱了全局变量，但是保留了这个`Db`依赖。这就是我们所谓的一次性创建依赖。
- en: Second, the `selectAll()` method creates new `Item` objects, and as such is
    dependent on the `Item` class. We cannot see this dependency from the outside
    of the class. This is what we will call a repeated creation dependency.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，`selectAll()`方法创建新的`Item`对象，因此依赖于`Item`类。我们无法从类的外部看到这种依赖关系。这就是我们所谓的重复创建依赖。
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As far as I know, the terms one-time creation dependency and repeated creation
    dependency are not industry-standard terms. They are for the purposes of this
    book only. Please inform the author if you are aware of similar concepts that
    have industry-standard terms.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 据我所知，一次性创建依赖和重复创建依赖这两个术语并不是行业标准术语。它们仅适用于本书的目的。如果您知道有类似概念的行业标准术语，请通知作者。
- en: The point of dependency injection is to push the dependencies in from the outside,
    thereby revealing the dependencies in our classes. Using a `new` keyword inside
    a class is in opposition to that idea, so we need to work through the codebase
    to remove that keyword from our non-`Factory` classes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入的目的是从外部推送依赖项，从而揭示我们类中的依赖关系。在类内部使用`new`关键字与这个想法相悖，因此我们需要通过代码库来删除非`Factory`类中的该关键字，并注入必要的依赖项。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**What is a Factory Object?**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是工厂对象？**'
- en: One of the keys to dependency injection is that an object may either create
    other objects, *or* it may operate on other objects, *but not both*. Any time
    we need to create an object inside another object, we let that work be done by
    something called a *Factory* with a `newInstance()` method and inject that *Factory*
    into the object that needs to do creation. The `new` keyword is restricted to
    being used inside *Factory* objects. This allows us to switch out *Factory* objects
    any time we need to create different kinds of objects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入的关键之一是一个对象可以创建其他对象，*或者*它可以操作其他对象，*但不能两者兼而有之*。每当我们需要在另一个对象内部创建一个对象时，我们让`Factory`来完成这项工作，`Factory`有一个`newInstance()`方法，并将该`Factory`注入到需要进行创建的对象中。`new`关键字仅限于在*Factory*对象内部使用。这使我们能够随时切换*Factory*对象，以便创建不同类型的对象。
- en: The replacement process
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换过程
- en: 'The next step, then, is to remove all use of `new` keyword from our non-*Factory*
    classes, and inject the necessary dependencies instead. We will also use *Factory*
    objects as needed to deal with repeated creation dependencies. This is the general
    process we will follow:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是从非*Factory*类中删除所有`new`关键字的使用，并注入必要的依赖项。我们还将根据需要使用*Factory*对象来处理重复创建依赖。这是我们将遵循的一般流程：
- en: Find a class with the `new` keyword in it. If the class is already a `Factory`,
    we can ignore it and move on.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找带有`new`关键字的类。如果该类已经是一个`Factory`，我们可以忽略它并继续。
- en: 'For each one-time creation in the class:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于类中的每个一次性创建：
- en: Extract each instantiation to a constructor parameter.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个实例化提取到构造函数参数中。
- en: Assign the constructor parameter to a property.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将构造函数参数分配给属性。
- en: Remove any constructor parameters and class properties that are used only for
    the `new` call.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除仅用于`new`调用的构造函数参数和类属性。
- en: 'For each repeated creation in the class:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于类中的每个重复创建：
- en: Extract each block of creation code to a new `Factory` class.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将每个创建代码块提取到一个新的`Factory`类中。
- en: Create a constructor parameter for each `Factory` and assign it to a property.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个`Factory`创建一个构造函数参数，并将其分配给一个属性。
- en: Modify the previous creation logic in the class to use the *Factory*.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改类中先前的创建逻辑，以使用*Factory*。
- en: Change all instantiation calls for the modified class throughout the project
    so that the necessary dependency objects are passed to the constructor.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改项目中对修改后的类的所有实例化调用，以便将必要的依赖对象传递给构造函数。
- en: Spot check, commit, push, and notify QA.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 抽查，提交，推送，并通知QA。
- en: Repeat with the next `new` call that is not inside a *Factory* object.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复处理下一个不在*Factory*对象内部的`new`调用。
- en: Find a new keyword
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找`new`关键字
- en: 'As in other steps, we begin this one by using our project-wide search facility
    to look for the `new` keyword in our class files using the following regular expression:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他步骤一样，我们首先使用项目范围的搜索工具，使用以下正则表达式在我们的类文件中查找`new`关键字：
- en: 'Search for:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We have two kinds of creation to look for: one-time and repeated. How can we
    tell the difference? In general:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两种创建方式要查找：一次性和重复。我们如何区分？一般来说：
- en: If the instantiation is assigned to a property, and is never changed, it is
    most likely a one-time creation. Generally, we see this in constructors.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果实例化分配给一个属性，并且从未更改，那么它很可能是一次性创建。通常，我们在构造函数中看到这一点。
- en: If the instantiation occurs in a non-constructor method, it is most likely a
    repeated creation, because it occurs each time the method is called.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果实例化发生在非构造方法中，很可能是重复创建，因为它在每次调用方法时都会发生。
- en: Extract One-Time creation to dependency injection
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将一次性创建提取到依赖注入
- en: 'Let''s say we find the *ItemsGateway* class listed above when we search for
    the `new` keyword, and encounter the constructor:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在搜索`new`关键字时找到了上面列出的*ItemsGateway*类，并遇到了构造函数：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On examining the class, we find that `$this->db` is assigned once as a property.
    This appears to be a one-time creation. In addition, it appears that at least
    some of the existing constructor parameters are used only for the `Db` instantiation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查类时，我们发现`$this->db`被分配为一个属性。这似乎是一次性创建。此外，似乎至少有一些现有的构造函数参数仅用于`Db`实例化。
- en: 'We proceed to remove the instantiation call entirely, along with the properties
    used only for the instantiation call, and replace the constructor parameters with
    a single Db parameter:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续完全删除实例化调用，以及仅用于实例化调用的属性，并用单个Db参数替换构造函数参数：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Extract repeated creation to factory
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将重复创建提取到工厂
- en: If we find a repeated creation instead of a one-time creation, we have a different
    task to accomplish. Let's return to the *ItemsGateway* class, but this time we'll
    look at the `selectAll()` method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们发现重复创建而不是一次性创建，我们有不同的任务要完成。让我们返回到*ItemsGateway*类，但这次我们将查看`selectAll()`方法。
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can see here that the `new` keyword occurs in a loop inside a method. This
    is clearly a case of repeated creation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`new`关键字在方法内的循环中出现。这显然是重复创建的情况。
- en: 'First, we extract the creation code to its own new class. Because the code
    creates an `Item` object, we will call the class *ItemFactory*. In it, we will
    create a method for returning new instances of `Item` objects:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建代码提取到自己的新类中。因为代码创建了一个`Item`对象，我们将称该类为*ItemFactory*。在其中，我们将创建一个方法来返回`Item`对象的新实例：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The only purpose of a *Factory* is to create new objects. It should not have
    any other functionality. It will be tempting to place other behavior in a `Factory`
    in a bid to centralize common logic. Resist this temptation!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*Factory*的唯一目的是创建新对象。它不应该有任何其他功能。将其他行为放在`Factory`中以集中常见逻辑将是诱人的。抵制这种诱惑！'
- en: Now that we have extracted the creation code to a separate class, we will modify
    the *ItemsGateway* to take an *ItemFactory* parameter, retain it in a property,
    and use the *ItemFactory* to create *Item* objects.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将创建代码提取到一个单独的类中，我们将修改*ItemsGateway*以接受一个*ItemFactory*参数，将其保留在属性中，并使用*ItemFactory*来创建*Item*对象。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Change instantiation calls
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改实例化调用
- en: Because we have changed the constructor signature, all the existing instantiations
    of *ItemsGateway* are now broken. We need to find all the places in the code where
    the *ItemsGateway* class is instantiated, and change the instantiations to pass
    a properly-constructed `Db` object and an *ItemFactory*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经改变了构造函数的签名，所有现有的*ItemsGateway*实例化现在都已经失效。我们需要找到代码中实例化*ItemsGateway*类的所有地方，并将实例化更改为传递一个正确构造的`Db`对象和一个*ItemFactory*。
- en: 'To do so, we use our project-wide search facility to search using a regular
    expression for our changed class name:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们使用项目范围的搜索工具，使用正则表达式搜索我们更改后的类名：
- en: 'Search for:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Doing so will give us a list of all instantiations in the project. We need to
    review each result and change it by hand to instantiate the dependencies and pass
    them to the *ItemsGateway*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做将给我们一个项目中所有实例化的列表。我们需要审查每个结果，并手动更改它们以实例化依赖项并将它们传递给*ItemsGateway*。
- en: 'For example, if a page script from the search results looks like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果搜索结果中的页面脚本看起来像这样：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need to change it to something more like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将其更改为更像这样的内容：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Do this for each instantiation of the changed class.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对更改后的类的每个实例化都要这样做。
- en: Spot Check, Commit, Push, Notify QA
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽查、提交、推送、通知QA
- en: Now that we have changed the class and the instantiations of the class throughout
    the codebase, we need to make sure our legacy application works. Again, we have
    no formal testing process in place, so we need to run or otherwise invoke the
    parts of the application that use the changed class and look for errors.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更改了整个代码库中的类和实例化的类，我们需要确保我们的旧应用程序正常工作。同样，我们没有建立正式的测试流程，因此我们需要运行或以其他方式调用使用更改后的类的应用程序部分，并查找错误。
- en: Once we feel sure that the application still operates properly, we commit the
    code, push it to our central repository, and notify QA that we are ready for them
    to test our new additions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确信应用程序仍然正常运行，我们就提交代码，将其推送到我们的中央仓库，并通知QA我们已经准备好让他们测试我们的新添加内容。
- en: Do ... While
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做...直到
- en: Search for the next `new` keyword in a class, and start the process all over
    again. When we find that `new` keywords exist only in *Factory* classes, our job
    is complete.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在类中搜索下一个`new`关键字，并重新开始整个过程。当我们发现`new`关键字仅存在于*Factory*类中时，我们的工作就完成了。
- en: Common Questions
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: What About Exceptions and SPL Classes?
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异常和SPL类怎么办？
- en: 'In this chapter, we concentrate on removing all use of the `new` keyword, except
    inside *Factory* objects. I believe there are two reasonable exceptions to this
    rule: *Exception* classes themselves, and certain built-in PHP classes, such as
    the SPL classes.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们集中于删除所有对`new`关键字的使用，除了*Factory*对象内部。我相信有两个合理的例外情况：*Exception*类本身，以及某些内置的PHP类，例如SPL类。
- en: It would be perfectly consistent with the process described in this chapter
    to create an `ExceptionFactory` class, inject it into objects that throw exceptions,
    and then use the `ExceptionFactory` to create the `Exception` objects to be thrown.
    This strikes even me as going a bit too far. I think that `Exception` objects
    are a reasonable exception to the rule of no `new` outside `Factory` objects.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本章描述的过程创建一个`ExceptionFactory`类，将其注入到抛出异常的对象中，然后使用`ExceptionFactory`创建要抛出的`Exception`对象是完全一致的。即使对我来说，这似乎有点过分。我认为`Exception`对象是规则之外的一个合理例外。
- en: Similarly, I think built-in PHP classes are also frequently an exception to
    the rule. While it would be nice to have, say, an *ArrayObjectFactory* or an *ArrayIteratorFactory*
    to create *ArrayObject* and *ArrayIterator* classes that are provided by SPL itself,
    it may be a little too much. Creating these kinds of objects directly inside the
    objects that use them is usually all right.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我认为内置的PHP类通常也是规则的例外。虽然拥有一个*ArrayObjectFactory*或者*ArrayIteratorFactory*来创建SPL本身提供的*ArrayObject*和*ArrayIterator*类会很好，但可能有点过分。通常直接在使用它们的对象内部创建这些类型的对象是可以的。
- en: However, we need to be careful. Creating a complex or otherwise powerful object
    like a `PDO` connection directly inside the class that needs it is probably overstepping
    our bounds. It's tough to describe a good rule of thumb here; when in doubt, err
    on the side of dependency injection.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要小心。在需要的类内部直接创建像`PDO`连接这样复杂或者强大的对象可能会超出我们的范围。很难描述一个好的经验法则；当有疑问时，最好依赖注入。
- en: What about Intermediary Dependencies?
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中间依赖怎么样？
- en: Sometime we will discover classes that have dependencies, and the dependencies
    themselves have dependencies. These intermediary dependencies are passed to the
    outside class, which carries them along only so that the internal objects can
    be instantiated with them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们会发现类有依赖项，而这些依赖项本身也有依赖项。这些中间依赖项被传递给外部类，只是为了让内部对象可以用它们实例化。
- en: 'For example, say we have a `Service` class that needs an *ItemsGateway*, which
    itself needs a `Db` connection. Before removing `global` variables, the `Service`
    class might have looked like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个需要*ItemsGateway*的`Service`类，它本身需要一个`Db`连接。在移除`global`变量之前，`Service`类可能看起来像这样：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After removing `global` variables, we are left with a `new` keyword, but we
    still need the `Db` object as a dependency for *ItemsGateway*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在移除`global`变量之后，我们只剩下一个`new`关键字，但我们仍然需要`Db`对象作为*ItemsGateway*的依赖：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How do we successfully remove the `new` keyword here? The *ItemsGateway* needs
    a `Db` connection. The `Db` connection is never used by the `Service` directly;
    it is used only for building the *ItemsGateway*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里如何成功移除`new`关键字？*ItemsGateway*需要一个`Db`连接。`Service`并不直接使用`Db`连接；它只用于构建*ItemsGateway*。
- en: 'The solution in cases like this is to inject a fully-constructed *ItemsGateway*.
    First, we modify the `Service` class to receive its real dependency, the *ItemsGateway*:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下的解决方案是注入一个完全构建的*ItemsGateway*。首先，我们修改`Service`类以接收它的真正依赖，*ItemsGateway*：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Second, throughout the entire legacy application, we change all instantiations
    of the *Service* to pass an *ItemsGateway*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，在整个传统应用程序中，我们改变了所有*Service*的实例化，以传递*ItemsGateway*。
- en: 'For example, a page script might have done this when using `global` variables
    everywhere:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当到处使用`global`变量时，页面脚本可能会这样做：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And then we changed it to inject the intermediary dependency after removing
    globals:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们改变了它，以在移除全局变量后注入中间依赖：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'But we should finally change it to inject the real dependency:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们最终应该改变它以注入真正的依赖：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Isn't this a lot of code?
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是不是很多代码？
- en: I sometimes hear the complaint that using dependency injection means a lot of
    extra code to do the same thing as before.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我有时听到抱怨，使用依赖注入意味着要写很多额外的代码来做以前的事情。
- en: It's true. Having a call like this, where the class manages its own dependencies
    internally.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 没错。像这样的调用，类内部管理自己的依赖关系。
- en: 'Without dependency injection:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 没有依赖注入：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is obviously less code than using dependency injection by creating the
    dependencies and using `Factory` objects.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然比通过创建依赖项并使用`Factory`对象使用依赖注入的代码要少。
- en: 'With dependency injection:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用依赖注入：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The real issue here, though, is not more code. The issues are more testable,more
    clear, and more decoupled.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，真正的问题不是更多的代码。问题是更易于测试，更清晰，更解耦。
- en: In looking at the first example, how can we tell what *ItemsGateway* needs to
    operate? What other parts of the system will it affect? It's very difficult to
    tell without examining the entire class and looking for `global` and `new` keywords.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看第一个例子时，我们如何知道*ItemsGateway*需要什么来运行？它会影响系统的哪些其他部分？没有检查整个类并寻找`global`和`new`关键字是非常困难的。
- en: In looking at the second example, it is very easy to tell what the class needs
    to operate, what we can expect it to create, and what parts of the system it interacts
    with. These things additionally make it easier to test the class later.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看第二个例子时，很容易知道类需要什么来运行，我们可以期望它创建什么，以及它与系统的哪些部分交互。这些额外的东西使得以后更容易测试这个类。
- en: Should a factory create collections?
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工厂应该创建集合吗？
- en: 'In the examples above, our `Factory` class only creates a single `newInstance()`
    of an object. If we regularly create collections of objects, it may be reasonable
    to add a `newCollection()` method to our `Factory`. For example, given our *ItemFactory*
    above, we may do something like the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们的`Factory`类只创建一个对象的`newInstance()`。如果我们经常创建对象的集合，可能合理地向我们的`Factory`添加一个`newCollection()`方法。例如，给定我们上面的*ItemFactory*，我们可能会做如下事情：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We may go so far as to create an `ItemCollection` class for the collection instead
    of using an array. If so, it would be reasonable to use a `new` keyword inside
    our `ItemFactory` to create the `ItemCollection` instance. (The `ItemCollection`
    class is omitted here).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以创建一个`ItemCollection`类来代替使用数组进行集合。如果是这样，我们可以在`ItemFactory`内部使用`new`关键字来创建`ItemCollection`实例是合理的。（这里省略了`ItemCollection`类）。
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Indeed, we may wish to have a separate *ItemCollectionFactory*, using an injected
    *ItemFactory* to create Item objects, with its own `newInstance()` method to return
    a new *ItemCollection*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们可能希望有一个单独的*ItemCollectionFactory*，使用一个注入的*ItemFactory*来创建Item对象，具有自己的`newInstance()`方法来返回一个新的*ItemCollection*。
- en: There are many variations on the proper use of `Factory` objects. The key is
    to keep object creation (and related operations) separate from object manipulation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多关于正确使用`工厂`对象的变种。关键是将对象创建（以及相关操作）与对象操作分开。
- en: Can we automate all these Injections?
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们能自动化所有这些注入吗？
- en: All the dependency injection we have been doing so far has been manual injection,
    where we create the dependencies ourselves and then inject them as we create the
    objects we need. This can be a tedious process. Who wants to create a `Db` object
    over and over again just so it can be injected into a variety of `Gateway` classes?
    Isn't there some way to automate that?
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在进行手动注入依赖，我们自己创建依赖，然后在创建所需的对象时注入它们。这可能是一个乏味的过程。谁愿意一遍又一遍地创建`Db`对象，只是为了将其注入到各种`Gateway`类中？难道没有一种自动化的方法吗？
- en: Yes, there is. It is called a `Container`. A `Container` may go by various synonyms
    indicating how it is to be used. A Dependency Injection `Container` is intended
    to be used always-and-only outside the non-`Factory` classes, whereas an identical
    `Container` implementation going by the name `Service Locator` is intended to
    be used `inside` non-`Factory` objects.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有的，就是叫做`容器`。`容器`可能有各种同义词，表示它的用途。依赖注入`容器`旨在始终且仅在非`工厂`类外部使用，而以`服务定位器`为名的相同`容器`实现旨在在非`工厂`对象内部使用。
- en: 'Using a `Container` brings distinct advantages:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`容器`带来了明显的优势：
- en: We can create shared services that are instantiated only when they are called.
    For example, the `Container` can house a `Db` instance that only gets created
    when we ask the `Container` for a database connection; the connection is created
    once and then reused over and over again.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以创建共享服务，只有在调用它们时才实例化。例如，`容器`可以容纳一个`Db`实例，只有当我们要求`容器`获取数据库连接时才会创建；连接被创建一次，然后一遍又一遍地重复使用。
- en: We can put complex object creation inside the `Container`, where objects that
    need multiple services for their constructor parameters can retrieve those services
    from the `Container` inside their own creation logic.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以将复杂的对象创建放在`容器`内部，需要多个服务作为构造函数参数的对象可以从`容器`内部检索这些服务，并在它们自己的创建逻辑中使用。
- en: 'But using a `Container` has disadvantages as well:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 但是使用`容器`也有缺点：
- en: We have to drastically change how we think about our object creation, and where
    those objects live in the application. In the end this is a good thing, but it
    can be trouble in the interim.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须彻底改变我们对对象创建的思考方式，以及这些对象在应用程序中的位置。最终这是件好事，但在过渡期可能会有麻烦。
- en: A `Container` used as a Service Locator replaces our `global` variables with
    a fancy new toy that has many of the same problems as `global`. The `Container`
    hides dependencies because it is called only from inside the class that needs
    dependencies.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为服务定位器使用的`容器`用一个新的花哨玩具取代了我们的`global`变量，它有许多与`global`相同的问题。`容器`隐藏了依赖，因为它只能从需要依赖的类内部调用。
- en: At this stage of modernizing our legacy application it can be very tempting
    to start using a `Container` to automate dependency injection for use. I suggest
    that we do not add one just now, because so much of our legacy application remains
    to be modernized. We will add one eventually, but it will be as the very last
    step of our modernization process.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们现代化遗留应用程序的这个阶段，很容易开始使用`容器`来自动化依赖注入。我建议我们现在不要添加，因为我们的遗留应用程序还有很多需要现代化的地方。我们最终会添加，但这将是我们现代化过程的最后一步。
- en: Review and next steps
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: We have now made great strides in modernizing our application. Removing `global`
    and `new` keywords in favor of dependency injections has already improved the
    quality of the codebase and made tracking down bugs a lot easier, if only because
    modifying a variable over here no longer causes a variable over there to be affected
    at a distance. Our page scripts might be somewhat longer, because we have to create
    the dependencies, but we can now see exactly what parts of the system we are interacting
    with much more clearly.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在现代化我们的应用程序上取得了巨大的进步。删除`global`和`new`关键字，改用依赖注入已经改善了代码库的质量，并且使得追踪错误变得更加容易，因为在这里修改变量不再会导致远处的变量受到影响。我们的页面脚本可能会有些更长，因为我们必须创建依赖，但现在我们可以更清楚地看到我们与系统的哪些部分进行交互。
- en: Our next step is to examine our newly refactored classes and start writing tests
    for them. That way, when we start making changes to the classes, we will know
    if we broke any previously existing behavior.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是检查我们新重构的类，并开始为它们编写测试。这样，当我们开始对类进行更改时，我们将知道是否破坏了以前存在的行为。
