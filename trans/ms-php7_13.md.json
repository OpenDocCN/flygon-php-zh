["```php\n<?php   class Customer {\n  protected $name;    public function loadByEmail($email)\n {  $mysqli = new mysqli('127.0.0.1', 'foggy', 'h4P9niq5', 'sakila');    $statement = $mysqli->prepare('SELECT * FROM customer WHERE email = ?');\n  $statement->bind_param('s', $email);\n  $statement->execute();    $customer = $statement->get_result()->fetch_object();    $this->name = $customer->first_name . ' ' . $customer->last_name;    return $this;\n } }   $customer = new Customer(); $customer->loadByEmail('MARY.SMITH@sakilacustomer.org');\n\n```", "```php\n<?php   class Customer {\n  public function loadByEmail($email, $mysqli)\n {  // ...\n  } }   $mysqli  = new mysqli('127.0.0.1', 'foggy', 'h4P9niq5', 'sakila');  $customer = new Customer(); $customer->loadByEmail('MARY.SMITH@sakilacustomer.org', $mysqli);\n\n```", "```php\n<?php   class Customer {\n  public function __construct($mysqli)\n {  // ...\n  }    public function loadByEmail($email)\n {  // ...\n  } }   $mysqli = new mysqli('127.0.0.1', 'foggy', 'h4P9niq5', 'sakila');   $customer = new Customer($mysqli); $customer->loadByEmail('MARY.SMITH@sakilacustomer.org');\n\n```", "```php\n<?php   class App {\n  protected $config;\n  protected $logger;    public function __construct($config, $logger)\n {  $this->config = $config;\n  $this->logger = $logger;\n }    public function run()\n {  $this->config->setValue('executed_at', time());\n  $this->logger->log('executed');\n } }   class Config {\n  protected $config = [];    public function setValue($path, $value)\n {  // implementation\n  } }   class Logger {\n  public function log($message)\n {  // implementation\n  } }   $config = new Config(); $logger = new Logger();   $app = new App($config, $logger); $app->run();\n\n```", "```php\n<?php   class App {\n  protected $config;\n  protected $logger;    public function __construct(Config $config, Logger $logger)\n {  $this->config = $config;\n  $this->logger = $logger;\n }    public function run()\n {  $this->config->setValue('executed_at', time());\n  $this->logger->log('executed');\n } }   class Config {\n  protected $config = [];    public function setValue($path, $value)\n {  // implementation\n  } }   class Logger {\n  public function log($message)\n {  // implementation\n  } }   $config = new Config(); $logger = new Logger();   $app = new App($config, $logger); $app->run();\n\n```", "```php\n<?php   class App {\n  protected $config;\n  protected $logger;    public function __construct(ConfigInterface $config, LoggerInterface $logger)\n {  $this->config = $config;\n  $this->logger = $logger;\n }    public function run()\n {  $this->config->setValue('executed_at', time());\n  $this->logger->log('executed');\n } }   interface ConfigInterface {\n  public function getValue($value);    public function setValue($path, $value); }   interface LoggerInterface {\n  public function log($message); }   class Config implements ConfigInterface {\n  protected $config = [];    public function getValue($value)\n {  // implementation\n  }    public function setValue($path, $value)\n {  // implementation\n  } }   class Logger implements LoggerInterface {\n  public function log($message)\n {  // implementation\n  } }   $config = new Config(); $logger = new Logger();   $app = new App($config, $logger); $app->run();\n\n```", "```php\ncomposer require symfony/dependency-injection\n\n```", "```php\ncomposer require symfony/yaml\ncomposer require symfony/config\n\n```", "```php\nservices:\n  config:\n    class: Config\n logger:\n    class: Logger\n app:\n    class: App\n autowire: true\n\n```", "```php\n<?php   require_once __DIR__ . '/vendor/autoload.php';   use Symfony\\Component\\DependencyInjection\\ContainerBuilder; use Symfony\\Component\\Config\\FileLocator; use Symfony\\Component\\DependencyInjection\\Loader\\YamlFileLoader;   interface ConfigInterface { /* ... */}\ninterface LoggerInterface { /* ... */}\nclass Config implements ConfigInterface { /* ... */}\nclass Logger implements LoggerInterface { /* ... */}\nclass App { /* ... */}   // Bootstrapping $container = new ContainerBuilder();   $loader = new YamlFileLoader($container, new FileLocator(__DIR__)); $loader->load('container.yml');   $container->compile();   // Client code $app = $container->get('app'); $app->run();\n\n```"]