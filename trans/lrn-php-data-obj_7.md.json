["```php\n/**\n* This is the central Model class. Use its static methods\n* To retrieve a book, author, borrower by ID\n* Or all the books, authors and borrowers\n*/\nclass Model\n{\n/**\n* This is the connection object returned by\n* Model::getConn()\n* @var PDO\n*/\nprivate static $conn = null;\n/**\n* This method returns the connection object.\n* If it has not been yet created, this method\n* instantiates it based on the $connStr, $user and $pass\n* global variables defined in common.inc.php\n* @return PDO the connection object\n*/\nstatic function getConn()\n{\nif(!self::$conn) {\nglobal $connStr, $user, $pass;\ntry\n{\nself::$conn = new PDO($connStr, $user, $pass);\nself::$conn->setAttribute(PDO::ATTR_ERRMODE,\nPDO::ERRMODE_EXCEPTION);\n}\ncatch(PDOException $e)\n{\nshowHeader('Error');\nshowError(\"Sorry, an error has occurred. Please\ntry your request later\\n\" . $e->getMessage());\n}\n}\nreturn self::$conn;\n}\n/**\n* This method returns the list of all books\n* @return PDOStatement\n*/\nstatic function getBooks()\n{\n$sql = \"SELECT * FROM books ORDER BY title\";\n$q = self::getConn()->query($sql);\n$q->setFetchMode(PDO::FETCH_CLASS, 'Book', array());\nreturn $q;\n}\n/**\n* This method returns the number of books in the database\n* @return int\n*/\nstatic function getBookCount()\n{\n$sql = \"SELECT COUNT(*) FROM books\";\n$q = self::getConn()->query($sql);\n$rv = $q->fetchColumn();\n$q->closeCursor();\nreturn $rv;\n}\n/**\n*This method returns a book with given ID\n* @param int $id\n* @return Book\n*/\nstatic function getBook($id)\n{\n$id = (int)$id;\n$sql = \"SELECT * FROM books WHERE id=$id\";\n$q = self::getConn()->query($sql);\n$rv = $q->fetchObject('Book');\n$q->closeCursor();\nreturn $rv;\n}\n/**\n* This method returns the list of all authors\n* @return PDOStatement\n*/\nstatic function getAuthors()\n{\n$sql = \"SELECT * FROM authors ORDER BY lastName, firstName\";\n$q = self::getConn()->query($sql);\n$q->setFetchMode(PDO::FETCH_CLASS, 'Author', array());\nreturn $q;\n}\n/**\n* This method returns the number of authors in the database\n* @return int\n*/\nstatic function getAuthorCount()\n{\n$sql = \"SELECT COUNT(*) FROM authors\";\n$q = self::getConn()->query($sql);\n$rv = $q->fetchColumn();\n$q->closeCursor();\nreturn $rv;\n}\n/**\n*This method returns an author with given ID\n* @param int $id\n* @return Author\n*/\nstatic function getAuthor($id)\n{\n$id = (int)$id;\n$sql = \"SELECT * FROM authors WHERE id=$id\";\n$q = Model::getConn()->query($sql);\n$rv = $q->fetchObject('Author');\n$q->closeCursor();\nreturn $rv;\n}\n/**\n* This method returns the list of all borrowers\n* @return PDOStatement\n*/\nstatic function getBorrowers()\n{\n$sql = \"SELECT * FROM borrowers ORDER BY dt\";\n$q = self::getConn()->query($sql);\n$q->setFetchMode(PDO::FETCH_CLASS, 'Borrower', array());\nreturn $q;\n}\n/**\n* This method returns the number of borrowers in the database\n* @return int\n*/\nstatic function getBorrowerCount()\n{\n$sql = \"SELECT COUNT(*) FROM borrowers\";\n$q = self::getConn()->query($sql);\n$rv = $q->fetchColumn();\n$q->closeCursor();\nreturn $rv;\n}\n/**\n*This method returns a borrower with given ID\n* @param int $id\n* @return BorrowedBook\n*/\nstatic function getBorrower($id)\n{\n$id = (int)$id;\n$sql = \"SELECT * FROM borrowers WHERE id=$id\";\n$q = Model::getConn()->query($sql);\n$rv = $q->fetchObject('Borrower');\n$q->closeCursor();\nreturn $rv;\n}\n}\n\n```", "```php\n/**\n* This class represents a single book\n*/\nclass Book\n{\n/**\n* Return the author object for this book\n* @return Author\n*/\nfunction getAuthor()\n{\nreturn Model::getAuthor($this->author);\n}\n/**\n* This method is used to lend this book to the person\n* specified by $name. It returns the Borrower class\n* instance in case of success, or null in case when we cannot\n* lend this book due to insufficient copies left\n* @param string $name\n* @return Borrower\n*/\nfunction lend($name)\n{\n$conn = Model::getConn();\n$conn->beginTransaction();\ntry\n{\n$stmt = $conn->query(\"SELECT copies FROM books\nWHERE id=$this->id\");\n$copies = $stmt->fetchColumn();\n$stmt->closeCursor();\nif($copies > 0) {\n// If we can lend it\n$conn->query(\"UPDATE books SET copies=copies-1\nWHERE id=$this->id\");\n$stmt = $conn->prepare(\"INSERT INTO borrowers(book, name, dt)\nVALUES(?, ?, ?)\");\n$stmt->execute(array($this->id, $name, time()));\n// Success, get the newly created\n// borrower ID\n$bid = $conn->lastInsertId();\n$rv = Model::getBorrower($bid);\n}\nelse {\n$rv = null;\n}\n$conn->commit();\n}\ncatch(PDOException $e)\n{\n// Something bad happened\n// Roll back and rethrow the exception\n$conn->rollBack();\nthrow $e;\n}\nreturn $rv;\n}\n}\n\n```", "```php\n/**\n* This class represents a single author\n*/\nclass Author\n{\n/**\n* This method returns the list of books\n* written by this author\n* @return PDOStatement\n*/\nfunction getBooks()\n{\n$sql = \"SELECT * FROM books WHERE author=$this->id\nORDER BY title\";\n$q = Model::getConn()->query($sql);\n$q->setFetchMode(PDO::FETCH_CLASS, 'Book', array());\nreturn $q;\n}\n/**\n* This method returns the number of books\n* written by this author\n* @return int\n*/\nfunction getBookCount()\n{\n$sql = \"SELECT COUNT(*) FROM books WHERE author=$this->id\";\n$q = Model::getConn()->query($sql);\n$rv = $q->fetchColumn();\n$q->closeCursor();\nreturn $rv;\n}\n}\n\n```", "```php\n/**\n* This class represents a single borrower\n* (i.e., a record in the borrowers table)\n*/\nclass Borrower\n{\n/**\n* Return the book associated with this borrower\n* @return Book\n*/\nfunction getBook()\n{\nreturn Model::getBook($this->book);\n}\n/**\n* This method \"returns\" a book.\n* After this method call, this object\n* is unusable as it does not represent\n* a data entity any more\n*/\nfunction returnBook()\n{\n$conn = Model::getConn();\n$conn->beginTransaction();\ntry\n{\n$book = $this->getBook();\n$conn->query(\"DELETE FROM borrowers WHERE id=$this->id\");\n$conn->query(\"UPDATE books SET copies=copies+1\nWHERE id=$book->id\");\n$conn->commit();\n}\ncatch(PDOException $e)\n{\n$conn->rollBack();\nthrow $e;\n}\n}\n}\n\n```", "```php\n<?php\n/**\n* This page lists all the books we have\n* PDO Library Management example application\n* @author Dennis Popel\n*/\n// Don't forget the include\ninclude('common.inc.php');\n// Display the header\nshowHeader('Books');\n**// Get the books list\n$books = Model::getBooks();**\n// now create the table\n?>\n**Total books: <?=Model::getBookCount()?>**\n<table width=\"100%\" border=\"1\" cellpadding=\"3\">\n<tr style=\"font-weight: bold\">\n<td>Cover</td>\n<td>Author and Title</td>\n<td>ISBN</td>\n<td>Publisher</td>\n<td>Year</td>\n<td>Summary</td>\n<td>Copies</td>\n<td>Lend</td>\n<td>Edit</td>\n</tr>\n<?php\n// Now iterate over every row and display it\n**while($b = $books->fetch())\n{\n$a = $b->getAuthor();**\n?>\n<tr>\n<td>\n<?php if($b->coverMime) { ?>\n**<img src=\"showCover.php?book=<?=$b->id?>\">**\n<?php } else { ?>\nn/a\n<? } ?>\n</td>\n<td>\n**<a href=\"author.php?id=<?=$a->id?>\"><?=htmlspecialchars(\"$a >firstName $a->lastName\")?></a><br/>\n<b><?=htmlspecialchars($b->title)?></b>\n</td>\n<td><?=htmlspecialchars($b->isbn)?></td>\n<td><?=htmlspecialchars($b->publisher)?></td>\n<td><?=htmlspecialchars($b->year)?></td>\n<td><?=htmlspecialchars($b->summary)?></td>\n<td><?=$b->copies?></td>\n<td>\n<a href=\"lendBook.php?book=<?=$b->id?>\">Lend</a>\n</td>\n<td>\n<a href=\"editBook.php?book=<?=$b->id?>\">Edit</a>\n</td>**\n</tr>\n<?php\n}\n?>\n</table>\n<a href=\"editBook.php\">Add book...</a>\n<?php\n// Display footer\nshowFooter();\n\n```", "```php\n/**\n* This method returns the list of all books with\n* author's first and last names\n* @return PDOStatement\n*/\nstatic function getBooksWithAuthors()\n{\n$sql = \"SELECT books.*, authors.lastName, authors.firstName\nFROM books, authors\nWHERE books.author=authors.id\nORDER BY title\";\n$q = self::getConn()->query($sql);\n$q->setFetchMode(PDO::FETCH_CLASS, 'Book', array());\nreturn $q;\n}\n\n```", "```php\n<?php\n/**\n* This page lists all the authors we have\n* PDO Library Management example application\n* @author Dennis Popel\n*/\n// Don't forget the include\ninclude('common.inc.php');\n// Display the header\nshowHeader('Authors');\n// Get number of authors and issue the query\n**$authors = Model::getAuthors();**\n// now create the table\n?>\n**Total authors: <?=Model::getAuthorCount()?>**\n<table width=\"100%\" border=\"1\" cellpadding=\"3\">\n<tr style=\"font-weight: bold\">\n<td>First Name</td>\n<td>Last Name</td>\n<td>Bio</td>\n<td>Edit</td>\n</tr>\n<?php\n// Now iterate over every row and display it\n**while($a = $authors->fetch())\n{**\n?>\n<tr>\n**<td><?=htmlspecialchars($a->firstName)?></td>\n<td><?=htmlspecialchars($a->lastName)?></td>\n<td><?=htmlspecialchars($a->bio)?></td>\n<td>\n<a href=\"editAuthor.php?author=<?=$a->id?>\">Edit</a>\n</td>**\n</tr>\n<?php\n}\n?>\n</table>\n<a href=\"editAuthor.php\">Add Author...</a>\n<?php\n// Display footer\nshowFooter();\n\n```", "```php\n<?php\n/**\n* This page shows an author's profile\n* PDO Library Management example application\n* @author Dennis Popel\n*/\n// Don't forget the include\ninclude('common.inc.php');\n// Get the author\n$id = (int)$_REQUEST['id'];\n**$author = Model::getAuthor($id);**\n// Now see if the author is valid - if it's not,\n// we have an invalid ID\nif(!$author) {\nshowHeader('Error');\necho \"Invalid Author ID supplied\";\nshowFooter();\nexit;\n}\n// Display the header - we have no error\n**showHeader(\"Author: $author->firstName $author->lastName\");**\n// Now get the number and fetch all his books\n**$books = $author->getBooks();\n$totalBooks = $author->getBookCount();**\n// now display everything\n?>\n<h2>Author</h2>\n<table width=\"60%\" border=\"1\" cellpadding=\"3\">\n<tr>\n<td><b>First Name</b></td>\n**<td><?=htmlspecialchars($author->firstName)?></td>**\n</tr>\n<tr>\n<td><b>Last Name</b></td>\n**<td><?=htmlspecialchars($author->lastName)?></td>**\n</tr>\n<tr>\n<td><b>Bio</b></td>\n**<td><?=htmlspecialchars($author->bio)?></td>**\n</tr>\n<tr>\n<td><b>Total books</td>\n<td><?=$totalBooks?></td>\n</tr>\n</table>\n**<a href=\"editAuthor.php?author=<?=$author->id?>\">Edit author...</a>**\n<h2>Books</h2>\n<table width=\"100%\" border=\"1\" cellpadding=\"3\">\n<tr style=\"font-weight: bold\">\n<td>Title</td>\n<td>ISBN</td>\n<td>Publisher</td>\n<td>Year</td>\n<td>Summary</td>\n</tr>\n<?php\n// Now iterate over every book and display it\n**while($b = $books->fetch())\n{**\n?>\n<tr>\n**<td><?=htmlspecialchars($b->title)?></td>\n<td><?=htmlspecialchars($b->isbn)?></td>\n<td><?=htmlspecialchars($b->publisher)?></td>\n<td><?=htmlspecialchars($b->year)?></td>\n<td><?=htmlspecialchars($b->summary)?></td>**\n</tr>\n<?php\n}\n?>\n</table>\n<?php\n// Display footer\nshowFooter();\n\n```", "```php\n<?php\n/**\n* This page lists all borrowed books\n* PDO Library Management example application\n* @author Dennis Popel\n*/\n// Don't forget the include\ninclude('common.inc.php');\n// Display the header\nshowHeader('Lended Books');\n// Get all lended books list\n**$brs = Model::getBorrowers();\n$totalBooks = Model::getBorrowerCount();**\n// now create the table\n?>\nTotal borrowed books: <?=$totalBooks?>\n<table width=\"100%\" border=\"1\" cellpadding=\"3\">\n<tr style=\"font-weight: bold\">\n<td>Title</td>\n<td>Author</td>\n<td>Borrowed by</td>\n<td>Borrowed on</td>\n<td>Return</td>\n</tr>\n<?php\n// Now iterate over every row and display it\n**while($br = $brs->fetch())\n{\n$b = $br->getBook();\n$a = $b->getAuthor();**\n?>\n<tr>\n**<td><?=htmlspecialchars($b->title)?></td>\n<td><?=htmlspecialchars(\"$a->firstName $a->lastName\")?></td>\n<td><?=htmlspecialchars($br->name)?></td>\n<td><?=date('d M Y', $br->dt)?></td>\n<td>\n<a href=\"returnBook.php?borrower=<?=$br->id?>\">Return</a>\n</td>**\n</tr>\n<?php\n}\n?>\n</table>\n<?php\n// Display footer\nshowFooter();\n\n```", "```php\n<?php\n/**\n* This page allows you to lend a book\n* PDO Library Management example application\n* @author Dennis Popel\n*/\n// Don't forget the include\ninclude('common.inc.php');\n// First see if the request contains the book ID\n// Return to books.php if the ID invalid\n$id = (int)$_REQUEST['book'];\n**$book = Model::getBook($id);**\nif(!$book) {\nheader(\"Location: books.php\");\nexit;\n}\n// Now see if the form was submitted\n$warnings = array();\nif($_POST['submit']) {\n// Require that the borrower's name is entered\nif(!$_POST['name']) {\n$warnings[] = 'Please enter borrower\\'s name';\n}\nelse {\n**// Form is OK, \"lend\" the book\nif(!$book->lend($_POST['name'])) {\n// Failure, show error message\n$warnings[] = 'There are no more copies of\nthis book available';\n}**\n}\n// Now, if we don't have errors,\n// redirect back to books.php\nif(count($warnings) == 0) {\nheader(\"Location: books.php\");\nexit;\n}\n// Otherwise, the warnings will be displayed\n}\n// Display the header\nshowHeader('Lend Book');\n// If we have any warnings, display them now\nif(count($warnings)) {\necho \"<b>Please correct these errors:</b><br>\";\nforeach($warnings as $w)\n{\necho \"- \", htmlspecialchars($w), \"<br>\";\n}\n}\n// Now display the form\n?>\n<form action=\"lendBook.php\" method=\"post\">\n<input type=\"hidden\" name=\"book\" value=\"<?=$id?>\">\n<b>Please enter borrower's name:<br></b>\n<input type=\"text\" name=\"name\" value=\"<?=htmlspecialchars($_\nPOST['name'])?>\">\n<input type=\"submit\" name=\"submit\" value=\" Lend book \">\n</form>\n<?php\n// Display footer\nshowFooter();\n\n```", "```php\n<?php\n/**\n* This page \"returns\" a book back to the library\n* PDO Library Management example application\n* @author Dennis Popel\n*/\n// Don't forget the include\ninclude('common.inc.php');\n// First see if the request contains the borrowers ID\n// Return to books.php if not\n$id = (int)$_REQUEST['borrower'];\n**$borrower = Model::getBorrower($id);**\nif(!$borrower) {\nheader(\"Location: books.php\");\nexit;\n}\n// Return the book and redirect to books.php\n// If anything happens, the exception will be\n// handled automatically\n**$borrower->returnBook();**\nheader(\"Location: books.php\");\n\n```", "```php\n<?php\n/**\n* This page lists all the books we have as an XML data structure\n* PDO Library Management example application\n* @author Dennis Popel\n*/\n// Don't forget the include\ninclude('common.inc.php');\n// Set the content type to be XML\nheader('Content-Type: application/xml');\n// Get the books list\n$books = Model::getBooksWithAuthors();\n// Echo XML declaration and open root element\necho '<?xml version=\"1.0\"?>', \"\\n\";\necho \"<books>\\n\";\n// Now iterate over every book and display it\nwhile($b = $books->fetch())\n{\n?>\n<book id=\"<?=$b->id?>\">\n<isbn><?=$b->isbn?></isbn>\n<title><?=htmlspecialchars($b->title)?></title>\n<publisher><?=htmlspecialchars($b->publisher)?></publisher>\n<summary><?=htmlspecialchars($b->summary)?></summary>\n<author>\n<id><?=$b->author?></id>\n<lastName><?=$b->lastName?></lastName>\n<firstName><?=$b->firstName?></firstName>\n</author>\n</book>\n<?\n}\necho '</books>';\n\n```", "```php\n    $conn = self::getConn();\n    $conn->beginTransaction();\n    try\n    {\n    $conn->query(\"INSERT INTO authors(bio) VALUES('')\");\n    $aid = $conn->lastInsertId();\n    $author = self::getAuthor($aid);\n    $author->update($firstName, $lastName, $bio);\n    $conn->commit();\n    }\n    catch(Exception $e)\n    {\n    $conn->rollBack();\n    }\n\n    ```"]