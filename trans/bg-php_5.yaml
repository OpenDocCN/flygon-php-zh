- en: Chapter 5. Building a PHP Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。构建PHP Web应用程序
- en: In the previous chapter, we learned how to accept a user's input, and how to
    access it via PHP. We also learned the basics of using MySQL databases, and applied
    all of the principles of the previous chapters into a mini app that adds users
    to a database via a web form.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何接受用户的输入，以及如何通过PHP访问它。我们还学习了使用MySQL数据库的基础知识，并将之前章节的原则应用到一个小型应用程序中，通过Web表单将用户添加到数据库中。
- en: In this chapter, we will be learning and applying OOP concepts in a framework.
    We will cover error reporting using the Whoops library and will learn how to handle
    those errors. We will also cover how to manage and structure our application in
    a framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习并应用框架中的面向对象编程概念。我们将使用Whoops库来进行错误报告，并学习如何处理这些错误。我们还将介绍如何在框架中管理和构建我们的应用程序。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Apply OOP concepts in a framework environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在框架环境中应用面向对象编程概念
- en: Structure files and folders to make a framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构文件和文件夹以构建框架
- en: Describe how a framework interacts with a data source
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述框架如何与数据源交互
- en: Build a framework using the MVC design pattern
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MVC设计模式构建框架
- en: Build a CRM application to manage contacts on your framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个CRM应用程序来管理您的框架上的联系人
- en: Building an application will require us to know about the underlying framework
    and how we can create the application using the MVC architecture style of building.
    A PHP framework is a collection of folders and files designed to promote code
    reuse organization; the folders and files provide a common code base to build
    applications on top of. Through these chapters, you will learn how to build such
    a framework.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个应用程序将需要我们了解底层框架以及如何使用MVC架构风格来创建应用程序。PHP框架是一个设计用来促进代码重用组织的文件夹和文件集合；这些文件夹和文件提供了一个通用的代码基础，用于构建应用程序。通过这些章节，您将学习如何构建这样一个框架。
- en: 'A common design pattern that we will use throughout this book is called CRUD
    - an acronym that means:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中使用的一个常见设计模式称为CRUD - 一个缩写，意思是：
- en: '**Create**: Creating a new MySQL record'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**：创建一个新的MySQL记录'
- en: '**Read**: Reading records from a database'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取**：从数据库中读取记录'
- en: '**Update**: Updating a MySQL record'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新**：更新MySQL记录'
- en: '**Delete:** Deleting a MySQL record'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除**：删除MySQL记录'
- en: CRUD sits at the heart of any practical application that is built in a framework.
    Almost everything can be broken down into CRUD.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD是在框架中构建的任何实际应用程序的核心。几乎所有内容都可以分解为CRUD。
- en: An example of CRUD would involve creating new content, reading the content,
    and having prompts to update and delete the content.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD的示例将涉及创建新内容，读取内容，并提供提示来更新和删除内容。
- en: 'We will be using a design pattern known as Model View Controller (MVC), which
    is a way to structure the directories and files upon which your framework is based.
    Structuring and examples will be shown using an MVC structure:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一种称为模型视图控制器（MVC）的设计模式，这是一种用于构建框架的目录和文件结构的方式。将使用MVC结构来展示结构和示例：
- en: '![Building a PHP Web Application](graphics/5_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![构建PHP Web应用程序](graphics/5_01.jpg)'
- en: A representation of Model View Controller (MVC)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 模型视图控制器（MVC）的表示
- en: 'PHP Standard Recommendation (PSR) sets a style guide for formatting your code,
    allowing for maximum compatibility with other code that you may come into contact
    with: [http://www.php-fig.org/psr/](http://www.php-fig.org/psr/).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: PHP标准建议（PSR）为代码格式设置了一个样式指南，允许与您可能接触到的其他代码最大的兼容性：[http://www.php-fig.org/psr/](http://www.php-fig.org/psr/)。
- en: Concepts of OOP in a Framework Environment
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框架环境中的面向对象编程概念
- en: It is a good idea to have a solid understanding of PHP object-oriented programming
    (OOP) concepts before starting to learn how a framework is constructed. One thing
    that all PHP frameworks have in common is that they are first and foremost built
    on top of OOP PHP; essentially, they are just a way to organize your files.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始学习框架构建之前，对PHP面向对象编程（OOP）概念有一个扎实的理解是一个好主意。所有PHP框架共同的一点是，它们首先是建立在OOP PHP之上的；本质上，它们只是一种组织文件的方式。
- en: 'We will learn about the following OOP concepts:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习以下面向对象编程概念：
- en: Namespaces
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间
- en: Use Statements
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用语句
- en: Classes and Objects
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和对象
- en: Methods
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法
- en: Access Modifiers
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问修饰符
- en: Namespaces
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间
- en: Namespacing can be compared to a folder structure. The primary purpose of a
    namespace is to allow classes to have the same name, but under different namespaces.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间可以与文件夹结构进行比较。命名空间的主要目的是允许类具有相同的名称，但在不同的命名空间下。
- en: Namespacing is case-sensitive. A namespace should start with a capital letter
    and use camel case thereafter - the beginning of each word should start off lowercase,
    with each subsequent word in uppercase.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间是区分大小写的。命名空间应该以大写字母开头，之后使用驼峰命名法 - 每个单词的开头应该是小写，后面的单词应该是大写。
- en: 'For example: `mySpace`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：`mySpace`
- en: An example of this would be if you had a class called `Post` and, in another
    folder, you had a class called `Post`. Normally, you would not be able to use
    these in the same file, as the classes would conflict with each other; however,
    if each of the classes has a namespace of the folder in which they are stored,
    then you can use them in the same file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您有一个名为`Post`的类，并且在另一个文件夹中，您有一个名为`Post`的类。通常情况下，您将无法在同一文件中使用它们，因为这些类会相互冲突；但是，如果每个类都有它们存储的文件夹的命名空间，那么您可以在同一文件中使用它们。
- en: The file file1.txt can exist in both the directory `/home/packt and in /home/other`,
    but two copies of file1.txt cannot co-exist in the same directory. In addition,
    to access `file1.txt` outside of the `/home/packt` directory, we must prepend
    the directory name to the filename, using the directory separator to get `/home/packt/file1.txt`.
    This same principle extends to namespaces in the programming world.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 文件file1.txt可以存在于目录`/home/packt`和`/home/other`中，但是两个file1.txt的副本不能同时存在于同一个目录中。此外，要在`/home/packt`目录之外访问`file1.txt`，我们必须在文件名之前加上目录名，使用目录分隔符来获取`/home/packt/file1.txt`。这个原则在编程世界中也适用于命名空间。
- en: You cannot use two classes within the same file, as they will conflict with
    each other. To get around this, you can give one of the classes an alias. Think
    of an alias as a nickname for that class.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能在同一个文件中使用两个类，因为它们会互相冲突。为了解决这个问题，您可以给其中一个类起一个别名。将别名视为该类的昵称。
- en: 'A namespace is making a reference to the location within the file structure
    in the `app/controllers` directory: the namespace `App\Controllers` is the path
    to its location. Notice the use of the backslash character when writing a namespace:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间是对`app/controllers`目录中的位置的引用：命名空间`App\Controllers`是其位置的路径。注意在编写命名空间时使用反斜杠字符：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Namespace App, Controllers, and Use Statements
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间App，Controllers和Use语句
- en: '`Use` statements are a way to import a class, rather than having to manually
    include them in. `use` statements are used in conjunction with composer.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`Use`语句是一种导入类的方式，而不是手动包含它们。`use`语句与composer一起使用。'
- en: 'As an example of using a `use` statement in a class, if we want to use a `Contact`
    model, we can place the following code at the top of the class:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为在类中使用`use`语句的示例，如果我们想要使用`Contact`模型，可以将以下代码放在类的顶部：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you have a class called `Contact` that has a namespace of `App\Models,`
    to import it, you can use `App\Models\Contact. Y`ou can then refer to this class
    by calling `Contact;` you don''t have to refer to its full namespace, as it''s
    already been imported:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有一个名为`Contact`的类，其命名空间为`App\Models`时，要导入它，您可以使用`App\Models\Contact`。然后，您可以通过调用`Contact`来引用这个类；您不必引用其完整的命名空间，因为它已经被导入：
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We use composer for auto-loading files based on their namespaces, and we will
    cover this in detail in a later chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用composer根据其命名空间自动加载文件，并将在后面的章节中详细介绍这一点。
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Defining Classes and Objects Using Namespaces
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命名空间定义类和对象
- en: We learned how to create classes and objects in the previous chapter. We will
    now see how to create classes and objects using namespaces.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章学习了如何创建类和对象。现在我们将看到如何使用命名空间创建类和对象。
- en: 'An object is a class that has been instantiated; for instance, if you look
    at the last line of the last example, a class called `contact` has been instantiated
    by using the new operator, followed by the class name. This has created a new
    object; what this means is that the new object has access to all of the methods
    of the class and public properties:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是已经实例化的类；例如，如果您看最后一个示例的最后一行，一个名为`contact`的类已经被实例化，使用了`new`运算符，后跟类名。这创建了一个新对象；这意味着新对象可以访问类的所有方法和公共属性：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Methods
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: A method is a function that resides inside of a class. In reality, the only
    difference between a method and a function is the naming convention, and that
    a method happens to live inside of a class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 方法是驻留在类内部的函数。实际上，方法和函数之间唯一的区别是命名约定，以及方法碰巧驻留在类内部。
- en: 'Methods are used to retrieve and pass information to or from a class, and to
    the file where the class is being instantiated:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 方法用于检索和传递信息到类中，或从类中传递信息到文件中，该文件中实例化了该类：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Access Modifiers
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问修饰符
- en: 'Access modifiers are a way to grant and restrict access to the properties and
    methods of a class. There are three access modifiers: `public`, `protected,` and
    `private`. These can be compared to gatekeepers, letting data in or preventing
    data from entering:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 访问修饰符是授予和限制类的属性和方法访问权限的一种方式。有三种访问修饰符：`public`，`protected`和`private`。这可以与门卫进行比较，允许数据进入或阻止数据进入：
- en: '**Public**'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Public**'
- en: Defining a property or method as `public` means that the class, the extended
    class, and the file where a class is instantiated all have access to read and
    write the method or property.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性或方法定义为`public`意味着类，扩展类和实例化类的文件都可以读取和写入该方法或属性。
- en: '**Protected**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Protected**'
- en: A `protected` method or property can only be accessed by the class, or an extended
    class.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`protected`方法或属性只能被类或扩展类访问。'
- en: '**Private**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Private**'
- en: A `private` property or method can only be accessed from within the class where
    it is defined.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`private`属性或方法只能从定义它的类内部访问。'
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A `private` property cannot be accessed from outside of that class, and it cannot
    be accessed from an extended class.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`private`属性无法从该类的外部访问，也无法从扩展类访问。'
- en: The following are examples of how to make use of the various access modifiers.
    You will see the `public`, `protected`, and `private` properties in use when defining
    a property named `$token:`
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用各种访问修饰符的示例。在定义名为`$token`的属性时，您将看到`public`，`protected`和`private`属性的使用：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Access Modifiers](graphics/5_02.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![访问修饰符](graphics/5_02.jpg)'
- en: Folder Structure
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹结构
- en: '**Explanation:**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**解释：**'
- en: 'What we have here is the file structure of the framework that we will be building
    over the next few chapters:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们将在接下来的几章中构建的框架的文件结构：
- en: The **app** folder is where your application will be held. The **app** holds
    your controllers, your models, and your views. As mentioned previously, this is
    part of the MVC structure.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**app**文件夹是您的应用程序所在的位置。**app**包含您的控制器，模型和视图。正如先前提到的，这是MVC结构的一部分。'
- en: The **config** file is where the site name and database credentials are stored.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**config**文件是存储站点名称和数据库凭据的位置。'
- en: The **system** folder holds the core files of the framework.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**system**文件夹包含框架的核心文件。'
- en: The **vendor** directory is a composer directory, containing any third-party
    packages installed via composer. It also stores composer itself.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**vendor**目录是一个composer目录，包含通过composer安装的任何第三方包。它还存储了composer本身。'
- en: The **webroot** folder is your document root; this is what your browser reads
    from.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**webroot**文件夹是您的文档根目录；这是您的浏览器所读取的内容。'
- en: Later in this chapter, we will be covering a design pattern named MVC.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们将介绍一个名为MVC的设计模式。
- en: The following example uses this design pattern, which is simply a way of organizing
    your file structure.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用了这种设计模式，这只是一种组织文件结构的方式。
- en: In this example, we will pass the details of a single contact from a class that
    has been instantiated, and display them in a browser.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将从已实例化的类中传递单个联系人的详细信息，并在浏览器中显示它们。
- en: For now, notice how each of the OOP principles is employed in each file, and
    see what you recognize.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，请注意每个面向对象编程原则在每个文件中的应用，并看看您是否能识别出来。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This code will not work as vanilla PHP, as the structure of a framework is required.
    This book will teach you how (and why) these components work together the way
    that they do. The purpose of showing this example is to see OOP concepts in action
    in a framework setting.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将无法作为纯PHP工作，因为需要框架的结构。本书将教您这些组件如何（以及为什么）以它们目前的方式一起工作。展示此示例的目的是在框架环境中看到面向对象编程概念的实际应用。
- en: 'The following is an example of a controller:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个控制器的示例：
- en: '![Access Modifiers](graphics/5_03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![访问修饰符](graphics/5_03.jpg)'
- en: Contacts Controller
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人控制器
- en: First, there is a `namespace`, which is how composer knows to load the file.
    Without composer, a manual include would be required, using an `include` or `require`
    known as lazy loading, to prevent irrelevant files from being loaded and improve
    performance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是`namespace`，这是composer知道如何加载文件的方式。没有composer，将需要手动包含，使用`include`或`require`，称为惰性加载，以防止加载不相关的文件并提高性能。
- en: 'Following the `namespace` and `use` statements is the class definition (the
    blueprint of the class). Here, we are naming the class `Contacts,` and we are
    extending the functionality that is already present is the `BaseController` class:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在`namespace`和`use`语句之后是类定义（类的蓝图）。在这里，我们将类命名为`Contacts`，并扩展了已经存在的`BaseController`类的功能：
- en: '![Access Modifiers](graphics/5_04.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![访问修饰符](graphics/5_04.jpg)'
- en: Contacts Model
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人模型
- en: '**Explanation:**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**解释：**'
- en: The file seen here is the model; the `Contact` model was instantiated in the
    previous example.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里看到的文件是模型；在前面的示例中实例化了`Contact`模型。
- en: Again, the model contains a `namespace.`
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，模型包含了`namespace`。
- en: No `use` statement is required, as in this example, the data is contained within
    the class definition.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，不需要`use`语句，因为数据包含在类定义中。
- en: 'If the data was stored in a database or another data source, then the class
    would need to extend the `BaseModel`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据存储在数据库或其他数据源中，则该类需要扩展`BaseModel`：
- en: '![Access Modifiers](graphics/5_05.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![访问修饰符](graphics/5_05.jpg)'
- en: Contact View
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人视图
- en: 'Minimal PHP is used in the view; data is usually passed to a view in an array
    or a variable, and styling is dictated:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: PHP视图中使用最少的PHP；数据通常以数组或变量的形式传递给视图，并且样式是由其决定的：
- en: '![Access Modifiers](graphics/5_06.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![访问修饰符](graphics/5_06.jpg)'
- en: Browser View
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器视图
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In your early years as a developer, you may find that you frequently forget
    to use a semicolon; in fact, David, one of our book creators, frequently recalls
    how he once spent nearly two whole days trying to resolve a bug in one of this
    first projects, only to find that the problem was a missing semicolon.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员的早期阶段，您可能会发现自己经常忘记使用分号；事实上，我们的一位书籍作者大卫经常回忆起他曾经花了将近两天的时间来解决他的第一个项目中的一个错误，结果发现问题是缺少了一个分号。
- en: When working in a framework environment, forgetting to use the right case can
    be a lot like forgetting to use the semicolon.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在框架环境中工作时，忘记使用正确的大小写可能会像忘记使用分号一样麻烦。
- en: 'This does not need to be the case; you can make use of software specialist
    add-ons, known as PHP linters, that will check for problems like forgetting to
    use the correct case. PHP linters highlight the code before you run the script.
    You will find such add-ons in IDEs such as PHP Storm, or in text editors like
    Sublime Text or Atom:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这并非一定要这样；您可以利用软件专家附加组件，即PHP linters，它们将检查问题，如忘记使用正确的大小写。 PHP linters在运行脚本之前突出显示代码。您将在诸如PHP
    Storm之类的IDE中找到此类附加组件，或者在Sublime Text或Atom等文本编辑器中找到：
- en: '[https://www.jetbrains.com/phpstorm/](https://www.jetbrains.com/phpstorm/)
    made by Jet Brains'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.jetbrains.com/phpstorm/](https://www.jetbrains.com/phpstorm/)
    由Jet Brains制作'
- en: '[https://www.sublimetext.com/](https://www.sublimetext.com/) made by Sublime
    HQ'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.sublimetext.com/](https://www.sublimetext.com/) 由Sublime HQ制作'
- en: '[https://atom.io/](https://atom.io/) made by Atom'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://atom.io/](https://atom.io/) 由Atom制作'
- en: Structure of a Framework
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 框架的结构
- en: At its core, MVC is a separation of concerns, so all data sources come from
    the model or a database resource. Your controller controls the flow of the application
    and resides in a controllers directory. All of the markup lives inside what is
    known as the view. Together, they form the Model View Controller (MVC) design
    pattern.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，MVC是关注点分离，因此所有数据源都来自模型或数据库资源。您的控制器控制应用程序的流程，并驻留在控制器目录中。所有标记都位于所谓的视图中。它们一起形成了模型视图控制器（MVC）设计模式。
- en: '![Structure of a Framework](graphics/5_07.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![框架的结构](graphics/5_07.jpg)'
- en: Framework Folder and File Structure
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 框架文件夹和文件结构
- en: If you need to modify a data source, you know to go to the model to do it; if
    you want to change how it looks, you know to go to the view; and to change the
    control of the application, you go to the controller.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要修改数据源，您知道要去模型进行操作；如果您想要更改外观，您知道要去视图；要更改应用程序的控制，您去控制器。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the model is not restricted to pulling data from a database; this
    is a common misconception. Our earlier example highlights this.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，模型并不局限于从数据库中提取数据；这是一个常见的误解。我们之前的示例突出了这一点。
- en: Other sources of data in a model could be static data or data read from a file
    or an external feed like an RSS.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 模型中的其他数据源可能是静态数据或从文件或外部源（如RSS）读取的数据。
- en: '**Explanation:**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**解释：**'
- en: When working with a framework, much of your application will be built using
    the MVC design pattern.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用框架时，您的应用程序的大部分将使用MVC设计模式构建。
- en: 'Both a model and a controller will extend functionality from the `BaseModel`
    and `BaseController` stored in the system directory. You will likely not need
    to change these frequently. Any application that is built on top of the framework
    will be largely contained in the model, controllers, and views directories that
    are stored in the `App` directory:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 模型和控制器都将从系统目录中存储的`BaseModel`和`BaseController`扩展功能。您可能不经常需要更改这些。建立在框架之上的任何应用程序将主要包含在`App`目录中存储的模型、控制器和视图目录中：
- en: '![Structure of a Framework](graphics/5_03.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![框架结构](graphics/5_03.jpg)'
- en: Contacts Controller
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人控制器
- en: Here, the controller is communicating with the model. The model is providing
    the controller with a source of data. The controller is the brain of the structure,
    and here, it is a series of instructions for when to serve the data source and
    how to behave under what conditions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，控制器正在与模型通信。模型为控制器提供了数据源。控制器是结构的大脑，在这里，它是一系列指令，用于何时提供数据源以及在什么条件下如何行为。
- en: The contact class has a function that will be called when the user visits a
    certain URI (how this works, and why this works, will be covered in later chapters);
    this initiates contact with the model.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户访问特定URI时，联系人类将调用一个函数（这是如何工作以及为什么工作将在后面的章节中介绍）；这将启动与模型的联系。
- en: In this example, the controller is not concerned with what is contained in the
    data source; however, it can be programmed to examine this data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，控制器不关心数据源中包含什么；但是，它可以被编程来检查这些数据。
- en: 'After the data is obtained by the controller, it is stored and passed to the
    view:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器获取数据后，数据被存储并传递给视图：
- en: '![Structure of a Framework](graphics/5_04.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![框架结构](graphics/5_04.jpg)'
- en: Contacts Model
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人模型
- en: '**Explanation:**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**解释：**'
- en: The contacts model has a data source that contains the knowledge of an application,
    but on its own, it cannot make use of this knowledge. It can only give instructions
    to manage the knowledge. The CRUD principle comes into play in a model, where
    there are methods to create, read, update, and delete from the Model's source
    of knowledge.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人模型具有包含应用程序知识的数据源，但它本身不能利用这些知识。它只能给出管理知识的指示。CRUD原则在模型中发挥作用，其中有创建、读取、更新和删除模型知识源的方法。
- en: 'In this case, the data source is an array of names:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，数据源是一个名字数组：
- en: '![Structure of a Framework](graphics/5_05.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![框架结构](graphics/5_05.jpg)'
- en: Contact View
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人视图
- en: In the view file, you will see that the data is taken as it is served; in this
    case, the view is served an array of names. These names are thorough, and displayed
    with any markup and styling applied.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图文件中，您将看到数据是按原样提供的；在这种情况下，视图被提供了一个名字数组。这些名字是详尽的，并且带有任何标记和样式。
- en: In a framework, the view is part of a wider structure that applies global elements
    such as headers and footers in your web applications, as well as CSS and JavaScript
    files.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在框架中，视图是一个更广泛结构的一部分，它在您的Web应用程序中应用全局元素，如标题和页脚，以及CSS和JavaScript文件。
- en: It is possible to loop through an array, but all processing should be completed
    in the controller, when possible.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 可以循环遍历数组，但尽可能在控制器中完成所有处理。
- en: '![Structure of a Framework](graphics/5_06.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![框架结构](graphics/5_06.jpg)'
- en: Browser View
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器视图
- en: You have now identified how OOP principles can be used in an MVC framework example.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经确定了如何在MVC框架示例中使用面向对象编程原则。
- en: Now, let's put some of these principles into practice.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将这些原则付诸实践。
- en: 'Activity: Adding Contacts to a Directory'
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动：向目录添加联系人
- en: You need to add contacts to the directory that you are creating, stored as an
    array of names. The app should return an array of contacts when requested.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将联系人添加到您正在创建的目录中，以名字数组的形式存储。当请求时，应用程序应返回一个联系人数组。
- en: The reason for this is to gain a better overall understanding of how to use
    OOP in practical applications.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因是为了更好地全面了解如何在实际应用中使用面向对象编程。
- en: 'Follow these steps to perform this activity:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行此活动：
- en: Create a directory structure.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录结构。
- en: Create a directory named `Contacts.`
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Contacts`的目录。
- en: In this directory, create a directory named `App.`
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个目录中，创建一个名为`App`的目录。
- en: 'Within the `App` directory, create three more directories:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App`目录中，创建三个更多的目录：
- en: '`Models`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`模型`'
- en: '`views`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`视图`'
- en: '`Controllers`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`控制器`'
- en: Within the Models directory, create a file named `Contact.php`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模型目录中，创建一个名为`Contact.php`的文件。
- en: 'In the `Contact.php` file, open PHP, and create a namespace:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Contact.php`文件中，打开PHP，并创建一个命名空间：
- en: '[PRE6]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Define a class called `Contact`:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`Contact`的类：
- en: '[PRE7]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this class, define a public method called `getContacts();` it should return
    an array of names:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个类中，定义一个名为`getContacts()`的公共方法；它应该返回一个名字数组：
- en: '[PRE8]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Within the Controllers directory, create a file named `Contacts.php`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Controllers目录中，创建一个名为`Contacts.php`的文件。
- en: In the `Contacts.php` file, open PHP, and add a `namespace:`
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Contacts.php`文件中，打开PHP，并添加一个`namespace`：
- en: '[PRE9]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Import the Contact model with a `use` statement:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`use`语句导入联系人模型：
- en: '[PRE10]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'An alias may be used in this scenario, written as follows (assuming that an
    alias for Contact would be `Name`):'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，可以使用别名，写成如下形式（假设Contact的别名为`Name`）：
- en: '[PRE11]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Define a class named Contacts:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个名为Contacts的类：
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a public function called `index()`, and within that method, create a
    local variable called `contacts`, and create a new instance of the `contact` class
    (this is known as the instantiation of a class):'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index()`的公共函数，在该方法中，创建一个名为`contacts`的局部变量，并创建`contact`类的一个新实例（这被称为类的实例化）：
- en: '[PRE13]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Create a local variable called `contacts` using the assignment operator, call
    the `contacts` object that you created an instance of in the previous step, add
    -> (this is known as an arrow notation), and call the method `getContacts():`
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用赋值运算符创建一个名为`contacts`的局部变量，在前一步创建的`contacts`对象实例后调用`getContacts()`方法（这被称为箭头符号）：
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have created a model and a controller, where the controller
    `Contacts` class instantiates the model `Contact` class. To achieve this, we created
    a basic MVC folder structure, separating the controls from the data source. We
    successfully used a `namespace`, a `use` statement, a method, an access modifier,
    an object, and a class. We have now witnessed the power of a framework.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个模型和一个控制器，其中控制器`Contacts`类实例化了模型`Contact`类。为了实现这一点，我们创建了一个基本的MVC文件夹结构，将控件与数据源分开。我们成功地使用了`namespace`、`use`语句、方法、访问修饰符、对象和类。我们现在见识到了框架的力量。
- en: In the next chapter, you will create a working framework of your own. We will
    be looking at how to set up a project development environment, graceful error
    reporting, and handing using the Whoops library. We will also be implementing
    the configuration classes, default classes, and how to set up routing.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将创建自己的工作框架。我们将学习如何设置项目开发环境、优雅的错误报告以及使用Whoops库进行处理。我们还将实现配置类、默认类以及如何设置路由。
