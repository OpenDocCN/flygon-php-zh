["```php\nPHP 7.1.0-3+deb.sury.org~yakkety+1 (cli) ( NTS )\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v3.1.0-dev, Copyright (c) 1998-2016 Zend Technologies\n with Zend OPcache v7.1.0-3+deb.sury.org~yakkety+1, Copyright (c) 1999-2016, by Zend Technologies\n\n```", "```php\nConfiguration File (php.ini) Path: /etc/php/7.1/cli\nLoaded Configuration File: /etc/php/7.1/cli/php.ini\nScan for additional .ini files in: /etc/php/7.1/cli/conf.d\nAdditional .ini files parsed: /etc/php/7.1/cli/conf.d/10-opcache.ini,\n/etc/php/7.1/cli/conf.d/10-pdo.ini,\n/etc/php/7.1/cli/conf.d/20-calendar.ini,\n/etc/php/7.1/cli/conf.d/20-ctype.ini,\n...\n\n```", "```php\nmkdir foggyline\ncd foggyline\ncomposer require symfony/console\n\n```", "```php\n$ chmod +x app.php\n$ ./app.php\n\n```", "```php\n<?php\n\nnamespace Foggyline\\Console\\Command;\n\nuse Symfony\\Component\\Console\\{\n  Command\\Command,\n  Input\\InputInterface,\n  Output\\OutputInterface\n};\n\nclass CustomerRegisterCommand extends Command\n{\n  protected function configure()\n  {\n    $this->setName('customer:register')\n    ->setDescription('Registers new customer.');\n  }\n\n  protected function execute(InputInterface $input, OutputInterface\n    $output)\n  {\n    // Some imaginary logic here...\n    $output->writeln('Customer registered.');\n  }\n}\n\n```", "```php\n<?php\n\nnamespace Foggyline\\Console\\Command;\n\nuse Symfony\\Component\\Console\\{\n  Command\\Command,\n  Input\\InputInterface,\n  Output\\OutputInterface\n};\n\nclass CustomerStatusSetCommand extends Command\n{\n  protected function configure()\n  {\n    $this->setName('customer:status:set')\n    ->setDescription('Enables of disables existing customer.');\n  }\n\n  protected function execute(InputInterface $input, OutputInterface\n    $output)\n  {\n    // Some imaginary logic here...\n    $output->writeln('Customer disabled.');\n  }\n}\n\n```", "```php\n<?php\n\nnamespace Foggyline\\Console\\Command;\n\nuse Symfony\\Component\\Console\\{\n  Command\\Command,\n  Input\\InputInterface,\n  Output\\OutputInterface\n};\n\nclass CustomerExportCommand extends Command\n{\n  protected function configure()\n  {\n    $this->setName('customer:export')\n    ->setDescription('Exports one or more customers.');\n  }\n\n  protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    // Some imaginary logic here...\n    $output->writeln('Customers exported.');\n  }\n}\n\n```", "```php\n#!/usr/bin/env php\n<?php   $loader = require __DIR__ . '/vendor/autoload.php'; $loader->add('Foggyline', __DIR__ . '/src/');   use Symfony\\Component\\Console\\Application; use Foggyline\\Console\\Command\\{\n CustomerExportCommand, CustomerRegisterCommand, CustomerStatusSetCommand };   $app = new Application('Foggyline App', '1.0.0');   $app->add(new CustomerRegisterCommand()); $app->add(new CustomerStatusSetCommand()); $app->add(new CustomerExportCommand());   $app->run();\n\n```", "```php\npublic function addArgument(\n  $name, \n  $mode = null, \n  $description = '', \n  $default = null\n)\n\n```", "```php\npublic function addOption(\n  $name, \n  $shortcut = null, \n  $mode = null, \n  $description = '', \n  $default = null\n)\n\n```", "```php\n<?php\n\nnamespace Foggyline\\Console\\Command;\n\nuse Symfony\\Component\\Console\\{\n  Command\\Command,\n  Input\\InputInterface,\n  Input\\InputArgument,\n  Input\\InputOption,\n  Output\\OutputInterface\n};\n\nclass CustomerRegisterCommand extends Command\n{\n  protected function configure()\n  {\n    $this->setName('customer:register')\n    ->addArgument(\n      'name', InputArgument::REQUIRED, 'Customer full name.'\n    )\n    ->addArgument(\n      'email', InputArgument::REQUIRED, 'Customer email address.'\n    )\n    ->addArgument(\n      'dob', InputArgument::OPTIONAL, 'Customer date of birth.'\n    )\n    ->addOption(\n      'email', null, InputOption::VALUE_REQUIRED, 'Send email to  \n      customer?'\n    )\n    ->addOption(\n      'log', null, InputOption::VALUE_OPTIONAL, 'Log to event system?'\n    )\n    ->setDescription('Enables or disables existing customer.');\n  }\n\n  protected function execute(InputInterface $input, OutputInterface $output)\n {\n    var_dump($input->getArgument('name'));\n    var_dump($input->getArgument('email'));\n    var_dump($input->getArgument('dob'));\n    var_dump($input->getOption('email'));\n    var_dump($input->getOption('log'));\n  }\n} \n\n```", "```php\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n  // Fake data source \n  $customers = [\n    ['John Doe', 'john.doe@mail.loc', '1983-01-16'],\n    ['Samantha Smith', 'samantha.smith@mail.loc', '1986-10-23'],\n    ['Robert Black', 'robert.black@mail.loc', '1978-11-18'],\n  ];\n\n  // Progress Bar Helper\n  $progress = new \n    \\Symfony\\Component\\Console\\Helper\\ProgressBar($output,\n    count($customers));\n\n  $progress->start();\n\n  for ($i = 1; $i <= count($customers); $i++) {\n    sleep(5);\n    $progress->advance();\n  }\n\n  $progress->finish();\n\n  // Table Helper\n  $table = new \\Symfony\\Component\\Console\\Helper\\Table($output);\n  $table->setHeaders(['Name', 'Email', 'DON'])\n  ->setRows($customers)\n  ->render();\n}\n\n```", "```php\n<?php   fwrite(STDOUT, \"Type something: \"); $line = fgets(STDIN); fwrite(STDOUT, 'You typed: ' . $line); fwrite(STDERR, 'Triggered STDERR!' . PHP_EOL);\n\n```", "```php\nphp -m | grep pcntl\n\n```", "```php\n<?php\n\necho 'started' . PHP_EOL;\n\nfunction tickLogger()\n{\n  echo 'Tick logged!' . PHP_EOL;\n}\n\nregister_tick_function('tickLogger');\n\ndeclare (ticks = 2) {\n  for ($i = 1; $i <= 10; $i++) {\n    echo '$i => ' . $i . PHP_EOL;\n  }\n}\n\necho 'finished' . PHP_EOL;\n\n```", "```php\nstarted\n$i => 1\n$i => 2\nTick logged!\n$i => 3\n$i => 4\nTick logged!\n$i => 5\n$i => 6\nTick logged!\n$i => 7\n$i => 8\nTick logged!\n$i => 9\n$i => 10\nTick logged!\nfinished\n\n```", "```php\n<?php\n\ndeclare (ticks = 2);\n\necho 'started' . PHP_EOL;\n\nfunction tickLogger()\n{\n  echo 'Tick logged!' . PHP_EOL;\n}\n\nregister_tick_function('tickLogger');\n\nfor ($i = 1; $i <= 10; $i++) {\n  echo '$i => ' . $i . PHP_EOL;\n}\n\necho 'finished' . PHP_EOL;\n\n```", "```php\nstarted\nTick logged!\n$i => 1\nTick logged!\n$i => 2\nTick logged!\n$i => 3\nTick logged!\n$i => 4\nTick logged!\n$i => 5\nTick logged!\n$i => 6\nTick logged!\n$i => 7\nTick logged!\n$i => 8\nTick logged!\n$i => 9\nTick logged!\n$i => 10\nTick logged!\nTick logged!\nfinished\nTick logged!\n\n```", "```php\n#!/usr/bin/env php\n<?php\n\ndeclare(ticks = 1);\n\necho 'started' . PHP_EOL;\n\nfunction signalHandler($signal)\n{\n  echo 'Triggered signalHandler: ' . $signal . PHP_EOL;\n  // exit;\n}\n\npcntl_signal(SIGINT, 'signalHandler');\n\n$loop = 0;\nwhile (true) {\n  echo 'loop ' . (++$loop) . PHP_EOL;\n  flush();\n  sleep(2);\n}\n\necho 'finished' . PHP_EOL;\n\n```", "```php\n$ ./app.php\nstarted\nloop 1\nloop 2\nloop 3\n^CTriggered signalHandler: 2\nloop 4\nloop 5\n^CTriggered signalHandler: 2\nloop 6\nloop 7\nloop 8\n^CTriggered signalHandler: 2\nloop 9\nloop 10\n...\n\n```", "```php\n#!/usr/bin/env php\n<?php\n\ndeclare(ticks = 1);\n\necho 'started' . PHP_EOL;\n\nfunction signalHandler($signal)\n{\n  echo 'Triggered signalHandler: ' . $signal . PHP_EOL;\n}\n\npcntl_signal(SIGALRM, 'signalHandler');\npcntl_alarm(7);\n\nwhile (true) {\n  echo 'loop ' . date('h:i:sa') . PHP_EOL;\n  flush();\n  sleep(2);\n}\n\necho 'finished' . PHP_EOL;\n\n```", "```php\n$ ./app.php\nstarted\nloop 02:17:28pm\nloop 02:17:30pm\nloop 02:17:32pm\nloop 02:17:34pm\nTriggered signalHandler: 14\nloop 02:17:35pm\nloop 02:17:37pm\nloop 02:17:39pm\nloop 02:17:41pm\nloop 02:17:43pm\nloop 02:17:45pm\nloop 02:17:47pm\nloop 02:17:49pm\nloop 02:17:51pm\n\n```", "```php\nfunction signalHandler($signal)\n{\n  echo 'Triggered signalHandler: ' . $signal . PHP_EOL;\n  pcntl_alarm(3);\n}\n\n```", "```php\n$ ./app.php\nstarted\nloop 02:20:46pm\nloop 02:20:48pm\nloop 02:20:50pm\nloop 02:20:52pm\nTriggered signalHandler: 14\nloop 02:20:53pm\nloop 02:20:55pm\nTriggered signalHandler: 14\nloop 02:20:56pm\nloop 02:20:58pm\nTriggered signalHandler: 14\nloop 02:20:59pm\nloop 02:21:01pm\nTriggered signalHandler: 14\nloop 02:21:02pm\n\n```", "```php\n#!/usr/bin/env php\n<?php\n\nfor ($i = 1; $i <= 5; $i++) {\n  $pid = pcntl_fork();\n\n  if (!$pid) {\n    echo 'Child ' . $i . PHP_EOL;\n    sleep(2);\n    exit;\n  }\n}\n\n```", "```php\n$ time php ./app.php\n\nreal 0m0.031s\nuser 0m0.012s\nsys 0m0.016s\n$ Child 1\nChild 4\nChild 2\nChild 3\nChild 5\n\n$\n\n```", "```php\n#!/usr/bin/env php\n<?php\n\nfunction generatePdf($content, $size)\n{\n  echo 'Started PDF ' . $size . ' - ' . date('h:i:sa') . PHP_EOL;\n  sleep(3); /* simulate PDF generating */\n  echo 'Finished PDF ' . $size . ' - ' . date('h:i:sa') . PHP_EOL;\n}\n\n$sizes = ['A1', 'A2', 'A3'];\n$content = 'foggyline';\n\nfor ($i = 0; $i < count($sizes); $i++) {\n  $pid = pcntl_fork();\n\n  if (!$pid) {\n    generatePdf($content, $sizes[$i]);\n    exit($i);\n  }\n}\n\nwhile (pcntl_waitpid(0, $status) != -1) {\n  $status = pcntl_wexitstatus($status);\n  echo \"Child $status finished! - \" . date('h:i:sa') . PHP_EOL;\n}\n\n```", "```php\n$ time ./app.php\nStarted PDF A2 - 04:52:37pm\nStarted PDF A3 - 04:52:37pm\nStarted PDF A1 - 04:52:37pm\nFinished PDF A2 - 04:52:40pm\nFinished PDF A1 - 04:52:40pm\nFinished PDF A3 - 04:52:40pm\nChild 2 finished! - 04:52:40pm\nChild 1 finished! - 04:52:40pm\nChild 0 finished! - 04:52:40pm\n\nreal 0m3.053s\nuser 0m0.016s\nsys 0m0.028s\n$\n\n```"]