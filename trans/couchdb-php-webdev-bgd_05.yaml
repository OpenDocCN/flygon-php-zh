- en: Chapter 5. Connecting your Application to CouchDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。将您的应用程序连接到CouchDB
- en: Now that we have the framework for our application built, let's talk about what
    needs to happen for our application to communicate with CouchDB.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 现在我们已经建立了应用程序的框架，让我们谈谈我们的应用程序需要与CouchDB通信的情况。
- en: 'We''ll talk through the following points in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下几点：
- en: Investigate the quick and easy way to interact with CouchDB, and talk about
    its shortcomings
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查与CouchDB交互的快速简便方法，并讨论其缺点
- en: Look at existing libraries to ease in PHP and CouchDB development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看现有库以便于PHP和CouchDB开发
- en: Install Sag and integrate it into Bones
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Sag并将其集成到Bones中
- en: Have our signup form create CouchDB documents and verify with Futon
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们的注册表单创建CouchDB文档，并在Futon中进行验证
- en: Before we get started
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们开始之前
- en: Before we do anything, let's create a database that we'll use from this point
    forward for Verge. As we've done before, let's create a database using `curl`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们做任何事情之前，让我们创建一个数据库，从此时起我们将在Verge中使用。与以前一样，让我们使用`curl`创建一个数据库。
- en: Time for action — creating a database for Verge with curl
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用curl为Verge创建数据库
- en: We created a database using `curl` in [Chapter 3](ch03.html "Chapter 3. Getting
    Started with CouchDB and Futon"), *Getting Started with CouchDB and Futon*. Let's
    quickly recap how to use a `PUT` request to create a new database in CouchDB.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第3章](ch03.html "第3章。与CouchDB和Futon入门")中使用`curl`创建了一个数据库，*与CouchDB和Futon入门*。让我们快速回顾如何使用`PUT`请求在CouchDB中创建一个新数据库。
- en: Create a new database by running the following command in **Terminal**. Make
    sure to replace `username` and `password` with the database administrator user
    that you created in [Chapter 3](ch03.html "Chapter 3. Getting Started with CouchDB
    and Futon").
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**终端**中运行以下命令来创建一个新的数据库。确保用[第3章](ch03.html "第3章。与CouchDB和Futon入门")中创建的数据库管理员用户替换`username`和`password`。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Terminal** will respond with the following output:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将以以下输出做出响应：'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What just happened?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used **Terminal** to trigger a `PUT` request, using `curl`, to create a database
    through CouchDB's **RESTful JSON API**. We passed `verge` as the name of the database
    at the end of CouchDB's root URL. When the database was successfully created,
    we received a message that everything went okay.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**终端**通过`curl`触发了一个`PUT`请求，使用CouchDB的**RESTful JSON API**创建了一个数据库。我们在CouchDB的根URL末尾传递`verge`作为数据库的名称。成功创建数据库后，我们收到了一条消息，说明一切都很顺利。
- en: Diving in head first
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 头顶冲入
- en: In this section, we'll create some quick and dirty code to communicate with
    CouchDB, and then talk about some of the issues with this approach.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一些快速脏代码来与CouchDB通信，然后讨论这种方法的一些问题。
- en: Adding logic to our signup script
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向我们的注册脚本添加逻辑
- en: 'In the previous chapter, we created a form in `views/signup.php`, with the
    following functionality:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们在`views/signup.php`中创建了一个表单，具有以下功能：
- en: We asked the user to enter a value for name in a textbox
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们要求用户在文本框中输入名称的值
- en: We took the value entered in the form and posted it to the signup route
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们获取了表单中输入的值并将其发布到注册路由
- en: We used Bones to grab the value passed by the form and set it to a variable
    called `message` so that we could display it on the home page
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用Bones来获取表单传递的值，并将其设置为名为`message`的变量，以便我们可以在主页上显示它
- en: We rendered the home page and displayed the `message` variable
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们呈现了主页并显示了`message`变量
- en: This was a big undertaking on our part, but we weren't able to save anything
    for later reading or writing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的一项重大工作，但我们无法保存任何东西以供以后阅读或写入。
- en: Let's take this form a few steps further and ask the user to enter both a name
    and an e-mail address and then save these fields as a document in CouchDB.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步采取一些步骤，并要求用户输入姓名和电子邮件地址，然后将这些字段保存为CouchDB中的文档。
- en: Time for action — adding an e-mail field to the signup form
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-向注册表单添加电子邮件字段
- en: Let's add an input field so users can enter an e-mail address into the `views/signup.php`
    page.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个输入字段，以便用户可以在`views/signup.php`页面中输入电子邮件地址。
- en: Open `signup.php` in your text editor (`/Library/Webserver/Documents/verge/views/signup.php`)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`signup.php`（`/Library/Webserver/Documents/verge/views/signup.php`）
- en: 'Add the highlighted code to add a label and input field for the e-mail addresses:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加突出显示的代码以为电子邮件地址添加标签和输入字段：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What just happened?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added an additional field to our signup form that will accept the input for
    an e-mail address. By adding the `email` field to this form, we will be able to
    access it on form submission and eventually save it as a CouchDB document.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向注册表单添加了一个额外的字段，用于接受电子邮件地址的输入。通过向此表单添加`email`字段，我们将能够在表单提交时访问它，并最终将其保存为CouchDB文档。
- en: Using curl calls to post data to CouchDB
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用curl调用将数据发布到CouchDB
- en: We've used `curl` through **Terminal** in previous chapters to interact with
    CouchDB. You'll be happy to know that you can also use `curl` through PHP. In
    order to represent the data in CouchDB, we'll first need to get our data into
    a JSON format.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的章节中，我们已经使用了**终端**通过`curl`与CouchDB进行交互。您会高兴地知道，您还可以通过PHP使用`curl`。为了在CouchDB中表示数据，我们首先需要将我们的数据转换为JSON格式。
- en: Time for action — creating a standard object to encode to JSON
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-创建一个标准对象以编码为JSON
- en: Let's represent a simple object in the form of JSON, so that CouchDB can interpret
    it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以JSON的形式表示一个简单的对象，以便CouchDB可以解释它。
- en: 'Open `index.php` in your text editor, and add the following code into the `/signup
    POST` route:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`index.php`，并将以下代码添加到`/signup POST`路由中：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What just happened?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added the code to create an object to store the specifics of a user. We used
    an instance of `stdClass` and called it `$user. stdClass` is PHP's generic empty
    class, which is useful for anonymous objects, dynamic properties, and hitting
    the ground running. Because documents require that a type should be set to classify
    the documents, we are setting this document's type to `user`. We then took the
    values that were submitted from the form and saved each of them as properties
    of the `$user` class. Finally, we used a PHP function called `json_encode` to
    take the object and create a JSON representation of it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了创建存储用户具体信息的对象的代码。我们使用了`stdClass`的一个实例，并将其命名为`$user`。`stdClass`是PHP的通用空类，对于匿名对象、动态属性和快速上手非常有用。因为文档要求应该设置一个类型来分类文档，我们将这个文档的类型设置为`user`。然后我们取自表单提交的值，并将它们保存为`$user`类的属性。最后，我们使用了一个名为`json_encode`的PHP函数，将对象转换为JSON表示形式。
- en: Let's test this out.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来测试一下。
- en: Open up your browser to `http://localhost/verge/signup`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost/verge/signup`。
- en: Enter in `John Doe` into the **Name** textbox and `<[john@example.com](mailto:john@example.com)>`
    into the **Email** textbox.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**文本框中输入`John Doe`，在**电子邮件**文本框中输入`<[john@example.com](mailto:john@example.com)>`。
- en: Click on **Submit**.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**。
- en: Your browser will display the following:![What just happened?](graphics/3586_05_005.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的浏览器将显示以下内容：![刚刚发生了什么？](graphics/3586_05_005.jpg)
- en: Perfect! Our form was submitted properly, and we were able to represent `stdClass
    $user` in JSON at the top of our website.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们的表单已经正确提交了，并且我们能够在我们网站的顶部用JSON表示`stdClass $user`。
- en: Committing it to Git
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交到Git
- en: Let's commit our code to Git so that we can look back at this code down the
    road.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的代码提交到Git，这样我们以后可以回顾这段代码。
- en: Open **Terminal**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以更改目录到我们的工作目录：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Give Git a description of what we''ve done since our last commit:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给Git一个描述，说明我们自上次提交以来做了什么：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that we have our data represented in JSON, let's use a `curl` statement
    to create a CouchDB document using PHP.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经用JSON表示了我们的数据，让我们使用一个`curl`语句来使用PHP创建一个CouchDB文档。
- en: Time for action — creating a CouchDB document with PHP and curl
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来的步骤——使用PHP和curl创建CouchDB文档
- en: We've been using `curl` through the command line since the beginning of this
    book, but this time, we are going to trigger a `curl` statement using PHP.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 自本书开始以来，我们一直在使用命令行通过`curl`，但这次，我们将使用PHP触发一个`curl`语句。
- en: 'Let''s start by initializing a `curl` session, executing it, and then closing
    it. Open `index.php` in your text editor, and add the following code into the
    `/signup POST` route:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从初始化一个`curl`会话开始，执行它，然后关闭它。在文本编辑器中打开`index.php`，并将以下代码添加到`/signup POST`路由中：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s tell `curl` what to actually execute. We do this with an `options`
    array. Add the following code between the `curl_init()` and the `curl_exec` statements:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们告诉`curl`实际要执行什么。我们使用一个`options`数组来做到这一点。在`curl_init()`和`curl_exec`语句之间添加以下代码：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What just happened?
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We initialized a `curl` session using PHP by first setting a variable `$curl`
    with the `curl_init()` resource. We then created an array with a variety of keys
    and values. The reason we picked all of these options isn''t too important for
    us now, but I would like to highlight the first three objects:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用PHP初始化了一个`curl`会话，通过使用`curl_init()`资源设置了一个名为`$curl`的变量。然后我们创建了一个包含各种键和值的数组。我们选择所有这些选项的原因对我们现在来说并不太重要，但我想强调前三个对象：
- en: We are setting the `CURLOPT_URL` option to the URL of the database that we want
    to save the document into. Remember that this statement will use CouchDB's RESTful
    JSON API to create a document inside of the `verge` database.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将`CURLOPT_URL`选项设置为我们要将文档保存到的数据库的URL。请记住，此语句将使用CouchDB的RESTful JSON API在`verge`数据库中创建一个文档。
- en: We then set `CURLOPT_POSTFIELDS` to the JSON encoded value of our `$user`. This
    is taking our JSON string and including it as data along with the URL.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将`CURLOPT_POSTFIELDS`设置为我们的`$user`的JSON编码值。这将把我们的JSON字符串作为数据与URL一起包含进去。
- en: 'Finally, we are setting the `CURLOPT_HTTPHEADER` to `array ("Content-Type:
    application/json")`, so that we can make sure that `curl` knows that we are passing
    a JSON request.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最后，我们将`CURLOPT_HTTPHEADER`设置为`array ("Content-Type: application/json")`，以确保`curl`知道我们正在传递一个JSON请求。'
- en: 'With our options array set, we need to tell our `curl` instance to use it:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 设置了我们的选项数组之后，我们需要告诉我们的`curl`实例使用它：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We then execute and close `curl` with the following two lines of code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们用以下两行代码执行并关闭`curl`：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With this code in our application, we should be able to submit our form and
    have it posted to CouchDB. Let's test it out.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这段代码，我们应该能够提交表单并将其发布到CouchDB。让我们来测试一下。
- en: Open your browser to `http://localhost/verge/signup`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost/verge/signup`。
- en: Enter `John Doe` into the **Name** textbox and `<[john@example.com](mailto:john@example.com)>`
    into the **Email** textbox.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**文本框中输入`John Doe`，在**电子邮件**文本框中输入`<[john@example.com](mailto:john@example.com)>`。
- en: Click on **Submit**.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**。
- en: Your browser will display the following:![What just happened?](graphics/3586_05_005.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的浏览器将显示以下内容：![刚刚发生了什么？](graphics/3586_05_005.jpg)
- en: That worked well without any errors, just as before. But this time, a CouchDB
    document should have been created. Let's check that the document was created properly
    by using Futon.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这次也没有出现任何错误，就像以前一样。但是这次应该已经创建了一个CouchDB文档。让我们通过Futon检查文档是否已经正确创建。
- en: Open your browser to `http://localhost:5984/_utils/database.html?verge`. This
    direct link will show you the verge database. You'll see that there's a new document
    in here! Keep in mind that your `ID` and `rev` will be different from mine:![What
    just happened?](graphics/3586_05_010.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:5984/_utils/database.html?verge`。这个直接链接将显示verge数据库。您会看到这里有一个新的文档！请记住，您的`ID`和`rev`将与我的不同：![刚刚发生了什么？](graphics/3586_05_010.jpg)
- en: Click on the document so that you can see the details.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文档，以便您可以查看详细信息。
- en: The data in your document should match up to the information that we passed
    in using our `curl` session. Notice that `type, email`, and `name` were all set
    properly, and that CouchDB set `_id` and `_rev` for us.![What just happened?](graphics/3586_05_015.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您文档中的数据应该与我们在`curl`会话中传递的信息相匹配。请注意，`type, email`和`name`都已正确设置，CouchDB为我们设置了`_id`和`_rev`。![刚刚发生了什么？](graphics/3586_05_015.jpg)
- en: Committing it to Git
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将其提交到Git
- en: Let's commit our code to Git so that we can refer back to this code in the future.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将我们的代码提交到Git，以便将来可以参考这段代码。
- en: Open **Terminal**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入以下命令以更改目录到我们的工作目录：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Give Git a description of what we''ve done since our last commit:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向Git描述我们自上次提交以来所做的工作：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We just looked at one of the simplest ways to create a CouchDB document with
    PHP. However, we need to evaluate if the code we just wrote is sustainable and
    a smart way for us to develop our application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看了使用PHP创建CouchDB文档的最简单的方法之一。然而，我们需要评估我们刚刚编写的代码是否可持续，并且是否是我们开发应用程序的明智方式。
- en: Is this technique good enough?
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这种技术足够好吗？
- en: Tough question. Technically, we could build out our application this way, but
    we would need to add a lot more code and spend the rest of the book refactoring
    our calls to `curl` until it worked perfectly. Then, we would need to spend a
    ton of time refactoring our calls into a simple library so that things would be
    easier to fix. In short, this technique won't work because we want to focus on
    building our application, instead of sorting out all of the communication issues
    between PHP and CouchDB. Luckily, there are a variety of CouchDB libraries that
    we can use to simplify our development process.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 棘手的问题。从技术上讲，我们可以以这种方式构建我们的应用程序，但我们需要添加更多的代码，并花费本书的其余时间重构我们对`curl`的调用，直到它完美运行。然后，我们需要花大量时间将我们的调用重构为一个简单的库，以便更容易修复问题。简而言之，这种技术不起作用，因为我们想专注于构建我们的应用程序，而不是解决PHP和CouchDB之间的所有通信问题。幸运的是，有各种各样的CouchDB库可以简化我们的开发过程。
- en: Available CouchDB libraries
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用的CouchDB库
- en: There are a variety of libraries that can make our lives easier when developing
    with PHP and CouchDB. All of the libraries are open source projects, which is
    great! But, some of these libraries have not been actively worked on to support
    the newer versions of CouchDB. Therefore, we will need to be selective with the
    libraries we choose to work with.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种库可以在使用PHP和CouchDB开发时使我们的生活更轻松。所有这些库都是开源项目，这很棒！但是，其中一些库已经不再积极开发以支持较新版本的CouchDB。因此，我们需要选择要使用的库。
- en: 'A list of some of the PHP and CouchDB libraries can be seen here: [http://wiki.apache.org/couchdb/Getting_started_with_PHP](http://wiki.apache.org/couchdb/Getting_started_with_PHP),
    and there are a variety of others hosted on GitHub that require a bit more digging.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一些PHP和CouchDB库的列表可以在这里看到：[http://wiki.apache.org/couchdb/Getting_started_with_PHP](http://wiki.apache.org/couchdb/Getting_started_with_PHP)，还有一些其他的库托管在GitHub上，需要更深入挖掘。
- en: Each library has strengths, but because simplicity is the key concept of Bones,
    it makes sense that we should also strive for simplicity in our PHP library. With
    that being said, our best solution is called **Sag**.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个库都有其优势，但由于简单是Bones的关键概念，因此在我们的PHP库中也应该追求简单。说到这一点，我们最好的解决方案就是**Sag**。
- en: Sag
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sag
- en: Sag is a great PHP library for CouchDB created by Sam Bisbee. Sag's guiding
    principle is simplicity, creating a powerful interface with little overhead that
    can be easily integrated with any application structure. It does not force your
    application to use a framework, special classes for documents, or ORM, but you
    still can if you want to. Sag accepts the basic PHP data structures (objects,
    strings, and so on) and returns either raw JSON or the response and the HTTP information
    in an object.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Sag是由Sam Bisbee创建的用于CouchDB的出色的PHP库。Sag的指导原则是简单，创建一个功能强大的接口，几乎没有额外开销，可以轻松集成到任何应用程序结构中。它不强制您的应用程序使用框架、文档的特殊类或ORM，但如果您愿意，仍然可以使用。Sag接受基本的PHP数据结构（对象、字符串等），并返回原始JSON或响应和对象中的HTTP信息。
- en: 'I''ll walk you through installation and the basics of Sag''s functionality,
    but you can also visit Sag''s website at: [http://www.saggingcouch.com/](http://www.saggingcouch.com/)
    for examples and documentation.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我将为您介绍Sag的安装和基本功能，但您也可以访问Sag的网站：[http://www.saggingcouch.com/](http://www.saggingcouch.com/)，了解示例和文档。
- en: Downloading and setting up Sag
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并设置Sag
- en: Sag is pretty unobtrusive and will fit right into our current application structure.
    All we need to do is use Git to grab Sag from its GitHub repository and place
    it in our `lib` directory.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Sag相当不显眼，将完全适应我们当前的应用程序结构。我们只需要使用Git从其GitHub存储库中获取Sag，并将其放在我们的`lib`目录中。
- en: Time for action — using Git to install Sag
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动——使用Git安装Sag
- en: Git makes setting up third party libraries really easy and allows us to update
    to the new versions when they are available.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Git使设置第三方库变得非常容易，并允许我们在可用时更新到新版本。
- en: Open **Terminal**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to make sure that you are in the working directory:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入以下命令以确保您在工作目录中：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add Sag to our repository using Git:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Git将Sag添加到我们的存储库：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What just happened?
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used Git to add Sag into our project using `git submodule add`, and then
    we initialized the submodule by typing `git submodule init`. Git's submodules
    allow us to have a full-fledged Git repository living inside of our repository.
    Any time a new release is made to Sag, you can run `git submodule update`, and
    you will receive the latest and greatest code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Git使用`git submodule add`将Sag添加到我们的项目中，然后通过键入`git submodule init`来初始化子模块。Git的子模块允许我们在我们的存储库中拥有一个完整的Git存储库。每当Sag发布新版本时，您可以运行`git
    submodule update`，您将收到最新和最棒的代码。
- en: Adding Sag to Bones
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Sag添加到Bones
- en: In order to use Sag, we'll add a few lines into `Bones` to make sure that our
    library can see and utilize it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Sag，我们将在`Bones`中添加几行代码，以确保我们的库可以看到并利用它。
- en: Time for action — adding Sag to Bones
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-将Sag添加到Bones
- en: Enabling and setting up Sag to work with `Bones` is extremely easy. Let's walk
    through it together!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 启用并设置Sag与`Bones`一起工作非常容易。让我们一起来看看！
- en: 'Open `lib/bones.php` inside of our working directory, and add the following
    line to the top of our class:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的工作目录中的`lib/bones.php`，并在我们的类顶部添加以下行：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We need to make sure that Sag is ready and available on each request. Let''s
    do this by adding a new variable to `Bones` called `$couch`, and setting it in
    our `__construct` function:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要确保Sag已准备好并在每个请求中可用。让我们通过在`Bones`中添加一个名为`$couch`的新变量，并在我们的`__construct`函数中设置它来实现这一点：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What just happened?
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We made sure that `Bones` could access and use Sag by using `require_once` to
    load the Sag resources. We then made sure that each time `Bones` is constructed,
    we would define the database server and port and set the database that we want
    to use.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确保`Bones`可以访问和使用Sag，通过使用`require_once`加载Sag资源。然后，我们确保每次构造`Bones`时，我们都会定义数据库服务器和端口，并设置我们要使用的数据库。
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that we don't need any credentials to interact with the `Verge` database
    because we haven't put any permissions on this database yet.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们与`Verge`数据库交互时不需要任何凭据，因为我们尚未对此数据库设置任何权限。
- en: Simplifying our code with Sag
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Sag简化我们的代码
- en: With Sag included in our application, we can simplify our database calls, hand
    off the handling and exception handling to Sag, and focus on building our product.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中包含Sag后，我们可以简化我们的数据库调用，将处理和异常处理交给Sag，并专注于构建我们的产品。
- en: Time for action — creating a document with Sag
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用Sag创建文档
- en: Now that we have Sag available and ready to use anywhere in our application,
    let's refactor the saving of the user class that we placed in the `/signup post`
    route.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在应用程序中随处可用并准备好使用Sag，让我们重构放置在`/signup post`路由中的用户类的保存。
- en: 'Open `index.php`, and remove all of the extra code that we added in previous
    sections so that our `/signup post` route looks similar to the following code
    snippet:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`index.php`，删除我们在之前部分添加的所有额外代码，这样我们的`/signup post`路由看起来类似于以下代码片段：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What just happened?
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used Sag to create a post to our CouchDB database using substantially less
    code! Sag's post method allows you to pass data with it, so it's really easy to
    trigger.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Sag创建了一个到我们的CouchDB数据库的帖子，使用的代码大大减少了！Sag的post方法允许您传递数据，因此触发起来非常容易。
- en: 'Let''s quickly go through the signup process again:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速通过注册流程：
- en: Open up your browser to `http://localhost/verge/signup`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，输入`http://localhost/verge/signup`。
- en: Enter in a new name into the **Name** textbox and a new e-mail into the **Email**
    textbox.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**文本框中输入一个新名称，然后在**电子邮件**文本框中输入一个新电子邮件。
- en: Click on **Submit**.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**。
- en: 'A new document was created in CouchDB, so let''s check Futon to make sure it''s
    there:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在CouchDB中创建了一个新文档，让我们检查一下Futon，确保它在那里：
- en: Open your browser to `http://localhost:5984/_utils/database.html?verge`, to
    look at the verge database.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，输入`http://localhost:5984/_utils/database.html?verge`，查看verge数据库。
- en: Click on the second document in the list.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击列表中的第二个文档。
- en: Looking at the details of this new document, you'll see that it has the same
    structure as the first one that we made.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看这个新文档的详细信息，您会发现它与我们制作的第一个文档具有相同的结构。
- en: Perfect! The result ended up exactly as it did with our quick and dirty curl
    script, but our code is much more simplified, and Sag is handling a lot for us
    behind the scenes.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！结果与我们快速而肮脏的curl脚本完全一样，但我们的代码更简化，Sag在幕后处理了很多事情。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are currently not catching or handling any errors. We'll talk more about
    how to handle these in future chapters. Thankfully, CouchDB handles errors in
    a friendly manner, and Sag has made sure to make it easy to track down problems.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们没有捕获或处理任何错误。我们将在以后的章节中更多地讨论如何处理这些错误。幸运的是，CouchDB以友好的方式处理错误，并且Sag已经确保了很容易追踪问题。
- en: Adding more structure
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加更多结构
- en: It's great that we can create documents so easily, but it's also important that
    we have a strong structure for our classes, allowing us to stay organized.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如此轻松地创建文档，这很棒，但对于我们的类来说，有一个强大的结构也很重要，这样我们可以保持有条理。
- en: Time for action — including the classes directory
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-包括类目录
- en: In order for us to use our classes, we'll need to add some code to `Bones` so
    that we can automatically load class names as they are used. This will achieve
    that, so we don't have to continuously include more files as we add new classes.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们能够使用我们的类，我们需要在`Bones`中添加一些代码，以便我们可以在使用时自动加载类名。这将实现这一点，这样我们就不必在添加新类时不断包含更多文件。
- en: Add the following code to `lib/bones.php:`
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`lib/bones.php`：
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: What just happened?
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added a `__autoload` function to our `Bones` library that will give PHP a
    last attempt to load a class name if it can't find the class. The `__autoload`
    function is passed the `$classname`, and we use the `$classname` to find the file
    of the named class. We are making the requested `$classname` lowercase using the
    `strtolower` function so that we can find the named file. We then added the root
    of the working directory with the `ROOT` constant and the `classes` folder.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的“Bones”库中添加了一个`__autoload`函数，如果找不到类，它将给PHP最后一次尝试加载类名。`__autoload`函数传递了`$classname`，我们使用`$classname`来找到命名类的文件。我们使用`strtolower`函数使请求的`$classname`变成小写，这样我们就可以找到命名文件。然后我们添加了工作目录的根目录和`classes`文件夹。
- en: Working with classes
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用类
- en: Now that we have the ability to load classes, let's create some! We'll start
    by creating a base class from which all other classes will inherit properties.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了加载类的能力，让我们创建一些！我们将从创建一个基类开始，所有其他类都将继承它的属性。
- en: Time for action — creating a Base object
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-创建一个基本对象
- en: In this section, we will create a base class called `base.php` that all of our
    classes will inherit.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建一个名为`base.php`的基类，所有我们的类都将继承它。
- en: Let's start by creating a new file called `base.php`, and placing it in the
    classes folder inside of the working directory (`/Library/Webserver/Documents/verge/classes/base.php`)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从创建一个名为`base.php`的新文件开始，并将其放在工作目录内的`/Library/Webserver/Documents/verge/classes/base.php`文件夹中。
- en: Create an abstract class with a `__construct` function in `base.php`. On `__construct`
    of the object, let's take `$type` as an option, and set it to a protected variable
    also called `$type`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`base.php`中创建一个带有`__construct`函数的抽象类。在对象的`__construct`中，让我们将`$type`作为一个选项，并将其设置为一个受保护的变量，也称为`$type`。
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In order to facilitate the getting and setting of variables in our classes later,
    let's add the `__get()` and `__set()` functions right after the `__construct`
    function.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了方便以后在我们的类中获取和设置变量，让我们在`__construct`函数之后添加`__get()`和`__set()`函数。
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Each time we save our object to Couch DB, we'll want to be able to represent
    it in the JSON string. So, let's create a helper function called `to_json()` that
    will convert our object into the JSON format.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次我们将对象保存到Couch DB时，我们希望能够将其表示为JSON字符串。因此，让我们创建一个名为`to_json()`的辅助函数，它将把我们的对象转换成JSON格式。
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What just happened?
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a base class called `base.php` that will serve as the basis for all
    other classes that we build. Inside the class, we defined a protected variable
    called `$type`, which will store the classification of the document such as `user`
    or `post`. Next, we added a `__construct` function that will be called each time
    the object is created. This function accepts the option `$type`, which we will
    set in each of the classes that extend on `Base`. We then created the `__get`
    and `__set` functions. `__get` and `__set` are called **magic methods** and will
    allow us to use `get` and `set` protected variables without having any extra code.
    Lastly, we added a function called `to_json` that uses `get_object_vars`, along
    with `json_encode`, to represent our object in a JSON string. Doing little things
    like this in our base class will make our lives much easier down the road.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`base.php`的基类，它将作为我们构建的所有其他类的基础。在类内部，我们定义了一个受保护的变量`$type`，它将存储文档的分类，如`user`或`post`。接下来，我们添加了一个`__construct`函数，它将在每次创建对象时被调用。这个函数接受选项`$type`，我们将在每个继承`Base`的类中设置它。然后，我们创建了`__get`和`__set`函数。`__get`和`__set`被称为**魔术方法**，它们将允许我们使用`get`和`set`受保护的变量，而无需任何额外的代码。最后，我们添加了一个名为`to_json`的函数，它使用`get_object_vars`和`json_encode`来表示我们的对象为JSON字符串。在我们的基类中做这样的小事情将使我们未来的生活变得更加轻松。
- en: Time for action — creating a User object
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间来行动了——创建一个User对象
- en: Now that we have our `Base` class created, let's create a `User` class that
    will house the properties and functions for all things related to users.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的`Base`类，让我们创建一个`User`类，它将包含与用户相关的所有属性和函数。
- en: Create a new file called `user.php`, and place it in the `classes` folder along
    with `base.php`.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`user.php`的新文件，并将其放在`base.php`所在的`classes`文件夹中。
- en: Let's create a class that extends our `Base` class.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个继承我们`Base`类的类。
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s add the two properties that we know we need so far: `name` and `email`,
    into our `User` class.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加我们已经知道需要的两个属性`name`和`email`到我们的`User`类中。
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Let's add a `__construct` function that will tell our `Base` class that our
    document type is `user` on creation.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个`__construct`函数，告诉我们的`Base`类，在创建时我们的文档类型是`user`。
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: What just happened?
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a simple class called `user.php` that extends `Base`. **Extends**
    means that it will inherit the properties and functions that are available so
    that we can take advantage of them. We then included two protected properties
    called `$name` and `$email`. Finally, we created a `__construct` function. The
    construct in this instance tells the parent (which is our `Base` class) that the
    type of the document is `user`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的类`user.php`，它继承了`Base`。**继承**意味着它将继承可用的属性和函数，以便我们可以利用它们。然后，我们包括了两个受保护的属性`$name`和`$email`。最后，我们创建了一个`__construct`函数。在这种情况下，构造函数告诉父类（即我们的`Base`类），文档的类型是`user`。
- en: Time for action — plugging the User object in
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间来行动了——插入User对象
- en: With our new `User` object in our system, we can easily plug it into our application
    code, and we should be up and running.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的新的`User`对象，我们可以轻松地将其插入到我们的应用程序代码中，然后就可以运行了。
- en: 'Open up the `index.php` file, and change `stdClass` to `User()`. While we are
    at it, we can also remove `$user->type = ''user''` because that''s now handled
    in our class:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`文件，将`stdClass`改为`User()`。与此同时，我们还可以移除`$user->type = 'user'`，因为现在这个问题已经在我们的类中处理了：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Adjust the Sag `post` statement so that we can pass our class in the JSON format:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整Sag的`post`语句，以便我们可以以JSON格式传递我们的类。
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: What just happened?
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We replaced the instance of `stdClass` with `User()`. This will give us complete
    control over getting and setting the variables. We then removed `$user->type =
    'user'` because the `__construct` functions in our `User` and `Base` objects have
    taken care of that. Finally, we added the `to_json()` function that we created
    earlier so that we could send our object as a JSON encoded string.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用`User()`替换了`stdClass`的实例。这将使我们完全控制获取和设置变量。然后，我们移除了`$user->type = 'user'`，因为我们的`User`和`Base`对象中的`__construct`函数已经处理了这个问题。最后，我们添加了之前创建的`to_json()`函数，这样我们就可以将我们的对象作为JSON编码的字符串发送出去。
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Sag could technically handle an object by itself with JSON, but it's important
    that we're able to retrieve a JSON string from our object so that you can interact
    with CouchDB in any way you want. It's possible that some day in the future you
    may need to come back and rewrite everything using `curl` or another library.
    So, it's important that you know how to represent your data in JSON.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Sag在技术上可以自己处理一个对象的JSON，但重要的是我们能够从我们的对象中检索到一个JSON字符串，这样你就可以以任何你想要的方式与CouchDB交互。将来可能需要回来使用`curl`或另一个库重写所有内容，所以重要的是你知道如何表示你的数据为JSON。
- en: Testing it out
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试一下
- en: 'Let''s quickly go through our signup process again to make sure that everything
    is still working:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速再次通过我们的注册流程，确保一切仍然正常运行：
- en: Open your browser to `http://localhost/verge/signup`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器到`http://localhost/verge/signup`。
- en: Enter in a new name into the **Name** textbox and a new e-mail into the **Email**
    textbox.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**文本框中输入一个新名称，在**电子邮件**文本框中输入一个新电子邮件。
- en: Click on **Submit**.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**。
- en: 'A new document should have been created in CouchDB. Let''s check Futon to make
    sure it''s there:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在CouchDB中应该已经创建了一个新文档。让我们检查Futon，确保它在那里：
- en: Open up your browser to `http://localhost:5984/_utils/database.html?verge` to
    look at the verge database.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器到`http://localhost:5984/_utils/database.html?verge`查看verge数据库。
- en: Click on the third document in the list
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击列表中的第三个文档
- en: Looking at the details of this new document, you'll see that it has the same
    structure as the first two that we made.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看这个新文档的细节，你会发现它和我们制作的前两个文档结构相同。
- en: Perfect! Everything worked just as we had it before, but we're now using a more
    elegant solution that we'll be able to build on top of in future chapters.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！一切都和以前一样，但现在我们使用了一个更加优雅的解决方案，我们将能够在未来的章节中构建在其基础上。
- en: Committing it to Git
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交到Git
- en: 'Let''s commit the code to Git so we''ve tracked our progress so far:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把代码提交到Git，这样我们就可以追踪我们到目前为止的进展：
- en: Open **Terminal**.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以更改目录到我们的工作目录：
- en: '[PRE26]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We've added some new files in our `classes` folder. So, let's make sure we add
    those files to Git.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在`classes`文件夹中添加了一些新文件。所以，让我们确保将这些文件添加到Git中。
- en: '[PRE27]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Give Git a description of what we''ve done since our last commit:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给Git一个描述，说明我们自上次提交以来做了什么：
- en: '[PRE28]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: By using the `classes/* syntax`, we are telling Git to add every file inside
    of the classes folder. This is handy when you've added multiple files and don't
    want to add each file individually.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`classes/*`语法，我们告诉Git添加classes文件夹中的每个文件。当你添加了多个文件并且不想逐个添加每个文件时，这很方便。
- en: Wrapping up
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We''ve completed the code for this chapter. It''s always good practice to push
    your code to GitHub once in a while. In fact, when you are working with multiple
    developers, it''s crucial. I won''t remind you to do this any more in this book.
    So, make sure you do it often:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了这一章的代码。定期将代码推送到GitHub是一个很好的做法。事实上，当你与多个开发人员一起工作时，这是至关重要的。我不会在这本书中再提醒你这样做。所以，请确保经常这样做：
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This line of code reads like a sentence if you add just a few words in between.
    The sentence is telling Git to `push` to the `origin` (which we have defined as
    GitHub), and we want to send the `master` branch.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码读起来像一个句子，如果你在其中加入一些词。这句话告诉Git要`push`到`origin`（我们已经定义为GitHub），并且我们要发送`master`分支。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope you enjoyed this chapter. It's fun when all of these technologies work
    together and allow us to easily save things to CouchDB.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这一章。当所有这些技术一起工作，让我们能够轻松地保存东西到CouchDB时，这是很有趣的。
- en: 'Let''s recap what we talked about in this chapter:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这一章我们谈到的内容：
- en: We looked at several different ways we could talk to CouchDB with PHP
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们看了几种不同的方法，我们可以用PHP与CouchDB交流
- en: We tied Sag into Bones
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将Sag与Bones联系起来
- en: We built an object-oriented class structure that will save us a lot of headaches
    down the road
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们建立了一个面向对象的类结构，这将为我们节省很多麻烦
- en: We tested to make sure that when we submitted our signup form, a CouchDB document
    was created
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们测试了一下，确保当我们提交我们的注册表单时，CouchDB文档被创建了
- en: In the next chapter, we are going to actively look at some of the great functionality
    that CouchDB already has plugged in for our users and how we can use CouchDB to
    build out the standard signup and login processes that most applications have.
    Stretch your typing fingers, and get yourself a nice, big cup of coffee as we're
    about to have some real fun.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将积极地研究CouchDB已经为我们的用户提供的一些很棒的功能，以及我们如何使用CouchDB来构建大多数应用程序都具有的标准注册和登录流程。伸展你的打字手指，准备一大杯咖啡，因为我们即将开始真正的乐趣。
