["```php\nfunction search(array $numbers, int $needle): bool {\n\n    $totalItems = count($numbers);\n\n    for ($i = 0; $i < $totalItems; $i++) {\n\n      if($numbers[$i] === $needle){\n\n        return TRUE;\n\n      }\n\n     }\n\n    return FALSE;\n\n}\n\n```", "```php\n$numbers = range(1, 200, 5); \n\nif (search($numbers, 31)) { \n\n    echo \"Found\"; \n\n} else { \n\n    echo \"Not found\"; \n\n}\n\n```", "```php\nBinarySearch(A : list of sorted items, value) { \n\n       low = 0 \n\n       high = N\n\n       while (low <= high) { \n\n    // lowest int value, no fraction \n\n           mid = (low + high) / 2              \n\n           if (A[mid] > value) \n\n               high = mid - 1 \n\n           else if (A[mid] < value) \n\n               low = mid + 1 \n\n           else  \n\n             return true \n\n       }\n\n       return false \n\n }\n\n```", "```php\nfunction binarySearch(array $numbers, int $needle): bool { \n\n    $low = 0; \n\n    $high = count($numbers) - 1; \n\n    while ($low <= $high) { \n\n      $mid = (int) (($low + $high) / 2); \n\n      if ($numbers[$mid] > $needle) { \n\n          $high = $mid - 1;\n\n      } else if ($numbers[$mid] < $needle) { \n\n          $low = $mid + 1;\n\n      } else {\n\n          return TRUE;\n\n      }\n\n    }\n\n    return FALSE; \n\n}\n\n```", "```php\n$numbers = range(1, 200, 5); \n\n$number = 31;\n\nif (binarySearch($numbers, $number) !== FALSE) { \n\n    echo \"$number Found \\n\"; \n\n} else { \n\n    echo \"$number Not found \\n\"; \n\n} \n\n$number = 500; \n\nif (binarySearch($numbers, $number) !== FALSE) { \n\n    echo \"$number Found \\n\"; \n\n} else { \n\n    echo \"$number Not found \\n\"; \n\n} \n\n```", "```php\n31 Found\n\n500 Not found\n\n```", "```php\nBinarySearch(A : list of sorted items, value, low, high) { \n\n   if (high < low) \n\n          return false \n\n      // lowest int value, no fraction \n\n           mid = (low + high) / 2   \n\n           if (A[mid] > value) \n\n               return BinarySearch(A, value, low, mid - 1) \n\n           else if (A[mid] < value) \n\n               return BinarySearch(A, value, mid + 1, high)  \n\n     else \n\n      return TRUE;      \n\n}\n\n```", "```php\nfunction binarySearch(array $numbers, int $needle,  \n\nint $low, int $high): bool { \n\n    if ($high < $low) { \n\n    return FALSE; \n\n    } \n\n    $mid = (int) (($low + $high) / 2); \n\n    if ($numbers[$mid] > $needle) { \n\n      return binarySearch($numbers, $needle, $low, $mid - 1); \n\n    } else if ($numbers[$mid] < $needle) { \n\n      return binarySearch($numbers, $needle, $mid + 1, $high); \n\n    } else { \n\n      return TRUE; \n\n    } \n\n}\n\n```", "```php\n$numbers = range(1, 200, 5); \n\n$number = 31; \n\nif (binarySearch($numbers, $number, 0, count($numbers) - 1) !== FALSE) { \n\n    echo \"$number Found \\n\"; \n\n} else { \n\n    echo \"$number Not found \\n\"; \n\n} \n\n$number = 500; \n\nif (binarySearch($numbers, $number, 0, count($numbers) - 1) !== FALSE) { \n\n    echo \"$number Found \\n\"; \n\n} else { \n\n    echo \"$number Not found \\n\"; \n\n}\n\n```", "```php\nfunction repetitiveBinarySearch(array $numbers, int $needle): int { \n\n    $low = 0;\n\n    $high = count($numbers) - 1;\n\n    $firstOccurrence = -1;\n\n    while ($low <= $high) { \n\n      $mid = (int) (($low + $high) / 2); \n\n      if ($numbers[$mid] === $needle) { \n\n          $firstOccurrence = $mid; \n\n          $high = $mid - 1; \n\n      } else if ($numbers[$mid] > $needle) { \n\n          $high = $mid - 1;\n\n      } else {\n\n          $low = $mid + 1;\n\n      } \n\n    } \n\n    return $firstOccurrence; \n\n} \n\n```", "```php\n$numbers = [1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5]; \n\n$number = 2; \n\n$pos = repetitiveBinarySearch($numbers, $number); \n\nif ($pos >= 0) { \n\n    echo \"$number Found at position $pos \\n\"; \n\n} else { \n\n    echo \"$number Not found \\n\"; \n\n} \n\n$number = 5; \n\n$pos = repetitiveBinarySearch($numbers, $number); \n\nif ($pos >= 0) { \n\n    echo \"$number Found at position $pos \\n\"; \n\n} else { \n\n    echo \"$number Not found \\n\"; \n\n}\n\n```", "```php\n2 Found at position 1\n\n5 Found at position 16\n\n```", "```php\npos = low + [ (key-arr[low])*(high-low) / (arr[high]-arr[low]) ]\n\n```", "```php\nfunction interpolationSearch(array $arr, int $key): int { \n\n    $low = 0; \n\n    $high = count($arr) - 1; \n\n    while ($arr[$high] != $arr[$low] && $key >= $arr[$low] && \n\n      $key <= $arr[$high]) { \n\n    $mid = intval($low + (($key - $arr[$low]) * ($high - $low) \n\n    / ($arr[$high] - $arr[$low]))); \n\n      if ($arr[$mid] < $key) \n\n          $low = $mid + 1; \n\n      else if ($key < $arr[$mid]) \n\n          $high = $mid - 1; \n\n      else \n\n          return $mid; \n\n    } \n\n    if ($key == $arr[$low]) \n\n      return $low; \n\n    else\n\n      return -1; \n\n}\n\n```", "```php\nfunction exponentialSearch(array $arr, int $key): int { \n\n    $size = count($arr); \n\n    if ($size == 0) \n\n      return -1; \n\n    $bound = 1; \n\n    while ($bound < $size && $arr[$bound] < $key) { \n\n      $bound *= 2; \n\n    } \n\n    return binarySearch($arr, $key, intval($bound / 2),  \n\nmin($bound, $size)); \n\n}\n\n```", "```php\n$arr = [];\n\n$count = rand(10, 30); \n\nfor($i = 0; $i<$count;$i++) {     \n\n    $val = rand(1,500);     \n\n    $arr[$val] = $val;     \n\n} \n\n$number = 100; \n\nif(isset($arr[$number])) { \n\n    echo \"$number found \"; \n\n} else { \n\n    echo \"$number not found\"; \n\n}\n\n```", "```php\nstring hash(string $algo ,string $data [,bool $raw_output = false ])\n\n```", "```php\nprocedure BFS(Node root)  \n\n  Q := empty queue \n\n  Q.enqueue(root); \n\n  while(Q != empty) \n\n     u := Q.dequeue() \n\n     for each node w that is childnode of u \n\n        Q.enqueue(w) \n\n     end for each \n\n  end while \n\nend procedure\n\n```", "```php\nclass TreeNode { \n\n    public $data = NULL; \n\n    public $children = []; \n\n    public function __construct(string $data = NULL) { \n\n      $this->data = $data; \n\n    } \n\n    public function addChildren(TreeNode $node) { \n\n      $this->children[] = $node; \n\n    } \n\n} \n\nclass Tree { \n\n    public $root = NULL; \n\n    public function __construct(TreeNode $node) { \n\n      $this->root = $node; \n\n    } \n\n    public function BFS(TreeNode $node): SplQueue { \n\n      $queue = new SplQueue; \n\n      $visited = new SplQueue; \n\n      $queue->enqueue($node); \n\n      while (!$queue->isEmpty()) { \n\n          $current = $queue->dequeue(); \n\n          $visited->enqueue($current); \n\n          foreach ($current->children as $child) { \n\n            $queue->enqueue($child); \n\n          } \n\n      } \n\n    return $visited; \n\n    }\n\n}\n\n```", "```php\n    $root = new TreeNode(\"8\"); \n\n    $tree = new Tree($root); \n\n    $node1 = new TreeNode(\"3\"); \n\n    $node2 = new TreeNode(\"10\"); \n\n    $root->addChildren($node1); \n\n    $root->addChildren($node2); \n\n    $node3 = new TreeNode(\"1\"); \n\n    $node4 = new TreeNode(\"6\"); \n\n    $node5 = new TreeNode(\"14\"); \n\n    $node1->addChildren($node3); \n\n    $node1->addChildren($node4); \n\n    $node2->addChildren($node5); \n\n    $node6 = new TreeNode(\"4\"); \n\n    $node7 = new TreeNode(\"7\"); \n\n    $node8 = new TreeNode(\"13\"); \n\n    $node4->addChildren($node6); \n\n    $node4->addChildren($node7); \n\n    $node5->addChildren($node8); \n\n    $visited = $tree->BFS($tree->root); \n\n    while (!$visited->isEmpty()) { \n\n      echo $visited->dequeue()->data . \"\\n\"; \n\n    } \n\n```", "```php\n8\n\n3\n\n10\n\n1\n\n6\n\n14\n\n4\n\n7\n\n13\n\n```", "```php\nprocedure DFS(Node current)       \n\n     for each node v that is childnode of current  \n\n        DFS(v) \n\n     end for each \n\nend procedure \n\n```", "```php\nclass TreeNode { \n\n    public $data = NULL; \n\n    public $children = []; \n\n    public function __construct(string $data = NULL) { \n\n      $this->data = $data; \n\n    } \n\n    public function addChildren(TreeNode $node) { \n\n      $this->children[] = $node; \n\n    } \n\n} \n\nclass Tree { \n\n    public $root = NULL; \n\n    public $visited; \n\n    public function __construct(TreeNode $node) { \n\n      $this->root = $node; \n\n      $this->visited = new SplQueue; \n\n    } \n\n    public function DFS(TreeNode $node) { \n\n      $this->visited->enqueue($node); \n\n      if($node->children){ \n\n          foreach ($node->children as $child) { \n\n        $this->DFS($child); \n\n          } \n\n      } \n\n    }\n\n}\n\n```", "```php\ntry { \n\n    $root = new TreeNode(\"8\"); \n\n    $tree = new Tree($root); \n\n    $node1 = new TreeNode(\"3\"); \n\n    $node2 = new TreeNode(\"10\"); \n\n    $root->addChildren($node1); \n\n    $root->addChildren($node2); \n\n    $node3 = new TreeNode(\"1\"); \n\n    $node4 = new TreeNode(\"6\"); \n\n    $node5 = new TreeNode(\"14\"); \n\n    $node1->addChildren($node3); \n\n    $node1->addChildren($node4); \n\n    $node2->addChildren($node5); \n\n    $node6 = new TreeNode(\"4\"); \n\n    $node7 = new TreeNode(\"7\"); \n\n    $node8 = new TreeNode(\"13\"); \n\n    $node4->addChildren($node6); \n\n    $node4->addChildren($node7); \n\n    $node5->addChildren($node8); \n\n    $tree->DFS($tree->root); \n\n    $visited = $tree->visited; \n\n    while (!$visited->isEmpty()) { \n\n      echo $visited->dequeue()->data . \"\\n\"; \n\n    } \n\n} catch (Exception $e) { \n\n    echo $e->getMessage(); \n\n}\n\n```", "```php\n8\n\n3\n\n1\n\n6\n\n4\n\n7\n\n10\n\n14\n\n13\n\n```", "```php\nclass TreeNode { \n\n    public $data = NULL; \n\n    public $children = []; \n\n    public function __construct(string $data = NULL) { \n\n      $this->data = $data; \n\n    } \n\n    public function addChildren(TreeNode $node) { \n\n      $this->children[] = $node; \n\n    } \n\n} \n\nclass Tree { \n\n    public $root = NULL; \n\n    public function __construct(TreeNode $node) { \n\n      $this->root = $node; \n\n    }\n\n    public function DFS(TreeNode $node): SplQueue { \n\n      $stack = new SplStack;\n\n      $visited = new SplQueue;\n\n      $stack->push($node);\n\n      while (!$stack->isEmpty()) { \n\n          $current = $stack->pop(); \n\n          $visited->enqueue($current); \n\n          foreach ($current->children as $child) { \n\n            $stack->push($child); \n\n          } \n\n      } \n\n      return $visited; \n\n    }\n\n}\n\ntry {\n\n    $root = new TreeNode(\"8\"); \n\n    $tree = new Tree($root); \n\n    $node1 = new TreeNode(\"3\"); \n\n    $node2 = new TreeNode(\"10\"); \n\n    $root->addChildren($node1); \n\n    $root->addChildren($node2); \n\n    $node3 = new TreeNode(\"1\"); \n\n    $node4 = new TreeNode(\"6\"); \n\n    $node5 = new TreeNode(\"14\"); \n\n    $node1->addChildren($node3); \n\n    $node1->addChildren($node4); \n\n    $node2->addChildren($node5); \n\n    $node6 = new TreeNode(\"4\"); \n\n    $node7 = new TreeNode(\"7\"); \n\n    $node8 = new TreeNode(\"13\"); \n\n    $node4->addChildren($node6); \n\n    $node4->addChildren($node7); \n\n    $node5->addChildren($node8); \n\n    $visited = $tree->DFS($tree->root); \n\n    while (!$visited->isEmpty()) { \n\n      echo $visited->dequeue()->data . \"\\n\"; \n\n    } \n\n} catch (Exception $e) { \n\n    echo $e->getMessage(); \n\n}\n\n```", "```php\npublic function DFS(TreeNode $node): SplQueue { \n\n  $stack = new SplStack; \n\n  $visited = new SplQueue;\n\n  $stack->push($node); \n\n  while (!$stack->isEmpty()) { \n\n      $current = $stack->pop(); \n\n      $visited->enqueue($current); \n\n      $current->children = array_reverse($current->children); \n\n      foreach ($current->children as $child) { \n\n        $stack->push($child); \n\n      } \n\n    } \n\n    return $visited;\n\n}\n\n```", "```php\n$current->children = array_reverse($current->children);\n\n```"]