["```php\n**$ ./yiic migrate create create_issue_user_and_assignment_tables**\n\n```", "```php\n  // Use safeUp/safeDown to do migration with transaction\n  public function safeUp()\n  {\n    //create the issue table\n    $this->createTable('tbl_issue', array(\n      'id' => 'pk',\n        'name' => 'string NOT NULL',\n        'description' => 'text',\n        'project_id' => 'int(11) DEFAULT NULL',\n      'type_id' => 'int(11) DEFAULT NULL',\n      'status_id' => 'int(11) DEFAULT NULL',\n      'owner_id' => 'int(11) DEFAULT NULL',\n      'requester_id' => 'int(11) DEFAULT NULL',\n      'create_time' => 'datetime DEFAULT NULL',\n      'create_user_id' => 'int(11) DEFAULT NULL',\n      'update_time' => 'datetime DEFAULT NULL',\n      'update_user_id' => 'int(11) DEFAULT NULL',\n       ), 'ENGINE=InnoDB');\n\n    //create the user table\n    $this->createTable('tbl_user', array(\n      'id' => 'pk',\n      'username' => 'string NOT NULL',\n        'email' => 'string NOT NULL',\n        'password' => 'string NOT NULL',\n      'last_login_time' => 'datetime DEFAULT NULL',\n      'create_time' => 'datetime DEFAULT NULL',\n      'create_user_id' => 'int(11) DEFAULT NULL',\n      'update_time' => 'datetime DEFAULT NULL',\n      'update_user_id' => 'int(11) DEFAULT NULL',\n       ), 'ENGINE=InnoDB');\n\n    //create the assignment table that allows for many-to-many \n//relationship between projects and users\n    $this->createTable('tbl_project_user_assignment', array(\n      'project_id' => 'int(11) NOT NULL',\n      'user_id' => 'int(11) NOT NULL',\n      'PRIMARY KEY (`project_id`,`user_id`)',\n     ), 'ENGINE=InnoDB');\n\n    //foreign key relationships\n\n    //the tbl_issue.project_id is a reference to tbl_project.id \n    $this->addForeignKey(\"fk_issue_project\", \"tbl_issue\", \"project_id\", \"tbl_project\", \"id\", \"CASCADE\", \"RESTRICT\");\n\n    //the tbl_issue.owner_id is a reference to tbl_user.id \n    $this->addForeignKey(\"fk_issue_owner\", \"tbl_issue\", \"owner_id\", \"tbl_user\", \"id\", \"CASCADE\", \"RESTRICT\");\n\n    //the tbl_issue.requester_id is a reference to tbl_user.id \n    $this->addForeignKey(\"fk_issue_requester\", \"tbl_issue\", \"requester_id\", \"tbl_user\", \"id\", \"CASCADE\", \"RESTRICT\");\n\n    //the tbl_project_user_assignment.project_id is a reference to tbl_project.id \n    $this->addForeignKey(\"fk_project_user\", \"tbl_project_user_assignment\", \"project_id\", \"tbl_project\", \"id\", \"CASCADE\", \"RESTRICT\");\n\n    //the tbl_project_user_assignment.user_id is a reference to tbl_user.id \n    $this->addForeignKey(\"fk_user_project\", \"tbl_project_user_assignment\", \"user_id\", \"tbl_user\", \"id\", \"CASCADE\", \"RESTRICT\");\n\n  }\n\n  public function safeDown()\n  {\n    $this->truncateTable('tbl_project_user_assignment');\n    $this->truncateTable('tbl_issue');\n    $this->truncateTable('tbl_user');\n    $this->dropTable('tbl_project_user_assignment');\n    $this->dropTable('tbl_issue');\n    $this->dropTable('tbl_user');\n  }\n```", "```php\nconst TYPE_BUG=0;\nconst TYPE_FEATURE=1;\nconst TYPE_TASK=2;\n```", "```php\n/**\n  * Retrieves a list of issue types\n  * @return array an array of available issue types.\n  */\npublic function getTypeOptions()\n{\n  return array(\n    self::TYPE_BUG=>'Bug',\n    self::TYPE_FEATURE=>'Feature',\n    self::TYPE_TASK=>'Task',\n  );\n}\n```", "```php\n<div class=\"row\">\n  <?php echo $form->labelEx($model,'type_id'); ?>\n  <?php echo $form->textField($model,'type_id'); ?>\n  <?php echo $form->error($model,'type_id'); ?>\n</div> \n```", "```php\n<?php $form=$this->beginWidget('CActiveForm', array(\n  'id'=>'issue-form',\n  'enableAjaxValidation'=>false,\n)); ?>\n```", "```php\n/**\n   * Creates a new model.\n   * If creation is successful, the browser will be redirected to the 'view' \n * page.\n   */\n  public function actionCreate()\n  {\n    $model=new Issue;\n\n    // Uncomment the following line if AJAX validation is needed\n    // $this->performAjaxValidation($model);\n\n    if(isset($_POST['Issue']))\n    {\n      $model->attributes=$_POST['Issue'];\n      if($model->save())\n        $this->redirect(array('view','id'=>$model->id));\n    }\n\n    $this->render('create',array(\n      'model'=>$model,\n    ));\n  }\n```", "```php\n$form->labelEx($model,'type_id');\n```", "```php\npublic function attributeLabels()\n{\n    return array(\n      'id' => 'ID',\n      'name' => 'Name',\n      'description' => 'Description',\n      'project_id' => 'Project',\n **'type_id' => 'Type',**\n      'status_id' => 'Status',\n      'owner_id' => 'Owner',\n      'requester_id' => 'Requester',\n      'create_time' => 'Create Time',\n      'create_user_id' => 'Create User',\n      'update_time' => 'Update Time',\n      'update_user_id' => 'Update User',\n    );\n}\n```", "```php\n  public function rules()\n  {\n    // NOTE: you should only define rules for those attributes that\n    // will receive user inputs.\n    return array(\n      array('name', 'required'),\n **array('project_id, type_id, status_id, owner_id, requester_id, create_user_id, update_user_id', 'numerical', 'integerOnly'=>true),**\n\n```", "```php\n<?php echo $form->dropDownList($model,'type_id', $model->getTypeOptions()); ?>\n```", "```php\narray('type_id', 'in', 'range'=>self::getAllowedTypeRange()),\n```", "```php\npublic static function getAllowedTypeRange()\n{\n  return array(\n    self::TYPE_BUG,\n    self::TYPE_FEATURE,\n    self::TYPE_TASK,\n  );\n}\n```", "```php\npublic function filterSomeMethodName($filterChain)\n{\n...\n}\n```", "```php\npublic function filterProjectContext($filterChain)\n{   \n     $filterChain->run(); \n} \n```", "```php\n/**\n * @return array action filters\n */\npublic function filters()\n{\n  return array(\n    'accessControl', // perform access control for CRUD operations  \n **'projectContext + create', //check to ensure valid project context**\n  );\n}\n```", "```php\nreturn array(\n        'projectContext - update, view' ,\n );\n```", "```php\nclass IssueController extends CController\n{\n     ....\n     /**\n   * @var private property containing the associated Project model instance.\n   */\n     private $_project = null; \n\n     /**\n   * Protected method to load the associated Project model class\n       * @param integer projectId the primary identifier of the associated Project\n * @return object the Project data model based on the primary key \n   */\n     protected function loadProject($projectId)    {\n     //if the project property is null, create it based on input id\n     if($this->_project===null)\n     {\n      $this->_project=Project::model()->findByPk($projectId);\n      if($this->_project===null)\n                  {\n          throw new CHttpException(404,'The requested project does not exist.'); \n         }\n     }\n\n     return $this->_project; \n  } \n\n  /**\n   * In-class defined filter method, configured for use in the above filters() \n * method. It is called before the actionCreate() action method is run in \n * order to ensure a proper project context\n   */\n  public function filterProjectContext($filterChain)\n  {   \n//set the project identifier based on GET input request variables       if(isset($_GET['pid']))\n      $this->loadProject($_GET['pid']);   \n    else\n      throw new CHttpException(403,'Must specify a project before performing this action.');\n\n    //complete the running of other filters and execute the requested action\n    $filterChain->run();\n\n  }\n  ...\n}\n```", "```php\n$this->menu=array(\n **array('label'=>'Create Issue', 'url'=>array('create')),**\n  array('label'=>'Manage Issue', 'url'=>array('admin')),\n);\n```", "```php\narray('label'=>'Create Issue', 'url'=>array('create', 'pid'=>1)),\n\n```", "```php\n$this->menu=array(\n  array('label'=>'List Project', 'url'=>array('index')),\n  array('label'=>'Create Project', 'url'=>array('create')),\n  array('label'=>'Update Project', 'url'=>array('update', 'id'=>$model->id)),\n  array('label'=>'Delete Project', 'url'=>'#', 'linkOptions'=>array('submit'=>array('delete','id'=>$model->id),'confirm'=>'Are you sure you want to delete this item?')),\n  array('label'=>'Manage Project', 'url'=>array('admin')),\n **array('label'=>'Create Issue', 'url'=>array('issue/create', 'pid'=>$model->id)),**\n);\n```", "```php\n<div class=\"row\">\n    <?php echo $form->labelEx($model,'project_id'); ?>\n    <?php echo $form->textField($model,'project_id'); ?>\n    <?php echo $form->error($model,'project_id'); ?>\n</div>\n```", "```php\npublic function actionCreate()\n{\n  $model=new Issue;\n **$model->project_id = $this->_project->id;**\n\n```", "```php\nINSERT INTO tbl_user (email, username, password) VALUES ('test1@notanaddress.com','User One', MD5('test1')), ('test2@notanaddress.com','User Two', MD5('test2'));\n```", "```php\nINSERT INTO tbl_project_user_assignment (project_id, user_id) \nVALUES (1,1), (1,2);   \n```", "```php\n      /**\n   * @return array relational rules.\n   */\n  public function relations()\n  {\n    //NOTE: you may need to adjust the relation name and the related\n    // class name for the relations automatically generated below.\n    return array(\n      'requester' => array(self::BELONGS_TO, 'User', 'requester_id'),\n      'owner' => array(self::BELONGS_TO, 'User', 'owner_id'),\n      'project' => array(self::BELONGS_TO, 'Project', 'project_id'),\n    );\n  }\n```", "```php\n//create the model instance by primary key:\n$issue = Issue::model()->findByPk(1);\n//access the associated Project AR instance\n$project = $issue->project;\n```", "```php\n   /**\n     * @return array relational rules.\n     */\n    public function relations()\n    {\nreturn array(\n            'issues' => array(self::HAS_MANY, 'Issue', 'project_id'),\n            'users' => array(self::MANY_MANY, 'User', 'tbl_project_user_assignment(project_id, user_id)'),\n        );\n    }\n```", "```php\n//instantiate the Project model instance by primary key:  \n$project = Project::model()->findByPk(1);\n//get an array of all associated Issue AR instances\n$allProjectIssues = $project->issues;\n//get an array of all associated User AR instance\n$allUsers = $project->users;\n//get the User AR instance representing the owner of \n//the first issue associated with this project\n$ownerOfFirstIssue = $project->issues[0]->owner;\n```", "```php\n/**\n * @return array of valid users for this project, indexed by user IDs\n */ \npublic function getUserOptions()\n{\n  $usersArray = CHtml::listData($this->users, 'id', 'username');\n      return $usersArray;\n} \n```", "```php\n<?php echo $form->textField($model,'owner_id'); ?>\nwith this:\n<?php echo $form->dropDownList($model,'owner_id', $model->project->getUserOptions()); ?>\nand also replace this line:\n<?php echo $form->textField($model,'requester_id'); ?>\nwith this:\n<?php echo $form->dropDownList($model,'requester_id', $model->project->getUserOptions()); ?>\n```", "```php\n<div class=\"row\">\n    <?php echo $form->labelEx($model,'create_time'); ?>\n    <?php echo $form->textField($model,'create_time'); ?>\n    <?php echo $form->error($model,'create_time'); ?>\n  </div>\n\n  <div class=\"row\">\n    <?php echo $form->labelEx($model,'create_user_id'); ?>\n    <?php echo $form->textField($model,'create_user_id'); ?>\n    <?php echo $form->error($model,'create_user_id'); ?>\n  </div>\n\n   <div class=\"row\">\n      <?php echo $form->labelEx($model,'update_time'); ?>\n      <?php echo $form->textField($model,'update_time'); ?>\n      <?php echo $form->error($model,'update_time'); ?>\n   </div>\n\n  <div class=\"row\">\n    <?php echo $form->labelEx($model,'update_user_id'); ?>\n    <?php echo $form->textField($model,'update_user_id'); ?>\n    <?php echo $form->error($model,'update_user_id'); ?>\n  </div>\n```", "```php\n    /**\n         * Displays a particular model.\n         * @param integer $id the ID of the model to be displayed\n         */\n        public function actionView($id)\n        {\n                $issueDataProvider=new CActiveDataProvider('Issue', array(\n                        'criteria'=>array(\n                                'condition'=>'project_id=:projectId',\n                                'params'=>array(':projectId'=>$this->loadModel($id)->id),\n                        ),\n                        'pagination'=>array(\n                                'pageSize'=>1,\n                        ),\n                 ));\n\n                $this->render('view',array(\n                        'model'=>$this->loadModel($id),\n                        'issueDataProvider'=>$issueDataProvider,\n                ));\n\n        }\n```", "```php\n<br />\n<h1>Project Issues</h1>\n\n<?php $this->widget('zii.widgets.CListView', array(\n  'dataProvider'=>$issueDataProvider,\n  'itemView'=>'/issue/_view',\n)); ?>\n```", "```php\n<div class=\"view\">\n\n  <b><?php echo CHtml::encode($data->getAttributeLabel('name')); ?>:</b>\n  <?php echo CHtml::link(CHtml::encode($data->name), array('issue/view', 'id'=>$data->id)); ?>\n  <br />\n\n  <b><?php echo CHtml::encode($data->getAttributeLabel('description')); ?>:</b>\n  <?php echo CHtml::encode($data->description); ?>\n  <br />\n\n  <b><?php echo CHtml::encode($data->getAttributeLabel('type_id')); ?>:</b>\n  <?php echo CHtml::encode($data->type_id); ?>\n<br />\n\n  <b><?php echo CHtml::encode($data->getAttributeLabel('status_id')); ?>:</b>\n  <?php echo CHtml::encode($data->status_id); ?>\n\n</div>\n```", "```php\n   /**\n   * @return string the status text display for the current issue\n   */ \n  public function getStatusText()\n  {\n    $statusOptions=$this->statusOptions;\n    return isset($statusOptions[$this->status_id]) ? $statusOptions[$this->status_id] : \"unknown status ({$this->status_id})\";\n  }\n\n  /**\n   * @return string the type text display for the current issue\n   */ \n  public function getTypeText()\n  {\n    $typeOptions=$this->typeOptions;\n    return isset($typeOptions[$this->type_id]) ? $typeOptions[$this->type_id] : \"unknown type ({$this->type_id})\";\n  }\n```", "```php\n<?php echo CHtml::encode($data->getTypeText()); ?>\n```", "```php\n<?php echo CHtml::encode($data->getStatusText()); ?>\n```", "```php\n<?php $this->widget('zii.widgets.CDetailView', array(\n  'data'=>$model,\n  'attributes'=>array(\n    'id',\n    'name',\n    'description',\n    'project_id',\n    'type_id',\n    'status_id',\n    'owner_id',\n    'requester_id',\n    'create_time',\n    'create_user_id',\n    'update_time',\n    'update_user_id',\n  ),\n)); ?>\n```", "```php\n<?php $this->widget('zii.widgets.CDetailView', array(\n  'data'=>$model,\n  'attributes'=>array(\n    'id',\n    'name',\n    'description',\n    array(        \n      'name'=>'type_id',\n        'value'=>CHtml::encode($model->getTypeText())\n    ),\n    array(        \n      'name'=>'status_id',\n        'value'=>CHtml::encode($model->getStatusText())\n    ),\n    'owner_id',\n    'requester_id',\n    ),\n)); ?>\n```", "```php\n/**\n   * @return array relational rules.\n   */\n  public function relations()\n  {\n    // NOTE: you may need to adjust the relation name and \n//the related class name for the relations automatically generated \n//below.\n    return array(\n **'owner' => array(self::BELONGS_TO, 'User', 'owner_id'),**\n      'project' => array(self::BELONGS_TO, 'Project', 'project_id'),\n **'requester' => array(self::BELONGS_TO, 'User', 'requester_id'),**\n    );\n  }\n```", "```php\n<?php $this->widget('zii.widgets.CDetailView', array(\n  'data'=>$model,\n  'attributes'=>array(\n    'id',\n    'name',\n    'description',\n    array(        \n      'name'=>'type_id',\n        'value'=>CHtml::encode($model->getTypeText())\n    ),\n    array(        \n      'name'=>'status_id',\n        'value'=>CHtml::encode($model->getStatusText())\n    ),\n **array(** \n **'name'=>'owner_id',**\n **'value'=>isset($model->owner)?CHtml::encode($model->owner->username):\"unknown\"**\n **),**\n **array(** \n **'name'=>'requester_id',**\n **'value'=>isset($model->requester)?CHtml::encode($model->requester->username):\"unknown\"      ),**\n  ),\n)); ?>\n```", "```php\n$this->menu=array(\n **array('label'=>'List Issues', 'url'=>array('index', 'pid'=>$model->project->id)),**\n **array('label'=>'Create Issue', 'url'=>array('create', 'pid'=>$model->project->id)),**\n  array('label'=>'Update Issue', 'url'=>array('update', 'id'=>$model->id)),\n  array('label'=>'Delete Issue', 'url'=>'#', 'linkOptions'=>array('submit'=>array('delete','id'=>$model->id),'confirm'=>'Are you sure you want to delete this item?')),\n **array('label'=>'Manage Issues', 'url'=>array('admin', 'pid'=>$model->project->id)),**\n);\n```", "```php\npublic function filters()\n  {\n    return array(\n      'accessControl', // perform access control for CRUD operations\n **'projectContext + create index admin', //perform a check to ensure valid project context** \n    );\n  }\n```", "```php\n  public function actionIndex()\n  {\n**$dataProvider=new CActiveDataProvider('Issue', array(**\n **'criteria'=>array(**\n **'condition'=>'project_id=:projectId',**\n **'params'=>array(':projectId'=>$this->_project->id),**\n **),**\n **));**\n    $this->render('index',array(\n      'dataProvider'=>$dataProvider,\n    ));\n  }\n```", "```php\npublic function actionAdmin()\n  {\n    $model=new Issue('search');\n\n    if(isset($_GET['Issue']))\n      $model->attributes=$_GET['Issue'];\n\n **$model->project_id = $this->_project->id;**\n\n    $this->render('admin',array(\n      'model'=>$model,\n    ));\n  }\n```", "```php\npublic function search()\n  {\n    // Warning: Please modify the following code to remove attributes that\n    // should not be searched.\n\n    $criteria=new CDbCriteria;\n\n    $criteria->compare('id',$this->id);\n\n    $criteria->compare('name',$this->name,true);\n\n    $criteria->compare('description',$this->description,true);\n\n    $criteria->compare('type_id',$this->type_id);\n\n    $criteria->compare('status_id',$this->status_id);\n\n    $criteria->compare('owner_id',$this->owner_id);\n\n    $criteria->compare('requester_id',$this->requester_id);\n\n    $criteria->compare('create_time',$this->create_time,true);\n\n    $criteria->compare('create_user_id',$this->create_user_id);\n\n    $criteria->compare('update_time',$this->update_time,true);\n\n    $criteria->compare('update_user_id',$this->update_user_id);\n\n **$criteria->condition='project_id=:projectID';\n\n    $criteria->params=array(':projectID'=>$this->project_id);**\n\n    return new CActiveDataProvider(get_class($this), array(\n      'criteria'=>$criteria,\n    ));\n  }\n```"]