["```php\ninterface Button {\n    public function render();\n}\n\ninterface GUIFactory {\n    public function createButton();\n}\n\nclass SubmitButton implements Button {\n    public function render() {\n        echo 'Render Submit Button';\n    }\n}\n\nclass ResetButton implements Button {\n    public function render() {\n        echo 'Render Reset Button';\n    }\n}\n\nclass SubmitFactory implements GUIFactory {\n    public function createButton() {\n        return new SubmitButton();\n    }\n}\n\nclass ResetFactory implements GUIFactory {\n    public function createButton() {\n        return new ResetButton();\n    }\n}\n\n// Client\n$submitFactory = new SubmitFactory();\n$button = $submitFactory->createButton();\n$button->render();\n\n$resetFactory = new ResetFactory();\n$button = $resetFactory->createButton();\n$button->render();\n```", "```php\nclass Car {\n    public function getWheels() {\n        /* implementation... */\n    }\n\n    public function setWheels($wheels) {\n        /* implementation... */\n    }\n\n    public function getColour($colour) {\n        /* implementation... */\n    }\n\n    public function setColour() {\n        /* implementation... */\n    }\n}\n\ninterface CarBuilderInterface {\n    public function setColour($colour);\n    public function setWheels($wheels);\n    public function getResult();\n}\n\nclass CarBuilder implements CarBuilderInterface {\n    private $car;\n\n    public function __construct() {\n        $this->car = new Car();\n    }\n\n    public function setColour($colour) {\n        $this->car->setColour($colour);\n        return $this;\n    }\n\n    public function setWheels($wheels) {\n        $this->car->setWheels($wheels);\n        return $this;\n    }\n\n    public function getResult() {\n        return $this->car;\n    }\n}\n\nclass CarBuildDirector {\n    private $builder;\n\n    public function __construct(CarBuilder $builder) {\n        $this->builder = $builder;\n    }\n\n    public function build() {\n        $this->builder->setColour('Red');\n        $this->builder->setWheels(4);\n\n        return $this;\n    }\n\n    public function getCar() {\n        return $this->builder->getResult();\n    }\n}\n\n// Client\n$carBuilder = new CarBuilder();\n$carBuildDirector = new CarBuildDirector($carBuilder);\n$car = $carBuildDirector->build()->getCar();\n```", "```php\ninterface Product {\n    public function getType();\n}\n\ninterface ProductFactory {\n    public function makeProduct();\n}\n\nclass SimpleProduct implements Product {\n    public function getType() {\n        return 'SimpleProduct';\n    }\n}\n\nclass SimpleProductFactory implements ProductFactory {\n    public function makeProduct() {\n        return new SimpleProduct();\n    }\n}\n\n/* Client */\n$factory = new SimpleProductFactory();\n$product = $factory->makeProduct();\necho $product->getType(); //outputs: SimpleProduct\n```", "```php\nclass User {\n    public $name;\n    public $email;\n}\n\nclass Employee extends User {\n    public function __construct() {\n        $this->name = 'Johhn Doe';\n        $this->email = 'john.doe@fake.mail';\n    }\n\n    public function info() {\n        return sprintf('%s, %s', $this->name, $this->email);\n    }\n\n    public function __clone() {\n        /* additional changes for (after)clone behavior? */\n    }\n}\n\n$employee = new Employee();\necho $employee->info();\n\n$director = clone $employee;\n$director->name = 'Jane Doe';\n$director->email = 'jane.doe@fake.mail';\necho $director->info(); //outputs: Jane Doe, jane.doe@fake.mail\n```", "```php\nclass Logger {\n    private static $instance;\n\n    public static function getInstance() {\n        if (!isset(self::$instance)) {\n            self::$instance = new self;\n        }\n\n        return self::$instance;\n    }\n\n    public function logNotice($msg) {\n        return 'logNotice: ' . $msg;\n    }\n\n    public function logWarning($msg) {\n        return 'logWarning: ' . $msg;\n    }\n\n    public function logError($msg) {\n        return 'logError: ' . $msg;\n    }\n}\n\n// Client\necho Logger::getInstance()->logNotice('test-notice');\necho Logger::getInstance()->logWarning('test-warning');\necho Logger::getInstance()->logError('test-error');\n// Outputs:\n// logNotice: test-notice\n// logWarning: test-warning\n// logError: test-error\n```", "```php\nclass Stripe {\n    public function capturePayment($amount) {\n        /* Implementation... */\n    }\n\n    public function authorizeOnlyPayment($amount) {\n        /* Implementation... */\n    }\n\n    public function cancelAmount($amount) {\n        /* Implementation... */\n    }\n}\n\ninterface PaymentService {\n    public function capture($amount);\n    public function authorize($amount);\n    public function cancel($amount);\n}\n\nclass StripePaymentServiceAdapter implements PaymentService {\n    private $stripe;\n\n    public function __construct(Stripe $stripe) {\n        $this->stripe = $stripe;\n    }\n\n    public function capture($amount) {\n        $this->stripe->capturePayment($amount);\n    }\n\n    public function authorize($amount) {\n        $this->stripe->authorizeOnlyPayment($amount);\n    }\n\n    public function cancel($amount) {\n        $this->stripe->cancelAmount($amount);\n    }\n}\n\n// Client\n$stripe = new StripePaymentServiceAdapter(new Stripe());\n$stripe->authorize(49.99);\n$stripe->capture(19.99);\n$stripe->cancel(9.99);\n```", "```php\ninterface MailerInterface {\n    public function setSender(MessagingInterface $sender);\n    public function send($body);\n}\n\nabstract class Mailer implements MailerInterface {\n    protected $sender;\n\n    public function setSender(MessagingInterface $sender) {\n        $this->sender = $sender;\n    }\n}\n\nclass PHPMailer extends Mailer {\n    public function send($body) {\n        $body .= \"\\n\\n Sent from a phpmailer.\";\n        return $this->sender->send($body);\n    }\n}\n\nclass SwiftMailer extends Mailer {\n    public function send($body) {\n        $body .= \"\\n\\n Sent from a SwiftMailer.\";\n        return $this->sender->send($body);\n    }\n}\n\ninterface MessagingInterface {\n    public function send($body);\n}\n\nclass TextMessage implements MessagingInterface {\n    public function send($body) {\n        echo 'TextMessage > send > $body: ' . $body;\n    }\n}\n\nclass HtmlMessage implements MessagingInterface {\n    public function send($body) {\n        echo 'HtmlMessage > send > $body: ' . $body;\n    }\n}\n\n// Client\n$phpmailer = new PHPMailer();\n$phpmailer->setSender(new TextMessage());\n$phpmailer->send('Hi!');\n\n$swiftMailer = new SwiftMailer();\n$swiftMailer->setSender(new HtmlMessage());\n$swiftMailer->send('Hello!');\n```", "```php\ninterface Graphic {\n    public function draw();\n}\n\nclass CompositeGraphic implements Graphic {\n    private $graphics = array();\n\n    public function add($graphic) {\n        $objId = spl_object_hash($graphic);\n        $this->graphics[$objId] = $graphic;\n    }\n\n    public function remove($graphic) {\n        $objId = spl_object_hash($graphic);\n        unset($this->graphics[$objId]);\n    }\n\n    public function draw() {\n        foreach ($this->graphics as $graphic) {\n            $graphic->draw();\n        }\n    }\n}\n\nclass Circle implements Graphic {\n    public function draw()\n    {\n        echo 'draw-circle';\n    }\n}\n\nclass Square implements Graphic {\n    public function draw() {\n        echo 'draw-square';\n    }\n}\n\nclass Triangle implements Graphic {\n    public function draw() {\n        echo 'draw-triangle';\n    }\n}\n\n$circle = new Circle();\n$square = new Square();\n$triangle = new Triangle();\n\n$compositeObj1 = new CompositeGraphic();\n$compositeObj1->add($circle);\n$compositeObj1->add($triangle);\n$compositeObj1->draw();\n\n$compositeObj2 = new CompositeGraphic();\n$compositeObj2->add($circle);\n$compositeObj2->add($square);\n$compositeObj2->add($triangle);\n$compositeObj2->remove($circle);\n$compositeObj2->draw();\n```", "```php\ninterface LoggerInterface {\n    public function log($message);\n}\n\nclass Logger implements LoggerInterface {\n    public function log($message) {\n        file_put_contents('app.log', $message, FILE_APPEND);\n    }\n}\n\nabstract class LoggerDecorator implements LoggerInterface {\n    protected $logger;\n\n    public function __construct(Logger $logger) {\n        $this->logger = $logger;\n    }\n\n    abstract public function log($message);\n}\n\nclass ErrorLoggerDecorator extends LoggerDecorator {\n    public function log($message) {\n        $this->logger->log('ERROR: ' . $message);\n    }\n\n}\n\nclass WarningLoggerDecorator extends LoggerDecorator {\n    public function log($message) {\n        $this->logger->log('WARNING: ' . $message);\n    }\n}\n\nclass NoticeLoggerDecorator extends LoggerDecorator {\n    public function log($message) {\n        $this->logger->log('NOTICE: ' . $message);\n    }\n}\n\n$logger = new Logger();\n$logger->log('Resource not found.');\n\n$logger = new Logger();\n$logger = new ErrorLoggerDecorator($logger);\n$logger->log('Invalid user role.');\n\n$logger = new Logger();\n$logger = new WarningLoggerDecorator($logger);\n$logger->log('Missing address parameters.');\n\n$logger = new Logger();\n$logger = new NoticeLoggerDecorator($logger);\n$logger->log('Incorrect type provided.');\n```", "```php\nclass Product {\n    public function getQty() {\n        // Implementation\n    }\n}\n\nclass QuickOrderFacade {\n    private $product = null;\n    private $orderQty = null;\n\n    public function __construct($product, $orderQty) {\n        $this->product = $product;\n        $this->orderQty = $orderQty;\n    }\n\n    public function generateOrder() {\n        if ($this->qtyCheck()) {\n            $this->addToCart();\n            $this->calculateShipping();\n            $this->applyDiscount();\n            $this->placeOrder();\n        }\n    }\n\n    private function addToCart() {\n        // Implementation...\n    }\n\n    private function qtyCheck() {\n        if ($this->product->getQty() > $this->orderQty) {\n            return true;\n        } else {\n            return true;\n        }\n    }\n\n    private function calculateShipping() {\n        // Implementation...\n    }\n\n    private function applyDiscount() {\n        // Implementation...\n    }\n\n    private function placeOrder() {\n        // Implementation...\n    }\n}\n\n// Client\n$order = new QuickOrderFacade(new Product(), $qty);\n$order->generateOrder();\n```", "```php\ninterface Shape {\n    public function draw();\n}\n\nclass Circle implements Shape {\n    private $colour;\n    private $radius;\n\n    public function __construct($colour) {\n        $this->colour = $colour;\n    }\n\n    public function draw() {\n        echo sprintf('Colour %s, radius %s.', $this->colour, $this->radius);\n    }\n\n    public function setRadius($radius) {\n        $this->radius = $radius;\n    }\n}\n\nclass ShapeFactory {\n    private $circleMap;\n\n    public function getCircle($colour) {\n        if (!isset($this->circleMap[$colour])) {\n            $circle = new Circle($colour);\n            $this->circleMap[$colour] = $circle;\n        }\n\n        return $this->circleMap[$colour];\n    }\n}\n\n// Client\n$shapeFactory = new ShapeFactory();\n$circle = $shapeFactory->getCircle('yellow');\n$circle->setRadius(10);\n$circle->draw();\n\n$shapeFactory = new ShapeFactory();\n$circle = $shapeFactory->getCircle('orange');\n$circle->setRadius(15);\n$circle->draw();\n\n$shapeFactory = new ShapeFactory();\n$circle = $shapeFactory->getCircle('yellow');\n$circle->setRadius(20);\n$circle->draw();\n```", "```php\ninterface ImageInterface {\n    public function draw();\n}\n\nclass Image implements ImageInterface {\n    private $file;\n\n    public function __construct($file) {\n        $this->file = $file;\n        sleep(5); // Imagine resource intensive image load\n    }\n\n    public function draw() {\n        echo 'image: ' . $this->file;\n    }\n}\n\nclass ProxyImage implements ImageInterface {\n    private $image = null;\n    private $file;\n\n    public function __construct($file) {\n        $this->file = $file;\n    }\n\n    public function draw() {\n        if (is_null($this->image)) {\n            $this->image = new Image($this->file);\n        }\n\n        $this->image->draw();\n    }\n}\n\n// Client\n$image = new Image('image.png'); // 5 seconds\n$image->draw();\n\n$image = new ProxyImage('image.png'); // 0 seconds\n$image->draw();\n```", "```php\nabstract class SocialNotifier {\n    private $notifyNext = null;\n\n    public function notifyNext(SocialNotifier $notifier) {\n        $this->notifyNext = $notifier;\n        return $this->notifyNext;\n    }\n\n    final public function push($message) {\n        $this->publish($message);\n\n        if ($this->notifyNext !== null) {\n            $this->notifyNext->push($message);\n        }\n    }\n\n    abstract protected function publish($message);\n}\n\nclass TwitterSocialNotifier extends SocialNotifier {\n    public function publish($message) {\n        // Implementation...\n    }\n}\n\nclass FacebookSocialNotifier extends SocialNotifier {\n    protected function publish($message) {\n        // Implementation...\n    }\n}\n\nclass PinterestSocialNotifier extends SocialNotifier {\n    protected function publish($message) {\n        // Implementation...\n    }\n}\n\n// Client\n$notifier = new TwitterSocialNotifier();\n\n$notifier->notifyNext(new FacebookSocialNotifier())\n    ->notifyNext(new PinterestSocialNotifier());\n\n$notifier->push('Awesome new product available!');\n```", "```php\ninterface LightBulbCommand {\n    public function execute();\n}\n\nclass LightBulbControl {\n    public function turnOn() {\n        echo 'LightBulb turnOn';\n    }\n\n    public function turnOff() {\n        echo 'LightBulb turnOff';\n    }\n}\n\nclass TurnOnLightBulb implements LightBulbCommand {\n    private $lightBulbControl;\n\n    public function __construct(LightBulbControl $lightBulbControl) {\n        $this->lightBulbControl = $lightBulbControl;\n    }\n\n    public function execute() {\n        $this->lightBulbControl->turnOn();\n    }\n}\n\nclass TurnOffLightBulb implements LightBulbCommand {\n    private $lightBulbControl;\n\n    public function __construct(LightBulbControl $lightBulbControl) {\n        $this->lightBulbControl = $lightBulbControl;\n    }\n\n    public function execute() {\n        $this->lightBulbControl->turnOff();\n    }\n}\n\n// Client\n$command = new TurnOffLightBulb(new LightBulbControl());\n$command->execute();\n```", "```php\ninterface MathExpression\n{\n    public function interpret(array $values);\n}\n\nclass Variable implements MathExpression {\n    private $char;\n\n    public function __construct($char) {\n        $this->char = $char;\n    }\n\n    public function interpret(array $values) {\n        return $values[$this->char];\n    }\n}\n\nclass Literal implements MathExpression {\n    private $value;\n\n    public function __construct($value) {\n        $this->value = $value;\n    }\n\n    public function interpret(array $values) {\n        return $this->value;\n    }\n}\n\nclass Sum implements MathExpression {\n    private $x;\n    private $y;\n\n    public function __construct(MathExpression $x, MathExpression $y) {\n        $this->x = $x;\n        $this->y = $y;\n    }\n\n    public function interpret(array $values) {\n        return $this->x->interpret($values) + $this->y->interpret($values);\n    }\n}\n\nclass Product implements MathExpression {\n    private $x;\n    private $y;\n\n    public function __construct(MathExpression $x, MathExpression $y) {\n        $this->x = $x;\n        $this->y = $y;\n    }\n\n    public function interpret(array $values) {\n        return $this->x->interpret($values) * $this->y->interpret($values);\n    }\n}\n\n// Client\n$expression = new Product(\n    new Literal(5),\n    new Sum(\n        new Variable('c'),\n        new Literal(2)\n    )\n);\n\necho $expression->interpret(array('c' => 3)); // 25\n```", "```php\nclass ProductIterator implements \\Iterator {\n    private $position = 0;\n    private $productsCollection;\n\n    public function __construct(ProductCollection $productsCollection) {\n        $this->productsCollection = $productsCollection;\n    }\n\n    public function current() {\n        return $this->productsCollection->getProduct($this->position);\n    }\n\n    public function key() {\n        return $this->position;\n    }\n\n    public function next() {\n        $this->position++;\n    }\n\n    public function rewind() {\n        $this->position = 0;\n    }\n\n    public function valid() {\n        return !is_null($this->productsCollection->getProduct($this->position));\n    }\n}\n\nclass ProductCollection implements \\IteratorAggregate {\n    private $products = array();\n\n    public function getIterator() {\n        return new ProductIterator($this);\n    }\n\n    public function addProduct($string) {\n        $this->products[] = $string;\n    }\n\n    public function getProduct($key) {\n        if (isset($this->products[$key])) {\n            return $this->products[$key];\n        }\n        return null;\n    }\n\n    public function isEmpty() {\n        return empty($products);\n    }\n}\n\n$products = new ProductCollection();\n$products->addProduct('T-Shirt Red');\n$products->addProduct('T-Shirt Blue');\n$products->addProduct('T-Shirt Green');\n$products->addProduct('T-Shirt Yellow');\n\nforeach ($products as $product) {\n    var_dump($product);\n}\n```", "```php\ninterface MediatorInterface {\n    public function fight();\n    public function talk();\n    public function registerA(ColleagueA $a);\n    public function registerB(ColleagueB $b);\n}\n\nclass ConcreteMediator implements MediatorInterface {\n    protected $talk; // ColleagueA\n    protected $fight; // ColleagueB\n\n    public function registerA(ColleagueA $a) {\n        $this->talk = $a;\n    }\n\n    public function registerB(ColleagueB $b) {\n        $this->fight = $b;\n    }\n\n    public function fight() {\n        echo 'fighting...';\n    }\n\n    public function talk() {\n        echo 'talking...';\n    }\n}\n\nabstract class Colleague {\n    protected $mediator; // MediatorInterface\n    public abstract function doSomething();\n}\n\nclass ColleagueA extends Colleague {\n\n    public function __construct(MediatorInterface $mediator) {\n        $this->mediator = $mediator;\n        $this->mediator->registerA($this);\n    }\n\npublic function doSomething() {\n        $this->mediator->talk();\n}\n}\n\nclass ColleagueB extends Colleague {\n\n    public function __construct(MediatorInterface $mediator) {\n        $this->mediator = $mediator;\n        $this->mediator->registerB($this);\n    }\n\n    public function doSomething() {\n        $this->mediator->fight();\n    }\n}\n\n// Client\n$mediator = new ConcreteMediator();\n$talkColleague = new ColleagueA($mediator);\n$fightColleague = new ColleagueB($mediator);\n\n$talkColleague->doSomething();\n$fightColleague->doSomething();\n```", "```php\nclass Memento {\n    private $state;\n\n    public function __construct($state) {\n        $this->state = $state;\n    }\n\n    public function getState() {\n        return $this->state;\n    }\n}\n\nclass Originator {\n    private $state;\n\n    public function setState($state) {\n        return $this->state = $state;\n    }\n\n    public function getState() {\n        return $this->state;\n    }\n\n    public function saveToMemento() {\n        return new Memento($this->state);\n    }\n\n    public function restoreFromMemento(Memento $memento) {\n        $this->state = $memento->getState();\n    }\n}\n\n// Client - Caretaker\n$savedStates = array();\n\n$originator = new Originator();\n$originator->setState('new');\n$originator->setState('pending');\n$savedStates[] = $originator->saveToMemento();\n$originator->setState('processing');\n$savedStates[] = $originator->saveToMemento();\n$originator->setState('complete');\n$originator->restoreFromMemento($savedStates[1]);\necho $originator->getState(); // processing\n```", "```php\nclass Customer implements \\SplSubject {\n    protected $data = array();\n    protected $observers = array();\n\n    public function attach(\\SplObserver $observer) {\n        $this->observers[] = $observer;\n    }\n\n    public function detach(\\SplObserver $observer) {\n        $index = array_search($observer, $this->observers);\n\n        if ($index !== false) {\n            unset($this->observers[$index]);\n        }\n    }\n\n    public function notify() {\n        foreach ($this->observers as $observer) {\n            $observer->update($this);\n            echo 'observer updated';\n        }\n    }\n\n    public function __set($name, $value) {\n        $this->data[$name] = $value;\n\n        // notify the observers, that user has been updated\n        $this->notify();\n    }\n}\n\nclass CustomerObserver implements \\SplObserver {\n    public function update(\\SplSubject $subject) {\n        /* Implementation... */\n    }\n}\n\n// Client\n$user = new Customer();\n$customerObserver = new CustomerObserver();\n$user->attach($customerObserver);\n\n$user->name = 'John Doe';\n$user->email = 'john.doe@fake.mail';\n```", "```php\ninterface Statelike {\n    public function writeName(StateContext $context, $name);\n}\n\nclass StateLowerCase implements Statelike {\n    public function writeName(StateContext $context, $name) {\n        echo strtolower($name);\n        $context->setState(new StateMultipleUpperCase());\n    }\n}\n\nclass StateMultipleUpperCase implements Statelike {\n    private $count = 0;\n\n    public function writeName(StateContext $context, $name) {\n        $this->count++;\n        echo strtoupper($name);\n        /* Change state after two invocations */\n        if ($this->count > 1) {\n            $context->setState(new StateLowerCase());\n        }\n    }\n}\n\nclass StateContext {\n    private $state;\n\n    public function setState(Statelike $state) {\n        $this->state = $state;\n    }\n\n    public function writeName($name) {\n        $this->state->writeName($this, $name);\n    }\n}\n\n// Client\n$stateContext = new StateContext();\n$stateContext->setState(new StateLowerCase());\n$stateContext->writeName('Monday');\n$stateContext->writeName('Tuesday');\n$stateContext->writeName('Wednesday');\n$stateContext->writeName('Thursday');\n$stateContext->writeName('Friday');\n$stateContext->writeName('Saturday');\n$stateContext->writeName('Sunday');\n```", "```php\ninterface PaymentStrategy {\n    public function pay($amount);\n}\n\nclass StripePayment implements PaymentStrategy {\n    public function pay($amount) {\n        echo 'StripePayment...';\n    }\n\n}\n\nclass PayPalPayment implements PaymentStrategy {\n    public function pay($amount) {\n        echo 'PayPalPayment...';\n    }\n}\n\nclass Checkout {\n    private $amount = 0;\n\n    public function __construct($amount = 0) {\n        $this->amount = $amount;\n    }\n\n    public function capturePayment() {\n        if ($this->amount > 99.99) {\n            $payment = new PayPalPayment();\n        } else {\n            $payment = new StripePayment();\n        }\n\n        $payment->pay($this->amount);\n    }\n}\n\n$checkout = new Checkout(49.99);\n$checkout->capturePayment(); // StripePayment...\n\n$checkout = new Checkout(199.99);\n$checkout->capturePayment(); // PayPalPayment...\n```", "```php\nabstract class Game {\n    private $playersCount;\n\n    abstract function initializeGame();\n    abstract function makePlay($player);\n    abstract function endOfGame();\n    abstract function printWinner();\n\n    public function playOneGame($playersCount)\n    {\n        $this->playersCount = $playersCount;\n        $this->initializeGame();\n        $j = 0;\n        while (!$this->endOfGame()) {\n            $this->makePlay($j);\n            $j = ($j + 1) % $playersCount;\n        }\n        $this->printWinner();\n    }\n}\n\nclass Monopoly extends Game {\n    public function initializeGame() {\n        // Implementation...\n    }\n\n    public function makePlay($player) {\n        // Implementation...\n    }\n\n    public function endOfGame() {\n        // Implementation...\n    }\n\n    public function printWinner() {\n        // Implementation...\n    }\n}\n\nclass Chess extends Game {\n    public function  initializeGame() {\n        // Implementation...\n    }\n\n    public function  makePlay($player) {\n        // Implementation...\n    }\n\n    public function  endOfGame() {\n        // Implementation...\n    }\n\n    public function  printWinner() {\n        // Implementation...\n    }\n}\n\n$game = new Chess();\n$game->playOneGame(2);\n\n$game = new Monopoly();\n$game->playOneGame(4);\n```", "```php\ninterface RoleVisitorInterface {\n    public function visitUser(User $role);\n    public function visitGroup(Group $role);\n}\n\nclass RolePrintVisitor implements RoleVisitorInterface {\n    public function visitGroup(Group $role) {\n        echo 'Role: ' . $role->getName();\n    }\n\n    public function visitUser(User $role) {\n        echo 'Role: ' . $role->getName();\n    }\n}\n\nabstract class Role {\n    public function accept(RoleVisitorInterface $visitor) {\n        $klass = get_called_class();\n        preg_match('#([^\\\\\\\\]+)$#', $klass, $extract);\n        $visitingMethod = 'visit' . $extract[1];\n\n        if (!method_exists(__NAMESPACE__ . '\\RoleVisitorInterface', $visitingMethod)) {\n            throw new \\InvalidArgumentException(\"The visitor you provide cannot visit a $klass instance\");\n        }\n\n        call_user_func(array($visitor, $visitingMethod), $this);\n    }\n}\n\nclass User extends Role {\n    protected $name;\n\n    public function __construct($name) {\n        $this->name = (string)$name;\n    }\n\n    public function getName() {\n        return 'User ' . $this->name;\n    }\n}\n\nclass Group extends Role {\n    protected $name;\n\n    public function __construct($name) {\n        $this->name = (string)$name;\n    }\n\n    public function getName() {\n        return 'Group: ' . $this->name;\n    }\n}\n\n$group = new Group('my group');\n$user = new User('my user');\n\n$visitor = new RolePrintVisitor;\n\n$group->accept($visitor);\n$user->accept($visitor);\n```"]