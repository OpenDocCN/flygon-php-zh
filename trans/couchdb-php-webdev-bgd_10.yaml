- en: Chapter 10. Deploying your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。部署您的应用程序
- en: We have just a few more steps to complete before our application is live for
    the world to see and ready for users to sign up and create posts to their heart's
    content.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在我们的应用程序上线并准备好供用户注册并创建帖子之前，我们还有一些步骤要完成。
- en: 'We''ll do the following things in this chapter to get our application up and
    running:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做以下事情来让我们的应用程序运行起来：
- en: We'll set up an account with Cloudant to house our application's CouchDB database
    and prepare it for our application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在Cloudant上建立一个帐户，用于存放我们应用的CouchDB数据库，并为我们的应用做好准备
- en: We'll add a configuration class to our project to use environment variables
    to drive our application's settings
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在我们的项目中添加一个配置类，使用环境变量来驱动我们应用程序的设置
- en: We'll create an account with PHP Fog to host our application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将创建一个PHP Fog帐户来托管我们的应用程序
- en: We'll configure Git to connect to PHP Fog's Git repository and deploy our application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将配置Git连接到PHP Fog的Git存储库并部署我们的应用程序
- en: As you might expect, we're going to be doing a lot of account setup and tweaking
    of our code in this chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能期望的那样，在本章中，我们将进行大量的帐户设置和代码调整。
- en: Before we get started
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们开始之前
- en: For any application or database deployment, there are a variety of options for
    you. Each option has its strengths and weaknesses. I'd like to arm you with some
    knowledge instead of jumping right into setting up services, just in case you
    want to change to a different service some day.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何应用程序或数据库部署，都有各种各样的选择。每个选项都有其优势和劣势。我想给你一些知识，而不是立即设置服务，以防有一天你想改用其他服务。
- en: In the past few years, Cloud has become one of the most used and abused terms
    in the technology industry. In order to completely understand the term Cloud,
    you'd have to read a whole lot of research papers and articles. But to keep it
    simple, the term **Cloud** describes the shift from the traditional single tenant
    approach with dedicated hosting, to a scalable, multi-tenant, and multi-platform
    host. CouchDB itself is a perfect example of a scalable database that could enable
    the Cloud architecture. Our application is also a good candidate for a Cloud solution,
    because we aren't storing anything locally, and we don't have any special dependencies
    for our application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的几年里，云已经成为技术行业中最常用和滥用的术语之一。要完全理解云这个术语，您需要阅读大量的研究论文和文章。但是，简单来说，云这个术语描述了从传统的单租户专用托管转变为可扩展的多租户和多平台主机。CouchDB本身就是一个可扩展的数据库的完美例子，可以实现云架构。我们的应用程序也是云解决方案的一个很好的候选，因为我们没有本地存储任何东西，也没有任何特殊的依赖。
- en: With that in mind, we're going to use Cloud services for both our application
    and database hosting. One of the added bonuses is that we'll be able to get our
    application up and running without paying a dime, and we'll only have to start
    paying as our application becomes successful. That's not a bad deal at all!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们将使用云服务来托管我们的应用程序和数据库。其中一个额外的好处是，我们将能够让我们的应用程序免费运行，并且只有在我们的应用程序成功后才需要开始付费。这一点真的不错！
- en: Let's quickly talk about how we'll approach our application and CouchDB hosting
    and the options that are available to us.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速讨论一下我们将如何处理我们的应用程序和CouchDB托管以及我们可用的选项。
- en: Application hosting
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序托管
- en: When it comes to hosting web applications in the Cloud, there are a million
    ways it can be done. Since we aren't server setup geniuses, we'll want to use
    a high reward system that has a small amount of setup. With that in mind, we'll
    use **Platform as a Service (PaaS)**. There are quite a few PaaS solutions out
    there, but at this time, the best options for PHP developers are Heroku and PHP
    Fog.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中托管Web应用程序时，有无数种方法可以实现。由于我们不是服务器设置专家，我们希望使用一种设置较少但回报较高的系统。考虑到这一点，我们将使用**平台即服务（PaaS）**。有很多PaaS解决方案，但目前，对于PHP开发人员来说，最好的选择是Heroku和PHP
    Fog。
- en: '**Heroku** ([http://www.heroku.com](http://www.heroku.com)) is the innovator
    that brought PaaS into the spotlight. They support PHP applications using their
    Cedar stack. But, because it''s not a PHP-specific stack, it might be smarter
    for us to look to another provider.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Heroku** ([http://www.heroku.com](http://www.heroku.com)) 是将PaaS推向聚光灯下的创新者。他们使用Cedar堆栈支持PHP应用程序。但是，由于它不是一个特定于PHP的堆栈，对于我们来说，可能更明智选择另一个提供商。'
- en: '**PHP Fog** ([http://www.phpfog.com](http://www.phpfog.com)) is, in my opinion,
    a solid PaaS for developing PHP applications because of their very concentrated
    focus on PHP. They support a variety of PHP application frameworks out of the
    box, have MySQL hosting (if your application requires it), and in general, are
    geared towards providing a solid development environment, specifically for PHP
    developers.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**PHP Fog** ([http://www.phpfog.com](http://www.phpfog.com)) 在我看来，是一个非常专注于PHP开发的PaaS，因为他们非常专注于PHP。他们支持各种PHP应用框架，提供MySQL托管（如果您的应用需要），总体上，他们致力于为PHP开发人员提供一个稳固的开发环境。'
- en: With all of that in mind, PHP Fog is going to be the application hosting solution
    that we go with for this project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一切，PHP Fog将是我们选择的应用托管解决方案。
- en: CouchDB hosting
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CouchDB托管
- en: There are far fewer solutions for CouchDB hosting than there are for application
    hosting, but luckily, they are all very solid products. The two services we'll
    talk about are Cloudant and IrisCouch.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与应用程序托管相比，CouchDB托管的解决方案要少得多，但幸运的是，它们都是非常稳固的产品。我们将讨论的两种服务是Cloudant和IrisCouch。
- en: '**Cloudant** ([http://www.cloudant.com](http://www.cloudant.com)) is one of
    the most robust solutions for CouchDB in the Cloud. They offer the familiar tools
    that we''ve used in this book, such as Futon and command-line, with the added
    ability to scale our data as it grows. Especially unique to Cloudant is that they
    offer custom solutions when your application requires some special functionality,
    and Cloudant is one of the larger contributors to CouchDB itself.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cloudant** ([http://www.cloudant.com](http://www.cloudant.com)) 是云中CouchDB最强大的解决方案之一。他们提供了我们在本书中使用过的熟悉工具，如Futon和命令行，还能够根据数据增长的需要进行扩展。Cloudant特别独特的地方在于，当你的应用程序需要一些特殊功能时，他们提供定制解决方案，而且Cloudant是CouchDB本身的主要贡献者之一。'
- en: '**Iris Couch** ([http://www.iriscouch.com](http://www.iriscouch.com)) also
    allows for free CouchDB hosting in the Cloud. Unfortunately, they just started
    to provide Couchbase server as their infrastructure, which is built on top of
    much of CouchDB''s core. While I absolutely love Couchbase and its enhancements
    to the core CouchDB technology, we''ve been tasked with using only CouchDB for
    this book. But, if you find yourself in the market for Couchbase''s enhanced functionality
    in the future, then it''s definitely worth looking into Iris Couch.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Iris Couch** ([http://www.iriscouch.com](http://www.iriscouch.com)) 也允许在云中免费托管CouchDB。不幸的是，他们刚刚开始提供Couchbase服务器作为他们的基础设施，这是建立在CouchDB核心之上的。虽然我非常喜欢Couchbase及其对核心CouchDB技术的增强，但我们的任务是在本书中只使用CouchDB。但是，如果你将来需要Couchbase的增强功能，那么值得考虑一下Iris
    Couch。'
- en: Because I've used Cloudant in the past and know what it can handle, we'll use
    it for this project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我以前使用过Cloudant并知道它能处理什么，我们将在这个项目中使用它。
- en: In general, the setup that we'll perform in this chapter is relatively similar
    to any of their competitive services. So, if you decide to switch later on, you
    should be well positioned to handle it without too many problems.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，本章中我们将执行的设置与其他竞争性服务相对类似。因此，如果你决定以后转换，你应该能够很好地处理它，而不会有太多问题。
- en: Database hosting with Cloudant
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cloudant进行数据库托管
- en: In this section, we are going to set up a Cloudant server and prepare it for
    our application to connect to. There's very little setup to be done, and it will
    hopefully seem familiar to the steps we took early in the book when we set up
    our CouchDB databases.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置一个Cloudant服务器，并准备让我们的应用程序连接到它。需要做的设置很少，而且希望这些步骤对我们在本书初期设置CouchDB数据库时所采取的步骤来说是熟悉的。
- en: Getting started with Cloudant
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用Cloudant
- en: Creating a Cloudant account is super easy, but let's walk through it just so
    that we're all on the same page.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Cloudant账户非常简单，但让我们一起走一遍，以确保我们都在同一页面上。
- en: Start by going to [https://cloudant.com/sign-up/](http://https://cloudant.com/sign-up/),
    and you'll see the signup page.![Getting started with Cloudant](graphics/3586_10_005.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先去[https://cloudant.com/sign-up/](http://https://cloudant.com/sign-up/)，你会看到注册页面。![开始使用Cloudant](graphics/3586_10_005.jpg)
- en: Cloudant just needs some basic information to create your account. Start by
    entering a username. This will be used as your unique identifier and the link
    to your Cloudant account. I'd recommend picking something like your name or company
    name.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cloudant只需要一些基本信息来创建你的账户。首先输入一个用户名。这将被用作你的唯一标识符和你的Cloudant账户的链接。我建议选择像你的名字或公司名这样的东西。
- en: Fill in the rest of the information on the page, and click the sign up button
    at the bottom of the page when you're ready!
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写页面上的其余信息，当你准备好时，点击页面底部的注册按钮！
- en: You're all done, and you should be looking at your Cloudant dashboard. From
    here, you can manage your account and create new databases.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了，现在你应该看到你的Cloudant仪表板。从这里，你可以管理你的账户并创建新的数据库。
- en: '![Getting started with Cloudant](graphics/3586_10_020.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用Cloudant](graphics/3586_10_020.jpg)'
- en: Creating a _users database
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个_users数据库
- en: We now have our brand new Cloudant account, but we don't have any databases
    yet. What's worse is that we don't even have our `_users` database. All we need
    to do is create a new `_users` database, and Cloudant will handle the rest. We
    technically could complete this process through Cloudant's interface, but let's
    use the command-line because it's a bit more universal.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了全新的Cloudant账户，但我们还没有任何数据库。更糟糕的是，我们甚至还没有我们的`_users`数据库。我们只需要创建一个新的`_users`数据库，Cloudant会处理剩下的。我们技术上可以通过Cloudant的界面完成这个过程，但让我们使用命令行，因为它更加通用。
- en: Open Terminal.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Run the following command, and replace the two instances of username and the
    one instance of password, so that Cloudant knows who you are and what account
    you are trying to use:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，并替换两个用户名和一个密码的实例，这样Cloudant就知道你是谁以及你要使用的账户是什么：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Terminal will let you know that your database has been created by returning
    you a success message:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 终端会通过返回成功消息来告诉你数据库已经创建：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Great! Your `_users` database is now created. Remember that we also need another
    database called `verge` to store all of our data. Let's create the `verge` database
    next.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你的`_users`数据库现在已经创建。记住，我们还需要另一个叫做`verge`的数据库来存储我们的所有数据。让我们接下来创建`verge`数据库。
- en: Creating a verge database
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个verge数据库
- en: You need to create another database in your account, this time calling it `verge`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在你的账户中创建另一个数据库，这次叫做`verge`。
- en: Have a go hero — give it a shot yourself
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来吧，英雄——自己试试看
- en: Creating another database should be easy for you to do on your own now. Give
    it a shot by following the same steps we did while creating the `_users` database
    but changing the database name to `verge` instead.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该很容易自己创建另一个数据库。按照我们创建`_users`数据库时所采取的相同步骤来尝试一下，但是将数据库名称改为`verge`。
- en: If you feel stuck, I'll show you the command-line statement in just a moment.
    Okay, how'd it go? Let's recap the steps you needed to perform to create the `verge`
    database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感到困惑，我马上会向你展示命令行语句。好的，进行得怎么样？让我们回顾一下创建`verge`数据库所需执行的步骤。
- en: Open Terminal.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'You should have ran the following command and replaced the two instances of
    username and the one instance of password, so that Cloudant would know who you
    are and what account you are trying to use:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该运行以下命令，并替换两个用户名实例和一个密码实例，这样Cloudant就会知道你是谁，以及你要使用的账户是什么：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Terminal should have then reassured you that everything went okay when you
    saw a familiar success message, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到一个熟悉的成功消息时，终端应该已经让你放心一切都进行得很顺利，如下所示：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Using Futon on Cloudant
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Cloudant上使用Futon
- en: 'Administrating the content from the command-line can be a bit tedious. Luckily,
    Cloudant also comes with our old friend — Futon. To get to Futon on Cloudant,
    follow these steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命令行管理内容可能有点繁琐。幸运的是，Cloudant还带来了我们的老朋友——Futon。要在Cloudant上使用Futon，按照以下步骤进行：
- en: Log in, and go to your dashboard.![Using Futon on Cloudant](graphics/3586_10_025.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录，并转到你的仪表板。![在Cloudant上使用Futon](graphics/3586_10_025.jpg)
- en: Click on one of your database names; for this example, let's use `verge`.![Using
    Futon on Cloudant](graphics/3586_10_030.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你的数据库名称之一；在这个例子中，让我们使用`verge`。![在Cloudant上使用Futon](graphics/3586_10_030.jpg)
- en: This is the database detail page－as documents appear in your database, they
    will be displayed on this page.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是数据库详细页面——当文档出现在你的数据库中时，它们将显示在这个页面上。
- en: Let's move on by clicking on the View in Futon button.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Futon中的查看按钮继续。
- en: Look familiar? This is the same great Futon that we've been using locally.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来熟悉吗？这就是我们在本地一直在使用的伟大的Futon。
- en: '![Using Futon on Cloudant](graphics/3586_10_032.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![在Cloudant上使用Futon](graphics/3586_10_032.jpg)'
- en: Configuring permissions
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置权限
- en: Now that we are live on our production database, it's incredibly important that
    we configure our permissions to work on our production server. If we don't secure
    our database, then our users could easily be readable, and that's not something
    we want to get tangled up in.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的生产数据库已经上线，非常重要的是我们要配置权限以在我们的生产服务器上运行。如果我们不保护我们的数据库，那么我们的用户很容易就能读取，这是我们不想卷入的事情。
- en: 'Luckily, Cloudant has taken care of all of these issues for us by doing the
    following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Cloudant已经为我们解决了所有这些问题，具体做法如下：
- en: Because we've already created an account, the database is no longer in `Admin
    Party` mode
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为我们已经创建了一个账户，数据库不再处于`Admin Party`模式
- en: By default, Cloudant makes the `_users` database administrable for our `admin`
    account, but no other accounts have access to it
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，Cloudant使`_users`数据库对我们的`admin`账户可管理，但其他账户无法访问它
- en: We're lucky that Cloudant has our back! But, if you ever decide to roll out
    your own CouchDB instance, make sure to look back to [Chapter 3](ch03.html "Chapter 3. Getting
    Started with CouchDB and Futon"), *Getting Started with CouchDB and Futon*, and
    follow the steps we took to secure our local environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很幸运，Cloudant一直支持我们！但是，如果你决定自己部署CouchDB实例，一定要回头看看[第3章](ch03.html "第3章。使用CouchDB和Futon入门")，“使用CouchDB和Futon入门”，并按照我们用来保护本地环境的步骤进行操作。
- en: We do, however, need to update our `verge` database so that users can read,
    create, and write in that database.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要更新我们的`verge`数据库，以便用户可以在该数据库中读取、创建和写入。
- en: Log in to your Cloudant account, and go to your dashboard. [https://cloudant.com/#!/dashboard](http://https://cloudant.com/#!/dashboard).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的Cloudant账户，并转到你的仪表板。[https://cloudant.com/#!/dashboard](http://https://cloudant.com/#!/dashboard)。
- en: Click on the `verge` database.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`verge`数据库。
- en: Click on **Permissions** to manage the database permissions.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**权限**来管理数据库权限。
- en: Update the **Permissions** for **Everyone else** by checking the boxes under
    **Read, Create**, and **Write**. Make sure to leave **Admin** unchecked, so that
    normal users can't alter our database structure and design documents. The end
    result should look similar to the following screenshot:![Configuring permissions](graphics/3586_10_035.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选中**读取、创建**和**写入**下的复选框来更新**其他人**的**权限**。确保不要选中**管理员**，这样普通用户就无法更改我们的数据库结构和设计文档。最终结果应该类似于以下截图：![配置权限](graphics/3586_10_035.jpg)
- en: Configuring our project
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置我们的项目
- en: Now that we have our production database set up, our code needs to know how
    to connect to it. We could just alter over the hardcoded values we have in our
    `Bones` library and change it back and forth each time we want to develop locally
    or deploy to production. But, trust me that you don't want to go through the hassle
    of doing this, and more importantly, we don't want to store any usernames or passwords
    in our code; for this we'll use environment variables. **Environment variables**
    are a set of dynamically named values that allow you to define variables from
    the applications hosting environment. Let's create a class that will allow us
    to use environment variables so that our code is free of sensitive information
    and our application is easy to configure.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了我们的生产数据库，我们的代码需要知道如何连接到它。我们可以只是修改我们在`Bones`库中硬编码的值，每次想要在本地开发或部署到生产环境时来回更改。但是，请相信我，你不想经历这样的麻烦，更重要的是，我们不想在我们的代码中存储任何用户名或密码；为此，我们将使用环境变量。**环境变量**是一组动态命名的值，允许你从应用程序的托管环境中定义变量。让我们创建一个类，使我们能够使用环境变量，这样我们的代码就不会包含敏感信息，我们的应用程序也容易配置。
- en: Time for action — creating a configuration class
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——创建一个配置类
- en: Plugging in a simple configuration class is actually really easy for us to do
    because of how we've coded everything so far. Let's walk through the creation
    of it together.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们迄今为止编写的代码，插入一个简单的配置类实际上对我们来说非常容易。让我们一起来创建它。
- en: Start by creating a new configuration file called `configuration.php` inside
    our `lib` folder (`lib/configuration.php`).
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先在我们的`lib`文件夹内创建一个名为`configuration.php`的新配置文件（`lib/configuration.php`）。
- en: Now, let's create the scaffolding for our class called `Configuration`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为名为`Configuration`的类创建脚手架。
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's go through and create some descriptive configuration variables. We could
    add more, but let's just add the ones we need right now.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们继续并创建一些描述性的配置变量。我们可以添加更多，但现在让我们只添加我们现在需要的。
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, copy the login information you need to access your local CouchDB instance;
    mine looks similar to the following:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，复制你需要访问本地CouchDB实例的登录信息；我的看起来类似于以下内容：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's use a special __get function to check and see if there's an environment
    variable set, and return that instead of the default value. If not, it'll just
    return the default value that we define in this class.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用一个特殊的`__get`函数来检查并查看是否设置了环境变量，并返回该值，而不是默认值。如果没有，它将只返回我们在这个类中定义的默认值。
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What just happened?
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just created a simple configuration class called `configuration.php` and
    created the shell of a class called `Configuration`. Next, we created a few variables
    for the configuration of the database, which we made `public` because we might
    need to use these variables in a variety of places. Then, we filled in the default
    values of these variables with the information to access our local CouchDB instance.
    We then added in the magic of this class. We created a `__get` function that overrides
    the standard `get` operation on a class. This function uses the `getenv` function
    to check the server to see if the variable is set in the environment variables
    (we'll go over how to do this shortly). If there is an environment variable with
    the same name, we'll return it to the calling function; if not, then we will simply
    return the default value.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个名为`configuration.php`的简单配置类，并创建了一个名为`Configuration`的类的框架。接下来，我们为数据库的配置创建了一些变量，我们将其设置为`public`，因为我们可能需要在各种地方使用这些变量。然后，我们用访问本地CouchDB实例的信息填充了这些变量的默认值。然后，我们添加了这个类的魔力。我们创建了一个`__get`函数，它覆盖了类的标准`get`操作。这个函数使用`getenv`函数来检查服务器，看看环境变量中是否设置了该变量（我们将很快介绍如何做到这一点）。如果有一个同名的环境变量，我们将把它返回给调用函数；如果没有，我们将简单地返回默认值。
- en: The `Configuration` class is a nice and simple class that does everything we
    need without being overly complex. Next, let's move on to make sure that our application
    knows to access and use this class.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Configuration`类是一个很好而简单的类，它可以在不过分复杂的情况下完成我们需要的一切。接下来，让我们确保我们的应用程序知道如何访问和使用这个类。'
- en: Time for action — adding our configuration file to Bones
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-将我们的配置文件添加到Bones
- en: Adding the new configuration class to our application was pretty easy. Now,
    we just need to add it into our `__construct()of` Bones, and we should be able
    to start using this class throughout our project.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将新的配置类添加到我们的应用程序中非常容易。现在，我们只需要将它添加到Bones的`__construct()`中，然后我们就可以在整个项目中开始使用这个类了。
- en: Open up `lib/bones.php`, and look at the beginning of the file where we tell
    our library where to look for our other `lib` files. We need to add our configuration
    class here.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`lib/bones.php`，并查看文件开头，告诉我们的库在哪里查找其他`lib`文件。我们需要在这里添加我们的配置类。
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's make sure that we define `$config in` Bones' public variables so that
    we can use them in other files if we need to.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们确保在Bones的公共变量中定义`$config`，这样我们在其他文件中也可以使用它们。
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's look at the `__construct()` method a bit further down in the file. In
    this method (right before the instantiation of Sag), let's create a new instance
    of the `Configuration` class.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看一下文件中稍后的`__construct()`方法。在这个方法中（就在实例化Sag之前），让我们创建一个`Configuration`类的新实例。
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that our code knows about the configuration class, we just need to put the
    variables in the right place and we'll be up and running. Let's tell Sag how to
    connect to CouchDB using the configuration class.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的代码知道了配置类，我们只需要把变量放在正确的位置，就可以运行起来了。让我们告诉Sag如何使用配置类连接到CouchDB。
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'There are just a few more places where we need to update our code, so that
    it uses the configuration class. Remember that we have the `admin` username and
    password in `classes/user.php` for the creation and finding of users. Let''s clean
    this up by first looking at the signup function inside of `classes/user.php`.
    Once we plug in our configuration class, the function should look similar to the
    following:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一些地方需要更新我们的代码，以便使用配置类。记住，我们在`classes/user.php`中有`admin`用户名和密码，用于创建和查找用户。让我们首先看一下`classes/user.php`中的注册函数，清理一下。一旦我们插入我们的配置类，该函数应该类似于以下内容：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The last place that we need to adjust to use the `config` class is the `get_by_username`
    function at the end of the `classes/user.php` file.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要调整的最后一个地方是`classes/user.php`文件末尾的`get_by_username`函数，以使用`config`类。
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We just removed all references to `ADMIN_USER` and `ADMIN_PASSWORD`, which we
    defined at the top of `index.php`. We no longer need these variables, so let's
    switch over to `index.php` and remove both `ADMIN_USER` and `ADMIN_PASSWORD` from
    the top of the file.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们刚刚删除了`index.php`顶部定义的`ADMIN_USER`和`ADMIN_PASSWORD`的所有引用。我们不再需要这些变量，所以让我们切换到`index.php`，并从文件顶部删除`ADMIN_USER`和`ADMIN_PASSWORD`。
- en: What just happened?
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just wrote the final lines of code of our application! In this section, we
    made sure that Bones had complete access to the configuration file that we recently
    created as `lib/configuration.php`. Then, we made a public variable, `$config`,
    to make sure that we had access to our configuration class anywhere in our application.
    With our configuration class stored in the `$config` variable, we moved on to
    go through places in our code where we hardcoded our database settings.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚写完了我们应用程序的最后几行代码！在这一部分中，我们确保Bones完全可以访问我们最近创建的`lib/configuration.php`配置文件。然后，我们创建了一个公共变量`$config`，以确保我们在应用程序的任何地方都可以访问我们的配置类。将我们的配置类存储在`$config`变量中后，我们继续查看我们的代码中那些硬编码了数据库设置的地方。
- en: Adding changes to Git
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将更改添加到Git
- en: Because we just wrote the last lines of our code, I'm going to be a pain and
    will make sure that you've fully committed all of our code to Git. Otherwise,
    when we deploy our code shortly, there's a chance that not all of your files will
    make it to the production server.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们刚刚写完了我们的代码的最后几行，我要确保你已经完全提交了我们的所有代码到Git。否则，当我们不久部署我们的代码时，你的所有文件可能都不会到达生产服务器。
- en: Open Terminal.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: Add any remaining files in your project using the wildcard.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用通配符添加项目中的任何剩余文件。
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, let's tell Git what we have done.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们告诉Git我们做了什么。
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Application hosting with PHP Fog
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP Fog进行应用程序托管
- en: Our code is all up-to-date and ready to be deployed. We just need a place to
    actually deploy it. As I mentioned before, we will use PHP Fog, but feel free
    to explore the other options that are available to you. The setup and deploy process
    will be the same with most PaaS providers.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码已经更新完毕，准备部署。我们只需要一个地方来实际部署它。正如我之前提到的，我们将使用PHP Fog，但请随意探索其他可用的选项。大多数PaaS提供商的设置和部署过程都是相同的。
- en: Setting up a PHP Fog account
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置PHP Fog账户
- en: Setting up a PHP Fog account is just as easy as it was for us to set up our
    Cloudant account.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 设置PHP Fog账户就像我们设置Cloudant账户一样简单。
- en: Start by going to [https://www.phpfog.com/signup](http://https://www.phpfog.com/signup).![Setting
    up a PHP Fog account](graphics/3586_10_045.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问[https://www.phpfog.com/signup](http://https://www.phpfog.com/signup)。![设置PHP
    Fog账户](graphics/3586_10_045.jpg)
- en: Create an account by filling in each field. When you are finished, click on
    **Register**. You'll be forwarded on to create your first app.![Setting up a PHP
    Fog account](graphics/3586_10_050.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写每个字段创建一个账户。完成后，点击“注册”。你将被引导创建你的第一个应用程序。![设置PHP Fog账户](graphics/3586_10_050.jpg)
- en: You'll notice that there are a variety of starter applications and frameworks
    that allow us to jump in and create the scaffolding of a PHP application. We're
    just going to use our own code, so click on **Custom App**.![Setting up a PHP
    Fog account](graphics/3586_10_060.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会注意到有各种各样的起始应用程序和框架，可以让我们快速创建PHP应用程序的脚手架。我们将使用我们自己的代码，所以点击“自定义应用程序”。![设置PHP
    Fog账户](graphics/3586_10_060.jpg)
- en: Our application is almost created, we just need to give PHP Fog a bit more information.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的应用程序几乎创建完成了，我们只需要给PHP Fog提供更多信息。
- en: You'll notice that PHP Fog is asking for a password for MySQL. Since we aren't
    using MySQL in this application, we can just enter a random password or any other
    characters. It is helpful to know that some day down the road, if you'd like to
    use MySQL in your project to store some relational data, it's just a few clicks
    away and hosted in the same application environment. Remember that MySQL and CouchDB
    can be the best of friends if you use them right!
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会注意到PHP Fog要求输入MySQL的密码。由于我们在这个应用程序中没有使用MySQL，我们可以输入一个随机密码或其他任何字符。值得一提的是，如果将来有一天你想在项目中使用MySQL来存储一些关系数据，只需点击几下，就可以在同一应用程序环境中进行托管。记住，如果正确使用，MySQL和CouchDB可以成为最好的朋友！
- en: Next, PHP Fog will ask for your domain. Each application will have a short URL
    hosted on [phpfogapp.com](http://phpfogapp.com). This is totally fine for us in
    the short term, and when we're ready to roll out our application with a full domain
    name, we can do that through PHP Fog's **Domain Name** section. When creating
    a domain for your application, PHP Fog requires it to be unique, so you'll need
    to come up with your own domain. You could do something like `yourname-verge.phpfogapp.com`,
    or you can get especially clever and create an app with the name of your favorite
    mythological creature. This is a popular practice, so that nobody can randomly
    find your application while you're still fixing bugs and getting ready to launch.![Setting
    up a PHP Fog account](graphics/3586_10_065.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，PHP Fog会要求输入你的域名。每个应用程序都会有一个托管在[phpfogapp.com](http://phpfogapp.com)上的短URL。这对我们来说在短期内是完全可以接受的，当我们准备使用完整域名推出我们的应用程序时，我们可以通过PHP
    Fog的“域名”部分来实现。在为应用程序创建域名时，PHP Fog要求它是唯一的，所以你需要想出自己的域名。你可以使用类似`yourname-verge.phpfogapp.com`的形式，或者你可以特别聪明地创建一个以你最喜欢的神话生物命名的应用程序。这是一个常见的做法，这样在你还在修复错误和准备推出时，没有人会随机找到你的应用程序。![设置PHP
    Fog账户](graphics/3586_10_065.jpg)
- en: When you are ready, click on **Create App**, and your application will be created.![Setting
    up a PHP Fog account](graphics/3586_10_070.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你准备好时，点击“创建应用程序”，你的应用程序将被创建。![设置PHP Fog账户](graphics/3586_10_070.jpg)
- en: 'That''s all it takes! Your application is getting ready to start. You''ll notice
    that PHP Fog will say **Status: Preparing App...** for just a few moments, and
    then it will change to **Status: Running.**![Setting up a PHP Fog account](graphics/3586_10_072.jpg)'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样！你的应用程序已经准备就绪。你会注意到PHP Fog会在短暂的时间内显示“状态：准备应用...”，然后会变成“状态：运行”。![设置PHP Fog账户](graphics/3586_10_072.jpg)
- en: Creating environment variables
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建环境变量
- en: With our PHP Fog application up and running, we have one last piece of configuration
    that we need to carry out before pushing our code to the server. Remember all
    of the environment variables we set up when configuring your project? Well, we
    need to set them within PHP Fog so that our application knows how to connect to
    Cloudant.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的PHP Fog应用程序已经启动运行，我们在将代码推送到服务器之前需要进行最后一项配置。记得我们在配置项目时设置的所有环境变量吗？好吧，我们需要在PHP
    Fog中设置它们，这样我们的应用程序就知道如何连接到Cloudant了。
- en: In order for you to manage your environment variables, you'll need to start
    by navigating to your **App Console** for your project, which is where we left
    off after you created your first app.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理你的环境变量，你需要首先转到你项目的“应用程序控制台”，这是你创建第一个应用程序后留下的地方。
- en: Click on **Env Variables**, and you will be taken to the **Environment Variables
    management** section.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“环境变量”，你将进入“环境变量管理”部分。
- en: '![Creating environment variables](graphics/3586_10_075.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![创建环境变量](graphics/3586_10_075.jpg)'
- en: You'll notice that the environment variables for the MySQL database that PHP
    Fog created for us are already set. We just need to enter in our environment variables
    for Cloudant. The name will need to be the same name that we defined in our configuration
    class earlier in this chapter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到PHP Fog为我们创建的MySQL数据库的环境变量已经设置好了。我们只需要输入Cloudant的环境变量。名称需要与我们在本章前面定义的配置类中的名称相同。
- en: Let's start by adding our `db_server` environment variable. My `db_server` is
    located at `https://timjuravich:password@timjuravich.cloudant.com`, so I'll enter
    those details into the **Name** and **Value** text fields.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从添加我们的`db_server`环境变量开始。我的`db_server`位于`https://timjuravich:password@timjuravich.cloudant.com`，所以我将这些详细信息输入到**名称**和**值**文本字段中。
- en: '![Creating environment variables](graphics/3586_10_080.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![创建环境变量](graphics/3586_10_080.jpg)'
- en: 'Let''s continue this process for each of the variables inside of the configuration
    file. To recap, here are the environment variables that you''ll need to enter
    here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续为配置文件中的每个变量进行此过程。回顾一下，这里是您需要输入的环境变量：
- en: '`db_server:` This will be your Cloudant URL, again, mine is `https://timjuravich:password@timjuravich.cloudant.com`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_server:` 这将是您的Cloudant URL，同样，我的是`https://timjuravich:password@timjuravich.cloudant.com`'
- en: '`db_port:` This is will be set to `5984`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_port:` 这将设置为`5984`'
- en: '`db_database:` This is the database where everything will be stored, and it
    should be set to `verge`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_database:` 这是将存储所有内容的数据库，应设置为`verge`'
- en: '`db_admin_user:` This is the username of the `admin` user. In our case, this
    is set to the value of the Cloudant admin username'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_admin_user:` 这是`admin`用户的用户名。在我们的情况下，这是设置为Cloudant管理员用户名的值'
- en: '`db_admin_password:` This is the password for the above `admin` user'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_admin_password:` 这是上述`admin`用户的密码'
- en: When you are all finished, click on **Save Changes**, and your environment variables
    will be set. With that, we're ready to deploy to PHP Fog.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成所有操作后，点击**保存更改**，您的环境变量将被设置。有了这个，我们就可以部署到PHP Fog了。
- en: Deploying to PHP Fog
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到PHP Fog
- en: Deploying to PHP Fog is an extremely simple process, because PHP Fog uses Git
    for deployments. It's a good thing that our project is already set up with Git
    and ready to go. We just need to tell PHP Fog our SSH key, so that it knows how
    to identify us.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 部署到PHP Fog是一个非常简单的过程，因为PHP Fog使用Git进行部署。很幸运，我们的项目已经使用Git设置好并准备就绪。我们只需要告诉PHP
    Fog我们的SSH密钥，这样它就知道如何识别我们。
- en: Adding our SSH key to PHP Fog
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将我们的SSH密钥添加到PHP Fog
- en: PHP Fog uses SSH keys just like GitHub to identify and authenticate us. Since
    we already created one early in this book, we don't need to make another one.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: PHP Fog使用SSH密钥来识别和验证我们，就像GitHub一样。由于我们在本书的早期已经创建了一个，所以我们不需要再创建一个。
- en: You can start by clicking on **MY ACCOUNT** in the top-right corner and then
    clicking on **SSH Key** on the next page. You'll be presented with the following
    page in which you can enter your SSH key:![Adding our SSH key to PHP Fog](graphics/3586_10_082.jpg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从右上角点击**我的帐户**开始，然后在下一页上点击**SSH密钥**。您将看到以下页面，您可以在其中输入您的SSH密钥:![将我们的SSH密钥添加到PHP
    Fog](graphics/3586_10_082.jpg)
- en: Enter a value for **Nickname**. You should use something simple but descriptive,
    such as `Tim's Macbook`. You'll thank yourself later for keeping this organized,
    especially if you start to collaborate with other developers on this project.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**昵称**的值。您应该使用简单但描述性的内容，比如`Tim's Macbook`。将来，您会因为保持这种组织而感激自己，特别是如果您开始与其他开发人员合作开发这个项目。
- en: You'll need to grab your public key for the Public Key textbox. Luckily, we
    can do that with one simple command in Terminal.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要获取公钥以填入公钥文本框。幸运的是，我们可以在终端中用一个简单的命令来做到这一点。
- en: Open Terminal.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: Run the following command, and your public key will be copied to your clipboard.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，您的公钥将被复制到剪贴板。
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With the public key in your clipboard, just click on the textbox and paste in
    the value.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将公钥复制到剪贴板后，只需点击文本框，粘贴值进去。
- en: Finally, at the bottom of the form, there's a checkbox that says **Give this
    key Write access**. If you want the computer to be able to push the code to PHP
    Fog (which we'll want to be able to do), this needs to be checked.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在表单底部有一个复选框，上面写着**给此密钥写入访问权限**。如果您希望计算机能够将代码推送到PHP Fog（我们希望能够这样做），则需要勾选此复选框。
- en: Click on **Save SSH Key**, and we're ready to move on to the final steps of
    deploying our application.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存SSH密钥**，我们就可以继续进行部署应用程序的最后步骤了。
- en: Connecting to PHP Fog's Git repository
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到PHP Fog的Git存储库
- en: As we already have our Git repository all set up and ready to go, all we need
    to do is tell Git how to connect to the repository on PHP Fog. Let's go through
    this process by adding a remote repository to our working directory called `phpfog`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经设置好并准备好使用的Git存储库，我们只需要告诉Git如何连接到PHP Fog上的存储库。让我们通过向我们的工作目录添加一个名为`phpfog`的远程存储库来完成这个过程。
- en: Get the repository from Php Fog
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从Php Fog获取存储库
- en: When we created our application on PHP Fog, we also created a unique Git repository
    that our application is driven by. In this section, we'll grab the location of
    this repository, so that we can tell Git to connect to it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在PHP Fog上创建应用程序时，我们还创建了一个独特的Git存储库，我们的应用程序由此驱动。在本节中，我们将获取此存储库的位置，以便告诉Git连接到它。
- en: Log in to your PHP Fog Account.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的PHP Fog帐户。
- en: Go to your application's App Console.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到您的应用程序的应用控制台。
- en: Click on **Source Code**.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**源代码**。
- en: 'On the **Source Code** page, you''ll see a section that says **Clone your git
    repository**. Mine has the following code in it (yours should be similar):'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在**源代码**页面上，您将看到一个部分，上面写着**克隆您的git存储库**。我的里面有以下代码（您的应该类似）:'
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Because we already have an existing Git repository, we don't have to clone theirs,
    but we do need the location of the application's Git repository for our next configuration
    step. Using this example, the repository location would be `git@git01.phpfog.com:timjuravich-verge.phpfogapp.com`.
    Copy this to your clipboard.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为我们已经有一个现有的Git存储库，所以我们不需要克隆他们的，但是我们需要应用程序的Git存储库的位置来进行下一步配置。使用这个例子，存储库位置将是`git@git01.phpfog.com:timjuravich-verge.phpfogapp.com`。将其复制到剪贴板上。
- en: Connecting to the repository from Git
  id: totrans-160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从Git连接到存储库
- en: Now that we know our PHP Fog's Git repository, we just need to tell our local
    machine how to connect to it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了PHP Fog的Git存储库，我们只需要告诉我们的本地机器如何连接到它。
- en: Open Terminal.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: Change the directory to your `working` folder.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将目录更改为您的`工作`文件夹。
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, let's add our PHP Fog's repository as a new remote repository called `phpfog`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将PHP Fog的存储库添加为一个名为`phpfog`的新远程存储库。
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Clear the runway, and we're ready to launch this application!
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清除跑道，我们准备启动这个应用程序！
- en: Deploy to PHP Fog
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署到PHP Fog
- en: It's the moment we've been waiting for! Let's launch our application to PHP
    Fog.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们一直在等待的时刻！让我们将我们的应用程序部署到PHP Fog。
- en: Open Terminal.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: Change the directory to your `working` folder.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将目录更改为您的`working`文件夹。
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We want to ignore what's in PHP Fog's Git repository, as we already have our
    application built. So, this time and this time only, we'll want to append `--force`
    at the end of our call.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望忽略PHP Fog的Git存储库中的内容，因为我们已经构建了我们的应用程序。因此，这一次，我们将在调用的末尾添加`--force`。
- en: '[PRE21]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: I hope that wasn't too anti-climactic, but congratulations, your application
    is live to the world! That was nice and easy wasn't it? Each time you make changes
    to your code from here on out, all you need to do is commit it to Git, enter the
    command `git push phpfog master`, and make sure to push your code to GitHub too
    by using `git push origin master`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这不会太令人失望，但恭喜，您的应用程序已经上线了！这是不是很简单？从现在开始，每当您对代码进行更改时，您只需要将其提交到Git，输入命令`git
    push phpfog master`，并确保通过`git push origin master`将您的代码推送到GitHub。
- en: If you start to play with your live application a bit, you might be bummed to
    find out that your data from your local machine isn't up for you to see. You're
    in luck; in the next section, we're going to push our local database to our production
    database using CouchDB's powerful replication.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您开始对您的实时应用程序进行一些操作，您可能会感到沮丧，因为您的本地机器上的数据并不适合您查看。您很幸运；在下一节中，我们将使用CouchDB强大的复制功能将本地数据库推送到我们的生产数据库。
- en: Replicating local data to production
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将本地数据复制到生产环境
- en: The inner workings and background info on replication won't be covered in detail
    in this section, but you can find a full walkthrough in the bonus chapter titled
    *Replicating your data*, which is available on the Packt Publishing website.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 复制的内部工作原理和背景信息将不会在本节中详细介绍，但您可以在Packt Publishing网站上的名为*复制您的数据*的奖励章节中找到完整的演练。
- en: To give you a quick overview, **replication** is the way that CouchDB transports
    data between one server and another. Replication is driven by the `_rev` field
    that lives in each document, the `_rev` field makes sure that your server knows
    which version has the correct data to use.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给您一个快速概述，**复制**是CouchDB在服务器之间传输数据的方式。复制由每个文档中的`_rev`字段驱动，`_rev`字段确保您的服务器知道哪个版本具有正确的数据可供使用。
- en: In this section, we'll replicate both the `_users` and `verge` databases so
    that all of our local data is available on the production server. You don't have
    to worry if your application has been live for a few minutes or even a few days,
    as the best part of replication is that if someone is already using your application,
    then all of their data will remain intact; we'll just be adding our local data.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将复制`_users`和`verge`数据库，以便我们所有的本地数据都可以在生产服务器上使用。如果您的应用程序已经上线了几分钟甚至几天，您不必担心，因为复制的最大好处是，如果有人已经在使用您的应用程序，那么他们的所有数据将保持完整；我们只是添加我们的本地数据。
- en: Time for action — replicating our local _users database to Cloudant
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作-将本地_users数据库复制到Cloudant
- en: Let's use Futon to replicate our local `_users` database to the `_users` database
    that we created on Cloudant.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Futon将我们的本地`_users`数据库复制到我们在Cloudant上创建的`_users`数据库。
- en: Open Futon in the browser and click on **Replicator**, or you can navigate directly
    to `http://localhost:5984/_utils/replicator.html`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开Futon，单击**复制器**，或者您可以直接导航到`http://localhost:5984/_utils/replicator.html`。
- en: Make sure that you are signed in as the `administrator`; if you are not, click
    on **Login** and sign in as an `administrator`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您以`管理员`身份登录；如果没有，请单击**登录**，以`管理员`身份登录。
- en: Select the `_users` database in the **Replicate changes from** the dropdown
    list.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**从中复制更改**的下拉列表中选择`_users`数据库。
- en: Click on the **Remote database** radio button in the **To** section.![Time for
    action — replicating our local _users database to Cloudant](graphics/3586_10_085.jpg)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**To**部分中单击**远程数据库**单选按钮。![执行操作-将本地_users数据库复制到Cloudant](graphics/3586_10_085.jpg)
- en: In the **Remote database** text field, enter the URL of the database at Cloudant
    along with the credentials. The format of the URL will look similar to `https://username:password@username.cloudant.com/_users`.![Time
    for action — replicating our local _users database to Cloudant](graphics/3586_10_090.jpg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**远程数据库**文本字段中，输入Cloudant数据库的URL以及凭据。 URL的格式看起来类似于`https://username:password@username.cloudant.com/_users`。![执行操作-将本地_users数据库复制到Cloudant](graphics/3586_10_090.jpg)
- en: Click on **Replicate**, and CouchDB will push your local database to Cloudant.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**复制**，CouchDB将推送您的本地数据库到Cloudant。
- en: You'll see the familiar results from Futon.![Time for action — replicating our
    local _users database to Cloudant](graphics/3586_10_095.jpg)
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到Futon的熟悉结果。![执行操作-将本地_users数据库复制到Cloudant](graphics/3586_10_095.jpg)
- en: What just happened?
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just used Futon to replicate our local `_users` database to our `_users`
    production database hosted with Cloudant. The process was exactly the same as
    we've done before, however, we used **Remote Database** in the **To** section,
    and used the URL of the database along with our credentials. When replication
    was complete, we received a long and confusing report, but the gist of it is that
    that everything went okay. Let's move on to replicating our `verge` database as
    well.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用Futon将我们的本地`_users`数据库复制到了我们在Cloudant上托管的`_users`生产数据库。这个过程与我们之前做的完全相同，但是我们在**To**部分使用了**远程数据库**，并使用了数据库的URL以及我们的凭据。复制完成后，我们收到了一个冗长且令人困惑的报告，但要点是一切都进行得很顺利。让我们继续复制我们的`verge`数据库。
- en: Note
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'It''s worth mentioning that if you attempted to replicate the `_users` database
    from the command-line, you would have had to include the username and password
    in your call. This is because we have the users database completely locked to
    anonymous users. The function would look similar to the following:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，如果你尝试从命令行复制`_users`数据库，你将不得不在调用中包含用户名和密码。这是因为我们完全将用户数据库锁定为匿名用户。函数看起来类似于以下内容：
- en: curl -X POST http://user:password@localhost:5984/_replicate -d '{"source":"_users",*"target":"https://username:password@username.cloudant.com/_users"}'*
    -H*"Content-Type:* application/json"
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: curl -X POST http://user:password@localhost:5984/_replicate -d '{"source":"_users",*"target":"https://username:password@username.cloudant.com/_users"}'*
    -H*"Content-Type:* application/json"
- en: Have a go hero — replicating the local verge database to Cloudant
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试一试英雄——将本地的verge数据库复制到Cloudant
- en: Do you think you can figure out the command to replicate your local `verge`
    database to the `verge` database on Cloudant based on the tip I just gave you?
    It's almost impossible to mess anything up at this stage in the game, so don't
    be scared to try a few things if you don't get it the first time.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为你能根据我刚给你的提示找出将本地`verge`数据库复制到Cloudant上的`verge`数据库的命令吗？在游戏的这个阶段几乎不可能搞砸任何事情，所以如果第一次没有搞定，不要害怕尝试几次。
- en: Give it a shot. When you're finished, continue reading and we'll go over the
    command that I used.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 试一试。完成后，继续阅读，我们将讨论我使用的命令。
- en: 'How did everything go? Hopefully, you got it without too much effort. If you
    couldn''t get it to work, here''s an example of a command you could have used:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一切进行得如何？希望你能轻松搞定。如果你无法让它工作，这里有一个你可以使用的命令示例：
- en: '[PRE22]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this example, we're using our local CouchDB instance to replicate our local
    `verge` database to the target Cloudant `verge` database. For the local database,
    we can simply put the name as `verge`, but for the target database, we have to
    pass the full database location.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用我们的本地CouchDB实例将本地的`verge`数据库复制到目标Cloudant`verge`数据库。对于本地数据库，我们可以简单地将名称设置为`verge`，但对于目标数据库，我们必须传递完整的数据库位置。
- en: With all of your data live and on your production server, you can log in as
    any of the users that you created locally, and see all of the content that you
    created live and ready for the world to see. This it's not quite the end of your
    journey; let's talk quickly about what's next.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的所有数据都在生产服务器上并且在线时，你可以登录为你在本地创建的任何用户，并查看你创建的所有内容都已经准备好供全世界查看。这并不是你旅程的结束；让我们快速谈谈接下来的事情。
- en: What's next?
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: Before I send you on your way, let's talk about what's in store for you with
    your application in the wild, and what you can do next to make this application
    more powerful.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在我送你离开之前，让我们谈谈你的应用在野外的前景，以及你可以做些什么来使这个应用更加强大。
- en: Scaling your application
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展你的应用
- en: Luckily, scaling your application should be really easy when leveraging PHPFog
    and Cloudant. Really, the most intense thing you'll have to do is log in to PHPFog
    and bump up our web processes, or log in to Cloudant and upgrade to a bigger plan.
    They handle all of the hard work; you just need to learn how to scale effectively.
    You can't beat that!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在利用PHPFog和Cloudant时，扩展你的应用应该是非常容易的。实际上，你唯一需要做的最紧张的事情就是登录PHPFog并增加我们的Web进程，或者登录Cloudant并升级到更大的计划。他们处理所有的艰苦工作；你只需要学会如何有效地扩展。这是无法超越的！
- en: For more information on how to scale effectively, browse the help documents
    of both PHPFog and Cloudant, they talk a lot of about different ways that you
    can scale and problem areas to avoid.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于有效扩展的信息，请浏览PHPFog和Cloudant的帮助文档，它们详细介绍了不同的扩展方式和需要避免的问题领域。
- en: It's worth mentioning again that we didn't fully cover replication in this chapter.
    For a full walkthrough of replication, be sure to checkout the bonus chapter titled
    *Replicating your data*, which is available on the Packt Publishing website.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 值得再次提到的是，我们在本章中并没有完全涵盖复制。要全面了解复制，请务必查看题为*复制数据*的奖励章节，该章节可在Packt Publishing网站上找到。
- en: Next steps
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下一步
- en: I hope that you continue to develop and adapt Verge into something supremely
    useful, or if not, I hope you take the knowledge learned in this book and build
    something much greater.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你继续开发和改进Verge，使其成为非常有用的东西，或者，如果不是，我希望你利用这本书学到的知识构建更伟大的东西。
- en: 'If you decide to keep building features on top of Verge, there''s still quite
    a lot that you could do with this application. For example, you could:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定继续在Verge上构建功能，这个应用还有很多可以做的事情。例如，你可以：
- en: Add the ability for users to follow other users
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加用户之间相互关注的功能
- en: Allow users to filter and search content
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户过滤和搜索内容
- en: Add a messaging system so users can communicate with each other
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个消息系统，让用户可以相互交流
- en: Customize the UI and make it into something really unique
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义UI，使其成为真正独特的东西
- en: 'I will continue to incrementally add features like these and more to the Verge
    repository on GitHub here: [https://github.com/timjuravich/verge](http://https://github.com/timjuravich/verge).
    So, make sure to watch the repository for updates, and fork it if you''d like.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我将继续在GitHub上的Verge存储库中逐步添加这样的功能和更多功能：[https://github.com/timjuravich/verge](http://https://github.com/timjuravich/verge)。所以，请确保关注存储库的更新，并在需要时进行分叉。
- en: Again, I really appreciate the time we spent together in this book, please feel
    free to reach out to me on Twitter `@timjuravich` if you have any questions.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 再次感谢你在这本书中花费的时间，请随时在Twitter上联系我`@timjuravich`，如果你有任何问题。
- en: Happy developing!
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 开心开发！
- en: Summary
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to share our application with the world. Specifically,
    we signed up for an account with Cloudant and PHP Fog, and deployed our application
    successfully. All that's left for you to do is keep coding and turn this application
    into something awesome.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学会了如何与世界分享我们的应用。具体来说，我们注册了Cloudant和PHP Fog的帐户，并成功部署了我们的应用。你所要做的就是继续编码，将这个应用变成一些了不起的东西。
