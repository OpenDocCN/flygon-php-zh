["```php\ndeclare(strict_types=0); //weak type-checking\ndeclare(strict_types=1); // strict type-checking\n```", "```php\nfunction hint (int $A, float $B, string $C, bool $D)\n{\n    var_dump($A, $B, $C, $D);\n}\n```", "```php\nhint(2, 4.6, 'false', true); \n/* int(2) float(4.6) string(5) \"false\" bool(true) */\n\nhint(2.4, 4, true, 8);\n/* int(2) float(4) string(1) \"1\" bool(true) */\n```", "```php\nhint(2.4, 4, true, 8);\n\nFatal error: Uncaught TypeError: Argument 1 passed to hint() must be of the type integer, float given, called in php7.php on line 16 and defined in php7.php:8 Stack trace: #0 php7.php(16): hint(2.4, 4, true, 8) #1 {main} thrown in php7.php on line 8\n```", "```php\nfunction divide(int $A, int $B) : int\n{\n    return $A / $B;\n}\n```", "```php\nvar_dump(divide(10, 2)); // int(5)\nvar_dump(divide(10, 3)); // int(3)\n```", "```php\nint(5) \nFatal error: Uncaught TypeError: Return value of divide() must be of the type integer, float returned in php7.php:10 Stack trace: #0php7.php(14): divide(10, 3) #1 {main} thrown in php7.php on line 10\n```", "```php\n$object = new class {\n    public function hello($message) {\n        return \"Hello $message\";\n    }\n};\n\necho$object->hello('PHP');\n```", "```php\n$helper->sayHello(new class {\n    public function hello($message) {\n        return \"Hello $message\";\n    }\n});\n```", "```php\nclass TheClass {}\ninterface TheInterface {}\ntrait TheTrait {}\n\n$object = new class('A', 'B', 'C') extends TheClass implements TheInterface {\n\n    use TheTrait;\n\n    public $A;\n    private $B;\n    protected $C;\n\n    public function __construct($A, $B, $C)\n    {\n        $this->A = $A;\n        $this->B = $B;\n        $this->C = $C;\n    }\n};\n\nvar_dump($object);\n```", "```php\nobject(class@anonymous)#1 (3) { [\"A\"]=> string(1) \"A\"[\"B\":\"class@anonymous\":private]=> string(1) \"B\"[\"C\":protected]=> string(1) \"C\" }\n```", "```php\nFatal error: Uncaught Exception: Serialization of 'class@anonymous' is not allowed in php7.php:29 Stack trace: #0 php7.php(29): serialize(Object(class@anonymous)) #1 {main} thrown in php7.php on line 29\n```", "```php\nclass Outer\n{\n    private $prop = 1;\n    protected $prop2 = 2;\n\n    protected function outerFunc1()\n    {\n        return 3;\n    }\n\n    public function outerFunc2()\n    {\n        return new class($this->prop) extends Outer\n        {\n            private $prop3;\n\n            public function __construct($prop)\n            {\n                $this->prop3 = $prop;\n            }\n\n            public function innerFunc1()\n            {\n                return $this->prop2 + $this->prop3 + $this->outerFunc1();\n            }\n        };\n    }\n}\n\necho (new Outer)->outerFunc2()->innerFunc1(); //6\n```", "```php\nfunction call ($newThis, ...$parameters) {}\n```", "```php\nclass Customer {\n    private $firstname;\n    private $lastname;\n\n    public function __construct($firstname, $lastname)\n    {\n        $this->firstname = $firstname;\n        $this->lastname = $lastname;\n    }\n}\n\n$customer = new Customer('John', 'Doe');\n\n$greeting = function ($message) {\n    return \"$message $this->firstname $this->lastname!\";\n};\n\necho **$greeting->call($customer, 'Hello');**\n\n```", "```php\nfunction gen1() {\n    yield '1';\n    yield '2';\n    yield '3';\n}\n\nfunction gen2() {\n    yield '4';\n    yield '5';\n    yield '6';\n}\n\nfunction gen3() {\n    yield '7';\n    yield '8';\n **yield from gen1();**\n    yield '9';\n **yield from gen2();**\n    yield '10';\n}\n\n// output of the below code: 123\nforeach (gen1() as $number) {\necho $number;\n}\n\n//output of the below code: 78123945610\nforeach (gen3() as $number) {\n    echo $number;\n}\n```", "```php\nfunction gen() {\n    yield 'A';\n    yield 'B';\n    yield 'C';\n\n    return 'gen-return';\n}\n\n$generator = gen();\n\n//output of the below code: object(Generator)#1 (0) { }\nvar_dump($generator);\n\n// output of the below code: Fatal error\n// var_dump($generator->getReturn());\n\n// output of the below code: ABC\nforeach ($generator as $letter) {\n    echo $letter;\n}\n\n// string(10) \"gen-return\"\nvar_dump($generator->getReturn());\n```", "```php\nif ($generator->valid() === false) {\n    var_dump($generator->getReturn());\n}\n```", "```php\n$check = (5 > 3) ? 'Correct!' : 'Faulty!'; // Correct!\n$check = (5 < 3) ? 'Correct!' : 'Faulty!'; // Faulty!\n```", "```php\n$role = isset($_GET['role']) ? $_GET['role'] : 'guest';\n```", "```php\n$role = $_GET['role'] **??**'guest';\n```", "```php\n$A = null; // or not set\n$B = 10;\n\necho $A ?? 20; // 20\necho $A ?? $B ?? 30; // 10\n```", "```php\n(expr) <=> (expr)\n```", "```php\noperator<=> equivalent\n$a < $b($a <=> $b) === -1\n$a <= $b($a <=> $b) === -1 || ($a <=> $b) === 0\n$a == $b($a <=> $b) === 0\n$a != $b($a <=> $b) !== 0\n$a >= $b($a <=> $b) === 1 || ($a <=> $b) === 0\n$a > $b($a <=> $b) === 1\n```", "```php\n// Floats\necho 1.5 <=> 1.5; // 0\necho 1.5 <=> 2.5; // -1\necho 2.5 <=> 1.5; // 1\n\n// Strings\necho \"a\"<=>\"a\"; // 0\necho \"a\"<=>\"b\"; // -1\necho \"b\"<=>\"a\"; // 1\n\necho \"a\"<=>\"aa\"; // -1\necho \"zz\"<=>\"aa\"; // 1\n\n// Arrays\necho [] <=> []; // 0\necho [1, 2, 3] <=> [1, 2, 3]; // 0\necho [1, 2, 3] <=> []; // 1\necho [1, 2, 3] <=> [1, 2, 1]; // 1\necho [1, 2, 3] <=> [1, 2, 4]; // -1\n\n// Objects\n$a = (object) [\"a\" =>\"b\"]; \n$b = (object) [\"a\" =>\"b\"]; \necho $a <=> $b; // 0\n\n$a = (object) [\"a\" =>\"b\"]; \n$b = (object) [\"a\" =>\"c\"]; \necho $a <=> $b; // -1\n\n$a = (object) [\"a\" =>\"c\"]; \n$b = (object) [\"a\" =>\"b\"]; \necho $a <=> $b; // 1\n\n// only values are compared\n$a = (object) [\"a\" =>\"b\"]; \n$b = (object) [\"b\" =>\"b\"]; \necho $a <=> $b; // 0\n```", "```php\n$letters = ['D', 'B', 'A', 'C', 'E'];\n\nusort($letters, function($a, $b) {\nreturn $a <=> $b;\n});\n\nvar_dump($letters);\n\n// array(5) { [0]=> string(1) \"A\" [1]=> string(1) \"B\" [2]=>string(1) \"C\" [3]=> string(1) \"D\" [4]=> string(1) \"E\" }\n```", "```php\nclass Address\n{\n    private $customer;\n    public function __construct(Customer $customer)\n    {\n        $this->customer = $customer;\n    }\n}\n\n$customer = new stdClass();\n\ntry {\n    $address = new Address($customer);\n} catch (\\Exception $e) {\n    echo 'handling';\n} finally {\necho 'cleanup';\n}\n```", "```php\nCatchable fatal error: Argument 1 passed to Address::__construct() must be an instance of Customer, instance of stdClass given, called in script.php on line 15 and defined in script.php on line 6.\n```", "```php\nset_error_handler(function($code, $message) {\n    throw new \\Exception($message, $code);\n});\n```", "```php\ntry {\n// statements\n} catch (**\\Throwable $t**) {\n    // handling\n} finally {\n// cleanup\n}\n```", "```php\n<?php\n\n$config = [\n'host' =>'localhost'\n'user' =>'john'\n];\n\nreturn $config;\n```", "```php\n<?php \n\ntry {\ninclude 'config.php';\n} catch (\\ParseError $e) {\n// handle broken file case\n}\n```", "```php\n// would echo '/var/www/html/app/etc'\necho dirname('/var/www/html/app/etc/config/');\n\n// would echo '/var/www/html/app/etc'\necho dirname('/var/www/html/app/etc/config.php');\n\n// would echo '/var/www/html/app'\necho dirname('/var/www/html/app/etc/config.php', 2);\n\n// would echo '/var/www/html'\necho dirname('/var/www/html/app/etc/config.php', 3);\n```", "```php\nint intdiv(int $dividend, int $divisor)\n```", "```php\nintdiv(5, 3); // int(1)\nintdiv(-5, 3); // int(-1)\nintdiv(5, -2); // int(-2)\nintdiv(-5, -2); // int(2)\nintdiv(PHP_INT_MAX, PHP_INT_MAX); // int(1)\nintdiv(PHP_INT_MIN, PHP_INT_MIN); // int(1)\n\n// following two throw error\nintdiv(PHP_INT_MIN, -1); // ArithmeticError\nintdiv(1, 0); // DivisionByZeroError\n```", "```php\n// the define() example\ndefine('FRAMEWORK', [\n'version' => 1.2,\n'licence' =>'enterprise'\n]);\n\necho FRAMEWORK['version']; // 1.2\necho FRAMEWORK['licence']; // enterprise\n\n// the class const example\nclass App {\n    const FRAMEWORK = [\n'version' => 1.2,\n'licence' =>'enterprise'\n    ];\n}\n\necho App::FRAMEWORK['version']; // 1.2\necho App::FRAMEWORK['licence']; // enterprise\n```", "```php\n// Syntax\n$$foo['bar']['baz']\n// PHP 5.x:\n// Using a multidimensional array value as variable name\n${$foo['bar']['baz']}\n// PHP 7:\n// Accessing a multidimensional array within a variable-variable\n($$foo)['bar']['baz']\n\n// Syntax\n$foo->$bar['baz']\n// PHP 5.x:\n// Using an array value as a property name\n$foo->{$bar['baz']}\n// PHP 7:\n// Accessing an array within a variable-property\n($foo->$bar)['baz']\n\n// Syntax\n$foo->$bar['baz']()\n// PHP 5.x:\n// Using an array value as a method name\n$foo->{$bar['baz']}()\n// PHP 7:\n// Calling a closure within an array in a variable-property\n($foo->$bar)['baz']()\n\n// Syntax\nFoo::$bar['baz']()\n// PHP 5.x:\n// Using an array value as a static method name\nFoo::{$bar['baz']}()\n// PHP 7:\n// Calling a closure within an array in a static variable\n(Foo::$bar)['baz']()\n```", "```php\n// Access a static property on a string class name\n// or object inside an array\n$foo['bar']::$baz;\n// Access a static property on a string class name or object\n// returned by a static method call on a string class name\n// or object\n$foo::bar()::$baz;\n// Call a static method on a string class or object returned by\n// an instance method call\n$foo->bar()::baz();\n```", "```php\n// Call a callable returned by a function\nfoo()();\n// Call a callable returned by an instance method\n$foo->bar()();\n// Call a callable returned by a static method\nFoo::bar()();\n// Call a callable return another callable\n$foo()();\n```", "```php\n// Access an array key\n(expression)['foo'];\n// Access a property\n(expression)->foo;\n// Call a method\n(expression)->foo();\n// Access a static property\n(expression)::$foo;\n// Call a static method\n(expression)::foo();\n// Call a callable\n(expression)();\n// Access a character\n(expression){0};\n```", "```php\n$bytes = random_bytes(5);\n```", "```php\n$int = random_int(1, 10);\n$int = random_int(PHP_INT_MIN, 500);\n$int = random_int(20, PHP_INT_MAX);\n$int = random_int(PHP_INT_MIN, PHP_INT_MAX);\n```", "```php\nclass Customer{\n    public function __construct(){\n        echo '__construct';\n    }\n\n    public function __destruct(){\n        echo '__destruct';\n    }\n\n    public function __toString(){\n        echo '__toString';\n        return '__toString';\n    }\n\n    public function __call($name, $arguments) {\n        echo '__call';\n    }\n}\n\n$customer = new Customer();\n\n$s = serialize($customer); // triggers: __construct, __destruct\n\n$u = unserialize($s); // triggers: __destruct\necho get_class($u); // Customer\n\n$u = unserialize($s, ['allowed_classes'=>false]); // does not trigger anything\necho get_class($u); // __PHP_Incomplete_Class\n```", "```php\nclass ReportPool {\n    public function include(Report $report) {\n//\n    }\n}\n\n$reportPool = new ReportPool();\n$reportPool->include(new Report());\n\nclass Collection extends \\ArrayAccess, \\Countable, \\IteratorAggregate {\n\n    public function forEach(callable $callback) {\n//\n    }\n\n    public function list() {\n//\n    }\n\n    public static function new(array $items) {\n        return new self($items);\n    }\n}\n\nCollection::new(['var1', 'var2'])\n->forEach(function($index, $item){ /* ... */ })\n->list();\n```", "```php\nclass Customer {\n  const class = 'Retail'; // Fatal error\n}\n```", "```php\nuse Library\\Group1\\Group2\\{ ClassA, ClassB, ClassC as Classy };\n```", "```php\n// Current use syntax\nuse Doctrine\\Common\\Collections\\Expr\\Comparison;\nuse Doctrine\\Common\\Collections\\Expr\\Value;\nuse Doctrine\\Common\\Collections\\Expr\\CompositeExpression;\n\n// Group use syntax\nuse Doctrine\\Common\\Collections\\Expr\\{ Comparison, Value, CompositeExpression };\n```", "```php\n// Current use syntax\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Output\\NullOutput;\nuse Symfony\\Component\\Console\\Question\\Question;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion as Choice;\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\n\n// Group use syntax\nuse Symfony\\Component\\Console\\{\n  Helper\\Table,\n  Input\\ArrayInput,\n  Input\\InputInterface,\n  Output\\NullOutput,\n  Output\\OutputInterface,\n  Question\\Question,\n  Question\\ChoiceQuestion as Choice,\n  Question\\ConfirmationQuestion,\n};\n```", "```php\nuse Framework\\Component\\{\nSubComponent\\ClassA,\nfunction OtherComponent\\someFunction,\nconst OtherComponent\\SOME_CONSTANT\n};\n```", "```php\n\\u{code-point}\n```", "```php\nEuro\u20acU+20AC\nJapanese Yen\u00a5U+00A5\nPound sterling\u00a3U+00A3\nAustralian dollar$U+0024\n```", "```php\necho \"the \u20ac currency\";\necho \"the \u00a5 currency\";\necho \"the \u00a3 currency\";\necho \"the $ currency\";\n```", "```php\necho \"the \\u{1F632} face\";\necho \"the \\u{1F609} face\";\necho \"the \\u{1F60F} face\";\n```", "```php\nthe \\u{1F632} face\nthe \\u{1F609} face\nthe \\u{1F60F} face\n```", "```\nthe \ud83d\ude09 face\nthe \ud83d\ude09 face\nthe \ud83d\ude09 face\n```", "```\n// PHP 5\nbool assert ( mixed $assertion [, string $description ] )\n\n// PHP 7\nbool assert ( mixed $assertion [, Throwable $exception ] )\n```", "```\nzend.assertions = 1 // Enable\nzend.assertions = 0 // Disable\nzend.assertions = -1 // Zero-cost\n```", "```\n<?php\n\nlist($color1, $color2, $color3) = ['green', 'yellow', 'blue'];\nvar_dump($color1, $color2, $color3);\n\nlist($colors[], $colors[], $colors[]) = ['green', 'yellow', 'blue'];\nvar_dump($colors);\n```", "```\nstring(5) \"green\"\nstring(6) \"yellow\"\nstring(4) \"blue\"\n\narray(3) { \n[0]=> string(5) \"blue\"\n[1]=> string(6) \"yellow\"\n[2]=> string(4) \"green\"\n}\n```", "```\nstring(5) \"green\"\nstring(6) \"yellow\"\nstring(4) \"blue\"\n\narray(3) { \n[0]=> string(5) \"green\"\n[1]=> string(6) \"yellow\"\n[2]=> string(4) \"blue\"\n}\n```", "```\n// PHP 5\nini_set('session.name', 'THEAPP');\nini_set('session.cookie_lifetime', 3600);\nini_set('session.cookie_httponly', 1);\nsession_start();\n\n// PHP 7\nsession_start([\n'name' =>'THEAPP',\n'cookie_lifetime' => 3600,\n'cookie_httponly' => 1\n]);\n```", "```\nsession_start([\n'name' =>'THEAPP',\n'cookie_lifetime' => 3600,\n'cookie_httponly' => 1,\n'lazy_write' => 1\n]);\n```", "```\n<!-- PHP script tag example -->\n<script language=\"php\">\n// Code here\n</script>\n\n<!-- PHP ASP tag example -->\n<%\n// Code here\n%>\n<%=$varToEcho; %>\n```"]