["```php\nclass Ticket {\n    const SEVERITY_LOW = 'low';\n    const SEVERITY_HIGH = 'high';\n    // ...\n    protected $title;\n    protected $severity;\n    protected $status;\n    protected $conn;\n\n    public function __construct(\\PDO $conn) {\n        $this->conn = $conn;\n    }\n\n    public function setTitle($title) {\n        $this->title = $title;\n    }\n\n    public function setSeverity($severity) {\n        $this->severity = $severity;\n    }\n\n    public function setStatus($status) {\n        $this->status = $status;\n    }\n\n    private function validate() {\n        // Implementation...\n    }\n\n    public function save() {\n        if ($this->validate()) {\n            // Implementation...\n        }\n    }\n\n}\n\n// Client\n$conn = new PDO(/* ... */);\n$ticket = new Ticket($conn);\n$ticket->setTitle('Checkout not working!');\n$ticket->setStatus(Ticket::STATUS_OPEN);\n$ticket->setSeverity(Ticket::SEVERITY_HIGH);\n$ticket->save();\n```", "```php\ninterface KeyValuePersistentMembers {\n    public function toArray();\n}\n\nclass Ticket implements KeyValuePersistentMembers {\n    const STATUS_OPEN = 'open';\n    const SEVERITY_HIGH = 'high';\n    //...\n    protected $title;\n    protected $severity;\n    protected $status;\n\n    public function setTitle($title) {\n        $this->title = $title;\n    }\n\n    public function setSeverity($severity) {\n        $this->severity = $severity;\n    }\n\n    public function setStatus($status) {\n        $this->status = $status;\n    }\n\n    public function toArray() {\n        // Implementation...\n    }\n}\n\nclass EntityManager {\n    protected $conn;\n\n    public function __construct(\\PDO $conn) {\n        $this->conn = $conn;\n    }\n\n    public function save(KeyValuePersistentMembers $entity)\n    {\n        // Implementation...\n    }\n}\n\nclass Validator {\n    public function validate(KeyValuePersistentMembers $entity) {\n        // Implementation...\n    }\n}\n\n// Client\n$conn = new PDO(/* ... */);\n\n$ticket = new Ticket();\n$ticket->setTitle('Payment not working!');\n$ticket->setStatus(Ticket::STATUS_OPEN);\n$ticket->setSeverity(Ticket::SEVERITY_HIGH);\n\n$validator = new Validator();\n\nif ($validator->validate($ticket)) {\n    $entityManager = new EntityManager($conn);\n    $entityManager->save($ticket);\n}\n```", "```php\nclass CsvExporter {\n    public function export($data) {\n        // Implementation...\n    }\n}\n\nclass XmlExporter {\n    public function export($data) {\n        // Implementation...\n    }\n}\n\nclass GenericExporter {\n    public function exportToFormat($data, $format) {\n        if ('csv' === $format) {\n            $exporter = new CsvExporter();\n        } elseif ('xml' === $format) {\n            $exporter = new XmlExporter();\n        } else {\n            throw new \\Exception('Unknown export format!');\n        }\n        return $exporter->export($data);\n    }\n}\n```", "```php\ninterface ExporterFactoryInterface {\n    public function buildForFormat($format);\n}\n\ninterface ExporterInterface {\n    public function export($data);\n}\n\nclass CsvExporter implements ExporterInterface {\n    public function export($data) {\n        // Implementation...\n    }\n}\n\nclass XmlExporter implements ExporterInterface {\n    public function export($data) {\n        // Implementation...\n    }\n}\n\nclass ExporterFactory implements ExporterFactoryInterface {\n    private $factories = array();\n\n    public function addExporterFactory($format, callable $factory) {\n          $this->factories[$format] = $factory;\n    }\n\n    public function buildForFormat($format) {\n        $factory = $this->factories[$format];\n        $exporter = $factory(); // the factory is a callable\n\n        return $exporter;\n    }\n}\n\nclass GenericExporter {\n    private $exporterFactory;\n\n    public function __construct(ExporterFactoryInterface $exporterFactory) {\n        $this->exporterFactory = $exporterFactory;\n    }\n\n    public function exportToFormat($data, $format) {\n        $exporter = $this->exporterFactory->buildForFormat($format);\n        return $exporter->export($data);\n    }\n}\n\n// Client\n$exporterFactory = new ExporterFactory();\n\n$exporterFactory->addExporterFactory(\n'xml',\n    function () {\n        return new XmlExporter();\n    }\n);\n\n$exporterFactory->addExporterFactory(\n'csv',\n    function () {\n        return new CsvExporter();\n    }\n);\n\n$data = array(/* ... some export data ... */);\n$genericExporter = new GenericExporter($exporterFactory);\n$csvEncodedData = $genericExporter->exportToFormat($data, 'csv');\n```", "```php\ninterface User {\n    public function getEmail();\n    public function getName();\n    public function getAge();\n}\n\nclass Employee implements User {\n    public function getEmail() {\n        // Implementation...\n    }\n\n    public function getAge() {\n        // Implementation...\n    }\n}\n```", "```php\nclass UsersCollection implements \\Iterator {\n    // Implementation...\n}\n\ninterface UserList {\n    public function getUsers();\n}\n\nclass Emloyees implements UserList {\n    public function getUsers() {\n        $users = new UsersCollection();\n        //...\n        return $users;\n    }\n}\n\nclass Directors implements UserList {\n    public function getUsers() {\n        $users = array();\n        //...\n        return $users;\n    }\n}\n```", "```php\ninterface LoggerProcessor {\n    public function log(LoggerInterface $logger);\n}\n\nclass XmlLogger implements LoggerInterface {\n    // Implementation...\n}\n\nclass JsonLogger implements LoggerInterface {\n    // Implementation...\n}\n\nclass FileLogger implements LoggerInterface {\n    // Implementation...\n}\n\nclass Processor implements LoggerProcessor {\n    public function log(LoggerInterface $logger) {\n        if ($logger instanceof XmlLogger) {\n            throw new \\Exception('This processor does not work with XmlLogger');\n        } else {\n            // Implementation...\n        }\n    }\n}\n```", "```php\ninterface Appliance {\n    public function powerOn();\n    public function powerOff();\n    public function bake();\n    public function mix();\n    public function wash();\n\n}\n\nclass Oven implements Appliance {\n    public function powerOn() { /* Implement ... */ }\n    public function powerOff() { /* Implement ... */ }\n    public function bake() { /* Implement... */ }\n    public function mix() { /* Nothing to implement ... */ }\n    public function wash() { /* Cannot implement... */ }\n}\n\nclass Mixer implements Appliance {\n    public function powerOn() { /* Implement... */ }\n    public function powerOff() { /* Implement... */ }\n    public function bake() { /* Cannot implement... */ }\n    public function mix() { /* Implement... */ }\n    public function wash() { /* Cannot implement... */ }\n}\n\nclass WashingMachine implements Appliance {\n    public function powerOn() { /* Implement... */ }\n    public function powerOff() { /* Implement... */ }\n    public function bake() { /* Cannot implement... */ }\n    public function mix() { /* Cannot implement... */ }\n    public function wash() { /* Implement... */ }\n}\n```", "```php\nclass Mailer {\n    // Implementation...\n}\n\nclass NotifySubscriber {\n    public function notify($emailTo) {\n        $mailer = new Mailer();\n        $mailer->send('Thank you for...', $emailTo);\n    }\n}\n```", "```php\ninterface MailerInterface {\n    // Implementation...\n}\n\nclass Mailer implements MailerInterface {\n    // Implementation...\n}\n\nclass NotifySubscriber {\n    private $mailer;\n\n    public function __construct(MailerInterface $mailer) {\n        $this->mailer = $mailer;\n    }\n\n    public function notify($emailTo) {\n        $this->mailer->send('Thank you for...', $emailTo);\n    }\n}\n```"]