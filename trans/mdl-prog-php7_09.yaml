- en: Chapter 9. Building the Payment Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。构建支付模块
- en: The payment module provides a basis for further sales functionality in our web
    shop. It will enable us to actually choose a payment method when we reach the
    checkout process of the upcoming sales module. The payment methods can generally
    be of various types. Some can be static, like Check Money and Cash on Delivery,
    while others can be regular credit cards like Visa, MasterCard, American Express,
    Discover, and Switch/Solo. Throughout this chapter we will address both types.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 支付模块为我们的网店提供了进一步销售功能的基础。当我们到达即将推出的销售模块的结账流程时，它将使我们能够实际选择支付方式。支付方式通常可以是各种类型。有些可以是静态的，如支票和货到付款，而其他一些可以是常规信用卡，如Visa、MasterCard、American
    Express、Discover和Switch/Solo。在本章中，我们将讨论这两种类型。
- en: 'In this chapter, we will be looking into the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究以下主题：
- en: Requirements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求
- en: Dependencies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖
- en: Implementation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施
- en: Unit testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Functional testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: Requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求
- en: 'Our application requirements, defined under [Chapter 4](ch04.html "Chapter 4. Requirement
    Specification for a Modular Web Shop App"), *Requirement Specification for Modular
    Web Shop App*, do not really say anything about the type of payment method we
    need to implement. Thus, for the purpose of this chapter, we will develop two
    payment methods: a card payment and a check money payment. In regards to the credit
    card payment, we will not be connecting to a real payment processor, but everything
    else will be done as if we are working with a credit card.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用要求在[第4章](ch04.html "第4章。模块化网店应用的需求规范")下定义，*模块化网店应用的需求规范*，实际上并没有说明我们需要实现的支付方式类型。因此，在本章中，我们将开发两种支付方式：卡支付和支票支付。关于信用卡支付，我们不会连接到真实的支付处理器，但其他所有操作都将按照与信用卡一起工作的方式进行。
- en: 'Ideally, we want this done by an interface, similar to the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望通过接口完成以下操作：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This would then impose the requirement of having the `SalesBundle` module,
    which we still haven''t developed. We will therefore proceed with our payment
    methods using a simple Symfony `controller` class that provides its own way to
    address the following features:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要`SalesBundle`模块，但我们还没有开发。因此，我们将使用一个简单的Symfony`controller`类来进行支付方法，该类提供了自己的方式来处理以下功能：
- en: function `authorize();`
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`authorize();`
- en: function `capture();`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`capture();`
- en: function `cancel();`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数`cancel();`
- en: The `authorize` method is used for cases where we merely want to authorize the
    transaction, without actually executing it. The result is a transaction ID that
    our future `SalesBundle` module can store and reuse for further `capture` and
    `cancel` actions. The `capture` method takes us a step further by first executing
    the authorize action and then capturing the funds. The `cancel` method performs
    the cancelation based on a previously stored authorization token.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`authorize`方法用于仅授权交易而不实际执行交易的情况。结果是一个交易ID，我们未来的`SalesBundle`模块可以存储并重复使用以进行进一步的`capture`和`cancel`操作。`capture`方法首先执行授权操作，然后捕获资金。`cancel`方法基于先前存储的授权令牌执行取消操作。'
- en: We will expose our payment methods through tagged Symfony services. The tagging
    of a service is a nice feature which enables us to view the container and all
    of the services tagged with the same tag, which is something we can use to fetch
    all of the `paymentmethod` services. The tag naming has to follow a certain pattern,
    which we impose on ourselves as application creators. With that in mind, we will
    tag each payment service with a `name`,`payment_method`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过标记的Symfony服务公开我们的支付方式。服务的标记是一个很好的功能，它使我们能够查看容器和所有标记为相同标记的服务，这是我们可以用来获取所有`paymentmethod`服务的东西。标记命名必须遵循一定的模式，这是我们作为应用程序创建者所强加给自己的。考虑到这一点，我们将使用`name`,`payment_method`标记每个支付服务。
- en: Later on, the `SalesBundle` module will fetch and use all of the services tagged
    with `payment_method` and then use them internally to generate a list of available
    payment methods that you can work with.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，`SalesBundle`模块将获取并使用所有标记为`payment_method`的服务，然后在内部使用它们生成可用支付方式的列表。
- en: Dependencies
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖
- en: The module has no firm dependencies on any other module. However, it might have
    been more convenient to build the `SalesBundle` module first and then expose a
    few interfaces that the `payment` module might use.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块不依赖于任何其他模块。但是，首先构建`SalesBundle`模块，然后公开一些`payment`模块可能使用的接口可能更方便。
- en: Implementation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施
- en: 'We start off by creating a new module called `Foggyline\PaymentBundle`. We
    do so with the help of the console by running the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为`Foggyline\PaymentBundle`的新模块。我们通过运行以下命令来完成这个操作：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The command triggers an interactive process which asks us several questions
    along the way, shown as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令触发一个交互式过程，沿途询问我们几个问题，如下所示：
- en: '![Implementation](graphics/B05460_09_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![实施](graphics/B05460_09_01.jpg)'
- en: 'Once done, files `app/AppKernel.php` and `app/config/routing.yml` are modified
    automatically. The `registerBundles` method of an `AppKernel` class has been added
    to the following line under the `$bundles` array:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，文件`app/AppKernel.php`和`app/config/routing.yml`将自动修改。`AppKernel`类的`registerBundles`方法已添加到`$bundles`数组下的以下行：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `routing.yml` has been updated with the following entry:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`routing.yml`已更新为以下条目：'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to avoid colliding with the core application code, we need to change
    the `prefix: /` to `prefix: /payment/`.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '为了避免与核心应用程序代码冲突，我们需要将`prefix: /`更改为`prefix: /payment/`。'
- en: Creating a card entity
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建卡实体
- en: 'Even though we won''t be storing any credit cards in our database as part of
    this chapter, we want to reuse the Symfony auto-generate CRUD feature in order
    for it to provide us with a credit card model and form. Let''s go ahead and create
    a `Card` entity. We will do so by using the console, shown as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在本章中我们不会在数据库中存储任何信用卡，但我们希望重用Symfony自动生成的CRUD功能，以便为我们提供信用卡模型和表单。让我们继续创建一个`Card`实体。我们将使用控制台来实现，如下所示：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The command triggers the interactive generator, providing it with `FoggylinePaymentBundle:Card`
    for an entity shortcut, where we also need to provide entity properties. We want
    to model our `Card` entity with the following fields:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令触发交互式生成器，为实体快捷方式提供`FoggylinePaymentBundle:Card`，我们还需要提供实体属性。我们想要用以下字段对`Card`实体建模：
- en: '`card_type`: string'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`card_type`: string'
- en: '`card_number`: string'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`card_number`: string'
- en: '`expiry_date`: date'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expiry_date`: date'
- en: '`security_code`: string'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security_code`: string'
- en: 'Once done, the generator creates `Entity/Card.php` and `Repository/CardRepository.php`
    within the `src/Foggyline/PaymentBundle/` directory. We can now update the database
    so it pulls in the `Card` entity, shown as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，生成器将在`src/Foggyline/PaymentBundle/`目录中创建`Entity/Card.php`和`Repository/CardRepository.php`。我们现在可以更新数据库，以便引入`Card`实体，如下所示：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With the entity in place, we are ready to generate its CRUD. We will do so
    by using the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有了实体，我们准备生成其CRUD。我们将使用以下命令来实现：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This results in a `src/Foggyline/PaymentBundle/Controller/CardController.php`
    file being created. It also adds an entry to our `app/config/routing.yml file`,
    as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致创建`src/Foggyline/PaymentBundle/Controller/CardController.php`文件。它还会向我们的`app/config/routing.yml`文件添加一个条目，如下所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Again, the view files were created under the `app/Resources/views/card/` directory.
    Since we won't actually be doing any CRUD related actions around cards as such,
    we can go ahead and delete all of the generated view files, as well as the entire
    body of the `CardController` class. At this point, we should have our `Card` entity,
    `CardType` form, and empty `CardController` class.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，视图文件是在`app/Resources/views/card/`目录下创建的。由于我们实际上不会围绕卡片执行任何与CRUD相关的操作，因此我们可以继续删除所有生成的视图文件，以及`CardController`类的整个主体。此时，我们应该有`Card`实体，`CardType`表单和空的`CardController`类。
- en: Creating a card payment service
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建卡支付服务
- en: The card payment service is going to provide the relevant information our future
    sales module will need for its checkout process. Its role is to provide the payment
    method label, code, and processing URLs of an order, such as `authorize`, `capture`,
    and `cancel`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 卡支付服务将为我们未来的销售模块提供其结账流程所需的相关信息。它的作用是提供订单的支付方法标签、代码和处理URL，如`authorize`、`capture`和`cancel`。
- en: 'We will start by defining the following service under the services element
    of the `src/Foggyline/PaymentBundle/Resources/config/services.xml` file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在`src/Foggyline/PaymentBundle/Resources/config/services.xml`文件的services元素下定义以下服务：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This service accepts two arguments: one being `form.factory` and the other
    being `router`. `form.factory` that will be used within service to create a form
    view for the `CardType` form. The tag is a crucial element here, as our `SalesBundle`
    module will be looking for payment methods based on the `payment_method` tag assigned
    to the service.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务接受两个参数：一个是`form.factory`，另一个是`router`。`form.factory`将在服务内部用于为`CardType`表单创建表单视图。标签在这里是一个关键元素，因为我们的`SalesBundle`模块将根据分配给服务的`payment_method`标签来寻找支付方法。
- en: 'We now need to create the actual service class within the `src/Foggyline/PaymentBundle/Service/CardPayment.php`
    file as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在`src/Foggyline/PaymentBundle/Service/CardPayment.php`文件中创建实际的服务类，如下所示：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `getInfo` method is what''s going to provide the necessary information
    to our future `SalesBundle` module in order for it to construct the payment step
    of the checkout process. We are passing on three different types of URLs here:
    `authorize`, `capture`, and `cancel`. These routes do not exist just yet, as we
    will create them soon. The idea is that we will shift the payment actions and
    process to the actual `payment` method. Our future `SalesBundle` module will merely
    be doing an **AJAX POST** to these payment URLs, and will expect either a success
    or error JSON response. A success response should yield some sort of transaction
    ID and an error response should yield a label message to show to the user.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInfo`方法将为我们未来的`SalesBundle`模块提供必要的信息，以便它构建结账流程的支付步骤。我们在这里传递了三种不同类型的URL：`authorize`，`capture`和`cancel`。这些路由目前还不存在，我们将很快创建它们。我们的想法是将支付操作和流程转移到实际的`payment`方法。我们未来的`SalesBundle`模块只会对这些支付URL进行**AJAX
    POST**，并期望获得成功或错误的JSON响应。成功的响应应该产生某种交易ID，错误的响应应该产生一个标签消息显示给用户。'
- en: Creating a card payment controller and routes
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建卡支付控制器和路由
- en: 'We will edit the `src/Foggyline/PaymentBundle/Resources/config/routing.xml`
    file by adding the following route definitions to it:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过向`src/Foggyline/PaymentBundle/Resources/config/routing.xml`文件添加以下路由定义来编辑它：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will then edit the body of the `CardController` class by adding the following
    to it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将通过添加以下内容来编辑`CardController`类的主体：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We should now be able to access URLs like `/app_dev.php/payment/card/authorize`
    and see the output of `authorizeAction`. Implementations given here are dummy
    ones. For the purpose of this chapter ,we are not going to connect to a real payment
    processing API. What is important for us to know is that the `sales` module will,
    during its checkout process, render any possible form view pushed through the
    `['payment']['form']` key of the `getInfo` method of a `payment_method` tagged
    service. Meaning, the checkout process should show a credit card form under card
    payment. The behavior of checking out will be coded such that if payment with
    a form is selected and the **Place Order** button is clicked, that payment form
    will prevent the checkout process from proceeding until the payment form is submitted
    to either authorize or capture the URL defined in the payment itself. We will
    touch upon this some more when we get to the `SalesBundle` module.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够访问像`/app_dev.php/payment/card/authorize`这样的URL，并看到`authorizeAction`的输出。这里给出的实现是虚拟的。在本章中，我们不打算连接到真实的支付处理API。对我们来说重要的是，`sales`模块在结账过程中，会通过`payment_method`标记的服务的`getInfo`方法中的`['payment']['form']`键来渲染任何可能的表单视图。这意味着结账过程应该在信用卡付款下显示一个信用卡表单。结账的行为将被编码，以便如果选择了带有表单的付款，并且点击了**下订单**按钮，那么付款表单将阻止结账过程继续进行，直到付款表单被提交到支付本身定义的授权或捕获URL。当我们到达`SalesBundle`模块时，我们将更详细地讨论这一点。
- en: Creating a check money payment service
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建支票付款服务
- en: Aside from the credit card payment method, let's go ahead and define one more
    static payment, called **Check Money**.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了信用卡付款方式，让我们继续定义另一种静态付款，称为**支票**。
- en: 'We will start by defining the following service under the services element
    of the `src/Foggyline/PaymentBundle/Resources/config/services.xml` file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`src/Foggyline/PaymentBundle/Resources/config/services.xml`文件的services元素下定义以下服务开始：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `service` defined here accepts only one `router` argument. The `tag name`
    is the same as with the card payment service.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里定义的`service`只接受一个`router`参数。标签名称与信用卡付款服务相同。
- en: 'We will then create the `src/Foggyline/PaymentBundle/Service/CheckMoneyPayment.php`
    file, with content as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建`src/Foggyline/PaymentBundle/Service/CheckMoneyPayment.php`文件，内容如下：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Unlike a card payment, the check money payment has no form key defined under
    the `getInfo` method. This is because there are no credit card entries for it
    to define. It is just going to be a static payment method. However, we still need
    to define the `authorize`, `capture`, and `cancel` URLs, even though their implementation
    might be nothing more than just a simple JSON response with success or error keys.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 与信用卡付款不同，支票付款在`getInfo`方法下没有定义表单键。这是因为没有信用卡条目需要定义。它只是一个静态付款方式。但是，我们仍然需要定义`authorize`、`capture`和`cancel`的URL，即使它们的实现可能只是一个简单的JSON响应，带有成功或错误键。
- en: Creating a check money payment controller and routes
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建支票付款控制器和路由
- en: 'Once the check money payment service is in place, we can go ahead and create
    the necessary routes for it. We will start by adding the following route definitions
    to the `src/Foggyline/PaymentBundle/Resources/config/routing.xml` file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦支票付款服务就位，我们就可以继续为其创建必要的路由。我们将首先在`src/Foggyline/PaymentBundle/Resources/config/routing.xml`文件中添加以下路由定义：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will then create the `src/Foggyline/PaymentBundle/Controller/CheckMoneyController.php`
    file, with content as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建`src/Foggyline/PaymentBundle/Controller/CheckMoneyController.php`文件，内容如下：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Similar to a card payment, here we added a simple dummy implementation of the
    `authorize`, `capture`, and `cancel` methods. The method responses will feed into
    the `SalesBundle` module later on. We can easily implement more robust functionality
    from within these methods, but that is out of the scope of this chapter.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与信用卡付款类似，这里我们添加了`authorize`、`capture`和`cancel`方法的简单虚拟实现。这些方法的响应将在后面的`SalesBundle`模块中使用。我们可以很容易地从这些方法中实现更健壮的功能，但这超出了本章的范围。
- en: Unit testing
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: 'Our `FoggylinePaymentBundle` module is really simple. It provides only two
    payment methods: card and check money. It does so via two simple `service` classes.
    Since we are not going after full code coverage tests, we will only cover the
    `CardPayment` and `CheckMoneyPayment` service classes as part of unit testing.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`FoggylinePaymentBundle`模块非常简单。它只提供两种付款方式：信用卡和支票。它通过两个简单的`service`类来实现。由于我们不追求完整的代码覆盖率测试，我们将只在单元测试中覆盖`CardPayment`和`CheckMoneyPayment`服务类。
- en: 'We will start off by adding the following line under the `testsuites` element
    of our `phpunit.xml.dist` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在`phpunit.xml.dist`文件的`testsuites`元素下添加以下行：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With that in place, running the `phpunit` command from the root of our shop
    should pick up any test we have defined under the `src/Foggyline/PaymentBundle/Tests/`
    directory.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，从商店的根目录运行`phpunit`命令应该会捕捉到我们在`src/Foggyline/PaymentBundle/Tests/`目录下定义的任何测试。
- en: 'Now, let''s go ahead and create a test for our `CardPayment` service. We will
    do so by creating a `src/Foggyline/PaymentBundle/Tests/Service/CardPaymentTest.php`
    file, with content as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续为我们的`CardPayment`服务创建一个测试。我们将创建一个`src/Foggyline/PaymentBundle/Tests/Service/CardPaymentTest.php`文件，内容如下：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we are running two simple tests to see if we can instantiate a service,
    either via a container or directly, and simply call its `getInfo` method. The
    method is expected to return a response that contains the `['payment']['form']`
    key.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们运行了两个简单的测试，以查看我们是否可以通过容器或直接实例化一个服务，并简单地调用它的`getInfo`方法。预期该方法将返回一个包含`['payment']['form']`键的响应。
- en: 'Now, let''s go ahead and create a test for our `CheckMoneyPayment` service.
    We will do so by creating a `src/Foggyline/PaymentBundle/Tests/Service/CheckMoneyPaymentTest.php`
    file, with content as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续为我们的`CheckMoneyPayment`服务创建一个测试。我们将创建一个`src/Foggyline/PaymentBundle/Tests/Service/CheckMoneyPaymentTest.php`文件，内容如下：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Similarly, here we also have two simple tests: one fetching the `payment` method
    via a container, and the other directly via a class. The difference being that
    we are not checking for the presence of a form key under the `getInfo` method
    response.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在这里我们也有两个简单的测试：一个通过容器获取`payment`方法，另一个直接通过一个类获取。不同之处在于我们没有检查`getInfo`方法响应中是否存在表单键。
- en: Functional testing
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试
- en: Our module has two controller classes that we want to test for responses. We
    want to make sure that the `authorize`, `capture`, and `cancel` methods of the
    `CardController` and `CheckMoneyController` classes are working.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模块有两个控制器类，我们希望测试它们的响应。我们要确保`CardController`和`CheckMoneyController`类的`authorize`、`capture`和`cancel`方法是有效的。
- en: 'We first create a`src/Foggyline/PaymentBundle/Tests/Controller/CardControllerTest.php`
    file, with content as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个`src/Foggyline/PaymentBundle/Tests/Controller/CardControllerTest.php`文件，内容如下：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We then create `src/Foggyline/PaymentBundle/Tests/Controller/CheckMoneyControllerTest.php`,
    with content as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建了`src/Foggyline/PaymentBundle/Tests/Controller/CheckMoneyControllerTest.php`，内容如下：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Both tests are nearly identical. They contain a test for each of the `authorize`,
    `capture`, and `cancel` methods. Since our methods are implemented with a fixed
    success JSON response, there are no surprises here. However, we can easily play
    around with it by extending our payment methods into something more robust.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个测试几乎是相同的。它们包含了对`authorize`、`capture`和`cancel`方法的测试。由于我们的方法是使用固定的成功JSON响应实现的，所以这里没有什么意外。然而，我们可以通过将我们的付款方法扩展为更强大的东西来轻松地进行调试。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter we have built a payment module with two payment methods.
    The card payment method is made so that it is simulating payment with the credit
    cards involved. For that reason, it includes a form as part of its `getInfo` method.
    The check money payment, on the other hand, is simulating a static payment method
    - one that does not include any form of credit card. Both methods are implemented
    as dummy methods, meaning they are not actually communicating to any external
    payment processor.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个具有两种付款方法的付款模块。信用卡付款方法是为了模拟涉及信用卡的付款。因此，它包括一个表单作为其`getInfo`方法的一部分。另一方面，支票付款是模拟一个静态的付款方法
    - 不包括任何形式的信用卡。这两种方法都是作为虚拟方法实现的，这意味着它们实际上并没有与任何外部付款处理器进行通信。
- en: The idea was to create a minimal structure that showcases how one can develop
    a simple payment module for further customization. We did so by exposing each
    payment method via a tagged service. Using the `payment_method` tag was a matter
    of consensus, since we are the ones building the full application so we get to
    choose how we will implement this in the `sales` module.By using the same tag
    name for each payment method, we effectively created conditions for the future
    `sales` module to pick all of the payments methods and render them under its checkout
    process.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的想法是创建一个最小的结构，展示如何开发一个简单的付款模块以进行进一步的定制。我们通过将每种付款方法公开为一个标记服务来实现这一点。使用`payment_method`标记是一种共识，因为我们是构建完整应用程序的人，所以我们可以选择如何在`sales`模块中实现这一点。通过为每种付款方法使用相同的标记名称，我们有效地为未来的`sales`模块创建了条件，以便选择所有的付款方法并在其结账流程下呈现它们。
- en: Moving forward, in the next chapter we will build a **shipment** module.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将构建一个**shipment**模块。
