- en: Chapter 10. Testing and Debugging Your App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。测试和调试您的应用程序
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Setting up and configuring PHPUnit
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和配置PHPUnit
- en: Writing and running a test case
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写和运行测试用例
- en: Using Mockery to test controllers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mockery测试控制器
- en: Writing acceptance tests using Codeception
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Codeception编写验收测试
- en: Debugging and profiling your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试和分析您的应用程序
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: As web applications grow more complex, we need to make sure that any changes
    or updates we make to the existing code won't negatively affect other parts of
    code. One way to check for this is to create unit tests. Laravel provides very
    helpful ways for us to include unit tests with our app.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Web应用程序变得更加复杂，我们需要确保对现有代码所做的任何更改或更新不会对其他代码产生负面影响。检查这一点的一种方法是创建单元测试。Laravel为我们提供了非常有用的方法来包含单元测试。
- en: Setting up and configuring PHPUnit
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和配置PHPUnit
- en: 'In this recipe, we''ll see how to install and setup the popular PHPUnit testing
    package: PHPUnit.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何安装和设置流行的PHPUnit测试软件包：PHPUnit。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a working installation of Laravel 4\. We'll also need
    the Composer dependency tool installed from [http://getcomposer.org](http://getcomposer.org).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个正常安装的Laravel 4。我们还需要从[http://getcomposer.org](http://getcomposer.org)安装Composer依赖工具。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，请按照给定的步骤进行操作：
- en: 'In the root directory of the application, add the following line to the `composer.json`
    file:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的根目录中，将以下行添加到`composer.json`文件中：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the command line window, navigate to the root directory, and run an update
    on the Composer tool with the following line:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行窗口，导航到根目录，并使用以下行在Composer工具上运行更新：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After it is installed, run a quick test in the command line window with the
    command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，在命令行窗口中使用以下命令快速测试：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our `composer.json` file tells the Composer tool which packages it should install.
    So our first task is to add the `phpunit` package as a requirement. After saving
    that file, we'll run an `update` command and `phpunit` will be added to our `vendor`
    directory.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`composer.json`文件告诉Composer工具应安装哪些软件包。因此，我们的第一个任务是将`phpunit`软件包添加为要求。保存该文件后，我们将运行`update`命令，`phpunit`将被添加到我们的`vendor`目录。
- en: After it's installed, we can run the command to test out `phpunit` and make
    sure it was installed correctly. Laravel comes with an example test case in the
    `app/tests` directory, and it should pass all tests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，我们可以运行命令来测试`phpunit`，并确保它已正确安装。Laravel在`app/tests`目录中附带了一个示例测试用例，并且应该通过所有测试。
- en: Writing and running a test case
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写和运行测试用例
- en: In this recipe, if we already have the PHPUnit installed and working, we can
    write a test case and use PHPUnit to check if it is valid or not.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，如果我们已经安装并正常工作的PHPUnit，我们可以编写一个测试用例，并使用PHPUnit来检查它是否有效。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To run a test case, we'll need a working installation of Laravel. We'll also
    need to have installed PHPUnit from the previous recipe, *Setting up and configuring
    PHPUnit*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行测试用例，我们需要一个正常安装的Laravel。我们还需要从前面的配方*设置和配置PHPUnit*中安装PHPUnit。
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，请按照给定的步骤进行操作：
- en: 'In the `app/tests` directory, create a file named `MyAppTest.php` with the
    following code:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/tests`目录中，创建一个名为`MyAppTest.php`的文件，并添加以下代码：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the tests in the command line window, and we should get failing tests on
    entering the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行窗口中运行测试，我们应该在输入以下命令时得到失败的测试：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In our `routes.php` file, add a new route with the following code:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，添加以下代码的新路由：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run the test again to get a passing unit test
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行测试以获得通过的单元测试
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we run our PHPUnit tests, Laravel will automatically look in the `app/tests`
    directory. We begin by creating a new file in that directory to hold the test
    named as `MyAppTest` and extend `TestCase`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行PHPUnit测试时，Laravel将自动查找`app/tests`目录。我们首先在该目录中创建一个新文件来保存名为`MyAppTest`的测试，并扩展`TestCase`。
- en: For this simple test, we use the `call` method and do a `GET` request on the
    `myapp` route. The first thing we check for is that we receive an `Ok` or a 200
    status code, and then that the content returned is the string `This is my app`.
    At this point, when we run the test, it will fail because we haven't created the
    route yet.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个简单的测试，我们使用`call`方法并在`myapp`路由上执行`GET`请求。我们首先检查的是我们收到了`Ok`或200状态代码，然后返回的内容是字符串`This
    is my app`。在这一点上，当我们运行测试时，它将失败，因为我们还没有创建路由。
- en: Next, we create our `myapp` route and return the string `This is my app`. Finally,
    we re-run the test and we should get a successful result.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建我们的`myapp`路由并返回字符串`This is my app`。最后，我们重新运行测试，应该得到成功的结果。
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Setting up and configuring PHPUnit* recipe
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设置和配置PHPUnit*配方'
- en: Using Mockery to test controllers
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mockery测试控制器
- en: Sometimes, we need to test the code that uses our database. The commonly accepted
    practice is that we shouldn't actually do live queries on the database while running
    a unit test. To get around this, we can use the Mockery package to fake our data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要测试使用我们的数据库的代码。通常接受的做法是在运行单元测试时不应实际在数据库上执行实时查询。为了解决这个问题，我们可以使用Mockery包来伪造我们的数据。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have Laravel installed and working, as well as PHPUnit
    from the *Setting up and configuring PHPUnit* recipe.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要已安装和正常工作的Laravel，以及来自*设置和配置PHPUnit*配方的PHPUnit。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，请按照给定的步骤进行操作：
- en: 'Open up our `composer.json` file, and make sure the following code is included:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的`composer.json`文件，并确保包含以下代码：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open the command line terminal and run the Composer update with the following
    command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行终端，并使用以下命令运行Composer更新：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After the update, in the `app/controllers` directory, create the `ShipsController.php`
    file using the following code:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新后，在`app/controllers`目录中，使用以下代码创建`ShipsController.php`文件：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In `routes.php` file, add a route to this controller using the following command
    line:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，使用以下命令添加一个路由到这个控制器：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `app/tests` directory, create a file named as `SpaceshipTest.php` as
    shown in the following code:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/tests`目录中，使用以下代码创建一个名为`SpaceshipTest.php`的文件：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Back in the command line window, run our tests with the following command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到命令行窗口，使用以下命令运行我们的测试：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'At this point, we will get a failing test that displays the following message:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们将得到一个显示以下消息的失败测试：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since the `Spaceship` class is going to be our model, we''ll use Mockery to
    mock it. Update the `SpaceshipTest` class with the following code:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`Spaceship`类将是我们的模型，我们将使用Mockery来模拟它。使用以下代码更新`SpaceshipTest`类：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, back in the command line window, run the test again and it should pass.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到命令行窗口，再次运行测试，它应该通过。
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We begin by installing the Mockery package using the Composer. This will allow
    us to use it throughout our application. Next, we create a controller with one
    method that will display the name of a single ship. In the controller's constructor,
    we pass in the model we want to use, and in this case it's going to be named `Spaceship`
    and use Laravel's Eloquent ORM.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过Composer安装Mockery软件包。这将允许我们在整个应用程序中使用它。接下来，我们创建一个控制器，其中包含一个将显示单个飞船名称的方法。在控制器的构造函数中，我们传入要使用的模型，这种情况下将命名为`Spaceship`并使用Laravel的Eloquent
    ORM。
- en: In the `showShipName` method, we'll get the first record from the ORM, then
    do a simple return of the record's name. We then need to make a route that points
    to the controller and the showShipName method.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`showShipName`方法中，我们将从ORM中获取第一条记录，然后简单地返回记录的名称。然后，我们需要创建一个指向控制器和`showShipName`方法的路由。
- en: When we first create the test, we simply make a `GET` request and see if it
    sends back an OK response. At this point, since we haven't made out the `Spaceship`
    model yet, it will display an error when we run the test. We could add the needed
    tables to the database and create the model, and the test would pass. However,
    when testing controllers, we don't want to worry about the database and should
    only be testing whether the controller code is working. For that, we can now use
    Mockery.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们首次创建测试时，我们只是发出一个`GET`请求，看看它是否返回一个OK响应。此时，由于我们还没有创建`Spaceship`模型，当我们运行测试时会显示错误。我们可以向数据库添加所需的表并创建模型，测试将通过。但是，在测试控制器时，我们不想担心数据库，应该只测试控制器代码是否有效。为此，我们现在可以使用Mockery。
- en: When we call the `first` method on the `Spaceship` class, it will give us an
    object holding all the returned fields, so we first create a generic object and
    assign it to the `$ship` controller. Then, we create our `mock` object for the
    `Spaceship` class and, when our controller asks for the `first` method, the `mock`
    object will return our previously created generic object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在`Spaceship`类上调用`first`方法时，它将给我们一个包含所有返回字段的对象，因此我们首先创建一个通用对象，并将其分配给`$ship`控制器。然后，我们为`Spaceship`类创建我们的`mock`对象，当我们的控制器请求`first`方法时，`mock`对象将返回我们之前创建的通用对象。
- en: Next, we need to tell Laravel that whenever the `Spaceship` instance is requested,
    it should use our `mock` object instead. And finally, call `GET` on our ship route
    and make sure it returns an OK response.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要告诉Laravel，每当请求`Spaceship`实例时，它应该使用我们的`mock`对象。最后，在我们的船舶路线上调用`GET`，确保它返回一个OK响应。
- en: See also
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Setting up and configuring PHPUnit* recipe
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设置和配置PHPUnit*配方'
- en: Writing acceptance tests using Codeception
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Codeception编写验收测试
- en: Acceptance testing is a useful way to test that your application is outputting
    the correct information to the browser. Using a package such as Codeception, we
    can automate these tests.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 验收测试是测试应用程序是否向浏览器输出正确信息的有用方法。使用Codeception等软件包，我们可以自动化这些测试。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a working copy of Laravel installed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要安装一个Laravel的工作副本。
- en: How to do it...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此配方，请按照给定的步骤进行：
- en: 'Open the `composer.json` file, and add the following line to our `require-dev`
    section:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`composer.json`文件，并将以下行添加到我们的`require-dev`部分：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open the command line window, and update the app with the following command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行窗口，并使用以下命令更新应用程序：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After it is installed, we need to run the `bootstrap` command in the terminal,
    as shown in the following command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们需要在终端中运行`bootstrap`命令，如下所示：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `app/tests/acceptance` directory, create a file named as `AviatorCept.php`
    using the following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/tests/acceptance`目录中，使用以下代码创建一个名为`AviatorCept.php`的文件：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In our main `routes.php` file, update the default route using the following
    code:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的主`routes.php`文件中，使用以下代码更新默认路由：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the command line window and run the acceptance test with the following
    command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行窗口，并使用以下命令运行验收测试：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'At this point, we should see it failing. To make it pass, update the default
    route once more by entering the following code:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们应该看到它失败了。为了使其通过，再次更新默认路由，输入以下代码：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the command line window, run the test again using the following command:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行窗口中，使用以下命令再次运行测试：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This time, it should pass.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次应该通过。
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We start by installing the Codeception package through the Composer. Once it's
    downloaded, we run the `bootstrap` command that will create all the needed files
    and directories. Codeception automatically adds the files and folders to a `tests`
    directory; thus, to make sure they are added into Laravel's test directory, we
    add the `app` directory to the end of the `bootstrap` command.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过Composer安装Codeception软件包。一旦下载完成，我们运行`bootstrap`命令，它将创建所有所需的文件和目录。Codeception会自动将文件和文件夹添加到`tests`目录中；因此，为了确保它们被添加到Laravel的测试目录中，我们在`bootstrap`命令的末尾添加`app`目录。
- en: Next, we create the file to hold our test in the `acceptance` directory. We
    start by creating a new `WebGuy` object, which is Codeceptions class to run acceptance
    tests. The next line is describing what we want to do, which in this case is to
    see all the blueprints. The next line tells the test which page we need to be
    on, which will correspond to our routes. For our purposes, we're just checking
    the default route. Finally, we tell the test what we want to `see` on the page.
    Any text we put here should be displayed somewhere on the page.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`acceptance`目录中创建一个文件来保存我们的测试。我们首先创建一个新的`WebGuy`对象，这是Codeceptions类来运行验收测试。接下来的一行描述了我们想要做的事情，在这种情况下是查看所有的蓝图。下一行告诉测试我们需要在哪个页面，这将对应我们的路由。对于我们的目的，我们只是检查默认路由。最后，我们告诉测试我们想在页面上`看到`什么。我们在这里放的任何文本都应该显示在页面的某个地方。
- en: Our first pass at the default route will display `Way of the future`; thus,
    when the Codeception test is run, it will fail. To run the tests, we use the `run`
    command and make sure we use the `–c` flag and specify the `app` as the path to
    the tests, since we installed the bootstrap files inside the `app/tests` directory.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对默认路由的第一次尝试将显示`Way of the future`；因此，当运行Codeception测试时，它将失败。要运行测试，我们使用`run`命令，并确保我们使用`-c`标志，并指定`app`作为测试路径，因为我们安装了引导文件在`app/tests`目录内。
- en: Then, we can update the route to display the text `All The Blueprints` and re-run
    the test. This time, it will pass.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以更新路由以显示文本`All The Blueprints`并重新运行测试。这次，它会通过。
- en: There's more...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Codeception is a very powerful testing suite with many different options. To
    fully understand everything it can do, go to [http://codeception.com/](http://codeception.com/).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Codeception是一个非常强大的测试套件，有许多不同的选项。要完全了解它的所有功能，请访问[http://codeception.com/](http://codeception.com/)。
- en: Debugging and profiling your app
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和配置您的应用
- en: If we want to know how our application is working behind the scenes, we'll need
    to profile it. This recipe will show how to add in a profiler to our Laravel app.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想知道我们的应用在幕后是如何工作的，我们需要对其进行配置。这个步骤将展示如何向我们的Laravel应用添加一个配置文件。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a working copy of Laravel with a MySQL database
    properly configured.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要一个配置正确的Laravel工作副本和一个MySQL数据库。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: 'Open up the command line window and use the `artisan` command to create our
    migrations as given in the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行窗口，并使用`artisan`命令按照以下代码创建我们的迁移：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the `app/database/migrations` folder, open the file whose name begins with
    the date and ends with `create_spaceships_table.php`, and use this for our database
    table
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/database/migrations`文件夹中，打开以日期开头并以`create_spaceships_table.php`结尾的文件，将其用于我们的数据库表
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `app/database/seeds` folder, create a file named `SpaceshipSeeder.php`
    as shown in the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/database/seeds`文件夹中，创建一个名为`SpaceshipSeeder.php`的文件，如下所示：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the same directory, open the `DatabaseSeeder.php` file and make sure the
    `run()` method looks like the following snippet:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个目录中，打开`DatabaseSeeder.php`文件，并确保`run()`方法看起来像以下代码片段：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Back in the command line window, install the migration and run the seeder with
    the following code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到命令行窗口，使用以下代码安装迁移并运行seeder：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `app/models` directory, create a file named as `Spaceship.php` as shown
    in the following snippet:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/models`目录中，创建一个名为`Spaceship.php`的文件，如下代码所示：
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the `app/controllers` directory, create a file named as `ShipsController.php`
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/controllers`目录中，创建一个名为`ShipsController.php`的文件
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `routes.php` file, register the route as shown in the following command:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，注册路由如下命令所示：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the `app/views` directory, create a view named as `ships.blade.php` as shown
    in the following code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views`目录中，创建一个名为`ships.blade.php`的视图，如下代码所示：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'At this point, if we go to the `http://{your-dev-url}/public/ship`, we''ll
    see the list of ships. Next we need to open the `composer.json` file and add the
    following line in the `require-dev` section:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，如果我们转到`http://{your-dev-url}/public/ship`，我们将看到船只列表。接下来，我们需要打开`composer.json`文件，并在`require-dev`部分中添加以下行：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then in the command line window, update the Composer using the following command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后在命令行窗口中，使用以下命令更新Composer：
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'After everything is downloaded, in the `app/config` folder, open the `app.php`
    file. In the `providers` array, add the following line to the end of the code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有东西都下载完成后，在`app/config`文件夹中，打开`app.php`文件。在`providers`数组中，在代码的末尾添加以下行：
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the same file, in the `aliases` array, add the following line:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个文件中，在`aliases`数组中，添加以下行：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: At the top of this file, make sure `debug` is set to true, then go back to `http://{your-dev-url}/public/ship`
    in your browser. The `profiler` will show up at the bottom of the browser window.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件的顶部，确保`debug`设置为true，然后在浏览器中返回`http://{your-dev-url}/public/ship`。`profiler`将显示在浏览器窗口底部。
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our first step is to create the page we want to profile. We start with using
    the `artisan` command to create a `migrations` file, and then add in the Schema
    builder code to make our spaceships table. When that's done, we can add some information
    to the table using the seeder file.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是创建我们想要配置文件的页面。我们首先使用`artisan`命令创建一个`migrations`文件，然后添加Schema构建器代码来创建我们的spaceships表。完成后，我们可以使用seeder文件向表中添加一些信息。
- en: With that complete, we can now run the migration and the seeder, and our table
    will be created with all the information already populated.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们现在可以运行迁移和seeder，我们的表将被创建，并且所有信息已经被填充。
- en: Next we create a simple model and a controller for our data. In the controller,
    we'll simply get all of the ships and pass the variable to our ships view. We'll
    also add a logging event in the middle of the code. This will allow us to debug
    the code later, if we need to.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为我们的数据创建一个简单的模型和一个控制器。在控制器中，我们将简单地获取所有的船只，并将变量传递给我们的船只视图。我们还将在代码中间添加一个日志事件。这将允许我们以后调试代码，如果需要的话。
- en: Once that's done, we can see the list of ships we created.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以看到我们创建的船只列表。
- en: Then, we need to install the profiler package, which is based on a previous
    version of Laravel's profiler. After updating our Composer file, we then register
    the profiler so our app knows of its existence; we also register the Façade if
    we want to do more with it later.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要安装基于 Laravel 早期版本的性能分析器包。更新了我们的 Composer 文件后，我们注册性能分析器，这样我们的应用程序就知道它的存在；如果以后想要更多地使用它，我们还可以注册
    Façade。
- en: In our config file, if we have `debug` set to `TRUE`, the profiler will display
    on every page we access. We can disable the profiler by simply setting `debug`
    to `FALSE`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配置文件中，如果我们将`debug`设置为`TRUE`，那么性能分析器将在我们访问的每个页面上显示。我们可以通过简单地将`debug`设置为`FALSE`来禁用性能分析器。
- en: There's more...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We could also add timers to our app using the startTimer and endTimer methods
    as shown in the following snippet:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下代码段中显示的 startTimer 和 endTimer 方法向我们的应用程序添加定时器：
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
