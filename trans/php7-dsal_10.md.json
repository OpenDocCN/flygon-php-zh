["```php\nclass MinHeap { \n\n    public $heap; \n\n    public $count; \n\n    public function __construct(int $size) { \n\n        $this->heap = array_fill(0, $size + 1, 0); \n\n        $this->count = 0; \n\n    } \n\n}\n\n```", "```php\npublic function create(array $arr = []) { \n\n    if ($arr) { \n\n        foreach ($arr as $val) { \n\n            $this->insert($val); \n\n        } \n\n    } \n\n} \n\npublic function insert(int $i) { \n\n    if ($this->count == 0) { \n\n        $this->heap[1] = $i; \n\n        $this->count = 2; \n\n    } \n\n    else { \n\n        $this->heap[$this->count++] = $i; \n\n        $this->siftUp(); \n\n    } \n\n} \n\npublic function siftUp() { \n\n    $tmpPos = $this->count - 1; \n\n    $tmp = intval($tmpPos / 2); \n\n    while ($tmpPos > 0 &&  \n\n    $this->heap[$tmp] > $this->heap[$tmpPos]) { \n\n        $this->swap($tmpPos, $tmp); \n\n        $tmpPos = intval($tmpPos / 2); \n\n        $tmp = intval($tmpPos / 2); \n\n    } \n\n} \n\n```", "```php\npublic function swap(int $a, int $b) { \n\n    $tmp = $this->heap[$a]; \n\n    $this->heap[$a] = $this->heap[$b]; \n\n    $this->heap[$b] = $tmp; \n\n}\n\n```", "```php\n    public function extractMin() { \n\n        $min = $this->heap[1]; \n\n        $this->heap[1] = $this->heap[$this->count - 1]; \n\n        $this->heap[--$this->count] = 0; \n\n        $this->siftDown(1); \n\n        return $min; \n\n    }\n\n```", "```php\npublic function siftDown(int $k) { \n\n    $smallest = $k; \n\n    $left = 2 * $k; \n\n    $right = 2 * $k + 1; \n\n    if ($left < $this->count &&  \n\n    $this->heap[$smallest] > $this->heap[$left]) { \n\n        $smallest = $left; \n\n    } \n\n    if ($right < $this->count && $this->heap[$smallest] > $this-  \n\n      >heap[$right]) { \n\n        $smallest = $right; \n\n    }\n\n    if ($smallest != $k) {\n\n        $this->swap($k, $smallest); \n\n        $this->siftDown($smallest); \n\n    }\n\n} \n\n```", "```php\npublic function display() { \n\n    echo implode(\"\\t\", array_slice($this->heap, 1)) . \"\\n\"; \n\n}\n\n```", "```php\n$numbers = [37, 44, 34, 65, 26, 86, 129, 83, 9]; \n\necho \"Initial array \\n\" . implode(\"\\t\", $numbers) . \"\\n\"; \n\n$heap = new MinHeap(count($numbers)); \n\n$heap->create($numbers); \n\necho \"Constructed Heap\\n\"; \n\n$heap->display(); \n\necho \"Min Extract: \" . $heap->extractMin() . \"\\n\"; \n\n$heap->display(); \n\necho \"Min Extract: \" . $heap->extractMin() . \"\\n\"; \n\n$heap->display(); \n\necho \"Min Extract: \" . $heap->extractMin() . \"\\n\"; \n\n$heap->display(); \n\necho \"Min Extract: \" . $heap->extractMin() . \"\\n\"; \n\n$heap->display(); \n\necho \"Min Extract: \" . $heap->extractMin() . \"\\n\"; \n\n$heap->display(); \n\necho \"Min Extract: \" . $heap->extractMin() . \"\\n\"; \n\n$heap->display(); \n\n```", "```php\nInitial array\n\n37      44      34      65      26      86      129     83      9\n\nConstructed Heap\n\n9       26      37      34      44      86      129     83      65\n\nMin Extract: 9\n\n26      34      37      65      44      86      129     83      0\n\nMin Extract: 26\n\n34      44      37      65      83      86      129     0       0\n\nMin Extract: 34\n\n37      44      86      65      83      129     0       0       0\n\nMin Extract: 37\n\n44      65      86      129     83      0       0       0       0\n\nMin Extract: 44\n\n65      83      86      129     0       0       0       0       0\n\nMin Extract: 65\n\n83      129     86      0       0       0       0       0       0\n\n```", "```php\nclass MaxHeap { \n\n    public $heap; \n\n    public $count; \n\n    public function __construct(int $size) { \n\n        $this->heap = array_fill(0, $size, 0); \n\n        $this->count = 0; \n\n    } \n\n    public function create(array $arr = []) { \n\n        if ($arr) { \n\n            foreach ($arr as $val) { \n\n                $this->insert($val); \n\n            } \n\n        } \n\n    } \n\n    public function display() { \n\n        echo implode(\"\\t\", array_slice($this->heap, 0)) . \"\\n\"; \n\n    } \n\n    public function insert(int $i) { \n\n    if ($this->count == 0) { \n\n        $this->heap[0] = $i; \n\n        $this->count = 1; \n\n    } else { \n\n        $this->heap[$this->count++] = $i; \n\n        $this->siftUp(); \n\n    } \n\n    } \n\npublic function siftUp() { \n\n    $tmpPos = $this->count - 1; \n\n    $tmp = intval($tmpPos / 2); \n\n    while ($tmpPos > 0 && $this->heap[$tmp] < $this->heap[$tmpPos]) { \n\n        $this->swap($tmpPos, $tmp); \n\n        $tmpPos = intval($tmpPos / 2); \n\n        $tmp = intval($tmpPos / 2); \n\n    } \n\n} \n\npublic function extractMax() { \n\n    $min = $this->heap[0]; \n\n    $this->heap[0] = $this->heap[$this->count - 1]; \n\n    $this->heap[$this->count - 1] = 0; \n\n    $this->count--; \n\n    $this->siftDown(0); \n\n    return $min; \n\n} \n\npublic function siftDown(int $k) { \n\n    $largest= $k; \n\n    $left = 2 * $k + 1; \n\n    $right = 2 * $k + 2; \n\n    if ($left < $this->count  \n\n      && $this->heap[$largest] < $this->heap[$left]) { \n\n        $largest = $left; \n\n    } \n\n    if ($right < $this->count  \n\n      && $this->heap[$largest] < $this->heap[$right]) { \n\n        $largest = $right; \n\n    } \n\n    if ($largest!= $k) { \n\n        $this->swap($k, $largest); \n\n        $this->siftDown($largest); \n\n    } \n\n} \n\n    public function swap(int $a, int $b) { \n\n      $temp = $this->heap[$a]; \n\n      $this->heap[$a] = $this->heap[$b]; \n\n      $this->heap[$b] = $temp; \n\n    }\n\n}\n\n```", "```php\nclass PriorityQ extends MaxHeap { \n\n    public function __construct(int $size) {  \n\n        parent::__construct($size); \n\n    } \n\n    public function enqueue(int $val) { \n\n        parent::insert($val); \n\n    } \n\n    public function dequeue() { \n\n        return parent::extractMax(); \n\n    }\n\n}\n\n```", "```php\n$numbers = [37, 44, 34, 65, 26, 86, 129, 83, 9]; \n\n$pq = new PriorityQ(count($numbers)); \n\nforeach ($numbers as $number) { \n\n    $pq->enqueue($number); \n\n} \n\necho \"Constructed Heap\\n\"; \n\n$pq->display(); \n\necho \"DeQueued: \" . $pq->dequeue() . \"\\n\"; \n\n$pq->display(); \n\necho \"DeQueued: \" . $pq->dequeue() . \"\\n\"; \n\n$pq->display(); \n\necho \"DeQueued: \" . $pq->dequeue() . \"\\n\"; \n\n$pq->display(); \n\necho \"DeQueued: \" . $pq->dequeue() . \"\\n\"; \n\n$pq->display(); \n\necho \"DeQueued: \" . $pq->dequeue() . \"\\n\"; \n\n$pq->display(); \n\necho \"DeQueued: \" . $pq->dequeue() . \"\\n\"; \n\n$pq->display();\n\n```", "```php\nConstructed Heap\n\n129     86      44      83      26      34      37      65      9\n\nDeQueued: 129\n\n86      83      44      65      26      34      37      9       0\n\nDeQueued: 86\n\n83      65      44      9       26      34      37      0       0\n\nDeQueued: 83\n\n65      37      44      9       26      34      0       0       0\n\nDeQueued: 65\n\n44      37      34      9       26      0       0       0       0\n\nDeQueued: 44\n\n37      26      34      9       0       0       0       0       0\n\nDeQueued: 37\n\n34      26      9       0       0       0       0       0       0\n\n```", "```php\nHeapsort(A as array) \n\n    BuildHeap(A) \n\n    for i = n-1 to 0 \n\n        swap(A[0], A[i]) \n\n        n = n - 1 \n\n        Heapify(A, 0) \n\nBuildHeap(A as array) \n\n    n = elements_in(A) \n\n    for i = floor(n/2) to 0 \n\n        Heapify(A,i) \n\nHeapify(A as array, i as int) \n\n    left = 2i+1 \n\n    right = 2i+2 \n\n    max = i \n\n    if (left <= n) and (A[left] > A[i]) \n\n        max = left \n\n    if (right<=n) and (A[right] > A[max]) \n\n        max = right \n\n    if (max != i) \n\n        swap(A[i], A[max]) \n\n        Heapify(A, max) \n\n```", "```php\nfunction heapSort(array &$a) { \n\n    $length = count($a); \n\n    buildHeap($a); \n\n    $heapSize = $length - 1; \n\n    for ($i = $heapSize; $i >= 0; $i--) { \n\n      $tmp = $a[0]; \n\n      $a[0] = $a[$heapSize]; \n\n      $a[$heapSize] = $tmp; \n\n      $heapSize--; \n\n      heapify($a, 0, $heapSize); \n\n    } \n\n} \n\nfunction buildHeap(array &$a) { \n\n    $length = count($a); \n\n    $heapSize = $length - 1; \n\n    for ($i = ($length / 2); $i >= 0; $i--) { \n\n        heapify($a, $i, $heapSize); \n\n    } \n\n} \n\nfunction heapify(array &$a, int $i, int $heapSize) { \n\n    $largest = $i; \n\n    $l = 2 * $i + 1; \n\n    $r = 2 * $i + 2; \n\n    if ($l <= $heapSize && $a[$l] > $a[$i]) { \n\n        $largest = $l; \n\n    } \n\n    if ($r <= $heapSize && $a[$r] > $a[$largest]) { \n\n        $largest = $r; \n\n    } \n\n    if ($largest != $i) { \n\n      $tmp = $a[$i]; \n\n      $a[$i] = $a[$largest]; \n\n      $a[$largest] = $tmp; \n\n      heapify($a, $largest, $heapSize); \n\n    } \n\n} \n\n```", "```php\n$numbers = [37, 44, 34, 65, 26, 86, 143, 129, 9]; \n\nheapSort($numbers); \n\necho implode(\"\\t\", $numbers); \n\n```", "```php\n9       26      34      37      44      65      86      129     143\n\n```", "```php\n$numbers = [37, 44, 34, 65, 26, 86, 143, 129, 9]; \n\n$heap = new SplMaxHeap; \n\nforeach ($numbers as $number) { \n\n    $heap->insert($number); \n\n} \n\nwhile (!$heap->isEmpty()) { \n\n    echo $heap->extract() . \"\\t\"; \n\n}\n\n```", "```php\n143     129     86      65      44      37      34      26      9\n\n```"]