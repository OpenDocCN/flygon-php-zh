- en: '*Chapter 8*: Learning about PHP 8''s Deprecated or Removed Functionality'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：了解PHP 8的弃用或已删除功能'
- en: This chapter walks you through functionality that has been deprecated or removed
    in **PHP Hypertext Preprocessor 8** (**PHP 8**). This information is extremely
    important for any developer to know. Any code that uses removed functionality
    must be rewritten before an upgrade to PHP 8\. Likewise, any deprecation is a
    clear signal to you that you must rewrite any code that depends upon such functionality,
    or risk problems in the future.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍在**PHP超文本预处理器8**（**PHP 8**）中已弃用或删除的功能。对于任何开发人员来说，这些信息都非常重要。任何使用已删除功能的代码在升级到PHP
    8之前必须进行重写。同样，任何弃用都是向您发出明确信号，您必须重写依赖于此类功能的任何代码，否则将来可能会出现问题。
- en: After you have read the material in this chapter and followed the example application
    code, you can detect and rewrite code that has been deprecated. You can also develop
    workarounds for functionality that has been removed and learn how to refactor
    code that uses removed functionality involving extensions. Another important skill
    you will learn from this chapter is how to improve application security by rewriting
    code depending on removed functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章的材料并跟随示例应用代码后，您可以检测和重写已弃用的代码。您还可以为已删除的功能开发解决方案，并学习如何重构涉及扩展的已删除功能的代码。从本章中您还将学习到另一个重要技能，即通过重写依赖于已删除功能的代码来提高应用程序安全性。
- en: 'Topics covered in this chapter include the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题包括以下内容：
- en: Discovering what has been removed from the core
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现核心中已删除的内容
- en: Examining core deprecations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查核心弃用
- en: Working with removed functionality in PHP 8 extensions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PHP 8扩展中使用已删除的功能
- en: Dealing with deprecated or removed security-related functionality
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理已弃用或已删除的与安全相关的功能
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To examine and run the code examples provided in this chapter, the minimum
    recommended hardware is outlined here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查和运行本章提供的代码示例，下面概述了最低推荐硬件要求：
- en: x86_64-based desktop PC or laptop
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于x86_64的台式PC或笔记本电脑
- en: 1 gigabyte (GB) free disk space
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1千兆字节（GB）的可用磁盘空间
- en: 4 GB of random-access memory (RAM)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 GB的随机存取存储器（RAM）
- en: 500 kilobits per second (Kbps) or faster internet connection
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 500千比特每秒（Kbps）或更快的互联网连接
- en: 'In addition, you will need to install the following software:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您需要安装以下软件：
- en: Docker
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Docker Compose
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose
- en: Please refer to the *Technical requirements* section of [*Chapter 1*](B16992_01_Final_JC_ePub.xhtml#_idTextAnchor013),
    *Introducing New PHP 8 OOP Features*, for more information on Docker and Docker
    Compose installation, as well as how to build the Docker container used to demonstrate
    the code explained in this book. In this book, we refer to the directory in which
    you restored the sample code for the book as `/repo`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Docker和Docker Compose安装的更多信息，请参阅[*第1章*](B16992_01_Final_JC_ePub.xhtml#_idTextAnchor013)的*技术要求*部分，介绍了如何构建用于演示本书中解释的代码的Docker容器。在本书中，我们将恢复了书籍样本代码的目录称为“/repo”。
- en: 'The source code for this chapter is located here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码位于此处：
- en: '[https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices](https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices](https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices)'
- en: We can now begin our discussion by examining the core functionality removed
    in PHP 8.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始讨论在PHP 8中已删除的核心功能。
- en: Discovering what has been removed from the core
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现核心中已删除的内容
- en: In this section, we consider not only functions and classes that have been removed
    from PHP 8, but we will also have a look at usage that has been removed as well.
    We will then have a look at class methods and functions that still exist but no
    longer serve any useful purpose due to other changes in PHP 8\. Knowing which
    functions have been removed is extremely important in order to protect against
    a potential code break following a PHP 8 migration.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们不仅考虑了从PHP 8中删除的函数和类，还将查看已删除的用法。然后，我们将查看仍然存在但由于PHP 8中的其他更改而不再提供任何有用功能的类方法和函数。了解已删除的函数非常重要，以防止在PHP
    8迁移后出现潜在的代码中断。
- en: Let's start by examining functions removed in PHP 8.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从检查在PHP 8中已删除的功能开始。
- en: Examining functions removed in PHP 8
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查在PHP 8中已删除的功能
- en: There are a number of functions in the PHP language that have only been retained
    thus far in order to maintain backward compatibility. However, maintenance of
    such functions drains resources away from core language development. Further,
    for the most part, such functions have been superseded by better programming constructs.
    Accordingly, there has been a slow process whereby such commands have been slowly
    dropped from the language as evidence has mounted that they are no longer being
    used.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: PHP语言中有许多函数仅保留下来以保持向后兼容性。然而，维护这些功能会消耗核心语言开发的资源。此外，大多数情况下，这些功能已被更好的编程构造所取代。因此，随着证据表明这些功能不再被使用，这些命令已经在语言中慢慢被删除。
- en: Tip
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The PHP core team occasionally runs statistical analysis on PHP repositories
    based on GitHub. In this way, they are able to determine the frequency of usage
    of the various commands in the PHP core.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: PHP核心团队偶尔会对基于GitHub的PHP存储库进行统计分析。通过这种方式，他们能够确定PHP核心中各种命令的使用频率。
- en: 'The table shown next summarizes the functions that have been removed in PHP
    8 and what to use in their place:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来显示的表总结了在PHP 8中已删除的功能以及用于替代它们的内容：
- en: '![Table 8.1 – PHP 8 removed functions and suggested replacements'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![表8.1 – PHP 8已删除的功能和建议的替代品'
- en: '](image/Figure_8.1_B16992.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.1_B16992.jpg)'
- en: Table 8.1 – PHP 8 removed functions and suggested replacements
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 表8.1 – PHP 8已删除的功能和建议的替代品
- en: For the remainder of this section, we cover a few of the more important removed
    functions and give you suggestions on how to refactor your code to achieve the
    same results. Let's start by examining `each()`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的其余部分，我们将介绍一些重要的已删除函数，并为您提供建议，以便重构代码以实现相同的结果。让我们首先来看看`each（）`。
- en: Working with each()
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用each（）进行操作
- en: '`each()` was introduced in PHP 4 as a way of walking through an array, producing
    key/value pairs upon each iteration. The syntax and usage of `each()` is extremely
    simple and is oriented toward procedural usage. We''ll show a short code example
    that demonstrates `each()` usage, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`each（）`是在PHP 4中引入的一种遍历数组的方法，每次迭代产生键/值对。`each（）`的语法和用法非常简单，面向过程的。我们将展示一个简短的代码示例，演示`each（）`的用法，如下所示：'
- en: 'In this code example, we first open a connection to a data file containing
    city data from the GeoNames ([https://geonames.org](https://geonames.org)) project,
    as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此代码示例中，我们首先打开到包含来自GeoNames（[https://geonames.org](https://geonames.org)）项目的城市数据的数据文件的连接，如下所示：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We then use the `fgetcsv()` function to pull a row of data into `$line`, and
    pack latitude and longitude information into a `$data` array. Note in the following
    code snippet that we filter out rows of data on cities with a population less
    than `$target` (in this case, less than 10 million):'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用`fgetcsv（）`函数将数据行拉入`$line`，并将纬度和经度信息打包到`$data`数组中。请注意在以下代码片段中，我们过滤掉人口少于`$target`（在本例中少于1000万）的城市的数据行：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We then close the file handle and sort the array by city name. To present the
    output, we use `each()` to walk through the array, producing key/value pairs,
    where the city is the key, and latitude and longitude is the value. The code is
    illustrated in the following snippet:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们关闭文件句柄并按城市名称对数组进行排序。为了呈现输出，我们使用`each（）`遍历数组，生成键/值对，其中城市是键，纬度和经度是值。代码如下所示：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is the output as it appears in PHP 7:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在PHP 7中的输出：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code example won''t work in PHP 8, however, because `each()` has been
    removed. The *best practice* is to move toward an **object-oriented programming**
    (**OOP**) approach: use `ArrayIterator` instead of `each()`. The next code example
    produces exactly the same results as previously but uses object classes instead
    of procedural functions:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，此代码示例在PHP 8中不起作用，因为`each（）`已被移除。*最佳实践*是向**面向对象编程**（**OOP**）方法迈进：使用`ArrayIterator`代替`each（）`。下一个代码示例产生的结果与以前完全相同，但使用对象类而不是过程函数：
- en: 'Instead of using `fopen()`, we instead create an `SplFileObject` instance.
    You''ll also notice in the following code snippet that instead of creating an
    array, we create an `ArrayIterator` instance to hold the final data:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不使用`fopen（）`，而是创建一个`SplFileObject`实例。您还会注意到在以下代码片段中，我们不是创建一个数组，而是创建一个`ArrayIterator`实例来保存最终数据：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We then loop through the data file using the `fgetcsv()` method to retrieve
    a line and `offsetSet()` to append to the iteration, as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用`fgetcsv（）`方法循环遍历数据文件以检索一行，并使用`offsetSet（）`追加到迭代中，如下所示：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we sort by key, rewind to the top, and loop while the iteration still
    has more values. We use `key()` and `current()` methods to retrieve key/value
    pairs, as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们按键排序，倒回到顶部，并在迭代仍具有更多值时循环。我们使用`key（）`和`current（）`方法检索键/值对，如下所示：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code example will actually work in any version of PHP, from PHP 5.1 up
    to and including PHP 8! The output is exactly as shown in the preceding PHP 7
    output and is not duplicated here.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码示例实际上可以在任何版本的PHP中工作，从PHP 5.1到PHP 8都可以！输出与前面的PHP 7输出完全相同，这里不再重复。
- en: Let's now have a look at `create_function()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看`create_function（）`。
- en: Working with create_function()
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用create_function（）进行操作
- en: Prior to PHP 5.3, the only way to assign a function to a variable was to use
    `create_function()`. Starting with PHP 5.3, the preferred approach is to define
    an anonymous function. Anonymous functions, although technically part of the procedural
    programming **application programming interface** (**API**), are actually instances
    of the `Closure` class, and thus also belong to the realm of OOP.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 5.3之前，将函数分配给变量的唯一方法是使用`create_function（）`。从PHP 5.3开始，首选方法是定义匿名函数。匿名函数虽然在技术上是过程式编程**应用程序编程接口**（**API**）的一部分，但实际上是`Closure`类的实例，因此也属于OOP领域。
- en: Tip
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If the functionality you need can be condensed into a single expression, in
    PHP 8 you also have the option of using an **arrow function**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要的功能可以简化为单个表达式，在PHP 8中，您还可以使用**箭头函数**。
- en: When the function defined by `create_function()` was executed, PHP executed
    the `eval()` function internally. The result of this architecture, however, is
    awkward syntax. Anonymous functions are equivalent in performance and more intuitive
    to use.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当由`create_function（）`定义的函数执行时，PHP在内部执行`eval（）`函数。然而，这种架构的结果是笨拙的语法。匿名函数在性能上是等效的，并且更直观。
- en: 'The following example demonstrates `create_function()` usage. The objective
    of this example is to scan a web-server access log and sort the results by **Internet
    Protocol** (**IP**) address:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了`create_function（）`的用法。此示例的目标是扫描Web服务器访问日志，并按**Internet Protocol**（**IP**）地址对结果进行排序：
- en: 'We start by recording the start time in microseconds. Later, we use this value
    to determine performance. Here''s the code you''ll need:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先记录以微秒为单位的开始时间。稍后，我们将使用此值来确定性能。以下是您需要的代码：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, use `create_function()` to define a callback that reorganizes the IP
    address at the start of each line into uniform segments of exactly three digits
    each. We need to do this in order to perform a proper sort (defined later). The
    first argument to `create_function()` is a string the represents the parameters.
    The second argument is the actual code to be executed. The code is illustrated
    in the following snippet:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`create_function（）`定义一个回调函数，将每行开头的IP地址重新组织为确切三位数的统一段。我们需要这样做才能执行正确的排序（稍后定义）。`create_function（）`的第一个参数是表示参数的字符串。第二个参数是要执行的实际代码。代码如下所示：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note the extensive use of strings. This awkward syntax can easily lead to syntax
    or logic errors, as most code editors make no effort to interpret commands embedded
    in a string.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意大量使用字符串。这种笨拙的语法很容易导致语法或逻辑错误，因为大多数代码编辑器不会解释嵌入字符串中的命令。
- en: 'Next, we define a sorting callback to be used with `usort()`, as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个用于`usort()`的排序回调，如下所示：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then pull the contents of the access log into an array using the `file()`
    function. We also move `$sorted` to a file to hold the sorted access log entries.
    The code is illustrated in the following snippet:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用`file()`函数将访问日志的内容提取到一个数组中。我们还将`$sorted`移动到一个文件中，以保存排序后的访问日志条目。代码如下所示：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We are then able to normalize the IP address using `array_walk()` and perform
    a sort using `usort()`, as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们能够使用`array_walk()`规范化IP地址，并使用`usort()`进行排序，如下所示：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, we write the sorted entries to the alternate log file and display
    the time difference between start and stop, as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将排序后的条目写入备用日志文件，并显示开始和结束之间的时间差，如下所示：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We are not showing the completed alternate access log as it''s far too lengthy
    to be included in the book. Instead, here are a dozen lines pulled out from the
    middle of the listing to give you an idea of the output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有展示完整的备用访问日志，因为它太长而无法包含在书中。相反，这里是从列表中间提取出的十几行，以便让您了解输出的情况：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In PHP 8, to accomplish the same task, we define anonymous functions instead
    of using `create_function()`. Here is how the rewritten code example might appear
    in PHP 8:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 8中，为了完成相同的任务，我们定义匿名函数而不是使用`create_function()`。以下是重写的代码示例在PHP 8中的样子：
- en: 'Again, we start by recording the start time, as with the PHP 7 code example
    just described. Here''s the code you''ll need to accomplish this:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们首先记录开始时间，就像刚才描述的PHP 7代码示例一样。以下是您需要完成此操作的代码：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we define a callback that normalizes the IP address into four blocks
    of three digits each. We use exactly the same logic as in the previous example;
    however, this time, we define commands in the form of an anonymous function. This
    takes advantage of code editor helpers, and each line is viewed by the code editor
    as an actual PHP command. The code is illustrated in the following snippet:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个回调函数，将IP地址规范化为四个三位数的块。我们使用与前一个示例完全相同的逻辑；但是，这次我们以匿名函数的形式定义命令。这利用了代码编辑器的帮助，并且每一行都被代码编辑器视为实际的PHP命令。代码如下所示：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Because each line in the anonymous function is treated exactly as if you were
    defining a normal PHP function, you are less likely to have typos or syntax errors.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因为匿名函数中的每一行都被视为定义普通PHP函数一样，所以你不太可能出现拼写错误或语法错误。
- en: 'In a similar manner, we define the sort callback in the form of an arrow function,
    as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以类似的方式，我们以箭头函数的形式定义了排序回调，如下所示：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The remainder of the code example is exactly the same as described earlier and
    is not shown here. Likewise, the output is exactly the same. The performance time
    is also approximately the same.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例的其余部分与前面描述的完全相同，这里不再展示。同样，输出也完全相同。性能时间也大致相同。
- en: We now turn our attention to `money_format()`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将注意力转向`money_format()`。
- en: Working with money_format()
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`money_format()`
- en: The `money_format()` function, first introduced in PHP 4.3, is designed to display
    monetary values using international currencies. If you are maintaining an international
    PHP-based website that has any financial transactions, you might be affected by
    this change after a PHP 8 update.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`money_format()`函数最早是在PHP 4.3中引入的，旨在使用国际货币显示货币值。如果您维护一个有任何财务交易的国际PHP网站，在PHP
    8更新后可能会受到这种变化的影响。'
- en: 'The latter was introduced in PHP 5.3, and should thus not cause your code to
    break. Let''s have a look at a simple example involving `money_format()` and how
    it can be rewritten to work in PHP 8, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 后者是在PHP 5.3中引入的，因此不会导致您的代码出错。让我们看一个涉及`money_format()`的简单示例，以及如何重写以在PHP 8中运行，如下所示：
- en: 'We first assign an amount to a `$amt` variable. We then set the monetary locale
    to `en_US` (**United States**, or **US**) and echo the value using `money_format()`.
    We use the `%n` format code for national formatting, followed by the `%i` code
    for international rendering. In the latter case, the **International Organization
    for Standardization** (**ISO**) currency code (**US Dollars**, or **USD**) is
    displayed. The code is illustrated in the following snippet:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将一个金额分配给`$amt`变量。然后，我们将货币区域设置为`en_US`（美国），并使用`money_format()`输出该值。我们使用`%n`格式代码进行国家格式化，然后是`%i`代码进行国际渲染。在后一种情况下，显示**国际标准化组织**（**ISO**）货币代码（**美元**，或**USD**）。代码如下所示：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We then change the monetary locale to `de_DE` (Germany) and echo the same amount
    in both national and international formats, as follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将货币区域设置为`de_DE`（德国），并以国家和国际格式输出相同的金额，如下所示：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here is the output in PHP 7.1:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在PHP 7.1中的输出：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You might note from the output that `money_format()` did not render the Euro
    symbol, only the ISO code (`EUR`). It did, however, properly format the amounts,
    using a comma for the thousands separator, a period for the decimal separator
    for the `en_US` locale, and the reverse for the `de_DE` locale.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到从输出中，`money_format()`没有呈现欧元符号，只有ISO代码（`EUR`）。但是，它确实正确格式化了金额，使用逗号作为千位分隔符，点作为`en_US`区域的小数分隔符，`de_DE`区域则相反。
- en: 'A *best practice* is to replace any usage of `money_format()` with `NumberFormatter::formatCurrency()`.
    Here is the preceding example, rewritten to work in PHP 8\. Please note that the
    same example will also work in any version of PHP from 5.3 onward! We''ll proceed
    as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*最佳实践*是用`NumberFormatter::formatCurrency()`替换任何使用`money_format()`的用法。以下是前面的示例，在PHP
    8中重写的方式。请注意，相同的示例也将在从5.3版本开始的任何PHP版本中运行！我们将按以下步骤进行：'
- en: 'First, we assign the amount to `$amt` and create a `NumberFormatter` instance.
    In creating this instance, we supply arguments that indicate the locale and type
    of number—in this case, currency. We then use the `formatCurrency()` method to
    produce the national representation of this amount, as illustrated in the following
    code snippet:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将金额分配给`$amt`，并创建一个`NumberFormatter`实例。在创建这个实例时，我们提供了指示区域设置和数字类型（在本例中是货币）的参数。然后我们使用`formatCurrency()`方法来产生这个金额的国家表示，如下面的代码片段所示：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In order to produce the ISO currency code—in this case, `USD`—we need to use
    the `setSymbol()` method. Otherwise, the default is to produce the `$` currency
    symbol instead of the `USD` ISO code. We then use the `format()` method to render
    the output. Note the trailing space after `USD` in the following code snippet.
    This is to prevent the ISO code from running into the number when echoed!:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了生成ISO货币代码——在本例中是`USD`——我们需要使用`setSymbol()`方法。否则，默认情况下会产生`$`货币符号，而不是`USD`的ISO代码。然后我们使用`format()`方法来呈现输出。请注意以下代码片段中`USD`后面的空格。这是为了防止ISO代码在输出时与数字相连！：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We then format the same amount using the `de_DE` locale, as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们使用`de_DE`区域设置格式化相同的金额，如下所示：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here is the output from PHP 8:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是PHP 8的输出：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see from the output, the comma decimal is reversed between the `en_US`
    and `de_DE` locales, as expected. You also see that both the currency symbols,
    as well as the ISO currency codes, are correctly rendered.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看到，在`en_US`和`de_DE`区域设置之间逗号的位置是相反的，这是预期的。您还可以看到货币符号以及ISO货币代码都被正确地呈现出来。
- en: Now that you have an idea of how to replace `money_format()`, let's have a look
    at other programming code usage that has been removed in PHP 8.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何替换`money_format()`，让我们看看PHP 8中已经移除的其他编程代码使用。
- en: Discovering other PHP 8 usage changes
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现其他PHP 8使用变化
- en: There are a number of program code usage changes that you need to be aware of
    in PHP 8\. We'll start with a look at two typecasts that are no longer allowed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 8中有一些程序代码使用变化需要注意。我们将从不再允许的两种类型转换开始。
- en: Removed typecasts
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已移除的类型转换
- en: 'Developers often use forced typecasts in order to ensure the data type of a
    variable is appropriate for a particular usage. As an example, when processing
    a **HyperText Markup Language** (**HTML**) form submission, for the sake of argument,
    let''s say one of the form elements represents a monetary amount. A quick and
    easy way to sanitize this data element is to typecast it to a `float` data type,
    as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员经常使用强制类型转换来确保变量的数据类型适合特定的用途。例如，在处理**超文本标记语言**（**HTML**）表单提交时，假设表单元素中的一个表示货币金额。对这个数据元素进行快速简单的方法是将其类型转换为`float`数据类型，如下所示：
- en: '`$amount = (float) $_POST[''amount''];`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`$amount = (float) $_POST[''amount''];`'
- en: However, rather than typecast to float, some developers prefer to use `real`
    or `double`. Interestingly, all three produce exactly the same result! In PHP
    8, the typecast to `real` has been removed. If your code uses this typecast, a
    *best practice* is to change it to float.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一些开发人员不愿意将类型转换为`float`，而更喜欢使用`real`或`double`。有趣的是，这三种方法产生完全相同的结果！在PHP 8中，类型转换为`real`已被移除。如果您的代码使用了这种类型转换，*最佳实践*是将其更改为`float`。
- en: 'The `unset` typecast has also been removed. The purpose of this typecast is
    to unset a variable. In the following code snippet, the value of `$obj` becomes
    `NULL`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`unset`类型转换也已被移除。这种类型转换的目的是取消变量的设置。在下面的代码片段中，`$obj`的值变为`NULL`：'
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A *best practice* in PHP 8 is to use either of the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 8中的*最佳实践*是使用以下任一种：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Let's now turn our attention to anonymous functions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们把注意力转向匿名函数。
- en: Changes in generating anonymous functions from class methods
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从类方法生成匿名函数的更改
- en: In PHP 7.1, a new `Closure::fromCallable()` method was added that allows you
    to return a class method as a `Closure` instance (for example, an anonymous function).
    `ReflectionMethod::getClosure()` was also introduced and is also able to convert
    a class method into an anonymous function.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7.1中，添加了一个新的`Closure::fromCallable()`方法，允许您将类方法返回为`Closure`实例（例如，匿名函数）。还引入了`ReflectionMethod::getClosure()`，它也能够将类方法转换为匿名函数。
- en: 'To illustrate this, we define a class that returns `Closure` instances able
    to perform hashing using different algorithms. We''ll proceed as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，我们定义了一个类，该类返回能够使用不同算法进行哈希的`Closure`实例。我们将按以下步骤进行：
- en: 'First, we define a class and a public `$class` property, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们定义一个类和一个公共`$class`属性，如下所示：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We then define a method that produces one of three callbacks, each designed
    to produce a different type of hash, as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们定义一个方法，产生三种不同的回调之一，每种回调都设计为产生不同类型的哈希，如下所示：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we define three different methods, each producing a different form of
    hash (not shown): `hashToMd5()`, `hashToSha256()`, and `doNothing()`.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义三种不同的方法，每种方法产生不同形式的哈希（未显示）：`hashToMd5()`，`hashToSha256()`和`doNothing()`。
- en: 'In order to make use of the class, a calling program is devised that first
    includes the class file and creates an instance, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用这个类，首先设计一个调用程序，包括类文件并创建一个实例，如下所示：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The callback is then executed followed by `var_dump()` to view information
    about the `Closure` instance, as illustrated in the following code snippet:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后执行回调，然后使用`var_dump()`查看有关`Closure`实例的信息，如下面的代码片段所示：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To end this example, we create and bind an anonymous class to the `Closure`
    instance, as illustrated in the following code snippet. Theoretically, the output
    display should start with `Anonymous` if the anonymous class were truly bound
    to `$this`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了结束这个示例，我们创建并绑定一个匿名类到`Closure`实例，如下面的代码片段所示。理论上，如果匿名类真正绑定到`$this`，输出显示应该以`Anonymous`开头：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here is the output of this code example running in PHP 8:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在PHP 8中运行此代码示例的输出：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see from the output, `Closure` simply ignored the attempt to bind
    another class and produced the expected output. In addition, a `Warning` message
    was generated, notifying you of the illegal bind attempt.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，`Closure`简单地忽略了绑定另一个类的尝试，并产生了预期的输出。此外，还生成了一个`Warning`消息，通知您非法的绑定尝试。
- en: Let's now have a look at differences in comment handling.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下注释处理的差异。
- en: Differences in comment handling
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释处理的差异
- en: PHP has traditionally supported a number of symbols to denote comments. One
    such symbol is the hash sign (`#`). Due to the introduction of a new language
    construct known as **Attributes**, however, the hash sign immediately followed
    by an opening square bracket (`#[`) is no longer allowed to denote a comment.
    Support for the hash sign not immediately followed by an opening square bracket
    continues to serve as a comment delimiter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: PHP传统上支持一些符号来表示注释。其中一个符号是井号（`#`）。然而，由于引入了一个称为**Attributes**的新语言结构，紧随着一个开放的方括号（`#[`）的井号不再允许表示注释。紧随着一个开放的方括号的井号继续作为注释分隔符。
- en: 'Here is a brief example that works in PHP 7 and earlier, but not in PHP 8:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简短的示例，在PHP 7和更早版本中有效，但在PHP 8中无效：
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When we run this example in PHP 7, the output is as expected, as we can see
    here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在PHP 7中运行这个示例时，输出如预期的那样。
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The same example in PHP 8, however, throws a fatal `Error` message, as illustrated
    here:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在PHP 8中，相同的示例会抛出一个致命的`Error`消息，如下所示：
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note that the example might have accidentally worked in PHP 8 if we had formulated
    the `Attribute` instance correctly. However, since the syntax used was in line
    with the syntax for a comment, the code failed.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果我们正确地构建了`Attribute`实例，示例可能在PHP 8中意外地起作用。然而，由于使用的语法符合注释的语法，代码失败了。
- en: Now that you have an idea about functions and usage that have been removed from
    PHP 8, we now examine core deprecations.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了从PHP 8中移除的函数和用法，我们现在来检查核心弃用。
- en: Examining core deprecations
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查核心弃用
- en: In this section, we examine functions and usage that are deprecated in PHP 8\.
    As the PHP language continues to mature, the PHP community is able to suggest
    to the PHP core development team that certain functions, classes, or even language
    usage should be removed. If two-thirds of the PHP development team vote in favor
    of a proposal, it's adopted for inclusion in a future release of the language.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检查在PHP 8中弃用的函数和用法。随着PHP语言的不断成熟，PHP社区能够建议PHP核心开发团队移除某些函数、类甚至语言用法。如果有三分之二的PHP开发团队投票赞成一个提案，它就会被采纳并包含在未来版本的语言中。
- en: In the case of functionality to be removed, it is not immediately taken out
    of the language. Instead, the function, class, method, or usage generates a `Deprecation`
    notice. This notice serves as a means to notify developers that this function,
    class, method, or usage will be disallowed in an as-yet-unspecified release of
    PHP. Accordingly, you must pay close attention to `Deprecation` notices. Failure
    to do so inevitably causes a code break in the future.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在要移除的功能的情况下，它不会立即从语言中移除。相反，函数、类、方法或用法会生成一个`Deprecation`通知。此通知用作一种通知开发人员的方式，即该函数、类、方法或用法将在尚未指定的PHP版本中被禁止使用。因此，您必须密切关注`Deprecation`通知。不这样做将不可避免地导致未来代码的中断。
- en: Tip
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Starting with PHP 5.3, an official **Request for Comments** (**RFC**) process
    was initiated. The status of any proposal can be viewed at [https://wiki.php.net/rfc](https://wiki.php.net/rfc).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从PHP 5.3开始，官方启动了一个**请求评论**（**RFC**）的过程。任何提案的状态都可以在[https://wiki.php.net/rfc](https://wiki.php.net/rfc)上查看。
- en: Let's start by examining deprecated usage in parameter order.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先检查参数顺序中弃用的用法。
- en: Deprecated usage in parameter order
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数顺序中弃用的用法
- en: The term *usage* refers to how you call functions and class methods in your
    application code. You will discover that in PHP 8, older usages were allowed that
    are now considered bad practices. Understanding how PHP 8 enforces best practices
    in code usage helps you to write better code.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 术语“用法”指的是在应用程序代码中调用函数和类方法的方式。您将发现，在PHP 8中，以前允许的用法现在被认为是不良实践。了解PHP 8如何强制执行代码用法的最佳实践有助于您编写更好的代码。
- en: If you define a function or method with a mixture of mandatory and optional
    parameters, most PHP developers agree that the optional parameters should follow
    the mandatory parameters. In PHP 8, this usage best practice, if not followed,
    will result in a `Deprecation` notice. The rationale behind the decision to deprecate
    this usage is to avoid potential logic errors.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您定义一个带有必填和可选参数混合的函数或方法，大多数PHP开发人员都同意可选参数应该跟在必填参数后面。在PHP 8中，如果不遵循这种用法最佳实践，将会生成一个`Deprecation`通知。弃用此用法的决定背后的理由是避免潜在的逻辑错误。
- en: 'This simple example demonstrates this usage difference. In the following example,
    we define a simple function that accepts three arguments. Note that the `$op`
    optional parameter is sandwiched between two mandatory parameters, `$a` and `$b`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的示例演示了这种用法的差异。在下面的示例中，我们定义了一个接受三个参数的简单函数。请注意，`$op`可选参数夹在两个必填参数`$a`和`$b`之间：
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If we echo the results of the add operation in PHP 7, there is no problem,
    as we can see here:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在PHP 7中回显add操作的结果，就没有问题，就像我们在这里看到的那样：
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In PHP 8, however, there is a `Deprecation` notice, after which the operation
    is allowed to continue. Here is the output running in PHP 8:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在PHP 8中，有一个`Deprecation`通知，之后允许继续操作。以下是在PHP 8中运行的输出：
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: A `Deprecation` notice is a signal to the developer that this usage is considered
    a bad practice. In this case, a best practice would be to modify the function
    signature and list all mandatory parameters first.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`Deprecation`通知是对开发人员的信号，表明这种用法被认为是一种不良实践。在这种情况下，最佳做法是修改函数签名，并首先列出所有必填参数。'
- en: 'Here is the rewritten example, acceptable to all versions of PHP:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是重写的示例，适用于所有版本的PHP：
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It''s important to note that the following usage is still allowed in PHP 8:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，在PHP 8中仍然允许以下用法：
- en: '`function test(object $a = null, $b) {}`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`function test(object $a = null, $b) {}`'
- en: 'However, a better way to write the same function signature and still stay within
    the best practice of listing mandatory parameters first would be to rewrite this
    signature, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，编写相同的函数签名并仍然保持列出必需参数的最佳实践的更好方法是重新编写这个签名，如下所示：
- en: '`function test(?object $a, $b) {}`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`function test(?object $a, $b) {}`'
- en: You now know about features removed from the PHP 8 core. Let's now have a look
    at removed functionality in PHP 8 extensions.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经了解了从PHP 8核心中移除的功能。现在让我们来看一下PHP 8扩展中已移除的功能。
- en: Working with removed functionality in PHP 8 extensions
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP 8扩展中已移除的功能
- en: In this section, we will have a look at removed functionality in PHP 8 extensions.
    This information is extremely important in order to avoid writing code that does
    not work in PHP 8\. Further, an awareness of removed functionality helps you prepare
    existing code for a PHP 8 migration.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看一下PHP 8扩展中已移除的功能。这些信息非常重要，以避免编写在PHP 8中无法运行的代码。此外，了解已移除的功能有助于您为PHP
    8迁移准备现有代码。
- en: 'The following table summarizes removed functionality in extensions:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了扩展中已移除的功能：
- en: '![Table 8.2 – Functions removed from PHP 8 extensions'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![Table 8.2 – Functions removed from PHP 8 extensions'
- en: '](image/Figure_8.2_B16992.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.2_B16992.jpg)'
- en: Table 8.2 – Functions removed from PHP 8 extensions
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Table 8.2 – Functions removed from PHP 8 extensions
- en: The preceding table provides a useful list of removed functions. Use this list
    to check against your existing code prior to a PHP 8 migration.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 上表提供了一个有用的已移除函数列表。在进行PHP 8迁移之前，使用此列表检查您的现有代码。
- en: Let's now have a look at a potentially serious change to the mbstring extension.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下mbstring扩展中可能严重的变化。
- en: Discovering mbstring extension changes
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现mbstring扩展的变化
- en: The `mbstring` extension has had two major changes that have massive potential
    for a backward-compatible code break. The first change is that a significant number
    of convenience aliases have been removed. The second major change is that support
    for the mbstring PHP function overloading capability has been removed. Let's first
    have a look at removed aliases.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`mbstring`扩展已经有了两个重大变化，对向后兼容的代码产生了巨大的潜在影响。第一个变化是移除了大量的便利别名。第二个重大变化是移除了对mbstring
    PHP函数重载功能的支持。让我们首先看一下已移除的别名。'
- en: Handling mbstring extension removed aliases
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理mbstring扩展中已移除的别名
- en: At the request of a number of developers, the PHP development team responsible
    for this extension graciously created a series of aliases, replacing `mb_*()`
    with `mb*()`. The exact rationale for granting this request has been lost in time.
    The burden of supporting such a massive number of aliases, however, wastes a tremendous
    amount of time every time the extension needs to be updated. Accordingly, the
    PHP development team voted to remove these aliases from the mbstring extension
    in PHP 8.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些开发人员的要求下，负责这个扩展的PHP开发团队慷慨地创建了一系列别名，用`mb_*()`替换`mb*()`。然而，对于这个请求的确切理由已经随着时间的流逝而失去了。然而，支持如此大量的别名每次扩展需要更新时都会浪费大量时间。因此，PHP开发团队投票决定在PHP
    8中从mbstring扩展中移除这些别名。
- en: 'The following table provides a list of the aliases removed, as well as which
    function to use in their place:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了已移除的别名列表，以及应使用哪个函数代替它们：
- en: '![Table 8.3 – Removed mbstring aliases'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![Table 8.3 – Removed mbstring aliases'
- en: '](image/Figure_8.3_B16992.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.3_B16992.jpg)'
- en: Table 8.3 – Removed mbstring aliases
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Table 8.3 – Removed mbstring aliases
- en: Let's now have a look at another major change in string handling, pertaining
    to function overloading.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下与函数重载相关的字符串处理的另一个重大变化。
- en: Working with mbstring extension function overloading
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用mbstring扩展函数重载
- en: The function overloading feature allows standard PHP string functions (for example,
    `substr()`) to be silently replaced with their `mbstring` extension equivalences
    (for example, `mb_substr()`) if the `php.ini` directive `mbstring.func_overload`
    is assigned a value. The value assigned to this directive takes the form of a
    bitwise flag. Depending on the setting of this flag, the `mail()`, `str*()`, `substr()`,
    and `split()` functions could be subject to overloading. This feature was deprecated
    in PHP 7.2 and has been removed in PHP 8.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 函数重载功能允许标准的PHP字符串函数（例如`substr()`）在`php.ini`指令`mbstring.func_overload`被赋予一个值时，被其`mbstring`扩展等效函数（例如`mb_substr()`）悄悄地替换。这个指令被赋予的值采用位标志的形式。根据这个标志的设置，`mail()`、`str*()`、`substr()`和`split()`函数可能会受到重载。这个功能在PHP
    7.2中已被弃用，并在PHP 8中被移除。
- en: In addition, three `mbstring` extension constants related to this feature have
    also been removed. The three constants are `MB_OVERLOAD_MAIL`, `MB_OVERLOAD_STRING`,
    and `MB_OVERLOAD_REGEX`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与这个功能相关的三个`mbstring`扩展常量也已被移除。这三个常量分别是`MB_OVERLOAD_MAIL`、`MB_OVERLOAD_STRING`和`MB_OVERLOAD_REGEX`。
- en: Tip
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'For more information on this feature, visit the following link:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此功能的更多信息，请访问以下链接：
- en: '[https://www.php.net/manual/en/mbstring.overload.php](https://www.php.net/manual/en/mbstring.overload.php)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.php.net/manual/en/mbstring.overload.php](https://www.php.net/manual/en/mbstring.overload.php)'
- en: Any code that relies upon this functionality will break. The only way to avoid
    serious application failure is to rewrite the affected code and replace the silently
    substituted PHP core string functions with the intended `mbstring` extension functions.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖于这个功能的任何代码都将中断。避免严重的应用程序故障的唯一方法是重写受影响的代码，并用预期的`mbstring`扩展函数替换悄悄替换的PHP核心字符串函数。
- en: 'In the following example, when `mbstring.func_overload` is enabled, PHP 7 reports
    the same values for both `strlen()` and `mb_strlen()`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，当启用`mbstring.func_overload`时，PHP 7对`strlen()`和`mb_strlen()`报告相同的值：
- en: '[PRE39]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here is the output in PHP 7:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在PHP 7中的输出：
- en: '[PRE40]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As you can see from the preceding output, once the `mbstring.func_overload`
    setting is enabled in the `php.ini` file, the results reported by `strlen()` and
    `mb_strlen()` are identical. This is because calls to `strlen()` are silently
    diverted to `mb_strlen()` instead. In PHP 8, the output (not shown) shows the
    results in both cases because the `mbstring.func_overload` setting is ignored.
    `strlen()` reports a length of `45`, and `mb_strlen()` reports a length of `15`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中可以看出，一旦在 `php.ini` 文件中启用了 `mbstring.func_overload` 设置，`strlen()` 和 `mb_strlen()`
    报告的结果是相同的。这是因为对 `strlen()` 的调用被悄悄地转到了 `mb_strlen()`。在 PHP 8 中，输出（未显示）显示了两种情况下的结果，因为
    `mbstring.func_overload` 设置被忽略了。`strlen()` 报告长度为 `45`，`mb_strlen()` 报告长度为 `15`。
- en: To determine if your code is vulnerable to this backward-compatible break, check
    your `php.ini` file and see if the `mbstring.func_overload` setting has a value
    other than zero.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定您的代码是否容易受到这种向后兼容性的破坏，请检查您的 `php.ini` 文件，并查看 `mbstring.func_overload` 设置是否为零以外的值。
- en: You now have an idea of where to look for potential code breaks pertaining to
    the `mbstring` extension. At this time, we turn our attention to changes in the
    Reflection extension.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道在 `mbstring` 扩展中寻找潜在的代码破坏的地方。现在，我们将注意力转向 Reflection 扩展中的变化。
- en: Reworking code that uses Reflection*::export()
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新设计使用 Reflection*::export() 的代码
- en: In the Reflection extension, a critical difference between PHP 8 and earlier
    versions is that all of the `Reflection*::export()` methods have been removed!
    The primary reason for this change is that simply echoing the Reflection object
    produces exactly the same results as using `export()`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Reflection 扩展中，PHP 8 和早期版本之间的一个关键区别是所有的 `Reflection*::export()` 方法都已经被移除了！这个变化的主要原因是简单地回显
    Reflection 对象会产生与使用 `export()` 完全相同的结果。
- en: If you have any code that currently uses any of the `Reflection*::export()`
    methods, you need to rewrite the code to use the `__toString()` method instead.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码目前使用了任何 `Reflection*::export()` 方法，您需要重写代码以使用 `__toString()` 方法。
- en: Discovering other deprecated PHP 8 extension functionality
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现其他已弃用的 PHP 8 扩展功能
- en: In this section, we review a number of other significant deprecated functionality
    of note in PHP 8 extensions. First, we look at XML-RPC.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将回顾 PHP 8 扩展中其他一些重要的弃用功能。首先，我们来看看 XML-RPC。
- en: Changes to the XML-RPC extension
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XML-RPC 扩展的变化
- en: 'In versions of PHP prior to PHP 8, the XML-RPC extension was part of the core
    and always available. Starting with PHP 8, this extension has quietly been moved
    to the **PHP Extension Community Library** (**PECL**) ([http://pecl.php.net/](http://pecl.php.net/))
    and is no longer included in a standard PHP distribution by default. You can still
    install and use this extension. This change is easily confirmed by scanning the
    list of extensions in the PHP core here: [https://github.com/php/php-src/tree/master/ext](https://github.com/php/php-src/tree/master/ext).'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 8 之前的 PHP 版本中，XML-RPC 扩展是核心的一部分并且始终可用。从 PHP 8 开始，这个扩展已经悄悄地移动到了 **PHP Extension
    Community Library** (**PECL**) ([http://pecl.php.net/](http://pecl.php.net/))，并且不再默认包含在标准的
    PHP 发行版中。您仍然可以安装和使用这个扩展。这个变化可以通过扫描 PHP 核心中的扩展列表来轻松确认：[https://github.com/php/php-src/tree/master/ext](https://github.com/php/php-src/tree/master/ext)。
- en: This will not present a backward-compatible code break. However, if you perform
    a standard PHP 8 installation and then migrate code that contains references to
    XML-RPC, your code might generate a fatal `Error` message and display a message
    that XML-RPC classes and/or functions are not defined. In this situation, simply
    install the XML-RPC extension using `pecl` or any other method normally used to
    install non-core extensions.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会导致向后兼容的代码破坏。但是，如果您执行了标准的 PHP 8 安装，然后迁移包含对 XML-RPC 的引用的代码，您的代码可能会生成一个致命的 `Error`
    消息，并显示一个消息，指出 XML-RPC 类和/或函数未定义。在这种情况下，只需使用 `pecl` 或其他通常用于安装非核心扩展的方法安装 XML-RPC
    扩展。
- en: We now turn our attention to the DOM extension.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将注意力转向 DOM 扩展。
- en: Changes made to the DOM extension
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM 扩展的变化
- en: Since PHP 5, the **Document Object Model** (**DOM**) extension included a number
    of classes in its source code repository that were never implemented. In PHP 8,
    a decision was made to support DOM as a **living standard** (much like with HTML
    5). A living standard is one that does not feature a set series of releases, but
    rather incorporates a continuous set of releases in an effort to keep up with
    web technology.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 自 PHP 5 以来，**文档对象模型** (**DOM**) 扩展在其源代码存储库中包含了一些从未实现的类。在 PHP 8 中，决定支持 DOM 作为一个
    **生活标准**（就像 HTML 5 一样）。生活标准是指没有一系列发布版本，而是连续发布一系列版本，以跟上网络技术的发展。
- en: Tip
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'For more information on the proposed DOM living standard, have a look at this
    reference: [https://dom.spec.whatwg.org/](https://dom.spec.whatwg.org/). For a
    good discussion on moving the PHP DOM extension onto a living standard basis,
    have a look at the *Working with interfaces and traits* section of [*Chapter 9*](B16992_09_Final_JC_ePub.xhtml#_idTextAnchor217),
    *Mastering PHP 8 Best Practices*.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 有关拟议的 DOM 生活标准的更多信息，请参阅此参考资料：[https://dom.spec.whatwg.org/](https://dom.spec.whatwg.org/)。有关将
    PHP DOM 扩展移至生活标准基础的讨论，请参阅 [*第9章*](B16992_09_Final_JC_ePub.xhtml#_idTextAnchor217)
    的 *使用接口和特性* 部分，*掌握 PHP 8 最佳实践*。
- en: 'Mainly due to the move toward a living standard, the following unimplemented
    classes have been removed from the DOM extension as of PHP 8:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 主要是由于向生活标准迈进，以下未实现的类已经从 PHP 8 的 DOM 扩展中移除：
- en: '`DOMNameList`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOMNameList`'
- en: '`DOMImplementationList`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOMImplementationList`'
- en: '`DOMConfiguration`'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOMConfiguration`'
- en: '`DOMError`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOMError`'
- en: '`DOMErrorHandler`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOMErrorHandler`'
- en: '`DOMImplementationSource`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOMImplementationSource`'
- en: '`DOMLocator`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOMLocator`'
- en: '`DOMUserDataHandler`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOMUserDataHandler`'
- en: '`DOMTypeInfo`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOMTypeInfo`'
- en: These classes were never implemented, which means that your source code will
    not suffer any backward-compatibility breaks.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类从未被实现，这意味着您的源代码不会遭受任何向后兼容性的破坏。
- en: Let's now have a look at deprecations in the PHP PostgreSQL extension.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看 PHP PostgreSQL 扩展中的弃用情况。
- en: Changes made to the PostgreSQL extension
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PostgreSQL 扩展的变化
- en: Aside from the deprecated functionality indicated in *Table 8.5* – *Deprecated
    functionality in PHP 8 extensions* (shown later), you need to be aware that a
    couple of dozen aliases have been deprecated in the PHP 8 PostgreSQL extension.
    As with the aliases removed from the `mbstring` extension, the aliases we cover
    in this section are without underscore characters in the latter part of the alias
    name.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 除了*表8.5*中指示的弃用功能之外，您还需要注意PHP 8 PostgreSQL扩展中已弃用了几十个别名。与从`mbstring`扩展中删除的别名一样，我们在本节中涵盖的别名在别名名称的后半部分没有下划线字符。
- en: 'This table summarizes the aliases removed, and which functions to call in their
    place:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 此表总结了已删除的别名，以及用于替代它们的函数：
- en: '![Table 8.4 – Deprecated functionality in PostgreSQL extension'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![Table 8.4 – PostgreSQL扩展中的弃用功能'
- en: '](image/Figure_8.4_B16992.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.4_B16992.jpg)'
- en: Table 8.4 – Deprecated functionality in PostgreSQL extension
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 表8.4 – PostgreSQL扩展中的弃用功能
- en: 'Please note that it''s often difficult to find documentation on deprecations.
    In this case, you can consult the PHP 7.4 to PHP 8 migration guide here: [https://www.php.net/manual/en/migration80.deprecated.php#migration80.deprecated](https://www.php.net/manual/en/migration80.deprecated.php#migration80.deprecated).pgsql.
    Otherwise, you can always look in the C source code docblocks for `@deprecation`
    annotations here: [https://github.com/php/php-src/blob/master/ext/pgsql/pgsql.stub.php](https://github.com/php/php-src/blob/master/ext/pgsql/pgsql.stub.php).
    Here is an example:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，很难找到有关弃用的文档。在这种情况下，您可以在此处查看PHP 7.4到PHP 8迁移指南：[https://www.php.net/manual/en/migration80.deprecated.php#migration80.deprecated](https://www.php.net/manual/en/migration80.deprecated.php#migration80.deprecated)。否则，您可以随时在C源代码docblocks中查找`@deprecation`注释，链接在此处：[https://github.com/php/php-src/blob/master/ext/pgsql/pgsql.stub.php](https://github.com/php/php-src/blob/master/ext/pgsql/pgsql.stub.php)。以下是一个示例：
- en: '[PRE41]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the last part of this section, we summarize deprecated functionality in PHP
    8 extensions.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后部分，我们总结了PHP 8扩展中的弃用功能。
- en: Deprecated functionality in PHP 8 extensions
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PHP 8扩展中的弃用功能
- en: 'Finally, in order to make it easier for you to identify deprecated functionality
    in PHP 8 extensions, we provide a summary. The following table summarizes functionality
    deprecated in PHP 8 extensions:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了让您更容易识别PHP 8扩展中的弃用功能，我们提供了一个总结。以下表总结了PHP 8扩展中弃用的功能：
- en: '![Table 8.5 – Deprecated functionality in PHP 8 extensions'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![Table 8.5 – PHP 8扩展中的弃用功能'
- en: '](image/Figure_8.5_B16992.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.5_B16992.jpg)'
- en: Table 8.5 – Deprecated functionality in PHP 8 extensions
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 表8.5 – PHP 8扩展中的弃用功能
- en: 'We will use the PostgreSQL extension to illustrate deprecated functionality.
    Before running the code example, you need to perform a small bit of setup inside
    the PHP 8 Docker container. Proceed as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用PostgreSQL扩展来说明已弃用的功能。在运行代码示例之前，您需要在PHP 8 Docker容器内执行一些设置。请按照以下步骤进行：
- en: 'Open a command shell into the PHP 8 Docker container. From the command shell
    start PostgreSQL running using this command:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开PHP 8 Docker容器中的命令shell。从命令shell启动PostgreSQL，使用以下命令：
- en: '`/etc/init.d/postgresql start`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/init.d/postgresql start`'
- en: Next, switch to the `su postgres` user.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，切换到`su postgres`用户。
- en: The prompt changes to `bash-4.3$`. From here, type `psql` to enter the PostgreSQL
    interactive terminal.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提示符变为`bash-4.3$`。在这里，键入`psql`进入PostgreSQL交互式终端。
- en: 'Next, from the PostgreSQL interactive terminal, issue the following set of
    commands to create and populate a sample database table:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从PostgreSQL交互式终端，发出以下一组命令来创建和填充一个示例数据库表：
- en: '[PRE42]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Here is the entire chain of commands replayed:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里是整个命令链的重播：
- en: '[PRE43]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We now define a short code example to illustrate the deprecation concepts just
    discussed. Notice in the following code example that we create a **Structured
    Query Language** (**SQL**) statement for a non-existent user:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在定义一个简短的代码示例来说明刚才讨论的弃用概念。请注意，在以下代码示例中，我们为一个不存在的用户创建了一个**结构化查询语言**（**SQL**）语句：
- en: '[PRE44]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Here is the output from the preceding code example:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是前面代码示例的输出：
- en: '[PRE45]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The two main things to notice from the output are the fact that `pg_errormessage()`
    is deprecated and that when no results are returned from a query, instead of a
    `FALSE` Boolean, an empty array is returned instead. Don''t forget to stop the
    PostgreSQL database using this command:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中需要注意的两个主要事项是`pg_errormessage()`已弃用，并且当查询未返回结果时，不再返回`FALSE`布尔值，而是返回一个空数组。不要忘记使用此命令停止PostgreSQL数据库：
- en: '`/etc/init.d/postgresql stop`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`/etc/init.d/postgresql stop`'
- en: Now that you have an idea about deprecated functionality in the various PHP
    8 extensions, we turn our attention to security-related deprecations.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了各种PHP 8扩展中的弃用功能，我们将把注意力转向与安全相关的弃用功能。
- en: Dealing with deprecated or removed security-related functionality
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理已弃用或已删除的与安全相关的功能
- en: Any changes to functionality that affect security are extremely important to
    note. Ignoring these changes can very easily lead not only to breaks in your code
    but can also open your websites to potential attackers. In this section, we cover
    a variety of security-related changes in functionality present in PHP 8\. Let's
    start the discussion by examining filters.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 任何影响安全性的功能更改都非常重要。忽视这些更改不仅很容易导致代码中断，还可能使您的网站面临潜在攻击者的威胁。在本节中，我们将介绍PHP 8中存在的各种与安全相关的功能更改。让我们从检查过滤器开始讨论。
- en: Examining PHP 8 stream-filter changes
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查PHP 8流过滤器更改
- en: PHP `input/output` (**I/O**) operations depend upon a subsystem known as **streams**.
    One of the interesting aspects of this architecture is the ability to append a
    stream filter to any given stream. The filters you can append can be either custom-defined
    stream filters, registered using `stream_filter_register()`, or predefined filters
    included with your PHP installation.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的输入/输出（I/O）操作依赖于一个称为流的子系统。这种架构的一个有趣方面是能够将流过滤器附加到任何给定的流上。您可以附加的过滤器可以是使用`stream_filter_register()`注册的自定义定义的流过滤器，也可以是与您的PHP安装一起包含的预定义过滤器。
- en: An important change of which you need to be aware is that in PHP 8, all `mcrypt.*`
    and `mdecrypt.*` filters have been removed, as well as the `string.strip_tags`
    filter. If you're not sure which filters are included in your PHP installation,
    you can either run `phpinfo()` or, better yet, `stream_get_filters()`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要注意的一个重要变化是，在PHP 8中，所有`mcrypt.*`和`mdecrypt.*`过滤器都已被移除，以及`string.strip_tags`过滤器。如果您不确定您的PHP安装中包含哪些过滤器，您可以运行`phpinfo()`或者更好的是`stream_get_filters()`。
- en: 'Here''s the `stream_get_filters()` output running in the PHP 7 Docker container
    used with this book:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在本书中使用的PHP 7 Docker容器中运行的`stream_get_filters()`输出：
- en: '[PRE46]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Here''s the same command running in the PHP 8 Docker container:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 8 Docker容器中运行相同的命令：
- en: '[PRE47]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: You'll notice from the PHP 8 output that the filters mentioned earlier have
    all been removed. Any code that uses any of the three filters listed will break
    after a PHP 8 migration. We now look at changes made to custom error handling.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到从PHP 8的输出中，之前提到的过滤器都已被移除。任何使用列出的三个过滤器中的任何一个的代码在PHP 8迁移后都将中断。我们现在来看一下自定义错误处理所做的更改。
- en: Dealing with custom error-handling changes
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理自定义错误处理的变化
- en: Starting with PHP 7.0, most errors are now **thrown**. The exception to this
    are situations where the PHP engine is unaware that there is an error condition,
    such as running out of memory, exceeding the time limit, or if a segmentation
    fault occurs. Another exception is when the program deliberately triggers an error
    using the `trigger_error()` function.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 从PHP 7.0开始，大多数错误现在都是**抛出**的。这种情况的例外是PHP引擎不知道存在错误条件的情况，比如内存耗尽，超出时间限制，或者发生分段错误。另一个例外是程序故意使用`trigger_error()`函数触发错误。
- en: Using the `trigger_error()` function to trap errors is not a best practice.
    A *best practice* would be to develop object-oriented code and place it inside
    a `try/catch` construct. However, if you are assigned to manage an application
    that does make use of this practice, there is a change in what gets passed to
    the custom error handler.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`trigger_error()`函数来捕获错误并不是最佳实践。*最佳实践*是开发面向对象的代码并将其放在`try/catch`结构中。然而，如果您被指派管理一个使用这种实践的应用程序，那么传递给自定义错误处理程序的内容发生了变化。
- en: 'In versions prior to PHP 8, the data passed to the custom error handler''s
    fifth argument, `$errorcontext`, was information about arguments passed to the
    function. In PHP 8, this argument is ignored. To illustrate the difference, have
    a look at the simple code example shown next. Here are the steps leading to this:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 8之前的版本中，传递给自定义错误处理程序的第五个参数`$errorcontext`是有关传递给函数的参数的信息。在PHP 8中，此参数被忽略。为了说明区别，让我们看一下下面显示的简单代码示例。以下是导致这一变化的步骤：
- en: 'First, we define a custom error handler, as follows:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们定义一个自定义错误处理程序，如下所示：
- en: '[PRE48]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We then define a function that triggers an error, sets the error handler, and
    invokes the function, as follows:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们定义一个触发错误、设置错误处理程序并调用函数的函数，如下所示：
- en: '[PRE49]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Here''s the output running in PHP 7:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在PHP 7中运行的输出：
- en: '[PRE50]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'As you can see from the preceding output, `$errorcontext` provides information
    about the arguments received by the function. In contrast, have a look at the
    output produced by PHP 8, shown here:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中可以看出，`$errorcontext`提供了有关函数接收到的参数的信息。相比之下，让我们看一下PHP 8产生的输出，如下所示：
- en: '[PRE51]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: As you can see, the output is identical except for a lack of information coming
    into `$errorcontext`. Let's now have a look at generating backtraces.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，输出是相同的，只是没有关于`$errorcontext`的信息。现在让我们来看一下生成回溯。
- en: Dealing with changes to backtraces
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理回溯变化
- en: Amazingly, before PHP 8, it was possible to change function arguments through
    a backtrace. This was possible because traces produced by either `debug_backtrace()`
    or `Exception::getTrace()` provided access to function arguments by reference.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，在PHP 8之前，通过回溯可以更改函数参数。这是因为`debug_backtrace()`或`Exception::getTrace()`产生的跟踪提供了对函数参数的引用访问。
- en: This is an extremely bad practice because it allows your program to continue
    to operate despite potentially being in an error state. Further, when reviewing
    such code, it's not clear how the argument data is being provided. Accordingly,
    in PHP 8, this practice is no longer allowed. Both `debug_backtrace()` or `Exception::getTrace()`
    still operate as before. The only difference is that they no longer pass argument
    variables by reference.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个极其糟糕的做法，因为它允许您的程序继续运行，尽管可能处于错误状态。此外，当审查这样的代码时，不清楚参数数据是如何提供的。因此，在PHP 8中，不再允许这种做法。`debug_backtrace()`或`Exception::getTrace()`仍然像以前一样运行。唯一的区别是它们不再通过引用传递参数变量。
- en: Let's now have a look at changes to `PDO` error handling.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下`PDO`错误处理的变化。
- en: PDO error-handling mode default changed
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PDO错误处理模式默认更改
- en: For many years, novice PHP developers were mystified when their database applications
    using the `PDO` extension failed to produce results. The reason for this problem,
    in many cases, was a simple SQL syntax error that was not reported. This was due
    to the fact that in PHP versions prior to PHP 8, the default `PDO` error mode
    was `PDO::ERRMODE_SILENT`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，初学者PHP开发人员对使用`PDO`扩展的数据库应用程序未能产生结果感到困惑。在许多情况下，这个问题的原因是一个简单的SQL语法错误没有被报告。这是因为在PHP
    8之前的PHP版本中，默认的`PDO`错误模式是`PDO::ERRMODE_SILENT`。
- en: SQL errors are not PHP errors. Accordingly, such errors are not captured by
    normal PHP error handling. Instead, PHP developers had to specifically set the
    `PDO` error mode to either `PDO::ERRMODE_WARNING` or `PDO::ERRMODE_EXCEPTION`.
    PHP developers can now breathe a sigh of relief because, as of PHP 8, the PDO
    default error-handling mode is now `PDO::ERRMODE_EXCEPTION`.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: SQL错误不是PHP错误。因此，这种错误不会被普通的PHP错误处理捕获。相反，PHP开发人员必须明确将`PDO`错误模式设置为`PDO::ERRMODE_WARNING`或`PDO::ERRMODE_EXCEPTION`。PHP开发人员现在可以松一口气了，因为从PHP
    8开始，PDO默认的错误处理模式现在是`PDO::ERRMODE_EXCEPTION`。
- en: 'In the following example, PHP 7 allows the incorrect SQL statement to silently
    fail:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，PHP 7允许不正确的SQL语句静默失败：
- en: '[PRE52]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In PHP 7, the only output is `No Results`, which is both deceptive and unhelpful.
    It might lead the developer to believe there were no results when in fact, the
    problem is a SQL syntax error.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7中，唯一的输出是`No Results`，这既具有欺骗性又没有帮助。这可能会让开发人员相信没有结果，而实际上问题是SQL语法错误。
- en: 'The output running in PHP 8, shown here, is much more helpful:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 8中运行的输出如下所示，非常有帮助：
- en: '[PRE53]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: As you can see from the preceding PHP 8 output, the actual problem is clearly
    identified.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的PHP 8输出中可以看出，实际问题得到了清晰的识别。
- en: TIP
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'For more information about this change, see this RFC:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这一变化的更多信息，请参阅此RFC：
- en: '[https://wiki.php.net/rfc/pdo_default_errmode](https://wiki.php.net/rfc/pdo_default_errmode)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.php.net/rfc/pdo_default_errmode](https://wiki.php.net/rfc/pdo_default_errmode)'
- en: We next examine the `track_errors` `php.ini` directive.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们来看一下`track_errors` `php.ini`指令。
- en: Examining the track_errors php.ini setting
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查track_errors php.ini设置
- en: As of PHP 8, the `track_errors` `php.ini` directive has been removed. This means
    that the `$php_errormsg` automatically created variable is no longer available.
    For the most part, anything that caused an error prior to PHP 8 has now been converted
    to throw an `Error` message instead. However, for versions of PHP prior to PHP
    8, you can still use the `error_get_last()` function instead.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 从PHP 8开始，`track_errors` `php.ini`指令已被移除。这意味着不再可用自动创建的变量`$php_errormsg`。在大多数情况下，PHP
    8之前引起错误的任何内容现在都已转换为抛出`Error`消息。但是，对于PHP 8之前的版本，您仍然可以使用`error_get_last()`函数。
- en: 'In the following simple code example, we first set the `track_errors` directive
    on. We then call `strpos()` without any arguments, deliberately causing an error.
    We then rely on `$php_errormsg` to reveal the true error:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下简单的代码示例中，我们首先设置了`track_errors`指令。然后我们调用`strpos()`而没有任何参数，故意引发错误。然后我们依赖`$php_errormsg`来显示真正的错误：
- en: '[PRE54]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Here is the output in PHP 7:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是PHP 7中的输出：
- en: '[PRE55]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'As you can see from the preceding output, `$php_errormsg` reveals the error,
    and the code block is allowed to continue. In PHP 8, of course, we are not allowed
    to call `strpos()` without any arguments. Here is the output:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的输出中所见，`$php_errormsg`显示了错误，并且代码块可以继续执行。当然，在PHP 8中，我们不允许在没有任何参数的情况下调用`strpos()`。以下是输出：
- en: '[PRE56]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'As you can see, PHP 8 throws an `Error` message. A best practice is to use
    a `try/catch` block and trap any `Error` messages that might be thrown. You can
    also use the `error_get_last()` function. Here is a rewritten example that works
    in both PHP 7 and PHP 8 (output not shown):'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，PHP 8会抛出一个`Error`消息。最佳实践是使用`try/catch`块并捕获可能抛出的任何`Error`消息。您还可以使用`error_get_last()`函数。以下是一个在PHP
    7和PHP 8中都可以工作的重写示例（未显示输出）：
- en: '[PRE57]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: You now have an idea about PHP functionality that has been deprecated or removed
    in PHP 8\. That concludes this chapter.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对PHP 8中已弃用或已删除的功能有了一定的了解。本章到此结束。
- en: Summary
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about deprecated and removed PHP functionality.
    The first section in this chapter dealt with core functionality that has been
    removed. The rationale for the change was explained, and you learned that the
    main reason for removing the functionality described in this chapter is not only
    to move you toward code that follows best practices but to have you use PHP 8
    functionality that is faster and more efficient.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了已弃用和已删除的PHP功能。本章的第一节涉及已删除的核心功能。解释了变更的原因，并且您了解到，本章描述的删除功能的主要原因不仅是让您使用遵循最佳实践的代码，而且是让您使用更快速和更高效的PHP
    8功能。
- en: In the next section, you learned about deprecated functionality. The key theme
    in this section was to highlight how the deprecated functions, classes, and methods
    lead to bad practices and bug-ridden code. You also were given guidance on functionality
    that has been either removed or deprecated in a number of key PHP 8 extensions.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您了解了弃用功能。本节的重点是强调弃用的函数、类和方法如何导致不良实践和错误代码。您还将获得关于在许多关键PHP 8扩展中已删除或弃用的功能的指导。
- en: You learned how to locate and rewrite code that has been deprecated, and how
    to develop workarounds for functionality that has been removed. Another skill
    you learned in this chapter included how to refactor code using removed functionality
    involving extensions, and last, but not least, you learned how to improve application
    security by rewriting code depending on removed functions.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 您学会了如何定位和重写已弃用的代码，以及如何为已删除的功能开发解决方法。本章中您学到的另一个技能包括如何重构使用已删除功能的代码，涉及扩展，最后但同样重要的是，您学会了如何通过重写依赖已删除函数的代码来提高应用程序安全性。
- en: In the next chapter, you will learn how to gain greater efficiency and performance
    in your PHP 8 code by mastering best practices.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何通过掌握最佳实践来提高PHP 8代码的效率和性能。
