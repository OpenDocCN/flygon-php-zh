- en: Chapter 1. Functions as First Class Citizens in PHP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。PHP中的函数作为一等公民
- en: Functional programming, as its name suggests, revolves around functions. In
    order to apply functional techniques effectively, a language has to support functions
    as the first class citizen, or also **first functions**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程，顾名思义，围绕函数展开。为了有效地应用函数式技术，语言必须支持函数作为一等公民，也称为**第一类函数**。
- en: This means that functions are considered like any other value. They can be created
    and passed around as parameters to other functions and they can be used as return
    value. Luckily, PHP is such a language. This chapter will demonstrate the various
    way functions can be created and used.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着函数被视为任何其他值。它们可以被创建并作为参数传递给其他函数，并且它们可以作为返回值使用。幸运的是，PHP就是这样一种语言。本章将演示函数可以被创建和使用的各种方式。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: Declaring function and methods
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明函数和方法
- en: Scalar type hints
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量类型提示
- en: Anonymous functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名函数
- en: Closures
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闭包
- en: Using objects as functions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将对象用作函数
- en: Higher Order Functions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高阶函数
- en: The callable type hint
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可调用类型提示
- en: Before we begin
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始之前
- en: As the first release of PHP 7 happened in December 2015, it will be the version
    that will be used for the examples in this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PHP 7的首次发布发生在2015年12月，因此本书中的示例将使用该版本。
- en: However, since it's a fairly new version, each time we use a new feature, it
    will be clearly outlined and explained. Also, since not everyone is able to migrate
    right away, changes needed to run the code on PHP 5 will be proposed whenever
    possible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于这是一个相当新的版本，每次使用新功能时，都将清楚地概述和解释。此外，由于并非每个人都能立即迁移，我们将尽可能提出在PHP 5上运行代码所需的更改。
- en: The latest version available at the time of writing is 7.0.9\. All code and
    examples are validated using this version.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 撰写时可用的最新版本是7.0.9。所有代码和示例都经过了这个版本的验证。
- en: Coding standards
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码标准
- en: 'Examples in this book will respect **PSR**-**2** (**PHP Standard Recommendation2**)
    and its parent recommendation, PSR-1, for their coding style, as should most of
    the libraries presented. For people not familiar with them, here are the most
    important parts:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例将遵守**PSR**-**2**（**PHP标准推荐2**）及其父推荐标准PSR-1的编码风格，大多数所介绍的库也应该如此。对于不熟悉它们的人，以下是最重要的部分：
- en: Classes are in a namespace and use CamelCase with the first letter capitalized
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类位于命名空间中，使用首字母大写的驼峰命名法
- en: Methods use CamelCase without the first letter capitalized
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法使用驼峰命名法，首字母不大写
- en: Constants are written with all letters in capital
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量使用全大写字母书写
- en: Braces for classes and methods are on a new line, other braces are on the same
    line
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和方法的大括号在新行上，其他大括号在同一行上
- en: 'Also, although not being defined in PSR-2, the following choices were made:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，尽管没有在PSR-2中定义，但做出了以下选择：
- en: Function names are in snake_case
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数名称使用蛇形命名法
- en: Parameters, variables, and property names are in snake_case
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数、变量和属性名称使用蛇形命名法
- en: Properties are private whenever possible
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性尽可能是私有的
- en: Autoloading and Composer
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动加载和Composer
- en: The examples will also assume the presence of a PSR-4 compatible autoloader.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 示例还将假定存在一个符合PSR-4的自动加载器。
- en: As we will use Composer dependency manager to install the presented libraries,
    we recommend using it as the autoloader.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用Composer依赖管理器来安装所介绍的库，我们建议将其用作自动加载器。
- en: Functions and methods
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数和方法
- en: Although this book is not designed for PHP beginners, we will quickly cover
    some basis in order to be sure we share a common vocabulary.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书不是为PHP初学者设计的，但我们将快速介绍一些基础知识，以确保我们共享一个共同的词汇。
- en: 'In PHP, you usually declare a function using the `function` keyword:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，通常使用`function`关键字声明函数：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A function declared inside a class is called a **method**. It differs from
    a traditional function as it can access the object properties, have visibility
    modifiers, and can be declared static. As we will try to write code as pure as
    possible, our properties will be of `private` type:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在类内声明的函数称为**方法**。它与传统函数不同，因为它可以访问对象属性，具有可见性修饰符，并且可以声明为静态的。由于我们将尽量编写尽可能纯净的代码，我们的属性将是`private`类型：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: PHP 7 scalar type hints
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP 7标量类型提示
- en: You were already able to declare type hints for classes, callables, and arrays
    in PHP 5\. PHP 7 introduces the idea of scalar type hints. This means you can
    now say that you want a `string`, an `int`, a `float`, or a `bool`data type, both
    for parameters and return types. The syntax is roughly similar to what can be
    found in other languages.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 5中，您已经可以为类、可调用函数和数组声明类型提示。PHP 7引入了标量类型提示的概念。这意味着您现在可以声明您想要`string`、`int`、`float`或`bool`数据类型，无论是参数还是返回类型。语法与其他语言中的语法大致相似。
- en: 'Contrary to class type hints, you can also choose between two modes: the **strict**
    mode and the**non-strict** mode, the latter being the default. This means PHP
    will try to cast the values to the desired type. The casts will happen silently
    if there is no loss of information, otherwise, a warning will be raised. This
    can lead to the same strange results you can have with string to numbers conversion
    or true and false values.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与类类型提示相反，您还可以在**严格**模式和**非严格**模式之间进行选择，后者是默认模式。这意味着PHP将尝试将值转换为所需的类型。如果没有信息丢失，转换将会悄无声息地发生，否则将引发警告。这可能导致与字符串到数字转换或true和false值相同的奇怪结果。
- en: 'Here are some examples of such casts:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些此类强制转换的示例：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you want to avoid issues with casting, you can opt-in for the strict mode.
    This way PHP will raise an error each time the values do not exactly conform to
    the desired type. In order to do so, the `declare(strict_types=1)` directive must
    be added to the very first line of your file. Nothing must precede it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想避免强制转换的问题，可以选择启用严格模式。这样，PHP将在值不完全符合所需类型时引发错误。为此，必须在文件的第一行之前添加`declare(strict_types=1)`指令。它之前不能有任何内容。
- en: The only cast that PHP allows itself is from `int` to `float` by adding `.0`
    as there is absolutely no risk of data loss.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: PHP允许的唯一转换是从`int`到`float`，通过添加`.0`来实现，因为绝对不会有数据丢失的风险。
- en: 'Here are the same examples as before, but with strict mode activated:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与之前相同的示例，但启用了严格模式：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Although not demonstrated here, the same casting rules apply for return types.
    Depending on the mode, PHP will happily perform the same casting and display the
    same warning and errors as for parameters hints.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管此处未进行演示，但返回类型也适用相同的转换规则。根据模式的不同，PHP将愉快地执行相同的转换，并显示与参数提示相同的警告和错误。
- en: Also, another subtlety is that the mode that is applied is the one being declared
    at the top of the file where the function call is made. This means that when you
    call a function that was declared in another file, the mode this file was in is
    not taken into account. Only the directive at the top of the current file matters.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个微妙之处是应用的模式是在进行函数调用的文件顶部声明的模式。这意味着当您调用在另一个文件中声明的函数时，不会考虑该文件的模式。只有当前文件顶部的指令才重要。
- en: Concerning errors raised about types, we will see in [Chapter 3](ch03.html "Chapter 3. 
    Functional Basis in PHP"), *Functional basis in PHP* how exception and error handling
    was changed in PHP 7 and how you can use it to catch those.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 关于类型引发的错误，我们将在[第3章](ch03.html "第3章。PHP中的函数基础")中看到，*PHP中的函数基础*，PHP 7中的异常和错误处理发生了变化，您可以使用它来捕获这些错误。
- en: From now on, every time it makes sense, our examples will use scalar type hints
    to make the code more robust and readable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，只要有意义，我们的示例将使用标量类型提示，以使代码更健壮和可读。
- en: Imposing types can be seen as cumbersome and will probably lead to a few irritations
    when you start using them, but in the long run, I can assure you that it will
    save you from some nasty bugs. All checks that can be done by the interpreter
    are something you don't need to test yourself.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 强制类型可以被视为繁琐，并且在开始使用时可能会导致一些恼人的问题，但从长远来看，我可以向您保证，它将使您免受一些讨厌的错误。解释器可以执行的所有检查都是您无需自行测试的内容。
- en: It also makes your function easier to understand and reason with. The person
    looking at your code won't have to ask themselves what could a value be, they
    know with certitude what kind of data they have to pass as parameters and what
    they will get back. The result is that the cognitive burden is lessened and you
    can use your time thinking of solving issues instead of keeping in mind menial
    details about your code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这也使得你的函数更容易理解和推理。查看你的代码的人不必问自己一个值可能是什么，他们确切地知道他们必须传递什么样的数据作为参数，以及他们将得到什么。结果是认知负担减轻了，你可以利用时间思考解决问题，而不是记住代码的琐碎细节。
- en: Anonymous functions
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匿名函数
- en: You were probably well aware of the syntax we saw to declare functions. What
    you may not know is that a function does not necessarily need to have a name.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经很熟悉我们看到的声明函数的语法。您可能不知道的是，函数不一定需要有名称。
- en: Anonymous functions can be assigned to variables, used as callbacks and have
    parameters.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名函数可以分配给变量，用作回调并具有参数。
- en: In the PHP documentation, the term anonymous function is used interchangeably
    with the term *closure*. As we will see in the following code snippet, an anonymous
    function is even an instance of the `Closure` class, which we will discuss. According
    to the academic literature both concepts, although similar, are a bit different.
    The first usage of the term closure was in 1964 by Peter Landin in *The mechanical
    evaluation of expressions*. In the paper, a closure is described as having an
    environment part and a control part. The functions we will declare in this section
    won't have any environment, so they won't be, strictly speaking, closures.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP文档中，匿名函数一词与*闭包*一词可以互换使用。正如我们将在下面的代码片段中看到的，匿名函数甚至是`Closure`类的一个实例，我们将讨论这一点。根据学术文献，尽管这两个概念相似，但有些不同。闭包一词的第一个用法是在1964年Peter
    Landin的《表达式的机械评估》中。在这篇论文中，闭包被描述为具有环境部分和控制部分。我们将在本节中声明的函数不会有任何环境，因此严格来说，它们不是闭包。
- en: 'In order to avoid confusion when reading other work, this book will use the
    term *anonymous function* to describe a function without a name, as presented
    in this section:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免阅读其他作品时产生混淆，本书将使用*匿名函数*一词来描述没有名称的函数，就像本节中所介绍的那样：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous code snippet declared an anonymous function and assigned it to
    a variable so that we can reuse it later either as a parameter to another function
    or call it directly:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段声明了一个匿名函数，并将其分配给一个变量，以便我们稍后可以将其重用为另一个函数的参数或直接调用它：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also declare an anonymous function directly as a parameter if you don''t
    plan to reuse it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不打算重复使用，也可以直接将匿名函数声明为参数：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or you can return a function as you would return any kind of value:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以像返回任何其他类型的值一样返回一个函数：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Closures
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 闭包
- en: As we saw earlier, the academicals description of a closure is a function that
    has access to some outside environment. Throughout this book, we will keep to
    this semantics, despite PHP calling both anonymous functions and closure using
    the later term.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，闭包的学术描述是指具有对外部环境的访问权限的函数。在本书中，尽管PHP使用后一种术语来称呼匿名函数和闭包，但我们将坚持这种语义。
- en: 'You may be familiar with JavaScript closures, where you can simply use any
    variable from the outside scope without doing anything particular. In PHP, you
    need to use the `use` keyword to import an existing variable into the scope of
    an anonymous function:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能熟悉JavaScript的闭包，其中您可以简单地使用外部范围的任何变量而无需进行任何特殊操作。在PHP中，您需要使用`use`关键字将现有变量导入匿名函数的范围内：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'PHP closures use an early-binding approach. This means that the variable inside
    the closure will have the value that the variable had at the closure creation.
    If you change the variable afterward, the change will not be seen from inside
    the closure:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: PHP闭包使用早期绑定方法。这意味着闭包内的变量将具有闭包创建时变量的值。如果之后更改变量，则闭包内将看不到更改：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You could pass the variable by reference so that changes to the variable are
    propagated inside the closure, but since this is a book on functional programming
    where we try to use immutable data structures and avoid having state, figuring
    how to do it is left as an exercise to the reader.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过引用传递变量，以便变量的更改在闭包内部传播，但由于这是一本关于函数式编程的书，在这本书中我们尝试使用不可变数据结构并避免状态，因此如何做到这一点留给读者作为练习。
- en: Be aware that when you pass objects to a closure, any modification done to properties
    in the object will be accessible inside the closure. PHP does not make a copy
    of objects when passed to the closure.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你将对象传递给闭包时，对对象属性的任何修改都将在闭包内部可访问。PHP在将对象传递给闭包时不会复制对象。
- en: Closures inside of classes
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类内的闭包
- en: 'If you declare any anonymous function inside a class, it will automatically
    get access to the instance reference via the usual `$this` variable. To stay coherent
    about the vocabulary, the function will automatically become a closure:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在类内声明任何匿名函数，它将自动通过通常的`$this`变量获得实例引用。为了保持词汇的一致性，该函数将自动变成一个闭包：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you want to avoid this automatic binding, you can declare a static anonymous
    function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想避免这种自动绑定，你可以声明一个静态匿名函数：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using objects as functions
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对象作为函数
- en: 'Sometimes, you might want to split your function into smaller parts, but without
    those parts being accessible to everyone. When this is the case, you can leverage
    the `__invoke` magic method on any object that let you use an instance as a function
    and hide that helper function as private methods inside your object:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能希望将函数分成更小的部分，但这些部分不对所有人都可见。在这种情况下，你可以利用任何对象上的`__invoke`魔术方法，让你将实例作为函数使用，并将那个辅助函数隐藏为对象内部的私有方法：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `__invoke` method will be called with any parameters you pass to the instance.
    If you want, you can also add a constructor to your object and use any methods
    and properties that it contains. Just try to keep it as pure as possible, because
    as soon as you use mutable properties, your function will be harder to understand.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`__invoke`方法将使用你传递给实例的任何参数进行调用。如果你愿意，你也可以为你的对象添加一个构造函数，并使用它包含的任何方法和属性。只需尽量保持纯净，因为一旦使用可变属性，你的函数将变得更难理解。'
- en: The Closure class
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Closure`类'
- en: 'All anonymous functions are in fact an instance of the `Closure` class. However,
    as stated in the documentation ([http://php.net/manual/en/class.closure.php](http://php.net/manual/en/class.closure.php)),
    this class does not use the aforementioned `__invoke` method; it''s a special
    case in the PHP interpreter:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所有匿名函数实际上都是`Closure`类的实例。然而，正如文档中所述（[http://php.net/manual/en/class.closure.php](http://php.net/manual/en/class.closure.php)），这个类不使用前面提到的`__invoke`方法；这是PHP解释器中的一个特例：
- en: '*Besides the methods listed here, this class also has an __invoke method. This
    is for consistency with other classes that implement calling magic, as this method
    is not used for calling the function.*'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*除了这里列出的方法，这个类还有一个`__invoke`方法。这是为了与实现调用魔术的其他类保持一致，因为这个方法不用于调用函数。*'
- en: This method on the class allows you to change to which object the `$this` variable
    will be bound inside the closure. You can even bind an object to a closure created
    outside of the class.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 类上的这个方法允许你更改`$this`变量在闭包内部绑定到哪个对象。你甚至可以将一个对象绑定到类外创建的闭包上。
- en: If you start using the features of the `Closure` class, keep in mind that the
    `call` method was just recently added in PHP 7.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你开始使用`Closure`类的特性，请记住`call`方法是在PHP 7中才被添加的。
- en: Higher-order functions
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高阶函数
- en: PHP functions can take functions as parameters and return functions as return
    values. A function that does either of those is called a higher-order function.
    It is as simple as that.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: PHP函数可以将函数作为参数并返回函数作为返回值。执行任何这些操作的函数称为高阶函数。就是这么简单。
- en: In fact, if you read the following code samples, you will quickly see that we
    have already created multiple higher-order functions. You will also discover,
    without much surprise, that most of the functional techniques you will learn revolve
    around higher-order functions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，如果你阅读以下代码示例，你会很快发现我们已经创建了多个高阶函数。你还会发现，毫不奇怪，你将学到的大多数函数式技术都围绕着高阶函数。
- en: What is a callable?
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是可调用？
- en: 'A `callable` is a type hint that can be used to enforce that the parameter
    of a function is something that can be called, like a function. Beginning with
    PHP 7, it can also be used as a type hint for the return value:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`callable`是一种类型提示，可以用来强制函数的参数是可以调用的东西，比如一个函数。从PHP 7开始，它也可以用作返回值的类型提示：'
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: However, what you cannot enforce with the type hint is the number and type of
    arguments your callable should have. But it is already great to guarantee to have
    something you can call.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，类型提示无法强制可调用的参数数量和类型。但能够保证有可调用的东西已经很好了。
- en: 'A callable can take multiple forms:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 可调用可以采用多种形式：
- en: A string for named functions
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于命名函数的字符串
- en: An array for class methods or static functions
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于类方法或静态函数的数组
- en: A variable for anonymous functions or closures
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名函数或闭包的变量
- en: An object with a `__invoke` method
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`__invoke`方法的对象
- en: 'Let''s see how we can use all these possibilities. Let''s start with calling
    a simple function by name:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用所有这些可能性。让我们从按名称调用一个简单的函数开始：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can also do the same for functions inside of classes. Let's declare an `A`
    class with some functions and use an array to call it.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以对类内的函数做同样的操作。让我们声明一个带有一些函数的`A`类，并使用数组来调用它。
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using a string will only work for the static method, as other methods will
    need an object to use as their context. In the case of a static method, you can
    also use a simple string directly, this will, however, only work starting with
    PHP 7; the previous version didn''t support this syntax:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串只对静态方法有效，因为其他方法将需要一个对象作为它们的上下文。对于静态方法，你也可以直接使用一个简单的字符串，但这只适用于PHP 7及更高版本；之前的版本不支持这种语法：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can call a method on a class instance as easily:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以轻松地在类实例上调用方法：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Since our `A` class has an`__invoke` method, we can use it as a `callable`
    directly:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的`A`类具有`__invoke`方法，因此我们可以直接将其用作`callable`：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also use any variable to which an anonymous function is assigned as
    a `callable`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用任何变量，其中分配了一个匿名函数作为`callable`：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'PHP also provides you with two helpers to call functions in the form of `call_user_func_array`
    and `call_user_func`. They take a callable as a parameter and you can also pass
    parameters. For the first helper, you pass an array with all the parameters; for
    the second one, you pass them separately:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: PHP还为您提供了两个助手来调用函数，即`call_user_func_array`和`call_user_func`。它们将可调用作为参数，并且您还可以传递参数。对于第一个助手，您传递一个包含所有参数的数组；对于第二个助手，您分别传递它们：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A final word of caution, if you are using the `callable` type hint: any string
    that contains a function name that has been declared is considered valid; this
    can lead to some unexpected behavior sometimes.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要注意的一点是，如果您使用了`callable`类型提示：任何包含已声明的函数名称的字符串都被视为有效；这有时会导致一些意外的行为。
- en: A somewhat contrived example would be a test suite where you check that some
    functions only accept valid callables by passing it some strings and catching
    the resulting exception. At some point, you introduce a library and this test
    is now failing, although both should be unrelated. What is happening is that the
    library in question declares a function with the exact name that your string contained.
    Now, the function exists and no exception is raised anymore.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有些牵强的例子是一个测试套件，您可以通过传递一些字符串来检查某些函数是否只接受有效的可调用对象，并捕获结果异常。在某个时候，您引入了一个库，现在这个测试失败了，尽管两者应该是无关的。发生的情况是，所涉及的库声明了一个与您的字符串完全相同的函数名称。现在，该函数存在，不再引发异常。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discovered how you can create new anonymous functions and
    closures. You are also now familiar with the various ways you can pass those around.
    We also learned about the new PHP 7 scalar type hints that help us to make our
    program more robust, and the `callable` type hint so we can enforce having a valid
    function as a parameter or return value.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了如何创建新的匿名函数和闭包。您现在也熟悉了传递它们的各种方式。我们还了解了新的PHP 7标量类型提示，这有助于使我们的程序更加健壮，以及`callable`类型提示，这样我们就可以强制参数或返回值为有效函数。
- en: For anyone who has been using PHP for some time already, there was probably
    really nothing new in this chapter. But we now share a common ground that will
    help us dive into the functional world.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些已经使用PHP一段时间的人来说，本章可能没有什么新鲜的内容。但现在我们有了一个共同的基础，这将帮助我们进入函数式世界。
- en: With the basics about functions in PHP covered, we will learn more about the
    fundamental concepts pertaining to functional programming in the next chapter.
    We will see that your functions have to respect certain rules in order to be truly
    useful in a functional code base.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP函数的基础知识介绍完毕后，我们将在下一章中了解有关函数式编程的基本概念。我们将看到，您的函数必须遵守某些规则，才能真正在函数式代码库中发挥作用。
