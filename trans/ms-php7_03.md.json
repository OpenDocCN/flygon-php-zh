["```php\nThrowable { \n  abstract public string getMessage (void) \n  abstract public int getCode (void) \n  abstract public string getFile (void) \n  abstract public int getLine (void) \n  abstract public array getTrace (void) \n  abstract public string getTraceAsString (void) \n  abstract public Throwable getPrevious (void) \n  abstract public string __toString (void) \n}\n\n```", "```php\n<?php\n\n  class Glitch extends \\Error\n  {\n  }\n\n  try {\n    throw new Glitch('Glitch!');\n  } \n  catch (\\Exception $e) {\n    echo 'Caught ' . $e->getMessage();\n  }\n\n```", "```php\nPHP Fatal error: Uncaught Glitch: Glitch! in index.php:7\nStack trace:\n#0 {main}\nthrown in /root/app/index.php on line 7\n\n```", "```php\n<?php\n\n  class Flaw extends \\Exception\n  {\n  }\n\n  try {\n    throw new Flaw('Flaw!');\n  } \n  catch (\\Exception $e) {\n    echo 'Caught ' . $e->getMessage();\n  }\n\n```", "```php\nCaught Flaw!\n\n```", "```php\ninterface Throwable\n | Error implements Throwable\n   | TypeError extends Error\n   | ParseError extends Error\n   | ArithmeticError extends Error\n     | DivisionByZeroError extends ArithmeticError\n   | AssertionError extends Error\n | Exception implements Throwable\n   | ...\n\n```", "```php\n<?php\n\ntry {\n  throw new ArithmeticError('Missing numbers!');\n} \ncatch (Throwable $t) {\n  echo $t->getMessage();\n}\n\n```", "```php\n<?php   interface MyThrowable extends Throwable\n {  //...\n } class MyException extends Exception implements MyThrowable\n {  //...\n } throw new MyException();\n\n```", "```php\nError implements Throwable {\n   /* Properties */\n   protected string $message ;\n   protected int $code ;\n   protected string $file ;\n   protected int $line ;\n\n   /* Methods */\n   public __construct (\n     [ string $message = \"\" \n     [, int $code = 0 \n     [, Throwable $previous = NULL ]]]\n    )\n\n    final public string getMessage (void)\n    final public Throwable getPrevious (void)\n    final public mixed getCode (void)\n    final public string getFile (void)\n    final public int getLine (void)\n    final public array getTrace (void)\n    final public string getTraceAsString (void)\n    public string __toString (void)\n    final private void __clone (void)\n}\n\n```", "```php\n<?php\n\nclass User\n{\n  function hello($name)\n  {\n    return 'Hello ' . $name;\n  }\n}\n\n// Case 1 - working\ntry {\n  $user = new User();\n  $user->greeting('John');\n} \ncatch (Error $e) {\n  echo 'Caught: ' . $e->getMessage();\n}\n\n// Case 2 - working\ntry {\n  $user = new User();\n  $user->greeting('John');\n} \ncatch (Throwable $t) {\n  echo 'Caught: ' . $t->getMessage();\n}\n\n```", "```php\n<?php\n\nini_set('memory_limit', '1M');\n\ntry {\n  $content = '';\n  while (true) {\n    $content .= 'content';\n  }\n} \ncatch (\\Error $e) {\n  echo 'Caught ' . $e->getMessage();\n}\n\n```", "```php\n    <?php\n\n    error_reporting(E_ALL);\n    ini_set('display_errors', 1);\n    ini_set('memory_limit', '1M');\n\n    try {\n      str_pad('', PHP_INT_MAX);\n    } \n    catch (Throwable $t) {\n      echo 'Caught ' . $t->getMessage();\n    }\n\n```", "```php\n     ArithmeticError extends Error {\n       final public string Error::getMessage (void)\n       final public Throwable Error::getPrevious (void)\n       final public mixed Error::getCode (void)\n       final public string Error::getFile (void)\n       final public int Error::getLine (void)\n       final public array Error::getTrace (void)\n       final public string Error::getTraceAsString (void)\n       public string Error::__toString (void)\n       final private void Error::__clone (void)\n     }\n\n```", "```php\n    <?php\n\n    try {\n      $value = 5 << -1;\n    } \n    catch (ArithmeticError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\n Caught: Bit shift by negative number \n\n```", "```php\n    <?php\n\n    try {\n      intdiv(PHP_INT_MIN, -1);\n    } \n    catch (ArithmeticError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\n Caught: Division of PHP_INT_MIN by -1 is not an integer\n\n```", "```php\n    DivisionByZeroError extends ArithmeticError {\n      final public string Error::getMessage (void)\n      final public Throwable Error::getPrevious (void)\n      final public mixed Error::getCode (void)\n      final public string Error::getFile (void)\n      final public int Error::getLine (void)\n      final public array Error::getTrace (void)\n      final public string Error::getTraceAsString (void)\n      public string Error::__toString (void)\n      final private void Error::__clone (void)\n    }\n\n```", "```php\n    <?php\n\n    try {\n      $x = 5 / 0;\n    } \n    catch (DivisionByZeroError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\nPHP Warning: Division by zero\n\n```", "```php\n    <?php\n\n    try {\n      $x = intdiv(5, 0);\n    } \n    catch (DivisionByZeroError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\n    AssertionError extends Error {\n      final public string Error::getMessage (void)\n      final public Throwable Error::getPrevious (void)\n      final public mixed Error::getCode (void)\n      final public string Error::getFile (void)\n      final public int Error::getLine (void)\n      final public array Error::getTrace (void)\n      final public string Error::getTraceAsString (void)\n      public string Error::__toString (void)\n      final private void Error::__clone (void)\n    }\n\n```", "```php\n    <?php\n\n    try {\n      assert('developer' === 'programmer');\n    } \n    catch (AssertionError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\n    ParseError extends Error {\n      final public string Error::getMessage (void)\n      final public Throwable Error::getPrevious (void)\n      final public mixed Error::getCode (void)\n      final public string Error::getFile (void)\n      final public int Error::getLine (void)\n      final public array Error::getTrace (void)\n      final public string Error::getTraceAsString (void)\n      public string Error::__toString (void)\n      final private void Error::__clone (void)\n    }\n\n```", "```php\n    <?php\n\n    try {\n      $now = eval(\"return date('D, d M Y H:i:s');\");\n      echo $now;\n    } \n    catch (ParseError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\n    <?php\n\n    try {\n      $now = eval(\"return date(D, d M Y H:i:s);\");\n      echo $now;\n    } \n    catch (ParseError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\nCaught: syntax error, unexpected 'M' (T_STRING), expecting ',' or ')'\n\n```", "```php\n    <?php\n\n    try {\n      $now = date(D, d M Y H:i:s);\n      echo $now;\n    }\n    catch (ParseError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\n    ParseError extends Error {\n      final public string Error::getMessage (void)\n      final public Throwable Error::getPrevious (void)\n      final public mixed Error::getCode (void)\n      final public string Error::getFile (void)\n      final public int Error::getLine (void)\n      final public array Error::getTrace (void)\n      final public string Error::getTraceAsString (void)\n      public string Error::__toString (void)\n      final private void Error::__clone (void)\n    } \n\n```", "```php\n    <?php\n\n    declare(strict_types = 1);\n\n    function hello(string $name) {\n      return \"Hello $name!\";\n    }\n    try {\n      echo hello(34);\n    } \n    catch (TypeError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\nCaught: Argument 1 passed to hello() must be of the type string, integer given, called in...\n\n```", "```php\n    <?php\n\n    declare(strict_types = 1);\n\n    function hello($name): string {\n      return strlen($name);\n    }\n\n    try {\n      echo hello('branko');\n    } \n    catch (TypeError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\nCaught: Return value of hello() must be of the type string, integer returned\n\n```", "```php\n    <?php\n\n    declare(strict_types = 1);\n\n    try {\n      echo strlen('test', 'extra');\n    } \n    catch (TypeError $e) {\n      echo 'Caught: ' . $e->getMessage();\n    }\n\n```", "```php\n    mixed set_error_handler ( \n      callable $error_handler \n      [, int $error_types = E_ALL | E_STRICT ] \n    )\n\n```", "```php\n    bool handler ( \n      int $errno , \n      string $errstr \n      [, string $errfile \n        [, int $errline \n          [, array $errcontext ]]] \n    )\n\n```", "```php\n    <?php\n\n    function handler($errno, $errstr, $errfile, $errline, $errcontext)\n\n    {\n      echo 'Handler: ' . $errstr;\n    }\n\n    set_error_handler('handler', E_USER_ERROR | E_USER_WARNING);\n\n    echo 'start';\n      trigger_error('Ups!', E_USER_ERROR);\n    echo 'end';\n\n```", "```php\n    <?php\n\n    set_error_handler(function ($errno, $errstr, $errfile, $errline,\n      $errcontext) {\n      echo 'Handler: ' . $errstr;\n    }, E_USER_ERROR | E_USER_WARNING);\n\n    echo 'start';\n      trigger_error('Ups!', E_USER_WARNING);\n    echo 'end';\n\n```", "```php\n    bool trigger_error ( \n      string $error_msg \n      [, int $error_type = E_USER_NOTICE ] \n    )\n\n```", "```php\n    <?php\n\n    set_error_handler(function ($errno, $errstr) {\n      echo 'Handler: ' . $errstr;\n    });\n\n    echo 'start';\n    trigger_error('E_USER_ERROR!', E_USER_ERROR);\n    trigger_error('E_USER_ERROR!', E_USER_WARNING);\n    trigger_error('E_USER_ERROR!', E_USER_NOTICE);\n    trigger_error('E_USER_ERROR!', E_USER_DEPRECATED);\n    echo 'end';\n\n```", "```php\n    Exception implements Throwable {\n      /* Properties */\n      protected string $message ;\n      protected int $code ;\n      protected string $file ;\n      protected int $line ;\n\n      /* Methods */\n      public __construct (\n        [ string $message = \"\" \n         [, int $code = 0 \n          [, Throwable $previous = NULL ]]]\n      )\n\n      final public string getMessage (void)\n      final public Throwable getPrevious (void)\n      final public mixed getCode (void)\n      final public string getFile (void)\n      final public int getLine (void)\n      final public array getTrace (void)\n      final public string getTraceAsString (void)\n      public string __toString (void)\n      final private void __clone (void)\n    }\n\n```", "```php\n    <?php\n\n    class UsernameException extends Exception {}\n\n    class PasswordException extends Exception {}\n\n    $username = 'john';\n    $password = '';\n\n    try {\n      if (empty($username)) {\n        throw new UsernameException();\n      }\n      if (empty($password)) {\n        throw new PasswordException();\n      }\n      throw new Exception();\n    } \n    catch (UsernameException $e) {\n      echo 'Caught UsernameException.';\n    } \n    catch (PasswordException $e) {\n      echo 'Caught PasswordException.';\n    } \n    catch (Exception $e) {\n      echo 'Caught Exception.';\n    } \n    finally {\n      echo 'Finally.';\n    }\n\n```", "```php\n    <?php\n\n    class FileNotExistException extends Exception {}\n\n    class FileReadException extends Exception {}\n\n    class FileEmptyException extends Exception {}\n\n    $file = 'story.txt';\n\n    try {\n      try {\n        $content = file_get_contents($file);\n        if (!$content) {\n          throw new Exception();\n        }\n      } \n      catch (Exception $e) {\n        if (!file_exists($file)) {\n          throw new FileNotExistException();\n        } \n        elseif (!is_readable($file)) {\n          throw new FileReadException();\n        } \n        elseif (empty($content)) {\n          throw new FileEmptyException();\n        } \n        else {\n          throw new Exception();\n        }\n      }\n    }\n\n    catch (FileNotExistException $e) {\n      echo 'Caught FileNotExistException.';\n    } \n    catch (FileReadException $e) {\n      echo 'Caught FileReadException.';\n    } \n    catch (FileEmptyException $e) {\n      echo 'Caught FileEmptyException.';\n    } \n    catch (Exception $e) {\n      echo 'Caught Exception.';\n    } \n    finally {\n      echo 'Finally.';\n    }\n\n```", "```php\nWarning: file_get_contents(story.txt): failed to open stream: No such file or directory in /index.php on line 13\nCaught FileNotExistException.Finally.\n\n```", "```php\n    <?php\n\n    function throwableHandler(Throwable $t)\n    {\n      echo 'Throwable Handler: ' . $t->getMessage();\n    }\n\n    set_exception_handler('throwableHandler');\n\n    echo 'start';\n      throw new Exception('Ups!');\n    echo 'end';\n\n```", "```php\n    <?php\n\n    set_exception_handler(function (Throwable $t) {\n      echo 'Throwable Handler: ' . $t->getMessage();\n    });\n\n    echo 'start';\n     throw new Exception('Ups!');\n    echo 'end';\n\n```", "```php\n    try {\n      //...\n    } \n    catch (\\Exception $e) {\n      $messages[] = __('We can't add this item to your shopping cart right now.');\n    }\n\n```", "```php\n<?php try {\n  //... } catch (\\Exception $e) {\n  $this->logger->critical($e);\n  $messages[] = __(\"We can't add this item to your shopping cart right now . \"); }\n\n```", "```php\n    bool error_log ( \n       string $message \n      [, int $message_type = 0 \n        [, string $destination \n          [, string $extra_headers ] ]] \n    )\n\n```", "```php\n    <?php\n\n    ini_set('log_errors', 1);\n    ini_set('error_log', dirname(__FILE__) . '/app-error.log');\n\n    error_log('Test!');\n\n```", "```php\n    [26-Dec-2016 08:11:32 UTC] Test!\n    [26-Dec-2016 08:11:39 UTC] Test!\n    [26-Dec-2016 08:11:42 UTC] Test!\n\n```", "```php\n    <?php\n\n    ini_set('log_errors', 1);\n    ini_set('error_log', dirname(__FILE__) . '/app-error.log');\n\n    $headers = \"From: john@server.loc\\r\\n\";\n    $headers .= \"Subject: My PHP email logger\\r\\n\";\n    $headers .= \"MIME-Version: 1.0\\r\\n\";\n    $headers .= \"Content-Type: text/html; charset=ISO-8859-1\\r\\n\";\n\n    error_log('<html><h2>Test!</h2></html>', 1, 'john@mail.com', $headers);\n\n```", "```php\n    try {\n      //...\n    } \n    catch (\\Exception $e) {\n      app_error_log($e);\n    }\n\n```", "```php\ncomposer require monolog/monolog\n\n```", "```php\n    <?php\n\n    require 'vendor/autoload.php';\n\n    use Monolog\\Logger;\n    use Monolog\\Handler\\RotatingFileHandler;\n    use Monolog\\Handler\\BrowserConsoleHandler;\n\n    $logger = new Logger('foggyline');\n\n    $logger->pushHandler(new RotatingFileHandler(__DIR__ .  \n      '/foggyline.log'), 7);\n    $logger->pushHandler(new BrowserConsoleHandler());\n\n    $context = [\n      'user' => 'john',\n      'salary' => 4500.00\n    ];\n\n    $logger->addDebug('Logging debug', $context);\n    $logger->addInfo('Logging info', $context);\n    $logger->addNotice('Logging notice', $context);\n    $logger->addWarning('Logging warning', $context);\n    $logger->addError('Logging error', $context);\n    $logger->addCritical('Logging critical', $context);\n    $logger->addAlert('Logging alert', $context);\n    $logger->addEmergency('Logging emergency', $context);\n\n```", "```php\n    [2016-12-26 12:36:46] foggyline.DEBUG: Logging debug {\"user\":\"john\",\"salary\":4500} []\n    [2016-12-26 12:36:46] foggyline.INFO: Logging info {\"user\":\"john\",\"salary\":4500} []\n    [2016-12-26 12:36:46] foggyline.NOTICE: Logging notice {\"user\":\"john\",\"salary\":4500} []\n    [2016-12-26 12:36:46] foggyline.WARNING: Logging warning {\"user\":\"john\",\"salary\":4500} []\n    [2016-12-26 12:36:46] foggyline.ERROR: Logging error {\"user\":\"john\",\"salary\":4500} []\n    [2016-12-26 12:36:46] foggyline.CRITICAL: Logging critical {\"user\":\"john\",\"salary\":4500} []\n    [2016-12-26 12:36:46] foggyline.ALERT: Logging alert {\"user\":\"john\",\"salary\":4500} []\n    [2016-12-26 12:36:46] foggyline.EMERGENCY: Logging emergency  {\"user\":\"john\",\"salary\":4500} []\n\n```"]