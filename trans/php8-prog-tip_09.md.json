["```php\n// //repo/ch07/php7_ext_is_resource.php\n$url = 'https://unlikelysource.com/';\n$ch\u00a0\u00a0= curl_init($url);\nif (is_resource($ch))\n\u00a0\u00a0\u00a0\u00a0echo \"Connection Established\\n\"\nelse\n\u00a0\u00a0\u00a0\u00a0throw new Exception('Unable to establish connection');\n```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# \nphp php7_ext_is_resource.php \nConnection Established\n```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# \nphp php7_ext_is_resource.php \nPHP Fatal error:\u00a0\u00a0Uncaught Exception: Unable to establish connection in /repo/ch07/php7_ext_is_resource.php:9\n```", "```php\n// //repo/ch07/php8_ext_is_resource.php\n$url = 'https://unlikelysource.com/';\n$ch\u00a0\u00a0= curl_init($url);\nif (!empty($ch))\n\u00a0\u00a0\u00a0\u00a0echo \"Connection Established\\n\";\nelse\n\u00a0\u00a0\u00a0\u00a0throw new Exception('Unable to establish connection');\nvar_dump($ch);\n```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# \nphp php8_ext_is_resource.php \nConnection Established\n/repo/ch07/php8_ext_is_resource.php:11:\nresource(4) of type (curl)\n```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# \nphp php8_ext_is_resource.php \nConnection Established\nobject(CurlHandle)#1 (0) {}\n```", "```php\n    // /repo/src/Http/Request.php\n    namespace Http;\n    class Request {\n    \u00a0\u00a0\u00a0\u00a0public $url\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0= '';\n    \u00a0\u00a0\u00a0\u00a0public $method\u00a0\u00a0\u00a0= 'GET';\n    \u00a0\u00a0\u00a0\u00a0// not all properties shown\n    \u00a0\u00a0\u00a0\u00a0public $query\u00a0\u00a0\u00a0\u00a0= '';\n    \u00a0\u00a0\u00a0\u00a0public function __construct(string $url) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$result = [];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$parsed = parse_url($url);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$vars\u00a0\u00a0\u00a0= array_keys(get_object_vars($this));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach ($vars as $name)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->$name = $parsed[$name] ?? '';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!empty($this->query))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parse_str($this->query, $result);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->query = $result;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->url\u00a0\u00a0\u00a0= $url;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    // /repo/src/Http/Client/CurlStrategy.php\n    namespace Http\\Client;\n    use CurlHandle;\n    use Http\\Request;\n    class CurlStrategy {\n    \u00a0\u00a0\u00a0\u00a0public function __construct(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public CurlHandle $handle) {}\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function send(Request $request) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// not all code is shown\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0curl_setopt($this->handle, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CURLOPT_URL, $request->url);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (strtolower($request->method) === 'post') {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$opts = [CURLOPT_POST => 1,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CURLOPT_POSTFIELDS =>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http_build_query($request->query)];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0curl_setopt_array($this->handle, $opts);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return curl_exec($this->handle);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    // /repo/src/Http/Client/StreamsStrategy.php\n    namespace Http\\Client;\n    use SplFileObject;\n    use Exception;\n    use Http\\Request;\n    class StreamsStrategy {\n    \u00a0\u00a0\u00a0\u00a0public function __construct(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public ?SplFileObject $obj) {}\n    \u00a0\u00a0\u00a0\u00a0// remaining code not shown\n    ```", "```php\n    // //repo/ch07/php8_objs_returned.php\n    require_once __DIR__ \n    \u00a0\u00a0\u00a0\u00a0. '/../src/Server/Autoload/Loader.php';\n    $autoload = new \\Server\\Autoload\\Loader();\n    use Http\\Request;\n    use Http\\Client\\{CurlStrategy,StreamsStrategy};\n    $url = 'https://api.unlikelysource.com/api\n    \u00a0\u00a0\u00a0\u00a0?city=Livonia&country=US';\n    $request = new Request($url);\n    ```", "```php\n    $streams\u00a0\u00a0= new StreamsStrategy();\n    $response = $streams->send($request);\n    echo $response;\n    ```", "```php\n    $curl\u00a0\u00a0\u00a0\u00a0\u00a0= new CurlStrategy(curl_init());\n    $response = $curl->send($request);\n    echo $response;\n    ```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# \nphp php8_objs_returned.php \nCurlStrategy Results:\n{\"data\":[{\"id\":\"1227826\",\"country\":\"US\",\"postcode\":\"14487\",\"city\":\"Livonia\",\"state_prov_name\":\"New York\",\"state_prov_code\":\"NY\",\"locality_name\":\"Livingston\",\"locality_code\":\"051\",\"region_name\":\"\",\"region_code\":\"\",\"latitude\":\"42.8135\",\"longitude\":\"-77.6635\",\"accuracy\":\"4\"},{\"id\":\"1227827\",\"country\":\"US\",\"postcode\":\"14488\",\"city\":\"Livonia Center\",\"state_prov_name\":\"New York\",\"state_prov_code\":\"NY\",\"locality_name\":\"Livingston\",\"locality_code\":\"051\",\"region_name\":\"\",\"region_code\":\"\",\"latitude\":\"42.8215\",\"longitude\":\"-77.6386\",\"accuracy\":\"4\"}]}\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<fruit>\n\u00a0\u00a0\u00a0\u00a0<item>Apple</item>\n\u00a0\u00a0\u00a0\u00a0<item>Banana</item>\n</fruit>\n```", "```php\n    // //repo/ch07/php8_xml_writer.php\n    $xml = new XMLWriter();\n    $xml->openMemory();\n    $xml->startDocument('1.0', 'UTF-8');\n    ```", "```php\n    $xml->startElement('fruit');\n    $xml->startElement('item');\n    $xml->text('Apple');\n    $xml->endElement();\n    ```", "```php\n    $xml->startElement('item');\n    $xml->text('Banana');\n    $xml->endElement();\n    ```", "```php\n    $xml->endElement();\n    $xml->endDocument();\n    echo $xml->outputMemory();\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# php php8_xml_writer.php \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<fruit><item>Apple</item><item>Banana</item></fruit>\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- /repo/ch07/tree.xml -->\n<family>\n\u00a0\u00a0<branch name=\"Windsor\">\n\u00a0\u00a0\u00a0\u00a0<descendent gender=\"M\">George V</descendent>\n\u00a0\u00a0\u00a0\u00a0<spouse gender=\"F\">Mary of Treck</spouse>\n\u00a0\u00a0\u00a0\u00a0<branch name=\"George V\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<descendent gender=\"M\">George VI</descendent>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<spouse gender=\"F\">Elizabeth Bowes-Lyon</spouse>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<branch name=\"George VI\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<descendent gender=\"F\">Elizabeth II</descendent>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<spouse gender=\"M\">Prince Philip</spouse>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<branch name=\"Elizabeth II\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<descendent gender=\"M\">Prince Charles</descendent>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<spouse gender=\"F\">Diana Spencer</spouse>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<spouse gender=\"F\">Camilla Parker Bowles</spouse>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<branch name=\"Prince Charles\">\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<descendent gender=\"M\">William</descendent>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<spouse gender=\"F\">Kate Middleton</spouse>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</branch>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<!-- not all nodes are shown -->\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</branch>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</branch>\n\u00a0\u00a0\u00a0\u00a0</branch>\n\u00a0\u00a0</branch>\n</family>\n```", "```php\n    function recurse($branch) {\n    \u00a0\u00a0\u00a0\u00a0foreach ($branch as $node) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo $node->descendent;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo ($node->descendent['gender'] == 'F')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? ', daughter of '\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: ', son of ';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo $node['name'];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (empty($node->spouse)) echo \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else echo \", married to {$node->spouse}\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!empty($node->branch)) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0recurse($node->branch);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    // //repo/ch07/php7_simple_xml.php\n    $fn = __DIR__ . '/includes/tree.xml';\n    $xml = simplexml_load_file($fn);\n    recurse($xml);\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch07 ]# php php7_simple_xml.php\n    George V, son of Windsor, married to Mary of Treck\n    George VI, son of George V, married to Elizabeth Bowes-Lyon\n    Elizabeth II, daughter of George VI, married to Philip\n    Prince Charles, son of Elizabeth II, married to Diana Spencer\n    William, son of Prince Charles, married to Kate Middleton\n    Harry, son of Prince Charles, married to Meghan Markle\n    Princess Anne, daughter of Elizabeth II, married to M.Phillips\n    Princess Margaret, daughter of George VI, married to A.Jones\n    Edward VIII, son of George V, married to Wallis Simpson\n    Princess Mary, daughter of George V, married to H.Lascelles\n    Prince Henry, son of George V, married to Lady Alice Montegu\n    Prince George, son of George V, married to Princess Marina\n    Prince John, son of George V\n    ```", "```php\n    // //repo/ch07/php8_simple_xml.php\n    $fn = __DIR__ . '/includes/tree.xml';\n    $xml = simplexml_load_file($fn);\n    $iter = new RecursiveIteratorIterator($xml,\n    \u00a0\u00a0\u00a0\u00a0RecursiveIteratorIterator::SELF_FIRST);\n    ```", "```php\n    foreach ($iter as $branch) {\n    \u00a0\u00a0\u00a0\u00a0if (!empty($branch->descendent)) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo $branch->descendent;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo ($branch->descendent['gender'] == 'F')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? ', daughter of '\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: ', son of ';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo $branch['name'];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (empty($branch->spouse)) echo \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else echo \", married to {$branch->spouse}\\n\";\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# php php8_simple_xml.php \nGeorge V, son of Windsor, married to Mary of Treck\nGeorge VI, son of George V, married to Elizabeth Bowes-Lyon\nElizabeth II, daughter of George VI, married to Philip\nPrince Charles, son of Elizabeth II, married to Diana Spencer\nWilliam, son of Prince Charles, married to Kate Middleton\nHarry, son of Prince Charles, married to Meghan Markle\nPrincess Anne, daughter of Elizabeth II, married to M.Phillips\nPrincess Margaret, daughter of George VI, married to A.Jones\nEdward VIII, son of George V, married to Wallis Simpson\nPrincess Mary, daughter of George V, married to H.Lascelles\nPrince Henry, son of George V, married to Lady Alice Montegu\nPrince George, son of George V, married to Princess Marina\nPrince John, son of George V\n```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# \nphp -r \"var_dump(mb_list_encodings());\"\nCommand line code:1:\narray(87) {\n\u00a0\u00a0... only selected output is shown ...\n\u00a0\u00a0[14] =>\u00a0\u00a0string(7) \"UCS-4BE\"\n\u00a0\u00a0[16] =>\u00a0\u00a0string(5) \"UCS-2\"\n\u00a0\u00a0[19] =>\u00a0\u00a0string(6) \"UTF-32\"\n\u00a0\u00a0[22] =>\u00a0\u00a0string(6) \"UTF-16\"\n\u00a0\u00a0[25] =>\u00a0\u00a0string(5) \"UTF-8\"\n\u00a0\u00a0[26] =>\u00a0\u00a0string(5) \"UTF-7\"\n\u00a0\u00a0[27] =>\u00a0\u00a0string(9) \"UTF7-IMAP\"\n\u00a0\u00a0[28] =>\u00a0\u00a0string(5) \"ASCII\"\n\u00a0\u00a0[29] =>\u00a0\u00a0string(6) \"EUC-JP\"\n\u00a0\u00a0[30] =>\u00a0\u00a0string(4) \"SJIS\"\n\u00a0\u00a0[31] =>\u00a0\u00a0string(9) \"eucJP-win\"\n\u00a0\u00a0[32] =>\u00a0\u00a0string(11) \"EUC-JP-2004\"\n\u00a0\u00a0[76] =>\u00a0\u00a0string(6) \"KOI8-R\"\n\u00a0\u00a0[78] =>\u00a0\u00a0string(9) \"ArmSCII-8\"\n\u00a0\u00a0[79] =>\u00a0\u00a0string(5) \"CP850\"\n\u00a0\u00a0[80] =>\u00a0\u00a0string(6) \"JIS-ms\"\n\u00a0\u00a0[81] =>\u00a0\u00a0string(16) \"ISO-2022-JP-2004\"\n\u00a0\u00a0[86] =>\u00a0\u00a0string(7) \"CP50222\"\n}\n```", "```php\n    // /repo/ch07/php8_mb_string_empty_needle.php\n    $text\u00a0\u00a0\u00a0= '\u0e2a\u0e38\u0e19\u0e31\u0e02\u0e08\u0e34\u0e49\u0e07\u0e08\u0e2d\u0e01\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e15\u0e32\u0e25\u0e01\u0e23\u0e30\u0e42\u0e14\u0e14\u0e02\u0e49\u0e32\u0e21\u0e23\u0e31\u0e49\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27';\n    $needle = NULL;\n    $funcs\u00a0\u00a0= ['mb_strpos',\u00a0\u00a0\u00a0'mb_strrpos', 'mb_stripos',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'mb_strripos', 'mb_strstr', 'mb_stristr',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'mb_strrchr',\u00a0\u00a0'mb_strrichr'];\n    ```", "```php\n    $patt = \"Testing: %12s : %s\\n\";\n    foreach ($funcs as $str)\n    \u00a0\u00a0\u00a0\u00a0printf($patt, $str, $str($text, $needle));\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# \nphp php8_mb_string_empty_needle.php\nPHP Warning:\u00a0\u00a0mb_strpos(): Empty delimiter in /repo/ch07/php8_mb_string_empty_needle.php on line 12\nTesting:\u00a0\u00a0\u00a0\u00a0mb_strpos : \nTesting:\u00a0\u00a0\u00a0mb_strrpos : \nPHP Warning:\u00a0\u00a0mb_stripos(): Empty delimiter in /repo/ch07/php8_mb_string_empty_needle.php on line 12\nTesting:\u00a0\u00a0\u00a0mb_stripos : \nTesting:\u00a0\u00a0mb_strripos : \nPHP Warning:\u00a0\u00a0mb_strstr(): Empty delimiter in /repo/ch07/php8_mb_string_empty_needle.php on line 12\nTesting:\u00a0\u00a0\u00a0\u00a0mb_strstr : \nPHP Warning:\u00a0\u00a0mb_stristr(): Empty delimiter in /repo/ch07/php8_mb_string_empty_needle.php on line 12\nTesting:\u00a0\u00a0\u00a0mb_stristr : \nTesting:\u00a0\u00a0\u00a0mb_strrchr : \nTesting:\u00a0\u00a0mb_strrichr : \n```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# \nphp php8_mb_string_empty_needle.php\nTesting:\u00a0\u00a0\u00a0\u00a0mb_strpos : 0\nTesting:\u00a0\u00a0\u00a0mb_strrpos : 46\nTesting:\u00a0\u00a0\u00a0mb_stripos : 0\nTesting:\u00a0\u00a0mb_strripos : 46\nTesting:\u00a0\u00a0\u00a0\u00a0mb_strstr : \u0e2a\u0e38\u0e19\u0e31\u0e02\u0e08\u0e34\u0e49\u0e07\u0e08\u0e2d\u0e01\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e15\u0e32\u0e25\u0e01\u0e23\u0e30\u0e42\u0e14\u0e14\u0e02\u0e49\u0e32\u0e21\u0e23\u0e31\u0e49\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27\nTesting:\u00a0\u00a0\u00a0mb_stristr : \u0e2a\u0e38\u0e19\u0e31\u0e02\u0e08\u0e34\u0e49\u0e07\u0e08\u0e2d\u0e01\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e15\u0e32\u0e25\u0e01\u0e23\u0e30\u0e42\u0e14\u0e14\u0e02\u0e49\u0e32\u0e21\u0e23\u0e31\u0e49\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27\nTesting:\u00a0\u00a0\u00a0mb_strrchr : \nTesting:\u00a0\u00a0mb_strrichr : \n```", "```php\n    // /repo/ch07/php7_mb_string_strpos.php\n    define('ENCODING', 'UTF-8');\n    $text\u00a0\u00a0\u00a0\u00a0= '\u0e2a\u0e38\u0e19\u0e31\u0e02\u0e08\u0e34\u0e49\u0e07\u0e08\u0e2d\u0e01\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e15\u0e32\u0e25\u0e01\u0e23\u0e30\u0e42\u0e14\u0e14\u0e02\u0e49\u0e32\u0e21\u0e23\u0e31\u0e49\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e23\u0e27\u0e14\u0e40\u0e23\u0e47\u0e27';\n    $encoded = mb_convert_encoding($text, ENCODING);\n    ```", "```php\n    $needle\u00a0\u00a0= '\u0e23\u0e31\u0e49\u0e27';\n    echo 'String Length: ' \n    \u00a0\u00a0\u00a0\u00a0. mb_strlen($encoded, ENCODING) . \"\\n\";\n    echo 'Substring Pos: ' \n    \u00a0\u00a0\u00a0\u00a0. mb_strrpos($encoded, $needle, ENCODING) . \"\\n\";\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# \nphp php7_mb_string_strpos.php\nString Length: 46\nSubstring Pos: 30\n```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# \nphp php7_mb_string_strpos.php\nString Length: 46\nPHP Fatal error:\u00a0\u00a0Uncaught TypeError: mb_strrpos(): Argument #3 ($offset) must be of type int, string given in /repo/ch07/php7_mb_string_strpos.php:14\n```", "```php\necho 'Substring Pos: ' \n\u00a0\u00a0\u00a0\u00a0. mb_strrpos($encoded, $needle, encoding:ENCODING) . \"\\n\";\n```", "```php\n    // /repo/ch07/php7_mb_string_strpos.php\n    define('ENCODING', 'UTF-8');\n    $text = '\u0e2a\u0e38\u0e19\u0e31\u0e02\u0e08\u0e34\u0e49\u0e07\u0e08\u0e2d\u0e01\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e15\u0e32\u0e25 2 \u0e15\u0e31\u0e27\u0e01\u0e23\u0e30\u0e42\u0e14\u0e14\u0e02\u0e49\u0e32\u0e21\u0e23\u0e31\u0e49\u0e27';\n    $str\u00a0\u00a0= mb_convert_encoding($text, ENCODING);\n    mb_regex_encoding(ENCODING);\n    ```", "```php\n    $mod1 = mb_ereg_replace(50, '3', $str);\n    echo \"Original: $str\\n\";\n    echo \"Modified: $mod1\\n\";\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# \nphp php7_mb_string_ereg_replace.php \nOriginal: \u0e2a\u0e38\u0e19\u0e31\u0e02\u0e08\u0e34\u0e49\u0e07\u0e08\u0e2d\u0e01\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e15\u0e32\u0e25 2 \u0e15\u0e31\u0e27\u0e01\u0e23\u0e30\u0e42\u0e14\u0e14\u0e02\u0e49\u0e32\u0e21\u0e23\u0e31\u0e49\u0e27\nModified: \u0e2a\u0e38\u0e19\u0e31\u0e02\u0e08\u0e34\u0e49\u0e07\u0e08\u0e2d\u0e01\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e15\u0e32\u0e25 3 \u0e15\u0e31\u0e27\u0e01\u0e23\u0e30\u0e42\u0e14\u0e14\u0e02\u0e49\u0e32\u0e21\u0e23\u0e31\u0e49\u0e27\n```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# \nphp php7_mb_string_ereg_replace.php \nOriginal: \u0e2a\u0e38\u0e19\u0e31\u0e02\u0e08\u0e34\u0e49\u0e07\u0e08\u0e2d\u0e01\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e15\u0e32\u0e25 2 \u0e15\u0e31\u0e27\u0e01\u0e23\u0e30\u0e42\u0e14\u0e14\u0e02\u0e49\u0e32\u0e21\u0e23\u0e31\u0e49\u0e27\nModified: \u0e2a\u0e38\u0e19\u0e31\u0e02\u0e08\u0e34\u0e49\u0e07\u0e08\u0e2d\u0e01\u0e2a\u0e35\u0e19\u0e49\u0e33\u0e15\u0e32\u0e25 2 \u0e15\u0e31\u0e27\u0e01\u0e23\u0e30\u0e42\u0e14\u0e14\u0e02\u0e49\u0e32\u0e21\u0e23\u0e31\u0e49\u0e27\n```", "```php\nimagecropauto(resource $image , int $mode = -1, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0float $threshold = .5 , int $color = -1 )\n```", "```php\nimagepolygon(resource $image, array $points, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int $num_points, int $color)\n```", "```php\n    // /repo/src/Services/DocBlockChecker.php\n    namespace Services;\n    use ReflectionClass;\n    class DocBlockChecker {\n    \u00a0\u00a0\u00a0\u00a0public $target = '';\u00a0\u00a0\u00a0\u00a0// class to check\n    \u00a0\u00a0\u00a0\u00a0public $reflect = NULL; // ReflectionClass instance\n    \u00a0\u00a0\u00a0\u00a0public function __construct(string $target) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->target = $target;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->reflect = new ReflectionClass($target);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function check() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$methods = [];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$list = $this->reflect->getMethods();\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach ($list as $refMeth) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$docBlock = $refMeth->getDocComment();\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!$docBlock) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$docBlock = \"/**\\n * \" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. $refMeth->getName() . \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$params = $refMeth->getParameters();\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ($params) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach ($params as $refParm) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$type = $refParm->getType() \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0?? 'mixed';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$type = (string) $type;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$name = $refParm->getName();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$default = '';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!$refParm->isVariadic() \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&& $refParm->isOptional()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$default=$refParm->getDefaultValue(); }\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ($default === '') {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$default = \"(empty string)\"; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$docBlock .= \" * @param $type \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. \"\\${$name} : $default\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ($refMeth->isConstructor())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$return = 'void';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$return = $refMeth->getReturnType() \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0?? 'mixed';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$docBlock .= \" * @return $return\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$docBlock .= \" */\\n\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$methods[$refMeth->getName()] = $docBlock;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return $methods;\n    \u00a0\u00a0}\n    }\n    ```", "```php\n    // //repo/ch07/php7_reflection_usage.php\n    $target = 'Php7\\Reflection\\Test';\n    require_once __DIR__ \n    \u00a0\u00a0\u00a0\u00a0. '/../src/Server/Autoload/Loader.php';\n    use Server\\Autoload\\Loader;\n    use Services\\DocBlockChecker;\n    |$autoload = new Loader();\n    $checker = new DocBlockChecker($target);\n    var_dump($checker->check());\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# \nphp php7_reflection_usage.php \n/repo/ch07/php7_reflection_usage.php:10:\narray(4) {\n\u00a0\u00a0'__construct' =>\u00a0\u00a0string(75) \n\"/**\n * __construct\n * @param PDO $pdo : (empty string)\n * @return void\n */\"\n\u00a0\u00a0'fetchAll' =>\u00a0\u00a0string(41) \n\"/**\n * fetchAll\n * @return Generator\n */\"\n\u00a0\u00a0'fetchByName' =>\u00a0\u00a0string(80) \n\"/**\n * fetchByName\n * @param string $name : (empty string)\n * @return array\n */\"\n\u00a0\u00a0'fetchLastId' =>\u00a0\u00a0string(38) \n\"/**\n * fetchLastId\n * @return int\n */\"\n}\n```", "```php\n    // /repo/ch07/php8_reflection_parms_defaults.php\n    $func = function (ReflectionParameter $parm) {\n    \u00a0\u00a0\u00a0\u00a0$name = $parm->getName();\n    \u00a0\u00a0\u00a0\u00a0$opts = NULL;\n    \u00a0\u00a0\u00a0\u00a0if ($parm->isDefaultValueAvailable())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$opts = $parm->getDefaultValue();\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0switch (TRUE) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case (is_array($opts)) :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$tmp = '';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach ($opts as $key => $val)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$tmp .= $key . ':' . $val . ',';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$opts = substr($tmp, 0, -1);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case (is_bool($opts)) :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$opts = ($opts) ? 'TRUE' : 'FALSE';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case ($opts === '') :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$opts = \"''\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default :\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$opts = 'No Default';\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return [$name, $opts];\n    };\n    ```", "```php\n    $test = 'setcookie';\n    $ref = new ReflectionFunction($test);\n    $parms = $ref->getParameters();\n    ```", "```php\n    $patt = \"%18s : %s\\n\";\n    foreach ($parms as $obj)\n    \u00a0\u00a0\u00a0\u00a0vprintf($patt, $func($obj));\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# \nphp php8_reflection_parms_defaults.php \nReflecting on setcookie\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Parameter : Default(s)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0------------ : ------------\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name : No Default\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value : No Default\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expires : No Default\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path : No Default\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0domain : No Default\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secure : No Default\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0httponly : No Default\n```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# \nphp php8_reflection_parms_defaults.php \nReflecting on setcookie\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Parameter : Default(s)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0------------ : ------------\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name : No Default\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value : ''\nexpires_or_options : No Default\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path : ''\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0domain : ''\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secure : FALSE\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0httponly : FALSE\n```", "```php\n// /repo/ch07/php7_zip_functions.php\n$fn\u00a0\u00a0= __DIR__ . '/includes/test.zip';\n$zip = zip_open($fn);\n$cnt = 0;\nif (!is_resource($zip)) exit('Unable to open zip file');\nwhile ($entry = zip_read($zip)) {\n\u00a0\u00a0\u00a0\u00a0echo zip_entry_name($entry) . \"\\n\";\n\u00a0\u00a0\u00a0\u00a0$cnt++;\n}\necho \"Total Entries: $cnt\\n\";\n```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# \nphp php7_zip_functions.php \nch07/includes/\nch07/includes/test.zip\nch07/includes/tree.xml\nch07/includes/test.png\nch07/includes/kitten.jpg\nch07/includes/reflection.html\nch07/php7_ext_is_resource.php\nch07/php7_gd_is_resource.php\n... not all entries shown ...\nch07/php8_simple_xml.php\nch07/php8_xml_writer.php\nch07/php8_zip_oop.php\nTotal Entries: 27\n```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# \nphp php7_zip_functions.php \nPHP Deprecated:\u00a0\u00a0Function zip_open() is deprecated in /repo/ch07/php7_zip_functions.php on line 5\nPHP Deprecated:\u00a0\u00a0Function zip_read() is deprecated in /repo/ch07/php7_zip_functions.php on line 8\nPHP Deprecated:\u00a0\u00a0Function zip_entry_name() is deprecated in /repo/ch07/php7_zip_functions.php on line 9\nch07/includes/\nDeprecated: Function zip_entry_name() is deprecated in /repo/ch07/php7_zip_functions.php on line 9\n... not all entries shown ...\nch07/php8_zip_oop.php\nPHP Deprecated:\u00a0\u00a0Function zip_read() is deprecated in /repo/ch07/php7_zip_functions.php on line 8\nTotal Entries: 27\n```", "```php\n// /repo/ch07/php8_zip_oop.php\n$fn\u00a0\u00a0= __DIR__ . '/includes/test.zip';\n$obj = new ZipArchive();\n$res = $obj->open($fn);\nif ($res !== TRUE) exit('Unable to open zip file');\nfor ($i = 0; $entry = $obj->statIndex($i); $i++) {\n\u00a0\u00a0\u00a0\u00a0echo $entry['name'] . \"\\n\";\n}\necho \"Total Entries: $i\\n\";\n```", "```php\n    $pregTest = function ($pattern, $string) {\n    \u00a0\u00a0\u00a0\u00a0$result\u00a0\u00a0= preg_match($pattern, $string);\n    \u00a0\u00a0\u00a0\u00a0$lastErr = preg_last_error();\n    \u00a0\u00a0\u00a0\u00a0if ($lastErr == PREG_NO_ERROR) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$msg = 'RESULT: ';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$msg .= ($result) ? 'MATCH' : 'NO MATCH';\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$msg = 'ERROR : ';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (function_exists('preg_last_error_msg'))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$msg .= preg_last_error_msg();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$msg .= $lastErr;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return \"$msg\\n\";\n    };\n    ```", "```php\n    $pattern = '/\\8+/';\n    $string\u00a0\u00a0= 'test 8';\n    echo $pregTest($pattern, $string);\n    ```", "```php\n    $pattern = '/(?:\\D+|<\\d+>)*[!?]/';\n    $string\u00a0\u00a0= 'test ';\n    echo $pregTest($pattern, $string);\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch07 ]# php php7_pcre.php \nRESULT: MATCH\nERROR : 2\n```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# php php7_pcre.php \nPHP Warning:\u00a0\u00a0preg_match(): Compilation failed: reference to non-existent subpattern at offset 1 in /repo/ch07/php7_pcre.php on line 5\nERROR : Internal error\nERROR : Backtrack limit exhausted\n```", "```php\n    $dt = new DateTime('tomorrow');\n    $pt = [IntlDateFormatter::RELATIVE_FULL,\n    \u00a0\u00a0\u00a0\u00a0IntlDateFormatter::RELATIVE_LONG,\n    \u00a0\u00a0\u00a0\u00a0IntlDateFormatter::RELATIVE_MEDIUM,\n    \u00a0\u00a0\u00a0\u00a0IntlDateFormatter::RELATIVE_SHORT\n    ];\n    ```", "```php\n    foreach ($pt as $fmt) \n    \u00a0\u00a0\u00a0\u00a0echo IntlDateFormatter::formatObject($dt, $fmt).\"\\n\";\n    ```", "```php\nroot@php8_tips_php8 [ /repo/ch07 ]# \nphp php8_intl_date_fmt.php \ntomorrow at 12:00:00 AM Coordinated Universal Time\ntomorrow at 12:00:00 AM UTC\ntomorrow, 12:00:00 AM\ntomorrow, 12:00 AM\n```"]