- en: Chapter 6. Understanding Git, the NetBeans Way
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。了解Git，NetBeans方式
- en: Commit early and commit often.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽早提交，经常提交。
- en: 'In this chapter, we will introduce the version control system, to manage the
    changes in our source code. To do this, we will learn to use **Git**, a free and
    open source-distributed version control system. We will use Git from NetBeans
    in a step-by-step manner. In particular, we will discuss the following issues:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍版本控制系统，以管理我们源代码中的更改。为此，我们将学习使用**Git**，一个免费的开源分布式版本控制系统。我们将逐步从NetBeans中使用Git。特别是，我们将讨论以下问题：
- en: Version control system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制系统
- en: '**Distributed Version Control System** (**DVCS**)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式版本控制系统**（**DVCS**）'
- en: Git—the fast and distributed version control system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git-快速和分布式版本控制系统
- en: Initializing a Git repository
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化Git存储库
- en: Cloning a Git repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆Git存储库
- en: Staging files into a Git repository
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件暂存到Git存储库
- en: Committing changes to a Git repository
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将更改提交到Git存储库
- en: Comparing file revisions, and reverting changes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较文件修订版，并恢复更改
- en: Working with remote repositories—fetching, pulling, and pushing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与远程存储库一起工作-获取、拉取和推送
- en: Working with branches—creating, checking out, switching, merging, and deleting
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分支-创建、检出、切换、合并和删除
- en: Version control system
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制系统
- en: A version control system (an aspect of **Source Code Management** or **SCM)**
    is a combination of technologies and practices for tracking and controlling changes
    to a project's files, particularly for source code, documentation, and web pages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统（**源代码管理**或**SCM**的一个方面）是一种技术和实践的组合，用于跟踪和控制对项目文件的更改，特别是对于源代码、文档和网页。
- en: The reason version control is so universal is that it helps with virtually every
    aspect of running a project—inter-developer communications, release management,
    bug management, code stability and experimental development efforts, and attribution
    and authorization of changes by particular developers. The version control system
    provides a central coordinating force among all of these areas.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制如此普遍的原因是它几乎涵盖了项目运行的每个方面-开发者之间的沟通、发布管理、错误管理、代码稳定性和实验性开发工作，以及特定开发人员的更改归因和授权。版本控制系统在所有这些领域提供了一个中央协调力量。
- en: The core activity of version control is **change management**—identifying each
    discrete change made to the project's files, annotating each change with its metadata,
    such as the timestamp and author of the change, and then replaying these facts
    to whoever asks, in whatever way they ask. It is a communications mechanism where
    a change is the basic unit of information, and such changes can be compared and
    restored with some types of merged files.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制的核心活动是**变更管理**-识别对项目文件所做的每个离散更改，用其元数据注释每个更改，例如更改的时间戳和作者，然后以任何方式回放这些事实给询问的人。这是一种通信机制，其中变更是信息的基本单元，这些变更可以与某些类型的合并文件进行比较和恢复。
- en: '![Version control system](graphics/5801_06_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![版本控制系统](graphics/5801_06_01.jpg)'
- en: 'Now let''s discuss the common version control system terminologies:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论常见的版本控制系统术语：
- en: '**Repository:** The repository, also known as **repo**, is where the file''s
    current and historical data is stored. At the core of the version control system
    is the repository, which can have centralized or distributed storage of that system''s
    data. The repository usually stores the information in the form of a filesystem
    tree, which is a hierarchy of files and directories.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库：**存储库，也称为**repo**，是文件的当前和历史数据存储的地方。版本控制系统的核心是存储库，该存储库可以集中或分布式存储该系统的数据。存储库通常以文件系统树的形式存储信息，这是文件和目录的层次结构。'
- en: '**Working copy:** A working copy is a developer''s private directory tree,
    containing the project''s source code files and possibly its web pages, or other
    documents. A working copy also contains a little bit of metadata managed by the
    version control system, telling the working copy what repository it comes from,
    what "revisions" of the files are present, and so on. Generally, each developer
    has his own working copy, in which he makes and tests the changes, and from which
    he commits.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作副本：**工作副本是开发者的私有目录树，包含项目的源代码文件，可能还包括其网页或其他文档。工作副本还包含一些由版本控制系统管理的元数据，告诉工作副本来自哪个存储库，文件的“修订版”是什么，等等。通常，每个开发者都有自己的工作副本，他在其中进行更改和测试，并从中提交。'
- en: In decentralized version control systems, each working copy is a repository
    in itself, and the changes can be pushed out to (or pulled into) any repository
    that's willing to accept them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在分散式版本控制系统中，每个工作副本本身就是一个存储库，更改可以推送到（或拉入）任何愿意接受它们的存储库。
- en: '**Working tree:** This is the tree of actual, checked-out files. The working
    tree is normally equal to HEAD, plus any local changes that you have made, but
    not yet committed.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作树：**这是实际的、已检出的文件树。工作树通常等于HEAD，再加上您所做的但尚未提交的本地更改。'
- en: '**Origin:** This refers to the original repository, or the default, upstream
    repository. Most projects have at least one upstream project, which they track.
    By default, origin is used for this purpose.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Origin：**这指的是原始存储库，或默认的上游存储库。大多数项目至少有一个上游项目进行跟踪。默认情况下，origin用于此目的。'
- en: '**Master:** This refers to the default development branch.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Master：**这指的是默认的开发分支。'
- en: '**HEAD:** This is the latest version in a branch.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HEAD：**这是分支中的最新版本。'
- en: '**Commit:** This is used for making a change to the project; more formally,
    to store a change in the version control database in such a way that it can be
    incorporated into the future releases of the project referred to as commit. A
    commit creates a new version that is essentially a snapshot of the file(s) in
    your project at a particular point in time.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交：**用于对项目进行更改；更正式地说，以一种可以合并到项目未来发布中的方式将更改存储在版本控制数据库中。提交创建一个新版本，本质上是项目中文件的快照在特定时间点上。'
- en: '**Index:** This is a collection of files with stat information, whose contents
    are stored.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引：**这是一个带有统计信息的文件集，其内容被存储。'
- en: The index is used as a staging area between your working directory and your
    repository. You can use the index to build up a set of changes that you want to
    commit together. When you create a commit, what is committed is what is currently
    in the index, not what is in your working directory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 索引被用作工作目录和存储库之间的暂存区。您可以使用索引来积累一组要一起提交的更改。当您创建一个提交时，提交的是当前在索引中的内容，而不是在您的工作目录中的内容。
- en: '**Revision:** A "revision" is usually a specific incarnation of one particular
    file or directory. For example, if the project starts out with revision `6` of
    file `F`, and then someone commits a change to `F`, this produces revision `7`
    of `F`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修订：**“修订”通常是指特定文件或目录的特定版本。例如，如果项目从文件`F`的修订`6`开始，然后有人对`F`进行了更改，这将产生`F`的修订`7`。'
- en: '**Checkout:** Checkout is the process of obtaining a copy of the project, file,
    revision, and so on from a repository. A checkout usually produces a directory
    tree called a "working copy", from which changes may be committed back to the
    original repository.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检出：**检出是从存储库获取项目、文件、修订等的过程。检出通常会生成一个名为“工作副本”的目录树，可以将更改提交回原始存储库。'
- en: '**Branch:** This is a copy of the project, under version control, but isolated,
    so that changes made to the branch don''t affect the rest of the project. Branches
    are also known as **lines of development**. Even when a project has no explicit
    branches, development is still considered to be happening on the "main branch",
    also known as the "main line" or "trunk".'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支：**这是项目的一个副本，在版本控制下，但是被隔离了，所以对分支的更改不会影响项目的其余部分。分支也被称为**开发线**。即使项目没有明确的分支，开发仍然被认为是在“主分支”上进行的，也被称为“主线”或“主干”。'
- en: '**Merge:** Merge requires copying a change from one branch to another. This
    involves merging from the main trunk to some other branch, or vice versa.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并：**合并需要将一个分支的更改复制到另一个分支。这涉及从主干到其他分支的合并，或者反之亦然。'
- en: Merge has a second related meaning—it is what the version control system does
    when it sees that two people have changed the same file but in non-overlapping
    ways. Since the two changes do not interfere with each other, when one person
    updates their copy of the file (already containing their own changes), the other
    person's changes will automatically be merged in. This is very common, especially
    on projects where multiple people are hacking into the same code. When two different
    changes do overlap, the result is a **conflict.**
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 合并还有第二个相关的含义——当版本控制系统发现两个人以非重叠方式更改了同一个文件时，它会执行合并。由于这两个更改不会相互干扰，当一个人更新他们的文件副本（已包含他们自己的更改）时，另一个人的更改将自动合并进来。这是非常常见的，特别是在多人同时修改同一代码的项目中。当两个不同的更改重叠时，结果就是**冲突**。
- en: '**Conflict:** This is what happens when two people try to make different changes
    to the same area in the code. All version control systems automatically detect
    conflicts and notify at least one of the humans involved that their changes conflict
    with someone else''s. It is then up to that human to resolve the conflict and
    communicate that resolution to the version control system.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冲突：**当两个人试图对代码中的同一区域进行不同的更改时，就会发生冲突。所有版本控制系统都会自动检测冲突，并通知至少一个涉及的人，他们的更改与其他人的冲突。然后由该人解决冲突并将解决方案通知给版本控制系统。'
- en: '**Revert:** To roll back to the previous revision, we do revert changes; that
    is, we throw away the changes and return to the point of the last update. This
    is handy when you''ve broken your local build and are unable to figure out how
    to get it working again. Sometimes reverting is faster than debugging, especially
    if you have checked in recently.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**还原：**为了回滚到上一个修订版本，我们会还原更改；也就是说，我们放弃更改并返回到上次更新的点。当你破坏了本地构建并且无法弄清楚如何让它再次工作时，这是很方便的。有时候还原比调试更快，特别是如果你最近已经检查过。'
- en: '**Diff:** This is a viewable representation of a change, and it shows which
    lines were changed and how, plus a few lines of surrounding context on either
    side. A developer who is already familiar with some code can usually read a diff
    against that code, understand what the change did, and even spot bugs.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**差异：**这是一个可查看的更改表示，它显示了哪些行发生了更改，以及如何更改，以及两侧周围上下文的几行。已经熟悉某些代码的开发人员通常可以阅读针对该代码的差异，理解更改的作用，甚至发现错误。'
- en: '**Tag:** A tag is a label for a particular collection of files at specified
    revisions. Tags are usually used to preserve interesting snapshots of the project.
    For example, a tag is usually made for each public release, so that one can obtain,
    directly from the version control system, the exact set of files/revisions comprising
    that release.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签：**标签是指定修订的特定文件集的标签。标签通常用于保留项目的有趣快照。例如，通常为每个公共发布制作一个标签，以便可以直接从版本控制系统获取组成该发布的确切文件/修订。'
- en: Distributed version control
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式版本控制
- en: Some version control systems are centralized—there is a single master repository,
    which stores all the changes made to the project. Others are decentralized—each
    developer has their own repository, and changes can be swapped back and forth
    between repositories, arbitrarily.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一些版本控制系统是集中式的——有一个单一的主存储库，存储了对项目所做的所有更改。其他是分散式的——每个开发者都有自己的存储库，更改可以在存储库之间任意交换。
- en: In distributed version control systems (such as Git, Mercurial, or Bazaar),
    developers (clients) don't just check out the latest snapshot of the files, but
    also fully mirror the repository.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式版本控制系统（如Git、Mercurial或Bazaar）中，开发者（客户端）不仅仅是检出文件的最新快照，还完全镜像存储库。
- en: 'Lets have look at the distributed version control schematic diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下分布式版本控制的示意图：
- en: '![Distributed version control](graphics/5801_06_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![分布式版本控制](graphics/5801_06_02.jpg)'
- en: Git the fast and distributed version control system
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git快速分布式版本控制系统
- en: Git is a free and open source distributed version control system, designed to
    handle everything from small to very large projects with speed and efficiency.
    In Git, you can have your own local repository and nearly all the operations in
    local.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个免费的开源分布式版本控制系统，旨在以速度和效率处理从小型到非常大型的项目。在Git中，您可以拥有自己的本地存储库，并几乎所有操作都在本地进行。
- en: Every Git clone is a fully-fledged repository with a complete history and full
    revision-tracking capabilities, which are not dependent on network access or a
    central server. Branching and merging are fast and easy to do.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Git克隆都是一个完整的存储库，具有完整的历史记录和完整的修订跟踪功能，不依赖于网络访问或中央服务器。分支和合并都很快且易于操作。
- en: Git is used for the version control of files, much like tools such as Mercurial,
    Subversion, CVS, Perforce ([http://git-scm.com/](http://git-scm.com/)).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Git用于对文件进行版本控制，类似于Mercurial、Subversion、CVS、Perforce等工具（[http://git-scm.com/](http://git-scm.com/)）。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Git was initially designed and developed by *Linus Torvalds* for Linux kernel
    development.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Git最初是由*Linus Torvalds*为Linux内核开发而设计和开发的。
- en: Understanding Git, the NetBeans way
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Git，NetBeans的方式
- en: The NetBeans IDE provides excellent support for the Git version control client.
    The IDE's Git support allows you to perform versioning tasks directly from your
    project within the IDE. You can have the Git repository in two approaches, where
    the first one takes an existing project or directory and imports it into Git,
    and the second one clones an existing Git repository from another server computer.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans IDE为Git版本控制客户端提供了出色的支持。IDE的Git支持允许您直接从IDE中的项目执行版本控制任务。您可以通过两种方法拥有Git存储库，第一种方法是将现有项目或目录导入Git，第二种方法是从另一台服务器计算机克隆现有的Git存储库。
- en: In our upcoming sections, using NetBeans, we will try to initiate a Git repository
    and learn how to clone a Git repository. To do this, we will create a sample NetBeans
    project named `Chapter6` with the project metadata stored in a separate directory,
    as we don't need the project metadata under version control, and will practice
    in the project directory.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用NetBeans尝试初始化一个Git存储库，并学习如何克隆一个Git存储库。为此，我们将创建一个名为`Chapter6`的示例NetBeans项目，其中项目元数据存储在一个单独的目录中，因为我们不需要将项目元数据纳入版本控制，并将在项目目录中进行练习。
- en: Initializing a Git repository
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化Git存储库
- en: If you are starting to track an existing project in Git, or want your existing
    project under version control, then you want to initiate the Git repository.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要在Git中跟踪现有项目，或者希望将现有项目纳入版本控制，则需要初始化Git存储库。
- en: Time for action — initializing a Git repository
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间-初始化Git存储库
- en: 'To initialize a Git repository from your existing project or source files,
    which are not under version control yet, you can go through the following steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要从现有项目或尚未纳入版本控制的源文件初始化Git存储库，可以按照以下步骤进行：
- en: Right-click on the project `Chapter6`, and select **Versioning | Initialize
    Git Repository** from the context menu.![Time for action — initializing a Git
    repository](graphics/5801_06_03.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目`Chapter6`，然后从上下文菜单中选择**版本控制|初始化Git存储库**。![操作时间-初始化Git存储库](graphics/5801_06_03.jpg)
- en: Now, specify the directory path where the repository will be created in the
    **Initialize a Git Repository** dialog box. In our case, we choose the same project
    path.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**初始化Git存储库**对话框中指定存储库将被创建的目录路径。在我们的情况下，我们选择相同的项目路径。
- en: Click on **OK** and you can check the repository creation progress or status
    in the **Output** window (*Ctrl*+*4*) as follows:![Time for action — initializing
    a Git repository](graphics/5801_06_04.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**，您可以在**输出**窗口（*Ctrl*+*4*）中检查存储库创建的进度或状态，如下所示：![操作时间-初始化Git存储库](graphics/5801_06_04.jpg)
- en: A `.git` subdirectory will be created under your project directory, where all
    the data of your project snapshots is stored. Git starts versioning all the files
    in the specified directory.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的项目目录下将创建一个`.git`子目录，其中存储了项目快照的所有数据。Git开始对指定目录中的所有文件进行版本控制。
- en: 'You can see that all the project file(s) are marked as `-/Added` in the project
    tree. To view a file status, just hover on the filename, as shown in the following
    screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到项目文件都标记为`-/Added`。要查看文件状态，只需将鼠标悬停在文件名上，如下截图所示：
- en: '![Time for action — initializing a Git repository](graphics/5801_06_05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间-初始化Git存储库](graphics/5801_06_05.jpg)'
- en: We can see that the file status has been displayed in green, to the right of
    the slash.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到文件状态显示为绿色，位于斜杠右侧。
- en: Also note that the newly added lines inside the `index.php` file are marked
    with green, as shown in the previous screenshot. You can see the number of added
    lines since the earlier version, hovering on the green highlights. As soon as
    the Git repository is created, all the options for Git from the IDE can be available
    directly under the **Team** menu or the **Team | Git** submenu for the current
    project.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，`index.php`文件中新增的行以绿色标记，如前面的截图所示。您可以在绿色高亮上悬停以查看自上一版本以来新增的行数。一旦Git存储库创建完成，IDE中的所有Git选项都可以直接在**团队**菜单或当前项目的**团队|Git**子菜单下使用。
- en: What just happened?
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We have successfully initialized the Git repository for placing our existing
    project files under version control using NetBeans. Thus, we have our own fully-fledged
    local Git repository.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功使用NetBeans初始化了Git存储库，将现有项目文件纳入版本控制。因此，我们拥有了自己的完整的本地Git存储库。
- en: To work with remote repositories, you may add a remote Git repository as the
    origin of this initialized repo. In this way, you can perform a remote repository
    syncing with your local repository. Now, we can add files or directly commit them
    to the local Git repository; but before that, let's try the second approach with
    cloning a Git repository. Note that along with cloning a repository, we may also
    create another new project.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用远程仓库，您可以将远程Git仓库添加为此初始化仓库的源。这样，您可以将本地仓库与远程仓库同步。现在，我们可以添加文件或直接将它们提交到本地Git仓库；但在此之前，让我们尝试通过克隆Git仓库的第二种方法。请注意，除了克隆仓库，我们还可以创建另一个新项目。
- en: Cloning a Git repository
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆Git仓库
- en: Say you have been added as a collaborator into an existing project maintained
    under Git. If you want to get a copy of an existing Git repository or a project
    you would like to contribute to, you will need a Git clone of that repo for it.
    A direct collaborator is a trusted and experienced developer added by the repository
    owner, who contributes to the project and can perform regular Git operations into
    the original repository.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已被添加为Git下维护的现有项目的合作者。如果您想获取现有Git仓库的副本或者您想要贡献的项目，您将需要该仓库的Git克隆。直接合作者是由仓库所有者添加的值得信赖的有经验的开发者，他们为项目做出贡献并可以在原始仓库中执行常规的Git操作。
- en: For this tutorial, we have already created a Git repository at GitHub.com (free
    Git hosting) named `chapter6demo` ([https://github.com/mahtonu/chapter6demo](https://github.com/mahtonu/chapter6demo)),
    and for test purposes, we have added another account as a collaborator over there.
    Now, we are going to clone that repository from GitHub.com and practice regular
    Git features from the NetBeans IDE using that collaborator account. To clone via
    SSH and to perform as a collaborator on a GitHub project, you need a GitHub account,
    and need to be added as a member into the project by the corresponding project
    owner.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们已经在GitHub.com（免费的Git托管）上创建了一个名为`chapter6demo`的Git仓库（[https://github.com/mahtonu/chapter6demo](https://github.com/mahtonu/chapter6demo)），并且为测试目的，我们已经将另一个账户添加为合作者。现在，我们将从GitHub.com克隆该仓库，并使用合作者账户在NetBeans
    IDE中练习常规的Git功能。要通过SSH进行克隆并作为GitHub项目的合作者，您需要一个GitHub账户，并且需要被相应项目所有者添加为项目成员。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To host your source code at GitHub.com, sign up and create your own repository
    over there.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要在GitHub.com上托管您的源代码，请注册并在那里创建您自己的仓库。
- en: Also, you need to add your public key at **Settings | SSH keys** ([https://github.com/settings/ssh](https://github.com/settings/ssh))
    for Git operations via **Secure Shell** (**SSH**), from your computer.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您需要在**设置 | SSH密钥**（[https://github.com/settings/ssh](https://github.com/settings/ssh)）中添加您的公钥，以便从您的计算机通过**安全外壳**（**SSH**）进行Git操作。
- en: For Windows OS, you may use **PuTTYgen** ([http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html))
    to generate your keys, and must convert them into the **OpenSSH** format before
    using them in the IDE.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows操作系统，您可以使用**PuTTYgen** ([http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html))
    生成您的密钥，并且在IDE中使用之前必须将其转换为**OpenSSH**格式。
- en: Before proceeding with the following tutorial, you may create a sample repository
    at GitHub and add another GitHub test account as collaborator into the repository
    (from **ADMIN | Collaborators)**, and remember to add Public keys for those corresponding
    accounts.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行以下教程之前，您可以在GitHub上创建一个示例仓库，并将另一个GitHub测试账户添加为合作者（从**ADMIN | Collaborators)**，并记得为这些相应的账户添加公钥。
- en: Time for action — cloning a Git repository from GitHub via the SSH protocol
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间-通过SSH协议从GitHub克隆Git仓库
- en: 'For this tutorial, we will act as a collaborator to that GitHub project, and
    have our own SSH public key added to the GitHub account. We will add our SSH private
    key using NetBeans. Along with repository cloning, NetBeans provides the option
    to create a fresh new project:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将作为GitHub项目的合作者，并且我们的SSH公钥已添加到GitHub账户中。我们将使用NetBeans添加我们的SSH私钥。除了仓库克隆，NetBeans还提供了创建一个全新项目的选项：
- en: Select **Team | Git | Clone...**, and the **Clone Repository** wizard will be
    displayed.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Team | Git | Clone...**，将显示**克隆仓库**向导。
- en: Specify the path to the repository required in the **Repository URL** field,
    for example `git@github.com:mahtonu/chapter6demo.git`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**仓库URL**字段中指定所需仓库的路径，例如`git@github.com:mahtonu/chapter6demo.git`。
- en: Verify that **Username** is `git`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证**用户名**为`git`。
- en: Browse the **Private Key File** location.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览**私钥文件**的位置。
- en: Add **Passphrase**, which you created during the key generation, and (optionally)
    select the **Save Passphrase** checkbox. The **Remote Repository** page at the
    **Clone Repository** wizard looks similar to the following screenshot:![Time for
    action — cloning a Git repository from GitHub via the SSH protocol](graphics/5801_06_06.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加在密钥生成期间创建的**Passphrase**，并（可选）选择**保存Passphrase**复选框。**克隆仓库**向导中的**远程仓库**页面看起来类似于以下截图：![操作时间-通过SSH协议从GitHub克隆Git仓库](graphics/5801_06_06.jpg)
- en: Click on **Next**, and select the repository branch that needs to be fetched
    (downloaded) to your local repository at the **Remote Branches** page, for example,
    `master`.![Time for action — cloning a Git repository from GitHub via the SSH
    protocol](graphics/5801_06_07.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，并在**远程分支**页面选择需要获取（下载）到本地仓库的仓库分支，例如`master`。![操作时间-通过SSH协议从GitHub克隆Git仓库](graphics/5801_06_07.jpg)
- en: Click on **Next**, and fill in or browse the **Parent Directory** where the
    clone directory will be placed at the **Destination Directory** page. The repository
    name is filled in the **Clone Name** field automatically, which will be the local
    clone directory name.![Time for action — cloning a Git repository from GitHub
    via the SSH protocol](graphics/5801_06_08.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**，并填写或浏览**父目录**，克隆目录将放置在**目标目录**页面。仓库名称会自动填写在**克隆名称**字段中，这将是本地克隆目录的名称。![操作时间-通过SSH协议从GitHub克隆Git仓库](graphics/5801_06_08.jpg)
- en: In this screenshot, **Checkout Branch** is set to `master*` by default, and
    **Remote Name** is set to `origin`, which means that it is the original repository
    that we are going to clone. Also, leave the **Scan for NetBeans Projects after
    Clone** checkbox checked.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此屏幕截图中，默认情况下**Checkout Branch**设置为`master*`，**Remote Name**设置为`origin`，这意味着这是我们要克隆的原始存储库。同时，保持**克隆后扫描NetBeans项目**复选框选中。
- en: Click on **Finish** and see what is happening in the NetBeans **Output** window.
    You will be prompted to create a new NetBeans project from the cloned source,
    as shown in the following screenshot:![Time for action — cloning a Git repository
    from GitHub via the SSH protocol](graphics/5801_06_09.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**完成**，看看NetBeans **输出** 窗口中发生了什么。您将被提示从克隆源创建一个新的NetBeans项目，如下面的屏幕截图所示：![行动时间——通过SSH协议从GitHub克隆Git存储库](graphics/5801_06_09.jpg)
- en: We created the NetBeans project from the cloned source as well, by selecting
    **New Project** with the existing sources option and storing the NetBeans project
    metadata into a separate directory, as we don't want them to be under Git. Also,
    you will find a single `README` file inside the project, which is already tracked
    and comes from the remote origin repository.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还从克隆的源中创建了NetBeans项目，方法是选择**新项目**并选择现有源选项，并将NetBeans项目元数据存储到单独的目录中，因为我们不希望它们在Git下。此外，您将在项目中找到一个`README`文件，它已经被跟踪，并来自远程源存储库。
- en: What just happened?
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We have cloned a repository via the SSH protocol, using NetBeans. Each of these
    clones acts as a fully-fledged repo, and a `.git` directory inside them contains
    all the revision information. So, now we have a working local repository and can
    work with the remote origin as well. What we have done is added one of our GitHub
    accounts into a GitHub project as the collaborator, and as we got access to that
    project, we cloned it from there using the NetBeans IDE. You can perform most
    Git operations from the IDE, and the results of these operations can be seen in
    the **Output** window.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过NetBeans使用SSH协议克隆了一个存储库。这些克隆中的每一个都充当一个完全成熟的存储库，它们内部包含所有的修订信息。因此，现在我们有一个可用的本地存储库，并且也可以使用远程源。我们已经将我们的GitHub帐户之一添加到GitHub项目中作为协作者，因为我们获得了对该项目的访问权限，所以我们使用NetBeans
    IDE从那里克隆了它。您可以从IDE执行大多数Git操作，并且可以在**输出**窗口中看到这些操作的结果。
- en: From this point, we will learn to use Git operations from the IDE. The next
    sections are illustrated from a collaborator's perspective of adding, editing,
    comparing, committing files, pushing changes to remote, and so on.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，我们将学习如何从IDE使用Git操作。接下来的部分是从协作者的角度进行说明，包括添加、编辑、比较、提交文件、推送更改到远程等等。
- en: Pop quiz — understanding Git
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验——理解Git
- en: Which is the correct feature of Git?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个是Git的正确功能？
- en: Distributed version control system
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分布式版本控制系统
- en: Issue tracker
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 问题跟踪器
- en: Centralized repository
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集中式存储库
- en: Always network dependent
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 始终依赖网络
- en: Which is not a Git repository feature?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个不是Git存储库的功能？
- en: Each Git clone is a fully-fledged repository
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个Git克隆都是一个完全成熟的存储库
- en: A local Git repository is the subset of the original repository
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地Git存储库是原始存储库的子集
- en: All the commits are local
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有提交都是本地的
- en: May have a remote origin
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可能有一个远程源
- en: In our preceding section, which key file was added into the IDE?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们之前的部分中，哪个关键文件被添加到IDE中？
- en: Public Key file
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 公钥文件
- en: Private Key file
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 私钥文件
- en: Both the key files
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个关键文件
- en: Open SSH file
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开SSH文件
- en: What will be the file status symbol in the context of a repository in the NetBeans
    IDE for a newly created file?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在NetBeans IDE中，对于新创建的文件，在存储库的上下文中，文件状态符号将是什么？
- en: '`Added/-`'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`已添加/-`'
- en: '`-/Added`'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-/已添加`'
- en: '`Added/+`'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`已添加/+`'
- en: '`+/Added`'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`+/已添加`'
- en: Staging files to a Git repository
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将文件分段到Git存储库
- en: To start tracking a new file and also to stage changes to an already tracked
    file in the Git repository, you want to add it to the repository. **Staging**
    means adding new or modified files under Git for *"changes to be committed"*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始跟踪新文件，并且还要对Git存储库中已经跟踪的文件进行分段更改，您需要将其添加到存储库中。**分段**意味着在Git下添加新文件或修改文件以进行“待提交的更改”。
- en: When adding files to a Git repository, the IDE first composes and saves snapshots
    of your project in the **Index**. After you perform the commit, the IDE saves
    these snapshots in the HEAD.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件添加到Git存储库时，IDE首先在**索引**中组合和保存项目的快照。在执行提交后，IDE将这些快照保存在HEAD中。
- en: Time for action — staging files to a Git repository
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——将文件分段到Git存储库
- en: 'In this tutorial, we will learn how to stage files to our local Git repository.
    Staging is the state to add the changes to be committed. The following files can
    be called staged files:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何将文件分段到我们的本地Git存储库。分段是将更改添加到待提交状态。以下文件可以称为分段文件：
- en: A newly created file added to the repository
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向存储库添加了一个新创建的文件
- en: An existing file modified and added to the repository
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改并添加到存储库的现有文件
- en: 'First, we will add a newly created file to the repo, and then we will add a
    modified file to repo:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将向存储库添加一个新创建的文件，然后我们将向存储库添加一个修改后的文件：
- en: First of all, we will open the **Show Changes** viewer window of NetBeans Git.
    Right-click on the `chapter6demo` project node, and select **Git | Show Changes**.
    NetBeans will scan the repository and show any changes in the window. Now, any
    changes into the repository can be viewable in real time from this window.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将打开NetBeans Git的**显示更改**查看器窗口。右键单击`chapter6demo`项目节点，然后选择**Git | 显示更改**。NetBeans将扫描存储库并在窗口中显示任何更改。现在，可以实时从此窗口查看存储库中的任何更改。
- en: Now, add a new file into the NetBeans project in the usual way, which is `test.php`.
    You can see that the new `test.php` file is opened into the editor; hovering on
    the filename at the **Projects** pane shows the file status for Git.![Time for
    action — staging files to a Git repository](graphics/5801_06_10.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，以通常的方式将一个新文件添加到NetBeans项目中，即`test.php`。您可以看到新的`test.php`文件已经在编辑器中打开；在**项目**窗格上悬停在文件名上会显示Git的文件状态。![行动时间——将文件分段到Git存储库](graphics/5801_06_10.jpg)
- en: In this screenshot, we can see that the bottom of the Git window shows `test.php`
    as the newly added file, denoted as `-/Added`, which means that it's not added
    to the repo yet.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到Git窗口底部显示`test.php`作为新添加的文件，标记为`-/Added`，这意味着它尚未添加到仓库中。
- en: Right-click on `test.php`, and select **Git | Add** from the context menu. Now,
    the `test.php` file is available or can be tracked under Git. You can see the
    file status at the Git window as `Added/-`, which means that the file is ready
    to be committed or has been staged. Also, you can see the output window showing
    the Git operation status as well.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`test.php`，然后从上下文菜单中选择**Git | Add**。现在，`test.php`文件可以在Git下进行跟踪。您可以在Git窗口中看到文件状态为`Added/-`，这意味着文件已准备好提交或已暂存。此外，您还可以在输出窗口中查看Git操作状态。
- en: Now, we will open the existing `README` file, try to add some lines within it,
    and save it, to watch the effect it has in the local repository. Note that the
    file comes from the original remote repository. We can also view any changes in
    the Git window instantly.![Time for action — staging files to a Git repository](graphics/5801_06_11.jpg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将打开现有的`README`文件，尝试在其中添加一些行，并保存，以观察其在本地仓库中的影响。请注意，该文件来自原始远程仓库。我们还可以立即在Git窗口中查看任何更改。![操作时间-将文件暂存到Git仓库](graphics/5801_06_11.jpg)
- en: In this screenshot, we can see that a new line added to the file (marked in
    green) at the beginning states that the new line has been added from the earlier
    version. Also, at the Git window, you can see that the file status shows as `-/Modified`,
    which means the file has been modified but not added for staging yet.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个截图中，我们可以看到文件中添加了一行新行（标记为绿色），开头说明新行已从较早版本添加。此外，在Git窗口中，您可以看到文件状态显示为`-/Modified`，这意味着文件已被修改，但尚未添加到暂存区。
- en: Right-click on **README**, and select **Git | Add** from the context menu. Now,
    the `README` file changes have been staged for commit. You can see the file status
    in the Git window as `Modified/-`, which means the file is either ready to be
    committed or has been staged. Note that each time you finish the modification
    of the file, you can repeat the step to stage the changes for the next commit.
    Also, the modified filename becomes blue, and the newly added filename becomes
    green within the NetBeans **Projects** pane.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**README**，然后从上下文菜单中选择**Git | Add**。现在，`README`文件的更改已经暂存以进行提交。您可以在Git窗口中看到文件状态为`Modified/-`，这意味着文件已准备好提交或已暂存。请注意，每次完成文件的修改后，您都可以重复此步骤，以将更改暂存以进行下一次提交。此外，修改后的文件名在NetBeans
    **Projects**窗格中变为蓝色，新添加的文件名变为绿色。
- en: What just happened?
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just learned how to stage files for the changes done so far, which are to
    be committed in the local repository. So, each time we have some changes, we may
    apply **Git | Add** to those files, in order to make them available for the next
    commit. Also, we have seen that the Git window shows the real-time status of the
    files in contrast to that of the repository.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学习了如何为本地仓库中已做的更改暂存文件，这些更改将被提交。因此，每次有更改时，我们可以对这些文件应用**Git | Add**，以便使它们可以用于下一次提交。此外，我们已经看到Git窗口显示了文件的实时状态，与仓库的状态相对比。
- en: Note that the **Team** menu contains all the options immediately under it for
    that particular versioning system in use for the active project. For example,
    in our case, we can see that all the Git options are available under both the
    **Team** menu and the **Team | Git** submenu.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**Team**菜单包含了用于当前项目所使用的特定版本控制系统的所有选项。例如，在我们的情况下，我们可以看到所有Git选项都在**Team**菜单和**Team
    | Git**子菜单下都可用。
- en: Viewing changes in the source editor
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在源代码编辑器中查看更改
- en: 'When you have a versioned file open in the IDE''s source editor, you can view
    real-time changes occurring to your file as you modify it against the base version
    from the Git repository. As you work, the IDE uses color codes in the source editor''s
    margins to convey the following information:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在IDE的源代码编辑器中打开一个有版本的文件时，您可以在修改文件时查看文件发生的实时变化，与Git仓库中的基本版本进行对比。当您工作时，IDE会在源代码编辑器的边距中使用颜色代码传达以下信息：
- en: 'Blue: Indicates lines that have been changed since the earlier revision'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝色：表示自较早版本以来已更改的行
- en: 'Green: Indicates lines that have been added since the earlier revision'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绿色：表示自较早版本以来已添加的行
- en: 'Red: Indicates lines that have been removed since the earlier revision'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 红色：表示自较早版本以来已删除的行
- en: The source editor's left margin shows changes occurring on a line-by-line basis.
    When you modify a given line, changes are immediately shown in the left margin.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码编辑器的左边缘显示了逐行发生的更改。当您修改给定行时，更改会立即显示在左边缘中。
- en: The source editor's right margin provides you with an overview, which displays
    changes made to your file as a whole, from top to bottom. Color coding is immediately
    generated when you make changes to your file. You can click on a specific point
    within the right margin to bring your inline cursor immediately to that location
    in the file.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码编辑器的右边缘为您提供了一个概览，显示了对文件的整体所做的更改，从上到下。当您对文件进行更改时，颜色编码会立即生成。您可以在右边缘的特定位置单击，立即将内联光标移动到文件中的该位置。
- en: Git window
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git窗口
- en: 'You have already seen a real-time list of all of the changes made to the files
    within a selected folder of your local working tree in the Git window, as shown
    in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经在Git窗口中实时查看了本地工作树中所选文件夹中文件的所有更改的列表，如下截图所示：
- en: '![Git window](graphics/5801_06_12.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![Git窗口](graphics/5801_06_12.jpg)'
- en: In this versioning window, you can see a toolbar with buttons, which enables
    you to invoke the most common Git tasks on all files displayed in the list. Using
    the buttons in the toolbar, you can choose to display the list of files that have
    differences in either the Index or the HEAD, the working tree and the Index, or
    the working tree and the HEAD. You can also click on the column headings above
    the listed files, to sort the files by name, status, or location.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在此版本窗口中，您可以看到带有按钮的工具栏，它使您能够在列表中显示的所有文件上调用最常见的Git任务。使用工具栏中的按钮，您可以选择显示在索引或HEAD中具有差异的文件列表，工作树和索引中的文件，或工作树和HEAD中的文件。您还可以单击列标题，按名称、状态或位置对文件进行排序。
- en: Have a go hero — unstaging a staged file
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下-取消暂存的文件
- en: Let's say that you have changed two files and want to commit them as two separate
    changes, but unintentionally staged them both. Try to unstage a staged file using
    **Team | Git | Reset...**; you may reset the HEAD from there.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已更改了两个文件，并希望将它们作为两个单独的更改提交，但无意中将它们都暂存了。尝试使用“Team | Git | Reset...”取消暂存的文件；您可以从那里重置HEAD。
- en: Committing changes to the repository
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交更改到存储库
- en: In this section, we will learn how to commit changes that have been staged.
    The changes made in the previous section will be committed into the local repository.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何提交已暂存的更改。在上一节中所做的更改将提交到本地存储库中。
- en: Time for action — committing changes to the local repository
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-将更改提交到本地存储库
- en: 'To commit changes to the local repository, go through the following steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要将更改提交到本地存储库，请按照以下步骤进行：
- en: Select the file you want to commit to your local repository; that is `test.php`.
    Right-click on them and select **Git | Commit...** from the context menu. The
    commit dialog box will be displayed, as shown in the following screenshot:![Time
    for action — committing changes to the local repository](graphics/5801_06_13.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要提交到本地存储库的文件；即“test.php”。右键单击它们，然后从上下文菜单中选择“Git | Commit...”。将显示提交对话框，如下图所示：![行动时间-将更改提交到本地存储库](graphics/5801_06_13.jpg)
- en: In this screenshot, you can see the **Commit Message** box. The **Files to Commit**
    list shows the staged files to be committed.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在此屏幕截图中，您可以看到“提交消息”框。 “要提交的文件”列表显示要提交的暂存文件。
- en: Type in a message for the **Commit Message** text area that will describe the
    intent of your source code commit. The commit message should convey a meaningful
    description of what the changes are and why.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“提交消息”文本区域中键入一条消息，描述源代码提交的意图。提交消息应传达更改的有意义描述以及原因。
- en: You can exclude a file from commit by unchecking the row, or you may specify
    some additional actions by right-clicking on a row. Click on **Commit** when you
    are done.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过取消选中行来排除要提交的文件，或者可以通过右键单击行来指定一些附加操作。完成后单击“提交”。
- en: What just happened?
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The IDE executed the commit and stored your snapshots to the repository. The
    IDE's status bar, located at the bottom-right of the interface, was displayed
    as the commit action took place. Upon a successful commit, versioning badges disappear
    in the **Projects, Files**, and **Favorites** windows, and the color code of committed
    files returns to normal. Also note that files at the **Git** window cleared, which
    means that the repository is up-to-date and no changes are available.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: IDE执行了提交并将快照存储到存储库中。IDE的状态栏位于界面右下角，在提交操作发生时显示。成功提交后，“项目、文件”和“收藏夹”窗口中的版本控制徽章消失，已提交文件的颜色代码恢复正常。还要注意，Git窗口中的文件清除了，这意味着存储库是最新的，没有可用的更改。
- en: Have a go hero — adding and committing all the files together
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下-一起添加和提交所有文件
- en: We have staged new files to the repository and then committed those changes.
    Now, directly commit the new files to have them automatically staged from the
    IDE. You may add new files to the project; try to commit them directly, and see
    the difference.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将新文件放入存储库，然后提交了这些更改。现在，直接提交新文件，让它们从IDE中自动暂存。您可以将新文件添加到项目中；尝试直接提交它们，然后查看差异。
- en: Comparing file revisions
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较文件修订
- en: Comparing file versions is a common job when working with versioned projects.
    The IDE enables you to compare revisions by using the `Diff` command. File revisions
    can be compared to see the source changes from one revision to another.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 比较文件版本是在使用版本控制项目时的常见工作。IDE使您能够使用“Diff”命令比较修订版本。文件修订可以进行比较，以查看从一个修订到另一个修订的源更改。
- en: Time for action — using diff from the IDE
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用IDE进行差异
- en: 'In order to compare the file revisions, you can use the `Diff` feature of the
    IDE and go through the following steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较文件修订，您可以使用IDE的“Diff”功能，并按照以下步骤进行：
- en: Select a versioned file that is `README`, and modify some lines of the file.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个名为“README”的版本化文件，并修改文件的一些行。
- en: Right-click on the file, and select **Git | Diff** from the context menu. A
    graphical **Diff** viewer is opened for all the selected file(s) and revisions
    in the IDE's main window. The **Diff** viewer displays two copies in side-by-side
    panels. The more current copy appears on the right side. So if you are comparing
    a repository revision against your working tree, the working tree gets displayed
    in the right panel:![Time for action — using diff from the IDE](graphics/5801_06_14.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击文件，然后从上下文菜单中选择“Git | Diff”。IDE的主窗口中打开了一个图形“Diff”查看器，用于所选文件和修订的比较。 “Diff”查看器在并排面板中显示两个副本。较新的副本显示在右侧。因此，如果您要比较存储库修订与您的工作树，工作树将显示在右侧面板中：![行动时间-使用IDE进行差异](graphics/5801_06_14.jpg)
- en: The `Diff` viewer makes use of the same color codes used elsewhere, to display
    version control changes. In the previous screenshot, the green block indicates
    the content that has been added to the more current revision. The red block indicates
    that the content from the earlier revision has been removed. The blue block indicates
    that changes have occurred within the highlighted line(s).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`Diff`查看器使用与其他地方相同的颜色代码来显示版本控制更改。在上一张屏幕截图中，绿色块表示已添加到更高版本的内容。红色块表示从较早版本中删除了内容。蓝色块表示在突出显示的行中发生了更改。'
- en: What just happened?
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The **Diff** viewer toolbar also includes buttons that enable you to invoke
    the most common Git tasks for all the files displayed in the list. If you are
    performing a diff on your local copy in the working tree, the editor enables you
    to make changes directly from within the **Diff** viewer. To do so, you can place
    your cursor within the right pane of the **Diff** viewer and modify your file
    accordingly. Otherwise, make use of the inline icons, which display adjacent to
    each highlighted change.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**Diff**查看器工具栏还包括按钮，使您能够调用列表中显示的所有文件的最常见的Git任务。如果您正在对工作树中的本地副本进行差异比较，编辑器使您能够直接从**Diff**查看器中进行更改。为此，您可以将光标放在**Diff**查看器的右窗格内，并相应地修改文件。否则，使用显示在每个突出显示的更改旁边的内联图标。'
- en: Reverting the local changes of the repository
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 撤销存储库的本地更改
- en: Reverting is required for throwing away the local changes made to selected files
    in your working tree, and replacing these files with the ones in the Index or
    HEAD.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 撤销是为了丢弃对工作树中选定文件所做的本地更改，并用索引或HEAD中的文件替换这些文件。
- en: Time for action — reverting changes of the working tree
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 撤销工作树的更改
- en: 'To revert the changes, go through the following steps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要撤销更改，请按以下步骤进行：
- en: From the previous section, the **Diff** window of the modified `README` file
    provides a reverting, modification facility. Also, the Git window provides buttons
    for reverting modifications.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从前一节中，修改后的`README`文件的**Diff**窗口提供了一个撤销修改的功能。此外，Git窗口提供了撤销修改的按钮。
- en: Right-click on the `README` file, and select **Git | Revert | Revert Modifications**
    from the context menu, or click on the **Revert Modifications** button from the
    **Diff** window. A dialog box similar to the following one opens:![Time for action
    — reverting changes of the working tree](graphics/5801_06_15.jpg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`README`文件，然后从上下文菜单中选择**Git | Revert | Revert Modifications**，或者从**Diff**窗口单击**Revert
    Modifications**按钮。类似于以下对话框将打开：![行动时间 - 撤销工作树的更改](graphics/5801_06_15.jpg)
- en: Specify additional options (for example **Revert only Uncomited Changes in Index
    to HEAD)**.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定附加选项（例如**仅将索引中未提交的更改撤消到HEAD)**。
- en: Click on **Revert**.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Revert**。
- en: What just happened?
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The IDE reverted the changes specified and replaced those files with the ones
    in the Index or HEAD. In this way, you can easily revert the modifications or
    revert commits as well.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: IDE撤消了指定的更改，并用索引或HEAD中的文件替换了这些文件。通过这种方式，您可以轻松地撤销修改或撤销提交。
- en: Pop quiz — working with Git
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验 - 使用Git
- en: When adding files to a Git repository, the IDE first composes and saves snapshots
    of your project in which of the following?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件添加到Git存储库时，IDE首先会在以下哪个地方组成并保存项目的快照？
- en: Index
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 索引
- en: HEAD
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 头
- en: Repository
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储库
- en: Master
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主分支
- en: Which color in the source editor's left margin indicates lines that have been
    changed since the earlier revision?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源编辑器左边距中的哪种颜色表示自较早版本以来已更改的行？
- en: Green
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绿色
- en: Blue
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 蓝色
- en: Red
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 红色
- en: Yellow
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 黄色
- en: Diff is used for which of the following?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Diff**用于以下哪些操作？'
- en: To view file history
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看文件历史记录
- en: To compare two revisions
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较两个版本
- en: To compare two revisions of two files
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较两个文件的两个版本
- en: All of the above
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上所有
- en: What can be done with revert in case of reverting changes?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在撤销更改的情况下可以做什么？
- en: Revert all uncommitted changes in the working tree and Index
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 撤销工作树和索引中的所有未提交更改
- en: Revert uncommitted changes in the working tree, to the state in Index
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将未提交的更改撤消到工作树中的HEAD状态
- en: Revert only uncommitted changes to HEAD in the Index
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅将未提交的更改撤消到索引中的HEAD
- en: All of the above
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上所有
- en: Have a go hero — reverting commits
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 英雄尝试者 - 撤销提交
- en: Try to revert specific commits from the IDE using the commit ID. To do so, you
    may select **Revert | Revert Commit...** from the IDE.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用提交ID从IDE中撤销特定的提交。为此，您可以从IDE中选择**Revert | Revert Commit...**。
- en: Working with remote repositories
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与远程存储库一起工作
- en: To work with other developers or in a collaborative, development environment,
    everyone wants to share their work, which involves fetching, pushing, and pulling
    data to and from remote repositories hosted on the Internet or network.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他开发人员一起工作或在协作开发环境中，每个人都希望分享自己的工作，这涉及到从互联网或网络上托管的远程存储库中获取、推送和拉取数据。
- en: Fetching source code updates
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取源代码更新
- en: Fetching gets the changes from the original remote repository that you do not
    have yet. It doesn't change any of your local branches. Fetching gets all the
    branches from the remote repositories, which you can merge into your branch or
    just inspect at any time.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 获取会从您尚未拥有的原始远程存储库中获取更改。它不会更改任何您的本地分支。获取会获取远程存储库中的所有分支，您可以随时将其合并到您的分支中或仅进行检查。
- en: Time for action — fetching source code updates
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 获取源代码更新
- en: 'To fetch the updates, go through the following steps:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更新，请按以下步骤进行：
- en: Right-click on the project node, select **Git | Remote | Fetch**, and the **Fetch
    from Remote Repository** wizard is displayed.![Time for action — fetching source
    code updates](graphics/5801_06_16_New.jpg)
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目节点，选择**Git | Remote | Fetch**，然后显示**从远程存储库获取**向导。![行动时间 - 获取源代码更新](graphics/5801_06_16_New.jpg)
- en: At the **Remote Repository** page of the wizard, we will use the configured
    repository (to use the path to the repository configured earlier) and click on
    **Next**.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的**远程存储库**页面，我们将使用配置的存储库（使用之前配置的存储库路径）并单击**下一步**。
- en: At the **Remote Branches** page of the wizard, select the branches to fetch
    changes from, and click on **Finish**. Find the local copy of a remote branch
    in the repository browser window **(TEAM | Git | Repository Browser)**.![Time
    for action — fetching source code updates](graphics/5801_06_17.jpg)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的**远程分支**页面上，选择要获取更改的分支，然后单击**完成**。在存储库浏览器窗口**（TEAM | Git | 存储库浏览器）**中找到远程分支的本地副本。![执行操作的时间-获取源代码更新](graphics/5801_06_17.jpg)
- en: What just happened?
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: A local copy of a remote branch was created. The selected branches are updated
    in the **Branches | Remote** directory in **Git Repository Browser**. Next, the
    fetched updates are merged into a local branch.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了远程分支的本地副本。所选分支已在**Git存储库浏览器**中的**分支 | 远程**目录中更新。接下来，获取的更新将合并到本地分支中。
- en: Pulling updates from the remote repository
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从远程存储库拉取更新
- en: When pulling some updates from a remote Git repository, the changes are fetched
    from it and merged into the current HEAD for your local repository.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 从远程Git存储库拉取一些更新时，会从中获取更改，并将其合并到本地存储库的当前HEAD。
- en: Time for action — pulling updates from the remote repository
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作的时间-从远程存储库拉取更新
- en: 'To perform pulling, complete the following steps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行拉取，完成以下步骤：
- en: Right-click on the project node, select **Git | Remote | Pull**, and the **Pull
    from Remote Repository** wizard is displayed.![Time for action — pulling updates
    from the remote repository](graphics/5801_06_18.jpg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目节点，选择**Git | 远程 | 拉取**，然后显示**从远程存储库拉取**向导。![执行操作的时间-从远程存储库拉取更新](graphics/5801_06_18.jpg)
- en: At the **Remote Repository** page of the wizard, we will use the configured
    repository (to use the path to the repository configured earlier), and click on
    **Next**.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的**远程存储库**页面上，我们将使用配置的存储库（使用之前配置的存储库路径），然后单击**下一步**。
- en: At the **Remote Branches** page of the wizard, select the branch, that is `master
    -> origin/master` (remote branch `origin/master` will be merged into the current
    branch), to pull the changes, and click on **Finish**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的**远程分支**页面上，选择分支，即`master -> origin/master`（远程分支`origin/master`将合并到当前分支），以拉取更改，然后单击**完成**。
- en: What just happened?
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: Your local repository is synchronized with the origin repository. At the **Remote
    Branches** page, the branches we choose, that is `master -> origin/master`, will
    be merged into our current branch. You can see the pulling status at the bottom
    right of the IDE or in the output window as well.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您的本地存储库与原始存储库同步。在**远程分支**页面上，我们选择的分支，即`master -> origin/master`，将合并到我们的当前分支。您还可以在IDE的右下角或输出窗口中看到拉取状态。
- en: In the simplest terms, `Git Pull` does a `Git Fetch` followed by a `Git Merge`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，`Git Pull`执行`Git Fetch`，然后执行`Git Merge`。
- en: Pushing source code changes to a remote repository
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将源代码更改推送到远程存储库
- en: To share the cool commits you've done so far, you want to push your changes
    to the remote repository. Again, you can push your new branches and data to the
    remote repository.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了分享到目前为止所做的出色提交，您希望将更改推送到远程存储库。再次，您可以将新分支和数据推送到远程存储库。
- en: Time for action — pushing source code changes
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作的时间-推送源代码更改
- en: 'To contribute changes from your local Git repository into a public/remote Git
    repository, perform the following steps:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要将本地Git存储库中的更改贡献到公共/远程Git存储库中，请执行以下步骤：
- en: Right-click on project node, select **Git | Remote | Push**, and the **Push
    to Remote Repository** wizard is displayed.![Time for action — pushing source
    code changes](graphics/5801_06_19.jpg)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目节点，选择**Git | 远程 | 推送**，然后显示**推送到远程存储库**向导。![执行操作的时间-推送源代码更改](graphics/5801_06_19.jpg)
- en: At the **Remote Repository** page of the wizard, we will use the configured
    repository (to use the path to the repository configured earlier), and click on
    **Next**.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的**远程存储库**页面上，我们将使用配置的存储库（使用之前配置的存储库路径），然后单击**下一步**。
- en: At the **Select Local Branches** page of the wizard, select the local branches,
    that is `master -> master`, to push your changes to, and click on **Finish**.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的**选择本地分支**页面上，选择要将更改推送到的本地分支，即`master -> master`，然后单击**完成**。
- en: At the **Update Local References** page, select the branch (es), that is `master
    -> origin/master`, to be updated in the **Remotes** directory of your local repository,
    and click on **Finish**.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**更新本地引用**页面上，选择要在本地存储库的**远程**目录中更新的分支（即`master -> origin/master`），然后单击**完成**。
- en: What just happened?
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The specified remote repository branch was updated with the latest state of
    your local branch. Your local repo's **Branches | Remote** directory was updated
    as well. So, your changes are live at the remote repository, and other collaborators
    can pull the changes to their own repos.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 指定的远程存储库分支已使用本地分支的最新状态进行更新。您的本地存储库的**分支 | 远程**目录也已更新。因此，您的更改已在远程存储库中生效，其他协作者可以将更改拉取到他们自己的存储库中。
- en: Working with branches
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分支工作
- en: The intent to start an alternative line of development generates a branch in
    the source code management system. **Branch** helps you to manage working contexts
    and provide separate workspaces. Generally, **Master Branch** is the one where
    the finest piece of code resides; along with it, there could be a **Development
    Branch** where the continuous development code can reside. Again, sensible software
    development uses branches to maintain features, releases, hotfixes, and so on.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 意图启动一条替代的开发线路会在源代码管理系统中生成一个分支。**分支**帮助您管理工作上下文并提供单独的工作空间。通常，**主分支**是最好的代码所在地；除此之外，还可能有一个**开发分支**，其中可以存放持续开发的代码。同样，明智的软件开发使用分支来维护功能、发布、热修复等。
- en: 'For the development of a new version and maintenance of an old version, branching
    is a definite. In the following diagram, a generic Git branching model is described:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发新版本和维护旧版本，分支是必不可少的。在下图中，描述了一个通用的Git分支模型：
- en: '![Working with branches](graphics/5801_06_20.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![使用分支工作](graphics/5801_06_20.jpg)'
- en: In this diagram, we can see that **Development Branch** merged with **Master
    Branch** for a new release, and a new feature has been merged with **Development
    Branch**.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中，我们可以看到**开发分支**与**主分支**合并为一个新版本，并且一个新功能已经与**开发分支**合并。
- en: 'NetBeans supports you to do the following things with Git Branches:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans支持您使用Git分支执行以下操作：
- en: Creating a branch
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建分支
- en: Checking out a branch
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检出分支
- en: Switching branches
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换分支
- en: Merging branches
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并分支
- en: Deleting branches
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除分支
- en: Creating a branch
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建分支
- en: If you want to work on a separate version of your file system for stabilization
    or experimentation purposes without disturbing the main trunk, you can create
    a branch.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在不干扰主干的情况下为稳定性或实验目的创建文件系统的单独版本，可以创建一个分支。
- en: Time for action — creating a branch
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作-创建分支
- en: 'To create a local branch, complete the following steps:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个本地分支，请完成以下步骤：
- en: Right-click on the project node, select **Git | Branch | Create Branch**, and
    the **Create Branch** dialog box is displayed.![Time for action — creating a branch](graphics/5801_06_21.jpg)
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目节点，选择**Git | 分支 | 创建分支**，将显示**创建分支**对话框。![执行操作-创建分支](graphics/5801_06_21.jpg)
- en: In the **Branch Name** field, type in the desired branch name to be created,
    which is `development.`
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**分支名称**字段中，键入要创建的所需分支名称，即`development`。
- en: You may type a specific revision of the selected item by entering a commit ID,
    existing branch, or tag name in the **Revision** field, or press **Select** to
    view the list of revisions maintained in the repository. The default **Revision**
    is the latest revision from the master branch.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过在**修订**字段中输入提交ID、现有分支或标签名称，或按**选择**查看存储库中维护的修订列表来输入所选项目的特定修订。默认的**修订**是来自主分支的最新修订。
- en: Optionally, in the **Select Revision** dialog box, expand **Branches** and select
    the branch required, specify the commit ID in the adjacent list, and press **Select**.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，在**选择修订**对话框中，展开**分支**并选择所需的分支，在相邻列表中指定提交ID，并按**选择**。
- en: Review the **Commit ID, Author**, and **Message** fields information, specific
    to the revision being branched from, and click on **Create**. The branch is added
    to the **Branches | Local** folder of the Git repository view at **Git Repository
    Browser**.![Time for action — creating a branch](graphics/5801_06_22.jpg)
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看与分支来源的**提交ID，作者**和**消息**字段信息，并单击**创建**。该分支将添加到**Git存储库浏览器**中**分支 | 本地**文件夹中。![执行操作-创建分支](graphics/5801_06_22.jpg)
- en: What just happened?
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We have created a new branch in our local repository. The new branch contains
    the latest snapshot from the master branch. The newly created branch is not our
    working branch yet. The master branch is still the working branch; we'll choose
    to check out the new branch to make it a working one. Note that we can create
    new branches from any existing revisions.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本地存储库中创建了一个新分支。新分支包含了主分支的最新快照。新创建的分支还不是我们的工作分支。主分支仍然是工作分支；我们将选择检出新分支使其成为工作分支。请注意，我们可以从任何现有修订版本创建新分支。
- en: Checking out a branch
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检出分支
- en: If you want to edit files on a branch that already exists, you can check out
    the branch that needs to be used to copy the files to your working tree. It will
    simply make a switch to the desired branch.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要编辑已经存在的分支上的文件，可以检出需要使用的分支以将文件复制到您的工作树。这将简单地切换到所需的分支。
- en: Time for action — checking out a branch
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作-检出分支
- en: 'To check out a revision, perform the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 检出修订版本
- en: Right-click on the project node, select **Git | Checkout | Checkout Revision**,
    and the **Checkout Revision** dialog box is displayed.![Time for action — checking
    out a branch](graphics/5801_06_23.jpg)
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目节点，选择**Git | 检出 | 检出修订版本**，将显示**检出修订版本**对话框。![执行操作-检出分支](graphics/5801_06_23.jpg)
- en: Again, right-click on the **Branches | Local | Branch Name** at the **Repository
    Browser** window from the context menu, as shown in the following screenshot.
    Select **Checkout Revision**, and the same dialog box is displayed, along with
    the latest revision selected from that branch.![Time for action — checking out
    a branch](graphics/5801_06_24.jpg)
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次右键单击**分支 | 本地 | 分支名称**，在**存储库浏览器**窗口中从上下文菜单中选择，如下图所示。选择**检出修订版本**，将显示相同的对话框，并显示从该分支选择的最新修订版本。![执行操作-检出分支](graphics/5801_06_24.jpg)
- en: Optionally, specify the revision required, by entering a commit ID, existing
    branch, or tag name in the **Revision** field, or press **Select** to view the
    list of revisions maintained in the repository. Note that if the specified revision
    refers to a valid commit that is not marked with a branch name, then your HEAD
    becomes detached and you are no longer on any branch.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，通过在**修订**字段中输入提交ID、现有分支或标签名称，或按**选择**查看存储库中维护的修订列表来指定所需的修订。请注意，如果指定的修订引用有效的提交但未标记为分支名称，则您的HEAD将变为分离状态，您将不再位于任何分支上。
- en: Optionally, in the **Select Revision** dialog box, expand **Branches** and select
    the branch required, specify the commit ID in the adjacent list, and press **Select**.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，在**选择修订**对话框中，展开**分支**并选择所需的分支，在相邻列表中指定提交ID，并按**选择**。
- en: Review the **Commit ID, Author**, and **Message** fields information specific
    to the revision being checked out.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看与所检出修订版本相关的**提交ID，作者**和**消息**字段信息。
- en: To create a new branch out of the checked out revision, select the **Checkout
    as New Branch** option, and enter the name in the **Branch Name** field.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从所检出的修订版本创建一个新分支，请选择**作为新分支检出**选项，并在**分支名称**字段中输入名称。
- en: Press **Checkout** to check out the revision.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按**检出**以检出修订版本。
- en: What just happened?
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: Files in the working tree and Index were updated to match the version in the
    specified revision.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 工作树和索引中的文件已更新以匹配指定修订版本中的版本。
- en: Switching to a branch
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换到分支
- en: If you want to switch your files to a branch that already exists (for example,
    to a commit that is not at the top of one of your branches), you can use the **Team
    | Git | Branch | Switch To Branch** command, specify the branch in the **Switch
    to Selected Branch** dialog box, check it out as a new branch (optionally), and
    press **Switch**.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要将文件切换到已经存在的分支（例如，到一个不在您的分支顶部的提交），可以使用**Team | Git | Branch | 切换到分支**命令，在**切换到所选分支**对话框中指定分支，作为新分支进行检出（可选），然后按**切换**。
- en: '![Switching to a branch](graphics/5801_06_25.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![切换到分支](graphics/5801_06_25.jpg)'
- en: Checking out files
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检出文件
- en: The IDE supports context-sensitive checkout of the file(s), folder(s), or project(s)
    currently selected in the IDE. To check out some files (not a branch) from the
    Index, select **Team | Git | Checkout | Checkout Files** from the main menu, and
    the **Checkout Selected Paths** dialog box is displayed.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: IDE支持对IDE中当前选择的文件、文件夹或项目进行上下文敏感的检出。要从索引中检出一些文件（而不是分支），请从主菜单中选择**Team | Git |
    Checkout | Checkout Files**，然后显示**Checkout Selected Paths**对话框。
- en: '![Checking out files](graphics/5801_06_26.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![检出文件](graphics/5801_06_26.jpg)'
- en: From this dialog box, select **Update Index with Entries** from the **Selected
    Revision** option. If selected, the Index is updated with the state in the selected
    revision prior to the checkout itself (that is, the selected files in both the
    working tree and Index are updated).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 从此对话框中，选择**使用条目更新索引**从**所选修订版**选项。如果选择，索引将在检出本身之前使用所选修订版的状态进行更新（即，工作树和索引中的所选文件都将得到更新）。
- en: Specify the required attributes and check out.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 指定所需的属性并进行检出。
- en: Merging
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并
- en: Merge a branch context into your current one. Once you have work isolated in
    a branch, you will eventually want to incorporate it into your main branch. You
    can merge any branch into your current branch.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 将分支上下文合并到当前分支。一旦在分支中隔离了工作，您最终会想要将其合并到主分支中。您可以将任何分支合并到当前分支。
- en: Time for action — merging into current branch
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-合并到当前分支
- en: 'To port the modifications from a repository revision to the working tree, do
    the following:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要将修改从存储库修订版传输到工作树，请执行以下操作：
- en: Select **Team | Git | Merge Revision** from the main menu. The **Merge Revision**
    dialog box is displayed.![Time for action — merging into current branch](graphics/5801_06_27.jpg)
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单中选择**Team | Git | 合并修订版**。显示**合并修订版**对话框。![行动时间-合并到当前分支](graphics/5801_06_27.jpg)
- en: (Optional) Specify the revision required by entering a commit ID, existing branch,
    or tag name in the **Revision** field, or press **Select** to view the list of
    revisions maintained in the repository.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （可选）在**修订**字段中输入所需的修订版，或按**选择**以查看存储库中维护的修订版列表。
- en: (Optional) In the **Select Revision** dialog box, expand **Branches** and select
    the branch required, specify the commit ID in the adjacent list, and press **Select**.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （可选）在**选择修订版**对话框中，展开**分支**并选择所需的分支，指定相邻列表中的提交ID，然后按**选择**。
- en: Review the **Commit ID, Author**, and **Message** fields information specific
    to the revision being merged.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看与正在合并的修订版相关的**提交ID、作者**和**消息**字段信息。
- en: Press **Merge**.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按**合并**。
- en: What just happened?
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: A three-way merge among the current branches, your working tree content, and
    the specified branch is done. If a merge conflict occurs, the conflicting file
    is marked with a red badge to indicate this. After merging, you can still commit
    the changes, in order for them to be added to the HEAD.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前分支、您的工作树内容和指定分支之间进行三向合并。如果发生合并冲突，冲突文件将标有红色标记以指示这一点。合并后，您仍然可以提交更改，以便将其添加到HEAD中。
- en: Deleting a branch
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除分支
- en: To delete an unnecessary local branch, select **Team | Git | Repository Browser**
    from the main menu. In **Git Repository Browser**, select the branch that needs
    to be deleted. Note that the branch is supposed to be inactive, which means it
    has not been currently checked out in the working tree.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除不必要的本地分支，请从主菜单中选择**Team | Git | Repository Browser**。在**Git存储库浏览器**中，选择需要删除的分支。请注意，该分支应为非活动状态，这意味着它当前未在工作树中检出。
- en: Right-click the selected branch, and select **Delete Branch** from the pop-up
    menu. In the **Delete Branch** dialog box, press **OK** to confirm the branch
    deletion. The branch is removed from the local repository, as well as from **Git
    Repository Browser**.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击所选分支，并从弹出菜单中选择**删除分支**。在**删除分支**对话框中，按**确定**以确认删除分支。该分支将从本地存储库以及**Git存储库浏览器**中删除。
- en: Pop quiz — working with remote repositories and branches
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程存储库和分支的工作小测验
- en: Which Git operations can be the most relevant for remote repositories?
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些Git操作对于远程存储库最相关？
- en: Committing, merging, and reverting
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交、合并和还原
- en: Fetching, pulling, and pushing
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取、拉取和推送
- en: Fetching, pulling, pushing, and checking out
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取、拉取、推送和检出
- en: Adding, committing, and pushing
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加、提交和推送
- en: What happens after you pull changes from a remote repository?
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从远程存储库拉取更改后会发生什么？
- en: Changes are fetched from the remote repository
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从远程存储库获取更改
- en: Changes are fetched from it and merged into the current HEAD of your local repository
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从中获取更改并将其合并到本地存储库的当前HEAD中
- en: Changes are fetched from it and merged into the current HEAD of your remote
    repository
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从中获取更改并将其合并到远程存储库的当前HEAD中
- en: None of the above
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不是
- en: What happens after checking out a branch?
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出分支后会发生什么？
- en: It switches to that branch immediately, and the branch files become available
    to your working tree
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它立即切换到该分支，并且分支文件将可用于您的工作树
- en: It copies the files to your working tree
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将文件复制到您的工作树
- en: A new branch is created, and it becomes your working branch
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新分支，并将其作为您的工作分支
- en: All of the above
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上所有
- en: Have a go hero — creating tags
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下英雄-创建标签
- en: Git uses two main types of tags—**lightweight** and **annotated**. A lightweight
    tag is very much like a branch that doesn't change— it's just a pointer to a specific
    commit. Annotated tags, however, are stored as full objects in the Git database.
    Such tags check the sum and contain the tagger's name, e-mail, and date along
    with a tagging message. It's generally recommended that you create annotated tags
    so you can have all this information. Now, create a new tag, and you may select
    **Git | Tag | Create Tag...** from the IDE.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Git使用两种主要类型的标签——轻量级和注释型。轻量级标签非常像一个不会改变的分支——它只是指向一个特定的提交。然而，注释型标签存储为Git数据库中的完整对象。这些标签检查总和包含标记者的姓名、电子邮件和日期以及标记消息。通常建议创建注释型标签，这样你就可以获得所有这些信息。现在，创建一个新标签，你可以从IDE中选择**Git
    | Tag | Create Tag...**。
- en: Good practices and workflow
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 良好的实践和工作流程
- en: 'A few guidelines and workflows are discussed below, in order to uphold good
    practice with Git:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 以下讨论了一些指导方针和工作流程，以维护Git的良好实践：
- en: Always maintain a separate branch for whatever thing you're doing. Now, when
    you would like to merge your changes back into main, simply do a Git Merge.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论你在做什么，都要保持一个单独的分支。现在，当你想要将你的更改合并回主分支时，只需进行Git合并。
- en: Keep your branch up-to-date, if possible, which involves checking out or pulling
    changes.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能保持你的分支最新，这涉及到检出或拉取更改。
- en: Branches can be pushed up to the origin. There are a few reasons for this. First,
    if your workstation crashes, you don't lose your changes—one of the primary reasons
    for a VCS. Second, other developers can quickly switch to your branch if needed.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支可以推送到原始仓库。这样做有几个原因。首先，如果你的工作站崩溃了，你不会丢失你的更改——这是版本控制系统的一个主要原因。其次，其他开发人员可以在需要时快速切换到你的分支。
- en: Commit your changes often; of course, one should always commit changes in logical
    pieces. Since your changes are committed locally, not to the origin/master server
    (can be done with a push), you should commit changes in an organized way.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常提交你的更改；当然，应该总是以逻辑片段提交更改。由于你的更改是在本地提交的，而不是到原始/主服务器（可以通过推送完成），你应该以有组织的方式提交更改。
- en: Provide a message/comment for everything you do with the commit message and
    for every operation that makes a change to the revision history.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个提交消息和对修订历史进行更改的每个操作提供消息/注释。
- en: Push your changes often. If you're developing in your own branch that's separate
    from everyone else, your changes will not affect anyone else.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常推送你的更改。如果你在自己的分支上开发，与其他人分开，你的更改不会影响其他人。
- en: 'Preferred Git workflow:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 首选的Git工作流程：
- en: Create a branch from the master node, check it out, and do your work
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从主节点创建一个分支，检出它，并进行你的工作
- en: Test and commit your changes
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试并提交你的更改
- en: Optionally, push your branch up to the remote repository (origin)
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，将你的分支推送到远程仓库（origin）
- en: Check out master, make sure it's up-to-date with upstream changes
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检出主分支，确保它与上游更改保持最新
- en: Merge your branch into master
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的分支合并到主分支
- en: Test again (and again)
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次测试（再次再次）
- en: Push your local copy of master up to the remote repository master (origin/master)
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的本地主分支推送到远程仓库的主分支（origin/master）
- en: Delete your branch (and remotely too, if you published it)
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除你的分支（如果发布了，也要删除远程分支）
- en: Moreover, using the version control system can be worth it even for a local
    standalone project, because the code changes can be easily reviewed, rolled back,
    and backed up locally.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，即使是对于本地独立项目，使用版本控制系统也是值得的，因为代码更改可以很容易地在本地进行审查、回滚和备份。
- en: Summary
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've discussed the version control system and why it is so
    important. Also, we have picked Git as a distributed version control system, and
    learned how to use it from NetBeans.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了版本控制系统以及它为何如此重要。此外，我们选择了Git作为分布式版本控制系统，并学习了如何在NetBeans中使用它。
- en: 'We have especially focused on the following:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们特别关注了以下内容：
- en: Distributed Version Control System or DVCS
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式版本控制系统或DVCS
- en: Initializing a Git repository
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化一个Git仓库
- en: Cloning a Git repository
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆一个Git仓库
- en: Staging files into a Git repository
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文件暂存到Git仓库
- en: Committing changes to a Git Repository
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交更改到Git仓库
- en: Comparing file revisions and reverting changes
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较文件修订版本并撤销更改
- en: Working with remote repositories—fetching, pulling, and pushing
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与远程仓库一起工作——获取、拉取和推送
- en: Working with branches—creating, checking out, switching, merging, and deleting.
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用分支——创建、检出、切换、合并和删除。
- en: Finally, we have discussed the practices and the preferred workflow for Git.
    We are now much more confident to join a collaborative development using Git and
    NetBeans.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了Git的实践和首选工作流程。现在，我们更有信心加入使用Git和NetBeans进行协作开发。
- en: In the next chapter, we will create a new PHP project with a user registration,
    login, and logout, to advance our PHP application development skills to the next
    level.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建一个新的PHP项目，包括用户注册、登录和注销，以提升我们的PHP应用程序开发技能到一个新的水平。
