["```php\nphp vendor/bin/doctrine.php orm:run-dql \"SELECT p.title, c.bodyFROM Blog\\Entity\\Post p JOIN p.comments c WHERE p.id=1\"\n```", "```php\n    @Entity(repositoryClass=\"PostRepository\")\n    ```", "```php\n    **php vendor/bin/doctrine.php orm:generate:repositories src/**\n\n    ```", "```php\n       /**\n         * Finds a post with its comments\n         *\n         * @param  int  $id\n         * @return Post\n         */\n        public function findWithComments($id)\n        {\n            return $this\n                ->createQueryBuilder('p')\n                ->addSelect('c')\n                ->leftJoin('p.comments', 'c')\n                ->where('p.id = :id')\n                ->orderBy('c.publicationDate', 'ASC')\n                ->setParameter('id', $id)\n                ->getQuery()\n                ->getOneOrNullResult()\n            ;\n        }\n    ```", "```php\n$query = $entityManager->createQuery('SELECT ur FROMUserRole ur WHERE ur.username = \"' . $username . '\" ANDur.role = \"' . $role . '\"');\n$hasRole = count($query->getResult());\n```", "```php\n$query = $entityManager->createQuery(\"SELECT ur FROMUserRole WHERE username = :username and role = :role\");\n$query->setParameters([\n    'username' => $username,\n    'role' => $role\n]);\n$hasRole = count($query->getResult());\n```", "```php\nSELECT p, c FROM Blog\\Entity\\Post p LEFT JOIN p.comments c WHEREp.id = :id ORDER BY c.publicationDate ASC\n```", "```php\nSELECT p0_.id AS id0, p0_.title AS title1, p0_.body AS body2,p0_.publicationDate AS publicationDate3, c1_.id AS id4, c1_.bodyAS body5, c1_.publicationDate AS publicationDate6, c1_.post_id ASpost_id7 FROM Post p0_ LEFT JOIN Comment c1_ ON p0_.id =c1_.post_id WHERE p0_.id = ? ORDER BY c1_.publicationDate ASC\n```", "```php\n$post = $entityManager->getRepository('Blog\\Entity\\Post')->find($_GET['id']);\n```", "```php\n$post = $entityManager->getRepository('Blog\\Entity\\Post')->findWithComments($_GET['id']);\n```", "```php\n        /**\n         * Finds posts having tags\n         *\n         * @param string[] $tagNames\n         * @return Post[]\n         */\n        public function findHavingTags(array $tagNames)\n        {\n            return $queryBuilder = $this\n                ->createQueryBuilder('p')\n                      ->addSelect('t')\n                ->join('p.tags', 't')\n                ->where('t.name IN (:tagNames)')\n                ->groupBy('p.id')\n                ->having('COUNT(t.name) >= :numberOfTags')\n                ->setParameter('tagNames', $tagNames)\n                ->setParameter('numberOfTags',count($tagNames))\n                ->getQuery()\n                ->getResult()\n            ;\n        }\n    ```", "```php\n    /** @var $posts \\Blog\\Entity\\Post[] Retrieve the list ofall blog posts */\n    $posts = $entityManager->getRepository('Blog\\Entity\\Post')->findAll();\n    ```", "```php\n    $repository = $entityManager->getRepository('Blog\\Entity\\Post');\n    /** @var $posts \\Blog\\Entity\\Post[] Retrieve the list ofall blog posts */\n    $posts = isset($_GET['tags']) ? $repository->findHavingTags($_GET['tags']) : $repository->findAll();\n    ```", "```php\n            <p>\n                <?=nl2br(htmlspecialchars($post->getBody()))?>\n            </p>\n    ```", "```php\n            <ul>\n            <?php foreach ($post->getTags() as $tag): ?>\n                <li>\n                    <a href=\"index.php?tags=<?=urlencode($tag)?>\"><?=htmlspecialchars($tag)?></a>\n                </li>\n            <?php endforeach ?>\n            </ul>\n    ```", "```php\n    /**\n     * Finds posts with comment count\n     *\n     * @return array\n     */\n    public function findWithCommentCount()\n    {\n        return $this\n            ->createQueryBuilder('p')\n            ->leftJoin('p.comments', 'c')\n            ->addSelect('COUNT(c.id)')\n            ->groupBy('p.id')\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n```", "```php\n    $posts = $repository->findHavingTags(explode(',',$_GET['tags']));\n} else {\n    $posts = $repository->findAll();\n}\n```", "```php\n    $results = $repository->findHavingTags(explode(',',$_GET['tags']));\n} else {\n    $results = $repository->findWithCommentCount();\n} \n```", "```php\n<?php foreach ($posts as $post): ?>\n```", "```php\n<?php\n    foreach ($results as $result):\n        $post = $result[0];\n        $commentCount = $result[1];\n?>\n```", "```php\n<?php if (empty($posts)): ?>\n```", "```php\n<?php if (empty($results)): ?>\n```", "```php\n        <?php if ($commentCount == 0): ?>\n            Be the first to comment this post.\n        <?php elseif ($commentCount == 1): ?>\n            One comment\n        <?php else: ?>\n            <?= $commentCount ?> comments\n        <?php endif ?>\n```", "```php\n            // \u2026\n            ->addSelect('t')\n            ->addSelect('COUNT(c.id)')\n            ->leftJoin('p.comments', 'c')\n            // \u2026\n```"]