["```php\n<?php\n\nclass JsonOutput\n{\n  protected $content;\n\n  public function setContent($content)\n  {\n    $this->content = $content;\n  }\n\n  public function render()\n  {\n    return json_encode($this->content);\n  }\n}\n\nclass SerializedOutput\n{\n  protected $content;\n\n  public function setContent($content)\n  {\n    $this->content = $content;\n  }\n\n  public function render()\n  {\n    return serialize($this->content);\n  }\n}\n\n$users = [\n  ['user' => 'John', 'age' => 34],\n  ['user' => 'Alice', 'age' => 33],\n];\n\n$json = new JsonOutput();\n$json->setContent($users);\necho $json->render();\n\n$ser = new SerializedOutput();\n$ser->setContent($users);\necho $ser->render();\n\n```", "```php\n// valid\nclass A {}\nclass B extends A {}\nclass C extends B {}\n\n// invalid\nclass A {}\nclass B {}\nclass C extends A, B {}\n\n```", "```php\n<?php   error_reporting(E_ALL);   class A {\n  public $x = 10;\n  protected $y = 20;\n  private $z = 30;    public function x()\n {  return $this->x;\n }    protected function y()\n {  return $this->y;\n }    private function z()\n {  return $this->z;\n } }   class B extends A {   }   $obj = new B(); var_dump($obj->x); // 10 var_dump($obj->y); // Uncaught Error: Cannot access protected property B::$y var_dump($obj->z); // Notice: Undefined property: B::$z var_dump($obj->x()); // 10 var_dump($obj->y()); // Uncaught Error: Call to protected method A::y() from context var_dump($obj->z()); // Uncaught Error: Call to private method A::z() from context\n\n```", "```php\nclass B extends A\n{\n  public function test()\n  {\n    var_dump($this->x); // 10\n    var_dump($this->y); // 20\n    var_dump($this->z); // Notice: Undefined property: B::$z\n    var_dump($this->x()); // 10\n    var_dump($this->y()); // 20\n    var_dump($this->z()); // Uncaught Error: Call to private method \n      A::z() from context 'B'\n  }\n}\n\n$obj = new B();\n$obj->test();\n\n```", "```php\n<?php   interface User {}  interface Employee extends User {}\n\n```", "```php\n<?php   class Output {\n  protected $content;    public function setContent($content)\n {  $this->content = $content;\n }    public function render()\n {  return $this->content;\n } }   class JsonOutput extends Output {\n  public function render()\n {  return json_encode($this->content);\n } }   class SerializedOutput extends Output {\n  public function render()\n {  return serialize($this->content);\n } }\n\n```", "```php\n<?php\n\nclass Util\n{\n  function hello($msg)\n  {\n    $msg = \"<p>Welcome $msg</p>\";\n    return $msg;\n  }\n}\n\n$str = 'John';\n\n$obj = new Util();\necho $obj->hello($str); // Welcome John\n\necho $str; // John\n\n```", "```php\n<?php\n\nclass Util\n{\n  function hello(&$msg)\n  {\n    $msg = \"<p>Welcome $msg</p>\";\n    return $msg;\n  }\n}\n\n$str = 'John';\n\n$obj = new Util();\necho $obj->hello($str); // Welcome John\n\necho $str; // Welcome John\n\n```", "```php\n<?php\n\nclass User\n{\n  public $salary = 4200;\n}\n\nfunction bonus(User $u)\n{\n  $u->salary = $u->salary + 500;\n}\n\n$user = new User();\necho $user->salary; // 4200\nbonus($user);\necho $user->salary; // 4700 \n\n```", "```php\n<?php\n\n$user = [\n  'name' => 'John',\n  'age' => 34,\n  'salary' => 4200.00\n];\n\nforeach ($user as $k => $v) {\n  echo \"key: $k, value: $v\" . PHP_EOL;\n}\n\n```", "```php\n<?php\n\nclass User\n{\n  public $name = 'John';\n  public $age = 34;\n  public $salary = 4200.00;\n}\n\n$user = new User();\n\nforeach ($user as $k => $v) {\n  echo \"key: $k, value: $v\" . PHP_EOL;\n}\n\n```", "```php\nkey: name, value: John \nkey: age, value: 34 \nkey: salary, value: 4200\n\n```", "```php\nIterator extends Traversable {\n  abstract public mixed current(void)\n  abstract public scalar key(void)\n  abstract public void next(void)\n  abstract public void rewind(void)\n  abstract public boolean valid(void)\n} \n\n```", "```php\n<?php\n\nclass User implements \\Iterator\n{\n  public $name = 'John';\n  private $age = 34;\n  protected $salary = 4200.00;\n\n  private $info = [];\n\n  public function __construct()\n  {\n    $this->info = [\n      'name' => $this->name,\n      'age' => $this->age,\n      'salary' => $this->salary\n    ];\n  }\n\n  public function current()\n  {\n    return current($this->info);\n  }\n\n  public function next()\n  {\n    return next($this->info);\n  }\n\n  public function key()\n  {\n    return key($this->info);\n  }\n\n  public function valid()\n  {\n    $key = key($this->info);\n    return ($key !== null && $key !== false);\n  }\n\n  public function rewind()\n  {\n    return reset($this->info);\n  }\n}\n\n```", "```php\n<?php\n\nclass User {\n  public $name = 'N/A';\n  public $age = 0;\n}\n\n$user = new User();\n$employee = new User();\n\nvar_dump($user == $employee); // true\nvar_dump($user === $employee); // false\n\n```", "```php\n<?php\n\nclass User {\n  public $name = 'N/A';\n  public $age = 0;\n}\n\n$user = new User();\n$employee = $user;\n\nvar_dump($user == $employee); // true\nvar_dump($user === $employee); // true\n\n```", "```php\n<?php   var_dump(2 == 2); // true var_dump(2 == \"2\"); // true var_dump(2 == \"2ABC\"); // true   var_dump(2 === 2); // true var_dump(2 === \"2\"); // false var_dump(2 === \"2ABC\"); // false\n\n```", "```php\n<?php\n\ntrait Formatter\n{\n  // Trait body\n}\n\n```", "```php\nclass Ups\n{\n  use Formatter;\n\n  // Class body (properties & methods)\n}\n\n```", "```php\n<?php   trait Formatter {\n  public function formatPrice($price)\n {  return sprintf('%.2F', $price);\n } }   class Ups {\n  use Formatter;   private $price = 4.4999; // Base shipping price   public function getShippingPrice($formatted = false)\n {  // Shipping cost calc... $this->price = XXX    if ($formatted) {\n  return $this->formatPrice($this->price);\n }    return $this->price;\n } }   class Dhl {\n  use Formatter;    private $price = 9.4999; // Base shipping price    public function getShippingPrice($formatted = false)\n {  // Shipping cost calc... $this->price = XXX    if ($formatted) {\n  return $this->formatPrice($this->price);\n }    return $this->price;\n } }   $ups = new Ups(); echo $ups->getShippingPrice(true); // 4.50   $dhl = new Dhl(); echo $dhl->getShippingPrice(true); // 9.50\n\n```", "```php\n<?php   trait Formatter {\n  public function formatPrice()\n {  return sprintf('%.2F', $this->price);\n } }\n\n```", "```php\n<?php   trait SalesOrderCustomer {\n  public function getCustomerFirstname()\n { /* body */\n  }    public function getCustomerEmail()\n { /* body */\n  }    public function getCustomerGender()\n { /* body */\n  } }   trait SalesOrderActions {\n  public function cancel()\n { /* body */\n  }    public function complete()\n { /* body */\n  }    public function hold()\n { /* body */\n  } }   class SalesOrder {\n  use SalesOrderCustomer;\n  use SalesOrderActions;    /* body */ }\n\n```", "```php\n<?php   trait CsvHandler {\n  public function import()\n {  echo 'CsvHandler > import' . PHP_EOL;\n }   public function export()\n {  echo 'CsvHandler > export' . PHP_EOL;\n } }   trait XmlHandler {\n  public function import()\n {  echo 'XmlHandler > import' . PHP_EOL;\n }    public function export()\n {  echo 'XmlHandler > export' . PHP_EOL;\n } }   class SalesOrder {\n  use CsvHandler, XmlHandler {\n XmlHandler::import insteadof CsvHandler;\n CsvHandler::export insteadof XmlHandler;\n XmlHandler::export as exp;\n }    public function initImport()\n {  $this->import();\n }    public function initExport()\n {  $this->export();\n  $this->exp();\n } }   $order = new SalesOrder(); $order->initImport(); $order->initExport();   //XmlHandler > import //CsvHandler > export //XmlHandler > export\n\n```", "```php\n<?php   trait Message {\n  private function hello()\n {  return 'Hello!';\n } }   class User {\n  use Message {\n hello as public;\n } }   $user = new User(); echo $user->hello(); // Hello!\n\n```", "```php\n<?php\n\ntrait A\n{\n  public static $counter = 0;\n\n  public function theA()\n  {\n    return self::$counter;\n  }\n}\n\ntrait B\n{\n  use A;\n\n  abstract public function theB();\n}\n\nclass C\n{\n  use B;\n\n  public function theB()\n  {\n    return self::$counter;\n  }\n}\n\n$c = new C();\n$c::$counter++;\necho $c->theA(); // 1\n$c::$counter++;\n$c::$counter++;\necho $c->theB(); // 3\n\n```", "```php\nFunction [ <internal:standard> function str_replace ] {\n  - Parameters [4] {\n     Parameter #0 [ <required> $search ]\n     Parameter #1 [ <required> $replace ]\n     Parameter #2 [ <required> $subject ]\n     Parameter #3 [ <optional> &$replace_count ]\n  }\n}\n\n```", "```php\n<?php\n\nclass User\n{\n  public $name = 'John';\n  protected $ssn = 'AAA-GG-SSSS';\n  private $salary = 4200.00;\n}\n\n$user = new User();\n\necho $user->name = 'Marc'; // Marc\n\n//echo $user->ssn = 'BBB-GG-SSSS';\n// Uncaught Error: Cannot access protected property User::$ssn\n\n//echo $user->salary = 5600.00;\n// Uncaught Error: Cannot access private property User::$salary\n\nvar_dump($user);\n//object(User)[1]\n// public 'name' => string 'Marc' (length=4)\n// protected 'ssn' => string 'AAA-GG-SSSS' (length=11)\n// private 'salary' => float 4200\n\n```", "```php\n<?php\n\n// ...\n\n$user = new User();\n\n$reflector = new ReflectionClass('User');\n\nforeach ($reflector->getProperties() as $prop) {\n  $prop->setAccessible(true);\n  if ($prop->getName() == 'name') $prop->setValue($user, 'Alice');\n  if ($prop->getName() == 'ssn') $prop->setValue($user, 'CCC-GG-SSSS');\n  if ($prop->getName() == 'salary') $prop->setValue($user, 2600.00);\n}\n\nvar_dump($user);\n\n//object(User)[1]\n// public 'name' => string 'Alice' (length=5)\n// protected 'ssn' => string 'CCC-GG-SSSS' (length=11)\n// private 'salary' => float 2600\n\n```", "```php\n<?php\n\nclass Calc\n{\n  /**\n  * @param $x The number x\n  * @param $y The number y\n  * @return mixed The number z\n  */\n  public function sum($x, $y)\n  {\n    return $x + $y;\n  }\n}\n\n$calc = new Calc();\n\n$reflector = new ReflectionClass('Calc');\n$comment = $reflector->getMethod('sum')->getDocComment();\n\necho $comment;\n\n```"]