- en: Chapter 5. Debugging and Profiling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。调试和性能分析
- en: During development, every developer faces problems, and it becomes unclear what
    is really going on here and why the problem is generated. Most the time, these
    issues can be logical or with the data. It is always hard to find such issues.
    Debugging is a process to find such issues and problems and fix them. Similarly,
    we often need to know how many resources a script consumes, including memory consumption,
    CPU, and how much time it takes to execute.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，每个开发人员都会遇到问题，不清楚到底发生了什么，以及为什么会产生问题。大多数时候，这些问题可能是逻辑性的或者与数据有关。要找到这样的问题总是很困难。调试是一个找到这样的问题并解决它们的过程。同样，我们经常需要知道脚本消耗了多少资源，包括内存消耗，CPU以及执行所需的时间。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Xdebug
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xdebug
- en: Debugging with Sublime Text 3
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sublime Text 3进行调试
- en: Debugging with Eclipse
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eclipse进行调试
- en: Profiling with Xdebug
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Xdebug进行性能分析
- en: PHP DebugBar
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP DebugBar
- en: Xdebug
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Xdebug
- en: Xdebug is an extension for PHP that provides both debugging and profiling information
    for PHP scripts. Xdebug displays a full-stake trace information for errors, including
    function names, line numbers, and filenames. Also, it provides the ability to
    debug scripts interactively using different IDEs, such as Sublime Text, Eclipse,
    PHP Storm, and Zend Studio.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Xdebug是PHP的一个扩展，为PHP脚本提供调试和性能分析信息。Xdebug显示错误的完整堆栈跟踪信息，包括函数名称，行号和文件名。此外，它提供了使用不同IDE（如Sublime
    Text，Eclipse，PHP Storm和Zend Studio）交互式调试脚本的能力。
- en: 'To check whether Xdebug is installed and enabled on our PHP installation, we
    need to check the phpinfo() details. On the phpinfo details page, search for Xdebug,
    and you should see details similar to the following screenshot:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查Xdebug是否已安装并在我们的PHP安装中启用，我们需要检查phpinfo（）的详细信息。在phpinfo详细信息页面上搜索Xdebug，您应该看到类似以下屏幕截图的详细信息：
- en: '![Xdebug](graphics/B05225_05_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: ！[Xdebug]（graphics / B05225_05_01.jpg）
- en: This means that our PHP installation has Xdebug installed. Now, we need to configure
    Xdebug. Either the Xdebug configuration will be in the `php.ini` file, or it will
    have its separate `.ini` file. At our installation, we will have a separate `20-xdebug.ini`
    file placed at the `/etc/php/7.0/fpm/conf.d/` path.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的PHP安装已经安装了Xdebug。现在，我们需要配置Xdebug。Xdebug配置要么在`php.ini`文件中，要么有自己的单独的`.ini`文件。在我们的安装中，我们将在`/etc/php/7.0/fpm/conf.d/`路径下放置一个单独的`20-xdebug.ini`文件。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the purpose of this book, we will use the Homestead Vagrant box from Laravel.
    It provides complete tools on the Ubuntu 14.04 LTS installation, including PHP7
    with Xdebug, NGINX, and MySQL. For the purpose of development, this Vagrant box
    is a perfect solution. More information can be found at [https://laravel.com/docs/5.1/homestead](https://laravel.com/docs/5.1/homestead).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，我们将使用Laravel的Homestead Vagrant框。它在Ubuntu 14.04 LTS安装中提供了完整的工具，包括带有Xdebug的PHP7，NGINX和MySQL。对于开发目的，这个Vagrant框是一个完美的解决方案。更多信息可以在[https://laravel.com/docs/5.1/homestead]（https://laravel.com/docs/5.1/homestead）找到。
- en: 'Now, open the `20-xdebug.ini` file and place the following configuration in
    it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`20-xdebug.ini`文件并将以下配置放入其中：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding are the minimum configurations we should use that enable remote
    debugging and set an IDE key. Now, restart PHP by issuing the following command
    in the terminal:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上述是我们应该使用的最低配置，它们启用了远程调试并设置了IDE密钥。现在，通过在终端中发出以下命令来重新启动PHP：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we are ready to debug some code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备调试一些代码。
- en: Debugging with Sublime Text
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Sublime Text进行调试
- en: The Sublime Text editor has a plugin that can be used to debug PHP code with
    Xdebug. First, let's install the `xdebug` package for Sublime Text.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text编辑器有一个插件，可以用来使用Xdebug调试PHP代码。首先，让我们为Sublime Text安装`xdebug`包。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For this topic, we will use Sublime Text 3, which is still in beta. It is your
    own choice to use version 2 or 3.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个主题，我们将使用仍处于beta阶段的Sublime Text 3。使用版本2还是3是你自己的选择。
- en: 'First, go to **Tools** | **Command Pallet**. A popup similar to the following
    will be displayed:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，转到**工具** | **命令面板**。将显示类似于以下内容的弹出窗口：
- en: '![Debugging with Sublime Text](graphics/B05225_05_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: ！[使用Sublime Text进行调试]（graphics / B05225_05_02.jpg）
- en: 'Select **Package Control: Install Package**, and a popup similar to the following
    screenshot will be displayed:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**Package Control：Install Package**，将显示类似于以下屏幕截图的弹出窗口：
- en: '![Debugging with Sublime Text](graphics/B05225_05_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: ！[使用Sublime Text进行调试]（graphics / B05225_05_03.jpg）
- en: Type in `xdebug`, and the **Xdebug Client** package will be displayed. Click
    on it and wait for a while until it is installed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 键入`xdebug`，将显示**Xdebug Client**包。单击它，等待一会直到安装完成。
- en: 'Now, create a project in Sublime Text and save it. Open the Sublime Text project
    file and insert the following code in it:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在Sublime Text中创建一个项目并保存它。打开Sublime Text项目文件并插入以下代码：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The highlighted code is important, and it has to be entered for Xdebug. Path
    mapping is the most important part. It should have a full path to the root of
    the application on the remote host and a full path to the root of the application
    on the localhost.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的代码很重要，必须输入Xdebug。路径映射是最重要的部分。它应该有远程主机应用程序根目录的完整路径和本地主机应用程序根目录的完整路径。
- en: 'Now, let''s start debugging. Create a file at the project''s root, name it
    `index.php`, and place the following code in it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始调试。在项目的根目录创建一个文件，命名为`index.php`，并将以下代码放入其中：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, right-click on a line in the editor and select **Xdebug**. Then, click
    on **Add/Remove Breakpoint**. Let''s add a few breakpoints as shown in the following
    screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在编辑器中右键单击一行，然后选择**Xdebug**。然后，单击**添加/删除断点**。让我们按照以下屏幕截图中显示的方式添加一些断点：
- en: '![Debugging with Sublime Text](graphics/B05225_05_04.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: ！[使用Sublime Text进行调试]（graphics / B05225_05_04.jpg）
- en: When a breakpoint is added to a line, a filled circle will be displayed on the
    left-hand side near the line number, as can be seen in the preceding screenshot.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当在一行上添加断点时，将在左侧靠近行号处显示一个填充的圆圈，如前面的屏幕截图所示。
- en: 'Now we are ready to debug our PHP code. Navigate to **Tools** | **Xdebug**
    | **Start Debugging (Launch in Browser)**. A browser window will open the application
    along with a Sublime Text debug session parameter. The browser windows will be
    in the loading state because as soon as the first breakpoint is reached, the execution
    stops. The browser window will be similar to the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好调试我们的PHP代码了。转到**工具** | **Xdebug** | **开始调试（在浏览器中启动）**。浏览器窗口将打开应用程序，并附带Sublime
    Text调试会话参数。浏览器窗口将处于加载状态，因为一旦到达第一个断点，执行就会停止。浏览器窗口将类似于以下内容：
- en: '![Debugging with Sublime Text](graphics/B05225_05_05.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sublime Text进行调试](graphics/B05225_05_05.jpg)'
- en: 'Some new small windows will also open in the Sublime Text editor that will
    display debugging information along with all the variables available, as in the
    following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一些新的小窗口也会在Sublime Text编辑器中打开，显示调试信息以及所有可用的变量，如下面的屏幕截图所示：
- en: '![Debugging with Sublime Text](graphics/B05225_05_06.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sublime Text进行调试](graphics/B05225_05_06.jpg)'
- en: In the preceding screenshot, our `$a`, `$b`, and `$c` arrays are uninitialized
    because the execution cursor is at Line 22, and it has stopped there. Also, all
    server variables, cookies, environment variables, request data, and POST and GET
    data can be seen here. This way, we can debug all kind of variables, arrays, and
    objects and check what data each variable, object, or array holds at a certain
    point. This gives us the possibility to find out the errors that are very hard
    to detect without debugging.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的屏幕截图中，我们的`$a`，`$b`和`$c`数组未初始化，因为执行光标位于第22行，并且停在那里。此外，所有服务器变量、cookie、环境变量、请求数据以及POST和GET数据都可以在这里看到。这样，我们可以调试各种变量、数组和对象，并检查每个变量、对象或数组在某个特定点上持有的数据。这使我们有可能找出那些在没有调试的情况下很难检测到的错误。
- en: 'Now, let''s move the execution cursor ahead. Right-click in the editor code
    section and go to **Xdebug** | **Step Into**. The cursor will move ahead, and
    the variables data may change according to the next line. This can be noted in
    the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将执行光标向前移动。在编辑器代码部分右键单击，然后转到**Xdebug** | **步入**。光标将向前移动，变量数据可能会根据下一行而改变。可以在以下屏幕截图中注意到这一点：
- en: '![Debugging with Sublime Text](graphics/B05225_05_07.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sublime Text进行调试](graphics/B05225_05_07.jpg)'
- en: Debugging can be stopped by clicking on **Tools** | **Xdebug** | **Stop Debugging**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**工具** | **Xdebug** | **停止调试**即可停止调试。
- en: Debugging with Eclipse
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Eclipse进行调试
- en: Eclipse is the most free and powerful IDE widely used. It supports almost all
    major programming languages, including PHP. We will discuss how to configure Eclipse
    to use Xdebug to debug.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse是最自由和功能强大的广泛使用的IDE。它支持几乎所有主要的编程语言，包括PHP。我们将讨论如何配置Eclipse以使用Xdebug进行调试。
- en: 'First, open the project in Eclipse. Then, click on the down arrow to the right
    of the small bug icon in the tool bar, as shown in the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在Eclipse中打开项目。然后，单击工具栏中小虫图标右侧的向下箭头，如下面的屏幕截图所示：
- en: '![Debugging with Eclipse](graphics/B05225_05_08.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![使用Eclipse进行调试](graphics/B05225_05_08.jpg)'
- en: 'After this, click on the **Debug Configuration** menu, and the following windows
    will open:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，单击**调试配置**菜单，将打开以下窗口：
- en: '![Debugging with Eclipse](graphics/B05225_05_09.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用Eclipse进行调试](graphics/B05225_05_09.jpg)'
- en: 'Select **PHP Web Application** on left panel and then click on the **Add New**
    icon in the top-left corner. This will add a new configuration, as shown in the
    preceding screenshot. Give the configuration a name. Now, we need to add a PHP
    server to our configuration. Click on the **New** button on the right-hand side
    panel, and the following window will open:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '在左侧面板中选择**PHP Web应用程序**，然后单击左上角的**添加新**图标。这将添加一个新的配置，如上面的屏幕截图所示。给配置命名。现在，我们需要向配置中添加一个PHP服务器。单击右侧面板上的**新建**按钮，将打开以下窗口： '
- en: '![Debugging with Eclipse](graphics/B05225_05_10.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![使用Eclipse进行调试](graphics/B05225_05_10.jpg)'
- en: 'We will enter the server name as `PHP Server`. The server name can be anything
    as long as it is user-friendly and can be recognized for later use. In the **Base
    URL** field, enter the complete URL of the application. **Document Root** should
    be the local path of the root of the application. After entering all the valid
    data, click on the **Next** button, and we will see the following window:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将服务器名称输入为`PHP服务器`。服务器名称可以是任何用户友好的名称，只要以后可以识别。在**基本URL**字段中，输入应用程序的完整URL。**文档根**应该是应用程序根目录的本地路径。输入所有有效数据后，单击**下一步**按钮，我们将看到以下窗口：
- en: '![Debugging with Eclipse](graphics/B05225_05_11.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![使用Eclipse进行调试](graphics/B05225_05_11.jpg)'
- en: 'Select **XDebug** in the **Debugger** drop-down list and leave rest of the
    fields as they are. Click on the **Next** button, and we will have the path mapping
    window. It is very important to map the correct local path to the correct remote
    path. Click on the **Add** button, and we will have the following window:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在**调试器**下拉列表中选择**XDebug**，其余字段保持不变。单击**下一步**按钮，我们将进入路径映射窗口。将正确的本地路径映射到正确的远程路径非常重要。单击**添加**按钮，我们将看到以下窗口：
- en: '![Debugging with Eclipse](graphics/B05225_05_12.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![使用Eclipse进行调试](graphics/B05225_05_12.jpg)'
- en: Enter the full path to the document root of the application on the remote server.
    Then, select **Path in File System** and enter the local path of the application's
    document root. Click on **OK** and then click on the **Finish** button in the
    path mapping window. Then, click on **Finish** in the next window to complete
    adding a PHP server.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在远程服务器上输入应用程序的文档根的完整路径。然后，选择**文件系统中的路径**，并输入应用程序文档根的本地路径。单击**确定**，然后单击路径映射窗口中的**完成**按钮。然后，在下一个窗口中单击**完成**，以完成添加PHP服务器。
- en: 'Now, our configuration is ready. First, we will add some breakpoints to our
    PHP file by clicking on the line number bar and a small blue dot will appear there,
    as shown in the following screenshot. Now, click on the small bug icon on the
    tool bar, select **Debug As**, and then click on **PHP Web Application**. The
    debug process will start, and a window will be opened in the browser. It will
    be in the loading state, same as we saw in Sublime Text debugging. Also, the Debug
    perspective will be opened in Eclipse, as shown here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的配置已经准备好。首先，我们将通过点击行号栏上的小蓝点来向我们的PHP文件添加一些断点，如下截图所示。现在，点击工具栏上的小虫子图标，选择**Debug
    As**，然后点击**PHP Web Application**。调试过程将开始，并且浏览器中将打开一个窗口。它将处于加载状态，就像我们在Sublime Text调试中看到的一样。此外，Eclipse中将打开Debug视图，如下所示：
- en: '![Debugging with Eclipse](graphics/B05225_05_13.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![使用Eclipse进行调试](graphics/B05225_05_13.jpg)'
- en: When we click on the small (**X**)= icon in the right-hand side bar, we will
    see all the variables there. Also, it is possible to edit any variable data, even
    the element values of any array, object properties, and cookie data. The modified
    data will be retained for the current debug session.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击右侧边栏中的小(**X**)=图标时，我们将看到所有的变量。还可以编辑任何变量数据，甚至是任何数组的元素值、对象属性和cookie数据。修改后的数据将在当前调试会话中保留。
- en: To step into the next line, we will just press *F5*, and the execution cursor
    will be moved to the next line. To step out to the next breakpoint, we will press
    *F6*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要进入下一行，我们只需按下*F5*，执行光标将移动到下一行。要跳出到下一个断点，我们将按下*F6*。
- en: Profiling with Xdebug
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Xdebug进行分析
- en: Profiling gives us information about the cost of each script or task executed
    in an application. It helps to provide information about how much time a task
    takes, and hence we can optimize our code to consume less time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 分析提供了有关应用程序中执行的每个脚本或任务的成本的信息。它有助于提供有关任务花费多少时间的信息，因此我们可以优化我们的代码以减少时间消耗。
- en: 'Xdebug has a profiler that is disabled by default. To enable the profiler,
    open the configuration file and place the following two lines in it:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Xdebug有一个默认情况下被禁用的分析器。要启用分析器，打开配置文件并在其中放置以下两行：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first line enables the profiler. The second line, where we defined the output
    directory for the profiler file, is important. In this directory, Xdebug will
    store the output file when the profiler is executed. The output file is stored
    with a name, such as `cachegrind.out.id`. This file contains all the profile data
    in a simple text format.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行启用了分析器。我们定义了分析器文件的输出目录的第二行非常重要。在这个目录中，当分析器执行时，Xdebug将存储输出文件。输出文件以`cachegrind.out.id`的名称存储。这个文件包含了所有的分析数据，以简单的文本格式。
- en: 'Now, we are set to profile a simple installation of the Laravel application
    home page. The installation is a fresh and clean one. Now, let''s open the application
    in a browser and append `?XDEBUG_PROFILE=on` at the end, as shown here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备对Laravel应用程序主页的简单安装进行分析。这个安装是全新的和干净的。现在，让我们在浏览器中打开应用程序，并在末尾添加`?XDEBUG_PROFILE=on`，如下所示：
- en: '`http://application_url.com?XDEBUG_PROFILE=on`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://application_url.com?XDEBUG_PROFILE=on`'
- en: After this page is loaded, a `cachegrind` file will be generated at the specified
    location. Now, when we open the file in a text editor, we will just see some text
    data.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载完这个页面后，将在指定位置生成一个`cachegrind`文件。现在，当我们在文本编辑器中打开文件时，我们将只看到一些文本数据。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `cachegrind` file can be opened with different tools. One of the tools for
    Windows is WinCacheGrind. For Mac, we have qcachegrind. Any of these applications
    will view the file data in such a way that we will see all the data in an interactive
    form that can be easily analyzed. Also, PHP Storm has a nice analyzer for cachegrind.
    For this topic, we used PHP Storm IDE.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`cachegrind`文件可以用不同的工具打开。Windows的一个工具是WinCacheGrind。对于Mac，我们有qcachegrind。这些应用程序中的任何一个都将以一种可以轻松分析的交互形式查看文件数据。此外，PHP
    Storm有一个用于cachegrind的良好分析器。在这个主题中，我们使用了PHP Storm IDE。'
- en: 'After opening the file in PHP Storm, we will get a window similar to the following
    screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP Storm中打开文件后，我们将得到一个类似以下截图的窗口：
- en: '![Profiling with Xdebug](graphics/B05225_05_14.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![使用Xdebug进行分析](graphics/B05225_05_14.jpg)'
- en: As shown in the preceding screenshot, we have execution statistics in the upper
    pane that shows the time (in ms) taken by each called script individually along
    with the number of times it is called. In the lower pane, we have the callees
    that called this script.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们在上面的窗格中有执行统计信息，显示了每个调用脚本单独花费的时间（以毫秒为单位），以及它被调用的次数。在下面的窗格中，我们有调用了这个脚本的调用者。
- en: We can analyze which script takes more time, and we can optimize this script
    to reduce its execution time. Also, we can find out whether, at a certain point,
    we need to call a specific script or not. If not, then we can remove this call.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以分析哪个脚本花费了更多的时间，然后优化这个脚本以减少执行时间。此外，我们可以找出在某个特定点是否需要调用特定的脚本。如果不需要，那么我们可以删除这个调用。
- en: PHP DebugBar
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP DebugBar
- en: PHP DebugBar is another awesome tool that displays a nice and full information
    bar at the bottom of the page. It can display custom messages added for the purposes
    of debugging and full request information including `$_COOKIE`, `$_SERVER`, `$_POST`,
    and `$_GET` arrays along with the data if any of them have. Besides that, PHP
    DebugBar displays details about exceptions if there are any, database queries
    executed, and their details. Also it displays the memory taken by the script and
    the time the page is loaded in.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: PHP DebugBar是另一个很棒的工具，它在页面底部显示一个漂亮且完整的信息栏。它可以显示为了调试目的而添加的自定义消息，以及包括`$_COOKIE`、`$_SERVER`、`$_POST`和`$_GET`数组在内的完整请求信息，以及它们的数据（如果有的话）。此外，PHP
    DebugBar还显示了异常的详细信息，执行的数据库查询及其详细信息。它还显示了脚本占用的内存和页面加载的时间。
- en: According to the PHP Debug website, DebugBar integrates easily in any application
    project and displays debugging and profiling data from any part of the application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 根据PHP Debug网站，DebugBar可以轻松集成到任何应用项目中，并显示来自应用程序任何部分的调试和分析数据。
- en: Its installation is easy. You can either download the complete source code,
    place it somewhere in your application, and set up the autoloader to load all
    the classes, or use composer to install it. We will use composer as it is the
    easy and clean way to install it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 它的安装很容易。您可以下载完整的源代码，将其放在应用程序的某个地方，并设置自动加载器来加载所有类，或者使用composer来安装它。我们将使用composer，因为这是安装它的简单和干净的方式。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Composer is a nice tool for PHP to manage the dependencies of a project. It
    is written in PHP and is freely available from [https://getcomposer.org/](https://getcomposer.org/).
    We assume that composer is installed on your machine.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是一个用于管理项目依赖关系的PHP工具。它是用PHP编写的，并且可以从[https://getcomposer.org/](https://getcomposer.org/)免费获取。我们假设composer已经安装在您的机器上。
- en: 'In your project''s `composer.json` file, place the following code in the required
    section:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的`composer.json`文件中，在所需的部分中放置以下代码：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Save the file and then issue the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，然后发出以下命令：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Composer will start updating the dependencies and install composer. Also,
    it will generate the autoloader file and/or the other dependencies required for
    DebugBar.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Composer将开始更新依赖项并安装composer。此外，它将生成自动加载器文件和/或DebugBar所需的其他依赖项。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The preceding composer command will only work if composer is installed globally
    on the system. If it is not, we have to use the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的composer命令只有在系统上全局安装了composer才能工作。如果没有，我们必须使用以下命令：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding command should be executed in the folder where `composer.phar`
    is placed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令应该在放置`composer.phar`的文件夹中执行。
- en: 'After it is installed, the project tree for the DebugBar can be as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，DebugBar的项目树可能如下：
- en: '![PHP DebugBar](graphics/B05225_05_15.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![PHP DebugBar](graphics/B05225_05_15.jpg)'
- en: The directories' structure may be a little bit different, but normally, it will
    be as we previously noted. The `src` directory has the complete source code for
    DebugBar. The `vendor` directory has some third-party modules or PHP tools that
    may or may not be required. Also, note that the `vendor` folder has the autoloader
    to autoload all the classes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 目录结构可能有点不同，但通常会如我们之前所述。`src`目录包含了DebugBar的完整源代码。`vendor`目录包含了一些可能需要的第三方模块或PHP工具。还要注意`vendor`文件夹中有自动加载器来自动加载所有类。
- en: 'Let''s check our installation now to see whether it is working or not. Create
    a new file in your project root and name it `index.php`. After this, place the
    following code in it:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在检查我们的安装，看看它是否工作。在项目根目录中创建一个新文件，命名为`index.php`。之后，在其中放置以下代码：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding code, we first included our autoloader, which is generated
    by composer for us to autoload all the classes. Then, we used the `DebugBar\StandardDebugbar`
    namespace. After this, we instantiated two objects: `StandardDebugBar` and `getJavascriptRenderer`.
    The `StandardDebugBar` object is an array of objects that has objects for different
    collectors, such as message collectors and others. The `getJavascriptRenderer`
    object is responsible for placing the required JavaScript and CSS code at the
    header and displaying the bar at the bottom of the page.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先包含了我们的自动加载器，这是由composer为我们生成的，用于自动加载所有类。然后，我们使用了`DebugBar\StandardDebugbar`命名空间。之后，我们实例化了两个对象：`StandardDebugBar`和`getJavascriptRenderer`。`StandardDebugBar`对象是一个对象数组，其中包含了不同收集器的对象，例如消息收集器等。`getJavascriptRenderer`对象负责在页眉处放置所需的JavaScript和CSS代码，并在页面底部显示栏。
- en: We used the `$debugbar` object to add messages to the message collector. Collectors
    are responsible for collecting data from different sources, such as databases,
    HTTP requests, messages, and others.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`$debugbar`对象向消息收集器添加消息。收集器负责从不同来源收集数据，例如数据库、HTTP请求、消息等。
- en: In the head section of the HTML code, we used the `renderHead` method of `$debugbarRenderer`
    to place the required JavaScript and CSS code. After this, just before the end
    of the `<body>` block, we used the `render` method of the same object to display
    the debug bar.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML代码的头部，我们使用了`$debugbarRenderer`的`renderHead`方法来放置所需的JavaScript和CSS代码。之后，在`<body>`块的末尾之前，我们使用了相同对象的`render`方法来显示调试栏。
- en: Now, load the application in the browser, and if you notice a bar at the bottom
    of the browser as in the following screenshot, then congrats! DebugBar is properly
    installed and is working fine.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在浏览器中加载应用程序，如果您注意到浏览器底部有一个栏，如下面的屏幕截图所示，那么恭喜！DebugBar已正确安装并且运行正常。
- en: '![PHP DebugBar](graphics/B05225_05_16.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![PHP DebugBar](graphics/B05225_05_16.jpg)'
- en: On the right-hand side, we have the memory consumed by our application and the
    time it is loaded in.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，我们有应用程序消耗的内存和加载时间。
- en: 'If we click on the **Messages** tab, we will see the messages we added, as
    shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击**消息**选项卡，我们将看到我们添加的消息，如下面的屏幕截图所示：
- en: '![PHP DebugBar](graphics/B05225_05_17.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![PHP DebugBar](graphics/B05225_05_17.jpg)'
- en: 'DebugBar provides data collectors, which are used to collect data from different
    sources. These are called *base collectors*, and some of the data collectors are
    as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: DebugBar提供数据收集器，用于从不同来源收集数据。这些被称为*基本收集器*，以下是一些数据收集器：
- en: The message collector collects log messages, as shown in the preceding example
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息收集器收集日志消息，如前面的示例所示
- en: The TimeData collector collects the total execution time as well as the execution
    time for a specific operation
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TimeData收集器收集总执行时间以及特定操作的执行时间
- en: The exceptions collector displays all the exceptions that have occurred
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常收集器显示所有发生的异常
- en: The PDO collector logs SQL queries
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDO收集器记录SQL查询
- en: The RequestData collector collects data of PHP global variables, such as `$_SERVER`,
    `$_POST`, `$_GET`, and others
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RequestData收集器收集PHP全局变量的数据，例如`$_SERVER`、`$_POST`、`$_GET`等。
- en: The config collector is used to display any key-value pairs of arrays
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置收集器用于显示数组的任何键值对
- en: Also, there are some collectors that provide the ability to collect data from
    third-party frameworks such as Twig, Swift Mailer, Doctrine, and others. These
    collectors are called bridge collectors. PHP DebugBar can be easily integrated
    into famous PHP frameworks such as Laravel and Zend Framework 2 too.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些收集器可以从Twig、Swift Mailer、Doctrine等第三方框架中收集数据。这些收集器被称为桥接收集器。PHP DebugBar也可以轻松集成到著名的PHP框架，如Laravel和Zend
    Framework 2中。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: A complete discussion of PHP DebugBar is not possible in this book. Therefore,
    only a simple introduction is provided here. PHP DebugBar has a nice documentation
    that provides complete details with examples. The documentation can be found at
    [http://phpdebugbar.com/docs/readme.html](http://phpdebugbar.com/docs/readme.html).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本书无法对PHP DebugBar进行全面讨论。因此，这里只提供了一个简单的介绍。PHP DebugBar有一个很好的文档，其中提供了完整的详细信息和示例。文档可以在[http://phpdebugbar.com/docs/readme.html](http://phpdebugbar.com/docs/readme.html)找到。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed different tools to debug a PHP application. We
    used Xdebug, Sublime Text 3, and Eclipse to debug our applications. Then, we used
    the Xdebug profiler to profile an application to find out the execution statistics.
    Finally, we discussed PHP DebugBar to debug an application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了调试PHP应用程序的不同工具。我们使用Xdebug、Sublime Text 3和Eclipse来调试我们的应用程序。然后，我们使用Xdebug分析器来分析应用程序，以找出执行统计信息。最后，我们讨论了PHP
    DebugBar来调试应用程序。
- en: In the next chapter, we will discuss load testing tools, which we can use to
    place load or virtual visitors on our application in order to load test it, and
    find out how much load our application can bear, and how it affects the performance.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论负载测试工具，我们可以使用这些工具在我们的应用程序上放置负载或虚拟访问者，以对其进行负载测试，并找出我们的应用程序能承受多少负载，以及它如何影响性能。
