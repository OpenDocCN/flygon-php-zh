["```php\n    class CountryList\n    {\n      protected $connection;\n      protected $key   = 'iso3';\n      protected $value = 'name';\n      protected $table = 'iso_country_codes';\n\n      public function setConnection(Connection $connection)\n      {\n        $this->connection = $connection;\n      }\n      public function list()\n      {\n        $list = [];\n        $sql  = sprintf('SELECT %s,%s FROM %s', $this->key, \n                        $this->value, $this->table);\n        $stmt = $this->connection->pdo->query($sql);\n        while ($item = $stmt->fetch(PDO::FETCH_ASSOC)) {\n          $list[$item[$this->key]] =  $item[$this->value];\n        }\n        return $list;\n      }\n\n    }\n    ```", "```php\n    trait ListTrait\n    {\n      public function list()\n      {\n        $list = [];\n        $sql  = sprintf('SELECT %s,%s FROM %s', \n                        $this->key, $this->value, $this->table);\n        $stmt = $this->connection->pdo->query($sql);\n        while ($item = $stmt->fetch(PDO::FETCH_ASSOC)) {\n               $list[$item[$this->key]] = $item[$this->value];\n        }\n        return $list;\n      }\n    }\n    ```", "```php\n    class CountryListUsingTrait\n    {\n      use ListTrait;   \n      protected $connection;\n      protected $key   = 'iso3';\n      protected $value = 'name';\n      protected $table = 'iso_country_codes';\n      public function setConnection(Connection $connection)\n      {\n        $this->connection = $connection;\n      }\n\n    }\n    ```", "```php\n    namespace Application\\Database;\n    trait ConnectionTrait\n    {\n      protected $connection;\n      public function setConnection(Connection $connection)\n      {\n        $this->connection = $connection;\n      }\n    }\n    ```", "```php\n    namespace Application\\Database;\n    use Application\\Database\\Connection;\n    interface ConnectionAwareInterface\n    {\n      public function setConnection(Connection $connection);\n    }\n    ```", "```php\n    namespace Application\\Generic;\n    use PDO;\n    use Application\\Database\\ { \n    Connection, ConnectionTrait, ConnectionAwareInterface \n    };\n    class CountryListUsingTrait implements ConnectionAwareInterface\n    {\n      use ListTrait;\n      use ConnectionTrait;\n\n      protected $key   = 'iso3';\n      protected $value = 'name';\n      protected $table = 'iso_country_codes';\n\n    }\n    ```", "```php\n<?php\nnamespace Application\\Generic;\nuse PDO;\nuse Application\\Database\\Connection;\nuse Application\\Database\\ConnectionTrait;\nuse Application\\Database\\ConnectionAwareInterface;\nclass CustomerListUsingTrait implements ConnectionAwareInterface\n{\n\n  use ListTrait;\n  use ConnectionTrait;\n\n  protected $key   = 'id';\n  protected $value = 'name';\n  protected $table = 'customer';\n}\n```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n$params = include __DIR__ . DB_CONFIG_FILE;\ntry {\n    $list = Application\\Generic\\ListFactory::factory(\n      new Application\\Generic\\CountryListUsingTrait(), $params);\n    echo 'Country List' . PHP_EOL;\n    foreach ($list->list() as $item) echo $item . ' ';\n    $list = Application\\Generic\\ListFactory::factory(\n      new Application\\Generic\\CustomerListUsingTrait(), \n      $params);\n    echo 'Customer List' . PHP_EOL;\n    foreach ($list->list() as $item) echo $item . ' ';\n\n} catch (Throwable $e) {\n    echo $e->getMessage();\n}\n```", "```php\n    namespace Application\\Error;\n    class Handler\n    {\n      // code goes here\n    }\n    ```", "```php\n    protected $logFile;\n    public function __construct(\n      $logFileDir = NULL, $logFile = NULL)\n    {\n      $logFile = $logFile    ?? date('Ymd') . '.log';\n      $logFileDir = $logFileDir ?? __DIR__;\n      $this->logFile = $logFileDir . '/' . $logFile;\n      $this->logFile = str_replace('//', '/', $this->logFile);\n      set_exception_handler([$this,'exceptionHandler']);\n    }\n    ```", "```php\n    public function exceptionHandler($ex)\n    {\n      $message = sprintf('%19s : %20s : %s' . PHP_EOL,\n        date('Y-m-d H:i:s'), get_class($ex), $ex->getMessage());\n      file_put_contents($this->logFile, $message, FILE_APPEND); \n    }\n    ```", "```php\nnamespace Application\\Error;\nuse PDO;\nclass ThrowsException\n{\n  protected $result;\n  public function __construct(array $config)\n  {\n    $dsn = $config['driver'] . ':';\n    unset($config['driver']);\n    foreach ($config as $key => $value) {\n      $dsn .= $key . '=' . $value . ';';\n    }\n    $pdo = new PDO(\n      $dsn, \n      $config['user'],\n      $config['password'],\n      [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]);\n      $stmt = $pdo->query('This Is Not SQL');\n      while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        $this->result[] = $row;\n      }\n  }\n}\n```", "```php\n<?php\ndefine('DB_CONFIG_FILE', __DIR__ . '/../config/db.config.php');\n$config = include DB_CONFIG_FILE;\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Error\\ { Handler, ThrowsException };\n```", "```php\n$throws1 = new ThrowsException($config);\n```", "```php\ntry {\n    $throws1 = new ThrowsException($config);\n} catch (Exception $e) {\n    echo 'Exception Caught: ' . get_class($e) . ':' . $e->getMessage() . PHP_EOL;\n}\necho 'Application Continues ...' . PHP_EOL;\n```", "```php\n$handler = new Handler(__DIR__ . '/logs');\ntry {\n    $throws1 = new ThrowsException($config);\n} catch (Exception $e) {\n    echo 'Exception Caught: ' . get_class($e) . ':' \n      . $e->getMessage() . PHP_EOL;\n}\n$throws1 = new ThrowsException($config);\necho 'Application Continues ...' . PHP_EOL;\n```", "```php\n    public function __construct($logFileDir = NULL, $logFile = NULL)\n    {\n      $logFile    = $logFile    ?? date('Ymd') . '.log';\n      $logFileDir = $logFileDir ?? __DIR__;\n      $this->logFile = $logFileDir . '/' . $logFile;\n      $this->logFile = str_replace('//', '/', $this->logFile);\n      set_exception_handler([$this,'exceptionHandler']);\n      set_error_handler([$this, 'errorHandler']);\n    }\n    ```", "```php\n    public function errorHandler($errno, $errstr, $errfile, $errline)\n    {\n      $message = sprintf('ERROR: %s : %d : %s : %s : %s' . PHP_EOL,\n        date('Y-m-d H:i:s'), $errno, $errstr, $errfile, $errline);\n      file_put_contents($this->logFile, $message, FILE_APPEND);\n    }\n    ```", "```php\n    public function exceptionHandler($ex)\n    {\n      $message = sprintf('EXCEPTION: %19s : %20s : %s' . PHP_EOL,\n        date('Y-m-d H:i:s'), get_class($ex), $ex->getMessage());\n      file_put_contents($this->logFile, $message, FILE_APPEND);\n    }\n    ```", "```php\n<?php\nnamespace Application\\Error;\nclass ThrowsError\n{\n  const NOT_PARSE = 'this will not parse';\n  public function divideByZero()\n  {\n    $this->zero = 1 / 0;\n  }\n  public function willNotParse()\n  {\n    eval(self::NOT_PARSE);\n  }\n}\n```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Error\\ { Handler, ThrowsError };\n$error = new ThrowsError();\n```", "```php\n$error->divideByZero();\n$error->willNotParse();\necho 'Application continues ... ' . PHP_EOL;\n```", "```php\ntry {\n    $error->divideByZero();\n} catch (Throwable $e) {\n    echo 'Error Caught: ' . get_class($e) . ':' \n      . $e->getMessage() . PHP_EOL;\n}\ntry {\n    $error->willNotParse();\n} catch (Throwable $e) {\n    echo 'Error Caught: ' . get_class($e) . ':' \n    . $e->getMessage() . PHP_EOL;\n}\necho 'Application continues ... ' . PHP_EOL;\n```", "```php\n$handler = new Handler(__DIR__ . '/logs');\n$error->divideByZero();\n$error->willNotParse();\necho 'Application continues ... ' . PHP_EOL;\n```", "```php\n    php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\n    php -r \"if (hash_file('SHA384', 'composer-setup.php') === '<hash>') { \n        echo 'Installer verified'; \n    } else { \n        echo 'Installer corrupt'; unlink('composer-setup.php'); \n    } echo PHP_EOL;\"\n    php composer-setup.php\n    php -r \"unlink('composer-setup.php');\"\n    ```", "```php\n    {\n      \"require-dev\": {\n        \"phpunit/phpunit\": \"*\"\n      }\n    }\n    ```", "```php\n    **php composer.phar install**\n\n    ```", "```php\n    **phpunit --version**\n\n    ```", "```php\n    <?php\n    function add($a = NULL, $b = NULL)\n    {\n      return $a + $b;\n    }\n    ```", "```php\n    <?php\n    use PHPUnit\\Framework\\TestCase;\n    require_once __DIR__ . '/chap_13_unit_test_simple.php';\n    class SimpleTest extends TestCase\n    {\n      // testXXX() methods go here\n    }\n    ```", "```php\n    public function testAdd()\n    {\n      $this->assertEquals(2, add(1,1));\n    }\n    ```", "```php\n    $this->assertNotEquals(3, add(1,1));\n    ```", "```php\n    function table(array $a)\n    {\n      $table = '<table>';\n      foreach ($a as $row) {\n        $table .= '<tr><td>';\n        $table .= implode('</td><td>', $row);\n        $table .= '</td></tr>';\n      }\n      $table .= '</table>';\n      return $table;\n    }\n    ```", "```php\n    public function testTable()\n    {\n      $a = [range('A', 'C'),range('D', 'F'),range('G','I')];\n      $table = table($a);\n      $this->assertRegExp('!^<table>.+</table>$!', $table);\n      $this->assertRegExp('!<td>B</td>!', $table);\n    }\n    ```", "```php\n    <?php\n    class Demo\n    {\n      public function add($a, $b)\n      {\n        return $a + $b;\n      }\n\n      public function sub($a, $b)\n      {\n        return $a - $b;\n      }\n      // etc.\n    }\n    ```", "```php\n    <?php\n    use PHPUnit\\Framework\\TestCase;\n    require_once __DIR__ . '/Demo.php';\n    class SimpleClassTest extends TestCase\n    {\n      protected $demo;\n      public function setup()\n      {\n        $this->demo = new Demo();\n      }\n      public function teardown()\n      {\n        unset($this->demo);\n      }\n      public function testAdd()\n      {\n        $this->assertEquals(2, $this->demo->add(1,1));\n      }\n      public function testSub()\n      {\n        $this->assertEquals(0, $this->demo->sub(1,1));\n      }\n      // etc.\n    }\n    ```", "```php\n    <?php\n    require __DIR__ . '/../Application/Database/Connection.php';\n    use Application\\Database\\Connection;\n    class VisitorOps\n    {\n\n    const TABLE_NAME = 'visitors';\n    protected $connection;\n    protected $sql;\n\n    public function __construct(array $config)\n    {\n      $this->connection = new Connection($config);\n    }\n\n    public function getSql()\n    {\n      return $this->sql;\n    }\n\n    public function findAll()\n    {\n      $sql = 'SELECT * FROM ' . self::TABLE_NAME;\n      $stmt = $this->runSql($sql);\n      while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        yield $row;\n      }\n    }\n\n    public function findById($id)\n    {\n      $sql = 'SELECT * FROM ' . self::TABLE_NAME;\n      $sql .= ' WHERE id = ?';\n      $stmt = $this->runSql($sql, [$id]);\n      return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n\n    public function removeById($id)\n    {\n      $sql = 'DELETE FROM ' . self::TABLE_NAME;\n      $sql .= ' WHERE id = ?';\n      return $this->runSql($sql, [$id]);\n    }\n\n    public function addVisitor($data)\n    {\n      $sql = 'INSERT INTO ' . self::TABLE_NAME;\n      $sql .= ' (' . implode(',',array_keys($data)) . ') ';\n      $sql .= ' VALUES ';\n      $sql .= ' ( :' . implode(',:',array_keys($data)) . ') ';\n      $this->runSql($sql, $data);\n      return $this->connection->pdo->lastInsertId();\n    }\n\n    public function runSql($sql, $params = NULL)\n    {\n      $this->sql = $sql;\n      try {\n          $stmt = $this->connection->pdo->prepare($sql);\n          $result = $stmt->execute($params);\n      } catch (Throwable $e) {\n          error_log(__METHOD__ . ':' . $e->getMessage());\n          return FALSE;\n      }\n      return $stmt;\n    }\n    }\n    ```", "```php\n    <?php\n    require_once __DIR__ . '/VisitorOps.php';\n    require_once __DIR__ . '/../Application/Database/Connection.php';\n    use Application\\Database\\Connection;\n    class VisitorService\n    {\n      protected $visitorOps;\n      public function __construct(array $config)\n      {\n        $this->visitorOps = new VisitorOps($config);\n      }\n      public function showAllVisitors()\n      {\n        $table = '<table>';\n        foreach ($this->visitorOps->findAll() as $row) {\n          $table .= '<tr><td>';\n          $table .= implode('</td><td>', $row);\n          $table .= '</td></tr>';\n        }\n        $table .= '</table>';\n        return $table;\n      }\n    ```", "```php\n    public function getVisitorOps()\n    {\n      return $this->visitorOps;\n    }\n\n    public function setVisitorOps(VisitorOps $visitorOps)\n    {\n      $this->visitorOps = $visitorOps;\n    }\n    } // closing brace for VisitorService\n    ```", "```php\n    <?php\n    require_once __DIR__ . '/VisitorOps.php';\n    class VisitorOpsMock extends VisitorOps\n    {\n      protected $testData;\n      public function __construct()\n      {\n        $data = array();\n        for ($x = 1; $x <= 3; $x++) {\n          $data[$x]['id'] = $x;\n          $data[$x]['email'] = $x . 'test@unlikelysource.com';\n          $data[$x]['visit_date'] = \n            '2000-0' . $x . '-0' . $x . ' 00:00:00';\n          $data[$x]['comments'] = 'TEST ' . $x;\n          $data[$x]['name'] = 'TEST ' . $x;\n        }\n        $this->testData = $data;\n      }\n      public function getTestData()\n      {\n        return $this->testData;\n      }\n    ```", "```php\n    public function findAll()\n    {\n      $sql = 'SELECT * FROM ' . self::TABLE_NAME;\n      foreach ($this->testData as $row) {\n        yield $row;\n      }\n    }\n    ```", "```php\n    public function findById($id)\n    {\n      $sql = 'SELECT * FROM ' . self::TABLE_NAME;\n      $sql .= ' WHERE id = ?';\n      return $this->testData[$id] ?? FALSE;\n    }\n    public function removeById($id)\n    {\n      $sql = 'DELETE FROM ' . self::TABLE_NAME;\n      $sql .= ' WHERE id = ?';\n      if (empty($this->testData[$id])) {\n          return 0;\n      } else {\n          unset($this->testData[$id]);\n          return 1;\n      }\n    }\n    ```", "```php\n    public function addVisitor($data)\n    {\n      $sql = 'INSERT INTO ' . self::TABLE_NAME;\n      $sql .= ' (' . implode(',',array_keys($data)) . ') ';\n      $sql .= ' VALUES ';\n      $sql .= ' ( :' . implode(',:',array_keys($data)) . ') ';\n      if (!empty($data['id'])) {\n          $id = $data['id'];\n      } else {\n          $keys = array_keys($this->testData);\n          sort($keys);\n          $id = end($keys) + 1;\n          $data['id'] = $id;\n      }\n        $this->testData[$id] = $data;\n        return 1;\n      }\n\n    } // ending brace for the class VisitorOpsMock\n    ```", "```php\n    <?php\n    use PHPUnit\\Framework\\TestCase;\n    require_once __DIR__ . '/VisitorService.php';\n    require_once __DIR__ . '/VisitorOps.php';\n    class VisitorServiceTestAnonClass extends TestCase\n    {\n      protected $visitorService;\n      protected $dbConfig = [\n        'driver'   => 'mysql',\n        'host'     => 'localhost',\n        'dbname'   => 'php7cookbook_test',\n        'user'     => 'cook',\n        'password' => 'book',\n        'errmode'  => PDO::ERRMODE_EXCEPTION,\n      ];\n        protected $testData;\n    ```", "```php\n    public function setup()\n    {\n      $data = array();\n      for ($x = 1; $x <= 3; $x++) {\n        $data[$x]['id'] = $x;\n        $data[$x]['email'] = $x . 'test@unlikelysource.com';\n        $data[$x]['visit_date'] = \n          '2000-0' . $x . '-0' . $x . ' 00:00:00';\n        $data[$x]['comments'] = 'TEST ' . $x;\n        $data[$x]['name'] = 'TEST ' . $x;\n      }\n      $this->testData = $data;\n      $this->visitorService = \n        new VisitorService($this->dbConfig);\n      $opsMock = \n        new class ($this->testData) extends VisitorOps {\n          protected $testData;\n          public function __construct($testData)\n          {\n            $this->testData = $testData;\n          }\n          public function findAll()\n          {\n            return $this->testData;\n          }\n        };\n        $this->visitorService->setVisitorOps($opsMock);\n    }\n    ```", "```php\n    public function teardown()\n    {\n      unset($this->visitorService);\n    }\n    public function testShowAllVisitors()\n    {\n      $result = $this->visitorService->showAllVisitors();\n      $this->assertRegExp('!^<table>.+</table>$!', $result);\n      foreach ($this->testData as $key => $value) {\n        $dataWeWant = '!<td>' . $key . '</td>!';\n        $this->assertRegExp($dataWeWant, $result);\n      }\n    }\n    }\n    ```", "```php\n    <?php\n    use PHPUnit\\Framework\\TestCase;\n    require_once __DIR__ . '/VisitorService.php';\n    require_once __DIR__ . '/VisitorOps.php';\n    class VisitorServiceTestAnonMockBuilder extends TestCase\n    {\n      // code is identical to VisitorServiceTestAnon\n      public function setup()\n      {\n        $data = array();\n        for ($x = 1; $x <= 3; $x++) {\n          $data[$x]['id'] = $x;\n          $data[$x]['email'] = $x . 'test@unlikelysource.com';\n          $data[$x]['visit_date'] = \n            '2000-0' . $x . '-0' . $x . ' 00:00:00';\n          $data[$x]['comments'] = 'TEST ' . $x;\n          $data[$x]['name'] = 'TEST ' . $x;\n      }\n      $this->testData = $data;\n        $this->visitorService = \n          new VisitorService($this->dbConfig);\n        $opsMock = $this->getMockBuilder(VisitorOps::class)\n                        ->setMethods(['findAll'])\n                        ->disableOriginalConstructor()\n                        ->getMock();\n                        $opsMock->expects($this->once())\n                        ->method('findAll')\n                        ->with()\n                        ->will($this->returnValue($this->testData));\n                        $this->visitorService->setVisitorOps($opsMock);\n      }\n      // remaining code is the same\n    }\n    ```", "```php\n**phpunit SimpleTest SimpleTest.php**\n\n```", "```php\npublic function testDiv()\n{\n  $this->assertEquals(2, div(4, 2));\n  $this->assertEquals(99, div(4, 0));\n}\n```", "```php\n<?php\nuse PHPUnit\\Framework\\TestCase;\nrequire_once __DIR__ . '/VisitorOps.php';\nclass SimpleDatabaseTest extends TestCase\n{\n  protected $visitorOps;\n  protected $dbConfig = [\n    'driver'   => 'mysql',\n    'host'     => 'localhost',\n    'dbname'   => 'php7cookbook_test',\n    'user'     => 'cook',\n    'password' => 'book',\n    'errmode'  => PDO::ERRMODE_EXCEPTION,\n  ];\n  protected $testData = [\n    'id' => 1,\n    'email' => 'test@unlikelysource.com',\n    'visit_date' => '2000-01-01 00:00:00',\n    'comments' => 'TEST',\n    'name' => 'TEST'\n  ];\n}\n```", "```php\npublic function setup()\n{\n  $this->visitorOps = new VisitorOps($this->dbConfig);\n  $this->visitorOps->addVisitor($this->testData);\n  $this->assertRegExp('/INSERT/', $this->visitorOps->getSql());\n}\n```", "```php\npublic function teardown()\n{\n  $result = $this->visitorOps->removeById(1);\n  $result = $this->visitorOps->findById(1);\n  $this->assertEquals(FALSE, $result);\n  unset($this->visitorOps);\n}\n```", "```php\npublic function testFindAll()\n{\n  $result = $this->visitorOps->findAll();\n  $this->assertInstanceOf(Generator::class, $result);\n  $top = $result->current();\n  $this->assertCount(5, $top);\n  $this->assertArrayHasKey('name', $top);\n  $this->assertEquals($this->testData['name'], $top['name']);\n}\n```", "```php\npublic function testFindById()\n{\n  $result = $this->visitorOps->findById(1);\n  $this->assertCount(5, $result);\n  $this->assertArrayHasKey('name', $result);\n  $this->assertEquals($this->testData['name'], $result['name']);\n}\n```", "```php\n<?php\nuse PHPUnit\\Framework\\TestCase;\nrequire_once __DIR__ . '/VisitorService.php';\nrequire_once __DIR__ . '/VisitorOpsMock.php';\n\nclass VisitorServiceTest extends TestCase\n{\n  protected $visitorService;\n  protected $dbConfig = [\n    'driver'   => 'mysql',\n    'host'     => 'localhost',\n    'dbname'   => 'php7cookbook_test',\n    'user'     => 'cook',\n    'password' => 'book',\n    'errmode'  => PDO::ERRMODE_EXCEPTION,\n  ];\n}\n```", "```php\npublic function setup()\n{\n  $this->visitorService = new VisitorService($this->dbConfig);\n  $this->visitorService->setVisitorOps(new VisitorOpsMock());\n}\npublic function teardown()\n{\n  unset($this->visitorService);\n}\n```", "```php\npublic function testShowAllVisitors()\n{\n  $result = $this->visitorService->showAllVisitors();\n  $this->assertRegExp('!^<table>.+</table>$!', $result);\n  $testData = $this->visitorService->getVisitorOps()->getTestData();\n  foreach ($testData as $key => $value) {\n    $dataWeWant = '!<td>' . $key . '</td>!';\n    $this->assertRegExp($dataWeWant, $result);\n  }\n}\n}\n```", "```php\n    **mkdir tests**\n    **cp *Test.php tests**\n\n    ```", "```php\n    <?php\n    use PHPUnit\\Framework\\TestCase;\n    require_once __DIR__ . '/../chap_13_unit_test_simple.php';\n\n    class SimpleTest extends TestCase\n    {\n      // etc.\n    ```", "```php\n    **phpunit tests**\n\n    ```", "```php\n    **phpunit --boostrap tests_with_autoload/bootstrap.php tests**\n\n    ```", "```php\n    <?php\n    require __DIR__ . '/../../Application/Autoload/Loader.php';\n    Application\\Autoload\\Loader::init([__DIR__]);\n    ```", "```php\n    <phpunit>\n      <testsuites>\n        <testsuite name=\"simple\">\n          <file>SimpleTest.php</file>\n          <file>SimpleDbTest.php</file>\n          <file>SimpleClassTest.php</file>\n        </testsuite>\n      </testsuites>\n    </phpunit>\n    ```", "```php\n    <phpunit bootstrap=\"bootstrap.php\">\n      <testsuites>\n        <testsuite name=\"visitor\">\n          <directory>Simple</directory>\n        </testsuite>\n      </testsuites>\n    </phpunit>\n    ```", "```php\n**phpunit tests**\n\n```", "```php\nnamespace Demo;\n```", "```php\n<?php\nnamespace Simple;\nuse Demo\\Demo;\nuse PHPUnit\\Framework\\TestCase;\n\nclass ClassTest extends TestCase\n{\n  protected $demo;\n  public function setup()\n  {\n    $this->demo = new Demo();\n  }\n// etc.\n```", "```php\n<phpunit bootstrap=\"bootstrap.php\">\n  <testsuites>\n    <testsuite name=\"visitor\">\n      <directory>Simple</directory>\n    </testsuite>\n  </testsuites>\n</phpunit>\n```", "```php\n**phpunit -c tests_with_autoload/phpunit.xml**\n\n```", "```php\n    CREATE TABLE 'prospects' (\n      'id' int(11) NOT NULL AUTO_INCREMENT,\n      'first_name' varchar(128) NOT NULL,\n      'last_name' varchar(128) NOT NULL,\n      'address' varchar(256) DEFAULT NULL,\n      'city' varchar(64) DEFAULT NULL,\n      'state_province' varchar(32) DEFAULT NULL,\n      'postal_code' char(16) NOT NULL,\n      'phone' varchar(16) NOT NULL,\n      'country' char(2) NOT NULL,\n      'email' varchar(250) NOT NULL,\n      'status' char(8) DEFAULT NULL,\n      'budget' decimal(10,2) DEFAULT NULL,\n      'last_updated' datetime DEFAULT NULL,\n      PRIMARY KEY ('id'),\n      UNIQUE KEY 'UNIQ_35730C06E7927C74' ('email')\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n    ```", "```php\n    namespace Application\\Test;\n\n    use PDO;\n    use Exception;\n    use DateTime;\n    use DateInterval;\n    use PDOException;\n    use SplFileObject;\n    use InvalidArgumentsException;\n    use Application\\Database\\Connection;\n\n    class FakeData\n    {\n      // data generation methods here\n    }\n    ```", "```php\n    const MAX_LOOKUPS     = 10;\n    const SOURCE_FILE     = 'file';\n    const SOURCE_TABLE    = 'table';\n    const SOURCE_METHOD   = 'method';\n    const SOURCE_CALLBACK = 'callback';\n    const FILE_TYPE_CSV   = 'csv';\n    const FILE_TYPE_TXT   = 'txt';\n    const ERROR_DB        = 'ERROR: unable to read source table';\n    const ERROR_FILE      = 'ERROR: file not found';\n    const ERROR_COUNT     = 'ERROR: unable to ascertain count or ID column missing';\n    const ERROR_UPLOAD    = 'ERROR: unable to upload file';\n    const ERROR_LOOKUP    = 'ERROR: unable to find any IDs in the source table';\n\n    protected $connection;\n    protected $mapping;\n    protected $files;\n    protected $tables;\n    ```", "```php\n    protected $alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    protected $street1 = ['Amber','Blue','Bright','Broad','Burning',\n      'Cinder','Clear','Dewy','Dusty','Easy']; // etc. \n    protected $street2 = ['Anchor','Apple','Autumn','Barn','Beacon',\n      'Bear','Berry','Blossom','Bluff','Cider','Cloud']; // etc.\n    protected $street3 = ['Acres','Arbor','Avenue','Bank','Bend',\n      'Canyon','Circle','Street'];\n    protected $email1 = ['northern','southern','eastern','western',\n      'fast','midland','central'];\n    protected $email2 = ['telecom','telco','net','connect'];\n    protected $email3 = ['com','net'];\n    ```", "```php\n    public function __construct(Connection $conn, array $mapping)\n    {\n      $this->connection = $conn;\n      $this->mapping = $mapping;\n    }\n    ```", "```php\n    public function getAddress($entry)\n    {\n      return random_int(1,999)\n       . ' ' . $this->street1[array_rand($this->street1)]\n       . ' ' . $this->street2[array_rand($this->street2)]\n       . ' ' . $this->street3[array_rand($this->street3)];\n    }\n    ```", "```php\n    public function getPostalCode($entry, $pattern = 1)\n    {\n      return $this->alpha[random_int(0,25)]\n       . $this->alpha[random_int(0,25)]\n       . random_int(1, 99)\n       . ' '\n       . random_int(1, 9)\n       . $this->alpha[random_int(0,25)]\n       . $this->alpha[random_int(0,25)];\n    }\n    ```", "```php\n    public function getEmail($entry, $params = NULL)\n    {\n      $first = $entry[$params[0]] ?? $this->alpha[random_int(0,25)];\n      $last  = $entry[$params[1]] ?? $this->alpha[random_int(0,25)];\n      return $first[0] . '.' . $last\n       . '@'\n       . $this->email1[array_rand($this->email1)]\n       . $this->email2[array_rand($this->email2)]\n       . '.'\n       . $this->email3[array_rand($this->email3)];\n    }\n    ```", "```php\n    public function getDate($entry, $params)\n    {\n      list($fromDate, $maxDays) = $params;\n      $date = new DateTime($fromDate);\n      $date->sub(new DateInterval('P' . random_int(0, $maxDays) . 'D'));\n      return $date->format('Y-m-d H:i:s');\n    }\n    ```", "```php\n    public function getEntryFromFile($name, $type)\n    {\n      if (empty($this->files[$name])) {\n          $this->pullFileData($name, $type);\n      }\n      return $this->files[$name][\n      random_int(0, count($this->files[$name]))];\n    }\n    ```", "```php\n    public function pullFileData($name, $type)\n    {\n      if (!file_exists($name)) {\n          throw new Exception(self::ERROR_FILE);\n      }\n      $fileObj = new SplFileObject($name, 'r');\n      if ($type == self::FILE_TYPE_CSV) {\n          while ($data = $fileObj->fgetcsv()) {\n            $this->files[$name][] = trim($data);\n          }\n      } else {\n          while ($data = $fileObj->fgets()) {\n            $this->files[$name][] = trim($data);\n          }\n      }\n    ```", "```php\n    public function getEntryFromTable($tableName, $idColumn, $mapping)\n    {\n      $entry = array();\n      try {\n          if (empty($this->tables[$tableName])) {\n            $sql  = 'SELECT ' . $idColumn . ' FROM ' . $tableName \n              . ' ORDER BY ' . $idColumn . ' ASC LIMIT 1';\n            $stmt = $this->connection->pdo->query($sql);\n            $this->tables[$tableName]['first'] = \n              $stmt->fetchColumn();\n            $sql  = 'SELECT ' . $idColumn . ' FROM ' . $tableName \n              . ' ORDER BY ' . $idColumn . ' DESC LIMIT 1';\n            $stmt = $this->connection->pdo->query($sql);\n            $this->tables[$tableName]['last'] = \n              $stmt->fetchColumn();\n        }\n    ```", "```php\n    $result = FALSE;\n    $count = self::MAX_LOOKUPS;\n    $sql  = 'SELECT * FROM ' . $tableName \n      . ' WHERE ' . $idColumn . ' = ?';\n    $stmt = $this->connection->pdo->prepare($sql);\n    ```", "```php\n    do {\n      $id = random_int($this->tables[$tableName]['first'], \n        $this->tables[$tableName]['last']);\n      $stmt->execute([$id]);\n      $result = $stmt->fetch(PDO::FETCH_ASSOC);\n    } while ($count-- && !$result);\n      if (!$result) {\n          error_log(__METHOD__ . ':' . self::ERROR_LOOKUP);\n          throw new Exception(self::ERROR_LOOKUP);\n      }\n    } catch (PDOException $e) {\n        error_log(__METHOD__ . ':' . $e->getMessage());\n        throw new Exception(self::ERROR_DB);\n    }\n    ```", "```php\n    foreach ($mapping as $key => $value) {\n      $entry[$value] = $result[$key] ?? NULL;\n    }\n    return $entry;\n    }\n    ```", "```php\n    public function getRandomEntry()\n    {\n      $entry = array();\n      foreach ($this->mapping as $key => $value) {\n        if (isset($value['source'])) {\n          switch ($value['source']) {\n    ```", "```php\n            case self::SOURCE_FILE :\n                $entry[$key] = $this->getEntryFromFile(\n                $value['name'], $value['type']);\n              break;\n    ```", "```php\n            case self::SOURCE_CALLBACK :\n                $entry[$key] = $value['name']();\n              break;\n    ```", "```php\n            case self::SOURCE_TABLE :\n                $result = $this->getEntryFromTable(\n                $value['name'],$value['idCol'],$value['mapping']);\n                $entry = array_merge($entry, $result);\n              break;\n    ```", "```php\n            case self::SOURCE_METHOD :\n            default :\n              if (!empty($value['params'])) {\n                  $entry[$key] = $this->{$value['name']}(\n                    $entry, $value['params']);\n              } else {\n                  $entry[$key] = $this->{$value['name']}($entry);\n              }\n            }\n        }\n      }\n      return $entry;\n    }\n    ```", "```php\n    public function generateData(\n    $howMany, $destTableName = NULL, $truncateDestTable = FALSE)\n    {\n      try {\n          if ($destTableName) {\n            $sql = 'INSERT INTO ' . $destTableName\n              . ' (' . implode(',', array_keys($this->mapping)) \n              . ') '. ' VALUES ' . ' (:' \n              . implode(',:', array_keys($this->mapping)) . ')';\n            $stmt = $this->connection->pdo->prepare($sql);\n            if ($truncateDestTable) {\n              $sql = 'DELETE FROM ' . $destTableName;\n              $this->connection->pdo->query($sql);\n            }\n          }\n      } catch (PDOException $e) {\n          error_log(__METHOD__ . ':' . $e->getMessage());\n          throw new Exception(self::ERROR_COUNT);\n      }\n    ```", "```php\n    for ($x = 0; $x < $howMany; $x++) {\n      $entry = $this->getRandomEntry();\n      if ($insert) {\n        try {\n            $stmt->execute($entry);\n        } catch (PDOException $e) {\n            error_log(__METHOD__ . ':' . $e->getMessage());\n            throw new Exception(self::ERROR_DB);\n        }\n      }\n      yield $entry;\n    }\n    }\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', __DIR__ . '/../config/db.config.php');\ndefine('FIRST_NAME_FILE', __DIR__ . '/../data/files/first_names.txt');\ndefine('LAST_NAME_FILE', __DIR__ . '/../data/files/surnames.txt');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Test\\FakeData;\nuse Application\\Database\\Connection;\n```", "```php\n$mapping = [\n  'first_name'   => ['source' => FakeData::SOURCE_FILE,\n  'name'         => FIRST_NAME_FILE,\n  'type'         => FakeData::FILE_TYPE_TXT],\n  'last_name'    => ['source' => FakeData::SOURCE_FILE,\n  'name'         => LAST_NAME_FILE,\n  'type'         => FakeData::FILE_TYPE_TXT],\n```", "```php\n  'address'      => ['source' => FakeData::SOURCE_METHOD,\n  'name'         => 'getAddress'],\n  'email'        => ['source' => FakeData::SOURCE_METHOD,\n  'name'         => 'getEmail',\n  'params'       => ['first_name','last_name']],\n  'last_updated' => ['source' => FakeData::SOURCE_METHOD,\n  'name'         => 'getDate',\n  'params'       => [date('Y-m-d'), 365*5]]\n```", "```php\n  'phone'        => ['source' => FakeData::SOURCE_CALLBACK,\n  'name'         => function () {\n                    return sprintf('%3d-%3d-%4d', random_int(101,999),\n                    random_int(101,999), random_int(0,9999)); }],\n  'status'       => ['source' => FakeData::SOURCE_CALLBACK,\n  'name'         => function () { $status = ['BEG','INT','ADV']; \n                    return $status[rand(0,2)]; }],\n  'budget'       => ['source' => FakeData::SOURCE_CALLBACK,\n                     'name' => function() { return random_int(0, 99999) \n                     + (random_int(0, 99) * .01); }]\n```", "```php\n'city' => ['source' => FakeData::SOURCE_TABLE,\n'name' => 'world_city_data',\n'idCol' => 'id',\n'mapping' => [\n'city' => 'city', \n'state_province' => 'state_province',\n'postal_code_prefix' => 'postal_code', \n'iso2' => 'country']\n],\n  'state_province'=> [],\n  'postal_code'  => [],\n  'country'    => [],\n];\n```", "```php\n$destTableName = 'prospects';\n$conn = new Connection(include DB_CONFIG_FILE);\n$fake = new FakeData($conn, $mapping);\nforeach ($fake->generateData(10) as $row) {\n  echo implode(':', $row) . PHP_EOL;\n}\n```", "```php\n    namespace Application\\Security;\n    use ReflectionClass;\n    use InvalidArgumentsException;\n    class SessOptions\n    {\n      const ERROR_PARAMS = 'ERROR: invalid session options';\n    ```", "```php\n    const SESS_OP_NAME         = 'name';\n    const SESS_OP_LAZY_WRITE   = 'lazy_write';  // AVAILABLE // SINCE PHP 7.0.0.\n    const SESS_OP_SAVE_PATH    = 'save_path';\n    const SESS_OP_SAVE_HANDLER = 'save_handler';\n    // etc.\n    ```", "```php\n    protected $options;\n    protected $allowed;\n    public function __construct(array $options)\n    {\n      $reflect = new ReflectionClass(get_class($this));\n      $this->allowed = $reflect->getConstants();\n      $this->allowed = array_flip($this->allowed);\n      unset($this->allowed[self::ERROR_PARAMS]);\n      foreach ($options as $key => $value) {\n        if(!isset($this->allowed[$key])) {\n          error_log(__METHOD__ . ':' . self::ERROR_PARAMS);\n          throw new InvalidArgumentsException(\n          self::ERROR_PARAMS);\n        }\n      }\n      $this->options = $options;\n    }\n    ```", "```php\n    public function getAllowed()\n    {\n      return $this->allowed;\n    }\n\n    public function start()\n    {\n      session_start($this->options);\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Security\\SessOptions;\n```", "```php\n$options = [\n  SessOptions::SESS_OP_USE_ONLY_COOKIES => 1,\n  SessOptions::SESS_OP_COOKIE_LIFETIME => 300,\n  SessOptions::SESS_OP_COOKIE_HTTPONLY => 1,\n  SessOptions::SESS_OP_NAME => 'UNLIKELYSOURCE',\n  SessOptions::SESS_OP_SAVE_PATH => __DIR__ . '/session'\n];\n```", "```php\n$sessOpt = new SessOptions($options);\n$sessOpt->start();\n$_SESSION['test'] = 'TEST';\nphpinfo(INFO_VARIABLES);\n```"]