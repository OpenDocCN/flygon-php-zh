- en: Creating a RESTful API Using Laravel - Part 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Laravel构建RESTful API - 第2部分
- en: In this chapter, we will continue to build our API. We still have a long way
    to go in Laravel.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续构建我们的API。在Laravel中，我们还有很长的路要走。
- en: We will learn how to use some features that are very common in every web application,
    such as authentication and the customization of API errors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何使用一些在每个Web应用程序中非常常见的功能，例如身份验证和API错误的自定义。
- en: Remember, we are creating a RESTful API and, unlike traditional applications
    such as MVC, our error model is extremely varied and always returned when we used
    the JSON format.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们正在创建一个RESTful API，与传统的应用程序（如MVC）不同，我们的错误模型非常多样化，并且始终在使用JSON格式时返回。
- en: 'In this chapter, you will learn how to build a solid RESTful API by doing the
    following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何通过以下方式构建一个坚实的RESTful API：
- en: Dealing with request validation and error messages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理请求验证和错误消息
- en: Using token-based authentication
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于令牌的身份验证
- en: Dealing with Laravel resources
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理Laravel资源
- en: Dealing with request validation and error messages
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理请求验证和错误消息
- en: The Laravel framework offers us many ways to show error messages, and, by default,
    Laravel's **base controller class** uses a `ValidatesRequests` trait that provides
    methods to validate the incoming HTTP request, including many default rules such
    as required, email format, date format, string, and much more.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel框架为我们提供了许多显示错误消息的方法，默认情况下，Laravel的**基础控制器类**使用`ValidatesRequests`特性，提供了验证传入HTTP请求的方法，包括许多默认规则，如必填、电子邮件格式、日期格式、字符串等等。
- en: You can read more about the possible validation rules at [https://laravel.com/docs/5.6/validation#available-validation-rules](https://laravel.com/docs/5.6/validation#available-validation-rules).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://laravel.com/docs/5.6/validation#available-validation-rules](https://laravel.com/docs/5.6/validation#available-validation-rules)了解更多有关可能的验证规则的信息。
- en: 'It is pretty simple to use request validation, as we can see in the following
    code block:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用请求验证非常简单，如下面的代码块所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For example, let's see how we can validate the incoming request to the `bikes`
    endpoint using the HTTP `POST` method to `localhost:8081/api/bikes`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看看如何使用HTTP `POST`方法验证对`localhost:8081/api/bikes`的`bikes`端点的传入请求。
- en: 'The validation code will look as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 验证代码如下所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous operation failed because we purposely didn''t send a required
    file in our imaginary request. However, the return message has some interesting
    things:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的操作失败是因为我们故意没有在我们的虚构请求中发送所需的文件。然而，返回消息中有一些有趣的东西：
- en: HTTP status code: `422`
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP状态码：`422`
- en: 'The following JSON response error message:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下JSON响应错误消息：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Pretty simple, right? Laravel performs all the validations behind the scenes
    and gives us an elaborate error message.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 相当简单，对吧？Laravel在幕后执行所有验证，并给我们提供了详细的错误消息。
- en: But what if we want to take control over all the message fields? The answer
    is that we can do this using manual validation with a validator instance using
    the validator facade. This is what we'll be looking at in the following sections.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们想控制所有的消息字段怎么办？答案是，我们可以使用`validator`门面和验证器实例进行手动验证。这是我们接下来要看的内容。
- en: HTTP status code
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP状态码
- en: Before we go further in implementing the validator, let's take a break and review
    some HTTP status code. As we saw previously, we have a 422 HTTP status code named **Unprocessable
    entity**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步实现验证之前，让我们暂停一下，回顾一些HTTP状态码。正如我们之前看到的，我们有一个名为**不可处理的实体**的422 HTTP状态码。
- en: 'The following table shows the most common and useful error codes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了最常见和有用的错误代码：
- en: '| Code | Name | Description |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | 名称 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 200 | OK | Everything''s all right! |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 200 | 正常 | 一切都好！ |'
- en: '| 201 | Created | Resource was created successfully. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 201 | 已创建 | 资源创建成功。 |'
- en: '| 202 | Accepted | The request has been accepted for further processing, which
    will be completed later. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 202 | 已接受 | 请求已被接受进行进一步处理，稍后将完成。 |'
- en: '| 204 | OK | Resource was deleted successfully. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 204 | 正常 | 资源删除成功删除。 |'
- en: '| 302 | Redirect | A common redirect response; you can GET the representation
    at the URI in the location response header. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 302 | 重定向 | 常见的重定向响应；您可以在位置响应标头中获取URI的表示。 |'
- en: '| 304 | Not Modified | There is no new data to return. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 304 | 未修改 | 没有新数据返回。 |'
- en: '| 400 | Bad Request | Client error. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 400 | 错误请求 | 客户端错误。 |'
- en: '| 401 | Unauthorized | You are not logged in, for example, you''re not using
    a valid access token. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 401 | 未经授权 | 您未登录，例如，您未使用有效的访问令牌。 |'
- en: '| 403 | Forbidden | You are authenticated but do not have access to what you
    are trying to do. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 403 | 禁止 | 您已经经过身份验证，但无权进行您正在尝试的操作。 |'
- en: '| 404 | Not found | The resource you are requesting does not exist. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 404 | 未找到 | 您请求的资源不存在。 |'
- en: '| 405 | Method not allowed | The request type is not allowed, for example,
    /bikes is a resource and POST /bikes is a valid action, but PUT /bikes is not.
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 405 | 方法不允许 | 不允许该请求类型，例如，/bikes是一个资源，POST /bikes是一个有效操作，但PUT /bikes不是。 |'
- en: '| 409 | Conflict | Resource already exists. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 409 | 冲突 | 资源已经存在。 |'
- en: '| 422 | Unprocessable entity | Validation failed. The request and the format
    is valid, however, the request was unable to process. For instance, this occurs
    when sent data does not pass validation tests. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 422 | 不可处理的实体 | 验证失败。请求和格式有效，但请求无法处理。例如，当发送的数据未通过验证测试时会发生这种情况。 |'
- en: '| 500 | Server error | An error occured on the server and it was not the consumer''s
    fault. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 500 | 服务器错误 | 服务器发生错误，而不是消费者的错误。 |'
- en: You can read more about status codes at [http://www.restapitutorial.com/httpstatuscodes.html](http://www.restapitutorial.com/httpstatuscodes.html).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.restapitutorial.com/httpstatuscodes.html](http://www.restapitutorial.com/httpstatuscodes.html)了解更多有关状态码的信息。
- en: Implementing the Controllers validation
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现控制器验证
- en: 'Well, we have gone through a lot of theory, so now it is time to write some
    code. Let''s implement the `Validator` on API controllers:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们已经学习了很多理论，现在是时候写一些代码了。让我们在API控制器上实现`Validator`：
- en: 'Open `project/app/Http/Controllers/API/BikeController.php` and add the following
    code right after the use App\Bike statement:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Http/Controllers/API/BikeController.php`，并在`use App\Bike`语句之后添加以下代码：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, add the following code inside the `store(Request $request)` method:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`store(Request $request)`方法中添加以下代码：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that, in the previous code, we are using the response JSON format and set
    the errors and status code as parameters of the `json()` method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的代码中，我们使用响应JSON格式，并将错误和状态代码设置为`json()`方法的参数。
- en: We will do the same for the `update(Request request,request,id)` method using
    the same code block from *step 2*.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用相同的代码块从*步骤2*中为`update(Request request,request,id)`方法做同样的操作。
- en: 'Open `project/app/Http/Controllers/API/BuilderController.php` and add the following
    code right after the use App\Builder statement:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Http/Controllers/API/BuilderController.php`，并在`use App\Builder`语句之后添加以下代码：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, add the following code inside the  `store(Request $request)` method:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`store(Request $request)`方法中添加以下代码：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will do the same for the `update(Request request,request,id)` method using
    the same code block from *step 5.*
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用相同的代码块从*步骤5*中为`update(Request request,request,id)`方法做同样的操作。
- en: 'Open `project/app/Http/Controllers/API/ItemController.php` and add the following
    code right after the  use App\Item statement:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Http/Controllers/API/ItemController.php`，并在`use App\Item`语句之后添加以下代码：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, add the following code inside the `store(Request $request)` method:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`store(Request $request)`方法中添加以下代码：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will do the same for the `update(Request request,request,id)` method using
    the same code block from *step 7.*
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用相同的代码块从*步骤7*中为`update(Request request,request,id)`方法做同样的操作。
- en: All the validation boilerplate code was placed in the `store()` and `update()` methods,
    so it is time to write some error handlers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所有验证样板代码都放在了`store()`和`update()`方法中，所以现在是时候编写一些错误处理程序了。
- en: Adding custom error handling
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义错误处理
- en: 'By default, Laravel has a very powerful error handling engine, but it is totally
    dedicated to the MVC development pattern, as we mentioned previously. In the next
    few lines, we''ll see how we can change this default behavior and add some specific
    error handling to our API:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Laravel具有非常强大的错误处理引擎，但它完全专注于MVC开发模式，正如我们之前提到的。在接下来的几行中，我们将看到如何改变这种默认行为，并为我们的API添加一些特定的错误处理：
- en: 'Open `project/app/Exceptions/Handler.php` and add the following code inside the `render($request,
    Exception, $exception)` function:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Exceptions/Handler.php`，并在`render($request, Exception, $exception)`函数中添加以下代码：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the previous code, besides mapping the main errors of our API, we still need
    to add some custom errors for operations involving authentication with JWT. Don't
    worry; in the next section, we will see how to use JWT to protect some routes
    for our API.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，除了映射我们的API的主要错误之外，我们还需要为涉及JWT身份验证的操作添加一些自定义错误。别担心，在下一节中，我们将看到如何使用JWT来保护我们API的一些路由。
- en: 'Now, let''s add the following code to the top of the file, after the `ExceptionHandler` import:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在文件顶部添加以下代码，放在`ExceptionHandler`导入之后：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, we will be able to see the proper message instead of the default error
    page from Laravel.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将能够看到正确的消息，而不是来自Laravel的默认错误页面。
- en: 'Note that we keep the default Laravel error page and just add custom handling.
    It is very important that we send the `header: accept: application / json`. In
    this way, Laravel can identify that it should send the response in JSON format
    instead of sending the standard error page.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，我们保留了默认的Laravel错误页面，并添加了自定义处理。非常重要的是，我们发送`header: accept: application /
    json`。这样，Laravel就可以确定应该以JSON格式发送响应，而不是发送标准的错误页面。'
- en: 'Let''s take a brief test and check what happens when we try to access a protected
    URL. Open a Terminal window and type the following code:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进行简短的测试，看看当我们尝试访问受保护的URL时会发生什么。打开终端窗口，输入以下代码：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result will be a JSON with the following content:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是一个JSON，内容如下：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s try another error and see what happens when we try to send a POST
    method.  Type the following code in Terminal:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试另一个错误，看看当我们尝试发送POST方法时会发生什么。在终端中输入以下代码：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result will be a JSON with the following content:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是一个JSON，内容如下：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Checking API URLs with the Swagger UI
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Swagger UI检查API URL
- en: 'After all of this boilerplate code, it is time to test the API and see all
    the work we have done in this chapter come to life:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些样板代码之后，现在是测试API并看到我们在本章中所做的所有工作生效的时候了：
- en: 'Open Terminal and type the following command:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，输入以下命令：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Don''t forget to go into the `php-fpm` containers bash with the following command:
    `docker-compose exec php-fpm bash`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用以下命令进入`php-fpm`容器的bash：`docker-compose exec php-fpm bash`。
- en: Open your default browser and go to `http://localhost:8081/api/documentation`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开默认浏览器，转到`http://localhost:8081/api/documentation`。
- en: 'We will see the following result with all the APIs documented properly:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到所有API都被正确记录的以下结果：
- en: '![](assets/7df5634d-5005-4518-9754-bb97a17237a0.png)Swagger UI'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7df5634d-5005-4518-9754-bb97a17237a0.png)Swagger UI'
- en: Let's check some operations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一些操作。
- en: Get all records
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取所有记录
- en: 'Let''s see how we can retrieve a list of bikes from our API using the `GET`
    method on the Swagger UI:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用Swagger UI上的`GET`方法从我们的API中检索自行车列表：
- en: Click on **GET /api/bikes** to open the panel.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**GET /api/bikes**以打开面板。
- en: Click on the try it out button.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**试一下**按钮。
- en: Click on the **execute** button.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**执行**按钮。
- en: 'We will see something similar to the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到类似以下截图的内容：
- en: '![](assets/bcb715fa-74f3-4f43-b281-f0b3c3966cc2.png)GET request'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bcb715fa-74f3-4f43-b281-f0b3c3966cc2.png)GET请求'
- en: Get record by ID
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按ID获取记录
- en: 'Let''s see how we can get a list of bikes from our API:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何从我们的API中获取自行车列表：
- en: Click on **GET /api/bikes/{id}** to open the panel.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**GET /api/bikes/{id}**以打开面板。
- en: Click on the **try it out** button.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**试一下**按钮。
- en: Type `3` inside the ID input box.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ID输入框中输入`3`。
- en: Click on the **execute** button.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**执行**按钮。
- en: 'Will see something similar to the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将看到类似以下截图的内容：
- en: '![](assets/bce94ec5-ce96-40c1-b928-4a5bbad8415c.png)GET by ID request'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bce94ec5-ce96-40c1-b928-4a5bbad8415c.png)按ID请求获取'
- en: Checking API response errors
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查API响应错误
- en: 'Now, it is time to check some error messages:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候检查一些错误消息了：
- en: Click on **PUT /api/bikes/{id}** to open the panel.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**PUT /api/bikes/{id}**打开面板。
- en: Click on the **try it out** button.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**尝试**按钮。
- en: Type `1` inside the ID input box.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ID输入框中输入`1`。
- en: 'Replace the `Example Value` placeholder with the following code:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换`示例值`占位符：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Click on the execute button.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击`执行`按钮。
- en: 'We will see something similar to the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到类似以下截图的内容：
- en: '![](assets/c7248c7c-5d4c-4ae5-9c88-a4f589167a28.png)Update failed with error
    message'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c7248c7c-5d4c-4ae5-9c88-a4f589167a28.png)更新失败，带有错误消息'
- en: As we can observe, everything happened as expected.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所观察到的，一切都如预期的那样发生了。
- en: Token-based authentication
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于令牌的身份验证
- en: Let's understand a bit more about API authentication with Laravel. Even though
    Laravel is an MVC framework, we can use the token-based authentication feature.
    Even Laravel itself has a library called Passport.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解使用Laravel进行API身份验证。尽管Laravel是一个MVC框架，但我们可以使用基于令牌的身份验证功能。即使Laravel本身也有一个名为Passport的库。
- en: Laravel Passport is a library that works with the OAuth2 standard. This pattern
    determines a way to perform application authentication for a web application (API)
    through tokens, while JWT focuses on authenticating users through tokens.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel Passport是一个与OAuth2标准配合使用的库。这种模式确定了通过令牌对Web应用程序（API）执行应用程序身份验证的方法，而JWT侧重于通过令牌对用户进行身份验证。
- en: Laravel Passport is a much bigger layer of abstraction than simple JWT, and
    it is primarily designed to be fully fledged and easy to set up and use as an
    OAuth2 server.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel Passport比简单的JWT更大的抽象层，它主要设计为完全成熟且易于设置和使用作为OAuth2服务器。
- en: An alternative to this is the use of libraries such as `tymon/jwt-auth`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况的替代方案是使用诸如`tymon/jwt-auth`之类的库。
- en: In fact, Laravel Passport uses JWT for authentication, but that's just an implementation
    detail. `tymon/jwt-auth` is closer to a simple token-based authentication, though
    it is still pretty powerful and useful.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Laravel Passport使用JWT进行身份验证，但这只是一个实现细节。`tymon/jwt-auth`更接近于简单的基于令牌的身份验证，尽管它仍然非常强大和有用。
- en: For the type of API we are building, JWT is the ideal method for our implementation.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们正在构建的API类型，JWT是我们实现的理想方法。
- en: You can read more about `jwt-auth` at [https://github.com/tymondesigns/jwt-auth](https://github.com/tymondesigns/jwt-auth).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/tymondesigns/jwt-auth](https://github.com/tymondesigns/jwt-auth)上阅读有关`jwt-auth`的更多信息。
- en: Installing tymon-jwt-auth
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装tymon-jwt-auth
- en: Let's learn how to install and configure `tymon/jwt-auth`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何安装和配置`tymon/jwt-auth`。
- en: 'The installation process is pretty simple, but, as the `tymon/jwt-auth` library
    is in constant development, we should take some care related what the version
    we will use:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程非常简单，但是由于`tymon/jwt-auth`库在不断发展，我们应该注意我们将使用的版本：
- en: 'Open the `project/composer.json` file and add the following line of code, right
    after Laravel/Tinker:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/composer.json`文件，并在`Laravel/Tinker`之后添加以下行代码：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, it is time to publish the vendor package. Still in your Terminal window
    and inside the Tinker console, type the following command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候发布供应商包了。仍然在您的终端窗口和Tinker控制台中，输入以下命令：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that we are using Laravel 5.6 and `jwt-auth` 1.0, so we don't need to perform
    any additional actions to load JWT providers. The `jwt-auth` documents sometimes
    look like a mess and are very confusing, but don't worry, just follow our steps
    and you will be safe from mismatching documentation.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用Laravel 5.6和`jwt-auth` 1.0，因此我们不需要执行任何额外的操作来加载JWT提供程序。`jwt-auth`文档有时看起来很混乱，非常令人困惑，但不要担心，只需按照我们的步骤进行操作，您就不会受到不匹配的文档的影响。
- en: 'Let''s generate the secret. Still in the Terminal window, type the following
    command:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们生成密钥。仍然在终端窗口中，输入以下命令：
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The previous command will generate a secret key on your `.env` file, and will
    look something like the following line:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一个命令将在您的`.env`文件中生成一个密钥，并且看起来类似以下行：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: At this point, we have successfully installed `jwt-auth`, but we need to take
    some more steps to make our API secure.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经成功安装了`jwt-auth`，但是我们需要采取一些额外的步骤来使我们的API安全。
- en: Updating the User model
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新用户模型
- en: Now, we need to update the `User` model so that we can start to protect the
    API endpoints with user authentication.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要更新`User`模型，以便我们可以开始使用用户身份验证来保护API端点。
- en: First, we need to implement the `Tymon\JWTAuth\Contracts\JWTSubject` contract
    on our `User` model, which requires two methods: `getJWTIdentifier()` and `getJWTCustomClaims()`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在我们的`User`模型上实现`Tymon\JWTAuth\Contracts\JWTSubject`合同，这需要两种方法：`getJWTIdentifier()`和`getJWTCustomClaims()`。
- en: 'Open ` project/User.php` and replace its content with the following code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`project/User.php`并用以下代码替换其内容：
- en: '[PRE22]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Setting up the auth guard
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置身份验证守卫
- en: 'Now, let''s make some adjustments to the `config.auth.php` file in order to
    protect some routes:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`config.auth.php`文件进行一些调整，以保护一些路由：
- en: 'Open `project/config/auth.php` and replace the API driver with the following
    code:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/config/auth.php`并用以下代码替换API驱动程序：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that we replaced the default Laravel authentication drivers with `api` and `jwt`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我们用`api`和`jwt`替换了默认的Laravel身份验证驱动程序。
- en: Creating the authController
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建authController
- en: For our application, we will use only one controller to contain all our operations
    of registration and login, which are register, login, and logout.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我们将只使用一个控制器来包含我们的所有注册和登录操作，即注册，登录和注销。
- en: 'Later in this book, you will understand why we are using all operations within
    a single controller instead of creating a controller for each action:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后面，您将了解为什么我们在一个控制器中使用所有操作，而不是为每个操作创建一个控制器：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Open `project/app/Http/Controllers/API/AuthController.php` and replace its
    content with the following code:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Http/Controllers/API/AuthController.php`并用以下代码替换其内容：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There's almost nothing new in the previous code—we just returned a JSON response
    in the `register`, `login`, and `logout` functions, as we can see in the previous
    lines.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中几乎没有什么新的内容——我们只是在`register`、`login`和`logout`函数中返回了JSON响应，正如我们在前面的行中所看到的。
- en: 'In the `register()` function:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`register()`函数中：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: After we created a `user`, we returned a HTTP status code of `201` with an `access_token`
    and an expiry date.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`user`后，我们返回了`201`的HTTP状态代码，带有`access_token`和到期日期。
- en: 'In the `login()` function:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`login()`函数中：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, in the `login()` function, we returned the current user based on the user's
    email  address, an `access_token`, and the expiry date.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在`login()`函数中，我们根据用户的电子邮件地址返回了当前用户，一个`access_token`和到期日期。
- en: 'In the `logout()` function:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`logout()`函数中：
- en: '[PRE28]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note that the `true` parameter inside the `logout()` function tells `jwt-auth`
    to invalidate the token forever.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`logout()`函数中的`true`参数告诉`jwt-auth`永久使令牌无效。
- en: Creating user routes
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户路由
- en: Now, it's time to create the new routes for the registration, login, and logout operations
    and also protect some routes in our API, as discussed at the beginning of this
    chapter. Our users can interact with partial content of the application, but,
    to have access to all of its content, it is necessary to create a user and log
    in to the application.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候为注册、登录和注销操作创建新路由，并在我们的API中保护一些路由，就像本章开头讨论的那样。我们的用户可以与应用程序的部分内容进行交互，但是要访问其所有内容，必须创建用户并登录到应用程序。
- en: 'Open `project/routes/api.php` and replace its content with the following code:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`project/routes/api.php`并用以下代码替换其内容：
- en: '[PRE29]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The last step is to protect the endpoint; we do this in the `project/routes/api.php` file
    or directly inside the controllers function. We will do this in the controllers
    function.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是保护端点；我们在`project/routes/api.php`文件中或直接在控制器函数中执行此操作。我们将在控制器函数中执行此操作。
- en: Protecting API routes
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护API路由
- en: It is extremely simple to protect our routes using the application controllers.
    All we have to do is edit the `Controller` files and add the following code.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用应用程序控制器保护我们的路由非常简单。我们只需要编辑`Controller`文件并添加以下代码。
- en: 'Open `project/Http/Controllers/API/BikeController.php` and add the following
    code right before the `GET` method:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`project/Http/Controllers/API/BikeController.php`并在`GET`方法之前添加以下代码：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The previous code means that we are using the `auth:api` middleware to protect
    all bikers routes except for the `index()` method. So, our users can see the bike
    list, but, to see the bike's details and post a bike, they must be logged in.
    Later, in the [Chapter09](6122a03e-eecf-442d-b5ca-1f175c7fcf6a.xhtml) , *Creating
    Services and User Authentication*, on Angular, we will look at token-based authentication
    in detail.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码意味着我们正在使用`auth:api`中间件来保护所有骑手路由，除了`index()`方法。因此，我们的用户可以查看自行车列表，但是要查看自行车的详细信息并发布自行车，他们必须登录。稍后，在[第09章](6122a03e-eecf-442d-b5ca-1f175c7fcf6a.xhtml)，*创建服务和用户身份验证*，在Angular中，我们将详细讨论基于令牌的身份验证。
- en: Creating and logging in a User
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和登录用户
- en: Now, it is time to check the user routes. As we don't have a user interface,
    we will be using a Chrome extension called Restlet Client. It is free and very
    powerful.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候检查用户路由了。由于我们没有用户界面，我们将使用一个名为Restlet Client的Chrome扩展。它是免费且非常强大。
- en: 'You can read more about it and download it at [https://restlet.com/modules/client](https://restlet.com/modules/client):'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://restlet.com/modules/client](https://restlet.com/modules/client)了解更多信息并下载它：
- en: 'Open the Restlet extension and fill in the following fields, as shown in the
    following screenshot:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Restlet扩展并填写以下字段，如下屏幕截图所示：
- en: '![](assets/2c9378c5-52fe-42bf-9e63-d338101a0a6f.png)Register endpoint'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 注册端点
- en: 'The result will be the following response:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果将是以下响应：
- en: '![](assets/7d85d160-15b0-40f9-817b-7c43a8915bf1.png)Created response'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 创建响应
- en: 'Now, let''s log in with the newly created user. Fill in fields as shown in
    the following screenshot:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用新创建的用户登录。填写如下屏幕截图中显示的字段：
- en: '![](assets/b97bf3e7-5638-4c1d-8d4a-2010e66eaff7.png)User login'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 用户登录
- en: 'The result will be the following response:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是以下响应：
- en: '![](assets/76e3eb37-f075-418a-89ae-a0147651c981.png)User logged response'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 用户登录响应
- en: Well, our API authentication is ready and good to go. Later, in the [chapter
    09](6122a03e-eecf-442d-b5ca-1f175c7fcf6a.xhtml), *Creating Services and User Authentication*,
    on Angular, we will look at the authentication process in detail.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们的API身份验证已经准备就绪。稍后，在[第09章](6122a03e-eecf-442d-b5ca-1f175c7fcf6a.xhtml)，*创建服务和用户身份验证*，在Angular中，我们将详细讨论身份验证过程。
- en: Dealing with Laravel resources
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Laravel资源
- en: In some previous versions of Laravel, it was possible to use a feature called
    Fractal, to dealing with JSON web API, but with this new version of Laravel we
    have the **Resources** feature, a very powerful tool to dealing with JSON web
    API.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的一些Laravel版本中，可以使用一个名为Fractal的功能来处理JSON web API，但是在这个新版本的Laravel中，我们有**资源**功能，这是一个处理JSON
    web API的非常强大的工具。
- en: In this section, we'll see how we can use the Resources feature, so that we
    can get the most out of our API. A Resource class is a way to transform data from
    one format to another.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到如何使用资源功能，以便我们可以充分利用我们的API。资源类是一种将数据从一种格式转换为另一种格式的方法。
- en: 'When dealing with resources and transforming them into responses for the client,
    we basically have two types: an item and a collection. An item resource, as you
    might have guessed, is basically a one-to-one representation of our model, whereas
    a collection is the representation of many items. Collections may also have metadata
    and other navigation information, as we will see later in this section.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理资源并将其转换为客户端响应时，我们基本上有两种类型：项目和集合。项目资源，正如你可能已经猜到的那样，基本上是我们模型的一对一表示，而集合是许多项目的表示。集合还可以具有元数据和其他导航信息，我们将在本节后面看到。
- en: Creating BikesResource
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建BikesResource
- en: 'So, let''s create our first resource:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建我们的第一个资源：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，输入以下命令：
- en: '[PRE31]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The previous command will generate the following file:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将生成以下文件：
- en: '`App\Http\Resource\BikesResource.php`.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`App\Http\Resource\BikesResource.php`。'
- en: 'Open `App\Http\Resource\BikesResource.php` and add the following code:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App\Http\Resource\BikesResource.php`并添加以下代码：
- en: '[PRE32]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Note that we are including all relationships in the `bike` model in our Array
    function.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在数组函数中包含了`bike`模型的所有关系。
- en: Creating BuildersResource
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建BuildersResource
- en: 'Now, let''s create `BuildersResource` using the `make` command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`make`命令创建`BuildersResource`：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，输入以下命令：
- en: '[PRE33]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The previous command will generate the following file:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一个命令将生成以下文件：
- en: '`App\Http\Resource\BuildersResource.php`.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`App\Http\Resource\BuildersResource.php`。'
- en: 'Open `App\Http\Resource\BuildersResource.php` and add the following code:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App\Http\Resource\BuildersResource.php`并添加以下代码：
- en: '[PRE34]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Creating ItemsResource
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ItemsResource
- en: 'Now, let''s create `ItemsResource` using the `make` command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`make`命令创建`ItemsResource`：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，输入以下命令：
- en: '[PRE35]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The previous command will generate the following file:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一个命令将生成以下文件：
- en: '`App\Http\Resource\ItemsResource.php`.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`App\Http\Resource\ItemsResource.php`。'
- en: 'Open `App\Http\Resource\ItemsResource.php` and add the following code:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App\Http\Resource\ItemsResource.php`并添加以下代码：
- en: '[PRE36]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Creating ratingResource
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建ratingResource
- en: 'Now, let''s create a new `Resource`, this time for ratings:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个新的`Resource`，这次是为了评分：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，输入以下命令：
- en: '[PRE37]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The previous command will generate the following file:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一个命令将生成以下文件：
- en: '`App\Http\Resource\RatingResource.php`.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`App\Http\Resource\RatingResource.php`。'
- en: 'Open `App\Http\Resource\RatingResource.php` and add the following code:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`App\Http\Resource\RatingResource.php`并添加以下代码：
- en: '[PRE38]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Adding resources to controllers
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将资源添加到控制器
- en: 'Now, we need to make some minor changes to our controllers in order to use
    the resource we just created. To avoid any mistakes, we will look at the code
    for all of our controllers:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要对我们的控制器进行一些微小的更改，以便使用我们刚刚创建的资源。为了避免任何错误，我们将查看所有控制器的代码：
- en: 'Edit the `Bike` controller by replacing the content in `App/Http/Controllers/API/BikeController.php` with the
    following code:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过用以下代码替换`App/Http/Controllers/API/BikeController.php`中的内容来编辑`Bike`控制器：
- en: '[PRE40]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, let''s add the code for the `store`/`create` method. Add the following
    code right after the `index()` function:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为`store`/`create`方法添加代码。在`index()`函数之后添加以下代码：
- en: '[PRE41]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the following code for the `Get` by `id` method. Add the following code
    right after the `store()` function:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为`Get` by `id`方法添加以下代码。在`store()`函数之后添加以下代码：
- en: '[PRE43]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, let''s add the code for the `update` method. Add the following code right
    after the `show()`function:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为`update`方法添加代码。在`show()`函数之后添加以下代码：
- en: '[PRE44]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The last method is to delete all records. Add the following code right after
    the `update()` function:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个方法是删除所有记录。在`update()`函数之后添加以下代码：
- en: '[PRE46]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: And we will do the same for the `Builders` controller.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将为`Builders`控制器做同样的事情。
- en: 'Edit the `Builder` controller by replacing the content in `App/Http/Controllers/API/BuilderController.php` with
    the following code:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过用以下代码替换`App/Http/Controllers/API/BuilderController.php`中的内容来编辑`Builder`控制器：
- en: '[PRE47]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, let''s add the code for the `store`/`create` method. Add the following
    code right after the `index()` function:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为`store`/`create`方法添加代码。在`index()`函数之后添加以下代码：
- en: '[PRE48]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s add the code for the `Get` by `id` method. Add the following code right
    after the `store()` function:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`Get` by `id`方法添加代码。在`store()`函数之后添加以下代码：
- en: '[PRE49]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, let''s add the code for the `update` method. Add the following code right
    after the `show()` function:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加`update`方法的代码。在`show()`函数之后添加以下代码：
- en: '[PRE50]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The last method is used to delete all records. Add the following code right
    after the `update()` function:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个方法用于删除所有记录。在`update()`函数之后添加以下代码：
- en: '[PRE51]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In order to edit the `Rating` controller, replace the content in `App/Http/Controllers/API/RatingController.php` with
    the following code:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了编辑`Rating`控制器，用以下代码替换`App/Http/Controllers/API/RatingController.php`中的内容：
- en: '[PRE52]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Well done! Now, we have the necessary code to go ahead with our API JSON. In
    the next few chapters, you will understand in greater detail what we have accomplished
    so far. We already have our API ready.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在，我们有必要的代码来继续进行API JSON。在接下来的几章中，您将更详细地了解我们迄今为止所取得的成就。我们已经准备好了我们的API。
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have come to the end of one more chapter. We saw how to build token-based
    authentication, how to protect endpoints only for logged-in users, and how to
    deal with custom error messages.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们又完成了一章。我们学会了如何构建基于令牌的身份验证，如何仅保护已登录用户的端点，以及如何处理自定义错误消息。
- en: We also learned how to use Laravel resources to return a JSON API format.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学会了如何使用Laravel资源返回JSON API格式。
- en: We are in the middle of our journey, yet we need to build all of the interface
    and implement the Angular frontend application so that we can have a pleasant
    visual result for our application.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在进行中，但是我们需要构建所有的界面并实现Angular前端应用程序，以便我们的应用程序可以有一个愉快的视觉结果。
- en: In the next chapter, we will see how to integrate Angular as well as some more
    tools into our application.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何将Angular以及一些更多的工具集成到我们的应用程序中。
