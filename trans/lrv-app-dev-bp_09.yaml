- en: Chapter 9. Building a RESTful API – The Movies and Actors Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。构建RESTful API - 电影和演员数据库
- en: 'Designing and developing a successful RESTful API is mostly very difficult.
    There are a lot of aspects to designing and writing a successful RESTful API;
    for example, securing and limiting the API. In this chapter, we''ll focus on the
    basics of REST with coding a simple Movies and Actors API with Laravel. We''ll
    make some JSON endpoints behind a basic authentication system, and will also learn
    a few Laravel 4 tricks. We''ll cover the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 设计和开发成功的RESTful API通常非常困难。设计和编写成功的RESTful API有许多方面；例如，保护和限制API。在本章中，我们将专注于使用Laravel编写一个简单的电影和演员API的REST的基础知识。我们将在一个基本的认证系统后面创建一些JSON端点，并学习一些Laravel
    4的技巧。本章将涵盖以下主题：
- en: Creating and migrating the users database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和迁移用户数据库
- en: Configuring the users model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置用户模型
- en: Adding sample users
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加样本用户
- en: Creating and migrating the movies database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和迁移电影数据库
- en: Creating a movie model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个电影模型
- en: Adding sample movies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加样本电影
- en: Creating and migrating the actors database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和迁移演员数据库
- en: Creating an actor model
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个演员模型
- en: Assigning actors to movies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将演员分配给电影
- en: Understanding the authentication mechanism
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解认证机制
- en: Querying the API
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询API
- en: Creating and migrating the users database
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移用户数据库
- en: 'We assume that you have already defined database credentials in the `database.php`
    file located at `app/config/`. For this application, we need a database. You can
    create a new database by simply running the following SQL command, or basically
    you can use your database administration interface such as phpMyAdmin:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经在`app/config/`目录下的`database.php`文件中定义了数据库凭据。对于这个应用程序，我们需要一个数据库。您可以通过简单运行以下SQL命令来创建一个新的数据库，或者您可以使用您的数据库管理界面，比如phpMyAdmin：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After successfully creating the database for the application, first we need
    to generate an application key for our application. As you know from the previous
    chapters, this is necessary for the security and authentication class of our application.
    To do this, first open your terminal, navigate to your project folder, and run
    the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建应用程序的数据库后，首先我们需要为应用程序生成一个应用程序密钥。正如您从之前的章节中了解的那样，这对于我们应用程序的安全和认证类是必要的。要做到这一点，首先打开您的终端，导航到您的项目文件夹，并运行以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If no error occurs, we should edit the authentication class'' configuration
    file. For using Laravel''s built-in authentication class, we need to edit the
    configuration file, `auth.php`, which is located at `app/config/`. This file contains
    several options for the authentication facilities. If you need to change the table
    name, and so on, you can perform the changes in the `auth.php` file. By default,
    Laravel comes with a users model; you can see the `User.php` file that is located
    at `app/models/`. With Laravel 4, we need to define which fields can be filled
    in our `User` model. Let''s edit `app/models/User.php` and add the "fillable"
    array:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误发生，我们应该编辑认证类的配置文件。为了使用Laravel内置的认证类，我们需要编辑配置文件`auth.php`，该文件位于`app/config/`。该文件包含了认证设施的几个选项。如果您需要更改表名等，您可以在`auth.php`文件中进行更改。默认情况下，Laravel带有一个用户模型；您可以看到位于`app/models/`的`User.php`文件。使用Laravel
    4，我们需要定义哪些字段可以在我们的`User`模型中填充。让我们编辑`app/models/User.php`并添加"fillable"数组：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Basically we need two columns for our RESTful API users, they are:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们的RESTful API用户需要两列，它们是：
- en: '`email`: This column stores the author''s e-mail ID'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`：此列存储作者的电子邮件ID'
- en: '`password`: This column is for storing the author''s password'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`：此列用于存储作者的密码'
- en: 'Now we need several migration files to create the `users` table and add an
    author to our database. To create a migration file, give a command such as the
    following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要几个迁移文件来创建`users`表并向我们的数据库添加作者。要创建一个迁移文件，可以使用以下命令：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建的位于`app/database/migrations/`的迁移文件。我们需要编辑`up()`函数如下：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After editing the migration file, please run the `migrate` command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑迁移文件后，请运行`migrate`命令：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you know, the command creates the `users` table and its columns. If no error
    occurs, check the `laravel_api` database for the `users` table and the columns.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，该命令将创建`users`表及其列。如果没有错误发生，请检查`laravel_api`数据库中的`users`表和列。
- en: Adding sample users
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加样本用户
- en: 'Now we need to create a new migration file for adding some API users to the
    database:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为向数据库添加一些API用户创建一个新的迁移文件：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Open up the migration file and edit the `up()` function as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 打开迁移文件并编辑`up()`函数如下：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now we have two API users for our application. The users will be accessible
    for querying our RESTful API.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两个API用户用于我们的应用程序。这些用户将可以查询我们的RESTful API。
- en: Creating and migrating the movies database
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移电影数据库
- en: For a simple Movies and Actors application, basically we need two tables for
    storing data. One of them is the `movies` table. The table will contain the name
    of the movie and its release year.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的电影和演员应用程序，基本上我们需要两个用于存储数据的表。其中一个是`movies`表。该表将包含电影的名称和发行年份。
- en: 'We need a migration file to create our `movies` table and its columns. We''ll
    do it again with the `artisan` tool. Open your terminal, navigate to your project''s
    folder, and run the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个迁移文件来创建我们的`movies`表和其列。我们将再次使用`artisan`工具。打开您的终端，导航到您的项目文件夹，并运行以下命令：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建的位于`app/database/migrations/`的迁移文件。我们需要编辑`up()`函数如下：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After editing the migration file, run the `migrate` command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑迁移文件后，运行`migrate`命令：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating a movie model
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个电影模型
- en: As you know, for anything related to database operations on Laravel, using models
    is the best practice. We will use the benefits of **Eloquent ORM**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，对于Laravel上的任何与数据库操作相关的事情，使用模型是最佳实践。我们将利用**Eloquent ORM**的好处。
- en: 'Save the following code in the `Movie.php` file under `app/models/`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码保存在`app/models/`下的`Movie.php`文件中：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We have set the database table name with the protected `$table` variable. Also,
    we set the editable column's `$fillable` variable, and for timestamps with a `$timestamps`
    variable, as we've already seen and used in the previous chapters. The variables
    that are defined in the model are enough for using Laravel's Eloquent ORM. We'll
    cover the public `Actor()` function in the *Assigning actors to movies* section
    in this chapter.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用受保护的`$table`变量设置了数据库表名。此外，我们使用了可编辑列的`$fillable`变量，以及时间戳的`$timestamps`变量，正如我们在前几章中已经看到和使用的那样。在模型中定义的变量足以使用Laravel的Eloquent
    ORM。我们将在本章的*将演员分配给电影*部分中介绍公共`Actor()`函数。
- en: 'Our movie model is ready: now we need an actor model and its corresponding
    table.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的电影模型已经准备好了：现在我们需要一个演员模型及其相应的表。
- en: Adding sample movies
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加示例电影
- en: 'Now we need to create a new migration file for adding some movies to the database.
    Actually, you can also use the database seeder for seeding the database. Here,
    we will use migration files for seeding the database. You can check out the seeders
    at:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为向数据库添加一些电影创建一个新的迁移文件。实际上，您也可以使用数据库种子程序来种子数据库。在这里，我们将使用迁移文件来种子数据库。您可以在以下位置查看种子程序：
- en: '[http://laravel.com/docs/migrations#database-seeding](http://laravel.com/docs/migrations#database-seeding)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://laravel.com/docs/migrations#database-seeding](http://laravel.com/docs/migrations#database-seeding)'
- en: 'Run the following `migrate` command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下`migrate`命令：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Open up the migration file and edit the `up()` function as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 打开迁移文件并编辑`up()`函数如下：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating and migrating the actors database
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移演员数据库
- en: 'We need to create an `actors` table that will contain the names of the actors
    of the movies. We need a migration file to create our `movies` table and columns.
    We''ll do it again with the `artisan` tool. Let''s open up our terminal, navigate
    to our project folder, and run the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个包含电影演员姓名的`actors`表。我们需要一个迁移文件来创建我们的`movies`表和列。我们将使用`artisan`工具再次进行操作。让我们打开终端，导航到我们的项目文件夹，并运行以下命令：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建并位于`app/database/migrations/`中的迁移文件。我们需要编辑`up()`函数如下：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After editing the migration file, run the `migrate` command as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑迁移文件后，运行以下`migrate`命令：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating an actor model
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建演员模型
- en: 'For creating the actor model, save the following code as `Movies.php` under
    `app/models/`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建演员模型，请将以下代码保存为`Movies.php`，并放在`app/models/`下：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Assigning actors to movies
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将演员分配给电影
- en: As you know, we used the `belongsToMany` relation between the actors and movie
    models. This is because an actor has probably acted in many movies. A movie also
    would probably have many actors.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，我们在演员和电影模型之间使用了`belongsToMany`关系。这是因为一个演员可能出演了许多电影。一部电影也可能有许多演员。
- en: 'As you will see, in the previous sections of this chapter, we used a pivot
    table named `pivot_table`. We can also create the pivot table with the `artisan`
    tool. Let''s create it:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在本章的前几节中所看到的，我们使用了一个名为`pivot_table`的中间表。我们也可以使用`artisan`工具创建中间表。让我们创建它：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建并位于`app/database/migrations/`中的迁移文件。我们需要编辑`up()`函数如下：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After editing the migration file, run the `migrate` command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑迁移文件后，运行`migrate`命令：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now we need to create a new migration file for adding some actors to the database:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为向数据库添加一些演员创建一个新的迁移文件：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open up the migration file and edit the `up()` function as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 打开迁移文件并编辑`up()`函数如下：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s grab the migration file. When we attach `users` to `movies`, we''ve
    to use the movie IDs shown as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们获取迁移文件。当我们将`users`附加到`movies`时，我们必须使用以下显示的电影ID：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This means *Woody Allen* has played a role in two films, and the ID of these
    movies are `1` and `2`. Also, *Diane Keaton* has played a role in those two movies.
    But *Jack Nicholson* has played a role in *The Shining* and the ID of the film
    is `3`. As we have already elaborated on the Eloquent ORM relations in [Chapter
    8](ch08.html "Chapter 8. Building a Q&A Web Application"), *Building a Q&A Web
    Application*, our relation type is the **Eloquent belongsToMany** relation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着*Woody Allen*在两部电影中扮演了角色，这两部电影的ID分别为`1`和`2`。此外，*Diane Keaton*也在这两部电影中扮演了角色。但是*Jack
    Nicholson*在*The Shining*中扮演了角色，电影的ID为`3`。正如我们在[第8章](ch08.html "第8章。构建问答Web应用程序")中已经详细阐述的那样，我们的关系类型是**Eloquent
    belongsToMany**关系。
- en: Understanding the authentication mechanism
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解认证机制
- en: Like many other APIs, our API system is authentication based. As you may remember
    from the previous chapters, Laravel comes with an authentication mechanism. In
    this section, we'll use the pattern-based route filtering feature of Laravel for
    securing and limiting our API. First, we need to edit the `auth.basic` filter
    for our application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与许多其他API一样，我们的API系统是基于认证的。正如您可能还记得前几章所述，Laravel带有认证机制。在本节中，我们将使用Laravel的基于模式的路由过滤功能来保护和限制我们的API。首先，我们需要编辑我们应用程序的`auth.basic`过滤器。
- en: 'Open the route filter configuration file that is located at `app/filters.php`
    and edit the `auth.basic` filter as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于`app/filters.php`的路由过滤器配置文件，并编辑`auth.basic`过滤器如下：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The API users should be sending their e-mail IDs and passwords, along with
    their requests, to our application. Because of the request, we edit the filter.
    An API request will be as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: API用户应该在其请求中发送他们的电子邮件ID和密码到我们的应用程序。由于请求，我们编辑了过滤器。API请求将如下所示：
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we need to apply a filter on our routes. Open the route filter configuration
    file that is located at `app/routes.php` and add the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在我们的路由上应用一个过滤器。打开位于`app/routes.php`的路由过滤器配置文件，并添加以下代码：
- en: '[PRE26]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This code indicates that our application needs authentication for every request
    on it. Now we need to write our routes. Add the following lines to `app/routes.php`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码表明我们的应用程序需要对其上的每个请求进行身份验证。现在我们需要编写我们的路由。将以下行添加到`app/routes.php`：
- en: '[PRE27]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Querying the API
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询API
- en: We need two controller files for our RESTful route functions. Let's create two
    controller files under `app/controllers/`. The files should be named `MovieController.php`
    and `ActorController.php`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个控制器文件来处理我们的RESTful路由函数。让我们在`app/controllers/`下创建两个控制器文件。文件应命名为`MovieController.php`和`ActorController.php`。
- en: Getting movie/actor information from the API
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从API获取电影/演员信息
- en: 'First, we need the `getActorInfo()` and `getMovieInfo()` functions for getting
    actor and movie information from the database. Open the `ActorController.php`
    file located at `app/controllers/` and write the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要`getActorInfo()`和`getMovieInfo()`函数，以从数据库中获取演员和电影信息。打开位于`app/controllers/`的`ActorController.php`文件，并写入以下代码：
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, open the `MovieController.php` file located at `app/controllers/` and
    write the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开位于`app/controllers/`的`MovieController.php`文件，并写入以下代码：
- en: '[PRE29]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The functions `getActorInfo()` and `getMovieInfo()` basically search the database
    for the movie/actor name with the given text. If such a movie or actor is found,
    it is returned in the JSON format. So, for getting actor information from the
    API, our users can make a request as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`getActorInfo()`和`getMovieInfo()`函数基本上是在数据库中搜索具有给定文本的电影/演员名称。如果找到这样的电影或演员，它将以JSON格式返回。因此，要从API中获取演员信息，我们的用户可以进行如下请求：'
- en: '[PRE30]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The response for the actor information request will be as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 演员信息请求的响应将如下所示：
- en: '[PRE31]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The request for any movie would be similar to this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 任何电影的请求将类似于这样：
- en: '[PRE32]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The response for the movie information request will be as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 电影信息请求的响应将如下所示：
- en: '[PRE33]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If any user requests movie information from an API that doesn''t exist in the
    database, the response will look like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何用户从数据库中不存在的API请求电影信息，响应将如下所示：
- en: '[PRE34]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Also, a similar response will be for an actor that doesn''t exist in the database:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库中不存在的演员，也将有类似的响应：
- en: '[PRE35]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Sending new movies/actors to the API's database
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将新电影/演员发送到API的数据库
- en: We need the `putActor()` and `putMovie()` functions for allowing users to add
    new actors/movies to our database.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要`putActor()`和`putMovie()`函数，以允许用户向我们的数据库添加新的演员/电影。
- en: 'Open the `ActorController.php` file located at `app/controllers/` and add the
    following function:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于`app/controllers/`的`ActorController.php`文件，并添加以下函数：
- en: '[PRE36]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now open the `MovieController.php` file located at `app/controllers/` and add
    the following function:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开位于`app/controllers/`的`MovieController.php`文件，并添加以下函数：
- en: '[PRE37]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The functions `putActor()` and `putMovie()` basically search the database for
    movies/actors names with the given text. If there is a movie or actor found, the
    functions return its ID in the JSON format, else it creates the new actor/movie
    and responds with the new record ID. So, for creating a new actor in the API database,
    our users can make a request such as the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`putActor()`和`putMovie()`函数基本上是在数据库中搜索具有给定文本的电影/演员名称。如果找到电影或演员，函数将以JSON格式返回其ID，否则将创建新的演员/电影并以新记录ID响应。因此，要在API数据库中创建新的演员，我们的用户可以进行如下请求：'
- en: '[PRE38]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The response for the movie information request will be as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 电影信息请求的响应将如下所示：
- en: '[PRE39]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If any API user tries to add the existing actor, the API will respond as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何API用户尝试添加已存在的演员，API将如下响应：
- en: '[PRE40]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Also, the response for creating a new movie in the API database should be as
    follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，API数据库中创建新电影的响应应该如下所示：
- en: '[PRE41]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The response for the request will be as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请求的响应将如下所示：
- en: '[PRE42]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If any API user tries to add the existing actor, the API will respond as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何API用户尝试添加已存在的演员，API将如下响应：
- en: '[PRE43]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Deleting movies/actors from the API
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从API中删除电影/演员
- en: Now we need the `deleteActor()` and `deleteMovie()` functions for allowing users
    to add new actors/movies to our database.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要`deleteActor()`和`deleteMovie()`函数，以允许用户向我们的数据库添加新的演员/电影。
- en: 'Open the `ActorController.php` file under `app/controllers/` and add the following
    function:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app/controllers/`下的`ActorController.php`文件，并添加以下函数：
- en: '[PRE44]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'After adding the function, the content in `ActorController.php` located at
    `app/controllers/`, should look like the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 添加函数后，位于`app/controllers/`的`ActorController.php`中的内容应如下所示：
- en: '[PRE45]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now we need a similar function for `MovieController`. Open the `MovieController.php`
    file under `app/controllers/` and add the following function:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要`MovieController`的类似函数。打开位于`app/controllers/`的`MovieController.php`文件，并添加以下函数：
- en: '[PRE46]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'After adding the function, the content under `ActorController.` `php` located
    at `app/controllers/` should look like the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 添加函数后，位于`app/controllers/`的`ActorController.php`中的内容应如下所示：
- en: '[PRE47]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The functions `deleteActor()` and `deleteMovie()` basically search the database
    for a movie/actor with the given ID. If there is a movie or an actor, the API
    deletes the actor/movie and returns the status in the JSON format. So, for deleting
    an actor from the API, our users can make a request as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleteActor()`和`deleteMovie()`函数基本上是在数据库中搜索具有给定ID的电影/演员。如果有电影或演员，API将删除演员/电影并以JSON格式返回状态。因此，要从API中删除演员，我们的用户可以进行如下请求：'
- en: '[PRE48]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The response for the request will be as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请求的响应将如下所示：
- en: '[PRE49]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Also, the response for deleting a movie from the API database should be as
    follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从API数据库中删除电影的响应应如下所示：
- en: '[PRE50]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The response for the request will be as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请求的响应将如下所示：
- en: '[PRE51]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'If any API user tries to delete a movie/actor from the API database that doesn''t
    exist, the API will respond as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何API用户尝试从API数据库中删除不存在的电影/演员，API将如下响应：
- en: '[PRE52]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'For deleting an actor that doesn''t exist, the response will be as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 删除不存在的演员，响应将如下所示：
- en: '[PRE53]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've focused on the basics of REST with coding a simple Movies
    and Actors API with Laravel. We've made some JSON endpoints behind a basic authentication
    system, and learned a few Laravel 4 tricks while the chapter uses something like
    a pattern-based route filtering. As you saw, developing and securing a RESTful
    application is very easy with Laravel. In the next chapter, we'll cover more effective
    methods in Laravel while coding a simple e-commerce application.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于使用Laravel编写简单的电影和演员API的REST基础知识。我们在基本身份验证系统后面创建了一些JSON端点，并在本章中学习了一些Laravel
    4的技巧，比如类似模式的路由过滤。正如你所看到的，使用Laravel开发和保护RESTful应用程序非常容易。在下一章中，我们将在编写简单的电子商务应用程序时涵盖更有效的Laravel方法。
