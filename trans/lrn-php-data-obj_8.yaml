- en: Appendix A. Introduction to OOP in PHP5
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. PHP5中面向对象编程的介绍
- en: Throughout this book, we were mainly using procedural code to build the example
    application. However, the PDO API is fully object-oriented, and in the last chapter
    we imitated real-life entities in the database by using classes. This appendix
    is for those programmers who are not familiar with PHP5's object-oriented extensions.
    We will introduce you to the basics of OOP, as many developers coming from earlier
    versions of PHP have no experience of this type of programming. However, this
    is only a short introduction; if you want to master OOP, you should refer to some
    of the books devoted to this topic.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们主要使用过程化代码来构建示例应用程序。然而，PDO API是完全面向对象的，在最后一章中，我们通过使用类来模拟数据库中的真实实体。这个附录是为那些不熟悉PHP5面向对象扩展的程序员准备的。我们将向您介绍面向对象编程的基础知识，因为许多来自较早PHP版本的开发人员没有这种编程经验。然而，这只是一个简短的介绍；如果您想掌握面向对象编程，您应该参考一些专门讨论这个主题的书籍。
- en: What is Object-Oriented Programming?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是面向对象编程？
- en: Object-oriented programming (OOP) is a relatively new concept, although its
    roots date back to 1960s. In OOP, the software works with objects that model real-life
    entities (such as books and authors in the [Chapter 7)](ch07.html "Chapter 7. An
    Advanced Example"). Whereas procedural programming involves a series of instructions,
    an application in OOP involves a set of objects that interact with each other.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）是一个相对较新的概念，尽管其根源可以追溯到20世纪60年代。在OOP中，软件与模拟真实实体的对象一起工作（例如[第7章](ch07.html
    "第7章.一个高级示例")中的书籍和作者）。而过程式编程涉及一系列指令，OOP中的应用涉及一组相互交互的对象。
- en: The Syntax for Declaring Objects
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明对象的语法
- en: An object can be viewed as a container for several variables, called properties,
    and for functions that act on these variables. These functions are called methods.
    Every object belongs to a class. In PHP, every object can belong to only one class
    (although some other OOP languages allow multiple inheritance), but there can
    be many objects, or instances, belonging to a single class. A class is a syntactic
    construct that allows you to describe what properties and methods the objects
    belonging to this class will have.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个对象可以被视为多个变量的容器，称为属性，以及对这些变量进行操作的函数。这些函数称为方法。每个对象都属于一个类。在PHP中，每个对象只能属于一个类（尽管一些其他面向对象编程语言允许多重继承），但可以有许多对象或实例属于同一个类。类是一种语法结构，允许您描述属于这个类的对象将具有什么属性和方法。
- en: There is an analogy with species and living organisms—for example, a Dog (a
    species, or a class) is a generalization of all living dogs. A generalized dog
    has such properties as weight and age, and a method such as bark, and a real-life
    dog, say Lessie, which belongs to the dog species, could be described as an instance
    of the `Dog` class.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个类似物种和生物体的类比——例如，狗（一种物种，或者一个类）是所有活着的狗的概括。一个概括的狗有诸如体重和年龄的属性，以及像叫的方法，而现实生活中的狗，比如莱西，属于狗这个物种，可以被描述为`Dog`类的一个实例。
- en: 'Let''s see how we would model this in PHP5:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在PHP5中如何建模这个：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this small snippet of code, we defined a class called `Dog`. In PHP5, a class
    definition starts with the reserved word `class` followed by the class's name
    (A class's name can contain the same characters as a function's name.) All the
    class's properties and methods, collectively called **members**, are defined inside
    the `{…}` block.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段小代码片段中，我们定义了一个叫做`Dog`的类。在PHP5中，类的定义以保留字`class`开头，后面跟着类的名称（类的名称可以包含与函数名称相同的字符）。所有的类的属性和方法，统称为**成员**，都定义在`{...}`块内。
- en: As you can see, we are using the keyword, `public`, when we declare properties
    and methods. In PHP4 we would have used the `var` keyword instead, but this keyword
    is deprecated in PHP5\. Besides the `public` keyword, we could have used the `protected`
    keyword or the `private` keyword, but more on this later.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，当我们声明属性和方法时，我们使用关键字`public`。在PHP4中，我们将使用`var`关键字，但是这个关键字在PHP5中已经被弃用。除了`public`关键字，我们还可以使用`protected`关键字或`private`关键字，但稍后会详细介绍。
- en: 'As you can see in the second part of the code, we create the object with the
    `new` keyword:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在代码的第二部分中所看到的，我们使用`new`关键字创建对象。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This line creates a new object belonging to the `Dog` class and assigns it
    to the `$lessie` variable. This is a very important step, since this is the only
    way to create objects. After the PHP processes it, the `$lessie` variable becomes
    initialized and we can access the properties and methods declared in the `Dog`
    class so that we act on the object called `Lessie`. We would now like to have
    two dogs in our application, and the second one will be called `K9`. To achieve
    that, we would have to write something like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行创建了一个属于`Dog`类的新对象，并将其分配给`$lessie`变量。这是一个非常重要的步骤，因为这是创建对象的唯一方法。在PHP处理完它之后，`$lessie`变量变得初始化，我们可以访问`Dog`类中声明的属性和方法，以便对名为`Lessie`的对象进行操作。我们现在想在我们的应用程序中有两只狗，第二只将被称为`K9`。为了实现这一点，我们需要写类似这样的代码：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, we can access both the `$k9` and `$lessie` variables, if we would like
    to interface with each of our dogs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以访问`$k9`和`$lessie`变量，如果我们想要与我们的每只狗进行交互。
- en: In other words, before we can communicate with an instance, it first has to
    be created with the `new` keyword.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，在我们可以与一个实例通信之前，它必须首先用`new`关键字创建。
- en: After the variable has been initialized, we can access its properties and methods.
    As you can see in the code, this is achieved with the `->` construct, which is
    used with both properties and methods. Note that when accessing a class’s properties,
    we don’t have to write the dollar sign after the -> (but we have to use it when
    declaring the properties inside the class definition).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 变量初始化后，我们可以访问它的属性和方法。正如你在代码中看到的那样，这是通过`->`构造实现的，该构造用于属性和方法。请注意，当访问类的属性时，我们不必在`->`后面写美元符号（但在类定义内声明属性时必须使用）。
- en: 'The methods are declared with the `function` keyword followed by the method’s
    name and a list of parameters. In fact, a class’s methods are declared in a similar
    way to that for an ordinary function, but there is one major difference. Inside
    the declaration of a method, there always exists implicit variable, called `$this`,
    which allows you to access the object’s properties. Let’s see how we could create
    a `getInfo()` method to return some additional information about our dogs:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 方法是用`function`关键字声明的，后面跟着方法的名称和参数列表。事实上，类的方法的声明方式与普通函数的声明方式类似，但有一个主要区别。在方法的声明中，总是存在一个隐式变量，称为`$this`，它允许你访问对象的属性。让我们看看如何创建一个`getInfo()`方法来返回有关我们的狗的一些额外信息：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code would display the following output:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将显示以下输出：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Constructors
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: 'Every class also has a special function (which may be implicit or explicitly
    declared) called a **constructor**. The constructor is always called when PHP
    encounters the `new` keyword, and its purpose is to perform some initialization
    tasks. Let''s extend the `Dog` class so that it has a `$name` property. We will
    also change the code so as to initialize the `name, weight`, and `age` properties
    inside the constructor rather than in the main application:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类还有一个特殊的函数（可能是隐式的或显式声明的），称为**构造函数**。构造函数总是在PHP遇到`new`关键字时调用，它的目的是执行一些初始化任务。让我们扩展`Dog`类，使其具有`$name`属性。我们还将更改代码，以便在构造函数中初始化`name,
    weight`和`age`属性，而不是在主应用程序中：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This application would display the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序将显示以下内容：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here's a brief summary of what we did. We first declared the `$name` property
    and then the constructor for our `Dog` class. The constructors are declared as
    function with the special name of `__construct` (the word `constructor` prepended
    with two underscores('_'). Our constructor accepts three parameters—`name`, `age`,
    and `weight`, whose values are assigned to the object's properties. The order
    in which we assign values to the properties does not matter. Note that we always
    have to use the `$this` variable to denote the properties of the object. By doing
    this, we can differentiate the local variables `$name, $age`, and `$weight` (passed
    as parameters) from the object's own properties, which have the same names, inside
    the constructor.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们所做的简要总结。我们首先声明了`$name`属性，然后是我们`Dog`类的构造函数。构造函数被声明为一个特殊名称为`__construct`的函数（`constructor`一词前面加上两个下划线('_')）。我们的构造函数接受三个参数——`name`、`age`和`weight`，它们的值被分配给对象的属性。我们分配值给属性的顺序并不重要。请注意，我们必须始终使用`$this`变量来表示对象的属性。通过这样做，我们可以区分构造函数中的局部变量`$name,
    $age`和`$weight`（作为参数传递）和对象自己的属性，它们在构造函数中具有相同的名称。
- en: We also changed the `getInfo()` method so that it returns the name of the dog
    as well. We can now instantiate objects by passing the name, the age, and the
    weight to the constructor. Since these properties get assigned in the constructor,
    we don't have to do this in the main part of the code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还改变了`getInfo()`方法，使其也返回狗的名字。现在我们可以通过将名字、年龄和体重传递给构造函数来实例化对象。由于这些属性在构造函数中被赋值，我们不必在代码的主要部分中这样做。
- en: 'It should be also noted that you can assign default values to properties in
    the class definition. This will ensure that every object of that class will have
    the default values automatically assigned. For example, we can do the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还应该注意的是，你可以在类定义中为属性分配默认值。这将确保该类的每个对象都自动分配默认值。例如，我们可以这样做：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you run the application with this `Dog` class definition, then you will
    see the following output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用这个`Dog`类定义运行应用程序，你将看到以下输出：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can now see, the default property value for `hasCollar` has propagated
    to every newly created instance (of course, it can be later changed for each object).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在所看到的，`hasCollar`的默认属性值已传播到每个新创建的实例（当然，它可以稍后为每个对象更改）。
- en: Destructors
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 析构函数
- en: There is an opposite concept to constructors, called destructors. As its name
    suggests, destructors are used to perform cleanup tasks (classic examples of such
    tasks are deleting temporary files, closing database connections, etc). In PHP5,
    destructor on an object is called, when there are no more references to that object
    (for example, by setting the variable that holds the reference to the object to
    **null** or when the application terminates), then the destructor will be called.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个与构造函数相对的概念，叫做析构函数。顾名思义，析构函数用于执行清理任务（这些任务的经典示例是删除临时文件，关闭数据库连接等）。在PHP5中，当对象没有更多的引用时（例如，通过将持有对象引用的变量设置为**null**或应用程序终止），对象上的析构函数将被调用。
- en: 'Destructor is a method: `__destruct()`. If you add that method to the class,
    then it will be called when the object is freed. Let’s add the destructor to the
    **Dog** class:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 析构函数是一个方法：`__destruct()`。如果你把这个方法添加到类中，那么当对象被释放时它将被调用。让我们把析构函数添加到**Dog**类中：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, if you run the code again, it will give the following output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你再次运行代码，它将给出以下输出：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that the order in which PHP5 calls the destructors is not defined. Also,
    in a destructor, the code may not access other objects unless they are referenced
    by the object being freed. In other words, the destructor should only cleanup
    those resources that were created by that object.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，PHP5调用析构函数的顺序是不确定的。此外，在析构函数中，代码可能无法访问其他对象，除非它们被释放的对象引用。换句话说，析构函数只应清理由该对象创建的资源。
- en: The Advantages of OOP
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程的优势
- en: 'The power of OOP lies in its three main characteristics: inheritance, encapsulation,
    and polymorphism.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程的力量在于它的三个主要特征：继承、封装和多态。
- en: Inheritance
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 继承
- en: 'Inheritance in OOP allows you to create new classes that inherit an existing
    class''s behaviour (methods) and attributes (properties). Let''s consider the
    following example. Assume that we have a class called `Fruit`. It is a generalized
    type of class for different fruits, and its common attributes are color and weight.
    In OOP, we can subclass `Fruit` to create new classes `Apple` and `Banana`. Both
    these classes (being subclasses of Fruit) will have the same properties: `weight`
    and `color`. (Note we are speaking about properties as such, not about their values).
    An apple can have a green color, while a `Banana` can have a yellow color. But
    any code that interacts with `Apple` or `Banana` class instances does not need
    to know what kind of fruit it is communicating with.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程中的继承允许你创建新的类，这些类继承了现有类的行为（方法）和属性（属性）。让我们考虑下面的例子。假设我们有一个名为`Fruit`的类。它是不同水果的通用类型类，它的共同属性是颜色和重量。在面向对象编程中，我们可以对`Fruit`进行子类化，创建新的类`Apple`和`Banana`。这两个类（作为`Fruit`的子类）将具有相同的属性：`weight`和`color`。（请注意，我们谈论的是属性本身，而不是它们的值）。一个苹果可以是绿色的，而一个`Banana`可以是黄色的。但是，与`Apple`或`Banana`类实例交互的任何代码都不需要知道它正在与哪种水果进行通信。
- en: 'Let''s put this example into code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这个例子写成代码：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, in this small application we have one `Apple` object and one
    `Banana` object. We iterate over them in a loop, but access their properties regardless
    of their type, since both classes use the same property names. But these properties
    carry different values for each fruit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在这个小应用程序中，我们有一个`Apple`对象和一个`Banana`对象。我们在循环中对它们进行迭代，但是无论它们的类型如何，我们都可以访问它们的属性，因为这两个类使用相同的属性名称。但是这些属性对于每种水果来说都有不同的值。
- en: 'Inheritance also allows to extend or completely override the behavior of the
    parent classes. Let''s assume that our `Fruit` class has one more characteristic—price
    per kg. It also has a new method—`getPrice()` that just multiplies the weight
    (which we have in grams) by the price:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 继承还允许扩展或完全重写父类的行为。假设我们的`Fruit`类有一个额外的特征——每公斤的价格。它还有一个新的方法——`getPrice()`，它只是将重量（以克为单位）乘以价格：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we can use this method in the subclasses:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在子类中使用这种方法：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, we will assume that the `Banana` class has another method for calculating
    price so that a discount is applied:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们假设`Banana`类有另一个方法来计算价格，以便应用折扣：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, we changed the method in the `Banana` class so that the code
    calling the `Banana` class's implementation of the `getPrice()` method will get
    discounted price, while the `Apple` class's `getPrice()` method returns full price.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们改变了`Banana`类中的方法，以便调用`Banana`类的`getPrice()`方法的代码将获得折扣价格，而`Apple`类的`getPrice()`方法返回全价。
- en: 'On the other hand, we could reuse the `Fruit` class''s implementation of the
    `getPrice()` method in the `Banana` class (so that we don''t have to duplicate
    the code contained in the base class):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我们可以在`Banana`类中重用`Fruit`类的`getPrice()`方法的实现（这样我们就不必在基类中重复包含的代码）：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Encapsulation
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 封装
- en: 'Encapsulation (sometimes called information hiding) is a more theoretical concept.
    It involves defining methods in a class in such a way that we hide the implementation
    details from the client code. We have already seen this when we redefined the
    price calculation in the `Banana` class. From the application''s point of view,
    nothing changed: we still call the `getPrice()` method, but we don''t know how
    this calculation is performed.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 封装（有时称为信息隐藏）是一个更为理论的概念。它涉及以一种方式在类中定义方法，以便我们可以隐藏实现细节，使客户端代码无法访问。当我们在`Banana`类中重新定义价格计算时，我们已经看到了这一点。从应用程序的角度来看，什么都没有改变：我们仍然调用`getPrice()`方法，但我们不知道这个计算是如何进行的。
- en: In other words, classes are accessible through their methods, which have the
    same names so that, even if the code behind these names changes, the names themselves
    do not change. This ensures that existing code does not need to be changed to
    work with new versions of methods.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，类是通过它们的方法访问的，这些方法具有相同的名称，因此，即使这些名称背后的代码发生了变化，名称本身也不会改变。这确保了现有的代码不需要更改以适应方法的新版本。
- en: 'We can do more to hide implementation details from client code, PHP5, like
    other object-oriented languages, supports **visibility modifiers** for methods
    and properties. For example, we could add a private property, which will be hidden
    from the rest of the application, to the `Banana` class:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做更多的工作来隐藏客户端代码的实现细节，PHP5和其他面向对象的语言一样，支持方法和属性的**可见性修饰符**。例如，我们可以在`Banana`类中添加一个私有属性，它将对应用程序的其余部分隐藏起来：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `$mySecretProperty` property is only accessible (or visible) in the `Banana`
    class; an attempt to access it from outside the `Banana` class's methods would
    trigger a run-time error. (In a compiled language, this would lead to a compilation
    error.)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`$mySecretProperty`属性只能在`Banana`类中访问（或可见）；试图从`Banana`类的方法之外访问它将触发运行时错误。（在编译语言中，这将导致编译错误。）'
- en: 'In PHP5, there exist two more modifiers: **public** (which we have already
    used), and **protected**. Public method or property is accessible from all the
    application, while protected is accessible inside the class and its subclasses
    only.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP5中，还存在两个修饰符：**public**（我们已经使用过）和**protected**。公共方法或属性可以从整个应用程序中访问，而受保护的方法或属性只能在类及其子类中访问。
- en: Polymorphism
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多态性
- en: '**Polymorphism** is a feature of OOP that allows us to write code that will
    work with objects belonging to different classes provided that these classes have
    the same base class. We have already seen polymorphism in action in the above
    example when we were accessing properties and methods of different objects using
    their names but returning different values and taking different actions.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 多态性是面向对象编程的一个特性，它允许我们编写能够处理属于不同类的对象的代码，只要这些类有相同的基类。我们在上面的例子中已经看到了多态性的作用，当我们使用它们的名称访问不同对象的属性和方法时，返回不同的值并执行不同的操作。
- en: The subclasses implement all the properties and methods belonging to the base
    class, and all future subclasses of the base class are guaranteed to implement
    these properties and methods so that the existing code can work even with subclasses
    which do not yet exist.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 子类实现了基类的所有属性和方法，并且基类的所有未来子类都保证实现这些属性和方法，以便现有代码甚至可以与尚不存在的子类一起工作。
- en: PHP5 supports interfaces. An interface is a construct that describes certain
    behaviour in different classes and class hierarchies. For example, let’s consider
    a `Tradeable` interface that has a single method, `isImported():`
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: PHP5支持接口。接口是一种描述不同类和类层次结构中某些行为的构造。例如，让我们考虑一个`Tradeable`接口，其中有一个方法`isImported()`：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we can declare in the definition of the `Fruit` class that it implements
    the Tradeable interface:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`Fruit`类的定义中声明它实现了Tradeable接口：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We have made `Fruit` objects and all objects belonging to its subclasses `(Apple`
    and `Banans)` non-imported by default. Now we can make bananas imported while
    leaving apples domestic:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了`Fruit`对象及其子类（`Apple`和`Banans`）的所有对象默认为非进口。现在我们可以将香蕉设为进口，同时将苹果保留为国产：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next we will create an imaginary `Car` class that implements the `Tradeable`
    interface:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个虚构的`Car`类，实现`Tradeable`接口：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Note that `Car` does not extend `Fruit`, but it still has the `isImported()`
    method. Now we can call this method from the application:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Car`没有扩展`Fruit`，但它仍然具有`isImported()`方法。现在我们可以从应用程序中调用这个方法：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This small example shows how objects from different class hierarchies can be
    treated in the same way by giving them a common interface. By doing this, objects
    that normally have quite different meanings can be manipulated in the same way,
    and this makes them polymorphic.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小例子展示了如何通过给它们一个共同的接口，以相同的方式处理来自不同类层次结构的对象。通过这样做，通常具有完全不同含义的对象可以以多态的方式进行操作。
- en: Static Properties, Methods, and Class Constants
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态属性、方法和类常量
- en: In all the examples in this appendix, we are using instances (objects) of classes,
    which modeled real-life entities. However, in PHP5 it is possible to use **static**
    properties and methods. Static properties are variables that are common to all
    the instances of the given class so that, if a static property is changed, it
    will get changed for all objects belonging to the class.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中的所有示例中，我们都在使用模拟现实生活实体的类的实例（对象）。但是，在PHP5中，可以使用**静态**属性和方法。静态属性是对给定类的所有实例都通用的变量，因此，如果更改静态属性，它将对属于该类的所有对象进行更改。
- en: 'A static property is declared just like a regular one, but with a special **static**
    keyword:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 静态属性的声明方式与常规属性相同，但有一个特殊的**static**关键字：
- en: '[PRE22]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The static properties can be accessed without even creating an instance of
    the class:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在不创建类的实例的情况下访问静态属性：
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The syntax for accessing a static property is as follows: the class name, then
    double semicolon, and then the property''s name. Note that with static properties
    (unlike with regular properties), the dollar sign, `$`, sign must be present.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 访问静态属性的语法如下：类名，然后是双冒号，然后是属性名。请注意，对于静态属性（与常规属性不同），必须存在美元符号`$`。
- en: 'Static methods, just like static properties, can be accessed without instantiating
    an object. They are declared and accessed in the following way:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法和静态属性一样，可以在不实例化对象的情况下访问。它们的声明和访问方式如下：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The declaration of a static method has the `static` keyword followed by a regular
    method declaration. The method is accessed by the class name followed by a double
    semicolon and then the method name.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法的声明具有`static`关键字，后面跟着常规方法声明。可以通过类名后跟双冒号，然后是方法名来访问该方法。
- en: The static properties and methods can be accessed inside the class declaration
    using the shortcut keyword `self:`
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在类声明内部使用快捷关键字`self`访问静态属性和方法：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There is also a major difference with the definition of static methods. You
    cannot use the `$this` variable (as there is no object to which the `$this` variable
    can refer).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 静态方法的定义也有一个主要区别。您不能使用`$this`变量（因为没有对象可以引用`$this`变量）。
- en: 'Another ''static'' feature of classes is class constants. A class constant
    acts like a static property, but its value cannot be changed. Class constants
    always must have their values assigned in the class declaration section, and they
    don''t have the dollar sign before them (so they are named just like regular PHP
    constants). Class constants are mostly used for keeping the global namespace cleaner
    (which is also one of the uses for static methods):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 类的另一个“静态”特性是类常量。类常量的作用类似于静态属性，但其值不能被更改。类常量必须始终在类声明部分分配其值，并且它们之前没有美元符号（因此它们的命名方式就像常规的PHP常量）。类常量主要用于保持全局命名空间的清洁（这也是静态方法的用途之一）：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: An attempt to assign a value to a class constant in the code will lead to a
    parse error.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中尝试为类常量分配一个值将导致解析错误。
- en: Exceptions
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异常
- en: As we have seen, exceptions are a very important addition to PHP5\. Exceptions
    are special kind of object that, when instantiated and `thrown`, break the normal
    execution flow and jump to a so called `catch` block.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，异常是PHP5的一个非常重要的补充。异常是一种特殊类型的对象，当实例化并“抛出”时，会打破正常的执行流程并跳转到所谓的“catch”块。
- en: 'Exceptions are used to report error conditions. Traditionally, functions return
    error codes if they fail. The application has to check every function call before
    proceeding to the next function call. Remember the piece of code that you use
    to connect to a MySQL database:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 异常用于报告错误条件。传统上，如果函数失败，函数会返回错误代码。应用程序必须在继续下一个函数调用之前检查每个函数调用。记住您用于连接到MySQL数据库的代码片段：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If the `mysql_xxx` functions could throw exceptions, this code could be simplified
    to this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`mysql_xxx`函数可能会抛出异常，那么这段代码可以简化为这样：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Of course, this code would not work, as these functions are not designed to
    throw exceptions. You will have to use PDO, and in [Chapter 3](ch03.html "Chapter 3. Error
    Handling") we saw how to work with PDO exceptions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这段代码不会起作用，因为这些函数并不是设计来抛出异常的。您将需要使用PDO，在[第3章](ch03.html "第3章。错误处理")中我们看到了如何处理PDO异常。
- en: 'Exceptions allow you to postpone error checking and maintain cleaner code.
    A function (or method) that causes an exception to be thrown is terminated, and
    the code in the block specified by the `catch` keyword is executed. Any code that
    might throw an exception is wrapped into the `try` block:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 异常允许您延迟错误检查并保持更清晰的代码。导致异常抛出的函数（或方法）将被终止，并且`catch`关键字指定的块中的代码将被执行。任何可能抛出异常的代码都被包装在`try`块中：
- en: '[PRE29]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The real power of exceptions is the ability to escalate them up the call stack.
    This means that, if you design a function or class method that can throw an exception,
    that function or method does not have to catch that exception. In fact, many application
    libraries are designed in such a way so that they don't process exceptions themselves,
    but instead let them pass to the calling code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 异常的真正威力在于能够将它们升级到调用堆栈。这意味着，如果您设计了一个可能抛出异常的函数或类方法，那么该函数或方法不必捕获该异常。事实上，许多应用程序库都是设计成不处理异常，而是让它们传递给调用代码。
- en: For example, many of the methods of the `PDO` and `PDOStatement` classes that
    we have encountered in this book can throw exceptions, and it is your responsibility
    to catch them and act appropriately.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，本书中遇到的`PDO`和`PDOStatement`类的许多方法都可能抛出异常，您有责任捕获并适当处理它们。
- en: 'Take a closer look at the `catch` block in the above code snippet. It is followed
    by the word `Exception` (which is the name of the base class for all exceptions
    in PHP) and the variable identifier `$e`. We can use the `$e` variable inside
    the `catch` block to inspect the error message and other debug information. The
    `Exception` class defines the following methods:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看上面代码片段中的`catch`块。它后面跟着`Exception`（这是PHP中所有异常的基类的名称）和变量标识符`$e`。我们可以在`catch`块中使用`$e`变量来检查错误消息和其他调试信息。`Exception`类定义了以下方法：
- en: '`getMessage()` returns the error message.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getMessage()`返回错误消息。'
- en: '`getCode()` returns the error code.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getCode()`返回错误代码。'
- en: '`getFile()` returns the name of the file where the exception occurred.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getFile()`返回异常发生的文件名。'
- en: '`getLine()` returns the number of the line where the exception occurred.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getLine()`返回异常发生的行号。'
- en: '`getTrace()` and `getTraceAsString()` return the backtrace (call stack), useful
    for debugging.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getTrace()`和`getTraceAsString()`返回回溯（调用堆栈），用于调试。'
- en: Of course, the error messages and error codes vary depending on where the exception
    occurred, so that they depend on which application library (such as PDO) you use.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，错误消息和错误代码会根据异常发生的位置而变化，因此它们取决于您使用的应用程序库（如PDO）。
- en: We specified the `Exception` class name after the `catch` keyword, because this
    class, like other classes, can be extended to create subclasses. For example,
    all exceptions that are thrown from PDO methods are instances of the `PDOException`
    class.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`catch`关键字后面指定了`Exception`类名，因为这个类，像其他类一样，可以被扩展以创建子类。例如，从PDO方法抛出的所有异常都是`PDOException`类的实例。
- en: 'The exception handling mechanism allows us to create different handling routines
    for different classes of exception. For example, we can do the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 异常处理机制允许我们为不同类别的异常创建不同的处理程序。例如，我们可以这样做：
- en: '[PRE30]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This code defines two error handling routines for all PDO errors: one class
    for a database error and another class for all other errors, which we identify
    as unexpected errors. Of course, in real life applications, the error handling
    strategies would be more complicated, but this example shows how exceptions can
    be classified.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码为所有PDO错误定义了两个错误处理程序：一个用于数据库错误，另一个用于所有其他错误，我们将其标识为意外错误。当然，在实际应用中，错误处理策略会更加复杂，但这个例子展示了异常如何被分类。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this appendix, we saw that PHP5 has some new OOP extensions that are comparable
    with those of modern programming languages. They allow us to write very big applications
    while maintaining code reuse and cleanliness. Object-oriented programming is a
    natural solution for big projects such as content management systems or database
    libraries involving PDO. Libraries for PHP5 are now being written with object-oriented
    programming in mind.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个附录中，我们看到PHP5具有一些新的面向对象编程扩展，这些扩展与现代编程语言的扩展相当。它们允许我们编写非常庞大的应用程序，同时保持代码重用和整洁。面向对象编程是大型项目（如内容管理系统或涉及PDO的数据库库）的自然解决方案。现在，为PHP5编写的库都考虑了面向对象编程。
- en: However, this appendix just gives a short introduction to the main concepts
    behind OOP so that you can follow the code examples in this book. If you want
    to fully master object-oriented programming, you should refer to books that will
    introduce you to and guide you through this challenging topic.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个附录只是简要介绍了面向对象编程背后的主要概念，以便您可以跟随本书中的代码示例。如果您想完全掌握面向对象编程，您应该参考一些能够介绍并指导您掌握这一挑战性主题的书籍。
