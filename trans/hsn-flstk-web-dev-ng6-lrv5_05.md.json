["```php\nstorage-db\n.DS_Store\n```", "```php\ngit init\n```", "```php\ngit add .\ngit commit -m \"first commit\"\n```", "```php\nversion: \"3.1\"\nservices:\n mysql:\n screenshot: mysql:5.7\n container_name: chapter-05-mysql\n working_dir: /application\n volumes:\n - .:/application\n - ./storage-db:/var/lib/mysql\n environment:\n - MYSQL_ROOT_PASSWORD=123456\n - MYSQL_DATABASE=chapter-05\n - MYSQL_USER=chapter-05\n - MYSQL_PASSWORD=123456\n ports:\n - \"8083:3306\"\n webserver:\n screenshot: nginx:alpine\n container_name: chapter-05-webserver\n working_dir: /application\n volumes:\n - .:/application\n - ./phpdocker/nginx/nginx.conf:\n /etc/nginx/conf.d/default.conf\n ports:\n - \"8081:80\"\n php-fpm:\n build: phpdocker/php-fpm\n container_name: chapter-05-php-fpm\n working_dir: /application\n volumes:\n - ./project:/application\n - ./phpdocker/php-fpm/php-ini-\n overrides.ini:/etc/php/7.2/fpm/conf.d/99-overrides.ini\n```", "```php\nDB_CONNECTION=mysql\n DB_HOST=mysql\n DB_PORT=3306\n DB_DATABASE=chapter-05\n DB_USERNAME=chapter-05\n DB_PASSWORD=123456\n```", "```php\nphp artisan make:model Builder -m\n```", "```php\nphp artisan make:model Item -m\n```", "```php\nphp artisan make:model Garage -m\n```", "```php\nphp artisan make:model Rating -m\n```", "```php\nproject/app/Builder.php project/database/migrations/XXXX_XX_XX_XXXXXX_create_builders_table.php project/app/Item.php project/database/migrations/XXXX_XX_XX_XXXXXX_create_items_table.php project/app/Garage.php project/database/migrations/XXXX_XX_XX_XXXXXX_create_garages_table.php project/app/Rating.php project/database/migrations/XXXX_XX_XX_XXXXXX_create_ratings_table.php\n```", "```php\n<?php\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\nclass CreateBuildersTable extends Migration\n{\n    /**\n    * Run the migrations.\n    *\n    * @return void\n    */\n    public function up()\n    {\n    Schema::create('builders', function (Blueprint $table) {\n        $table->increments('id');\n        $table->string('name');\n        $table->text('description');\n        $table->string('location');\n        $table->timestamps();\n        });\n    }\n    /**\n    * Reverse the migrations.\n    *\n    * @return void\n    */\n    public function down()\n    {\n        Schema::dropIfExists('builders');\n    }\n}\n```", "```php\n<?php\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\nclass CreateItemsTable extends Migration\n{\n    /**\n    * Run the migrations.\n    *\n    * @return void\n    */\n    public function up()\n    {\n        Schema::create('items', function (Blueprint $table) {\n        $table->increments('id');\n        $table->string('type');\n        $table->string('name');\n        $table->text('company');\n        $table->unsignedInteger('bike_id');\n        $table->timestamps();\n        });\n    }\n    /**\n    * Reverse the migrations.\n    *\n    * @return void\n    */\n    public function down()\n    {\n        Schema::dropIfExists('items');\n    }\n}\n```", "```php\n<?php\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\nclass CreateGaragesTable extends Migration\n{\n    /**\n    * Run the migrations.\n    *\n    * @return void\n    */\n    public function up()\n    {\n        Schema::create('garages', function (Blueprint $table) {\n        $table->increments('id');\n        $table->string('name');\n        $table->integer('customer_level');\n        $table->timestamps();\n        });\n    }\n    /**\n    * Reverse the migrations.\n    *\n    * @return void\n    */\n    public function down()\n    {\n        Schema::dropIfExists('garages');\n    }\n}\n```", "```php\nphp artisan make:migration create_bike_garage_table\n```", "```php\n<?php\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\nclass CreateBikeGarageTable extends Migration\n{\n    /**\n    * Run the migrations.\n    *\n    * @return void\n    */\n    public function up()\n    {\n        Schema::create('bike_garage', function (Blueprint $table) {\n        $table->increments('id');\n        $table->integer('bike_id');\n        $table->integer('garage_id');\n        $table->timestamps();\n        });\n    }\n    /**\n    * Reverse the migrations.\n    *\n    * @return void\n    */\n    public function down()\n    {\n        Schema::dropIfExists('bike_garage');\n    }\n}\n```", "```php\nphp artisan make:migration create_ratings_table\n```", "```php\n<?php\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\nclass CreateRatingsTable extends Migration\n{\n    /**\n    * Run the migrations.\n    *\n    * @return void\n    */\n    public function up()\n    {\n        Schema::create('ratings', function (Blueprint $table) {\n        $table->increments('id');\n        $table->unsignedInteger('user_id');\n        $table->unsignedInteger('bike_id');\n        $table->unsignedInteger('rating');\n        $table->timestamps();\n        });\n    }\n    /**\n    * Reverse the migrations.\n    *\n    * @return void\n    */\n    public function down()\n    {\n        Schema::dropIfExists('ratings');\n    }\n}\n```", "```php\n<?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\n/**\n* @SWG\\Definition(\n* definition=\"Builder\",\n* required={\"name\", \"description\", \"location\"},\n* @SWG\\Property(\n* property=\"name\",\n* type=\"string\",\n* description=\"Builder name\",\n* example=\"Jesse James\"\n* ),\n* @SWG\\Property(\n* property=\"description\",\n* type=\"string\",\n* description=\"Famous Motorcycle builder from Texas\",\n* example=\"Austin Speed Shop\"\n* ),\n* @SWG\\Property(\n* property=\"location\",\n* type=\"string\",\n* description=\"Texas/USA\",\n* example=\"Austin, Texas\"\n* ),\n* )\n*/\nclass Builder extends Model\n{\n    /**\n    * The table associated with the model.\n    *\n    * @var string\n    */\n    protected $table = 'builders';\n    /**\n    * The attributes that are mass assignable.\n    *\n    * @var array\n    */\n    protected $fillable = [\n        'name',\n        'description',\n        'location'\n    ];\n    /**\n    * Relationship.\n    *\n    * @var array\n    */\n    public function bike() {\n        return $this->hasOne('App\\Bike');\n    }\n}\n```", "```php\n/**\n* Relationship.\n*\n* @var string\n*/\npublic function builder() {\n     return $this->belongsTo('App\\Builder');\n}\n```", "```php\n<?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\n/**\n* @SWG\\Definition(\n* definition=\"Item\",\n* required={\"type\", \"name\", \"company\"},\n* @SWG\\Property(\n* property=\"type\",\n* type=\"string\",\n* description=\"Item Type\",\n* example=\"Exhaust\"\n* ),\n* @SWG\\Property(\n* property=\"name\",\n* type=\"string\",\n* description=\"Item name\",\n* example=\"2 into 1 Exhaust\"\n* ),\n* @SWG\\Property(\n* property=\"company\",\n* type=\"string\",\n* description=\"Produced by: some company\",\n* example=\"Vance and Hines\"\n* )\n* )\n*/\nclass Item extends Model\n{\n    /**\n    * The table associated with the model.\n    *\n    * @var string\n    */\n    protected $table = 'items';\n    /**\n    * The attributes that are mass assignable.\n    *\n    * @var array\n    */\n    protected $fillable = [\n        'type',\n        'name',\n        'company',\n        'bike_id'\n    ];\n    /**\n    * Relationship.\n    *\n    * @var string\n    */\n    public function bike() {\n        return $this->belongsTo('App\\Bike');\n    }\n}\n```", "```php\npublic function items() {\n    return $this->hasMany('App\\Item');\n}\n```", "```php\npublic function garages() {\n    return $this->belongsToMany('App\\Garage');\n}\n```", "```php\npublic function user() {\n        return $this->belongsTo('App\\User');\npublic function ratings() {\n        return $this->hasMany('App\\Rating');\n}\n```", "```php\n/**\n* Relationship.\n*\n* @var string\n*/\npublic function builder() {\n    return $this->belongsTo('App\\Builder');\n}\npublic function items() {\n    return $this->hasMany('App\\Item');\n}\npublic function garages() {\n    return $this->belongsToMany('App\\Garage');\n}\npublic function user() {\n    return $this->belongsTo(User::class);\n}\npublic function ratings() {\n    return $this->hasMany(Rating::class);\n}\n```", "```php\n<?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\n/**\n* @SWG\\Definition(\n* definition=\"Garage\",\n* required={\"name\", \"custumer_level\"},\n* @SWG\\Property(\n* property=\"name\",\n* type=\"string\",\n* description=\"Jhonny Garage\",\n* example=\"Exhaust\"\n* ),\n* @SWG\\Property(\n* property=\"customer_level\",\n* type=\"integer\",\n* description=\"Whats the garage level\",\n* example=\"10\"\n* )\n* )\n*/\nclass Garage extends Model\n{\n    /**\n    * The table associated with the model.\n    *\n    * @var string\n    */\n    protected $table = 'garages';\n    /**\n    * The attributes that are mass assignable.\n    *\n    * @var array\n    */\n    protected $fillable = [\n        'name',\n        'costumer_level'\n    ];\n    /\n    *\n    * @var string\n    */\n    public function bikes() {\n        return $this->belongsToMany('App\\Bike', 'bike_garage',\n        'bike_id', 'garage_id');\n    }\n}\n* Relationship.\n```", "```php\n<?php\nnamespace App;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n/**\n* @SWG\\Definition(\n* definition=\"User\",\n* required={\"name\", \"email\", \"password\"},\n* @SWG\\Property(\n* property=\"name\",\n* type=\"string\",\n* description=\"User name\",\n* example=\"John Conor\"\n* ),\n* @SWG\\Property(\n* property=\"email\",\n* type=\"string\",\n* description=\"Email Address\",\n* example=\"john.conor@terminator.com\"\n* ),\n* @SWG\\Property(\n* property=\"password\",\n* type=\"string\",\n* description=\"A very secure password\",\n* example=\"123456\"\n* ),\n* )\n*/class User extends Authenticatable\n{\n    use Notifiable;\n    /**\n    * The attributes that are mass assignable.\n    *\n    * @var array\n    */\n    protected $fillable = [\n        'name', 'email', 'password',\n    ];\n    /**\n    * The attributes that should be hidden for arrays.\n    *\n    * @var array\n    */\n    protected $hidden = [\n        'password', 'remember_token',];\n    * Relationship.\n    ** @var string\n    /\n    public function bikes()\n    {\n        return $this->hasMany(App\\Bike);\n    }\n}\n```", "```php\n<?php\nnamespace App;\nuse Illuminate\\Database\\Eloquent\\Model;\n/**\n* @SWG\\Definition(\n* definition=\"Rating\",\n* required={\"bike_id\", \"user_id\", \"rating\"},\n* @SWG\\Property(\n* property=\"biker_id\",\n* type=\"integer\",\n* description=\"Bike id\",\n* example=\"1\"\n* ),\n* @SWG\\Property(\n* property=\"user_id\",\n* type=\"integer\",\n* description=\"User id\",\n* example=\"2\"\n* ),\n* @SWG\\Property(\n* property=\"rating\",\n* type=\"integer\",\n* description=\"Vote by rating\",\n* example=\"10\"\n* )\n* )\n*/\nclass Rating extends Model\n{\n    /**\n    * The attributes that are mass assignable.\n    *\n    * @var array\n    */\n    protected $fillable = [\n        'bike_id',\n        'user_id',\n        'rating'\n    ];\n    /**\n    * Relationship.\n    *\n    * @var string\n    */\n    public function bike() {\n        return $this->belongsTo('App\\Bike');\n    }\n}\n```", "```php\nphp artisan migrate\n```", "```php\nphp artisan migrate:refresh\n```", "```php\nphp artisan make:seeder BuildersTableSeeder\n```", "```php\nDB::table('builders')->delete();\n$json = File::get(\"database/data-sample/builders.json\");\n$data = json_decode($json);\nforeach ($data as $obj) {\n    Builder::create(array(\n        'id' => $obj->id,\n        'name' => $obj->name,\n        'description' => $obj->description,\n        'location' => $obj->location\n    ));\n}\n```", "```php\nphp artisan make:seeder ItemsTableSeeder\n```", "```php\nDB::table('items')->delete();\n$json = File::get(\"database/data-sample/items.json\");\n$data = json_decode($json);\nforeach ($data as $obj) {\n    Item::create(array(\n        'id' => $obj->id,\n        'type' => $obj->type,\n        'name' => $obj->name,\n        'company' => $obj->company,\n        'bike_id' => $obj->bike_id\n    ));\n}\n```", "```php\nphp artisan make:seeder GaragesTableSeeder\n```", "```php\nDB::table('garages')->delete();\n$json = File::get(\"database/data-sample/garages.json\");\n$data = json_decode($json);\nforeach ($data as $obj) {\n    Garage::create(array(\n        'id' => $obj->id,\n        'name' => $obj->name,\n        'customer_level' => $obj->customer_level\n    ));\n}\n```", "```php\nDB::table('users')->insert([\n'name' => 'Johnny Cash',\n'email' => 'johnny@cash.com',\n'password' => bcrypt('123456')\n]);\n    DB::table('users')->insert([\n        'name' => 'Frank Sinatra',\n        'email' => 'frank@sinatra.com',\n        'password' => bcrypt('123456')\n    ]);\n```", "```php\n[{\n    \"id\": 1,\n    \"name\": \"Diamond Atelier\",\n    \"description\": \"Diamond Atelier was founded by two fellow riders\n     who grew tired of the same played-out custom bike look and feel\n     they and their friends had grown accustomed to witnessing.\",\n    \"location\": \"Munich, Germany\"\n},{\n    \"id\": 2,\n    \"name\": \"Deus Ex Machina's\",\n    \"description\": \"Established in Australia back in 2006\\. And what     started on the East Coast of Australia has spread across the\n     world, building an empire of cafe racers.\",\n    \"location\": \"Sydney, Australia\"\n},{\n    \"id\": 3,\n    \"name\": \"Rough Crafts\",\n    \"description\": \"A true testament to how far the custom bike\n     world has come since the introduction of motorcycles in the\n     early 20th century, Taiwan-based Rough Crafts is a design\n     powerhouse.\",\n    \"location\": \"Taiwan\"\n},{\n    \"id\": 4,\n    \"name\": \"Roldand Sands\",\n    \"description\": \"Is an American motorcycle racer and designer of\n    custom high-performance motorcycles.\",\n    \"location\": \"California, USA\"\n},{\n    \"id\": 5,\n    \"name\": \"Chopper Dave\",\n    \"description\": \"An artist, a biker, a builder and an innovator     among other things, but what it comes down to is David\n     \u201cChopperDave\u201d Freston is a motorcycle builder and fabricator     that is passionate about motorcycles\",\n    \"location\": \"California, USA\"\n}]\n```", "```php\n[{\n    \"id\": 1,\n    \"type\": \"Handlebars\",\n    \"name\": \"Apes Hanger 16 \",\n    \"company\": \"TC Bros\",\n    \"bike_id\": 2\n},{\n    \"id\": 2,\n    \"type\": \"Seat\",\n    \"name\": \"Challenger\",\n    \"company\": \"Biltwell Inc\",\n    \"bike_id\": 3\n},{\n    \"id\": 3,\n    \"type\": \"Exhaust\",\n    \"name\": \"Side Shots\",\n    \"company\": \"Vance and Hines\",\n    \"bike_id\": 3\n}]\n```", "```php\nphp artisan make:seeder BikesGaragesTableSeeder\n```", "```php\nDB::table('bike_garage')->insert([\n    'bike_id' => 1,\n    'garage_id' => 2\n]);\nDB::table('bike_garage')->insert([\n    'bike_id' => 2,\n    'garage_id' => 2\n]);\n```", "```php\n[{\n    \"id\": 1,\n    \"make\": \"Harley Davidson\",\n    \"model\": \"XL1200 Nightster\",\n    \"year\": \"2009\",\n    \"mods\": \"Nobis vero sint non eius. Laboriosam sed odit hic quia     doloribus. Numquam laboriosam numquam quas quis.\"\n    \"picture\": \"https://placeimg.com/640/480/nature\",\"user_id\": 2,\n    \"builder_id\": 1\n}, {\n    \"id\": 2,\n    \"make\": \"Harley Davidson\",\n    \"model\": \"Blackline\",\n    \"year\": \"2008\",\n    \"mods\": \"Nobis vero sint non eius. Laboriosam sed odit hic quia     doloribus. Numquam laboriosam numquam quas quis.\",\n    \"picture\": \"https://placeimg.com/640/480/nature\",\n    \"user_id\": 1,\n    \"builder_id\": 2\n}, {\n    \"id\": 3,\n    \"make\": \"Harley Davidson\",\n    \"model\": \"Dyna Switchback\",\n    \"year\": \"2009\",\n    \"mods\": \"Nobis vero sint non eius. Laboriosam sed odit hic quia     doloribus. Numquam laboriosam numquam quas quis.\",\n    \"picture\": \"https://placeimg.com/640/480/nature\",\n    \"user_id\": 2,\n    \"builder_id\": 3\n}, {\n    \"id\": 4,\n    \"make\": \"Harley Davidson\",\n    \"model\": \"Dyna Super Glide\",\n    \"year\": \"2009\",\n    \"mods\": \"Nobis vero sint non eius. Laboriosam sed odit hic quia     doloribus. Numquam laboriosam numquam quas quis.\",\n    \"picture\": \"https://placeimg.com/640/480/nature\",\n    \"user_id\": 4,\n    \"builder_id\": 4\n},{\n    \"id\": 5,\n    \"make\": \"Harley Davidson\",\n    \"model\": \"Dyna Wild Glide\",\n    \"year\": \"2005\",\n    \"mods\": \"Nobis vero sint non eius. Laboriosam sed odit hic quia     doloribus. Numquam laboriosam numquam quas quis.\",\n    \"picture\": \"https://placeimg.com/640/480/nature\",\n    \"user_id\": 5,\n    \"builder_id\": 5\n}]\n```", "```php\nphp artisan migrate:fresh --seed\n```", "```php\n Seeding: UsersTableSeeder\n Seeding: BikesTableSeeder\n Seeding: BuildersTableSeeder\n Seeding: ItemsTableSeeder\n Seeding: GaragesTableSeeder\n Seeding: BikeGarageTableSeeder\n```", "```php\nphp artisan tinker\n```", "```php\nDB::table('builders')->get();\n```", "```php\n >>> DB::table('builders')->get();\n=> Illuminate\\Support\\Collection {#810\n     all: [\n       {#811\n         +\"id\": 1,\n         +\"name\": \"Diamond Atelier\",\n         +\"description\": \"Diamond Atelier was founded by two fellow\n         riders who grew tired of the same played-out custom\n         bike look and feel they and their friends had grown\n         accustomed     to witnessing.\",\n         +\"location\": \"Munich, Germany\",\n         +\"created_at\": \"XXXX\",\n         +\"updated_at\": \"XXXX\",\n       },\n       ...\n       }]\n```", "```php\nDB::table('builders')->find(3);\n```", "```php\n>>> DB::table('builders')->find(3);\n=> {#817\n     +\"id\": 3,\n     +\"name\": \"Rough Crafts\",     +\"description\": \"A true testament      to how far the custom bike world has come since the\n     introduction     of motorcycles i\n     n the early 20th century, Taiwan-based Rough Crafts is a design      powerhouse.\",\n     +\"location\": \"Taiwan\",\n     +\"created_at\": \"XXXX\",\n     +\"updated_at\": \"XXXX\",\n   }\n```", "```php\nBuilder::where('id', '=', 3)->get();\n```", "```php\n>>> Builder::where('id', '=', 3)->get();\n=> Illuminate\\Database\\Eloquent\\Collection {#825\n     all: [\n       App\\Builder {#828\n         id: 3,\n         name: \"Rough Crafts\",\n         description: \"A true testament to how far the custom bike          world has come since the introduction of motorcycles\n         in the early 20th century, Taiwan-based Rough Crafts is a          design powerhouse.\",\n         location: \"Taiwan\",\n         created_at: \"XXXX\",\n         updated_at: \"XXXX\",\n       },\n     ],\n   }\n```", "```php\nBuilder::with('bike')->find(3);\n```", "```php\n>>> Builder::with('bike')->find(3);\n=> App\\Builder {#811\n     id: 3,\n     name: \"Rough Crafts\",     description: \"A true testament to how\n     far the custom bike world has come since the introduction of\n     motorcycles in t\n     he early 20th century, Taiwan-based Rough Crafts is a design\n     powerhouse.\",\n     location: \"Taiwan\",\n     created_at: \"XXXX\",\n     updated_at: \"XXXX\",\n     bike: App\\Bike {#831\n       id: 3,\n       make: \"Harley Davidson\",\n       model: \"Dyna Switchback\",\n       year: \"2009\",\n       mods: \"Nobis vero sint non eius. Laboriosam sed odit hic quia\n       doloribus. Numquam laboriosam numquam quas quis.\",\n       picture: \"https://placeimg.com/640/480/nature\",\n       builder_id: 3,\n       created_at: \"XXXX\",\n       updated_at: \"XXXX\",\n     },\n   }\n```", "```php\nBike::with(['items', 'builder'])->find(3);\n```", "```php\n>>> Bike::with(['items', 'builder'])->find(3);\n[!] Aliasing 'Bike' to 'App\\Bike' for this Tinker session.\n=> App\\Bike {#836\n     id: 3,     make: \"Harley Davidson\",\n     model: \"Dyna Switchback\",\n     year: \"2009\",\n     mods: \"Nobis vero sint non eius. Laboriosam sed odit hic quia\n     doloribus. Numquam laboriosam numquam quas quis.\",\n     picture: \"https://placeimg.com/640/480/nature\",\n     builder_id: 3,\n     created_at: \"XXXX\",\n     updated_at: \"XXXX\",\n     items: Illuminate\\Database\\Eloquent\\Collection {#837\n       all: [\n         App\\Item {#843\n           id: 2,\n           type: \"Seat\",\n           name: \"Challenger\",\n           company: \"Biltwell Inc\",\n           bike_id: 3,\n           created_at: \"XXXX\",\n           updated_at: \"XXXX\",\n         },\n         App\\Item {#845\n           id: 3,\n           type: \"Exhaust\",\n           name: \"Side Shots\",\n           company: \"Vance and Hines\",\n           bike_id: 3,\n           created_at: \"XXXX\",\n           updated_at: \"XXXX\",\n         },\n       ],\n     },\n     builder: App\\Builder {#844\n       id: 3,\n       name: \"Rough Crafts\",description: \"A true testament to how\n       far the custom bike world has come since the introduction of\n       motorcycles in the early 20th century, Taiwan-based Rough\n       Crafts is a design powerhouse.\",\n       location: \"Taiwan\",\n       created_at: \"XXXX\",\n       updated_at: \"XXXX\",\n     },\n   }\n```", "```php\nphp artisan make:controller API/BuilderController --api\n```", "```php\n<?php\nnamespace App\\Http\\Controllers\\API;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Builder;\nclass BuilderController extends Controller\n{\n    /**\n    * Display a listing of the resource.\n    *\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Get(\n    * path=\"/api/builders\",\n    * tags={\"Builders\"}\n    * summary=\"List Builders\",\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: List all Builders\",\n    * @SWG\\Schema(ref=\"#/definitions/Builder\")\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function index()\n    {\n        $listBuilder = Builder::all();\n        return $listBuilder;\n\n    }\n```", "```php\n/**\n* Store a newly created resource in storage.\n*\n* @param \\Illuminate\\Http\\Request $request\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Post(\n* path=\"/api/builders\",\n* tags={\"Builders\"},\n* summary=\"Create Builder\",\n* @SWG\\Parameter(\n*          name=\"body\",\n*          in=\"body\",\n*          required=true,\n*          @SWG\\Schema(ref=\"#/definitions/Builder\"),\n*          description=\"Json format\",\n*      ),\n* @SWG\\Response(\n* response=201,\n* description=\"Success: A Newly Created Builder\",\n* @SWG\\Schema(ref=\"#/definitions/Builder\")\n* ),\n* @SWG\\Response(\n* response=\"422\",\n* description=\"Missing mandatory field\"\n* ),\n* @SWG\\Response(\n* response=\"404\",\n* description=\"Not Found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\n* )\n* ),\n*/\npublic function store(Request $request)\n{\n    $createBuilder = Builder::create($request->all());\n    return $createBuilder;\n}\n```", "```php\n\n/**\n* Display the specified resource.\n*\n* @param int $id* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Get(\n* path=\"/api/builders/{id}\",\n* tags={\"Builders\"},\n* summary=\"Get Builder by Id\",\n* @SWG\\Parameter(\n* name=\"id\",\n* in=\"path\",\n* required=true,\n* type=\"integer\",\n* description=\"Display the specified Builder by id.\",\n*      ),\n* @SWG\\Response(\n* response=200,\n* description=\"Success: Return the Builder\",\n* @SWG\\Schema(ref=\"#/definitions/Builder\")\n* ),\n* @SWG\\Response(\n* response=\"404\",\n* description=\"Not Found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * )\n* )\n*/\npublic function show($id)\n{\n    $showBuilderById = Builder::with('Bike')->findOrFail($id);\n    return $showBuilderById;\n}\n```", "```php\n/**\n* Update the specified resource in storage.\n*\n* @param \\Illuminate\\Http\\Request $request\n* @param int $id\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Put(\n* path=\"/api/builders/{id}\",\n* tags={\"Builders\"},\n* summary=\"Update Builder\",\n* @SWG\\Parameter(\n* name=\"id\",\n* in=\"path\",\n* required=true,\n* type=\"integer\",\n* description=\"Update the specified Builder by id.\",\n*      ),\n* @SWG\\Parameter(\n*          name=\"body\",\n*          in=\"body\",\n*          required=true,\n*          @SWG\\Schema(ref=\"#/definitions/Builder\"),\n*          description=\"Json format\",\n*      ),\n* @SWG\\Response(\n* response=200,\n* description=\"Success: Return the Builder updated\",\n* @SWG\\Schema(ref=\"#/definitions/Builder\")\n* ),\n* @SWG\\Response(\n* response=\"422\",\n* description=\"Missing mandatory field\"\n* ),\n* @SWG\\Response(\n* response=\"404\",\n* description=\"Not Found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * )\n* ),\n*/\npublic function update(Request $request, $id)\n{\n    $updateBuilderById = Builder::findOrFail($id);\n    $updateBuilderById->update($request->all());\n    return $updateBuilderById;\n}\n```", "```php\n/**\n* Remove the specified resource from storage.\n*\n* @param int $id\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Delete(\n* path=\"/api/builders/{id}\",\n* tags={\"Builders\"},\n* summary=\"Delete Builder\",\n* description=\"Delete the specified Builder by id\",\n* @SWG\\Parameter(\n* description=\"Builder id to delete\",\n* in=\"path\",\n* name=\"id\",\n* required=true,\n* type=\"integer\",\n* format=\"int64\"\n* ),\n* @SWG\\Response(\n* response=404,\n* description=\"Not found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * ),\n* @SWG\\Response(\n* response=204,\n* description=\"Success: successful deleted\"\n* ),\n* )\n*/\npublic function destroy($id)\n{\n    $deleteBikeById = Bike::find($id)->delete();\n    return response()->json([], 204);\n    }\n}\n```", "```php\nphp artisan make:controller API/ItemController --api\n```", "```php\n<?php\nnamespace App\\Http\\Controllers\\API;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Item;\nclass ItemController extends Controller\n{\n    /**\n    * Display a listing of the resource.\n    *\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Get(\n    * path=\"/api/items\",\n    * tags={\"Items\"},\n    * summary=\"List Items\",\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: List all Items\",\n    * @SWG\\Schema(ref=\"#/definitions/Item\")\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function index()\n    {\n        $listItems = Item::all();\n        return $listItems;\n    }\n    /**\n    * Store a newly created resource in storage.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Post(\n    * path=\"/api/items\",\n    * tags={\"Items\"},\n    * summary=\"Create Item\",\n    * @SWG\\Parameter(\n    *           name=\"body\",\n    *           in=\"body\",\n    *           required=true,\n    *           @SWG\\Schema(ref=\"#/definitions/Item\"),\n    *           description=\"Json format\",\n    *       ),\n    * @SWG\\Response(\n    * response=201,\n    * description=\"Success: A Newly Created Item\",\n    * @SWG\\Schema(ref=\"#/definitions/Item\")\n    * ),\n    * @SWG\\Response(\n    * response=\"422\",\n    * description=\"Missing mandatory field\"\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function store(Request $request)\n    {\n        $createItem = Item::create($request->all());\n        return $createItem;\n    }\n    /**\n    * Display the specified resource.\n    *\n    * @param int $id\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Get(\n    * path=\"/api/items/{id}\",\n    * tags={\"Items\"},\n    * summary=\"Get Item by Id\",\n    * @SWG\\Parameter(\n    * name=\"id\",\n    * in=\"path\",\n    * required=true,\n    * type=\"integer\",\n    * description=\"Display the specified Item by id.\",\n    *       ),\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: Return the Item\",\n    * @SWG\\Schema(ref=\"#/definitions/Item\")\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function show($id)\n    {\n        $showItemById = Item::with('Bike')->findOrFail($id);\n        return $showItemById;\n    }\n    /**\n    * Update the specified resource in storage.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @param int $id\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Put(\n    * path=\"/api/items/{id}\",\n    * tags={\"Items\"},\n    * summary=\"Update Item\",\n    * @SWG\\Parameter(\n    * name=\"id\",\n    * in=\"path\",\n    * required=true,\n    * type=\"integer\",\n    * description=\"Update the specified Item by id.\",\n    *       ),\n    * @SWG\\Parameter(\n    *           name=\"body\",\n    *           in=\"body\",\n    *           required=true,\n    *           @SWG\\Schema(ref=\"#/definitions/Item\"),\n    *           description=\"Json format\",\n    *       ),\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: Return the Item updated\",\n    * @SWG\\Schema(ref=\"#/definitions/Item\")\n    * ),\n    * @SWG\\Response(\n    * response=\"422\",\n    * description=\"Missing mandatory field\"\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function update(Request $request, $id)\n    {\n        $updateItemById = Item::findOrFail($id);\n        $updateItemById->update($request->all());\n        return $updateItemById;\n    }\n    /**\n    * Remove the specified resource from storage.\n    *\n    * @param int $id\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Delete(\n    * path=\"/api/items/{id}\",\n    * tags={\"Items\"},\n    * summary=\"Delete Item\",\n    * description=\"Delete the specified Item by id\",\n    * @SWG\\Parameter(\n    * description=\"Item id to delete\",\n    * in=\"path\",\n    * name=\"id\",\n    * required=true,\n    * type=\"integer\",\n    * format=\"int64\"\n    * ),\n    * @SWG\\Response(\n    * response=404,\n    * description=\"Not found\"\n    * ),\n    * @SWG\\Response(\n    * response=204,\n    * description=\"Success: successful deleted\"\n    * ),\n    * )\n    */\n    public function destroy($id)\n    {\n        $deleteItemById = Item::findOrFail($id)->delete();\n        return response()->json([], 204);\n    }\n}\n```", "```php\nphp artisan make:controller API/BikeController --api\n```", "```php\nuse App\\Bike;\n```", "```php\n<?php\nnamespace App\\Http\\Controllers\\API;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Bike;\nclass BikeController extends Controller\n{\n    /**\n    * Display a listing of the resource.\n    ** @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Get(\n    * path=\"/api/bikes\",\n    * tags={\"Bikes\"},\n    * summary=\"List Bikes\",\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: List all Bikes\",\n    * @SWG\\Schema(ref=\"#/definitions/Bike\")\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function index()\n    {\n        $listBikes = Bike::all();\n        return $listBikes;\n    }\n    /**\n    * Store a newly created resource in storage.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Post(\n    * path=\"/api/bikes\",\n    * tags={\"Bikes\"},\n    * summary=\"Create Bike\",\n    * @SWG\\Parameter(\n    *           name=\"body\",\n    *           in=\"body\",\n    *           required=true,\n    *           @SWG\\Schema(ref=\"#/definitions/Bike\"),\n    *           description=\"Json format\",\n    *       ),\n    * @SWG\\Response(\n    * response=201,\n    * description=\"Success: A Newly Created Bike\",\n    * @SWG\\Schema(ref=\"#/definitions/Bike\")\n    * ),\n    * @SWG\\Response(\n    * response=\"422\",\n    * description=\"Missing mandatory field\"\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function store(Request $request)\n    {\n        $createBike = Bike::create($request->all());\n        return $createBike;\n    }\n    /**\n    * Display the specified resource.\n    *\n    * @param int $id\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Get(\n    * path=\"/api/bikes/{id}\",\n    * tags={\"Bikes\"},\n    * summary=\"Get Bike by Id\",\n    * @SWG\\Parameter(\n    * name=\"id\",\n    * in=\"path\",\n    * required=true,\n    * type=\"integer\",\n    * description=\"Display the specified bike by id.\",\n    *       ),\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: Return the Bike\",\n    * @SWG\\Schema(ref=\"#/definitions/Bike\")\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function show($id)\n    {\n        $showBikeById = Bike::with(['items', 'builder', 'garages'])-\n        >findOrFail($id);\n        return $showBikeById;\n    }\n    /**\n    * Update the specified resource in storage.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @param int $id\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Put(\n    * path=\"/api/bikes/{id}\",\n    * tags={\"Bikes\"},\n    * summary=\"Update Bike\",\n    * @SWG\\Parameter(\n    * name=\"id\",\n    * in=\"path\",\n    * required=true,\n    * type=\"integer\",\n    * description=\"Update the specified bike by id.\",\n    *       ),\n    * @SWG\\Parameter(\n    *           name=\"body\",\n    *           in=\"body\",\n    *           required=true,\n    *           @SWG\\Schema(ref=\"#/definitions/Bike\"),\n    *           description=\"Json format\",\n    *       ),\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: Return the Bike updated\",\n    * @SWG\\Schema(ref=\"#/definitions/Bike\")\n    * ),\n    * @SWG\\Response(\n    * response=\"422\",\n    * description=\"Missing mandatory field\"\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function update(Request $request, $id)\n    {\n        $updateBikeById = Bike::findOrFail($id);\n        $updateBikeById->update($request->all());\n        return $updateBikeById;\n    }\n    /**\n    * Remove the specified resource from storage.\n    *\n    * @param int $id* @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Delete(\n    * path=\"/api/bikes/{id}\",\n    * tags={\"Bikes\"},\n    * summary=\"Delete bike\",\n    * description=\"Delete the specified bike by id\",\n    * @SWG\\Parameter(\n    * description=\"Bike id to delete\",\n    * in=\"path\",\n    * name=\"id\",\n    * required=true,\n    * type=\"integer\",\n    * format=\"int64\"\n    * ),\n    * @SWG\\Response(\n    * response=404,\n    * description=\"Not found\"\n    * ),\n    * @SWG\\Response(\n    * response=204,\n    * description=\"Success: successful deleted\"\n    * ),\n    * )\n    */\n    public function destroy($id)\n    {\n        $deleteBikeById = Bike::find($id)->delete();\n        return response()->json([], 204);\n    }\n}\n```", "```php\nphp artisan make:controller API/RatingController --api\n```", "```php\nuse App\\Rating;\n```", "```php\n<?php\nnamespace App\\Http\\Controllers\\API;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Bike;\nuse App\\Rating;\nuse App\\Http\\Resources\\RatingResource;\nclass RatingController extends Controller\n{\n    /**\n    * Store a newly created resource in storage.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Post(\n    * path=\"/api/bikes/{bike_id}/ratings\",\n    * tags={\"Ratings\"},\n    * summary=\"rating a Bike\",\n    * @SWG\\Parameter(\n    * in=\"path\",\n    * name=\"id\",\n    * required=true,\n    * type=\"integer\",\n    * format=\"int64\",\n    *           description=\"Bike Id\"\n    *       ),\n    * @SWG\\Parameter(\n    *           name=\"body\",\n    *           in=\"body\",\n    *           required=true,\n    *           @SWG\\Schema(ref=\"#/definitions/Rating\"),\n    *           description=\"Json format\",\n    *        ),\n    * @SWG\\Response(\n    * response=201,\n    * description=\"Success: A Newly Created Rating\",\n    * @SWG\\Schema(ref=\"#/definitions/Rating\")\n    * ),\n    * @SWG\\Response(\n    * response=401,\n    * description=\"Refused: Unauthenticated\"\n    * ),\n    * @SWG\\Response(\n    * response=\"422\",\n    * description=\"Missing mandatory field\"\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * ),\n    * @SWG\\Response(\n    *        response=\"405\",\n    *    description=\"Invalid HTTP Method\"\n    * ),\n    * security={\n    *        { \"api_key\":{} }\n    * }\n    * ),\n    */\n    public function store(Request $request, Bike $bike)\n    {\n        $rating = Rating::firstOrCreate(\n            [\n                'user_id' => $request->user()->id,\n                'bike_id' => $bike->id,\n            ],\n            ['rating' => $request->rating]\n        );\n        return new RatingResource($rating);\n    }\n}\n```", "```php\nRoute::apiResources([\n    'bikes' => 'API\\BikeController',\n    'builders' => 'API\\BuilderController',\n    'items' => 'API\\ItemController',\n    'bikes/{bike}/ratings' => 'API\\RatingController'\n]);\n```", "```php\nphp artisan l5-swagger:generate\n```"]