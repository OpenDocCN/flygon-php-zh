- en: Chapter 12. Integrating and Distributing Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。集成和分发模块
- en: Throughout a few of the previous chapters, we built a simple web shop application
    in a modular manner. Each of the modules play a special role in handling individual
    bits and pieces, which add to the overall application. The application itself,
    though written in modular, was kept in a Git single version control repository.
    It would be a far cleaner separation if each of the modules was provided in its
    own repository. This way, we will be able to keep the different module developments
    as completely different projects while still being able to use them together.
    As we move forward, we will see how we can achieve this via GIT and Composer in
    two different manners.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们以模块化的方式构建了一个简单的网络商店应用程序。每个模块在处理各自的部分时都起着特殊的作用，这有助于整体应用程序。尽管应用程序本身是模块化编写的，但它被保存在一个Git单一版本控制存储库中。如果每个模块都在自己的存储库中提供，那将是一个更清晰的分离。这样，我们将能够将不同的模块开发作为完全不同的项目进行保留，同时仍然能够将它们一起使用。随着我们的前进，我们将看到如何通过GIT和Composer以两种不同的方式实现这一点。
- en: 'In this chapter, we will cover the following tools and services:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下工具和服务：
- en: Understanding Git
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Git
- en: Understanding GitHub
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解GitHub
- en: Understanding Composer
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Composer
- en: Understanding Packagist
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Packagist
- en: Understanding Git
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Git
- en: Originally started by Linus Torvalds, Git version control is currently one of
    the most popular version control systems. Overall speed and efficiency with large
    projects, alongside a great branching system, has made it popular among developers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最初由Linus Torvalds开始，Git版本控制目前是最受欢迎的版本控制系统之一。与大型项目的整体速度和效率以及出色的分支系统一起，使其在开发人员中广受欢迎。
- en: Learning about Git version control itself is out of the scope of this book,
    for which recommended reading is the *Pro Git* book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 学习Git版本控制本身超出了本书的范围，建议阅读*Pro Git*书籍。
- en: Tip
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The *Pro Git* book, written by Scott Chacon and Ben Straub, and published by
    Apress, is available for free at [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由Scott Chacon和Ben Straub编写，由Apress出版的*Pro Git*书籍可以免费获取，网址为[https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)。
- en: One neat feature of Git, which we are interested in as part of this chapter,
    is its submodules. They enable us to slice larger modular projects, such as our
    web shop app, into a series of smaller submodules, whereas each submodule is a
    Git repository on its own.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Git的一个很棒的功能是其子模块，这是我们在本章中感兴趣的部分。它们使我们能够将较大的模块化项目（例如我们的网络商店应用程序）切分为一系列较小的子模块，其中每个子模块都是一个独立的Git存储库。
- en: Understanding GitHub
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解GitHub
- en: Within three years of Git's appearance, GitHub emerged. GitHub is basically
    a web service built on top of the Git version control system. It enables developers
    to easily post their code online, where others can simply clone their repository
    and use their code. Creating an account on GitHub is free and can be done by following
    instructions on their official homepage ([https://github.com](https://github.com)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Git出现三年后，GitHub出现了。GitHub基本上是建立在Git版本控制系统之上的网络服务。它使开发人员能够轻松地将他们的代码发布到在线，其他人可以简单地克隆他们的存储库并使用他们的代码。在GitHub上创建帐户是免费的，可以通过按照官方主页上的说明来完成（[https://github.com](https://github.com)）。
- en: 'Currently, our application is structured as per the following image:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的应用程序结构如下图所示：
- en: '![Understanding GitHub](graphics/B05460_12_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![理解GitHub](graphics/B05460_12_02.jpg)'
- en: 'What we want to do is to split it into six different Git repositories, as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要将其分成六个不同的Git存储库，如下所示：
- en: '`core`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心
- en: '`catalog`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目录
- en: '`customer`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户
- en: '`payment`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支付
- en: '`sales`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 销售
- en: '`shipment`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装运
- en: The `core` repository is to contain everything except the content of the `src/Foggyline`
    directory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`core`存储库应包含除`src/Foggyline`目录内容之外的所有内容。'
- en: 'Assuming we created an empty `core` repository on GitHub, and our local *all-in-one*
    app is currently held in the `shop` directory, we initialize the following commands
    on our computer:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在GitHub上创建了一个空的`core`存储库，并且我们的本地*all-in-one*应用程序当前保存在`shop`目录中，我们在计算机上初始化以下命令：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: At this point, we merely pushed the core application part of our all-in-one
    web shop app into the `core` repository on GitHub. The `src/Foggyline/` directory
    does not contain any modules in it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们仅将我们的全能网络商店应用程序的核心部分推送到GitHub上的`core`存储库。`src/Foggyline/`目录中不包含任何模块。
- en: 'Now, let''s go back to GitHub and create an appropriate empty repository for
    each of the five modules, that is, `catalog`, `customer`, `payment`, `sales`,
    and `shipment`. We can now execute a set of console commands for each of the modules,
    as shown in the following `CatalogBundle` example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到GitHub，并为五个模块（即`catalog`，`customer`，`payment`，`sales`和`shipment`）创建一个适当的空存储库。现在，我们可以为每个模块执行一组控制台命令，如下面的`CatalogBundle`示例所示：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once all of the five modules are pushed to a repository, we can finally treat
    them as submodules, as shown here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有五个模块都被推送到存储库，我们最终可以将它们视为子模块，如下所示：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we were to run the `ls-al` command within the `core` repository directory
    now, we should be able to see a `.gitmodules` file in there with the following
    content:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在在`core`存储库目录中运行`ls-al`命令，我们应该能够看到一个`.gitmodules`文件，其中包含以下内容：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `.gitmodules` file, basically, contains the list of all of the submodules
    added to our core project, that is, core application. We should commit and push
    this file to the `core` repository now. Assuming that the `.gitmodules` file is
    pushed to the `core` repository, we can easily delete all directories created
    so far and initiate the project with one simple command, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`.gitmodules`文件基本上包含了添加到我们核心项目（即核心应用程序）的所有子模块的列表。我们现在应该提交并推送这个文件到`core`存储库。假设`.gitmodules`文件被推送到`core`存储库，我们可以轻松地删除到目前为止创建的所有目录，并使用一个简单的命令初始化项目，如下所示：'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `--recursive` argument to the `git clone` command automatically initializes
    and updates each submodule in the repository based on the `.gitmodules` file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`git clone`命令的`--recursive`参数会根据`.gitmodules`文件自动初始化和更新存储库中的每个子模块。'
- en: Understanding Composer
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Composer
- en: 'Composer is a dependency management tool for PHP. By default, it does not install
    anything global but rather on a per-project basis. We can use it to redistribute
    our project in order to define which libraries and packages it needs for it to
    be successfully executed. Using Composer is quite simple. All it creating is to
    create a `composer.json` file in the root directory of our project with similar
    content, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是PHP的一个依赖管理工具。默认情况下，它不会全局安装任何东西，而是基于每个项目进行安装。我们可以使用它来重新分发我们的项目，以定义它成功执行所需的库和包。使用Composer非常简单。它只需要在项目的根目录中创建一个`composer.json`文件，内容类似如下：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we were to create the preceding `composer.json` file in some empty directory
    and execute the `composer install` command within that directory, Composer will
    pickup the `composer.json` file and install the defined dependencies for our project.
    The actual `install` action implies on downloading the required code from a remote
    repository to our machine. In doing so, the `install` command creates the `composer.lock`
    file, which writes a list of the exact versions of dependencies installed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在某个空目录中创建了前面的`composer.json`文件，并在该目录中执行`composer install`命令，Composer将会读取`composer.json`文件并为我们的项目安装定义的依赖项。实际的`install`操作意味着从远程存储库下载所需的代码到我们的计算机上。在这样做的过程中，`install`命令会创建`composer.lock`文件，其中写入了已安装依赖项的确切版本列表。
- en: We can also simply execute the command `twig/twig:~1.0` that a Composer requires,
    which does the same thing but with a different approach. It does not require us
    to write a `composer.json` file, and if one exists, it will update it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以简单地执行`twig/twig:~1.0`命令，这是Composer所需的，它做的事情是一样的，但采用了不同的方法。它不需要我们编写`composer.json`文件，如果存在一个，它将对其进行更新。
- en: Learning about Composer itself is out of the scope of this book, for which the
    recommended official documentation is available at [https://getcomposer.org/doc](https://getcomposer.org/doc).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Composer本身超出了本书的范围，建议的官方文档可在[https://getcomposer.org/doc](https://getcomposer.org/doc)找到。
- en: Composer allows packaging and formal dependency management, making it a great
    choice to slice our all-in-one modular application into a series of Composer packages.
    These packages need a repository.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Composer允许打包和正式的依赖管理，使其成为将我们的一体化模块化应用程序切分为一系列Composer软件包的绝佳选择。这些软件包需要一个存储库。
- en: Understanding Packagist
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Packagist
- en: The main repository, when it comes to Composer packages, is **Packagist** ([https://packagist.org](https://packagist.org)).
    It is a web service that we can access through our browser, open an account on
    for free, and start submitting our packages to the repository. We can also use
    it to search through already existing packages.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及Composer软件包时，主要的存储库是**Packagist**（[https://packagist.org](https://packagist.org)）。这是一个我们可以通过浏览器访问的网络服务，可以免费开设帐户，并开始向存储库提交我们的软件包。我们还可以使用它来搜索已经存在的软件包。
- en: Packagist is generally used for free open source packages, though we can attach
    **privateGitHub** and **BitBucket** repositories to it in the same manner, the
    only difference being that the private repositories require SSH keys in order
    to work.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Packagist通常用于免费开源软件包，尽管我们可以以相同的方式将**privateGitHub**和**BitBucket**存储库附加到其中，唯一的区别是私有存储库需要SSH密钥才能工作。
- en: There are more convenient commercial installations of the Composer packager,
    such as **Toran Proxy** ([https://toranproxy.com](https://toranproxy.com)). This
    allows easier hosting of private packages, higher bandwidth for faster package
    installations, and commercial support.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更方便的商业安装Composer包管理器的方法，比如**Toran Proxy**（[https://toranproxy.com](https://toranproxy.com)）。这允许更容易地托管私有软件包，提供更高的带宽以加快软件包安装速度，并提供商业支持。
- en: Up to this point, we sliced our applications into six different Git repositories,
    one for core application and the remaining five for each module (`catalog`, `customer`,
    `payment`, `sales`, and `shipment`) individually. Now, let's take the final step
    and see how we can move away from the Git submodules to the Composer packages.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们将我们的应用程序切分为了六个不同的Git存储库，一个用于核心应用程序，其余五个分别用于每个模块（`catalog`、`customer`、`payment`、`sales`和`shipment`）。现在，让我们迈出最后一步，看看我们如何从Git子模块转移到Composer软件包。
- en: 'Assuming we created an account on [https://packagist.org](https://packagist.org)
    and successfully logged in, we will start by clicking on the **Submit** button,
    which should land us on a screen similar to the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在[https://packagist.org](https://packagist.org)上创建了一个帐户并成功登录，我们将首先点击**提交**按钮，这将使我们进入一个类似以下截图的屏幕：
- en: '![Understanding Packagist](graphics/B05460_12_01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![理解Packagist](graphics/B05460_12_01.jpg)'
- en: Here, we need to provide a link to our existing Git, SVN, or Mercurial (HG)
    repository. The preceding example provides a link ([https://github.com/ajzele/B05460_CatalogBundle](https://github.com/ajzele/B05460_CatalogBundle))
    to the Git repository. Before we press the **Check** button, we will need to make
    sure that our repository has a `composer.json` file defined in its root, otherwise
    an error similar to the one shown in the following screenshot will be thrown.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要提供我们现有的Git、SVN或Mercurial（HG）存储库的链接。前面的示例提供了一个到Git存储库的链接（[https://github.com/ajzele/B05460_CatalogBundle](https://github.com/ajzele/B05460_CatalogBundle)）。在按下**检查**按钮之前，我们需要确保我们的存储库在其根目录中定义了一个`composer.json`文件，否则将会抛出类似以下截图中显示的错误。
- en: '![Understanding Packagist](graphics/B05460_12_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![理解Packagist](graphics/B05460_12_03.jpg)'
- en: 'We will then create the `composer.json` file for our `CatalogBundle` with the
    following content:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将为我们的`CatalogBundle`创建`composer.json`文件，内容如下：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There are quite a lot of attributes here, all of which are fully documented
    over on the [https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md)
    page.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多属性，所有这些属性都在[https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md)页面上得到了充分的记录。
- en: With the preceding `composer.json` file in place, running the `composer install`
    command on console will pull in the code under the `vendor/foggyline/catalogbundle`
    directory, making for a full path of our bundle file under `vendor/foggyline/catalogbundle/Foggyline/CatalogBundle/FoggylineCatalogBundle.php`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有了上述的`composer.json`文件，通过在控制台上运行`composer install`命令，将会在`vendor/foggyline/catalogbundle`目录下拉取代码，使得我们的bundle文件的完整路径为`vendor/foggyline/catalogbundle/Foggyline/CatalogBundle/FoggylineCatalogBundle.php`。
- en: 'Once we add the preceding `composer.json` file to our Git repository, we can
    go back to Packagist and proceed with clicking the **Check** button, which should
    result in a screen similar to the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将上述的`composer.json`文件添加到我们的Git存储库中，我们可以回到Packagist，然后点击**Check**按钮，这将会出现一个类似下面截图的屏幕：
- en: '![Understanding Packagist](graphics/B05460_12_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![理解Packagist](graphics/B05460_12_04.jpg)'
- en: 'Finally, when we click the **Submit** button, a screen similar to the following
    screenshot should appear:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当我们点击**Submit**按钮时，将会出现一个类似下面截图的屏幕：
- en: '![Understanding Packagist](graphics/B05460_12_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![理解Packagist](graphics/B05460_12_05.jpg)'
- en: 'Our package is now added to Packagist, and running the following command on
    console will install it to into the project:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的包现在已经添加到Packagist中，通过在控制台上运行以下命令，可以将其安装到项目中：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Similarly, we can just add the proper entry to the existing project''s `composer.json`
    file, as shown in the following code block:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以像下面的代码块中所示，向现有项目的`composer.json`文件中添加适当的条目：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that we know how to slice out the application across several Git repositories
    and Composer packages, we need to do the same for the remaining modules within
    the `src/Foggyline/` directory, as only those modules will be registered as the
    Composer packages.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何将应用程序分割成几个Git存储库和Composer包，我们需要对`src/Foggyline/`目录中剩余的模块做同样的操作，因为只有这些模块才会被注册为Composer包。
- en: During the `sales` module development, we noticed that it depends on several
    other modules, such as `catalog` and `customer`. We can use the require attribute
    of the `composer.json` file to outline this dependency.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sales`模块开发过程中，我们注意到它依赖于其他几个模块，比如`catalog`和`customer`。我们可以使用`composer.json`文件的require属性来概述这种依赖关系。
- en: 'Once all of the Git repositories for the `src/Foggyline/` modules are updated
    with the proper `composer.json` definitions, we can go back to our core application
    repository and update the `require` attribute in its `composer.json` file, as
    follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`src/Foggyline/`模块的所有Git存储库都更新了适当的`composer.json`定义，我们可以回到我们的核心应用程序存储库，并按照以下方式更新其`composer.json`文件中的`require`属性：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The difference between using submodules and packages might not be that obvious
    at this point. However, packages, unlike submodules, allow versioning. Though
    all of our packages are pulled in from `dev-master`, we could have easily targeted
    specific versions of packages, if any.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，使用子模块和包之间的区别可能并不那么明显。然而，与子模块不同，包允许版本控制。尽管我们的所有包都是从`dev-master`中拉取的，但如果有的话，我们也可以轻松地针对特定版本的包进行定位。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we took a quick look at Git and Composer and how we
    can integrate and distribute our modules via GitHub and Packagist as their respectful
    services. Publishing packages under Packagist has been shown to be a pretty straightforward
    and easy process. All it took was a public link to the version control system
    repository and a `composer.json` file definition within the root of our project.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们快速了解了Git和Composer以及如何通过GitHub和Packagist集成和分发我们的模块。在Packagist下发布包已经被证明是一个相当简单和容易的过程。所需的只是一个指向版本控制系统存储库的公共链接和项目根目录下的`composer.json`文件定义。
- en: Writing our own applications from ground up does not necessarily mean we need
    to use the Git submodules or the Composer packages, as presented in this chapter.
    The Symfony application, on its own, is structured modularly via bundles. The
    version control system, when used on a Symfony project, is supposed to save only
    our code, which means all of the Symfony libraries and other dependencies are
    to be pulled in via Composer when the project is being set. The examples shown
    in this chapter merely show what can be accomplished if we are after writing modular
    components that are to be shared with others. As an example, if we were really
    working on a robust `catalog` module, others interested in coding their own web
    shop might find it interesting to require and use it in their project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始编写我们自己的应用程序并不一定意味着我们需要使用Git子模块或Composer包，就像本章所介绍的那样。Symfony应用程序本身通过bundle结构化地模块化。当在Symfony项目上使用版本控制系统时，应该只保存我们的代码，这意味着所有的Symfony库和其他依赖项都应该在项目设置时通过Composer拉取。本章中展示的例子仅仅展示了如果我们想要编写可与他人共享的模块化组件，我们可以实现什么。例如，如果我们真的在开发一个健壮的`catalog`模块，其他有兴趣编写自己的网店的人可能会发现有兴趣要求并在他们的项目中使用它。
- en: This book started by looking into the current state of the PHP ecosystem. We
    then touched upon design patterns and principles, as a foundation of professional
    programming. Then we moved onto writing a brief, more visual, specification for
    our web shop application. Finally, we split our application into core and several
    other smaller modules, which we then coded following the specification. Along
    the way, we familiarized ourselves with some of the most commonly used Symfony
    features. The overall application we wrote is far from being robust. It is a web
    shop in its simplest form, which leaves much to be desired on a feature side.
    However, the concepts applied showcase how easy and quick it can be to write modular
    applications in PHP.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书从研究当前的PHP生态系统开始。然后我们涉及设计模式和原则，作为专业编程的基础。然后我们开始为我们的网店应用编写一个简短、更加直观的规范。最后，我们将我们的应用程序分成核心部分和几个其他较小的模块，然后根据规范进行编码。在这个过程中，我们熟悉了一些最常用的Symfony功能。我们编写的整体应用程序远非健壮。它只是一个最简单形式的网店，在功能方面还有很多不足之处。然而，应用的概念展示了在PHP中编写模块化应用程序可以是多么简单和快速。
