["```php\n<?php namespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel {\n\n  /**\n   * The application's global HTTP middleware stack.\n   *\n   * @var array\n   */\n  protected $middleware = [\n  'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',\n    'Illuminate\\Cookie\\Middleware\\EncryptCookies',\n    'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse',\n    'Illuminate\\Session\\Middleware\\StartSession',\n    'Illuminate\\View\\Middleware\\ShareErrorsFromSession',\n    'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken',\n  ];\n\n  /**\n   * The application's route middleware.\n   *\n   * @var array\n   */\n  protected $routeMiddleware = [\n    'auth' => 'App\\Http\\Middleware\\Authenticate',\n    'auth.basic' => 'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n    'guest' => 'App\\Http\\Middleware\\RedirectIfAuthenticated',\n  ];\n\n}\n```", "```php\n<?php namespace Illuminate\\Contracts\\Routing;\n\nuse Closure;\n\ninterface Middleware {\n\n  /**\n   * Handle an incoming request.\n   *\n   * @param  \\Illuminate\\Http\\Request  $request\n   * @param  \\Closure  $next\n   * @return mixed\n   */\n  public function handle($request, Closure $next);\n\n}\n```", "```php\n<?php namespace Illuminate\\Foundation\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Contracts\\Routing\\Middleware;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Symfony\\Component\\HttpKernel\\Exception\\HttpException;\n\nclass CheckForMaintenanceMode implements Middleware {\n\n  /**\n   * The application implementation.\n   *\n   * @var \\Illuminate\\Contracts\\Foundation\\Application\n   */\n  protected $app;\n\n  /**\n   * Create a new filter instance.\n   *\n   * @param  \\Illuminate\\Contracts\\Foundation\\Application  $app\n   * @return void\n   */\n  public function __construct(Application $app)\n  {\n    $this->app = $app;\n  }\n\n  /**\n   * Handle an incoming request.\n   *\n   * @param  \\Illuminate\\Http\\Request  $request\n   * @param  \\Closure  $next\n   * @return mixed\n   */\n  public function handle($request, Closure $next)\n  {\n    if ($this->app->isDownForMaintenance())\n    {\n      throw new HttpException(503);\n    }\n    return $next($request);\n  }\n}\n```", "```php\n<?php namespace MyCompany\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Contracts\\Auth\\Guard;\n\nclass Authenticate {\n  /**\n   * The Guard implementation.\n   *\n   * @var Guard\n   */\n  protected $auth;\n\n  /**\n   * Create a new filter instance.\n   *\n   * @param  Guard  $auth\n   * @return void\n   */\n  public function __construct(Guard $auth)\n  {\n    $this->auth = $auth;\n  }\n\n  /**\n   * Handle an incoming request.\n   *\n   * @param  \\Illuminate\\Http\\Request  $request\n   * @param  \\Closure  $next\n   * @return mixed\n   */\n  public function handle($request, Closure $next)\n  {\n    if ($this->auth->guest())\n    {\n      if ($request->ajax())\n      {\n        return response('Unauthorized.', 401);\n      }\n      else\n      {\n        return redirect()->guest('auth/login');\n      }\n    }\n    return $next($request);\n  }\n}\n```", "```php\n**$ php artisan make:middleware LogMiddleware**\n\n```", "```php\nprotected $middleware = [\n  'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode',\n  'Illuminate\\Cookie\\Middleware\\EncryptCookies',\n  'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse',\n  'Illuminate\\Session\\Middleware\\StartSession',\n  'Illuminate\\View\\Middleware\\ShareErrorsFromSession',\n  'MyCompany\\Http\\Middleware\\LogMiddleware'\n];\n```", "```php\n<?php namespace MyCompany\\Http\\Middleware;\n\nuse Closure;\n\nclass LogMiddleware {\n\n  /**\n   * Handle an incoming request.\n   *\n   * @param  \\Illuminate\\Http\\Request  $request\n   * @param  \\Closure  $next\n   * @return mixed\n   */\n  public function handle($request, Closure $next)\n  {\n    return $next($request);\n  }\n}\n```", "```php\npublic function handle($request, Closure $next)\n{\n  $response = $next($request);\n  Log::create(['user_id'=>\\Auth::user()->id,'created_at'=>date(\"Y- \n  m-d H:i:s\")]);\n  return $response;\n}\n\n```", "```php\n**$php artisan make:model Log**\n\n```", "```php\n<?php namespace MyCompany;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Log extends Model {\n    protected $table = 'log';\n    public $timestamps = false;\n    protected $fillable = ['user_id','created_at'];\n}\n```", "```php\npublic function loggable()\n{\n     return $this->morphTo();\n}\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateLogsTable extends Migration {\n\n  /**\n   * Run the migrations.\n   *\n   * @return void\n   */\n  public function up()\n  {\n    Schema::create('log', function(Blueprint $table)\n    {\n      $table->smallInteger('user_id')->unsigned();\n      $table->dateTime('created_at');\n    });\n  }\n\n  /**\n   * Reverse the migrations.\n   *\n   * @return void\n   */\n  public function down()\n  {\n    Schema::drop('log');\n  }\n}\n```", "```php\nuse Illuminate\\Contracts\\Routing\\TerminableMiddleware;\n\nclass StartSession implements TerminableMiddleware {\n\n    public function handle($request, $next)\n    {\n        return $next($request);\n    }\n\n    public function terminate($request, $response)\n    {\n        // Store the session data...\n    }\n}\n```", "```php\n<?php namespace MyCompany\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Contracts\\Routing\\TerminableMiddleware;\nuse MyCompany\\Log;\n\nclass LogMiddleware implements TerminableMiddleware {\n  /**\n   * Handle an incoming request.\n   *\n   * @param  \\Illuminate\\Http\\Request  $request\n   * @param  \\Closure  $next\n   * @return mixed\n   */\n  public function handle($request, Closure $next)\n  {\n    return  $next($request);\n\n  }\n  /**\n   * Terminate the request.\n   *\n   * @param  \\Illuminate\\Http\\Request  $request\n   * @param  \\Illuminate\\Http\\Response $response\n   */\n  public function terminate($request, $response)\n  {\n    Log::create(['user_id'=>\\Auth::user()- >id,'created_at'=>date(\"Y-m-d H:i:s\")]);\n\n  }\n}\n```", "```php\nRoute::get('search-accommodation',\n  ['middleware' => 'auth','AccommodationsController@search']);\n```", "```php\nRoute::group(['middleware' => 'auth'], function()\n{\n  Route::resource('accommodations', 'AccommodationsController');\n  Route::resource('accommodations.amenities', 'AccommodationsAmenitiesController');\n  Route::resource('accommodations.rooms', 'AccommodationsRoomsController');\n  Route::resource('accommodations.locations', 'AccommodationsLocationsController');\n  Route::resource('amenities', 'AmenitiesController');\n  Route::resource('rooms', 'RoomsController');\n  Route::resource('locations', 'LocationsController');\n})\n```", "```php\n$ php artisan make:middleware WhitelistMiddleware\n```", "```php\n<?php namespace MyCompany\\Http\\Middleware;\n\nuse Closure;\n\nclass WhitelistMiddleware {\n    private $whitelist = ['192.2.3.211'];\n  /**\n   * Handle an incoming request.\n   *\n   * @param  \\Illuminate\\Http\\Request  $request\n   * @param  \\Closure  $next\n   * @return mixed\n   */\n  public function handle($request, Closure $next)\n  {\n    if (in_array($request->getClientIp(),$this->whitelist)) {\n      return $next($request);\n    } else {\n      return response('Unauthorized.', 401);\n    }\n\n  }\n}\n```", "```php\nprotected $routeMiddleware = [\n  'auth' => 'MyCompany\\Http\\Middleware\\Authenticate',\n  'auth.basic' => 'Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth',\n  'guest' => 'MyCompany\\Http\\Middleware\\RedirectIfAuthenticated',\n  'log' => 'MyCompany\\Http\\Middleware\\LogMiddleware',\n  'whitelist' => 'MyCompany\\Http\\Middleware\\WhitelistMiddleware'\n];\n```", "```php\nRoute::group(['middleware' => ['auth','whitelist']], function()\n{\n  Route::resource('accommodations', 'AccommodationsController');\n  Route::resource('accommodations.amenities',\n            'AccommodationsAmenitiesController');\n  Route::resource('accommodations.rooms', 'AccommodationsRoomsController');\n  Route::resource('accommodations.locations', 'AccommodationsLocationsController');\n  Route::resource('amenities', 'AmenitiesController');\n  Route::resource('rooms', 'RoomsController');\n  Route::resource('locations', 'LocationsController');\n});\n```", "```php\nRoute::group(['middleware' => 'auth', function()\n{\n  Route::resource('accommodations', 'AccommodationsController');\n  Route::resource('accommodations.amenities',\n            'AccommodationsAmenitiesController');\n  Route::resource('accommodations.rooms', 'AccommodationsRoomsController');\n  Route::resource('accommodations.locations', 'AccommodationsLocationsController');\n  Route::resource('amenities', 'AmenitiesController');\n  Route::group(['middleware' => 'whitelist'], function()\n  {\n    Route::resource('rooms', 'RoomsController');\n  });\n  Route::resource('locations', 'LocationsController');\n});\n```", "```php\n<?php namespace MyCompany\\Http\\Controllers;\n\nuse MyCompany\\Http\\Requests;\nuse MyCompany\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse MyCompany\\Accommodation\\Room;\n\nclass RoomsController extends Controller {\n\n  public function __construct()\n  {\n    $this->middleware('auth',['except' => ['index','show']);\n  }\n```", "```php\n  public function __construct()\n  {\n    $this->middleware('log',['only' => ['index','show']);\n  }\n```", "```php\npublic function __construct()\n{\n  $this->middleware('whitelist',['except' => ['index','show']);\n  $this->middleware('auth',['except' => ['index','show']);\n  $this->middleware('log',['only' => ['index','show']);\n}\n```", "```php\npublic function handle($request, Closure $next)\n  {\n    $response = $next($request);\n    foreach ($this->cookies->getQueuedCookies() as $cookie)\n    {\n      $response->headers->setCookie($cookie);\n    }\n    return $response;\n  }\n```"]