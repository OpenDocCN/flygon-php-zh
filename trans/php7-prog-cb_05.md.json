["```php\n    $params = [\n      'host' => 'localhost',\n      'user' => 'test',\n      'pwd'  => 'password',\n      'db'   => 'php7cookbook'\n    ];\n\n    try {\n      $dsn  = sprintf(**'mysql:host=%s;dbname=%s',**\n     **$params['host'], $params['db']);**\n      $pdo  = new PDO($dsn, $params['user'], $params['pwd']);\n    } catch (PDOException $e) {\n      echo $e->getMessage();\n    } catch (Throwable $e) {\n      echo $e->getMessage();\n    }\n    ```", "```php\n    $params = [\n      'db'   => __DIR__ . '/../data/db/php7cookbook.db.sqlite'\n    ];\n    $dsn  = sprintf('sqlite:' . $params['db']);\n    ```", "```php\n    $params = [\n      'host' => 'localhost',\n      'user' => 'test',\n      'pwd'  => 'password',\n      'db'   => 'php7cookbook'\n    ];\n    $dsn  = sprintf(**'pgsql:host=%s;dbname=%s;user=%s;password=%s',** \n                   $params['host'], \n                   $params['db'],\n                   $params['user'],\n                   $params['pwd']);\n    ```", "```php\n    $params = [\n      'host' => 'localhost',\n      'user' => 'test',\n      'pwd'  => 'password',\n      'db'   => 'php7cookbook',\n      'sock' => '/var/run/mysqld/mysqld.sock'\n    ];\n\n    try {\n      $dsn  = sprintf('mysql:host=%s;dbname=%s;**unix_socket=%s',** \n                      $params['host'], $params['db'], $params['sock']);\n      $opts = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];\n      $pdo  = new PDO($dsn, $params['user'], $params['pwd'], $opts);\n    } catch (PDOException $e) {\n      echo $e->getMessage();\n    } catch (Throwable $e) {\n      echo $e->getMessage();\n    }\n    ```", "```php\n    $stmt = $pdo->query(\n    'SELECT * FROM customer ORDER BY id LIMIT 20');\n    ```", "```php\n    while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n      printf('%4d | %20s | %5s' . PHP_EOL, $row['id'], \n      $row['name'], $row['level']);\n    }\n    ```", "```php\n    while ($row = $stmt->fetch(PDO::FETCH_OBJ)) {\n      printf('%4d | %20s | %5s' . PHP_EOL, \n     **$row->id, $row->name, $row->level);**\n    }\n    ```", "```php\n    class Customer\n    {\n      public $id;\n      public $name;\n      public $level;\n    }\n\n    $stmt = $pdo->query($sql, PDO::FETCH_CLASS, 'Customer');\n    ```", "```php\n    while ($row = $stmt->**fetchObject('Customer')**) {\n      printf('%4d | %20s | %5s' . PHP_EOL, \n      $row->id, $row->name, $row->level);\n    }\n    ```", "```php\n    $cust = new Customer();\n    while ($stmt->fetch(**PDO::FETCH_INTO**)) {\n      printf('%4d | %20s | %5s' . PHP_EOL, \n     **$cust**->id, **$cust**->name, **$cust**->level);\n    }\n    ```", "```php\n    $params = [\n      'host' => 'localhost',\n      'user' => 'test',\n      'pwd'  => 'password',\n      'db'   => 'php7cookbook'\n    ];\n    $dsn  = sprintf('mysql:host=%s;dbname=%s', $params['host'], $params['db']);\n    $sql  = 'THIS SQL STATEMENT WILL NOT WORK';\n    ```", "```php\n    $pdo1  = new PDO($dsn, $params['user'], $params['pwd']);\n    $stmt = $pdo1->query($sql);\n    $row = ($stmt) ? $stmt->fetch(PDO::FETCH_ASSOC) : 'No Good';\n    ```", "```php\n    $pdo2 = new PDO(\n      $dsn, \n      $params['user'], \n      $params['pwd'], \n      [PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING]);\n    ```", "```php\n    $dsn  = sprintf('pgsql:charset=UTF8;host=%s;dbname=%s', $params['host'], $params['db']);\n    $opts = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]; \n    $pdo  = new PDO($dsn, $params['user'], $params['pwd'], $opts);\n    $sql  = 'SELECT * FROM customer '\n        . 'WHERE balance > :min AND balance < :max '\n        . 'ORDER BY id LIMIT 20';\n    $stmt = $pdo->prepare($sql, **[PDO::ATTR_CURSOR  => PDO::CURSOR_SCROLL]**);\n    ```", "```php\n    $stmt->execute(['min' => $min, 'max' => $max]);\n    $row = $stmt->fetch(PDO::FETCH_ASSOC, **PDO::FETCH_ORI_LAST**);\n    do {\n      printf('%4d | %20s | %5s | %8.2f' . PHP_EOL, \n           $row['id'], \n           $row['name'], \n           $row['level'], \n           $row['balance']);\n    } while ($row = $stmt->fetch(PDO::FETCH_ASSOC, **PDO::FETCH_ORI_PRIOR**));\n    ```", "```php\n    $dsn  = sprintf('mysql:charset=UTF8;host=%s;dbname=%s', $params['host'], $params['db']);\n    $opts = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]; \n    $pdo  = new PDO($dsn, $params['user'], $params['pwd'], $opts);\n    $sql  = 'SELECT * FROM customer '\n        . 'WHERE balance > :min AND balance < :max '\n        . 'ORDER BY id **DESC** \n           . 'LIMIT 20';\n    $stmt = $pdo->prepare($sql);\n    while ($row = $stmt->fetch(PDO::FETCH_ASSOC));\n    printf('%4d | %20s | %5s | %8.2f' . PHP_EOL, \n           $row['id'], \n           $row['name'], \n           $row['level'], \n           $row['balance']);\n    } \n    ```", "```php\n    try {\n        $pdo->beginTransaction();\n        $sql  = \"INSERT INTO customer ('\" \n        . implode(\"','\", $fields) . \"') VALUES (**?,?,?,?,?,?**)\";\n        $stmt = $pdo->prepare($sql);\n        foreach ($data as $row) $stmt->execute($row);\n        $pdo->commit();\n    } catch (PDOException $e) {\n        error_log($e->getMessage());\n        $pdo->rollBack();\n    }\n    ```", "```php\n    namespace Application\\Database;\n    use Exception;\n    use PDO;\n    class Connection\n    {\n        const ERROR_UNABLE = 'ERROR: no database connection';\n        public $pdo;\n        public function __construct(array $config)\n        {\n            if (!isset($config['driver'])) {\n                $message = __METHOD__ . ' : ' \n                . self::ERROR_UNABLE . PHP_EOL;\n                throw new Exception($message);\n            }\n            $dsn = $this->makeDsn($config);        \n            try {\n                $this->pdo = new PDO(\n                    $dsn, \n                    $config['user'], \n                    $config['password'], \n                    [PDO::ATTR_ERRMODE => $config['errmode']]);\n                return TRUE;\n            } catch (PDOException $e) {\n                error_log($e->getMessage());\n                return FALSE;\n            }\n        }\n\n        public static function factory(\n          $driver, $dbname, $host, $user, \n          $pwd, array $options = array())\n        {\n            $dsn = $this->makeDsn($config);\n\n            try {\n                return new PDO($dsn, $user, $pwd, $options);\n            } catch (PDOException $e) {\n                error_log($e->getMessage);\n            }\n        }\n    ```", "```php\n      public function makeDsn($config)\n      {\n        $dsn = $config['driver'] . ':';\n        unset($config['driver']);\n        foreach ($config as $key => $value) {\n          $dsn .= $key . '=' . $value . ';';\n        }\n        return substr($dsn, 0, -1);\n      }\n    }\n    ```", "```php\n<?php\n$params = [\n  'host' => 'localhost',\n  'user' => 'test',\n  'pwd'  => 'password',\n  'db'   => 'php7cookbook'\n];\ntry {\n  $dsn  = sprintf('mysql:charset=UTF8;host=%s;dbname=%s',\n    $params['host'], $params['db']);\n  $pdo  = new PDO($dsn, $params['user'], $params['pwd']);\n  $stmt = $pdo->query(\n    'SELECT * FROM customer ORDER BY id LIMIT 20');\n  printf('%4s | %20s | %5s | %7s' . PHP_EOL, \n    'ID', 'NAME', 'LEVEL', 'BALANCE');\n  printf('%4s | %20s | %5s | %7s' . PHP_EOL, \n    '----', str_repeat('-', 20), '-----', '-------');\n  while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n    printf('%4d | %20s | %5s | %7.2f' . PHP_EOL, \n    $row['id'], $row['name'], $row['level'], $row['balance']);\n  }\n} catch (PDOException $e) {\n  error_log($e->getMessage());\n} catch (Throwable $e) {\n  error_log($e->getMessage());\n}\n```", "```php\n$opts = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];\n$pdo  = new PDO($dsn, $params['user'], $params['pwd'], $opts);\n$stmt = $pdo->query('THIS SQL STATEMENT WILL NOT WORK');\n```", "```php\ntry {\n  $dsn  = sprintf('mysql:host=%s;dbname=%s', \n                  $params['host'], $params['db']);\n  $pdo  = new PDO($dsn, \n                  $params['user'], \n                  $params['pwd'], \n                  [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]);\n  $sql  = 'SELECT * FROM customer '\n      . 'WHERE balance < **:val** AND level = **:level** '\n      . 'ORDER BY id LIMIT 20'; echo $sql . PHP_EOL;\n  $stmt = $pdo->prepare($sql);\n  $stmt->execute(['**val**' => 100, '**level**' => 'BEG']);\n  while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n    printf('%4d | %20s | %5s | %5.2f' . PHP_EOL, \n      \t$row['id'], $row['name'], $row['level'], $row['balance']);\n  }\n} catch (PDOException $e) {\n  echo $e->getMessage();\n} catch (Throwable $e) {\n  echo $e->getMessage();\n}\n```", "```php\n$fields = ['name', 'balance', 'email', \n           'password', 'status', 'level'];\n$data = [\n  ['Saleen',0,'saleen@test.com', 'password',0,'BEG'],\n  ['Lada',55.55,'lada@test.com',   'password',0,'INT'],\n  ['Tonsoi',999.99,'tongsoi@test.com','password',1,'ADV'],\n  ['SQL Injection',0.00,'bad','bad',1,\n   'BEG\\';DELETE FROM customer;--'],\n];\n\ntry {\n  $dsn  = sprintf('mysql:host=%s;dbname=%s', \n    $params['host'], $params['db']);\n  $pdo  = new PDO($dsn, \n                  $params['user'], \n                  $params['pwd'], \n                  [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]);\n  $sql  = \"INSERT INTO customer ('\" \n   . implode(\"','\", $fields) \n   . \"') VALUES (**?,?,?,?,?,?**)\";\n  $stmt = $pdo->prepare($sql);\n  foreach ($data as $row) $stmt->execute($row);\n} catch (PDOException $e) {\n  echo $e->getMessage();\n} catch (Throwable $e) {\n  echo $e->getMessage();\n}\n```", "```php\n$sql  = 'SELECT * FROM customer '\n     . 'WHERE balance < :val AND level = :level '\n     . 'ORDER BY id LIMIT 20';\n$stmt = $pdo->prepare($sql);\n$stmt->execute(['val' => 100, 'level' => 'BEG']);\n```", "```php\n$min   = 0;\n$max   = 0;\n$level = '';\n\ntry {\n  $dsn  = sprintf('mysql:host=%s;dbname=%s', $params['host'], $params['db']);\n  $opts = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];\n  $pdo  = new PDO($dsn, $params['user'], $params['pwd'], $opts);\n  $sql  = 'SELECT * FROM customer '\n      . 'WHERE balance > :min '\n      . 'AND balance < :max AND level = :level '\n      . 'ORDER BY id LIMIT 20';\n  $stmt = $pdo->prepare($sql);\n  **$stmt->bindParam('min',   $min);**\n **$stmt->bindParam('max',   $max);**\n **$stmt->bindParam('level', $level);**\n\n  $min   =  5000;\n  $max   = 10000;\n  $level = 'ADV';\n  $stmt->execute();\n  showResults($stmt, $min, $max, $level);\n\n  $min   = 0;\n  $max   = 100;\n  $level = 'BEG';\n  $stmt->execute();\n  showResults($stmt, $min, $max, $level);\n\n} catch (PDOException $e) {\n  echo $e->getMessage();\n} catch (Throwable $e) {\n  echo $e->getMessage();\n}\n```", "```php\n    namespace Application\\Database;\n    class Finder\n    {\n      public static $sql      = '';\n      public static $instance = NULL;\n      public static $prefix   = '';\n      public static $where    = array();\n      public static $control  = ['', ''];\n\n        // $a == name of table\n        // $cols = column names\n        public static function select($a, $cols = NULL)\n        {\n          self::$instance  = new Finder();\n          if ($cols) {\n               self::$prefix = 'SELECT ' . $cols . ' FROM ' . $a;\n          } else {\n            self::$prefix = 'SELECT * FROM ' . $a;\n          }\n          return self::$instance;\n        }\n\n        public static function where($a = NULL)\n        {\n            self::$where[0] = ' WHERE ' . $a;\n            return self::$instance;\n        }\n\n        public static function like($a, $b)\n        {\n            self::$where[] = trim($a . ' LIKE ' . $b);\n            return self::$instance;\n        }\n\n        public static function and($a = NULL)\n        {\n            self::$where[] = trim('AND ' . $a);\n            return self::$instance;\n        }\n\n        public static function or($a = NULL)\n        {\n            self::$where[] = trim('OR ' . $a);\n            return self::$instance;\n        }\n\n        public static function in(array $a)\n        {\n            self::$where[] = 'IN ( ' . implode(',', $a) . ' )';\n            return self::$instance;\n        }\n\n        public static function not($a = NULL)\n        {\n            self::$where[] = trim('NOT ' . $a);\n            return self::$instance;\n        }\n\n        public static function limit($limit)\n        {\n            self::$control[0] = 'LIMIT ' . $limit;\n            return self::$instance;\n        }\n\n        public static function offset($offset)\n        {\n            self::$control[1] = 'OFFSET ' . $offset;\n            return self::$instance;\n        }\n\n      public static function getSql()\n      {\n        self::$sql = self::$prefix\n           . implode(' ', self::$where)\n                   . ' '\n                   . self::$control[0]\n                   . ' '\n                   . self::$control[1];\n        preg_replace('/  /', ' ', self::$sql);\n        return trim(self::$sql);\n      }\n    }\n    ```", "```php\n    $sql = Finder::select('project')->where('priority > 9') ... etc.\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Database\\Finder;\n\n$sql = Finder::select('project')\n  ->where()\n  ->like('name', '%secret%')\n  ->and('priority > 9')\n  ->or('code')->in(['4', '5', '7'])\n  ->and()->not('created_at')\n  ->limit(10)\n  ->offset(20);\n\necho Finder::getSql();\n```", "```php\n    namespace Application\\Database;\n\n    class Paginate\n    {\n\n      const DEFAULT_LIMIT  = 20;\n      const DEFAULT_OFFSET = 0;\n\n      protected $sql;\n      protected $page;\n      protected $linesPerPage;\n\n    }\n    ```", "```php\n    public function __construct($sql, $page, $linesPerPage)\n    {\n      $offset = $page * $linesPerPage;\n      switch (TRUE) {\n        case (stripos($sql, 'LIMIT') && strpos($sql, 'OFFSET')) :\n          // no action needed\n          break;\n        case (stripos($sql, 'LIMIT')) :\n          $sql .= ' LIMIT ' . self::DEFAULT_LIMIT;\n          break;\n        case (stripos($sql, 'OFFSET')) :\n          $sql .= ' OFFSET ' . self::DEFAULT_OFFSET;\n          break;\n        default :\n          $sql .= ' LIMIT ' . self::DEFAULT_LIMIT;\n          $sql .= ' OFFSET ' . self::DEFAULT_OFFSET;\n          break;\n      }\n      $this->sql = preg_replace('/LIMIT \\d+.*OFFSET \\d+/Ui', \n         'LIMIT ' . $linesPerPage . ' OFFSET ' . $offset, \n         $sql);\n    }\n    ```", "```php\n    use PDOException;\n    public function paginate(\n      Connection $connection, \n      $fetchMode, \n      $params = array())\n      {\n      try {\n        $stmt = $connection->pdo->prepare($this->sql);\n        if (!$stmt) return FALSE;\n        if ($params) {\n          $stmt->execute($params);\n        } else {\n          $stmt->execute();\n        }\n        while ($result = $stmt->fetch($fetchMode)) yield $result;\n      } catch (PDOException $e) {\n        error_log($e->getMessage());\n        return FALSE;\n      } catch (Throwable $e) {\n        error_log($e->getMessage());\n        return FALSE;\n      }\n    }\n    ```", "```php\n      if ($sql instanceof Finder) {\n        $sql->limit($linesPerPage);\n        $sql->offset($offset);\n        $this->sql = $sql::getSql();\n      } elseif (is_string($sql)) {\n        switch (TRUE) {\n          case (stripos($sql, 'LIMIT') \n          && strpos($sql, 'OFFSET')) :\n              // remaining code as shown in bullet #3 above\n          }\n       }\n    ```", "```php\n    public function getSql()\n    {\n      return $this->sql;\n    }\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\ndefine('LINES_PER_PAGE', 10);\ndefine('DEFAULT_BALANCE', 1000);\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n```", "```php\nuse Application\\Database\\ { Finder, Connection, Paginate};\n$conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n$sql = Finder::select('customer')->where('balance < :bal');\n```", "```php\n$page = (int) ($_GET['page'] ?? 0);\n$bal  = (float) ($_GET['balance'] ?? DEFAULT_BALANCE);\n$paginate = new Paginate($sql::getSql(), $page, LINES_PER_PAGE);\n?>\n```", "```php\n<h3><?= $paginate->getSql(); ?></h3>\t\n<hr>\n<pre>\n<?php\nprintf('%4s | %20s | %5s | %7s' . PHP_EOL, \n  'ID', 'NAME', 'LEVEL', 'BALANCE');\nprintf('%4s | %20s | %5s | %7s' . PHP_EOL, \n  '----', str_repeat('-', 20), '-----', '-------');\nforeach ($paginate->paginate($conn, PDO::FETCH_ASSOC, \n  ['bal' => $bal]) as $row) {\n  printf('%4d | %20s | %5s | %7.2f' . PHP_EOL, \n      $row['id'],$row['name'],$row['level'],$row['balance']);\n}\nprintf('%4s | %20s | %5s | %7s' . PHP_EOL, \n  '----', str_repeat('-', 20), '-----', '-------');\n?>\n<a href=\"?page=<?= $page - 1; ?>&balance=<?= $bal ?>\">\n<< Prev </a>&nbsp;&nbsp;\n<a href=\"?page=<?= $page + 1; ?>&balance=<?= $bal ?>\">\nNext >></a>\n</pre>\n```", "```php\n    namespace Application\\Entity;\n\n    class Base\n    {\n\n      protected $id = 0;\n      protected $mapping = ['id' => 'id'];\n\n      public function getId() : int\n      {\n        return $this->id;\n      }\n\n      public function setId($id)\n      {\n        $this->id = (int) $id;\n      }\n    }\n    ```", "```php\n    public static function arrayToEntity($data, Base $instance)\n    {\n      if ($data && is_array($data)) {\n        foreach ($instance->mapping as $dbColumn => $propertyName) {\n          $method = 'set' . ucfirst($propertyName);\n          $instance->$method($data[$dbColumn]);\n        }\n        return $instance;\n      }\n      return FALSE;\n    }\n    ```", "```php\n    public function entityToArray()\n    {\n      $data = array();\n      foreach ($this->mapping as $dbColumn => $propertyName) {\n        $method = 'get' . ucfirst($propertyName);\n        $data[$dbColumn] = $this->$method() ?? NULL;\n      }\n      return $data;\n    }\n    ```", "```php\n    CREATE TABLE 'customer' (\n      'id' int(11) NOT NULL AUTO_INCREMENT,\n      'name' varchar(256) CHARACTER SET latin1 COLLATE latin1_general_cs NOT NULL,\n      'balance' decimal(10,2) NOT NULL,\n      'email' varchar(250) NOT NULL,\n      'password' char(16) NOT NULL,\n      'status' int(10) unsigned NOT NULL DEFAULT '0',\n      'security_question' varchar(250) DEFAULT NULL,\n      'confirm_code' varchar(32) DEFAULT NULL,\n      'profile_id' int(11) DEFAULT NULL,\n      'level' char(3) NOT NULL,\n      PRIMARY KEY ('id'),\n      UNIQUE KEY 'UNIQ_81398E09E7927C74' ('email')\n    );\n    ```", "```php\n    namespace Application\\Entity;\n\n    class Customer extends Base\n    {\n      const TABLE_NAME = 'customer';\n      protected $name = '';\n      protected $balance = 0.0;\n      protected $email = '';\n      protected $password = '';\n      protected $status = '';\n      protected $securityQuestion = '';\n      protected $confirmCode = '';\n      protected $profileId = 0;\n      protected $level = '';\n    }\n    ```", "```php\n      public function getName() : string\n      {\n        return $this->name;\n      }\n      public function setName($name)\n      {\n        $this->name = $name;\n      }\n      public function getBalance() : float\n      {\n        return $this->balance;\n      }\n      public function setBalance($balance)\n      {\n        $this->balance = (float) $balance;\n      }\n    }\n    ```", "```php\n    protected $mapping = [\n      'id'                => 'id',\n      'name'              => 'name',\n      'balance'           => 'balance',\n      'email'             => 'email',\n      'password'          => 'password',\n      'status'            => 'status',\n      'security_question' => 'securityQuestion',\n      'confirm_code'      => 'confirmCode',\n      'profile_id'        => 'profileId',\n      'level'             => 'level'\n    ];\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Database\\Connection;\nuse Application\\Entity\\Customer;\n```", "```php\n$conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n$id = rand(1,79);\n$stmt = $conn->pdo->prepare(\n  'SELECT * FROM customer WHERE id = :id');\n$stmt->execute(['id' => $id]);\n$result = $stmt->fetch(PDO::FETCH_ASSOC);\n```", "```php\n$cust = Customer::arrayToEntity($result, new Customer());\nvar_dump($cust);\n```", "```php\n    namespace Application\\Database;\n\n    use Application\\Entity\\Customer;\n\n    class CustomerService\n    {\n\n        protected $connection;\n\n        public function __construct(Connection $connection)\n        {\n          $this->connection = $connection;\n        }\n\n    }\n    ```", "```php\n    public function fetchById($id)\n    {\n      $stmt = $this->connection->pdo\n                   ->prepare(Finder::select('customer')\n                   ->where('id = :id')::getSql());\n      $stmt->execute(['id' => (int) $id]);\n      return $stmt->fetchObject('Application\\Entity\\Customer');\n    }\n    ```", "```php\n    public function fetchById($id)\n    {\n      $stmt = $this->connection->pdo\n                   ->prepare(Finder::select('customer')\n                   ->where('id = :id')::getSql());\n      $stmt->execute(['id' => (int) $id]);\n      $stmt->setFetchMode(PDO::FETCH_INTO, new Customer());\n      return $stmt->fetch();\n    }\n    ```", "```php\n    public function fetchById($id)\n    {\n      $stmt = $this->connection->pdo\n                   ->prepare(Finder::select('customer')\n                   ->where('id = :id')::getSql());\n      $stmt->execute(['id' => (int) $id]);\n      return Customer::arrayToEntity(\n        $stmt->fetch(PDO::FETCH_ASSOC));\n    }\n    ```", "```php\n    public function fetchByLevel($level)\n    {\n      $stmt = $this->connection->pdo->prepare(\n                Finder::select('customer')\n                ->where('level = :level')::getSql());\n      $stmt->execute(['level' => $level]);\n      while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        yield Customer::arrayToEntity($row, new Customer());\n      }\n    }\n    ```", "```php\n    public function fetchByEmail($email)\n    {\n      $stmt = $this->connection->pdo->prepare(\n        Finder::select('customer')\n        ->where('email = :email')::getSql());\n      $stmt->execute(['email' => $email]);\n      return Customer::arrayToEntity(\n        $stmt->fetch(PDO::FETCH_ASSOC), new Customer());\n    }\n    ```", "```php\n    public function save(Customer $cust)\n    {\n      // check to see if customer ID > 0 and exists\n      if ($cust->getId() && $this->fetchById($cust->getId())) {\n        return $this->doUpdate($cust);\n      } else {\n        return $this->doInsert($cust);\n      }\n    }\n    ```", "```php\n    protected function doUpdate($cust)\n    {\n      // get properties in the form of an array\n      $values = $cust->entityToArray();\n      // build the SQL statement\n      $update = 'UPDATE ' . $cust::TABLE_NAME;\n      $where = ' WHERE id = ' . $cust->getId();\n      // unset ID as we want do not want this to be updated\n      unset($values['id']);\n      return $this->flush($update, $values, $where);\n    }\n    ```", "```php\n    protected function doInsert($cust)\n    {\n      $values = $cust->entityToArray();\n      $email  = $cust->getEmail();\n      unset($values['id']);\n      $insert = 'INSERT INTO ' . $cust::TABLE_NAME . ' ';\n      if ($this->flush($insert, $values)) {\n        return $this->fetchByEmail($email);\n      } else {\n        return FALSE;\n      }\n    }\n    ```", "```php\n    protected function flush($sql, $values, $where = '')\n    {\n      $sql .=  ' SET ';\n      foreach ($values as $column => $value) {\n        $sql .= $column . ' = :' . $column . ',';\n      }\n      // get rid of trailing ','\n      $sql     = substr($sql, 0, -1) . $where;\n      $success = FALSE;\n      try {\n        $stmt = $this->connection->pdo->prepare($sql);\n        $stmt->execute($values);\n        $success = TRUE;\n      } catch (PDOException $e) {\n        error_log(__METHOD__ . ':' . __LINE__ . ':' \n        . $e->getMessage());\n        $success = FALSE;\n      } catch (Throwable $e) {\n        error_log(__METHOD__ . ':' . __LINE__ . ':' \n        . $e->getMessage());\n        $success = FALSE;\n      }\n      return $success;\n    }\n    ```", "```php\n    public function remove(Customer $cust)\n    {\n      $sql = 'DELETE FROM ' . $cust::TABLE_NAME . ' WHERE id = :id';\n      $stmt = $this->connection->pdo->prepare($sql);\n      $stmt->execute(['id' => $cust->getId()]);\n      return ($this->fetchById($cust->getId())) ? FALSE : TRUE;\n    }\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Database\\Connection;\nuse Application\\Database\\CustomerService;\n```", "```php\n// get service instance\n$service = new CustomerService(new Connection(include __DIR__ . DB_CONFIG_FILE));\n\necho \"\\nSingle Result\\n\";\nvar_dump($service->fetchById(rand(1,79)));\n```", "```php\n// sample data\n$data = [\n  'name'              => 'Doug Bierer',\n  'balance'           => 326.33,\n  'email'             => 'doug' . rand(0,999) . '@test.com',\n  'password'          => 'password',\n  'status'            => 1,\n  'security_question' => 'Who\\'s on first?',\n  'confirm_code'      => 12345,\n  'level'             => 'ADV'\n];\n\n// create new Customer\n$cust = Customer::arrayToEntity($data, new Customer());\n```", "```php\necho \"\\nCustomer ID BEFORE Insert: {$cust->getId()}\\n\";\n$cust = $service->save($cust);\necho \"Customer ID AFTER Insert: {$cust->getId()}\\n\";\n```", "```php\necho \"Customer Balance BEFORE Update: {$cust->getBalance()}\\n\";\n$cust->setBalance(999.99);\n$service->save($cust);\necho \"Customer Balance AFTER Update: {$cust->getBalance()}\\n\";\nvar_dump($cust);\n```", "```php\n    function findCustomerById($id, Connection $conn)\n    {\n      $stmt = $conn->pdo->query(\n        'SELECT * FROM customer WHERE id = ' . (int) $id);\n      $results = $stmt->fetch(PDO::FETCH_ASSOC);\n      return $results;\n    }\n    ```", "```php\n    CREATE TABLE 'purchases' (\n      'id' int(11) NOT NULL AUTO_INCREMENT,\n      'transaction' varchar(8) NOT NULL,\n      'date' datetime NOT NULL,\n      'quantity' int(10) unsigned NOT NULL,\n      'sale_price' decimal(8,2) NOT NULL,\n      'customer_id' int(11) DEFAULT NULL,\n      'product_id' int(11) DEFAULT NULL,\n      PRIMARY KEY ('id'),\n      KEY 'IDX_C3F3' ('customer_id'),\n      KEY 'IDX_665A' ('product_id'),\n      CONSTRAINT 'FK_665A' FOREIGN KEY ('product_id') \n      REFERENCES 'products' ('id'),\n      CONSTRAINT 'FK_C3F3' FOREIGN KEY ('customer_id') \n      REFERENCES 'customer' ('id')\n    );\n    ```", "```php\n    function findCustomerById($id, Connection $conn)\n    {\n      $stmt = $conn->pdo->query(\n           'SELECT * FROM customer WHERE id = ' . (int) $id);\n      $results = $stmt->fetch(PDO::FETCH_ASSOC);\n      if ($results) {\n        $results['purchases'] = \n          // define secondary lookup\n     **function ($id, $conn) {**\n     **$sql = 'SELECT * FROM purchases AS u '**\n     **. 'JOIN products AS r '**\n     **. 'ON u.product_id = r.id '**\n     **. 'WHERE u.customer_id = :id '**\n     **. 'ORDER BY u.date';**\n     **$stmt = $conn->pdo->prepare($sql);**\n     **$stmt->execute(['id' => $id]);**\n     **while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {**\n     **yield $row;**\n     **}**\n     **};**\n      }\n      return $results;\n    }\n    ```", "```php\n    $result = findCustomerById(rand(1,79), $conn);\n    ```", "```php\n    <table>\n      <tr>\n    <th>Transaction</th><th>Date</th><th>Qty</th>\n    <th>Price</th><th>Product</th>\n      </tr>\n    <?php \n    foreach (**$result['purchases']($result['id'], $conn**) as $purchase) : ?>\n      <tr>\n        <td><?= $purchase['transaction'] ?></td>\n        <td><?= $purchase['date'] ?></td>\n        <td><?= $purchase['quantity'] ?></td>\n        <td><?= $purchase['sale_price'] ?></td>\n        <td><?= $purchase['title'] ?></td>\n      </tr>\n    <?php endforeach; ?>\n    </table>\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\ninclude __DIR__ . '/../Application/Database/Connection.php';\nuse Application\\Database\\Connection;\n$conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n```", "```php\nfunction findCustomerById($id, Connection $conn)\n{\n  // code shown in bullet #3 above\n}\n$result = findCustomerById(rand(1,79), $conn);\n?>\n```", "```php\n<h1><?= $result['name'] ?></h1>\n<div class=\"row\">\n<div class=\"left\">Balance</div>\n<div class=\"right\"><?= $result['balance']; ?></div>\n</div>\n<!-- etc.l -->\n```", "```php\n<table>\n<tr><th>Transaction</th><th>Date</th><th>Qty</th>\n<th>Price</th><th>Product</th></tr>\n  <?php \n  foreach **($result['purchases']($result['id'], $conn) as $purchase)** : ?>\n  <tr>\n    <td><?= $purchase['transaction'] ?></td>\n    <td><?= $purchase['date'] ?></td>\n    <td><?= $purchase['quantity'] ?></td>\n    <td><?= $purchase['sale_price'] ?></td>\n    <td><?= $purchase['title'] ?></td>\n  </tr>\n<?php endforeach; ?>\n</table>\n```", "```php\n    $id  = $_GET['id'] ?? 0;\n    sql = 'SELECT u.transaction,u.date, **u.quantity,u.sale_price,r.title '**\n       . 'FROM purchases AS u '\n       . 'JOIN products AS r '\n       . 'ON u.product_id = r.id '\n       . 'WHERE u.customer_id = :id';\n    $stmt = $conn->pdo->prepare($sql);\n    $stmt->execute(['id' => (int) $id]);\n    $results = array();\n    while ($row = $stmt->fetch(**PDO::FETCH_NUM**)) {\n      $results[] = $row;\n    }\n    echo json_encode(['data' => $results]); \n    ```", "```php\n    function findCustomerById($id, Connection $conn)\n    {\n      $stmt = $conn->pdo->query(\n        'SELECT * FROM customer WHERE id = ' . (int) $id);\n      $results = $stmt->fetch(PDO::FETCH_ASSOC);\n      return $results;\n    }\n    ```", "```php\n    <!DOCTYPE html>\n    <head>\n      <script src=\"https://code.jquery.com/jquery-1.12.0.min.js\">\n      </script>\n        <script type=\"text/javascript\" \n          charset=\"utf8\" \n          src=\"//cdn.datatables.net/1.10.11/js/jquery.dataTables.js\">\n        </script>\n      <link rel=\"stylesheet\" \n        type=\"text/css\" \n        href=\"//cdn.datatables.net/1.10.11/css/jquery.dataTables.css\">\n    </head>\n    ```", "```php\n    <script>\n    $(document).ready(function() {\n      $('#customerTable').DataTable(\n        { \"ajax\": '/chap_05_jquery_datatables_php_lookups_ajax.php?id=<?= $id ?>' \n      });\n    } );\n    </script>\n    ```", "```php\n    <table id=\"customerTable\" class=\"display\" cellspacing=\"0\" width=\"100%\">\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Date</th>\n          <th>Qty</th>\n          <th>Price</th>\n          <th>Product</th>\n        </tr>\n      </thead>\n    </table>\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\ninclude __DIR__ . '/../Application/Database/Connection.php';\nuse Application\\Database\\Connection;\n$conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\ninclude __DIR__ . '/../Application/Database/Connection.php';\nuse Application\\Database\\Connection;\n$conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n// add function findCustomerById() here\n$id     = random_int(1,79);\n$result = findCustomerById($id, $conn);\n?>\n```"]