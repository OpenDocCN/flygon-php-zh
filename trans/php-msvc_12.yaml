- en: Chapter 12. Cloud and DevOps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 云和DevOps
- en: We did not want to end the book without talking about Cloud and DevOps functions.
    Having a server in house is not a good solution when Cloud platforms exist; so,
    in this chapter, you will understand why you should use Cloud for your application
    and which provider is the best for your requirements. Also, you will learn how
    to deploy your application into these Cloud platforms using automated tools.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望在没有谈论云和DevOps功能的情况下结束这本书。当云平台存在时，在家中拥有服务器不是一个好的解决方案；因此，在本章中，您将了解为什么应该为您的应用程序使用云以及哪个提供商最适合您的需求。此外，您还将学习如何使用自动化工具将您的应用程序部署到这些云平台中。
- en: The DevOps' role is closely related to the Cloud, so we will go through this
    subject and what the DevOps tasks are.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的角色与云密切相关，因此我们将介绍这个主题以及DevOps的任务是什么。
- en: What is Cloud?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是云？
- en: The fastest way to explain what we know as Cloud is by saying that the Cloud
    is the delivery of online services hosted on the Internet, but we can also say
    that Cloud allows us to consume digital resources in a very easy way. Some common
    Cloud services used these days are disk storage, virtual machines or TV services
    among others. As you can imagine, the main benefit of the Cloud is that we do
    not need to build and maintain these infrastructures at home.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解释我们所知的云的最快方法是说云是托管在互联网上的在线服务的交付，但我们也可以说云允许我们以非常简单的方式消耗数字资源。如今使用的一些常见云服务是磁盘存储、虚拟机或电视服务等。正如您所想象的，云的主要好处是我们无需在家中建立和维护这些基础设施。
- en: As developers, you will know that Cloud is a good approach for our applications.
    Let's take a look at some advantages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，您会知道云对我们的应用程序是一个很好的方法。让我们看看一些优势。
- en: Autoscalable and elastic
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可自动扩展和弹性
- en: When your application is online, it is impossible to predict whether the traffic
    will be very high in a few months or even a few days. Cloud allows us to have
    an autoscalable infrastructure that matches the traffic or consumption resources
    of our application. It can grow if your traffic is higher or decrease if your
    application does not have the traffic you hoped for.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的应用程序在线时，不可能预测未来几个月甚至几天的流量是否会非常高。云允许我们拥有一个自动扩展的基础设施，以匹配我们应用程序的流量或消耗资源。如果您的流量更高，它可以增长；如果您的应用程序没有您希望的流量，它可以减少。
- en: 'Usually, there are three options when you want to resize the servers. In the
    next picture we will be showing you graphically the different options you have
    to resize your servers. The yellow line is the maximum load your application can
    manage and the blue line the current load of your site:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当您想要调整服务器大小时，有三种选项。在下一张图片中，我们将以图形方式向您展示调整服务器大小的不同选项。黄线是您的应用程序可以处理的最大负载，蓝线是您站点的当前负载：
- en: '**Picture 1**: Use more servers than you need in order to avoid traffic problems
    when peak traffic occurs.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图片1**：在高峰流量发生时使用比您需要的更多的服务器，以避免流量问题。'
- en: '**Picture 2**: Use enough servers for normal traffic. You should know that
    it is possible to have problems on specific days. For example, if your application
    is an online shop, problems may arise on days like Black Friday.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图片2**：为正常流量使用足够的服务器。您应该知道在特定日期可能会出现问题。例如，如果您的应用是一个在线商店，可能会在像黑色星期五这样的日子出现问题。'
- en: '**Picture 3**: Use an elastic Cloud; it increases and decreases by adding or
    removing servers automatically depending on the peak traffic so that you always
    have the infrastructure you need.![Autoscalable and elastic](graphics/B06142_12_01.jpg)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图片3**：使用弹性云；根据高峰流量的增加或减少自动添加或移除服务器，以便您始终拥有所需的基础设施。![可自动扩展和弹性](graphics/B06142_12_01.jpg)'
- en: Resizing ways
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 调整方式
- en: Lower management efforts
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 降低管理工作量
- en: If you lose time setting up your server and performing maintaining tasks, you
    are losing time that you could use on improving your application. Cloud allows
    us to just focus on our application because it provides us with a new way to develop
    applications, providing preconfigured resources that allow us to develop applications
    without worrying about the infrastructure we are working on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您花费时间设置服务器并执行维护任务，那么您正在浪费可以用来改进应用程序的时间。云允许我们只关注我们的应用程序，因为它为我们提供了一种新的开发应用程序的方式，提供了预配置的资源，使我们能够开发应用程序而不必担心我们正在使用的基础设施。
- en: In addition, Cloud usually provides us with a complete and useful dashboard
    to manage the machines, so we do not need to use an SSH console anymore, making
    our tasks easier. It even provides us with better ways to manage our databases
    and load balancers or certificates.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，云通常为我们提供完整而有用的仪表板来管理机器，因此我们不再需要使用SSH控制台，使我们的任务更加轻松。它甚至为我们提供了更好的方法来管理我们的数据库和负载均衡器或证书。
- en: Cheaper
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更便宜
- en: 'Using Cloud is cheaper than having the servers at home. These savings are because
    of the following reasons:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用云比在家中拥有服务器更便宜。这些节省是因为以下原因：
- en: You are only paying for the infrastructure you need all the time, so you do
    not need to change your machines when the traffic on your application grows
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您只需一直支付您所需的基础设施，因此当您的应用程序的流量增长时，您无需更改您的机器
- en: The IT guys (in case you need them) will be more productive because they will
    only focus on problems that Cloud cannot help with
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IT人员（如果您需要他们）将更加高效，因为他们只会专注于云无法帮助解决的问题
- en: Be aware when you pay for a Cloud server that you are not only paying for the
    servers; this server also includes the storage, an operating system, virtualization,
    the physical space, updates, a cooling system, and many other things, such as
    energy or data center operations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您支付云服务器时，您不仅支付服务器；此服务器还包括存储、操作系统、虚拟化、物理空间、更新、冷却系统以及许多其他东西，如能源或数据中心运营。
- en: Grow faster
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速增长
- en: This point is closely linked to the last one. If your application is new and
    you do not know if it will be successful, it is not a good idea to buy physical
    servers and all the related things in order to put your application online.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点与上一点密切相关。如果您的应用程序是新的，而且您不知道它是否会成功，那么购买物理服务器和所有相关事项将不是一个好主意，因为这样可以将您的应用程序上线。
- en: Using Cloud, you can pay monthly for the server you need and if the application
    does not go as expected, you can reduce the plan or even close it and you will
    spend less money.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用云，您可以按月支付所需的服务器，如果应用程序不如预期，您可以降低计划甚至关闭它，这样您将花费更少的资金。
- en: Also, saving money at the beginning will allow you to grow faster, paying attention
    and putting money into the application instead of spending money on hardware.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在开始阶段节省资金将使您能够更快地增长，关注并将资金投入应用程序而不是花费在硬件上。
- en: Time to market
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上市时间
- en: If you want to test new ideas and put them online, it will be faster. This is
    the main Cloud advantage and it is very precious on the internet. For big companies,
    it is very difficult to go as fast as small companies and Cloud allows them to
    include changes online in an easy and fast way, making this a very competitive
    advantage.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想测试新想法并将其上线，云服务将更快。这是云的主要优势，在互联网上非常宝贵。对于大公司来说，要像小公司一样快速发展是非常困难的，云允许它们以一种简单快速的方式在线包含变化，使其成为非常具有竞争力的优势。
- en: Select your Cloud provider
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择您的云服务提供商
- en: Choosing the best Cloud provider is not an easy thing, but you can check your
    application needs in order to select the provider that suits it best.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 选择最佳的云服务提供商并不容易，但您可以根据应用程序需求选择最适合它的提供商。
- en: 'Consider the following things:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下事项：
- en: '**Ensure that your provider knows your needs**: The communication between your
    team and your Cloud provider is essential. It is very important that your provider
    knows things such as read/write number per second, where the users are from if
    there are concurrent users, how your deploy scripts work, or what your development,
    staging, and production environments are like.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保您的提供商了解您的需求**：您的团队与云服务提供商之间的沟通至关重要。非常重要的是，您的提供商了解诸如每秒读/写次数、用户所在地、是否有并发用户、您的部署脚本如何工作，或者您的开发、暂存和生产环境是什么样的等事项。'
- en: '**Where is my data**: The Cloud servers are located somewhere, so it is important
    to know where they are because if you store customers'' data, the law may not
    allow you to store data in some countries.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我的数据在哪里**：云服务器位于某个地方，因此了解它们的位置很重要，因为如果您存储客户数据，法律可能不允许您在某些国家存储数据。'
- en: '**Security**: If your application is not secure, you are at risk all the time,
    so it is good to know what protection systems your Cloud provider has, such as
    firewalls or how they isolate the hardware, in order to avoid intrusions and whether they
    offer 24-hour support.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：如果您的应用程序不安全，您随时都面临风险，因此了解您的云服务提供商具有哪些保护系统（如防火墙或硬件隔离）是很重要的，以避免入侵，并了解他们是否提供24小时支持。'
- en: '**Test it before moving your application**: Your Cloud provider may allow you
    to test the service before moving the entire application, so use this option in
    order to check whether the servers will be enough for your traffic and resources.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在迁移应用程序之前进行测试**：您的云服务提供商可能允许您在迁移整个应用程序之前测试服务，因此使用此选项以检查服务器是否足够应对您的流量和资源。'
- en: Amazon Web Services (AWS)
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亚马逊网络服务（AWS）
- en: The internet giant Amazon.com has its own Cloud. It provides web hosting and
    also, many other services to help companies. The most important feature on **Amazon
    Web Services** (**AWS**) is the load balancer and the possibility of sending some
    of your application's tasks (such as processing data or web hosting) to Amazon.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网巨头亚马逊.com拥有自己的云。它提供网络托管以及许多其他服务来帮助公司。**亚马逊网络服��**（**AWS**）上最重要的功能是负载均衡器和将应用程序的某些任务（如处理数据或网络托管）发送到亚马逊的可能性。
- en: To sum up, AWS is not just a simple Cloud, it includes many services (more than
    50) for web experts and other people that require specific features that Amazon
    offers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，AWS不仅仅是一个简单的云，它包括许多服务（超过50个）供网络专家和其他需要亚马逊提供的特定功能的人使用。
- en: Amazon gives us some different price plan options depending on the time we use
    it for--price per hour, per year, or even 3 years are the possibilities of AWS.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊根据使用时间为我们提供了一些不同的价格计划选项--按小时、按年，甚至3年的价格都是AWS的可能选择。
- en: An important thing on the Cloud is the **Service Level Agreements** (**SLA**).
    For Amazon, these include a 99.95% of uptime guarantee with monthly cycles.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 云上的一个重要事项是**服务级别协议**（**SLA**）。对于亚马逊来说，这包括每月99.95%的正常运行时间保证。
- en: The customization on AWS works like templates; in other words, at the moment
    a full configuration of CPU, RAM, and space for your application is not possible;
    you should choose between some template options, so if you only need more RAM,
    you can not just upgrade the RAM, you should choose a different template that
    can upgrade the CPU and hard disk too.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: AWS上的定制工作方式类似于模板；换句话说，目前不可能对应用程序的CPU、RAM和空间进行全面配置；您应该在一些模板选项之间进行选择，因此如果您只需要更多的RAM，您不能只升级RAM，您应该选择一个可以升级CPU和硬盘的不同模板。
- en: Usually, the Cloud servers are in many countries around the world. Amazon EC2
    (the servers of AWS) are currently located in North America (16), South America
    (3), Europe (7), Asia (14).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，云服务器位于世界各地的许多国家。亚马逊EC2（AWS的服务器）目前位于北美（16）、南美（3）、欧洲（7）、亚洲（14）。
- en: It may be worth noting that, at the moment and according to general consensus,
    AWS gives us the worst cost-benefit ratio in bandwidth and processing power among
    others. It's still the most feature complete solution out in the market, but it
    might not be the best fit for you.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，目前根据一般共识，AWS在带宽和处理能力等方面给我们提供了最差的成本效益比。它仍然是市场上功能最完整的解决方案，但可能并不是最适合您的选择。
- en: Microsoft Azure
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微软Azure
- en: Azure is the Microsoft operating system that provides us with an environment
    to execute and deploy applications and services on the Cloud. It provides us with
    a custom environment and servers located on the Microsoft data centers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Azure是微软的操作系统，为我们提供了在云上执行和部署应用程序和服务的环境。它为我们提供了自定义环境和位于微软数据中心的服务器。
- en: The applications we store on Azure should work on Windows Server 2008 R2, and
    they can be developed on .NET, PHP, C++, Ruby, or Java. Also, Azure provides us
    with some database mechanisms, such as NoSQL, blobs, message queues, and NTFS
    drives to read/write disk operations.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Azure上存储的应用程序应该在Windows Server 2008 R2上运行，并且可以在.NET、PHP、C++、Ruby或Java上开发。此外，Azure还为我们提供了一些数据库机制，如NoSQL、blobs、消息队列和NTFS驱动器来进行读/写磁盘操作。
- en: 'The main advantages of Windows Azure are as listed:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Azure的主要优势如下：
- en: It reduces operation costs and provisioning on the applications
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低应用程序的运营成本和配置
- en: Fast response to customer need changes
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对客户需求变化的快速响应
- en: Scalability
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Azure gives us different ways of paying for the services, you can pay for hour
    fractions or you can make yearly payments. The SLA of Azure is the same as Amazon
    and includes a 99.95% of up time guarantee with monthly cycles; the customization
    works with templates too.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Azure为我们提供了不同的付款方式，可以按小时支付，也可以进行年度付款。Azure的SLA与亚马逊相同，包括99.95%的正常运行时间保证，以月为周期；定制也可以使用模板。
- en: Azure Cloud servers are currently located in North America (9), South America
    (1), Europe (6), Asia (9), and Australia (2).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Azure云服务器目前位于北美（9）、南美（1）、欧洲（6）、亚洲（9）和澳大利亚（2）。
- en: In conclusion, Amazon and Azure are very similar; the main difference between
    them is the operating system used. If your application is developed on .NET or
    requires Windows servers, Azure is the best option.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，亚马逊和Azure非常相似；它们之间的主要区别是所使用的操作系统。如果您的应用程序是在.NET上开发的，或者需要Windows服务器，Azure是最佳选择。
- en: Rackspace
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rackspace
- en: Rackspace is not one of the biggest ones (such as Amazon or Microsoft), but
    it is considered as one that we should mention when we talk about Cloud services.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Rackspace不是最大的（如亚马逊或微软），但在谈论云服务时，它被认为是我们应该提到的一个。
- en: When we hire Rackspace, we are paying to use the service, for example, when
    we need to increment the capacity of our application at a specific moment. The
    Rackspace servers are administered by them and it is even possible to hire only
    the support system, having our servers outside Rackspace.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们雇佣Rackspace时，我们是在支付使用服务的费用，例如当我们需要在特定时刻增加应用程序的容量。Rackspace的服务器由他们管理，甚至可以只雇佣支持系统，将我们的服务器放在Rackspace之外。
- en: Rackspace gives us the option of paying for less than an hour of time, yearly,
    or even for 3 years. The SLA is 99.90% uptime guarantee with monthly cycles, and
    the customization works using templates, like Amazon and Azure do.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Rackspace为我们提供了支付少于一小时、年度甚至3年的选项。SLA是99.90%的正常运行时间保证，以月为周期，定制使用模板，与亚马逊和Azure一样。
- en: The servers are currently located in North America (3), Europe (1), Asia (1),
    and Australia (1).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器目前位于北美（3）、欧洲（1）、亚洲（1）和澳大利亚（1）。
- en: In conclusion, Rackspace is cheaper than Amazon or Azure, and it is a very good
    solution to start working with Cloud. Also, it has a very good distributed DNS
    and they are the creators of **OpenStack**, an open source stack of different
    software components used to implement the Cloud servers through virtualization.
    This offers a new dashboard, add-on services with databases, server monitoring,
    block storages, and creation of virtual networks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，Rackspace比亚马逊或Azure便宜，是一个非常好的开始使用云的解决方案。此外，它拥有非常好的分布式DNS，并且他们是OpenStack的创造者，这是一种用于通过虚拟化实现云服务器的不同软件组件的开源堆栈。这提供了一个新的仪表板，附加服务与数据库、服务器监控、块存储和虚拟网络的创建。
- en: DigitalOcean
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DigitalOcean
- en: '**DigitalOcean** is the second biggest hosting company in the world. Their
    plans are the cheapest ones and the DigitalOcean community is really good--they
    have forums for developers and a lot of tutorials about administration servers.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean是世界上第二大的托管公司。他们的计划是最便宜的，DigitalOcean社区非常好 - 他们为开发人员提供论坛和许多关于管理服务器的教程。
- en: It is possible to choose the option of paying hourly or monthly. Also, the SLA
    is 99.99% uptime guarantee, even better than Amazon or Azure, and the customization
    works using templates, just like Amazon, Azure, and Rackspace do.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可以选择按小时或按月支付。此外，SLA是99.99%的正常运行时间保证，甚至比亚马逊或Azure更好，定制使用模板，就像亚马逊、Azure和Rackspace一样。
- en: They currently have five servers in North America, five in Europe, and one in
    Asia.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 他们目前在北美有五个服务器，在欧洲有五个，在亚洲有一个。
- en: DigitalOcean is a good solution for experts because they do not administer the
    servers. The servers are always Linux, so this is not a solution for projects
    that require Windows. Also, an advantage of using DigitalOcean is that if your
    project grows, it is possible to easily and quickly scale your server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean对于专家来说是一个很好的解决方案，因为他们不管理服务器。服务器始终是Linux，因此对于需要Windows的项目来说，这不是一个解决方案。此外，使用DigitalOcean的一个优势是，如果您的项目增长，可以轻松快速地扩展服务器。
- en: Joyent
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Joyent
- en: Samsung bought **Joyent**. This Cloud has great potential. It was created to
    compete with Amazon EC2, and it had some important customers, such as Twitter
    and LinkedIn.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 三星收购了Joyent。这个云具有巨大的潜力。它是为了与亚马逊EC2竞争而创建的，并且有一些重要的客户，如Twitter和LinkedIn。
- en: Joyent created Node.js and they have the best technology for containers; it
    was inherited from Solaris and implemented on their own operating system, **SmartOS**,
    (an operating system designed for the Cloud). If you are looking for the best
    performance and you do not care about the price, Joyent is your best friend.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Joyent创建了Node.js，并且他们拥有最好的容器技术；它是从Solaris继承并实现在他们自己的操作系统SmartOS上（一种为云设计的操作系统）。如果您寻求最佳性能并且不在乎价格，Joyent是您的最佳选择。
- en: You can choose the option of paying hourly, yearly, or even every 3 years. Also,
    the SLA is 100% uptime guarantee with 30 minutes cycles, the best one. The customization
    works using templates, just like Amazon, Azure, Rackspace, or DigitalOcean do.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择按小时、按年甚至每3年付款。此外，SLA是100%的正常运行时间保证，每30分钟循环一次，是最好的。定制使用模板，就像亚马逊、Azure、Rackspace或DigitalOcean一样。
- en: They have three servers in North America and one in Europe at the moment.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 他们目前在北美有三台服务器，在欧洲有一台。
- en: Rackspace and Joyent have an open source infrastructure, so it is possible to
    download and use it on your own machine.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Rackspace和Joyent拥有开源基础设施，因此可以下载并在自己的机器上使用。
- en: Google Compute Engine
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谷歌计算引擎
- en: '**Google Compute Engine** is a complete product that includes infrastructure
    and service, allowing us to execute virtual machines with Linux on the same infrastructure
    as Google works.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**谷歌计算引擎**是一个完整的产品，包括基础设施和服务，允许我们在与谷歌相同的基础设施上执行带有Linux的虚拟机。'
- en: The Google Compute Engine dashboard could not be better. It is clean and easy
    to navigate through. Also, it is very fast during the deployment and the scalability
    process, and the tools included on this Cloud make Google Compute Engine a good
    solution for analytics and big data.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌计算引擎仪表板无可挑剔。它干净且易于导航。此外，在部署和可伸缩过程中非常快速，以及此云中包含的工具使谷歌计算引擎成为分析和大数据的良好解决方案。
- en: For Google Compute Engine, the SLA is 99.95% uptime guarantee with monthly cycles.
    It allows us to store up to seven snapshots for free.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于谷歌计算引擎，SLA是99.95%的正常运行时间保证，每月循环一次。它允许我们免费存储最多七个快照。
- en: They have nine servers in North America, three in Europe, and six in Asia at
    the moment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 他们目前在北美有九台服务器，在欧洲有三台，在亚洲有六台。
- en: Deploying your application to the Cloud
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的应用程序部署到云中
- en: Throughout the book, we were working with containers; we already told you how
    beneficial they are for your projects. Now, it's time to deploy your application
    to the Cloud. There are different providers out there, and we gave you some hints
    on how to choose the best provider for your project. In this section, we will show
    you some interesting options you have to orchestrate and manage your containers
    in production.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们一直在使用容器；我们已经告诉过您它们对您的项目有多么有益。现在，是时候将您的应用程序部署到云中了。市场上有不同的提供商，我们已经为您提供了一些关于如何选择最佳提供商的提示。在本节中，我们将向您展示一些有趣的选项，让您在生产中编排和管理容器。
- en: Docker Swarm
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker Swarm
- en: We were playing with Docker and their **Docker Engine** throughout the book.
    With the Docker engine, we are able to spin up and down the containers we use
    in our application. As you imagine, you can install the Docker Engine in your
    production server and use it like our development environment, but do you think
    that this approach is fault tolerant? Obviously the response is no. You can try
    to do some magic having multiple Docker Engines in different servers, but it will
    be hard to set up and maintain. Fortunately, Docker created Docker Swarm; this
    software provides you with native clustering capabilities and turns your group
    of Docker Engines into a single virtual Docker Engine. It will be like working
    in your development machine; the Swarm will be dealing with all the hard stuff
    for you, you only need to take care of your application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们一直在使用Docker及其**Docker引擎**。使用Docker引擎，我们能够启动和关闭我们应用程序中使用的容器。您可以想象，您可以在生产服务器上安装Docker引擎，并像我们的开发环境一样使用它，但您认为这种方法是容错的吗？显然答案是否定的。您可以尝试在不同服务器上拥有多个Docker引擎，但设置和维护将会很困难。幸运的是，Docker创建了Docker
    Swarm；这个软件为您提供了本地集群功能，并将您的一组Docker引擎转换为单个虚拟Docker引擎。就像在您的开发机器上工作一样；Swarm将为您处理所有困难的事情，您只需要关注您的应用程序。
- en: 'As we want you to have a global overview of Docker Swarm, listed are the main
    features of this tool:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望您全面了解Docker Swarm，以下是此工具的主要功能：
- en: '**Compatible with Docker tools**: Docker Swarm uses and provides the standard
    Docker API, so any tool that already uses the Docker API can use Docker Swarm
    to transparently scale to multiple hosts.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与Docker工具兼容**：Docker Swarm使用并提供标准的Docker API，因此任何已经使用Docker API的工具都可以使用Docker
    Swarm来透明地扩展到多个主机。'
- en: '**High scalability and performance**: Like all the Docker software, Swarm is
    production ready and it was tested to scale up to one thousand (1,000) nodes and
    fifty thousand (50,000) containers. The results of those tests showed that you
    can achieve these high deploy numbers without performance degradation in the node
    cluster.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可伸缩性和性能**：与所有Docker软件一样，Swarm已经准备好投入生产，并且经过测试，可以扩展到一千（1,000）个节点和五万（50,000）个容器。这些测试结果表明，您可以在节点集群中实现这些高部署数字，而不会降低性能。'
- en: '**Failover and high availability**: Docker Swarm is ready to manage failover
    and give you high availability. You can create multiple Swarm masters and specify
    your policy for leader election on master failures. At the time of writing this
    book, there is an experimental support for container rescheduling from failed
    nodes.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障转移和高可用性**：Docker Swarm已准备好管理故障转移并为您提供高可用性。您可以创建多个Swarm主机并指定主机故障时的领导者选举策略。在撰写本书时，有一个实验性支持从失败节点重新调度容器的支持。'
- en: '**Flexible container scheduling**: Swarm comes with a built-in scheduler that will
    be responsible for maximizing the performance and resource utilization of your
    infrastructure.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活的容器调度**：Swarm配备了内置调度程序，负责最大化您基础设施的性能和资源利用率。'
- en: '**Pluggable schedulers and node discovery**: If the built-in scheduler that comes
    with Swarm does not fit well with your requirements, you can plug in external
    schedulers, such as **Apache Mesos** or **Kubernetes**. To fulfill all the autodiscovery
    requirements of your application, you can choose between the different available
    methods in Swarm: a hosted discovery service, a static file, Consul, or Zookeeper.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可插拔的调度器和节点发现**：如果Swarm附带的内置调度器不符合您的要求，您可以插入外部调度器，例如**Apache Mesos**或**Kubernetes**。为了满足应用程序的所有自动发现要求，您可以在Swarm中选择不同的可用方法：托管的发现服务、静态文件、Consul或Zookeeper。'
- en: Installing Docker Swarm
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Docker Swarm
- en: From Docker 1.12 and higher, the Swarm mode comes out of the box, so installing
    it is very easy. You only need to follow the steps we showed you in the [Chapter
    2](ch02.html "Chapter 2. Development Environment"), *Development Environment*,
    but instead of performing them on your development machine, you need to perform them
    on your production servers. We recommend using Linux/Unix in your production nodes,
    so all the steps we are describing here are for a Linux/Unix system.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从Docker 1.12及更高版本开始，Swarm模式已经内置，因此安装非常容易。您只需要按照我们在[第2章](ch02.html "第2章 开发环境")中展示的步骤进行操作，*开发环境*，但是不是在您的开发机器上执行，而是在您的生产服务器上执行。我们建议在生产节点上使用Linux/Unix，因此我们在这里描述的所有步骤都是针对Linux/Unix系统的。
- en: 'We will build a Swarm cluster so, before you continue reading, ensure that
    you have the following requirements ready:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个Swarm集群，因此在继续阅读之前，请确保您已准备好以下要求：
- en: A minimum of three host machines with Docker Engine 1.12 (or higher) installed
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少三台安装了Docker Engine 1.12（或更高版本）的主机
- en: One of the machines will be the manager machine, so ensure that you have all
    the IP addresses of your hosts
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中一台机器将是管理机器，因此确保您拥有所有主机的IP地址
- en: Open ports between your hosts
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开主机之间的端口
- en: '**TCP port 2377**: This port is used for our cluster management messages'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP端口2377**：此端口用于我们的集群管理消息'
- en: '**TCP and UDP port 7946**: These ports are used for the communication between
    our nodes'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP和UDP端口7946**：这些端口用于节点之间的通信'
- en: '**TCP and UDP port 4789**: These ports are used for overlaying network traffic'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP和UDP端口4789**：这些端口用于覆盖网络流量'
- en: 'In summary, our production environment will be composed of the following hosts:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，我们的生产环境将由以下主机组成：
- en: '**Manager node**: This is responsible for all the heavy work of orchestration
    and scheduling. We will call this machine `manager_01`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理节点**：这个节点负责所有编排和调度的繁重工作。我们将称这台机器为`manager_01`。'
- en: '**Two workers**: These are dummy nodes we will use to host our containers.
    We will call these hosts `worker_01` and `worker_02`.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**两个工作节点**：这些是我们将用来托管容器的虚拟节点。我们将这些主机称为`worker_01`和`worker_02`。'
- en: As we mentioned before, you need to know the IP addresses of your different
    Docker hosts and the most important one is the IP address of the manager machine.
    The workers will be connecting to this IP address to know what they need to do.
    For example, imagine that our manager host has the `192.168.99.100` IP.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，您需要知道不同Docker主机的IP地址，其中最重要的是管理机器的IP地址。工作节点将连接到此IP地址以了解他们需要做什么。例如，假设我们的管理主机的IP是`192.168.99.100`。
- en: 'At this point, you are ready to set up your Swarm cluster. First of all, ensure
    that the Docker Engine is running in all your nodes. Once you have checked that
    the engine is running in your hosts, you need to enter your `manager_01` node
    through SSH or console. In your `manager_01` node, run the following command to
    start the Swarm:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您已经准备好设置Swarm集群。首先确保所有节点上都运行着Docker引擎。一旦您检查了主机上的引擎是否正在运行，您需要通过SSH或控制台进入您的`manager_01`节点。在您的`manager_01`节点中，运行以下命令启动Swarm：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will initialize Swarm and establish the current node
    as the manager. It also gives you the commands you need to run to add more managers
    or to add workers to the cluster. The output of your `init` command should be
    similar to the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将初始化Swarm并将当前节点设为管理节点。它还会给出您需要运行的命令，以添加更多的管理节点或将工作节点添加到集群中。您的`init`命令的输出应类似于以下输出：
- en: '[PRE1]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you have your Swarm initialized, you need to get a token to be used to
    join other machines to the cluster. To get this token, you only need to run the
    following command at any moment:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您初始化了Swarm，您需要获取一个令牌，用于加入其他机器到集群中。要获取此令牌，您只需要在任何时候运行以下命令：
- en: '[PRE2]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Imagine that you need to add a new `worker` to the swarm; in this case, you
    only need to get the token from the preceding command and run the following one:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您需要向Swarm添加一个新的`worker`；在这种情况下，您只需要从上述命令中获取令牌并运行以下命令：
- en: '[PRE3]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding command will add a `worker` to the Swarm, and if you need to add
    another manager to this cluster, you can run `docker swarm join-token manager` and
    follow the instructions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将向Swarm添加一个`worker`，如果您需要向此集群添加另一个管理节点，可以运行`docker swarm join-token manager`并按照说明进行操作。
- en: 'In theory, the init command started the Swarm; if you want to check the correct
    cluster initialization, you only need to execute the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，init命令启动了Swarm；如果您想检查正确的集群初始化，只需执行以下命令：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding `info` command will give you some output similar to the following
    one; note that we removed some information to fit it in the book:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`info`命令将给出类似于以下输出的一些输出；请注意，我们删除了一些信息以适应本书：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, we have our Swarm active and ready; if you want to get more
    information about the nodes, you only need to execute the following command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的Swarm已经激活并准备就绪；如果您想获取有关节点的更多信息，只需执行以下命令：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding command will give you an output similar to the following one.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`info`命令将给出类似于以下输出的输出。
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At this point, you have one host, which is your manager node, but you do not
    have any workers where you can spin up your containers. Let's add some worker
    nodes to our cluster.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您有一个主机，即您的管理节点，但您没有任何可以启动容器的工作节点。让我们向我们的集群添加一些工作节点。
- en: 'Adding a worker node to our cluster is very easy with Swarm--you only need
    to access the host through SSH or console and run the command output by your swarm
    init on the manager node:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Swarm向我们的集群添加工作节点非常容易——您只需要通过SSH或控制台访问主机并运行在管理节点上由Swarm init输出的命令：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If everything went fine, the preceding command will give you the following
    output that indicates that the current node was added to the cluster:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，上述命令将给出以下输出，指示当前节点已添加到集群中：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Imagine that you didn''t save the join token; you can obtain it again from
    your manager node. You only need to login in the manager node and execute the
    following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您没有保存加入令牌；您可以再次从管理节点获取它。您只需要登录到管理节点并执行以下命令：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding command will give you the command you need to run in your workers
    nodes again.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将为您提供您需要在工作节点中再次运行的命令。
- en: 'As you can see, it is very easy to add nodes to your cluster; add all the remaining
    workers. To check the status of your cluster nodes, you can execute the following
    command in your manager node:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，向您的集群添加节点非常容易；添加所有剩余的工作节点。要检查集群节点的状态，您可以在管理节点中执行以下命令：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Adding services to our Swarm
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向我们的Swarm添加服务
- en: At this point, you will have your production environment ready for deployments;
    let's deploy something to test the new environment. We will deploy a very simple
    image that does a ping to `google.com`. As soon as you feel comfortable deploying
    services to the Swarm, you can give it a try and deploy our example application.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的生产环境已准备好进行部署；让我们部署一些内容来测试新环境。我们将部署一个非常简单的镜像，它会对`google.com`进行ping。一旦您感到舒适地将服务部署到Swarm中，您可以尝试部署我们的示例应用。
- en: 'Open a connection or login in your manager node and run the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 打开与管理节点的连接或登录，并运行以下命令：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding command creates a new service in the cluster, with the `--name`
    flag we are assigning a pretty name for our service, in this case `pingtest`.
    The `--replicas` parameter indicates the number of instances we want for our service;
    in our example we specified only one instance. With `alpine ping google.com`,
    we are telling our Swarm which image we want to use (`alpine`) and the command
    we want to execute in this image (`ping google.com`).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令在集群中创建了一个新服务，使用`--name`标志为我们的服务分配了一个漂亮的名称，在本例中是`pingtest`。`--replicas`参数指示我们希望为我们的服务创建的实例数量；在我们的例子中，我们只指定了一个实例。使用`alpine
    ping google.com`，我们告诉我们的Swarm我们想要使用哪个镜像（`alpine`）以及我们想要在该镜像中执行的命令（`ping google.com`）。
- en: 'As you can see, it was very easy to deploy the new testing service. If you
    want to see which services are running in your cluster, login in your manager
    node and execute `docker service ls`, the output will be similar to the following
    one:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，部署新的测试服务非常容易。如果您想查看在您的集群中运行哪些服务，请登录到您的管理节点并执行`docker service ls`命令，输出将类似于以下内容：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once you have your service running in production, at some point you will need
    to have more information about the service. It is very easy with Docker, you only
    need to execute the following command in your manager node:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的服务在生产环境中运行，您将需要更多关于服务的信息。使用Docker非常容易，您只需要在管理节点中执行以下命令：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Your output can be similar to the following one:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您的输出可能类似于以下内容：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you want the output to be returned as a JSON, you only need to remove the
    `--pretty` parameter from the command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望输出以JSON格式返回，您只需要从命令中删除`--pretty`参数：
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output of the preceding command will be similar to the next one:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出将类似于以下内容：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, the JSON format has more information; feel free to use the option
    that is more suitable for you. In case you need to know where your service is
    running, you can do a `docker service ps pingtest`, as always, in your manager
    node.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，JSON格式包含更多信息；请随意使用适合您的选项。如果您需要知道您的服务在哪里运行，您可以在管理节点中执行`docker service ps
    pingtest`命令，就像以往一样。
- en: Scaling your services in Swarm
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Swarm中扩展您的服务
- en: 'We showed you how easy it is to create new services in your Swarm cluster,
    now it''s time to let you know how you can scale your services up/down. Go to
    your manager node and run the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向您展示了在Swarm集群中创建新服务有多么容易，现在是时候让您知道如何扩展您的服务了。转到您的管理节点并运行以下命令：
- en: '[PRE18]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding command will create (or destroy) the required amount of containers
    to adjust it to your desire; in our case, we want 10 containers for our `pingtest`
    service. You can check the correct execution of the command with `docker service
    ps pingtest`, giving you the following output:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建（或销毁）所需数量的容器，以调整到您的需求；在我们的例子中，我们希望我们的`pingtest`服务有10个容器。您可以使用`docker
    service ps pingtest`命令来检查命令的正确执行，将给出以下输出：
- en: '![Scaling your services in Swarm](graphics/12.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![在Swarm中扩展您的服务](graphics/12.jpg)'
- en: From the preceding output, you can check that the service is running in 10 containers
    and also, you can check in which node it is running. In our case, they are all
    running in the same host as we only added one node to our cluster.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述输出中，您可以检查服务在10个容器中运行，还可以检查它在哪个节点上运行。在我们的例子中，它们都在同一台主机上运行，因为我们只向我们的集群添加了一个节点。
- en: You now know how to create your Swarm cluster and how you can easily start new
    services, now it's time to show you how you can stop any running service.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在知道如何创建您的Swarm集群以及如何轻松启动新服务，现在是时候向您展示如何停止任何正在运行的服务了。
- en: 'Connect to your manager node and execute the following command:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到您的管理节点并执行以下命令：
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding command will remove the `pingtest` service from your Swarm cluster.
    As always, you can check if the service was stopped with the `docker service inspect
    pingtest` command or by checking the running containers with the usual `docker
    ps`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将从Swarm集群中删除`pingtest`服务。与往常一样，您可以使用`docker service inspect pingtest`命令或通过检查运行的容器使用`docker
    ps`命令来检查服务是否已停止。
- en: At this point in the chapter, you will be able to create a Swarm cluster and
    spin up any service; give it a try and move our example application to use Swarm.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一点上，你将能够创建一个Swarm集群并启动任何服务；试一试，将我们的示例应用程序迁移到Swarm。
- en: As you can imagine, we like how easy Docker makes your development cycle and
    how simple the deployment can be, but there are other projects out there that
    you can use in your production environment. Let's look at the most commonly used
    ones these days so that you can choose which option is better for your project.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所想象的，我们喜欢Docker如何简化开发周期以及部署的简单性，但是还有其他项目可以在生产环境中使用。让我们看看这些天最常用的项目，这样你就可以选择哪个选项更适合你的项目。
- en: Apache Mesos and DC/OS
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apache Mesos和DC/OS
- en: Apache Mesos abstracts all the compute resources from machines, enabling fault-tolerant
    and elastic distributed systems. Creating an Apache Mesos distributed system can
    be complicated, so Mesosphere created DC/OS, an OS built on top of Apache Mesos.
    Thanks to DC/OS, you can have all the power of Mesos but it's easier to install
    or manage.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Mesos将所有计算资源从机器中抽象出来，实现了容错和弹性的分布式系统。创建Apache Mesos分布式系统可能会很复杂，因此Mesosphere创建了DC/OS，这是一个建立在Apache
    Mesos之上的操作系统。由于DC/OS，你可以拥有Mesos的所有功能，但安装或管理起来更容易。
- en: 'Some of the features available in Apache Mesos and, of course, in DC/OS are
    as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Apache Mesos和当然DC/OS中可用的功能如下：
- en: '**Linear scalability**: You can scale up to 10,000 hosts without any problems'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性可扩展性**: 你可以扩展到10,000个主机而不会出现任何问题'
- en: '**High availability**: Mesos uses Zookeeper to provide a fault-tolerant replicated
    master and agents'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**: Mesos使用Zookeeper提供容错的复制主节点和代理'
- en: '**Containers support**: Native support for launching containers with Docker
    and AppC images'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器支持**: 原生支持使用Docker和AppC镜像启动容器'
- en: '**Pluggable isolation**: Isolation support for CPU, memory, disk, ports, GPU,
    and modules for custom isolation'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可插拔隔离**: 支持CPU、内存、磁盘、端口、GPU的隔离和自定义隔离模块'
- en: '**APIs and Web UI**: The built-in APIs and Web UI allow you to easily manage
    any aspect of Mesos'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API和Web UI**: 内置的API和Web UI允许你轻松管理Mesos的任何方面'
- en: '**Cross Platform**: You can run Mesos in Linux, OSX, and even Windows'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台**: 你可以在Linux、OSX甚至Windows上运行Mesos'
- en: As you can see, Apache Mesos and DC/OS are an interesting alternative to Docker
    or Kubernetes. Those projects unify all your resources segregated between all
    your nodes and transform them into one distributed system. It gives you the impression
    that you are only managing a single machine.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，Apache Mesos和DC/OS是Docker或Kubernetes的一个有趣的替代方案。这些项目统一了所有节点之间分隔的所有资源，并将它们转换为一个分布式系统。这让你感觉你只是在管理一台单一的机器。
- en: Kubernetes
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Kubernetes is one of the mainstream open source systems used for automating
    deployment, scaling, and management of your containers. It was created by Google
    and it has a vibrant community.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是用于自动化部署、扩展和管理容器的主流开源系统之一。它由谷歌创建，拥有活跃的社区。
- en: 'It is a full orchestration service and among all the features it has, we can
    highlight the following ones:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个完整的编排服务，拥有各种功能，我们可以突出以下功能：
- en: '**Self-healing**: This is an interesting feature that restarts failed containers
    and replaces and reschedules containers when any of your nodes die. It is responsible
    for killing unhealthy containers and also avoids advertising containers that are
    not ready.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自愈**: 这是一个有趣的功能，可以在节点死机时重新启动失败的容器，并替换和重新安排容器。它负责终止不健康的容器，并避免广告未准备好的容器。'
- en: '**Service discovery and load balancing**: This feature allows you to forget
    about creating and managing your own discovery service; you can use what comes
    out of the box. Kubernetes also gives each container its own IP address and a
    DSN name for a set of containers. Thanks to all of this, you can do load-balancing
    easily.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务发现和负载均衡**: 这个功能允许你忘记创建和管理自己的发现服务；你可以使用开箱即用的功能。Kubernetes还为每个容器分配了自己的IP地址和一组容器的DSN名称。由于所有这些，你可以轻松进行负载均衡。'
- en: '**Automated rollouts and rollbacks**: There is nothing more critical than rollouts
    and rollbacks. Kubernetes can manage these actions for you; it will monitor your
    application to ensure that it continues running smoothly while you are doing a
    rollout/rollback.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动部署和回滚**: 没有比部署和回滚更重要的事情了。Kubernetes可以为你管理这些操作；它将监视你的应用程序，以确保在进行部署/回滚时它仍然平稳运行。'
- en: '**Horizontal scaling**: You can scale your application up or down with a single
    command, using a user interface or even define some rules to do it automatically.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**: 你可以使用单个命令扩展或缩小你的应用程序，使用用户界面甚至定义一些规则来自动执行。'
- en: '**Automatic binpacking**: Kubernetes takes care of how to place your containers
    based on their resource requirements and other constraints. The decision is taken
    by trying to maximize the availability.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动装箱**: Kubernetes负责根据容器的资源需求和其他约束条件来放置容器。决策是通过尝试最大化可用性来做出的。'
- en: As you can see, Kubernetes comes with most of the features needed in big projects
    out of the box. For this reason, it is one of the most used systems for containers
    orchestration. We recommend that you investigate more about this project. You
    can find all the information you need on the official page. If you have a specific
    question that you can't find the response in the official documentation for, the
    big community behind this project can help you.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，Kubernetes在大型项目中具备大部分所需的功能。因此，它是最常用的容器编排系统之一。我们建议你对这个项目进行更多的调查。你可以在官方页面上找到你需要的所有信息。如果你有一个在官方文档中找不到答案的具体问题，这个项目背后的大社区可以帮助你。
- en: Deploying to Joyent Triton
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到Joyent Triton
- en: Earlier, we showed you how you can build your Swarm cluster. It is an interesting
    way of managing your infrastructure, but what happens if you need all the power
    of the Cloud but without the inconvenience of dealing with the orchestration?
    In the following example, we assume that you don't have the budget or time to
    set up your Cloud servers with the orchestration software of your choice.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们向您展示了如何构建Swarm集群。这是一种管理基础设施的有趣方式，但是如果您需要云的全部功能，但又不想处理编排的麻烦，会发生什么？在以下示例中，我们假设您没有预算或时间来使用您选择的编排软件设置云服务器。
- en: At the beginning of the chapter, we talked about the major Cloud providers and,
    among all of them, we talked about Joyent. This company has a hosting solution
    called **Triton**; you can use this solution to create VMs or containers with
    a single click or an API call.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们谈到了主要的云提供商，其中包括Joyent。这家公司有一个名为Triton的托管解决方案；您可以使用此解决方案通过单击或API调用创建VM或容器。
- en: The first thing you need to do if you want to use their hosting services is
    to create an account on their [https://www.joyent.com](https://www.joyent.com) page.
    Once you have your account ready, you will have full access to their environment.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用他们的托管服务，第一件事就是在他们的[https://www.joyent.com](https://www.joyent.com)页面上创建一个帐户。一旦您的帐户准备好，您将完全访问他们的环境。
- en: 'Once your account is ready, add an SSH key to your account. This key will be
    used to authenticate you against your containers and the Joyent''s API. If you
    do not have an SSH key to use, you can create one manually. It is very easy to
    create a SSH key, for example, in Mac OS you only need to execute the following
    command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的帐户准备好，就向您的帐户添加一个SSH密钥。此密钥将用于对您的容器和Joyent的API进行身份验证。如果您没有要使用的SSH密钥，可以手动创建一个。创建SSH密钥非常容易，例如，在Mac
    OS中，您只需要执行以下命令：
- en: '[PRE20]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This command will ask you some questions about where the key will be stored
    or the passphrase you want to use to secure your key. Once you answer all the
    questions, usually the key will be stored in the `~/.ssh/id_rsa.pub` file. You
    only need to copy the content of this file to your Joyent's account. If you are
    using Linux, the process of creating a SSH key is pretty similar.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将询问您有关密钥存储位置或要用于保护密钥的密码短语的一些问题。一旦您回答了所有问题，通常密钥将存储在`~/.ssh/id_rsa.pub`文件中。您只需要将此文件的内容复制到您的Joyent帐户中。如果您使用Linux，创建SSH密钥的过程非常类似。
- en: Once you have your account ready, you can start creating containers; you can
    do it using their web UI, but in our case we will show you how to do it from your
    terminal.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的帐户准备好，您就可以开始创建容器；您可以使用他们的Web UI来完成，但在我们的情况下，我们将向您展示如何从终端完成。
- en: 'We were using Docker and Joyent with the Docker API implemented in Triton,
    so you will see how easy it is to make your deployments. The first thing you need
    to do is install the Triton CLI tool; this application was built on Node.js, so
    you need Node.js ([https://nodejs.org](https://nodejs.org)) installed on your
    development machine. Once you have node, you only need to execute the following
    command to install the Triton CLI:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Docker和Docker API在Triton中实现的Joyent，所以您将看到部署有多么容易。您需要做的第一件事是安装Triton CLI工具；这个应用程序是基于Node.js构建的，所以您需要在开发机器上安装Node.js
    ([https://nodejs.org](https://nodejs.org))。一旦您安装了node，您只需要执行以下命令来安装Triton CLI：
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding command will install Triton as a global application on your machine.
    As soon as Triton is available on your computer, you need to configure the tool;
    enter the following command and answer all the questions asked:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在您的机器上将Triton安装为全局应用程序。一旦Triton在您的计算机上可用，您需要配置该工具；输入以下命令并回答所有问题：
- en: '[PRE22]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'At this point, your Triton CLI tool will be ready to be used. Now, it is time
    to configure Docker to use Triton. Open your terminal and execute the following
    command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的Triton CLI工具将准备就绪。现在，是时候配置Docker以使用Triton了。打开您的终端并执行以下命令：
- en: '[PRE23]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding command will configure your local Docker to use Triton. From
    now on, all your Docker commands will be sent to Triton. Let''s try to deploy
    our example application--go to the location of your `docker-compose.yml` file
    and execute the next command:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将配置您的本地Docker以使用Triton。从现在开始，您所有的Docker命令都将发送到Triton。让我们尝试部署我们的示例应用程序--转到您的`docker-compose.yml`文件的位置并执行下一个命令：
- en: '[PRE24]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding command will work like always but, instead of using our development
    machine engine, it will spin up our containers in the Cloud. One of the advantages
    of Triton is that they assign at least one IP address to each container, so if
    you need to get the IP address of a specific container you only need to execute `docker
    ps` to get all the containers running (in Triton) and their names. Once you have
    the name of the container, you only need to execute the following command to obtain
    the IP address from the Triton CLI:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将像往常一样工作，但是，不再使用我们的开发机引擎，而是在云中启动我们的容器。Triton的一个优势是他们为每个容器分配至少一个IP地址，因此如果您需要获取特定容器的IP地址，只需执行`docker
    ps`以获取所有正在运行的容器（在Triton中）及其名称。一旦您获得容器的名称，只需执行以下命令即可从Triton CLI获取IP地址：
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding command will give you the IP address of the container you have
    chosen. Another way of obtaining the IP is from the web UI.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将给出您选择的容器的IP地址。另一种获取IP的方法是从Web UI获取。
- en: Tip
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A docker-compose stop will kill all the containers deployed to the Cloud.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: docker-compose stop将终止部署到云中的所有容器。
- en: Now you can use everything you have learned in the book and deploy to your Joyent
    Triton Cloud without too many problems. This is probably the easiest way of deploying
    your Docker containers in the market right now. Working with Joyent Triton is
    like working in local.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用本书中学到的一切，并且不会遇到太多问题就可以部署到Joyent Triton云中。这可能是目前市场上部署Docker容器最简单的方法。使用Joyent
    Triton就像在本地工作一样。
- en: Be aware that this is not the only option you have to deploy Docker in production;
    we only showed a simple and easy way. You can try other options, such as CoreOS
    and Mesosphere (DC/OS), among others.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不是你在生产环境中部署Docker的唯一选择；我们只展示了一种简单易行的方法。你可以尝试其他选项，比如CoreOS和Mesosphere（DC/OS）等。
- en: What is DevOps?
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是DevOps？
- en: DevOps is a set of practices that emphasizes the collaboration and communication
    between development and operations (IT). The main goal is to establish a culture
    of a rapid, frequent, and more reliable way of releasing software. To achieve
    this goal, the DevOps usually try to automate as much as they can. If your project
    (or company) grows, at some point, you will put some DevOps principles in place
    to secure the future of your application.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是一套强调开发和运维（IT）之间协作和沟通的实践方法。其主要目标是建立一个快速、频繁和更可靠的软件发布文化。为了实现这一目标，DevOps通常会尽可能地自动化。如果你的项目（或公司）发展壮大，你将会在某个时候采用一些DevOps原则来确保你的应用程序的未来。
- en: 'Some of the technical benefits of adopting this culture in your organization
    can be as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的组织中采用这种文化的一些技术好处可能如下：
- en: Aims to maximize the use of **Continuous Integration** and **Continuous Delivery**
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旨在最大化**持续集成**和**持续交付**的使用
- en: Reduces the complexity of the issues to fix
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少需要修复的问题的复杂性
- en: Reduces the number of failures
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少故障数量
- en: Provides a faster resolution of problems
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供更快的问题解决
- en: The main pillar of DevOps is the culture of communication between all parts
    involved in the development of your application, especially between development
    and operations guys. It doesn't matter how nice or amazing your application is,
    a lack of communication inside your organization can shut down your entire project.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的主要支柱是建立在你的应用程序开发中涉及的所有部分之间的沟通文化，特别是在开发和运维人员之间的沟通。你的组织内部的沟通不足可能会导致整个项目的关闭，无论你的应用程序有多么好或令人惊叹。
- en: Once your organization has a really good communication channel between all the
    parts involved in the development of your software, you can analyze and put the
    next pillar of the DevOps culture--the automation--in place. To create a reliable
    system, you need to invest in the automation of repetitive manual tasks and processes;
    this is where continuous integration and continuous delivery come in. Creating
    your CI/CD pipeline will help you automate repetitive tasks like unit tests or
    the deploy, improving the overall quality of your application. It will even help
    you save some time in your day-to-day tasks. Imagine that deploying your application
    manually to your production environment takes an average of 8 minutes each time;
    if you deploy at least once a day, you will be wasting more than 30 hours in a
    whole year only making deploys.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的组织在软件开发中涉及的所有部分之间建立了良好的沟通渠道，你就可以分析并实施DevOps文化的下一个支柱——自动化。为了创建一个可靠的系统，你需要投资于重复手动任务和流程的自动化；这就是持续集成和持续交付发挥作用的地方。创建你的CI/CD管道将帮助你自动化重复的任务，如单元测试或部署，提高应用程序的整体质量。它甚至会帮助你节省一些日常任务的时间。想象一下，手动将你的应用程序部署到生产环境平均每次需要8分钟；如果你至少每天部署一次，你将在一整年中浪费超过30小时的时间。
- en: 'DevOps is all about your application and the process around the development
    and deployment, and the core principles are as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps关乎你的应用程序以及围绕开发和部署的流程，其核心原则如下：
- en: Agile software development
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷软件开发
- en: Continuous integration
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous delivery pipelines
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付管道
- en: Automated and continuous testing
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化和持续测试
- en: Proactive monitoring
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 积极监控
- en: Improved communication and collaboration
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善沟通和协作
- en: As you can see, the DevOps culture is not something you can implement in a few
    hours in your organization, it is a long process in which you need to analyze
    how the development process in your organization works and the required changes
    you need to make to find a more flexible and agile way. We covered most of the
    core principles in this book; it is now up to you to fill the gaps and implement
    a DevOps culture in your organization.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，DevOps文化不是你可以在你的组织中在几个小时内实施的东西，这是一个长期的过程，你需要分析你的组织中的开发流程以及你需要进行的必要变化，以找到更灵活和敏捷的方式。我们在本书中涵盖了大部分核心原则；现在轮到你来填补空白，并在你的组织中实施DevOps文化了。
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we talked about what a Cloud is and what you need to know to
    choose your hosting provider. We also told you about the different options you
    have to orchestrate your application into the Cloud. Now, it is your turn to analyze
    and choose the best option for your project.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了云是什么，以及选择托管提供商所需了解的内容。我们还告诉了你在云中编排应用程序的不同选项。现在，轮到你分析并选择最适合你项目的最佳选项了。
