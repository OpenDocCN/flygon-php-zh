["```php\nnamespace My;\nclass Foo {\n...\n}\nnamespace Your;\nclass Foo {\n...\n}\n\n```", "```php\n$myFoo = new \\My\\Foo();\n$yourFoo = new \\Your\\Foo();\n\n```", "```php\nCREATE TABLE 'users' (\n'id' bigint(20) NOT NULL AUTO_INCREMENT,\n'useremail' varchar(50) NOT NULL,\n'password' char(32) NOT NULL,\n'userhash' char(32) NOT NULL,\n'userlevel' tinyint(4) NOT NULL,\n'username' varchar(100) NOT NULL,\n'phone' varchar(20) NULL,\n'timestamp' int(11) unsigned NOT NULL,\nPRIMARY KEY ('id'),\nUNIQUE KEY 'useremail' ('useremail')\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n```", "```php\n    <?php\n    namespace My\\Dao;\n    abstract class BaseDao {\n    private $db = null;\n    const DB_SERVER = \"localhost\";\n    const DB_USER = \"root\";\n    const DB_PASSWORD = \"root\";\n    const DB_NAME = \"user\";\n    }\n    ?>\n\n    ```", "```php\n    protected final function getDb(){\n    $dsn = 'mysql:dbname='.self::DB_NAME.';host='.self::DB_SERVER;\n    try {\n    $this->db = new \\PDO($dsn, self::DB_USER, self::DB_PASSWORD);\n    } catch (PDOException $e) {\n    throw new \\Exception('Connection failed: ' . $e->getMessage());\n    }\n    return $this->db;\n    }\n\n    ```", "```php\n    $this->db = new \\PDO($dsn, self::DB_USER, self::DB_PASSWORD);\n\n    ```", "```php\n    abstract protected function get($uniqueKey);\n    abstract protected function insert(array $values);\n    abstract protected function update($id, array $values);\n    abstract protected function delete($uniqueKey);\n\n    ```", "```php\n    <?php\n    namespace My\\Dao;\n    class UserDao extends BaseDao {\n    private $db = null;\n    public function __construct() {\n    $this->db = $this->getDb();\n    }\n    }\n    $userDao = new \\My\\Dao\\UserDao;\n    ?>\n\n    ```", "```php\n    public function get($useremail) {\n    $statement = $this->db->prepare(\"SELECT * FROM users WHERE useremail = :useremail LIMIT 1 \");\n    $statement->bindParam(':useremail', $useremail);\n    $statement->execute();\n    if ($statement->rowCount() > 0) {\n    $row = $statement->fetch();\n    return $row;\n    }\n    }\n\n    ```", "```php\n    SELECT * FROM users WHERE useremail = :useremail LIMIT 1;\n\n    ```", "```php\n    public function insert(array $values) {\n    $sql = \"INSERT INTO users \";\n    $fields = array_keys($values);\n    $vals = array_values($values);\n    $sql .= '('.implode(',', $fields).') ';\n    $arr = array();\n    foreach ($fields as $f) {\n    $arr[] = '?';\n    }\n    $sql .= 'VALUES ('.implode(',', $arr).') ';\n    $statement = $this->db->prepare($sql);\n    foreach ($vals as $i=>$v) {\n    $statement->bindValue($i+1, $v);\n    }\n    return $statement->execute();\n    }\n\n    ```", "```php\n    public function update($id, array $values) {\n    $sql = \"UPDATE users SET \";\n    $fields = array_keys($values);\n    $vals = array_values($values);\n    foreach ($fields as $i=>$f) {\n    $fields[$i] .= ' = ? ';\n    }\n    $sql .= implode(',', $fields);\n    $sql .= \" WHERE id = \" . (int)$id .\" LIMIT 1 \";\n    $statement = $this->db->prepare($sql);\n    foreach ($vals as $i=>$v) {\n    $statement->bindValue($i+1, $v);\n    }\n    $statement->execute();\n    }\n\n    ```", "```php\n    public function delete($uniqueKey) { }\n\n    ```", "```php\n    public function useremailTaken($useremail) {\n    $statement = $this->db->prepare(\"SELECT id FROM users WHERE useremail = :useremail LIMIT 1 \");\n    $statement->bindParam(':useremail', $useremail);\n    $statement->execute();\n    return ($statement->rowCount() > 0 );\n    }\n\n    ```", "```php\n    public function checkPassConfirmation($useremail, $password) {\n    $statement = $this->db->prepare(\"SELECT password FROM users WHERE useremail = :useremail LIMIT 1 \");\n    $statement->bindParam(':useremail', $useremail);\n    $statement->execute();\n    if ($statement->rowCount() > 0) {\n    $row = $statement->fetch();\n    return ($password == $row['password']);\n    }\n    return false;\n    }\n\n    ```", "```php\n    public function checkHashConfirmation($useremail, $userhash) {\n    $statement = $this->db->prepare(\"SELECT userhash FROM users WHERE useremail = :useremail LIMIT 1\");\n    $statement->bindParam(':useremail', $useremail);\n    $statement->execute();\n    if ($statement->rowCount() > 0) {\n    $row = $statement->fetch();\n    return ($userhash == $row['userhash']);\n    }\n    return false;\n    }\n\n    ```", "```php\n    <?php\n    namespace My\\Service;\n    use My\\Dao\\UserDao;\n    class ValidatorService {\n    private $values = array();\n    private $errors = array();\n    public $statusMsg = null;\n    public $num_errors;\n    const NAME_LENGTH_MIN = 5;\n    const NAME_LENGTH_MAX = 100;\n    const PASS_LENGTH_MIN = 8;\n    const PASS_LENGTH_MAX = 32;\n    public function __construct() {\n    }\n    public function setUserDao(UserDao $userDao){\n    $this->userDao = $userDao;\n    }\n    }\n    $validator = new \\My\\Service\\ValidatorService;\n    $validator->setUserDao($userDao);\n    ?>\n\n    ```", "```php\n    public function __construct() {\n    if (isset($_SESSION['value_array']) && isset($_SESSION['error_array'])) {\n    $this->values = $_SESSION['value_array'];\n    $this->errors = $_SESSION['error_array'];\n    $this->num_errors = count($this->errors);\n    unset($_SESSION['value_array']);\n    unset($_SESSION['error_array']);\n    } else {\n    $this->num_errors = 0;\n    }\n    if (isset($_SESSION['statusMsg'])) {\n    $this->statusMsg = $_SESSION['statusMsg'];\n    unset($_SESSION['statusMsg']);\n    }\n    }\n\n    ```", "```php\n    $this->values = $_SESSION['value_array'];\n    $this->errors = $_SESSION['error_array'];\n    $this->num_errors = count($this->errors);\n\n    ```", "```php\n    public function setValue($field, $value) {\n    $this->values[$field] = $value;\n    }\n    public function getValue($field) {\n    if (array_key_exists($field, $this->values)) {\n    return htmlspecialchars(stripslashes($this->values[$field]));\n    } else {\n    return \"\";\n    }\n    }\n    private function setError($field, $errmsg) {\n    $this->errors[$field] = $errmsg;\n    $this->num_errors = count($this->errors);\n    }\n    public function getError($field) {\n    if (array_key_exists($field, $this->errors)) {\n    return $this->errors[$field];\n    } else {\n    return \"\";\n    }\n    }\n    public function getErrorArray() {\n    return $this->errors;\n    }\n\n    ```", "```php\n    public function validate($field, $value) {\n    $valid = false;\n    if ($valid == $this->isEmpty($field, $value)) {\n    $valid = true;\n    if ($field == \"name\")\n    $valid = $this->checkSize($field, $value, self::NAME_LENGTH_MIN, self::NAME_LENGTH_MAX);\n    if ($field == \"password\" || $field == \"newpassword\")\n    $valid = $this->checkSize($field, $value, self::PASS_LENGTH_MIN, self::PASS_LENGTH_MAX);\n    if ($valid)\n    $valid = $this->checkFormat($field, $value);\n    }\n    return $valid;\n    }\n    private function isEmpty($field, $value) {\n    $value = trim($value);\n    if (empty($value)) {\n    $this->setError($field, \"Field value not entered\");\n    return true;\n    }\n    return false;\n    }\n    private function checkFormat($field, $value) {\n    switch ($field) {\n    case 'useremail':\n    $regex = \"/^[_+a-z0-9-]+(\\.[_+a-z0-9-]+)*\"\n    . \"@[a-z0-9-]+(\\.[a-z0-9-]{1,})*\"\n    . \"\\.([a-z]{2,}){1}$/i\";\n    $msg = \"Email address invalid\";\n    break;\n    case 'password':\n    case 'newpassword':\n    $regex = \"/^([0-9a-z])+$/i\";\n    $msg = \"Password not alphanumeric\";\n    break;\n    case 'name':\n    $regex = \"/^([a-z ])+$/i\";\n    $msg = \"Name must be alphabetic\";\n    break;\n    case 'phone':\n    $regex = \"/^([0-9])+$/\";\n    $msg = \"Phone not numeric\";\n    break;\n    default:;\n    }\n    if (!preg_match($regex, ( $value = trim($value)))) {\n    $this->setError($field, $msg);\n    return false;\n    }\n    return true;\n    }\n    private function checkSize($field, $value, $minLength, $maxLength) {\n    $value = trim($value);\n    if (strlen($value) < $minLength || strlen($value) > $maxLength) {\n    $this->setError($field, \"Value length should be within \".$minLength.\" & \".$maxLength.\" characters\");\n    return false;\n    }\n    return true;\n    }\n\n    ```", "```php\n    public function validateCredentials($useremail, $password) {\n    $result = $this->userDao->checkPassConfirmation($useremail, md5($password));\n    if ($result === false) {\n    $this->setError(\"password\", \"Email address or password is incorrect\");\n    return false;\n    }\n    return true;\n    }\n\n    ```", "```php\n    $result = $this->userDao->checkPassConfirmation($useremail, md5($password));\n\n    ```", "```php\n    public function emailExists($useremail) {\n    if ($this->userDao->useremailTaken($useremail)) {\n    $this->setError('useremail', \"Email already in use\");\n    return true;\n    }\n    return false;\n    }\n\n    ```", "```php\n    public function checkPassword($useremail, $password) {\n    $result = $this->userDao->checkPassConfirmation($useremail, md5($password));\n    if ($result === false) {\n    $this->setError(\"password\", \"Current password incorrect\");\n    return false;\n    }\n    return true;\n    }\n\n    ```", "```php\n    <?php\n    namespace My\\Service;\n    use My\\Dao\\UserDao;\n    use My\\Service\\ValidatorService;\n    class UserService {\n    public $useremail;\n    private $userid;\n    public $username;\n    public $userphone;\n    private $userhash;\n    private $userlevel;\n    public $logged_in;\n    const ADMIN_EMAIL = \"admin@mysite.com\";\n    const GUEST_NAME = \"Guest\";\n    const ADMIN_LEVEL = 9;\n    const USER_LEVEL = 1;\n    const GUEST_LEVEL = 0;\n    const COOKIE_EXPIRE = 8640000;\n    const COOKIE_PATH = \"/\";\n    public function __construct(UserDao $userDao, ValidatorService $validator) {\n    $this->userDao = $userDao;\n    $this->validator = $validator;\n    $this->logged_in = $this->isLogin();\n    if (!$this->logged_in) {\n    $this->useremail = $_SESSION['useremail'] = self::GUEST_NAME;\n    $this->userlevel = self::GUEST_LEVEL;\n    }\n    }\n    }\n    $userService = new \\My\\Service\\UserService($userDao, $validator);\n    ?>\n\n    ```", "```php\n    if (!$this->logged_in) {\n    $this->useremail = $_SESSION['useremail'] = self::GUEST_NAME;\n    $this->userlevel = self::GUEST_LEVEL;\n    }\n\n    ```", "```php\n    private function isLogin() {\n    if (isset($_SESSION['useremail']) && isset($_SESSION['userhash']) &&\n    $_SESSION['useremail'] != self::GUEST_NAME) {\n    if ($this->userDao->checkHashConfirmation($_SESSION['useremail'], $_SESSION['userhash']) === false) {\n    unset($_SESSION['useremail']);\n    unset($_SESSION['userhash']);\n    unset($_SESSION['userid']);\n    return false;\n    }\n    $userinfo = $this->userDao->get($_SESSION['useremail']);\n    if(!$userinfo){\n    return false;\n    }\n    $this->useremail = $userinfo['useremail'];\n    $this->userid = $userinfo['id'];\n    $this->userhash = $userinfo['userhash'];\n    $this->userlevel = $userinfo['userlevel'];\n    $this->username = $userinfo['username'];\n    $this->userphone = $userinfo['phone'];\n    return true;\n    }\n    if (isset($_COOKIE['cookname']) && isset($_COOKIE['cookid'])) {\n    $this->useremail = $_SESSION['useremail'] = $_COOKIE['cookname'];\n    $this->userhash = $_SESSION['userhash'] = $_COOKIE['cookid'];\n    return true;\n    }\n    return false;\n    }\n\n    ```", "```php\n    public function login($values) {\n    $useremail = $values['useremail'];\n    $password = $values['password'];\n    $rememberme = isset($values['rememberme']);\n    $this->validator->validate(\"useremail\", $useremail);\n    $this->validator->validate(\"password\", $password);\n    if ($this->validator->num_errors > 0) {\n    return false;\n    }\n    if (!$this->validator->validateCredentials($useremail, $password)) {\n    return false;\n    }\n    $userinfo = $this->userDao->get($useremail);\n    if(!$userinfo){\n    return false;\n    }\n    $this->useremail = $_SESSION['useremail'] = $userinfo['useremail'];\n    $this->userid = $_SESSION['userid'] = $userinfo['id'];\n    $this->userhash = $_SESSION['userhash'] = md5(microtime());\n    $this->userlevel = $userinfo['userlevel'];\n    $this->username = $userinfo['username'];\n    $this->userphone = $userinfo['phone'];\n    $this->userDao->update($this->userid, array(\"userhash\" => $this->userhash));\n    if ($rememberme == 'true') {\n    setcookie(\"cookname\", $this->useremail, time() + self::COOKIE_EXPIRE, self::COOKIE_PATH);\n    setcookie(\"cookid\", $this->userhash, time() + self::COOKIE_EXPIRE, self::COOKIE_PATH);\n    }\n    return true;\n    }\n\n    ```", "```php\n    $this->userhash = $_SESSION['userhash'] = md5(microtime());\n\n    ```", "```php\n    $this->userDao->update($this->userid, array(\"userhash\" => $this->userhash));\n\n    ```", "```php\n    public function register($values) {\n    $username = $values['name'];\n    $useremail = $values['useremail'];\n    $password = $values['password'];\n    $phone = $values['phone'];\n    $this->validator->validate(\"name\", $username);\n    $this->validator->validate(\"useremail\", $useremail);\n    $this->validator->validate(\"password\", $password);\n    $this->validator->validate(\"phone\", $phone);\n    if ($this->validator->num_errors > 0) {\n    return false;\n    }\n    if($this->validator->emailExists($useremail)) {\n    return false;\n    }\n    $ulevel = (strcasecmp($useremail, self::ADMIN_EMAIL) == 0) ? self::ADMIN_LEVEL : self::USER_LEVEL;\n    return $this->userDao->insert(array(\n    'useremail' => $useremail, 'password' => md5($password),\n    'userlevel' => $ulevel, 'username' => $username,\n    'phone' => $phone, 'timestamp' => time()\n    ));\n    }\n\n    ```", "```php\n    public function getUser($useremail){\n    $this->validator->validate(\"useremail\", $useremail);\n    if ($this->validator->num_errors > 0) {\n    return false;\n    }\n    if (!$this->validator->emailExists($useremail)) {\n    return false;\n    }\n    $userinfo = $this->userDao->get($useremail);\n    if($userinfo){\n    return $userinfo;\n    }\n    return false;\n    }\n\n    ```", "```php\n    public function update($values) {\n    $username = $values['name'];\n    $phone = $values['phone'];\n    $password = $values['password'];\n    $newPassword = $values['newpassword'];\n    $updates = array();\n    if($username) {\n    $this->validator->validate(\"name\", $username);\n    $updates['username'] = $username;\n    }\n    if($phone) {\n    $this->validator->validate(\"phone\", $phone);\n    $updates['phone'] = $phone;\n    }\n    if($password && $newPassword){\n    $this->validator->validate(\"password\", $password);\n    $this->validator->validate(\"newpassword\", $newPassword);\n    }\n    if ($this->validator->num_errors > 0) {\n    return false;\n    }\n    if($password && $newPassword){\n    if ($this->validator->checkPassword($this->useremail, $password)===false) {\n    return false;\n    }\n    $updates['password'] = md5($newPassword);\n    }\n    $this->userDao->update($this->userid, $updates);\n    return true;\n    }\n\n    ```", "```php\n    public function logout() {\n    if (isset($_COOKIE['cookname']) && isset($_COOKIE['cookid'])) {\n    setcookie(\"cookname\", \"\", time() - self::COOKIE_EXPIRE, self::COOKIE_PATH);\n    setcookie(\"cookid\", \"\", time() - self::COOKIE_EXPIRE, self::COOKIE_PATH);\n    }\n    unset($_SESSION['useremail']);\n    unset($_SESSION['userhash']);\n    $this->logged_in = false;\n    $this->useremail = self::GUEST_NAME;\n    $this->userlevel = self::GUEST_LEVEL;\n    }\n\n    ```", "```php\n    <?php\n    namespace My\\Application;\n    use My\\Service\\UserService;\n    use My\\Service\\ValidatorService;\n    session_start();\n    require_once \"Dao/BaseDao.php\";\n    require_once \"Dao/UserDao.php\";\n    require_once \"Service/ValidatorService.php\";\n    require_once \"Service/UserService.php\";\n    class UserApplication {\n    public function __ construct (UserService $userService, ValidatorService $validator) {\n    $this->userService = $userService;\n    $this->validator = $validator;\n    if (isset($_POST['login'])) {\n    $this->login();\n    }\n    else if (isset($_POST['register'])) {\n    $this->register();\n    }\n    else if (isset($_POST['update'])) {\n    $this->update();\n    }\n    else if ( isset($_GET['logout']) ) {\n    $this->logout();\n    }\n    }\n    }\n    $userApp = new \\My\\Application\\UserApplication($userService, $validator);\n    ?>\n\n    ```", "```php\n    public function login() {\n    $success = $this->userService->login($_POST);\n    if ($success) {\n    $_SESSION['statusMsg'] = \"Successful login!\";\n    } else {\n    $_SESSION['value_array'] = $_POST;\n    $_SESSION['error_array'] = $this->validator->getErrorArray();\n    }\n    header(\"Location: index.php\");\n    }\n\n    ```", "```php\n    $success = $this->userService->login($_POST);\n\n    ```", "```php\n    public function register() {\n    $success = $this->userService->register($_POST);\n    if ($success) {\n    $_SESSION['statusMsg'] = \"Registration was successful!\";\n    header(\"Location: index.php\");\n    } else {\n    $_SESSION['value_array'] = $_POST;\n    $_SESSION['error_array'] = $this->validator->getErrorArray();\n    header(\"Location: register.php\");\n    }\n    }\n\n    ```", "```php\n    public function update() {\n    $success = $this->userService->update($_POST);\n    if ($success) {\n    $_SESSION['statusMsg'] = \"Successfully Updated!\";\n    header(\"Location: profile.php\");\n    } else {\n    $_SESSION['value_array'] = $_POST;\n    $_SESSION['error_array'] = $this->validator->getErrorArray();\n    header(\"Location: profileedit.php\");\n    }\n    }\n\n    ```", "```php\n    public function logout(){\n    $success = $this->userService->logout();\n    header(\"Location: index.php\");\n    }\n\n    ```", "```php\n    <?php\n    require_once 'UserApplication.php';\n    ?>\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title></title>\n    </head>\n    <body>\n    </body>\n    </html>\n\n    ```", "```php\n    <?php\n    if (isset($validator->statusMsg)) {\n    echo \"<span style=\\\"color:#207b00;\\\">\" . $validator->statusMsg . \"</span>\";\n    }\n    if ($userService->logged_in) {\n    echo \"<h2>Welcome $userService->username!</h2>\";\n    echo \"<a href='profile.php'>My Profile</a> | \"\n    . \"<a href='profileedit.php'>Edit Profile</a> | \"\n    . \"<a href='UserApplication.php?logout=1'>Logout</a> \";\n    }\n    ?>\n\n    ```", "```php\n    include 'menu.php';\n\n    ```", "```php\n    <?php\n    require_once 'UserApplication.php';\n    ?>\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title></title>\n    </head>\n    <body>\n    <?php\n    include 'menu.php';\n    if (!$userService->logged_in) {\n    ?>\n    <h2>User Registration</h2><br />\n    <?php\n    if ($validator->num_errors > 0) {\n    echo \"<span style=\\\"color:#ff0000;\\\">\" . $validator->num_errors . \" error(s) found</span>\";\n    }\n    ?> **<form action=\"UserApplication.php\" method=\"POST\">\n    Name: <br />\n    <input type=\"text\" name=\"name\" value=\"<?= $validator->getValue(\"name\") ?>\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\".$validator->getError(\"name\").\"</span>\"; ?>\n    <br />\n    Email: <br />\n    <input type=\"text\" name=\"useremail\" value=\"<?= $validator->getValue(\"useremail\") ?>\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\".$validator->getError(\"useremail\").\"</span>\"; ?>\n    <br />\n    Password:<br />\n    <input type=\"password\" name=\"password\" value=\"\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\".$validator->getError(\"password\").\"</span>\"; ?>\n    <br />\n    Phone: <br />\n    <input type=\"text\" name=\"phone\" value=\"<?= $validator->getValue(\"phone\") ?>\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\".$validator->getError(\"phone\").\"</span>\"; ?>\n    <br /><br />\n    <input type=\"hidden\" name=\"register\" value=\"1\">\n    <input type=\"submit\" value=\"Register\">\n    </form>**\n    <br />\n    Already registered? <a href=\"index.php\">Login here</a>\n    <?php\n    }\n    ?>\n    </body>\n    </html>\n\n    ```", "```php\n    <form action=\"UserApplication.php\" method=\"POST\">\n\n    ```", "```php\n    Name: <br />\n    <input type=\"text\" name=\"name\" value=\"<?= $validator-> getValue(\"name\") ?>\"> <? echo \"<span style= \\\"color:#ff0000;\\\">\".$validator->getError(\"name\").\"</span>\"; ?>\n\n    ```", "```php\n    <?php\n    include 'menu.php';\n    if (!$userService->logged_in) {\n    ?>\n    <h2>User Login</h2>\n    <br />\n    <?php\n    if ($validator->num_errors > 0) {\n    echo \"<span style=\\\"color:#ff0000;\\\">\" . $validator->num_errors . \" error(s) found</span>\";\n    }\n    ?> **<form action=\"UserApplication.php\" method=\"POST\">\n    Email: <br />\n    <input type=\"text\" name=\"useremail\" value=\"<?= $validator->getValue(\"useremail\") ?>\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\".$validator->getError(\"useremail\").\"</span>\"; ?>\n    <br />\n    Password:<br />\n    <input type=\"password\" name=\"password\" value=\"\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\".$validator->getError(\"password\").\"</span>\"; ?>\n    <br />\n    <input type=\"checkbox\" name=\"rememberme\" <?=($validator->getValue(\"rememberme\") != \"\")?\"checked\":\"\"?>>\n    <font size=\"2\">Remember me next time </font>\n    <br />\n    <input type=\"hidden\" name=\"login\" value=\"1\">\n    <input type=\"submit\" value=\"Login\">\n    </form>**\n    <br />\n    New User? <a href=\"register.php\">Register here</a>\n    <?php\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    include 'menu.php';\n    if ($userService->logged_in) {\n    echo '<h2>User Profile</h2>';\n    echo \"Name : \" . $userService->username . \"<br />\";\n    echo \"Email: \" . $userService->useremail . \"<br />\";\n    echo \"Phone: \" . $userService->userphone . \"<br />\";\n    }\n    ?>\n\n    ```", "```php\n    <?php\n    include 'menu.php';\n    if ($userService->logged_in) {\n    ?>\n    <h2>Edit Profile</h2><br />\n    <?php\n    if ($validator->num_errors > 0) {\n    echo \"<span style=\\\"color:#ff0000;\\\">\" . $validator->num_errors . \" error(s) found</span>\";\n    }\n    ?> **<form action=\"UserApplication.php\" method=\"POST\">\n    Name: <br />\n    <input type=\"text\" name=\"name\" value=\"<?= ($validator->getValue(\"name\") != \"\") ? $validator->getValue(\"name\") : $userService->username ?>\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\" . $validator->getError(\"name\") . \"</span>\"; ?>\n    <br />\n    Password:<br />\n    <input type=\"password\" name=\"password\" value=\"\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\" . $validator->getError(\"password\") . \"</span>\"; ?>\n    <br />\n    New Password: <font size=\"2\">(Leave blank to remain password unchanged)</font><br />\n    <input type=\"password\" name=\"newpassword\" value=\"\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\" . $validator->getError(\"newpassword\") . \"</span>\"; ?>\n    <br />\n    Phone: <br />\n    <input type=\"text\" name=\"phone\" value=\"<?= ($validator->getValue(\"phone\") != \"\") ? $validator->getValue(\"phone\") : $userService->userphone ?>\"> <? echo \"<span style=\\\"color:#ff0000;\\\">\" . $validator->getError(\"phone\") . \"</span>\"; ?>\n    <br /><br />\n    <input type=\"hidden\" name=\"update\" value=\"1\">\n    <input type=\"submit\" value=\"Save\">\n    </form>**\n    <?php\n    }\n    ?>\n\n    ```", "```php\n    <a href='UserApplication.php?logout=1'>Logout</a>\n\n    ```"]