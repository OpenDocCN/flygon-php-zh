["```php\n    // /repo/ch04/php8_ffi_array.php\n    $type = FFI::arrayType(FFI::type(\"char\"), [3, 3]);\n    $arr\u00a0\u00a0= FFI::new($type);\n    ```", "```php\n    $pos\u00a0\u00a0\u00a0= 0;\n    $val\u00a0\u00a0\u00a0= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    $y_max = count($arr);\n    ```", "```php\n    for ($y = 0; $y < $y_max; $y++) {\n    \u00a0\u00a0\u00a0\u00a0$x_max = count($arr[$y]);\n    \u00a0\u00a0\u00a0\u00a0for ($x = 0; $x < $x_max; $x++) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$arr[$y][$x]->cdata = $val[$pos++];\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    var_dump($arr)\n    ```", "```php\n    root@php8_tips_php8 [ /repo/ch04 ]# php \n    php8_ffi_array.php \n    object(FFI\\CData:char[3][3])#2 (3) {\n    \u00a0\u00a0[0]=> object(FFI\\CData:char[3])#3 (3) {\n    \u00a0\u00a0\u00a0\u00a0[0]=> string(1) \"A\"\n    \u00a0\u00a0\u00a0\u00a0[1]=> string(1) \"B\"\n    \u00a0\u00a0\u00a0\u00a0[2]=> string(1) \"C\"\n    \u00a0\u00a0}\n    \u00a0\u00a0[1]=> object(FFI\\CData:char[3])#1 (3) {\n    \u00a0\u00a0\u00a0\u00a0[0]=> string(1) \"D\"\n    \u00a0\u00a0\u00a0\u00a0[1]=> string(1) \"E\"\n    \u00a0\u00a0\u00a0\u00a0[2]=> string(1) \"F\"\n    \u00a0\u00a0}\n    \u00a0\u00a0[2]=> object(FFI\\CData:char[3])#4 (3) {\n    \u00a0\u00a0\u00a0\u00a0[0]=> string(1) \"G\"\n    \u00a0\u00a0\u00a0\u00a0[1]=> string(1) \"H\"\n    \u00a0\u00a0\u00a0\u00a0[2]=> string(1) \"I\"\n    }\n    ```", "```php\nPHP Fatal error:\u00a0\u00a0Uncaught TypeError: implode(): Argument #2 ($array) must be of type ?array, FFI\\CData given in /repo/ch04/php8_ffi_array.php:25\n```", "```php\n    // /repo/ch04/php8_ffi_cdef.php\n    $key\u00a0\u00a0= '';\n    $size = 4;\n    ```", "```php\n    $code = <<<EOT\n    \u00a0\u00a0\u00a0\u00a0void srand (unsigned int seed);\n    \u00a0\u00a0\u00a0\u00a0int rand (void);\n    EOT;\n    $ffi = FFI::cdef($code, 'libc.so.6');\n    ```", "```php\n    $ffi->srand(random_int(0, 999));\n    for ($x = 0; $x < $size; $x++)\n    \u00a0\u00a0\u00a0\u00a0$key .= sprintf('%x', $ffi->rand());\n    echo $key\n    ```", "```php\n    root@php8_tips_php8 [ /repo/ch04 ]# php php8_ffi_cdef.php\n    23f306d51227432e7d8d921763b7eedf\n    ```", "```php\n    // /repo/ch04/php8_ffi_memcmp.php\n    $a = FFI::new(\"char[6]\");\n    $b = FFI::new(\"char[6]\");\n    $c = FFI::new(\"char[6]\");\n    $d = FFI::new(\"char[6]\");\n    ```", "```php\n    $populate = function ($cdata, $start, $offset, $num) {\n    \u00a0\u00a0\u00a0\u00a0for ($x = 0; $x < $num; $x++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$cdata[$x + $offset] = chr($x + $offset + \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$start);\n    \u00a0\u00a0\u00a0\u00a0return $cdata;\n    };\n    ```", "```php\n    $a = $populate($a, 65, 0, 6);\n    $b = $populate($b, 65, 0, 3);\n    $b = $populate($b, 85, 3, 3);\n    $c = $populate($c, 71, 0, 6);\n    $d = $populate($d, 71, 0, 6);\n    ```", "```php\n    $patt = \"%2s : %6s\\n\";\n    printf($patt, '$a', FFI::string($a, 6));\n    printf($patt, '$b', FFI::string($b, 6));\n    printf($patt, '$c', FFI::string($c, 6));\n    printf($patt, '$d', FFI::string($d, 6));\n    ```", "```php\n    $a : ABCDEF\n    $b : ABCXYZ\n    $c : GHIJKL\n    $d : GHIJKL\n    ```", "```php\n    PHP Fatal error:\u00a0\u00a0Uncaught FFI\\Exception: Comparison of incompatible C types\n    ```", "```php\n    PHP Warning:\u00a0\u00a0strcmp() expects parameter 1 to be string, object given\n    ```", "```php\n    $p = \"%20s : %2d\\n\";\n    printf($p, 'memcmp($a, $b, 6)', FFI::memcmp($a, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$b, 6));\n    printf($p, 'memcmp($c, $a, 6)', FFI::memcmp($c, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$a, 6));\n    printf($p, 'memcmp($c, $d, 6)', FFI::memcmp($c, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$d, 6));\n    ```", "```php\n    \u00a0\u00a0\u00a0memcmp($a, $b, 6) : -1\n    \u00a0\u00a0\u00a0memcmp($c, $a, 6) :\u00a0\u00a01\n    \u00a0\u00a0\u00a0memcmp($c, $d, 6) :\u00a0\u00a00\n    ```", "```php\n    echo \"\\nUsing FFI::memcmp() but not full length\\n\";\n    printf($p, 'memcmp($a, $b, 3)', FFI::memcmp($a, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$b, 3));\n    ```", "```php\n    Using FFI::memcmp() but not full length\n    \u00a0\u00a0\u00a0memcmp($a, $b, 3) :\u00a0\u00a00\n    ```", "```php\n    // /repo/ch04/php8_ffi_typeof.php\n    $char = FFI::new(\"char[6]\");\n    for ($x = 0; $x < 6; $x++)\n    \u00a0\u00a0\u00a0\u00a0$char[$x] = chr(65 + $x);\n    ```", "```php\n    try {\n    \u00a0\u00a0\u00a0\u00a0echo 'Length of $char is ' . strlen($char);\n    } catch (Throwable $t) {\n    \u00a0\u00a0\u00a0\u00a0echo $t::class . ':' . $t->getMessage();\n    }\n    ```", "```php\n    TypeError:strlen(): Argument #1 ($str) must be of type string, FFI\\CData given\n    ```", "```php\n    echo '$char is ' .\n    \u00a0\u00a0\u00a0\u00a0((ctype_alnum($char)) ? 'alpha' : 'non-alpha');\n    ```", "```php\n    $char is non-alpha\n    ```", "```php\n    $type = FFI::typeOf($char);\n    var_dump($type);\n    ```", "```php\n    object(FFI\\CType:char[6])#3 (0) {}\n    ```", "```php\n    $struct = 'struct Bad { char c; double d; int i; }; '\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. 'struct Good { double d; int i; char c; }; \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0';\n    $ffi = FFI::cdef($struct);\n    ```", "```php\n    $bad = $ffi->new(\"struct Bad\");\n    $good = $ffi->new(\"struct Good\");\n    var_dump($bad, $good);\n    ```", "```php\n    object(FFI\\CData:struct Bad)#2 (3) {\n    \u00a0\u00a0[\"c\"]=> string(1) \"\"\n    \u00a0\u00a0[\"d\"]=> float(0)\n    \u00a0\u00a0[\"i\"]=> int(0)\n    }\n    object(FFI\\CData:struct Good)#3 (3) {\n    \u00a0\u00a0[\"d\"]=> float(0)\n    \u00a0\u00a0[\"i\"]=> int(0)\n    \u00a0\u00a0[\"c\"]=> string(1) \"\"\n    }\n    ```", "```php\n    echo \"\\nBad Alignment:\\t\" . FFI::alignof($bad);\n    echo \"\\nBad Size:\\t\" . FFI::sizeof($bad);\n    echo \"\\nGood Alignment:\\t\" . FFI::alignof($good);\n    echo \"\\nGood Size:\\t\" . FFI::sizeof($good);\n    ```", "```php\n    Bad Alignment:\u00a0\u00a08\n    Bad Size:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a024\n    Good Alignment: 8\n    Good Size:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016\n    ```", "```php\n    // /repo/ch04/php8_ffi_addr_free_memset_memcpy.php\n    $size = 6;\n    $arr\u00a0\u00a0= FFI::new(FFI::type(\"char[$size]\"));\n    FFI::memset($arr, 65, $size);\n    echo FFI::string($arr, $size);\n    ```", "```php\n    AAAAAA\n    ```", "```php\n    $arr2\u00a0\u00a0= FFI::new(FFI::type(\"char[$size]\"));\n    FFI::memcpy($arr2, $arr, $size);\n    echo FFI::string($arr2, $size);\n    ```", "```php\n    AAAAAA\n    ```", "```php\n    $ref = FFI::addr($arr);\n    FFI::memset($ref[0], 66, 6);\n    echo FFI::string($arr, $size);\n    var_dump($ref, $arr, $arr2);\n    ```", "```php\n    BBBBBB\n    object(FFI\\CData:char(*)[6])#2 (1) {\n    \u00a0\u00a0[0]=>\u00a0\u00a0\u00a0object(FFI\\CData:char[6])#4 (6) {\n    \u00a0\u00a0\u00a0\u00a0[0]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0\u00a0\u00a0[1]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0\u00a0\u00a0[2]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0\u00a0\u00a0[3]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0\u00a0\u00a0[4]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0\u00a0\u00a0[5]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0}\n    }\n    object(FFI\\CData:char[6])#3 (6) {\n    \u00a0\u00a0[0]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0[1]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0[2]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0[3]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0[4]=>\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0[5]=>\u00a0\u00a0string(1) \"B\"\n    }\n    object(FFI\\CData:char[6])#4 (6) {\n    \u00a0\u00a0[0]=>\u00a0\u00a0string(1) \"A\"\n    \u00a0\u00a0[1]=>\u00a0\u00a0string(1) \"A\"\n    \u00a0\u00a0[2]=>\u00a0\u00a0string(1) \"A\"\n    \u00a0\u00a0[3]=>\u00a0\u00a0string(1) \"A\"\n    \u00a0\u00a0[4]=>\u00a0\u00a0string(1) \"A\"\n    \u00a0\u00a0[5]=>\u00a0\u00a0string(1) \"A\"\n    }\n    ```", "```php\n$a = 123;\n$b = \"456\";\necho $a + $b;\n```", "```php\n$a = 123;\n$b = \"456\";\necho (string) ($a + (int) $b);\n```", "```php\n    // /repo/ch04/php8_ffi_cast.php\n    // not all lines are shown\n    $patt = \"%2d : %16s\\n\";\n    $int1 = FFI::new(\"int\");\n    $int1->cdata = 123;\n    $bool = FFI::cast(FFI::type(\"bool\"), $int1);\n    printf($patt, __LINE__, (string) $int1->cdata);\n    printf($patt, __LINE__, (string) $bool->cdata);\n    ```", "```php\n     8 :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0123\n     9 :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\n    ```", "```php\n    $int2 = FFI::new(\"int\");\n    $int2->cdata = 123;\n    $float1 = FFI::cast(FFI::type(\"float\"), $int2);\n    $int3\u00a0\u00a0\u00a0= FFI::cast(FFI::type(\"int\"), $float1);\n    printf($patt, __LINE__, (string) $int2->cdata);\n    printf($patt, __LINE__, (string) $float1->cdata);\n    printf($patt, __LINE__, (string) $int3->cdata);\n    ```", "```php\n    15 :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0123\n    16 : 1.7235971111195E-43\n    17 :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0123\n    ```", "```php\n    try {\n    \u00a0\u00a0\u00a0\u00a0$float2 = FFI::new(\"float\");\n    \u00a0\u00a0\u00a0\u00a0$float2->cdata = 22/7;\n    \u00a0\u00a0\u00a0\u00a0$char1\u00a0\u00a0\u00a0= FFI::cast(FFI::type(\"char[20]\"), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$float2);\n    \u00a0\u00a0\u00a0\u00a0printf($patt, __LINE__, (string) $float2->cdata);\n    \u00a0\u00a0\u00a0\u00a0printf($patt, __LINE__, (string) $char1->cdata);\n    } catch (Throwable $t) {\n    \u00a0\u00a0\u00a0\u00a0echo get_class($t) . ':' . $t->getMessage();\n    }\n    ```", "```php\n    FFI\\Exception:attempt to cast to larger type\n    ```", "```php\n    #include <stdio.h>\n    void bubble_sort(int [], int);\n    void bubble_sort(int list[], int n) {\n    \u00a0\u00a0\u00a0\u00a0int c, d, t, p;\n    \u00a0\u00a0\u00a0\u00a0for (c = 0 ; c < n - 1; c++) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p = 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (d = 0 ; d < n - c - 1; d++) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (list[d] > list[d+1]) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t = list[d];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list[d] = list[d+1];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list[d+1] = t;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p++;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (p == 0) break;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    // /repo/ch04/php8_ffi_using_func_from_lib.php\n    function show($label, $arr, $max) \n    {\n    \u00a0\u00a0\u00a0\u00a0$output = $label . \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0for ($x = 0; $x < $max; $x++)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$output .= $arr[$x] . ',';\n    \u00a0\u00a0\u00a0\u00a0return substr($output, 0, -1) . \"\\n\";\n    }\n    ```", "```php\n    $bubble = FFI::cdef(\n    \u00a0\u00a0\u00a0\u00a0\"void bubble_sort(int [], int);\",\n    \u00a0\u00a0\u00a0\u00a0\"./libbubble.so\");\n    ```", "```php\n    $max\u00a0\u00a0\u00a0= 16;\n    $arr_b = FFI::new('int[' . $max . ']');\n    for ($i = 0; $i < $max; $i++)\n    \u00a0\u00a0\u00a0\u00a0$arr_b[$i]->cdata = rand(0,9999);\n    ```", "```php\n    echo show('Before Sort', $arr_b, $max);\n    $bubble->bubble_sort($arr_b, $max);\n    echo show('After Sort', $arr_b, $max);\n    ```", "```php\n    Before Sort\n    245,8405,8580,7586,9416,3524,8577,4713,\n    9591,1248,798,6656,9064,9846,2803,304\n    After Sort\n    245,304,798,1248,2803,3524,4713,6656,7586,\n    8405,8577,8580,9064,9416,9591,9846\n    ```", "```php\n    // /repo/ch04/php8_php_callbacks.php\n    $zend = FFI::cdef(\"\n    \u00a0\u00a0\u00a0\u00a0typedef int (*zend_write_func_t)(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *str,size_t str_length);\n    \u00a0\u00a0\u00a0\u00a0extern zend_write_func_t zend_write;\n    \");\n    ```", "```php\n    echo \"Original echo command does not output LF:\\n\";\n    echo 'A','B','C';\n    echo 'Next line';\n    ```", "```php\n    Original echo command does not output LF:\n    ABCNext line\n    ```", "```php\n    $zend->zend_write = function($str, $len) {\n    \u00a0\u00a0\u00a0\u00a0global $orig_zend_write;\n    \u00a0\u00a0\u00a0\u00a0$ret = $orig_zend_write($str, $len);\n    \u00a0\u00a0\u00a0\u00a0$orig_zend_write(\"\\n\", 1);\n    \u00a0\u00a0\u00a0\u00a0return $ret;\n    };\n    ```", "```php\n    echo 'Revised echo command adds LF:';\n    echo 'A','B','C';\n    ```", "```php\n    Revised echo command adds LF:\n    A\n    B\n    C\n    ```"]