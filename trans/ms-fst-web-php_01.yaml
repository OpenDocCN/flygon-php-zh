- en: Faster Web – Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更快速的网络-入门
- en: The Faster Web is an expression that has been around for a few years now and
    has been used to designate many different aspects of web performance. In this
    book, we will take a closer look at what it is. Why is it important? Is it the
    same thing as performance? How do we measure it? When should we start thinking
    about it when developing a new project? What are the underlying technologies and
    how do we harness the power of these technologies in order to make our web projects
    part of the Faster Web?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 更快速的网络是一个已经存在几年的表达，用来指代网络性能的许多不同方面。在本书中，我们将更仔细地看看它是什么。为什么它重要？它和性能是一样的吗？我们如何测量它？在开发新项目时何时应该开始考虑它？底层技术是什么，我们如何利用这些技术的力量，使我们的网络项目成为更快速的网络的一部分？
- en: In this first chapter, we will start by defining what the Faster Web is and
    try to better understand the formal aspects of it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先定义更快速的网络是什么，并尝试更好地了解其正式方面。
- en: Also, throughout the entire book, we will provide many code examples that will
    allow us to better understand the concepts behind the Faster Web. We will take
    the time to look back at its origins, assess its current developments, and look
    forward to the future in order to understand its next important milestone.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在整本书中，我们将提供许多代码示例，以帮助我们更好地理解更快速的网络背后的概念。我们将花时间回顾其起源，评估其当前发展，并展望未来，以了解其下一个重要的里程碑。
- en: For now, we will start with the installation of benchmarking and profiling tools
    inside a *Docker* container in order to learn how to use them. Also, we will take
    the time to understand how to measure performance and determine if a website or
    web application is part of the Faster Web or not.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将从在*Docker*容器中安装基准测试和分析工具开始，以便学会如何使用它们。此外，我们将花时间了解如何测量性能，并确定网站或Web应用程序是否属于更快速的网络。
- en: 'Therefore, this chapter will cover the following points:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章将涵盖以下几点：
- en: Understanding what the Faster Web is and why it is important
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更快速的网络是什么，以及为什么它很重要
- en: Learning to distinguish between the Faster Web and performance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会区分更快速的网络和性能
- en: Knowing how to measure the Faster Web
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 知道如何测量更快速的网络
- en: Installing, configuring, and using benchmark testing and profiling tools
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装、配置和使用基准测试和分析工具
- en: What is the Faster Web?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是更快速的网络？
- en: 'In 2009, Google announced its intentions to make the web faster[1] and launched
    a corresponding initiative by which the web community was invited to think of
    ways of making the internet go faster. It was stated that "*people prefer faster,
    more responsive apps"* and that this was the main reason behind Google''s initiative.
    The announcement also included a list of many challenges identified by Google
    as being the first order of business of this initiative. The main ones were:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年，谷歌宣布其意图使网络更快[1]，并启动了相应的倡议，邀请网络社区想出使互联网更快的方法。宣布称“人们更喜欢更快速、更具响应性的应用程序”，这是谷歌倡议的主要原因。该公告还包括谷歌确定的许多挑战的清单，这些挑战被视为该倡议的首要任务。主要挑战包括：
- en: Updating aging protocols
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新老化的协议
- en: Fixing JavaScript's lack of performance
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决JavaScript性能不足的问题
- en: Finding new measurement, diagnostics and optimization tools
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找新的测量、诊断和优化工具
- en: Providing more access to broadband installations across the world
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为全球范围内提供更多宽带安装的机会
- en: The Faster Web and performance
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更快速的网络和性能
- en: The Faster Web can be defined as a series of qualities to be developed in all
    spheres of web technology in order to speed up any transaction between a client
    and a server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 更快速的网络可以被定义为在所有网络技术领域中发展的一系列特质，以加快客户端和服务器之间的任何交易速度。
- en: But how important is speed? It is important enough for Google to have discovered,
    in 2010, that any slowdown had a direct impact on a company's website traffic
    and ad revenue. In fact, Google successfully established a statistical correlation
    between traffic and ad revenue, and the number of results and the time it takes
    to obtain them. The end result of their research was that it is possible to observe
    a decrease of the order of 20% in traffic and add revenue when obtaining more
    results in 0.9 seconds versus fewer results on a page in only 0.4 seconds. Yahoo
    also confirmed that about 5% to 9% of its users would abandon a web page that
    took more than 400 milliseconds to load. Microsoft Bing saw a 4% decrease in revenue
    when the search results were delivered with an additional delay of only 2 seconds.
    Clearly, speed not only ensures user engagement, but also has a major effect on
    a company's revenue and general performance.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但速度有多重要？谷歌在2010年发现，任何减速都会直接影响公司的网站流量和广告收入。事实上，谷歌成功地建立了流量和广告收入与结果数量和获取结果所需时间之间的统计相关性。他们的研究结果表明，当在0.9秒内获得更多结果与在页面上仅在0.4秒内获得更少结果时，流量和广告收入可能会减少20%。雅虎也证实，约5%至9%的用户会放弃加载时间超过400毫秒的网页。微软必应在搜索结果交付时额外延迟2秒时，收入减少了4%。显然，速度不仅确保用户参与度，而且对公司的收入和整体表现都有重大影响。
- en: At first glance, it would seem that the Faster Web is exactly the same thing
    as web performance. But is this really the case?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，更快速的网络似乎与网络性能完全相同。但真的是这样吗？
- en: Performance is defined as the manner in which a mechanism performs. According
    to *André B. Bondi[2]*, "*the performance of a computer-based system is often
    characterized by its ability to perform defined sets of activities at fast rates
    and with quick response time*." And, as *J. D. Meier et al.* stated in their book
    on performance testing*[3]*, "*performance testing is a type of testing intended
    to determine the responsiveness*, *throughput*, *reliability*, *and/or scalability
    of a system under a given workload*."
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 性能被定义为机制的执行方式。根据*André B. Bondi[2]*的说法，"*计算机系统的性能通常以其以快速速率执行定义的一组活动的能力和快速响应时间来表征*。"
    正如*J. D. Meier等人*在他们关于性能测试的书中所述，"*性能测试是一种旨在确定系统在给定工作负载下的响应性*、*吞吐量*、*可靠性*和/或可扩展性的测试类型*。"
- en: Thus, it is very clear that web performance is a core concept of the Faster
    Web. But, do we always expect these characteristics to be the only ones? If an
    application promises a thorough analysis of a hard drive and completes its task
    in less than five seconds, we will most certainly think that something went wrong.
    According to *Denys Mishunov[4]*, performance is also about perception. As stated
    by *Stéphanie Walter[5]* in one of her presentations on perceived performance,
    "*time measurement depends on the moment of measurement and can vary depending
    on the complexity of the task to be performed, the psychological state of the
    user (stress), and the user's expectations as he has defined them according to
    what he considers to be the software of reference when executing a certain task*."
    Therefore, a good manner in which an application does what it has to do also means
    that the software would have to meet the user’s expectations as to how this computer
    program ought to do things.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，很明显，网站性能是更快网络的核心概念。但是，我们总是期望这些特征是唯一的吗？如果一个应用程序承诺对硬盘进行彻底分析并在不到五秒的时间内完成任务，我们肯定会认为出了问题。根据*Denys
    Mishunov[4]*的说法，性能也与感知有关。正如*Stéphanie Walter[5]*在她关于感知性能的演讲中所述，"*时间的测量取决于测量的时刻，可以根据要执行的任务的复杂性、用户的心理状态（压力）以及用户根据他认为是执行某项任务时的参考软件所定义的期望而变化*。"
    因此，应用程序执行任务的良好方式也意味着软件必须满足用户对计算机程序应该如何执行任务的期望。
- en: Even though the Faster Web initiative first concentrated its efforts on making
    the different web technologies go faster, the different studies led researchers
    back to the notion of subjective, or perceived, time versus objective, or clocked,
    time in order to fully measure how website performance influenced the user's habits
    and general behavior when it came to browsing the web.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管更快的网络倡议最初集中精力使不同的网络技术变得更快，但不同的研究使研究人员重新回到了主观时间或感知时间与客观时间或计时时间的概念，以便充分衡量网站性能如何影响用户在浏览网页时的习惯和一般行为。
- en: Therefore, in this book, we will be covering the Faster Web as it applies to
    all the major web technologies—that is to say, those that run on 70 to 80 % of
    web servers around the world and on all the major browsers, namely Apache, PHP,
    MySQL, and JavaScript. Moreover, we will not only cover these major web technologies
    from a developer's standpoint, but we will also discuss the Faster Web from the
    system administrator's viewpoint by covering HTTP/2 and reverse proxy caching
    in the last chapters. And, although the greater part of this book will be addressing
    the question of web performance only, the last chapter will be covering the other
    aspect of the Faster Web, which concerns satisfying the user's expectations through
    good **user interface** (**UI**) design.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本书中，我们将涵盖更快的网络，因为它适用于所有主要的网络技术，也就是说，在全球70%至80%的网络服务器上运行的技术以及所有主要的浏览器，即Apache、PHP、MySQL和JavaScript。此外，我们不仅将从开发人员的角度讨论这些主要的网络技术，还将在最后几章中从系统管理员的角度讨论更快的网络，包括HTTP/2和反向代理缓存。尽管本书的大部分内容将只涉及网站性能的问题，但最后一章将涵盖更快网络的另一个方面，即通过良好的**用户界面**（**UI**）设计来满足用户的期望。
- en: Measuring the Faster Web
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量更快的网络
- en: Now that we better understand in what way web performance is a very important
    part of the Faster Web as a whole and that the Faster Web is concerned with achieving
    not only efficiency and speed, but also with satisfying the user's expectations entirely,
    we can now ask ourselves how we can objectively measure the Faster Web and which
    tools are best suited to do so.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更好地理解了网站性能如何成为更快网络作为整体的一个非常重要部分，更快网络不仅关注效率和速度，还关注完全满足用户的期望，我们现在可以问自己如何客观地衡量更快的网络以及哪些工具最适合这样做。
- en: Before Measuring
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在测量之前
- en: When discussing speed measurement, it is always important to remember that speed
    always ultimately depends on hardware and that poorly performing software is not
    necessarily a problem if it is running on a poorly performing hardware infrastructure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论速度测量时，始终重要的是要记住速度最终取决于硬件，如果在性能不佳的硬件基础设施上运行性能不佳的软件并不一定是问题。
- en: Of course, **input and output** (**I/O**) always accounts for the better part
    of the hardware infrastructure's aggregate latency. The network and the filesystem
    are the two main possible bottlenecks that will offer the worst possible performance
    when it comes to speed. For example, accessing data on the disk can be up to a
    hundred times slower than **random-access memory** (**RAM**) and very busy networks
    can make web services practically unreachable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，**输入和输出**（**I/O**）始终占据硬件基础设施总延迟的大部分。网络和文件系统是可能出现最糟糕性能的两个主要瓶颈，例如，访问磁盘上的数据可能比**随机存取内存**（**RAM**）慢上百倍，而繁忙的网络可能使网络服务几乎无法访问。
- en: RAM limits also force us to make certain tradeoffs when it comes to speed, scalability
    and accuracy. It is always possible to get top-speed performance by caching the
    greater part of an application's data and loading everything into memory. But
    will this be the optimal solution in all circumstances? Will it still maintain
    speed in the context of a heavy workload? Will the data be refreshed adequately
    in the context of highly volatile data? The obvious answer to these questions
    is probably not. Thus, optimal speed is the balance between pure speed, reasonable
    memory consumption and acceptable data staleness.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: RAM限制也迫使我们在速度、可伸缩性和准确性方面做出某些权衡。通过缓存应用程序数据的大部分并将所有内容加载到内存中，总是可以获得最高速度的性能。但在所有情况下，这是否是最佳解决方案？在重负载情况下，它是否仍然保持速度？在高度不稳定的数据情况下，数据是否得到了充分的刷新？对这些问题的明显答案可能是否定的。因此，最佳速度是纯速度、合理的内存消耗和可接受的数据陈旧之间的平衡。
- en: Measuring performance in order to determine the optimal speed of a computer
    program is the art of finding the perfect balance in the context of particular
    business rules and available resources by implementing the appropriate tradeoffs
    and fine-tuning them afterwards.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定计算机程序的最佳速度而进行性能测量，是通过实施适当的权衡并在之后进行微调来在特定业务规则和可用资源的情况下找到完美平衡的艺术。
- en: The first step of assessing speed performance will therefore be to analyze available
    resources and determine the upper and lower limits of our hardware's speed performance.
    And since we are working on web performance, this first step will be accomplished
    by benchmarking the web server itself.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，评估速度性能的第一步将是分析可用资源，并确定硬件速度性能的上限和下限。由于我们正在处理Web性能，这一步将通过对Web服务器本身进行基准测试来完成。
- en: The second step will consist of profiling the web application in order to analyze
    the performance of each part of its inner workings and determine which parts of
    the application's code lack perfect balance and should be optimized.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步将包括对Web应用程序进行分析，以分析其内部工作的每个部分的性能，并确定应用程序代码的哪些部分缺乏完美的平衡并应进行优化。
- en: Benchmark testing and profiling
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基准测试和分析
- en: Web server benchmarking is the process of evaluating a web server's performance
    under a certain workload. Software profiling is the process of analyzing a computer
    program's use of memory and execution time in order to optimize the program's
    inner structure.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务器基准测试是评估Web服务器在特定工作负载下的性能的过程。软件分析是分析计算机程序在内存使用和执行时间方面的过程，以优化程序的内部结构。
- en: In this part of the chapter, we will set up and test a few of the tools that
    will allow us to benchmark our web server and profile the source code that we
    will be analyzing in the next chapters of this book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这一部分，我们将设置和测试一些工具，这些工具将允许我们对我们的Web服务器进行基准测试和对我们将在本书的后续章节中分析的源代码进行分析。
- en: Practical prerequisites
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际先决条件
- en: In order to run the source code included in this book, we recommend that you
    start by installing Docker on your computer ([https://docs.docker.com/engine/installation/](https://docs.docker.com/engine/installation/)).
    Docker is a software container platform that allows you to easily connect to your
    computer's devices in an isolated and sophisticated chroot-like environment. Unlike
    virtual machines, containers do not come bundled with full operating systems,
    but rather come with the required binaries in order to run some software. You
    can install Docker on Windows, Mac, or Linux. It should be noted, however, that
    some features, like full-featured networking, are still not available when running
    Docker on macOS ([https://docs.docker.com/docker-for-mac/networking/#known-limitations-use-cases-and-workarounds](https://docs.docker.com/docker-for-mac/networking/#known-limitations-use-cases-and-workarounds)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行本书中包含的源代码，我们建议您首先在计算机上安装Docker（[https://docs.docker.com/engine/installation/](https://docs.docker.com/engine/installation/)）。
    Docker是一个软件容器平台，允许您在隔离和复杂的chroot-like环境中轻松连接到计算机的设备。与虚拟机不同，容器不附带完整的操作系统，而是附带所需的二进制文件以运行某些软件。您可以在Windows、Mac或Linux上安装Docker。然而，需要注意的是，在macOS上运行Docker时，一些功能，如全功能网络，仍然不可用（[https://docs.docker.com/docker-for-mac/networking/#known-limitations-use-cases-and-workarounds](https://docs.docker.com/docker-for-mac/networking/#known-limitations-use-cases-and-workarounds)）。
- en: 'The main Docker image that we will be using throughout this book is *Linux
    for PHP* 8.1 ([https://linuxforphp.net/](https://linuxforphp.net/)) with a non-thread
    safe version of PHP 7.1.16 and *MariaDB* (*MySQL*) 10.2.8 (asclinux/linuxforphp-8.1:7.1.16-nts).
    Once Docker is installed on your computer, please run the following commands in
    a bash-like Terminal in order to get a copy of the book''s code examples and start
    the appropriate Docker container:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书中使用的主要Docker镜像是*Linux for PHP* 8.1（[https://linuxforphp.net/](https://linuxforphp.net/)），其中包含PHP
    7.1.16的非线程安全版本和*MariaDB*（*MySQL*）10.2.8（asclinux/linuxforphp-8.1:7.1.16-nts）。一旦在您的计算机上安装了Docker，请在类似bash的终端中运行以下命令，以获取本书代码示例的副本并启动适当的Docker容器：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After running these commands, you should get the following command prompt:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令后，您应该会得到以下命令提示符：
- en: '![](assets/fd5577ad-ff2d-4518-bceb-3d106e6fef15.png)The Linux for PHP container’s
    command line interface (CLI)**Note to Windows users:** please make sure to replace
    the ''${PWD}'' portion of the shared volumes option in the previous Docker command
    with the full path to your working directory (ex. ''/c/Users/fasterweb''), because
    you will not be able to start the container otherwise. Also, you should make sure
    that volume sharing is enabled in your Docker settings. Moreover, if you are running
    Docker on Windows 7 or 8, you will only be able to access the container at the
    address http://192.168.99.100:8181 and not at ''localhost:8181''.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/fd5577ad-ff2d-4518-bceb-3d106e6fef15.png)Linux for PHP容器的命令行界面（CLI）**Windows用户请注意：**请确保在以前的Docker命令中的共享卷选项中用您的工作目录的完整路径（例如''/c/Users/fasterweb''）替换''${PWD}''部分，否则您将无法启动容器。此外，您应该确保在Docker设置中启用了卷共享。此外，如果您在Windows
    7或8上运行Docker，您只能在地址http://192.168.99.100:8181访问容器，而不能在''localhost:8181''上访问。'
- en: 'All the code examples given in this book can be found, within the code repository,
    in a folder named according to the chapter''s number. Thus, it is expected that
    you change your working directory at the beginning of each chapter in order to
    run the code examples given within. Thus, for this chapter, you are expected to
    enter, on the container''s CLI, the following commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中提供的所有代码示例都可以在代码存储库中的一个名为根据章节编号命名的文件夹中找到。因此，预计您在每章开始时更改工作目录，以便运行其中给出的代码示例。因此，对于本章，您应该在容器的CLI上输入以下命令：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And, for the next chapter, you are expected to enter these commands:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一章，您应该输入以下命令：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And, so on for the following chapters.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的章节也是如此。
- en: Also, if you prefer using multithreading technologies while optimizing your
    code, you can do so by running the thread-safe version of *Linux for PHP* (asclinux/linuxforphp-8.1:7.0.29-zts).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您在优化代码时更喜欢使用多线程技术，可以通过运行*Linux for PHP*的线程安全版本（asclinux/linuxforphp-8.1:7.0.29-zts）来实现。
- en: If you prefer running the container in detached mode (`-d` switch), please do
    so. This will allow you to `docker exec` many command shells against the same
    container while keeping it up and running at all times independently of whether
    you have a running Terminal or not.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望以分离模式（`-d`开关）运行容器，请这样做。这将允许您在同一个容器上保持运行并且独立于您是否有运行的终端而运行`docker exec`多个命令shell。
- en: 'Moreover, you should `docker commit` any changes you made to the container
    and create new images of it so that you can `docker run` it at a later time. If
    you are not familiar with the Docker command line and its `run` command, please
    find the documentation at the following address: [https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该`docker commit`您对容器所做的任何更改，并创建其新图像，以便以后可以`docker run`它。如果您不熟悉Docker命令行及其`run`命令，请在以下地址找到文档：[https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/)。
- en: Finally, many excellent books and videos on Docker have been published by Packt
    Publishing and I highly recommend that you read them in order to master this fine
    tool.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，Packt Publishing出版了许多关于Docker的优秀书籍和视频，我强烈建议您阅读它们以掌握这个优秀的工具。 '
- en: 'Now, enter the following commands in order to start all the services that will
    be needed throughout this book and to create a test script that will allow you
    to make sure everything is working as expected:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入以下命令以启动本书中将需要的所有服务，并创建一个测试脚本，以确保一切都按预期工作：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you are done running these commands, you should point your favorite browser
    to `http://localhost:8181/` and see the following result:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成这些命令后，您应该将您喜欢的浏览器指向`http://localhost:8181/`，并查看以下结果：
- en: '![](assets/b825527f-ca80-401b-93bd-836b9a0f1c7c.png)The phpinfo page'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b825527f-ca80-401b-93bd-836b9a0f1c7c.png)phpinfo页面'
- en: If you do not see this page, please try to troubleshoot your Docker installation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有看到此页面，请尝试排除您的Docker安装问题。
- en: Moreover, please note that, if you do not `docker commit` your changes and prefer
    to use an original Linux for PHP base image whenever you wish to start working
    with a code example contained in this book, the previous commands will have to
    be repeated each and every time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，如果您不`docker commit`您的更改，并且希望在开始使用本书中包含的代码示例时使用原始的Linux for PHP基础镜像，那么以前的命令将需要每次都重复。
- en: We are now ready to benchmark our server.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备对我们的服务器进行基准测试。
- en: Understanding Apache Bench (AB)
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Apache Bench（AB）
- en: Many tools are available to benchmark a web server. The better-known ones are
    Apache Bench (AB), Siege, JMeter, and Tsung. Although JMeter ([https://jmeter.apache.org/](https://jmeter.apache.org/))
    and Tsung ([http://tsung.erlang-projects.org/](http://tsung.erlang-projects.org/))
    are very interesting load-testing tools and should be explored when doing more
    advanced testing in the context of system administration, we will focus on AB
    and Siege for our development purposes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多工具可用于对Web服务器进行基准测试。其中较为知名的是Apache Bench（AB）、Siege、JMeter和Tsung。尽管JMeter（[https://jmeter.apache.org/](https://jmeter.apache.org/)）和Tsung（[http://tsung.erlang-projects.org/](http://tsung.erlang-projects.org/)）是非常有趣的负载测试工具，并且在进行更高级别的系统管理上的测试时应该进行探索，但我们将专注于AB和Siege以满足我们的开发需求。
- en: AB is included with the Apache web server's development tools and is installed
    by default in Linux for PHP images that contain PHP binaries. Otherwise, AB can
    be found in a separate Apache development tools installation package on most Linux
    distributions. It is important to note that Apache Bench does not support multithreading,
    which can create problems when running high-concurrency tests.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: AB包含在Apache Web服务器的开发工具中，并且默认安装在包含PHP二进制文件的Linux for PHP镜像中。否则，AB可以在大多数Linux发行版的单独Apache开发工具安装包中找到。重要的是要注意，Apache
    Bench不支持多线程，这可能会在运行高并发测试时造成问题。
- en: 'Also, there are some common pitfalls to avoid when benchmarking. The main ones
    are:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在进行基准测试时有一些常见的陷阱需要避免。主要的是：
- en: Avoid running other resource-hungry applications simultaneously on the computer
    that is being benchmarked
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免同时在正在进行基准测试的计算机上运行其他资源密集型应用程序
- en: Avoid benchmarking remote servers, as the network, especially in concurrency
    tests, might become the main cause of measured latency
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免对远程服务器进行基准测试，因为网络，特别是在并发测试中，可能成为测得的延迟的主要原因
- en: Avoid testing on web pages that are cached through HTTP accelerators or proxies,
    as the result will be skewed and will not reveal actual server speed performance
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免在通过 HTTP 加速器或代理缓存的网页上进行测试，因为结果将会被扭曲，并且不会显示实际的服务器速度性能
- en: Do not think that benchmarking and load testing will perfectly represent user
    interaction with your server, as the results are indicative in nature only
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要认为基准测试和负载测试会完美地代表用户与服务器的交互，因为结果只是指示性的
- en: Be aware that benchmarking results are specific to the hardware architecture
    being tested and will vary from one computer to the other
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，基准测试结果是针对正在测试的硬件架构的，并且会因计算机而异
- en: 'For our tests, we will be using *Apache Bench*’s `-k`, `-l`, `-c`, and `-n`
    switches. Here are the definitions of these switches:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的测试，我们将使用 *Apache Bench* 的 `-k`、`-l`、`-c` 和 `-n` 开关。以下是这些开关的定义：
- en: '`-k` enables the KeepAlive feature in order to perform multiple requests in
    one single HTTP session'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -k 启用 KeepAlive 功能，以便在一个单一的 HTTP 会话中执行多个请求
- en: '`-l` disables error reporting when the content lengths vary in size from one
    response to the other'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -l 当内容长度从一个响应到另一个响应的大小不同时，禁用错误报告
- en: '`-c` enables concurrency in order to perform multiple requests at the same
    time'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -c 启用并发，以便同时执行多个请求
- en: '`-n` determines the number of requests to perform in the current benchmarking
    session'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -n 确定当前基准测试会话中要执行的请求数
- en: For more information on AB's options, please see the corresponding entry in
    *Apache*'s documentation ([https://httpd.apache.org/docs/2.4/programs/ab.html](https://httpd.apache.org/docs/2.4/programs/ab.html)).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 AB 选项的更多信息，请参阅 *Apache* 文档中的相应条目 ([https://httpd.apache.org/docs/2.4/programs/ab.html](https://httpd.apache.org/docs/2.4/programs/ab.html))。
- en: 'Before launching the benchmark tests, open a new Terminal window and `docker
    exec` a new bash Terminal to the container. This way, you will be able to see
    resource consumption through the top utility. To do so, start by getting the name
    of your container. It will appear in the list that will be returned by this command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动基准测试之前，打开一个新的终端窗口，并通过 `docker exec` 运行一个新的 bash 终端到容器中。这样，您将能够通过 top 实用程序查看资源消耗。首先，获取容器的名称。它将出现在此命令返回的列表中：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will then be able to tap into the container and start watching resource
    consumption with the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将能够进入容器并开始使用以下命令观察资源消耗：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And, on the container’s newly obtained command line, please run the `top` command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 并且在容器的新获得的命令行上，请运行 `top` 命令：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, launch a benchmark test from within the first Terminal window:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从第一个终端窗口启动一个基准测试：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You will then get a benchmark test report containing information on the average
    number of requests per second that the server was able to respond to (`Requests
    per second`), the average response time per request (`Time per request`) and the
    response time’s standard deviation (`Percentage of requests served within a certain
    time (ms)`).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将获得一个基准测试报告，其中包含服务器能够响应的平均请求数 (`每秒请求数`)、每个请求的平均响应时间 (`每个请求的时间`) 和响应时间的标准偏差
    (`在特定时间内服务的请求的百分比 (ms)`) 的信息。
- en: 'The report should be similar to the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 报告应该类似于以下内容：
- en: '![](assets/24bd9ed0-c77c-432b-b3c3-101096d5e152.png)The benchmark report shows
    that Apache is serving about 817 requests per second on average'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/24bd9ed0-c77c-432b-b3c3-101096d5e152.png)基准测试报告显示，Apache 平均每秒提供约
    817 个请求'
- en: 'Now, try a new benchmark test by requesting the `index.php` file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过请求 `index.php` 文件来尝试新的基准测试：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You will notice that the average number of requests per second has dropped
    and that the average response time and the standard deviation are higher. In my
    case, the average has dropped from about 800 to around 300 on my computer, the
    average response time has passed from 2 milliseconds to 6 milliseconds and the
    response time’s standard deviation has now gone from 100% of requests being served
    within 8 milliseconds to 24 milliseconds:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到每秒平均请求数已经下降，平均响应时间和标准偏差更高。在我的情况下，平均值从大约 800 下降到我的计算机上的约 300，平均响应时间从 2 毫秒增加到
    6 毫秒，响应时间的标准偏差现在从 100% 的请求在 8 毫秒内被服务，增加到 24 毫秒：
- en: '![](assets/069ab784-57fc-4e0d-b80d-8b8c5f4c2877.png)The benchmark report shows
    that Apache is now serving about 313 requests per second on average'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/069ab784-57fc-4e0d-b80d-8b8c5f4c2877.png)基准测试报告显示，Apache 平均每秒大约提供
    313 个请求'
- en: These results allow us to have a general idea of our hardware's performance
    limits and to determine the different thresholds we would have to deal with when
    scaling performance of PHP scripts that are generating some dynamic content.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结果使我们能够对硬件性能限制有一个大致的了解，并确定在扩展生成一些动态内容的 PHP 脚本性能时，我们将不得不处理的不同阈值。
- en: Now, let's dig a little deeper into our web server's performance with Siege,
    a tool of choice when benchmarking and load testing.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过 Siege 进一步深入了解我们的 Web 服务器性能，这是基准测试和负载测试时的首选工具。
- en: Understanding Siege
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Siege
- en: Siege is a load testing and benchmarking tool that allows us to further analyze
    our web server's performance. Let's begin by installing Siege inside our Docker
    container.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Siege 是一个负载测试和基准测试工具，它允许我们进一步分析我们的 Web 服务器性能。让我们开始在 Docker 容器中安装 Siege。
- en: 'From the container''s command line, please download and decompress version
    4.0.2 of Siege:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请从容器的命令行下载并解压 Siege 的 4.0.2 版本：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, please enter Siege''s source code directory to compile and install the
    software:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，请进入 Siege 的源代码目录以编译和安装软件：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For these tests with Siege, we will be using the `-b`, `-c`, and `-r` switches.
    Here are the definitions of these switches:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些Siege测试，我们将使用`-b`，`-c`和`-r`开关。以下是这些开关的定义：
- en: '`-b`, enables benchmark mode, which means that there are no delays between
    iterations'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: -b，启用基准测试模式，这意味着迭代之间没有延迟
- en: '`-c`, enables concurrency in order to perform multiple requests at the same
    time'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-c`，启用并发以同时执行多个请求'
- en: '`-r`, determines the number of requests to perform with each concurrent user'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r`，确定每个并发用户执行的请求数'
- en: 'Of course, you can get more information on Siege''s command-line options by
    invoking the manual from the container''s command line:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您可以通过在容器的命令行中调用手册来获取有关Siege命令行选项的更多信息：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now launch a Siege benchmark test:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启动Siege基准测试：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will then get a benchmark test report like this one:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您将获得类似这样的基准测试报告：
- en: '![](assets/b408c27d-e91e-4a80-bb68-fe7659654d72.png)The Siege benchmark report
    confirms the results that were obtained from AB'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b408c27d-e91e-4a80-bb68-fe7659654d72.png)Siege基准测试报告确认了从AB获得的结果'
- en: As you can see, the results match those that we got from AB previously. Our
    test shows a transaction rate of almost 800 transactions per second.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，结果与我们之前从AB获得的结果相匹配。我们的测试显示每秒近800次的事务率。
- en: 'Siege also comes with a handy tool named Bombard that can automate tests and
    help to verify scalability. Bombard allows you to use Siege with an ever-increasing
    number of concurrent users. It can take a few optional arguments. These are: the
    name of a file containing URLs to use when performing the tests, the number of
    initial concurrent clients, the number of concurrent clients to add each time
    Siege is called, the number of times Bombard should call Siege and the time delay,
    in seconds, between each request.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Siege还配备了一个方便的工具，名为Bombard，可以自动化测试并帮助验证可伸缩性。Bombard允许您使用Siege和不断增加的并发用户数量。它可以带有一些可选参数。这些参数是：包含在执行测试时使用的URL的文件的名称，初始并发客户端的数量，每次调用Siege时要添加的并发客户端的数量，Bombard应该调用Siege的次数以及每个请求之间的时间延迟（以秒为单位）。
- en: 'We can, therefore, try to confirm the results of our previous tests by issuing
    the following commands inside the container:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以尝试通过在容器内部发出以下命令来确认我们之前测试的结果：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once done, you should obtain a report similar to the following one:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您应该获得类似以下的报告：
- en: '![](assets/7d44d2e3-1a94-4565-aa88-c724d235d090.png)The results show that the
    longest transaction is much higher when there are 210 or more concurrent users'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7d44d2e3-1a94-4565-aa88-c724d235d090.png)结果显示，当有210个或更多并发用户时，最长的事务要高得多'
- en: 'Try again, but by requesting the PHP file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 再试一次，但请求PHP文件：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This test should provide results similar to these:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试应该提供类似这样的结果：
- en: '![](assets/3ad97da7-ea6e-4379-8956-4a4b9ca1b77e.png)The efficiency of serving
    dynamic content is analogous to that of serving static content, but with a much
    lower transaction rate'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/3ad97da7-ea6e-4379-8956-4a4b9ca1b77e.png)提供动态内容的效率类似于提供静态内容的效率，但事务率要低得多'
- en: 'The second Terminal window that is running `top` is now showing 50% usage of
    both of the available processors and almost 50% RAM usage on my computer:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行`top`的第二个终端窗口显示了两个可用处理器的50%使用率和我电脑上几乎50%的RAM使用率：
- en: '![](assets/023bca16-862c-4227-a3ca-27f0993da7a6.png)The container’s usage of
    CPU and memory resources when it is submitted to benchmarking tests'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/023bca16-862c-4227-a3ca-27f0993da7a6.png)容器在提交基准测试时使用的CPU和内存资源'
- en: We now know that, when there are not many concurrent requests, this hardware
    can allow for good performance on a small scale, with 800 transactions per second
    on static files and about 200 transactions per second on pages that have dynamically
    generated content.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道，当并发请求不多时，这台硬件可以在小规模上表现良好，静态文件可以达到每秒800次的事务率，动态生成内容的页面大约为每秒200次的事务率。
- en: Now that we have a better idea of the base speed performance of our web server
    based solely on our hardware's resources, we can now start to truly measure the
    speed and efficiency of the web server's dynamically generated content through
    profiling. We will now proceed to install and configure tools that will allow
    us to profile and optimize PHP code.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对基于硬件资源的基本速度性能有了更好的了解，现在我们可以开始真正测量通过性能分析来衡量Web服务器动态生成内容的速度和效率。我们现在将继续安装和配置工具，以便我们对PHP代码进行性能分析和优化。
- en: Installing and configuring useful tools
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置有用的工具
- en: We will now install and configure MySQL benchmarking and JavaScript profiling
    tools. But first, let's start by installing and configuring xdebug, a PHP debugger
    and profiler.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将安装和配置MySQL基准测试和JavaScript性能分析工具。但首先，让我们从安装和配置xdebug开始，这是一个PHP调试器和性能分析工具。
- en: Profiling PHP – xdebug Installation and Configuration
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能分析PHP – xdebug安装和配置
- en: 'The first tool we will install and configure is xdebug, a debugging and profiling
    tool for PHP. This extension can be downloaded, decompressed, configured, compiled
    and installed in a very easy manner by using the PECL utility included with PHP
    ([https://pecl.php.net/](https://pecl.php.net/)). To do this, inside the container''s
    Terminal window, please enter the following commands:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装和配置的第一个工具是xdebug，这是一个用于PHP的调试和性能分析工具。这个扩展可以通过使用PHP附带的PECL实用程序（[https://pecl.php.net/](https://pecl.php.net/)）以非常简单的方式下载、解压缩、配置、编译和安装。要做到这一点，请在容器的终端窗口中输入以下命令：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The last lines of your container''s `/etc/php.ini` file should now look like
    this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您容器的`/etc/php.ini`文件的最后几行现在应该是这样的：
- en: '![](assets/a6cbcc31-351d-4ac1-9aa3-bf86c88b9cf2.png)Newly added lines to the
    php.ini file'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a6cbcc31-351d-4ac1-9aa3-bf86c88b9cf2.png)在php.ini文件中新增的行'
- en: 'Once done, please reload the `http://localhost:8181` page in your favorite
    browser. It should now read as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，请在您喜爱的浏览器中重新加载`http://localhost:8181`页面。它现在应该显示如下：
- en: '![](assets/c868f3b7-e7de-4335-9ef7-232f1a36b3b6.png)Confirmation that the xdebug
    extension has been loaded'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c868f3b7-e7de-4335-9ef7-232f1a36b3b6.png)确认xdebug扩展已加载'
- en: 'If you scroll towards the end of the page, you should now see an xdebug section:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您向页面朝向滚动，现在应该会看到xdebug部分：
- en: '![](assets/dfc157cf-d029-4464-8ba6-ba1633893020.png)The xdebug section of the
    phpinfo page'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: phpinfo页面的xdebug部分
- en: 'You should also notice that the profiler options are now enabled under the
    xdebug entry:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该注意，在xdebug条目下现在启用了性能分析器选项：
- en: '![](assets/cf026ad1-c3c0-4734-a5a7-73f546f13a23.png)Confirmation that xdebug
    code profiling is enabled'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 确认xdebug代码分析已启用
- en: We will now configure PHPStorm to be the debugging server. This will allow us
    to use our IDE as the control center for our debugging sessions.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将配置PHPStorm作为调试服务器。这将允许我们将IDE用作调试会话的控制中心。
- en: 'Before we start, we will make the entire `fasterweb` folder available as the
    server’s web root directory by entering these commands inside the container:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们将通过在容器内输入以下命令将整个`fasterweb`文件夹作为服务器的网站根目录可用：
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, start *PHPStorm* and make our `fasterweb` directory the home root of this
    project. To do so, select **Create New Project from Existing Files** and **Source
    files are in a local directory** and designate our `fasterweb` directory as the
    **Project root** before clicking on **Finish**.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，启动*PHPStorm*，并将我们的`fasterweb`目录设置为此项目的主目录。为此，请选择**从现有文件创建新项目**，**源文件位于本地目录**，并在单击**完成**之前将我们的`fasterweb`目录指定为**项目根目录**。
- en: 'Once created, select Settings from within the File menu. Under the Languages
    & Frameworks section, unfold the PHP menu entry and click on the Servers entry.
    Please enter all the appropriate information according to the specifics of your
    setup. The Host option must contain the value of the IP address of the Linux for
    PHP container. If you are not sure what is the IP address of your Docker container,
    please enter the following command on the container''s command line in order to
    obtain it:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，从“文件”菜单中选择“设置”。在“语言和框架”部分下，展开PHP菜单条目，然后单击“服务器”条目。请根据您的设置的具体情况输入所有适当的信息。主机选项必须包含Linux的PHP容器的IP地址值。如果您不确定Docker容器的IP地址是什么，请在容器的命令行上输入以下命令以获取它：
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once done, you can confirm by clicking on the Apply and OK buttons:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以通过单击“应用”和“确定”按钮进行确认：
- en: '![](assets/fd162e59-f0e8-4352-92a3-3220ae93d715.png)Configuring PHPStorm to
    connect to the web server and xdebug'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 配置PHPStorm以连接到Web服务器和xdebug
- en: 'Then, under the Run menu, you will find the Edit Configurations... entry. It
    can also be found on the right-hand side of the IDE''s screen:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在“运行”菜单下，您将找到“编辑配置...”条目。它也可以在IDE屏幕的右侧找到：
- en: '![](assets/8b01d97f-341a-41a4-96dc-499dbc5011ca.png)The ‘Edit configurations…’
    setting'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: “编辑配置...”设置
- en: 'You can then add a PHP Remote Debug entry by clicking on the green plus sign
    in the upper-left corner of this window. Please select the server that we created
    in the previous step and please make sure that the Ide key(session id) is set
    to PHPSTORM:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过单击窗口左上角的绿色加号添加PHP远程调试条目。请选择我们在上一步中创建的服务器，并确保将Ide密钥（会话ID）设置为PHPSTORM：
- en: '![](assets/f518373a-5210-49c1-bca3-14b87abe0209.png)Configuring the debugging
    session'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 配置调试会话
- en: You can now activate the PHPStorm debugging server by clicking on the Listen
    to debugger connections button in the upper-right menu of the main PHPStorm screen,
    set a breakpoint by clicking in the space to the right of any line number of the
    `index.php` file, and launch the debug tool corresponding to the `index.php` configuration
    that we created in the previous step.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过单击主PHPStorm屏幕右上角菜单中的“监听调试器连接”按钮来激活PHPStorm调试服务器，通过单击“index.php”文件的任何行号右侧的空白处设置断点，并启动我们在上一步中创建的“index.php”配置对应的调试工具。
- en: If the top-right toolbar menu is not displayed on your screen, please click
    on the Toolbar entry of the View menu to make them appear on your screen. These
    buttons are also accessible as entries in the Run menu.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的屏幕上没有显示右上方的工具栏菜单，请单击“查看”菜单的“工具栏”条目，以使它们显示在您的屏幕上。这些按钮也可以作为“运行”菜单中的条目进行访问。
- en: '![](assets/bfcd6f13-257a-4708-9317-1a16d92195bf.png)Activating the PHPStorm
    debugging server, setting a breakpoint and launching the debug tool'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 激活PHPStorm调试服务器，设置断点并启动调试工具
- en: Now, open your favorite browser and request the same web page by entering the
    IP address of your Docker container:  `http://[IP_ADDRESS]/?XDEBUG_SESSION_START=PHPSTORM`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开您喜欢的浏览器，并通过输入Docker容器的IP地址请求相同的网页：`http://[IP_ADDRESS]/?XDEBUG_SESSION_START=PHPSTORM`。
- en: 'You will then notice that the browser is caught in an infinite loop:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您会注意到浏览器陷入了无限循环：
- en: '![](assets/f70db8a1-754e-49e0-a5fb-02ece1bdf019.png)The browser is waiting
    for the debug session to resume or end'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器正在等待调试会话恢复或结束
- en: 'You will also notice that the debugging information is now showing inside the
    IDE. We can also control the session and determine when execution will resume
    from within the IDE. Please inspect the contents of the variables before allowing
    execution to resume by clicking on the green play button on the left-hand side
    of the screen. You can also end the debugging session by clicking on the pink
    stop button in the same icon menu:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到调试信息现在显示在IDE中。我们还可以在IDE内控制会话，并确定何时会话将从中恢复。请在允许执行恢复之前检查变量的内容，方法是单击屏幕左侧的绿色播放按钮。您还可以通过单击同一图标菜单中的粉红色停止按钮来结束调试会话：
- en: '![](assets/ecf90063-4065-4938-a945-efa6be628446.png)The debugging session allows
    for detailed inspection of variables during runtime'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 调试会话允许在运行时详细检查变量
- en: 'Once the debugging session is over, we can now inspect our container''s `/tmp`
    directory and should find the profiler output in a file named `cachegrind.out`.
    You can then inspect this file directly through your favorite text editor or by
    installing specialized software such as Kcachegrind with the package manager of
    your Linux distribution. Here is a sample output when using Kcachegrind:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 调试会话结束后，我们现在可以检查容器的`/tmp`目录，并应该在名为`cachegrind.out`的文件中找到分析器输出。然后，您可以通过您喜欢的文本编辑器直接检查此文件，或者通过安装专门的软件，如您的Linux发行版的软件包管理器中的Kcachegrind来检查此文件。以下是使用Kcachegrind时的示例输出：
- en: '![](assets/5c519bc9-11da-44e6-a3c0-8d3bd72b9f4d.png)Viewing the xdebug profiling
    report with Kcachegrind'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/5c519bc9-11da-44e6-a3c0-8d3bd72b9f4d.png)使用Kcachegrind查看xdebug分析报告'
- en: Thus, xdebug’s profiling tool will be available to you if you wish to use it
    on top of those that we will be using to optimize our code examples in the next
    chapters. This being said, in the next chapter, we will be looking into more advanced
    profiling tools such as  `Blackfire.io`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您希望在我们将在接下来的章节中使用的工具之上使用xdebug的分析工具，它将对您可用。话虽如此，在下一章中，我们将研究更高级的分析工具，如`Blackfire.io`。
- en: 'Once you are done testing xdebug, you can restore the `chapter_1` folder as
    the server''s web root directory:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试xdebug完成后，您可以将`chapter_1`文件夹恢复为服务器的网站根目录：
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, let's continue by having a look at SQL speed testing tools.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续看一下SQL速度测试工具。
- en: SQL – Speed Testing
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL – 速度测试
- en: Even though the PostgreSQL server is often considered to be the fastest RDBMS
    in the world after *Oracle Database*, the *MariaDB* (fork of *MySQL*) server remains
    one of the fastest and most popular RDBMSs, especially when it comes to simple
    SQL queries. Thus, when discussing SQL optimizations in this book, we will mostly
    use *MariaDB*.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PostgreSQL服务器通常被认为是继*Oracle Database*之后世界上最快的RDBMS，但*MariaDB*（*MySQL*的分支）服务器仍然是最快和最受欢迎的RDBMS之一，特别是在处理简单的SQL查询时。因此，在本书中讨论SQL优化时，我们将主要使用*MariaDB*。
- en: 'To benchmark our *MariaDB* server, we will be using the `mysqlslap` utility
    included with *MySQL* servers since version 5.1.4\. In order to run the tests,
    we will start by loading the `Sakila` test database. On the container''s command
    line, enter the following commands:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对我们的*MariaDB*服务器进行基准测试，我们将使用自*MySQL*服务器5.1.4版本以来包含的`mysqlslap`实用程序。为了运行测试，我们将首先加载`Sakila`测试数据库。在容器的命令行上，输入以下命令：
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once the database is loaded, you can launch the first benchmarking test:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库加载完成后，您可以启动第一个基准测试：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should then obtain a result similar to this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您应该获得类似于这样的结果：
- en: '![](assets/b3bee95e-44e5-4945-906b-809c4d1699bf.png)Benchmarking the MariaDB
    server with the mysqlslap tool'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b3bee95e-44e5-4945-906b-809c4d1699bf.png)使用mysqlslap工具对MariaDB服务器进行基准测试'
- en: 'You can then run a second benchmark test, but with a different level of concurrency
    in order to compare the results:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以运行第二个基准测试，但使用不同的并发级别来比较结果：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here are the results of the second test:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第二次测试的结果：
- en: '![](assets/7390a717-8331-49f9-92be-08f4ac4a5aed.png)Benchmarking the MariaDB
    server with the mysqlslap tool using higher concurrency'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7390a717-8331-49f9-92be-08f4ac4a5aed.png)使用更高的并发性对MariaDB服务器进行基准测试'
- en: The results of my tests show me that, with a full table scan query on a table
    with approximately 1,000 entries, performance degrades drastically when 50 or
    more concurrent queries are sent to the server.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我的测试结果表明，对于具有大约1,000条记录的表的全表扫描查询，在向服务器发送50个或更多并发查询时，性能会急剧下降。
- en: We will see how these types of tests and many other more advanced ones will
    be particularly useful when discussing SQL query optimizations in the chapters
    dedicated to this topic.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到这些类型的测试以及许多其他更高级的测试在专门讨论此主题的章节中将特别有用。
- en: JavaScript – Developer Tools
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript – 开发者工具
- en: 'In order to measure performance and profile the JavaScript code contained in
    this book, we will use Google Chrome''s built-in developer tools. Specifically,
    Chrome includes a timeline recorder and JavaScript CPU profiler that will allow
    you to identify bottlenecks in your JavaScript code. To activate these tools,
    please click on the three dots in the upper-right corner of the browser and click
    on the Developer Tools entry in the More Tools submenu, as shown:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了衡量性能并分析本书中包含的JavaScript代码，我们将使用Google Chrome内置的开发者工具。具体来说，Chrome包括时间线记录器和JavaScript
    CPU分析器，这将允许您识别JavaScript代码中的瓶颈。要激活这些工具，请单击浏览器右上角的三个点，然后单击“更多工具”子菜单中的“开发者工具”，如下所示：
- en: '![](assets/0e59a6b2-55ca-41f9-9346-a6f5c04dd331.png)Finding the ‘Developer
    Tools’ entry in the ‘More Tools’ section of Chrome’s main menu'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0e59a6b2-55ca-41f9-9346-a6f5c04dd331.png)在Chrome的主菜单的“更多工具”部分中找到“开发者工具”条目'
- en: 'Using the profiler is as easy as clicking the Record button and refreshing
    the page you wish to profile. You can then analyze the results in order to identify
    potential problems with the code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分析工具就像点击记录按钮并刷新要分析的页面一样简单。然后，您可以分析结果以识别代码中的潜在问题：
- en: '![](assets/4069e3a6-8d3c-42ec-973e-e45418909c5a.png)Chrome’s timeline recorder
    and JavaScript CPU profiler'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4069e3a6-8d3c-42ec-973e-e45418909c5a.png)Chrome的时间线记录器和JavaScript
    CPU分析器'
- en: In [Chapter 7](57e896b1-5a08-4dbb-8612-363068218bf0.xhtml), *JavaScript and
    "Danger Driven Development"*, and [Chapter 8](6ddcca71-a354-4758-9d03-2f4062686917.xhtml),
    *Functional JavaScript*, we will be using this tool more extensively in order
    to measure and optimize JavaScript code performance in general.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](57e896b1-5a08-4dbb-8612-363068218bf0.xhtml)中，*JavaScript和“危险驱动开发”*，以及[第8章](6ddcca71-a354-4758-9d03-2f4062686917.xhtml)中，*函数式JavaScript*，我们将更广泛地使用此工具，以便全面衡量和优化JavaScript代码的性能。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have defined what the Faster Web is, why it is important,
    how it distinguishes itself from pure speed performance and how to install, configure
    and use benchmark testing and profiling tools in order to measure it.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们定义了更快的Web是什么，为什么它很重要，它如何与纯速度性能区分开来，以及如何安装、配置和使用基准测试和分析工具来衡量它。
- en: In the next chapter, we will discover automatic profiling with `Blackfire.io`.
    Also, we will learn about monitoring by installing and configuring a TICK stack
    with Grafana on a fictitious production server that will be deployed as another
    Docker container.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解使用`Blackfire.io`进行自动分析。此外，我们将通过在一个虚构的生产服务器上安装和配置TICK堆栈与Grafana来学习监控，该服务器将部署为另一个Docker容器。
- en: References
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] [https://googleblog.blogspot.ca/2009/06/lets-make-web-faster.html](https://googleblog.blogspot.ca/2009/06/lets-make-web-faster.html)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [https://googleblog.blogspot.ca/2009/06/lets-make-web-faster.html](https://googleblog.blogspot.ca/2009/06/lets-make-web-faster.html)'
- en: '[2] *BONDI, André B.* *Foundations of Software and System Performance Engineering:
    Process, Performance Modeling, Requirements, Testing, Scalability, and Practice*.
    *Upper Saddle River, NJ: Addison-Wesley*, *2015*.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] BONDI, André B. Foundations of Software and System Performance Engineering:
    Process, Performance Modeling, Requirements, Testing, Scalability, and Practice.
    Upper Saddle River, NJ: Addison-Wesley, 2015.'
- en: '[3] *MEIER, J. D. et al.* *Performance Testing Guidance for Web Applications*.
    *Redmond, WA: Microsoft Corporation*, *2007*.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] MEIER, J. D. et al. Performance Testing Guidance for Web Applications.
    Redmond, WA: Microsoft Corporation, 2007.'
- en: '[4] [https://www.smashingmagazine.com/2015/11/why-performance-matters-part-2-perception-management/](https://www.smashingmagazine.com/2015/11/why-performance-matters-part-2-perception-management/)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] [https://www.smashingmagazine.com/2015/11/why-performance-matters-part-2-perception-management/](https://www.smashingmagazine.com/2015/11/why-performance-matters-part-2-perception-management/)'
- en: '[5] [https://speakerd.s3.amazonaws.com/presentations/2ece664392024e9da39ea82e3d9f1139/perception-performance-ux-confoo-3-4.pdf](https://speakerd.s3.amazonaws.com/presentations/2ece664392024e9da39ea82e3d9f1139/perception-performance-ux-confoo-3-4.pdf)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] [https://speakerd.s3.amazonaws.com/presentations/2ece664392024e9da39ea82e3d9f1139/perception-performance-ux-confoo-3-4.pdf](https://speakerd.s3.amazonaws.com/presentations/2ece664392024e9da39ea82e3d9f1139/perception-performance-ux-confoo-3-4.pdf)'
