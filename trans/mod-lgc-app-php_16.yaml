- en: Chapter 16. Add a Dependency Injection Container
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16章。添加依赖注入容器
- en: We have reached the final step in our modernization process. We will remove
    the last vestiges of our page scripts by moving their remaining logic into a dependency
    injection container. The container will be responsible for coordinating all the
    object creation activity in our application. In doing so, we will modify our front
    controller again, and begin adding routes that point to controller classes instead
    of file paths.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了现代化过程的最后一步。我们将通过将剩余逻辑移入依赖注入容器来删除页面脚本的最后痕迹。容器将负责协调应用程序中的所有对象创建活动。这样做，我们将再次修改我们的前端控制器，并开始添加指向控制器类而不是文件路径的路由。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For this final step in the modernization process, it is best if we have PHP
    5.3 or later installed. This is because we need closures for critical parts of
    the application logic. If we do not have access to PHP 5.3, there is a less viable
    but still workable option for implementing a dependency injection container. We
    address that situation as the last of the "Common Questions" in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代化过程的最后一步中，最好安装PHP 5.3或更高版本。这是因为我们需要闭包来实现应用程序逻辑的关键部分。如果我们没有访问PHP 5.3，还有一种不太可行但仍然可行的选项来实现依赖注入容器。我们将在本章的“常见问题”中解决这种情况。
- en: What is a Dependency Injection Container?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是依赖注入容器？
- en: Dependency injection as a technique is something we have been practicing since
    early in this book. To reiterate, the idea behind dependency injection is that
    we push dependencies into an object from the outside. This is as opposed to creating
    dependency objects while inside a class via the new keyword, or reaching out of
    the current scope to bring in dependencies via the `globals` keyword.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入作为一种技术，是我们从本书的早期就开始练习的。重申一下，依赖注入的理念是将依赖从外部推入对象。这与通过new关键字在类内部创建依赖对象，或者通过`globals`关键字从当前范围外部引入依赖的做法相反。
- en: Note
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For an overview of inversion of control in general and dependency injection
    in specific, read Fowler's article on containers at [http://martinfowler.com/articles/injection.html](http://martinfowler.com/articles/injection.html).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解控制反转的概述以及具体的依赖注入，请阅读Fowler在[http://martinfowler.com/articles/injection.html](http://martinfowler.com/articles/injection.html)上关于容器的文章。
- en: To accomplish our dependency injection activities, we have been manually creating
    the necessary objects in a page script. For any object that needed a dependency,
    we created that dependency first, then we created the object that depended on
    it and passed in the dependency. This creation process has sometimes been deeply
    layered, as when the dependencies have dependencies. Regardless of the complexity
    and depth, the logic for doing so is currently embedded in page scripts.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们的依赖注入活动，我们一直在页面脚本中手动创建必要的对象。对于任何需要依赖的对象，我们首先创建了该依赖，然后创建了依赖它的对象并传入依赖。这个创建过程有时会非常复杂，比如当依赖有依赖时。无论复杂程度和深度如何，目前做法的逻辑都嵌入在页面脚本中。
- en: The idea behind a dependency injection *container* is to keep all that object
    creation logic in a single place, so that we are no longer required to use a page
    script to set up our objects. We can place each piece of object creation logic
    in the container under a unique name, called a service.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入容器的理念是将所有对象创建逻辑放在一个地方，这样我们就不再需要使用页面脚本来设置我们的对象。我们可以将每个对象创建逻辑放在容器中，使用一个唯一的名称，称为服务。
- en: We can then tell the container to return a new instance of any defined service
    object. Alternatively, we can tell the container to create and return a shared
    instance of that service object, so that each time we get it, it is always the
    same instance. Careful combinations of new instances and shared instances of container
    services will allow us to pare down our dependency creation logic.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以告诉容器返回任何定义的服务对象的新实例。或者，我们可以告诉容器创建并返回该服务对象的共享实例，这样每次获取它时，它都是同一个实例。精心组合容器服务的新实例和共享实例将允许我们简化依赖创建逻辑。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At no point will we be passing the container into any of the objects that need
    dependencies. To do so would be using a pattern called Service Locator. We avoid
    Service Locator activity because doing so is a violation of scope. When the container
    is inside an object, and that object uses it to retrieve dependencies, we are
    only one step removed from where we started; that is, with the `global` keyword.
    As such, we do not pass the container around -- it stays entirely outside the
    scope of the objects it creates.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时候，我们都不会将容器传递给需要依赖的任何对象。这样做将使用一种称为服务定位器的模式。我们避免服务定位器活动，因为这样做违反了范围。当容器在一个对象内部，并且该对象使用它来检索依赖时，我们只是离我们开始的地方一步之遥；也就是说，使用`global`关键字。因此，我们不会传递容器
    -- 它完全留在创建对象的范围之外。
- en: There are many different container implementations in PHP land, each with its
    own strengths and weaknesses. To keep things tailored to our modernization process,
    we will use the *Mlaphp\Di*. This is a stripped down container implementation
    that is well-suited to our transitional needs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PHP领域中有许多不同的容器实现，每种实现都有其自身的优势和劣势。为了使事情与我们的现代化过程相适应，我们将使用*Mlaphp\Di*。这是一个精简的容器实现，非常适合我们的过渡需求。
- en: Adding a DI Container
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加DI容器
- en: 'The process for adding a DI container, in general, is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，添加DI容器的过程如下：
- en: Add a new `services.php` include file to create the container and manage its
    services.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的`services.php`包含文件来创建容器并管理其服务。
- en: Define a `router` service in the container.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在容器中定义一个`router`服务。
- en: Modify the front controller to include the `services.php` file and use the `router`
    service, then spot check the application.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改前端控制器以包含`services.php`文件并使用`router`服务，然后对应用程序进行抽查。
- en: 'Extract creation logic from each page script to the container:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从每个页面脚本中提取创建逻辑到容器中：
- en: Create a service in the container named for the page script controller class.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在容器中为页面脚本控制器类命名一个服务。
- en: Copy the logic from the page script into the container service. Rename variables
    as needed to use DI container properties.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面脚本中的逻辑复制到容器服务中。根据需要重命名变量以使用DI容器属性。
- en: Route the page URL path to the container service name (i.e., the controller
    name).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将页面URL路径路由到容器服务名称（即控制器名称）。
- en: Spot check and commit the change.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查并提交更改。
- en: Continue until all page scripts have been extracted to the container.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续，直到所有页面脚本都已提取到容器中。
- en: Remove the empty `pages/` directory, commit, push, and notify QA.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除空的`pages/`目录，提交，推送，并通知QA。
- en: Add a DI Container Include File
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加DI容器包含文件
- en: To keep our existing setup files from growing even larger, we will introduce
    a new `services.php` setup file. Yes, this means adding another `include` to the
    front controller, but if we have been diligent, there are few if any includes
    remaining in our application. This one will be of little import.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止我们现有的设置文件变得更大，我们将引入一个新的`services.php`设置文件。是的，这意味着在前端控制器中添加另一个`include`，但是如果我们一直很勤奋，我们的应用程序中几乎没有剩余的`include`。这个`include`的重要性将会很小。
- en: First, we need to pick an appropriate location for the file. It is probably
    best if it goes along with any other setup files we already have, perhaps in an
    existing `includes/` directory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要选择一个适当的位置放置文件。最好是与我们已有的任何其他设置文件一起，可能是在现有的`includes/`目录中。
- en: 'Then we create the file with the following line. (We will add much more to
    this file as we continue.) Because the file will be loaded as the last of our
    setup files, we can presume that autoloading will be active, so there is no need
    to load the `Di` class file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建了以下行的文件。（随着我们的继续，我们将在这个文件中添加更多内容。）因为这个文件将作为我们设置文件的最后一个加载，我们可以假设自动加载将会生效，所以没有必要加载`Di`类文件：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What happens as a result is that the new `$di` instance is loaded with all the
    existing global variable values. These values are retained as properties on the
    container. For example, if our setup files create a `$db_user` variable, we can
    now additionally access that value as `$di->db_user`. These are copies, not references,
    so changes to one will not affect the other.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是新的`$di`实例加载了所有现有的全局变量值。这些值作为容器的属性被保留。例如，如果我们的设置文件创建了一个`$db_user`变量，现在我们还可以通过`$di->db_user`访问该值。这些是副本，而不是引用，因此对一个的更改不会影响另一个。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Why do we retain the existing variables as properties?**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么我们保留现有变量作为属性？**'
- en: Currently, our page scripts access the global variables directly for their creation
    work. However, in a later step, the creation logic will no longer be in the global
    scope. It will be "inside" the DI container. Thus, we populate the DI container
    with a copy of the variables that would have been available otherwise.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的页面脚本直接访问全局变量来进行创建工作。然而，在后续步骤中，创建逻辑将不再在全局范围内。它将在DI容器中。因此，我们将DI容器填充了原本可以使用的变量的副本。
- en: Add a Router Service
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个路由器服务
- en: Now that we have a DI container in place, let's add our first service.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个DI容器，让我们添加我们的第一个服务。
- en: Recall that the purpose of a DI container is to create objects for us. Currently,
    the front controller creates a *Router* object, so we will add a `router` service
    to the container. (In the next step, we will have the front controller use this
    service instead of creating a *Router* on its own.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，DI容器的目的是为我们创建对象。目前，前端控制器创建了一个*Router*对象，因此我们将在容器中添加一个`router`服务。（在下一步中，我们将让前端控制器使用这个服务，而不是自己创建一个*Router*。）
- en: 'In the `services.php` file, add the following lines:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`services.php`文件中，添加以下行：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's examine the service defination a little bit.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微检查一下服务定义。
- en: The service name is `router`. We will use all-lowercase names for service objects
    intended to be created once as shared instances, and fully-qualified class names
    for service objects intended to be created as new instances each time. Thus, in
    this case, our intent is that only a single shared `router` will be available
    via the container. (This is a convention, not a rule that is enforced by the container.)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务名称是`router`。我们将用全小写名称来命名那些预期作为共享实例创建的服务对象，并使用完全限定的类名来命名那些预期每次创建新实例的服务对象。因此，在这种情况下，我们的意图是通过容器只提供一个共享的`router`。（这是一个约定，而不是容器强制执行的规则。）
- en: The service definition is a callable. In this case, it is a closure. The closure
    receives no parameters, but it does use the `$di` object from the current scope.
    This makes it possible for the definition code to access container properties
    and other container services while building the service object.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务定义是一个可调用的。在这种情况下，它是一个闭包。闭包不接收任何参数，但它确实使用了当前作用域中的`$di`对象。这使得定义代码可以在构建服务对象时访问容器属性和其他容器服务。
- en: We create and then return the object represented by the service name. We do
    not need to check if the object already exists in the container; the container
    internals will do that for us if we ask for a shared instance.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建并返回由服务名称表示的对象。我们不需要检查对象是否已经存在于容器中；如果我们要求一个共享实例，容器内部将为我们执行这项工作。
- en: With this bit of code, the container now knows how to create a `router` service.
    It is lazy-loaded code that will only be executed when we call `$di->newInstance()`
    (to get a new instance of the service object) or `$di->get()` (to get a shared
    instance of the service object).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这段代码，容器现在知道如何创建一个`router`服务。这是一个懒加载的代码，只有当我们调用`$di->newInstance()`（获取服务对象的新实例）或者`$di->get()`（获取服务对象的共享实例）时才会执行。
- en: Modify the Front Controller
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改前端控制器
- en: Now that we have a DI container and a `router` service definition, we modify
    the front controller to load the container and use the `router` service.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个DI容器和一个`router`服务定义，我们修改前端控制器来加载容器并使用`router`服务。
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We have made the following changes from the previous implementation:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从之前的实现中做了以下更改：
- en: We added a `require` for the `services.php` container file as the very last
    of our setup includes.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在设置包含的最后添加了对`services.php`容器文件的`require`。
- en: Instead of creating a *Router* object directly, we `get()` a shared instance
    of the `router` service object from the `$di` container.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不直接创建*Router*对象，而是从`$di`容器中`get()`一个共享实例的`router`服务对象。
- en: We have changed our dispatching logic somewhat. After we get a `$route` from
    the `$router`, we check to see if the `$di` container `has()` a matching service.
    If so, it treats the `$route` as a service name for a new `$controller` instance;
    otherwise, it treats the `$route` as a file in `pages/` that creates a `$controller`.
    Either way, the code then invokes the controller and sends the response.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们已经在调度逻辑上做了一些更改。在我们从`$router`获取`$route`之后，我们检查看看`$di`容器是否`has()`匹配的服务。如果是，它将`$route`视为新`$controller`实例的服务名称；否则，它将`$route`视为在`pages/`中创建`$controller`的文件。无论哪种方式，代码都会调用控制器并发送响应。
- en: After these changes, we spot check the application to make sure the new `router`
    service works properly. If it does not, we undo and redo our changes up to this
    point until the application works as it did before.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些更改之后，我们会抽查应用程序，以确保新的“router”服务能够正常工作。如果不能正常工作，我们会撤消并重做到这一点，直到应用程序像以前一样正常工作。
- en: We may wish to commit our changes once the application works. This is so that
    if future changes go bad, we have a known-working state to which we can revert.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序正常工作，我们可能希望提交我们的更改。这样，如果将来的更改出现问题，我们就有一个已知工作状态可以恢复。
- en: Extract Page Scripts to Services
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将页面脚本提取到服务中
- en: Now comes the final push in modernizing our legacy application. We are going
    to remove our page scripts one-by-one and put their logic into the container.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是现代化我们的遗留应用程序的最后一步。我们将逐个删除页面脚本，并将它们的逻辑放入容器中。
- en: Create a Container Service
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建一个容器服务
- en: Pick any page script and determine what class it uses to create its `$controller`
    instance. Then, in the DI container, create an empty service definition for that
    class name.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 选择任何页面脚本，并确定它使用哪个类来创建其“$controller”实例。然后，在DI容器中，为该类名创建一个空的服务定义。
- en: 'For example, if we have this page script:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有这个页面脚本：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We the controller class being instantiated is `Controller\ArticlesPage`. In
    our `services.php` file, we create an empty service definition with that name:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实例化的控制器类是`Controller\ArticlesPage`。在我们的`services.php`文件中，我们创建了一个空的服务定义：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, we move the page script setup logic into the service definition. When
    we do so, we should note any variables that we expected from the global scope,
    and prefix them with `$di->` to reference the appropriate container properties.
    (Recall that these were loaded from `$GLOBALS` early in the `services.php` file.)
    We also return the controller instance at the end of the definition.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将页面脚本设置逻辑移到服务定义中。当我们这样做时，我们应该注意到我们期望从全局范围获得的任何变量，并使用`$di->`前缀来引用适当的容器属性。（回想一下，这些是在`services.php`文件的早期从`$GLOBALS`加载的。）我们还在定义的最后返回控制器实例。
- en: 'When we are done, the service definition will look something like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，服务定义将看起来像这样：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once we have copied the logic over to the container, we delete the orginal page
    script file from `pages/`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将逻辑复制到容器中，我们就从`pages/`中删除原始页面脚本文件。
- en: Route the URL Path to the Container Service
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将URL路径路由到容器服务
- en: Now that we have removed the page script in favor of the container service,
    we need to make sure the *Router* points to the container service instead of the
    now-missing page script. We do this by adding an array element to the `setRoutes()`
    method parameter where the key is the URL path and the value is the service name.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经删除了页面脚本，转而使用容器服务，我们需要确保*Router*指向容器服务，而不是现在缺失的页面脚本。我们通过向“setRoutes()”方法参数添加一个数组元素来实现这一点，其中键是URL路径，值是服务名称。
- en: 'For example, if the URL path is `/articles.php` and our new container service
    is named `Controller\ArticlesPage`, we would modify our `router` service like
    so:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果URL路径是`/articles.php`，我们的新容器服务命名为`Controller\ArticlesPage`，我们将修改我们的`router`服务如下：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Spot Check and Commit
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 抽查和提交
- en: Finally, we check to see if the conversion from page script to container service
    works as we expect. We spot check the URL path to the old page script by browsing
    to or otherwise invoking that URL. If it works, then we know the container service
    has successfully taken the place of the now-deleted page script.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们检查页面脚本转换为容器服务是否按我们的预期工作。我们通过浏览或以其他方式调用URL路径来抽查旧页面脚本。如果它起作用，那么我们知道容器服务已成功取代现在已删除的页面脚本。
- en: 'If not, we need to undo and redo our changes to see where things went wrong.
    The most common errors I see here are:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是，我们需要撤消并重做我们的更改，看看哪里出了问题。我在这里看到的最常见的错误是：
- en: Failure to replace `$var` variables in the page script with `$di->var` properties
    in the service definition
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未能将页面脚本中的`$var`变量替换为服务定义中的`$di->var`属性
- en: Failure to return the object from the service definition
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未能从服务定义中返回对象
- en: Mismatches between the controller service name and the mapped route value
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器服务名称与映射的路由值之间的不匹配
- en: Once we are sure the application routes the URL to the new container service,
    and that the service works properly, we commit our changes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定应用程序将URL路由到新的容器服务，并且服务正常工作，我们就提交我们的更改。
- en: Do ... While
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 做...直到
- en: We proceed to the next page script and begin the process over again. When all
    page scripts have been converted to container services and then deleted, we are
    done.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续下一个页面脚本，并重新开始这个过程。当所有页面脚本都转换为容器服务然后被删除时，我们就完成了。
- en: Remove pages/, Commit, Push, Notify QA
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除pages/，提交，推送，通知QA
- en: After we have extracted all of our page scripts to the DI container, the `pages/`
    directory should be empty. We can now safely remove it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将所有页面脚本提取到DI容器之后，“pages/”目录应该是空的。我们现在可以安全地将其删除。
- en: With that, we commit our work, push to the common repository, and notify QA
    that we have new changes for them to review.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们提交我们的工作，推送到共同的存储库，并通知QA我们有新的更改需要他们审查。
- en: Common Questions
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: How can we refine our service definitions?
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们如何完善我们的服务定义？
- en: When we are done extracting our object creation logic to the container, each
    service definition is likely to be rather long, and probably repetitive. It would
    be nice to reduce the repetition and refine the service definition so as to make
    them short and succinct. We can do so by further extracting each part of object
    creation logic to its own service.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成将对象创建逻辑提取到容器后，每个服务定义可能会变得相当长，而且可能重复。我们可以通过进一步将对象创建逻辑的每个部分提取到自己的服务中来减少重复并完善服务定义，使其变得简短而简洁。
- en: For example, if we have several services that use a *Request* object, we can
    extract the object creation logic to its own service and then reference that service
    in other services. We can name it to show our intent that it be used as can be
    intended as a shared service (`request`) or as a new instance (`Mlaphp\Request`).
    Other services can then use `get()` or `newInstance()` instead of creating the
    request internally.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有几个服务使用*Request*对象，我们可以将对象创建逻辑提取到自己的服务中，然后在其他服务中引用该服务。我们可以命名它以显示我们的意图，即它可以被用作共享服务（`request`）或新实例（`Mlaphp\Request`）。其他服务可以使用`get()`或`newInstance()`而不是在内部创建请求。
- en: 'Given our earlier `Controller\ArticlesPage` service, we could split it up into
    several reusable services like so:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们之前的`Controller\ArticlesPage`服务，我们可以将其拆分为几个可重用的服务，如下所示：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice how the `Controller\ArticlesPage` service now references other services
    in the container to build its own object. When we get a new instance of the `Controller\ArticlesPage`
    service object, it addresses the `$di` container to obtain the shared request
    and response objects, the `$user` property, and a new instance of the *ArticleTransactions*
    service object. That, in turn, recursively addresses the `$di` container to obtain
    the dependencies for that service object, and so on.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`Controller\ArticlesPage`服务现在引用容器中的其他服务来构建自己的对象。当我们获得`Controller\ArticlesPage`服务对象的新实例时，它会访问`$di`容器以获取共享的请求和响应对象、`$user`属性以及*ArticleTransactions*服务对象的新实例。这反过来又会递归地访问`$di`容器以获取该服务对象的依赖关系，依此类推。
- en: What if there are includes In the Page Script?
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果页面脚本中有包含文件怎么办？
- en: Even though we have done our best to remove them, it is possible that we still
    have some include files in our page scripts. When we copy the page script logic
    to the container, we have little choice but to copy them as well. However, once
    all our page scripts have been converted to the container, we can look for commonalities
    and begin extracting the include logic either to a setup script or to separate
    classes (which themselves can become services if needed).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经尽力删除它们，但我们的页面脚本中可能仍然存在一些包含文件。当我们将页面脚本逻辑复制到容器时，我们别无选择，只能一并复制它们。然而，一旦我们所有的页面脚本都转换为容器，我们就可以寻找共同点，并开始将包含逻辑提取到设置脚本或单独的类中（如果需要，这些类本身可以成为服务）。
- en: Can we reduce the size of the services.php file?
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们能减小services.php文件的大小吗？
- en: Depending on the number of page scripts in our application, our DI container
    may end up with tens or hundreds of service definitions. This can be a lot to
    manage or scan through in a single file.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们应用程序中页面脚本的数量，我们的DI容器可能会有数十个或数百个服务定义。这可能会使单个文件难以管理或浏览。
- en: If we like, it is perfectly reasonable to split the container into multiple
    files, and make the `services.php` a series of include calls to bring in the various
    definitions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，将容器拆分为多个文件，并使`services.php`成为包含各种定义的一系列调用也是完全合理的。
- en: Can we reduce the size of the router service?
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们能减小router服务的大小吗？
- en: As a subset of the DI container file length, the `router` service in particular
    is likely to become very long. This is because we map every URL in the application
    to a service; if there are hundreds of URLs, there will be hundreds of `router`
    lines.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作为DI容器文件长度的子集，`router`服务特别可能会变得非常长。这是因为我们将应用程序中的每个URL映射到一个服务；如果有数百个URL，就会有数百行`router`。
- en: 'As an alternative, we can create a separate `routes.php` file and have it return
    an array of routes. We can then include that file in the `setRoutes()` call:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种替代方案，我们可以创建一个单独的`routes.php`文件，并让它返回一个路由数组。然后我们可以在`setRoutes()`调用中包含该文件：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That at least will reduce the size of the `services.php` file, even though it
    does not reduce the size of the routes array.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 至少这将减小`services.php`文件的大小，尽管它并不会减小路由数组的大小。
- en: What if we cannot update to PHP 5.3?
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果我们无法升级到PHP 5.3怎么办？
- en: The examples in this chapter show a DI container that uses closures to encapsulate
    object creation logic. Closures only became available in PHP 5.3, so if we are
    stuck on an earlier version of PHP, it looks like using a DI container is simply
    not an option.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例显示了一个使用闭包封装对象创建逻辑的DI容器。闭包只在PHP 5.3中才可用，因此如果我们卡在较早版本的PHP上，使用DI容器似乎根本不是一个选择。
- en: This turns out not to be true. With some extra effort and a greater toleration
    for inelegance, we can still build a DI container for PHP 5.2 and earlier.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明这并不正确。通过一些额外的努力和更大的容忍度，我们仍然可以为PHP 5.2及更早版本构建DI容器。
- en: 'First, we need to extend the DI container so that we can add methods to it.
    Then, instead of creating service definitions as closures, we create them as methods
    on our extended container:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要扩展DI容器，以便我们可以向其添加方法。然后，我们不再将服务定义为闭包，而是将它们创建为我们扩展容器上的方法：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: (Notice how we use `$this` instead of `$di` in the method.)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: （注意我们在方法中使用`$this`而不是`$di`。）
- en: 'Then in our `services.php` file, the callable becomes a reference to this method,
    instead of an inline closure:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在我们的`services.php`文件中，可调用的内容变成了对这个方法的引用，而不是内联闭包。
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is messy but workable. It can also get pretty verbose. Our earlier example
    of splitting up the `Controller\ArticlesPage` ends up looking more like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这有些混乱但可行。它也可能变得非常冗长。我们之前将`Controller\ArticlesPage`拆分的示例最终看起来更像这样：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Unfortunately, we may have to break with some of our style conventions to keep
    the service names looking like their related method names. We also have to shorten
    the service method names intended for new instances down to their ending class
    names, instead of their fully qualified names. Otherwise we find ourselves with
    overly long and confusing method names.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，为了使服务名称看起来像它们相关的方法名称，我们可能不得不打破一些我们的风格约定。我们还必须将用于新实例的服务方法名称缩短为它们的结束类名，而不是它们的完全限定名称。否则，我们会发现自己有着过长和令人困惑的方法名称。
- en: This can get confusing fast, but it does work. In all, it really is better if
    we can upgrade to PHP 5.3 or later.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会很快让人困惑，但它确实有效。总的来说，如果我们能升级到PHP 5.3或更高版本，那真的会更好。
- en: Review and next steps
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: At last, we have completed our modernization process. We no longer have any
    page scripts. All of our application logic has been converted to classes, and
    the only remaining include files are part of the bootstrap and setup process.
    All of our object creation logic exists inside a container, where we can modify
    it directly without having to disturb the internals of our objects.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于完成了现代化的过程。我们不再有任何页面脚本。我们所有的应用逻辑都已转换为类，剩下的唯一包含文件是引导和设置过程的一部分。我们所有的对象创建逻辑都存在于一个容器中，我们可以直接修改它，而不必干扰我们对象的内部。
- en: What could the next step possibly be after this? The answer is continuous improvement
    and it is going to last for the rest of your career.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之后可能的下一步是什么呢？答案是持续改进，这将持续到你的职业生涯的最后。
