- en: Working with Packages
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用包
- en: Modern PHP applications tend to be comprised of a large number of files. Take
    the Magento 2 eCommerce platform as an example. Once installed, its `vendor` directory contains
    over thirty thousand of the PHP class files. The sheer size of it is enough to
    stunt anyone. Why so many files, one might wonder? Nowadays, it is popular, if
    not mandatory, to make use of preexisting libraries and packages other developers
    have written before us. It would not make much sense to *reinvent the wheel* all
    the time. This is why package managers such as Composer are ever so popular among
    the PHP developers. Making use of these package managers usually means pulling
    in a diverse set of third-party packages into our project. While this usually
    hints increased application size, it also allows us to jump-start our application
    development. The added benefit being the quality and continuous maintenance of
    these packages by third parties, which we then merely update into our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代PHP应用程序往往由大量文件组成。以Magento 2电子商务平台为例。一旦安装，其`vendor`目录包含超过三万个PHP类文件。它的庞大足以使任何人震惊。为什么会有这么多文件，人们可能会想？如今，使用其他开发人员在我们之前编写的现有库和包是流行的，甚至是强制性的。总是重新发明轮子并没有太多意义。这就是为什么像Composer这样的包管理器在PHP开发人员中如此受欢迎的原因。使用这些包管理器通常意味着将各种第三方包引入我们的项目。虽然这通常暗示着应用程序大小的增加，但它也允许我们快速启动应用程序开发。另一个好处是这些包由第三方持续维护，我们只需将其更新到我们的应用程序中。
- en: 'In this chapter, we will look into Composer, the most popular PHP package manager:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究Composer，最受欢迎的PHP包管理器：
- en: Understanding Composer
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Composer
- en: Understanding Packagist
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Packagist
- en: Using third-party packages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方包
- en: Creating your own package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你自己的包
- en: Distributing your package
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发您的包
- en: Throughout the previous chapters, we already had certain touching points with
    Composer, as we used some of its packages. The following sections are to add some
    extra clarity on top of that, as well as showcase how we can create our own packages.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们已经接触到了Composer，因为我们使用了它的一些包。以下各节将在此基础上增加一些额外的清晰度，并展示我们如何创建自己的包。
- en: Understanding Composer
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Composer
- en: 'Composer is a *per-project* package manager for PHP. Originally released in
    2011, it quickly caught up and became a favorite package manager among PHP developers.
    Just by looking at its GitHub statistics, we can see the project is being actively
    developed by the community:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是PHP的*每个项目*包管理器。最初于2011年发布，它迅速赶上并成为PHP开发人员中最受欢迎的包管理器。仅仅通过查看其GitHub统计数据，我们就可以看到该项目正在由社区积极开发：
- en: '![](assets/e14d7ade-f249-4709-80cf-7a592d78176f.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e14d7ade-f249-4709-80cf-7a592d78176f.png)'
- en: 'Nowadays, it is an integral part of almost every popular PHP project. Installing
    Composer is a pretty straightforward task. Assuming we are using the fresh Ubuntu
    16.10 (Yakkety Yak) installation, the following command outlines how we can install
    Composer:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，它几乎成为每个流行的PHP项目的一个组成部分。安装Composer是一个相当简单的任务。假设我们正在使用新的Ubuntu 16.10（Yakkety
    Yak）安装，以下命令概述了我们如何安装Composer：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running `composer -v` after the installation should show the output similar
    to the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后运行`composer -v`应该显示类似以下截图的输出：
- en: '![](assets/cad1b44a-b5ed-49bd-aa8e-6a2db623e449.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cad1b44a-b5ed-49bd-aa8e-6a2db623e449.png)'
- en: 'Now that we have it installed, using Composer is quite simple. Assuming we
    have an existing project to which we would like to add the Twig library, we can
    do so just by running the following command within our project root directory:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了它，使用Composer非常简单。假设我们有一个现有项目，我们想要添加Twig库，我们只需在项目根目录中运行以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](assets/b1e995de-1231-4e0e-9e21-c040d510ad87.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b1e995de-1231-4e0e-9e21-c040d510ad87.png)'
- en: 'Upon execution, two files and a directory are created/modified: `composer.json`,
    `composer.lock`, and `vendor`. The `vendor` directory is the physical location
    where Composer places the packages we choose to install. We could have easily
    started off by manually creating the same `composer.json` file with the content
    as follows, and then running the `composer install` command within the project
    directory:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，会创建/修改两个文件和一个目录：`composer.json`，`composer.lock`和`vendor`。`vendor`目录是Composer放置我们选择安装的包的物理位置。我们本可以通过手动创建相同的`composer.json`文件并运行`composer
    install`命令来开始，内容如下：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Check out [https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md)
    for full information on possible `composer.json` content.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md)获取有关可能的`composer.json`内容的完整信息。
- en: 'Now we could easily modify `index.php` or any other entry-point file to our
    root project directory and include all of the installed composer packages by adding
    the following entry to it as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以轻松修改`index.php`或任何其他入口文件到我们的根项目目录，并通过添加以下条目来包含所有已安装的composer包：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `vendor/autoload.php` file is created by the composer tool, which handles
    the autoloading of all the packages we pulled in through composer, the content
    of which looks like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`vendor/autoload.php`文件是由composer工具创建的，它处理了我们通过composer拉入的所有包的自动加载，内容如下：'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This file is not something we should really concern ourselves with, aside from
    knowing where it is.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件并不是我们真正需要关心的东西，除了知道它在哪里。
- en: Both PSR-4 and PSR-0 autoloading are supported, although PSR-4 is the recommended
    way as it offers a greater ease of use.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 支持PSR-4和PSR-0自动加载，尽管PSR-4是推荐的方式，因为它提供了更大的易用性。
- en: As soon as we include `/vendor/autoload.php` into our script, all of the pulled
    in packages become available to our application. Whether it is a new or existing
    project, Composer makes it quite easy to add packages to it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将`/vendor/autoload.php`包含到我们的脚本中，所有拉入的包都可以在我们的应用程序中使用。无论是新项目还是现有项目，Composer都可以很容易地向其中添加包。
- en: Learning about Composer in full is out of the scope of this section. Consult
    the original documentation ([https://getcomposer.org/](https://getcomposer.org/))
    for more details on Composer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 全面了解Composer超出了本节的范围。有关Composer的更多详细信息，请参阅原始文档([https://getcomposer.org/](https://getcomposer.org/))。
- en: Understanding Packagist
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Packagist
- en: Much like the Git and GitHub relationship, we have the Composer and Packagist
    relationship. While **Composer** itself is the actual tool, **Packagist** is the
    default repository service that provides packages for Composer. Service is easy
    enough to let us find packages we would like to use for our project. Without getting
    into the internals, it is suffice to say that the composer tool understands where
    to get the code for each of the packages hosted on Packagist.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Git和GitHub的关系一样，我们有Composer和Packagist的关系。虽然**Composer**本身是实际工具，**Packagist**是为Composer提供包的默认存储库服务。服务足够简单，让我们找到我们想要为项目使用的包。不需要深入了解内部情况，可以说composer工具知道在Packagist上托管的每个包的代码在哪里获取。
- en: 'The Packagist repository service is hosted at [https://packagist.org](https://packagist.org):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Packagist存储库服务托管在[https://packagist.org](https://packagist.org)上：
- en: '![](assets/06ab76e9-13ac-498e-9612-0c429beb57ab.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/06ab76e9-13ac-498e-9612-0c429beb57ab.png)'
- en: 'The popularity of Composer over time can be easily observed through the [https://packagist.org/statistics](https://packagist.org/statistics)
    page, which shows the rapidly increasing number of packages in the Packagist repository
    over the course of few years:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Composer的受欢迎程度随时间的推移可以通过[https://packagist.org/statistics](https://packagist.org/statistics)页面轻松观察到，该页面显示了Packagist存储库中包的数量在几年内迅速增加的情况：
- en: '![](assets/e496c0dd-e78a-408c-a8c9-730d7d9f968a.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e496c0dd-e78a-408c-a8c9-730d7d9f968a.png)'
- en: Using third-party packages
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用第三方包
- en: 'We already saw how easy it is to install the composer package via one of the
    following two options:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了通过以下两种选项之一安装composer包是多么容易：
- en: Executing a command such as `require vendor/package:2.* vendor/package2:dev-master`
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行诸如`require vendor/package:2.* vendor/package2:dev-master`之类的命令
- en: Adding a package link information under `composer.json` `require`, and executing
    `composer install` on console
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`composer.json`的`require`下添加包链接信息，并在控制台上执行`composer install`
- en: 'Without knowing which package exactly we might need, we could use the [https://packagist.org](https://packagist.org)
    search tool to find it. Let''s consider, for example, we are looking for a package
    with an e-mail sending functionality. This is where the sheer size of the Packagist
    repository might take us some time to find the right package. Luckily, we can
    use Sort by downloads or Sort by favorites to help ourselves out:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不知道我们可能需要哪个包，我们可以使用[https://packagist.org](https://packagist.org)搜索工具来查找。例如，假设我们正在寻找具有电子邮件发送功能的包。这就是Packagist存储库的庞大规模可能需要我们一些时间来找到合适的包的地方。幸运的是，我们可以使用下载量排序或收藏夹排序来帮助自己：
- en: '![](assets/857cc6de-49c9-441c-b7b8-5f67c1c7e198.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/857cc6de-49c9-441c-b7b8-5f67c1c7e198.png)'
- en: 'Once we click on the individual package, we get to see the available versions
    we can install:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦单击单个包，我们就可以看到可以安装的可用版本：
- en: '![](assets/e5a96eb1-a05f-4c45-a099-3a39c6647999.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e5a96eb1-a05f-4c45-a099-3a39c6647999.png)'
- en: Running `composer require swiftmailer/swiftmailer` in this case would give us
    the latest stable version 5.4.6.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下运行`composer require swiftmailer/swiftmailer`将为我们提供最新的稳定版本5.4.6。
- en: Once installed, packages can later be updated to possible new stable versions
    simply by running the `composer update` command within the project root.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，可以通过在项目根目录中运行`composer update`命令来将包稍后更新为可能的新稳定版本。
- en: Creating your own package
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的包
- en: 'Using the `composer init` command, we can kick off the interactive `composer.json` generator
    that we will use later on to distribute our package. The interactive generator
    raises several questions, as per the following output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`composer init`命令，我们可以启动交互式`composer.json`生成器，稍后我们将使用它来分发我们的包。交互式生成器提出了几个问题，如下所示：
- en: '![](assets/ed12ecb8-3bdb-4ff8-afd7-0335ec6bb960.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ed12ecb8-3bdb-4ff8-afd7-0335ec6bb960.png)'
- en: 'We used `foggyline` as our vendor name here, whereas `mp7` (short for Mastering
    PHP 7) was used for the package name. Upon completion, the `composer.json` file
    is generated with the following content:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用`foggyline`作为我们的供应商名称，而`mp7`（代表精通PHP 7）被用作包名称。完成后，将生成具有以下内容的`composer.json`文件：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s go ahead and create the `src/Foggyline/MP7/Greeting/Goodbye.php`
    file, relative to the project root directory, with the following content:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续创建相对于项目根目录的`src/Foggyline/MP7/Greeting/Goodbye.php`文件，其中包含以下内容：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is our dummy library class that we will soon distribute as the composer
    package. Before we do so, we need to amend `composer.json` by adding the top-level `autoload` entry
    to it, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们即将分发为composer包的虚拟库类。在这样做之前，我们需要通过添加顶级`autoload`条目来修改`composer.json`，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To test if `autoload` is set right, we run the `composer dump-autoload --optimize`
    console command and create the `index.php` file with the following content. We
    deliberately use the full path to the `MP7` directory, as this will be our individual
    library, that is, package:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试`autoload`是否设置正确，我们运行`composer dump-autoload --optimize`控制台命令，并创建具有以下内容的`index.php`文件。我们故意使用完整路径到`MP7`目录，因为这将是我们的单独库，即包：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If all went well, running this script should give us a Welcome John output.
    Now that we have `composer.json` describing our project, and `src/Foggyline/MP7/`
    containing our library code, we can go ahead and distribute this.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，运行此脚本应该给我们一个欢迎约翰的输出。现在我们有了描述我们的项目的`composer.json`，以及包含我们的库代码的`src/Foggyline/MP7/`，我们可以继续并分发这个。
- en: Distributing your package
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分发您的包
- en: 'We first need to push `composer.json` and our library code from within `src/Foggyline/MP7/`,
    into the GitHub repository. Assuming we have an empty GitHub repository, such
    as `git@github.com:ajzele/foggyline_mp7.git`, waiting for us, we can easily do
    so through the following few commands:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将`composer.json`和我们的库代码从`src/Foggyline/MP7/`中推送到GitHub存储库。假设我们有一个空的GitHub存储库，比如`git@github.com:ajzele/foggyline_mp7.git`，等待我们，我们可以通过以下几个命令轻松地完成：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This should show up in GitHub, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该显示在GitHub上，如下所示：
- en: '![](assets/14d542f0-2be1-44b5-b8a8-b146219792b7.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/14d542f0-2be1-44b5-b8a8-b146219792b7.png)'
- en: 'With the files in the GitHub repository, we can now visit the [https://packagist.org](https://packagist.org) page
    and Submit our package:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有了GitHub存储库中的文件，我们现在可以访问[https://packagist.org](https://packagist.org)页面并提交我们的包：
- en: '![](assets/d39ee193-dbf3-4ca5-89d4-b45086c5ff40.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d39ee193-dbf3-4ca5-89d4-b45086c5ff40.png)'
- en: 'Once the Check is done, we should be able to see a screen similar to the following
    one:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦检查完成，我们应该能够看到类似以下的屏幕：
- en: '![](assets/9d66c52e-1665-4599-9939-859311798b0f.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9d66c52e-1665-4599-9939-859311798b0f.png)'
- en: 'Once we hit the Submit button, we should be able to see a screen similar to
    the following one:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击提交按钮，我们应该能够看到类似以下的屏幕：
- en: '![](assets/f27f0f7d-a6b2-48e9-b585-64c8897a249d.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f27f0f7d-a6b2-48e9-b585-64c8897a249d.png)'
- en: 'We should now be able to use the `foggyline/mp7` package within any project
    just by running the following console command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该能够通过运行以下控制台命令在任何项目中使用`foggyline/mp7`包：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice the `dev-master` suffix here. Our package is flagged as `dev-master` only.
    This is because our [https://github.com/ajzele/foggyline_mp7](https://github.com/ajzele/foggyline_mp7)
    repository has no tags defined on it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里的`dev-master`后缀。我们的包只被标记为`dev-master`。这是因为我们的[https://github.com/ajzele/foggyline_mp7](https://github.com/ajzele/foggyline_mp7)存储库上没有定义标签。
- en: 'Let''s go ahead and add a `v1.5` tag to our repository. We will do so by running
    the following console commands:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续给我们的存储库添加一个`v1.5`标签。我们可以通过运行以下控制台命令来完成：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since we are adding a tag to an already made commit, we use the commit ID `648e31cc4a`
    to attach the tag to it. Once the tag is pushed to the GitHub repository, we can
    go back to Packagist and hit the Update button on the package edit screen. This
    should instantly update the package versions list to show `v1.5`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们要给已经提交的提交添加标签，我们使用提交ID `648e31cc4a` 来附加标签。一旦标签被推送到GitHub存储库，我们可以回到Packagist并在包编辑屏幕上点击更新按钮。这应该立即更新包版本列表，显示`v1.5`：
- en: '![](assets/85531944-605f-43c7-ab7f-39865a1256e9.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/85531944-605f-43c7-ab7f-39865a1256e9.png)'
- en: 'Assuming we have some project directory with merely an `index.php` file within
    it, we should be able to use the `foggyline/mp7` package by running the following
    console command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个项目目录，里面只有一个`index.php`文件，我们应该能够通过运行以下控制台命令来使用`foggyline/mp7`包：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This should result in a directory structure, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该导致一个目录结构，如下所示：
- en: '![](assets/9a7b2a1d-4f9b-4334-9749-21b572c0d470.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9a7b2a1d-4f9b-4334-9749-21b572c0d470.png)'
- en: The `index.php` script can then start using our MP7 library just by including
    `/vendor/autoload.php`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`index.php`脚本就可以通过包含`/vendor/autoload.php`来开始使用我们的MP7库。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, we took a look at PHP's most popular package manager--Composer.
    We saw how easy it is to add third-party packages to our application, as well
    as distribute our own packages using the Packagist repository. A great deal of
    modern PHP applications rely on Composer, which is why understanding how to make
    the best of it is crucial to our day-to-day development efforts.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下PHP最流行的包管理器Composer。我们看到了如何轻松地向我们的应用程序添加第三方包，以及如何使用Packagist存储库分发我们自己的包。许多现代PHP应用程序依赖Composer，这就是为什么了解如何充分利用它对我们日常开发工作至关重要。
- en: Moving forward, we will take a look at the types of testing applicable to PHP
    applications.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下适用于PHP应用程序的测试类型。
