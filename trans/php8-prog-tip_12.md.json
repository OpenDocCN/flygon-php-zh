["```php\n__call(string $name, array $arguments): mixed;\n__callStatic(string $name, array $arguments): mixed;\n__clone(): void;\n__debugInfo(): ?array;\n__get(string $name): mixed;\n__invoke(mixed $arguments): mixed;\n__isset(string $name): bool;\n__serialize(): array;\n__set(string $name, mixed $value): void;\n__set_state(array $properties): object;\n__sleep(): array;\n__unserialize(array $data): void;\n__unset(string $name): void;\n__wakeup(): void;\n```", "```php\n    // /repo/ch09/php8_bc_break_magic.php\n    class NoTypes {\n    \u00a0\u00a0\u00a0\u00a0public function __call($name, $args) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Attempt made to call '$name' \"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. \"with these arguments: '\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. implode(',', $args) . \"'\\n\";\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    $no = new NoTypes();\n    echo $no->doesNotExist('A','B','C');\n    ```", "```php\n    class MixedTypes {\n    \u00a0\u00a0\u00a0\u00a0public function __invoke(array $args) : string {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Arguments: '\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. implode(',', $args) . \"'\\n\";\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    $mixed= new MixedTypes();\n    echo $mixed(['A','B','C']);\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch09 ]# \n    php php8_bc_break_magic.php \n    Attempt made to call 'doesNotExist' with these arguments: 'A,B,C'\n    Arguments: 'A,B,C'\n    ```", "```php\n    root@php8_tips_php8 [ /repo/ch09 ]# \n    php php8_bc_break_magic.php \n    Attempt made to call 'doesNotExist' with these arguments: 'A,B,C'\n    Arguments: 'A,B,C'\n    ```", "```php\n    // /repo/ch09/php8_bc_break_magic_wrong.php\n    class WrongType {\n    \u00a0\u00a0\u00a0\u00a0public function __isset($var) : string {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (isset($this->$var)) ? 'Y' : '';\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    $wrong = new WrongType();\n    echo (isset($wrong->nothing)) ? 'Set' : 'Not Set';\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch09 ]# \nphp php8_bc_break_magic_wrong.php \nNot Set\n```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php8_bc_break_magic_wrong.php\nPHP Fatal error:\u00a0\u00a0WrongTypes::__isset(): Return type must be bool when declared in /repo/ch09/php8_bc_break_magic_wrong.php on line 6\n```", "```php\nPDO::query(string $query, \n\u00a0\u00a0\u00a0\u00a0?int $fetchMode = null, mixed ...$fetchModeArgs)\n```", "```php\nPDOStatement::setFetchMode(int $mode, mixed ...$args)\n```", "```php\n    // /repo/ch09/php8_pdo_signature_change.php\n    $config = include __DIR__ . '/../src/config/config.php';\n    $db_cfg = $config['db-config'];\n    $pdo\u00a0\u00a0\u00a0\u00a0= new PDO($db_cfg['dsn'], \n    \u00a0\u00a0\u00a0\u00a0$db_cfg['usr'], $db_cfg['pwd']);\n    ```", "```php\n    $sql\u00a0\u00a0\u00a0\u00a0= 'SELECT hotelName, city, locality, '\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. 'country, postalCode FROM hotels '\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. 'WHERE country = ? AND city = ?';\n    $stmt\u00a0\u00a0\u00a0= $pdo->prepare($sql);\n    ```", "```php\n    $stmt->execute(['IN', 'Budhera']);\n    $stmt->setFetchMode(PDO::FETCH_ASSOC);\n    while ($row = $stmt->fetch()) var_dump($row);\n    ```", "```php\n    $stmt->execute(['IN', 'Budhera']);\n    $stmt->setFetchMode(\n    \u00a0\u00a0\u00a0\u00a0PDO::FETCH_CLASS, ArrayObject::class);\n    while ($row = $stmt->fetch()) var_dump($row);\n    ```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php8_pdo_signature_change.php \narray(5) {\n\u00a0\u00a0[\"hotelName\"]=>\u00a0\u00a0string(10) \"Rose Lodge\"\n\u00a0\u00a0[\"city\"]=>\u00a0\u00a0string(7) \"Budhera\"\n\u00a0\u00a0[\"locality\"]=>\u00a0\u00a0string(7) \"Gurgaon\"\n\u00a0\u00a0[\"country\"]=>\u00a0\u00a0string(2) \"IN\"\n\u00a0\u00a0[\"postalCode\"]=>\u00a0\u00a0string(6) \"122505\"\n}\nobject(ArrayObject)#3 (6) {\n\u00a0\u00a0[\"hotelName\"]=>\u00a0\u00a0string(10) \"Rose Lodge\"\n\u00a0\u00a0[\"city\"]=>\u00a0\u00a0string(7) \"Budhera\"\n\u00a0\u00a0[\"locality\"]=>\u00a0\u00a0string(7) \"Gurgaon\"\n\u00a0\u00a0[\"country\"]=>\u00a0\u00a0string(2) \"IN\"\n\u00a0\u00a0[\"postalCode\"]=>\u00a0\u00a0string(6) \"122505\"\n\u00a0\u00a0[\"storage\":\"ArrayObject\":private]=>\u00a0\u00a0array(0) {\u00a0\u00a0}\n}\n```", "```php\n    // /repo/ch08/php7_tidy_repair_str_static.php\n    $str = <<<EOT\n    <DIV>\n    \u00a0\u00a0\u00a0\u00a0<Div>Some Content</div>\n    \u00a0\u00a0\u00a0\u00a0<Div>Some Other Content\n    </div>\n    EOT;\n    ```", "```php\n    $class = new class() extends tidy {\n    \u00a0\u00a0\u00a0\u00a0public function repairString($str) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fixed = parent::repairString($str);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return preg_replace_callback(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'/<+?>/',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function ($item) { \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return strtolower($item); },\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fixed);\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```php\n    echo $class->repairString($str);\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch09 ]# \nphp php7_tidy_repair_str_static.php \n<!DOCTYPE html>\n<html>\n<head>\n<title></title>\n</head>\n<body>\n<div>\n<div>Some Content</div>\n<div>Some Other Content</div>\n</div>\n</body>\n</html>\n```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php7_tidy_repair_str_static.php \nPHP Fatal error:\u00a0\u00a0Cannot make static method tidy::repairString() non static in class tidy@anonymous in /repo/ch09/php7_tidy_repair_str_static.php on line 11\n```", "```php\npublic static function repairString(\n\u00a0\u00a0\u00a0\u00a0string $str, \n\u00a0\u00a0\u00a0\u00a0array|string|null $config = null, \n\u00a0\u00a0\u00a0\u00a0?string $encoding = null) { // etc.\n```", "```php\necho $class::repairString($str);\n```", "```php\n    // /src/Php8/Sql/Where.php\n    namespace Php8\\Sql;\n    class Where {\n    \u00a0\u00a0\u00a0\u00a0public $where = [];\n    \u00a0\u00a0\u00a0\u00a0public function where(...$args) : static {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->where = array_merge($this->where, $args);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// not all code is shown\n    }\n    ```", "```php\n    // /src/Php8/Sql/Select.php\n    namespace Php8\\Sql;\n    class Select extends Where {\n    \u00a0\u00a0\u00a0\u00a0public $from\u00a0\u00a0= '';\n    \u00a0\u00a0\u00a0\u00a0public $limit\u00a0\u00a0= 0;\n    \u00a0\u00a0\u00a0\u00a0public $offset\u00a0\u00a0= 0;\n    \u00a0\u00a0\u00a0\u00a0public function from(string $table) : static {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->from = $table;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function order(string $order) : static {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->order = $order;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function limit(int $num) : static {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->limit = $num;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// not all methods and properties are shown\n    }\n    ```", "```php\n    // /repo/ch09/php8_static_return_type.php\n    require_once __DIR__ \n    \u00a0\u00a0\u00a0\u00a0. '/../src/Server/Autoload/Loader.php';\n    $loader = new \\Server\\Autoload\\Loader();\n    use Php8\\Sql\\Select;\n    $start = \"'2021-06-01'\";\n    $end\u00a0\u00a0\u00a0= \"'2021-12-31'\";\n    $select = new Select();\n    echo $select->from('events')\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->cols(['id', 'event_name', 'event_date'])\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->limit(10)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->where('event_date', '>=', $start)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->where('AND', 'event_date', '<=', $end)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->render();\n    ```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php8_static_return_type.php \nSELECT id,event_name,event_date FROM events WHERE event_date >= '2021-06-01' AND event_date <= '2021-12-31' LIMIT 10\n```", "```php\n    // /repo/ch09/php7_class_normal.php\n    namespace Php7\\Image\\Strategy;\n    require_once __DIR__ \n    \u00a0\u00a0\u00a0\u00a0. '/../src/Server/Autoload/Loader.php';\n    $autoload = new \\Server\\Autoload\\Loader();\n    ```", "```php\n    $listOld = [\n    \u00a0\u00a0\u00a0\u00a0'Php7\\Image\\Strategy\\DotFill',\n    \u00a0\u00a0\u00a0\u00a0'Php7\\Image\\Strategy\\LineFill',\n    \u00a0\u00a0\u00a0\u00a0'Php7\\Image\\Strategy\\PlainFill',\n    \u00a0\u00a0\u00a0\u00a0'Php7\\Image\\Strategy\\RotateText',\n    \u00a0\u00a0\u00a0\u00a0'Php7\\Image\\Strategy\\Shadow'\n    ];\n    print_r($listOld);\n    ```", "```php\n    $listNew = [\n    \u00a0\u00a0\u00a0\u00a0DotFill::class,\n    \u00a0\u00a0\u00a0\u00a0LineFill::class,\n    \u00a0\u00a0\u00a0\u00a0PlainFill::class,\n    \u00a0\u00a0\u00a0\u00a0RotateText::class,\n    \u00a0\u00a0\u00a0\u00a0Shadow::class\n    ];\n    print_r($listNew);\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch09 ]# \nphp php7_class_normal.php \nArray (\n\u00a0\u00a0\u00a0\u00a0[0] => Php7\\Image\\Strategy\\DotFill\n\u00a0\u00a0\u00a0\u00a0[1] => Php7\\Image\\Strategy\\LineFill\n\u00a0\u00a0\u00a0\u00a0[2] => Php7\\Image\\Strategy\\PlainFill\n\u00a0\u00a0\u00a0\u00a0[3] => Php7\\Image\\Strategy\\RotateText\n\u00a0\u00a0\u00a0\u00a0[4] => Php7\\Image\\Strategy\\Shadow\n)\nArray (\n\u00a0\u00a0\u00a0\u00a0[0] => Php7\\Image\\Strategy\\DotFill\n\u00a0\u00a0\u00a0\u00a0[1] => Php7\\Image\\Strategy\\LineFill\n\u00a0\u00a0\u00a0\u00a0[2] => Php7\\Image\\Strategy\\PlainFill\n\u00a0\u00a0\u00a0\u00a0[3] => Php7\\Image\\Strategy\\RotateText\n\u00a0\u00a0\u00a0\u00a0[4] => Php7\\Image\\Strategy\\Shadow\n)\n```", "```php\n    // /repo/ch09/php7_class_and_obj.php\n    try {\n    \u00a0\u00a0\u00a0\u00a0$pdo = new PDO();\n    \u00a0\u00a0\u00a0\u00a0echo 'No problem';\n    } catch (Throwable $t) {\n    \u00a0\u00a0\u00a0\u00a0$msg = get_class($t) . ':' . $t->getMessage();\n    \u00a0\u00a0\u00a0\u00a0error_log($msg);\n    }\n    ```", "```php\n    // /repo/ch09/php8_class_and_obj.php\n    try {\n    \u00a0\u00a0\u00a0\u00a0$pdo = new PDO();\n    \u00a0\u00a0\u00a0\u00a0echo 'No problem';\n    } catch (Throwable $t) {\n    \u00a0\u00a0\u00a0\u00a0$msg = $t::class . ':' . $t->getMessage();\n    \u00a0\u00a0\u00a0\u00a0error_log($msg);\n    }\n    ```", "```php\n$arr = [1, 2, 3, 4, 5,];\n```", "```php\nfunction xyz ($fn, $ln, $mid = '',) { /* code */ }\n```", "```php\n// /repo/ch09/php8_trailing_comma.php\n$full = function ($fn, $ln, $mid = '',) {\n\u00a0\u00a0\u00a0\u00a0$mi = ($mid) ? strtoupper($mid[0]) . '. ' : '';\n\u00a0\u00a0\u00a0\u00a0return $fn . ' ' . $mi . $ln;\n};\necho $full('Fred', 'Flintstone', 'John');\n```", "```php\nroot@php8_tips_php7 [ /repo/ch09 ]# \nphp php8_trailing_comma.php \nPHP Parse error:\u00a0\u00a0syntax error, unexpected ')', expecting variable (T_VARIABLE) in /repo/ch09/php8_trailing_comma.php on line 4\n```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php8_trailing_comma.php \nFred J. Flintstone\n```", "```php\ninterface DOMParentNode {\n\u00a0\u00a0\u00a0\u00a0public readonly ?DOMElement $firstElementChild;\n\u00a0\u00a0\u00a0\u00a0public readonly ?DOMElement $lastElementChild;\n\u00a0\u00a0\u00a0\u00a0public readonly int $childElementCount;\n\u00a0\u00a0\u00a0\u00a0public function append(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...DOMNode|string|null $nodes) : void;\n\u00a0\u00a0\u00a0\u00a0public function prepend(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...DOMNode|string|null $nodes) : void;\n}\n```", "```php\ninterface DOMChildNode {\n\u00a0\u00a0\u00a0\u00a0public readonly ?DOMElement $previousElementSibling;\n\u00a0\u00a0\u00a0\u00a0public readonly ?DOMElement $nextElementSibling;\n\u00a0\u00a0\u00a0\u00a0public function remove() : void;\n\u00a0\u00a0\u00a0\u00a0public function before(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...DOMNode|string|null $nodes) : void;\n\u00a0\u00a0\u00a0\u00a0public function after(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...DOMNode|string|null $nodes) : void;\n\u00a0\u00a0\u00a0\u00a0public function replaceWith(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0...DOMNode|string|null $nodes) : void;\n}\n```", "```php\n$topic->parentNode->removeChild($topic);\n```", "```php\n$topic->remove();\n```", "```php\n    <!DOCTYPE html>\n    <!-- /repo/ch09/dom_test_1.html -->\n    <div id=\"content\">\n    <div id=\"A\">Topic A</div>\n    <div id=\"B\">Topic B</div>\n    <div id=\"C\">Topic C</div>\n    <div id=\"X\">Topic X</div>\n    </div>\n    ```", "```php\n    <!DOCTYPE html>\n    <!-- /repo/ch09/dom_test_2.html -->\n    <div id=\"content\">\n    <div id=\"D\">Topic D</div>\n    <div id=\"E\">Topic E</div>\n    <div id=\"F\">Topic F</div>\n    </div>\n    ```", "```php\n    $doc1 = DomDocument::loadHTMLFile( 'dom_test_1.html');\n    $doc2 = DomDocument::loadHTMLFile('dom_test_2.html');\n    ```", "```php\n    $topic = $doc1->getElementById('X');\n    $new = $doc2->importNode($topic);\n    $new->textContent= $topic->textContent;\n    $main = $doc2->getElementById('content');\n    ```", "```php\n    // /repo/ch09/php7_dom_changes.php\n    $main->appendChild($new);\n    $topic->parentNode->removeChild($topic);\n    ```", "```php\n    // /repo/ch09/php8_dom_changes.php\n    $main->append($new);\n    $topic->remove();\n    ```", "```php\n    echo $doc1->saveHTML();\n    echo $doc2->saveHTML();\n    ```", "```php\n    // /repo/ch09/php7_dom_changes.php\n    echo $main->lastChild->textContent . \"\\n\";\n    ```", "```php\n    // /repo/ch09/php8_dom_changes.php\n    echo $main->lastElementChild->textContent . \"\\n\";\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch09 ]# php php7_dom_changes.php \nPHP Deprecated:\u00a0\u00a0Non-static method DOMDocument::loadHTMLFile() should not be called statically in /repo/ch09/php7_dom_changes.php on line 6\n```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# php php8_dom_changes.php \n<!DOCTYPE html>\n<html><body><div id=\"content\">\n<div id=\"A\">Topic A</div>\n<div id=\"B\">Topic B</div>\n<div id=\"C\">Topic C</div>\n</div>\n</body></html>\n<!DOCTYPE html>\n<html><body><div id=\"content\">\n<div id=\"D\">Topic D</div>\n<div id=\"E\">Topic E</div>\n<div id=\"F\">Topic F</div>\n<div id=\"X\">Topic X</div></div>\n</body></html>\nLast Topic in Doc 2: Topic X\n```", "```php\n    // /repo/ch09/php7_date_time_30-60-90.php\n    $days\u00a0\u00a0= [0, 30, 60, 90];\n    $fmt\u00a0\u00a0\u00a0= 'Y-m-d';\n    $aging = [];\n    ```", "```php\n    $dti = new DateTime('now');\n    foreach ($days as $span) {\n    \u00a0\u00a0\u00a0\u00a0$interval = new DateInterval('P' . $span . 'D');\n    \u00a0\u00a0\u00a0\u00a0$item = $dti->add($interval);\n    \u00a0\u00a0\u00a0\u00a0$aging[$span] = clone $item;\n    }\n    ```", "```php\n    echo \"Day\\tDate\\n\";\n    foreach ($aging as $key => $obj)\n    \u00a0\u00a0\u00a0\u00a0echo \"$key\\t\" . $obj->format($fmt) . \"\\n\";\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch09 ]# \n    php php7_date_time_30-60-90.php \n    Day\u00a0\u00a0\u00a0\u00a0Date\n    0\u00a0\u00a0\u00a0\u00a02021-11-20\n    30\u00a0\u00a0\u00a0\u00a02021-06-23\n    60\u00a0\u00a0\u00a0\u00a02021-08-22\n    90\u00a0\u00a0\u00a0\u00a02021-11-20\n    ```", "```php\n    $dti = new DateTimeImmutable('now');\n    ```", "```php\n    $aging[$span] = DateTime::createFromImmutable($item);\n    ```", "```php\n    $aging[$span] = new DateTime($item->format($fmt));\n    ```", "```php\nDay\u00a0\u00a0\u00a0\u00a0Date\n0\u00a0\u00a0\u00a0\u00a02021-05-24\n30\u00a0\u00a0\u00a0\u00a02021-06-23\n60\u00a0\u00a0\u00a0\u00a02021-07-23\n90\u00a0\u00a0\u00a0\u00a02021-08-22\n```", "```php\n    // /repo/ch09/php8_date_time.php\n    $fmt = 'l, d M Y';\n    $dti = new DateTimeImmutable('last day of next month');\n    echo $dti::class . ':' . $dti->format($fmt) . \"\\n\";\n    ```", "```php\n    $dtt = DateTime::createFromInterface($dti);\n    $dtt->add(new DateInterval('P90D'));\n    echo $dtt::class . ':' . $dtt->format($fmt) . \"\\n\";\n    ```", "```php\n    $dtx = DateTimeImmutable::createFromInterface($dtt);\n    echo $dtx::class . ':' . $dtx->format($fmt) . \"\\n\";\n    ```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# php php8_date_time.php \nDateTimeImmutable:Wednesday, 30 Jun 2021\nDateTime:Tuesday, 28 Sep 2021\nDateTimeImmutable:Tuesday, 28 Sep 2021\n```", "```php\nuse Trait1, Trait2 { <METHOD> as <NEW_NAME>; }\n```", "```php\n    // /repo/ch09/php7_trait_conflict_as.php\n    trait Test1 {\n    \u00a0\u00a0\u00a0\u00a0public function test() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return '111111';\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    trait Test2 {\n    \u00a0\u00a0\u00a0\u00a0public function test() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return '222222';\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    $main = new class () {\n    \u00a0\u00a0\u00a0\u00a0use Test1, Test2 { test as otherTest; }\n    \u00a0\u00a0\u00a0\u00a0public function test() { return 'TEST'; }\n    };\n    ```", "```php\n    echo $main->test() . \"\\n\";\n    echo $main->otherTest() . \"\\n\";\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch09 ]# \nphp php7_trait_conflict_as.php \nTEST\n111111\n```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php7_trait_conflict_as.php \nPHP Fatal error:\u00a0\u00a0An alias was defined for method test(), which exists in both Test1 and Test2\\. Use Test1::test or Test2::test to resolve the ambiguity in /repo/ch09/php7_trait_conflict_as.php on line 6\n```", "```php\n$main = new class () {\n\u00a0\u00a0\u00a0\u00a0use Test1, Test2 { Test1::test as otherTest; }\n\u00a0\u00a0\u00a0\u00a0public function test() { return 'TEST'; }\n};\n```", "```php\n    // /repo/ch09/php7_trait_abstract_signature.php\n    declare(strict_types=1);\n    trait Test1 {\n    \u00a0\u00a0\u00a0\u00a0public abstract function add(int $a, int $b) : int;\n    }\n    ```", "```php\n    $main = new class () {\n    \u00a0\u00a0\u00a0\u00a0use Test1;\n    \u00a0\u00a0\u00a0\u00a0public function add(float $a, float $b) : float {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $a + $b;\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```php\n    echo $main->add(111.111, 222.222) . \"\\n\";\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch09 ]# \nphp php7_trait_abstract_signature.php \n333.333\n```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php7_trait_abstract_signature.php \nPHP Fatal error:\u00a0\u00a0Declaration of class@anonymous::add(float $a, float $b): float must be compatible with Test1::add(int $a, int $b): int in /repo/ch09/php7_trait_abstract_signature.php on line 9\n```", "```php\n    // /repo/src/Php7/Encrypt/Cipher.php\n    namespace Php7\\Encrypt;\n    class Cipher {\n    \u00a0\u00a0\u00a0\u00a0public $key\u00a0\u00a0= '';\n    \u00a0\u00a0\u00a0\u00a0public $salt = 0;\n    \u00a0\u00a0\u00a0\u00a0public function __construct() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->salt\u00a0\u00a0= rand(1,255);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->key\u00a0\u00a0\u00a0= bin2hex(random_bytes(8));\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function encode(string $plain) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this->encrypt($plain);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0final private function encrypt(string $plain) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return base64_encode(str_rot13($plain));\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    // /repo/ch09/php7_oop_diffs_private_method.php\n    include __DIR__ . '/../src/Server/Autoload/Loader.php';\n    $loader = new \\Server\\Autoload\\Loader();\n    use Php7\\Encrypt\\{Cipher,OpenCipher};\n    $text = 'Super secret message';\n    $cipher1 = new Cipher();\n    echo $cipher1->encode($text) . \"\\n\";\n    $cipher2 = new OpenCipher();\n    var_dump($cipher2->encode($text));\n    ```", "```php\noot@php8_tips_php7 [ /repo/ch09 ]# \nphp php7_oop_diffs_private_method.php \nRmhjcmUgZnJwZXJnIHpyZmZudHI=\nPHP Fatal error:\u00a0\u00a0Cannot override final method Php7\\Encrypt\\Cipher::encrypt() in /repo/src/Php7/Encrypt/OpenCipher.php on line 21\n```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php7_oop_diffs_private_method.php\nPHP Warning:\u00a0\u00a0Private methods cannot be final as they are never overridden by other classes in /repo/src/Php7/Encrypt/Cipher.php on line 17\nRmhjcmUgZnJwZXJnIHpyZmZudHI=\narray(2) {\n\u00a0\u00a0[\"tag\"]=>\u00a0\u00a0string(24) \"woD6Vi73/IXLaKHFGUC3aA==\"\n\u00a0\u00a0[\"cipher\"]=>\u00a0\u00a0string(28) \"+vd+jWKqo8WFPd7SakSvszkoIX0=\"\n```", "```php\n    // /repo/ch09/php8_oop_diff_anon_class_renaming.php\n    $iter = new DirectoryIterator(__DIR__);\n    ```", "```php\n    $anon = new class ($iter) extends FilterIterator {\n    \u00a0\u00a0\u00a0\u00a0public $search = '';\n    \u00a0\u00a0\u00a0\u00a0public function accept() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return str_contains(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->current(), $this->search);\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```php\n    $anon->search = 'bc_break';\n    foreach ($anon as $fn) echo $fn . \"\\n\";\n    ```", "```php\n    if ($anon instanceof OuterIterator)\n    \u00a0\u00a0\u00a0\u00a0echo \"This object implements OuterIterator\\n\";\n    ```", "```php\n    echo var_dump($anon);\n    ```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php8_oop_diff_anon_class_renaming.php\nphp8_bc_break_construct.php\nphp8_bc_break_serialization.php\nphp8_bc_break_destruct.php\nphp8_bc_break_sleep.php\nphp8_bc_break_scanner.php\nphp8_bc_break_serializable.php\nphp8_bc_break_magic_wrong.php\nphp8_bc_break_magic.php\nphp8_bc_break_magic_to_string.php\nThis object implements OuterIterator\nobject(FilterIterator@anonymous)#2 (1) {\n\u00a0\u00a0[\"search\"]=>\u00a0\u00a0string(8) \"bc_break\"\n}\n```", "```php\n// /repo/ch09/php8_namespace_reserved.php\nnamespace List\\Works\\Only\\In\\PHP8;\nclass Test {\n\u00a0\u00a0\u00a0\u00a0public const TEST = 'TEST';\n}\necho Test::TEST . \"\\n\";\n```", "```php\nroot@php8_tips_php7 [ /repo/ch09 ]# \nphp php8_namespace_reserved.php \nPHP Parse error:\u00a0\u00a0syntax error, unexpected 'List' (T_LIST),\nexpecting '{' in /repo/ch09/php8_namespace_reserved.php on line 3\n```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php8_namespace_reserved.php \nTEST\n```", "```php\n// /repo/ch09/php7_namespace_bad.php\nnamespace Doesnt \\Work \\In \\PHP8;\nclass Test {\n\u00a0\u00a0\u00a0\u00a0public const TEST = 'TEST';\n}\necho Test::TEST . \"\\n\";\n```", "```php\nroot@php8_tips_php7 [ /repo/ch09 ]# \nphp php7_namespace_bad.php\nTEST\n```", "```php\nroot@php8_tips_php8 [ /repo/ch09 ]# \nphp php7_namespace_bad.php\nPHP Parse error:\u00a0\u00a0syntax error, unexpected fully qualified name \"\\Work\", expecting \"{\" in /repo/ch09/php7_namespace_bad.php on line 3\n```"]