["```php\n   public function driver($driver = null)\n   {\n      ...\n\n   }\n\n   protected function createDriver($driver)\n   {\n      $method = 'create'.ucfirst($driver).'Driver';\n\n      ...\n   }\n\n   protected function callCustomCreator($driver)\n   {\n      return $this->customCreators[$driver]($this->app);\n   }\n\n   public function extend($driver, Closure $callback)\n   {\n      $this->customCreators[$driver] = $callback;\n\n      return $this;\n   }\n   public function getDrivers()\n   {\n      return $this->drivers;\n   }\n\n   public function __call($method, $parameters)\n   {\n      return call_user_func_array(array($this->driver(), $method), $parameters);\n   }\n```", "```php\n   protected function createDriver($driver)\n   {\n\n      ....\n   }\n\n   protected function callCustomCreator($driver)\n   {\n\n   }\n\n   public function createDatabaseDriver()\n   {\n\n   }\n\n   protected function createDatabaseProvider()\n   {\n\n      ....\n   }\n\n   public function createEloquentDriver()\n   {\n      ...\n\n   }\n\n   protected function createEloquentProvider()\n   {\n      ...\n\n   }\n\n   public function getDefaultDriver()\n   {\n      ...\n   }\n\n   public function setDefaultDriver($name)\n   {\n      ...\n   }\n```", "```php\n<?php namespace Illuminate\\Validation;\n\nuse Closure;\nuse Illuminate\\Container\\Container;\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\nclass Factory {\n\n   protected $translator;\n\n   protected $verifier;\n\n   protected $container;\n\n   protected $extensions = array();\n\n   protected $implicitExtensions = array();\n\n   protected $replacers = array();\n\n   protected $fallbackMessages = array();\n\n   protected $resolver;\n\n   public function __construct(TranslatorInterface $translator, Container $container = null)\n   {\n      $this->container = $container;\n      $this->translator = $translator;\n   }\n\n   public function make(array $data, array $rules, array $messages = array(), array $customAttributes = array())\n   {\n\n      $validator = $this->resolve($data, $rules, $messages, $customAttributes);\n\n      if ( ! is_null($this->verifier))\n      {\n         $validator->setPresenceVerifier($this->verifier);\n      }\n\n      if ( ! is_null($this->container))\n      {\n         $validator->setContainer($this->container);\n      }\n\n      $this->addExtensions($validator);\n\n      return $validator;\n   }\n\n      protected function addExtensions(Validator $validator)\n   {\n      $validator->addExtensions($this->extensions);\n\n      $implicit = $this->implicitExtensions;\n\n      $validator->addImplicitExtensions($implicit);\n\n      $validator->addReplacers($this->replacers);\n\n      $validator->setFallbackMessages($this->fallbackMessages);\n   }\n\n   protected function resolve(array $data, array $rules, array $messages, array $customAttributes)\n   {\n      if (is_null($this->resolver))\n      {\n         return new Validator($this->translator, $data, $rules, $messages, $customAttributes);\n      }\n      else\n      {\n         return call_user_func($this->resolver, $this->translator, $data, $rules, $messages, $customAttributes);\n      }\n   }\n\n      public function extend($rule, $extension, $message = null)\n   {\n      $this->extensions[$rule] = $extension;\n\n      if ($message) $this->fallbackMessages[snake_case($rule)] =  $message;\n   }\n\n   public function extendImplicit($rule, $extension, $message =  null)\n   {\n      $this->implicitExtensions[$rule] = $extension;\n\n      if ($message) $this->fallbackMessages[snake_case($rule)] =  $message;\n   }\n\n   public function replacer($rule, $replacer)\n   {\n      $this->replacers[$rule] = $replacer;\n   }\n\n   public function resolver(Closure $resolver)\n   {\n      $this->resolver = $resolver;\n   }\n\n   public function getTranslator()\n   {\n      return $this->translator;\n   }\n\n   public function getPresenceVerifier()\n   {\n      return $this->verifier;\n   }\n\n   public function setPresenceVerifier(PresenceVerifierInterface $presenceVerifier\n   {\n      $this->verifier = $presenceVerifier;\n   }\n\n}\n```", "```php\n<?php namespace Arda\\Storage\\User;\n\ninterface UserRepository {\n\n   public function all();\n\n   public function get();\n\n   public function create($input);\n\n   public function update($input);\n\n   public function delete($input);\n\n   public function find($id);\n\n}\n```", "```php\n<?php namespace Arda\\Storage\\User;\n\nuse User;\n\nclass EloquentUserRepository implements UserRepository {\n\n  public function all()\n  {\n    return User::all();\n  }\n\n  public function get()\n  {\n    return User::get();\n  }\n\n  public function create($input)\n  {\n    return User::create($input);\n  }\n\n  public function update($input)\n  {\n    return User::update($input);\n  }\n\n  public function delete($input)\n  {\n    return User::delete($input);\n  }\n\n  public function find($input)\n  {\n    return User::find($input);\n  }\n\n}\n```", "```php\nApp:bind(\n   'Arda\\Storage\\User\\UserRepository',\n   'Arda\\Storage\\User\\EloquentUserRepository'\n);\n```", "```php\n<?php namespace Illuminate\\Config;\n\ninterface LoaderInterface {\n\n   public function load($environment, $group, $namespace = null);\n\n   public function exists($group, $namespace = null);\n\n    public function addNamespace($namespace, $hint);\n\n   public function getNamespaces();\n\n   public function cascadePackage($environment, $package, $group, $items);\n\n}\n```", "```php\n<?php namespace Illuminate\\Auth;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AuthServiceProvider extends ServiceProvider {\n\n   protected $defer = true;\n\n   public function register()\n   {\n      $this->app->bindShared('auth', function($app)\n      {\n           // Once the authentication service has actually been requested by the developer\n          // we will set a variable in the application indicating this, which helps us\n          // to know that we need to set any queued cookies in the after event later.\n         $app['auth.loaded'] = true;\n\n          return new AuthManager($app);\n      });\n   }\n\n   public function provides()\n   {\n      return array('auth');\n   }\n\n}\n\n<?php namespace Illuminate\\Hashing;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass HashServiceProvider extends ServiceProvider {\n\n   protected $defer = true;\n\n   public function register()\n   {\n      $this->app->bindShared('hash', function() { return new BcryptHasher; });\n   }\n\n   public function provides()\n   {\n      return array('hash');\n   }\n\n}\n```", "```php\n'URL' => 'Illuminate\\Support\\Facades\\URL',\n```", "```php\n<?php namespace Illuminate\\Support\\Facades;\n\nclass URL extends Facade {\n\n   protected static function getFacadeAccessor() { return 'url'; }\n\n}\n```", "```php\nprotected function registerUrlGenerator()\n{\n   $this->app['url'] = $this->app->share(function($app)\n      {\n\n      $routes = $app['router']->getRoutes();\n\n      return new UrlGenerator($routes, $app->rebinding('request', function($app, $request)\n      {\n         $app['url']->setRequest($request);\n      }));\n   });\n}\n```", "```php\n//Illuminate/Routing/UrlGenerator.php\npublic function to($path, $extra = array(), $secure = null)\n{\n   //...\n}\n```"]