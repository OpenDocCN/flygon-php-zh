["```php\n<?php \n\nfunction my_function($parameter, $second_parameter) \n{ \n    // [...] \n} \n```", "```php\n<?php \n\nclass SomeClass \n{ \n   private $some_property; \n\n   // a public function \n   public function some_function() \n   { \n       // [...] \n   } \n\n   // a protected static function \n   static protected function other_function() \n   { \n       // [...] \n   } \n} \n```", "```php\n<?php \n\nfunction add(float $a, int $b): float { \n    return $a + $b; \n} \n\necho add(3.5, 1); \n// 4.5 \necho add(3, 1); \n// 4 \necho add(\"3.5\", 1); \n// 4.5 \necho add(3.5, 1.2); // 1.2 gets casted to 1 \n// 4.5 \necho add(\"1 week\", 1); // \"1 week\" gets casted to 1.0 \n// PHP Notice:  A non well formed numeric value encountered \n// 2 \necho add(\"some string\", 1); \n// Uncaught TypeError Argument 1 passed to add() must be of the type float, string given \n\nfunction test_bool(bool $a): string { \n    return $a ? 'true' : 'false'; \n} \n\necho test_bool(true); \n// true \necho test_bool(false); \n// false \necho test_bool(\"\"); \n// false \necho test_bool(\"some string\"); \n// true \necho test_bool(0); \n// false \necho test_bool(1); \n// true \necho test_bool([]); \n// Uncaught TypeError: Argument 1 passed to test_bool() must be of the type Boolean \n```", "```php\n<?php \n\ndeclare(strict_types=1); \n\nfunction add(float $a, int $b): float { \n    return $a + $b; \n} \n\necho add(3.5, 1); \n// 4.5 \necho add(3, 1); \n// 4 \necho add(\"3.5\", 1); \n// Uncaught TypeError: Argument 1 passed to add() must be of the type float, string given \necho add(3.5, 1.2); // 1.2 gets casted to 1 \n// Uncaught TypeError: Argument 2 passed to add() must be of the type integer, float given \necho add(\"1 week\", 1); // \"1 week\" gets casted to 1.0 \n// Uncaught TypeError: Argument 1 passed to add() must be of the type float, string given \necho add(\"some string\", 1); \n// Uncaught TypeError: Argument 1 passed to add() must be of the type float, string given \n\nfunction test_bool(bool $a): string { \n    return $a ? 'true' : 'false'; \n} \n\necho test_bool(true); \n// true \necho test_bool(false); \n// false \necho test_bool(\"\"); \n// Uncaught TypeError: Argument 1 passed to test_bool() must be of the type boolean, string given \necho test_bool(0); \n// Uncaught TypeError: Argument 1 passed to test_bool() must be of the type boolean, integer given \necho test_bool([]); \n// Uncaught TypeError: Argument 1 passed to test_bool() must be of the type boolean, array given \n```", "```php\n<?php \n\n$add = function(float $a, float $b): float { \n    return $a + $b; \n}; \n// since this is an assignment, you have to finish the statement with a semicolon \n```", "```php\n$add(5, 10); \n$sum = array_reduce([1, 2, 3, 4, 5], $add, 0); \n```", "```php\n<?php \n$uppercase = array_map(function(string $s): string { \n  return strtoupper($s); \n}, ['hello', 'world']); \n```", "```php\n<?php \n\nfunction return_new_function() \n{ \n  return function($a, $b, $c) { /* [...] */}; \n} \n```", "```php\n<?php \n\n$some_variable = 'value'; \n\n$my_closure = function() use($some_variable) \n{ \n  // [...] \n}; \n```", "```php\n<?php \n\n$s = 'orange'; \n\n$my_closure = function() use($s) { echo $s; }; \n$my_closure(); // display 'orange' \n\n$a = 'banana'; \n$my_closure(); // still display 'orange' \n```", "```php\n<?php \n\nclass ClosureInsideClass \n{ \n    public function testing() \n    { \n        return function() { \n            var_dump($this); \n        }; \n    } \n} \n\n$object = new ClosureInsideClass(); \n$test = $object->testing(); \n\n$test(); \n```", "```php\n<?php \n\nclass ClosureInsideClass \n{ \n    public function testing() \n    { \n        return (static function() { \n            // no access to $this here, the following line \n            // will result in an error. var_dump($this); \n        }); \n    } \n}; \n\n$object = new ClosureInsideClass(); \n$test = $object->testing(); \n\n$test(); \n```", "```php\n<?php \n\nclass ObjectAsFunction \n{ \n    private function helper(int $a, int $b): int \n    { \n        return $a + $b; \n    } \n\n    public function __invoke(int $a, int $b): int \n    { \n      return $this->helper($a, $b); \n    } \n} \n\n$instance = new ObjectAsFunction(); \necho $instance(5, 10); \n```", "```php\n<?php \n\nfunction test_callable(callable $callback) : callable { \n    $callback(); \n    return function() { \n        // [...] \n    }; \n} \n```", "```php\n$callback = 'strtoupper'; \n$callback('Hello World !'); \n```", "```php\nclass A { \n    static function hello($name) { return \"Hello $name !\\n\"; } \n    function __invoke($name) { return self::hello($name); } \n} \n\n// array with class name and static method name \n$callback = ['A', 'hello']; \n$callback('World'); \n```", "```php\n$callback = 'A::hello'; \n$callback('World'); \n```", "```php\n$a = new A(); \n\n$callback = [$a, 'hello']; \n$callback('World'); \n```", "```php\n$callback = $a; \n$callback('World'); \n```", "```php\n$callback = function(string s) { \n    return \"Hello $s !\\n\"; \n} \n$callback('World'); \n```", "```php\ncall_user_func_array($callback, ['World']); \n```"]