- en: Chapter 9. Adding an RSS Web Feed
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。添加RSS网络订阅
- en: In the previous chapter, we added the ability for the user to leave comments
    on issues and to display a list of these comments, utilizing portlet architecture
    to allow us to easily and consistently display that listing anywhere throughout
    the application. In this chapter, we are going to build upon this feature and
    expose this list of comments as an RSS data feed. Furthermore, we are going to
    use the existing feed functionality available in another open source framework,
    Zend Framework, to demonstrate just how easy it is for a Yii application to integrate
    with other frameworks and libraries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们添加了用户在问题上留下评论的功能，并显示这些评论的列表，利用小部件架构使我们能够在整个应用程序中轻松和一致地显示该列表。在本章中，我们将建立在此功能的基础上，并将这些评论列表公开为RSS数据订阅。此外，我们将使用另一个开源框架Zend框架中现有的订阅功能，以演示Yii应用程序如何轻松地与其他框架和库集成。
- en: Feature planning
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能规划
- en: The goal of this chapter is to create an RSS feed using the content created
    from our user-generated comments. We should allow users to subscribe to a comment
    feed that spans all projects as well as subscribe to individual project feeds.
    Luckily, the widget functionality we built previously already has the capability
    to return a list of recent comments across all projects as well as restrict the
    data to one specific project. So, we have already coded the appropriate methods
    to access the necessary data. The bulk of this chapter will focus on putting that
    data in the correct format to be published as an RSS feed and on adding links
    to our application to allow users to subscribe to these feeds.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是使用从用户生成的评论创建RSS订阅。我们应该允许用户订阅跨所有项目的评论订阅，以及订阅单个项目的订阅。幸运的是，我们之前构建的小部件功能已经具有返回所有项目的最新评论列表以及限制数据到一个特定项目的能力。因此，我们已经编写了访问必要数据的适当方法。本章的大部分内容将集中在将这些数据放入正确的格式以发布为RSS订阅，并在我们的应用程序中添加链接以允许用户订阅这些订阅。
- en: 'The following is a list of high-level tasks we will be completing in order
    to achieve these goals:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将完成的一系列高级任务列表，以实现这些目标：
- en: Downloading and installing Zend Framework into the Yii application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装Zend框架到Yii应用程序中
- en: Creating a new action in a controller class to respond to the feed request and
    return the appropriate data in an RSS format
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器类中创建一个新的操作，以响应订阅请求并以RSS格式返回适当的数据
- en: Altering our URL structure for ease of use
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改我们的URL结构以便使用
- en: Adding our newly created feed to both the project listings page as well as to
    each individual project details page
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们新创建的订阅添加到项目列表页面以及每个单独项目的详细页面
- en: A little background–content syndication, RSS, and Zend Framework
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点背景-内容联合，RSS和Zend框架
- en: Web content syndication has been around for many years but has only gained enormous
    popularity over the past few years. Web content syndication refers to publishing
    information in a standardized format so that it can easily be used by other websites
    and easily consumed by reader applications. Many news sites have long been electronically
    syndicating their content, but the massive explosion of web logs (also known as
    blogs) across the internet has turned content syndication, known as feeds, into
    an expected feature of almost every website. Our TrackStar application will be
    no exception.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 网络内容联合已经存在多年，但在过去几年才获得了巨大的流行。网络内容联合是指以标准化格式发布信息，以便其他网站可以轻松使用，并且可以轻松被阅读应用程序消费。许多新闻网站长期以来一直在电子联合他们的内容，但互联网上博客的大规模爆炸已经将内容联合（称为订阅）变成了几乎每个网站都期望的功能。我们的TrackStar应用程序也不例外。
- en: '**Really Simple Syndication** (**RSS**) is an XML format specification that
    provides a standard for web content syndication. There are other formats that
    could be used, but due to the overwhelming popularity of RSS among most websites,
    we will focus on delivering our feed in this format.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**真正简单的联合**（**RSS**）是一种XML格式规范，为网络内容联合提供了一个标准。还有其他可以使用的格式，但由于RSS在大多数网站中的压倒性流行，我们将专注于以这种格式提供我们的订阅。'
- en: Zend is known as "The PHP Company". One of the products they offer to assist
    in application development is Zend Framework. The framework provides components
    that can be incorporated into other framework applications. Yii is flexible enough
    to allow us to use pieces of other frameworks. We will be using just one component
    of the Zend Framework library, called `Zend_Feed`, so that we don't have to write
    all of the underlying "plumbing" code to generate our RSS-formatted web feeds.
    For more on Zend_Feed, visit [http://www.zendframework.com/manual/en/zend.feed.html](http://www.zendframework.com/manual/en/zend.feed.html).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Zend被称为“PHP公司”。他们提供的产品之一是Zend框架，用于帮助应用程序开发。该框架提供了可以并入其他框架应用程序的组件。Yii足够灵活，可以让我们使用其他框架的部分。我们将只使用Zend框架库的一个组件，称为`Zend_Feed`，这样我们就不必编写所有底层的“管道”代码来生成我们的RSS格式的网络订阅。有关Zend_Feed的更多信息，请访问[http://www.zendframework.com/manual/en/zend.feed.html](http://www.zendframework.com/manual/en/zend.feed.html)。
- en: Installing Zend Framework
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Zend框架
- en: Since we are using Zend Framework to help support our RSS needs, we first need
    to download and install the framework. To download the framework files, visit
    [http://www.zend.com/community/downloads](http://www.zend.com/community/downloads).
    Since we will only be utilizing a single component of this framework, the minimal
    version of the framework will suffice. We are using Version 1.1.12.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用Zend框架来帮助支持我们的RSS需求，因此我们首先需要下载并安装该框架。要下载框架文件，请访问[http://www.zend.com/community/downloads](http://www.zend.com/community/downloads)。由于我们只会使用该框架的一个组件，因此最小版本的框架就足够了。我们使用的是1.1.12版本。
- en: 'When you expand the downloaded framework file, you should see the following
    high-level directory and file structure:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您扩展下载的框架文件时，您应该看到以下高级目录和文件结构：
- en: '`INSTALL.txt`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INSTALL.txt`'
- en: '`LICENSE.txt`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE.txt`'
- en: '`README.txt`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.txt`'
- en: '`bin/`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin/`'
- en: '`library/`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`library/`'
- en: In order to use this framework within our Yii application, we need to move some
    of the files within our application's directory structure. Let's create a new
    directory called `vendors/`, under the `/protected` directory within our application.
    Then, move the Zend Framework directory `/library/Zend` underneath this newly
    created directory. After everything is in place, ensure that `protected/vendors/Zend/Feed.php`
    exists in the TrackStar application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的Yii应用程序中使用这个框架，我们需要移动应用程序目录结构中的一些文件。让我们在应用程序的`/protected`目录下创建一个名为`vendors/`的新目录。然后，将Zend
    Framework目录`/library/Zend`移动到这个新创建的目录下。一切就位后，确保`protected/vendors/Zend/Feed.php`存在于TrackStar应用程序中。
- en: Using Zend_Feed
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zend_Feed
- en: '**Zend_Feed** is a small component of Zend Framework that encapsulates all
    of the complexities of creating web feeds behind a simple, easy-to-use interface.
    It will help us get a working, tested, RSS-compliant data feed in place in very
    little time. All we will need to do is format our comment data in a manner expected
    by Zend_Feed, and it will do the rest.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Zend_Feed**是Zend Framework的一个小组件，它封装了创建Web源的所有复杂性，提供了一个简单易用的接口。它将帮助我们在很短的时间内建立一个工作的、经过测试的、符合RSS标准的数据源。我们所需要做的就是按照Zend_Feed期望的格式对我们的评论数据进行格式化，它会完成其余的工作。'
- en: We need a place to house the code to handle the requests for our feed. We could
    create a new controller for this, but to keep things simple, we'll just add a
    new action method to our main `CommentController.php` file to handle the requests.
    Rather than add to the method a little at a time, we'll list the entire method
    here, and then talk through what it is doing.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个地方来存放处理我们的数据源请求的代码。我们可以为此创建一个新的控制器，但为了保持简单，我们将只是在我们的主`CommentController.php`文件中添加一个新的操作方法来处理请求。我们将整个方法列在这里，然后逐步讨论它的功能。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is all fairly simple. First, we check the input request querystring for
    the existence of a `pid` parameter, which we take to indicate a specific project
    ID. Remember that we want to optionally allow the data feed to restrict the content
    to comments associated with a single project. Next, we use the same method that
    we used in the previous chapter to populate our widget to retrieve a list of up
    to 20 recent comments, either across all projects, or if the project ID is specified,
    specific to that project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都相当简单。首先，我们检查输入请求查询字符串是否存在“pid”参数，这表明特定项目ID。请记住，我们希望可选地允许数据源将内容限制为与单个项目相关的评论。接下来，我们使用与上一章中用于填充小部件的相同方法来检索最多20条最近的评论列表，可以是跨所有项目，或者如果指定了项目ID，则特定于该项目。
- en: You may remember that this method returns an array of `Comment` AR class instances.
    We iterate over this returned array and convert the data into the format accepted
    by the `Zend_Feed` component. `Zend_Feed` accepts a simple array containing elements
    that are themselves arrays containing the data for each comment entry. Each individual
    entry is a simple associative array of `name=>value` pairs. To comply with the
    specific RSS format, each of our individual entries must minimally contain a title,
    a link, and a description. We have also added two optional fields, one called
    `lastUpdate`, which `Zend_Feed` translates to the RSS field, `pubDate`, and one
    to specify the author.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得，这个方法返回一个`Comment` AR类实例的数组。我们遍历这个返回的数组，并将数据转换为`Zend_Feed`组件接受的格式。`Zend_Feed`接受一个简单的数组，其中包含元素本身是包含每个评论条目数据的数组。每个单独的条目都是一个简单的`name=>value`对的关联数组。为了符合特定的RSS格式，我们的每个单独的条目必须至少包含一个标题、一个链接和一个描述。我们还添加了两个可选字段，一个称为`lastUpdate`，`Zend_Feed`将其转换为RSS字段`pubDate`，另一个用于指定作者。
- en: 'There are a few extra helper methods we take advantage of in order to get the
    data in the correct format. For one, we use the controller''s `createAbsoluteUrl()`
    method, rather than just the `createUrl()` method, in order to generate a fully
    qualified URL. Using `createAbsoluteUrl()` will generate a link similar to the
    following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用了一些额外的辅助方法，以便以正确的格式获取数据。首先，我们使用控制器的`createAbsoluteUrl()`方法，而不仅仅是`createUrl()`方法，以生成一个完全合格的URL。使用`createAbsoluteUrl()`将生成类似于以下的链接：
- en: '`http://localhost/trackstar/index.php?r=issue/view&id=5` as opposed to just
    `/index.php?r=issue/view&id=5`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/index.php?r=issue/view&id=5`而不仅仅是`/index.php?r=issue/view&id=5`'
- en: Also, to avoid errors such as `unterminated entity reference` generated from
    PHP's `DOMDocument::createElement()` method, which is used by `Zend_Feed` to generate
    the RSS XML, we need to convert all applicable characters to HTML entities by
    using our handy helper function, `CHtml::encode`. So, we encode the link so that
    a URL that looks like `http://localhost/trackstar/index.php?r=issue/view&id=5`
    will be converted to `http://localhost/trackstar/index.php?r=issue/view&amp;id=5`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了避免由PHP的`DOMDocument::createElement()`方法生成的`unterminated entity reference`等错误，该方法被`Zend_Feed`用于生成RSS
    XML，我们需要使用我们方便的辅助函数`CHtml::encode`将所有适用的字符转换为HTML实体。因此，我们对链接进行编码，以便像`http://localhost/trackstar/index.php?r=issue/view&id=5`这样的URL将被转换为`http://localhost/trackstar/index.php?r=issue/view&amp;id=5`。
- en: We need to also do this for our other data that will be in the RSS format. Both
    the description and title fields are generated as a `CDATA` block, so using encode
    is not necessary on these.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对将以RSS格式呈现的其他数据执行此操作。描述和标题字段都生成为`CDATA`块，因此在这些字段上不需要使用编码。
- en: Once all of our entries have been properly populated and formatted, we use Zend_Feed's
    `importArray()` method, which accepts an array to construct the RSS feed. Finally,
    once the feed class is built from the input array of entries and returned, we
    call the `send()` method on that class. This returns the properly formatted RSS
    XML and appropriate headers to the client.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有条目都被正确填充和格式化，我们就使用Zend_Feed的`importArray()`方法，该方法接受一个数组来构造RSS源。最后，一旦从输入条目数组构建了源类并返回，我们就调用该类的`send()`方法。这将返回适当格式的RSS
    XML和适当的标头给客户端。
- en: 'We need to make a couple of configuration changes to the `CommentController.php`
    file and class before this will work. We need to include a few of the Zend framework
    files in our comment controller. Add the following statements to the top of `CommentController.php`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`CommentController.php`文件和类中进行一些配置更改，然后才能使其正常工作。我们需要在评论控制器中包含一些Zend框架文件。在`CommentController.php`的顶部添加以下语句：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, alter the `CommentController::accessRules()` method to allow any user
    to access our newly added `actionFeed()` method:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改`CommentController::accessRules()`方法，允许任何用户访问我们新添加的`actionFeed()`方法：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is really all there is to it. If we now navigate to `http://localhost/trackstar/index.php?r=comment/feed`,
    we can view the results of our efforts. Since browsers handle the display of RSS
    feeds differently, your experience might differ from the following screenshot.
    The following screenshot is what you should see if viewing in the Firefox browser:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上就是这样。如果我们现在导航到`http://localhost/trackstar/index.php?r=comment/feed`，我们就可以查看我们的努力成果。由于浏览器对RSS
    feed的显示方式不同，您的体验可能与下面的截图有所不同。如果在Firefox浏览器中查看，您应该看到以下截图：
- en: '![Using Zend_Feed](graphics/8727_09_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![使用Zend_Feed](graphics/8727_09_01.jpg)'
- en: 'However, viewing in the Chrome browser, we see the raw XML being displayed,
    as seen in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在Chrome浏览器中查看时，我们看到原始的XML被显示出来，如下面的截图所示：
- en: '![Using Zend_Feed](graphics/8727_09_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![使用Zend_Feed](graphics/8727_09_02.jpg)'
- en: This may depend on your version. You may also be prompted to select the available
    RSS reader extensions to install, such as the Google Reader or RSS Feed Reader
    extensions for Chrome.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能取决于您的版本。您可能还会被提示选择要安装的可用RSS阅读器扩展，例如Google Reader或Chrome的RSS Feed Reader扩展。
- en: Creating user-friendly URLs
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户友好的URL
- en: So far, throughout our development, we have been using the default format of
    our Yii application URL structure. This format, discussed back in [Chapter 2](ch02.html
    "Chapter 2. Getting Started"), *Getting Started*, in the section called *Reviewing
    our request routing*, uses a querystring approach. We have the main parameter
    "r", which stands for *route*, followed by a controllerID/actionID pair, and then
    optional querystring parameters, as needed by the specific action methods being
    called. The URL we created for our new feed is no exception. It is a long, cumbersome,
    and arguably ugly URL. There has got to be a better way! Well, in fact there is.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我们的开发过程中，我们一直在使用Yii应用程序URL结构的默认格式。这种格式在[第2章](ch02.html "第2章。入门")中讨论过，*入门*，在*回顾我们的请求路由*一节中使用了查询字符串的方法。我们有主要参数“r”，代表*路由*，后面跟着controllerID/actionID对，然后是特定action方法需要的可选查询字符串参数。我们为我们的新feed创建的URL也不例外。它是一个又长又笨重，可以说是丑陋的URL。肯定有更好的方法！事实上确实如此。
- en: 'We could make the previously mentioned URL look cleaner and more self-explanatory
    by using the so-called *path* format, which eliminates the query string and puts
    the `GET` parameters into the path info part of the URL:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用所谓的*路径*格式使先前提到的URL看起来更清晰、更易理解，这种格式消除了查询字符串，并将`GET`参数放入URL的路径信息部分：
- en: Taking our comment feed URL as an example, instead of `http://localhost/trackstar/index.php?r=comment/feed`,
    we would have `http://localhost/trackstar/index.php/comment/feed/`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们的评论feed URL为例，我们将不再使用`http://localhost/trackstar/index.php?r=comment/feed`，而是使用`http://localhost/trackstar/index.php/comment/feed/`。
- en: 'What''s more, we don''t need to specify the entry script for each request.
    And we can also take advantage of Yii''s request routing configuration options
    to remove the need to specify the controllerID/actionID pair as well. Our request
    could then look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，我们不需要为每个请求指定入口脚本。我们还可以利用Yii的请求路由配置选项来消除指定controllerID/actionID对的需要。我们的请求可能看起来像这样：
- en: '`http://localhost/trackstar/commentfeed`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/commentfeed`'
- en: 'Also, it is common, especially with feed URLs, to have the `.xml` extension
    specified at the end. So, it would be nice if we could alter our URL to look like
    the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，通常情况下，特别是在feed的URL中，最后会指定`.xml`扩展名。因此，如果我们能够修改我们的URL，使其看起来像下面这样，那就太好了：
- en: '`http://localhost/trackstar/commentfeed.xml`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/commentfeed.xml`'
- en: This greatly simplifies the URL for users and is also an excellent format for
    URLs to be properly indexed into major search engines (often referred to as "search
    engine friendly URLs"). Let's see how we can use Yii's URL management features
    to alter our URL to match this desired format.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这大大简化了用户的URL，并且也是URL被主要搜索引擎正确索引的绝佳格式（通常称为“搜索引擎友好的URL”）。让我们看看如何使用Yii的URL管理功能来修改我们的URL以匹配这种期望的格式。
- en: Using the URL manager
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用URL管理器
- en: 'The built-in URL manager in Yii is an application component that can be configured
    in the `protected/config/main.php` file. Let''s open up that file and add a new
    URL manager component declaration to the components array:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Yii中内置的URL管理器是一个应用程序组件，可以在`protected/config/main.php`文件中进行配置。让我们打开该文件，并在components数组中添加一个新的URL管理器组件声明：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As long as we stick with the default and name the component `urlManager`, we
    do not need to specify the class of the component because it is predeclared to
    be `CUrlManager.php` in the `CWebApplication.php` framework class.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我们坚持使用默认的并将组件命名为`urlManager`，我们就不需要指定组件的类，因为在`CWebApplication.php`框架类中预先声明为`CUrlManager.php`。
- en: 'With this one simple addition, our URL structure has changed to the path format
    throughout the site. For example, previously, if we wanted to view a specific
    issue whose ID is 1, we made the request using the following URL:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个简单的添加，我们的URL结构已经在整个站点中改变为路径格式。例如，以前，如果我们想要查看ID为1的特定问题，我们使用以下URL进行请求：
- en: '`http://localhost/trackstar/index.php?r=issue/view&id=1`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/index.php?r=issue/view&id=1`'
- en: 'Now, with these changes in place, our URL looks like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过这些更改，我们的URL看起来是这样的：
- en: '`http://localhost/trackstar/index.php/issue/view/id/1`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/index.php/issue/view/id/1`'
- en: You'll notice that the changes we have made have affected all the URLs generated
    throughout the application. To see this, visit our feed again by going to `http://localhost/trackstar/index.php/comment/feed/`.
    We notice that all of our issue links have been reformatted to this new structure
    for us. This is all thanks to our consistent use of the controller methods and
    other helper methods to generate our URLs. We can alter the URL format in just
    one single configuration file, and the changes will automatically propagate throughout
    the application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们所做的更改已经影响了应用程序中生成的所有URL。要查看这一点，再次访问我们的订阅，转到`http://localhost/trackstar/index.php/comment/feed/`。我们注意到，所有我们的问题链接都已经被重新格式化为这个新的结构。这都归功于我们一贯使用控制器方法和其他辅助方法来生成我们的URL。我们只需在一个配置文件中更改URL格式，这些更改就会自动传播到整个应用程序。
- en: Our URLs are looking better, but we still have the entry script, `index.php`,
    specified and we are not yet able to append the `.xml` suffix at the end of our
    feed URL. So, let's hide the `index.php` file as part of the URL and also set
    up the request routing to understand that a request for `commentfeed.xml` actually
    means a request for `CommentController::actionFeed()`. Let's actually tackle the
    latter first.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的URL看起来更好了，但我们仍然有入口脚本`index.php`，并且我们还不能在我们的订阅URL的末尾添加`.xml`后缀。因此，让我们隐藏`index.php`文件作为URL的一部分，并设置请求路由以理解对`commentfeed.xml`的请求实际上意味着对`CommentController::actionFeed()`的请求。让我们先解决后者。
- en: Configuring routing rules
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置路由规则
- en: Yii URL manager allows us to specify rules that define how URLs are parsed and
    created. A rule consists of defining a route and a pattern. The pattern is used
    to match the path information part of the URL to determine which rule is used
    to parse or create URLs. The pattern may contain named parameters using the syntax
    `ParamName:RegExp`. When parsing a URL, a matching rule will extract these named
    parameters from the path info and put them into the `$_GET` variable. When a URL
    is being created by the application, a matching rule will extract the named parameters
    from `$_GET` and put them into the path info part of the created URL. If a pattern
    ends with `/*`, it means additional `GET` parameters may be appended to the path
    info part of the URL.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Yii URL管理器允许我们指定规则来定义URL的解析和创建方式。规则由定义路由和模式组成。模式用于匹配URL的路径信息部分，以确定使用哪个规则来解析或创建URL。模式可以包含使用语法
    `ParamName:RegExp` 的命名参数。在解析URL时，匹配的规则将从路径信息中提取这些命名参数，并将它们放入 `$_GET` 变量中。当应用程序创建URL时，匹配的规则将从
    `$_GET` 中提取命名参数，并将它们放入创建的URL的路径信息部分。如果模式以 `/*` 结尾，这意味着可以在URL的路径信息部分附加额外的 `GET`
    参数。
- en: To specify URL rules, set the `CUrlManager` file's `rules` property as an array
    of rules in the format `pattern=>route`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定URL规则，将`CUrlManager`文件的`rules`属性设置为规则数组，格式为`pattern=>route`。
- en: 'As an example, let''s look at the two following rules:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看看以下两条规则：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are two rules specified in this code. The first rule says that if the
    user requests the URL `http://localhost/trackstar/index.php/issues`, it should
    be treated as `http://localhost/trackstar/index.php/issue/index`, and the same
    applies when constructing such a URL. So, for example, if we are creating the
    URL in our application using a controller's `createUrl('issue/index')` method,
    it would generate `/trackstar/index.php/issues` rather than `/trackstar/index.php/issue/index`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中指定了两条规则。第一条规则表示，如果用户请求URL `http://localhost/trackstar/index.php/issues`，则应该被视为
    `http://localhost/trackstar/index.php/issue/index`，在构建URL时也是一样的。因此，例如，如果我们在应用程序中使用控制器的
    `createUrl('issue/index')` 方法创建URL，它将生成 `/trackstar/index.php/issues` 而不是 `/trackstar/index.php/issue/index`。
- en: The second rule contains a named parameter, `id`, which is specified using the
    `<ParamName:RegExp>` syntax. It says that, for example, if the user requests the
    URL `http://localhost/trackstar/index.php/issue/1`, it should be treated as `http://localhost/trackstar/index.php/issue/view/id/1`.
    The same also applies when constructing such a URL.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条规则包含一个命名参数`id`，使用`<ParamName:RegExp>`语法指定。它表示，例如，如果用户请求URL `http://localhost/trackstar/index.php/issue/1`，则应该被视为
    `http://localhost/trackstar/index.php/issue/view/id/1`。在构建这样的URL时也是一样的。
- en: The route can also be specified as an array itself to allow the setting of other
    attributes such as the URL suffix and whether or not the route should be considered
    case-sensitive. We'll take advantage of these as we specify the rule for our comment
    feed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 路由也可以被指定为一个数组本身，以允许设置其他属性，比如URL后缀以及路由是否应该被视为区分大小写。当我们为我们的评论订阅指定规则时，我们将利用这些属性。
- en: 'Let''s add the following rule to our `urlManager` application component configuration:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将以下规则添加到我们的`urlManager`应用程序组件配置中：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we have used the `urlSuffix` attribute to specify our desired URL `.xml`
    suffix.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`urlSuffix`属性来指定我们期望的URL`.xml`后缀。
- en: 'Now we can access our feed by using the following URL:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过以下URL访问我们的订阅：
- en: '`http://localhost/trackstar/index.php/commentFeed.xml`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/index.php/commentFeed.xml`'
- en: Removing the entry script from the URL
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从URL中删除入口脚本
- en: 'Now we just need to remove the `index.php` part from the URL. This is done
    in two steps, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要从URL中删除`index.php`部分。这可以通过以下两个步骤完成：
- en: Alter the web server configuration to reroute all requests that don't correspond
    to existing files or directories to `index.php`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改Web服务器配置，将所有不对应现有文件或目录的请求重定向到`index.php`。
- en: Set the `urlManager` component's `showScriptName` property to `false`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`urlManager`组件的`showScriptName`属性设置为`false`。
- en: The first step takes care of how the application routes the requests, while
    the latter takes care of how URLs will be created throughout the application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步处理了应用程序如何路由请求，而后者处理了应用程序中URL的创建方式。
- en: 'Since we are using Apache HTTP Server, we can perform the first step by creating
    a `.htaccess` file in the application root directory and adding the following
    directives to that file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用Apache HTTP服务器，我们可以通过在应用程序根目录中创建一个`.htaccess`文件并向该文件添加以下指令来执行第一步：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This approach is only for Apache HTTP Server. You will need to consult the web
    server rewrite rules if using a different web server. Also note that this information
    could be placed in the main Apache configuration file as an alternative to using
    the `.htaccess` file approach.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法仅适用于Apache HTTP服务器。如果使用不同的Web服务器，您将需要查阅Web服务器重写规则。还要注意，这些信息可以放在主Apache配置文件中，作为使用`.htaccess`文件方法的替代方法。
- en: With this `.htaccess` file in place, we can now visit our feed by navigating
    to `http://localhost/trackstar/commentfeed.xml` (or `http://localhost/trackstar/commentFeed.xml`,
    since we set the case sensitivity to false).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个`.htaccess`文件，我们现在可以通过导航到`http://localhost/trackstar/commentfeed.xml`（或`http://localhost/trackstar/commentFeed.xml`，因为我们将大小写敏感性设置为false）来访问我们的源。
- en: 'However, even with this in place, if we use one of the controller methods or
    one of our `CHtml` helper methods in our application to create our URL, say by
    executing `$this->createAbsoluteUrl(''comment/feed'');` in a controller class,
    it will generate the following URL, with `index.php` still in the URL:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使有了这个，如果我们在应用程序中使用控制器方法或`CHtml`助手方法之一来创建我们的URL，比如在控制器类中执行`$this->createAbsoluteUrl('comment/feed');`，它将生成以下URL，其中URL中仍然包含`index.php`：
- en: '`http://localhost/trackstar/index.php/commentfeed.xml`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/index.php/commentfeed.xml`'
- en: 'In order to instruct it to not use the entry script name when generating URLs,
    we need to set that property on the `urlManager` component. We do this again in
    the `main.php` configuration file, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了指示它在生成URL时不使用条目脚本名称，我们需要在`urlManager`组件上设置该属性。我们在`main.php`配置文件中再次执行此操作，如下所示：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In order to handle the addition of the project ID in the URL, we need to restrict
    the comment feed data to comments associated to specific projects, and for that
    we need to add one other rule, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理URL中项目ID的添加，我们需要将评论源数据限制为与特定项目相关联的评论，为此我们需要添加另一条规则，如下所示：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This rule also uses the `<Parameter:RegEx>` syntax to specify a pattern to
    allow for a project ID to be specified before the `commentfeed.xml` part of the
    URL. With this rule in place, we can restrict our RSS feed to comments specific
    to a project. For example, if we just want the comments associated with Project
    #`2`, the URL format would be:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个规则还使用了`<Parameter:RegEx>`语法来指定一个模式，以允许在URL的`commentfeed.xml`部分之前指定项目ID。有了这个规则，我们可以将我们的RSS源限制为特定项目的评论。例如，如果我们只想要与项目#`2`相关联的评论，URL格式将是：
- en: '`http://localhost/trackstar/2/commentfeed.xml`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/2/commentfeed.xml`'
- en: Adding the feed links
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加订阅链接
- en: 'Now that we have created our feed and altered the URL structure to make it
    more user and search engine friendly, we need to add the ability for users to
    subscribe to the feed. One way to do this is to add the following code before
    rendering the pages in which we want to add the RSS feed link. Let''s do this
    for both the project listing page as well as a specific project details page.
    We''ll start with the project listings page. This page is rendered by the `ProjectController::actionIndex()`
    method. Alter that method as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的源并改变了URL结构，使其更加用户友好和搜索引擎友好，我们需要添加用户订阅源的功能。其中一种方法是在我们想要添加RSS源链接的页面渲染之前添加以下代码。让我们在项目列表页面以及特定项目详细信息页面都这样做。我们将从项目列表页面开始。这个页面由`ProjectController::actionIndex()`方法渲染。修改该方法如下：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The highlighted code shown here adds the following to the `<head>` tag of the
    rendered HTML:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的突出显示的代码将添加以下内容到渲染的HTML的`<head>`标签中：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In many browsers, this will automatically generate a little RSS feed icon in
    the address bar. The following screenshot depicts what this icon looks like in
    the Safari address bar:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多浏览器中，这将自动生成一个小的RSS源图标在地址栏中。以下截图显示了Safari地址栏中这个图标的样子：
- en: '![Adding the feed links](graphics/8727_09_03.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![添加订阅链接](graphics/8727_09_03.jpg)'
- en: 'We make a similar change to add this link to a specific project details page.
    The rendering of these pages is handled by the `ProjectController::actionView()`
    method. Alter that method to the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进行类似的更改，以将此链接添加到特定项目详细信息页面。这些页面的渲染由`ProjectController::actionView()`方法处理。修改该方法如下：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is almost the same as what we added to the index method, except that we
    are specifying the project ID so that our comment entries are restricted to just
    those associated with that project. A similar icon will now display in the address
    bar on our project details page. Clicking on these icons allow the user to subscribe
    to these comment feeds.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与我们添加到索引方法中的内容相同，只是我们正在指定项目ID，以便我们的评论条目仅限于与该项目相关联的条目。类似的图标现在将显示在我们项目详细信息页面的地址栏中。单击这些图标允许用户订阅这些评论源。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `registerLinkTag()` method allows you to also specify the media attribute
    as the fourth argument, and then you can further specify other supported attributes
    as an array of `name=>value` pairs, as a fifth argument. See [http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerLinkTag-detail](http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerLinkTag-detail)
    for more information on using this method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`registerLinkTag()`方法还允许您在第四个参数中指定媒体属性，然后您可以进一步指定其他支持的属性作为`name=>value`对的数组，作为第五个参数。有关使用此方法的更多信息，请参见[http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerLinkTag-detail](http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerLinkTag-detail)。'
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter demonstrated just how easy it is to integrate Yii with other external
    frameworks. We specifically used the popular Zend Framework to demonstrate this
    and were able to quickly add an RSS compliant web feed to our application. Though
    we specifically used `Zend_Feed`, we really demonstrated how to integrate any
    of the Zend Framework components into the application. This further extends the
    already very extensive feature offering of Yii, making Yii applications incredibly
    feature rich.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了如何轻松地将Yii与其他外部框架集成。我们特别使用了流行的Zend Framework来进行演示，并能够快速地向我们的应用程序添加符合RSS标准的Web订阅。虽然我们特别使用了`Zend_Feed`，但我们真正演示了如何将Zend
    Framework的任何组件集成到应用程序中。这进一步扩展了Yii已经非常丰富的功能，使Yii应用程序变得非常功能丰富。
- en: We also learned about the URL management features within Yii and altered our
    URL format throughout the application to be more user and search engine friendly.
    This is the first step in improving upon the look and feel of our application,
    something we have very much neglected to this point. In the next chapter, we are
    going to take a closer look at the presentation tier of Yii applications. Styles,
    themes, and generally making things look good is the focus of the next chapter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解了Yii中的URL管理功能，并在整个应用程序中改变了我们的URL格式，使其更加用户和搜索引擎友好。这是改进我们应用程序外观和感觉的第一步，这是我们到目前为止非常忽视的事情。在下一章中，我们将更仔细地研究Yii应用程序的展示层。样式、主题以及通常使事物看起来好看将是下一章的重点。
