["```php\n**FROM mariadb:latest\n\nRUN apt-get update \\\n&& apt-get autoremove && apt-get autoclean \\\n&& rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /volumes/keys/\nRUN echo \n\"1;\nC472621BA1708682BEDC9816D677A4FDC51456B78659F183555A9A895EAC9218\" > \n/volumes/keys/keys.txt\nRUN openssl enc -aes-256-cbc -md sha1 -k secret -in \n/volumes/keys/keys.txt -out /volumes/keys/keys.enc\nCOPY etc/ /etc/mysql/conf.d/**\n\n```", "```php\n**openssl enc -aes-256-ctr -k secret@phpmicroservices.com -P -md sha1**\n\n```", "```php\n    [mysqld]\n    plugin-load-add=file_key_management.so\n    file_key_management_filekey = FILE:/mount/keys/server-key.pem\n    file-key-management-filename = /mount/keys/mysql.enc\n    innodb-encrypt-tables = ON\n    innodb-encrypt-log = 1\n    innodb-encryption-threads=1\n    encrypt-tmp-disk-tables=1\n    encrypt-tmp-files=0\n    encrypt-binlog=1\n    file_key_management_encryption_algorithm = AES_CTR\n```", "```php\n    microservice_secret_database_mariadb:\n      build: ./microservices/secret/mariadb/\n      environment:\n        - MYSQL_ROOT_PASSWORD=mysecret\n        - MYSQL_DATABASE=finding_secrets\n        - MYSQL_USER=secret\n        - MYSQL_PASSWORD=mysecret\n      ports:\n        - 7777:3306\n```", "```php\n    CREATE TABLE `test_encryption` (\n      `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n      `text_field` varchar(255) NOT NULL,\n      PRIMARY KEY (`id`)\n    ) ENGINE=InnoDB `ENCRYPTED`=YES `ENCRYPTION_KEY_ID`=1;\n```", "```php\n    FROM percona:5.7\n **RUN mkdir -p /mount/mysql-keyring/ \\**\n **&& touch /mount/mysql-keyring/keyring \\**\n **&& chown -R mysql:mysql /mount/mysql-keyring**\n**COPY etc/ /etc/mysql/conf.d/**\n\n```", "```php\n    [mysqld]\n    early-plugin-load=keyring_file.so\n    keyring_file_data=/mount/mysql-keyring/keyring\n```", "```php\n**ALTER TABLE `secrets` ENCRYPTION='Y'**\n\n```", "```php\n**RUN echo 01 > ca.srl \\\n&& openssl genrsa -out ca-key.pem 2048 \\\n&& openssl req -new -x509 -days 365 -subj \"/CN=*\" -key ca-key.pem -out ca.pem \\\n&& openssl genrsa -out server-key.pem 2048 \\\n&& openssl req -subj \"/CN=*\" -new -key server-key.pem -out server.csr \\\n&& openssl x509 -req -days 365 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem \\\n&& openssl rsa -in server-key.pem -out server-key.pem \\\n&& cp *.pem /etc/nginx/ \\\n&& cp *.csr /etc/nginx/**\n\n```", "```php\n    server {\n      listen 443 ssl;\n      server_name _;\n      root /var/www/html/public;\n      index index.php index.html;\n      ssl on;\n      ssl_certificate /etc/nginx/server-cert.pem;\n      ssl_certificate_key /etc/nginx/server-key.pem;\n      location = /favicon.ico { access_log off; log_not_found off; }\n      location = /robots.txt { access_log off; log_not_found off; }\n      access_log /var/log/nginx/access.log;\n      error_log /var/log/nginx/error.log error;\n      sendfile off;\n      client_max_body_size 100m;\n      location / {\n        try_files $uri $uri/ /index.php?_url=$uri&$args;\n      }\n      location ~ /\\.ht {\n        deny all;\n      }\n      {{ if service $backend }}\n      location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass {{ $backend }};\n        fastcgi_index /index.php;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \n        $document_root$fastcgi_script_name;\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n      }\n      {{ end }}\n    }\n```", "```php\n    - 8443:443\n```", "```php\n    FROM percona:5.7\n```", "```php\n    microservice_user_fpm:\n    {{omitted code}}\n    links:\n    {{omitted code}}\n **- microservice_user_database**\n **microservice_user_database:**\n **build: ./microservices/user/database/**\n **environment:**\n **- CONSUL=autodiscovery**\n **- MYSQL_ROOT_PASSWORD=mysecret**\n **- MYSQL_DATABASE=finding_users**\n **- MYSQL_USER=secret**\n **- MYSQL_PASSWORD=mysecret**\n **ports:**\n **- 6667:3306**\n\n```", "```php\n**docker-compose build microservice_user_database**\n\n```", "```php\n**docker-compose up -d**\n\n```", "```php\n    $app->configure('database');\n```", "```php\n    <?php\n      return [\n        'default'     => 'mysql',\n        'migrations'  => 'migrations',\n        'fetch'       => PDO::FETCH_CLASS,\n        'connections' => [\n          'mysql' => [\n            'driver'    => 'mysql',\n            'host'      => env('DB_HOST','microservice_user_database'),\n            'database'  => env('DB_DATABASE','finding_users'),\n            'username'  => env('DB_USERNAME','secret'),\n            'password'  => env('DB_PASSWORD','mysecret'),\n            'collation' => 'utf8_unicode_ci',\n          ]\n        ]\n      ];\n```", "```php\n    CREATE TABLE `users` (\n      `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n      `email` varchar(255) NOT NULL,\n      `password` varchar(255) NOT NULL,\n      `api_token` varchar(255) DEFAULT NULL,\n     \u00a0PRIMARY KEY (`id`)\n    ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;\n```", "```php\n**docker-compose up -d\ndocker exec -it \u00a0docker_microservice_user_fpm_1 /bin/bash**\n\n```", "```php\n    \"lucadegasperi/oauth2-server-laravel\": \"^5.0\"\n```", "```php\n    $app-\n    >register(\\LucaDegasperi\\OAuth2Server\\Storage\\\n    FluentStorageServiceProvider::class);\n    $app-    >register(\\LucaDegasperi\\OAuth2Server\\\n    OAuth2ServerServiceProvider::class);\n    $app->middleware([\n      \\LucaDegasperi\\OAuth2Server\\Middleware\\\n      OAuthExceptionHandlerMiddleware::class\n    ]);\n```", "```php\n    class_alias('Illuminate\\Support\\Facades\\Config', 'Config');\n    class_alias(\\LucaDegasperi\\OAuth2Server\\Facades\\Authorizer::class, \n    'Authorizer');\n```", "```php\n**composer dumpautoload\nphp artisan migrate**\n\n```", "```php\n    INSERT INTO `finding_users`.`oauth_clients`\n    (`id`, `secret`, `name`, `created_at`, `updated_at`)\n    VALUES\n    ('1', 'YouAreTheBestDeveloper007', 'PHPMICROSERVICES', NULL, NULL);\n```", "```php\n    $app->post('**oauth/access_token**', function() {\n     \u00a0return response()->json(Authorizer::issueAccessToken());\n    });\n```", "```php\n    'grant_types' => [\n      'client_credentials' => [\n        'class'            => '\\League\\OAuth2\\Server\\Grant\\\n        ClientCredentialsGrant',\n        'access_token_ttl' => 0\n      ]\n    ],\n```", "```php\n **grant_type:** client_credentials\n **client_id:** 1\n **client_secret:** YouAreTheBestDeveloper007\n```", "```php\n    {\n      \"error\": \"invalid_client\",\n      \"error_description\": \"Client authentication failed.\"\n    }\n```", "```php\n    {\n      \"access_token\": \"**anU2e6xgXiLm7UARSSV7M4Wa7u86k4JryKWrIQhu**\",\n      \"token_type\": \"Bearer\",\n      \"expires_in\": 3600\n    }\n```", "```php\n    $app->routeMiddleware(\n      [\n        'check-authorization-params' => \n        \\LucaDegasperi\\OAuth2Server\\Middleware\\\n        CheckAuthCodeRequestMiddleware::class,\n        'csrf' => \\Laravel\\Lumen\\Http\\Middleware\\\n        VerifyCsrfToken::class,\n        'oauth' => \n        \\LucaDegasperi\\OAuth2Server\\Middleware\\\n        OAuthMiddleware::class,\n        'oauth-client' => \\LucaDegasperi\\OAuth2Server\\Middleware\\\n        OAuthClientOwnerMiddleware::class,\n        'oauth-user' => \\LucaDegasperi\\OAuth2Server\\Middleware\\\n        OAuthUserOwnerMiddleware::class,\n      ]\n    );\n```", "```php\n    public function __construct(){\n      $this->middleware('oauth');\n    }\n```", "```php\n    public function __construct(){\n      $this->middleware('oauth', **['except' => 'index']**);\n    }\n    public function index()\n    {\n      return response()->json(['method' => 'index']);\n    }\n```", "```php\n    {\"method\":\"index\"}\n```", "```php\n    {\"error\":\"access_denied\",\"error_description\":\"The resource owner or \n    authorization server denied the request.\"}\n```", "```php\n**composer require tymon/jwt-auth:\"^1.0@dev\"**\n\n```", "```php\n    $app->register('Tymon\\JWTAuth\\Providers\\JWTAuthServiceProvider');\n```", "```php\n    $app->register(App\\Providers\\AuthServiceProvider::class);\n```", "```php\n    <?php\n      require_once __DIR__.'/../vendor/autoload.php';\n      try {\n        (new Dotenv\\Dotenv(__DIR__.'/../'))->load();\n      } catch (Dotenv\\Exception\\InvalidPathException $e) {\n        //\n      }\n      $app = new Laravel\\Lumen\\Application(\n        realpath(__DIR__.'/../')\n      );\n      // $app->withFacades();\n **$app->withEloquent();**\n      $app->singleton(\n        Illuminate\\Contracts\\Debug\\ExceptionHandler::class,\n        App\\Exceptions\\Handler::class\n      );\n      $app->singleton(\n        Illuminate\\Contracts\\Console\\Kernel::class,\n        App\\Console\\Kernel::class\n      );\n **$app->routeMiddleware([**\n **'auth' => App\\Http\\Middleware\\Authenticate::class,**\n **]);**\n      $app->register(App\\Providers\\AuthServiceProvider::class);\n **$app->register\n      (Tymon\\JWTAuth\\Providers\\LumenServiceProvider::class);**\n      $app->group(['namespace' => 'App\\Http\\Controllers'], \n      function ($app) \n      {\n           require __DIR__.'/../app/Http/routes.php';\n      });\n      return $app;\n```", "```php\n**php artisan jwt:secret**\n\n```", "```php\n    APP_DEBUG=true\n    APP_ENV=local\n    SESSION_DRIVER=file\n    DB_HOST=microservice_user_database\n    DB_DATABASE=finding_users\n    DB_USERNAME=secret\n    DB_PASSWORD=mysecret\n **JWT_SECRET=wPB1mQ6ADZrc0ouxMCYJfiBbMC14IAV0**\n    CACHE_DRIVER=file\n```", "```php\n    <?php\n      return [\n        'secret' => env('JWT_SECRET'),\n        'keys' => [\n          'public' => env('JWT_PUBLIC_KEY'),\n          'private' => env('JWT_PRIVATE_KEY'),\n          'passphrase' => env('JWT_PASSPHRASE'),\n        ],\n        'ttl' => env('JWT_TTL', 60),\n        'refresh_ttl' => env('JWT_REFRESH_TTL', 20160),\n        'algo' => env('JWT_ALGO', 'HS256'),\n        'required_claims' => ['iss', 'iat', 'exp', 'nbf', 'sub', \n        'jti'],\n        'blacklist_enabled' => env('JWT_BLACKLIST_ENABLED', true),\n        'blacklist_grace_period' => env('JWT_BLACKLIST_GRACE_PERIOD', \n        0),\n        'providers' => [\n          'jwt' => Tymon\\JWTAuth\\Providers\\JWT\\Namshi::class,\n          'auth' => Tymon\\JWTAuth\\Providers\\Auth\\Illuminate::class,\n          'storage' => \n          Tymon\\JWTAuth\\Providers\\Storage\\Illuminate::class,\n        ],\n      ];\n```", "```php\n    <?php\n      return [\n        'defaults' => [\n          'guard' => env('AUTH_GUARD', 'api'),\n          'passwords' => 'users',\n        ],\n        'guards' => [\n          'api' => [\n            'driver' => 'jwt',\n            'provider' => 'users',\n          ],\n        ],\n        'providers' => [\n          'users' => [\n            'driver' => 'eloquent',\n **'model' => \\App\\Model\\User::class,**\n          ],\n        ],\n        'passwords' => [\n          'users' => [\n            'provider' => 'users',\n            'table' => 'password_resets',\n            'expire' => 60,\n          ],\n        ],\n      ];\n```", "```php\n    <?php\n      $app->get('/', function () use ($app) {\n        return $app->version();\n      });\n      use Illuminate\\Http\\Request;\n      use Tymon\\JWTAuth\\JWTAuth;\n      $app->post('login', function(Request $request, JWTAuth $jwt) {\n        $this->validate($request, [\n          'email' => 'required|email|exists:users',\n          'password' => 'required|string'\n        ]);\n        if (! $token = $jwt->attempt($request->only(['email', \n        'password']))) {\n          return response()->json(['user_not_found'], 404);\n        }\n        return response()->json(compact('token'));\n      });\n      $app->group(**['middleware' => 'auth']**, function () use ($app) {\n        $app->post('user', function (JWTAuth $jwt) {\n          $user = $jwt->parseToken()->toUser();\n          return $user;\n        });\n      });\n```", "```php\n    <?php\n      namespace App\\Providers;\n      use App\\User;\n      use Illuminate\\Support\\ServiceProvider;\n      class AuthServiceProvider extends ServiceProvider\n      {\n        public function register()\n        {\n          //\n        }\n        public function boot()\n        {\n **$this->app['auth']->viaRequest('api', function ($request) {**\n **if ($request->input('email')) {**\n **return User::where('email', $request->input('email'))-\n              >first();**\n **}**\n **});**\n        }\n      }\n```", "```php\n    <?php\n      namespace App\\Model;\n      use Illuminate\\Contracts\\Auth\\Access\\Authorizable as \n      AuthorizableContract;\n      use Illuminate\\Database\\Eloquent\\Model;\n      use Illuminate\\Auth\\Authenticatable;\n      use Laravel\\Lumen\\Auth\\Authorizable;\n      use Illuminate\\Contracts\\Auth\\Authenticatable as \n      AuthenticatableContract;\n **use Tymon\\JWTAuth\\Contracts\\JWTSubject;**\n      class User extends Model implements **JWTSubject**, \n      AuthorizableContract, \n      AuthenticatableContract {\n        use Authenticatable, Authorizable;\n        protected $table = 'users';\n        protected $fillable = ['email', 'api_token'];\n        protected $hidden = ['password'];\n   **public function getJWTIdentifier()**\n **{**\n **return $this->getKey();**\n **}**\n **public function getJWTCustomClaims()**\n **{**\n **return [];**\n **}**\n      }\n```", "```php\n    INSERT INTO `finding_users`.`users`\n    (`id`, `email`, `password`, `api_token`)\n    VALUES\n    (1,'john@phpmicroservices.com',\n    '$2y$10$m5339OpNKEh5bL6Erbu9r..sjhaf2jDAT2nYueUqxnsR752g9xEFy',\n    NULL,);\n```", "```php\n    Unauthorized.\n```", "```php\n    {\"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\n    eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODQvbG9naW4iLCJ\n    pYXQiOjE0ODA4ODI4NTMsImV4cCI6MTQ4MDg4NjQ1MywibmJmIjox\n    NDgwODgyODUzLCJqdGkiOiJVVnRpTExZTFRWcEtyWnhsIiwic3\n    ViIjoxfQ.jjgZO_Lf4dlfwYiOYAOhzvcTQ4EGxJUTgRSPyMXJ1wg\"}\n```", "```php\n    {\"id\":1,\"email\":\"john@phpmicroservices.com\",\"api_token\":null}\n```", "```php\n    <?php\n      return [\n        'defaults' => [\n          'guard' => env('AUTH_GUARD', 'api'),\n        ],\n        'guards' => [\n          'api' => [\n            'driver' => 'token',\n            'provider' => 'users'\n          ],\n        ],\n        'providers' => [\n          'users' => [\n            'driver' => 'eloquent',\n            // We should get model name from JWT configuration\n            'model' => app('config')->get('jwt.user'),\n          ],\n        ],\n      ];\n```", "```php\n    <?php\n      /* Code Omitted */\n      use Illuminate\\Contracts\\Auth\\Access\\Gate;\n      class AuthServiceProvider extends ServiceProvider\n      {\n        /* Code Omitted */\n        public function boot()\n        {\n          Gate::define('update-profile', function ($user, $profile) {\n            return $user->id === $profile->user_id;\n          });\n        }\n```", "```php\n    if (Gate::**allows**('update-profile', $profile)) {\n      // The current user can update their profile...\n    }\n    if (Gate::**denies**('update-profile', $profile)) {\n      // The current user can't update their profile...\n    }\n```", "```php\n    DB_CONNECTION=mysql\n    DB_HOST=localhost\n    DB_PORT=3306\n    DB_DATABASE=homestead\n    DB_USERNAME=homestead\n    DB_PASSWORD=secret\n```"]