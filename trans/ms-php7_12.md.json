["```php\nsudo apt-get update\nsudo apt-get -y install mysql-server\n\n```", "```php\nroot@vultr:~# mysql --version\nmysql Ver 14.14 Distrib 5.7.17, for Linux (x86_64) using EditLine wrapper\n\n```", "```php\nsudo mysql_secure_installation\n\n```", "```php\n// INSECURE WAY (bare passwords in a command)\nmysql -uroot -p'mL08e!Tq'\nmysql --user=root --password='mL08e!Tq'\n\n// SECURE WAY (triggers \"enter password\" prompt)\nmysql -uroot -p\nmysql --user=root --password\n\n```", "```php\ncd ~\nwget http://downloads.mysql.com/docs/sakila-db.tar.gz\ntar -xzf sakila-db.tar.gz\ncd sakila-db/\n\n```", "```php\nDROP SCHEMA IF EXISTS sakila;\nCREATE SCHEMA sakila;\nUSE sakila;\n\n```", "```php\n// Either this command\nmysql -uroot -p < sakila-schema.sql\n\n// Either this command\nmysql -uroot -p -e \"SOURCE sakila-schema.sql\" \n\n```", "```php\n// Either this command\nmysql -uroot -p < sakila-data.sql\n\n// Either this command\nmysql -uroot -p -e \"SOURCE sakila-data.sql\" \n\n```", "```php\nshow databases;\nuse sakila;\nshow tables;\n\n```", "```php\nsudo apt-get -y install php7.0-cli php7.0-mysql\n\n```", "```php\n$mysqli = new mysqli('127.0.0.1', 'root', 'mL08e!Tq', 'sakila');\n\n```", "```php\n<?php\n\nmysqli_report(MYSQLI_REPORT_ALL);   try {\n  $mysqli = new mysqli('127.0.0.1', 'root', 'mL08e!Tq', 'sakila'); } catch (Throwable $t) {   exit($t->getMessage()); }\n\n```", "```php\n<?php\n\nmysqli_report(MYSQLI_REPORT_ALL);\n\ntry {\n  $mysqli = new mysqli('127.0.0.1', 'root', 'mL08e!Tq', 'sakila');\n} catch (mysqli_sql_exception $e) {\n  exit($e->getMessage());\n}\n\n```", "```php\n<?php   try {\n  // Report on all types of errors\n  mysqli_report(MYSQLI_REPORT_ALL);    // Open a new connection to the MySQL server\n  $mysqli = new mysqli('127.0.0.1', 'root', 'mL08e!Tq', 'sakila');    // Perform a query on the database\n  $result = $mysqli->query('SELECT * FROM customer WHERE email LIKE \"MARIA.MILLER@sakilacustomer.org\"');    // Return the current row of a result set as an object\n  $customer = $result->fetch_object();    // Close opened database connection\n  $mysqli->close();    // Output customer info\n  echo $customer->first_name, ' ', $customer->last_name, PHP_EOL; } catch (mysqli_sql_exception $e) {\n  // Output error and exit upon exception\n  echo $e->getMessage(), PHP_EOL;\n  exit; }\n\n```", "```php\nNo index used in query/prepared statement SELECT * FROM customer WHERE email = \"MARIA.MILLER@sakilacustomer.org\"\n\n```", "```php\nALTER TABLE customer ADD INDEX idx_email (email);\n\n```", "```php\n<?php   try {\n  // Report on all types of errors\n  mysqli_report(MYSQLI_REPORT_ALL);    // Open a new connection to the MySQL server\n  $mysqli = new mysqli('127.0.0.1', 'root', 'mL08e!Tq', 'sakila');    $customerIdGt = 100;\n  $storeId = 2;\n  $email = \"%ANN%\";    // Prepare an SQL statement for execution\n  $statement = $mysqli->prepare('SELECT * FROM customer WHERE customer_id > ? AND store_id = ? AND email LIKE ?');    // Binds variables to a prepared statement as parameters\n  $statement->bind_param('iis', $customerIdGt, $storeId, $email);    // Execute a prepared query\n  $statement->execute();    // Gets a result set from a prepared statement\n  $result = $statement->get_result();    // Fetch object from row/entry in result set\n  while ($customer = $result->fetch_object()) {\n  // Output customer info\n  echo $customer->first_name, ' ', $customer->last_name, PHP_EOL;\n }    // Close a prepared statement\n  $statement->close();    // Close database connection\n  $mysqli->close(); } catch (mysqli_sql_exception $e) {\n  // Output error and exit upon exception\n  echo $e->getMessage();\n  exit; }\n\n```", "```php\n<?php   try {\n  // Report on all types of errors\n  mysqli_report(MYSQLI_REPORT_ALL);    // Open a new connection to the MySQL server\n $mysqli = new mysqli('127.0.0.1', 'root', 'mL08e!Tq', 'sakila');     // Prepare some teat address data\n  $address = 'The street';\n  $district = 'The district';\n  $cityId = 135; // Matches the Dallas city in Sakila DB\n  $postalCode = '31000';\n  $phone = '123456789';    // Prepare an SQL statement for execution\n  $statement = $mysqli->prepare('INSERT INTO address (\n address, district, city_id, postal_code, phone ) VALUES ( ?, ?, ?, ?, ? ); ');    // Bind variables to a prepared statement as parameters\n  $statement->bind_param('ssiss', $address, $district, $cityId, $postalCode, $phone);    // Execute a prepared Query\n  $statement->execute();    // Close a prepared statement\n  $statement->close();    // Quick & \"dirty\" way to fetch newly created address id\n  $addressId = $mysqli->insert_id;    // Close database connection\n  $mysqli->close(); } catch (mysqli_sql_exception $e) {\n  // Output error and exit upon exception\n  echo $e->getMessage();\n  exit; }\n\n```", "```php\n<?php   try {\n  // Report on all types of errors\n  mysqli_report(MYSQLI_REPORT_ALL);    // Open a new connection to the MySQL server\n $mysqli = new mysqli('127.0.0.1', 'root', 'mL08e!Tq', 'sakila');     // Prepare some teat address data\n  $address = 'The new street';\n  $addressId = 600;    // Prepare an SQL statement for execution\n  $statement = $mysqli->prepare('UPDATE address SET address = ? WHERE address_id = ?');    // Bind variables to a prepared statement as parameters\n  $statement->bind_param('si', $address, $addressId);    // Execute a prepared Query\n  $statement->execute();    // Close a prepared statement\n  $statement->close();     // Close database connection\n  $mysqli->close(); } catch (mysqli_sql_exception $e) {\n  // Output error and exit upon exception\n  echo $e->getMessage();\n  exit; } \n\n```", "```php\n<?php   try {\n  // Report on all types of errors\n  mysqli_report(MYSQLI_REPORT_ALL);    // Open a new connection to the MySQL server\n $mysqli = new mysqli('127.0.0.1', 'root', 'mL08e!Tq', 'sakila');     // Prepare some teat address data\n  $paymentId = 500;    // Prepare an SQL statement for execution\n  $statement = $mysqli->prepare('DELETE FROM payment WHERE payment_id = ?');    // Bind variables to a prepared statement as parameters\n  $statement->bind_param('i', $paymentId);    // Execute a prepared Query\n  $statement->execute();    // Close a prepared statement\n  $statement->close();    // Close database connection\n  $mysqli->close(); } catch (mysqli_sql_exception $e) {\n  // Output error and exit upon exception\n  echo $e->getMessage();\n  exit; }\n\n```", "```php\n<?php   mysqli_report(MYSQLI_REPORT_ALL); $mysqli = new mysqli('127.0.0.1', 'root', 'mL08e!Tq', 'sakila');   try {\n  // Start new transaction\n  $mysqli->begin_transaction(MYSQLI_TRANS_START_READ_WRITE);    // Create new address\n  $result = $mysqli->query('INSERT INTO address (\n address, district, city_id, postal_code, phone ) VALUES ( \"The street\", \"The district\", 333, \"31000\", \"123456789\" ); ');    // Fetch newly created address id\n  $addressId = $mysqli->insert_id;    // Create new customer\n  $statement = $mysqli->prepare('INSERT INTO customer (\n store_id, first_name, last_name, email, address_id ) VALUES ( 2, \"John\", \"Doe\", \"john@test.it\", ? ) ');\n  $statement->bind_param('i', $addressId);\n  $statement->execute();    // Fetch newly created customer id\n  $customerId = $mysqli->insert_id;    // Select newly created customer info\n  $statement = $mysqli->prepare('SELECT * FROM customer WHERE customer_id = ?');\n  $statement->bind_param('i', $customerId);\n  $statement->execute();\n  $result = $statement->get_result();\n  $customer = $result->fetch_object();    // Commit transaction\n  $mysqli->commit();    echo $customer->first_name, ' ', $customer->last_name, PHP_EOL; } catch (mysqli_sql_exception $t) {\n  // We MUST be careful with non-db try block operations that throw exceptions\n // As they might cause a rollback inadvertently  $mysqli->rollback();\n  echo $t->getMessage(), PHP_EOL; }   // Close database connection $mysqli->close();\n\n```", "```php\n<?php   $host = '127.0.0.1'; $dbname = 'sakila'; $username = 'root'; $password = 'mL08e!Tq';   $conn = new PDO(\n  \"mysql:host=$host;dbname=$dbname\",\n  $username,\n  $password  );\n\n```", "```php\n<?php   try {\n  $host = '127.0.0.1';\n  $dbname = 'sakila';\n  $username = 'root';\n  $password = 'mL08e!Tq';    $conn = new PDO(\n  \"mysql:host=$host;dbname=$dbname\",\n  $username,\n  $password,\n [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]\n ); } catch (PDOException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n<?php   try {\n  $conn = new PDO(\n  \"mysql:host=127.0.0.1;dbname=sakila\", 'root', 'mL08e!Tq',\n [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]\n );    $result = $conn->query('SELECT * FROM customer LIMIT 5');\n  $customers = $result->fetchAll(PDO::FETCH_OBJ);    foreach ($customers as $customer) {\n  echo $customer->first_name, ' ', $customer->last_name, PHP_EOL;\n } } catch (PDOException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n<?php   try {\n  $conn = new PDO(\n  \"mysql:host=127.0.0.1;dbname=sakila\", 'root', 'mL08e!Tq',\n [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]\n );    $statement = $conn->prepare('SELECT * FROM customer        WHERE customer_id > :customer_id AND store_id = :store_id AND email LIKE :email');    $statement->execute([\n  ':customer_id' => 100,\n  ':store_id' => 2,\n  ':email' => '%ANN%',\n ]);    $customers = $statement->fetchAll(PDO::FETCH_OBJ);    foreach ($customers as $customer) {\n  echo $customer->first_name, ' ', $customer->last_name, PHP_EOL;\n } } catch (PDOException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n<?php   try {\n  $conn = new PDO(\n \"mysql:host=127.0.0.1;dbname=sakila\", 'root', 'mL08e!Tq',  [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]\n );    $statement = $conn->prepare('INSERT INTO address (\n address, district, city_id, postal_code, phone, location ) VALUES ( :address, :district, :city_id, :postal_code, :phone, POINT(:longitude, :latitude) ); ');    $statement->execute([\n  ':address' => 'The street',\n  ':district' => 'The district',\n  ':city_id' => '537',\n  ':postal_code' => '31000',\n  ':phone' => '888777666333',\n  ':longitude' => 45.55111,\n  ':latitude' => 18.69389\n  ]); } catch (PDOException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n<?php   try {\n  $conn = new PDO(\n  \"mysql:host=127.0.0.1;dbname=sakila\", 'root', 'mL08e!Tq',\n [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]\n );    $statement = $conn->prepare('UPDATE address SET phone = :phone WHERE address_id = :address_id');    $statement->execute([\n  ':phone' => '888777666555',\n  ':address_id' => 600,\n ]); } catch (PDOException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n<?php   try {\n  $conn = new PDO(\n  \"mysql:host=127.0.0.1;dbname=sakila\", 'root', 'mL08e!Tq',\n [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]\n );  $statement = $conn->prepare('DELETE FROM payment WHERE payment_id = :payment_id');\n  $statement->execute([\n  ':payment_id' => 16046\n  ]); } catch (PDOException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n<?php   $conn = new PDO(\n  \"mysql:host=127.0.0.1;dbname=sakila\", 'root', 'mL08e!Tq',\n [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION] );   try {\n  // Start new transaction\n  $conn->beginTransaction();    // Create new address\n  $result = $conn->query('INSERT INTO address (\n address, district, city_id, postal_code, phone, location ) VALUES ( \"The street\", \"The district\", 537, \"27107\", \"888777666555\", POINT(45.55111, 18.69389) ); ');    // Fetch newly created address id\n  $addressId = $conn->lastInsertId();    // Create new customer\n  $statement = $conn->prepare('INSERT INTO customer (\n store_id, first_name, last_name, email, address_id ) VALUES ( 2, \"John\", \"Doe\", \"john-pdo@test.it\", :address_id ) ');    $statement->execute([':address_id' => $addressId]);    // Fetch newly created customer id\n  $customerId = $conn->lastInsertId();    // Select newly created customer info\n  $statement = $conn->prepare('SELECT * FROM customer WHERE customer_id = :customer_id');\n  $statement->execute([':customer_id' => $customerId]);\n  $customer = $statement->fetchObject();    // Commit transaction\n  $conn->commit();    echo $customer->first_name, ' ', $customer->last_name, PHP_EOL; } catch (PDOException $e) {\n  $conn->rollback();\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\nsudo apt-get update\nsudo apt-get install -y mongodb\n\n```", "```php\nsudo systemctl status mongodb.service\n\n```", "```php\nuse foggyline\ndb.products.insert({name: \"iPhone 7\", price: 650, weight: \"138g\"});\ndb.products.insert({name: \"Samsung Galaxy S7\", price: 670, weight: \"152g\" });\ndb.products.insert({name: \"Motorola Moto Z Play\", price: 449.99, weight: \"165g\" });\ndb.products.insert({name: \"Google Pixel\", price: 649.99, weight: \"168g\" });\ndb.products.insert({name: \"HTC 10\", price: 799, weight: \"161g\" });\nshow dbs\nshow collections\n\n```", "```php\nsudo apt-get -y install php-pear\nsudo apt-get -y install php7.0-dev\nsudo apt-get -y install libcurl4-openssl-dev pkg-config libssl-dev libsslcommon2-dev\nsudo pecl install mongodb\n\n```", "```php\nsudo apt-get -y install composer\ncomposer require mongodb/mongodb\n\n```", "```php\n<?php   require_once __DIR__ . '/vendor/autoload.php';   // Code...\n\n```", "```php\n<?php   require_once __DIR__ . '/vendor/autoload.php';   $manager = new MongoDBDriverManager('mongodb://localhost:27017');\n\n```", "```php\n<?php   require_once __DIR__ . '/vendor/autoload.php';   try {\n  $manager = new MongoDBDriverManager('mongodb://localhost:27017'); } catch (MongoDBDriverExceptionException $e) {\n  echo $e->getMessage(), PHP_EOL;\n  exit; }\n\n```", "```php\n<?php   require_once __DIR__ . '/vendor/autoload.php';   try {\n  $manager = new MongoDBDriverManager('mongodb://localhost:27017');    /* Select only the matching documents */\n  $filter = [\n  'price' => [\n  '$gte' => 619.99,\n ], ];    $queryOptions = [\n  /* Return only the following fields in the matching documents */\n  'projection' => [\n  'name' => 1,\n  'price' => 1,\n ],  /* Return the documents in descending order of price */\n  'sort' => [\n  'price' => -1\n  ]\n ];    $query = new MongoDBDriverQuery($filter, $queryOptions);    $readPreference = new MongoDBDriverReadPreference(MongoDBDriverReadPreference::RP_PRIMARY);    $products = $manager->executeQuery('foggyline.products', $query, $readPreference);    foreach ($products as $product) {\n  echo $product->name, ': ', $product->price, PHP_EOL;\n } } catch (MongoDBDriverExceptionException $e) {\n  echo $e->getMessage(), PHP_EOL;\n  exit; }\n\n```", "```php\n<?php   require_once __DIR__ . '/vendor/autoload.php';   try {\n  $manager = new MongoDBDriverManager('mongodb://localhost:27017');    $bulkWrite = new MongoDBDriverBulkWrite;    $bulkWrite->insert([\n  'name' => 'iPhone 7 Black White',\n  'price' => 650,\n  'weight' => '138g'\n  ]);    $bulkWrite->insert([\n  'name' => 'Samsung Galaxy S7 White',\n  'price' => 670,\n  'weight' => '152g'\n  ]);    $writeConcern = new MongoDBDriverWriteConcern(MongoDBDriverWriteConcern::MAJORITY, 1000);    $result = $manager->executeBulkWrite('foggyline.products', $bulkWrite, $writeConcern);    if ($result->getInsertedCount()) {\n  echo 'Record(s) saved successfully.', PHP_EOL;\n } else {\n  echo 'Error occurred.', PHP_EOL;\n } } catch (MongoDBDriverExceptionException $e) {\n  echo $e->getMessage(), PHP_EOL;\n  exit; } \n\n```", "```php\n<?php   require_once __DIR__ . '/vendor/autoload.php';   try {\n  $manager = new MongoDBDriverManager('mongodb://localhost:27017');    $bulkWrite = new MongoDBDriverBulkWrite;    $bulkWrite->update(\n ['name' => 'iPhone 7 Black White'],\n ['$set' => [\n  'name' => 'iPhone 7 Black Black',\n  'price' => 649.99\n  ]],\n ['multi' => true, 'upsert' => false]\n );    $bulkWrite->update(\n ['name' => 'Samsung Galaxy S7 White'],\n ['$set' => [\n  'name' => 'Samsung Galaxy S7 Black',\n  'price' => 669.99\n  ]],\n ['multi' => true, 'upsert' => false]\n );    $writeConcern = new MongoDBDriverWriteConcern(MongoDBDriverWriteConcern::MAJORITY, 1000);    $result = $manager->executeBulkWrite('foggyline.products', $bulkWrite, $writeConcern);    if ($result->getModifiedCount()) {\n  echo 'Record(s) saved updated.', PHP_EOL;\n } else {\n  echo 'Error occurred.', PHP_EOL;\n } } catch (MongoDBDriverExceptionException $e) {\n  echo $e->getMessage(), PHP_EOL;\n  exit; } \n\n```", "```php\n<?php   require_once __DIR__ . '/vendor/autoload.php';   try {\n  $manager = new MongoDBDriverManager('mongodb://localhost:27017');    $bulkWrite = new MongoDBDriverBulkWrite;    $bulkWrite->delete(\n  // filter\n  [\n  'name' => [\n  '$regex' => '^iPhone'\n  ]\n ],  // Delete options\n  ['limit' => false]\n );    $writeConcern = new MongoDBDriverWriteConcern(MongoDBDriverWriteConcern::MAJORITY, 1000);    $result = $manager->executeBulkWrite('foggyline.products', $bulkWrite, $writeConcern);    if ($result->getDeletedCount()) {\n  echo 'Record(s) deleted.', PHP_EOL;\n } else {\n  echo 'Error occurred.', PHP_EOL;\n } } catch (MongoDBDriverExceptionException $e) {\n  echo $e->getMessage(), PHP_EOL;\n  exit; } \n\n```", "```php\nsudo apt-get update\nsudo apt-get -y install build-essential tcl\nwget http://download.redis.io/redis-stable.tar.gz\ntar xzf redis-stable.tar.gz\ncd redis-stable\nmake\nmake test\nsudo make install\n./src/redis-server\n\n```", "```php\nSET Key1 10\nSET Key2 20\nSET Key3 30\nSET Key4 40\nSET Key5 50\n\n```", "```php\nsudo apt-get -y install php7.0-dev\nsudo apt-get -y install unzip\nwget https://github.com/phpredis/phpredis/archive/php7.zip -O phpredis.zip\nunzip phpredis.zip \ncd phpredis-php7/\nphpize\n./configure\nmake\nsudo make install\necho extension=redis.so >> /etc/php/7.0/cli/php.ini\n\n```", "```php\n<?php   $client = new Redis();   $client->connect('localhost', 6379);\n\n```", "```php\n<?php   try {\n  $client = new Redis();\n  $client->connect('localhost', 6379);\n  // Code... } catch (RedisException $e) {\n  echo $e->getMessage(), PHP_EOL; } \n\n```", "```php\n<?php   try {\n  $client = new Redis();\n  $client->connect('localhost', 6379);\n  echo $client->get('Key3'), PHP_EOL;\n  echo $client->get('Key5'), PHP_EOL; } catch (RedisException $e) {\n  echo $e->getMessage(), PHP_EOL; } \n\n```", "```php\n<?php   try {\n  $client = new Redis();\n  $client->connect('localhost', 6379);    $values = $client->mget(['Key1', 'Key2', 'Key4']);\n  print_r($values); } catch (RedisException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n<?php   try {\n  $client = new Redis();\n  $client->connect('localhost', 6379);    $client->set('user', [\n  'name' => 'John',\n  'age' => 34,\n  'salary' => 4200.00\n  ]);    // $client->get('user');\n // returns string containing \"Array\" chars    $client->set('customer', json_encode([\n  'name' => 'Marc',\n  'age' => 43,\n  'salary' => 3600.00\n  ]));    // $client->get('customer');\n // returns json looking string, which we can simply json_decode() } catch (RedisException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n$client->set('test', 'test2', 3600);\n\n```", "```php\n$client->setex('key', 3600, 'value');\n\n```", "```php\n<?php   try {\n  $client = new Redis();\n  $client->connect('localhost', 6379);    $client->set('test', 'test1');\n  $client->set('test', 'test2');    // $client->get('test');\n // returns string containing \"test2\" chars } catch (RedisException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n<?php   try {\n  $client = new Redis();\n  $client->connect('localhost', 6379);\n  $client->del('user'); } catch (RedisException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```", "```php\n<?php   try {\n  $client = new Redis();\n  $client->connect('localhost', 6379);    $client->multi();    $result1 = $client->set('tKey1', 'Test#1'); // Valid command\n  $result2 = $client->zadd('tKey2', null); // Invalid command    if ($result1 == false || $result2 == false) {\n  $client->discard();\n  echo 'Transaction aborted.', PHP_EOL;\n } else {\n  $client->exec();\n  echo 'Transaction commited.', PHP_EOL;\n } } catch (RedisException $e) {\n  echo $e->getMessage(), PHP_EOL; }\n\n```"]