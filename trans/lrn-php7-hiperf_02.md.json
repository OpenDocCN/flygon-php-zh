["```php\nclass Person\n{\n  public function age(int $age)\n  {\n    return $age;\n    }\n\n  public function name(string $name)\n  {\n    return $name;\n    }\n\n  public function isAlive(bool $alive)\n  {\n    return $alive;\n    }\n\n}\n\n$person = new Person();\necho $person->name('Altaf Hussain');\necho $person->age(30);\necho $person->isAlive(TRUE);\n```", "```php\necho $person->age(30.5);\n```", "```php\ndeclare(strict_types = 1);\n```", "```php\necho $person->isAlive('true');\n```", "```php\nclass Person\n{\n  public function age(float $age) : string\n  {\n    return 'Age is '.$age;\n  }\n\n  public function name(string $name) : string\n  {\n    return $name;\n    }\n\n  public function isAlive(bool $alive) : string\n  {\n    return ($alive) ? 'Yes' : 'No';\n  }\n\n}\n```", "```php\n**class Address** \n**{**\n **public function getAddress()**\n **{**\n **return ['street' => 'Street 1', 'country' => 'Pak'];**\n **}**\n**}**\n\nclass Person\n{\n  public function age(float $age) **: string**\n  {\n    return 'Age is '.$age;\n  }\n\n  public function name(string $name) **: string**\n  {\n    return $name;\n  }\n\n  public function isAlive(bool $alive) : string\n  {\n    return ($alive) ? 'Yes' : 'No';\n  }\n\n **public function getAddress() : Address**\n **{**\n **return new Address();**\n **}**\n}\n```", "```php\npublic function getAddress() : Address\n{\n  return ['street' => 'Street 1', 'country' => 'Pak'];\n}\n```", "```php\nFatal error: Uncaught TypeError: Return value of Person::getAddress() must be an instance of Address, array returned\n```", "```php\n//book.php\nnamespace Publishers\\Packt;\n\nclass Book \n{\n  public function get() : string\n  {\n    return get_class();\n  }\n}\n```", "```php\n//ebook.php\nnamespace Publishers\\Packt;\n\nclass Ebook \n{\n  public function get() : string\n  {\n    return get_class();\n  }\n}\n```", "```php\n//presentation.php\nnamespace Publishers\\Packt;\n\nclass Video \n{\n  public function get() : string\n  {\n    return get_class();\n  }\n}\n```", "```php\n//presentation.php\nnamespace Publishers\\Packt;\n\nclass Presentation \n{\n  public function get() : string\n  {\n    return get_class();\n  }\n}\n```", "```php\n//functions.php\n\nnamespace Publishers\\Packt;\n\nfunction getBook() : string\n{\n  return 'PHP 7';\n}\nfunction saveBook(string $book) : string\n{\n  return $book.' is saved';\n}\n```", "```php\n//constants.php\n\nnamespace Publishers/Packt;\n\nconst COUNT = 10;\nconst KEY = '123DGHtiop09847';\nconst URL = 'https://www.Packtpub.com/';\n```", "```php\n//Instantiate objects for each class in namespace\n\n$book = new Publishers\\Packt\\Book();\n$ebook = new Publishers\\Packt\\Ebook();\n$video = new Publishers\\Packt\\Video();\n$presentation = new Publishers\\Packt\\Presentation();\n\n//Use functions in namespace\n\necho Publishers/Packt/getBook();\necho Publishers/Packt/saveBook('PHP 7 High Performance');\n\n//Use constants\n\necho Publishers\\Packt\\COUNT;\necho Publishers\\Packt\\KEY;\n```", "```php\nuse Publishers\\Packt\\Book;\nuse Publishers\\Packt\\Ebook;\nuse Publishers\\Packt\\Video;\nuse Publishers\\Packt\\Presentation;\nuse function Publishers\\Packt\\getBook;\nuse function Publishers\\Packt\\saveBook;\nuse const Publishers\\Packt\\COUNT;\nuse const Publishers\\Packt\\KEY;\n\n$book = new Book();\n$ebook = new Ebook(();\n$video = new Video();\n$pres = new Presentation();\n\necho getBook();\necho saveBook('PHP 7 High Performance');\n\necho COUNT; \necho KEY;\n```", "```php\nuse Publishers\\Packt\\{ Book, Ebook, Video, Presentation };\nuse function Publishers\\Packt\\{ getBook, saveBook };\nuse const Publishers\\Packt\\{ COUNT, KEY };\n```", "```php\nuse Publishers\\Packt\\{ \n  Book,\n  Ebook,\n  Video,\n  Presentation,\n  function getBook,\n  function saveBook,\n  const COUNT,\n  const KEY\n};\n```", "```php\nuse Publishers\\Packt\\Paper\\Book;\nuse Publishers\\Packt\\Electronic\\Ebook;\nuse Publishers\\Packt\\Media\\{Video,Presentation};\n```", "```php\nuse Publishers\\Packt\\{\n  Paper\\Book,\n  Electronic\\Ebook,\n  Media\\Video,\n  Media\\Presentation\n};\n```", "```php\nnew class(argument) { definition };\n```", "```php\n$name = new class() {\n  public function __construct()\n  {\n    echo 'Altaf Hussain';\n  }\n};\n```", "```php\n$name = new class('Altaf Hussain') {\n  public function __construct(string $name)\n  {\n    echo $name;\n  }\n};\n```", "```php\nclass Packt\n{\n  protected $number;\n\n  public function __construct()\n  {\n    echo 'I am parent constructor';\n  }\n\n  public function getNumber() : float\n  {\n    return $this->number;\n  }\n}\n\n$number = new class(5) extends packt\n{\n  public function __construct(float $number)\n  {\n    parent::__construct();\n    $this->number = $number;\n  }\n};\n\necho $number->getNumber();\n```", "```php\ninterface Publishers\n{\n  public function __construct(string $name, string $address);\n  public function getName();\n  public function getAddress();\n}\n```", "```php\nclass Packt\n{\n  protected $number;\n  protected $name;\n  protected $address;\n  public function \u2026\n}\n```", "```php\n$info = new class('Altaf Hussain', 'Islamabad, Pakistan')extends packt implements Publishers\n{\n  public function __construct(string $name, string $address)\n  {\n    $this->name = $name;\n    $this->address = $address;\n  }\n\n  public function getName() : string\n  {\n  return $this->name;\n  }\n\n  public function getAddress() : string\n  {\n  return $this->address;\n  }\n}\n\necho $info->getName(). ' '.$info->getAddress();\n```", "```php\nclass Math\n{\n  public $first_number = 10;\n  public $second_number = 20;\n\n  public function add() : float\n  {\n    return $this->first_number + $this->second_number;\n  }\n\n  public function multiply_sum()\n  {\n    return new class() extends Math\n    {\n      public function multiply(float $third_number) : float\n      {\n        return $this->add() * $third_number;\n      }\n    };\n  }\n}\n\n$math = new Math();\necho $math->multiply_sum()->multiply(2);\n```", "```php\nclass Packt\n{\n  public function packt()\n  {\n    echo 'I am an old style constructor';\n  }\n}\n\n$packt = new Packt();\n```", "```php\nDeprecated: Methods with the same name as their class will not be constructors in a future version of PHP; Packt has a deprecated constructor in\u2026\n```", "```php\nclass Packt\n{\n  public function __construct()\n  {\n    echo 'I am default constructor';\n  }\n\n  public function packt()\n  {\n    echo 'I am just a normal class method';\n  }\n}\n\n$packt = new Packt();\n$packt->packt();\n```", "```php\nfunction iHaveError($object)\n{\n  return $object->iDontExist();\n  {\n\n//Call the function\niHaveError(null);\necho \"I am still running\";\n```", "```php\ntry \n{\n  iHaveError(null);\n} catch(Error $e)\n{\n  //Either display the error message or log the error message\n  echo $e->getMessage();\n}\n\necho 'I am still running';\n```", "```php\ntry\n{\n  $a = 20;\n  $division = $a / 20;\n} catch(DivisionByZeroError $e) \n{\n  echo $e->getMessage();\n}\n```", "```php\n$int1 = 1;\n$int2 = 2;\n$int3 = 1;\n\necho $int1 <=> $int3; //Returns 0\necho '<br>';\necho $int1 <=> $int2; //Returns -1\necho '<br>';\necho $int2 <=> $int3; //Returns 1\n```", "```php\n0\n-1\n1\n```", "```php\nFunction normal_sort($a, $b) : int \n{\n  if( $a == $b )\n    return 0;\n  if( $a < $b )\n    return -1;\n  return 1;\n}\n\nfunction space_sort($a, $b) : int\n{\n  return $a <=> $b;\n}\n\n$normalArray = [1,34,56,67,98,45];\n\n//Sort the array in asc\nusort($normalArray, 'normal_sort');\n\nforeach($normalArray as $k => $v)\n{\n  echo $k.' => '.$v.'<br>';\n}\n\n$spaceArray = [1,34,56,67,98,45];\n\n//Sort it by spaceship operator\nusort($spaceArray, 'space_sort');\n\nforeach($spaceArray as $key => $value)\n{\n  echo $key.' => '.$value.'<br>';\n}\n```", "```php\n$post = ($_POST['title']) ? $_POST['title'] : NULL;\n```", "```php\n$post = isset($_POST['title']) ? $_POST['title'] : NULL;\n```", "```php\n$post = $_POST['title'] ?? NULL;\n```", "```php\n$title = $_POST['title'] ?? $_GET['title'] ?? 'No POST or GET';\n```", "```php\nIf(isset($_POST['title']))\n  $title = $_POST['title'];\nelseif(isset($_GET['title']))\n  $title = $_GET['title'];\nelse\n  $title = 'No POST or GET';\n```", "```php\n$objects['class']->name;\n```", "```php\n$first = ['name' => 'second'];\n$second = 'Howdy';\n\necho $$first['name'];\n```", "```php\necho ${$first['name']};\n```", "```php\nclass Packt\n{\n  public $title = 'PHP 7';\n  public $publisher = 'Packt Publisher';\n\n  public function getTitle() : string\n  {\n    return $this->title;\n  }\n\n  public function getPublisher() : string\n  {\n    return $this->publisher;\n  }\n}\n\n$mthods = ['title' => 'getTitle', 'publisher' => 'getPublisher'];\n$object = new Packt();\necho 'Book '.$object->$methods['title']().' is published by '.$object->$methods['publisher']();\n```", "```php\necho 'Book '.$object**->{$methods['title']}**().' is published by '.$object->**{$methods['publisher']}**();\n```", "```php\nconst STORES = ['en', 'fr', 'ar'];\n```", "```php\ndefine('STORES', ['en', 'fr', 'ar']);\n```", "```php\nswitch(true)\n{\n  default: \n    echo 'I am first one';\n    break;\n  default: \n    echo 'I am second one';\n}\n```", "```php\nFatal error: Switch statements may only contain one default clause in\u2026\n```", "```php\nsession_start([\n  'cookie_lifetime' => 3600,\n  'read_and_close'  => true\n]);\n```", "```php\n$result = unserialize($object, ['allowed_classes' => ['Packt', 'Books', 'Ebooks']]);\n```"]