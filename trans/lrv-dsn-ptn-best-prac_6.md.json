["```php\n<?php\n\nclass UserController extends BaseController {\n\n   //An imaginary method that lists all active users\n   public function listUsers() {\n\n      $users = User::where('active', 1)->get();\n\n      return View::make('frontend.users.list')\n         ->with('users', $users);\n   }\n\n   //An imaginary method that finds a specific user\n   public function fetch($id) {\n\n      $user = User::where('active', 1)->find($id);\n\n       return View::make('frontend.users.single')\n         ->with('user', $user);\n\n   }\n\n}\n```", "```php\n<?php\n\n//Model File\nClass User extends Eloquent {\n\n   //We've defined a Query scope called active\n   public function scopeActive($query) {\n      return $query->where('active', 1);\n   }\n\n}\n\n//Controller File\nclass UserController extends BaseController {\n\n   //An imaginary method that lists all active users\n   public function listUsers() {\n\n      $users = User::active()->get();\n\n      return View::make('frontend.users.list')\n         ->with('users', $users);\n   }\n\n   //An imaginary method that finds a specific user\n   public function fetch($id) {\n\n      $user = User::active()->find($id);\n\n      return View::make('frontend.users.single')\n         ->with('user', $user);\n\n   }\n\n}\n```", "```php\nClassLoader::addDirectories(array(\n\n   app_path().'/commands',\n   app_path().'/controllers',\n   app_path().'/models',\n   app_path().'/database/seeds',\n\n));\n```", "```php\nClassLoader::addDirectories(array(\n\n   app_path().'/commands',\n   app_path().'/controllers',\n   app_path().'/models',\n   app_path().'/database/seeds',\n\n   //our custom directory that holds classes\n   app_path().'/acme',\n));\n```", "```php\n\"autoload\": {\n\n    \"psr-0\": {\n        \"Acme\": \"app/lib\"\n    }\n}\n```", "```php\n\"autoload\": {\n    \"files\": [\n        \"app/acme/myFunctions.php\"\n    ]\n},\n```", "```php\ncomposer dump-autoload\n```", "```php\nphp composer.phar dump-autoload\n```", "```php\n<?php\n\nclass CarFactoryModel extends BaseModel{\n\n    public static function createCar($manufacturer)\n    {\n        switch ($manufacturer)\n        {\n\n        }\n\n        throw new \\InvalidArgumentException(\"Unsupported manufacturer [$manufacturer]\");\n    }\n\n    public static function createCarFromColor($color)\n    {\n        switch ($color)\n        {\n            case 'Red':\n\n            return static::createCar('Toyota');\n\n            case 'Green':\n\n            return static::createCar('Suzuki');\n\n        }\n\n        throw new \\InvalidArgumentException(\"Unsupported color [$color]\");\n    }\n\n    public static function createCarFromClass($class)\n    {\n        switch ($class)\n        {\n            case 'B':\n\n            return static::createCar('Suzuki');\n\n            case 'C':\n\n            return static::createCar('Toyota');\n        }\n\n        throw new \\InvalidArgumentException(\"Unsupported car class [$class]\");\n\n    }\n}\n```", "```php\n<?php\n\nclass CarController extends BaseController{\n\n    public function showCarsByManufacturer($manufacturerName){\n\n        return CarFactory::createCar($manufacturerName);\n\n    }\n\n    public function showCarsByColor($color){\n\n        return CarFactory::createCarFromColor($color);\n\n    }\n\n    public function showCarsByClass($className){\n\n        return CarFactory::createCarFromClass($className);\n\n    }\n\n}\n```", "```php\nRoute::get(\n'cars/{manufacturer}', \narray(\n'as'    => 'cars_by_manufacturer', \n'uses' => 'CarController@showCarsbyManufacturer'\n)\n);\n\nRoute::get(\n'cars/color/{color}', \narray(\n'as' => 'cars_by_color',\n'uses' => 'CarController@showCarsbyColor'\n)\n);\n\nRoute::get(\n'cars/class/{class}',\narray(\n'as' => 'cars_by_class',\n'uses' => 'CarController@showCarsbyClass'\n)\n);\n```", "```php\n<?php\n\nclass PizzaDelivery\n{\n    protected $pizza;\n\n    protected $config = array();\n\n    public function __construct(array $config)\n    {\n        $this->pizza = new PizzaBuilder();\n        $this->setConfig($config);\n    }\n\n    /**\n    * Process some configuration parameters\n    *\n    * @param array $config\n    */\n    protected function setConfig(array $config)\n    {\n        $defaults = array(\n            'spice' => true,\n            'type' => 'Italian',\n            'size' => 'Small',\n        );\n\n        $config =  array_replace($defaults, $config);\n        $this->config = $config;\n    }\n\n    /**\n    * Build the pizza using the supplied configuration parameters\n    * From the constructor that is set using setConfig() method.\n    *\n\n    * @return null\n    */\n    public function build()\n    {\n        foreach ($this->config as $option => $value) {\n            $method = sprintf('set%s', ucfirst($option));\n            if (method_exists($this->pizza, $method) === true) {\n                call_user_func(array($this->pizza, $method), $value);\n            }\n        }\n    }\n\n    /**\n    * @return Pizza\n    */\n    public function getPizza()\n    {\n        return $this->pizza;\n    }\n}\n```", "```php\n<?php\nclass PizzaBuilder\n{\n    protected $type = '';\n    protected $size = '';\n    protected $spice = '';\n    public function setSpice($spice)\n    {\n        $this->spice = $spice;\n    }\n\n    public function setSize($size)\n    {\n        $this->size = $size;\n    }\n\n    public function setType($type)\n    {\n        $this->type = $type;\n    }\n}\n```", "```php\n$myFavoritePizza = new PizzaDelivery(array('type' => 'Asian'));\n$myFavoritePizza ->build();\nreturn $myFavoritePizza->get();\n```", "```php\n<?php\n\ninterface ShipmentPricingStrategy {\n\n    function shipmentPrice();\n\n}\n\nabstract class ShippingPriceStrategy implements ShipmentPricingStrategy {\n    function __construct() {}\n    abstract function shipmentPrice();\n}\n\nclass FedexPriceStrategy extends ShippingPriceStrategy {\n\n    function shipmentPrice() {\n        return 4.95;\n    }\n}\n\nclass UpsPriceStrategy extends ShippingPriceStrategy {\n\n    function shipmentPrice() {\n        return 3.75;\n    }\n}\n\nclass Shipping {\n\n    public $shipping_pricing_structure;\n\n    function __construct(ShippingPriceStrategy $shipment_pricing_strategy) {\n\n        $this->shipping_pricing_structure = $shipment_pricing_strategy;\n\n    }\n}\n```", "```php\n<?php\n\n$cart_total = 77.90;\n\n$fedex_price = new Shipping(new FedexPriceStrategy());\n\n$ups_price = new Shipping(new UpsPriceStrategy());\n\n$ups_price_with_cart = $cart_total+$ups_price->shipping_pricing_structure->shipmentPrice();\n\n$fedex_price_with_cart = $cart_total+$fedex_price->shipping_pricing_structure->shipmentPrice();\n\necho 'The cost of this order with Fedex is: '.$fedex_price_with_cart.\"\\n\";\n\necho 'The cost of this order with UPS is: '.$ups_price_with_cart.\"\\n\";\n```", "```php\n<?php\n\nClass ProductsController extends \\BaseController {\n\n   public function findProduct($id) {\n      $product = Product::find($id);\n      return View::make('product')\n         ->with('product', $product);\n   }\n\n   public function allProducts() {\n      $products = Product::all();\n      return View::make('all_products')\n         ->with('products', $products);\n   }\n\n}\n```", "```php\n<?php\n\n//We use the repository in our class\nuse Acme\\Repositories\\EloquentProductRepository;\n\nClass ProductsController extends \\BaseController {\n\n   //A protected variable to hold the Repository\n   protected $product;\n\n   //Let's define a constructor class, and assigning to the variable $product \n   public function __construct(EloquentProductRepository $product) {\n      $this->product = $product;\n   }\n\n   public function findProduct($id) {\n      //$product = Product::find($id);\n      $product = $this->product->find($id);\n      return View::make('product')\n         ->with('product', $product);\n   }\n\n   public function allProducts() {\n      //$products = Product::orderBy('id', 'desc')->get();\n      //let's give it a unique method name\n      $products = $this->product->getNewest();\n      return View::make('all_products')\n         ->with('products', $products);\n   }\n\n}\n```", "```php\n<?php namespace Acme\\Repositories;\n\nClass EloquentProductRepository {\n\n   public function getNewest() {\n\n      return \\Order::orderBy('id', 'desc')->get();\n\n   }\n\n   public function find($id) {\n      return \\Order::find($id);\n   }\n\n}\n```", "```php\n<?php\n\n//We use the interface in our class\nuse Acme\\Repositories\\ProductInterface;\n\nClass ProductsController extends \\BaseController {\n\n   //A protected variable to hold the Interface\n   protected $product;\n\n   //Let's define a constructor class, and inject the interface as $product variable\n   public function __construct(ProductInterface $product) {\n      $this->product = $product;\n   }\n\n   public function findProduct($id) {\n      //$product = Product::find($id);\n      $product = $this->product->find($id);\n      return View::make('product')\n         ->with('product', $product);\n   }\n\n   public function allProducts() {\n      //$products = Product::orderBy('id', 'desc')->get();\n      //let's give it a unique method name\n      $products = $this->product->getNewest();\n      return View::make('all_products')\n         ->with('products', $products);\n   }\n\n}\n```", "```php\n<?php namespace Acme\\Repositories;\n\ninterface ProductInterface {\n\n   public function getNewest();\n   public function find();\n\n}\n```", "```php\n<?php namespace Acme\\Repositories;\n\nClass EloquentProductRepository implements ProductInterface {\n\n   public function getNewest() {\n      return \\Order::orderBy('id', 'desc')->get();\n\n   }\n\n   public function find($id) {\n       return \\Order::find($id);\n   }\n\n}\n```", "```php\nApp::bind(\n'Acme\\Repositories\\ProductInterface', \n'Acme\\Repositories\\EloquentProductRepository'\n);\n```", "```php\n<?php namespace Acme\\Repositories;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass UserServiceProvider extends ServiceProvider {\n\n    public function register()\n    {\n        $this->app::bind('Acme\\\\Repositories\\\\ProductInterface', 'Acme\\Repositories\\EloquentProductRepository');\n    }\n}\n```"]