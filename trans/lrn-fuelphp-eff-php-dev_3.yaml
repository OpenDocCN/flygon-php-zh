- en: Chapter 3. The Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。架构
- en: Before we start building anything with our fresh-installed version of FuelPHP,
    let's first take a look at some of the main aspects of the architecture. We will
    also cover some of the places where you should put your code for the project and
    then follow this with examples in the next chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用新安装的FuelPHP版本构建任何内容之前，让我们首先看一下架构的一些主要方面。我们还将涵盖一些应该将代码放置在项目中的地方，然后在下一章中提供示例。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Environments, constants, and configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境、常量和配置
- en: Apache configuration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache配置
- en: The FuelPHP bootstrap
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FuelPHP引导
- en: Models, views, and controllers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型、视图和控制器
- en: Environments, constants, and configuration
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境、常量和配置
- en: 'As any developer will tell you, it''s never a good idea to edit files directly
    in the live production environment. To this end, FuelPHP has the notion of environments
    baked into its core. Environments allow for different configurations in each stage
    of the project''s life cycle. FuelPHP supports four environment settings, which
    are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 任何开发人员都会告诉您，直接在实时生产环境中编辑文件绝不是一个好主意。为此，FuelPHP将环境的概念内置到其核心中。环境允许在项目生命周期的每个阶段中进行不同的配置。FuelPHP支持四种环境设置，如下所示：
- en: '`\Fuel::DEVELOPMENT`: This is the default environment setting and also where
    you''ll start'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\Fuel::DEVELOPMENT`：这是默认的环境设置，也是您将开始的地方'
- en: '`\Fuel::TEST`: This is where you can run code with test data'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\Fuel::TEST`：这是您可以使用测试数据运行代码的地方'
- en: '`\Fuel::STAGING`: This is where you get client approval and acceptance'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\Fuel::STAGING`：这是您获得客户批准和接受的地方'
- en: '`\Fuel::PRODUCTION`: This is the live environment'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`\Fuel::PRODUCTION`：这是实时环境'
- en: If the environment is not set, the code will run in the development mode. Setting
    the environment can be done in several ways.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果环境未设置，代码将以开发模式运行。可以通过多种方式设置环境。
- en: Server and Apache configuration
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器和Apache配置
- en: 'This section will teach you what probably is the easiest way of setting the
    environment variable, but only if you have access to the Apache configuration
    or virtual host file for the project domain. In the configuration or virtual host
    file, simply include the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将教您设置环境变量的可能是最简单的方法，但前提是您可以访问项目域的Apache配置或虚拟主机文件。在配置或虚拟主机文件中，只需包含以下代码：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `FUEL_ENV` code needs to be in uppercase as it's a PHP constant
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`FUEL_ENV`代码需要大写，因为它是一个PHP常量'
- en: The bootstrap PHP file
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引导PHP文件
- en: 'If you don''t have access to set the server configuration and want to get it,
    an alternative is to set the environment in the application bootstrap. This can
    be done in the `bootstrap.php` file located in `fuel/app/`, using the following
    code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法访问服务器配置并希望获得它，另一种方法是在应用程序引导中设置环境。这可以在`fuel/app/`中的`bootstrap.php`文件中使用以下代码完成：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Configuration
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: 'Once you have your environment configured, it''s worth thinking about the configuration
    for the project. FuelPHP follows a hierarchy when auto-loading configurations.
    This really comes in handy for database settings, meaning that your production
    connections can be more secure for the production and staging environments. In
    fact, the team doesn''t even need access to the database credentials for them
    to work on the project. The configuration directory structure can resemble the
    following code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置了环境，就值得考虑项目的配置。FuelPHP在自动加载配置时遵循一种层次结构。这对于数据库设置非常方便，这意味着您的生产连接可以更安全地用于生产和分段环境。事实上，团队甚至不需要访问数据库凭据就可以在项目上工作。配置目录结构可以类似于以下代码：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The settings in the environment directories are treated as more important than
    those in the higher directories giving fine-grained configuration controls with
    a fallback. This is great for testing and ensuring that each environment can be
    configured differently, for example, third-party API connection details.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 环境目录中的设置被视为比较高级目录中的设置更重要，从而实现了细粒度的配置控制和回退。这对于测试和确保每个环境可以以不同的方式配置非常有用，例如第三方API连接详细信息。
- en: The same hierarchy is followed for package configurations. In this case, the
    package configuration in the application configuration folder is treated with
    greater importance than the configuration in the package directory. This allows
    the default options in packages to be overridden with a configuration file in
    the `app/config` folder.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包配置，也遵循相同的层次结构。在这种情况下，应用程序配置文件夹中的包配置比包目录中的配置更重要。这允许在`app/config`文件夹中的配置文件中覆盖包中的默认选项。
- en: Constants
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常量
- en: 'In relation to packages, the details of the path to their folders take the
    form of constants. The following are PHP constants set in the bootstrap file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 关于包，其文件夹路径的详细信息采用常量的形式。以下是在引导文件中设置的PHP常量：
- en: '`APPPATH`: The path to the application directory where your application code
    and directories sit'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`APPPATH`：应用程序目录的路径，您的应用程序代码和目录位于其中'
- en: '`COREPATH`: The path to the core FuelPHP files'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COREPATH`：FuelPHP核心文件的路径'
- en: '`DOCROOT`: The public folder for assets and the `index.php` file'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DOCROOT`：用于资源和`index.php`文件的公共文件夹'
- en: '`PKGPATH`: The package directory path'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PKGPATH`：包目录路径'
- en: '`VENDORPATH`: The path to the composer root directory'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VENDORPATH`：composer根目录的路径'
- en: Models, views, and controllers
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型、视图和控制器
- en: No look at the architecture would be complete without mentioning the **model-view-controller**
    (**MVC**) design pattern. If you have written PHP before, or looked at any of
    the other numerous frameworks out there, you would have heard of the MVC pattern.
    It allows the logical separation of code. The controller handles the logic while
    the model ensures the consistency of data and also performs the interaction with
    the data store. The view presents the results of the controller and model to the
    user. So far, so good; why mention the MVC pattern? Well, FuelPHP introduces the
    ViewModel and some base classes to give you a head start on your project.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有提到**模型-视图-控制器**（**MVC**）设计模式的架构中是不完整的。如果您以前编写过PHP，或者查看过其他众多框架，您可能已经听说过MVC模式。它允许代码的逻辑分离。控制器处理逻辑，而模型确保数据的一致性，并执行与数据存储的交互。视图向用户呈现控制器和模型的结果。到目前为止，一切都很好；为什么要提到MVC模式？嗯，FuelPHP引入了ViewModel和一些基本类，为您的项目提供了一个快速入门。
- en: Views and ViewModels
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图和ViewModels
- en: Views are stored in the `views` folder within the `app` folder, for example,
    `fuel/app/views`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 视图存储在`app`文件夹中的`views`文件夹中，例如，`fuel/app/views`。
- en: They can be grouped together in subfolders and normally relate directly to a
    controller action, for example, `login.php`, which is located in `fuel/app/views/user/`,
    would relate to the `login` method within the `user` controller. It would also
    have a class name of `user/login`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以被分组放在子文件夹中，并且通常与控制器操作直接相关，例如，`login.php`位于`fuel/app/views/user/`中，将与`user`控制器中的`login`方法相关联。它还将具有`user/login`的类名。
- en: It is also worth noting that the views can use variables passed to it from the
    controller or ViewModel. They can also use any core FuelPHP classes and native
    PHP functions. To help with the separation of the logic from the presentation
    it's recommended to only use basic `if` statements and loops.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，视图可以使用从控制器或ViewModel传递给它的变量。它们还可以使用任何核心FuelPHP类和本机PHP函数。为了帮助将逻辑与表示分离，建议仅使用基本的`if`语句和循环。
- en: Security is always important and, as such, all variables passed to a view will
    be sanitized using the configured output filters—usually `Security::htmlentities()`.
    This behavior can be changed or disabled from within each controller, as can the
    default functions that run from the configuration files.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性始终很重要，因此传递给视图的所有变量都将使用配置的输出过滤器进行清理-通常是`Security::htmlentities()`。这种行为可以从每个控制器内部更改或禁用，配置文件中运行的默认函数也可以更改。
- en: To reduce the memory footprint of FuelPHP apps, views are "lazy-loaded". This
    means that they will only be rendered when called for or echoed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少FuelPHP应用程序的内存占用，视图是“延迟加载”的。这意味着它们只在调用或回显时才会被渲染。
- en: We mentioned earlier about ViewModels; these act as the glue between controllers
    and views. When an application starts to get complex, it can become difficult
    to decide whether or not a piece of code should go in the controller or view.
    The code may have little to do with the application logic and more to do with
    the presentation logic. This is where ViewModels come in use.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到了ViewModels；这些作为控制器和视图之间的粘合剂。当应用程序开始变得复杂时，很难决定一段代码是否应该放在控制器或视图中。代码可能与应用程序逻辑无关，而与表示逻辑有关。这就是ViewModels的用处所在。
- en: ViewModels come into play after the user input has occurred. They then retrieve
    the data needed for the views. They don't manipulate the data, but can interact
    with the data store before the view.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: ViewModel在用户输入发生后发挥作用。然后检索视图所需的数据。它们不处理数据，但可以在视图之前与数据存储交互。
- en: Models
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: The FuelPHP core model (`Model_Crud`) includes the basic CRUD (create, read,
    update, and delete) functions, making it quick and easy to start working with
    the data store. It is just a shortcut for working with tables and is not part
    of the ORM package. The naming conventions are the same for the `Model_Crud` and
    the `ORM` package; this makes it really easy to update to the ORM package for
    more complex data interactions. The ORM package includes many advanced pieces
    of functionalities, ranging from soft deletion to temporal historical record keeping.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: FuelPHP核心模型（`Model_Crud`）包括基本的CRUD（创建、读取、更新和删除）函数，使其快速且易于开始使用数据存储。它只是用于处理表格的快捷方式，不是ORM包的一部分。`Model_Crud`和`ORM`包的命名约定相同；这使得更新到ORM包以进行更复杂的数据交互变得非常容易。ORM包包括许多高级功能，从软删除到时间历史记录保留。
- en: Using the ORM package will require you to define more details on the data, such
    as the relationships between database tables. We'll touch upon some of these when
    building the example application in the next chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ORM包将需要您定义有关数据的更多详细信息，例如数据库表之间的关系。在下一章构建示例应用程序时，我们将涉及其中一些内容。
- en: Controllers
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: Controllers are where the more interesting parts of the application happen.
    Like other parts of the project, the code has a logical location within the following
    folder structure. Controllers go in the `fuel/app/classes/controller` folder.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器是应用程序中更有趣的部分发生的地方。与项目的其他部分一样，代码在以下文件夹结构中具有逻辑位置。控制器放在`fuel/app/classes/controller`文件夹中。
- en: 'The router takes the URL, loads the required controller, and then passes the
    request to the corresponding action or method within the controller. For example,
    navigating to the `http://project.dev/home/index` URL would call the `index` method
    in the home controller. The structure of the controller would look something like
    the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器获取URL，加载所需的控制器，然后将请求传递给控制器内对应的操作或方法。例如，导航到`http://project.dev/home/index`
    URL将调用主页控制器中的`index`方法。控制器的结构看起来可能是这样的：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Actions or methods within the controller are prefixed with action_, this is
    to help you use the reserved PHP method names, such as `list`, and still have
    a logic name for the controller methods. Other methods can be created, but without
    the `action_` prefix, they can only be called directly rather than through the
    URL.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器内的操作或方法以action_为前缀，这是为了帮助您使用保留的PHP方法名称，例如`list`，并且仍然为控制器方法提供逻辑名称。其他方法可以被创建，但没有`action_`前缀，它们只能直接调用，而不是通过URL调用。
- en: 'If you are building an API or setting up an AJAX system, it is possible to
    separate out the methods. In the following example, the `action_example` would
    take GET requests while POST requests would go to the `post_example` method as
    follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在构建API或设置AJAX系统，可以将方法分离出来。在下面的示例中，`action_example`将接受GET请求，而POST请求将转到`post_example`方法，如下所示：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This functionality comes into play with the base controller templates, which
    you can use as a starting point when creating your application. The separation
    of the `action_` and `post_` methods will only work with the hybrid or rest base
    controllers. There are four base templates—base, template, rest, and hybrid.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建应用程序时，此功能将与基础控制器模板一起发挥作用。`action_`和`post_`方法的分离只适用于混合或rest基础控制器。有四个基本模板——base、template、rest和hybrid。
- en: Template
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板
- en: The template controller is an extension of the base controller mentioned previously,
    that has template support built-in using predefined `before()` and `after()` methods.
    It can be used to wrap your view in a layout with a header and footer. Your layout
    template should be stored in `fuel/app/views/template.php`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 模板控制器是基础控制器的扩展，之前提到过，它具有内置的模板支持，使用预定义的`before()`和`after()`方法。它可以用来在布局中包装您的视图，并带有页眉和页脚。您的布局模板应存储在`fuel/app/views/template.php`中。
- en: Rest
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Rest
- en: Like the template controller, the rest controller is an extension of the base
    controller. Instead of built-in template support actions, it has RESTful support
    built into it, making it easier to build APIs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与模板控制器类似，rest控制器是基础控制器的扩展。它不是内置模板支持操作，而是内置RESTful支持，使构建API更容易。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If, in your rest controller, you have added a `before()` or router method, you
    will need to call the parent method `parent::before()` for all of it to work.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在您的rest控制器中添加了`before()`或路由器方法，您将需要调用父方法`parent::before()`才能使所有这些方法都起作用。
- en: Hybrid
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合
- en: The hybrid controller brings together the rest and template controllers.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 混合控制器将rest和模板控制器结合在一起。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have run through some of the basic parts of the FuelPHP
    architecture. We have seen that FuelPHP gives a great starting point with extendable
    controllers and models. These provide a great head start to most projects and
    introduce some functionalities, which is a first for any PHP framework; for example,
    the temporal ORM model.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了FuelPHP架构的一些基本部分。我们已经看到FuelPHP提供了一个很好的起点，具有可扩展的控制器和模型。这些为大多数项目提供了一个很好的起点，并引入了一些功能，这是任何PHP框架的首次；例如，时间ORM模型。
- en: In the next chapter, we will start using this knowledge to create a demo application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用这些知识来创建演示应用程序。
