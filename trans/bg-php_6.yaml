- en: Chapter 6. Building a PHP Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。构建PHP框架
- en: In the previous chapter, we have created a model and a controller, where the
    controller `Contacts` class instantiates the model `Contact` class. We successfully
    used a `namespace`, a `use` statement, a method, an access modifier, an object,
    and a class. We have witnessed the power of a framework in the previous chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了一个模型和一个控制器，其中控制器`Contacts`类实例化模型`Contact`类。我们成功使用了`namespace`，`use`语句，方法，访问修饰符，对象和类。我们在上一章中见证了框架的力量。
- en: In this chapter, we will be building an MVC framework from scratch. A framework
    is really just a way to organize the code and structure it. Starting from an empty
    directory, we will build an entire working framework as a starting point for more
    complex applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从头开始构建一个MVC框架。框架实际上只是一种组织代码和结构代码的方式。从一个空目录开始，我们将构建一个完整的工作框架，作为更复杂应用程序的起点。
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the previous chapter, we retrieved data from an array. In this lesson, we
    will retrieve it from the database.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们从数组中检索数据。在本课程中，我们将从数据库中检索数据。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够：
- en: Build a basic PHP MVC framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个基本的PHP MVC框架
- en: Implement the OOP concepts covered in the previous chapters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施在以前章节中涵盖的面向对象的概念
- en: Identify how to route a controller to a specified URI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定如何将控制器路由到指定的URI
- en: Interact with the database with PHP Data Objects (PDO)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP数据对象（PDO）与数据库交互
- en: Work with HTML to build and create reusable pages (views)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML构建和创建可重用的页面（视图）
- en: We will also be implementing the OOP concepts that we have covered in previous
    chapters, including, but not restricted to, namespaces, `use` statements, objects
    and classes, access modifiers, and methods.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将实施我们在以前章节中涵盖的面向对象的概念，包括但不限于命名空间，`use`语句，对象和类，访问修饰符和方法。
- en: We will learn how to route a controller to a specified URL and work with HTML
    to build and create reusable pages (views). Finally, we will interact with the
    database using a PDO.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何将控制器路由到指定的URL，并使用HTML构建和创建可重用的页面（视图）。最后，我们将使用PDO与数据库交互。
- en: Setting up a Project Development Environment
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目开发环境
- en: This section is concerned with setting up the project development environment.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涉及设置项目开发环境。
- en: This is all about setting up the index, the `.htaccess` file, creating the web
    root, setting up the composer, and setting up the `app` directory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是关于设置索引，`.htaccess`文件，创建Web根目录，设置Composer和设置`app`目录。
- en: '**The index** is the bootstrap file of the framework; this is ultimately where
    all requests are received. A request is made, for example, when the user inputs
    a URL into the address bar.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引**是框架的引导文件；这最终是所有请求接收的地方。例如，当用户在地址栏中输入URL时，就会发出请求。'
- en: '**.htaccess** is the mod rewrite engine that passes all requests to the index
    file.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.htaccess**是mod rewrite引擎，将所有请求传递给索引文件。'
- en: '**Web root** is the public folder that would be accessible to the browser,
    as well as for storing the index and .htaccess of all the web application''s assets.
    This would include images, CSS, and JavaScript files.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web根目录**是公共文件夹，可以被浏览器访问，也用于存储Web应用程序的所有资产的索引和.htaccess。这将包括图像，CSS和JavaScript文件。'
- en: '**Composer** is a package manager for managing libraries of code which the
    system is dependent on.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Composer**是用于管理系统依赖库的包管理器。'
- en: '**App directory** is your application; it is where your views, models, controllers,
    and helpers will be stored. Helpers are compact methods that help with single
    common tasks developers come across frequently. It is common that a developer
    may find themselves repeating the same tasks and will create a helper class with
    single or several methods to help with this task. This could be formatting dates,
    performing specific calculations, and many more.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序目录**是您的应用程序；这是您的视图，模型，控制器和助手将存储的地方。助手是帮助开发人员经常遇到的单个常见任务的紧凑方法。开发人员可能发现自己重复执行相同的任务，并将创建一个帮助程序类，其中包含一个或多个方法来帮助完成此任务。这可能是格式化日期，执行特定计算等等。'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The boot symbolizes what the process of setting up a framework is commonly known
    as bootstrapping. This is not to be confused with the popular CSS Grid named Bootstrap.
    This essentially tightly ties all core parts of the framework together.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 引导符号象征着设置框架的过程通常被称为引导。这不应与流行的CSS Grid命名为Bootstrap混淆。这本质上紧密地将框架的所有核心部分联系在一起。
- en: Error Reporting Using Composer and Whoops
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Composer和Whoops进行错误报告
- en: For this project, we will be using the Whoops library to handle errors. The
    Whoops library is a tool for examining errors that may occur in your projects.
    This library is packaged and made available for other developers to use in their
    projects.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将使用Whoops库来处理错误。Whoops库是用于检查项目中可能发生的错误的工具。这个库已经打包并提供给其他开发人员在他们的项目中使用。
- en: 'Using Whoops, when an error occurs in PHP, you will be able to see this display
    information as opposed to standard bland error reporting from the server:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Whoops，当PHP发生错误时，您将能够看到显示信息，而不是来自服务器的标准单调的错误报告：
- en: '![Error Reporting Using Composer and Whoops](graphics/6_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![使用Composer和Whoops进行错误报告](graphics/6_01.jpg)'
- en: Composer will manage the use of this dependency as it is considered among PHP
    developers a very widely used and a very popular package manager.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Composer将管理此依赖的使用，因为它被认为是PHP开发人员非常广泛使用和非常受欢迎的包管理器之一。
- en: Composer is a tool for dependency management in PHP. It allows you to declare
    the libraries your project depends on and it will manage (install/update) them
    for you. To install Composer, go to [https://getcomposer.org/download/](https://getcomposer.org/download/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是PHP中的依赖管理工具。它允许您声明项目所依赖的库，并且会为您管理（安装/更新）它们。要安装Composer，请访问[https://getcomposer.org/download/](https://getcomposer.org/download/)。
- en: Imagine a scenario where you have to install a dependency for PHP, and for installing
    that dependency, you need to install other overhead dependencies. Composer helps
    you in handling this problem. It is used to handle all the work for you to install
    a library, as it downloads all the libraries and dependencies together.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一种情况，您必须为PHP安装一个依赖项，为了安装该依赖项，您需要安装其他额外的依赖项。Composer帮助您处理这个问题。它用于为您处理所有工作，以安装一个库，因为它会一起下载所有库和依赖项。
- en: Setting up Composer
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Composer
- en: 'We''ll look at setting up Composer in this section. To do this, follow these
    steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中设置Composer。要做到这一点，请按照以下步骤操作：
- en: Create a folder to store the framework files.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件夹来存储框架文件。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Feel free to call your folder anything you like, as long as it's all in lowercase
    without any spaces.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 随意为您的文件夹命名，只要全部小写且没有空格即可。
- en: '`app` holds the application files'
  id: totrans-35
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`保存应用程序文件'
- en: '`system` holds the core framework files'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system`保存核心框架文件'
- en: '`webroot` will hold the publicly accessible files'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webroot`将保存公开访问的文件'
- en: Next, we will set up Composer. Create a file in the root of your framework folder
    called `composer.json.`
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置Composer。在框架文件夹的根目录中创建一个名为`composer.json`的文件。
- en: This file holds a JSON object that will autoload classes as we need them. We
    will be using PSR-4 autoloading.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含一个JSON对象，将根据需要自动加载类。我们将使用PSR-4自动加载。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PSR-4 autoloading will load a class based on its namespace when it's being used.
    For instance, new `App\Models\Contact()` will tell Composer to autoload a file
    called `Contact` that is stored in the folder `app\Models.`
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: PSR-4自动加载将根据其命名空间加载类在使用时。例如，新的`App\Models\Contact()`将告诉Composer自动加载名为`Contact`的文件，该文件存储在文件夹`app\Models`中。
- en: Open `composer.json` and create an `App` and `System` definition.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`composer.json`并创建一个`App`和`System`定义。
- en: This will tell Composer that everything we call a namespace, with either `App`
    or `System` to look for the class in the `app` or `system` folders.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将告诉Composer，我们称为命名空间的一切，无论是`App`还是`System`，都要在`app`或`system`文件夹中查找类。
- en: 'We are also loading a third-party package called `Whoops.` We load this package
    by including it as a dependency in a `require` block:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还加载了一个名为`Whoops`的第三方包。我们通过在`require`块中将其包含为依赖项来加载此包：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save `composer.json.` Now, inside `webroot,` create two files: `index.php`
    and `.htaccess.`'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`composer.json`。现在，在`webroot`中，创建两个文件：`index.php`和`.htaccess`。
- en: Open `.htaccess`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`.htaccess`。
- en: 'For security reasons, if a folder does not contain an `index` file, we don''t
    want its contents displayed in a browser. To disable directory browsing, enter:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出于安全原因，如果一个文件夹不包含`index`文件，我们不希望其内容显示在浏览器中。要禁用目录浏览，请输入：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, a check is made to ensure mod rewrite is enabled:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将检查是否启用了mod rewrite：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`mod` rewrite provides a rule-based rewriting engine to rewrite requested URLs
    on the fly. It helps to make URLs, so `index.php?page` can become `/`page.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod` rewrite提供了一个基于规则的重写引擎，可以实时重写请求的URL。它有助于使URL，因此`index.php?page`可以变成`/`page。'
- en: 'Next, turn on the rewriting engine and set the base to the root of this folder:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开重写引擎并将基础设置为此文件夹的根目录：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To force HTTPS, you can uncomment the `#` below, but only do this on a server
    that has HTTP enabled.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要强制使用HTTPS，可以取消下面的`#`，但只能在启用了HTTP的服务器上这样做。
- en: Next, define the rewrite conditions.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义重写条件。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is to ignore trailing slashes and folder and files that exist. Only dynamic
    files should be routed, for example, URLs that do not exist as physical files.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了忽略尾随斜杠和存在的文件夹和文件。只有动态文件应该被路由，例如，不存在作为物理文件的URL。
- en: The last rule passes all requests to `index.php?$1.` The `$1` is the request
    after the first `/` in the requested URL.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的规则将所有请求传递到`index.php?$1`。`$1`是请求URL中第一个`/`之后的请求。
- en: '`RewriteCond` basically means "execute the next `RewriteRule` only if this
    is true".'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`RewriteCond`基本上意味着“只有在这是真的时候才执行下一个`RewriteRule`”。'
- en: The `RewriteRule` basically means that if the request is done that matches `^(.+)$`
    (matches any URL except the server root), it will be rewritten as `index.php?$1,`
    which means a request for contact will be rewritten as `index.php?contact:`
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`RewriteRule`基本上意味着，如果请求匹配`^(.+)$`（匹配除服务器根目录之外的任何URL），它将被重写为`index.php?$1`，这意味着对联系人的请求将被重写为`index.php?contact:`'
- en: RewriteRule ^(.*)$ index.php?$1 [QSA,L]
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: RewriteRule ^(.*)$ index.php?$1 [QSA,L]
- en: QSA means that this flag forces the rewriting engine to append a query string
    part in the substitution string to the existing one instead of replacing it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: QSA表示此标志强制重写引擎将查询字符串部分附加到现有字符串中，而不是替换它。
- en: The Secure Sockets Layer (SSL) creates an encrypted connection between your
    web server and your web browser. This stops any data being intercepted from your
    machine to the web server. It's recommended to use HTTPS.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安全套接字层（SSL）在您的Web服务器和Web浏览器之间创建加密连接。这样可以阻止任何数据从您的计算机被拦截到Web服务器。建议使用HTTPS。
- en: 'The complete file should look like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的文件应该如下所示：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to Lesson 6.php file in the code files folder.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的Lesson 6.php文件。
- en: Save the file. Now, open `index.php.`
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。现在，打开`index.php`。
- en: First, start php and then do a check to determine if `vendor/autoload.php` exists
    (it won't exist yet) and require the file.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，启动php，然后进行检查以确定`vendor/autoload.php`是否存在（它尚不存在），并要求该文件。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is an important step. The autoload.php file will only exist once the Composer
    has been initialized. Checking before requiring the file is a precaution used
    to avoid a fatal error.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重要的步骤。只有在初始化Composer后，autoload.php文件才会存在。在要求文件之前进行检查是一种预防措施，用于避免致命错误。
- en: 'We should inform the user what Composer is requesting and where to go and get
    it. We do this by using an `else` clause:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该通知用户Composer正在请求什么以及去哪里获取它。我们通过使用`else`子句来做到这一点：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we will set our environment.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置我们的环境。
- en: We will define a constant called `ENVIRONMENT` and give it a value of development.
    When going into `production,` set the `environment` to `production`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将定义一个名为`ENVIRONMENT`的常量，并给它一个开发的值。当进入`production`时，将`environment`设置为`production`。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'When in production, you do not want to show errors. Having an environment constant
    is a good way to set what the environment of the application is:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，您不希望显示错误。拥有一个环境常量是设置应用程序环境的好方法：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, based on the `environment` constant, we can set the appropriate level
    of error reporting:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，根据`environment`常量，我们可以设置适当的错误报告级别：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In development mode, all errors will be displayed, but in production, no errors
    will be displayed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下，将显示所有错误，但在生产模式下，将不显示任何错误。
- en: 'The complete file looks like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的文件看起来像这样：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to Lesson 6.php file in the code files folder.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的Lesson 6.php文件。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A new folder will now have been created called vendor. This folder is where
    Composer installs its required files and any third-party dependencies.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将创建一个名为vendor的新文件夹。这个文件夹是Composer安装其所需文件和任何第三方依赖项的位置。
- en: You can now go back to your browser and reload the page. You should now see
    a blank page.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以返回浏览器并重新加载页面。现在应该看到一个空白页面。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This means Composer is working, but we haven't yet requested anything to be
    loaded.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Composer正在工作，但我们还没有请求加载任何内容。
- en: Errors in view when the Whoops package is turned on will display the errors
    on the screen with a full stack trace of how the framework has executed the code
    along the way. This can help developers isolate the issue by following the path
    that their code has traveled on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开Whoops包时，视图中的错误将在屏幕上显示代码的完整堆栈跟踪，以显示框架如何执行代码的路径。这可以帮助开发人员通过跟踪其代码的路径来隔离问题。
- en: 'Activity: Using Composer to Install Dependencies'
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：使用Composer安装依赖项
- en: Suppose you are working on a PHP project and you need a lot of dependencies
    for your project. You are on a strict deadline, yet, you cannot proceed ahead
    before adding those dependencies. You discovered that you can use Composer to
    install dependencies automatically. You now need to install Composer.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在开发一个PHP项目，并且您的项目需要很多依赖项。您有严格的截止日期，但是在添加这些依赖项之前，您无法继续。您发现可以使用Composer自动安装依赖项。现在您需要安装Composer。
- en: The aim of this activity is to get you acquainted with Composer installation.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这项活动的目的是让您熟悉Composer安装。
- en: 'To perform this activity, follow these steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此活动，请按照以下步骤进行：
- en: Run the framework by opening Terminal or command prompt.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开终端或命令提示符来运行框架。
- en: 'If on Windows, navigate to the `framework` folder and launch the php server:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在Windows上，导航到`framework`文件夹并启动php服务器：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `–S` means that run the server and use localhost:8000 as it's address, and
    `–t Webroot` sets the document `root` to the `Webroot` folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`-S`表示运行服务器并使用localhost:8000作为其地址，`-t Webroot`将文档`root`设置为`Webroot`文件夹。'
- en: 'The Terminal output will look like this (some of the details will be different
    on your system):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 终端输出将如下所示（您的系统上的某些细节可能会有所不同）：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, go to `http://localhost:8000` and you will see the Composer instructions
    we wrote in the `else` statement in `index.php.`
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到`http://localhost:8000`，您将看到我们在`index.php`的`else`语句中编写的Composer说明。
- en: 'This is because we have not yet set up Composer. We do this by typing the following
    in the Terminal:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是因为我们还没有设置Composer。我们可以在终端中输入以下内容来完成这一步：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Observe that a new folder will now have been created called `vendor`. This folder
    is where Composer installs its required files and any third-party dependencies.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，现在将创建一个名为`vendor`的新文件夹。这个文件夹是Composer安装其所需文件和任何第三方依赖项的位置。
- en: Now, go back to your browser and reload the page.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回浏览器并重新加载页面。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should now see a blank page.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该看到一个空白页面。
- en: This means Composer is working, but we haven't yet requested anything to be
    loaded.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Composer正在工作，但我们还没有请求加载任何内容。
- en: 'Go back to index.php in your editor and add these lines at the bottom of the
    file:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到编辑器中的index.php，在文件底部添加以下行：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will load our `config` class and set up our routing.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载我们的`config`类并设置我们的路由。
- en: Save `index.php` and create a new file called `Config.php` inside the `app` folder.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`index.php`并在`app`文件夹中创建一个名为`Config.php`的新文件。
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Take care to name the file `Config` and `not config.` Case sensitivity is important
    on Unix-based systems such as Mac and Linux.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意将文件命名为`Config`而不是`config`。在基于Unix的系统（如Mac和Linux）上，大小写敏感。
- en: We have reached the end of this section. We have learned how to bootstrap an
    application, which allows for a single entry point, and how to use Composer to
    autoload the classes. We covered how errors are handled and finally, we covered
    the build process of the framework.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了本节的末尾。我们学会了如何引导应用程序，这允许单一入口点，并且学会了如何使用Composer自动加载类。我们讨论了如何处理错误，最后，我们讨论了框架的构建过程。
- en: In the next section, we will set up the configuration class and will also set
    up routing.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将设置配置类并设置路由。
- en: Configuration Class, Default Classes, and Routing
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置类、默认类和路由
- en: In this section, we will learn about the `configuration` class, and we will
    also be setting up routing.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习`configuration`类，并且我们还将设置路由。
- en: We will be setting up the `config` class. This will be located in the root of
    the `app` folder. The `config` class stores the default controller, the `default`
    method to be loaded, and the database credentials. In the `index` file at the
    beginning, you will be passing the `config` class to the `route` class. The `route`
    class controls what is to be loaded and when. The focus for now is the `configuration`
    class and routing. The other components will be looked at in more detail in later
    sections.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置`config`类。这将位于`app`文件夹的根目录下。`config`类存储默认控制器，要加载的`default`方法以及数据库凭据。在`index`文件的开头，您将把`config`类传递给`route`类。`route`类控制何时加载以及何时加载。现在的重点是`configuration`类和路由。其他组件将在后面的章节中更详细地讨论。
- en: 'The `configuration` class is an array of options for the framework including
    the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`configuration`类是框架选项的数组，包括以下内容：'
- en: Database source credentials
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库源凭据
- en: Paths to default controllers
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认控制器的路径
- en: Paths to default methods
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认方法的路径
- en: In this section, we will also create a view class which is responsible for loading
    views, which enables a place for the presentation layer to be displayed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们还将创建一个负责加载视图的视图类，这使得可以显示表示层的位置。
- en: When setting up routing, we are informing the framework where to look in the
    files system that matches the URL.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置路由时，我们正在告知框架在文件系统中查找与URL匹配的位置。
- en: When loading the correct file, this will be the required controller class. We
    will activate the required method, the required model, and the required view.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载正确的文件时，这将是所需的控制器类。我们将激活所需的方法、所需的模型和所需的视图。
- en: We will do all of this so the user can see in their browser what they have requested
    from simply clicking on a link, which is otherwise known as making a request to
    the server.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将做所有这些，以便用户可以在他们的浏览器中看到他们通过简单点击链接请求的内容，这又称为向服务器发出请求。
- en: Then, we will create the `route` class, which takes segments from the URL so
    it knows which controller and method to load and parameters to pass.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建`route`类，它从URL中获取段，以便知道要加载哪个控制器和方法以及要传递的参数。
- en: For instance, the URL `http://localhost:8000/contacts/view/2` says *Go to the
    contacts controller view method*. In this case, the number 2 represents a parameter
    being passed through to the view method.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，URL `http://localhost:8000/contacts/view/2` 表示*转到contacts控制器的view方法*。在这种情况下，数字2表示传递给view方法的参数。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `configuration` class is more commonly known by developers as the config
    class.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`configuration`类更常被开发人员称为配置类。'
- en: Configuration is a natural place that users might look to for help on understanding
    how to remember important details about their framework project. It is advisable
    to developers to develop a system to remember details about their projects.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 配置是用户可能寻求帮助以了解如何记住其框架项目的重要细节的自然位置。建议开发人员开发一个系统来记住其项目的细节。
- en: This can be helpful if they plan to make their project open source. It can also
    be helpful to the developer if they need to remember details about a project at
    a later date, as months, even years, can go by before the developer needs to revisit
    the project.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们计划将其项目开源，这可能会有所帮助。对于开发人员来说，如果他们需要在以后的某个日期记住项目的细节，这也可能会有所帮助，因为可能会有几个月甚至几年的时间过去，开发人员需要重新访问该项目。
- en: What kind of details could these be?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可能是什么样的细节？
- en: '**Version number** – Over time, the developer may make additions and improvements,
    which can affect the very core of the code base. Knowing what version you are
    working with can help you select the proper approach to a programming problem
    later on.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本号** - 随着时间的推移，开发人员可能会进行添加和改进，这可能会影响代码基础的核心。知道你正在使用的版本可以帮助你在以后选择适当的编程方法。'
- en: '**Credits** – It is good practice to credit the work of other developers whose
    work you have used. If you fail to do so and you may receive an unhappy email
    from an uncredited developer.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鸣谢** - 为使用其他开发人员的工作给予信用是一个好习惯。如果你未能这样做，你可能会收到一个不愉快的未署名开发人员的电子邮件。'
- en: '**Author details** – Users of open source projects may benefit from contact
    details of the original developer. Annoyed uncredited developers need somewhere
    to send that unhappy email.![Configuration Class, Default Classes, and Routing](graphics/6_02.jpg)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作者详情** - 开源项目的用户可能会从原始开发人员的联系方式中受益。不愉快的未署名开发人员需要一个地方发送不愉快的电子邮件。![配置类、默认类和路由](graphics/6_02.jpg)'
- en: Here is an example of a Config class
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个Config类的示例
- en: Loading a View File
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载视图文件
- en: We'll look at an example to demonstrate the ability to load up view files once
    this section is complete. However, no views have been created at this stage, so
    a custom 404 page is used in its place.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本节后，我们将查看一个示例，以演示加载视图文件的能力。但是，在此阶段尚未创建任何视图，因此使用自定义的404页面代替。
- en: The example in this section loads up the framework in a browser. Initially,
    you will see a 404 message in the browser as the view cannot be found. This is
    because the default controller does not exist.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的示例在浏览器中加载了框架。最初，您将在浏览器中看到一个404消息，因为找不到视图。这是因为默认控制器不存在。
- en: A sample `404 php` file exists inside the `views` folder with the message "the
    file cannot be found". Save the file and refresh the browser of the newly created
    404 page.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`views`文件夹中存在一个名为`404.php`的示例文件，其中包含消息“找不到文件”。保存文件并刷新新创建的404页面的浏览器。'
- en: Open php and give the file a `namespace` of App.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开php并为文件设置一个`namespace`为App。
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The class belongs to the App namespace as it is stored inside the **app** folder.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 该类属于App命名空间，因为它存储在**app**文件夹中。
- en: Next, define a class called `Config` and create a method called `get`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义一个名为`Config`的类，并创建一个名为`get`的方法。
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `get` method needs to return an array. The keys of the array will be the
    settings used for the routing and database credentials:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`get`方法需要返回一个数组。数组的键将是用于路由和数据库凭据的设置：'
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE14]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding namespace definition holds the path of `App\Controllers`. Note
    the double backslash—this is because backslashes are often escaped, so using a
    double stops it from being escaped.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命名空间定义保存了`App\Controllers`的路径。请注意双反斜杠 - 这是因为反斜杠经常被转义，因此使用双反斜杠可以阻止其被转义。
- en: The namespace definition, default controller, and default method will become
    clear when we write the router.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写路由时，命名空间定义、默认控制器和默认方法将变得清晰。
- en: Finally, set up the database properties.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，设置数据库属性。
- en: Set up the database properties for the type of database to be used and its location,
    followed by the database name and the username and password to access the database.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置要使用的数据库类型及其位置的数据库属性，然后是数据库名称以及访问数据库的用户名和密码。
- en: You will need to access a MySQL database in order to create a database. To set
    up a native database, MariaDB is recommended. To download MariaDB, follow the
    instructions at [https://mariadb.com/downloads/mariadb-tx](https://mariadb.com/downloads/mariadb-tx).
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要访问MySQL数据库以创建数据库。为了设置本地数据库，建议使用MariaDB。要下载MariaDB，请按照[https://mariadb.com/downloads/mariadb-tx](https://mariadb.com/downloads/mariadb-tx)上的说明进行操作。
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this example, we have a database called mini, and my username is root. We
    do not have a password, so we leave it blank.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一个名为mini的数据库，我的用户名是root。我们没有密码，所以我们将其留空。
- en: Save the `Config.php` file.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`Config.php`文件。
- en: Before the `routing` class can be set up, we need to create a `View` class.
    This class will be responsible for loading the `view` files and also showing a
    404 page when a URL cannot be found.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routing`类设置之前，我们需要创建一个`View`类。这个类将负责加载`view`文件，当找不到URL时还会显示404页面。
- en: In system, create a new file called `View.php.`
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在system中，创建一个名为`View.php`的新文件。
- en: Open php and set the namespace to `System.` Next, define a class called `View`
    and create a method called `render` that accepts two parameters, `$path` and `$data.`
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开php并将命名空间设置为`System.`接下来，定义一个名为`View`的类，并创建一个名为`render`的方法，该方法接受两个参数，`$path`和`$data`。
- en: Note
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`$path` will hold the path of the requested file.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`$path`将保存请求文件的路径。'
- en: '`$data` will hold the content to be passed to the `view` file.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`$data`将保存要传递给`view`文件的内容。'
- en: '`$data` is optional; note it has a default value of `false`. This means if
    there is only one parameter passed to the `render` method, then the data will
    not be used.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`$data`是可选的；请注意它的默认值是`false`。这意味着如果只传递一个参数给`render`方法，那么数据将不会被使用。'
- en: Inside the method ID, a Boolean checks for `$data.` If it's `false,` it is ignored;
    otherwise, the data is looped through using a `foreach` loop. On each loop, the
    data is extracted to a local variable.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法ID内，一个布尔值检查`$data`。如果它是`false`，则忽略；否则，使用`foreach`循环遍历数据。在每次循环中，数据都会提取到一个本地变量中。
- en: After the loop, set the relative path to where the view files will be stored,
    in this case `app/views/` followed by the requested view.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环结束后，设置视图文件将存储的相对路径，本例中为`app/views/`，后跟请求的视图。
- en: 'Finally, a check is made to ensure the `view` file exists and requires it,
    otherwise an error is generated:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，进行检查以确保`view`文件存在并且需要它，否则会生成错误：
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE15]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Save the file and create a new file called `Route.php` inside the `system` folder.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并在`system`文件夹内创建一个名为`Route.php`的新文件。
- en: Open php and set the namespace to `System.`
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开php并将命名空间设置为`System.`。
- en: 'The `View` class we''ve just created needs to be available to this class. To
    import it, add:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们刚刚创建的`View`类需要对这个类可用。要导入它，请添加：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This loads the `View` file. The reason PHP knows where to find the file is because
    of the namespace, which is Composer in action. Being able to import classes this
    way is really helpful.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这加载了`View`文件。PHP之所以知道在哪里找到文件，是因为命名空间，这是Composer在起作用。以这种方式导入类非常有帮助。
- en: Now, create a class called `Route` and a method called `__construct,` which
    expects a parameter called `$config:`
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`Route`的类和一个名为`__construct`的方法，该方法期望一个名为`$config`的参数：
- en: '[PRE17]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, set up the following variables:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，设置以下变量：
- en: '[PRE18]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `$url` will hold an array from the requested route in the form of /page/requested.
    This is how it works: When explode is run, it finds a forward slash in the requested
    URI, which the $_SERVER makes available.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`$url`将保存请求路由的数组形式，如/page/requested。工作原理是：当运行explode时，它会在请求的URI中找到一个斜杠，$_SERVER使其可用。'
- en: Next, the `$controller` method uses a ternary operator to check if the 0 index
    of $url exists, otherwise the default_controller defined in the Config class is
    used.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`$controller`方法使用三元运算符来检查$url的第0个索引是否存在，否则使用Config类中定义的default_controller。
- en: The $method checks for the existence of a $url[1], otherwise it reads from the
    config class.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`$method`检查是否存在`$url[1]`，否则从config类中读取。'
- en: $args will get all other indexes of $url after the first 2.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: $args将获取$url的第一个2个索引之后的所有其他索引。
- en: '`$class` holds the path to the controllers as set in the `Config` class.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`$class`保存在`Config`类中设置的控制器的路径。'
- en: 'What these parameters do is get the Controller, Method, and parameters from
    the requested URL. For instance:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数的作用是从请求的URL中获取控制器、方法和参数。例如：
- en: '`http://localhost:8000/contacts/view/2`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/contacts/view/2`'
- en: 'This results in:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致：
- en: Contacts = Contacts class.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人 = 联系人类。
- en: View = View method inside the contacts class.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 视图 = 联系类内的视图方法。
- en: 2 = A parameter passed to the method.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 2 = 传递给方法的参数。
- en: If the requested URL is http:://localhost:8000/, then no controller or method
    is requested, so the default controller and method will be used, as set in `system\Config.php.`
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求的URL是http:://localhost:8000/，则不需要请求控制器或方法，因此将使用默认控制器和方法，如在`system\Config.php`中设置的那样。
- en: 'After these variables have been set up, a check is made, that is, if the class
    does not exist, call a method of `not_found` that exists within the `Route` class
    (not yet set up):'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置这些变量后，进行检查，即如果类不存在，则调用`Route`类中存在的`not_found`方法（尚未设置）：
- en: '[PRE19]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, the method is checked to ensure it exists:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查方法以确保它存在：
- en: '[PRE20]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, set up an instance of the class:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，设置一个类的实例：
- en: '[PRE21]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the class by calling `call_user_func_array` and pass in an array of the
    class instance and method, and pass any arguments as a second parameter:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`call_user_func_array`并将类实例和方法的数组以及任何参数作为第二个参数传递来运行该类：
- en: '[PRE22]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If a `route` is called that does not exist, a `not_found` method is needed.
    This calls the `render` method and passes `404` as the parameter. This will attempt
    to load `app/view/404.php`, should it exist:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果调用了一个不存在的`route`，则需要一个`not_found`方法。这将调用`render`方法并将`404`作为参数传递。这将尝试加载`app/view/404.php`，如果存在的话：
- en: '[PRE23]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The full class looks like this:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的类如下所示：
- en: Note
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Manipulating the Output
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操纵输出
- en: 'This section shows you how to manipulate the output of the previous example.
    Here are the steps to do it:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 本节向您展示了如何操纵上一个示例的输出。以下是操作步骤：
- en: 'Load up the framework `http://localhost:8000` and you will see the following
    output:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载框架`http://localhost:8000`，你会看到以下输出：
- en: '[PRE25]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is because the default controller does not yet exist and neither does app/views/404.php.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为默认控制器还不存在，app/views/404.php也不存在。
- en: Create a `views` folder inside the `app` folder and create a file called `404.php`.
    Enter a message such as '`The file cannot be found.`' and save the file.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹中创建一个`views`文件夹，并创建一个名为`404.php`的文件。输入消息，比如`'文件找不到。'`，然后保存文件。
- en: Reload the framework in your browser and you will now see your message.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载框架在你的浏览器中，你现在会看到你的消息。
- en: In this section, we covered the `configuration` class wherein we saw how the
    configuration class sits on top of the `root` folder. We also saw how to set up
    routing, where we performed the loading of a `view` page.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们涵盖了`configuration`类，我们看到了配置类如何位于`root`文件夹的顶部。我们还看到了如何设置路由，其中我们执行了`view`页面的加载。
- en: In the next section, we will cover the base controller, which defines the main
    functionality of the MVC framework.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍基础控制器，它定义了MVC框架的主要功能。
- en: Base Controller, Default States, and Routing
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础控制器、默认状态和路由
- en: The base controller class—because of the nature of an MVC framework—requires
    a default state.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 基础控制器类——因为MVC框架的性质——需要一个默认状态。
- en: A default view is loaded by a default method within a default controller class.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 默认视图是由默认控制器类中的默认方法加载的。
- en: From this default controller class, all other controllers across the system
    are loaded.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个默认控制器类中，加载系统中的所有其他控制器。
- en: This creation of the default `Controller` class and default method will be the
    focus of what we are building during in this section.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`Controller`类和默认方法的创建将是我们在本节中构建的重点。
- en: Note
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is not essential that the model be included as the controller, and the view
    can work independently without a data source.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 模型不一定要包含在控制器中，视图也可以独立于数据源工作。
- en: Setting up Base Controller, Default States, and Routing
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置基础控制器、默认状态和路由
- en: 'In this section, we''ll look at setting up base controller, default states,
    and routing. The following are the steps:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何设置基础控制器、默认状态和路由。以下是步骤：
- en: '**Views:**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**视图:**'
- en: Now, let's set up the default view. Create a file called `default.php` inside
    `app\views` and write the content of ``Hello from default view`.` or any other
    message.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们设置默认视图。在`app\views`中创建一个名为`default.php`的文件，并写入内容``Hello from default view``或其他消息。
- en: This will be displayed when on the framework's home page.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在框架的主页上显示。
- en: '**Controllers:**'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制器:**'
- en: Before we can start building our application controllers, we need a base controller
    that all other controllers can extend from. The reason for this is so the controllers
    can make use of any properties or methods defined in the base controller.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建应用程序控制器之前，我们需要一个所有其他控制器都可以继承的基础控制器。这样做的原因是控制器可以使用基础控制器中定义的任何属性或方法。
- en: Create a new file called `BaseController.php` and save it in the `system` folder.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`BaseController.php`的新文件，并将其保存在`system`文件夹中。
- en: Open php and set the namespace to `System`. Define a class called `BaseController`.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开php并将命名空间设置为`System`。定义一个名为`BaseController`的类。
- en: Define two class properties called `$view` and `$url`. Both of these properties
    will have an access modifier of public, meaning anywhere the `BaseController`
    is used, the properties will be available.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义两个名为`$view`和`$url`的类属性。这两个属性都将具有公共的访问修饰符，这意味着在使用`BaseController`的任何地方，这些属性都将可用。
- en: Next, create a `construct` method, then set up a new instance of the `View`
    class. This is so `$this->view` can be used to call the `render` method of the
    `view` within `extended` controllers.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个`construct`方法，然后设置一个`View`类的新实例。这样`$this->view`就可以用来调用`extended`控制器中的`view`的`render`方法。
- en: Next, assign a method of `getUrl()` to the property `$this->url`. This will
    call another method to get the current URL.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`getUrl()`方法分配给`$this->url`属性。这将调用另一个方法来获取当前的URL。
- en: Now, a check is run on the environment mode. If it's set to development, then
    a new instance of the Whoops error handler is created. This Whoops class is brought
    in by Composer, as defined by the composer.json file.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对环境模式进行检查。如果设置为开发模式，那么将创建一个新的Whoops错误处理程序的实例。这个Whoops类是由Composer引入的，如composer.json文件中所定义的。
- en: The `Whoops` class will give a rich error stack trace when errors occur with
    the code when run in a browser.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当在浏览器中运行代码时，`Whoops`类将提供丰富的错误堆栈跟踪。
- en: 'Finally, a `getUrl`() method is defined that will return the requested URL:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，定义一个`getUrl`()方法，它将返回请求的URL：
- en: Note
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE26]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Home Controller:**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**Home控制器:**'
- en: 'In `app/Config.php,` we set the `default_controller` to be home:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`app/Config.php`中，我们将`default_controller`设置为`home`:'
- en: '[PRE27]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Let's create this now. Create a `Controllers` folder inside the `app` folder
    and create a file called `Home.php.`
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建它。在`app`文件夹中创建一个`Controllers`文件夹，并创建一个名为`Home.php`的文件。
- en: Note
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All classes should start with a capital letter and each subsequent word should
    be capitalized.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 所有类都应该以大写字母开头，每个后续的单词都应该大写。
- en: Open php and set the namespace to `App\Controllers`. This namespace references
    the folder structure.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开php并将命名空间设置为`App\Controllers`。这个命名空间引用了文件夹结构。
- en: Next, import the `BaseController` by calling its namespace and call name.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过调用其命名空间和名称来导入`BaseController`。
- en: Define a class called `Home` and extend the `BaseController`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`Home`的类，并扩展`BaseController`。
- en: This will allow the `Home` controller to have access to `$this->view` and loading
    the views.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许`Home`控制器访问`$this->view`并加载视图。
- en: Create a method called `index` and then return `$this->view->render` and pass
    the filename to be loaded.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index`的方法，然后返回`$this->view->render`并传递要加载的文件名。
- en: 'In this case, pass in default, and `app\views\default.php` will be loaded:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，传递默认值，将加载`app\views\default.php`：
- en: '[PRE28]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Activity: Exploring the Results'
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动：探索结果
- en: 'We will now be able to see the output of the task, as seen in the demo file.
    Follow these steps to do so:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将能够看到任务的输出，就像在演示文件中看到的那样。按照以下步骤来做：
- en: Open your framework in the browser `http://localhost:8000` and you will see
    your default view file being loaded.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开你的框架`http://localhost:8000`，你将看到你的默认视图文件被加载。
- en: 'Remember that Whoops class? Well, let''s see that in action. Open your `default.php`
    view file and add this code at the end of the file. Open php and write something,
    but not in a string. The code should look as follows:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记得那个Whoops类吗？好吧，让我们看看它的作用。打开你的`default.php`视图文件，在文件末尾添加这段代码。打开php并写点东西，但不是在一个字符串中。代码应该如下所示：
- en: '[PRE29]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, save and reload the page in the browser and you will see:![Activity: Exploring
    the Results](graphics/6_03.jpg)'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在浏览器中保存并重新加载页面，你会看到：![活动：探索结果](graphics/6_03.jpg)
- en: 'This page tells you what the error is, but also shows a code snippet of where
    the problem is and a complete stack trace so that you can trace the journey from
    execution to failure:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面告诉你错误是什么，但也显示了问题所在的代码片段和完整的堆栈跟踪，这样你就可以追踪从执行到失败的过程：
- en: Now, remove your modifications from `default.php` so it only contains your original
    content, save, and reload the page again. You will see your page loading normally
    again.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从`default.php`中删除你的修改，使它只包含你的原始内容，保存并重新加载页面。你将再次看到你的页面正常加载。
- en: Now, let's look at how to access a new method. In your Home controller, create
    a new method called `packt` that loads a view called `packt`.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何访问一个新的方法。在你的Home控制器中，创建一个名为`packt`的新方法，加载一个名为`packt`的视图。
- en: Create a new view file in app\views called `packt.php` and enter the text '`Hello
    from Pack!'`
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在app\views中创建一个名为`packt.php`的新视图文件，并输入文本'`Hello from Pack!'`
- en: Load up the page by going to `home/packt http://localhost:8000/home/packt`.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`home/packt http://localhost:8000/home/packt`来加载页面。
- en: You will now see the contents of your `packt` view file.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将看到你的`packt`视图文件的内容。
- en: In this section, we have gained a better understanding of the role default states
    play in our project. This project requires these base methods to initially run
    and to extend from.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们对默认状态在我们的项目中扮演的角色有了更好的理解。这个项目需要这些基本方法来最初运行和扩展。
- en: We have gained experience by building default states including `baseController`
    and `baseMethod`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过构建默认状态，包括`baseController`和`baseMethod`，获得了经验。
- en: In the next section, we will learn about PDO, a lightweight interface for gaining
    access to databases in PHP.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习PDO，这是一个轻量级的接口，用于在PHP中访问数据库。
- en: Working with PDO
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PDO
- en: In this section, we will be creating the PDO wrapper and using a database as
    a data source from our model.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建PDO包装器，并使用数据库作为我们模型的数据源。
- en: From this section, we will gain the ability to use a database within our framework
    project.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一部分开始，我们将能够在我们的框架项目中使用数据库。
- en: Six methods will be covered here.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这里将涵盖六种方法。
- en: 'We have a `get` method — this is for creating a connection to the database
    and making sure it is a singleton instance, meaning it can only ever have one
    instance:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个`get`方法——这是用于创建与数据库的连接，并确保它是一个单例实例，这意味着它只能有一个实例：
- en: We have a `raw` method for running raw, unsecured queries
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个`raw`方法来运行原始的、不安全的查询
- en: A `select` method for running secure queries to select records from the database
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`select`方法，用于运行安全查询，从数据库中选择记录
- en: An `insert` method to create new records
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`insert`方法来创建新的记录
- en: An `update` method to update records
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`update`方法来更新记录
- en: A `delete` method to delete records
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`delete`方法来删除记录
- en: A `truncate` method to empty a table
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`truncate`方法来清空一个表
- en: What this does is allow your CRUD to work. Without this class, CRUD functionality
    would not be possible.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的目的是让你的CRUD工作。没有这个类，CRUD功能将不可能实现。
- en: The base model is where we are creating the database connection using the database helper.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 基本模型是我们使用数据库助手创建数据库连接的地方。
- en: 'This will allow other model classes to extend from this model and use a database
    connection. This only consists of one single method:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许其他模型类从这个模型扩展并使用数据库连接。这只包括一个单一的方法：
- en: '**Construct:**'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**构造：**'
- en: This is responsible for passing the config to the database helper to create
    the database connection.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法负责将配置传递给数据库助手，以创建数据库连接。
- en: Now, we are ready to start using the database.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备开始使用数据库。
- en: Note
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Database access: If you find that you do not have access to a database client
    or PHP admin web interface, then a fallback option is included that all students
    may use to create a database and insert data.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库访问：如果你发现你没有访问数据库客户端或PHP管理网页界面的权限，那么一个备用选项被包括在内，所有学生都可以使用它来创建数据库和插入数据。
- en: The upcoming section is all about creating the first model inside the apps folder.
    We will create the model `contact.php` and talk about best practices and naming
    conventions, as well as extending from the base model created earlier, alongside
    setting up a method to display records from a database.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分是关于在apps文件夹中创建第一个模型的。我们将创建模型`contact.php`，并讨论最佳实践和命名约定，以及从之前创建的基本模型中扩展，以及设置一个从数据库中显示记录的方法。
- en: Next, we will create a `contact` controller that extends from the base controller.
    That imports the contact model before calling that on an index method and passing
    the records from the model to the view. In that view, we will look through the
    records and display them one per line.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个`contact`控制器，它继承自基本控制器。在调用索引方法之前导入联系人模型，并将记录从模型传递到视图。在那个视图中，我们将浏览记录并逐行显示它们。
- en: We then open up the browser and go to the contacts controller to see the contacts
    being displayed on the page.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们打开浏览器，转到联系人控制器，看到联系人显示在页面上。
- en: To load a different controller, it's the same process as described in the previous
    subtopic. Create a controller, set its namespace, and define the classes to exist
    in the base controller, and either have an index method that loads when calling
    the controller name or use a different name and access it by calling your controllername/methodname.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载不同的控制器，过程与前一个子主题中描述的相同。创建一个控制器，设置其命名空间，并定义存在于基本控制器中的类，要么有一个在调用控制器名称时加载的索引方法，要么使用不同的名称并通过调用您的控制器名称/方法名称来访问它。
- en: We're nearly at the end of the framework setup. Right now, we can create controllers
    and methods to load pages and pass data to views. For a static site, this is great—it
    will keep your code organized and running quickly—but one vital component missing
    is the ability to use a database.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎已经完成了框架的设置。现在，我们可以创建控制器和方法来加载页面并将数据传递给视图。对于静态站点来说，这很棒 - 它将保持您的代码有组织并且运行速度快
    - 但缺少的一个重要组件是使用数据库的能力。
- en: On that note, we're going to create a database helper. This is a fancy name
    for a class that's stored in a common folder named `helpers`. Helpers are classes
    that don't fit in with Controllers or Models, but are standalone classes to extend
    functionality.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将创建一个数据库助手。这是一个存储在名为`helpers`的公共文件夹中的类的花哨名称。助手是不适合控制器或模型的类，而是独立的类来扩展功能。
- en: 'The database helper will have six methods:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库助手将有六种方法：
- en: '`get()` – Set up the database connection'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()` - 设置数据库连接'
- en: '`raw()` – Run a raw, unsecure query'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw()` - 运行原始的、不安全的查询'
- en: '`select()` – Run a query to select records from a database'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select()` - 运行查询以从数据库中选择记录'
- en: '`insert()` – Create new records'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert()` - 创建新记录'
- en: '`update()` – Update existing records'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update()` - 更新现有记录'
- en: '`delete()` – Delete existing records'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete()` - 删除现有记录'
- en: '`truncate()` – Empty a table'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`truncate()` - 清空表'
- en: Creating a Contact Controller and Viewing the Records
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建联系人控制器并查看记录
- en: 'In this section, we will start creating our contact controller. Follow these
    steps to do so:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始创建我们的联系人控制器。按照以下步骤进行操作：
- en: First, create a folder called `Helpers` inside of the `app` folder and create
    a new file called `Database.php`.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`app`文件夹内创建一个名为`Helpers`的文件夹，并创建一个名为`Database.php`的新文件。
- en: Open php and set the namespace as `App\Helpers.`
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开php并将命名空间设置为`App\Helpers。`
- en: Next, we need to import PDO.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要导入PDO。
- en: Note
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PDO is a database abstraction layer; it's a wrapper that supports 12 different
    database engines including MySQL. It's what we will be using to talk to the database.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: PDO是一个数据库抽象层；它是一个支持12种不同数据库引擎的包装器，包括MySQL。这是我们将用来与数据库交互的工具。
- en: 'To import PDO, use a `use` statement:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要导入PDO，请使用`use`语句：
- en: '[PRE30]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Next, define a class called `Database` that extends `PDO`. Inside the class
    create a property called `$instances` and set it as an array datatype.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义一个名为`Database`的类，它扩展了`PDO`。在类内部创建一个名为`$instances`的属性，并将其设置为数组数据类型。
- en: 'The `$instances` property will be used to ensure there is only ever a single
    database connection in use:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$instances`属性将用于确保只有一个数据库连接在使用：'
- en: '[PRE31]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Next, create a method called `get()` that accepts a pram called `$config`. This
    will be the `Config` that is set up in `app\Config.php.`
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`get()`的方法，接受一个名为`$config`的参数。这将是在`app\Config.php`中设置的`Config`。
- en: Inside this method, set up the local variables to hold the database credentials.
    These values will be extracted from the `$config` array.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个方法中，设置本地变量以保存数据库凭据。这些值将从`$config`数组中提取。
- en: Then, create a variable called `$id`. This will hold all the database local
    variables to create an identifier. Next, a check is performed to check if the
    `$instance` property already has this `$id`.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`$id`的变量。这将保存所有数据库本地变量以创建标识符。接下来，执行一个检查，检查`$instance`属性是否已经有了这个`$id`。
- en: If `$instances` does have the `$id,` then it will return the `$instance,` otherwise
    a new PDO connection is attempted.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`$instances`确实有`$id`，那么它将返回`$instance`，否则将尝试新的PDO连接。
- en: Note
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When connecting to PDO, the database credentials are passed and the charset
    is set to UTF-8.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到PDO时，传递数据库凭据并将字符集设置为UTF-8。
- en: On the next line, the error mode is set to exception. This means any exceptions
    will be caused and displayed.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行，错误模式设置为异常。这意味着任何异常都将被引发和显示。
- en: Now, set the `$instance` to the current connection and return `$instance:`
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`$instance`设置为当前连接并返回`$instance：`
- en: Note
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE32]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**RAW method**'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**RAW方法**'
- en: 'Create a method called `raw.` This is a very simple method. It accepts a single
    parameter which is an SQL statement. The `$sql` is passed to `$this->query`, which
    will then run the query directly:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`raw`的方法。这是一个非常简单的方法。它接受一个参数，即SQL语句。`$sql`传递给`$this->query`，然后直接运行查询：
- en: Note
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is useful for executing queries that you don't need to be secure. If no
    checking is done, the query will be executed as is and the result is returned.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于执行不需要安全的查询非常有用。如果没有进行检查，查询将按原样执行，并返回结果。
- en: '[PRE33]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**SELECT method:**'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**SELECT方法：**'
- en: 'Next, create a method called `select().` This will accept four parameters:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`select()`的方法。这将接受四个参数：
- en: '`$sql` – The SQL query'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$sql` - SQL查询'
- en: '`$array` – Any keys to be bound to the query (optional)'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$array` - 要绑定到查询的任何键（可选）'
- en: '`$fetchMode` – Sets the PDO fetch mode default to object (optional)'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$fetchMode` - 设置PDO提取模式，默认为对象（可选）'
- en: '`$class` – Used to specify a class to be used in conjunction with the fetch
    mode'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$class` - 用于指定与提取模式一起使用的类'
- en: Note
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Inside the method so you don't have to write `$this->db->select('SELECT * FROM
    table') w`e're going to add select to the SQL query providing it's not already
    there. This is done by changing the case to lowercase and then using `substr`
    to check the first seven letters of the `$sql.` It it's not equal to select, then
    add select to the start.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法内部，这样您就不必编写`$this->db->select('SELECT * FROM table') w`e将向SQL查询添加select，前提是它还没有。这是通过将大小写更改为小写，然后使用`substr`来检查`$sql`的前七个字母。如果不等于select，则在开头添加select。
- en: Next, prepare the query. This will set up the SQL query without running it.
    Next, the $array is looped over and any values are assigned to the particular
    datatype. If the value is an INT, then a datatype of PARAM_INT is used, otherwise
    the datatype will use string.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，准备查询。这将设置SQL查询而不运行它。接下来，循环遍历$array，并将任何值分配给特定的数据类型。如果值是INT，则使用PARAM_INT数据类型，否则数据类型将使用字符串。
- en: Finally, the execution is run. This passes the $sql to the server and the binded
    $array keys separately, meaning there is no way a SQL injection can ever happen,
    resulting in a secure query.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，执行运行。这将$SQL传递到服务器，并将绑定的$array键分开，这意味着永远不会发生SQL注入，从而产生安全的查询。
- en: 'After the query has been executed, the response is then retuned. By default,
    an object is returned:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 查询执行后，然后返回响应。默认情况下，返回一个对象：
- en: Note
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE34]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**INSERT method**'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '**插入方法**'
- en: 'To insert new records into the database, an insert query is required. Create
    a new method called insert with two parameters:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要向数据库插入新记录，需要插入查询。创建一个名为insert的新方法，带有两个参数：
- en: $table – The table name
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: $table - 表的名称
- en: $data – An array of keys and values to insert into the $table
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: $data - 要插入到$table中的键和值的数组
- en: Sort the $data array by using ksort($data).
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ksort($data)对$data数组进行排序。
- en: Next, extract all the array keys to a variable called `$fieldNames`. This is
    done using implode and setting a comma between each key and running `array_keys()`
    against the $data.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将所有数组键提取到名为`$fieldNames`的变量中。这是使用implode完成的，设置每个键之间的逗号，并对$data运行`array_keys()`。
- en: Now, do the same again, this time adding `,` `:` as the implode options, and
    save this to a variable called $fieldValues.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再做一次相同的操作，这次添加`,` `:`作为implode选项，并将其保存到名为$fieldValues的变量中。
- en: Then, using `$this->prepare`, a SQL command can be written that will set the
    `$fieldNames` into the value of `$fieldValues` for the `$table`. Loop over the
    `$data` and bind the values.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用`$this->prepare`，可以编写一个SQL命令，将`$fieldNames`设置为`$fieldValues`的值，用于`$table`。循环遍历`$data`并绑定值。
- en: 'Lastly, return the ID of the last inserted record. This is useful when you
    need the primary key as soon as the record is inserted:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，返回最后插入记录的ID。当您需要主键在记录插入后立即使用时，这将非常有用：
- en: '[PRE35]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**UPDATE method**'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新方法**'
- en: 'Next, create a method called update with three parameters:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为update的方法，带有三个参数：
- en: '`$table` – The table name'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$table` - 表的名称'
- en: '`$data` – An array of data to update'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$data` - 要更新的数据的数组'
- en: '`$where` – An array of the key and value to put a condition, for example, [''id''
    => 2], where id is equal to 2'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$where` - 一个键和值的数组，用于设置条件，例如，[''id'' => 2]，其中id等于2'
- en: Sort the `$data` and then extract the `$data`.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`$data`进行排序，然后提取`$data`。
- en: Inside the loop, append to a variable called `$fieldData`. Add `$key = :$key`.
    Next, remove any whitespace to the right by calling `trim()`.
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环内，附加到名为`$fieldData`的变量。添加`$key = :$key`。接下来，通过调用`trim()`删除任何右侧的空格。
- en: Next, loop through the `$where` array. On each loop, assign the `$key = :$key`.
    This creates a list of placeholders for the binding to catch later.
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，循环遍历`$where`数组。在每次循环中，分配`$key = :$key`。这将创建一个占位符列表，以便稍后捕获绑定。
- en: Again, trim any whitespace to the right, then use `$this->prepare` and write
    the update SQL pass in the table name followed by the `fieldDetails` and the `WhereDetails`.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，删除任何右侧的空格，然后使用`$this->prepare`并编写更新SQL，传递表名，后跟`fieldDetails`和`WhereDetails`。
- en: Next, bind the keys to the :`$key` placeholders and execute the query.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将键绑定到:`$key`占位符并执行查询。
- en: 'The last step is to return a `rowCount()`. This is the number of records that
    have been updated:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是返回`rowCount()`。这是已更新的记录数：
- en: Note
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to the `Lesson 6.php` file in the code files folder.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE36]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**DELETE method**'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '**删除方法**'
- en: 'Create a new method called delete with three parameters:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为delete的新方法，带有三个参数：
- en: '`$table` – The name of the table'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$table` - 表的名称'
- en: '`$where` – An array of key values to determine the where condition'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$where` - 用于确定where条件的键值数组'
- en: '`$limit` – The number of records to delete, Default value is 1, pass null to
    remove a number limit'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$limit` - 要删除的记录数，默认值为1，传递null以删除数字限制'
- en: Inside the method, sort the `$where` loop through the `$where` and set up the
    placeholders from the key and values of the array.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法内部，对`$where`进行排序循环，并从数组的键和值设置占位符。
- en: Prepare the query and write the SQL command passing, in the `$table`, `$where`,
    and `$limit`.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备查询并编写SQL命令，传递`$table`，`$where`和`$limit`。
- en: 'The last step is to return a rowCount(). This is the number of records that
    have been deleted:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是返回rowCount()。这是已删除的记录数：
- en: Note
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE37]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**TRUNCATE method**'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '**截断方法**'
- en: 'The last method to make is called truncate, which accepts one parameter, $table:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后要创建的方法称为truncate，它接受一个参数，$table：
- en: '`$table` – The table name'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$table` - 表的名称'
- en: 'Inside the method, call $this->exec and the SQL command TRUNCATE TABLE $table.
    This will empty the table, resulting in no records. All primary keys will be reset
    to 0, as if the table had never been used:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法内部，调用$this->exec和SQL命令TRUNCATE TABLE $table。这将清空表，导致没有记录。所有主键将被重置为0，就好像从未使用过表一样：
- en: '[PRE38]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The full class looks like this:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的类如下所示：
- en: Note
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE39]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Save this class. This is a complex class, and the rest of the code we will be
    writing is much simpler. In the next few pages, we will be using the database
    helpers, and the purpose and use of methods will become clear as they are used.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存这个类。这是一个复杂的类，我们将要编写的其余代码要简单得多。在接下来的几页中，我们将使用数据库助手，并且随着使用方法的目的和用途，它们将变得清晰。
- en: '**Base Model**'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本模型**'
- en: Our next task is to create a `basemodel` class that will connect to the database
    using the Database helper and return the instance. This will allow other model
    classes to extend from this class and use the database connection.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的下一个任务是创建一个`basemodel`类，它将使用数据库助手连接到数据库并返回实例。这将允许其他模型类从这个类扩展并使用数据库连接。
- en: Create a file called `BaseModel.php` inside the system folder.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在系统文件夹内创建一个名为`BaseModel.php`的文件。
- en: Open php and set the namespace to System.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开php并将命名空间设置为System。
- en: Import the Config class and the Database helper class by calling their namespaces
    in a use statement.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用它们的命名空间在use语句中导入Config类和Database助手类。
- en: Define the class and call BaseModel, then create a protected property called
    `$db`. This is what other models will use to interact with the database.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '定义类并调用BaseModel，然后创建一个受保护的属性叫做`$db`。这是其他模型将用来与数据库交互的。 '
- en: Create a `__construct()` method. This will run as soon as the class is instantiated.
    Inside this method, create a local variable called `$config` and assign it `Config::get()`.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`__construct()`方法。这将在类被实例化时立即运行。在这个方法内，创建一个名为`$config`的本地变量，并将其赋值为`Config::get()`。
- en: Next, create a new instance of the Database helper and call the get method and
    pass in $config.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个Database助手的新实例并调用`get`方法并传入`$config`。
- en: 'The class looks like this:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类看起来像这样：
- en: Note
  id: totrans-409
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 6.php` file in the code files folder.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 6.php`文件。
- en: '[PRE40]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, we are ready to start using the database. Before we continue with our code
    base, open your database you connected to earlier, either using phpmyadmin or
    a MySQL client, or using Terminal.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备开始使用数据库。在继续我们的代码库之前，打开你之前连接的数据库，可以使用phpmyadmin或MySQL客户端，也可以使用终端。
- en: 'Create a database—we will call it mini—and create a table called `contacts`
    with two columns: ID and name.'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个数据库——我们将其称为mini——并创建一个名为`contacts`的表，其中包含两列：ID和name。
- en: Note
  id: totrans-414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you don''t have a MySQL client, you can use Terminal by typing:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有MySQL客户端，你可以通过终端来使用：
- en: mysql –u root
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: mysql -u root
- en: 'Replace root with your database username. Root is the default. I have MariaDB
    installed by default. There is no password, but should you need to enter the password,
    pass in the password flag –p:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 用你的数据库用户名替换root。Root是默认值。我默认安装了MariaDB。没有密码，但如果你需要输入密码，传递密码标志-p：
- en: mysql –u root –p
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: mysql -u root -p
- en: Create a new database.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的数据库。
- en: Create database `mini`.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据库`mini`。
- en: 'Select that database:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择那个数据库：
- en: '[PRE41]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This now uses the database called mini.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用名为mini的数据库。
- en: 'The database is empty, so let''s create a table called contacts:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库是空的，所以让我们创建一个名为contacts的表：
- en: '[PRE42]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To see a list of your tables:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看你的表的列表：
- en: '[PRE43]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: With these few commands, the database has been created, as well as a table,
    which has been populated with two records.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这几个命令，数据库已经创建，表也已经被创建，并且已经填充了两条记录。
- en: 'Activity: Creating and Executing the Model'
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动：创建和执行模型
- en: We have created the contact Controller and viewed the result. We now need to
    implement the Model for our application.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了contact控制器并查看了结果。现在我们需要为我们的应用程序实现模型。
- en: The aim of this activity is to implement the Model for our application.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的目的是为我们的应用程序实现模型。
- en: 'Getting back to the framework, we are now ready to create our first Model.
    Follow these steps to do it:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 回到框架，我们现在准备创建我们的第一个模型。按照以下步骤进行：
- en: Inside the `app` folder, create a new folder called `Models`. This is where
    all the models will be stored. Now, create a new file called Contact.php.
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`文件夹中，创建一个名为`Models`的新文件夹。这是所有模型将被存储的地方。现在，创建一个名为Contact.php的新文件。
- en: Note
  id: totrans-435
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's a best practice to name your models as a singular record, so in this case,
    Contact represents a table of Contacts.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的模型命名为单数记录是最佳实践，所以在这种情况下，Contact代表一个联系人表。
- en: In `Contact.php,` open `php` and set the namespace to `App\Models`;.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Contact.php`中，打开`php`并将命名空间设置为`App\Models`。
- en: Import the `BaseModel` and create a class called Contact and extend the `BaseModel.`
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`BaseModel`并创建一个名为Contact的类，并扩展`BaseModel`。
- en: Create a method called `getContacts().` This method will be used to get all
    contacts stored in the database.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`getContacts()`的方法。这个方法将用于获取数据库中存储的所有联系人。
- en: Call `$this->db->select()` to call the `select` method of the database helper
    and write the `SQL * FROM contacts.`
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`$this->db->select()`来调用数据库助手的`select`方法，并编写`SQL * FROM contacts`。
- en: Note
  id: totrans-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's a best practice to write commands like `SELECT`, `FROM`, `WHERE`, `GROUP
    BY`, and `ORDER BY` in capitals, so make it clear in your code what the commands
    are.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是将命令如`SELECT`，`FROM`，`WHERE`，`GROUP BY`和`ORDER BY`写成大写，这样在你的代码中清楚地表明这些命令。
- en: 'The model looks like this:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型看起来像这样：
- en: '[PRE44]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, we need to run this model. The best place for this is inside a controller.
    Create a new controller called `Contacts` inside the `app\Controllers` folder.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要运行这个模型。这个最好的地方是在一个控制器内。在`app\Controllers`文件夹内创建一个名为`Contacts`的新控制器。
- en: This class extends from the `BaseController` and has a method called `index:`
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类扩展自`BaseController`，并有一个名为`index`的方法：
- en: '[PRE45]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let''s inform the `index` method to load a view called `contacts/index`:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 让`index`方法加载一个名为`contacts/index`的视图：
- en: '[PRE46]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create a folder called `contacts` in `app\views` and create a file called `index.php.`
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app\views`中创建一个名为`contacts`的文件夹，并创建一个名为`index.php`的文件。
- en: If you run this now and go to `localhost:8000/contacts`, you will get a blank
    page or see the contents of `contacts/index.php`, providing you've entered some
    content.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行这个并转到`localhost:8000/contacts`，你会得到一个空白页面或者看到`contacts/index.php`的内容，只要你输入了一些内容。
- en: 'Going back to the `contacts` `controller`, we need to import the `contact`
    model. We do this by using a `use` statement and setting the namespace to the
    model:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`contacts` `controller`，我们需要导入`contact`模型。我们通过使用`use`语句并设置命名空间到模型来做到这一点：
- en: '[PRE47]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Inside the `index` method, create a new instance of the `contact` model and
    call the `getContacts()` method. Assign it to a variable called `$records:`
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index`方法内，创建一个`contact`模型的新实例，并调用`getContacts()`方法。将其赋值给一个名为`$records`的变量：
- en: '[PRE48]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Next, pass the `$records` to the `view:`
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`$records`传递给`view:`
- en: '[PRE49]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Using `compact()` is a clean way to put a string name representing the variable.
    This will read `$records` and pass it to the view:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`compact()`是一个干净的方法来放置一个表示变量的字符串名称。这将读取`$records`并将其传递给视图：
- en: Inside app\views\contacts\index.php
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在app\views\contacts\index.php
- en: 'Open `php` and check that `$records` exists and then do a `foreach` loop and
    loop through each record. `echo` the `name` key from the `$row` object. Add a
    string containing a `<br>` tag—this will cause each loop to be on a new line:'
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`php`并检查`$records`是否存在，然后进行`foreach`循环并循环遍历每条记录。从`$row`对象中`echo`出`name`键。添加一个包含`<br>`标签的字符串-这将导致每次循环都在新行上：
- en: '[PRE50]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Save and run this in a browser and go to `http://localhost:8000/contacts`. You
    will see a list of the contacts in the `contacts` table stored in the database.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并在浏览器中运行，转到`http://localhost:8000/contacts`。您将看到数据库中存储的`contacts`表中的联系人列表。
- en: Summary
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have gained a better understanding of the role the database
    class plays in the project, which is used every time the developer interacts with
    the database. It is a wrapper for PDO queries. They do not need to call it directly
    as they are extending from it.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对数据库类在项目中的作用有了更好的理解，这在开发人员与数据库交互时被使用。它是PDO查询的包装器。他们不需要直接调用它，因为他们是从中扩展的。
- en: The only library we have used is called Whoops, which will show errors in a
    readable format.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的唯一库叫做Whoops，它将以可读的格式显示错误。
- en: We have also gained experience building default states, including `baseController`
    and `baseMethod`.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还获得了构建默认状态的经验，包括`baseController`和`baseMethod`。
- en: In the next chapter, we will build a login system and authentication for users
    to log in and out. This will expand upon what we have covered so far and introduce
    new concepts. We will also be building the password recovery system in the next
    chapter.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建一个登录系统和用户登录和退出的身份验证。这将扩展我们到目前为止所涵盖的内容，并引入新的概念。我们还将在下一章中构建密码恢复系统。
