- en: Chapter 4. Building Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。构建查询
- en: In the previous chapter, we added commenting and tagging support to our blog
    software. Although it works fine, some of the features can be enhanced.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们为我们的博客软件添加了评论和标记支持。虽然它运行良好，但一些功能可以得到增强。
- en: 'In this chapter, we will leverage some very important parts of Doctrine: **Doctrine
    Query Language** (**DQL**), entity repositories, and the Query Builder. We will
    cover the following aspects in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将利用Doctrine的一些非常重要的部分：**Doctrine查询语言**（**DQL**）、实体存储库和查询构建器。我们将在本章中涵盖以下方面：
- en: Optimizing the Comment feature
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化评论功能
- en: Creating a page to filter the posts with the help of tags
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个页面来通过标签过滤帖子
- en: Displaying the number of comments of a post on the home page
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在主页上显示帖子的评论数量
- en: Understanding DQL
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解DQL
- en: DQL is the acronym of Doctrine Query Language. It's a domain-specific language
    that is very similar to SQL, but is not SQL. Instead of querying the database
    tables and rows, DQL is designed to query the object model's entities and mapped
    properties.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: DQL是Doctrine查询语言的缩写。它是一种特定领域的语言，非常类似于SQL，但不是SQL。DQL不是用于查询数据库表和行，而是设计用于查询对象模型的实体和映射属性。
- en: 'DQL is inspired by and similar to HQL, the query language of Hibernate, a popular
    ORM for Java. For more details you can visit this website: [http://www.hibernate.org/](http://www.hibernate.org/).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: DQL受Hibernate的查询语言HQL的启发和类似，Hibernate是Java的流行ORM的查询语言。有关更多详细信息，您可以访问此网站：[http://www.hibernate.org/](http://www.hibernate.org/)。
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: 'Learn more about domain-specific languages at:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下网站了解更多关于特定领域语言的信息：
- en: '[http://en.wikipedia.org/wiki/Domain-specific_language](http://en.wikipedia.org/wiki/Domain-specific_language)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Domain-specific_language](http://en.wikipedia.org/wiki/Domain-specific_language)'
- en: To better understand what it means, let's run our first DQL query.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解其含义，让我们运行我们的第一个DQL查询。
- en: 'Doctrine command-line tools are as genuine as a Swiss Army knife. They include
    a command called `orm:run-dql` that runs the DQL query and displays it''s result.
    Use it to retrieve `title` and all the comments of the post with `1` as an identifier:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine命令行工具就像瑞士军刀一样实用。它们包括一个名为`orm:run-dql`的命令，用于运行DQL查询并显示结果。使用它来检索带有`1`作为标识符的帖子的`title`和所有评论：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It looks like a SQL query, but it''s definitely not a SQL query. Examine the
    `FROM` and the `JOIN` clauses; they contain the following aspects:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像一个SQL查询，但绝对不是SQL查询。检查“FROM”和“JOIN”子句；它们包含以下方面：
- en: A fully qualified entity class name is used in the `FROM` clause as the root
    of the query
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“FROM”子句中使用完全限定的实体类名作为查询的根
- en: All the `Comment` entities associated with the selected `Post` entities are
    joined, thanks to the presence of the `comments` property of the `Post` entity
    class in the `JOIN` clause
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有与所选“帖子”实体相关联的“评论”实体都被连接在一起，这要归功于“帖子”实体类中的“评论”属性在“JOIN”子句中的存在
- en: As you can see, data from the entities associated with the main entity can be
    requested in an object-oriented way. Properties holding the associations (on the
    owning or the inverse side) can be used in the `JOIN` clause.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，可以以面向对象的方式请求与主实体相关联的实体的数据。持有关联的属性（在拥有方或反向方）可以在“JOIN”子句中使用。
- en: Despite some limitations (especially in the field of subqueries), which we will
    see how to get around in [Chapter 5](ch05.html "Chapter 5. Going Further"), *Going
    Further*, DQL is a powerful and flexible language to retrieve object graphs. Internally,
    Doctrine parses the DQL queries, generates and executes them through **Database
    Abstraction Layer (DBAL)** corresponding to the SQL queries, and hydrates the
    data structures with results.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在一些限制（特别是在子查询领域），我们将看到如何绕过[第5章](ch05.html "第5章。进一步")中的限制，*进一步*，DQL是一种强大而灵活的语言，用于检索对象图。在内部，Doctrine解析DQL查询，通过**数据库抽象层（DBAL）**生成和执行它们对应的SQL查询，并使用结果填充数据结构。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: Until now, we only used Doctrine to retrieve the PHP objects. Doctrine is able
    to hydrate other types of data structures, especially arrays and basic types.
    It's also possible to write custom hydrators to populate any data structure.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只使用Doctrine来检索PHP对象。Doctrine能够填充其他类型的数据结构，特别是数组和基本类型。还可以编写自定义水合器来填充任何数据结构。
- en: If you look closely at the return of the previous call of `orm:run-dql`, you'll
    see that it's an array, and not an object graph, that has been hydrated.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察上一次调用`orm:run-dql`的返回，您会发现它是一个数组，而不是一个对象图，已经被填充。
- en: 'As with all the topics covered in this book, more information about built-in
    hydration modes and custom hydrators is available in the Doctrine documentation
    on the following website:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中涵盖的所有主题一样，有关内置水合模式和自定义水合器的更多信息可在以下网站的Doctrine文档中找到：
- en: '[http://docs.doctrine-project.org/en/latest/reference/dql-doctrine-query-language.html#hydration-modes](http://docs.doctrine-project.org/en/latest/reference/dql-doctrine-query-language.html#hydration-modes)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.doctrine-project.org/en/latest/reference/dql-doctrine-query-language.html#hydration-modes](http://docs.doctrine-project.org/en/latest/reference/dql-doctrine-query-language.html#hydration-modes)'
- en: Using the entity repositories
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用实体存储库
- en: Entity repositories are classes responsible for accessing and managing entities.
    Just like entities are related to the database rows, entity repositories are related
    to the database tables.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实体存储库是负责访问和管理实体的类。就像实体与数据库行相关联一样，实体存储库与数据库表相关联。
- en: We have already used default entity repositories provided by Doctrine to retrieve
    the entities in the previous chapters. All the DQL queries should be written in
    the entity repository related to the entity type they retrieve. It hides the ORM
    from other components of the application and makes it easier to re-use, refactor,
    and optimize the queries.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前几章中使用了Doctrine提供的默认实体存储库来检索实体。所有的DQL查询都应该写在与它们检索的实体类型相关的实体存储库中。它将ORM隐藏在应用程序的其他组件中，并使其更容易重用、重构和优化查询。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: 'Doctrine entity repositories are an implementation of the Table Data Gateway
    design pattern. For more details, visit the following website:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine实体存储库是表数据网关设计模式的一种实现。有关更多详细信息，请访问以下网站：
- en: '[http://martinfowler.com/eaaCatalog/tableDataGateway.html](http://martinfowler.com/eaaCatalog/tableDataGateway.html)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://martinfowler.com/eaaCatalog/tableDataGateway.html](http://martinfowler.com/eaaCatalog/tableDataGateway.html)'
- en: 'A base repository, available for every entity, provides useful methods for
    managing the entities in the following manner:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个实体提供的基本存储库提供了管理实体的有用方法，如下所示：
- en: '`find($id)`: It returns the entity with `$id` as an identifier or `null`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find($id)`: 返回具有`$id`作为标识符的实体，或`null`'
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is used internally by the `find()` method of the Entity Managers. We used
    this shortcut many times in the previous chapters.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它在实体管理器的`find()`方法内部使用。我们在前面的章节中多次使用了这个快捷方式。
- en: '`findAll()`: It retrieves an array that contains all the entities in this repository'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findAll()`: 检索包含此存储库中所有实体的数组'
- en: '`findBy([''property1'' => ''value'', ''property2'' => 1], [''property3'' =>
    ''DESC'', ''property4'' => ''ASC''])`: It retrieves an array that contains entities
    matching all the criteria passed in the first parameter and ordered by the second
    parameter'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findBy([''property1'' => ''value'', ''property2'' => 1], [''property3'' =>
    ''DESC'', ''property4'' => ''ASC''])`: 检索包含第一个参数中传递的所有条件匹配的实体的数组，并按照第二个参数排序'
- en: '`findOneBy([''property1'' => ''value'', ''property2'' => 1])`: It is similar
    to `findBy()` but retrieves only the first entity or `null` if none of the entities
    match the criteria'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findOneBy([''property1'' => ''value'', ''property2'' => 1])`: 类似于`findBy()`，但只检索第一个实体，如果没有实体与条件匹配，则返回`null`'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Entity repositories also provide shortcut methods that allow a single property
    to filter entities. They follow this pattern: `findBy*()` and `findOneBy*()`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实体存储库还提供了快捷方法，允许单个属性过滤实体。它们遵循这种模式：`findBy*()`和`findOneBy*()`。
- en: For instance, calling `findByTitle('My title')` is equivalent to calling `findBy(['title'
    => 'My title'])`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，调用`findByTitle('My title')`等同于调用`findBy(['title' => 'My title'])`。
- en: 'This feature uses the magical `__call()` PHP method. For more details visit
    the following website:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能使用了神奇的`__call()` PHP方法。有关更多详细信息，请访问以下网站：
- en: '[http://php.net/manual/en/language.oop5.overloading.php#object.call](http://php.net/manual/en/language.oop5.overloading.php#object.call)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://php.net/manual/en/language.oop5.overloading.php#object.call](http://php.net/manual/en/language.oop5.overloading.php#object.call)'
- en: As seen in [Chapter 3](ch03.html "Chapter 3. Associations"), *Associations*,
    these shortcut methods don't join the related entities unless we add a `fetch="EAGER"`
    attribute to the association annotation in the entity class. Another SQL query
    will be issued if (and only if) a related entity (or a collection of entities)
    is requested through a method call.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第3章](ch03.html "第3章。关联")，“关联”中所述，这些快捷方法不会连接相关实体，除非我们在实体类的关联注释中添加了`fetch="EAGER"`属性。如果（且仅当）通过方法调用请求了相关实体（或实体集合），则会发出另一个SQL查询。
- en: In our blog app, we want to display comments in the detailed post view, but
    it is not necessary to fetch them from the list of posts. Eager loading through
    the `fetch` attribute is not a good choice for the list, and Lazy loading slows
    down the detailed view.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的博客应用中，我们希望在详细的帖子视图中显示评论，但不需要从帖子列表中获取它们。通过`fetch`属性的急切加载不适合列表，而延迟加载会减慢详细视图的速度。
- en: A solution to this would be to create a custom repository with extra methods
    for executing our own queries. We will write a custom method that collates comments
    in the detailed view.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是创建一个具有额外方法来执行我们自己的查询的自定义存储库。我们将编写一个在详细视图中整理评论的自定义方法。
- en: Creating custom entity repositories
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义实体存储库
- en: Custom entity repositories are classes extending the base entity repository
    class provided by Doctrine. They are designed to receive custom methods that run
    the DQL queries.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义实体存储库是扩展了Doctrine提供的基本实体存储库类的类。它们旨在接收运行DQL查询的自定义方法。
- en: As usual, we will use the mapping information to tell Doctrine to use a custom
    repository class. This is the role of the `repositoryClass` attribute of the `@Entity`
    annotation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们将使用映射信息告诉Doctrine使用自定义存储库类。这是`@Entity`注释的`repositoryClass`属性的作用。
- en: 'Kindly perform the following steps to create a custom entity repository:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请执行以下步骤创建自定义实体存储库：
- en: 'Reopen the `Post.php` file at the `src/Blog/Entity/` location and add a `repositoryClass`
    attribute to the existing `@Entity` annotation like the following line of code:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开`Post.php`文件，位于`src/Blog/Entity/`位置，并在现有的`@Entity`注释中添加一个`repositoryClass`属性，就像下面的代码行一样：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Doctrine command-line tools also provide an entity repository generator. Type
    the following command to use it:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Doctrine命令行工具还提供了实体存储库生成器。输入以下命令来使用它：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open this new empty custom repository, which we just generated in the `PostRepository.phpPostRepository.php`
    file, at the `src/Blog/Entity/` location. Add the following method for retrieving
    the posts and comments:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开这个新的空自定义存储库，我们刚刚在`src/Blog/Entity/`位置生成的`PostRepository.php`文件。添加以下方法来检索帖子和评论：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Our custom repository extends the default entity repository provided by Doctrine.
    The standard methods, described earlier in the chapter, are still available.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的自定义存储库扩展了Doctrine提供的默认实体存储库。前面章节中描述的标准方法仍然可用。
- en: Getting started with Query Builder
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用查询构建器
- en: '`QueryBuilder` is an object designed to help build the DQL queries through
    a PHP API with a fluent interface (to find out more about fluent interfaces, see
    [Chapter 2](ch02.html "Chapter 2. Entities and Mapping Information"), *Entities
    and Mapping Information*). It allows us to retrieve the generated DQL queries
    through the `getDql()` method (useful for debugging) or directly use the `Query`
    object (provided by Doctrine).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`QueryBuilder`是一个旨在通过PHP API和流畅的接口帮助构建DQL查询的对象（要了解更多关于流畅接口的信息，请参见[第2章](ch02.html
    "第2章。实体和映射信息")，“实体和映射信息”）。它允许我们通过`getDql()`方法检索生成的DQL查询（用于调试）或直接使用`Query`对象（由Doctrine提供）。'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To increase performance, `QueryBuilder` caches the generated DQL queries and
    manages an internal state.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高性能，`QueryBuilder`缓存生成的DQL查询并管理内部状态。
- en: 'The full API and states of the DQL query are documented on the following website:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: DQL查询的完整API和状态在以下网站上有文档：
- en: '[http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/query-builder.html](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/query-builder.html)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/query-builder.html](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/query-builder.html)'
- en: We will give an in-depth explanation of the `findWithComments()` method that
    we created in the `PostRepository` class.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对我们在`PostRepository`类中创建的`findWithComments()`方法进行深入解释。
- en: Firstly, a `QueryBuilder` instance is created with the `createQueryBuilder()`
    method inherited from the base entity repository. The `QueryBuilder` instance
    takes a string as a parameter. This string will be used as an alias of the main
    entity class. By default, all the fields of the main entity class are selected
    and no other clauses except `SELECT` and `FROM` are populated.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用从基本实体存储库继承的`createQueryBuilder()`方法创建一个`QueryBuilder`实例。`QueryBuilder`实例以字符串作为参数。此字符串将用作主实体类的别名。默认情况下，选择主实体类的所有字段，并且除了`SELECT`和`FROM`之外没有其他子句。
- en: The `leftJoin()` call creates a `JOIN` clause that retrieves comments associated
    with the posts. Its first argument is the property to join and its second is the
    alias; these will be used in the query for the joined entity class (here, the
    letter `c` will be used as an alias for the `Comment` class).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`leftJoin()`调用创建一个`JOIN`子句，用于检索与帖子相关联的评论。它的第一个参数是要加入的属性，第二个是别名；这些将在查询中用于加入的实体类（这里，字母`c`将用作`Comment`类的别名）。'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unless the SQL `JOIN` clause is used, the DQL query automatically fetches the
    entities associated with the main entity. There is no need for keywords like `ON`
    or `USING`. Doctrine automatically knows whether a join table or a foreign-key
    column must be used.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 除非使用SQL `JOIN`子句，否则DQL查询将自动获取与主实体相关联的实体。不需要像`ON`或`USING`这样的关键字。Doctrine会自动知道是使用连接表还是外键列。
- en: The `addSelect()` call appends comment data to the `SELECT` clause. The alias
    of the entity class is used to retrieve all the fields (this is similar to the
    `*` operator in SQL). As in the first DQL query of this chapter, specific fields
    can be retrieved with the notation `alias.propertyName`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`addSelect()`调用将注释数据附加到`SELECT`子句。实体类的别名用于检索所有字段（这类似于SQL中的`*`运算符）。与本章的第一个DQL查询一样，可以使用表示法`alias.propertyName`检索特定字段。'
- en: You guessed it, the call to the `where()` method sets the `WHERE` part of the
    query.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你猜对了，对`where()`方法的调用设置了查询的`WHERE`部分。
- en: Under the hood, Doctrine uses prepared SQL statements. They are more efficient
    than the standard SQL queries.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，Doctrine使用准备好的SQL语句。它们比标准SQL查询更有效。
- en: The `id` parameter will be populated by the value set by the call to `setParameter()`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`参数将由`setParameter()`调用设置的值填充。'
- en: Thanks again to prepared statements and this `setParameter()` method, SQL Injection
    attacks are automatically avoided.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 再次感谢准备好的语句和这个`setParameter()`方法，自动避免了SQL注入攻击。
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'SQL Injection Attacks are a way to execute malicious SQL queries using user
    inputs that have not escaped. Let''s take the following example of a bad DQL query
    to check if a user has a specific role:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入攻击是使用未转义的用户输入执行恶意SQL查询的一种方法。让我们来看一个检查用户是否具有特定角色的糟糕DQL查询的例子：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This DQL query will be translated into SQL by Doctrine. If someone types the
    following username:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个DQL查询将由Doctrine翻译成SQL。如果有人输入以下用户名：
- en: '`" OR "a"="a`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`" OR "a"="a`'
- en: the SQL code contained in the string will be injected and the query will always
    return some results. The attacker has now gained access to a private area.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串中包含的SQL代码将被注入，查询将始终返回一些结果。攻击者现在已经获得了对私人区域的访问权限。
- en: 'The proper way should be to use the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的方法应该是使用以下代码：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Thanks to prepared statements, special characters (like quotes) contained in
    the username are not dangerous, and this snippet will work as expected.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 由于准备好的语句，用户名中包含的特殊字符（如引号）并不危险，这段代码将按预期工作。
- en: The `orderBy()` call generates an `ORDER BY` clause that orders results as per
    the publication date of the comments, older first.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`orderBy()`调用生成一个`ORDER BY`子句，按评论的发布日期对结果进行排序，先是较早的。'
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Most SQL instructions also have an object-oriented equivalent in DQL. The most
    common join types can be made using DQL; they generally have the same name.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数SQL指令在DQL中也有一个面向对象的等价物。最常见的连接类型可以使用DQL进行；它们通常具有相同的名称。
- en: The `getQuery()` call tells the Query Builder to generate the DQL query (if
    needed, it will get the query from its cache if possible), to instantiate a Doctrine
    `Query` object, and to populate it with the generated DQL query.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`getQuery()`调用告诉查询构建器生成DQL查询（如果需要，它将尽可能从缓存中获取查询），实例化Doctrine `Query`对象，并用生成的DQL查询填充它。'
- en: 'This generated DQL query will be as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生成的DQL查询将如下所示：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `Query` object exposes another useful method for the purpose of debugging:
    `getSql()`. As its name implies, `getSql()` returns the SQL query corresponding
    to the DQL query, which Doctrine will run on DBMS. For our DQL query, the underlying
    SQL query is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query`对象还公开了另一个用于调试的有用方法：`getSql()`。顾名思义，`getSql()`返回与DQL查询对应的SQL查询，Doctrine将在DBMS上运行。对于我们的DQL查询，底层SQL查询如下：'
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `getOneOrNullResult()` method executes it, retrieves the first result, and
    returns it as a `Post` entity instance (this method returns `null` if no result
    is found).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`getOneOrNullResult()`方法执行它，检索第一个结果，并将其作为`Post`实体实例返回（如果找不到结果，则此方法返回`null`）。'
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Like the `QueryBuilder` object, the `Query` object manages an internal state
    to generate the underlying SQL query only when necessary.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与`QueryBuilder`对象一样，`Query`对象管理内部状态，仅在必要时生成底层SQL查询。
- en: Performance is something to be very careful about while using Doctrine. When
    set in production mode (see [Chapter 1](ch01.html "Chapter 1. Getting Started
    with Doctrine 2"), *Getting Started with Doctrine 2*), ORM is able to cache the
    generated queries (DQL through the `QueryBuilder` objects, SQL through the `Query`
    objects) and results of the queries.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Doctrine时，性能是需要非常小心的。当设置为生产模式时（参见[第1章](ch01.html "第1章。使用Doctrine 2入门")，*使用Doctrine
    2入门*），ORM能够缓存生成的查询（DQL通过`QueryBuilder`对象，SQL通过`Query`对象）和查询的结果。
- en: 'ORM must be configured to use one of the blazing, fast, supported systems (APC,
    Memcache, XCache, or Redis) as shown on the following website:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ORM必须配置为使用以下网站显示的其中一个快速支持系统（APC，Memcache，XCache或Redis）：
- en: '[http://docs.doctrine-project.org/en/latest/reference/caching.html](http://docs.doctrine-project.org/en/latest/reference/caching.html)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.doctrine-project.org/en/latest/reference/caching.html](http://docs.doctrine-project.org/en/latest/reference/caching.html)'
- en: We still need to update the view layer to take care of our new `findWithComments()`
    method.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要更新视图层来处理我们的新的`findWithComments()`方法。
- en: 'Open the `view-post.php` file at the `web/`location, where you will find the
    following code snippet:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`web/`位置的`view-post.php`文件，在那里你会找到以下代码片段：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Replace the preceding line of code with the following code snippet:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码片段替换前面的代码行：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Filtering by tag
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按标签过滤
- en: To discover a more advanced use of the QueryBuilder and DQL, we will create
    a list of posts having one or more tags.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发现更高级的QueryBuilder和DQL的用法，我们将创建一个具有一个或多个标签的帖子列表。
- en: Tag filtering is good for Search Engine Optimization and allows the readers
    to easily find the content they are interested in. We will build a system that
    is able to list posts that have several tags in common; for example, all the posts
    tagged with Doctrine and Symfony.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 标签过滤对于搜索引擎优化很有用，并且允许读者轻松找到他们感兴趣的内容。我们将构建一个能够列出具有多个共同标签的帖子的系统；例如，所有标记有Doctrine和Symfony的帖子。
- en: 'To filter our posts using tags kindly perform the following steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用标签过滤我们的帖子，请执行以下步骤：
- en: 'Add another method to our custom `PostRepository` class (`src/Blog/Entity/PostRepository.php`)
    using the following code:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的自定义`PostRepository`类（`src/Blog/Entity/PostRepository.php`）中添加另一个方法，使用以下代码：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This method is a bit more complex. It takes in a parameter as an array of tag
    names and returns an array of posts that has all these tags.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法有点复杂。它以标签名称数组的参数形式接受参数，并返回具有所有这些标签的帖子数组。
- en: 'The query deserves some explanation, which is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 查询值得一些解释，如下所示：
- en: The main entity class (automatically set by the inherited `createQueryBuilder()`
    method) is `Post` and its alias is the letter `p`.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主实体类（由继承的`createQueryBuilder()`方法自动设置）是`Post`，其别名是字母`p`。
- en: We join the associated tags through a `JOIN` clause; the `Tag` class is aliased
    by `t`.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过`JOIN`子句连接相关标签；`Tag`类由`t`别名。
- en: Thanks to `where()` being called, we retrieve only the posts tagged by one of
    the tags passed in the parameter. We use an awesome feature of Doctrine that allows
    us to directly use an array as a query parameter.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于调用了`where()`，我们只检索通过参数传递的标签之一标记的帖子。我们使用Doctrine的一个很棒的功能，允许我们直接使用数组作为查询参数。
- en: Results of `where()` are grouped by `id` with the call to `groupBy()`.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where()`的结果通过调用`groupBy()`按`id`分组。'
- en: We use the aggregate function `COUNT()` in the `HAVING` clause to filter the
    posts that are tagged by some tags of the `$tagNames` array, but not all of them.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在`HAVING`子句中使用聚合函数`COUNT()`来过滤由`$tagNames`数组的一些标签标记的帖子，但不是所有的。
- en: 'Edit the `index.php` file in `web/` to use our new method. Here, you will find
    the following code:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`web/`中的`index.php`文件以使用我们的新方法。在这里，你会找到以下代码：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And replace the preceding code with the next code snippet:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 并用下一个代码片段替换前面的代码：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, when a `GET` parameter called `tags` exists in the URL, it is used to filter
    posts. Better, if several comma-separated tags are passed in, only posts with
    all these tags will be displayed.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当URL中存在名为`tags`的`GET`参数时，它将用于过滤帖子。更好的是，如果传入了多个逗号分隔的标签，只会显示具有所有这些标签的帖子。
- en: Type `http://localhost:8000/index.php?tags=tag4,tag5` in your favorite browser.
    Thanks to the fixtures we have created in the previous chapter, posts 5 and 10
    should be listed.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的浏览器中键入`http://localhost:8000/index.php?tags=tag4,tag5`。由于我们在上一章中创建的固定装置，应该列出帖子5和10。
- en: 'In the same file, find the following code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个文件中，找到以下代码：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And add the list of tags as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 并按以下方式添加标签列表：
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'A smart list of tags with links to the tag page is displayed. You can copy
    this code and then paste it in the `view-post.php` file in the `web/` location;
    or better, *don''t repeat yourself*: create a small helper function to display
    the tags.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 显示带有指向标签页面的链接的智能标签列表。您可以复制此代码，然后将其粘贴到`web/`位置的`view-post.php`文件中；或者更好的是，*不要重复自己*：创建一个小的辅助函数来显示标签。
- en: Counting comments
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计数评论
- en: We still need to make some cosmetic changes. Posts with a lot of comments interest
    many readers. It would be better if the number of comments for each post was available
    directly from the list page. Doctrine can populate an array containing the result
    of the call to an `aggregate` function as the first row and hydrated entities
    as the second.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要进行一些外观上的改变。评论很多的帖子吸引了很多读者。如果每篇帖子的评论数量可以直接从列表页面获得会更好。Doctrine可以将包含对`aggregate`函数调用的结果的数组作为第一行，并将实体作为第二行。
- en: 'Add the following method, for retrieving posts with the associated comments,
    to the `PostRepository` class:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下方法，用于检索具有相关评论的帖子，到`PostRepository`类：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Thanks to the `GROUP BY` clause and the call to `addSelect()`, this method
    will return a two-dimensional array instead of an array of the `Post` entities.
    Arrays in the returned array contain two values, which are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`GROUP BY`子句和调用`addSelect()`，此方法将返回一个二维数组，而不是`Post`实体的数组。返回的数组中包含两个值，如下所示：
- en: Our `Post` entity at the first index
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的`Post`实体在第一个索引处
- en: The result of the `COUNT()` function of DQL (the number of comments) at the
    second index
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DQL的`COUNT()`函数的结果（评论数量）在第二个索引处
- en: 'In the `index.php` file at the `web/` location, find the following code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在`web/`位置的`index.php`文件中，找到以下代码：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And replace the preceding code with the following code to use our new method:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 并用以下代码替换前面的代码以使用我们的新方法：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To match the new structure returned by `findWithCommentCount()`, find the following
    code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了匹配`findWithCommentCount()`返回的新结构，找到以下代码：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And replace the preceding code with the next code snippet:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 并用下一个代码片段替换前面的代码：
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As seen previously, the use of a custom hydrator is a better practice while
    handling such cases.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在处理这种情况时使用自定义水合器是一个更好的做法。
- en: 'You should also take a look at Custom AST Walker as shown on the following
    website:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该查看以下网站上显示的自定义AST Walker：
- en: '[http://docs.doctrine-project.org/en/latest/cookbook/dql-custom-walkers.html](http://docs.doctrine-project.org/en/latest/cookbook/dql-custom-walkers.html)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.doctrine-project.org/en/latest/cookbook/dql-custom-walkers.html](http://docs.doctrine-project.org/en/latest/cookbook/dql-custom-walkers.html)'
- en: 'Find the following code snippet:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 找到以下代码片段：
- en: '[PRE20]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And replace the preceding code with the next code snippet:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 并用下一个代码片段替换前面的代码：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It''s time to display the number of comments. Insert the following code after
    the tag list:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候显示评论数量了。在标签列表后插入以下代码：
- en: '[PRE22]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As the `index.php` file at the `web/` location also uses the `findHavingTags()`
    method to display the list of tagged articles, we need to update this method too.
    This is done using the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`web/`位置的`index.php`文件还使用`findHavingTags()`方法来显示标记文章的列表，我们也需要更新这个方法。使用以下代码完成：
- en: '[PRE23]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about DQL, its differences from SQL, and its
    Query Builder. We also learned about the concept of entity repositories and how
    to create custom ones.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了DQL，它与SQL的区别，以及它的查询构建器。我们还学习了实体存储库的概念以及如何创建自定义存储库。
- en: Even if there is a lot more to learn from these topics and from Doctrine in
    general, our knowledge should be sufficient to start developing complete and complex
    applications using Doctrine as a persistent system.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 即使从这些主题和Doctrine中还有很多东西可以学习，我们的知识应该足够开始使用Doctrine作为持久系统开发完整和复杂的应用程序。
- en: In [Chapter 5](ch05.html "Chapter 5. Going Further"), *Going Further*, the last
    chapter of this book, we will go a step further and cover some more advanced topics,
    including how to handle inheritance, how to make native SQL queries, and the basics
    of the event system.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html "第5章。进一步")，“进一步”，这本书的最后一章，我们将进一步讨论一些更高级的主题，包括如何处理继承，如何进行本地SQL查询以及事件系统的基础知识。
