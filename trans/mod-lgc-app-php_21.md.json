["```php\n**page_script.php**\n<?php\n2\n3 // ... $user_id value created earlier\n4\n5 $db = new Database($db_host, $db_user, $db_pass);\n6 $articles_gateway = new ArticlesGateway($db);\n7 $users_gateway = new UsersGateway($db);\n8 $article_transactions = new ArticleTransactions(\n9 $articles_gateway,\n10 $users_gateway\n11 );\n12\n13 if ($_POST['id']) {\n14 $article_transactions->updateExistingArticle($user_id, $_POST);\n15 } else {\n16 $article_transactions->submitNewArticle($user_id, $_POST);\n17 }\n18\n19 $failure = $article_transactions->getFailure();\n20 ?>\n```", "```php\n**classes/Domain/Articles/ArticleTransactions.php**\n1 <?php\n2 namespace Domain\\Articles;\n3\n4 use Domain\\Users\\UsersGateway;\n5\n6 class ArticleTransactions\n7 {\n8 protected $article_types = array(1, 2, 3, 4, 5);\n9\n10 protected $failure = array();\n11\n12 protected $input = array();\n13\n14 public function __construct(\n15 ArticlesGateway $articles_gateway,\n16 UsersGateway $users_gateway\n17 ) {\n18 $this->articles_gateway = $articles_gateway;\n19 $this->users_gateway = $users_gateway;\n20 }\n21\n22 public function getInput()\n23 {\n24 return $this->input;\n25 }\n26\n27 public function getFailure()\n28 {\n29 return $this->failure;\n30 }\n31\n32 public function getCredits()\n33 {\n34 return round(\n35 $this->input['credits_per_rating'] * $this->input['max_ratings'],\n36 2\n37 );\n38 }\n39\n40 public function filterInput($input)\n41 {\n42 $input['body'] = strip_tags($input['body']);\n43 $input['notes'] = strip_tags($input['notes']);\n44\n45 if (isset($input['ready']) && $input['ready'] == 'on') {\n46 $input['ready'] = 1;\n47 } else {\n48 $input['ready'] = 0;\n49 }\n50\n51 // nothing less than 0.01 credits per rating\n52 $input['credits_per_rating'] = round(\n53 $input['credits_per_rating'],\n54 2\n55 );\n56\n57 // return the filtered input\n58 return $input;\n59 }\n60\n61 public function updateExistingArticle($user_id, $input)\n62 {\n63 $this->input = $this->filterInput($input);\n64 $now = time();\n65 $this->failure = array();\n66 $credits = $this->getCredits();\n67\n68 $row = $this->articles_gateway->selectOneByIdAndUserId(\n69 $this->input['id'],\n70 $user_id\n71 );\n72\n73 if ($row) {\n74\n75 // don't charge unless the article is ready\n76 $decrement = false;\n77\n78 // is the article marked as ready?\n79 if ($this->input['ready'] == 1) {\n80\n81 // did they offer at least the minimum?\n82 if (\n83 $credits > 0\n84 && $this->input['credits_per_rating'] >= 0.01\n85 && is_numeric($credits)\n86 ) {\n87\n88 // was the article previously ready for review?\n89 // (note 'row' not 'input')\n90 if ($row['ready'] == 1) {\n91\n92 // only subtract (or add back) the difference to their\n93 // account, since they already paid something\n94 if (\n95 is_numeric($row['credits_per_rating'])\n96 && is_numeric($row['max_ratings'])\n97 ) {\n98 // user owes $credits, minus whatever they paid\n99 // already\n100 $amount = $row['credits_per_rating']\n101 * $row['max_ratings']\n102 $credits = $credits - $amount;\n103 }\n104\n105 $decrement = true;\n106\n107 } else {\n108 // article not ready previously, so they hadn't\n109 // had credits deducted. if this is less than their\n110 // in their account now, they may proceed.\n111 $residual = $user->get('credits') - $credits;\n112 $decrement = true;\n113 }\n114\n115 } else {\n116 $residual = -1;\n117 $this->failure[] = \"Credit offering invalid.\";\n118 $decrement = false;\n119 }\n120\n121 } else {\n122\n123 // arbitrary positive value; they can proceed\n124 $residual = 1;\n125\n126 // if it was previously ready but is no longer, refund them\n127 if (\n128 is_numeric($row['credits_per_rating'])\n129 && is_numeric($row['max_ratings'])\n130 && ($row['ready'] == 1)\n131 ) {\n132 // subtract a negative value\n133 $amount = $row['credits_per_rating']\n134 * $row['max_ratings']\n135 $credits = -($amount);\n136 $decrement = true;\n137 }\n138 }\n139\n140 if ($residual >= 0) {\n141\n142 $this->input['ip'] = $_SERVER['REMOTE_ADDR'];\n143 $this->input['last_edited'] = $now;\n144\n145 if (! in_array(\n146 $this->input['article_type'],\n147 $this->article_types\n148 )) {\n149 $this->input['article_type'] = 1;\n150 }\n151\n152 $result = $this->articles_gateway->updateByIdAndUserId(\n153 $this->input['id'],\n154 $user_id,\n155 $this->input\n156 );\n157\n158 if ($result) {\n159 $article_id = $this->input['id'];\n160\n161 if ($decrement) {\n162 $this->users_gateway->decrementCredits(\n163 $user_id,\n164 $credits\n165 );\n166 }\n167 } else {\n168 $this->failure[] = \"Could not update article.\";\n169 }\n170 } else {\n171 $this->failure[] = \"You do not have enough credits for ratings.\";\n172 }\n173 }\n174 }\n175\n176 public function submitNewArticle($user_id, $input)\n177 {\n178 $this->input = $this->filterInput($input);\n179 $now = time();\n180 $this->failure = array();\n181 $credits = $this->getCredits();\n182\n183 $decrement = false;\n184\n185 // if the article is ready, we need to subtract credits.\n186 if ($this->input['ready'] == 1) {\n187\n188 // if this is greater than or equal to 0, they may proceed.\n189 if (\n190 $credits > 0\n191 && $this->input['credits_per_rating']>=0.01\n192 && is_numeric($credits)\n193 ) {\n194 // minimum offering is 0.01\n195 $residual = $user->get('credits') - $credits;\n196 $decrement = true;\n197 } else {\n198 $residual = -1;\n199 $this->failure[] = \"Credit offering invalid.\";\n200 }\n201\n202 } else {\n203 // arbitrary positive value if they are not done with their article.\n204 // no deduction made yet.\n205 $residual = 1;\n206 }\n207\n208 // can user afford ratings on the new article?\n209 if ($residual >= 0) {\n210\n211 // yes, insert the article\n212 $this->input['last_edited'] = $now;\n213 $this->input['ip'] = $_SERVER['REMOTE_ADDR'];\n214 $article_id = $this->articles_gateway->insert($this->input);\n215\n216 if ($article_id) {\n217 if ($decrement) {\n218 // Charge them\n219 $this->users_gateway->decrementCredits($user_id, $credits);\n220 }\n221 } else {\n222 $this->failure[] = \"Could not update credits.\";\n223 }\n224\n225 $result = $this->articles_gateway->updateByIdAndUserId(\n226 $article_id,\n227 $user_id,\n228 $this->input\n229 );\n230\n231 if (! $result) {\n232 $this->failure[] = \"Could not update article.\";\n233 }\n234\n235 } else {\n236\n237 // cannot afford ratings on new article\n238 $this->failure[] = \"You do not have enough credits for ratings.\";\n239 }\n240 }\n241 }\n242 ?>\n```"]