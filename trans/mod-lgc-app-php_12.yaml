- en: Chapter 12. Replace Includes in Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。替换类中的包含
- en: Even though we have Model View Controller separation now, we may still have
    many include calls in our classes. We want our legacy application to be free from
    the artifacts of its include-oriented heritage, where merely including a file
    causes logic to be executed. To do so, we will need to replace include calls with
    method calls throughout our classes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 即使现在我们已经有了模型视图控制器分离，我们的类中可能仍然有许多包含调用。我们希望我们的遗留应用程序摆脱其包含导向遗产的痕迹，仅仅包含一个文件就会导致逻辑被执行。为了做到这一点，我们需要在整个类中用方法调用替换包含调用。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the purposes of this chapter, we will use the term include to cover not
    just `include` but also `require`, `include_once`, and `require_once`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的目的是，我们将使用术语包含来覆盖不仅仅是`include`，还包括`require`，`include_once`和`require_once`。
- en: Embedded include Calls
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式包含调用
- en: 'Let''s say we extracted some action logic with an embedded `include` to a *Controller*
    method. The code receives information on a new user, calls an `include` to perform
    some common validation functionality, and then deals with success or failure of
    validation:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们提取了一些嵌入式`include`的动作逻辑到一个*Controller*方法中。代码接收一个新用户的信息，调用一个`include`来执行一些常见的验证功能，然后处理验证的成功或失败：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is an example of what the included file might look like:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包含文件可能的示例：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let us ignore for now the specifics of the validation code. The point here is
    that the `include` file and any code using it are both tightly coupled to each
    other. Any code using the file has to initialize a `$user` variable before including
    it. Any code using the file also has an expectation of getting two new variables
    introduced into its scope (`$user_messages` and `$user_is_valid`).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时忽略验证代码的具体内容。这里的重点是`include`文件和使用它的任何代码都紧密耦合在一起。使用该文件的任何代码都必须在包含它之前初始化一个`$user`变量。使用该文件的任何代码也都期望在其范围内引入两个新变量（`$user_messages`和`$user_is_valid`）。
- en: We want to decouple this logic so that the logic in the `include` file does
    not intrude on the scope of the class methods in which is it used. We do this
    by extracting the logic of the `include` file to a class of its own.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望解耦这个逻辑，使得`include`文件中的逻辑不会侵入其使用的类方法的范围。我们通过将`include`文件的逻辑提取到一个独立的类中来实现这一点。
- en: The Replacement process
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换过程
- en: The difficulty of extracting includes to their own classes depends on the number
    and complexity of the `include` calls remaining in our class files. If there are
    very few includes and they are relatively simple, the process will be easy to
    complete. If there are many complex interdependent includes, the process will
    be relatively difficult to work through.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 提取包含到它们自己的类中的难度取决于我们的类文件中剩余的`include`调用的数量和复杂性。如果包含很少，并且相对简单，那么这个过程将很容易完成。如果有许多复杂的相互依赖的包含，那么这个过程将相对难以完成。
- en: 'In general, the process is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这个过程如下：
- en: Search the `classes/` directory for an `include` call in a class.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个类中搜索`classes/`目录中的`include`调用。
- en: For that `include` call, search the entire codebase to find how many times the
    included file is used.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于该`include`调用，搜索整个代码库，找出包含的文件被使用的次数。
- en: 'If the included file is used only once, and only in that one class:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果包含的文件只被使用一次，并且只在一个类中使用：
- en: Copy the contents of the included file code as-is directly over the `include`
    call.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含文件的内容直接复制到`include`调用上。
- en: Test the modified class, and delete the include file.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试修改后的类，并删除包含文件。
- en: 'Refactor the copied code so that it follows all our existing rules: no globals,
    no `new`, inject dependencies, return instead of output, and no `include` calls.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构复制的代码，使其遵循我们现有的所有规则：没有全局变量，没有`new`，注入依赖项，返回而不是输出，没有`include`调用。
- en: 'If the included file is used more than once:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果包含的文件被使用多次：
- en: Copy the contents of the included file as-is to a new class method.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含文件的内容直接复制到一个新的类方法中。
- en: Replace the discovered `include` call with inline instantiation of the new class
    and invocation of the new method.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用新类的内联实例化和新方法的调用替换发现的`include`调用。
- en: Test the class in which the `include` was replaced to find coupled variables;
    add these to the new method signature by reference.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试替换了`include`的类，找到耦合的变量；通过引用将这些变量添加到新方法的签名中。
- en: Search the entire codebase for `include` calls to that same file, and replace
    each with inline instantiation and invocation; spot check modified files and test
    modified classes.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索整个代码库，查找对同一文件的`include`调用，并用内联实例化和调用替换每个调用；抽查修改后的文件并测试修改后的类。
- en: Delete the original `include` file; unit test and spot check the entire legacy
    application.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除原始的`include`文件；对整个遗留应用程序进行单元测试和抽查。
- en: 'Write a unit test for the new class, and refactor the new class so that it
    follows all our existing rules: no globals, no superglobals, no `new`, inject
    dependencies, return-not-output, and no includes.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '为新类编写单元测试，并重构新类，使其遵循我们现有的所有规则：没有全局变量，没有超全局变量，没有`new`，注入依赖项，返回而不是输出，没有包含。 '
- en: Finally, replace each inline instantiation of the new class in each of our class
    files with dependency injection, testing along the way.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在我们的每个类文件中，用依赖注入替换新类的每个内联实例化，并在此过程中进行测试。
- en: Commit, push, notify QA.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交，推送，通知QA。
- en: Repeat until there are no `include` calls in any of our classes.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复，直到我们的任何类中都没有`include`调用。
- en: Search for include Calls
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索包含调用
- en: 'First, as we did in a much earlier chapter, we use our project-wide search
    facility to find `include` calls. In this case, search only the `classes/` directory
    with the following regular expression:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，就像我们在更早的章节中所做的那样，使用我们的项目范围搜索工具来查找`include`调用。在这种情况下，只在`classes/`目录中搜索以下正则表达式：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This should give us a list of candidate `include` calls in the `classes/` directory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给我们一个`classes/`目录中候选`include`调用的列表。
- en: We pick a single `include` file to work with, then search the entire codebase
    for other inclusions of the same file. For example, if we found this candidate
    `include` ...
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择一个要处理的单个`include`文件，然后搜索整个代码库，查找同一文件的其他包含。例如，如果我们找到了这个候选`include`...
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We would search the entire codebase for `include` calls to the file name `baz.php`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将搜索整个代码库，查找文件名为`baz.php`的`include`调用：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We search only for the file name because, depending on where the `include` call
    is located, the relative directory paths might lead to the same file. It is up
    to us to determine which of these `include` calls reference the same file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只搜索文件名，因为根据`include`调用的位置不同，相对目录路径可能会指向同一个文件。我们需要确定这些`include`调用中哪些引用了同一个文件。
- en: Once we have a list of `include` calls that we know lead to the same file, we
    count the number of calls that include that file. If there is only one call, our
    work is relatively simple. If there is more than one call, our work is more complex.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了我们知道指向同一文件的`include`调用列表，我们就计算包含该文件的调用次数。如果只有一个调用，我们的工作相对简单。如果有多个调用，我们的工作就更复杂了。
- en: Replacing a Single include Call
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换单个include调用
- en: If a file is used as the target of an `include` call only once, it is relatively
    easy to remove the `include`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个文件作为`include`调用的目标仅被调用一次，删除`include`相对容易。
- en: First, we copy the entire contents of the `include` file. We move back to the
    class where the `include` occurs, delete the `include` call, and paste the entire
    contents of the `include` file in its place.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们复制整个`include`文件的内容。然后，我们返回到包含`include`的类中，删除`include`调用，并将整个`include`文件的内容粘贴到其位置。
- en: Next, we run the unit tests for the class to make sure it still works properly.
    If they fail, we rejoice! We have found errors to be corrected before we continue.
    If they pass, we likewise rejoice, and move on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们运行该类的单元测试，以确保它仍然正常工作。如果测试失败，我们会感到高兴！我们发现了需要在继续之前纠正的错误。如果测试通过，我们同样会感到高兴，并继续前进。
- en: Now that the `include` call has been replaced, and the file contents have been
    successfully transplanted to the class, we delete the include file. It is no longer
    needed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`include`调用已经被替换，文件内容已经成功移植到类中，我们删除`include`文件。它不再需要了。
- en: 'Finally, we can return to our class file where the newly transplanted code
    lives. We refactor it according to all the rules we have learned so far: no globals
    or superglobals, no use of the `new` keyword outside of factories, inject all
    needed dependencies, return values instead of generating output, and (recursively)
    no `include` calls. We run our unit tests along the way to make sure we do not
    break any pre-existing functionality.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以返回到包含新移植代码的类文件中。我们根据迄今为止学到的所有规则进行重构：不使用全局变量或超全局变量，不在工厂之外使用`new`关键字，注入所有需要的依赖项，返回值而不是生成输出，以及（递归地）不使用`include`调用。我们一路上运行单元测试，以确保我们不会破坏任何预先存在的功能。
- en: Replacing Multiple include Calls
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换多个include调用
- en: If a file is used as the target of multiple `include` calls, it will take more
    work to replace them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个文件作为多个`include`调用的目标，替换它们将需要更多的工作。
- en: Copy include file to Class Method
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将include文件复制到类方法中
- en: First, we will copy the `include` code to a class method of its own. To do this,
    we need to pick a class name appropriate to the purpose of the included file.
    Alternatively, we may name the class based on the path to the included file so
    we can keep track of where the code came from originally.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将`include`代码复制到一个独立的类方法中。为此，我们需要选择一个与包含文件目的相适应的类名。或者，我们可以根据包含文件的路径命名类，以便跟踪代码的原始来源。
- en: As for the method name, we again pick something appropriate to the purpose of
    the `include` code. Personally, if the class is going to contain only a single
    method, I like to co-opt the `__invoke()` method for this. However, if there end
    up being multiple methods, we need to pick a sensible name for each one.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 至于方法名，我们再次选择与`include`代码目的相适应的内容。就个人而言，如果类只包含一个方法，我喜欢将`__invoke()`方法用于此目的。但是，如果最终有多个方法，我们需要为每个方法选择一个合理的名称。
- en: Once we have picked a class name and method, we create the new class in the
    proper file location, and copy the `include` code directly into the new method.
    (We do not delete the include file itself just yet.)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择了一个类名和方法，我们就在正确的文件位置创建新的类，并将`include`代码直接复制到新的方法中。（我们暂时不删除包含文件本身。）
- en: Replace the original include Call
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换原始include调用
- en: Now that we have a class to work with, we go back to the `include` call we discovered
    in our search, replace it with an inline instantiation of the new class, and invoke
    the new method.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个要处理的类，我们回到我们在搜索中发现的`include`调用，用新类的内联实例化替换它，并调用新方法。
- en: 'For example, say the original calling code looked like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设原始调用代码如下：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we extracted the `include` code to a `Validator\NewUserValidator` class
    as its `__invoke()` method body, we might replace the `include` call with this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将`include`代码提取到`Validator\NewUserValidator`类作为其`__invoke()`方法体，我们可以用以下代码替换`include`调用：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Using inline instantiation in a class violates one of our rules regarding dependency
    injection. We do not want to use the `new` keyword outside of factory classes.
    We do so here only to facilitate the refactoring process. Later, we will replace
    this inline instantiation with injection.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在类中使用内联实例化违反了我们关于依赖注入的规则之一。我们不希望在工厂类之外使用`new`关键字。我们在这里这样做只是为了便于重构过程。稍后，我们将用注入替换这种内联实例化。
- en: Discover coupled variables through testing
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过测试发现耦合的变量
- en: We have now successfully decoupled the calling code from the `include` file,
    but this leaves us with a problem. Because the calling code executed the `include`
    code inline, the variables needed by the newly-extracted code are no longer available.
    We need to pass into the new class method all the variables it needs for execution,
    and to make its variables available to the calling code when the method is done.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功地将调用代码与`include`文件解耦，但这给我们留下了一个问题。因为调用代码内联执行了`include`代码，新提取的代码所需的变量不再可用。我们需要将新类方法所需的所有变量传递进去，并在方法完成时使其变量对调用代码可用。
- en: To do so, we run the unit tests for the class that called the `include`. The
    tests will reveal to us what variables are needed by the new method. We can then
    pass these into the method by reference. Using a reference makes sure that both
    blocks of code are operating on the exact same variables, just as if the `include`
    was still being executed inline. This minimizes the number of changes we need
    to make to the calling code and the newly extracted code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们运行调用`include`的类的单元测试。测试将向我们展示新方法需要哪些变量。然后我们可以通过引用将这些变量传递给方法。使用引用可以确保两个代码块操作的是完全相同的变量，就好像`include`仍然在内联执行一样。这最大程度地减少了我们需要对调用代码和新提取的代码进行的更改数量。
- en: 'For example, say we have extracted the code from an `include` file to this
    class and method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们已经将代码从一个`include`文件提取到了这个类和方法中：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When we test the class that calls this code in place of an `include`, the tests
    will fail, because the `$user` value is not available to the new method, and the
    `$user_messages` and `$user_is_valid` variables are not available to the calling
    code. We rejoice at the failure, because it tells us what we need to do next!
    We add each missing variable to the method signature by reference:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们测试调用这段代码的类时，测试将失败，因为新方法中的`$user`值不可用，并且调用代码中的`$user_messages`和`$user_is_valid`变量也不可用。我们为失败而欢欣鼓舞，因为它告诉我们接下来需要做什么！我们通过引用将每个缺失的变量添加到方法签名中：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We then pass the variables to the method from the calling code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们从调用代码将变量传递给方法：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We continue running the unit tests until they all pass, adding variables as
    needed. When all the tests pass, we rejoice! All the needed variables are now
    available in both scopes, and the code itself will remain decoupled and testable.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续运行单元测试，直到它们全部通过，根据需要添加变量。当所有测试都通过时，我们欢呼！所有需要的变量现在在两个范围内都可用，并且代码本身将保持解耦和可测试。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Not all variables in the extracted code may be needed by the calling code, and
    vice versa. We should let the unit testing failures guide us as to which variables
    need to be passed in as references.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的代码中并非所有变量都可能被调用代码需要，反之亦然。我们应该让单元测试的失败指导我们哪些变量需要作为引用传递。
- en: Replace other include Calls and Test
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换其他包括调用和测试
- en: Now that we have decoupled our original calling code from the `include` file,
    we need to decouple all other remaining code from the same file. Given our earlier
    search results, we go to each file and replace the relevant `include` call with
    an inline instantiation of the new class. We then add a line that calls the new
    method with the needed variables.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将原始调用代码与`include`文件解耦，我们需要将所有其他剩余的代码也从同一个文件中解耦。根据我们之前的搜索结果，我们去每个文件，用新类的内联实例化替换相关的`include`调用。然后我们添加一行调用新方法并传入所需的变量。
- en: Note that we may be replacing code within classes, or within non-class files
    such as view files. If we replace code in a class, we should run the unit tests
    for that class to make sure the replacement does not break anything. If we replace
    code in a non-class file, we should run the test for that file if it exists (such
    as a view file test), or else spot check the file if no tests exist for it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可能正在替换类中的代码，也可能在视图文件等非类文件中替换代码。如果我们在一个类中替换代码，我们应该运行该类的单元测试，以确保替换不会出现问题。如果我们在一个非类文件中替换代码，我们应该运行该文件的测试（如果存在的话，比如视图文件测试），否则抽查该文件是否存在测试。
- en: Delete the include file and test
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除include文件并测试
- en: Once we have replaced all `include` calls to the file, we delete the file. We
    should now run all of our tests and spot checks for the entire legacy application
    to make sure that we did not miss an `include` call to that file. If a test or
    spot check fails, we need to remedy it before continuing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们替换了所有对该文件的`include`调用，我们就删除该文件。现在我们应该运行所有的测试和抽查整个遗留应用程序，以确保我们没有漏掉对该文件的`include`调用。如果测试或抽查失败，我们需要在继续之前解决它。
- en: Write a test and refactor
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写测试和重构
- en: Now that the legacy application works just as it used to before we extracted
    the `include` code to its own class, we write a unit test for the new class.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在遗留应用程序的工作方式与我们将`include`代码提取到自己的类之前一样，我们为新类编写一个单元测试。
- en: 'Once we have a passing unit test for the new class, we refactor the code in
    that class according to all the rules we have learned so far: no globals or superglobals,
    no use of the `new` keyword outside of factories, inject all needed dependencies,
    return values instead of generating output, and (recursively) no `include` calls.
    We continue to run our tests along the way to make sure we do not break any pre-existing
    functionality.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们为新类编写了一个通过的单元测试，我们根据迄今为止学到的所有规则重构该类中的代码：不使用全局变量或超全局变量，不在工厂之外使用`new`关键字，注入所有需要的依赖项，返回值而不是生成输出，以及（递归地）不使用`include`调用。我们继续运行我们的测试，以确保我们不会破坏任何已有的功能。
- en: Convert to Dependency Injection and test
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 转换为依赖注入并测试
- en: When the unit test for our newly refactored class passes, we proceed to replace
    all our inline instantiations with dependency injection. We do so only in our
    class files; in our view files and other non-class files, the inline instantiation
    is not much of a problem
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们新重构的类的单元测试通过时，我们继续用依赖注入替换所有内联实例化。我们只在我们的类文件中这样做；在我们的视图文件和其他非类文件中，内联实例化并不是什么大问题。
- en: 'For example, we may see this inline instantiation and invocation in a class:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能在一个类中看到这样的内联实例化和调用：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We move the `$validator` to a property injected via the constructor, and use
    the property in the method:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`$validator`移到通过构造函数注入的属性中，并在方法中使用该属性：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we need to search the codebase and replace every instantiation of the modified
    class to pass the new dependency object. We run our tests as we go to make sure
    everything continues to operate properly.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要搜索代码库，并替换每个修改后的类的实例化以传递新的依赖对象。我们在进行这些操作时运行我们的测试，以确保一切继续正常运行。
- en: Commit, Push, Notify QA
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交，推送，通知QA
- en: At this point we have either replaced a single `include` call, or multiple `include`
    calls to the same file. Because we have been testing along the way, we can now
    commit our new code and tests, push it all to common repository, and notify QA
    that we have new work for them to review.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们要么替换了单个`include`调用，要么替换了同一文件的多个`include`调用。因为我们一直在测试，现在我们可以提交我们的新代码和测试，将它们全部推送到公共存储库，并通知QA我们有新的工作需要他们审查。
- en: Do ... While
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Do ... While
- en: We begin again by searching for the next `include` call in a class file. When
    all `include` calls have been replaced by class method invocations, we are done.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次开始搜索类文件中的下一个`include`调用。当所有的`include`调用都被类方法调用替换后，我们就完成了。
- en: Common QuestionsCan one class receive logic from many include files?
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题一个类可以从多个include文件中接收逻辑吗？
- en: In the examples, we show the `include` code being extracted to a class by itself.
    If we have many related `include` files, it may be reasonable to collect them
    into the same class, each with their own method name. For example, the *NewUserValidator*
    logic might be only one of many user-related validators. We can reasonably imagine
    the class renamed as *UserValidator* with such methods as `validateNewUser()`,
    `validateExistingUser()`, and so on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们展示了`include`代码被提取到一个独立的类中。如果我们有许多相关的`include`文件，将它们收集到同一个类中，每个都有自己的方法名，可能是合理的。例如，*NewUserValidator*逻辑可能只是许多与用户相关的验证器之一。我们可以合理地想象将该类重命名为*UserValidator*，并具有诸如`validateNewUser()`、`validateExistingUser()`等方法。
- en: What about include calls originating in non-class files?
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么在非类文件中发起的include调用呢？
- en: In our search for `include` calls, we look only in the `classes/` directory
    for the originating calls. It is likely that there are `include` calls that originate
    from other locations as well, such as the `views/`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找`include`调用时，我们只在`classes/`目录中寻找原始调用。很可能还有`include`调用来自其他位置，比如`views/`。
- en: For the purposes of our refactoring, we don't particularly care about `include`
    calls that originate outside our classes. If an `include` is called only from
    non-class files, we can safely leave that `include` in its existing state.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们重构的目的，我们并不特别关心`include`调用是否来自我们类外部。如果一个`include`只从非类文件中调用，我们可以放心地保留该`include`的现有状态。
- en: Our main goal here is to remove `include` calls from class files, not necessarily
    from the entire legacy application. At this point, it is likely that most or all
    `include` calls outside our classes are part of the presentation logic anyway.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要目标是从类文件中删除`include`调用，而不一定是整个遗留应用程序。此时，很可能我们类外的大多数或所有`include`调用都是呈现逻辑的一部分。
- en: Review and next steps
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查和下一步
- en: After we have extracted all the include calls from our classes, we will have
    finally removed one of the last major artifacts of our legacy architecture. We
    can load a class without any side effects, and logic is executed only as a result
    of invoking a method. This is a big step forward for us.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们从类中提取了所有的include调用之后，我们最终删除了遗留架构的最后一个主要部分。我们可以加载一个类而不产生任何副作用，并且逻辑只有在调用方法时才执行。这对我们来说是一个重要的进步。
- en: We can now begin paying attention to overarching end-to-end architecture of
    our legacy application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始关注我们遗留应用程序的整体架构。
- en: 'As things stand now, the entire legacy application is still located in the
    web server document root. Users browse to each page script directly. This means
    that the URLs are coupled to the file system. In addition, each page script has
    quite a bit of repeated logic: load a setup script, instantiate a controller using
    dependency injection, invoke the controller, and send the response.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，整个遗留应用程序仍然位于Web服务器文档根目录中。用户直接浏览每个页面脚本。这意味着URL与文件系统耦合在一起。此外，每个页面脚本都有相当多的重复逻辑：加载设置脚本，使用依赖注入实例化控制器，调用控制器，并发送响应。
- en: Our next major goal, then, is to begin using a Front Controller in our legacy
    application. The front controller will be composed of some bootstrapping logic,
    a router, and a dispatcher. This will decouple our application from the file system
    and allow us to start removing our page scripts entirely.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们下一个主要目标是在我们的遗留应用程序中开始使用前端控制器。前端控制器将由一些引导逻辑、路由器和调度器组成。这将使我们的应用程序与文件系统解耦，并允许我们开始完全删除我们的页面脚本。
- en: But before we do so, we need to separate the public resources in our application
    from the non-public resources.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 但在这样做之前，我们需要将应用程序中的公共资源与非公共资源分开。
