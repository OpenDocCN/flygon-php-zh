["```php\n    COLUMN          TYPE              NULL   DEFAULT\n    first_name      varchar(128)      No     None     NULL\n    last_name       varchar(128)      No     None     NULL\n    address         varchar(256)      Yes    None     NULL\n    city            varchar(64)       Yes    None     NULL\n    state_province  varchar(32)       Yes    None     NULL\n    postal_code     char(16)          No     None     NULL\n    phone           varchar(16)       No     None     NULL\n    country         char(2)           No     None     NULL\n    email           varchar(250)      No     None     NULL\n    status          char(8)           Yes    None     NULL\n    budget          decimal(10,2)     Yes    None     NULL\n    last_updated    datetime          Yes    None     NULL\n    ```", "```php\n    $filter = [\n      'trim' => function ($item) { return trim($item); },\n      'float' => function ($item) { return (float) $item; },\n      'upper' => function ($item) { return strtoupper($item); },\n      'email' => function ($item) { \n         return filter_var($item, FILTER_SANITIZE_EMAIL); },\n      'alpha' => function ($item) { \n         return preg_replace('/[^A-Za-z]/', '', $item); },\n      'alnum' => function ($item) { \n         return preg_replace('/[^0-9A-Za-z ]/', '', $item); },\n      'length' => function ($item, $length) { \n         return substr($item, 0, $length); },\n      'stripTags' => function ($item) { return strip_tags($item); },\n    ];\n    ```", "```php\n    $assignments = [\n      '*'             => ['trim' => NULL, 'stripTags' => NULL],\n      'first_name'    => ['length' => 32, 'alnum' => NULL],\n      'last_name'     => ['length' => 32, 'alnum' => NULL],\n      'address'       => ['length' => 64, 'alnum' => NULL],\n      'city'          => ['length' => 32],\n      'state_province'=> ['length' => 20],\n      'postal_code'   => ['length' => 12, 'alnum' => NULL],\n      'phone'         => ['length' => 12],\n      'country'       => ['length' => 2, 'alpha' => NULL, \n                          'upper' => NULL],\n      'email'         => ['length' => 128, 'email' => NULL],\n      'budget'        => ['float' => NULL],\n    ];\n    ```", "```php\n    foreach ($data as $field => $item) {\n      foreach ($assignments['*'] as $key => $option) {\n        $item = $filter[$key]($item, $option);\n      }\n      foreach ($assignments[$field] as $key => $option) {\n        $item = $filter[$key]($item, $option);\n      }\n    }\n    ```", "```php\n$testData = [\n  'goodData'   => [\n    'first_name'    => 'Doug',\n    'last_name'     => 'Bierer',\n    'address'       => '123 Main Street',\n    'city'          => 'San Francisco',\n    'state_province'=> 'California',\n    'postal_code'   => '94101',\n    'phone'         => '+1 415-555-1212',\n    'country'       => 'US',\n    'email'         => 'doug@unlikelysource.com',\n    'budget'        => '123.45',\n  ],\n  'badData' => [\n    'first_name' => 'This+Name<script>bad tag</script>Valid!',\n    'last_name' \t=> 'ThisLastNameIsWayTooLongAbcdefghijklmnopqrstuvwxyz0123456789Abcdefghijklmnopqrstuvwxyz0123456789Abcdefghijklmnopqrstuvwxyz0123456789Abcdefghijklmnopqrstuvwxyz0123456789',\n    //'address' \t=> '',    // missing\n    'city'      => 'ThisCityNameIsTooLong012345678901234567890123456789012345678901234567890123456789  ',\n    //'state_province'=> '',    // missing\n    'postal_code'     => '!\"\u00a3$%^Non Alpha Chars',\n    'phone'           => ' 12345 ',\n    'country'         => '12345',\n    'email'           => 'this.is@not@an.email',\n    'budget'          => 'XXX',\n  ]\n];\n```", "```php\nforeach ($testData as $data) {\n  foreach ($data as $field => $item) {\n    foreach ($assignments['*'] as $key => $option) {\n      $item = $filter[$key]($item, $option);\n    }\n    foreach ($assignments[$field] as $key => $option) {\n      $item = $filter[$key]($item, $option);\n    }\n    printf(\"%16s : %s\\n\", $field, $item);\n  }\n}\n```", "```php\n    $validator = [\n      'email' => [\n        'callback' => function ($item) { \n          return filter_var($item, FILTER_VALIDATE_EMAIL); },\n        'message'  => 'Invalid email address'],\n      'alpha' => [\n        'callback' => function ($item) { \n          return ctype_alpha(str_replace(' ', '', $item)); },\n        'message'  => 'Data contains non-alpha characters'],\n      'alnum' => [\n        'callback' => function ($item) { \n          return ctype_alnum(str_replace(' ', '', $item)); },\n        'message'  => 'Data contains characters which are '\n           . 'not letters or numbers'],\n      'digits' => [\n        'callback' => function ($item) { \n          return preg_match('/[^0-9.]/', $item); },\n        'message'  => 'Data contains characters which '\n          . 'are not numbers'],\n      'length' => [\n        'callback' => function ($item, $length) { \n          return strlen($item) <= $length; },\n        'message'  => 'Item has too many characters'],\n      'upper' => [\n        'callback' => function ($item) { \n          return $item == strtoupper($item); },\n        'message'  => 'Item is not upper case'],\n      'phone' => [\n        'callback' => function ($item) { \n          return preg_match('/[^0-9() -+]/', $item); },\n        'message'  => 'Item is not a valid phone number'],\n    ];\n    ```", "```php\n    $assignments = [\n      'first_name'    => ['length' => 32, 'alpha' => NULL],\n      'last_name'     => ['length' => 32, 'alpha' => NULL],\n      'address'       => ['length' => 64, 'alnum' => NULL],\n      'city'          => ['length' => 32, 'alnum' => NULL],\n      'state_province'=> ['length' => 20, 'alpha' => NULL],\n      'postal_code'   => ['length' => 12, 'alnum' => NULL],\n      'phone'         => ['length' => 12, 'phone' => NULL],\n      'country'       => ['length' => 2, 'alpha' => NULL, \n                          'upper' => NULL],\n      'email'         => ['length' => 128, 'email' => NULL],\n      'budget'        => ['digits' => NULL],\n    ];\n    ```", "```php\n    foreach ($data as $field => $item) {\n      echo 'Processing: ' . $field . PHP_EOL;\n      foreach ($assignments[$field] as $key => $option) {\n        if ($validator[$key]['callback']($item, $option)) {\n            $message = 'OK';\n        } else {\n            $message = $validator[$key]['message'];\n        }\n        printf('%8s : %s' . PHP_EOL, $key, $message);\n      }\n    }\n    ```", "```php\n    session_start();\n    $loggedIn = $_SESSION['isLoggedIn'] ?? FALSE;\n    if (isset($_POST['login'])) {\n      if ($_POST['username'] == // username lookup\n          && $_POST['password'] == // password lookup) {\n          $loggedIn = TRUE;\n          $_SESSION['isLoggedIn'] = TRUE;\n      }\n    }\n    ```", "```php\n    <br>Secret Info\n    <br><?php if ($loggedIn) echo // secret information; ?>\n    ```", "```php\n    session_start();\n    session_regenerate_id();\n    ```", "```php\n    session_unset();\n    session_destroy();\n    setcookie('PHPSESSID', 0, time() - 3600);\n    ```", "```php\n    $remotePrint = md5($_SERVER['REMOTE_ADDR'] \n                       . $_SERVER['HTTP_USER_AGENT'] \n                       . $_SERVER['HTTP_ACCEPT_LANGUAGE']);\n    $printsMatch = file_exists(THUMB_PRINT_DIR . $remotePrint);\n    if ($loggedIn && !$printsMatch) {\n        $info = 'SESSION INVALID!!!';\n        error_log('Session Invalid: ' . date('Y-m-d H:i:s'), 0);\n        // take appropriate action\n    }\n    ```", "```php\nsession_start();\n$loggedUser = $_SESSION['loggedUser'] ?? '';\n$loggedIn = $_SESSION['isLoggedIn'] ?? FALSE;\n$username = 'test';\n$password = 'password';\n$info = 'You Can Now See Super Secret Information!!!';\n\nif (isset($_POST['login'])) {\n  if ($_POST['username'] == $username\n      && $_POST['password'] == $password) {\n        $loggedIn = TRUE;\n        $_SESSION['isLoggedIn'] = TRUE;\n        $_SESSION['loggedUser'] = $username;\n        $loggedUser = $username;\n  }\n} elseif (isset($_POST['logout'])) {\n  session_destroy();\n}\n```", "```php\n<?php\ndefine('THUMB_PRINT_DIR', __DIR__ . '/../data/');\nsession_start();\nsession_regenerate_id();\n```", "```php\n$username = 'test';\n$password = 'password';\n$info = 'You Can Now See Super Secret Information!!!';\n$loggedIn = $_SESSION['isLoggedIn'] ?? FALSE;\n$loggedUser = $_SESSION['user'] ?? 'guest';\n```", "```php\n$remotePrint = md5($_SERVER['REMOTE_ADDR']\n  . $_SERVER['HTTP_USER_AGENT']\n  . $_SERVER['HTTP_ACCEPT_LANGUAGE']);\n$printsMatch = file_exists(THUMB_PRINT_DIR . $remotePrint);\n```", "```php\nif (isset($_POST['login'])) {\n  if ($_POST['username'] == $username\n      && $_POST['password'] == $password) {\n        $loggedIn = TRUE;\n        $_SESSION['user'] = strip_tags($username);\n        $_SESSION['isLoggedIn'] = TRUE;\n        file_put_contents(\n          THUMB_PRINT_DIR . $remotePrint, $remotePrint);\n  }\n```", "```php\n} elseif (isset($_POST['logout'])) {\n  session_unset();\n  session_destroy();\n  setcookie('PHPSESSID', 0, time() - 3600);\n  if (file_exists(THUMB_PRINT_DIR . $remotePrint)) \n    unlink(THUMB_PRINT_DIR . $remotePrint);\n    header('Location: ' . $_SERVER['REQUEST_URI'] );\n  exit;\n```", "```php\n} elseif ($loggedIn && !$printsMatch) {\n    $info = 'SESSION INVALID!!!';\n    error_log('Session Invalid: ' . date('Y-m-d H:i:s'), 0);\n    // take appropriate action\n}\n```", "```php\n    <!DOCTYPE html>\n      <body onload=\"load()\">\n      <form action=\"/chap_12_form_unprotected.php\" \n        method=\"post\" id=\"csrf_test\" name=\"csrf_test\">\n        <input name=\"name\" type=\"hidden\" value=\"No Goodnick\" />\n        <input name=\"email\" type=\"hidden\" value=\"malicious@owasp.org\" />\n        <input name=\"comments\" type=\"hidden\" \n           value=\"Form is vulnerable to CSRF attacks!\" />\n        <input name=\"process\" type=\"hidden\" value=\"1\" />\n      </form>\n      <script>\n        function load() { document.forms['csrf_test'].submit(); }\n      </script>\n    </body>\n    </html>\n    ```", "```php\n    <?php\n    define('DB_CONFIG_FILE', '/../config/db.config.php');\n    require __DIR__ . '/../Application/Autoload/Loader.php';\n    Application\\Autoload\\Loader::init(__DIR__ . '/..');\n    use Application\\Database\\Connection;\n    $conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n    ```", "```php\n    if ($_POST['process']) {\n        $filter = [\n          'trim' => function ($item) { return trim($item); },\n          'email' => function ($item) { \n            return filter_var($item, FILTER_SANITIZE_EMAIL); },\n          'length' => function ($item, $length) { \n            return substr($item, 0, $length); },\n          'stripTags' => function ($item) { \n          return strip_tags($item); },\n      ];\n\n      $assignments = [\n        '*'         => ['trim' => NULL, 'stripTags' => NULL],\n        'email'   => ['length' => 249, 'email' => NULL],\n        'name'    => ['length' => 128],\n        'comments'=> ['length' => 249],\n      ];\n\n      $data = $_POST;\n      foreach ($data as $field => $item) {\n        foreach ($assignments['*'] as $key => $option) {\n          $item = $filter[$key]($item, $option);\n        }\n        if (isset($assignments[$field])) {\n          foreach ($assignments[$field] as $key => $option) {\n            $item = $filter[$key]($item, $option);\n          }\n          $filteredData[$field] = $item;\n        }\n      }\n    ```", "```php\n    try {\n        $filteredData['visit_date'] = date('Y-m-d H:i:s');\n        $sql = 'INSERT INTO visitors '\n            . ' (email,name,comments,visit_date) '\n            . 'VALUES (:email,:name,:comments,:visit_date)';\n        $insertStmt = $conn->pdo->prepare($sql);\n        $insertStmt->execute($filteredData);\n    } catch (PDOException $e) {\n        echo $e->getMessage();\n    }\n    }\n    header('Location: /chap_12_form_view_results.php');\n    exit;\n    ```", "```php\n    session_start();\n    $token = urlencode(base64_encode((random_bytes(32))));\n    $_SESSION['token'] = $token;\n    ```", "```php\n    <input type=\"hidden\" name=\"token\" value=\"<?= $token ?>\" />\n    ```", "```php\n    if ($_POST['process']) {\n        $sessToken = $_SESSION['token'] ?? 1;\n        $postToken = $_POST['token'] ?? 2;\n        unset($_SESSION['token']);\n        if ($sessToken != $postToken) {\n            $_SESSION['message'] = 'ERROR: token mismatch';\n        } else {\n            $_SESSION['message'] = 'SUCCESS: form processed';\n            // continue with form processing\n        }\n    }\n    ```", "```php\n<?php\nsession_start();\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Database\\Connection;\n$conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n$message = $_SESSION['message'] ?? '';\nunset($_SESSION['message']);\n$stmt = $conn->pdo->query('SELECT * FROM visitors');\n?>\n<!DOCTYPE html>\n<body>\n<div class=\"container\">\n  <h1>CSRF Protection</h1>\n  <h3>Visitors Table</h3>\n  <?php while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) : ?>\n  <pre><?php echo implode(':', $row); ?></pre>\n  <?php endwhile; ?>\n  <?php if ($message) : ?>\n  <b><?= $message; ?></b>\n  <?php endif; ?>\n</div>\n</body>\n</html>\n```", "```php\n<form action=\"/chap_12_form_protected_with_token.php\" \n  method=\"post\" id=\"csrf_test\" name=\"csrf_test\">\n```", "```php\n<?php\nsession_start();\n$token = urlencode(base64_encode((random_bytes(32))));\n$_SESSION['token'] = $token;\n?>\n<!DOCTYPE html>\n<body onload=\"load()\">\n<div class=\"container\">\n<h1>CSRF Protected Form</h1>\n<form action=\"/chap_12_form_protected_with_token.php\" \n     method=\"post\" id=\"csrf_test\" name=\"csrf_test\">\n<table>\n<tr><th>Name</th><td><input name=\"name\" type=\"text\" /></td></tr>\n<tr><th>Email</th><td><input name=\"email\" type=\"text\" /></td></tr>\n<tr><th>Comments</th><td>\n<input name=\"comments\" type=\"textarea\" rows=4 cols=80 />\n</td></tr>\n<tr><th>&nbsp;</th><td>\n<input name=\"process\" type=\"submit\" value=\"Process\" />\n</td></tr>\n</table>\n<input type=\"hidden\" name=\"token\" value=\"<?= $token ?>\" />\n</form>\n<a href=\"/chap_12_form_view_results.php\">\n    CLICK HERE</a> to view results\n</div>\n</body>\n</html>\n```", "```php\n    namespace Application\\Security;\n    class PassGen\n    {\n      const SOURCE_SUFFIX = 'src';\n      const SPECIAL_CHARS = \n        '\\`\u00ac|!\"\u00a3$%^&*()_-+={}[]:@~;\\'#<>?,./|\\\\';\n      protected $algorithm;\n      protected $sourceList;\n      protected $word;\n      protected $list;\n    ```", "```php\n    public function digits($max = 999)\n    {\n      return random_int(1, $max);\n    }\n\n    public function special()\n    {\n      $maxSpecial = strlen(self::SPECIAL_CHARS) - 1;\n      return self::SPECIAL_CHARS[random_int(0, $maxSpecial)];\n    }\n    ```", "```php\n    public function processSource(\n    $wordSource, $minWordLength, $cacheDir)\n    {\n      foreach ($wordSource as $html) {\n        $hashKey = md5($html);\n        $sourceFile = $cacheDir . '/' . $hashKey . '.' \n        . self::SOURCE_SUFFIX;\n        $this->sourceList[] = $sourceFile;\n    ```", "```php\n    if (!file_exists($sourceFile) || filesize($sourceFile) == 0) {\n        echo 'Processing: ' . $html . PHP_EOL;\n        $contents = file_get_contents($html);\n        if (preg_match('/<body>(.*)<\\/body>/i', \n            $contents, $matches)) {\n            $contents = $matches[1];\n        }\n        $list = str_word_count(strip_tags($contents), 1);\n    ```", "```php\n         foreach ($list as $key => $value) {\n           if (strlen($value) < $minWordLength) {\n             $list[$key] = 'xxxxxx';\n           } else {\n             $list[$key] = trim($value);\n           }\n         }\n         $list = array_unique($list);\n         file_put_contents($sourceFile, implode(\"\\n\",$list));\n       }\n      }\n      return TRUE;\n    }\n    ```", "```php\n    public function flipUpper($word)\n    {\n      $maxLen   = strlen($word);\n      $numFlips = random_int(1, $maxLen - 1);\n      $flipped  = strtolower($word);\n      for ($x = 0; $x < $numFlips; $x++) {\n           $pos = random_int(0, $maxLen - 1);\n           $word[$pos] = strtoupper($word[$pos]);\n      }\n      return $word;\n    }\n    ```", "```php\n    public function word()\n    {\n      $wsKey    = random_int(0, count($this->sourceList) - 1);\n      $list     = file($this->sourceList[$wsKey]);\n      $maxList  = count($list) - 1;\n      $key      = random_int(0, $maxList);\n      $word     = $list[$key];\n      return $this->flipUpper($word);\n    }\n    ```", "```php\n    public function initAlgorithm()\n    {\n      $this->algorithm = [\n        ['word', 'digits', 'word', 'special'],\n        ['digits', 'word', 'special', 'word'],\n        ['word', 'word', 'special', 'digits'],\n        ['special', 'word', 'special', 'digits'],\n        ['word', 'special', 'digits', 'word', 'special'],\n        ['special', 'word', 'special', 'digits', \n        'special', 'word', 'special'],\n      ];\n    }\n    ```", "```php\n    public function __construct(\n      array $wordSource, $minWordLength, $cacheDir)\n    {\n      $this->processSource($wordSource, $minWordLength, $cacheDir);\n      $this->initAlgorithm();\n    }\n    ```", "```php\n    public function generate()\n    {\n      $pwd = '';\n      $key = random_int(0, count($this->algorithm) - 1);\n      foreach ($this->algorithm[$key] as $method) {\n        $pwd .= $this->$method();\n      }\n      return str_replace(\"\\n\", '', $pwd);\n    }\n\n    }\n    ```", "```php\n<?php\ndefine('CACHE_DIR', __DIR__ . '/cache');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Security\\PassGen;\n```", "```php\n$source = [\n  'https://www.gutenberg.org/files/4300/4300-0.txt',\n  'https://www.gutenberg.org/files/2600/2600-h/2600-h.htm',\n  'https://www.gutenberg.org/files/1342/1342-h/1342-h.htm',\n];\n```", "```php\n$passGen = new PassGen($source, 4, CACHE_DIR);\necho $passGen->generate();\n```", "```php\n    namespace Application\\Captcha;\n    class Phrase\n    {\n      const DEFAULT_LENGTH   = 5;\n      const DEFAULT_NUMBERS  = '0123456789';\n      const DEFAULT_UPPER    = 'ABCDEFGHJKLMNOPQRSTUVWXYZ';\n      const DEFAULT_LOWER    = 'abcdefghijklmnopqrstuvwxyz';\n      const DEFAULT_SPECIAL  = \n        '\u00ac\\`|!\"\u00a3$%^&*()_-+={}[]:;@\\'~#<,>.?/|\\\\';\n      const DEFAULT_SUPPRESS = ['O','l'];\n\n      protected $phrase;\n      protected $includeNumbers;\n      protected $includeUpper;\n      protected $includeLower;\n      protected $includeSpecial;\n      protected $otherChars;\n      protected $suppressChars;\n      protected $string;\n      protected $length;\n    ```", "```php\n    public function __construct(\n      $length = NULL,\n      $includeNumbers = TRUE,\n      $includeUpper= TRUE,\n      $includeLower= TRUE,\n      $includeSpecial = FALSE,\n      $otherChars = NULL,\n      array $suppressChars = NULL)\n      {\n        $this->length = $length ?? self::DEFAULT_LENGTH;\n        $this->includeNumbers = $includeNumbers;\n        $this->includeUpper = $includeUpper;\n        $this->includeLower = $includeLower;\n        $this->includeSpecial = $includeSpecial;\n        $this->otherChars = $otherChars;\n        $this->suppressChars = $suppressChars \n          ?? self::DEFAULT_SUPPRESS;\n        $this->phrase = $this->generatePhrase();\n      }\n    ```", "```php\n    public function getString()\n    {\n      return $this->string;\n    }\n\n    public function setString($string)\n    {\n      $this->string = $string;\n    }\n\n    // other getters and setters not shown\n    ```", "```php\n    public function initString()\n    {\n      $string = '';\n      if ($this->includeNumbers) {\n          $string .= self::DEFAULT_NUMBERS;\n      }\n      if ($this->includeUpper) {\n          $string .= self::DEFAULT_UPPER;\n      }\n      if ($this->includeLower) {\n          $string .= self::DEFAULT_LOWER;\n      }\n      if ($this->includeSpecial) {\n          $string .= self::DEFAULT_SPECIAL;\n      }\n      if ($this->otherChars) {\n          $string .= $this->otherChars;\n      }\n      if ($this->suppressChars) {\n          $string = str_replace(\n            $this->suppressChars, '', $string);\n      }\n      return $string;\n    }\n    ```", "```php\n    public function generatePhrase()\n    {\n      $phrase = '';\n      $this->string = $this->initString();\n      $max = strlen($this->string) - 1;\n      for ($x = 0; $x < $this->length; $x++) {\n        $phrase .= substr(\n          $this->string, random_int(0, $max), 1);\n      }\n      return $phrase;\n    }\n    }\n    ```", "```php\n    namespace Application\\Captcha;\n    interface CaptchaInterface\n    {\n      public function getLabel();\n      public function getImage();\n      public function getPhrase();\n    }\n    ```", "```php\n    namespace Application\\Captcha;\n    class Reverse implements CaptchaInterface\n    {\n      const DEFAULT_LABEL = 'Type this in reverse';\n      const DEFAULT_LENGTH = 6;\n      protected $phrase;\n      public function __construct(\n        $label  = self::DEFAULT_LABEL,\n        $length = self:: DEFAULT_LENGTH,\n        $includeNumbers = TRUE,\n        $includeUpper   = TRUE,\n        $includeLower   = TRUE,\n        $includeSpecial = FALSE,\n        $otherChars     = NULL,\n        array $suppressChars = NULL)\n      {\n        $this->label  = $label;\n        $this->phrase = new Phrase(\n          $length, \n          $includeNumbers, \n          $includeUpper,\n          $includeLower, \n          $includeSpecial, \n          $otherChars, \n          $suppressChars);\n        }\n\n      public function getLabel()\n      {\n        return $this->label;\n      }\n\n      public function getImage()\n      {\n        return strrev($this->phrase->getPhrase());\n      }\n\n      public function getPhrase()\n      {\n        return $this->phrase->getPhrase();\n      }\n\n    }\n    ```", "```php\n    namespace Application\\Captcha;\n    use DirectoryIterator;\n    class Image implements CaptchaInterface\n    {\n\n      const DEFAULT_WIDTH = 200;\n      const DEFAULT_HEIGHT = 50;\n      const DEFAULT_LABEL = 'Enter this phrase';\n      const DEFAULT_BG_COLOR = [255,255,255];\n      const DEFAULT_URL = '/captcha';\n      const IMAGE_PREFIX = 'CAPTCHA_';\n      const IMAGE_SUFFIX = '.jpg';\n      const IMAGE_EXP_TIME = 300;    // seconds\n      const ERROR_REQUIRES_GD = 'Requires the GD extension + '\n        .  ' the JPEG library';\n      const ERROR_IMAGE = 'Unable to generate image';\n\n      protected $phrase;\n      protected $imageFn;\n      protected $label;\n      protected $imageWidth;\n      protected $imageHeight;\n      protected $imageRGB;\n      protected $imageDir;\n      protected $imageUrl;\n    ```", "```php\n    public function __construct(\n      $imageDir,\n      $imageUrl,\n      $imageFont = NULL,\n      $label = NULL,\n      $length = NULL,\n      $includeNumbers = TRUE,\n      $includeUpper= TRUE,\n      $includeLower= TRUE,\n      $includeSpecial = FALSE,\n      $otherChars = NULL,\n      array $suppressChars = NULL,\n      $imageWidth = NULL,\n      $imageHeight = NULL,\n      array $imageRGB = NULL\n    )\n    {\n    ```", "```php\n    if (!function_exists('imagecreatetruecolor')) {\n        throw new \\Exception(self::ERROR_REQUIRES_GD);\n    }\n    $this->imageDir   = $imageDir;\n    $this->imageUrl   = $imageUrl;\n    $this->imageFont  = $imageFont;\n    $this->label      = $label ?? self::DEFAULT_LABEL;\n    $this->imageRGB   = $imageRGB ?? self::DEFAULT_BG_COLOR;\n    $this->imageWidth = $imageWidth ?? self::DEFAULT_WIDTH;\n    $this->imageHeight= $imageHeight ?? self::DEFAULT_HEIGHT;\n    if (substr($imageUrl, -1, 1) == '/') {\n        $imageUrl = substr($imageUrl, 0, -1);\n    }\n    $this->imageUrl = $imageUrl;\n    if (substr($imageDir, -1, 1) == DIRECTORY_SEPARATOR) {\n        $imageDir = substr($imageDir, 0, -1);\n    }\n\n    $this->phrase = new Phrase(\n      $length, \n      $includeNumbers, \n      $includeUpper,\n      $includeLower, \n      $includeSpecial, \n      $otherChars, \n      $suppressChars);\n    $this->removeOldImages();\n    $this->generateJpg();\n    }\n    ```", "```php\n    public function removeOldImages()\n    {\n      $old = time() - self::IMAGE_EXP_TIME;\n      foreach (new DirectoryIterator($this->imageDir) \n               as $fileInfo) {\n        if($fileInfo->isDot()) continue;\n        if ($fileInfo->getATime() < $old) {\n          unlink($this->imageDir . DIRECTORY_SEPARATOR \n                 . $fileInfo->getFilename());\n        }\n      }\n    }\n    ```", "```php\n    public function generateJpg()\n    {\n      try {\n          list($red,$green,$blue) = $this->imageRGB;\n          $im = imagecreatetruecolor(\n            $this->imageWidth, $this->imageHeight);\n          $black = imagecolorallocate($im, 0, 0, 0);\n          $imageBgColor = imagecolorallocate(\n            $im, $red, $green, $blue);\n          imagefilledrectangle($im, 0, 0, $this->imageWidth, \n            $this->imageHeight, $imageBgColor);\n    ```", "```php\n    $xMargin = (int) ($this->imageWidth * .1 + .5);\n    $yMargin = (int) ($this->imageHeight * .3 + .5);\n    $phrase = $this->getPhrase();\n    $max = strlen($phrase);\n    $count = 0;\n    $x = $xMargin;\n    $size = 5;\n    for ($i = 0; $i < $max; $i++) {\n    ```", "```php\n    if ($this->imageFont) {\n        $size = rand(12, 32);\n        $angle = rand(0, 30);\n        $y = rand($yMargin + $size, $this->imageHeight);\n        imagettftext($im, $size, $angle, $x, $y, $black, \n          $this->imageFont, $phrase[$i]);\n        $x += (int) ($size  + rand(0,5));\n    ```", "```php\n    } else {\n        $y = rand(0, ($this->imageHeight - $yMargin));\n        if ($count++ & 1) {\n            imagechar($im, 5, $x, $y, $phrase[$i], $black);\n        } else {\n            imagecharup($im, 5, $x, $y, $phrase[$i], $black);\n        }\n        $x += (int) ($size * 1.2);\n      }\n    } // end for ($i = 0; $i < $max; $i++)\n    ```", "```php\n    $numDots = rand(10, 999);\n    for ($i = 0; $i < $numDots; $i++) {\n      imagesetpixel($im, rand(0, $this->imageWidth), \n        rand(0, $this->imageHeight), $black);\n    }\n    ```", "```php\n    $this->imageFn = self::IMAGE_PREFIX \n    . md5(date('YmdHis') . rand(0,9999)) \n    . self::IMAGE_SUFFIX;\n    imagejpeg($im, $this->imageDir . DIRECTORY_SEPARATOR \n    . $this->imageFn);\n    imagedestroy($im);\n    ```", "```php\n    } catch (\\Throwable $e) {\n        error_log(__METHOD__ . ':' . $e->getMessage());\n        throw new \\Exception(self::ERROR_IMAGE);\n    }\n    }\n    ```", "```php\n    public function getLabel()\n    {\n      return $this->label;\n    }\n\n    public function getImage()\n    {\n      return sprintf('<img src=\"%s/%s\" />', \n        $this->imageUrl, $this->imageFn);\n    }\n\n    public function getPhrase()\n    {\n      return $this->phrase->getPhrase();\n    }\n\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Captcha\\Reverse;\n```", "```php\nsession_start();\nsession_regenerate_id();\n```", "```php\nfunction setCaptcha(&$phrase, &$label, &$image)\n{\n  $captcha = new Reverse();\n  $phrase  = $captcha->getPhrase();\n  $label   = $captcha->getLabel();\n  $image   = $captcha->getImage();\n  $_SESSION['phrase'] = $phrase;\n}\n```", "```php\n$image      = '';\n$label      = '';\n$phrase     = $_SESSION['phrase'] ?? '';\n$message    = '';\n$info       = 'You Can Now See Super Secret Information!!!';\n$loggedIn   = $_SESSION['isLoggedIn'] ?? FALSE;\n$loggedUser = $_SESSION['user'] ?? 'guest';\n```", "```php\nif (!empty($_POST['login'])) {\n  if (empty($_POST['captcha'])) {\n    $message = 'Enter Captcha Phrase and Login Information';\n```", "```php\n} else {\n    if ($_POST['captcha'] == $phrase) {\n        $username = 'test';\n        $password = 'password';\n        if ($_POST['user'] == $username \n            && $_POST['pass'] == $password) {\n            $loggedIn = TRUE;\n            $_SESSION['user'] = strip_tags($username);\n            $_SESSION['isLoggedIn'] = TRUE;\n        } else {\n            $message = 'Invalid Login';\n        }\n    } else {\n        $message = 'Invalid Captcha';\n    }\n}\n```", "```php\n} elseif (isset($_POST['logout'])) {\n  session_unset();\n  session_destroy();\n  setcookie('PHPSESSID', 0, time() - 3600);\n  header('Location: ' . $_SERVER['REQUEST_URI'] );\n  exit;\n}\n```", "```php\nsetCaptcha($phrase, $label, $image);\n```", "```php\n<tr>\n  <th><?= $label; ?></th>\n  <td><?= $image; ?><input type=\"text\" name=\"captcha\" /></td>\n</tr>\n```", "```php\n<?php\ndefine('IMAGE_DIR', __DIR__ . '/captcha');\ndefine('IMAGE_URL', '/captcha');\ndefine('IMAGE_FONT', __DIR__ . '/FreeSansBold.ttf');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Captcha\\Image;\n\nsession_start();\nsession_regenerate_id();\n```", "```php\nfunction setCaptcha(&$phrase, &$label, &$image)\n{\n  $captcha = new Image(IMAGE_DIR, IMAGE_URL, IMAGE_FONT);\n  $phrase  = $captcha->getPhrase();\n  $label   = $captcha->getLabel();\n  $image   = $captcha->getImage();\n  $_SESSION['phrase'] = $phrase;\n  return $captcha;\n}\n```", "```php\n$image      = '';\n$label      = '';\n$phrase     = $_SESSION['phrase'] ?? '';\n$message    = '';\n$info       = 'You Can Now See Super Secret Information!!!';\n$loggedIn   = $_SESSION['isLoggedIn'] ?? FALSE;\n$loggedUser = $_SESSION['user'] ?? 'guest';\n\nif (!empty($_POST['login'])) {\n\n  // etc.  -- identical to chap_12_captcha_text.php\n```", "```php\n    $iv  = random_bytes(16);\n    ```", "```php\n    $plainText = 'Super Secret Credentials';\n    $key = random_bytes(16);\n    $method = 'aes-256-xts';\n    $cipherText = openssl_encrypt($plainText, $method, $key, 0, $iv);\n    ```", "```php\n    $plainText = openssl_decrypt($cipherText, $method, $key, 0, $iv);\n    ```", "```php\n<?php\necho implode(', ', openssl_get_cipher_methods());\n```", "```php\n$plainText = 'Super Secret Credentials';\n$method = 'aes-256-xts';\n$key = random_bytes(16);\n$iv  = random_bytes(16);\n```", "```php\n$cipherText = openssl_encrypt($plainText, $method, $key, 0, $iv);\n```", "```php\n$cipherText = base64_encode($cipherText);\n```", "```php\n$plainText = openssl_decrypt(base64_decode($cipherText), \n$method, $key, 0, $iv);\n```"]