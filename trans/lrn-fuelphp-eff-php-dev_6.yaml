- en: Chapter 6. Advanced Topics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。高级主题
- en: In the previous chapters, we have run through the basics of creating a project
    in FuelPHP. We've touched upon how useful packages can be, but they can't be matched
    directly to a URL. In this chapter, we will introduce modules, which, unlike packages,
    can be accessed directly from a URL. We will also run through some of the more
    advanced topics related to FuelPHP.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们已经介绍了在FuelPHP中创建项目的基础知识。我们已经提到了包可以有多大的用处，但它们不能直接匹配URL。在本章中，我们将介绍模块，与包不同，模块可以直接从URL访问。我们还将介绍与FuelPHP相关的一些更高级的主题。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Modules—what they are and how to use them
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块-它们是什么以及如何使用它们
- en: Tasks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务
- en: Routing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由
- en: Unit testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Profiling
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析
- en: What modules are and how to use them
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块是什么以及如何使用它们
- en: In the previous chapter, we touched upon the fact that packages don't relate
    directly to a URL; they need controllers and views in the application to do this.
    Modules, on the other hand, are a group of MVC elements that can act independently
    from the project application. They allow for the encapsulation and reusability
    of your code, so that you can share a module between projects without needing
    to write an application code to fully utilize the functionality.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们提到了包与URL没有直接关联；它们需要应用程序中的控制器和视图来完成这一点。另一方面，模块是一组可以独立于项目应用程序运行的MVC元素。它们允许封装和重用代码，因此您可以在项目之间共享模块，而无需编写应用程序代码来充分利用功能。
- en: Modules are expected to reside within the modules folder within the application.
    If you would prefer to store them elsewhere, this path and folder can be changed
    in the application configuration. It's recommended to use modules on larger projects
    that consist of a large code base as they can help keep the code in order.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模块应位于应用程序中的模块文件夹中。如果您希望将它们存储在其他位置，可以在应用程序配置中更改此路径和文件夹。建议在由大量代码组成的较大项目中使用模块，因为它们可以帮助保持代码有序。
- en: Modules can be used independently and they don't need access to the global application
    code. A route can be created to allow for a module to be directly accessed via
    a URL. Since modules can include views and controllers, they can be thought of
    as mini applications in their own right.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以独立使用，它们不需要访问全局应用程序代码。可以创建路由以允许通过URL直接访问模块。由于模块可以包含视图和控制器，因此可以将它们视为自己的小型应用程序。
- en: 'By default, modules are expected to reside in the modules folder within the
    application; for example, `[rootOfProject]/fuel/app/modules`. This can be changed
    in your application `config.php` file—it appears in the section named `module_paths`.
    If you need to change the path to the modules, you will need to ensure that the
    end of the path includes the DS global variable. For example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，模块应位于应用程序中的模块文件夹中；例如，`[rootOfProject]/fuel/app/modules`。这可以在应用程序的`config.php`文件中更改-它出现在名为`module_paths`的部分中。如果需要更改模块的路径，您需要确保路径的末尾包含DS全局变量。例如：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Namespaces
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'Historically, naming classes and functions is a difficult job. We often prefer
    class names to have meaning and indicate what the class does; this can lead to
    conflicts between our code and that of a third-party code that we may also be
    using on the project. In PHP Version 5.3, we have been able to (optionally) use
    namespaces to avoid these conflicts, in FuelPHP all modules are required to have
    their own namespaces to avoid these kinds of conflicts. The namespaces must be
    named identically to the folder name for the module. For example, a module in
    the `Examplemodule` folder will have a controller like the following one:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，命名类和函数是一项困难的工作。我们通常希望类名具有意义并指示类的功能；这可能会导致我们的代码与我们在项目上可能还在使用的第三方代码之间发生冲突。在PHP版本5.3中，我们已经能够（可选地）使用命名空间来避免这些冲突，在FuelPHP中，所有模块都需要有自己的命名空间来避免这种冲突。命名空间必须与模块的文件夹名称相同。例如，`Examplemodule`文件夹中的模块将具有以下控制器：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In addition to the namespace and controller names, the module folder name also
    influences the name in the URL if you want to route to the controllers in the
    module. So, choosing the right name is important; but even without the perfect
    name, we can still change the URL routes from within the main application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了命名空间和控制器名称之外，模块文件夹名称也会影响URL中的名称，如果要路由到模块中的控制器。因此，选择正确的名称很重要；但即使没有完美的名称，我们仍然可以从主应用程序中更改URL路由。
- en: The module folder structure
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块文件夹结构
- en: 'Speaking of the folder name of the module, we should treat the module as a
    self-contained application, complete with an expected folder structure. The following
    is the expected folder structure for any module:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到模块的文件夹名称，我们应该将模块视为一个独立的应用程序，具有预期的文件夹结构。以下是任何模块的预期文件夹结构：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you will notice, the folder structure is similar to the full application
    folder structure.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，文件夹结构类似于完整应用程序文件夹结构。
- en: Using the module from the main application
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用主应用程序中的模块
- en: 'Sometimes, we may want to use some of the functions in the modules from the
    main application. In these cases, we need to autoload the class before we can
    reference the module in the code. This can be done in the following two ways:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能希望从主应用程序中使用模块中的一些函数。在这些情况下，我们需要在代码中引用模块之前自动加载类。可以通过以下两种方式完成：
- en: The first is to autoload the module in the application `config.php` file, like
    we did with the example packages
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先是在应用程序的`config.php`文件中自动加载模块，就像我们在示例包中所做的那样
- en: 'In the `''always_load''` array in the `config.php` file, you will notice a
    section for modules:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在`config.php`文件中的`'always_load'`数组中，您会注意到有一个模块部分：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: An alternative way of loading the module is to autoload it only when we need
    to, in the classes that require the module functionality.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载模块的另一种方法是仅在需要时自动加载它，在需要模块功能的类中。
- en: 'This can be done using the following code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下代码来完成：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you have loaded the module, you can call the functions from the module
    in the following way:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模块后，可以按以下方式调用模块中的函数：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As modules tend to be self-contained applications, each has a specific use and
    they are not as widely open sourced as packages are.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模块往往是自包含的应用程序，每个模块都有特定的用途，它们不像包那样广泛开源。
- en: Tasks
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务
- en: Sometimes, we will want background processes, periodic tasks, or maintenance
    tasks to occur. This is where FuelPHP tasks come in handy. They can be run via
    the command-line tool, or set up as a periodic task on Windows, or **cron** job
    on Mac OSX and *nix. They can call upon modules and other classes just like controllers
    can.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们会希望发生后台进程、周期性任务或维护任务。这就是FuelPHP任务派上用场的地方。它们可以通过命令行工具运行，或者在Windows上设置为周期性任务，或者在Mac
    OSX和*nix上设置为**cron**作业。它们可以调用模块和其他类，就像控制器一样。
- en: Tasks should be placed in the `fuel/app/tasks` folder and, by default, only
    a `run()` method needs to be defined within the class. If you need other methods,
    these can be added in the usual way for PHP classes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 任务应放置在`fuel/app/tasks`文件夹中，默认情况下，类中只需要定义一个`run()`方法。如果需要其他方法，可以像PHP类一样添加。
- en: The tasks are called using the Oil `refine` command. FuelPHP comes with an example
    task called `robots` and will be included in the `fuel/app/tasks` folder.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Oil `refine`命令调用任务。FuelPHP附带一个名为`robots`的示例任务，并将包含在`fuel/app/tasks`文件夹中。
- en: 'To call the main method of the robot task, you can run the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用机器人任务的主要方法，可以运行以下命令：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `run()` method in the `robot` task has a variable defined, allowing you
    to pass a string via the `oil refine` command. Typing the following command line
    will change the message in the task:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`robot`任务中的`run()`方法有一个定义的变量，允许您通过`oil refine`命令传递一个字符串。输入以下命令行将更改任务中的消息：'
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you look at the `robots.php` file, you will notice a second method called
    `protect()`—this can be called using the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查看`robots.php`文件，您会注意到一个名为`protect()`的第二个方法，可以使用以下代码调用它：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tasks in FuelPHP are very useful for periodic actions and are very similar to
    controllers, making them straightforward to write. They also have the advantage
    of having the same access to the core FuelPHP functionality.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: FuelPHP中的任务对于周期性操作非常有用，并且与控制器非常相似，因此编写起来很简单。它们还具有与核心FuelPHP功能相同的访问权限的优势。
- en: Routing
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由
- en: As with other frameworks, FuelPHP has fairly extensive routing capabilities.
    In this section, we will run through the basics.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架一样，FuelPHP具有相当广泛的路由功能。在本节中，我们将介绍基础知识。
- en: 'Firstly, there are a couple of reserved routes; they are: `_root_` and `_404_`.
    The `_root_` key is used when there is no URL specified; for example, the home
    page or root page. The second (`_404_`) is for when the requested content controller
    or view can''t be found.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有一些保留路由；它们是：`_root_`和`_404_`。当没有指定URL时，`_root_`键用于例如主页或根页面。第二个(`_404_`)是当无法找到请求的内容控制器或视图时使用的。
- en: 'The routes exist in the `config` folder of the application in a file called
    `routes.php`. Let''s load the `routes.php` file from the following path comprising
    the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 路由存在于应用程序的`config`文件夹中，文件名为`routes.php`。让我们从以下路径加载`routes.php`文件，其中包含以下代码：
- en: '`[rootOfProject]/fuel/app/config/routes.php`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`[rootOfProject]/fuel/app/config/routes.php`'
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see from the `routes` configuration file, the routes are stored as
    an array. The key on the left is matched to the URL and then the items on the
    right are executed by FuelPHP. This is fairly straightforward, but can lend itself
    to complex URL and keyword matching.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从`routes`配置文件中可以看出，路由被存储为数组。左侧的键与URL匹配，然后右侧的项目由FuelPHP执行。这相当简单，但可以用于复杂的URL和关键字匹配。
- en: 'The simplest routes are the ones that match a URL string directly to a controller
    and an action. These can look as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的路由是直接将URL字符串与控制器和操作匹配。它们可以如下所示：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our applications would tend to be fairly dynamic in nature, so specifying all
    the possible routes in the application would be a tedious job. This is where more
    advanced routing comes in handy. For this, we can use keywords and basic regular
    expressions to match strings in the URL and translate them to the controller method.
    These expressions make use of keywords preceded by a colon as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序往往具有相当动态的特性，因此在应用程序中指定所有可能的路由将是一项繁琐的工作。这就是更高级的路由派上用场的地方。为此，我们可以使用关键字和基本正则表达式来匹配URL中的字符串，并将它们转换为控制器方法。这些表达式使用冒号前面的关键字，如下所示：
- en: '`:any`: This keyword matches anything from that point on.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:any`：此关键字匹配从该点开始的任何内容。'
- en: '`:segment`: This keyword matches a single segment in the URL. The segment can
    be anything. This can be useful for language strings in the URL.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:segment`：此关键字匹配URL中的单个段。段可以是任何内容。这对URL中的语言字符串很有用。'
- en: '`:num`: This keyword matches numeric values in the URL.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:num`：此关键字匹配URL中的数字值。'
- en: '`:alpha`: This keyword matches any alpha characters.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:alpha`：此关键字匹配任何字母字符。'
- en: '`:alnum`: This keyword matches any alphanumeric characters.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`:alnum`：此关键字匹配任何字母数字字符。'
- en: 'Using the following code, the router will match *any* journal entry and then
    send the entry name to the `entry` method in the `journal` controller:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码，路由器将匹配*任何*日志条目，然后将条目名称发送到`journal`控制器中的`entry`方法：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The code in the following example will allow any preceding segment to be used
    for URLs like `/en/contact` and will send the language flag as a variable to the
    `contact` method in the site controller. The final URL would be something like
    `/site/contact/en`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例中的代码将允许任何前面的段用于像`/en/contact`这样的URL，并将语言标志作为变量发送到站点控制器中的`contact`方法。最终的URL将类似于`/site/contact/en`：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As developers, we often try to make our code more readable by choosing clear
    and descriptive variable names. The same can be done with more advanced routing
    in FuelPHP, as it allows you to use named parameters in the routes. These named
    segments can then be accessed from within your methods or actions. For example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们经常尝试通过选择清晰和描述性的变量名使我们的代码更易读。在FuelPHP中，更高级的路由也可以做到这一点，因为它允许您在路由中使用命名参数。然后可以从您的方法或操作中访问这些命名段。例如：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this route, `/journal/2013/11/5/name` would be routed to the entry method
    within the journal controller. In the entry method, we can get the named segments
    in the following manner:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个路由中，`/journal/2013/11/5/name`将路由到日志控制器中的entry方法。在entry方法中，我们可以以以下方式获取命名段：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'FuelPHP uses regex for the named segments to work within the route. Each segment
    counts as a back reference, for example, the `$1` and `$2` regex placeholders—we
    often use these when making use of regular expressions in PHP. Back references
    are a regex term and more information can be found at the following website:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: FuelPHP使用正则表达式来使命名段在路由中工作。每个段都算作一个反向引用，例如，`$1`和`$2`正则表达式占位符——我们在PHP中经常使用这些当使用正则表达式时。反向引用是一个正则表达式术语，更多信息可以在以下网站找到：
- en: '[http://www.regular-expressions.info/brackets.html#usebackrefinregex](http://www.regular-expressions.info/brackets.html#usebackrefinregex)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.regular-expressions.info/brackets.html#usebackrefinregex](http://www.regular-expressions.info/brackets.html#usebackrefinregex)'
- en: In a route of `:name/(\d{2}`, the digit (`d{2}`)would be found using the variable
    `$2` and the variable `$1` would return the value of the `:name` segment.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`:name/(\d{2}`的路由中，数字（`d{2}`）将使用变量`$2`找到，变量`$1`将返回`:name`段的值。
- en: We mentioned the RESTful controller template in the previous chapters. These
    can be used in conjunction with verb-based routing to direct requests to the correct
    methods in the RESTful controllers. This allows the route to a certain URL to
    be routed through to different methods and controllers in order to fit with the
    functionality.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中提到了RESTful控制器模板。这些可以与基于动词的路由一起使用，将请求定向到RESTful控制器中的正确方法。这允许将某个URL的路由通过不同的方法和控制器以适应功能。
- en: 'For example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: A `POST` request to `/journal` could be routed to the `create` method in the
    journal controller
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`/journal`的`POST`请求可以路由到日志控制器中的`create`方法。
- en: A `GET` request to `/journal` could be routed to the `index` method in the journal
    controller
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对`/journal`的`GET`请求可以路由到日志控制器中的`index`方法
- en: 'These requests all follow the recommended use of the HTTP verbs to perform
    actions in the application and the route in the `routes.php` file would look something
    like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些请求都遵循HTTP动词的推荐用法，以执行应用程序中的操作，`routes.php`文件中的路由看起来会像以下内容：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We could do something similar for the `PUT` and `DELETE` verbs and use regex
    and named parameters to make it easier to get the relevant information from the
    URL.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对`PUT`和`DELETE`动词做类似的事情，并使用正则表达式和命名参数使得从URL中获取相关信息更容易。
- en: 'If you are working with user profile information and data, we would look to
    use HTTPS or secure connections; again, routing in FuelPHP supports this. The
    following example would only load the route if the request is sent via HTTPS,
    rather than just HTTP:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在处理用户配置文件信息和数据，我们将寻求使用HTTPS或安全连接；同样，FuelPHP中的路由支持这一点。以下示例只会在通过HTTPS发送请求时加载路由，而不仅仅是HTTP：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The third parameter ensures that the named route is only used when HTTPS is
    used.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数确保命名路由仅在使用HTTPS时使用。
- en: 'During development, we often rearrange the structure of the application to
    reflect the changing functionality. One feature of routes in FuelPHP, that aim
    to make routing easier, is called named routes and reverse routing. With this
    feature, instead of editing all of our views, we can simply change the named route
    in the main `routes.php` file. For this to work, we need to use the name of the
    route in our views. In the following example, we change `''admin/app/dashboard''`
    to `''admin/dashboard''`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，我们经常重新排列应用程序的结构以反映不断变化的功能。FuelPHP中使路由更容易的一个特性是命名路由和反向路由。有了这个特性，我们可以简单地在主`routes.php`文件中更改命名路由，而不是编辑所有的视图。为了使其工作，我们需要在视图中使用路由的名称。在以下示例中，我们将`'admin/app/dashboard'`更改为`'admin/dashboard'`：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In our views that need to link to the dashboard, we would use the following
    `anchor` code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要链接到仪表板的视图中，我们将使用以下`anchor`代码：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This only works for application code and will not work for module routes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅适用于应用程序代码，不适用于模块路由。
- en: Unit testing
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: No modern framework would be complete without the ability to test the application
    code and functionality. FuelPHP has been built with this in mind and, thus, includes
    tests and test cases based on the PHPUnit testing framework.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 没有现代框架会完整而没有测试应用程序代码和功能的能力。FuelPHP已经考虑到了这一点，因此包括基于PHPUnit测试框架的测试和测试用例。
- en: So what is unit testing?
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么什么是单元测试？
- en: Unit tests are automated tests written to check whether or not the units of
    functionality (methods and functions) are working as expected. The tests typically
    test whether or not, for a given input, the output is correct, treating the functions
    as a black box to ensure that the internal logic works.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是自动化测试，用于检查功能单元（方法和函数）是否按预期工作。这些测试通常测试给定输入时输出是否正确，将函数视为黑盒以确保内部逻辑工作。
- en: Since unit testing is automated, it's easy to ensure that the recent code changes
    don't break other functionality. It also allows for the use of a continuous integration
    server such as Jenkins ([http://jenkins-ci.org](http://jenkins-ci.org)). A continuous
    integration server will automatically deploy your code for you once the code passes
    the unit testing, allowing you to concentrate on the actual code.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于单元测试是自动化的，很容易确保最近的代码更改不会破坏其他功能。它还允许使用持续集成服务器，如Jenkins（[http://jenkins-ci.org](http://jenkins-ci.org)）。持续集成服务器将在代码通过单元测试后自动部署您的代码，让您可以专注于实际的代码。
- en: PHPUnit
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHPUnit
- en: 'There are several unit testing tools available in PHP, but the de facto standard
    is PHPUnit by Sebastian Bergmann. This is the testing framework supported by FuelPHP
    and is run using the Oil command-line tool. But, before using it, you will need
    to ensure that PHPUnit is installed. For the most up-to-date installation instructions,
    I''d recommend browsing the official documentation available at the following
    link:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: PHP中有几种单元测试工具，但事实上的标准是Sebastian Bergmann的PHPUnit。这是FuelPHP支持的测试框架，并且可以使用Oil命令行工具运行。但在使用之前，您需要确保已安装PHPUnit。有关最新的安装说明，我建议浏览以下链接提供的官方文档：
- en: '[http://www.phpunit.de/manual/current/en/installation.html](http://www.phpunit.de/manual/current/en/installation.html)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.phpunit.de/manual/current/en/installation.html](http://www.phpunit.de/manual/current/en/installation.html)'
- en: Running unit tests
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行单元测试
- en: 'Unit tests are run using the FuelPHP Oil command-line tool and can be run using
    `php oil test`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用FuelPHP Oil命令行工具运行单元测试，可以使用`php oil test`：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Creating unit tests
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建单元测试
- en: The tests are located in the application in the `fuel/app/tests` folder and
    will read any tests in its subfolders. The tests files should follow a similar
    structure to the classes they are testing. So, if you were testing the category
    model (`/fuel/app/classes/model/category.php`) it would have a test file located
    at `fuel/app/tests/model/category.php`. The test cases should extend the `TestCase`
    class, which is an extension of the `PHPUnit_Framework_TestCase` class. This means
    that you will be able to use the usual PHPUnit assertions and methods in your
    tests.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 测试位于应用程序的`fuel/app/tests`文件夹中，并将读取其子文件夹中的任何测试。测试文件应该遵循与它们正在测试的类相似的结构。因此，如果您要测试类别模型(`/fuel/app/classes/model/category.php`)，它将在`fuel/app/tests/model/category.php`中找到一个测试文件。测试用例应该扩展`TestCase`类，这是`PHPUnit_Framework_TestCase`类的扩展。这意味着您将能够在测试中使用通常的PHPUnit断言和方法。
- en: 'The name of the class should be prefixed with `Test_`. Similarly, the category
    test should be named `Test_Model_Category`. The class should look something like
    the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 类的名称应该以`Test_`为前缀。同样，类别测试应该被命名为`Test_Model_Category`。类应该看起来像下面这样：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The official documentation lists many assertions and recommended ways of writing
    unit tests. The documentation can be found at the following link:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档列出了许多断言和编写单元测试的推荐方法。文档可以在以下链接找到：
- en: '[http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html](http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html](http://www.phpunit.de/manual/current/en/writing-tests-for-phpunit.html)'
- en: Grouping unit tests
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分组单元测试
- en: 'As your application grows, sometimes, running all the unit tests can be time
    consuming; as such, we can group tests together and then only test certain groups.
    This is done with the `--group=` command at the end of the usual `test` command.
    So, running the `User` group of tests can be done using the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序的增长，有时运行所有单元测试可能会耗费时间；因此，我们可以将测试分组在一起，然后只测试某些组。这是通过在通常的`test`命令的末尾使用`--group=`命令来完成的。因此，可以使用以下代码运行`User`组的测试：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The grouping is done in a `docbloc` comment in each testing class and each
    test case can be assigned to multiple groups. The following code snippet would
    assign the category model `Test` to `Blog` and `App` groups:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 分组是在每个测试类的`docbloc`注释中完成的，每个测试用例可以分配给多个组。以下代码片段将类别模型`Test`分配给`Blog`和`App`组：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Configuration and module testing
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置和模块测试
- en: FuelPHP uses configuration in the `phpunit.xml` file, which is included in the
    `fuel/core/` folder. To customize the configuration, we need to copy this file
    to our application and then make the changes there. FuelPHP will load the application
    `phpunit.xml` in favor of the core version.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: FuelPHP使用`phpunit.xml`文件中的配置，该文件包含在`fuel/core/`文件夹中。要自定义配置，我们需要将此文件复制到我们的应用程序，然后在那里进行更改。FuelPHP将加载应用程序`phpunit.xml`以取代核心版本。
- en: 'As mentioned earlier, modules are applications in their own right—like unit
    testing. The unit tests should be included in a `test` folder within the top level
    of each module. For FuelPHP to run the tests in modules, it needs to know that
    they exist. This is done by including the modules folder in the `phpunit.xml`
    file. Once you have made a copy of the core FuelPHP `phpunit.xml` file, you can
    add the following code snippet:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，模块是自己的应用程序，就像单元测试一样。单元测试应该包含在每个模块顶层的`test`文件夹中。为了使FuelPHP运行模块中的测试，它需要知道它们的存在。这是通过在`phpunit.xml`文件中包含模块文件夹来完成的。一旦您复制了核心FuelPHP`phpunit.xml`文件，就可以添加以下代码片段：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now that you know a little about unit testing in FuelPHP, let's cover another
    aspect of development—the ability to profile your application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对FuelPHP中的单元测试有了一点了解，让我们来介绍开发的另一个方面——对应用程序进行分析的能力。
- en: Profiling
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析
- en: FuelPHP includes a **profiler** which is based on **PHP Quick Profiler**. This
    allows you to profile and debug your code, all without needing to write extra
    functions within the application. The profiler can be switched on and off via
    the application `config.php` file. To enable the profiler, simply change the `'profiling'`
    variable to `true`, and set it to `false` to disable the profiler.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: FuelPHP包括一个基于**PHP Quick Profiler**的**profiler**。这允许您对代码进行分析和调试，而无需在应用程序中编写额外的函数。通过应用程序的`config.php`文件可以打开和关闭profiler。要启用profiler，只需将`'profiling'`变量更改为`true`，并将其设置为`false`以禁用profiler。
- en: 'The profiler also includes a database-profiling tool, but, due to the resources
    required, it is disabled by default. The database profiler will need to be enabled
    corresponding to the environment used so that the development environment can
    have it enabled without affecting other environments. It can be enabled in the
    environment''s `db.php` file using the `true` value, as shown in the following
    code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: profiler还包括一个数据库分析工具，但由于所需的资源，它默认情况下是禁用的。数据库分析器将需要根据使用的环境进行启用，以便开发环境可以在不影响其他环境的情况下启用它。它可以在环境的`db.php`文件中使用`true`值进行启用，如下面的代码所示：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Profiling](graphics/0366_06_01.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![Profiling](graphics/0366_06_01.jpg)'
- en: 'The profiler has a tabbed interface and consists of the following tabs:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器具有选项卡界面，包括以下选项卡：
- en: '**Console**: This is the default tab giving information about errors, log entries,
    and memory usage, along with execution timings'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制台：这是默认选项卡，提供有关错误、日志条目和内存使用情况以及执行时间的信息
- en: '**Load Time**: This tab shows the request load time'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载时间：此选项卡显示请求加载时间
- en: '**Database**: This tab shows the execution time and number of database queries
    executed'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库：此选项卡显示执行时间和执行的数据库查询数量
- en: '**Memory Used**: This is the peak memory used by the page load'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存使用：这是页面加载时使用的峰值内存
- en: '**Included**: This tab shows the list of files loaded with their filenames
    and sizes'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括：此选项卡显示加载的文件列表及其文件名和大小
- en: '**items loaded**: This tab show the final configuration variables at the end
    of the page load'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载的项目：此选项卡显示页面加载结束时的最终配置变量
- en: '**vars loaded**: This tab shows the contents of the session at the end of the
    page load'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载的变量：此选项卡显示页面加载结束时会话的内容
- en: '**GET**: This tab shows the `$_GET` array contents'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GET：此选项卡显示`$_GET`数组的内容
- en: '**POST**: This tab shows the `$_POST` array contents'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POST：此选项卡显示`$_POST`数组的内容
- en: The profiler provides a lot of information that can help you in optimizing your
    application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器提供了许多信息，可以帮助您优化应用程序。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have introduced modules and how we can use them to quickly
    build our applications. We have touched upon unit testing and how to enable the
    profiler to optimize our code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了模块以及如何使用它们快速构建我们的应用程序。我们已经涉及单元测试以及如何启用分析器来优化我们的代码。
- en: We have configured some basic routes and detailed where any changes will need
    to be placed. Named routes are a very powerful tool that can be used to counter
    changing project and client requirements. They allow us to reduce the number of
    changes that need to be made.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经配置了一些基本路由，并详细说明了需要放置任何更改的位置。命名路由是一个非常强大的工具，可以用来应对项目和客户需求的变化。它们使我们能够减少需要进行的更改数量。
- en: Tasks are a great way of building background or period functionality in our
    application and are really easy to run with the FuelPHP Oil command-line utility.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 任务是在我们的应用程序中构建后台或周期功能的一种很好的方式，并且使用FuelPHP Oil命令行实用程序非常容易运行。
- en: In the next chapter, we will introduce some ways to publicize our applications,
    packages, or modules within the FuelPHP community.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些在FuelPHP社区内宣传我们的应用程序、包或模块的方法。
