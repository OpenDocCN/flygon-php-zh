["```php\n**configure --help**\n\n```", "```php\n**sudo apt-get install php7**\n\n```", "```php\n**su**\n\n```", "```php\n**yast -i php7**\n\n```", "```php\n    cd /path/to/recipes\n    php -S localhost:8080\n    ```", "```php\n    **php -S localhost:8080 -t source/chapter01**\n\n    ```", "```php\n    CREATE DATABASE IF NOT EXISTS dbname DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\n    CREATE USER 'user'@'%' IDENTIFIED WITH mysql_native_password;\n    SET PASSWORD FOR 'user'@'%' = PASSWORD('userPassword');\n    GRANT ALL PRIVILEGES ON dbname.* to 'user'@'%';\n    GRANT ALL PRIVILEGES ON dbname.* to 'user'@'localhost';\n    FLUSH PRIVILEGES;\n    ```", "```php\n**php phpunit.phar <command>**\n\n```", "```php\n    protected static function loadFile($file)\n    {\n        if (file_exists($file)) {\n            require_once $file;\n            return TRUE;\n        }\n        return FALSE;\n    }\n    ```", "```php\n    public static function autoLoad($class)\n    {\n        $success = FALSE;\n        $fn = str_replace('\\\\', DIRECTORY_SEPARATOR, $class) \n              . '.php';\n        foreach (self::$dirs as $start) {\n            $file = $start . DIRECTORY_SEPARATOR . $fn;\n            if (self::loadFile($file)) {\n                $success = TRUE;\n                break;\n            }\n        }\n        if (!$success) {\n            if (!self::loadFile(__DIR__ \n                . DIRECTORY_SEPARATOR . $fn)) {\n                throw new \\Exception(\n                    self::UNABLE_TO_LOAD . ' ' . $class);\n            }\n        }\n        return $success;\n    }\n    ```", "```php\n    public static function addDirs($dirs)\n    {\n        if (is_array($dirs)) {\n            self::$dirs = array_merge(self::$dirs, $dirs);\n        } else {\n            self::$dirs[] = $dirs;\n        }\n    }  \n    ```", "```php\n    public static function init($dirs = array())\n    {\n        if ($dirs) {\n            self::addDirs($dirs);\n        }\n        if (self::$registered == 0) {\n            spl_autoload_register(__CLASS__ . '::autoload');\n            self::$registered++;\n        }\n    }\n    ```", "```php\n    public function __construct($dirs = array())\n    {\n        self::init($dirs);\n    }\n    ```", "```php\n<?php\nnamespace Application\\Test;\nclass TestClass\n{\n    public function getTest()\n    {\n        return __METHOD__;\n    }\n}\n```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n```", "```php\n$test = new Application\\Test\\TestClass();\necho $test->getTest();\n```", "```php\n$fake = new Application\\Test\\FakeClass();\necho $fake->getTest();\n```", "```php\n    public function getContent($url)\n    {\n        if (!$this->content) {\n            if (stripos($url, 'http') !== 0) {\n                $url = 'http://' . $url;\n            }\n            $this->content = new DOMDocument('1.0', 'utf-8');\n            $this->content->preserveWhiteSpace = FALSE;\n            // @ used to suppress warnings generated from // improperly configured web pages\n            @$this->content->loadHTMLFile($url);\n        }\n        return $this->content;\n    }\n    ```", "```php\n    public function getTags($url, $tag)\n    {\n        $count    = 0;\n        $result   = array();\n        $elements = $this->getContent($url)\n                         ->getElementsByTagName($tag);\n        foreach ($elements as $node) {\n            $result[$count]['value'] = trim(preg_replace('/\\s+/', ' ', $node->nodeValue));\n            if ($node->hasAttributes()) {\n                foreach ($node->attributes as $name => $attr) \n                {\n                    $result[$count]['attributes'][$name] = \n                        $attr->value;\n                }\n            }\n            $count++;\n        }\n        return $result;\n    }\n    ```", "```php\n    public function getAttribute($url, $attr, $domain = NULL)\n    {\n        $result   = array();\n        $elements = $this->getContent($url)\n                         ->getElementsByTagName('*');\n        foreach ($elements as $node) {\n            if ($node->hasAttribute($attr)) {\n                $value = $node->getAttribute($attr);\n                if ($domain) {\n                    if (stripos($value, $domain) !== FALSE) {\n                        $result[] = trim($value);\n                    }\n                } else {\n                    $result[] = trim($value);\n                }\n            }\n        }\n        return $result;\n    }\n    ```", "```php\n<?php\n// modify as needed\ndefine('DEFAULT_URL', 'http://oreilly.com/');\ndefine('DEFAULT_TAG', 'a');\n\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n\n// get \"vacuum\" class\n$vac = new Application\\Web\\Hoover();\n\n// NOTE: the PHP 7 null coalesce operator is used\n$url = strip_tags($_GET['url'] ?? DEFAULT_URL);\n$tag = strip_tags($_GET['tag'] ?? DEFAULT_TAG);\n\necho 'Dump of Tags: ' . PHP_EOL;\nvar_dump($vac->getTags($url, $tag));\n```", "```php\n    namespace Application\\Web;\n    class Deep\n    {\n        protected $domain;\n    ```", "```php\n    public function scan($url, $tag)\n    {\n        $vac    = new Hoover();\n        $scan   = $vac->getAttribute($url, 'href', \n           $this->getDomain($url));\n        $result = array();\n        foreach ($scan as $subSite) {\n            yield from $vac->getTags($subSite, $tag);\n        }\n        return count($scan);\n    }\n    ```", "```php\n    public function getDomain($url)\n    {\n        if (!$this->domain) {\n            $this->domain = parse_url($url, PHP_URL_HOST);\n        }\n        return $this->domain;\n    }\n    ```", "```php\n<?php\n// modify as needed\ndefine('DEFAULT_URL', unlikelysource.com');\ndefine('DEFAULT_TAG', 'img');\n\nrequire __DIR__ . '/../../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/../..');\n```", "```php\n$deep = new Application\\Web\\Deep();\n```", "```php\n$url = strip_tags($_GET['url'] ?? DEFAULT_URL);\n$tag = strip_tags($_GET['tag'] ?? DEFAULT_TAG);\n```", "```php\nforeach ($deep->scan($url, $tag) as $item) {\n    $src = $item['attributes']['src'] ?? NULL;\n    if ($src && (stripos($src, 'png') || stripos($src, 'jpg'))) {\n        printf('<br><img src=\"%s\"/>', $src);\n    }\n}\n```", "```php\n    public function scan($filename)\n    {\n        if (!file_exists($filename)) {\n            throw new Exception(\n                self::EXCEPTION_FILE_NOT_EXISTS);\n        }\n        $contents = file($filename);\n        echo 'Processing: ' . $filename . PHP_EOL;\n\n        $result = preg_replace_callback_array( [\n    ```", "```php\n        // replace no-longer-supported opening tags\n        '!^\\<\\%(\\n| )!' =>\n            function ($match) {\n                return '<?php' . $match[1];\n            },\n\n        // replace no-longer-supported opening tags\n        '!^\\<\\%=(\\n| )!' =>\n            function ($match) {\n                return '<?php echo ' . $match[1];\n            },\n\n        // replace no-longer-supported closing tag\n        '!\\%\\>!' =>\n            function ($match) {\n                return '?>';\n            },\n    ```", "```php\n        // changes in how $$xxx interpretation is handled\n        '!(.*?)\\$\\$!' =>\n            function ($match) {\n                return '// WARNING: variable interpolation \n                       . ' now occurs left-to-right' . PHP_EOL\n                       . '// see: http://php.net/manual/en/'\n                       . '// migration70.incompatible.php'\n                       . $match[0];\n            },\n\n        // changes in how the list() operator is handled\n        '!(.*?)list(\\s*?)?\\(!' =>\n            function ($match) {\n                return '// WARNING: changes have been made '\n                       . 'in list() operator handling.'\n                       . 'See: http://php.net/manual/en/'\n                       . 'migration70.incompatible.php'\n                       . $match[0];\n            },\n\n        // instances of \\u{\n        '!(.*?)\\\\\\u\\{!' =>\n            function ($match) {\n            return '// WARNING: \\\\u{xxx} is now considered '\n                   . 'unicode escape syntax' . PHP_EOL\n                   . '// see: http://php.net/manual/en/'\n                   . 'migration70.new-features.php'\n                   . '#migration70.new-features.unicode-'\n                   . 'codepoint-escape-syntax' . PHP_EOL\n                   . $match[0];\n        },\n\n        // relying upon set_error_handler()\n        '!(.*?)set_error_handler(\\s*?)?.*\\(!' =>\n            function ($match) {\n                return '// WARNING: might not '\n                       . 'catch all errors'\n                       . '// see: http://php.net/manual/en/'\n                       . '// language.errors.php7.php'\n                       . $match[0];\n            },\n\n        // session_set_save_handler(xxx)\n        '!(.*?)session_set_save_handler(\\s*?)?\\((.*?)\\)!' =>\n            function ($match) {\n                if (isset($match[3])) {\n                    return '// WARNING: a bug introduced in'\n                           . 'PHP 5.4 which '\n                           . 'affects the handler assigned by '\n                           . 'session_set_save_handler() and '\n                           . 'where ignore_user_abort() is TRUE \n                           . 'has been fixed in PHP 7.'\n                           . 'This could potentially break '\n                           . 'your code under '\n                           . 'certain circumstances.' . PHP_EOL\n                           . 'See: http://php.net/manual/en/'\n                           . 'migration70.incompatible.php'\n                           . $match[0];\n                } else {\n                    return $match[0];\n                }\n            },\n    ```", "```php\n        // wraps bit shift operations in try / catch\n        '!^(.*?)(\\d+\\s*(\\<\\<|\\>\\>)\\s*-?\\d+)(.*?)$!' =>\n            function ($match) {\n                return '// WARNING: negative and '\n                       . 'out-of-range bitwise '\n                       . 'shift operations will now \n                       . 'throw an ArithmeticError' . PHP_EOL\n                       . 'See: http://php.net/manual/en/'\n                       . 'migration70.incompatible.php'\n                       . 'try {' . PHP_EOL\n                       . \"\\t\" . $match[0] . PHP_EOL\n                       . '} catch (\\\\ArithmeticError $e) {'\n                       . \"\\t\" . 'error_log(\"File:\" \n                       . $e->getFile() \n                       . \" Message:\" . $e->getMessage());'\n                       . '}' . PHP_EOL;\n            },\n    ```", "```php\n        // replaces \"call_user_method()\" with\n        // \"call_user_func()\"\n        '!call_user_method\\((.*?),(.*?)(,.*?)\\)(\\b|;)!' =>\n            function ($match) {\n                $params = $match[3] ?? '';\n                return '// WARNING: call_user_method() has '\n                          . 'been removed from PHP 7' . PHP_EOL\n                          . 'call_user_func(['. trim($match[2]) . ',' \n                          . trim($match[1]) . ']' . $params . ');';\n            },\n\n        // replaces \"call_user_method_array()\" \n        // with \"call_user_func_array()\"\n        '!call_user_method_array\\((.*?),(.*?),(.*?)\\)(\\b|;)!' =>\n            function ($match) {\n                return '// WARNING: call_user_method_array()'\n                       . 'has been removed from PHP 7'\n                       . PHP_EOL\n                       . 'call_user_func_array([' \n                       . trim($match[2]) . ',' \n                       . trim($match[1]) . '], ' \n                       . $match[3] . ');';\n            },\n    ```", "```php\n         '!^(.*?)preg_replace.*?/e(.*?)$!' =>\n        function ($match) {\n            $last = strrchr($match[2], ',');\n            $arg2 = substr($match[2], 2, -1 * (strlen($last)));\n            $arg1 = substr($match[0], \n                           strlen($match[1]) + 12, \n                           -1 * (strlen($arg2) + strlen($last)));\n             $arg1 = trim($arg1, '(');\n             $arg1 = str_replace('/e', '/', $arg1);\n             $arg3 = '// WARNING: preg_replace() \"/e\" modifier \n                       . 'has been removed from PHP 7'\n                       . PHP_EOL\n                       . $match[1]\n                       . 'preg_replace_callback('\n                       . $arg1\n                       . 'function ($m) { return ' \n                       .    str_replace('$1','$m', $match[1]) \n                       .      trim($arg2, '\"\\'') . '; }, '\n                       .      trim($last, ',');\n             return str_replace('$1', '$m', $arg3);\n        },\n\n            // end array\n            ],\n\n            // this is the target of the transformations\n            $contents\n        );\n        // return the result as a string\n        return implode('', $result);\n    }\n    ```", "```php\n<?php\n// get filename to scan from command line\n$filename = $argv[1] ?? '';\n\nif (!$filename) {\n    echo 'No filename provided' . PHP_EOL;\n    echo 'Usage: ' . PHP_EOL;\n    echo __FILE__ . ' <filename>' . PHP_EOL;\n    exit;\n}\n\n// setup class autoloading\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\n\n// add current directory to the path\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n\n// get \"deep scan\" class\n$convert = new Application\\Parse\\Convert();\necho $convert->scan($filename);\necho PHP_EOL;\n```"]