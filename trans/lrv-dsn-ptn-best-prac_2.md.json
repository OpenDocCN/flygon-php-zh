["```php\n<?php namespace Illuminate\\Database\\Query;\n\nuse Closure;\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Database\\ConnectionInterface;\nuse Illuminate\\Database\\Query\\Grammars\\Grammar;\nuse Illuminate\\Database\\Query\\Processors\\Processor;\n\nclass Builder {\n    //methods and variables come here\n}\n```", "```php\n    $users = DB::table('users')->get();\n    foreach ($users as $user)\n    {\n        var_dump($user->name);\n    }\n    ```", "```php\n    $user = DB::table('users')->where('name', 'Arda')->first();\n    var_dump($user->name);\n    ```", "```php\n    $user = DB::table('users')\n    ->where('name', 'Arda')\n    ->orWhere('name', 'Ibrahim')\n    ->first();\n    var_dump($user->name);\n    ```", "```php\n    $user = DB::table('users')->where('id', '>', '2')->get();\n    foreach ($users as $user)\n    {\n        var_dump($user->email);\n    }\n    ```", "```php\n    $users = DB::table('users')->skip(10)->take(5)->get();\n    ```", "```php\n    DB::table('users')\n       ->join('contacts', 'users.id', '=', 'contacts.user_id')\n       ->join('orders', 'users.id', '=', 'orders.user_id')\n       ->select('users.id', 'contacts.phone', 'orders.price');\n    ```", "```php\n    DB::table('users')\n        ->where('name', '=', 'John')\n        ->orWhere(function($query)\n        {\n            $query->where('votes', '>', 100)\n                  ->where('title', '<>', 'Admin');\n        })\n        ->get();\n    ```", "```php\n    select * from users \n       where name = 'John' \n       or \n       (votes > 100 and title <> 'Admin')\n    ```", "```php\n    $users = DB::table('users')->count();\n    $price = DB::table('orders')->max('price');\n    ```", "```php\n    $users = DB::table('users')\n         ->select(\n    array(\n    DB::raw('count(*) as user_count'),\n    'status',\n    )\n    )\n         ->where('status', '<>', 1)\n         ->groupBy('status')\n         ->get();\n    ```", "```php\n    DB::table('users')->insert(\n        array('email' => 'me@ardakilicdagi.com', 'points' => 100)\n    ); \n    ```", "```php\n    DB::table('users')\n    ->where('id', 1)\n    ->update(array('votes' => 100)); \n    ```", "```php\n    DB::table('users')\n    ->where('last_login', '2013-01-01 00:00:00')\n    ->delete(); \n    ```", "```php\n    $user = DB::table('users')\n    ->where('name', 'Arda')\n    ->remember(10)\n    ->first();\n    ```", "```php\n<?php class Post extends Eloquent {}\n```", "```php\n<?php Class Post Extends Eloquent {\n\n   protected $table = 'my_uber_posts_table';\n\n}\n```", "```php\n<?php namespace Illuminate\\Database\\Eloquent;\n\nuse DateTime;\nuse ArrayAccess;\nuse Carbon\\Carbon;\nuse LogicException;\nuse JsonSerializable;\nuse Illuminate\\Events\\Dispatcher;\nuse Illuminate\\Database\\Eloquent\\Relations\\Pivot;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOne;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\nuse Illuminate\\Support\\Contracts\\JsonableInterface;\nuse Illuminate\\Support\\Contracts\\ArrayableInterface;\nuse Illuminate\\Database\\Eloquent\\Relations\\Relation;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphOne;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\nuse Illuminate\\Database\\Query\\Builder as QueryBuilder;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphToMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough;\nuse Illuminate\\Database\\ConnectionResolverInterface as Resolver;\n\nabstract class Model implements ArrayAccess, ArrayableInterface, JsonableInterface, JsonSerializable {\n   //Methods and variables come here\n}\n```", "```php\nUser::find(5)->posts;\n```", "```php\n    //User.php model\n    Class User Extends Eloquent {\n\n       public function phone() {\n          return $this->hasOne('Phone'); //Phone is the name of Model Instance here, not a table or column name\n       }\n\n    }\n\n    //Phone.php model\n    Class Phone Extends Eloquent {\n\n       public function user() {\n          return $this->hasOne('User');\n       }\n\n    }\n    ```", "```php\n    //Category.php model\n    class Category extends Eloquent {\n\n       public function news() {\n          return $this->hasMany('News'); //News is the name of Model Instance here\n       }\n\n    }\n\n    //News.php model\n    class News extends Eloquent {\n\n       public function categories() {\n          return $this->belongsTo('Category');\n       }\n\n    }\n    ```", "```php\n    //Blog.php Model\n    Class Blog Extends Eloquent {\n\n       public function tags() {\n          return $this->belongsToMany('Tag', 'blog_tag'); //blog_tag is the name of the pivot table\n       }\n\n    }\n\n    //Tag.php model\n    Class Tag Extends Eloquent {\n\n       public function blogs() {\n          return $this->belongsToMany('Blog', 'blog_tag');\n       }\n\n    }\n    ```", "```php\n    //Country.php Model\n    Class Country Extends Eloquent {\n\n       public function posts() {\n          return $this->hasManyThrough('Post', 'User');\n       }\n\n    }\n    ```", "```php\n    //Photo.php Model\n    Class Photo Extends Eloquent {\n\n       public function imageable() {\n          return $this->morphTo(); //This method doesn't take any parameters, Eloquent will understand what will be morphed by calling this method\n       }\n\n    }\n\n    //News.php Model\n    Class News Extends Eloquent {\n\n       public function photos() {\n          return $this->morphMany('Photo', 'imageable');\n       }\n\n    }\n\n    //Blog.php Model\n    Class Blog Extends Eloquent {\n\n       public function photos() {\n          return $this->morphMany('Photo', 'imageable');\n       }\n\n    }\n    ```", "```php\n    $photo = Photo::find(1);\n    $owner = $photo->imageable; //This brings either a blog collection or News according to its owner.\n    ```", "```php\n//User.php model\nClass User Extends Eloquent {\n   //Disable the mass assignment of the column email \n   protected $guarded = array('email');\n\n}\n\n//Blog.php model\nClass User Extends Eloquent {\n   //Only allow title and body columns to be mass assigned\n   protected $fillable = array('title', 'body');\n\n}\n```", "```php\n//Post.php model\nClass Post Extends Eloquent {\n   //Allow Soft Deletes\n   protected $softDelete = true;\n\n}\n```", "```php\n$allPosts = Post::withTrashed()->get(); //These results will include both soft-deleted and non-soft-deleted posts.\n```", "```php\n$onlySoftDeletedPosts = Post::onlyTrashed()->get();\n```", "```php\n$restoreAllSoftDeletedPosts = Post::onlyTrashed()->restore();\n```", "```php\n$forceDeleteSoftDeletedPosts = Post::onlyTrashed()->forceDelete();\n```", "```php\n//Let's fetch a post without the soft-delete checking:\n$post = Post::withTrashed()->find(1);\n//Then let's check whether it's soft deleted or now if($post->trashed()) {\nreturn 'This post is soft-deleted'; } else {\n   return 'This post is not soft-deleted';\n}\n```", "```php\n$blogs = Blog::all();\nforeach($blogs as $blog) {\n   var_dump($blog->images());\n}\n```", "```php\n$blogs = Blog::with('images')->get();\nforeach($blogs as $blog) {\n   var_dump($blog->images);\n}\n```", "```php\n$popularBlogPosts = Blog::where('views', '>', '100')->get();\n```", "```php\npublic function scopePopular($query) {\n   return $query->where('views', '>', '100');\n}\n```", "```php\n$popularBlogPosts = Blog::popular()->get();\n```", "```php\n$popularBlogPosts = Blog::recent()->popular()->get();\n```", "```php\npublic function getNameAttribute($value) {\n    return ucfirst($value);\n}\n```", "```php\npublic function setNameAttribute($value) {\n    return strtolower($value);\n}\n```", "```php\nUser::creating(function($user){\n    if ($user->first_name == 'Hybrid') return false;\n});\n```", "```php\nUser::creating(function($user){\n    if ($user->first_name == 'Hybrid') return false;\n});\n```", "```php\nclass UserObserver {\n\n   public function creating($model){\n       if ($model->first_name == 'Hybrid') return false;\n    }\n\n    public function saving($model)\n    {\n        //Another model event action here\n    }\n\n}\n```", "```php\n **User::observe(new UserObserver);** \n\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateNewsTable extends Migration {\n\n        /**\n        * Run the migrations.\n        */\n        public function up()\n        {\n                //\n        }\n\n        /**\n        * Reverse the migrations.\n        */\n        public function down()\n        {\n                //\n        }\n\n}\n```", "```php\n<?php\n\nclass BlogTableSeeder extends Seeder {\n\n  public function run()\n  {\n    DB::table('blogs')->insert(array(\n      array('title' => 'My Title'),\n      array('title' => 'My Second Title'),\n      array('title' => 'My Third Title')\n    ));\n  }\n\n}\n```"]