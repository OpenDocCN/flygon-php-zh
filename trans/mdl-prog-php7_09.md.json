["```php\nnamespace Foggyline\\SalesBundle\\Interface;\n\ninterface Payment\n{\n  function authorize();\n  function capture();\n  function cancel();\n}\n```", "```php\n**php bin/console generate:bundle --namespace=Foggyline/PaymentBundle**\n\n```", "```php\nnew Foggyline\\PaymentBundle\\FoggylinePaymentBundle(),\n```", "```php\nfoggyline_payment:\n  resource: \"@FoggylinePaymentBundle/Resources/config/routing.xml\"\n  prefix:   /\n```", "```php\nphp bin/console generate:doctrine:entity\n```", "```php\nphp bin/console doctrine:schema:update --force\n```", "```php\nphp bin/console generate:doctrine:crud\n```", "```php\nfoggyline_payment_card:\n  resource: \"@FoggylinePaymentBundle/Controller/CardController.php\"\n  type:    annotation\n```", "```php\n<service id=\"foggyline_payment.card_payment\"class=\"Foggyline\\PaymentBundle\\Service\\CardPayment\">\n  <argument type=\"service\" id=\"form.factory\"/>\n  <argument type=\"service\" id=\"router\"/>\n  <tag name=\"payment_method\"/>\n</service>\n```", "```php\nnamespace Foggyline\\PaymentBundle\\Service;\n\nuse Foggyline\\PaymentBundle\\Entity\\Card;\n\nclass CardPayment\n{\n  private $formFactory;\n  private $router;\n\n  public function __construct(\n    $formFactory,\n    \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router\n  )\n  {\n    $this->formFactory = $formFactory;\n    $this->router = $router;\n  }\n\n  public function getInfo()\n  {\n    $card = new Card();\n    $form = $this->formFactory->create('Foggyline\\PaymentBundle\\Form\\CardType', $card);\n\n    return array(\n      'payment' => array(\n      'title' =>'Foggyline Card Payment',\n      'code' =>'card_payment',\n      'url_authorize' => $this->router->generate('foggyline_payment_card_authorize'),\n      'url_capture' => $this->router->generate('foggyline_payment_card_capture'),\n      'url_cancel' => $this->router->generate('foggyline_payment_card_cancel'),\n      'form' => $form->createView()\n      )\n    );\n  }\n}\n```", "```php\n<route id=\"foggyline_payment_card_authorize\" path=\"/card/authorize\">\n  <default key=\"_controller\">FoggylinePaymentBundle:Card:authorize</default>\n</route>\n\n<route id=\"foggyline_payment_card_capture\" path=\"/card/capture\">\n  <default key=\"_controller\">FoggylinePaymentBundle:Card:capture</default>\n</route>\n\n<route id=\"foggyline_payment_card_cancel\" path=\"/card/cancel\">\n  <default key=\"_controller\">FoggylinePaymentBundle:Card:cancel</default>\n</route>\n```", "```php\npublic function authorizeAction(Request $request)\n{\n  $transaction = md5(time() . uniqid()); // Just a dummy string, simulating some transaction id, if any\n\n  if ($transaction) {\n    return new JsonResponse(array(\n      'success' => $transaction\n    ));\n  }\n\n  return new JsonResponse(array(\n    'error' =>'Error occurred while processing Card payment.'\n  ));\n}\n\npublic function captureAction(Request $request)\n{\n  $transaction = md5(time() . uniqid()); // Just a dummy string, simulating some transaction id, if any\n\n  if ($transaction) {\n    return new JsonResponse(array(\n      'success' => $transaction\n    ));\n  }\n\n  return new JsonResponse(array(\n    'error' =>'Error occurred while processing Card payment.'\n  ));\n}\n\npublic function cancelAction(Request $request)\n{\n  $transaction = md5(time() . uniqid()); // Just a dummy string, simulating some transaction id, if any\n\n  if ($transaction) {\n    return new JsonResponse(array(\n      'success' => $transaction\n    ));\n  }\n\n  return new JsonResponse(array(\n    'error' =>'Error occurred while processing Card payment.'\n  ));\n}\n```", "```php\n<service id=\"foggyline_payment.check_money\"class=\"Foggyline\\PaymentBundle\\Service\\CheckMoneyPayment\">\n  <argument type=\"service\" id=\"router\"/>\n  <tag name=\"payment_method\"/>\n</service>\n```", "```php\nnamespace Foggyline\\PaymentBundle\\Service;\n\nclass CheckMoneyPayment\n{\n  private $router;\n\n  public function __construct(\n    \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router\n  )\n  {\n    $this->router = $router;\n  }\n\n  public function getInfo()\n  {\n    return array(\n      'payment' => array(\n        'title' =>'Foggyline Check Money Payment',\n        'code' =>'check_money',\n        'url_authorize' => $this->router->generate('foggyline_payment_check_money_authorize'),\n        'url_capture' => $this->router->generate('foggyline_payment_check_money_capture'),\n        'url_cancel' => $this->router->generate('foggyline_payment_check_money_cancel'),\n        //'form' =>''\n      )\n    );\n  }\n}\n```", "```php\n<route id=\"foggyline_payment_check_money_authorize\"path=\"/check_money/authorize\">\n  <default key=\"_controller\">FoggylinePaymentBundle:CheckMoney:authorize</default>\n</route>\n\n<route id=\"foggyline_payment_check_money_capture\"path=\"/check_money/capture\">\n  <default key=\"_controller\">FoggylinePaymentBundle:CheckMoney:capture</default>\n</route>\n\n<route id=\"foggyline_payment_check_money_cancel\"path=\"/check_money/cancel\">\n  <default key=\"_controller\">FoggylinePaymentBundle:CheckMoney:cancel</default>\n</route>\n```", "```php\nnamespace Foggyline\\PaymentBundle\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\n\nclass CheckMoneyController extends Controller\n{\n  public function authorizeAction(Request $request)\n  {\n    $transaction = md5(time() . uniqid());\n    return new JsonResponse(array(\n      'success' => $transaction\n    ));\n  }\n\n  public function captureAction(Request $request)\n  {\n    $transaction = md5(time() . uniqid());\n    return new JsonResponse(array(\n      'success' => $transaction\n    ));\n  }\n\n  public function cancelAction(Request $request)\n  {\n    $transaction = md5(time() . uniqid());\n    return new JsonResponse(array(\n      'success' => $transaction\n    ));\n  }\n}\n```", "```php\n<directory>src/Foggyline/PaymentBundle/Tests</directory>\n```", "```php\nnamespace Foggyline\\PaymentBundle\\Tests\\Service;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\n\nclass CardPaymentTest extends KernelTestCase\n{\n  private $container;\n  private $formFactory;\n  private $router;\n\n  public function setUp()\n  {\n    static::bootKernel();\n    $this->container = static::$kernel->getContainer();\n    $this->formFactory = $this->container->get('form.factory');\n    $this->router = $this->container->get('router');\n  }\n\n  public function testGetInfoViaService()\n  {\n    $payment = $this->container->get('foggyline_payment.card_payment');\n    $info = $payment->getInfo();\n    $this->assertNotEmpty($info);\n    $this->assertNotEmpty($info['payment']['form']);\n  }\n\n  public function testGetInfoViaClass()\n  {\n    $payment = new \\Foggyline\\PaymentBundle\\Service\\CardPayment(\n       $this->formFactory,\n       $this->router\n    );\n\n    $info = $payment->getInfo();\n    $this->assertNotEmpty($info);\n    $this->assertNotEmpty($info['payment']['form']);\n  }\n}\n```", "```php\nnamespace Foggyline\\PaymentBundle\\Tests\\Service;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\n\nclass CheckMoneyPaymentTest extends KernelTestCase\n{\n  private $container;\n  private $router;\n\n  public function setUp()\n  {\n    static::bootKernel();\n    $this->container = static::$kernel->getContainer();\n    $this->router = $this->container->get('router');\n  }\n\n  public function testGetInfoViaService()\n  {\n    $payment = $this->container->get('foggyline_payment.check_money');\n    $info = $payment->getInfo();\n    $this->assertNotEmpty($info);\n  }\n\n  public function testGetInfoViaClass()\n  {\n    $payment = new \\Foggyline\\PaymentBundle\\Service\\CheckMoneyPayment(\n        $this->router\n      );\n\n    $info = $payment->getInfo();\n    $this->assertNotEmpty($info);\n  }\n}\n```", "```php\nnamespace Foggyline\\PaymentBundle\\Tests\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\n\nclass CardControllerTest extends WebTestCase\n{\n  private $client;\n  private $router;\n\n  public function setUp()\n  {\n    $this->client = static::createClient();\n    $this->router = $this->client->getContainer()->get('router');\n  }\n\n  public function testAuthorizeAction()\n  {\n    $this->client->request('GET', $this->router->generate('foggyline_payment_card_authorize'));\n    $this->assertTests();\n  }\n\n  public function testCaptureAction()\n  {\n    $this->client->request('GET', $this->router->generate('foggyline_payment_card_capture'));\n    $this->assertTests();\n  }\n\n  public function testCancelAction()\n  {\n    $this->client->request('GET', $this->router->generate('foggyline_payment_card_cancel'));\n    $this->assertTests();\n  }\n\n  private function assertTests()\n  {\n    $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n    $this->assertSame('application/json', $this->client->getResponse()->headers->get('Content-Type'));\n    $this->assertContains('success', $this->client->getResponse()->getContent());\n    $this->assertNotEmpty($this->client->getResponse()->getContent());\n  }\n}\n```", "```php\nnamespace Foggyline\\PaymentBundle\\Tests\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\n\nclass CheckMoneyControllerTest extends WebTestCase\n{\n  private $client;\n  private $router;\n\n  public function setUp()\n  {\n    $this->client = static::createClient();\n    $this->router = $this->client->getContainer()->get('router');\n  }\n\n  public function testAuthorizeAction()\n  {\n    $this->client->request('GET', $this->router->generate('foggyline_payment_check_money_authorize'));\n    $this->assertTests();\n  }\n\n  public function testCaptureAction()\n  {\n    $this->client->request('GET', $this->router->generate('foggyline_payment_check_money_capture'));\n    $this->assertTests();\n  }\n\n  public function testCancelAction()\n  {\n    $this->client->request('GET', $this->router->generate('foggyline_payment_check_money_cancel'));\n    $this->assertTests();\n  }\n\n  private function assertTests()\n  {\n    $this->assertSame(200, $this->client->getResponse()->getStatusCode());\n    $this->assertSame('application/json', $this->client->getResponse()->headers->get('Content-Type'));\n    $this->assertContains('success', $this->client->getResponse()->getContent());\n    $this->assertNotEmpty($this->client->getResponse()->getContent());\n  }\n}\n```"]