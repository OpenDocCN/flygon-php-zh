["```php\nmysql_connect($host, $user, $password);\nmysql_select_db($db);\n\n```", "```php\n$dbh = sqlite_open($db, 0666);\n\n```", "```php\n// For MySQL:\n$conn = new PDO(\"mysql:host=$host;dbname=$db\", $user, $pass);\n// For SQLite:\n$conn = new PDO(\"sqlite:$db\");\n// And for PostgreSQL:\n$conn = new PDO(\"pgsql:host=$host dbname=$db\", $user, $pass);\n\n```", "```php\n$config = parse_ini_file($pathToConfigFile);\n$conn = new PDO($config['db.conn'], $config['db.user'],\n$config['db.pass']);\n\n```", "```php\ndb.conn=\"mysql:host=localhost;dbname=test\"\ndb.user=\"johns\"\ndb.pass=\"mypassphrase\"\n\n```", "```php\nSELECT DISTINCT make FROM cars ORDER BY make;\n\n```", "```php\n// Let's keep our SQL in a single variable\n$sql = 'SELECT DISTINCT make FROM cars ORDER BY make';\n// Now, assuming MySQL:\nmysql_connect('localhost', 'boss', 'password');\nmysql_select_db('cars');\n$q = mysql_query($sql);\n// For SQLite we would do:\n$dbh = sqlite_open('/path/to/cars.ldb', 0666);\n$q = sqlite_query($sql, $dbh);\n// And for PostgreSQL:\npg_connect(\"host=localhost dbname=cars user=boss\npassword=password\");\n$q = pg_query($sql);\n\n```", "```php\n// assume the $connStr variable holds a valid connection string\n// as discussed in previous point\n$sql = 'SELECT DISTINCT make FROM cars ORDER BY make';\n$conn = new PDO($connStr, 'boss', 'password');\n$q = $conn->query($sql);\n\n```", "```php\nSELECT sum(price) FROM cars WHERE make='Ford'\n\n```", "```php\n$make = 'Ford';\n// MySQL:\n$m = mysql_real_escape_string($make);\n$q = mysql_query(\"SELECT sum(price) FROM cars WHERE make='$m'\");\n// SQLite:\n$m = sqlite_escape_string($make);\n$q = sqlite_query(\"SELECT sum(price) FROM cars WHERE make='$m'\",\n$dbh);\n// and PostgreSQL:\n$m = pg_escape_string($make);\n$q = pg_query(\"SELECT sum(price) FROM cars WHERE make='$m'\");\n\n```", "```php\n$m = $conn->quote($make);\n$q = $conn->query(\"SELECT sum(price) FROM cars WHERE make=$m\");\n\n```", "```php\n// assume the query is in the $sql variable\n$sql = \"SELECT DISTINCT make FROM cars ORDER BY make\";\n// For MySQL:\n$q = mysql_query($sql);\nwhile($r = mysql_fetch_assoc($q))\n{\necho $r['make'], \"\\n\";\n}\n// For SQLite:\n$q = sqlite_query($dbh, $sql);\nwhile($r = sqlite_fetch_array($q, SQLITE_ASSOC))\n{\necho $r['make'], \"\\n\";\n}\n// and, finally, PostgreSQL:\n$q = pg_query($sql);\nwhile($r = pg_fetch_assoc($q))\n{\necho $r['make'], \"\\n\";\n}\n\n```", "```php\n$q = $conn->query(\"SELECT DISTINCT make FROM cars ORDER BY make\");\nwhile($r = $q->fetch(PDO::FETCH_ASSOC))\n{\necho $r['make'], \"\\n\";\n}\n\n```", "```php\n// For SQLite:\n$dbh = sqlite_open('/path/to/cars.ldb', 0666) or die\n('Error opening SQLite database: ' .\nsqlite_error_string(sqlite_last_error($dbh)));\n$q = sqlite_query(\"SELECT DISTINCT make FROM cars ORDER BY make\",\n$dbh) or die('Could not execute query because: ' .\nsqlite_error_string(sqlite_last_error($dbh)));\n// and, finally, for PostgreSQL:\npg_connect(\"host=localhost dbname=cars user=boss\npassword=password\") or die('Could not connect to\nPostgreSQL: . pg_last_error());\n$q = pg_query(\"SELECT DISTINCT make FROM cars ORDER BY make\")\nor die('Could not execute query because: ' . pg_last_error());\n\n```", "```php\n// PDO error handling\n// Assume the connection string is one of the following:\n// $connStr = 'mysql:host=localhost;dbname=cars'\n// $connStr = 'sqlite:/path/to/cars.ldb';\n// $connStr = 'pgsql:host=localhost dbname=cars';\ntry\n{\n$conn = new PDO($connStr, 'boss', 'password');\n}\ncatch(PDOException $pe)\n{\ndie('Could not connect to the database because: ' .\n$pe->getMessage();\n}\n$q = $conn->query(\"SELECT DISTINCT make FROM cars ORDER BY make\");\nif(!$q)\n{\n$ei = $conn->errorInfo();\ndie('Could not execute query because: ' . $ei[2]);\n}\n\n```", "```php\n// Suppose the years come in the startYear and endYear\n// request variables:\n$sy = (int)$_REQUEST['startYear'];\n$ey = (int)$_REQUEST['endYear'];\nif($ey < $sy)\n{\n// ensure $sy is less than $ey\n$tmp = $ey;\n$ey = $sy;\n$sy = $tmp;\n}\n$sql = \"SELECT * FROM cars WHERE year >= $sy AND year <= $ey\";\n// send the query in $sql\u2026\n\n```", "```php\n$sql = 'SELECT * FROM cars WHERE year >= ? AND year <= ?';\n\n```", "```php\n// Assuming we have already connected and prepared\n// the $sy and $ey variables\n$sql = 'SELECT * FROM cars WHERE year >= ? AND year <= ?';\n$stmt = $conn->prepare($sql);\n$stmt->execute(array($sy, $ey));\n\n```", "```php\n// Suppose the years come in the startYear and endYear\n// request variables:\n$sy = (int)$_REQUEST['startYear'];\n$ey = (int)$_REQUEST['endYear'];\nif($ey < $sy)\n{\n// ensure $sy is less than $ey\n$tmp = $ey;\n$ey = $sy;\n$sy = $tmp;\n}\n$sql = 'SELECT * FROM cars WHERE year >= ? AND year <= ?';\n$stmt = $conn->prepare($sql);\n$stmt->execute(array($sy, $ey));\n// now iterate over the result as if we obtained\n// the $stmt in a call to PDO::query()\nwhile($r = $stmt->fetch(PDO::FETCH_ASSOC))\n{\necho \"$r[make] $r[model] $r[year]\\n\";\n}\n\n```", "```php\n$sql = 'SELECT * FROM cars WHERE year >= ? AND year <= ?';\n$stmt = $conn->prepare($sql);\n// Fetch the 'new' cars:\n$stmt->execute(array(2005, 2007));\n$newCars = $stmt->fetchAll(PDO::FETCH_ASSOC);\n// now, 'older' cars:\n$stmt->execute(array(2000, 2004));\n$olderCars = $stmt->fetchAll(PDO::FETCH_ASSOC);\n// Show them\necho 'We have ', count($newCars), ' cars dated 2005-2007';\nprint_r($newCars);\necho 'Also we have ', count($olderCars), ' cars dated 2000-2004';\nprint_r($olderCars);\n\n```", "```php\n// Assume we also want to filter by make\n$sql = 'SELECT * FROM cars WHERE make=?';\n$stmt = $conn->prepare($sql);\n$stmt->execute(array($_REQUEST['make']));\n\n```", "```php\nINSERT INTO mytable SET x=1, y='two';\n\n```", "```php\nINSERT INTO mytable(x, y) VALUES(1, 'two');\n\n```"]