- en: Chapter 10. Building an E-Commerce Website
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。构建电子商务网站
- en: 'In this chapter, we''ll code a simple book store example using Laravel. We''ll
    also cover Laravel''s built-in authentication, named routes, and database seeding.
    We''ll also elaborate some rapid development methods that come with Laravel such
    as creating route URLs. Also, we''ll working with a new relation type called *belongs
    to many*. We''ll cover pivot tables as well. Our e-commerce application will be
    a simple book store. This application will have order, administration, and cart
    features. We will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Laravel编写一个简单的书店示例。我们还将涵盖Laravel的内置身份验证、命名路由和数据库种子。我们还将详细介绍一些与Laravel一起提供的快速开发方法，例如创建路由URL。此外，我们将使用一种称为*belongs
    to many*的新关系类型进行工作。我们还将涵盖中间表。我们的电子商务应用程序将是一个简单的书店。此应用程序将具有订单、管理和购物车功能。我们将涵盖以下主题：
- en: Building an authorization system
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建授权系统
- en: Creating and migrating authors, books, carts, and orders tables
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和迁移作者、书籍、购物车和订单表
- en: Creating template files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模板文件
- en: Listing books
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出书籍
- en: Building a shopping cart
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建购物车
- en: Taking orders
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受订单
- en: Listing orders
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出订单
- en: Building an authorization system
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建授权系统
- en: 'We assume that you have already defined the database credentials in the `database.php`
    file located at `app/config`. To create our e-commerce application, we need a
    database. You can create and simply run the following SQL command or basically
    you can use a database administration interface such as phpMyAdmin:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经在`app/config`中的`database.php`文件中定义了数据库凭据。要创建我们的电子商务应用程序，我们需要一个数据库。您可以创建并简单运行以下SQL命令，或者基本上您可以使用数据库管理界面，如phpMyAdmin：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating and migrating the members' database
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移成员数据库
- en: 'Contrary to most of the PHP frameworks, Laravel has a basic and customizable
    authentication mechanism. The authentication class is very helpful for rapidly
    developing applications. First, we need a secret key for our application. As we
    mentioned in previous chapters, the application''s secret key is very important
    for our application''s security because all the data is hashed salting this key.
    The artisan can generate this key for us with a single command line:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数PHP框架相反，Laravel具有基本且可定制的身份验证机制。身份验证类对于快速开发应用程序非常有帮助。首先，我们需要为我们的应用程序生成一个秘钥。正如我们在前几章中提到的，应用程序的秘钥对于应用程序的安全非常重要，因为所有数据都是使用此秘钥进行哈希加盐的。艺术家可以用一条命令为我们生成这个秘钥：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If no error occurs, you will see a message that tells you the key is generated
    successfully. After key generation, if you''ve visited your project URL before
    you face problems with opening your Laravel application, simply clear your browser''s
    cache and try again. Next, we should edit the authentication class''s configuration
    file. To use Laravel''s built-in authentication class, we need to edit the configuration
    file, which is located at `app/config/auth.php`. This file contains several options
    for the authentication facilities. If you need a change in the table name, and
    so on, you can make the changes under this file. By default, Laravel comes with
    a `User` model. You can see the file, which is located at `app/models/User.php`.
    With Laravel 4, we need to define which fields are fillable in our `User` model.
    Let''s edit `User.php` located at `app/models/` and add the `fillable` array:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误发生，您将看到一条消息，告诉您密钥已成功生成。生成密钥后，如果您之前访问过项目的URL，但在打开Laravel应用程序时遇到问题，只需清除浏览器缓存，然后重试。接下来，我们应该编辑身份验证类的配置文件。要使用Laravel内置的身份验证类，我们需要编辑位于`app/config/auth.php`的配置文件。该文件包含身份验证设施的几个选项。如果您需要更改表名等内容，可以在此文件下进行更改。默认情况下，Laravel带有一个`User`模型。您可以在`app/models/User.php`中找到该文件。使用Laravel
    4，我们需要定义`User`模型中哪些字段是可填充的。让我们编辑位于`app/models/`的`User.php`并添加`fillable`数组：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Basically we need four columns for our members. These are:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们的成员需要四列。这些是：
- en: '`email`: This is the column for storing a member''s e-mails'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`：这是用于存储成员电子邮件的列'
- en: '`password`: This is the column for storing a member''s password'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`：这是用于存储成员密码的列'
- en: '`name`: This is the column for storing a member''s name and surname'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是用于存储成员名字和姓氏的列'
- en: '`admin`: This is the column for flagging store admin'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`：这是用于标记商店管理员的列'
- en: 'Now we need several migration files to create the `users` table and add a member
    to our database. To create a migration file, give a command as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要几个迁移文件来创建`users`表并向我们的数据库添加成员。要创建迁移文件，请给出以下命令：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open the migration file, which was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function, as shown in the following code snippet:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建的位于`app/database/migrations/`的迁移文件。我们需要编辑`up()`函数，如下面的代码片段所示：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After editing the `migration` file, run the `migrate` command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`迁移`文件后，运行`migrate`命令：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we need to create a database seeder file to add some users to the database.
    Database seeding is another highly recommended way to add data to your application
    database. The database seeder files are located at `app/database/seeds`. Let's
    create our first seeder file under the `UsersTableSeeder.php` directory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个数据库种子文件，向数据库添加一些用户。数据库种子是另一种强烈推荐的向应用程序数据库添加数据的方法。数据库种子文件位于`app/database/seeds`。让我们在`UsersTableSeeder.php`目录下创建我们的第一个种子文件。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can create both the seeder file and the seeder class with any name. But it
    is highly recommended for the seeder file and class name that the table name should
    follow camel case, for example, `TableSeeder`. Following the world-wide programming
    standards will improve the quality of your code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用任何名称创建种子文件和种子类。但强烈建议种子文件和类名称应遵循驼峰命名法，例如`TableSeeder`。遵循全球编程标准将提高您代码的质量。
- en: 'The content of `UsersTableSeeder.php` should look like the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`UsersTableSeeder.php`的内容应如下所示：'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To apply seeding, first we need to call the `Seeder` class. Let''s open the
    `DatabaseSeeder.php` file located at `app/database/seeds` and edit the file, as
    shown in the following code snippet:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用种子数据，首先我们需要调用种子类。让我们打开位于`app/database/seeds`的文件`DatabaseSeeder.php`并编辑文件如下代码片段所示：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is very important to securely store your users' passwords and their critical
    data. Do not forget that if you change the application key, all the existing hashed
    records will be unusable because the `Hash` class uses the application key as
    the salting key, when validating and storing given data.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安全地存储用户的密码和关键数据非常重要。不要忘记，如果你改变了应用程序密钥，所有现有的哈希记录将无法使用，因为`Hash`类在验证和存储给定数据时使用应用程序密钥作为盐值密钥。
- en: Creating and migrating the authors' database
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移作者数据库
- en: 'We need an Author model for storing the book authors. It will be a very simple
    structure. Let''s create the `Author.php` file under `app/models` and add the
    following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个`Author`模型来存储书籍作者。它将是一个非常简单的结构。让我们在`app/models`下创建`Author.php`文件并添加以下代码：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we need several migration files to create the `authors` table and add some
    authors to our database. To create a migration file, give a command as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要几个迁移文件来创建`authors`表并向我们的数据库中添加一些作者。要创建一个迁移文件，输入以下命令：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Open the migration file that was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建并位于`app/database/migrations/`目录下的迁移文件。我们需要编辑`up()`函数如下：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After editing the migration file, run the `migrate` command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑迁移文件后，运行`migrate`命令：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you know, the command creates the `authors` table and its columns. If no
    error occurs, check the `laravel_store` database for the `authors` table and the
    columns.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，该命令会创建`authors`表及其列。如果没有错误发生，请检查`laravel_store`数据库中的`authors`表和列。
- en: Adding authors to the database
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向数据库添加作者
- en: Now we need to create a database seeder file to add some authors to the database.
    Let's create our first seeder file under `app/database/seeds/AuthorsTableSeeder.php`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个数据库种子文件来向数据库中添加一些作者。让我们在`app/database/seeds/`下创建我们的第一个种子文件`AuthorsTableSeeder.php`。
- en: 'The content in `AuthorsTableSeeder.php` should look like the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthorsTableSeeder.php`中的内容应该如下所示：'
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To apply seeding, first we need to call the `Seeder` class. Let''s open the
    file `DatabaseSeeder.php` located at `app/database/seeds/`and edit the file as
    shown in the following code snippet:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用种子数据，首先我们需要调用`Seeder`类。让我们打开位于`app/database/seeds/`的文件`DatabaseSeeder.php`并编辑文件如下代码片段所示：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We need to seed our database with the following `artisan` command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用以下`artisan`命令向数据库中添加种子数据：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'When you want to rollback and re-run all migrations, you can use the following
    command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要回滚并重新运行所有迁移时，你可以使用以下命令：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Creating and migrating the books database
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移图书数据库
- en: 'We need a `Book` model to store the author''s books. Let''s create the `Book.php`
    file under `app/models/` and add the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个`Book`模型来存储作者的书籍。让我们在`app/models/`下创建`Book.php`文件并添加以下代码：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's explain the role of the `author_id` column and the `Author()` function.
    As you know from previous chapters, `Eloquent` has several functions for different
    kinds of database relations. The `author_id` will store the ID of the authors.
    The `Author()` function is used to fetch names and surnames of authors from the
    `authors` table.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释`author_id`列和`Author()`函数的作用。正如你从之前的章节中所了解的，`Eloquent`有几个用于不同类型数据库关系的函数。`author_id`将存储作者的ID。`Author()`函数用于从`authors`表中获取作者的名字和姓氏。
- en: Adding books to the database
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向数据库添加书籍
- en: Now we need to create a database seeder file to add some books to the database.
    Let's create the first seeder file under `app/database/seeds/BooksTableSeeder.php`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个数据库种子文件来向数据库中添加一些书籍。让我们在`app/database/seeds/`下创建第一个种子文件`BooksTableSeeder.php`。
- en: 'The content in `BooksTableSeeder.php` should look like the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`BooksTableSeeder.php`中的内容应该如下所示：'
- en: '[PRE17]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To apply seeding, first we need to call the seeder class. Let''s open the `DatabaseSeeder.php`
    file located at `app/database/seeds` and edit the file, as shown in the following
    code snippet:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用种子数据，首先我们需要调用种子类。让我们打开位于`app/database/seeds`的文件`DatabaseSeeder.php`并编辑文件如下代码片段所示：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we need to seed our database with the following `artisan` command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用以下`artisan`命令向数据库中添加种子数据：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Creating and migrating the carts database
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移购物车数据库
- en: 'As you know, all e-commerce applications should have a cart. In this application,
    we''ll have a cart too. We''ll design a member-based cart, which means we can
    store and show each visitor their carts and cart items. So, we need a `Cart` model
    to store the cart items. It will be a very simple structure. Let''s create the
    `Cart.php` file under `app/models` and add following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，所有电子商务应用程序都应该有一个购物车。在这个应用程序中，我们也会有一个购物车。我们将设计一个基于会员的购物车，这意味着我们可以存储和显示每个访问者的购物车和购物车商品。因此，我们需要一个`Cart`模型来存储购物车商品。它将是一个非常简单的结构。让我们在`app/models`下创建`Cart.php`文件并添加以下代码：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now we need a migration file to create the `carts` table. To create a migration
    file, give a command such as the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个迁移文件来创建`carts`表。要创建一个迁移文件，输入以下命令：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open the migration file, which was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as shown in the following code snippet:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建并位于`app/database/migrations/`目录下的迁移文件。我们需要编辑`up()`函数如下代码片段所示：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To apply migration, we need to migrate with the following `artisan` command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用迁移，我们需要使用以下`artisan`命令进行迁移：
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Creating and migrating the orders database
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移订单数据库
- en: To store members' orders, we need two tables. The first of them is the `orders`
    table, which will store shipping details, member ID, and the total value of the
    order. The second one is the `order_books` table. This table will store orders'
    books and will be our pivot table. In this model, we'll use the `belongsToMany()`
    relation. This is because an order can have many books.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储会员的订单，我们需要两个表。其中之一是`orders`表，它将存储运输细节、会员ID和订单的总价值。另一个是`order_books`表。这个表将存储订单的书籍，并且将是我们的中间表。在这个模型中，我们将使用`belongsToMany()`关系。这是因为一个订单可以有多本书。
- en: 'So, first we need an `Order` model to store the book orders. Let''s create
    the `Order.php` file under `app/models` and add the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先我们需要一个`Order`模型来存储书籍订单。让我们在`app/models`下创建`Order.php`文件，并添加以下代码：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see in the code, we've used a new option named `withPivot()` with
    the `belongsToMany()` function. With the `withPivot()` function, we can fetch
    extra fields from our pivot table. Normally, without the function, the relational
    query accesses from the pivot table with just the `id` object of related rows.
    This is necessary for our application because of price changes. Thus, previous
    orders, which were possibly done before any price change, are not affected.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在代码中所看到的，我们使用了一个名为`withPivot()`的新选项，它与`belongsToMany()`函数一起使用。通过`withPivot()`函数，我们可以从我们的中间表中获取额外的字段。通常情况下，如果没有这个函数，关系查询只能通过相关行的`id`对象从中间表中访问。这对我们的应用程序是必要的，因为价格变动。因此，可能在任何价格变动之前完成的先前订单不受影响。
- en: 'Now we need a migration file to create the `carts` table. To create a `migration`
    file, give a command such as the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个迁移文件来创建`carts`表。要创建一个`migration`文件，可以使用以下命令：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the migration file, which was created recently and located at `app/database/migrations`.
    We need to edit the `up()` function as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建的位于`app/database/migrations`目录下的迁移文件。我们需要编辑`up()`函数如下所示：
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To apply migration, we need to migrate with the following `artisan` command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用迁移，我们需要使用以下`artisan`命令进行迁移：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s create our `pivot` table. We need a migration file to create the `order_books`
    table. To create a migration file, give a command such as the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的`pivot`表。我们需要一个迁移文件来创建`order_books`表。要创建一个迁移文件，可以使用以下命令：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Open the migration file, which was created recently and located a`t app/database/migrations`.
    We need to edit the `up()` function as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建的位于`app/database/migrations`目录下的迁移文件。我们需要编辑`up()`函数如下所示：
- en: '[PRE29]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To apply migration, we need to migrate with the following `artisan` command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用迁移，我们需要使用以下`artisan`命令进行迁移：
- en: '[PRE30]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Our database design and models are finished. Now we need to code controllers
    and our application's front pages.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据库设计和模型已经完成。现在我们需要编写控制器和我们应用程序的前端页面。
- en: Listing books
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出书籍
- en: 'First, we need to list our products. To do that, we need to create a controller,
    which is named `BookController`. Let''s create a file under `app/controllers/`
    and save it with the name `BookController.php`. The controller code should look
    like the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要列出我们的产品。为此，我们需要创建一个名为`BookController`的控制器。让我们在`app/controllers/`下创建一个文件，并将其保存为`BookController.php`。控制器代码应该如下所示：
- en: '[PRE31]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The code simply fetches all the books from our `books` table and passes the
    data `book_list.blade.php` template with the `$books` variable. So we need to
    create a template file under `app/controllers/`, which is named as `book_list.blade.php`.
    Before doing this we need a layout page for our templates. Working with layout
    files is very helpful to manage html code. So first, we need a template file under
    `app/controllers/`, which is named `main_layout.blade.php`. The code should look
    like the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码简单地从我们的`books`表中获取所有的书籍，并将数据传递给`book_list.blade.php`模板，使用`$books`变量。因此，我们需要在`app/controllers/`下创建一个模板文件，命名为`book_list.blade.php`。在这之前，我们需要一个用于我们模板的布局页面。使用布局文件可以很好地管理html代码。因此，首先我们需要在`app/controllers/`下创建一个模板文件，命名为`main_layout.blade.php`。代码应该如下所示：
- en: '[PRE32]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The template file contains a menu, a login form, and some JavaScript code for
    the drop-down login form. We''ll use the file as our application''s layout template.
    We need to code our login and logout functions in the `UserController.php` file
    located at `app/controllers`. The login function should look like the following
    code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件包含一个菜单、一个登录表单和一些用于下拉式登录表单的JavaScript代码。我们将使用该文件作为我们应用程序的布局模板。我们需要在`app/controllers`目录下的`UserController.php`文件中编写我们的登录和注销函数。登录函数应该如下所示的代码：
- en: '[PRE33]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'As shown in the following code, we need to add routes to our route file, `routes.php`,
    found under `apps`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，我们需要在我们的路由文件`routes.php`中添加路由：
- en: '[PRE34]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Creating a template file to list books
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个模板文件来列出书籍
- en: 'Now we need a template file to list books. As mentioned previously, we need
    to create a template file under `app/views/` and save it as `book_list.blade.php`.
    This file should look like the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一个模板文件来列出书籍。如前所述，我们需要在`app/views/`下创建一个模板文件，并将其保存为`book_list.blade.php`。该文件应该如下所示：
- en: '[PRE35]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The template file has a form to add books to a cart. Now we need to code our
    functions in the `CartController.php` file located at `app/controllers/`. The
    content of `CartController.php` should look like the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件中有一个表单，用于将书籍添加到购物车中。现在我们需要在`app/controllers/`目录下的`CartController.php`文件中编写我们的函数。`CartController.php`的内容应该如下所示：
- en: '[PRE36]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Our controller has three functions. The first of them is `postAddToCart()`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制器有三个函数。其中之一是`postAddToCart()`：
- en: '[PRE37]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The function basically, at first, validates the posted data. The validated
    data checks the `carts` table for duplicate records. If the same book is not in
    the member''s cart, the function creates a new record in the `carts` table. The
    second function of the `CartController` is `getIndex()`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数基本上首先验证了提交的数据。经过验证的数据检查`carts`表中是否有重复记录。如果会员的购物车中没有相同的书籍，函数将在`carts`表中创建一个新记录。`CartController`的第二个函数是`getIndex()`：
- en: '[PRE38]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The function fetches whole cart items, books'' information, and cart total
    and passes the data to the template file. The last function of the class is `getDelete()`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能获取整个购物车商品、书籍信息和购物车总额，并将数据传递给模板文件。该类的最后一个函数是`getDelete()`：
- en: '[PRE39]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The function basically finds from the `carts` table the given ID and deletes
    the record. We use the function to delete items from a cart. Now we need to create
    a template file. The file will show all cart information of members and also contains
    the order form. Save the file under `app/views/` as `cart.blade.php`. The content
    of `cart.blade.php` should look like the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能基本上是从`carts`表中查找给定ID并删除记录。我们使用该功能从购物车中删除商品。现在我们需要创建一个模板文件。该文件将显示会员的所有购物车信息，并包含订单表单。将文件保存在`app/views/`下，命名为`cart.blade.php`。`cart.blade.php`的内容应该如下所示：
- en: '[PRE40]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now we need to write our routes. The functions of the controller should just
    be accessible to members. So we can easily use Laravel''s built-in `auth.basic`
    filter:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写我们的路由。控制器的功能应该只对会员可访问。因此，我们可以轻松地使用Laravel内置的`auth.basic`过滤器：
- en: '[PRE41]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Taking orders
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接受订单
- en: 'As you may remember, we''ve already created an order form in the `cart.blade.php`
    template file located at `app/views/`. Now we need to process the order. Let''s
    code the `OrderController.php` file under `app/controllers/`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能记得的，我们已经在位于`app/views/`的`cart.blade.php`模板文件中创建了一个订单表单。现在我们需要处理订单。让我们在`app/controllers/`下编写`OrderController.php`文件：
- en: '[PRE42]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The controller has two functions. The first of them is `postOrder()`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器有两个功能。其中之一是`postOrder()`：
- en: '[PRE43]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The function, first, validates the posted data. After successful validation,
    the function creates a new order on the `orders` table. The `order` table stores
    the member ID, shipping address, and total amount of the order. Then, the function
    attaches all cart items to the pivot table with their amount, price, and total
    amounts. In this way, the order items will not be affected by any price change.
    The function then deletes all items from the member''s cart. The second function
    of the controller is `getIndex()`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能首先验证发布的数据。验证成功后，该功能在`orders`表上创建一个新订单。`order`表存储会员ID、送货地址和订单总额。然后，该功能将所有购物车商品附加到与它们的数量、价格和总额相关的中间表中。通过这种方式，订单商品不会受到任何价格变化的影响。然后，该功能从会员的购物车中删除所有商品。控制器的第二个功能是`getIndex()`：
- en: '[PRE44]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The function queries the database by looking at current user rights. If the
    current user has admin rights, the function fetches all the orders. If the current
    user has no admin rights, the function fetches just the user''s orders. So, now
    we need to write our routes. Add the following route code to `app/routes.php`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能通过查看当前用户的权限来查询数据库。如果当前用户具有管理员权限，则该功能获取所有订单。如果当前用户没有管理员权限，则该功能只获取用户的订单。因此，现在我们需要编写我们的路由。将以下路由代码添加到`app/routes.php`中：
- en: '[PRE45]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Our e-commerce application is almost done. Now we need to add a template file.
    Save the file under `app/views/` as `cart.blade.php`. The content of `cart.blade.php`
    should be like the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的电子商务应用程序几乎完成了。现在我们需要添加一个模板文件。将文件保存在`app/views/`下，命名为`cart.blade.php`。`cart.blade.php`的内容应该如下所示：
- en: '[PRE46]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The template file contains all the information about orders. The template is
    a very simple example of how to use pivot table columns. The pivot data comes
    as an array. So, we've used the `foreach` loop to use the data. You can store
    any data that you do not want to be affected by any changes in the database, such
    as price changes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件包含有关订单的所有信息。该模板是如何使用中间表列的一个非常简单的示例。中间数据以数组形式呈现。因此，我们使用`foreach`循环来使用数据。您可以存储任何您不希望受数据库中任何更改影响的数据，例如价格更改。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've built a simple e-commerce application. As you can see,
    thanks to Laravel's template system and built-in authorization system, you can
    easily create huge applications. You can improve the application with third-party
    packages. Since Laravel Version 4, the main package manager has been Composer.
    There is a huge library at [http://packagist.org](http://packagist.org), which
    provides packages for image manipulating, social media APIs, and so on. The number
    of packages increase day-by-day, which are becoming, by default, Laravel compatible.
    We suggest that, before coding anything, you take a look at the Packagist website.
    There are many contributors still sharing their codes while you're reading these
    sentences. Reviewing another programmer's code gives new answers to old problems.
    Do not forget to share your knowledge with people to have a better programming
    experience.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个简单的电子商务应用程序。正如您所看到的，由于Laravel的模板系统和内置授权系统，您可以轻松地创建庞大的应用程序。您可以通过第三方包来改进应用程序。自Laravel版本4以来，主要的包管理器一直是Composer。在[http://packagist.org](http://packagist.org)上有一个庞大的库，提供了用于图像处理、社交媒体API等的包。包的数量每天都在增加，它们默认情况下都与Laravel兼容。我们建议在编写任何代码之前，您先查看Packagist网站。在您阅读这些句子的同时，仍有许多贡献者在分享他们的代码。审查其他程序员的代码会为旧问题提供新的答案。不要忘记与他人分享您的知识，以获得更好的编程体验。
- en: During the entire book we've tried to explain building different kinds of applications
    with the Laravel PHP framework. So, we've covered RESTful controllers, routing,
    route filters, the authentication class, Blade template engine, database migrations,
    database seeding, string, and file-processing classes. Also, we've given some
    tips for rapid development with Laravel. We hope that this book will be a good
    resource for learning the Laravel framework.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们试图解释如何使用Laravel PHP框架构建不同类型的应用程序。因此，我们涵盖了RESTful控制器、路由、路由过滤器、认证类、Blade模板引擎、数据库迁移、数据库种子、字符串和文件处理类。此外，我们还提供了一些关于如何快速开发Laravel的技巧。我们希望这本书能成为学习Laravel框架的良好资源。
- en: The co-author of the book, *Halil İbrahim Yılmaz*, has developed an open source,
    multilingual CMS with Laravel, which is named HERKOBI. You can use both the source
    codes of the book chapters and the source code of the CMS. You can access the
    CRM and the codes at [http://herkobi.org](http://herkobi.org) and also at [http://herkobi.com](http://herkobi.com).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的合著者*Halil İbrahim Yılmaz*开发了一个名为HERKOBI的基于Laravel的开源多语言CMS。您可以使用本书章节的源代码和CMS的源代码。您可以在[http://herkobi.org](http://herkobi.org)和[http://herkobi.com](http://herkobi.com)上访问CRM和代码。
- en: Laravel has a good community, which is very helpful and friendly. You can ask
    any question in the Laravel forums. The international Laravel community can be
    accessed at [http://laravel.com](http://laravel.com). Laravel also has some national
    Laravel communities, such as a Turkish Laravel community, which is located at
    [http://laravel.gen.tr](http://laravel.gen.tr).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel有一个很好的社区，非常乐于助人和友好。您可以在Laravel论坛上提出任何问题。国际Laravel社区可以在[http://laravel.com](http://laravel.com)上访问。Laravel还有一些国家的Laravel社区，比如土耳其的Laravel社区，位于[http://laravel.gen.tr](http://laravel.gen.tr)。
- en: You can send an e-mail to the authors when you need help on anything in the
    book or the Laravel PHP framework.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在书中或Laravel PHP框架中需要帮助时，可以给作者发送电子邮件。
- en: Thank you for being interested in and purchasing this book.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您对本书感兴趣并购买。
