["```php\n    git clone https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices.git ~/repo\n    ```", "```php\n    docker-compose up -d\n    ```", "```php\n    docker-compose ps\n    ```", "```php\n    docker exec -it php8_tips_php8 /bin/bash \n    ```", "```php\n    docker exec -it php8_tips_php7 /bin/bash\n    ```", "```php\n    docker-compose down \n    ```", "```php\n// /repo/ch01/php8_prop_promo.php\ndeclare(strict_types=1);\nclass Test {\n\u00a0\u00a0\u00a0\u00a0public function __construct(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public int $id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public int $token = 0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public string $name = '')\n\u00a0\u00a0\u00a0\u00a0{ }\n}\n$test = new Test(999);\nvar_dump($test);\n```", "```php\nobject(Test)#1 (3) {\n\u00a0\u00a0[\"id\"]=> int(999)\n\u00a0\u00a0[\"token\"]=> int(0)\n\u00a0\u00a0[\"name\"]=> string(0) \"\"\n}\n```", "```php\n    /repo/src/Php8/Image/SingleChar.php\n    namespace Php7\\Image;\n    class SingleChar {\n    \u00a0\u00a0\u00a0\u00a0public $text\u00a0\u00a0\u00a0\u00a0\u00a0= '';\n    \u00a0\u00a0\u00a0\u00a0public $fontFile = '';\n    \u00a0\u00a0\u00a0\u00a0public $width\u00a0\u00a0\u00a0\u00a0= 100;\n    \u00a0\u00a0\u00a0\u00a0public $height\u00a0\u00a0\u00a0= 100;\n    \u00a0\u00a0\u00a0\u00a0public $size\u00a0\u00a0\u00a0\u00a0\u00a0= 0;\n    \u00a0\u00a0\u00a0\u00a0public $angle\u00a0\u00a0\u00a0\u00a0= 0.00;\n    \u00a0\u00a0\u00a0\u00a0public $textX\u00a0\u00a0\u00a0\u00a0= 0;\n    \u00a0\u00a0\u00a0\u00a0public $textY\u00a0\u00a0\u00a0\u00a0= 0;\n    ```", "```php\n    const DEFAULT_TX_X = 25;\n    const DEFAULT_TX_Y = 75;\n    const DEFAULT_TX_SIZE\u00a0\u00a0= 60;\n    const DEFAULT_TX_ANGLE = 0;\n    public function __construct(\n    \u00a0\u00a0\u00a0\u00a0string $text,\n    \u00a0\u00a0\u00a0\u00a0string $fontFile,\n    \u00a0\u00a0\u00a0\u00a0int $width\u00a0\u00a0= 100,\n    \u00a0\u00a0\u00a0\u00a0int $height = 100,\n    \u00a0\u00a0\u00a0\u00a0int $size\u00a0\u00a0\u00a0= self::DEFAULT_TX_SIZE,\n    \u00a0\u00a0\u00a0\u00a0float $angle = self::DEFAULT_TX_ANGLE,\n    \u00a0\u00a0\u00a0\u00a0int $textX\u00a0\u00a0= self::DEFAULT_TX_X,\n    \u00a0\u00a0\u00a0\u00a0int $textY\u00a0\u00a0= self::DEFAULT_TX_Y)\u00a0\u00a0\u00a0\n    ```", "```php\n    {\u00a0\u00a0\u00a0$this->text\u00a0\u00a0\u00a0\u00a0\u00a0= $text;\n    \u00a0\u00a0\u00a0\u00a0$this->fontFile = $fontFile;\n    \u00a0\u00a0\u00a0\u00a0$this->width\u00a0\u00a0\u00a0\u00a0= $width;\n    \u00a0\u00a0\u00a0\u00a0$this->height\u00a0\u00a0\u00a0= $height;\n    \u00a0\u00a0\u00a0\u00a0$this->size\u00a0\u00a0\u00a0\u00a0\u00a0= $size;\n    \u00a0\u00a0\u00a0\u00a0$this->angle\u00a0\u00a0\u00a0\u00a0= $angle;\n    \u00a0\u00a0\u00a0\u00a0$this->textX\u00a0\u00a0\u00a0\u00a0= $textX;\n    \u00a0\u00a0\u00a0\u00a0$this->textY\u00a0\u00a0\u00a0\u00a0= $textY;\n    \u00a0\u00a0\u00a0\u00a0// other code not shown \n    }\n    ```", "```php\n// /repo/src/Php8/Image/SingleChar.php\n// not all code shown\npublic function __construct(\n\u00a0\u00a0\u00a0\u00a0public string $text,\n\u00a0\u00a0\u00a0\u00a0public string $fontFile,\n\u00a0\u00a0\u00a0\u00a0public int\u00a0\u00a0\u00a0\u00a0$width\u00a0\u00a0\u00a0\u00a0= 100,\n\u00a0\u00a0\u00a0\u00a0public int\u00a0\u00a0\u00a0\u00a0$height\u00a0\u00a0\u00a0= 100,\n\u00a0\u00a0\u00a0\u00a0public int\u00a0\u00a0\u00a0\u00a0$size\u00a0\u00a0\u00a0\u00a0\u00a0= self::DEFAULT_TX_SIZE,\n\u00a0\u00a0\u00a0\u00a0public float\u00a0\u00a0\u00a0$angle\u00a0\u00a0\u00a0\u00a0= self::DEFAULT_TX_ANGLE,\n\u00a0\u00a0\u00a0\u00a0public int\u00a0\u00a0\u00a0\u00a0$textX\u00a0\u00a0\u00a0\u00a0= self::DEFAULT_TX_X,\n\u00a0\u00a0\u00a0\u00a0public int\u00a0\u00a0\u00a0\u00a0$textY\u00a0\u00a0\u00a0\u00a0= self::DEFAULT_TX_Y)\n\u00a0\u00a0\u00a0\u00a0{ // other code not shown }\n```", "```php\n# This is a \"bash\" shell script style comment\n// this can either be inline or on its own line\n/* This is the traditional \"C\" language style */\n/**\n * This is a PHP \"DocBlock\"\n */\n```", "```php\nnamespace Php7\\Entity;\nuse Doctrine\\ORM\\Mapping as ORM;\n/**\n * @ORM\\Table(name=\"events\")\n * @ORM\\Entity(\"Application\\Entity\\Events\")\n */\nclass Events {\n\u00a0\u00a0\u00a0\u00a0/**\n\u00a0\u00a0\u00a0\u00a0\u00a0* @ORM\\Column(name=\"id\",type=\"integer\",nullable=false)\n\u00a0\u00a0\u00a0\u00a0\u00a0* @ORM\\Id\n\u00a0\u00a0\u00a0\u00a0\u00a0* @ORM\\GeneratedValue(strategy=\"IDENTITY\")\n\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0private $id;\n\u00a0\u00a0\u00a0\u00a0/**\n\u00a0\u00a0\u00a0\u00a0\u00a0* @ORM\\Column(name=\"event_key\", type=\"string\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0length=16, nullable=true, options={\"fixed\"=true})\n\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0private $eventKey;\n\u00a0\u00a0\u00a0\u00a0// other code not shown\n```", "```php\nclass Attribute {\n\u00a0\u00a0\u00a0\u00a0public const int TARGET_CLASS = 1;\n\u00a0\u00a0\u00a0\u00a0public const int TARGET_FUNCTION = (1 << 1);\n\u00a0\u00a0\u00a0\u00a0public const int TARGET_METHOD = (1 << 2);\n\u00a0\u00a0\u00a0\u00a0public const int TARGET_PROPERTY = (1 << 3);\n\u00a0\u00a0\u00a0\u00a0public const int TARGET_CLASS_CONSTANT = (1 << 4);\n\u00a0\u00a0\u00a0\u00a0public const int TARGET_PARAMETER = (1 << 5);\n\u00a0\u00a0\u00a0\u00a0public const int TARGET_ALL = ((1 << 6) - 1);\n\u00a0\u00a0\u00a0\u00a0public function __construct(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int $flags = self::TARGET_ALL) {}\n}\n```", "```php\n#[attribute(\"some text\")] \n// class, property, method or function (or whatever!)\n```", "```php\n// /repo/src/Php7/Image/SingleChar.php\nnamespace Php7\\Image;\n/**\n * Creates a single image, by default black on white\n */\nclass SingleChar {\n\u00a0\u00a0\u00a0\u00a0/**\n\u00a0\u00a0\u00a0\u00a0\u00a0* Allocates a color resource\n\u00a0\u00a0\u00a0\u00a0\u00a0*\n\u00a0\u00a0\u00a0\u00a0\u00a0* @param array|int $r,\n\u00a0\u00a0\u00a0\u00a0\u00a0* @param int $g\n\u00a0\u00a0\u00a0\u00a0\u00a0* @param int $b]\n\u00a0\u00a0\u00a0\u00a0\u00a0* @return int $color\n\u00a0\u00a0\u00a0\u00a0\u00a0*/\n\u00a0\u00a0\u00a0\u00a0public function colorAlloc() \n\u00a0\u00a0\u00a0\u00a0{ /* code not shown */ } \n```", "```php\n// /repo/src/Php8/Image/SingleChar.php\nnamespace Php8\\Image;\n#[description(\"Creates a single image\")]\nclass SingleChar {\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\description(\"Allocates color\")]\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\param(\"r\",\"int|array\")]\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\param(\"g\",\"int\")]\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\param(\"b\",\"int\")]\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\returns(\"int\")]\n\u00a0\u00a0\u00a0\u00a0public function colorAlloc() { /* code not shown */ }\n```", "```php\n<?php\n// /repo/ch01/php8_attrib_reflect.php\ndefine('FONT_FILE', __DIR__ . '/../fonts/FreeSansBold.ttf');\nrequire_once __DIR__ . '/../src/Server/Autoload/Loader.php';\n$loader = new \\Server\\Autoload\\Loader();\nuse Php8\\Image\\SingleChar;\n$char\u00a0\u00a0\u00a0\u00a0= new SingleChar('A', FONT_FILE);\n$reflect = new ReflectionObject($char);\n$attribs = $reflect->getAttributes();\necho \"Class Attributes\\n\";\nforeach ($attribs as $obj) {\n\u00a0\u00a0\u00a0\u00a0echo \"\\n\" . $obj->getName() . \"\\n\";\n\u00a0\u00a0\u00a0\u00a0echo implode(\"\\t\", $obj->getArguments());\n}\necho \"Method Attributes for colorAlloc()\\n\";\n$reflect = new ReflectionMethod($char, 'colorAlloc');\n$attribs = $reflect->getAttributes();\nforeach ($attribs as $obj) {\n\u00a0\u00a0\u00a0\u00a0echo \"\\n\" . $obj->getName() . \"\\n\";\n\u00a0\u00a0\u00a0\u00a0echo implode(\"\\t\", $obj->getArguments());\n}\n```", "```php\n<pre>Class Attributes\nPhp8\\Image\\SingleChar\nPhp8\\Image\\description\nCreates a single image, by default black on whiteMethod\nAttributes for colorAlloc()\nPhp8\\Image\\SingleChar\\colorAlloc\\description\nAllocates a color resource\nPhp8\\Image\\SingleChar\\colorAlloc\\param\nr\u00a0\u00a0\u00a0\u00a0int|array\nPhp8\\Image\\SingleChar\\colorAlloc\\param\ng\u00a0\u00a0\u00a0\u00a0int\nPhp8\\Image\\SingleChar\\colorAlloc\\param\nb\u00a0\u00a0\u00a0\u00a0int\nPhp8\\Image\\SingleChar\\colorAlloc\\returns\nint\n```", "```php\nnamespace Php8\\Image;use Attribute;\nuse Php8\\Image\\Strategy\\ {PlainText,PlainFill};\n#[SingleChar]\n#[description(\"Creates black on white image\")]\nclass SingleChar {\n\u00a0\u00a0\u00a0\u00a0// not all code is shown\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\description(\"Allocates color\")]\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\param(\"r\",\"int|array\")]\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\param(\"g\",\"int\")]\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\param(\"b\",\"int\")]\n\u00a0\u00a0\u00a0\u00a0#[SingleChar\\colorAlloc\\returns(\"int\")]\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0public function colorAlloc(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int|array $r, int $g = 0, int $b = 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (is_array($r))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[$r, $g, $b] = $r;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \\imagecolorallocate(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->image, $r, $g, $b);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```php\n$result = match(<EXPRESSION>) {\n\u00a0\u00a0\u00a0\u00a0<ITEM> => <EXPRESSION>,\n\u00a0\u00a0\u00a0[<ITEM> => <EXPRESSION>,]\n\u00a0\u00a0\u00a0\u00a0default => <DEFAULT EXPRESSION>\n};\n```", "```php\n// /repo/ch01/php7_switch.php\nfunction get_symbol($iso) {\n\u00a0\u00a0\u00a0\u00a0switch ($iso) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'CNY' :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$sym = '\u00a5';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'EUR' :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$sym = '\u20ac';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'EGP' :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'GBP' :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$sym = '\u00a3';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case 'THB' :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$sym = '\u0e3f';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default :\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$sym = '$';\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return $sym;\n}\n$test = ['CNY', 'EGP', 'EUR', 'GBP', 'THB', 'MXD'];\nforeach ($test as $iso)\n\u00a0\u00a0\u00a0\u00a0echo 'The currency symbol for ' . $iso\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. ' is ' . get_symbol($iso) . \"\\n\";\n```", "```php\n// /repo/ch01/php8_switch.php\nfunction get_symbol($iso) {\n\u00a0\u00a0\u00a0\u00a0return match ($iso) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'EGP','GBP' => '\u00a3',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'CNY'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> '\u00a5',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'EUR'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> '\u20ac',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'THB'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> '\u0e3f',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default\u00a0\u00a0\u00a0\u00a0\u00a0=> '$'\n\u00a0\u00a0\u00a0\u00a0};\n}\n$test = ['CNY', 'EGP', 'EUR', 'GBP', 'THB', 'MXD'];\nforeach ($test as $iso)\n\u00a0\u00a0\u00a0\u00a0echo 'The currency symbol for ' . $iso\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. ' is ' . get_symbol($iso) . \"\\n\";\n```", "```php\nThe currency symbol for CNY is \u00a5\nThe currency symbol for EGP is \u00a3\nThe currency symbol for EUR is \u20ac\nThe currency symbol for GBP is \u00a3\nThe currency symbol for THB is \u0e3f\nThe currency symbol for MXD is $\n```", "```php\n    // /repo/ch01/php8_single_strategies.php\n    // not all code is shown\n    require_once __DIR__ . '/../src/Server/Autoload/Loader.php';\n    $loader = new \\Server\\Autoload\\Loader();\n    use Php8\\Image\\SingleChar;\n    use Php8\\Image\\Strategy\\ {LineFill,DotFill,Shadow,RotateText};\n    $strategies = ['rotate', 'line', 'line',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'dot', 'dot', 'shadow'];\n    ```", "```php\n    $phrase = strtoupper(bin2hex(random_bytes(NUM_BYTES)));\n    $length = strlen($phrase);\n    ```", "```php\n    $images = [];\n    for ($x = 0; $x < $length; $x++) {\n    \u00a0\u00a0\u00a0\u00a0$char = new SingleChar($phrase[$x], FONT_FILE);\n    \u00a0\u00a0\u00a0\u00a0$char->writeFill();\n    \u00a0\u00a0\u00a0\u00a0shuffle($strategies);\n    ```", "```php\n    foreach ($strategies as $item) {\n    \u00a0\u00a0\u00a0\u00a0$func = match ($item) {\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'rotate' => RotateText::writeText($char),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'line' => LineFill::writeFill(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$char, rand(1, 10)),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'dot' => DotFill::writeFill($char, rand(10, 20)),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'shadow' => function ($char) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$num = rand(1, 8);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$r\u00a0\u00a0\u00a0= rand(0x70, 0xEF);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$g\u00a0\u00a0\u00a0= rand(0x70, 0xEF);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$b\u00a0\u00a0\u00a0= rand(0x70, 0xEF);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return Shadow::writeText(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$char, $num, $r, $g, $b);},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'default' => TRUE\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0if (is_callable($func)) $func($char);\n    }\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0$char->writeText();\n    \u00a0\u00a0\u00a0\u00a0$fn = $x . '_' \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. substr(basename(__FILE__), 0, -4) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. '.png';\n    \u00a0\u00a0\u00a0\u00a0$char->save(IMG_DIR . '/' . $fn);\n    \u00a0\u00a0\u00a0\u00a0$images[] = $fn;\n    }\n    include __DIR__ . '/captcha_simple.phtml';\n    ```", "```php\nsetcookie ( string $name [, string $value = \"\" \n\u00a0\u00a0\u00a0\u00a0[, int $expires = 0 [, string $path = \"\" \n\u00a0\u00a0\u00a0\u00a0[, string $domain = \"\" [, bool $secure = FALSE \n\u00a0\u00a0\u00a0\u00a0[, bool $httponly = FALSE ]]]]]] ) : bool\n```", "```php\nimagefttext ( object $image , float $size , float $angle , \n\u00a0\u00a0\u00a0\u00a0int $x , int $y , int $color , string $fontfile , \n\u00a0\u00a0\u00a0\u00a0string $text [, array $extrainfo ] ) : array \n```", "```php\n// /repo/ch01/php8_named_args.php\n// not all code is shown\n$rotation = range(40, -40, 10);\nforeach ($rotation as $key => $offset) {\n\u00a0\u00a0\u00a0\u00a0$char->writeFill();\n\u00a0\u00a0\u00a0\u00a0[$x, $y] = RotateText::calcXYadjust($char, $offset);\n\u00a0\u00a0\u00a0\u00a0$angle = ($offset > 0) ? $offset : 360 + $offset;\n\u00a0\u00a0\u00a0\u00a0imagettftext(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0angle\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: $angle,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0color\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: $char->fgColor,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0font_filename : FONT_FILE,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: $char->image,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: 60,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0x\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: $x,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0y\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: $y,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: $char->text);\n\u00a0\u00a0\u00a0\u00a0$fn = IMG_DIR . '/' . $baseFn . '_' . $key . '.png';\n\u00a0\u00a0\u00a0\u00a0imagepng($char->image, $fn);\n\u00a0\u00a0\u00a0\u00a0$images[] = basename($fn);\n}\n```", "```php\n/**\n * Allocates a color resource\n *\n * @param array|int $r\n * @param int $g\n * @param int $b]\n * @return int $color\n */\npublic function colorAlloc($r, $g = 0, $b = 0) {\n\u00a0\u00a0\u00a0\u00a0if (is_array($r)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[$r, $g, $b] = $r;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return \\imagecolorallocate($this->image, $r, $g, $b);\n}\n```", "```php\n#[description(\"Allocates a color resource\")]\n#[param(\"int|array r\")]\n#[int(\"g\")]\n#[int(\"b\")]\n#[returns(\"int\")]\npublic function colorAlloc(\n\u00a0\u00a0\u00a0\u00a0int|array $r, int $g = 0, int $b = 0) {\n\u00a0\u00a0\u00a0\u00a0if (is_array($r)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[$r, $g, $b] = $r;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return \\imagecolorallocate($this->image, $r, $g, $b);\n}\n```", "```php\n    // /repo/ch01/php8_mixed_type.php\n    declare(strict_types=1);\n    class High {\n    \u00a0\u00a0\u00a0\u00a0const LOG_FILE = __DIR__ . '/../data/test.log';\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0protected static function logVar(object $var) {\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$item = date('Y-m-d') . ':'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. var_export($var, TRUE);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return error_log($item, 3, self::LOG_FILE);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    class Low extends High {\n    \u00a0\u00a0\u00a0\u00a0public static function logVar(mixed $var) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$item = date('Y-m-d') . ':'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. var_export($var, TRUE);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return error_log($item, 3, self::LOG_FILE);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    if (file_exists(High::LOG_FILE)) unlink(High::LOG_FILE)\n    $test = [\n    \u00a0\u00a0\u00a0\u00a0'array' => range('A', 'F'),\n    \u00a0\u00a0\u00a0\u00a0'func' => function () { return __CLASS__; },\n    \u00a0\u00a0\u00a0\u00a0'anon' => new class () { \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public function __invoke() { \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return __CLASS__; } },\n    ];\n    foreach ($test as $item) Low::logVar($item);\n    readfile(High::LOG_FILE);\n    ```", "```php\n2020-10-15:array (\n\u00a0\u00a00 => 'A',\n\u00a0\u00a01 => 'B',\n\u00a0\u00a02 => 'C',\n\u00a0\u00a03 => 'D',\n\u00a0\u00a04 => 'E',\n\u00a0\u00a05 => 'F',\n)2020-10-15:Closure::__set_state(array(\n))2020-10-15:class@anonymous/repo/ch01/php8_mixed_type.php:28$1::__set_state(array())\n```", "```php\n// /repo/ch01/php8_prop_type_1.php\ndeclare(strict_types=1)\nclass Test {\n\u00a0\u00a0\u00a0\u00a0public int $id = 0;\n\u00a0\u00a0\u00a0\u00a0public int $token = 0;\n\u00a0\u00a0\u00a0\u00a0public string $name = '';\n}\n$test = new Test();\n$test->id = 'ABC';\n```", "```php\nFatal error: Uncaught TypeError: Cannot assign string to property Test::$id of type int in /repo/ch01/php8_prop_type_1.php:11 Stack trace: #0 {main} thrown in /repo/ch01/php8_prop_type_1.php on line 11 \n```", "```php\n// /repo/ch01/php7_prop_danger.php\ndeclare(strict_types=1);\nclass Test {\n\u00a0\u00a0\u00a0\u00a0protected $id = 0;\n\u00a0\u00a0\u00a0\u00a0protected $token = 0;\n\u00a0\u00a0\u00a0\u00a0protected $name = '';\n\u00a0\u00a0\u00a0\u00a0public function __construct(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int $id, int $token, string $name) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->id = $id;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->token = md5((string) $token);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->name = $name;\n\u00a0\u00a0\u00a0\u00a0}\n}\n$test = new Test(111, 123456, 'Fred');\nvar_dump($test);\n```", "```php\nobject(Test)#1 (3) {\n\u00a0\u00a0[\"id\":protected]=>\u00a0\u00a0int(111)\n\u00a0\u00a0[\"token\":protected]=>\n\u00a0\u00a0string(32) \"e10adc3949ba59abbe56e057f20f883e\"\n\u00a0\u00a0[\"name\":protected]=>\u00a0\u00a0string(4) \"Fred\"\n}\n```", "```php\n// /repo/ch01/php8_prop_danger.php\ndeclare(strict_types=1);\nclass Test {\n\u00a0\u00a0\u00a0\u00a0protected int $id = 0;\n\u00a0\u00a0\u00a0\u00a0protected int $token = 0;\n\u00a0\u00a0\u00a0\u00a0protected string $name = '';\n\u00a0\u00a0\u00a0\u00a0public function __construct(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int $id, int $token, string $name) {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->id = $id;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->token = md5((string) $token);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->name = $name;\n\u00a0\u00a0\u00a0\u00a0}\n}\n$test = new Test(111, 123456, 'Fred');\nvar_dump($test);\n```", "```php\nFatal error: Uncaught TypeError: Cannot assign string to property Test::$token of type int in /repo/ch01/php8_prop_danger.php:12\n```", "```php\n    // /repo/ch01/php7_prop_reduce.php\n    declare(strict_types=1);\n    class Test {\n     protected $id = 0;\n     protected $token = 0;\n     protected $name = '';o\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function getId() { return $this->id; }\n    \u00a0\u00a0\u00a0\u00a0public function setId(int $id) { $this->id = $id; \n    \u00a0\u00a0\u00a0\u00a0public function getToken() { return $this->token; }\n    \u00a0\u00a0\u00a0\u00a0public function setToken(int $token) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->token = $token;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function getName() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this->name;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function setName(string $name) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->name = $name;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    $test = new Test();\n    $test->setId(111);\n    $test->setToken(999999);\n    $test->setName('Fred');\n    ```", "```php\n    $pattern = '<tr><th>%s</th><td>%s</td></tr>';\n    echo '<table width=\"50%\" border=1>';\n    printf($pattern, 'ID', $test->getId());\n    printf($pattern, 'Token', $test->getToken());\n    printf($pattern, 'Name', $test->getName());\n    echo '</table>';\n    ```", "```php\n// /repo/ch01/php8_prop_reduce.php\ndeclare(strict_types=1);\nclass Test {\n\u00a0\u00a0\u00a0\u00a0public int $id = 0;\n\u00a0\u00a0\u00a0\u00a0public int $token = 0;\n\u00a0\u00a0\u00a0\u00a0public string\u00a0\u00a0$name = '';\n}\n// assign values\n$test = new Test();\n$test->id = 111;\n$test->token = 999999;\n$test->name = 'Fred';\n// display results\n$pattern = '<tr><th>%s</th><td>%s</td></tr>';\necho '<table width=\"50%\" border=1>';\nprintf($pattern, 'ID', $test->id);\nprintf($pattern, 'Token', $test->token);\nprintf($pattern, 'Name', $test->name);\necho '</table>';\n```"]