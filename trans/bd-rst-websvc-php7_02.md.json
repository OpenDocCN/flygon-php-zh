["```php\n<?php\nfunction add($num1, $num2){\n    if (!is_int($num1)){\n        throw new Exception(\"$num1 is not an integer\");\n    }\n    if (!is_int($num2)){\n        throw new Exception(\"$num2 is not an integer\");\n    }\n\n    return ($num1+$num2);\n}\n\necho add(2,4);  // 6\necho add(1.5,4); //Fatal error:  Uncaught Exception: 1.5 is not an integer\n```", "```php\n<?php\nfunction add(int $num1,int $num2){\n    return ($num1+$num2);\n}\necho add(2,4); //6\necho add(\"2\",4); //6\necho add(\"something\",4); \n//Fatal error:  Uncaught TypeError: Argument 1 passed to add() must be of the type integer, string given\n\n```", "```php\n<?php\ndeclare(strict_types=1); \n\nfunction add(int $num1,int $num2){\n    return ($num1+$num2);\n}\n\necho add(2,4); //6\necho add(\"2\",4); //Fatal error:  Uncaught TypeError: Argument 1 passed to add() must be of the type integer, string given,\n\necho add(\"something\",4); // Fatal error:  Uncaught TypeError: Argument 1 passed to add() must be of the type integer, string given\n```", "```php\n<?php\nfunction add($num1, $num2):int{\n    return ($num1+$num2);\n}\n\necho add(2,4); //6\necho add(2.5,4); //6\n```", "```php\n<?php\ndeclare(strict_types=1);\nfunction add($num1, $num2):int{\n    return ($num1+$num2);\n}\n\necho add(2,4); //6\necho add(2.5,4); //Fatal error:  Uncaught TypeError: Return value of add() must be of the type integer, float returned\n```", "```php\n$username = isset($_GET['username']) ? $_GET['username'] : '';\n```", "```php\n$username = $_GET['username'] ?? '';\n```", "```php\n<?php\n// use statement in Pre-PHP7 code\nuse abc\\namespace\\ClassA;\nuse abc\\namespace\\ClassB;\nuse abc\\namespace\\ClassC as C;\n\nuse function abc\\namespace\\funcA;\nuse function abc\\namespace\\funcB;\nuse function abc\\namespace\\funcC;\n\nuse const abc\\namespace\\ConstA;\nuse const abc\\namespace\\ConstB;\nuse const abc\\namespace\\ConstC;\n\n// PHP 7+ code\nuse abc\\namespace\\{ClassA, ClassB, ClassC as C};\nuse function abc\\namespace\\{funcA, funcB, funcC};\nuse const abc\\namespace\\{ConstA, ConstB, ConstC};\n```", "```php\n/* function to return generator */\nfunction getValues($max){\n    for($i=0; $i<$max; $i++ ){\n        yield $i*2;\n    }\n}\n\n// Using generator\nforeach(getValues(99999) as $value){\n    echo \"Values: $value <br>\";\n}\n```", "```php\n<?php\n\n$gen = (function() {\n    yield \"First Yield\";\n    yield \"Second Yield\";\n\n    return \"return Value\";\n})();\n\nforeach ($gen as $val) {\n    echo $val, PHP_EOL;\n}\n\necho $gen->getReturn(), PHP_EOL;\n```", "```php\nFirst Yield\nSecond Yield\nreturn Value\n```", "```php\n<?php\nfunction gen()\n{\n    yield \"yield 1 from gen1\";\n    yield \"yield 2 from gen1\";\n    yield from gen2();\n}\n\nfunction gen2()\n{\n    yield \"yield 1 from gen2\";\n    yield \"yield 2 from gen2\";\n}\n\nforeach (gen() as $val)\n{\n    echo $val, PHP_EOL;\n}\n\n/* above will result in output:\nyield 1 from gen1\nyield 2 from gen1\nyield 1 from gen2\nyield 2 from gen2 \n*/\n\n```", "```php\n<?php\nclass App\n{\n    public function __construct()\n    {\n        //some code here\n    }\n}\n\nfunction useApp(App $app)\n{\n    //use app somewhere\n}\n\n$app = new App();\nuseApp($app);\n```", "```php\n<?php\ninterface Logger {\n    public function log(string $msg);\n}\n\nclass Application {\n    private $logger;\n\n    public function getLogger(): Logger {\n         return $this->logger;\n    }\n\n    public function setLogger(Logger $logger) {\n         $this->logger = $logger;\n    }\n}\n\n$app = new Application;\n$app->setLogger(new class implements Logger {\n    public function log(string $msg) {\n        echo $msg;\n    }\n});\n\nvar_dump($app->getLogger()); //object(class@anonymous)#2 (0) {}\n```", "```php\n<?php\n// Pre PHP 7 code\nclass Point{\n    private $x = 1; \n    private $y = 2;\n}\n\n$getXFn = function() {return $this->x;};\n$getX = $getXFn->bindTo(new Point, 'Point');//intermediate closure\necho $getX(); // will output 1\n```", "```php\n<?php\n//  PHP 7+ code\nclass Point{\n    private $x = 1; \n    private $y = 2;\n}\n\n// PHP 7+ code\n$getX = function() {return $this->x;};\necho $getX->call(new Point); // outputs 1 as doing same thing\n```", "```php\n<?php\n// PHP 7+ closure call with parameter and binding\n\nclass Point{\n private $x = 1; \n private $y = 2;\n}\n\n$getX = function($margin) {return $this->x + $margin;};\necho $getX->call(new Point, 2); //outputs 3 by ($margin + $this->x)\n```", "```php\ntry {\n    fn();\n} catch(Throwable $error){\n    echo $error->getMessage(); //Call to undefined function fn()\n}\n```", "```php\ninterface Throwable\n{\n    public function getMessage(): string;\n    public function getCode(): int;\n    public function getFile(): string;\n    public function getLine(): int;\n    public function getTrace(): array;\n    public function getTraceAsString(): string;\n    public function getPrevious(): Throwable;\n    public function __toString(): string;\n}\n```", "```php\nsudo add-apt-repository ppa:ondrej/php\n```", "```php\nsudo apt-get update\n```", "```php\n(optional) sudo apt-get remove php7.0\n```", "```php\nsudo apt-get install php7.1 (from comments)\n```", "```php\n<?php\n\nfunction testReturn(): ?string\n{\n    return 'testing';\n}\n\nvar_dump(testReturn());\n// string(10) \"testing\"\n\nfunction testReturn2(): ?string\n{\n    return null;\n}\n\nvar_dump(testReturn2());\n//NULL\n\nfunction test(?string $name)\n{\n    var_dump($name);\n}\n\ntest('testing');\n//string(10) \"testing\"\n\ntest(null);\n//NULL\n\ntest();\n// Fatal error:  Uncaught ArgumentCountError: Too few arguments // to function test(),\n```", "```php\n<?php\n$records = [\n    [7, 'Haafiz'],\n    [8, 'Ali'],\n];\n\n// list() style\nlist($firstId, $firstName) = $records[0];\n\n// [] in PHP7.1 is having same result\n[$firstId, $firstName] = $records[0];\n\n```", "```php\n<?php\n$records = [\n    [\"id\" => 7, \"name\" => 'Haafiz'],\n    [\"id\" => 8, \"name\" => 'Ali'],\n];\n\n// list() style\nlist(\"id\" => $firstId, \"name\" => $firstName) = $records[0];\n\n// [] style\n[\"id\" => $firstId, \"name\" => $firstName] = $records[0];\n```", "```php\n<?php\ntry {\n    // some code\n} catch (FirstException | SecondException $e) {\n    // handle first and second exceptions\n}\n```"]