["```php\n**composer require widmogrod/php-functional**\n\n```", "```php\n<?php \n\nuse function Functional\\head; \nuse function Functional\\tail; \n\nuse Monad\\Writer; \n\nfunction filterM(callable $f, $collection) \n{ \n    $monad = $f(head($collection)); \n\n    $_filterM = function($collection) use($monad, $f, &$_filterM){ \n        if(count($collection) == 0) { \n            return $monad->of([]); \n        } \n\n        $x = head($collection); \n        $xs = tail($collection); \n\n        return $f($x)->bind(function($bool) use($x, $xs, $monad, $_filterM) { \n            return $_filterM($xs)->bind(function(array $acc) use($bool, $x, $monad) { \n                if($bool) { \n                    array_unshift($acc, $x); \n                } \n\n                return $monad->of($acc); \n            }); \n        }); \n    }; \n    return $_filterM($collection); \n} \n```", "```php\nfilterM :: (Monad m) => (a -> m Bool) -> [a] -> m [a] \nfilterM _ []     = return [] \nfilterM f (x:xs) = do \n    bool <- f x \n    acc  <- filterM p xs \n    return (if bool then x:acc else acc) \n```", "```php\n<?php \n\nfunction foldM(callable $f, $initial, $collection) \n{ \n    $monad = $f($initial, head($collection)); \n\n    $_foldM = function($acc, $collection) use($monad, $f, &$_foldM){ \n        if(count($collection) == 0) { \n            return $monad->of($acc); \n        } \n\n        $x = head($collection); \n        $xs = tail($collection); \n\n        return $f($acc, $x)->bind(function($result) use($acc,$xs,$_foldM) { \n            return $_foldM($result, $xs); \n        }); \n    }; \n\n    return $_foldM($initial, $collection); \n} \n```", "```php\n<?php \n\nuse Widmogrod\\Monad\\Maybe as m; \nuse Widmogrod\\Functional as f; \n\n$just = m\\just(10); \n$nothing = m\\nothing(); \n\n$just = m\\maybeNull(10); \n$nothing = m\\maybeNull(null); \n\necho maybe('Hello.', 'strtoupper', m\\maybe('Hi!')); \n// HI! echo maybe('Hello.', 'strtoupper', m\\nothing()); \n// HELLO. \n```", "```php\n<?php \n\n$divide = function($acc, $i) { \n    return $i == 0 ? nothing() : just($acc / $i); \n}; \n\nvar_dump(f\\foldM($divide, 100, [2, 5, 2])->extract()); \n// int(5) \n\nvar_dump(f\\foldM($divide, 100, [2, 0, 2])->extract()); \n// NULL \n```", "```php\n<?php \n\nfunction getUser($username): Maybe { \n  return $username == 'john.doe' ? just('John Doe') : nothing(); \n} \n\nvar_dump(just('john.doe')->map('getUser')); \n// object(Monad\\Maybe\\Just)#7 (1) { \n//     [\"value\":protected]=> object(Monad\\Maybe\\Just)#6 (1) { \n//         [\"value\":protected]=> string(8) \"John Doe\" \n//     } \n// } \n\nvar_dump(just('jane.doe')->map('getUser')); \n// object(Monad\\Maybe\\Just)#8 (1) { \n//     [\"value\":protected]=> object(Monad\\Maybe\\Nothing)#6 (0) { } \n// } \n```", "```php\n<?php \n\nvar_dump(just('john.doe')->bind('getUser')); \n// object(Monad\\Maybe\\Just)#6 (1) { \n//     [\"value\":protected]=> string(8) \"John Doe\" \n// } \n\nvar_dump(just('jane.doe')->bind('getUser')); \n// object(Monad\\Maybe\\Nothing)#8 (0) { } \n```", "```php\n<?php \n\nuse Monad\\Collection; \nuse Functional as f; \n\n$powerset = filterM(function($x) { \n    return Collection::of([true, false]); \n}, [1, 2, 3]); \n\nprint_r($powerset->extract()); \n// Array ( \n//     [0] => Array ( [0] => 1 [1] => 2 [2] => 3 ) \n//     [1] => Array ( [0] => 1 [1] => 2 ) \n//     [2] => Array ( [0] => 1 [1] => 3 ) \n//     [3] => Array ( [0] => 1 ) \n//     [4] => Array ( [0] => 2 [1] => 3 ) \n//     [5] => Array ( [0] => 2 ) \n//     [6] => Array ( [0] => 3 ) \n//     [7] => Array ( ) // ) \n```", "```php\n<?php \nuse Monad\\Collection; \nuse Functional as f; \n\n$a = Collection::of([1, 2, 3])->bind(function($x) { \n    return [$x, -$x]; \n}); \nprint_r($a->extract()); \n// Array ( \n//     [0] => 1 \n//     [1] => -1 \n//     [2] => 2 \n//     [3] => -2 \n//     [4] => 3 \n//     [5] => -3 \n// ) \n\n$b = $a->bind(function($y) { \n    return $y > 0 ? [$y * 2, $y / 2] : $y; \n}); \nprint_r($b->extract()); \n// Array ( \n//     [0] => 2 \n//     [1] => 0.5 \n//     [2] => -1 \n//     [3] => 4 \n//     [4] => 1 \n//     [5] => -2 \n//     [6] => 6 \n//     [7] => 1.5 \n//     [8] => -3 \n// ) \n```", "```php\n<?php \n\nclass ChessPosition { \n    public $col; \n    public $row; \n\n    public function __construct($c, $r) \n    { \n        $this->col = $c; \n        $this->row = $r; \n    } \n\n    public function isValid(): bool \n    { \n        return ($this->col > 0 && $this->col < 9) && \n               ($this->row > 0 && $this->row < 9); \n    } \n} \n\nfunction chess_pos($c, $r) { return new ChessPosition($c, $r); } \n```", "```php\n<?php \n\nfunction moveKnight(ChessPosition $pos): Collection \n{ \n    return Collection::of(f\\filter(f\\invoke('isValid'), Collection::of([ \n        chess_pos($pos->col + 2, $pos->row - 1), \n        chess_pos($pos->col + 2, $pos->row + 1), \n        chess_pos($pos->col - 2, $pos->row - 1), \n        chess_pos($pos->col - 2, $pos->row + 1), \n        chess_pos($pos->col + 1, $pos->row - 2), \n        chess_pos($pos->col + 1, $pos->row + 2), \n        chess_pos($pos->col - 1, $pos->row - 2), \n        chess_pos($pos->col - 1, $pos->row + 2), \n    ]))); \n} \n\nprint_r(moveKnight(chess_pos(8,1))->extract()); \n// Array ( \n//     [0] => ChessPosition Object ( [row] => 2 [col] => 6 ) \n//     [1] => ChessPosition Object ( [row] => 3 [col] => 7 ) \n// ) \n```", "```php\n<?php \n\nfunction moveKnight3($start): array \n{ \n    return Collection::of($start) \n        ->bind('moveKnight') \n        ->bind('moveKnight') \n        ->bind('moveKnight') \n        ->extract(); \n} \n\nfunction canReach($start, $end): bool \n{ \n    return in_array($end, moveKnight3($start)); \n} \n\nvar_dump(canReach(chess_pos(6, 2), chess_pos(6, 1))); \n// bool(true) \n\nvar_dump(canReach(chess_pos(6, 2), chess_pos(7, 3))); \n// bool(false) \n```", "```php\n<?php \n\n$data = [1, 10, 15, 20, 25]; \n$filter = function($i) { \n    if ($i % 2 == 1) { \n        return new Writer(false, \"Reject odd number $i.\\n\"); \n    } else if($i > 15) { \n      return new Writer(false, \"Reject $i because it is bigger than 15\\n\"); \n    } \n\n    return new Writer(true); \n}; \n\nlist($result, $log) = filterM($filter, $data)->runWriter(); \n\nvar_dump($result); \n// array(1) { \n//   [0]=> int(10) \n// } \n\necho $log->get(); \n// Reject odd number 1\\. // Reject odd number 15\\. // Reject 20 because it is bigger than 15 \n// Reject odd number 25\\. \n```", "```php\n<?php \n\nfunction some_complex_function(int $input) \n{ \n    $msg = new StringMonoid('received: '.print_r($input,  true).'.'); \n\n    if($input > 10) { \n        $w = new Writer($input / 2, $msg->concat(new  StringMonoid(\"Halved the value. \"))); \n    } else { \n        $w = new Writer($input, $msg); \n    } \n\n    if($input > 20) \n    { \n        return $w->bind('some_complex_function'); \n    } \n\n    return $w; \n} \n\nlist($value, $log) = (new Writer(15))->bind('some_complex_function')->runWriter(); \necho $log->get(); \n// received: 15\\. Halved the value. list($value, $log) = some_complex_function(27)->runWriter(); \necho $log->get(); // received: 27\\. Halved the value. received: 13\\. Halved the value. list($value, $log) = some_complex_function(50)->runWriter(); \necho $log->get(); \n// received: 50\\. Halved the value. received: 25\\. Halved the value. received: 12\\. Halved the value. \n```", "```php\n<?php \nfunction hello() \n{ \n    return Reader::of(function($name) { \n        return \"Hello $name!\"; \n    }); \n} \n\nfunction ask($content) \n{ \n    return Reader::of(function($name) use($content) { \n        return $content. ($name == 'World' ? '' : ' How are you ?'); \n    }); \n} \n\n$r = hello() \n      ->bind('ask') \n      ->map('strtoupper'); \n\necho $r->runReader('World'); \n// HELLO WORLD! echo $r->runReader('Gilles'); \n// HELLO GILLES! HOW ARE YOU ? \n```", "```php\n<?php \n\nclass DIC \n{ \n    public $userEntityManager; \n    public $emailService; \n} \n\nfunction getUser(string $username) \n{ \n    return Reader::of(function(DIC $dic) use($username) { \n        return $dic->userEntityManager->getUser($username); \n    }); \n} \n\nfunction getUserEmail($username) \n{ \n    return getUser($username)->map(function($user) { \n        return $user->email; \n\n    }); \n} \n\nfunction sendEmail($title, $content, $email) \n{ \n    return Reader::of(function(DIC $dic) use($title, $content, $email) { \n        return $dic->emailService->send($title, $content, $email); \n    }); \n} \n```", "```php\n<?php \n\nfunction controller(array $post) \n{ \n    return Reader::of(function(DIC $dic) use($post) { \n        getUserEmail($post['username']) \n            ->bind(f\\curry('sendEmail', ['Welcome', '...'])) \n            ->runReader($dic); \n\n        return \"<h1>Welcome !</h1>\"; \n    }); \n} \n```", "```php\n<?php \n\n$dic = new DIC(); \n$dic->userEntityManager = new class() { \n    public function getUser() { \n      return new class() { \n          public $email = 'john.doe@email.com'; \n      }; \n    } \n}; \n\n$dic->emailService = new class() { \n    public function send($title, $content, $email) { \n        echo \"Sending '$title' to $email\"; \n    } \n}; \n\n$content = controller(['username' => 'john.doe'])->runReader($dic); \n// Sending 'Welcome' to john.doe@email.com \n\necho $content; \n// <h1>Welcome !</h1> \n```", "```php\nfunction randomInt() \n{ \n    return s\\state(function($state) { \n        mt_srand($state); \n        return [mt_rand(), mt_rand()]; \n    }); \n} \n\necho s\\evalState(randomInt(), 12345); \n// 162946439 \n```", "```php\n<?php \n\nfunction getUser($id, $current = []) \n{ \n    return f\\curryN(2, function($id, $current) { \n        return s\\state(function($cache) use ($id, $current) { \n            if(! isset($cache[$id])) { \n                $cache[$id] = \"user #$id\"; \n            } \n\n            return [f\\append($current, $cache[$id]), $cache]; \n        }); \n    })(...func_get_args()); \n} \n\nlist($users, $cache) = s\\runState( \n  getUser(1, []) \n    ->bind(getUser(2)) \n    ->bind(getUser(1)) \n    ->bind(getUser(3)), \n  [] \n); \n\nprint_r($users); \n// Array ( \n//     [0] => user #1 \n//     [1] => user #2 \n//     [2] => user #1 \n//     [3] => user #3 \n// ) \n\nprint_r($cache); \n// Array ( \n//     [1] => user #1 \n//     [2] => user #2 \n//     [3] => user #3 \n// ) \n```", "```php\n<?php \n\nuse Widmogrod\\Functional as f; \nuse Widmogrod\\Monad\\IO; \nuse Widmogrod\\Monad\\Identity; \n\n$readFromInput = f\\mcompose(IO\\putStrLn, IO\\getLine, IO\\putStrLn); \n$readFromInput(Monad\\Identity::of('Enter something and press  <enter>'))->run(); \n// Enter something and press <enter> \n// Hi! // Hi! \n```"]