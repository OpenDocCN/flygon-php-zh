["```php\nclass LegacyDice \n{ \n  public function roll(): string \n  { \n    $rand = rand(1, 6); \n\n    // Switch statement to convert a number between 1 and 6 to a Roman Numeral. \n    switch ($rand) { \n      case 5: \n        $randString = \"V\"; \n        break; \n      case 6: \n        $randString = \"VI\"; \n        break; \n      default: \n        $randString = str_repeat(\"I\", $rand); \n        break; \n    } \n\n    return $randString; \n  } \n} \n\n```", "```php\nclass Dice \n{ \n  /** \n   * Roll the dice. \n   * @return string \n   */ \n  public function roll(): string \n  { \n    $rand = rand(1, 6); \n\n    return $this->numberToRomanNumeral($rand); \n  } \n\n  /** \n   * Convert a number between 1 and 6 to a Roman Numeral. \n   * \n   * @param int $number \n   * \n   * @return string \n   * @throws Exception \n   */ \n  public function numberToRomanNumeral(int $number): string \n  { \n    if (($number < 1) || ($number > 6)) { \n      throw new Exception('Number out of range.'); \n    } \n\n    switch ($number) { \n      case 5: \n        $randString = \"V\"; \n        break; \n      case 6: \n        $randString = \"VI\"; \n        break; \n      default: \n        $randString = str_repeat(\"I\", $number); \n        break; \n    } \n\n    return $randString; \n  } \n} \n\n```", "```php\ninterface Output \n{ \n  public function load(array $data); \n} \n\nclass Serial implements Output \n{ \n  public function load(array $data) \n  { \n    return serialize($data); \n  } \n} \n\nclass JSON implements Output \n{ \n  public function load(array $data) \n  { \n    return json_encode($data); \n  } \n} \n\nclass XML implements Output \n{ \n  public function load(array $data) \n  { \n    return xmlrpc_encode($data); \n  } \n} \n\n```", "```php\n$client = \"JSON\"; \n\nswitch ($client) { \n  case \"Serial\": \n    $client = new Serial(); \n    break; \n  case \"JSON\": \n    $client = new JSON(); \n    break; \n  case \"XML\": \n    $client = new XML(); \n    break; \n} \n\necho $client->load(array(1, 2)); \n\n```", "```php\nclass OutputClient \n{ \n  private $output; \n\n  public function __construct(Output $outputType) \n  { \n    $this->output = $outputType; \n  } \n\n  public function loadOutput(array $data) \n  { \n    return $this->output->load($data); \n  } \n} \n\n```", "```php\n**$client = new OutputClient(new JSON());\necho $client->loadOutput(array(1, 2));**\n\n```", "```php\nclass Salary \n{ \n  private $baseSalary; \n  private $commission = 0; \n  private $pension = 0; \n\n  public function __construct(float $baseSalary, float $commission, float $pension) \n  { \n    $this->baseSalary = $baseSalary; \n    $this->commission = $commission; \n    $this->pension    = $pension; \n  } \n\n  public function calculate(float $sales): float \n  { \n    $base       = $this->baseSalary; \n    $commission = $this->commission * $sales; \n    $deducation = $base * $this->pension; \n\n    return $commission + $base - $deducation; \n  } \n} \n\n```", "```php\nclass Employee \n{ \n  private $name; \n  private $baseSalary; \n  private $commission = 0; \n  private $pension = 0; \n\n  public function __construct(string $name, float $baseSalary) \n  { \n    $this->name       = $name; \n    $this->baseSalary = $baseSalary; \n  } \n\n  public function getBaseSalary(): float \n  { \n    return $this->baseSalary; \n  } \n\n  public function setCommission(float $percentage) \n  { \n    $this->commission = $percentage; \n  } \n\n  public function getCommission(): float \n  { \n    return $this->commission; \n  } \n\n  public function setPension(float $rate) \n  { \n    $this->pension = $rate; \n  } \n\n  public function getPension(): float \n  { \n    return $this->commission; \n  } \n} \n\n```", "```php\nclass Salary \n{ \n  private $employee; \n\n  public function __construct(Employee $employee) \n  { \n    $this->employee = $employee; \n  } \n\n  public function calculate(float $sales): float \n  { \n    $base       = $this->employee->getBaseSalary(); \n    $commission = $this->employee->getCommission() * $sales; \n    $deducation = $base * $this->employee->getPension(); \n\n    return $commission + $base - $deducation; \n  } \n} \n\n```", "```php\nclass Human \n{ \n  public $name; \n  public $dateOfBirth; \n  public $height; \n  public $weight; \n} \n\n```", "```php\nclass Human \n{ \n  private $name; \n  private $dateOfBirth; \n  private $height; \n  private $weight; \n\n  public function __construct(string $name, double $dateOfBirth) \n  { \n    $this->name        = $name; \n    $this->dateOfBirth = $dateOfBirth; \n  } \n\n  public function setWeight(double $weight) \n  { \n    $this->weight = $weight; \n  } \n\n  public function getWeight(): double \n  { \n    return $this->weight; \n  } \n\n  public function setHeight(double $height) \n  { \n    $this->height = $height; \n  } \n\n  public function getHeight(): double \n  { \n    return $this->height; \n  } \n} \n\n```", "```php\nclass Salary \n{ \n  private $employee; \n\n  public function __construct(Employee $employee) \n  { \n    $this->employee = $employee; \n  } \n\n  public function calculate(float $sales): float \n  { \n    $base       = $this->employee->getBaseSalary(); \n    $commission = $this->employee->getCommission() * $sales; \n    $deducation = $base * $this->employee->getPension(); \n\n    return $commission + $base - $deducation; \n  } \n} \n\n```", "```php\nclass Employee \n{ \n  private $name; \n  private $baseSalary; \n  private $commission = 0; \n  private $pension = 0; \n\n  public function __construct(string $name, float $baseSalary) \n  { \n    $this->name       = $name; \n    $this->baseSalary = $baseSalary; \n  } \n\n  public function setCommission(float $percentage) \n  { \n    $this->commission = $percentage; \n  } \n\n  public function setPension(float $rate) \n  { \n    $this->pension = $rate; \n  } \n\n  public function calculate(float $sales): float \n  { \n    $base       = $this->baseSalary; \n    $commission = $this->commission * $sales; \n    $deducation = $base * $this->pension; \n\n    return $commission + $base - $deducation; \n  } \n} \n\n```", "```php\nclass Before \n{ \n  function deductTax(float $salary, float $rate): float \n  { \n    $salary = $salary * $rate; \n\n    return $salary; \n  } \n} \n\n```", "```php\nclass After \n{ \n  function deductTax(float $salary, float $rate): float \n  { \n    $netSalary = $salary * $rate; \n\n    return $netSalary; \n  } \n} \n\n```", "```php\nSplSubject { \n   /* Methods */ \n   abstract public void attach ( SplObserver $observer ) \n   abstract public void detach ( SplObserver $observer ) \n   abstract public void notify ( void ) \n} \n\n```", "```php\ninterface Music \n{ \n  public function play(); \n} \n\n```"]