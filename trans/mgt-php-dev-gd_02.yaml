- en: Chapter 2. Magento Fundamentals for Developers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。开发人员的Magento基础知识
- en: In this chapter, we will cover the fundamental concepts for working with Magento.
    We will learn how Magento is structured, and we will go over the source of Magento's
    flexibility, that is, its modular architecture.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍与Magento一起工作的基本概念。我们将了解Magento的结构，并将介绍Magento灵活性的来源，即其模块化架构。
- en: Magento is a flexible and powerful system. Unfortunately, this adds some level
    of complexity too. Currently, a clean installation of Magento has around 30,000
    files and over 1.2 million lines of code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Magento是一个灵活而强大的系统。不幸的是，这也增加了一定程度的复杂性。目前，Magento的干净安装大约有30,000个文件和超过120万行代码。
- en: With all that power and complexity, Magento can be daunting for new developers;
    but don't worry. This chapter is designed to teach new developers all the fundamental
    concepts and tools they will need to use and extend Magento, and in the next chapter,
    we will be diving deep into Magento models and data collections.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有如此强大和复杂的功能，Magento对于新开发人员可能会令人望而生畏；但不用担心。本章旨在教新开发人员所有他们需要使用和扩展Magento的基本概念和工具，在下一章中，我们将深入研究Magento的模型和数据集。
- en: Zend Framework – the base of Magento
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zend Framework – Magento的基础
- en: As you probably know, Magento is the most powerful e-commerce platform in the
    market; what you might not know about Magento is that it is also an **object-oriented**
    (**OO**) PHP framework developed on top of Zend Framework.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能知道，Magento是市场上最强大的电子商务平台；您可能不知道的是，Magento还是一个基于Zend Framework开发的**面向对象**（**OO**）PHP框架。
- en: 'Zend''s official site describes the framework as:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Zend的官方网站描述了该框架为：
- en: '*Zend Framework 2 is an open source framework for developing web applications
    and services using PHP 5.3+. Zend Framework 2 uses 100% object-oriented code and
    utilises most of the new features of PHP 5.3, namely namespaces, late static binding,
    lambda functions and closures.*'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Zend Framework 2是一个使用PHP 5.3+开发Web应用程序和服务的开源框架。Zend Framework 2使用100%面向对象的代码，并利用了PHP
    5.3的大多数新特性，即命名空间、后期静态绑定、lambda函数和闭包。*'
- en: '>'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '>'
- en: '*The component structure of Zend Framework 2 is unique; each component is designed
    with few dependencies on other components. ZF2 follows the SOLID object oriented
    design principle. This loosely coupled architecture allows developers to use whichever
    components they want. We call this a "use-at-will" design.*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Zend Framework 2的组件结构是独特的；每个组件都设计为对其他组件的依赖较少。ZF2遵循SOLID面向对象设计原则。这种松散耦合的架构允许开发人员使用他们想要的任何组件。我们称之为“随意使用”设计。*'
- en: 'But what is Zend Framework exactly? Zend Framework is an OO framework developed
    on PHP that implements the **Model-View-Controller** (**MVC**) paradigm. When
    Varien, now Magento Inc., started developing Magento it decided to do it on top
    of Zend because of the following components:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但是Zend Framework究竟是什么？Zend Framework是一个基于PHP开发的面向对象框架，实现了**模型-视图-控制器**（**MVC**）范式。当Varien，现在的Magento公司，开始开发Magento时，决定在Zend的基础上进行开发，因为以下组件：
- en: '`Zend_Cache`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Cache`'
- en: '`Zend_Acl`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Acl`'
- en: '`Zend_Locale`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Locale`'
- en: '`Zend_DB`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_DB`'
- en: '`Zend_Pdf`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Pdf`'
- en: '`Zend_Currency`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Currency`'
- en: '`Zend_Date`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Date`'
- en: '`Zend_Soap`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Soap`'
- en: '`Zend_Http`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zend_Http`'
- en: In total, Magento uses around 15 different Zend components. The Varien library
    directly extends several of the Zend components mentioned previously, for example
    `Varien_Cache_Core` extends from `Zend_Cache_Core` .
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，Magento使用了大约15个不同的Zend组件。Varien库直接扩展了先前提到的几个Zend组件，例如`Varien_Cache_Core`是从`Zend_Cache_Core`扩展而来的。
- en: 'Using Zend Framework, Magento was built with the following principles in mind:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Zend Framework，Magento是根据以下原则构建的：
- en: '**Maintainability**: It occurs using code pools to keep the core code separate
    from local customizations and third-party modules'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：通过使用代码池来将核心代码与本地定制和第三方模块分开'
- en: '**Upgradability**: Magento modularity allows extensions and third-party modules
    to be updated independently from the rest of the system'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可升级性**：Magento的模块化允许扩展和第三方模块独立于系统的其他部分进行更新'
- en: '**Flexibility**: Allows seamless customization and simplifies the development
    of new features'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性**：允许无缝定制并简化新功能的开发'
- en: Although having used Zend Framework or even understanding it are not the requirements
    for developing with Magento, having at least a basic understanding of the Zend
    components, usage, and interaction can be invaluable information when we start
    digging deeper into the core of Magento.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用Zend Framework甚至理解它并不是开发Magento的要求，但至少对Zend组件、用法和交互有基本的了解，在我们开始深入挖掘Magento的核心时，可能会是非常宝贵的信息。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about Zend Framework at [http://framework.zend.com/](http://framework.zend.com/).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://framework.zend.com/](http://framework.zend.com/)了解更多关于Zend Framework的信息。
- en: Magento folder structure
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Magento文件夹结构
- en: 'Magento folder structure is slightly different from other MVC applications;
    let''s take a look at the directory tree, and each directory and its functions:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Magento的文件夹结构与其他MVC应用程序略有不同；让我们来看看目录树，以及每个目录及其功能：
- en: '`app`: This folder is the core of Magento and is subdivided into three importing
    directories:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app`：这个文件夹是Magento的核心，分为三个导入目录：'
- en: '`code`: This contains all our application code divided into three code pools
    such as `core`, `community`, and `local`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`code`：这包含了我们的应用程序代码，分为`core`、`community`和`local`三个代码池'
- en: '`design`: This contains all the templates and layouts for our application'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`design`：这包含了我们应用程序的所有模板和布局'
- en: '`locale`: This contains all the translation and e-mail template files used
    for the store'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locale`：这包含了商店使用的所有翻译和电子邮件模板文件'
- en: '`js`: This contains all the JavaScript libraries that are used in Magento'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`js`：这包含了Magento中使用的所有JavaScript库'
- en: '`media`: This contains all the images and media files for our products and
    CMS pages as well as the product image cache'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`media`：这包含了我们产品和CMS页面的所有图片和媒体文件，以及产品图片缓存'
- en: '`lib`: This contains all the third-party libraries used in Magento such as
    Zend and PEAR, as well as the custom libraries developed by Magento, which reside
    under the Varien and Mage directories'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib`：这包含Magento使用的所有第三方库，如Zend和PEAR，以及Magento开发的自定义库，这些库位于Varien和Mage目录下'
- en: '`skin`: This contains all CSS code, images, and JavaScript files used by the
    corresponding theme'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`皮肤`：这包含对应主题使用的所有CSS代码、图像和JavaScript文件'
- en: '`var`: This contains our temporary data such as cache files, index lock files,
    sessions, import/export files, and in the case of the Enterprise edition the full
    page cache folders'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var`：这包含我们的临时数据，如缓存文件、索引锁文件、会话、导入/导出文件，以及企业版中的完整页面缓存文件夹'
- en: 'Magento is a modular system. This means that the application, including the
    core, is divided into smaller modules. For this reason, the folder structure plays
    a key role in the organization of each module core; a typical Magento module folder
    structure would look something like the following figure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Magento是一个模块化系统。这意味着应用程序，包括核心，被划分为较小的模块。因此，文件夹结构在每个模块核心的组织中起着关键作用；典型的Magento模块文件夹结构看起来像下面的图：
- en: '![Magento folder structure](graphics/3060OS_02_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Magento文件夹结构](graphics/3060OS_02_01.jpg)'
- en: 'Let''s review each folder in more detail:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地审查每个文件夹：
- en: '`Block`: This folder contains blocks in Magento that form an additional layer
    of logic between the controllers and views'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`块`：这个文件夹包含Magento中形成控制器和视图之间的额外逻辑的块'
- en: '`controllers`: `controllers` folders are formed by actions that process web
    server requests'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controllers`：`controllers`文件夹由处理Web服务器请求的操作组成'
- en: '`Controller`: The classes in this folder are meant to be abstract classes and
    extended by the `controller` class under the the `controllers` folder'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`控制器`：这个文件夹中的类是抽象类，由`controllers`文件夹下的`controller`类扩展'
- en: '`etc`: Here we can find the module-specific configuration in the form of XML
    files such as `config.xml` and `system.xml`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etc`：在这里，我们可以找到以XML文件形式的模块特定配置，例如`config.xml`和`system.xml`'
- en: '`Helper`: This folder contains auxiliary classes that encapsulate a common-module
    functionality and make it available to a class of the same module and to other
    modules'' classes as well'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`助手`：这个文件夹包含封装常见模块功能并使其可用于同一模块的类和其他模块类的辅助类'
- en: '`Model`: This folder contains models that support the controllers in the module
    for interacting with data'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`模型`：这个文件夹包含支持模块中控制器与数据交互的模型'
- en: '`sql`: This folder contains the installation and upgrade files for each specific
    module'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sql`：这个文件夹包含每个特定模块的安装和升级文件'
- en: As we will see later on in this chapter, Magento makes heavy use of factory
    names and factory methods. This is why the folder structure is so important.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在本章后面看到的那样，Magento大量使用工厂名称和工厂方法。这就是为什么文件夹结构如此重要的原因。
- en: Modular architecture
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化架构
- en: Rather than being a large application, Magento is built by smaller modules,
    each adding specific functionality to Magento.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Magento不是一个庞大的应用程序，而是由较小的模块构建，每个模块为Magento添加特定功能。
- en: One of the advantages of this approach is the ability to enable and disable
    specific module functionality with ease, as well as add new functionality by adding
    new modules.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优势之一是能够轻松启用和禁用特定模块功能，以及通过添加新模块来添加新功能。
- en: Autoloader
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动加载程序
- en: Magento is a huge framework, composed of close to 30,000 files. Requiring every
    single file when the application starts would make it incredibly slow and heavy.
    For this reason, Magento makes use of an autoloader class to find the required
    files each time a factory method is called.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Magento是一个庞大的框架，由近30000个文件组成。在应用程序启动时需要每个文件将使其变得非常缓慢和沉重。因此，Magento使用自动加载程序类来在每次调用工厂方法时找到所需的文件。
- en: So, what exactly is an autoloader? PHP5 includes a function called `__autoload()`.
    When instantiating a class, the `__autoload()` function is automatically called;
    inside this function, custom logic is defined to parse the class name and the
    required file.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，自动加载程序到底是什么？PHP5包含一个名为`__autoload()`的函数。在实例化类时，`__autoload()`函数会自动调用；在这个函数内部，定义了自定义逻辑来解析类名和所需文件。
- en: 'Let''s take a closer look at the Magento bootstrap code located at `app/Mage.php`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看位于`app/Mage.php`的Magento引导代码：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The bootstrap file takes care of defining the `include` paths and initializing
    the Varien autoloader, which will in turn define its own `autoload` function as
    the default function to call. Let''s take a look under the hood and see what the
    Varien `autoload` function is doing:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 引导文件负责定义`include`路径和初始化Varien自动加载程序，后者将定义自己的`autoload`函数作为默认调用函数。让我们来看看Varien
    `autoload`函数的内部工作：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `autoload` class takes a single parameter called `$class`, which is an alias
    provided by the factory method. This alias is processed to generate a matching
    class name that is then included.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoload`类接受一个名为`$class`的参数，这是工厂方法提供的别名。这个别名被处理以生成一个匹配的类名，然后被包含。'
- en: As we mentioned before, Magento's directory structure is important due to the
    fact that Magento derives its class names from the directory structure. This convention
    is the core principle behind factory methods that we will be reviewing later on
    in this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Magento的目录结构很重要，因为Magento从目录结构中派生其类名。这种约定是我们将在本章后面审查的工厂方法的核心原则。
- en: Code pools
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码池
- en: 'As we mentioned before, inside our `app/code` folder we have our application
    code divided into three different directories known as code pools . They are as
    follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，在我们的`app/code`文件夹中，我们的应用程序代码分为三个不同的目录，称为代码池。它们如下：
- en: '`core`: This is where the Magento core modules that provide the base functionality
    reside. The golden rule among Magento developers is that you should never, by
    any circumstance, modify any files under the `core` code pool.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`核心`：这是Magento核心模块提供基本功能的地方。Magento开发人员之间的黄金法则是，绝对不要修改`core`代码池下的任何文件。'
- en: '`community`: This is the location where third-party modules are placed. They
    are either provided by third parties or installed through Magento Connect.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`community`：这是第三方模块放置的位置。它们要么由第三方提供，要么通过Magento Connect安装。'
- en: '`local`: This is where all the modules and code developed specifically for
    this instance of Magento reside.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`本地`：这是专门为Magento实例开发的所有模块和代码所在的位置。'
- en: 'The code pools identify where the module came from and on which order they
    should be loaded. If we take another look at the `Mage.php` bootstrap file, we
    can see the order on which code pools are loaded:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 代码池确定模块来自何处以及它们应该被加载的顺序。如果我们再看一下`Mage.php`引导文件，我们可以看到代码池加载的顺序：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This means that for each class request, Magento will look in `local`, then `community`,
    then `core`, and finally inside the `lib` folder.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着对于每个类请求，Magento将首先查找`local`，然后是`community`，然后是`core`，最后是`lib`文件夹内的内容。
- en: This also leads to an interesting behavior that can easily be used for overriding
    `core` and `community` classes, by just copying the directory structure and matching
    the class name.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这也导致了一个有趣的行为，可以很容易地用于覆盖`core`和`community`类，只需复制目录结构并匹配类名。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Needless to say that this is a terrible practice, but it is still useful to
    know about just in case you someday have to take care of a project that exploits
    this behavior.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 毋庸置疑，这是一个糟糕的做法，但了解这一点仍然是有用的，以防将来有一天你不得不处理利用这种行为的项目。
- en: Routing and request flow
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由和请求流程
- en: Before going into more detail about the different components that form a part
    of Magento, it is important that we understand how these components interact together
    and how Magento processes requests coming from the web server.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在更详细地了解构成Magento一部分的不同组件之前，重要的是我们了解这些组件如何相互交互以及Magento如何处理来自Web服务器的请求。
- en: 'As with any other PHP application, we have a single file as an entry point
    for every request; in the case of Magento this file is `index.php`, which is in
    charge of loading the `Mage.php` bootstrap class and starting the request cycle.
    It then goes through the following steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他PHP应用程序一样，我们有一个单一文件作为每个请求的入口点；在Magento的情况下，这个文件是`index.php`，负责加载`Mage.php`引导类并启动请求周期。然后它经历以下步骤：
- en: The web server receives the request and Magento is instantiated by calling the
    bootstrap file, `Mage.php`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Web服务器接收请求，并通过调用引导文件`Mage.php`来实例化Magento。
- en: The frontend controller is instantiated and initialized; during this controller
    initialization Magento searches for the web routes and instantiates them.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端控制器被实例化和初始化；在控制器初始化期间，Magento搜索web路由并实例化它们。
- en: Magento then iterates through each of the routers and calls the match. The `match`
    method is responsible for processing the URL and generating the corresponding
    controller and action.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后Magento遍历每个路由器并调用匹配。`match`方法负责处理URL并生成相应的控制器和操作。
- en: Magento then instantiates the matching controller and takes the corresponding
    action.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Magento然后实例化匹配的控制器并执行相应的操作。
- en: 'Routers are especially important in this process. The `Router` objects are
    used by the frontend controller to match a requested URL (route) to a module controller
    and action. By default, Magento comes with the following routers:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器在这个过程中尤其重要。前端控制器使用`Router`对象将请求的URL（路由）与模块控制器和操作进行匹配。默认情况下，Magento带有以下路由器：
- en: '`Mage_Core_Controller_Varien_Router_Admin`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage_Core_Controller_Varien_Router_Admin`'
- en: '`Mage_Core_Controller_Varien_Router_Standard`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage_Core_Controller_Varien_Router_Standard`'
- en: '`Mage_Core_Controller_Varien_Router_Default`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage_Core_Controller_Varien_Router_Default`'
- en: The action controller will then load and render the layout, which in turn will
    load the corresponding blocks, models, and templates.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后动作控制器将加载和渲染布局，然后加载相应的块、模型和模板。
- en: Let's analyze how Magento will handle a request to a category page; we will
    use `http://localhost/catalog/category/view/id/10` as an example. Magento URIs
    are comprised of three parts – */FrontName/ControllerName/ActionName*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下Magento如何处理对类别页面的请求；我们将使用`http://localhost/catalog/category/view/id/10`作为示例。Magento的URI由三部分组成
    - */FrontName/ControllerName/ActionName*。
- en: 'This means that for our example URL, the breakdown would be as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着对于我们的示例URL，拆分将如下所示：
- en: '**FrontName**: `catalog`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FrontName**：`catalog`'
- en: '**ControllerName**: `category`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ControllerName**：`category`'
- en: '**ActionName**: `view`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ActionName**：`view`'
- en: 'If I take a look at the Magento router class, I can see the `Mage_Core_Controller_Varien_Router_Standard`
    match function:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我看一下Magento路由器类，我可以看到`Mage_Core_Controller_Varien_Router_Standard`匹配函数：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'From the preceding code, we can see that the first thing the router tries to
    do is to parse the URI into an array. Based on our example URL, the corresponding
    array would be something like the following code snippet:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们可以看到路由器尝试做的第一件事是将URI解析为数组。根据我们的示例URL，相应的数组将类似于以下代码片段：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next part of the function will first try to check if the request has the
    module name specified; if not, then it tries to determine the module name based
    on the first element of our array. And if a module name can''t be provided, then
    the function will return `false`. Let''s take a look at that part of the code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的下一部分将首先尝试检查请求是否指定了模块名称；如果没有，则尝试根据数组的第一个元素确定模块名称。如果无法提供模块名称，则函数将返回`false`。让我们看看代码的这一部分：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, the match function will iterate through each of the available modules
    and try to match the controller and action, using the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，匹配函数将遍历每个可用模块，并尝试匹配控制器和操作，使用以下代码：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that looks like an awful lot of code, so let's break it down even further.
    The first part of the loop will check if the request has a controller name; if
    it is not set, it will check our parameter array's (`$p`) second value and try
    to determine the controller name, and then it will try to do the same for the
    action name.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来代码量很大，所以让我们进一步分解。循环的第一部分将检查请求是否有一个控制器名称；如果没有设置，它将检查我们的参数数组（$p）的第二个值，并尝试确定控制器名称，然后它将尝试对操作名称做同样的事情。
- en: 'If we got this far in the loop, we should have a module name, a controller
    name, and an action name, which Magento will now use to try and get a matching
    controller class name by calling the following function:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在循环中走到了这一步，我们应该有一个模块名称，一个控制器名称和一个操作名称，Magento现在将使用它们来尝试通过调用以下函数获取匹配的控制器类名：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This function will not only generate a matching class name but it will also
    validate its existence; in our example case this function should return `Mage_Catalog_CategoryController`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数不仅会生成一个匹配的类名，还会验证它的存在；在我们的例子中，这个函数应该返回`Mage_Catalog_CategoryController`。
- en: Since we now have a valid class name, we can proceed to instantiate our controller
    object; if you were paying attention up to this point, you have probably noticed
    that we haven't done anything with our action yet, and that's precisely the next
    step in our loop.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在有了一个有效的类名，我们可以继续实例化我们的控制器对象；如果你一直关注到这一点，你可能已经注意到我们还没有对我们的操作做任何事情，这正是我们循环中的下一步。
- en: Our new instantiated controller comes with a very handy function called `hasAction()`
    ; in essence, what this function does is to call a PHP function called `is_callable()`,
    which will check if our current controller has a public function matching the
    action name; in our case this will be `viewAction()` .
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新实例化的控制器带有一个非常方便的函数叫做`hasAction()`；实质上，这个函数的作用是调用一个名为`is_callable()`的PHP函数，它将检查我们当前的控制器是否有一个与操作名称匹配的公共函数；在我们的例子中，这将是`viewAction()`。
- en: The reason behind this elaborate matching process and the use of a `foreach`
    loop is that it is possible for several modules to use the same FrontName.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这种复杂的匹配过程和使用`foreach`循环的原因是，可能有几个模块使用相同的FrontName。
- en: '![Routing and request flow](graphics/3060OS_02_03.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![路由和请求流程](graphics/3060OS_02_03.jpg)'
- en: Now, `http://localhost/catalog/category/view/id/10` is not a very user-friendly
    URL; fortunately, Magento has its own URL rewrite system that allows us to use
    `http://localhost/books.html`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`http://localhost/catalog/category/view/id/10`不是一个非常用户友好的URL；幸运的是，Magento有自己的URL重写系统，允许我们使用`http://localhost/books.html`。
- en: 'Let''s dig a little deeper into the URL rewrite system and see how Magento
    gets the controller and action names from our URL alias. Inside our `Varien/Front.php`
    controller dispatch function, Magento will call:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解一下URL重写系统，看看Magento如何从我们的URL别名中获取控制器和操作名称。在我们的`Varien/Front.php`控制器分发函数中，Magento将调用：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Before actually looking into the inner workings of the `rewrite` function,
    let''s take a look at the structure of the `core/url_rewrite` model:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际查看`rewrite`函数的内部工作之前，让我们先看一下`core/url_rewrite`模型的结构：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As we can see, the rewrite module is comprised of several properties, but only
    two of them are of particular interest to use – `request_path` and `target_path`.
    Simply put, the job of the rewrite module is to modify the request object path
    information with the matching values of `target_path`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，重写模块由几个属性组成，但其中只有两个对我们特别感兴趣——`request_path`和`target_path`。简而言之，重写模块的工作是修改请求对象路径信息，使其与`target_path`的匹配值相匹配。
- en: Magento version of MVC
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Magento的MVC版本
- en: If you are familiar with the traditional MVC implementations such as CakePHP
    or Symfony, you may know that the most common implementation is called a convention-based
    MVC. With a convention-based MVC, to add a new model or let's say a controller,
    you only need to create the file/class (following the framework conventions) and
    the system will pick it up automatically.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉传统的MVC实现，比如CakePHP或Symfony，您可能知道最常见的实现被称为基于约定的MVC。使用基于约定的MVC，要添加一个新模型或者说一个控制器，你只需要创建文件/类（遵循框架约定），系统就会自动接收它。
- en: Magento, on the other hand, uses a configuration-based MVC pattern , meaning
    that creating our file/class is not enough; we explicitly have to tell Magento
    that we added a new class.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Magento，另一方面，使用基于配置的MVC模式，这意味着创建我们的文件/类是不够的；我们必须明确告诉Magento我们添加了一个新类。
- en: 'Each Magento module has a `config.xml` file, which is located under the module
    `etc/` directory and contains all the relevant module configuration. For example,
    if we want to add a new module that includes a new model, we would need to define
    a node in the configuration file that tells Magento where to find our model, such
    as:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Magento模块都有一个`config.xml`文件，位于模块的`etc/`目录下，包含所有相关的模块配置。例如，如果我们想要添加一个包含新模型的新模块，我们需要在配置文件中定义一个节点，告诉Magento在哪里找到我们的模型，比如：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Although this might look like additional work, it also gives us a huge amount
    of flexibility and power. For example, we can rewrite another class by using the
    `rewrite` node:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可能看起来像是额外的工作，但它也给了我们巨大的灵活性和权力。例如，我们可以使用`rewrite`节点重写另一个类：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Magento will then load all the `config.xml` files and merge them at runtime,
    creating a single configuration tree.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Magento然后会加载所有的`config.xml`文件，并在运行时合并它们，创建一个单一的配置树。
- en: 'Additionally, modules can also have a `system.xml` file, which is used to specify
    configuration options in the Magento backend, which in turn can be used by end
    users to configure the module functionality. A snippet of a `system.xml` file
    would look like the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，模块还可以有一个`system.xml`文件，用于在Magento后台指定配置选项，这些选项又可以被最终用户用来配置模块功能。`system.xml`文件的片段如下所示：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s break down each node function:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解每个节点的功能：
- en: '`section_name`: This is just an arbitrary name that we use to identify our
    configuration section; inside this node we will specify all the fields and groups
    for the configuration section.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`section_name`：这只是一个我们用来标识配置部分的任意名称；在此节点内，我们将指定配置部分的所有字段和组。'
- en: '`group`: Groups, as the name implies, are used to group configuration options
    and display them inside an accordion section.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group`：组，顾名思义，用于对配置选项进行分组，并在手风琴部分内显示它们。'
- en: '`label`: This defines the title or label to be used on the field/section/group.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`：这定义了字段/部分/组上要使用的标题或标签。'
- en: '`tab`: This defines the tab on which the section should be displayed.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tab`：这定义了应在其中显示部分的选项卡。'
- en: '`frontend_type`: This node allows us to specify which render to use for our
    custom option field. Some of the available options are:'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frontend_type`：此节点允许我们指定要为自定义选项字段使用的渲染器。一些可用的选项包括：'
- en: '`button`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`button`'
- en: '`checkboxes`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkboxes`'
- en: '`checkbox`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`checkbox`'
- en: '`date`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date`'
- en: '`file`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file`'
- en: '`hidden`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden`'
- en: '`image`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`'
- en: '`label`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`'
- en: '`link`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`link`'
- en: '`multiline`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiline`'
- en: '`multiselect`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multiselect`'
- en: '`password`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`'
- en: '`radio`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radio`'
- en: '`radios`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radios`'
- en: '`select`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select`'
- en: '`submit`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`submit`'
- en: '`textarea`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`textarea`'
- en: '`text`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`'
- en: '`time`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time`'
- en: '`sort_order`: It specifies the position of the field, group, or section.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_order`：它指定字段、组或部分的位置。'
- en: '`source_model`: Certain type of fields such as a `select` field can take options
    from a source model. Magento already provides several useful classes under `Mage/Adminhtml/Model/System/Config/Source`.
    Some of the classes we can find are:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`source_model`：某些类型的字段，如`select`字段，可以从源模型中获取选项。Magento已经在`Mage/Adminhtml/Model/System/Config/Source`下提供了几个有用的类。我们可以找到一些类：'
- en: '`YesNo`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YesNo`'
- en: '`Country`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Country`'
- en: '`Currency`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Currency`'
- en: '`AllRegions`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AllRegions`'
- en: '`Category`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Category`'
- en: '`Language`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Language`'
- en: By just using XML, we can build complex configuration options for our modules
    right on the Magento backend, without having to worry about setting up templates
    for populating fields or validating data.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 仅通过使用XML，我们就可以在Magento后端为我们的模块构建复杂的配置选项，而无需担心设置模板来填充字段或验证数据。
- en: 'Magento is also kind enough to provide a comprehensive amount of form field
    validation models, which we can use with the `<validate>` tag. Among the following
    field validators we have:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Magento还提供了大量的表单字段验证模型，我们可以在`<validate>`标签中使用。在以下字段验证器中，我们有：
- en: '`validate-email`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate-email`'
- en: '`validate-length`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate-length`'
- en: '`validate-url`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate-url`'
- en: '`validate-select`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate-select`'
- en: '`validate-password`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate-password`'
- en: As with any other part of Magento we can extend the `source_model`, `frontend_type`,
    and `validator` functions and even create new ones. We will be tackling this task
    in a later chapter where we will create a new type of each. But for now, we will
    explore the concepts of models, views, file layouts, and controllers.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 与Magento的任何其他部分一样，我们可以扩展`source_model`，`frontend_type`和`validator`函数，甚至创建新的函数。我们将在后面的章节中处理这个任务，在那里我们将创建每种新类型。但现在，我们将探讨模型、视图、文件布局和控制器的概念。
- en: Models
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: 'Magento makes use of the ORM approach; although we can still use `Zend_Db`
    to access the database directly, we will be using models to access our data most
    of the time. For this type of task, Magento provides the following two types of
    models:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Magento使用ORM方法；虽然我们仍然可以使用`Zend_Db`直接访问数据库，但我们大多数时候将使用模型来访问我们的数据。对于这种类型的任务，Magento提供了以下两种类型的模型：
- en: '**Simple models**: This model implementations are a simple mapping of one object
    to one table, meaning our object attributes match each field and our table structure'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单模型**：这种模型实现是一个简单的将一个对象映射到一个表，意味着我们的对象属性与每个字段匹配，表结构'
- en: '**Entity Attribute Value (EAV) models**: This type of models are used to describe
    entities with a dynamic number of attributes'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实体属性值（EAV）模型**：这种类型的模型用于描述具有动态属性数量的实体'
- en: 'Magento splits the model layer up into two parts: a model handling the business
    logic and a resource handling the database interaction. This design decision allows
    Magento to eventually support multiple database platforms without having to change
    any of the logic inside the models.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Magento将模型层分为两部分：处理业务逻辑的模型和处理数据库交互的资源。这种设计决策使Magento最终能够支持多个数据库平台，而无需更改模型内部的任何逻辑。
- en: Magento ORM uses one of PHP's magic class methods to provide dynamic access
    to object properties. In the next chapter we will look into models, the Magento
    ORM, and the data collections in more detail.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Magento ORM使用PHP的一个魔术类方法来提供对对象属性的动态访问。在下一章中，我们将更详细地了解模型、Magento ORM和数据集合。
- en: Note
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Magento models don't necessarily have to be related to any type of table in
    the database or an EAV entity. Observers, who we will be reviewing later, are
    perfect examples of this type of Magento models.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Magento模型不一定与数据库中的任何类型的表或EAV实体相关。稍后我们将要审查的观察者就是这种类型的Magento模型的完美例子。
- en: Views
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: 'The view layer is one of the areas where Magento truly sets itself apart from
    other MVC applications. Unlike traditional MVC systems, Magento''s view layer
    is divided into the following three different components:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 视图层是Magento真正使自己与其他MVC应用程序区分开的领域之一。与传统的MVC系统不同，Magento的视图层分为以下三个不同的组件：
- en: '**Layouts**: Layouts are XML files that define the block structure and properties
    such as name and the template file we can use. Each Magento module has its own
    set of layout files.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**：布局是定义块结构和属性（如名称和我们可以使用的模板文件）的XML文件。每个Magento模块都有自己的布局文件集。'
- en: '**Blocks**: Blocks are used in Magento to reduce the burden on the controller
    by moving most of the logic into blocks.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**块**：块在Magento中用于通过将大部分逻辑移动到块中来减轻控制器的负担。'
- en: '**Templates**: Templates are PHTML files that contain the required HTML code
    and PHP tags.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：模板是包含所需HTML代码和PHP标记的PHTML文件。'
- en: Layouts give the Magento frontend an amazing amount of flexibility. Each module
    has its own layout XML files, which tell Magento what to include and render on
    each page request. Through the use of the layouts, we can move, add, or remove
    blocks from our store without worrying about changing anything else other than
    our XML files.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 布局为Magento前端提供了令人惊讶的灵活性。每个模块都有自己的布局XML文件，告诉Magento在每个页面请求上包含和渲染什么。通过使用布局，我们可以在不担心改变除了我们的XML文件之外的任何其他内容的情况下，移动、添加或删除我们商店的块。
- en: Dissecting a layout file
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解剖布局文件
- en: 'Let''s examine one of the core layout files of Magento, in this case `catalog.xml`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Magento的一个核心布局文件，比如`catalog.xml`：
- en: '[PRE13]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Layout blocks are comprised of three main XML nodes, as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 布局块由三个主要的XML节点组成，如下所示：
- en: '`handle`: Each page request will have several unique handles; the layout uses
    these handles to tell Magento which blocks to load and render on a per page basis.
    The most commonly used handles are `default` and `[frontname]_[controller]_[action]`.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handle`：每个页面请求将具有几个唯一的句柄；布局使用这些句柄告诉Magento在每个页面上加载和渲染哪些块。最常用的句柄是`default`和`[frontname]_[controller]_[action]`。'
- en: The `default` handle is especially useful for setting global blocks, for example
    adding a CSS or JavaScript to all pages on the header block.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`default`句柄特别适用于设置全局块，例如在页眉块上添加CSS或JavaScript。'
- en: '`reference`: A `<reference>` node is used to make references to a block. It
    is useful for specifying nested blocks or modifying an already existing block.
    In our example we can see a new children block being specified inside `<reference
    name="left">`.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reference`：`<reference>`节点用于引用一个块。它用于指定嵌套块或修改已经存在的块。在我们的示例中，我们可以看到在`<reference
    name="left">`内指定了一个新的子块。'
- en: '`block`: The `<block>` node is used to load our actual blocks. Each block node
    can have the following properties:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block`：`<block>`节点用于加载我们的实际块。每个块节点可以具有以下属性：'
- en: '`type`: This is the identifier for the actual block class. For example, `catalog`/`product_list`
    makes reference to the `Mage_Catalog_Block_Product_List`.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：这是实际块类的标识符。例如，`catalog`/`product_list`指的是`Mage_Catalog_Block_Product_List`。'
- en: '`name`: This is the name used by other blocks to make reference to this block.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：其他块用这个名称来引用这个块。'
- en: '`before`/`after`: These properties can be used to position the blocks relative
    to other blocks'' position. Both these properties can use a hyphen as a value
    to specify if the module should appear at the very top or the very bottom.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`before`/`after`：这些属性可用于相对于其他块的位置定位块。这两个属性都可以使用连字符作为值，以指定模块是应该出现在最顶部还是最底部。'
- en: '`template`: This property determines the `.phtml` template file, which will
    be used for rendering the block.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template`：此属性确定将用于渲染块的`.phtml`模板文件。'
- en: '`action`: Each block type has specific actions that affect the frontend functionality.
    For instance, the `page`/`html_head` block, which has actions for adding CSS and
    JavaScript (`addJs` and `addCss`).'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`：每个块类型都有影响前端功能的特定操作。例如，`page`/`html_head`块具有用于添加CSS和JavaScript（`addJs`和`addCss`）的操作。'
- en: '`as`: This is used to specify the unique identifier that we will be using for
    calling the block from the template, for example calling a child block by using
    `getChildHtml(''block_name'')`.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as`：用于指定我们将在模板中调用的块的唯一标识符，例如使用`getChildHtml(''block_name'')`调用子块。'
- en: Blocks are a new concept that Magento implements in order to reduce the controller
    load. They are basically data resources that communicate directly with the models,
    which manipulate the data, if needed, and then pass it to the views.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 块是Magento实现的一个新概念，以减少控制器的负载。它们基本上是直接与模型通信的数据资源，模型操作数据（如果需要），然后将其传递给视图。
- en: 'Finally, we have our PHTML files; the templates contain the `html` and `php`
    tags and are in charge of formatting and displaying the data from our models.
    Let''s take a look at a snippet from the product view template:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有我们的PHTML文件；模板包含`html`和`php`标记，并负责格式化和显示来自我们模型的数据。让我们来看一下产品视图模板的片段：
- en: '[PRE14]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is the block diagram of MVC:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MVC的块图：
- en: '![Dissecting a layout file](graphics/3060OS_02_02.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![解剖布局文件](graphics/3060OS_02_02.jpg)'
- en: Controllers
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: 'In Magento, MVC controllers are designed to be thin controllers; thin controllers
    have little business logic and are mostly used for driving the application requests.
    A basic Magento controller action would just load and render the layout:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在Magento中，MVC控制器被设计为薄控制器；薄控制器几乎没有业务逻辑，主要用于驱动应用程序请求。基本的Magento控制器动作只是加载和渲染布局：
- en: '[PRE15]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: From here it is the job of the blocks to handle the display logic, get the data
    from our models, prepare the data, and send it to the views.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，块的工作是处理显示逻辑，从我们的模型中获取数据，准备数据，并将其发送到视图。
- en: Websites and store scopes
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网站和商店范围
- en: One of the core features of Magento is the ability to handle multiple websites
    and stores with a single Magento installation; internally, Magento refers to each
    of these instances as scopes.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Magento的一个核心特性是能够使用单个Magento安装处理多个网站和商店；在内部，Magento将这些实例称为范围。
- en: '![Websites and store scopes](graphics/3060OS_02_06.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![网站和商店范围](graphics/3060OS_02_06.jpg)'
- en: Values for certain elements such as products, categories, attributes, and configurations
    are scope specific and can differ on different scopes; this gives Magento tremendous
    flexibility, for example, a product can be set up on two different websites with
    different prices but can still share the rest of the attribute configuration.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 某些元素的值，如产品、类别、属性和配置，是特定范围的，并且在不同的范围上可能不同；这使得Magento具有极大的灵活性，例如，一个产品可以在两个不同的网站上设置不同的价格，但仍然可以共享其余的属性配置。
- en: 'As developers, one of the areas where we will be using scopes the most is when
    working with configuration. The different configuration scopes available in Magento
    are:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们在使用范围最多的领域之一是在处理配置时。Magento中可用的不同配置范围包括：
- en: '**Global**: As the name implies, this applies across all scopes.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局**：顾名思义，这适用于所有范围。'
- en: '**Website**: These are defined by a domain name and are composed by one or
    more stores. Websites can be set up to share customer data or be completely isolated.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网站**：这些由域名定义，由一个或多个商店组成。网站可以设置共享客户数据或完全隔离。'
- en: '**Store**: Stores are used to manage products and categories, and to group
    store views. Stores also have a root category that allows us to have separated
    catalogs per store.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店**：商店用于管理产品和类别，并分组商店视图。商店还有一个根类别，允许我们每个商店有单独的目录。'
- en: '**Store view**: By using store views we can set up multiple languages on our
    store frontend.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店视图**：通过使用商店视图，我们可以在商店前端设置多种语言。'
- en: 'Configuration options in Magento can store values on three scopes (global,
    website, and store view); by default, all the values are set on the global scope.
    By using `system.xml` on our modules, we can specify the scopes on which the configuration
    options can be set; let''s revisit our previous `system.xml`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Magento中的配置选项可以在三个范围（全局、网站和商店视图）上存储值；默认情况下，所有值都设置在全局范围上。通过在我们的模块上使用`system.xml`，我们可以指定配置选项可以设置的范围；让我们重新审视一下我们之前的`system.xml`：
- en: '[PRE16]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Factory names and functions
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工厂名称和函数
- en: Magento makes use of factory methods to instantiate `Model`, `Helper`, and `Block`
    classes. A factory method is a design pattern that allows us to instantiate an
    object without using the exact class name and using a class alias instead.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Magento使用工厂方法来实例化`Model`、`Helper`和`Block`类。工厂方法是一种设计模式，允许我们实例化一个对象而不使用确切的类名，而是使用类别名。
- en: 'Magento implements several factory methods, as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Magento实现了几种工厂方法，如下所示：
- en: '`Mage::getModel()`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::getModel()`'
- en: '`Mage::getResourceModel()`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::getResourceModel()`'
- en: '`Mage::helper()`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::helper()`'
- en: '`Mage::getSingleton()`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::getSingleton()`'
- en: '`Mage::getResourceSingleton()`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::getResourceSingleton()`'
- en: '`Mage::getResourceHelper()`'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::getResourceHelper()`'
- en: 'Each of these methods takes a class alias that is used to determine the real
    class name of the object that we are trying to instantiate; for example, if we
    wanted to instantiate a `product` object, we can do so by calling the `getModel()`
    method:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法中的每一个都需要一个类别名，用于确定我们要实例化的对象的真实类名；例如，如果我们想要实例化一个`product`对象，可以通过调用`getModel()`方法来实现：
- en: '[PRE17]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Notice that we are passing a factory name composed of `group_classname/model_name`;
    Magento will resolve this to the actual class name of `Mage_Catalog_Model_Product`.
    Let''s take a closer look at the inner workings of `getModel()`:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在传递一个由`group_classname/model_name`组成的工厂名称；Magento将解析这个工厂名称为`Mage_Catalog_Model_Product`的实际类名。让我们更仔细地看看`getModel()`的内部工作：
- en: '[PRE18]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`getModelInstance()` in return calls the `getModelClassName()` method, which
    takes our class alias as a parameter. Then it tries to validate the existence
    of the returned class, and if the class exists, it will create a new instance
    of that class and return it to our `getModel()` method:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`getModelInstance()`又调用`getModelClassName()`方法，该方法以我们的类别名作为参数。然后它尝试验证返回的类是否存在，如果类存在，它将创建该类的一个新实例并返回给我们的`getModel()`方法：'
- en: '[PRE19]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`getModelClassName()` calls the `getGroupedClassName()` method, which is actually
    in charge of returning the real class name of our model.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`getModelClassName()`调用`getGroupedClassName()`方法，实际上负责返回我们模型的真实类名。'
- en: '`getGroupedClassName()` takes two parameters – `$groupType` and `$classId`;
    `$groupType` refers to the type of object that we are trying to instantiate (currently
    only models, blocks, and helpers are supported) and `$classId`, which we are trying
    to instantiate.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`getGroupedClassName()`接受两个参数 - `$groupType`和`$classId`；`$groupType`指的是我们正在尝试实例化的对象类型（目前只支持模型、块和助手），`$classId`是我们正在尝试实例化的对象。'
- en: '[PRE20]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As we can see, `getGroupedClassName()` is actually doing all the work; it grabs
    our class alias `catalog`/`product` and creates an array by exploding the string
    on the slash character.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`getGroupedClassName()`实际上正在做所有的工作；它抓取我们的类别名`catalog`/`product`，并通过在斜杠字符上分割字符串来创建一个数组。
- en: Then, it loads an instance of `VarienSimplexml_Element` and passes the first
    value in our array (`group_classname`). It will also check if the class has been
    rewritten, and if it has, we will use the corresponding group name.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它加载一个`VarienSimplexml_Element`的实例，并传递我们数组中的第一个值（`group_classname`）。它还会检查类是否已被重写，如果是，我们将使用相应的组名。
- en: Magento also uses a custom version of the `uc_words()` function, which will
    capitalize the first letters and convert separators of the class alias if needed.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Magento还使用了`uc_words()`函数的自定义版本，如果需要，它将大写类别名的第一个字母并转换分隔符。
- en: Finally, the function will return the real class name to the `getModelInstance()`
    function; in our example case it will return `Mage_Catalog_Model_Product`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，该函数将返回真实的类名给`getModelInstance()`函数；在我们的例子中，它将返回`Mage_Catalog_Model_Product`。
- en: '![Factory names and functions](graphics/3060OS_02_04.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![工厂名称和函数](graphics/3060OS_02_04.jpg)'
- en: Events and observers
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件和观察者
- en: The event and observer pattern is probably one of Magento's more interesting
    features, since it allows developers to extend Magento in critical parts of the
    application flow.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 事件和观察者模式可能是Magento更有趣的特性之一，因为它允许开发人员在应用程序流的关键部分扩展Magento。
- en: In order to provide more flexibility and facilitate the interaction between
    the different modules, Magento implements an event/observer pattern; this pattern
    allows for modules to be loosely coupled.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供更多的灵活性并促进不同模块之间的交互，Magento实现了事件/观察者模式；这种模式允许模块之间松散耦合。
- en: There are two parts of this system – an event dispatch with the object and event
    information, and an observer listening to a particular event.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统有两个部分 - 一个是带有对象和事件信息的事件分发，另一个是监听特定事件的观察者。
- en: '![Events and observers](graphics/3060OS_02_05.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![事件和观察者](graphics/3060OS_02_05.jpg)'
- en: Event dispatch
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件分发
- en: 'Events are created or dispatched using the `Mage::dispatchEvent()` function.
    The core team has already created several events on critical parts of the core.
    For example, the model abstract class `Mage_Core_Model_Abstract` calls two protected
    functions every time a model is saved – `_beforeSave()` and `_afterSave()`; on
    each of these methods two events are fired:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Mage::dispatchEvent()`函数创建或分派事件。核心团队已经在核心的关键部分创建了几个事件。例如，模型抽象类`Mage_Core_Model_Abstract`在每次保存模型时调用两个受保护的函数——`_beforeSave()`和`_afterSave()`；在这些方法中，每个方法都会触发两个事件：
- en: '[PRE21]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Each function fires a generic `mode_save_after` event, and then a dynamic version
    based on the type of object being saved. This gives us a wide range of possibilities
    for manipulating objects through observers.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数都会触发一个通用的`mode_save_after`事件，然后根据正在保存的对象类型生成一个动态版本。这为我们通过观察者操作对象提供了广泛的可能性。
- en: 'The `Mage::dispatchEvent()` method takes two parameters: the first is the event
    name and the second is an array of data that is received by the observer. We can
    pass values or objects in this array. This comes in handy if we want to manipulate
    the objects.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mage::dispatchEvent()`方法接受两个参数：第一个是事件名称，第二个是观察者接收的数据数组。我们可以在这个数组中传递值或对象。如果我们想要操作对象，这将非常方便。'
- en: 'In order to understand the details of the event system, let''s take a look
    at the `dispatchEvent()` method:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解事件系统的细节，让我们来看一下`dispatchEvent()`方法：
- en: '[PRE22]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This function is actually an alias to the `dispatchEvent()` function inside
    the `app` core class located in `Mage_Core_Model_App`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数实际上是位于`Mage_Core_Model_App`中的`app`核心类内部的`dispatchEvent()`函数的别名：
- en: '[PRE23]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `dispatchEvent()` method is actually doing all the work on the event/observer
    model:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`dispatchEvent()`方法实际上是在事件/观察者模型上进行所有工作的：'
- en: It gets the Magento configuration object.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它获取Magento配置对象。
- en: It walks through the observer's node children, checking if the defined observer
    is listening to the current event.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它遍历观察者节点的子节点，检查定义的观察者是否正在监听当前事件。
- en: For each of the available observers, the dispatch event will try to instantiate
    the observer object.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个可用的观察者，分派事件将尝试实例化观察者对象。
- en: Lastly, Magento will try to call the corresponding observer function mapped
    to this particular event.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，Magento将尝试调用与特定事件相映射的相应观察者函数。
- en: Observer bindings
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察者绑定
- en: 'Now, dispatching an event is the only part of the equation. We also need to
    tell Magento which observer is listening to each event. Not to our surprise, observers
    are specified through `config.xml`. As we saw before, the `dispatchEvent()` function
    queries the configuration object for available observers. Let''s take a look at
    an example `config.xml` file:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，分派事件是方程式的唯一部分。我们还需要告诉Magento哪个观察者正在监听每个事件。毫不奇怪，观察者是通过`config.xml`指定的。正如我们之前所看到的，`dispatchEvent()`函数会查询配置对象以获取可用的观察者。让我们来看一个示例`config.xml`文件：
- en: '[PRE24]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `event` node can be specified in each of the configuration sections (admin,
    global, frontend, and so on) and we can specify multiple `event_name` children
    nodes; the `event_name` has to match the event name used in the `dispatchEvent()`
    function.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`event`节点可以在每个配置部分（admin、global、frontend等）中指定，并且我们可以指定多个`event_name`子节点；`event_name`必须与`dispatchEvent()`函数中使用的事件名称匹配。'
- en: Inside each `event_name` node, we have a single observer node that can contain
    multiple observers, each with a unique identifier.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个`event_name`节点内，我们有一个单一的观察者节点，可以包含多个观察者，每个观察者都有一个唯一的标识符。
- en: 'Observer nodes have two properties such as `<class>`, which points to our observer
    model class and `<method>`, which in turn points to the actual method inside the
    observer class. Let''s analyze an example observer class definition:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者节点有两个属性，如`<class>`，指向我们的观察者模型类，和`<method>`，依次指向观察者类内部的实际方法。让我们分析一个示例观察者类定义：
- en: '[PRE25]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One interesting thing about observer models is that they don't extend any other
    Magento class.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 关于观察者模型的一个有趣的事情是，它们不继承任何其他Magento类。
- en: Summary
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered many important and fundamental topics about Magento
    such as its architecture, folder structure, routing system, MVC patterns, events
    and observers, and configuration scopes.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了许多关于Magento的重要和基本主题，如其架构、文件夹结构、路由系统、MVC模式、事件和观察者以及配置范围。
- en: And while this might seem overwhelming at first sight, it is just the tip of
    the iceberg. There is a lot more to learn about each of these topics and Magento.
    The purpose of this chapter is to make developers aware of all the important components
    of the platform from the configuration object up to the way the event/object pattern
    is implemented.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然乍一看可能会让人感到不知所措，但这只是冰山一角。关于每个主题和Magento，还有很多值得学习的地方。本章的目的是让开发人员了解从配置对象到事件/对象模式的实现方式的所有重要组件。
- en: Magento is a powerful and flexible system, and it is much more than an e-commerce
    platform. The core team has put a lot of effort in making Magento a powerful framework.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Magento是一个强大而灵活的系统，它远不止是一个电子商务平台。核心团队在使Magento成为一个强大的框架方面付出了很多努力。
- en: In later chapters, we will not only review all these concepts in more detail,
    but we will also apply them in a practical manner by building our own extensions.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，我们不仅会更详细地回顾所有这些概念，还会通过构建我们自己的扩展来实际应用它们。
