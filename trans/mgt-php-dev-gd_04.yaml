- en: Chapter 4. Frontend Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。前端开发
- en: So far, we have focused on the theory behind Magento, its architecture, and
    getting familiar with common and important concepts of everyday Magento development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经专注于Magento背后的理论、它的架构，并熟悉了日常Magento开发的常见和重要概念。
- en: In this chapter, we will give a practical use to the skills and knowledge we
    have acquired so far by incrementally building a Magento extension for our frontend.
    We will build a fully functional Gift Registry extension.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过逐步构建一个Magento扩展来实际运用我们迄今所学到的技能和知识。我们将构建一个完全功能的礼品注册表扩展。
- en: Extending Magento
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展Magento
- en: Before jumping ahead and start building our extension, let's define an example
    scenario and a scope for our extension. This way we will have a clear idea of
    what we are building and more importantly, of what we are not building.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在跳入并开始构建我们的扩展之前，让我们定义一个示例情景和我们扩展的范围。这样我们将清楚地知道我们正在构建什么，更重要的是，我们不在构建什么。
- en: Scenario
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 情景
- en: Our scenario is simple; we want to extend Magento to allow customers to create
    gift registry lists and share them with friends and family. Customers should be
    able to create multiple gift registries and specify the recipients of those gift
    registries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的情景很简单；我们想要扩展Magento，允许客户创建礼品注册表并与朋友和家人分享。客户应该能够创建多个礼品注册表，并指定这些礼品注册表的接收者。
- en: 'A gift registry will hold the following information:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 礼品注册表将保存以下信息：
- en: Event type
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件类型
- en: Event name
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件名称
- en: Event date
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件日期
- en: Event location
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件地点
- en: List of products
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品列表
- en: Features
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能
- en: 'Have a look at the following features:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下功能：
- en: Store administrator can define multiple event types (birthdays, weddings, and
    gift registries)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商店管理员可以定义多个事件类型（生日、婚礼和礼品注册表）
- en: Create events and assign multiple gift registry lists to each event
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建事件并为每个事件分配多个礼品注册表列表
- en: Customers can add products to their registries from the cart, wish list, or
    directly from the product pages
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以从购物车、愿望清单或直接从产品页面将产品添加到他们的注册表中
- en: Customers can have multiple gift registries
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以拥有多个礼品注册表
- en: People can share their registries with friends and family through e-mail and/or
    direct link
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人们可以通过电子邮件和/或直接链接与朋友和家人分享他们的注册表
- en: Friends and family can buy the items from the gift registry
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 朋友和家人可以从礼品注册表购买物品
- en: Further improvements
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步的改进
- en: 'The following is a list of possible features that have been left out of this
    example extension due to their complexity, or in the case of social media due
    to the fact that their APIs and the amount of social media platforms is ever-changing,
    but they are still a good challenge for readers who want to extend this module
    even further:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能被省略在这个示例扩展中的一些功能列表，因为它们的复杂性，或者在社交媒体的情况下，由于它们的API和社交媒体平台的数量是不断变化的，但它们仍然是对想要进一步扩展这个模块的读者来说一个很好的挑战：
- en: Social media integration
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交媒体整合
- en: The registry can keep track of the request and fulfilled quantities for each
    registry item
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册表可以跟踪每个注册表项目的请求和完成数量
- en: Specify multiple and different registry owners
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定多个不同的注册表所有者
- en: Delivery to registry owner address
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付给注册表所有者地址
- en: Hello Magento
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好Magento
- en: In previous chapters, we learned about the Magento code pools (core, community,
    local). Since we don't intend to distribute our module on Magento Connect, we
    will be creating it under the local directory.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们了解了Magento的代码池（核心、社区、本地）。由于我们不打算在Magento Connect上分发我们的模块，我们将在本地目录下创建它。
- en: All Magento modules are kept inside packages or namespaces; for example, all
    the Core Magento modules are kept under the Mage namespace. For the purpose of
    this book, we will use **Magento Developers Guide** (**MDG**).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Magento模块都保存在包或命名空间中；例如，所有核心Magento模块都保存在Mage命名空间下。为了本书的目的，我们将使用Magento开发者指南（MDG）。
- en: The Magento naming convention for modules is `Namespace_Modulename` .
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的Magento命名约定是`Namespace_Modulename`。
- en: Our next step will be to create the module structure and configuration files.
    We need to create a namespace directory under `app/code/local/`. The namespace
    can be anything you like. The accepted convention is to use the company's name
    or the author's name as the namespace. So our first step will be to create the
    directory `app/code/local/Mdg/`. This directory will also hold not only our gift
    registry module but also any future modules we develop.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步将是创建模块结构和配置文件。我们需要在`app/code/local/`下创建一个命名空间目录。命名空间可以是任何你喜欢的东西。被接受的惯例是使用公司的名称或作者的名称作为命名空间。因此，我们的第一步将是创建目录`app/code/local/Mdg/`。这个目录不仅将保存我们的礼品注册表模块，还将保存我们开发的任何未来模块。
- en: Under our namespace directory, we will also need to create a new directory with
    the name of our module, which will hold all the code of custom extension.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的命名空间目录下，我们还需要创建一个新的目录，其中包含我们自定义扩展的所有代码。
- en: So let's go ahead and create a `Giftregistry` directory. Once that is done,
    let's create the rest of our directory structure.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个`Giftregistry`目录。一旦完成，让我们创建剩下的目录结构。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that Magento is a bit sensitive to the use of camel-casing due to its use
    of factory methods. In general, it's a good idea to avoid using camel—casing in
    our module/controller/action names. For more information on Magento naming conventions,
    please see the [Appendix](apa.html "Appendix A. Hello Magento") of this book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于Magento使用工厂方法，对驼峰命名法有些敏感。一般来说，在我们的模块/控制器/操作名称中避免使用驼峰命名法是个好主意。有关Magento命名约定的更多信息，请参阅本书的附录。
- en: The file location is `/app/code/local/Mdg/Giftregistry/`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`/app/code/local/Mdg/Giftregistry/`。
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As we have learned so far, Magento uses `.xml` files as a central part of its
    configuration. In order for a module to be recognized and activated by Magento,
    we need to create a single file under `app/etc/modules/`, following the `Namespace_Modulename.xml`
    convention. Let's create our file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解到，Magento使用`.xml`文件作为其配置的中心部分。为了让Magento识别并激活模块，我们需要在`app/etc/modules/`下创建一个文件，遵循`Namespace_Modulename.xml`约定。让我们创建我们的文件。
- en: The file location is `app/etc/modules/Mdg_Giftregistry.xml`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/etc/modules/Mdg_Giftregistry.xml`。
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)购买的所有Packt图书的帐户中下载示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册以直接通过电子邮件接收文件。
- en: 'After creating this file or making any changes to our module configuration
    files, we will need to refresh the Magento configuration cache:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此文件或对我们的模块配置文件进行任何更改后，我们需要刷新Magento配置缓存：
- en: Navigate to the Magento backend.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Magento后端。
- en: Open **System** | **Cache Management**.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**系统** | **缓存管理**。
- en: Click on **Flush Magento**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**刷新Magento**。
- en: 'Since we are working on a development extension and we are going to be making
    frequent changes to the configuration and extension code, it is a good idea to
    disable the cache. Follow these steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在开发扩展，并且将频繁更改配置和扩展代码，最好禁用缓存。按照以下步骤进行：
- en: Navigate to the Magento Backend.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Magento后端。
- en: Open **System** | **Cache Management**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**系统** | **缓存管理**。
- en: Select all the **Cache Type** checkboxes.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有**缓存类型**复选框。
- en: Select **Disable** from the **Actions** drop-down list.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**操作**下拉列表中选择**禁用**。
- en: Click on the **Submit** button.![Hello Magento](graphics/3060OS_04_01_revised.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**按钮。![你好，Magento](graphics/3060OS_04_01_revised.jpg)
- en: Once we have cleared the cache, we can confirm that our extension is being made
    active by going into **System** | **Advanced**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 清除缓存后，我们可以通过进入**系统** | **高级**来确认我们的扩展是否已激活。
- en: '![Hello Magento](graphics/3060_04_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![你好，Magento](graphics/3060_04_02.jpg)'
- en: Magento now knows about our module, but we haven't told Magento what our module
    is supposed to do; for that, we will need to set up the module configuration.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Magento知道我们的模块了，但我们还没有告诉Magento我们的模块应该做什么；为此，我们需要设置模块配置。
- en: XML module configuration
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XML模块配置
- en: 'There are two main files involved in a module configuration: `config.xml` and
    `system.xml`. In addition to these module configurations, these are also stored
    in:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 模块配置涉及两个主要文件：`config.xml`和`system.xml`。除了这些模块配置，这些也存储在：
- en: '`api.xml`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api.xml`'
- en: '`adminhtml.xml`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adminhtml.xml`'
- en: '`cache.xml`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache.xml`'
- en: '`widget.xml`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`widget.xml`'
- en: '`wsdl.xml`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wsdl.xml`'
- en: '`wsi.xml`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wsi.xml`'
- en: '`convert.xml`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`convert.xml`'
- en: 'In this chapter, we will focus only on the `config.xml` file. Let''s create
    our base file and break down each of the nodes by following these steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将只关注`config.xml`文件。让我们创建我们的基本文件，并按照以下步骤分解每个节点：
- en: Start by creating the `config.xml` file under our module `etc/directory`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在我们的模块`etc/directory`下创建`config.xml`文件。
- en: 'Now, copy the following code to the `config.xml` file (the file location is
    `app/code/local/Mdg/Giftregistry/etc/config.xml`):'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将以下代码复制到`config.xml`文件中（文件位置为`app/code/local/Mdg/Giftregistry/etc/config.xml`）：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All module configurations are contained inside the `<config>` node. Inside this
    node, we have the `<global>` and `<modules>` nodes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所有模块配置都包含在`<config>`节点内。在这个节点内，我们有`<global>`和`<modules>`节点。
- en: The `<modules>` node is just used to specify the current module version, which
    is later used to decide which installation and upgrade files to run.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`<modules>`节点只用于指定当前模块版本，稍后用于决定运行哪些安装和升级文件。'
- en: 'There are three main configuration nodes that are most commonly used to specify
    the configuration scope:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个主要的配置节点通常用于指定配置范围：
- en: '`<global>`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<global>`'
- en: '`<adminhtml>`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<adminhtml>`'
- en: '`<frontend>`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<frontend>`'
- en: 'For now, we will be working on the `<global>` scope. This will make any configuration
    available to both, the Magento Frontend and Backend. Under the `<global>` node,
    we have the following nodes:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在`<global>`范围内工作。这将使任何配置对Magento前端和后端都可用。在`<global>`节点下，我们有以下节点：
- en: '`<models>`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<models>`'
- en: '`<blocks>`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<blocks>`'
- en: '`<helpers>`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<helpers>`'
- en: '`<resources>`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<resources>`'
- en: 'As we can see, each node follows the same configuration pattern:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，每个节点都遵循相同的配置模式：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Each of the nodes that are used by the Magento class factories instantiate our
    custom objects. The `<factory_alias>` node is a critical part of our extension
    configuration. The `<factory_alias>` node is used by the factory methods, such
    as `Mage::getModel()` or `Mage::getHelper()`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Magento类工厂使用的每个节点都实例化我们的自定义对象。`<factory_alias>`节点是我们扩展配置的关键部分。`<factory_alias>`节点由工厂方法使用，例如`Mage::getModel()`或`Mage::getHelper()`。
- en: Notice that we are not defining each specific Model, Block, or Helper, just
    the path where Magento factories can find them. Magento naming convention allows
    us to have any folder structure under each of these folders, and Magento will
    be smart enough to load the appropriate class in Magento's class names.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们没有定义每个特定的Model、Block或Helper，只是Magento工厂可以找到它们的路径。Magento的命名约定允许我们在这些文件夹下有任何文件夹结构，Magento将聪明地加载适当的类名。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In Magento, class names and directory structures are one and the same.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Magento中，类名和目录结构是一样的。
- en: 'For example, we could have created a new model class under `app/code/local/Mdg/Giftregistry/Models/Folder1/Folder2/Folder3`,
    and the factory name for instantiating an object from this class would be:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在`app/code/local/Mdg/Giftregistry/Models/Folder1/Folder2/Folder3`下创建一个新的模型类，用于从这个类实例化对象的工厂名称将是：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's create our first model, or to be more specific, a helper class. Helpers
    are used to contain utility methods that are used to perform common tasks and
    can be shared among different classes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个模型，或者更具体地说，一个帮助类。帮助类用于包含用于执行常见任务的实用方法，并且可以在不同的类之间共享。
- en: Let's go ahead and create an empty `helper` class; we will add the helper logic
    later in this chapter.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个空的`helper`类；我们将在本章后面添加帮助逻辑。
- en: 'The file location is `app/code/loca/Mdg/Giftregistry/Helper/Data.php`. Refer
    to the following code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/loca/Mdg/Giftregistry/Helper/Data.php`。参考以下代码：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It might seem odd that we are naming our helper `Data`, but this is actually
    part of Magento's standards that each module has a default `helper` class called
    `Data`. Another interesting thing with `helper` classes is that we can just pass
    the `<factory_alias>` node without a class-specific class name to the `helper`
    factory method, and this will default to the `Data` helper class.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们命名帮助类为`Data`可能看起来有点奇怪，但这实际上是Magento的标准，每个模块都有一个名为`Data`的默认`helper`类。`helper`类的另一个有趣之处是，我们可以只传递`<factory_alias>`节点而不需要特定类名到`helper`工厂方法，这将默认为`Data`帮助类。
- en: 'So if we wanted to instantiate our default `helper` class, we only need to
    perform the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们想要实例化我们的默认`helper`类，我们只需要执行以下操作：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Models and saving data
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型和保存数据
- en: 'Before jumping straight into creating our models, we need to define clearly
    what type of models we are going to build and how many. So let''s review our example
    scenario. For our gift registry, it appears that we will need two different models:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在直接创建我们的模型之前，我们需要清楚地定义我们将要构建的模型类型和数量。因此，让我们回顾一下我们的示例场景。对于我们的礼品注册，似乎我们将需要两种不同的模型：
- en: '**Registry Model**: This model is used to store the gift registry information,
    such as gift registry type, address, and recipient information'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册模型**：此模型用于存储礼品注册信息，例如礼品注册类型、地址和接收者信息'
- en: '**Registry Item**: This model is used to store the information of each of the
    gift registry items (quantity requested, quantity bought, `product_id`)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册项目**：此模型用于存储每个礼品注册项目的信息（请求的数量，购买的数量，`product_id`）'
- en: Although this approach is correct, it does not meet all the requirements of
    our example scenario. By having all the registry information stored into a single
    table, we cannot add more registry types without modifying the code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法是正确的，但它并不满足我们示例场景的所有要求。通过将所有注册信息存储到单个表中，我们无法添加更多的注册类型而不修改代码。
- en: 'So, in this case, we will want to break down our data into multiple tables:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，我们将希望将我们的数据分解成多个表：
- en: '**Registry Entity**: This table is used to store the gift registry and event
    information'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册实体**：此表用于存储礼品注册和事件信息'
- en: '**Registry Type**: By storing the gift registry type into a separate table,
    we can add or remove event types'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册类型**：通过将礼品注册类型存储到单独的表中，我们可以添加或删除事件类型'
- en: '**Registry Item**: This table is used to store the information of each of the
    gift registry items (quantity requested, quantity bought, `product_id)`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册项目**：此表用于存储每个礼品注册项目的信息（请求的数量，购买的数量，`product_id`）'
- en: Now that we have defined our data structure, we can start building the corresponding
    models that will allow us to access and manipulate our data.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们的数据结构，我们可以开始构建相应的模型，以便访问和操作我们的数据。
- en: Creating the models
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模型
- en: 'Let''s start by creating the Gift Registry type model, which is used to manage
    the registry types (wedding, birthday, baby shower, and so on). To do so, follow
    these steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建礼品注册类型模型，用于管理注册类型（婚礼、生日、宝宝洗澡等）。要做到这一点，请按照以下步骤：
- en: Navigate to the `Model` folder on our module directory.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到我们模块目录中的`Model`文件夹。
- en: 'Create a new file called `Type.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Type.php`):'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Type.php`的新文件，并将以下内容复制到文件中（文件位置为`app/code/local/Mdg/Giftregistry/Model/Type.php`）：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will also need to create a resource class; every Magento Data model has
    its own resource class. It is also important to clarify that only models that
    handle the data directly, be it a simple data model or an EAV model, will require
    a `resource` class. To do so, follow these steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个资源类；每个Magento数据模型都有自己的资源类。还需要澄清的是，只有直接处理数据的模型，无论是简单数据模型还是EAV模型，都需要一个`resource`类。要做到这一点，请按照以下步骤：
- en: Navigate to the `Model` folder on our module directory.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到我们模块目录中的`Model`文件夹。
- en: Create a new folder under `Model` called `Mysql4`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Model`下创建一个名为`Mysql4`的新文件夹。
- en: 'Create a new file called `Type.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Type.php`):'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Type.php`的新文件，并将以下内容复制到文件中（文件位置为`app/code/local/Mdg/Giftregistry/Model/Mysql4/Type.php`）：
- en: '[PRE8]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, we will also need a `collection` class to retrieve all available event
    types:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还需要一个`collection`类来检索所有可用的事件类型：
- en: Navigate to the `Model` folder on our module directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到我们模块目录中的`Model`文件夹。
- en: 'Create a new file called `Type.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Type/Collection.php`):'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Type.php`的新文件，并将以下内容复制到文件中（文件位置为`app/code/local/Mdg/Giftregistry/Model/Mysql4/Type/Collection.php`）：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s do the same by creating a model that handles the gift registry items.
    This model will hold all the relevant product information for the registry items.
    To do so, follow these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个处理礼品注册项目的模型来做同样的事情。此模型将保存注册项目的所有相关产品信息。要做到这一点，请按照以下步骤：
- en: Navigate to the `Model` folder on our module directory.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到我们模块目录中的`Model`文件夹。
- en: 'Create a new file called `Item.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Item.php`):'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Item.php`的新文件，并将以下内容复制到文件中（文件位置为`app/code/local/Mdg/Giftregistry/Model/Item.php`）：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s go ahead and create the resource class:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建资源类：
- en: Navigate to the `Model` folder on our module directory.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的“Model”文件夹。
- en: Open the `Mysql4` folder
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“Mysql4”文件夹
- en: 'Create a new file called `Item.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Item.php`):'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“Item.php”的新文件，并将以下内容复制到文件中（文件位置为“app/code/local/Mdg/Giftregistry/Model/Mysql4/Item.php”）：
- en: '[PRE11]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And, finally, let''s create the corresponding `collection` class:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建相应的`collection`类：
- en: Navigate to the `Model` folder on our module directory.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的“Model”文件夹。
- en: 'Create a new file called `Collection.php` and copy the following content into
    the file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Item/Collection.php`):'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“Collection.php”的新文件，并将以下内容复制到文件中（文件位置为“app/code/local/Mdg/Giftregistry/Model/Mysql4/Item/Collection.php”）：
- en: '[PRE12]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Our next step will be to create our Registry entity; this is the core of our
    registry and is the model that ties everything together. To do so, follow these
    steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步将是创建我们的注册表实体；这是我们注册表的核心，也是将所有内容联系在一起的模型。要做到这一点，请按照以下步骤进行：
- en: Navigate to the `Model` folder on our module directory.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的“Model”文件夹。
- en: 'Create a new file called `Entity.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Entity.php`):'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“Entity.php”的新文件，并将以下内容复制到文件中（文件位置为“app/code/local/Mdg/Giftregistry/Model/Entity.php”）：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s go ahead and create the `resource` class:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建`resource`类：
- en: Navigate to the `Model` folder on our module directory.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的“Model”文件夹。
- en: Open the `Mysql4` folder.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“Mysql4”文件夹。
- en: 'Create a new file called `Entity.php` and copy the following content into the
    file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Entity.php`):'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“Entity.php”的新文件，并将以下内容复制到文件中（文件位置为“app/code/local/Mdg/Giftregistry/Model/Mysql4/Entity.php”）：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And, finally, let''s create the corresponding `collection` class:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建相应的`collection`类：
- en: Navigate to the `Model` folder on our module directory.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块目录中的“Model”文件夹。
- en: 'Create a new file called `Collection.php` and copy the following content into
    the file (the file location is `app/code/local/Mdg/Giftregistry/Model/Mysql4/Entity/Collection.php`):'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“Collection.php”的新文件，并将以下内容复制到文件中（文件位置为“app/code/local/Mdg/Giftregistry/Model/Mysql4/Entity/Collection.php”）：
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So far, we haven't done anything other than blindly creating new models by copying
    code and adding model classes to our module. Let's test our newly created models
    using the **Interactive Magento Console** (**IMC**).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们除了盲目地复制代码并将模型类添加到我们的模块中之外，还没有做任何事情。让我们使用**交互式Magento控制台**（**IMC**）测试我们新创建的模型。
- en: 'Let''s fire up IMC and try out the new models by running the following command
    in the root of our Magento installation:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动IMC，并通过在Magento安装的根目录中运行以下命令来尝试新模型：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following code assumes that you are running a Magento test installation
    with sample data, and if you are using the Vagrant box installation, you already
    have all the preloaded data:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码假定您正在运行带有示例数据的Magento测试安装，如果您正在使用Vagrant框安装，您已经拥有所有预加载的数据：
- en: 'We will start by loading the customer model:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从加载客户端模型开始：
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next we need to instantiate a new registry object:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要实例化一个新的注册表对象：
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'One handy function that is part of all Magento models is the `getData()` function,
    which returns an array of all the object attributes. Let''s run this function
    on both a, the registry and customer object and compare the output:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有Magento模型中的一个方便的函数是“getData（）”函数，它返回所有对象属性的数组。让我们在a，注册表和客户对象上运行此函数并比较输出：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As we notice, the customer has all the data set for our John Doe example record,
    while the registry object returns completely empty `$regiarray`. Let''s change
    this by running the following code:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们注意到的，客户端为我们的John Doe示例记录设置了所有数据，而注册表对象返回完全空的`$regiarray`。通过运行以下代码来更改这一点：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now let''s try to print the registry data one more time by running:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们尝试再次打印注册表数据：
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, to make our changes permanent, we need to call the model `save` function:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了使我们的更改永久生效，我们需要调用模型的`save`函数：
- en: '[PRE22]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And oops! Something went wrong when saving the product; we got the following
    error in the console:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！在保存产品时出现了问题；我们在控制台中得到了以下错误：
- en: '[PRE23]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: What happened? The `save()` function that is being called is part of the parent
    class `Mage_Core_Model_Mysql4_Abstract`, which in turn calls the abstract class
    `save()` function, but we are missing a critical part of our `config.xml` file.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？被调用的`save（）`函数是父类`Mage_Core_Model_Mysql4_Abstract`的一部分，它反过来调用抽象类`save（）`函数，但我们缺少`config.xml`文件的一个关键部分。
- en: 'In order for Magento to properly identify which resource class to use, we need
    to specify the resource model class and the matching table for each entity. Let''s
    go ahead and update our configuration file by following these steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Magento正确识别要使用的资源类，我们需要为每个实体指定资源模型类和匹配的表。让我们按照以下步骤更新我们的配置文件：
- en: Navigate to the extension `etc/` folder.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到扩展`etc/`文件夹。
- en: Open `config.xml`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“config.xml”。
- en: 'Update the `<model>` node with the following code (the file location is `app/code/local/Mdg/Giftregistry/Model/Entity.php`):'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新“<model>”节点（文件位置为“app/code/local/Mdg/Giftregistry/Model/Entity.php”）：
- en: '[PRE24]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, before we can actually save a product to the database, we have to create
    our database tables first; next, we will learn how to use setup resources for
    creating our table structures and setting our default data.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们实际将产品保存到数据库之前，我们必须首先创建我们的数据库表；接下来，我们将学习如何使用设置资源来创建我们的表结构并设置我们的默认数据。
- en: Setup resources
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置资源
- en: Now that we have created our model code, we need to create setup resources in
    order to be able to save them. The setup resources will take care of creating
    the corresponding database tables. Now, we could just use straight SQL or a tool
    such as PHPMyAdmin to create all the tables, but this is not the standard practice,
    and by general rule, we should never modify the Magento Database directly.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的模型代码，我们需要创建设置资源以便能够保存它们。设置资源将负责创建相应的数据库表。现在，我们可以直接使用纯SQL或工具如PHPMyAdmin来创建所有表，但这不是标准做法，通常情况下，我们不应直接修改Magento数据库。
- en: 'To achieve this, we will do the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将执行以下操作：
- en: Define a setup resource on our configuration file
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的配置文件上定义一个设置资源
- en: Create a resource class
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个资源类
- en: Create an installer script
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个安装脚本
- en: Create a data script
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数据脚本
- en: Create an upgrade script
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个升级脚本
- en: Defining a setup resource
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义一个设置资源
- en: 'When we first defined our configuration file, we defined a `<resources>` node:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们首次定义配置文件时，我们定义了一个`<resources>`节点：
- en: 'The file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`. Refer
    to the following code snippet:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/etc/config.xml`。参考以下代码片段：
- en: '[PRE25]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The first thing to notice is that the `<mdg_giftregistry_setup>` node is used
    as a unique identifier for our setup resource; the standard naming convention
    is `<modulename_setup>`, and while it is not required, it is highly recommended
    to follow this naming convention.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，`<mdg_giftregistry_setup>`节点用作我们设置资源的唯一标识符；标准命名约定是`<modulename_setup>`，虽然不是必需的，但强烈建议遵循此命名约定。
- en: 'We will also need to make a change to the `<setup>` node, add an additional
    class node, and read and write connections:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对`<setup>`节点进行更改，添加一个额外的class节点，并读取和写入连接：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/etc/config.xml`。
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Creating this setup resource is not required for the basic setup scripts, and
    `Mage_Core_Model_Resource_Setup` can be used instead, but by creating our own
    setup class, we are planning ahead and giving ourselves more flexibility for future
    improvements. Next, we will create the setup resource class under the file location,
    otherwise we will be getting an error saying that Magento can't find the setup
    resource class.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基本的设置脚本，不需要创建此设置资源，可以使用`Mage_Core_Model_Resource_Setup`，但通过创建自己的设置类，我们可以提前规划并为未来的改进提供更大的灵活性。接下来，我们将在文件位置下创建设置资源类，否则将会出现Magento找不到设置资源类的错误。
- en: 'Create the setup resource class under the file location, `app/code/local/Mdg/Giftregistry/Model/Resource/Setup.php`.
    Refer to the following code snippet:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件位置`app/code/local/Mdg/Giftregistry/Model/Resource/Setup.php`下创建设置资源类。参考以下代码片段：
- en: '[PRE27]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For now, we don't need to do anything else with the setup resource class.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们不需要对设置资源类做其他操作。
- en: Creating the Installer Script
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建安装脚本
- en: Our next step will be to create an installation script. This script contains
    all the SQL code for creating our tables and is run when we initialize our module.
    First, let's take another quick look to our `config.xml` file. If we remember,
    the first node defined before our `<global>` node was the `<modules>` node.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步将是创建一个安装脚本。此脚本包含创建表的所有SQL代码，并在初始化模块时运行。首先，让我们再次快速查看我们的`config.xml`文件。如果我们记得，我们在`<global>`节点之前定义的第一个节点是`<modules>`节点。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`. Refer
    to the following code snippet:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/etc/config.xml`。参考以下代码片段：
- en: '[PRE28]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As we mentioned before, this node is required on all Magento modules and is
    used to identify the current installed version of our module. This version number
    is used by Magento to identify if and which installation and upgrade scripts to
    run.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，此节点在所有Magento模块上都是必需的，并用于识别我们模块的当前安装版本。Magento使用此版本号来确定是否以及要运行哪些安装和升级脚本。
- en: Note
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'A word on naming conventions: Since Magento 1.6, the setup script naming conventions
    have changed. Originally, the `Mysql4-install-x.x.x.php` naming convention was
    used and is currently deprecated but still supported.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 关于命名约定：自Magento 1.6以来，安装脚本的命名约定已更改。最初使用了`Mysql4-install-x.x.x.php`的命名约定，目前已被弃用但仍受支持。
- en: 'Since Magento 1.6, the naming convention for the setup script has changed and
    now developers can make use of three different script types:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 自Magento 1.6以来，安装脚本的命名约定已更改，现在开发人员可以使用三种不同的脚本类型：
- en: '**Install**: This script is used when the module is first installed and no
    record of it exists on the `core_resource` table'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：当模块首次安装且在`core_resource`表中不存在记录时使用此脚本'
- en: '**Upgrade**: This script is used if the version in the `core_resource` table
    is lower than the one in the `config.xml` file'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**升级**：如果`core_resource`表中的版本低于`config.xml`文件中的版本，则使用此脚本'
- en: '**Data**: This script will run after the matching version install/upgrade script
    and are used to populate the tables with required data'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**：此脚本将在匹配版本的安装/升级脚本之后运行，并用于向表中填充所需数据'
- en: Note
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Data script are introduced in Magento 1.6 and are stored under the data/directory
    directly under our Module root. They follow a slightly different convention than
    the install and upgrade scripts by adding the prefix.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 数据脚本是在Magento 1.6中引入的，并存储在直接位于我们模块根目录下的data/目录中。它们遵循与安装和升级脚本略有不同的约定，通过添加前缀。
- en: Let's continue creating our registry entity table in our installation script
    under.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在我们的安装脚本下创建我们的注册表实体表。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/sql/mdg_giftregistry_setup/install-0.1.0.php`.
    Refer to the following code:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/sql/mdg_giftregistry_setup/install-0.1.0.php`。参考以下代码：
- en: '[PRE29]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that due to space constraints we are not adding the full installation
    script; you still need to add the installer code for the item and type tables.
    The full installation file and the code files can be downloaded directly from
    [https://github.com/amacgregor/mdg_giftreg](https://github.com/amacgregor/mdg_giftreg).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于空间限制，我们没有添加完整的安装脚本；您仍然需要为项目和类型表添加安装程序代码。完整的安装文件和代码文件可以直接从[https://github.com/amacgregor/mdg_giftreg](https://github.com/amacgregor/mdg_giftreg)下载。
- en: Now that might look like a lot of code, but it is only creating one output of
    the tables, in order to make sense of it, lets break it down, and see what is
    exactly the code doing.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这可能看起来像是很多代码，但它只是创建了一个表的输出，为了理解它，让我们分解一下，看看这段代码到底在做什么。
- en: The first thing to notice is that even if we are creating and setting database
    tables, we are not writing any SQL code. Magento ORM provides an adapter with
    the database. All the installation, upgrade, and data scripts inherit from `Mage_Core_Model_Resource_Setup`.
    Let's break down each of the functions being used on our installation script.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，即使我们正在创建和设置数据库表，我们并没有编写任何SQL代码。Magento ORM提供了一个带有数据库的适配器。所有安装、升级和数据脚本都继承自`Mage_Core_Model_Resource_Setup`。让我们分解一下我们安装脚本上使用的每个函数。
- en: 'The first three lines of the script instantiate both `resource_setup` model
    and the connection. The rest of the script deals with setting up a new table instance
    and calling the following functions on it:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的前三行实例化了`resource_setup`模型和连接。脚本的其余部分涉及设置一个新的表实例，并在其上调用以下函数：
- en: '`addColumn`: This function is used to define each of the table columns and
    takes the following five parameters:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addColumn`：此函数用于定义每个表列，并接受以下五个参数：'
- en: '`name`: This is the name of the column'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是列的名称'
- en: '`type`: This is the data storage type (`int`, `varchar`, `text`, and so on)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：这是数据存储类型（`int`，`varchar`，`text`等）'
- en: '`size`: This is the column length'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`：这是列的长度'
- en: '`options`: This is an array of additional options for the data storage'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`：这是用于数据存储的附加选项数组'
- en: '`Comment`: This is the column description'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Comment`：这是列的描述'
- en: '`addIndex`: This function is used to define the indexes of a particular table
    and takes the following three parameters:'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addIndex`：此函数用于定义特定表的索引，并接受以下三个参数：'
- en: '`index`: This is an index name'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：这是一个索引名称'
- en: '`columns`: This can be a string with a single column name or an array with
    multiple ones'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columns`：这可以是一个包含单个列名的字符串，也可以是包含多个列名的数组'
- en: '`options`: This is an array of additional options for the data storage'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`：这是用于数据存储的附加选项数组'
- en: '`addForeginKey`: This function is used to define foreign key relationships,
    and it takes the following six parameters:'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addForeginKey`：此函数用于定义外键关系，并接受以下六个参数：'
- en: '`fkName`: This is a foreign key name'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fkName`：这是一个外键名称'
- en: '`column`: This is a foreign key column name'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column`：这是一个外键列名'
- en: '`refTable`: This is a reference table name'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refTable`：这是一个参考表名。'
- en: '`refColumn`: This is a reference table column name'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refColumn`：这是一个参考表列名'
- en: '`onDelete`: This is an action to take on delete row'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onDelete`：这是在删除行时要执行的操作'
- en: '`onUpdate`: This is an action to take on update of row'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onUpdate`：这是在更新行时要执行的操作'
- en: 'The code creating each of our tables is basically composed of those three functions,
    and after each table definition, the following code is executed:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们每个表的代码基本上由这三个函数组成，在每个表定义之后，执行以下代码：
- en: '[PRE30]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This is telling our database adapter to convert our code into SQL and run it
    against the database. There is one important thing to notice; that is, instead
    of providing or hard-coding the database names, the following code is called:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们的数据库适配器将我们的代码转换为SQL并运行它针对数据库。有一件重要的事情要注意；那就是，代码不是提供或硬编码数据库名称，而是调用以下代码：
- en: '[PRE31]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is the table alias that we defined before inside our `config.xml` files.
    To finish our installer, we need to create a `newTable` instance for each of our
    entities.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在`config.xml`文件中之前定义的表别名。要完成我们的安装程序，我们需要为我们的每个实体创建一个`newTable`实例。
- en: Note
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here's a challenge for you. Create the missing tables by using your Installer
    Script. To see the answer with the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/1](http://www.magedevguide.com/challenge/chapter4/1).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个挑战给你。使用您的安装程序脚本创建缺失的表。要查看完整代码和完整分解的答案，请访问[http://www.magedevguide.com/challenge/chapter4/1](http://www.magedevguide.com/challenge/chapter4/1)。
- en: The data scripts can be used to populate our tables; in our case, this will
    come in handy to set up some base event types.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 数据脚本可用于填充我们的表；在我们的情况下，这将有助于设置一些基本事件类型。
- en: 'We will first need to create a data installation script under the `data` folder;
    as we mentioned before, the structure is very similar to the SQL folder, and the
    only difference is that we append the data prefix to the matching installation/upgrade
    script. To do so, follow these steps:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`data`文件夹下创建一个数据安装脚本；正如我们之前提到的，结构与SQL文件夹非常相似，唯一的区别是我们将数据前缀附加到匹配的安装/升级脚本上。要这样做，请按照以下步骤进行：
- en: Navigate to the module data folder `app/code/local/Mdg/Giftregistry/data/`.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到模块数据文件夹`app/code/local/Mdg/Giftregistry/data/`。
- en: Create a new directory based on resource; in this case, it would be `mdg_giftregistry_setup`.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于资源创建一个新目录；在这种情况下，它将是`mdg_giftregistry_setup`。
- en: Under `mdg_giftregistry_setup`, create a file called `data-install-0.1.0.php`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`mdg_giftregistry_setup`下，创建一个名为`data-install-0.1.0.php`的文件。
- en: 'Copy the following code into the `data-install-0.1.0.php` file (the file location
    is `app/code/local/Mdg/Giftregistry/data/mdg_giftregistry_setup/data-install-0.1.0.php`):'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码复制到`data-install-0.1.0.php`文件中（文件位置为`app/code/local/Mdg/Giftregistry/data/mdg_giftregistry_setup/data-install-0.1.0.php`）：
- en: '[PRE32]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s take a closer look at the last conditional block on the `data-install-0.1.0.php`
    script:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看一下`data-install-0.1.0.php`脚本上的最后一个条件块：
- en: '[PRE33]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, if we refresh our Magento installation, the error should be gone, and
    if we take a close look at the `mdg_giftregistry_type` table, we should see the
    following records:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们刷新我们的Magento安装，错误应该消失，如果我们仔细看`mdg_giftregistry_type`表，我们应该看到以下记录：
- en: '![Creating the Installer Script](graphics/3060_04_03.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![创建安装程序脚本](graphics/3060_04_03.jpg)'
- en: As we learned before, the installation and data scripts will run the first time
    our module is installed. But what happens in our case where Magento already thinks
    our module is installed?
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前学到的，安装和数据脚本将在我们的模块第一次安装时运行。但在Magento已经认为我们的模块已安装的情况下会发生什么呢？
- en: Since the module is already registered in the `core_resource` table, the installation
    scripts will not be run again, unless Magento detects a version change in the
    extension. This is great for handling multiple releases of an extension but not
    very practical for development purposes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模块已经在`core_resource`表中注册，安装脚本将不会再次运行，除非Magento检测到扩展的版本更改。这对于处理扩展的多个发布版本非常有用，但对于开发目的并不是很实用。
- en: 'Fortunately, it is easy to trick Magento into running our extension installation
    scripts again. We only have to delete the corresponding entry in the `core_resource`
    table. To do so, follow these steps:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，很容易欺骗Magento再次运行我们的扩展安装脚本。我们只需要删除`core_resource`表中的相应条目。要这样做，请按照以下步骤操作：
- en: Open your MySQL console; if you are using our Vagrant box, you can just open
    it by typing `mysql`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的MySQL控制台；如果你正在使用我们的Vagrant盒子，你可以通过输入`mysql`来打开它。
- en: Once we are in the MySQL shell, we need to select our working database; in our
    case, it is `ce1702_magento`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们在MySQL shell中，我们需要选择我们的工作数据库；在我们的情况下，它是`ce1702_magento`。
- en: 'Finally, we need to enter the `core_resource` table using the following query:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要使用以下查询进入`core_resource`表：
- en: '[PRE34]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: What have we learned?
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们学到了什么？
- en: 'So far, we have learned to:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了：
- en: Create the base directory structure for our Magento module
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的Magento模块创建基本目录结构
- en: The role and importance of the configuration files
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件的角色和重要性
- en: Creating models and setup resources
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模型和设置资源
- en: The role and order of installation, upgrade, and data scripts
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装、升级和数据脚本的角色和顺序
- en: Note
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here's a challenge for you. Try improving the model structure for our module
    even further by converting the entity into an EAV model; this will require modifications
    to the installation scripts and to the resource model. To see the answer with
    the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/2](http://www.magedevguide.com/challenge/chapter4/2).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个挑战给你。尝试通过将实体转换为EAV模型来进一步改进我们模块的模型结构；这将需要修改安装脚本和资源模型。要查看完整的代码和详细的分解，请访问[http://www.magedevguide.com/challenge/chapter4/2](http://www.magedevguide.com/challenge/chapter4/2)。
- en: Setting up our routes
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的路由
- en: Now that we are capable of saving and manipulating the data by using our models,
    we need to provide a way for customers to interact with the actual gift registries;
    that is our first step. We need to create valid routes or URLs in the frontend.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够通过使用我们的模型保存和操作数据，我们需要为客户提供一种与实际礼品注册互动的方式；这是我们的第一步。我们需要在前端创建有效的路由或URL。
- en: As with many things in Magento, this is controlled by the configuration file.
    A route will convert a URL into a valid controller, action, and method.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Magento中的许多事情一样，这由配置文件控制。路由将把URL转换为有效的控制器、动作和方法。
- en: 'Open our `config.xml` file. The file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`.
    Refer to the following code:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我们的`config.xml`文件。文件位置是`app/code/local/Mdg/Giftregistry/etc/config.xml`。参考以下代码：
- en: '[PRE35]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s break down the configuration code we just added:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下我们刚刚添加的配置代码：
- en: '`<frontend>`: Previously, we added all the configuration inside the global
    scope; since we want our routes to be only available in the frontend, we need
    to declare our custom routes under the frontend scope'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<frontend>`：以前，我们将所有配置添加到全局范围内；由于我们希望我们的路由只在前端可用，我们需要在前端范围内声明我们的自定义路由'
- en: '`<routers>`: This is the container tag that holds the configuration for our
    custom routes'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<routers>`：这是包含我们自定义路由配置的容器标记'
- en: '`<mdg_giftregistry>`: The naming convention for this tag is to match the module
    name and is the unique identifier for our route'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<mdg_giftregistry>`：此标记的命名约定是匹配模块名称，并且是我们路由的唯一标识符'
- en: '`<frontName>`: As we learned in [Chapter 2](ch02.html "Chapter 2. Magento Fundamentals
    for Developers"), *Magento Fundamentals for Developers*, Magento breaks down the
    URLs into `http://localhost.com /frontName/actionControllerName/actionMethod/`.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<frontName>`：正如我们在[第2章](ch02.html "第2章。Magento开发人员基础知识")中学到的，*Magento开发人员基础知识*，Magento将URL分解为`http://localhost.com
    /frontName/actionControllerName/actionMethod/`。'
- en: Once we have defined our route configuration, we need to create an actual controller
    to handle all the incoming requests.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了我们的路由配置，我们需要创建一个实际的控制器来处理所有传入的请求。
- en: The index controller
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引控制器
- en: Our first step is to create `IndexController` under our module controllers directory.
    Magento will always try to load `IndexController` if no controller name is specified.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是在我们的模块控制器目录下创建`IndexController`。如果没有指定控制器名称，Magento将始终尝试加载`IndexController`。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/Index.php`.
    Refer to the following code:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/controllers/Index.php`。参考以下代码：
- en: '[PRE36]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'After creating our file, if we go to `http://localhost.com/giftregistry/index/index`,
    we should see a blank page with a message saying, **This is our test controller**.
    This is because we are not properly loading the layout of our customer controller.
    The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    We need to change our action code to:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的文件后，如果我们转到`http://localhost.com/giftregistry/index/index`，我们应该看到一个空白页面，上面有一条消息，说**这是我们的测试控制器**。这是因为我们没有正确加载我们的客户控制器的布局。文件位置是`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`。我们需要将我们的动作代码更改为：
- en: '[PRE37]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Before going into the details of what is happening within the controller action;
    let's create the rest of the controllers and corresponding actions.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入控制器动作内部发生的情况之前，让我们创建其余的控制器和相应的动作。
- en: We will need a controller that takes care of the basic operations for customers
    so they are able to create, manage, and delete their registries. Also, we will
    require a search controller so family and friends can locate the matching gift
    registries, and finally, we will require a view controller for showing the registry
    details.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一个控制器来处理客户的基本操作，以便他们能够创建、管理和删除他们的注册表。此外，我们还需要一个搜索控制器，以便家人和朋友可以找到匹配的礼品注册表，最后，我们还需要一个查看控制器来显示注册表的详细信息。
- en: 'Our first step will be to add the remaining actions to the index controller
    (the file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`):'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步将是向索引控制器添加剩余的动作（文件位置为`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`）：
- en: '[PRE38]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Before we start adding all the logic to the index controller, we need to take
    an extra step to prevent not logged in customers to access the `giftregistry`
    functionality. Magento Front Controller is already very useful for handling this;
    it's called the `preDispatch()` function, which is executed before any other action
    in the controller.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始向索引控制器添加所有逻辑之前，我们需要采取额外的步骤，以防止未登录的客户访问`giftregistry`功能。Magento前端控制器已经非常有用，用于处理这一点；它被称为`preDispatch()`函数，在控制器中的任何其他动作之前执行。
- en: Open your `IndexController.php` and add the following code at the beginning
    of the class.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的`IndexController.php`并在类的开头添加以下代码。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    Refer to the following code:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`。参考以下代码：
- en: '[PRE39]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now, if we try to load `http://localhost.com/giftregistry/index/index`, we will
    be redirected to the login page unless we are logged in to the frontend.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试加载`http://localhost.com/giftregistry/index/index`，我们将被重定向到登录页面，除非我们已登录到前端。
- en: Our next step will be to add all the logic to each of the controller actions
    so the controller can properly handle creation, update, and deletion.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步将是向每个控制器动作添加所有逻辑，以便控制器可以正确处理创建、更新和删除。
- en: The index, new, and edit actions are mostly used to load and render the layout,
    so there is not much logic involved in controller, `newPostAction()`, `editPostAction()`,
    and `deleteAction()`; on the other hand, they handle a heavier and more complicated
    logic.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 索引、新建和编辑动作主要用于加载和呈现布局，因此在控制器`newPostAction()`、`editPostAction()`和`deleteAction()`中涉及的逻辑不多；另一方面，它们处理了更繁重和更复杂的逻辑。
- en: 'Let''s get started with `newPostAction()`. This action is used to handle the
    data received from the `newAction`() form. To do so, follow these steps:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始`newPostAction()`。这个动作用于处理从`newAction()`表单接收到的数据。为此，请按照以下步骤操作：
- en: Open `IndexController.php`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`IndexController.php`。
- en: 'The first thing we will add to the action is an `if` statement to check if
    the request is a post-request, which we can retrieve by using the following code:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将添加到动作的第一件事是一个`if`语句，以检查请求是否是post请求，我们可以使用以下代码检索到：
- en: '[PRE40]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In addition to that, we also want to check that the request has actual data;
    for that, we can use the following code:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除此之外，我们还希望检查请求是否有实际数据；为此，我们可以使用以下代码：
- en: '[PRE41]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Once we have validated that, the request is a proper request, and while we
    are receiving data, we need to actually create gift registry. To do so, we will
    add a new function inside our registry model by following these steps:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们验证了请求是一个合适的请求，并且我们正在接收数据，我们需要实际创建礼品注册。为此，我们将通过以下步骤在我们的注册表模型中添加一个新函数：
- en: Open the registry entity model.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开注册表实体模型。
- en: 'Create a new function called `updateRegistryData()` and make sure the function
    takes two parameters: `$customer` and `$data`.'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`updateRegistryData()`的新函数，并确保函数接受两个参数：`$customer`和`$data`。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Model/Entity.php`. Add
    the following code inside this function:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/Model/Entity.php`。在此函数内添加以下代码：
- en: '[PRE42]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This function will help us out by adding the form data into the current instance
    of the registry object, which means we need to create one inside our controller.
    Let''s put the code for our controller together:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将通过将表单数据添加到注册表对象的当前实例来帮助我们，这意味着我们需要在我们的控制器内创建一个实例。让我们把我们的控制器代码放在一起：
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    Refer to the following code snippet:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`。参考以下代码片段：
- en: '[PRE43]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We have created a very basic controller action that will handle the registry
    creation and that will handle most of the possible exceptions.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个非常基本的控制器动作，它将处理注册表的创建并处理大部分可能的异常。
- en: Let's continue by creating `editPostAction`; this action is very similar to
    the `newPostAction`. The main difference is that in the case of `editPostAction`,
    we are working with an already existing registry record, so we will need to add
    some validation before setting the data.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建`editPostAction`；这个动作与`newPostAction`非常相似。主要区别在于，在`editPostAction`的情况下，我们正在处理一个已经存在的注册表记录，因此在设置数据之前，我们需要添加一些验证。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    Let''s take a closer look at the following action code:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`。让我们更仔细地看一下以下动作代码：
- en: '[PRE44]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As we can see, this code is pretty much the same as our `newPostAction()` controller
    with the critical distinction that it tries to load an existing registry before
    updating the data.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，这段代码与我们的`newPostAction()`控制器几乎相同，关键区别在于它在更新数据之前尝试加载现有的注册表。
- en: Note
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here's a challenge for you. Since the code between `editPostAction()` and `newPostAction()`
    are very similar, try combining both into a single post action that can be reused.
    To see the answer with the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/3](http://www.magedevguide.com/challenge/chapter4/3).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个挑战给你。由于`editPostAction()`和`newPostAction()`之间的代码非常相似，尝试将两者合并为一个可以重复使用的单个post操作。要查看完整代码和完整分解的答案，请访问[http://www.magedevguide.com/challenge/chapter4/3](http://www.magedevguide.com/challenge/chapter4/3)。
- en: To finalize `IndexController`, we need to add an action that allows us to delete
    a specific registry record; for that, we will use `deleteAction()`.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成`IndexController`，我们需要添加一个允许我们删除特定注册记录的操作；为此，我们将使用`deleteAction()`。
- en: Thanks to the Magento ORM system, this process is really simple, as Magento
    models inherit the `delete()` function, which as the name implies will simply
    delete that specific model instance.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Magento ORM系统，这个过程非常简单，因为Magento模型继承了`delete()`函数，正如其名称所示，它将简单地删除该特定模型实例。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/IndexController.php`.
    Inside `IndexController`, add the following code:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/controllers/IndexController.php`。在`IndexController`中，添加以下代码：
- en: '[PRE45]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The important actions to notice in our delete controller are as follows:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们删除控制器中要注意的重要操作如下：
- en: We check for the right type of request into our action.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们检查我们的操作是否是正确类型的请求。
- en: We instantiate the registry object and verify if it is a valid one.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们实例化注册对象并验证它是否有效。
- en: Finally, we call the `delete()` function on the registry instance.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们在注册实例上调用`delete()`函数。
- en: You might notice by now that since we have made a critical omission, there is
    no way to add an actual product to our cart.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，由于我们犯了一个严重的遗漏，现在没有办法将实际产品添加到购物车中。
- en: We will be skipping that particular action for now, and we will create it after
    we have a better understanding of the blocks and layouts involved and how it interacts
    with our custom controllers.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将跳过这个特定的操作，并且在我们更好地理解所涉及的块和布局以及它与我们的自定义控制器如何交互之后再创建它。
- en: The search controller
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索控制器
- en: 'Now that we have a working `IndexController` that will handle most of the logic
    for modifying actual registries, the next controller that we will create is `SearchController`.
    To do so, follow these steps:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个可以处理大部分修改实际注册的逻辑的工作`IndexController`，我们将创建的下一个控制器是`SearchController`。要这样做，请按照以下步骤进行：
- en: Create a new controller under the controllers directory with the name `SearchController`.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在controllers目录下创建一个名为`SearchController`的新控制器。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/SearchController.php`.
    Copy the following code into the search controller:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`。将以下代码复制到搜索控制器中：
- en: '[PRE46]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We will leave `indexAction` for now, and we will focus on the logic involved
    in `resultsAction()` , which will be taking the search parameters and loading
    a registry collection.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将暂时留下`indexAction`，并且将专注于`resultsAction()`中涉及的逻辑，它将获取搜索参数并加载注册集合。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/SearchController.php`.
    Let''s take a look at the complete action code and break it down:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`。让我们看一下完整的操作代码并分解它：
- en: '[PRE47]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As with previous actions, we are taking the request parameters, but in this
    particular case, we load a gift registry collection and apply a field filter for
    each of the available fields. One thing to stand out is that this is the first
    time we are interacting with the layout directly from a Magento controller.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前的操作一样，我们获取请求参数，但在这种特殊情况下，我们加载了一个礼品注册集合，并为每个可用字段应用字段过滤器。一个值得注意的是，这是我们第一次直接从Magento控制器与布局交互。
- en: '[PRE48]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: What we are doing here is making the loaded registry collection available to
    that particular block instance.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的是使加载的注册集合可用于特定的块实例。
- en: The view controller
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图控制器
- en: 'Finally, we need a controller that allows displaying registry details regardless
    of whether a customer is logged in or not. Follow these steps:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个控制器，允许显示注册详细信息，无论客户是否已登录。请按照以下步骤进行：
- en: Create a new controller under the controllers directory with the name `ViewController`.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在controllers目录下创建一个名为`ViewController`的新控制器。
- en: 'Open the controller that we just created and refer to the following placeholder
    code (the file location is `app/code/local/Mdg/Giftregistry/controllers/ViewController.php`):'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们刚创建的控制器，并参考以下占位符代码（文件位置为`app/code/local/Mdg/Giftregistry/controllers/ViewController.php`）：
- en: '[PRE49]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'So here we are using a new function, `Mage::register()`, which is setting a
    global variable that we can later retrieve into the application flow by any method.
    This function is part of the Magento Registry pattern that is compromised of the
    following three functions:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在这里使用了一个新的函数`Mage::register()`，它设置了一个全局变量，我们可以在应用程序流程中的任何方法中稍后检索。这个函数是Magento
    Registry模式的一部分，由以下三个函数组成：
- en: '`Mage::register()`: This function is used to set global variables'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::register()`: 这个函数用于设置全局变量'
- en: '`Mage::unregister()`: This function is used to unset global variables'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::unregister()`: 这个函数用于取消设置全局变量'
- en: '`Mage::registry()`: This function is used to retrieve global variables'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage::registry()`: 这个函数用于检索全局变量'
- en: We are using the registry function in this case to provide access to the registry
    entity further ahead the application flow and particularly in the view block that
    we will be creating next.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用注册功能来在应用程序流程的更后面以及我们接下来将要创建的视图块中提供对注册实体的访问。
- en: Block and layouts
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 块和布局
- en: As we learned in [Chapter 2](ch02.html "Chapter 2. Magento Fundamentals for
    Developers"), *Magento Fundamentals for Developers*, Magento separates its view
    layer into blocks, templates, and layout files. Blocks are objects that handle
    parts of the logic. Templates are `phtml` files that are a mix of HTML and PHP
    code. Layout files are XML files that control the position of blocks.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](ch02.html "第2章。开发人员的Magento基础知识")中所学到的，*Magento开发人员的基础知识*，Magento将其视图层分为块、模板和布局文件。块是处理逻辑部分的对象。模板是`phtml`文件，是HTML和PHP代码的混合。布局文件是控制块位置的XML文件。
- en: 'Each module has its own layout file that is in charge of updating that specific
    module layout. We need to start by creating a layout file for our module by following
    these steps:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模块都有自己的布局文件，负责更新该特定模块的布局。我们需要按照以下步骤开始为我们的模块创建一个布局文件：
- en: Navigate to `app/design/frontend/base/default/layout/`.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`app/design/frontend/base/default/layout/`。
- en: Create a file named `mdg_giftregistry.xml`.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`mdg_giftregistry.xml`的文件。
- en: 'Add the following code (the file location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码（文件位置为`app/design/frontend/base/default/layout/mdg_giftregistry.xml`）：
- en: '[PRE50]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that by adding our templates and layouts to the base/default theme, we'll
    make our templates and layouts available to all stores and themes.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通过将我们的模板和布局添加到base/default主题，我们将使我们的模板和布局对所有商店和主题可用。
- en: If we take a closer look at the XML we just pasted, we can see that we have
    a default `<xml>` tag and several other sets of tags. As we mentioned earlier,
    in Magento, routes are formed by a frontend name, a controller, and an action.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细看刚刚粘贴的XML，我们可以看到我们有一个默认的`<xml>`标签和几组其他标签。正如我们之前提到的，在Magento中，路由由前端名称、控制器和操作组成。
- en: Each of the XML tags in the layout file represents one of our controllers and
    actions; for example, `<giftregistry_index_index>` will control the layout of
    our `IndexController` action; Magento assigns each page a unique handle.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 布局文件中的每个XML标签代表我们的控制器和操作之一；例如，`<giftregistry_index_index>`将控制我们的`IndexController`操作的布局；Magento为每个页面分配一个唯一的句柄。
- en: 'In order for Magento to recognize our layout file, we need to declare the layout
    file inside the `config.xml` file by following these steps:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Magento识别我们的布局文件，我们需要按照以下步骤在`config.xml`文件中声明布局文件：
- en: Navigate to the `extension etc/` folder.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`extension etc/`文件夹。
- en: Open `config.xml`.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`config.xml`。
- en: 'Add the following code inside the `<frontend>` node (the file location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<frontend>`节点内添加以下代码（文件位置为`app/design/frontend/base/default/layout/mdg_giftregistry.xml`）：
- en: '[PRE51]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: IndexController blocks and views
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IndexController块和视图
- en: 'As we did before, we will start by building the index controller. Let''s define
    which templates and blocks we need to define for each of the actions:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，我们将从构建索引控制器开始。让我们定义每个操作需要定义的模板和块：
- en: '**Index**: This is the list of the current customer available registries'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引**：这是当前客户可用注册表的列表'
- en: '**New**: This provides a new form to capture the registry information'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新**：这提供了一个捕获注册表信息的新表单'
- en: '**Edit**: This loads a specific registry data and loads them in the form'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑**：这会加载特定的注册表数据并将其加载到表单中'
- en: 'For the index action, we will need to create a new block called `List.php`.
    Let''s start by creating the registry list block by following these steps:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 对于索引操作，我们需要创建一个名为`List.php`的新块。让我们按照以下步骤开始创建注册表列表块：
- en: Navigate to `app/code/local/Mdg/Giftregistry/Block/`.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`app/code/local/Mdg/Giftregistry/Block/`。
- en: Create a file named `List.php`.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`List.php`的文件。
- en: 'Copy the following code (the file location is `app/code/local/Mdg/Giftregistry/Block/List.php`.):'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制以下代码（文件位置为`app/code/local/Mdg/Giftregistry/Block/List.php`）。
- en: '[PRE52]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The previous code declares our list block that will be used in `IndexController`.
    The blocks declares the `getCustomerRegistries()` method, which will check for
    the current customer and try to retrieve a collection of registries based on that
    customer.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码声明了我们将在`IndexController`中使用的列表块。块声明了`getCustomerRegistries()`方法，该方法将检查当前客户并尝试基于该客户检索注册表集合。
- en: 'Now that we created a new block, we need to add it to our layout XML file:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建了一个新的块，我们需要将其添加到我们的布局XML文件中：
- en: Open `mdg_giftregistry.xml`.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mdg_giftregistry.xml`。
- en: 'Add the following code inside `<mdg_gifregistry_index_index>` (the file location
    is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<mdg_gifregistry_index_index>`内添加以下代码（文件位置为`app/design/frontend/base/default/layout/mdg_giftregistry.xml`）：
- en: '[PRE53]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the layout, we are declaring our block; inside that declaration, we are setting
    the block name, template, and type. If we try loading the index controller page
    right now, since we have not created our template file, we should then see an
    error about the missing template.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在布局中，我们声明了我们的块；在该声明内，我们设置了块名称、模板和类型。如果我们现在尝试加载索引控制器页面，由于我们还没有创建我们的模板文件，我们应该会看到有关缺少模板的错误。
- en: 'Let''s create the template file:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建模板文件：
- en: Navigate to `design/frontend/base/default/template/`.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至`design/frontend/base/default/template/`。
- en: Create the `mdg/` folder.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`mdg/`文件夹。
- en: 'Inside that folder, create a file called `list.phtml` (the file location is
    `app/design/frontend/base/default/template/mdg/list.phtml`):'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该文件夹内，创建一个名为`list.phtml`的文件（文件位置为`app/design/frontend/base/default/template/mdg/list.phtml`）：
- en: '[PRE54]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This is the first time we generate a .`phtml` file. As we mentioned before,
    `.phtml` files are just a combination of PHP and HTML code.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们第一次生成`.phtml`文件。正如我们之前提到的，`.phtml`文件只是PHP和HTML代码的组合。
- en: In case of the `list.phtml` file, the first thing we are doing is to load a
    collection by calling the `getCustomerRegistries()` method; one thing to notice
    is that we are actually calling `$this->getCustomerRegistries()`, as each template
    is assigned to a specific block.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在`list.phtml`文件中，我们要做的第一件事是通过调用`getCustomerRegistries()`方法加载一个集合；需要注意的一点是，我们实际上是在调用`$this->getCustomerRegistries()`，因为每个模板都分配给一个特定的块。
- en: 'We are missing a couple of important things, which are as follows:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我们缺少一些重要的东西，如下所示：
- en: If there are no registries for the current customer, we would only display an
    empty unordered list
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果当前客户没有注册表，我们只会显示一个空的无序列表。
- en: There is no link to delete or edit a specific registry
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有链接来删除或编辑特定的注册表
- en: One quick way of checking if the collection has registries is to call the `count`
    function and display an error message if the collection is actually empty.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 检查集合是否有注册表的一个快速方法是调用`count`函数，并在集合实际为空时显示错误消息。
- en: 'The file location is `app/design/frontend/base/default/template/mdg/list.phtml`.
    Refer to the following code:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/design/frontend/base/default/template/mdg/list.phtml`。参考以下代码：
- en: '[PRE55]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We have added a new `if` statement to check that the collection count is not
    empty and a link to the `IndexController` edit action. Finally, if there are no
    registries to show, we are displaying an error message linking to the new action.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个新的`if`语句来检查集合计数是否为空，并添加了一个链接到`IndexController`编辑操作。最后，如果没有要显示的注册表，我们将显示一个错误消息，链接到新操作。
- en: 'Let''s continue by adding the block and templates for the new action:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加新操作的块和模板：
- en: Open the `mdg_giftregistry.xml` layout file.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mdg_giftregistry.xml`布局文件。
- en: 'Add the following code inside the `<mdg_gifregistry_index_new>` node (the file
    location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<mdg_gifregistry_index_new>`节点内添加以下代码（文件位置为`app/design/frontend/base/default/layout/mdg_giftregistry.xml`）：
- en: '[PRE56]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Since we are just displaying a form to post the registry information to `newPostAction()`,
    we are just creating a core/template block with the custom template file that
    will contain the form code. Our template file will look like the following code.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只是显示一个表单来将注册表信息发布到`newPostAction()`，我们只是创建一个带有包含表单代码的自定义模板文件的core/template块。我们的模板文件将如下所示。
- en: 'The file location is `app/design/frontend/base/default/template/mdg/new.phtml`:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/design/frontend/base/default/template/mdg/new.phtml`：
- en: '[PRE57]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This time we are doing something new here. We are calling a helper; a helper
    is a class that contains methods that can be reused from blocks, templates, controllers,
    and so on. In our case, we are creating a helper that will retrieve all available
    registry types. Follow these steps:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们在这里做一些新的事情。我们正在调用一个帮助程序；帮助程序是一个包含可以从块、模板、控制器等中重复使用的方法的类。在我们的情况下，我们正在创建一个帮助程序，它将检索所有可用的注册类型。按照以下步骤进行：
- en: Navigate to `app/code/local/Mdg/Giftregistry/Helper`.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`app/code/local/Mdg/Giftregistry/Helper`。
- en: Open the `Data.php` class.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Data.php`类。
- en: 'Add the following code inside it (the file location is `app/code/local/Mdg/Giftregistry/Helper/Data.php`):'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中添加以下代码（文件位置为`app/code/local/Mdg/Giftregistry/Helper/Data.php`）：
- en: '[PRE58]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Finally, we need to set up the edit template; the edit template will be exactly
    the same as the new template but with one major difference. We will check for
    the existence of a loaded registry and prepopulate the values of our fields.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要设置编辑模板；编辑模板将与新模板完全相同，但有一个主要区别。我们将检查加载的注册表是否存在，并预填充我们字段的值。
- en: 'The file location is `app/design/frontend/base/default/template/mdg/edit.phtml`.
    Refer to the following code:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/design/frontend/base/default/template/mdg/edit.phtml`。参考以下代码：
- en: '[PRE59]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Let''s continue by adding the block and templates for the edit action:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加编辑操作的块和模板：
- en: Open the `mdg_giftregistry.xml` layout file.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mdg_giftregistry.xml`布局文件。
- en: 'Add the following code inside the `<mdg_gifregistry_index_edit>` node (the
    file location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<mdg_gifregistry_index_edit>`节点内添加以下代码（文件位置为`app/design/frontend/base/default/layout/mdg_giftregistry.xml`）：
- en: '[PRE60]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Once that is set, we can try creating a couple of test registries and modifying
    their properties.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好后，我们可以尝试创建一对测试注册表并修改它们的属性。
- en: Note
  id: totrans-408
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here's a challenge for you. As with the controller, the edit and new form can
    be combined into a single reusable form. Try to combine them to see the answer
    with the complete code and full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/4](http://www.magedevguide.com/challenge/chapter4/4).
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个挑战给你。与控制器一样，编辑和新表单可以合并为一个可重用的表单。尝试将它们合并以查看完整代码和完整分解的答案，请访问[http://www.magedevguide.com/challenge/chapter4/4](http://www.magedevguide.com/challenge/chapter4/4)。
- en: SearchController blocks and views
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SearchController块和视图
- en: 'For our search controller, we will need a search template for our index. For
    the results, we can actually reuse the registry list template by simply making
    a change to our controller by following these steps:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的搜索控制器，我们将需要一个用于我们的索引的搜索模板。对于结果，我们实际上可以通过简单地更改我们的控制器来重用注册表列表模板，按照以下步骤进行：
- en: Navigate to the template folder.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到模板文件夹。
- en: Create a file called `search.phtml`.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`search.phtml`的文件。
- en: 'Add the following code (the file location is `app/design/frontend/base/default/template/mdg/search.phtml`):'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码（文件位置为`app/design/frontend/base/default/template/mdg/search.phtml`）：
- en: '[PRE61]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'A couple of things to notice:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 有几件事情需要注意：
- en: We are using the helper model to populate the `Event` type IDs
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用帮助程序模型来填充`Event`类型ID
- en: We are posting directly to the search/results
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们直接发布到搜索/结果
- en: 'Now, let''s make the appropriate change to our layout file:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对布局文件进行适当的更改：
- en: Open `mdg_giftregistry.xml`.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mdg_giftregistry.xml`。
- en: 'Add the following code inside `<mdg_gifregistry_search_index>` (the file location
    is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<mdg_gifregistry_search_index>`内添加以下代码（文件位置为`app/design/frontend/base/default/layout/mdg_giftregistry.xml`）：
- en: '[PRE62]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: For the search results, we don't need to create a new block type since we are
    passing the results collection directly to the block. In the layout, our changes
    will be minimal, and we can reuse the list block for displaying the search registry
    results.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 对于搜索结果，我们不需要创建新的块类型，因为我们直接将结果集合传递给块。在布局中，我们的更改将是最小的，我们可以重用列表块来显示搜索注册表结果。
- en: However, we do need to make a change in the controller. We need to change the
    function from `setResults()` to `setCustomerRegistries()`.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们确实需要在控制器中进行更改。我们需要将函数从`setResults()`更改为`setCustomerRegistries()`。
- en: 'The file location is `app/code/local/Mdg/Giftregistry/controllers/SearchController.php`.
    Refer to the following code:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/controllers/SearchController.php`。参考以下代码：
- en: '[PRE63]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Finally, let''s update the layout files by following these steps:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们按照以下步骤更新布局文件：
- en: Open `mdg_giftregistry.xml`.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`mdg_giftregistry.xml`。
- en: 'Add the following code inside `<mdg_gifregistry_search_results>` (the file
    location is `app/design/frontend/base/default/layout/mdg_giftregistry.xml`):'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<mdg_gifregistry_search_results>`内添加以下代码（文件位置为`app/design/frontend/base/default/layout/mdg_giftregistry.xml`）：
- en: '[PRE64]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: And that would be the end of our `SearchController` template; however, there
    is a problem that our search results are displaying. For the delete and edit links
    of a registry, we need a way to restrict these links only to the owner.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是我们的`SearchController`模板的结束；然而，我们的搜索结果显示了一个问题。对于注册表的删除和编辑链接，我们需要一种方法来仅限制这些链接只对所有者可见。
- en: 'We can do that with the following `Helper` function:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下“Helper”函数来实现：
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Helper/Data.php`. Refer
    to the following code:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/Helper/Data.php`。参考以下代码：
- en: '[PRE65]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: And let's update our template to use the new `helper` method.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们的模板，以使用新的“helper”方法。
- en: 'The file location is `app/design/frontend/base/default/template/mdg/list.phtml`.
    Refer to the following code:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/design/frontend/base/default/template/mdg/list.phtml`。参考以下代码：
- en: '[PRE66]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: ViewController block and views
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ViewController块和视图
- en: 'For our view, we just need to create a new template file and a new entry in
    the `layout.xml` file:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的视图，我们只需要创建一个新的模板文件和在`layout.xml`文件中创建一个新条目：
- en: Navigate to the template directory.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到模板目录。
- en: Create a template called `view.phtml`.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`view.phtml`的模板。
- en: 'Add the following code (the file location is `app/design/frontend/base/default/template/mdg/view.phtml`):'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码（文件位置为`app/design/frontend/base/default/template/mdg/view.phtml`）：
- en: '[PRE67]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Update the layout XML file, `<mdg_gifregistry_view_view>`.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新布局XML文件`<mdg_gifregistry_view_view>`。
- en: '[PRE68]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Note
  id: totrans-446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here's a challenge for you. Improve the view form to return an error if there
    is not an actual loaded registry. To see the answer with the complete code and
    full breakdown, visit [http://www.magedevguide.com/challenge/chapter4/5](http://www.magedevguide.com/challenge/chapter4/5).
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个挑战给你。改进视图表单，以便在没有实际加载的注册表时返回错误。要查看完整代码和详细分解的答案，请访问[http://www.magedevguide.com/challenge/chapter4/5](http://www.magedevguide.com/challenge/chapter4/5)。
- en: Adding products to the registry
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将产品添加到注册表
- en: We are almost at the end of the chapter, and we are yet to cover how to add
    products to our registries. Due to space concerns in this book, I decided to move
    this section to [http://www.magedevguide.com/chapter6/adding-products-registry](http://www.magedevguide.com/chapter6/adding-products-registry).
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎到了本章的结尾，但我们还没有涵盖如何向我们的注册表添加产品。由于本书篇幅有限，我决定将这一部分移到[http://www.magedevguide.com/chapter6/adding-products-registry](http://www.magedevguide.com/chapter6/adding-products-registry)。
- en: Summary
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered a lot of ground. We have learned how to extend
    the frontend of Magento and how to work with routes and controllers.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了很多内容。我们学会了如何扩展Magento的前端以及如何处理路由和控制器。
- en: The Magento layout system allows us to modify and control blocks and display
    it on our store. We also started working with Magento Data models, and we learned
    how to use them, as well as how to handle and manipulate our data.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: Magento布局系统允许我们修改和控制块，并在我们的商店上显示它。我们还开始使用Magento数据模型，并学会了如何使用它们，以及如何处理和操作我们的数据。
- en: We have only touched the surface of the frontend development and of the Data
    models. In the next chapter, we will expand a little bit more on the topics of
    configuration, models, and data, and we will explore and create an admin section
    on the Magento backend.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是触及了前端开发和数据模型的表面。在下一章中，我们将更深入地扩展配置、模型和数据的主题，并在Magento后端探索和创建管理部分。
