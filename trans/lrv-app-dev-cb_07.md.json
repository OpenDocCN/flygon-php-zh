["```php\n    \"require\": {\n           \"laravel/framework\": \"4.0.*\",\n           \"way/generators\": \"1.0.*\"\n    },\n    ```", "```php\n    \"require\": {\n          \"laravel/framework\": \"4.0.*\",\n          \"way/generators\": \"1.0.*\",\n          \"imagine/imagine\": \"dev-master\"\n    },\n    ```", "```php\n    php composer.phar update\n    ```", "```php\n    'Way\\Generators\\GeneratorsServiceProvider'\n    ```", "```php\n    **php artisan generate:scaffold cities --fields=\"city:string\"**\n\n    ```", "```php\n    **php artisan generate:scaffold superheroes --fields=\"name:string, city_id:integer:unsigned\"**\n\n    ```", "```php\n    <?php\n\n    class CitiesTableSeeder extends Seeder {\n\n      public function run()\n      {\n        DB::table('cities')->delete();\n\n        $cities = array(\n             array(\n                    'id'         => 1,\n                    'city'       => 'New York',\n                    'created_at' => date('Y-m-d g:i:s',time())\n                  ),\n             array(\n                    'id'         => 2,\n                    'city'       => 'Metropolis',\n                    'created_at' => date('Y-m-d g:i:s',time())\n                  ),\n             array(\n                    'id'         => 3,\n                    'city'       => 'Gotham',\n                    'created_at' => date('Y-m-d g:i:s',time())\n                  )\n        );\n\n        DB::table('cities')->insert($cities);\n      }\n    }\n    ```", "```php\n    <?php\n\n    class SuperheroesTableSeeder extends Seeder {\n\n      public function run()\n      {\n        DB::table('superheroes')->delete();\n\n          $superheroes = array(\n               array(\n                     'name'       => 'Spiderman',\n                     'city_id'    => 1,\n                     'created_at' => date('Y-m-d g:i:s', time())\n                     ),\n               array(\n                     'name'       => 'Superman',\n                     'city_id'    => 2,\n                     'created_at' => date('Y-m-d g:i:s', time())\n                     ),\n               array(\n                     'name'       => 'Batman',\n                     'city_id'    => 3,\n                     'created_at' => date('Y-m-d g:i:s', time())\n                     ),\n               array(\n                     'name'       => 'The Thing',\n                     'city_id'    => 1,\n                     'created_at' => date('Y-m-d g:i:s', time())\n                     )\n          );\n\n        DB::table('superheroes')->insert($superheroes);\n      }\n    }\n    ```", "```php\n    php artisan migrate\n    **php artisan db:seed**\n\n    ```", "```php\n    <?php\n\n    return array(\n\n        'name' => 'Terry Matula',\n\n        'email' => 'terrymatula@gmail.com',\n\n    );\n    ```", "```php\n    **php artisan workbench matula/vimeolist --resources**\n\n    ```", "```php\n    <?php namespace Matula\\Vimeolist;\n\n    class Vimeolist\n    {\n      private $base_url = 'http://vimeo.com/api/v2/{username}/videos.json';\n      private $username;\n\n      public function __construct($username = 'userscape') {\n          $this->setUser($username);\n          return $this;\n      }\n\n      /**\n       * Set the username for our list\n       *\n       * @return void\n       */\n      public function setUser($username = NULL) {\n          $this->username = is_null($username) ? $this->username : urlencode($username);\n           return $this;\n      }\n\n      /**\n       * Set up the url and get the contents\n       *\n       * @return json\n       */\n      private function getFeed() {\n          $url  = str_replace('{username}', $this->username,$this->base_url);\n          $feed = file_get_contents($url);\n          return $feed;\n      }\n\n      /**\n       * Turn the feed into an object\n       *\n       * @return object\n       */\n      public function parseFeed() {\n           $json = $this->getFeed();\n           $object = json_decode($json);\n           return $object;\n      }\n\n      /**\n       * Get the list and format the return\n       *\n       * @return array\n       */\n      public function getList() {\n           $list = array();\n           $posts = $this->parseFeed();\n           foreach ($posts as $post) {\n                 $list[$post->id]['title']    = $post->title;\n                 $list[$post->id]['url']    = $post->url;\n                 $list[$post->id]['description'] = $post->description;\n                 $list[$post->id]['thumbnail'] = $post->thumbnail_small;\n           }\n           return $list;\n      }\n    }\n    ```", "```php\n    <?php namespace Matula\\Vimeolist;\n\n    use Illuminate\\Support\\ServiceProvider;\n\n    class VimeolistServiceProvider extends ServiceProvider {\n\n      /**\n       * Indicates if loading of the provider is deferred.\n       *\n       * @var bool\n       */\n      protected $defer = false;\n\n      /**\n       * Bootstrap the application events.\n       *\n       * @return void\n       */\n      public function boot()\n      {\n            $this->package('matula/vimeolist');\n      }\n\n      /**\n       * Register the service provider.\n       *\n       * @return void\n       */\n      public function register()\n      {\n          $this->app['vimeolist'] = $this->app->share(function($app)\n                {\n                 return new Vimeolist;\n                });\n      }\n\n      /**\n       * Get the services provided by the provider.\n       *\n       * @return array\n       */\n      public function provides()\n      {\n        return array('vimeolist');\n      }\n    }\n    ```", "```php\n    'Matula\\Vimeolist\\VimeolistServiceProvider',\n    ```", "```php\n    **php composer.phar dump-autoload**\n\n    ```", "```php\n    Route::get('vimeo/{username?}', function($username = null) use ($app)\n    {\n      $vimeo = $app['vimeolist'];\n      if ($username) {\n          $vimeo->setUser($username);\n      }\n      dd($vimeo->getList());\n    });\n    ```", "```php\n    git init\n    git add -A\n    git commit \u2013m 'First Package commit'\n    ```", "```php\n    git remote add origin git@github.com:{username}/vimeolist.git\n    **git push \u2013u origin master**\n\n    ```", "```php\n    \"require\": {\n           \"laravel/framework\": \"4.0.*\",\n           \"wesleytodd/universal-forms\": \"dev-master\"\n      },\n    ```", "```php\n    \"repositories\": [\n         {\n             \"type\": \"vcs\",\n             \"url\": \"https://github.com/wesleytodd/Universal-Forms-PHP\"\n         }\n      ],\n    ```", "```php\n    **php composer.phar update**\n\n    ```", "```php\n    'Wesleytodd\\UniversalForms\\Drivers\\Laravel\\UniversalFormsServiceProvider',\n    ```", "```php\n    $form_json = '{\n           \"action\" : \"uform\",\n           \"method\" : \"POST\",\n           \"fields\" : [\n                 {\n                   \"name\" : \"name\",\n                   \"type\" : \"text\",\n                   \"label\" : \"Name\",\n                   \"rules\" : [\"required\"]\n                 },\n                 {\n                   \"name\" : \"email\",\n                   \"type\" : \"email\",\n                   \"label\" : \"Email\",\n                   \"value\" : \"myemail@example.com\",\n                   \"rules\" : [\"required\", \"email\"]\n                  },\n                  {\n                    \"name\" : \"message\",\n                    \"type\" : \"textarea\",\n                    \"label\" : \"Message\",\n                    \"rules\" : [\"required\", \"length[30,0]\"]\n                  }\n           ]\n    }';\n\n    $uform = new Wesleytodd\\UniversalForms\\Drivers\\Laravel\\Form($form_json);\n\n    Route::get('uform', function() use ($uform)\n    {\n      return $uform->render();\n    });\n\n    Route::post('uform', function() use ($uform)\n    {\n      // validate\n      $valid = $uform->valid(Input::all());\n      if ($valid) {\n           // Could also save to database\n           dd(Input::all());\n      } else {\n           // Could redirect back to form\n           dd($uform->getErrors());\n      }\n    });\n    ```", "```php\n    **php artisan command:make SkeletonCommand**\n\n    ```", "```php\n    <?php\n\n    use Illuminate\\Console\\Command;\n    use Symfony\\Component\\Console\\Input\\InputOption;\n    use Symfony\\Component\\Console\\Input\\InputArgument;\n    use Illuminate\\Filesystem\\Filesystem as File;\n\n    class SkeletonCommand extends Command {\n\n      /**\n       * The console command name.\n       *\n       * @var string\n       */\n      protected $name = 'skeleton:make';\n\n      /**\n       * The console command description.\n       *\n       * @var string\n       */\n      protected $description = 'Creates an HTML5 skeleton view.';\n\n       /**\n         * File system instance\n         *\n         * @var File\n         */\n        protected $file;\n\n      /**\n       * Create a new command instance.\n       *\n       * @return void\n       */\n      public function __construct()\n      {\n        parent::__construct();\n        $this->file = new File();\n      }\n\n      /**\n       * Execute the console command.\n       *\n       * @return void\n       */\n      public function fire()\n      {\n            $view = $this->argument('view');\n            $file_name = 'app/views/' . $view;\n            $ext = ($this->option('blade')) ? '.blade.php' :'.php';\n                $template = '<!DOCTYPE html>\n                <html>\n                <head>\n                   <meta charset=utf-8 />\n                   <title></title>\n                   <link rel=\"stylesheet\" type=\"text/css\"media=\"screen\" href=\"css/style.css\" />\n                    <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js\">\n                    </script>\n                      <!--[if IE]>\n                            <script src=\"http://html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n                      <![endif]-->\n                </head>\n                <body>\n                </body>\n                </html>';\n\n                if (!$this->file->exists($file_name)) {\n                   $this->info('HTML5 skeleton created!');\n                   return $this->file->put($file_name . $ext,$template) !== false;\n            } else {\n                 $this->info('HTML5 skeleton created!');\n                 return $this->file->put($file_name . '-' .time() . $ext, $template) !== false;\n            }\n\n        $this->error('There was a problem creating yourHTML5 skeleton');\n           return false;\n      }\n\n      /**\n       * Get the console command arguments.\n       *\n       * @return array\n       */\n      protected function getArguments()\n      {\n          return array(\n               array('view', InputArgument::REQUIRED, 'The name of the view.'),\n          );\n      }\n\n      /**\n       * Get the console command options.\n       *\n       * @return array\n       */\n      protected function getOptions()\n      {\n         return array(\n         array('blade', null, InputOption::VALUE_OPTIONAL, 'Use Blade templating?', false),\n         );\n      }\n\n    } \n    ```", "```php\n    Artisan::add(new SkeletonCommand);\n    ```", "```php\n    **php artisan skeleton:make MyNewView --blade=true**\n\n    ```"]