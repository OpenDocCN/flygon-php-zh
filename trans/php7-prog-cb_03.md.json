["```php\n    function someName ($parameter)\n    { \n      $result = 'INIT';\n      // one or more statements which do something\n      // to affect $result\n      $result .= ' and also ' . $parameter;\n      return $result; \n    }\n    ```", "```php\n    function someOtherName ($requiredParam, $optionalParam = NULL)\n      { \n        $result = 0;\n        $result += $requiredParam;\n        $result += $optionalParam ?? 0;\n        return $result; \n      }\n    ```", "```php\n    function someTest()\n    {\n      return 'TEST';\n    }\n    function someTest($a)\n    {\n      return 'TEST:' . $a;\n    }\n    ```", "```php\n    function someInfinite(...$params)\n    {\n      // any params passed go into an array $params\n      return var_export($params, TRUE);\n    }\n    ```", "```php\n    function someDirScan($dir)\n    {\n      // uses \"static\" to retain value of $list\n      static $list = array();\n      // get a list of files and directories for this path\n      $list = glob($dir . DIRECTORY_SEPARATOR . '*');\n      // loop through\n      foreach ($list as $item) {\n        if (is_dir($item)) {\n          $list = array_merge($list, someDirScan($item));\n        }\n      }\n      return $list;\n    }\n    ```", "```php\n    <?php\n    namespace Alpha;\n\n    function someFunction()\n    {\n      echo __NAMESPACE__ . ':' . __FUNCTION__ . PHP_EOL;\n    }\n    ```", "```php\n    <?php\n    namespace Beta;\n\n    function someFunction()\n    {\n      echo __NAMESPACE__ . ':' . __FUNCTION__ . PHP_EOL;\n    }\n    ```", "```php\n    include (__DIR__ . DIRECTORY_SEPARATOR \n             . 'chap_03_developing_functions_namespace_alpha.php');\n    include (__DIR__ . DIRECTORY_SEPARATOR \n             . 'chap_03_developing_functions_namespace_beta.php');\n          echo Alpha\\someFunction();\n          echo Beta\\someFunction();\n    ```", "```php\ninclude (__DIR__ . DIRECTORY_SEPARATOR . 'chap_03_developing_functions_library.php');\n```", "```php\necho someName('TEST');   // returns \"INIT and also TEST\"\n```", "```php\necho someOtherName(1);    // returns  1\necho someOtherName(1, 1);   //  returns 2\n```", "```php\necho someInfinite(1, 2, 3);\necho PHP_EOL;\necho someInfinite(22.22, 'A', ['a' => 1, 'b' => 2]);\n```", "```php\necho someInfinite(1, 2, 3);\necho PHP_EOL;\necho someInfinite(22.22, 'A', ['a' => 1, 'b' => 2]);\n```", "```php\n    function someTypeHint(Array $a, DateTime $t, Callable $c)\n    {\n      $message = '';\n      $message .= 'Array Count: ' . count($a) . PHP_EOL;\n      $message .= 'Date: ' . $t->format('Y-m-d') . PHP_EOL;\n      $message .= 'Callable Return: ' . $c() . PHP_EOL;\n      return $message;\n    }\n    ```", "```php\n    declare(strict_types=1);\n    ```", "```php\n    function someScalarHint(bool $b, int $i, float $f, string $s)\n    {\n      return sprintf(\"\\n%20s : %5s\\n%20s : %5d\\n%20s \" . \n                     \": %5.2f\\n%20s : %20s\\n\\n\",\n                     'Boolean', ($b ? 'TRUE' : 'FALSE'),\n                     'Integer', $i,\n                     'Float',   $f,\n                     'String',  $s);\n    }\n    ```", "```php\n    function someBoolHint(bool $b)\n    {\n      return $b;\n    }\n    ```", "```php\ninclude (__DIR__ . DIRECTORY_SEPARATOR . 'chap_03_developing_functions_type_hints_library.php');\n```", "```php\ntry {\n    $callable = function () { return 'Callback Return'; };\n    echo someTypeHint([1,2,3], new DateTime(), $callable);\n    echo someTypeHint('A', 'B', 'C');\n} catch (TypeError $e) {\n    echo $e->getMessage();\n    echo PHP_EOL;\n}\n```", "```php\ntry {\n    echo someScalarHint(TRUE, 11, 22.22, 'This is a string');\n    echo someScalarHint('A', 'B', 'C', 'D');\n} catch (TypeError $e) {\n    echo $e->getMessage();\n}\n```", "```php\ntry {\n    // positive results\n    $b = someBooleanHint(TRUE);\n    $i = someBooleanHint(11);\n    $f = someBooleanHint(22.22);\n    $s = someBooleanHint('X');\n    var_dump($b, $i, $f, $s);\n    // negative results\n    $b = someBooleanHint(FALSE);\n    $i = someBooleanHint(0);\n    $f = someBooleanHint(0.0);\n    $s = someBooleanHint('');\n    var_dump($b, $i, $f, $s);\n} catch (TypeError $e) {\n    echo $e->getMessage();\n}\n```", "```php\ntry {\n    $a = someBoolHint([1,2,3]);\n    var_dump($a);\n} catch (TypeError $e) {\n    echo $e->getMessage();\n}\ntry {\n    $o = someBoolHint(new stdClass());\n    var_dump($o);\n} catch (TypeError $e) {\n    echo $e->getMessage();\n}\n```", "```php\n    function returnsString(DateTime $date, $format) : string\n    {\n      return $date->format($format);\n    }\n    ```", "```php\n    function convertsToString($a, $b, $c) : string\n\n      return $a + $b + $c;\n    }\n    ```", "```php\n    function makesDateTime($year, $month, $day) : DateTime\n    {\n      $date = new DateTime();\n      $date->setDate($year, $month, $day);\n      return $date;\n    }\n    ```", "```php\n    function wrongDateTime($year, $month, $day) : DateTime\n    {\n      return date($year . '-' . $month . '-' . $day);\n    }\n    ```", "```php\ninclude (__DIR__ . '/chap_03_developing_functions_return_types_library.php');\n```", "```php\n$date   = new DateTime();\n$format = 'l, d M Y';\n$now    = returnsString($date, $format);\necho $now . PHP_EOL;\nvar_dump($now);\n```", "```php\necho \"\\nconvertsToString()\\n\";\nvar_dump(convertsToString(2, 3, 4));\n```", "```php\necho \"\\nmakesDateTime()\\n\";\n$d = makesDateTime(2015, 11, 21);\nvar_dump($d);\n```", "```php\ntry {\n    $e = wrongDateTime(2015, 11, 21);\n    var_dump($e);\n} catch (TypeError $e) {\n    echo $e->getMessage();\n}\n```", "```php\n    $iterator = new ArrayIterator($array);\n    ```", "```php\n    function htmlList($iterator)\n    {\n      $output = '<ul>';\n      while ($value = $iterator->current()) {\n        $output .= '<li>' . $value . '</li>';\n        $iterator->next();\n      }\n      $output .= '</ul>';\n      return $output;\n    }\n    ```", "```php\n    function htmlList($iterator)\n    {\n      $output = '<ul>';\n      foreach($iterator as $value) {\n        $output .= '<li>' . $value . '</li>';\n      }\n      $output .= '</ul>';\n      return $output;\n    }\n    ```", "```php\n    function fetchCountryName($sql, $connection)\n    {\n      $iterator = new ArrayIterator();\n      $stmt = $connection->pdo->query($sql);\n      while($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        $iterator->append($row['name']);\n      }\n      return $iterator;\n    }\n    ```", "```php\n    function nameFilterIterator($innerIterator, $name)\n    {\n      if (!$name) return $innerIterator;\n      $name = trim($name);\n      $iterator = new CallbackFilterIterator($innerIterator, \n        function($current, $key, $iterator) use ($name) {\n          $pattern = '/' . $name . '/i';\n          return (bool) preg_match($pattern, $current);\n        }\n      );\n      return $iterator;\n    }\n    ```", "```php\n    $pagination = new LimitIterator(fetchCountryName(\n    $sql, $connection), $offset, $limit);\n    ```", "```php\n    $i = new ArrayIterator($a);\n    ```", "```php\n    $f = new class ($i) extends FilterIterator { \n      public function accept()\n      {\n        $current = $this->current();\n        return !(ord($current) & 1);\n      }\n    };\n    ```", "```php\n    $l = new LimitIterator($f, 2, 6);\n    ```", "```php\n    function showElements($iterator)\n    {\n      foreach($iterator as $item)  echo $item . ' ';\n      echo PHP_EOL;\n    }\n\n    $a = range('A', 'Z');\n    $i = new ArrayIterator($a);\n    showElements($i);\n    ```", "```php\n    $f = new class ($i) extends FilterIterator {\n    public function accept()\n      {\n        $current = $this->current();\n        return !(ord($current) & 1);\n      }\n    };\n    showElements($f);\n    ```", "```php\n    $l = new LimitIterator($f, 2, 6);\n    showElements($l);\n    ```", "```php\n    function fetchAllAssoc($sql, $connection)\n    {\n      $iterator = new ArrayIterator();\n      $stmt = $connection->pdo->query($sql);\n      while($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        $iterator->append($row);\n      }\n      return $iterator;\n    }\n    ```", "```php\n    $iterator = fetchAllAssoc($sql, $connection);\n    $shallow  = new RecursiveArrayIterator($iterator);\n    ```", "```php\n    $deep     = new RecursiveIteratorIterator($shallow);\n    ```", "```php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\ndefine('ITEMS_PER_PAGE', [5, 10, 15, 20]);\ninclude (__DIR__ . '/chap_03_developing_functions_iterators_library.php');\ninclude (__DIR__ . '/../Application/Database/Connection.php');\n```", "```php\n$name = strip_tags($_GET['name'] ?? '');\n$limit  = (int) ($_GET['limit'] ?? 10);\n$page   = (int) ($_GET['page']  ?? 0);\n$offset = $page * $limit;\n$prev   = ($page > 0) ? $page - 1 : 0;\n$next   = $page + 1;\n```", "```php\ntry {\n    $connection = new Application\\Database\\Connection(\n      include __DIR__ . DB_CONFIG_FILE);\n    $sql    = 'SELECT * FROM iso_country_codes';\n    $arrayIterator    = fetchCountryName($sql, $connection);\n    $filteredIterator = nameFilterIterator($arrayIterator, $name);\n    $limitIterator    = pagination(\n    $filteredIterator, $offset, $limit);\n} catch (Throwable $e) {\n    echo $e->getMessage();\n}\n```", "```php\n<form>\n  Country Name:\n  <input type=\"text\" name=\"name\" \n         value=\"<?= htmlspecialchars($name) ?>\">\n  Items Per Page: \n  <select name=\"limit\">\n    <?php foreach (ITEMS_PER_PAGE as $item) : ?>\n      <option<?= ($item == $limit) ? ' selected' : '' ?>>\n      <?= $item ?></option>\n    <?php endforeach; ?>\n  </select>\n  <input type=\"submit\" />\n</form>\n  <a href=\"?name=<?= $name ?>&limit=<?= $limit ?>\n    &page=<?= $prev ?>\">\n  << PREV</a> \n  <a href=\"?name=<?= $name ?>&limit=<?= $limit ?>\n    &page=<?= $next ?>\">\n  NEXT >></a>\n<?= htmlList($limitIterator); ?>\n```", "```php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\ninclude (__DIR__ . '/chap_03_developing_functions_iterators_library.php');\ninclude (__DIR__ . '/../Application/Database/Connection.php');\n```", "```php\ntry {\n    $connection = new Application\\Database\\Connection(\n    include __DIR__ . DB_CONFIG_FILE);\n    $sql    = 'SELECT * FROM iso_country_codes';\n    $iterator = fetchAllAssoc($sql, $connection);\n    $shallow  = new RecursiveArrayIterator($iterator);\n    foreach ($shallow as $item) var_dump($item);\n    $deep     = new RecursiveIteratorIterator($shallow);\n    foreach ($deep as $item) var_dump($item);     \n} catch (Throwable $e) {\n    echo $e->getMessage();\n}\n```", "```php\n    function filteredResultsGenerator(array $array, $filter, $limit = 10, $page = 0)\n      {\n        $max    = count($array);\n        $offset = $page * $limit;\n        foreach ($array as $key => $value) {\n          if (!stripos($value, $filter) !== FALSE) continue;\n          if (--$offset >= 0) continue;\n          if (--$limit <= 0) break; \n          yield $value;\n        }\n      }\n    ```", "```php\ninclude (__DIR__ . DIRECTORY_SEPARATOR . 'chap_03_developing_functions_iterators_library.php');\ninclude (__DIR__ . '/../Application/Web/Hoover.php');\n```", "```php\n$url    = trim(strip_tags($_GET['url'] ?? ''));\n$filter = trim(strip_tags($_GET['filter'] ?? ''));\n$limit  = (int) ($_GET['limit'] ?? 10);\n$page   = (int) ($_GET['page']  ?? 0);\n```", "```php\n$next   = $page + 1;\n$prev   = $page - 1;\n$base   = '?url=' . htmlspecialchars($url) \n        . '&filter=' . htmlspecialchars($filter) \n        . '&limit=' . $limit \n        . '&page=';\n```", "```php\n$vac    = new Application\\Web\\Hoover();\n$list   = $vac->getAttribute($url, 'href');\n```", "```php\n<form>\n<table>\n<tr>\n<th>URL</th>\n<td>\n<input type=\"text\" name=\"url\" \n  value=\"<?= htmlspecialchars($url) ?>\"/>\n</td>\n</tr>\n<tr>\n<th>Filter</th>\n<td>\n<input type=\"text\" name=\"filter\" \n  value=\"<?= htmlspecialchars($filter) ?>\"/></td>\n</tr>\n<tr>\n<th>Limit</th>\n<td><input type=\"text\" name=\"limit\" value=\"<?= $limit ?>\"/></td>\n</tr>\n<tr>\n<th>&nbsp;</th><td><input type=\"submit\" /></td>\n</tr>\n<tr>\n<td>&nbsp;</td>\n<td>\n<a href=\"<?= $base . $prev ?>\"><-- PREV | \n<a href=\"<?= $base . $next ?>\">NEXT --></td>\n</tr>\n</table>\n</form>\n<hr>\n<?= htmlList(filteredResultsGenerator(\n$list, $filter, $limit, $page)); ?>\n```"]