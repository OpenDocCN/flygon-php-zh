["```php\nmain = do \n  line <- getLine \n  if null line \n    then return () \n  else do \n    putStrLn $ reverseWords line \n    main \n\nreverseWords :: String -> String \nreverseWords = unwords . map reverse . words \n```", "```php\n<?php \n\n$a = 10; \n$b = 5; \n$c = $a + $b; \n\necho $c; \n// 15 \n\n$a = 23; \necho $c; \n```", "```php\n**composer require rx/stream**\n\n```", "```php\n<?php \n\nuse \\Rx\\React\\FromFileObservable; \nuse \\Rx\\Observer\\CallbackObserver; \n\n$data = new FromFileObservable(\"11-example.csv\"); \n\n$data = $data \n    ->cut() \n    ->map('str_getcsv') \n    ->map(function (array $row) { return $row; }); \n\n$data->subscribe(new CallbackObserver( \n    function ($data) { echo $data[0].\"\\n\"; }, \n    function ($e) { echo \"error\\n\"; }, \n    function () { echo \"done\\n\"; } \n)); \n```", "```php\n**composer require voryx/pgasync**\n\n```", "```php\n<?php \n\n$client = new PgAsync\\Client([ \"user\" => \"user\", \"database\" => \"db\" ]); \n\n$client->query('SELECT * FROM my_table')->subscribe(new CallbackObserver( \n    function ($row) { }, \n    function ($e) { }, \n    function () { } \n)); \n```", "```php\n<?php \n\nuse \\React\\EventLoop\\StreamSelectLoop; \nuse \\Rx\\Observable; \nuse \\Rx\\Scheduler\\EventLoopScheduler; \n\n// Those are needed in order to create a timed interval \n$loop = new StreamSelectLoop(); \n$scheduler  = new EventLoopScheduler($loop); \n\n// This will emit an infinite sequence of growing integer every  50ms. $source = Observable::interval(50, $scheduler); \n\n$first = $source \n    ->throttle(150, $scheduler) // do not emit more than one item  per 150ms \n    ->filter(function($i) { return $i % 2 == 0; }) // keep only  odd numbers \n    ->bufferWithCount(3) // buffer 3 items together before emitting them \n    ->take(3); // take the 10 first items only \n\n$second = $source \n    ->throttle(150, $scheduler) \n    ->take(10); \n\n$first->merge($second) // merge both observable \n    ->subscribe(new CallbackObserver( \n        function ($i) { var_dump($i); }, \n        function ($e) { }, \n        function () { } \n    )); \n\n$loop->run(); \n```", "```php\n**composer require reactivex/rxphp:dev-master**\n\n```"]