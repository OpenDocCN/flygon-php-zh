["```php\n<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration\n{\n  public function up()\n  { Schema::create('users', function (Blueprint $table) {\n      $table->increments('id');\n      $table->string('name');\n      $table->string('email')->unique();\n      $table->string('password');\n      $table->rememberToken();\n      $table->timestamps();\n    });\n  }\n\n  public function down()\n  { Schema::dropIfExists('users');\n  }\n}\n```", "```php\nSchema::create('users', function (Blueprint $table) {\n  ...\n  $table->text('saved');\n});\n```", "```php\n<?php\n\nnamespace App;\n\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\n\nclass User extends Authenticatable\n{\n  use Notifiable;\n\n  protected $fillable = [\n    'name', 'email', 'password',\n  ];\n\n  protected $hidden = [\n    'password', 'remember_token',\n  ];\n}\n```", "```php\nclass User extends Authenticatable\n{\n  ...\n\n  protected $fillable = [\n    'name', 'email', 'password', 'saved'\n  ];\n\n  ...\n\n  protected $casts = [\n    'saved' => 'array'\n  ];\n}\n```", "```php\necho gettype($user->saved());\n\n// array\n```", "```php\n$ php artisan make:seeder UsersTableSeeder\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Seeder;\nuse App\\User;\nuse Illuminate\\Support\\Facades\\Hash;\n\nclass UsersTableSeeder extends Seeder\n{\n  public function run()\n  { User::create([\n      'name'      => 'Jane Doe',\n      'email'     => 'test@gmail.com',\n      'password'  => Hash::make('test'),\n      'saved'     => [1,5,7,9]\n    ]);\n  }\n}\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Seeder;\n\nclass DatabaseSeeder extends Seeder\n{\n  public function run()\n  {\n    $this->call(ListingsTableSeeder::class);\n    $this->call(UsersTableSeeder::class);\n  }\n}\n```", "```php\n$ php artisan migrate:refresh --seed\n```", "```php\n$ php artisan tinker\n >>> DB::table('users')->get(); /* {\n  \"id\": 1, \"name\": \"Jane Doe\", \"email\": \"test@gmail.com\", \"password\": \"...\", \"remember_token\": null, \"created_at\": \"2017-10-27 02:30:31\", \"updated_at\": \"2017-10-27 02:30:31\", \"saved\": \"[1,5,7,9]\"\n} */\n```", "```php\n$ touch resources/assets/components/LoginPage.vue\n```", "```php\n<template>\n  <div id=\"login\" class=\"login-container\">\n    <form role=\"form\" method=\"POST\" action=\"/login\">\n      <div class=\"form-control\">\n        <input id=\"email\" type=\"email\" name=\"email\" \n          placeholder=\"Email Address\" required autofocus>\n      </div>\n      <div class=\"form-control\">\n        <input id=\"password\" type=\"password\" name=\"password\" \n          placeholder=\"Password\" required>\n      </div>\n      <div class=\"form-control\">\n        <button type=\"submit\">Log in</button>\n      </div>\n    </form>\n  </div>\n</template>\n```", "```php\n<template>...</template>\n<style> #login form {\n    padding-top: 40px;\n  }\n\n  @media (min-width: 744px) {\n    #login form {\n      padding-top: 80px;\n    }\n  }\n\n  #login .form-control {\n    margin-bottom: 1em;\n  }\n\n  #login input[type=email],\n  #login input[type=password],\n  #login button,\n  #login label {\n    width: 100%;\n    font-size: 19px !important;\n    line-height: 24px;\n    color: #484848;\n    font-weight: 300;\n  }\n\n  #login input {\n    background-color: transparent;\n    padding: 11px;\n    border: 1px solid #dbdbdb;\n    border-radius: 2px;\n    box-sizing:border-box }\n\n  #login button {\n    background-color: #4fc08d;\n    color: #ffffff;\n    cursor: pointer;\n    border: #4fc08d;\n    border-radius: 4px;\n    padding-top: 12px;\n    padding-bottom: 12px;\n  } </style>\n```", "```php\n...\n\n.login-container { margin: 0 auto; padding: 0 12px;\n} @media (min-width: 374px) {\n  .login-container { width: 350px;\n  }\n} input[type=text] {\n  -webkit-appearance: none;\n}\n```", "```php\n...\n\nimport LoginPage from '../components/LoginPage.vue';\n\nlet router = new VueRouter({\n  ... routes: [\n    ...\n    { path: '/login', component: LoginPage, name: 'login' }\n  ],\n  ...\n}); router.beforeEach((to, from, next) => {\n  ...\n  if ( to.name === 'listing'\n      ? store.getters.getListing(to.params.listing)\n      : store.state.listing_summaries.length > 0\n    || to.name === 'login'\n  ) {\n    next();\n  }\n  ...\n});\n\nexport default router;\n```", "```php\n... Auth::routes();\n```", "```php\n$ php artisan route:list \n```", "```php\n<?php\n\nnamespace App\\Http\\Controllers\\Auth;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\n\nclass LoginController extends Controller\n{\n  use AuthenticatesUsers;\n\n  protected $redirectTo = '/home';\n\n  public function __construct()\n  {\n    $this->middleware('guest')->except('logout');\n  }\n}\n```", "```php\nclass LoginController extends Controller\n{\n  ...\n\n  public function showLoginForm()\n  {\n    return view('app', ['data' => []]);\n  }\n}\n```", "```php\n<input type=\"hidden\" name=\"_token\" value=\"3B08L3fj...\">\n```", "```php\n<script type=\"text/javascript\"> window.vuebnb_server_data = \"{!! addslashes(json_encode($data)) !!}\" window.csrf_token = \"{{ csrf_token() }}\" </script>\n```", "```php\n<template>\n  <div id=\"login\" class=\"login-container\">\n    <form role=\"form\" method=\"POST\" action=\"/login\">\n      <input type=\"hidden\" name=\"_token\" :value=\"csrf_token\"> ... </form>\n  </div>\n</template>\n<script> export default {\n    data() {\n      return { csrf_token: window.csrf_token }\n    }\n  } </script>\n<style>...</style>\n```", "```php\nclass LoginController extends Controller\n{\n  ...\n\n  protected $redirectTo = '/';\n\n  ...\n}\n```", "```php\n...\n\nif (Auth::guard($guard)->check()) {\n  return redirect('/');\n}\n```", "```php\n<template>\n  ...\n  <ul class=\"links\">\n    <li>\n      <router-link :to=\"{ name: 'saved' }\"> Saved </router-link>\n    </li>\n    <li>\n      <router-link :to=\"{ name: 'login' }\"> Log In </router-link>\n    </li>\n    <li>\n      <a @click=\"logout\">Log Out</a>\n      <form \n style=\"display: hidden\" \n action=\"/logout\" \n method=\"POST\" \n id=\"logout\" >\n        <input type=\"hidden\" name=\"_token\" :value=\"csrf_token\"/>\n      </form>\n    </li>\n  </ul>\n  ...\n</template>\n<script>\n  ...\n\n  export default { components: { ... },\n    data() {\n      return { csrf_token: window.csrf_token }\n    }, methods: {\n      logout() { document.getElementById('logout').submit();\n      }\n    }\n  }\n</script>\n```", "```php\nRoute::get('/saved', 'ListingController@get_home_web')->middleware('auth');\n```", "```php\n...\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass ListingController extends Controller\n{\n  ...\n\n  private function add_meta_data($collection, $request)\n  {\n    return $collection->merge([\n      'path' => $request->getPathInfo(),\n      'auth' => Auth::check()\n    ]);\n  }\n}\n```", "```php\n...\n\nexport default new Vuex.Store({ state: {\n    ... auth: false\n  }, mutations: {\n    ...\n    addData(state, { route, data }) {\n      if (data.auth) { state.auth = data.auth;\n      }\n      if (route === 'listing') { state.listings.push(data.listing);\n      } else { state.listing_summaries = data.listings;\n      }\n    }\n  }, getters: { ... }\n});\n```", "```php\n...\nimport router from './router';\n\nexport default new Vuex.Store({\n  ... mutations: {\n    toggleSaved(state, id) {\n      if (state.auth) {\n        let index = state.saved.findIndex(saved => saved === id);\n        if (index === -1) { state.saved.push(id);\n        } else { state.saved.splice(index, 1);\n        }\n      } else { router.push('/login');\n      }\n    },\n    ...    \n  },\n  ...\n});\n```", "```php\n<ul class=\"links\">\n  <li v-if=\"$store.state.auth\">\n    <router-link :to=\"{ name: 'saved' }\"> Saved </router-link>\n  </li>\n  <li v-if=\"$store.state.auth\">\n    <a @click=\"logout\">Log Out</a>\n    <form style=\"display: hidden\" \n      action=\"/logout\"  method=\"POST\" \n      id=\"logout\" >\n      <input type=\"hidden\" name=\"_token\" :value=\"csrf_token\"/>\n    </form>\n  </li>\n  <li v-else>\n    <router-link :to=\"{ name: 'login' }\"> Log In </router-link>\n  </li>\n</ul> \n```", "```php\nprivate function add_meta_data($collection, $request)\n{\n  return $collection->merge([\n    'path' => $request->getPathInfo(), \n    'auth' => Auth::check(), \n    'saved' => Auth::check() ? Auth::user()->saved : []\n  ]);\n}\n```", "```php\nrouter.beforeEach((to, from, next) => {\n  let serverData = JSON.parse(window.vuebnb_server_data);\n  if ( ... ) { ... }\n  else if ( ... ) { ... }\n  else { store.commit('addData', {route: to.name, data: serverData}); serverData.saved.forEach(id => store.commit('toggleSaved', id));\n    next();\n  }\n});\n```", "```php\nstate: { saved: [], listing_summaries: [], listings: [], auth: false\n}\n```", "```php\n$ php artisan tinker >>> DB::table('users')->select('saved')->first();\n# \"saved\": \"[1,5,7,9]\"\n```", "```php\n...\n\nRoute::post('/user/toggle_saved', 'UserController@toggle_saved') ->middleware('auth:api') ;\n```", "```php\n$ php artisan make:controller UserController\n```", "```php\n<?php\n\n...\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Input;\n\nclass UserController extends Controller\n{\n  public function toggle_saved()\n  {\n    $id = Input::get('id');\n    $user = Auth::user();\n    $saved = $user->saved;\n    $key = array_search($id, $saved);\n    if ($key === FALSE) {\n        array_push($saved, $id);\n    } else {\n        array_splice($saved, $key, 1);\n    }\n    $user->saved = $saved;\n    $user->save();\n    return response()->json();\n  }\n}\n```", "```php\nvar store = new Vuex.Store({ state: { val: null  \n  }, mutations: {\n    assignVal(state, payload) { state.val = payload;\n    }  \n  }, actions: {\n    setTimeout(() => {\n      commit('assignVal', 10);\n    }, 1000)\n  }\n}); store.dispatch('assignVal', 10);\n```", "```php\nimport axios from 'axios';\n\nexport default new Vuex.Store({\n  ... mutations: {\n    toggleSaved(state, id) {\n      let index = state.saved.findIndex(saved => saved === id);\n      if (index === -1) { state.saved.push(id);\n      } else { state.saved.splice(index, 1);\n      }\n    },\n    ...\n  },\n  ... actions: {\n    toggleSaved({ commit, state }, id) {\n      if (state.auth) { axios.post('/api/user/toggle_saved', { id }).then(\n          () => commit('toggleSaved', id)\n        );\n      } else { router.push('/login');\n      }\n    }\n  }\n});\n```", "```php\ntoggleSaved() {\n  this.$store.dispatch('toggleSaved', this.id);\n}\n```", "```php\n<?php\n\nreturn [\n  ...\n  'guards' => [\n    'web' => [\n      'driver' => 'session',\n      'provider' => 'users',\n    ],\n    'api' => [\n      'driver' => 'token',\n      'provider' => 'users',\n    ],\n  ],\n  ...\n];\n```", "```php\n$ composer require laravel/passport\n```", "```php\n$ php artisan migrate\n```", "```php\n$ php artisan passport:install\n```", "```php\n<?php\n\n...\n use Laravel\\Passport\\HasApiTokens;\n\nclass User extends Authenticatable\n{\n  use HasApiTokens, Notifiable;\n\n  ...\n}\n```", "```php\n'guards' => [\n  'web' => [\n    'driver' => 'session',\n    'provider' => 'users',\n  ],\n\n  'api' => [\n    'driver' => 'passport',\n    'provider' => 'users',\n  ],\n],\n```", "```php\nprotected $middlewareGroups = [\n  'web' => [\n    ... \\Laravel\\Passport\\Http\\Middleware\\CreateFreshApiToken::class,\n  ],\n  ...\n```", "```php\n... axios.defaults.headers.common = {\n  'X-Requested-With': 'XMLHttpRequest',\n  'X-CSRF-TOKEN': window.csrf_token\n};\n\nexport default new Vuex.Store({\n  ... });\n```", "```php\n$ php artisan tinker >>> DB::table('users')->select('saved')->first();\n\n# \"saved\": \"[1,5,7,9]\"\n```"]