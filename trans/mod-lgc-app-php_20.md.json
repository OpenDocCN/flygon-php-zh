["```php\n**page_script.php**\n<?php\n2 // ... $user_id value created earlier\n3\n4 $db = new Database($db_host, $db_user, $db_pass);\n5 $articles_gateway = new ArticlesGateway($db);\n6 $users_gateway = new UsersGateway($db);\n7\n8 $article_types = array(1, 2, 3, 4, 5);\n9 $failure = array();\n10 $now = time();\n11\n12 // sanitize and escape the user input\n13 $input = $_POST;\n14 $input['body'] = strip_tags($input['body']);\n15 $input['notes'] = strip_tags($input['notes']);\n16\n17 if (isset($input['ready']) && $input['ready'] == 'on') {\n18 $input['ready'] = 1;\n19 } else {\n20 $input['ready'] = 0;\n21 }\n22\n23 // nothing less than 0.01 credits per rating\n24 $input['credits_per_rating'] = round(\n25 $input['credits_per_rating'],\n26 2\n27 );\n28\n29 $credits = round(\n30 $input['credits_per_rating'] * $input['max_ratings'],\n31 2\n32 );\n33\n34 // updating an existing article?\n35 if ($input['id']) {\n36\n37 $row = $articles_gateway->selectOneByIdAndUserId($input['id'], $user_id);\n38\n39 if ($row) {\n40\n41 // don't charge unless the article is ready\n42 $decrement = false;\n43\n44 // is the article marked as ready?\n45 if ($input['ready'] == 1) {\n46\n47 // did they offer at least the minimum?\n48 if (\n49 $credits > 0\n50 && $input['credits_per_rating'] >= 0.01\n51 && is_numeric($credits)\n52 ) {\n53\n54 // was the article previously ready for review?\n55 // (note 'row' not 'input')\n56 if ($row['ready'] == 1) {\n57\n58 // only subtract (or add back) the difference to their\n59 // account, since they already paid something\n60 if (\n61 is_numeric($row['credits_per_rating'])\n62 && is_numeric($row['max_ratings'])\n63 ) {\n64 // user owes $credits, minus whatever they paid already\n65 $amount = $row['credits_per_rating']\n66 * $row['max_ratings']\n67 $credits = $credits - $amount;\n68 }\n69\n70 $decrement = true;\n71\n72 } else {\n73 // article not ready previously, so they hadn't\n74 // had credits deducted. if this is less than their\n75 // in their account now, they may proceed.\n76 $residual = $user->get('credits') - $credits;\n77 $decrement = true;\n78 }\n79\n80 } else {\n81 $residual = -1;\n82 $failure[] = \"Credit offering invalid.\";\n83 $decrement = false;\n84 }\n85\n86 } else {\n87\n88 // arbitrary positive value; they can proceed\n89 $residual = 1;\n90\n91 // if it was previously ready but is no longer, refund them\n92 if (\n93 is_numeric($row['credits_per_rating'])\n94 && is_numeric($row['max_ratings'])\n95 && ($row['ready'] == 1)\n96 ) {\n97 // subtract a negative value\n98 $amount = $row['credits_per_rating']\n99 * $row['max_ratings']\n100 $credits = -($amount);\n101 $decrement = true;\n102 }\n103 }\n104\n105 if ($residual >= 0) {\n106\n107 $input['ip'] = $_SERVER['REMOTE_ADDR'];\n108 $input['last_edited'] = $now;\n109\n110 if (! in_array(\n111 $input['article_type'],\n112 $article_types\n113 )) {\n114 $input['article_type'] = 1;\n115 }\n116\n117 $result = $articles_gateway->updateByIdAndUserId(\n118 $input['id'],\n119 $user_id,\n120 $input\n121 );\n122\n123 if ($result) {\n124 $article_id = $input['id'];\n125\n126 if ($decrement) {\n127 $users_gateway->decrementCredits($user_id, $credits);\n128 }\n129 } else {\n130 $failure[] = \"Could not update article.\";\n131 }\n132 } else {\n133 $failure[] = \"You do not have enough credits for ratings.\";\n134 }\n135 }\n136\n137 } else {\n138\n139 // creating a new article. do not decrement until specified.\n140 $decrement = false;\n141\n142 // if the article is ready, we need to subtract credits.\n143 if ($input['ready'] == 1) {\n144\n145 // if this is greater than or equal to 0, they may proceed.\n146 if (\n147 $credits > 0\n148 && $input['credits_per_rating']>=0.01\n149 && is_numeric($credits)\n150 ) {\n151 // minimum offering is 0.01\n152 $residual = $user->get('credits') - $credits;\n153 $decrement = true;\n154 } else {\n155 $residual = -1;\n156 $failure[] = \"Credit offering invalid.\";\n157 }\n158\n159 } else {\n160 // arbitrary positive value if they are not done with their article.\n161 // no deduction made yet.\n162 $residual = 1;\n163 }\n164\n165 // can user afford ratings on the new article?\n166 if ($residual >= 0) {\n167\n168 // yes, insert the article\n169 $input['last_edited'] = $now;\n170 $input['ip'] = $_SERVER['REMOTE_ADDR'];\n171 $article_id = $articles_gateway->insert($input);\n172\n173 if ($article_id) {\n174 if ($decrement) {\n175 // Charge them\n176 $users_gateway->decrementCredits($user_id, $credits);\n177 }\n178 } else {\n179 $failure[] = \"Could not update credits.\";\n180 }\n181\n182 $result = $articles_gateway->updateByIdAndUserId(\n183 $article_id,\n184 $user_id,\n185 $input\n186 );\n187\n188 if (! $result) {\n189 $failure[] = \"Could not update article.\";\n190 }\n191\n192 } else {\n193\n194 // cannot afford ratings on new article\n195 $failure[] = \"You do not have enough credits for ratings.\";\n196 }\n197 }\n198 ?>\n```", "```php\n**classes/Domain/Articles/ArticlesGateway.php**\n1 <?php\n2 namespace Domain\\Articles;\n3\n4 class ArticlesGateway\n5 {\n6 protected $db;\n7\n8 public function __construct(Database $db)\n9 {\n10 $this->db = $db;\n11 }\n12\n13 public function selectOneByIdAndUserId($id, $user_id)\n14 {\n15 $stm = \"SELECT *\n16 FROM articles\n17 WHERE user_id = :user_id\n18 AND id = :id\n19 LIMIT 1\";\n20\n21 return $this->db->query($stm, array(\n22 'id' => $id,\n23 'user_id' => $user_id,\n24 ))\n25 }\n26\n27 public function updateByIdAndUserId($id, $user_id, $input)\n28 {\n29 if (strlen($input['notes']) > 0) {\n30 $notes = \"notes = :notes\";\n31 } else {\n32 $notes = \"notes = NULL\";\n33 }\n34\n35 if (strlen($input['title']) > 0) {\n36 $title = \"title = :title\";\n37 } else {\n38 $title = \"title = NULL\";\n39 }\n40\n41 $input['id'] = $id;\n42 $input['user_id'] = $user_id;\n43\n44 $stm = \"UPDATE articles\n45 SET\n46 body = :body,\n47 $notes,\n48 $title,\n49 article_type = :article_type,\n50 ready = :ready,\n51 last_edited = :last_edited,\n52 ip = :ip,\n53 credits_per_rating = :credits_per_rating,\n54 max_ratings = :max_ratings\n55 WHERE user_id = :user_id\n56 AND id = :id\";\n57\n58 return $this->query($stm, $input);\n59 }\n60\n61 public function insert($input)\n62 {\n63 $stm = \"INSERT INTO articles (\n64 user_id,\n65 ip,\n66 last_edited,\n67 article_type\n68 ) VALUES (\n69 :user_id,\n70 :ip,\n71 :last_edited,\n72 :article_type\n73 )\";\n74 $this->db->query($stm, $input);\n75 return $this->db->lastInsertId();\n76 }\n77 }\n78 ?>\n```", "```php\n**classes/Domain/Users/UsersGateway.php**\n1 <?php\n2 namespace Domain\\Users;\n3\n4 class UsersGateway\n5 {\n6 protected $db;\n7\n8 public function __construct(Database $db)\n9 {\n10 $this->db = $db;\n11 }\n12\n13 public function decrementCredits($user_id, $credits)\n14 {\n15 $stm = \"UPDATE users\n16 SET credits = credits - :credits\n17 WHERE user_id = :user_id\";\n18 $this->db->query($stm, array(\n19 'user_id' => $user_id,\n20 'credits' => $credits,\n21 ));\n22 }\n23 }\n24 ?>\n```"]