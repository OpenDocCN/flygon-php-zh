["```php\n**php artisan migrate:make create_subscribers_table --table=subscribers \u2013-create**\n\n```", "```php\n<?php\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateSubscribersTable extends Migration {\n\n  /**\n   * Run the migrations.\n   *\n   * @return void\n   */\n  public function up()\n  {\n    Schema::create('subscribers', function(Blueprint $table)\n    {\n      $table->increments('id');\n      $table->string('email,100)->default('');\n      $table->timestamps();\n    });\n  }\n\n  /**\n  * Reverse the migrations.\n  *\n  * @return void\n  */\n  public function down()\n  {\n    Schema::drop('subscribers');\n  }\n}\n```", "```php\n**php artisan migrate**\n\n```", "```php\n<?php\nClass Subscribers Extends Eloquent{\n  protected $table = 'subscribers';\n  protected $fillable = array('email');\n}\n```", "```php\n    php artisan controller:make SubscribersController\n    ```", "```php\n    //We define a RESTful controller and all its via route//directly\n    Route::controller('subscribers', 'SubscribersController');\n    ```", "```php\n    //The method to show the form to add a new feed\n    public function getIndex() {\n      //We load a view directly and return it to be served\n      return View::make('subscribe_form');\n    }\n    ```", "```php\n    <!doctype html>\n    <!doctype html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Subscribe to Newsletter</title>\n        <style>\n          /*Some Little Minor CSS to tidy up the form*/\n          body{margin:0;font-family:Arial,Tahoma,sans-serif;text-align:center;padding-top:60px;color:#666;font-size:24px}\n          input{font-size:18px}\n          input[type=text]{width:300px}\n          div.content{padding-top:24px;font-weight:700;font-size:24px}\n          .success{color:#0b0}\n          .error{color:#b00}\n        </style>\n      </head>\n      <body>\n\n        {{-- Form Starts Here --}}\n        {{Form::open(array('url'=> URL::to('subscribers/submit'),'method' => 'post'))}}\n        <p>Simple Newsletter Subscription</p>\n        {{Form::text('email',null,array('placeholder'=>'Type your E-mail address here'))}}\n        {{Form::submit('Submit!')}}\n\n        {{Form::close()}}\n        {{-- Form Ends Here --}}\n\n        {{-- This div will show the ajax response --}}\n        <div class=\"content\"></div>\n        {{-- Because it'll be sent over AJAX, We add thejQuery source --}}\n        {{ HTML::script('http://code.jquery.com/jquery-1.8.3.min.js') }}\n        <script type=\"text/javascript\">\n          //Even though it's on footer, I just like to make//sure that DOM is ready\n          $(function(){\n            //We hide de the result div on start\n            $('div.content').hide();\n            //This part is more jQuery Related. In short, we //make an Ajax post request and get the response//back from server\n            $('input[type=\"submit\"]').click(function(e){\n              e.preventDefault();\n              $.post('/subscribers/submit', {\n                email: $('input[name=\"email\"]').val()\n              }, function($data){\n                if($data=='1') {\n                  $('div.content').hide().removeClass('success error').addClass('success').html('You\\'ve successfully subscribed to ournewsletter').fadeIn('fast');\n                } else {\n                  //This part echos our form validation errors\n                  $('div.content').hide().removeClass('success error').addClass('error').html('There has been an error occurred:<br /><br />'+$data).fadeIn('fast');\n                }\n              });\n            });\n            //We prevented to submit by pressing enter or anyother way\n            $('form').submit(function(e){\n              e.preventDefault();\n              $('input[type=\"submit\"]').click();\n            });\n          });\n        </script>\n      </body>\n    </html>\n    ```", "```php\n//This method is to process the form\npublic function postSubmit() {\n\n  //we check if it's really an AJAX request\n  if(Request::ajax()) {\n\n    $validation = Validator::make(Input::all(), array(\n      //email field should be required, should be in an email//format, and should be unique\n      'email' => 'required|email|unique:subscribers,email'\n    )\n    );\n\n    if($validation->fails()) {\n      return $validation->errors()->first();\n    } else {\n\n      $create = Subscribers::create(array(\n        'email' => Input::get('email')\n      ));\n\n      //If successful, we will be returning the '1' so the form//understands it's successful\n      //or if we encountered an unsuccessful creation attempt,return its info\n      return $create?'1':'We could not save your address to oursystem, please try again later';\n    }\n\n  } else {\n    return Redirect::to('subscribers');\n  }\n}\n```", "```php\n    \"require\": {\n         \"laravel/framework\": \"4.0.*\",\n         \"iron-io/iron_mq\": \"dev-master\"\n    },\n    ```", "```php\n    **php composer.phar update**\n\n    ```", "```php\n    **php artisan queue:subscribe laravel\n      http://your-site-url/queue/push**\n\n    ```", "```php\n    **Queue subscriber added: http://your-site-url/queue/push**\n\n    ```", "```php\n               //This code will trigger the push request\n               Route::get('queue/process',function(){\n                 Queue::push('SendEmail');\n                 return 'Queue Processed Successfully!';\n               });\n        ```", "```php\n        //When the push driver sends us back, we will have to\n          //marshal and process the queue.\n        Route::post('queue/push',function(){\n          return Queue::marshal();\n        });\n        ```", "```php\n               <!DOCTYPE html>\n               <html lang=\"en-US\">\n                 <head>\n                   <meta charset=\"utf-8\">\n                 </head>\n                 <body>\n                   <h2>Welcome to our newsletter</h2>\n                   <div>Hello {{$email}}, this is our test message fromour Awesome Laravel queue system.</div>\n                 /body>\n               </html>\n        ```", "```php\n               //When the queue is pushed and waiting to be marshalled, we should assign a Class to make the job done \n               Class SendEmail {\n\n                 public function fire($job,$data) {\n\n                   //We first get the all data from our subscribers//database\n                   $subscribers = Subscribers::all(); \n\n                   foreach ($subscribers as $each) {\n\n                     //Now we send an email to each subscriber\n                     Mail::send('emails.test',array('email'=>$each->email), function($message){\n\n                       $message->from('us@oursite.com', 'Our Name');\n\n                       $message->to($each->email);\n\n                     });\n                   }\n\n                   $job->delete();\n                 }\n               }\n        ```"]