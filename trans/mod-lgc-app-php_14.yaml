- en: Chapter 14. Decouple URL Paths from File Paths
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。将URL路径与文件路径解耦
- en: Even though we have a document root that separates our public and non-public
    resources, the users of our legacy application still browse directly to our page
    scripts. This means that our URLs are coupled directly to file system paths on
    the web server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们有一个文档根目录将我们的公共和非公共资源分开，但我们传统应用程序的用户仍然直接浏览我们的页面脚本。这意味着我们的URL直接与网络服务器上的文件系统路径耦合。
- en: Our next step is to decouple the paths so that we can route URLs independently
    to any target we want. This means putting in place a Front Controller to handle
    all incoming requests for our legacy application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是解耦路径，这样我们就可以独立地将URL路由到任何我们想要的目标。这意味着我们需要建立一个前端控制器来处理我们传统应用程序的所有传入请求。
- en: Coupled Paths
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 耦合路径
- en: As we noted in the previous chapter, our web server acts as a combined front
    controller, router, and dispatcher for our legacy application. The routes to the
    page scripts are still mapped directly onto the file system, using our `docroot/`
    directory as the base for all URL paths.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章中所指出的，我们的网络服务器充当了我们传统应用程序的前端控制器、路由器和调度器的综合功能。页面脚本的路由仍然直接映射到文件系统，使用我们的`docroot/`目录作为所有URL路径的基础。
- en: This presents us with some structural problems. For example, if we want to expose
    a new or different URL, we have to modify the location of the related page script
    in the file system. Similarly, we cannot change what page script responds to a
    particular URL. There is no way intercept the incoming request before it is routed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了一些结构性问题。例如，如果我们想公开一个新的或不同的URL，我们必须修改文件系统中相关页面脚本的位置。同样，我们无法更改哪个页面脚本响应特定的URL。在路由之前，没有办法拦截传入的请求。
- en: These and other problems, including the ability to complete future refactorings,
    mean that we must create a single entry point for all incoming requests. This
    entry point is called a front controller.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些以及其他问题，包括完成未来重构的能力，意味着我们必须为所有传入请求创建一个单一入口点。这个入口点被称为前端控制器。
- en: In our first implementation of a front controller for our legacy application,
    we will add a Router to convert the incoming URL path to a page script path. That
    will allow us to remove our page scripts from the document root, thereby decoupling
    the URLs from the file system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们对传统应用程序实现的第一个前端控制器中，我们将添加一个路由器来将传入的URL路径转换为页面脚本路径。这将允许我们将页面脚本从文档根目录中移除，从而将URL与文件系统解耦。
- en: The Decoupling Process
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解耦过程
- en: As with separating our public resources from our non-public ones, we will have
    to make a change to our web server configuration. Specifically, we will enable
    URL rewriting so we can point all incoming requests to a front controller. We
    need to coordinate this refactoring with our operations personnel so they can
    deploy the changes as easily as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与将我们的公共资源与非公共资源分开一样，我们将不得不对我们的网络服务器配置进行更改。具体来说，我们将启用URL重写，以便将所有传入请求指向一个前端控制器。我们需要与我们的运维人员协调这次重构，以便他们能够尽可能轻松地部署这些更改。
- en: 'The process, in general, is as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，这个过程如下：
- en: Coordinate with operations to communicate our intentions.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与运维协调以沟通我们的意图。
- en: Create a front controller script in the document root.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档根目录中创建一个前端控制器脚本。
- en: Create a `pages/` directory for our page scripts, along with a `page not found`
    page script and controller.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的页面脚本创建一个`pages/`目录，以及一个`页面未找到`页面脚本和控制器。
- en: Reconfigure the web server to enable URL rewriting.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新配置网络服务器以启用URL重写。
- en: Spot check the reconfigured web server to make sure the front controller and
    URL rewriting work properly.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 抽查重新配置的网络服务器，确保前端控制器和URL重写正常工作。
- en: Move all page scripts from `docroot/` to `pages/`, spot checking along the way.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有页面脚本从`docroot/`移动到`pages/`，并在此过程中进行抽查。
- en: Commit, push, and coordinate with operations for QA testing.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交、推送，并与运维协调进行QA测试。
- en: Coordinate with Operations
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与运维协调
- en: This is the single most important step in the process. We should never make
    changes that affect server configurations without discussing our intentions with
    the people in charge of the servers (i.e., our operations personnel).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是整个过程中最重要的一步。我们绝不能在没有与负责服务器的人员（即我们的运维人员）讨论我们意图的情况下进行影响服务器配置的更改。
- en: In this case, we need to tell our operations personnel that we have to enable
    URL rewriting. They will advise or instruct us on how to do this for our particular
    web server.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要告诉我们的运维人员，我们必须启用URL重写。他们将告知或指导我们如何为我们特定的网络服务器执行此操作。
- en: Alternatively, if we have no operations personnel and are in charge of our own
    servers, we will need to determine on our own how to enable URL rewriting. Proceed
    carefully in this case.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们没有运维人员并且负责我们自己的服务器，我们将需要自行确定如何启用URL重写。在这种情况下要小心进行。
- en: Add a Front Controller
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个前端控制器
- en: Once we have coordinated with our operations personnel, we will add a front
    controller script. We will also add a `page not found` script, controller, and
    view.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们与运维人员协调好，我们将添加一个前端控制器脚本。我们还将添加一个`页面未找到`脚本、控制器和视图。
- en: 'First, we create the front controller script in our document root. It uses
    a `Router` class to map the incoming URL to a page script. We call it front.php,
    or some other name that indicates it is a front controller:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的文档根目录中创建前端控制器脚本。它使用`Router`类将传入的URL映射到页面脚本。我们称之为front.php，或者其他表明它是前端控制器的名称：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We `require` the `Router` class file because the autoloader has not been registered
    yet. That will happen only when we execute the page script, which does not occur
    until the end of the front controller logic. We will remedy this situation in
    the next chapter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们`require`了`Router`类文件，因为自动加载程序尚未注册。这只会在执行页面脚本时发生，而这只会在前端控制器逻辑结束时发生。我们将在下一章中解决这个问题。
- en: Create a pages/ Directory
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个`pages/`目录
- en: The front controller references a `$pages_dir`. The idea is that we will move
    all our page scripts out of the document root and into this new directory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前端控制器引用了一个`$pages_dir`。我们的想法是将所有页面脚本从文档根目录移动到这个新目录中。
- en: First, we make a `pages/` directory at the top level of our legacy application,
    next to the `classes/`, `docroot/`, `views/`, etc. directories.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的旧应用程序的顶层创建一个`pages/`目录，与`classes/`、`docroot/`、`views/`等目录并列。
- en: 'We then create a `pages/not-found.php` script, along with a corresponding controller
    and view file. The front controller will call the `not-found.php` script when
    the `Router` is unable to match a URL path. The `not-found.php` script should
    set itself up like any other page script in our legacy application, then invoke
    its corresponding view file for the response:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个`pages/not-found.php`脚本，以及一个相应的控制器和视图文件。当`Router`无法匹配URL路径时，前端控制器将调用`not-found.php`脚本。`not-found.php`脚本应该像旧应用程序中的任何其他页面脚本一样设置自己，然后调用相应的视图文件以获取响应：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Reconfigure the Server
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新配置服务器
- en: Now that we have our front controller in place and a target location for our
    page scripts, we reconfigure our local development web server to enable URL rewriting.
    Our operations personnel should have given us some instructions on how to do this.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经放置了我们的前端控制器并为我们的页面脚本设置了目标位置，我们重新配置本地开发Web服务器以启用URL重写。我们的运维人员应该已经给了我们一些关于如何做这个的指示。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unfortunately, it is beyond the scope of this book to give full instructions
    on web server administration. Please review the documentation for your particular
    server for more information.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，本书范围之外无法提供有关Web服务器管理的完整说明。请查阅您特定服务器的文档以获取更多信息。
- en: In Apache, we would first enable the `mod_rewrite` module. In some Linux distributions,
    this is as easy as issuing `sudo a2enmod` rewrite. In others, we need to edit
    the `httpd.conf` file to enable it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apache中，我们首先启用`mod_rewrite`模块。在某些Linux发行版中，这很容易，只需发出`sudo a2enmod` rewrite命令。在其他情况下，我们需要编辑`httpd.conf`文件以启用它。
- en: 'Once URL rewriting is enabled, we need to instruct the web server to point
    all incoming requests to our front controller. In Apache, we might add a `docroot/.htaccess`
    file to our legacy application. Alternatively, we may modify one of the Apache
    configuration files for our local development server. The rewriting logic would
    look like the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用了URL重写，我们需要指示Web服务器将所有传入的请求指向我们的前端控制器。在Apache中，我们可以向我们的旧应用程序添加一个`docroot/.htaccess`文件。或者，我们可以修改本地开发服务器的Apache配置文件之一。重写逻辑如下所示：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For example, if the incoming request is for `/foo/bar/baz.php`, the web server
    will invoke the `front.php` script instead. This will be the case for every request.
    The various superglobals values will remain unchanged, so `$_SERVER['REQUEST_URI']`
    will still indicate `/foo/bar/baz.php`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果传入请求是`/foo/bar/baz.php`，Web服务器将调用`front.php`脚本。这对于每个请求都是如此。各种超全局变量的值将保持不变，因此`$_SERVER['REQUEST_URI']`仍将指示`/foo/bar/baz.php`。
- en: Finally, after we have enabled URL rewriting, we restart or reload the web server
    to make our changes take effect.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在启用了URL重写之后，我们重新启动或重新加载Web服务器以使我们的更改生效。
- en: Spot check
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽查
- en: Now that we have enabled URL rewriting to point all requests to our new front
    controller, we should browse to our legacy application, using a URL path that
    we know does not exist. The front controller should show us the output from our
    `not-found.php` page script. This indicates that our changes are working properly.
    If not, we need to review and revise our changes up to this point and try to fix
    whatever went wrong.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启用了URL重写以将所有请求指向我们的新前端控制器，我们应该浏览我们的旧应用程序，使用我们知道不存在的URL路径。前端控制器应该显示我们的`not-found.php`页面脚本的输出。这表明我们的更改正常工作。如果不是，我们需要回顾和修改到目前为止的更改，并尝试修复任何出错的地方。
- en: Move Page scripts
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动页面脚本
- en: Once we are sure that the URL rewriting and front controller are operating properly,
    we can begin to move all of our pages scripts out of `docroot/` and into our new
    `pages/` directory. Note that we are moving only page scripts. We should leave
    all the other resources in `docroot/`, including the `front.php` front controller.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定URL重写和前端控制器正常运行，我们可以开始将所有页面脚本从`docroot/`移动到我们的新`pages/`目录中。请注意，我们只移动页面脚本。我们应该将所有其他资源留在`docroot/`中，包括`front.php`前端控制器。
- en: 'For example, if we start out with this structure:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们开始时有这样的结构：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We should end up with this structure instead:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该最终得到这样的结构：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have moved only the page scripts. Images, CSS files, Javascript files, and
    the front controller all remain in `docroot/`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只移动了页面脚本。图像、CSS文件、Javascript文件和前端控制器都保留在`docroot/`中。
- en: Because we are moving files around, we may need to change our include-path values
    to point to the new relative directory locations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在移动文件，我们可能需要更改我们的包含路径值，以指向新的相对目录位置。
- en: As we move each file or directory from `docroot/` to `pages/`, we should spot
    check our changes to make sure the legacy application continues to work correctly.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将每个文件或目录从`docroot/`移动到`pages/`时，我们应该抽查我们的更改，以确保旧应用程序继续正常工作。
- en: Due to the rewriting rules described earlier, our page scripts should continue
    to work whether they are in `docroot/` or `pages/`. We want to make sure to move
    all page scripts to `pages/` before we continue.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于之前描述的重写规则，我们的页面脚本应该继续工作，无论它们是在`docroot/`还是`pages/`中。我们要确保在继续之前将所有页面脚本移动到`pages/`中。
- en: Commit, Push, Coordinate
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交、推送、协调
- en: When we have moved all of our page scripts to the new `pages/` directory, and
    our legacy application works properly in this new structure, we commit all of
    our changes and push them to the common repository.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将所有页面脚本移动到新的`pages/`目录，并且我们的旧应用程序在这个新结构中正常工作时，我们提交所有更改并将它们推送到共同的存储库。
- en: At this point, we would normally notify QA of our changes for them to test.
    However, because we have made a change to the server configuration, we need to
    coordinate the QA testing with our operations personnel. Operations will probably
    need to deploy the new configuration to the QA servers. Only then will QA be able
    to effectively check our work.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们通常会通知质量保证部门我们的更改，让他们进行测试。然而，由于我们对服务器配置进行了更改，我们需要与运营人员协调质量保证测试。运营部门可能需要部署新配置到质量保证服务器上。只有这样，质量保证部门才能有效地检查我们的工作。
- en: Common Questions
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: Did we really Decouple the Paths?
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们真的解耦了路径吗？
- en: Astute observers will note that our *Router* still uses the incoming URL path
    to find the page scripts. The only difference between this and the original setup
    is that the path is mapped onto the `pages/` directory instead of the `docroot/`
    directory. Have we actually decoupled the URLs from the file system after all?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 敏锐的观察者会注意到我们的*Router*仍然使用传入的URL路径来查找页面脚本。这与原始设置之间的唯一区别是，路径被映射到`pages/`目录而不是`docroot/`目录。毕竟，我们真的将URL与文件系统解耦了吗？
- en: Yes, we have achieved our decoupling goal. This is because we now have an interception
    point between the URL path and the page script that gets executed. Using the *Router*,
    we could create an array of routes where URL paths are the keys and file paths
    are values. That mapping array would allow us to route the incoming URL path to
    any page script we like.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们已经实现了我们的解耦目标。这是因为我们现在在URL路径和执行的页面脚本之间有一个拦截点。使用*Router*，我们可以创建一个路由数组，其中URL路径是键，文件路径是值。该映射数组将允许我们将传入的URL路径路由到任何我们喜欢的页面脚本。
- en: 'For example, if we want to map a URL path like `/foo/bar.php` to a page script
    like `/baz/dib.php`, we could do so via the `setRoutes()` method on the *Router*:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想将URL路径`/foo/bar.php`映射到页面脚本`/baz/dib.php`，我们可以通过*Router*上的`setRoutes()`方法来实现：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then when we `match()` the incoming URL path of `/foo/bar.php` against the *Router*,
    our returned route will be `/baz/dib.php`. We can then execute that route as the
    page script for the incoming URL. We will use a variation on this technique in
    the next chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们将传入的URL路径`/foo/bar.php`与*Router*进行`match()`时，我们返回的路由将是`/baz/dib.php`。然后我们可以执行该路由作为传入URL的页面脚本。我们将在下一章节中使用这种技术的变体。
- en: Review and next steps
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: With the decoupling of our URLs from our page scripts, we are nearly finished
    with our modernization work. Only two refactorings remain. First, we will move
    repeated logic in our page scripts up to the front controller. Then we will remove
    the page scripts entirely and replace them with a dependency injection container.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将URL与页面脚本解耦，我们几乎已经完成了我们的现代化工作。只剩下两个重构。首先，我们将重复的逻辑从页面脚本移到前端控制器。然后我们将完全删除页面脚本，并用依赖注入容器替换它们。
