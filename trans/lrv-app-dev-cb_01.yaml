- en: Chapter 1. Setting Up and Installing Laravel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 设置和安装Laravel
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Installing Laravel as a git submodule
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Laravel安装为git子模块
- en: Setting up a virtual host and development environment in Apache
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Apache中设置虚拟主机和开发环境
- en: Creating "clean" URLs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建“干净”的URL
- en: Configuring Laravel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Laravel
- en: Using Laravel with Sublime Text 2
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sublime Text 2与Laravel
- en: Setting up your IDE to autocomplete Laravel's namespaces
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置IDE以自动完成Laravel的命名空间
- en: Using Autoloader to map a class name to its file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动加载程序将类名映射到其文件
- en: Creating advanced Autoloaders with namespaces and directories
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名空间和目录创建高级自动加载程序
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we'll learn how to get Laravel up-and-running with ease and
    make sure it's simple to update when any core changes are made. We'll also get
    our development and coding environment set up to be very efficient so we can focus
    on writing great code and not have to worry about issues not related to our applications.
    Finally, we'll look at some ways to get Laravel to automatically do some work
    for us so we'll be able to extend our application in very little time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何轻松地启动和运行Laravel，并确保在进行任何核心更改时更新它变得简单。我们还将设置我们的开发和编码环境，以便非常高效，这样我们就可以专注于编写优秀的代码，而不必担心与我们的应用程序无关的问题。最后，我们将看一些方法，让Laravel自动为我们做一些工作，这样我们就能在很短的时间内扩展我们的应用程序。
- en: Installing Laravel as a git submodule
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Laravel安装为git子模块
- en: There may be a time when we want to have our Laravel installation separate from
    the rest of our public files. In this case, installing Laravel as a git submodule
    would be a solution. This will allow us to update our Laravel files through git
    without touching our application code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有一段时间，我们希望将我们的Laravel安装与我们的公共文件的其余部分分开。在这种情况下，将Laravel安装为git子模块将是一个解决方案。这将允许我们通过git更新我们的Laravel文件，而不影响我们的应用程序代码。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started, we should have our development server running as well as have
    git installed. In the server's web directory, create a `myapp` directory to hold
    our files. Installation will all be done in the command line.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们应该让我们的开发服务器运行，并安装git。在服务器的web目录中，创建一个`myapp`目录来保存我们的文件。安装将在命令行中完成。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: 'In your terminal or command line, navigate to the root of `myapp`. The first
    step is to initialize git and download our project files:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端或命令行中，导航到`myapp`的根目录。第一步是初始化git并下载我们的项目文件：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Since all we need is the `public` directory, move to `/laravel` and delete
    everything else:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们只需要`public`目录，所以移动到`/laravel`并删除其他所有内容：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, move back to the root directory, create a `framework` directory, and
    add Laravel as a submodule:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，回到根目录，创建一个`framework`目录，并将Laravel添加为子模块：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we need to run Composer to install the framework:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要运行Composer来安装框架：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: More information about installing Composer can be found at [http://getcomposer.org/doc/00-intro.md](http://getcomposer.org/doc/00-intro.md).
    The rest of the book will assume we're using `composer.phar`, but we could also
    add it globally and simply call it by typing `composer`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关安装Composer的更多信息，请访问[http://getcomposer.org/doc/00-intro.md](http://getcomposer.org/doc/00-intro.md)。本书的其余部分将假定我们正在使用`composer.phar`，但我们也可以将其全局添加，并通过键入`composer`来简单调用它。
- en: 'Now, open `/laravel/public/index.php` and find the following lines:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`/laravel/public/index.php`并找到以下行：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Change the preceding lines to:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前面的行改为：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For many, simply running `git clone` would be enough to get their project going.
    However, since we want to have our framework act as a submodule, we need to separate
    those files from our project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对许多人来说，简单运行`git clone`就足以让他们的项目运行起来。然而，由于我们希望我们的框架作为一个子模块，我们需要将这些文件与我们的项目分开。
- en: First, we download the files from GitHub, and since we don't need any of the
    framework files, we can delete everything but our public folder. Then, we create
    our submodule in the `framework` directory and download everything there. When
    that's complete, we run `composer install` to get all our vendor packages installed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从GitHub下载文件，由于我们不需要任何框架文件，我们可以删除除了我们的公共文件夹之外的所有内容。然后，在`framework`目录中创建我们的子模块，并下载所有内容。完成后，我们运行`composer
    install`来安装所有供应商包。
- en: To get the framework connected to our application, we modify `/laravel/public/index.php`
    and change the `require` paths to our framework directory. That will let our application
    know exactly where the framework files are located.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将框架连接到我们的应用程序，我们修改`/laravel/public/index.php`并将`require`路径更改为我们的框架目录。这将让我们的应用程序准确地知道框架文件的位置。
- en: There's more...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One alternative solution is to move the `public` directory to our server's root.
    Then, while updating our `index.php` file, we'll use `__DIR__ . '/../framework/laravel/bootstrap'`
    to include everything correctly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个替代方案是将`public`目录移动到我们服务器的根目录。然后，在更新我们的`index.php`文件时，我们将使用`__DIR__ . '/../framework/laravel/bootstrap'`来正确包含所有内容。
- en: Setting up a virtual host and development environment in Apache
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Apache中设置虚拟主机和开发环境
- en: When developing our Laravel app, we'll need a web server to run everything.
    In PHP 5.4 and up, we can use the built-in web server, but if we need some more
    functionality, we'll need a full web stack. In this recipe, we'll be using an
    Apache server on Windows, but any OS with Apache will be similar.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发我们的Laravel应用程序时，我们需要一个web服务器来运行所有内容。在PHP 5.4及更高版本中，我们可以使用内置的web服务器，但如果我们需要一些更多的功能，我们将需要一个完整的web堆栈。在这个步骤中，我们将在Windows上使用Apache服务器，但任何带有Apache的操作系统都将类似。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires a recent version of WAMP server, available at [http://wampserver.com](http://wampserver.com),
    though the basic principle applies to any Apache configuration on Windows.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤需要一个最新版本的WAMP服务器，可在[http://wampserver.com](http://wampserver.com)上找到，尽管基本原则适用于Windows上的任何Apache配置。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: Open the WAMP Apache `httpd.conf` file. It is often located in `C:/wamp/bin/apache/Apach2.#.#/conf`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开WAMP Apache `httpd.conf`文件。它通常位于`C:/wamp/bin/apache/Apach2.#.#/conf`。
- en: Locate the line `#Include conf/extra/httpd-vhosts.conf` and remove the first
    `#`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`#Include conf/extra/httpd-vhosts.conf`一行，并删除第一个`#`。
- en: 'Move to the `extra` directory, open the `httpd-vhosts.conf` file, and add the
    following code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`extra`目录，打开`httpd-vhosts.conf`文件，并添加以下代码：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Restart the Apache service.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Apache服务。
- en: Open the Windows hosts file, often in `C:/Windows/System32/drivers/etc`, and
    open the file `hosts` in a text editor.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Windows主机文件，通常在`C:/Windows/System32/drivers/etc`，并在文本编辑器中打开`hosts`文件。
- en: At the bottom of the file, add the line `127.0.0.1 myapp.dev`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件底部添加一行`127.0.0.1 myapp.dev`。
- en: How it works...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, in the Apache config file `httpd.conf`, we uncomment the line to allow
    the file to include the `vhosts` configuration files. You can include the code
    directly in the `httpd.conf` file, but this method keeps things more organized.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在Apache配置文件`httpd.conf`中，我们取消注释允许文件包含`vhosts`配置文件的行。您可以直接在`httpd.conf`文件中包含代码，但这种方法可以使事情更有条理。
- en: In the `httpd-vhosts.conf` file, we add our VirtualHost code. `DocumentRoot`
    tells the server where the files are located and `ServerName` is the base URL
    that the server will look for. Since we only want to use this for our local development,
    we make sure to only allow access to the localhost with the IP `127.0.0.1`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在`httpd-vhosts.conf`文件中，我们添加我们的VirtualHost代码。`DocumentRoot`告诉服务器文件的位置，`ServerName`是服务器将查找的基本URL。由于我们只想在本地开发中使用这个，我们确保只允许通过IP`127.0.0.1`访问本地主机。
- en: In the `hosts` file, we need to tell Windows which IP to use for the `myapp.dev`
    URL. After restarting Apache and our browser, we should be able to go to `http://myapp.dev`
    and view our application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在`hosts`文件中，我们需要告诉Windows为`myapp.dev` URL使用哪个IP。重新启动Apache和我们的浏览器后，我们应该能够转到`http://myapp.dev`并查看我们的应用程序。
- en: There's more...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While this recipe is specific to Windows and WAMP, the same idea can be applied
    to most Apache installations. The only difference will be the location of the
    `httpd.conf` file (in Linux Ubuntu, it's in `/etc/apache2`) and the path to the
    `public` directory for DocumentRoot (in Ubuntu, it might be something like `/var/www/myapp/public`).
    The `hosts` file for Linux and Mac OS X will be located in `/etc/hosts`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个配方特定于Windows和WAMP，但同样的想法可以应用于大多数Apache安装。唯一的区别将是`httpd.conf`文件的位置（在Linux
    Ubuntu中，它在`/etc/apache2`中）和DocumentRoot的`public`目录的路径（在Ubuntu中，它可能类似于`/var/www/myapp/public`）。Linux和Mac
    OS X的`hosts`文件将位于`/etc/hosts`中。
- en: Creating "clean" URLs
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建“干净”的URL
- en: When installing Laravel, the default URL we will use is `http://{your-server}/public`.
    If we decide to remove `/public`, we can use Apache's `mod_rewrite` to change
    the URL.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Laravel时，我们将使用的默认URL是`http://{your-server}/public`。如果我们决定删除`/public`，我们可以使用Apache的`mod_rewrite`来更改URL。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we just need a fresh installation of Laravel and everything
    running on a properly configured Apache server.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们只需要一个新安装的Laravel和一切都在正确配置的Apache服务器上运行。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，请按照以下步骤操作：
- en: 'In our app''s root directory, add a `.htaccess` file and use this code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们应用程序的根目录中，添加一个`.htaccess`文件并使用此代码：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Go to `http://{your-server}` and view your application.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://{your-server}`并查看您的应用程序。
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This simple bit of code will take anything we add in the URL and direct it to
    the `public` directory. That way, we don't need to manually type in `/public`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这段简单的代码将接受我们在URL中添加的任何内容并将其指向`public`目录。这样，我们就不需要手动输入`/public`。
- en: There's more...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If we decide to move this application to a production environment, this is not
    the best way to accomplish the task. In that case, we would just move our files
    outside the web root and make `/public` our root directory.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定将此应用程序移至生产环境，这不是完成任务的最佳方式。在那种情况下，我们只需将文件移出Web根目录，并将`/public`作为我们的根目录。
- en: Configuring Laravel
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Laravel
- en: After installing Laravel, it's pretty much ready to go without much need for
    configuration. However, there are a few settings we want to make sure to update.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Laravel后，它几乎可以立即使用，几乎不需要配置。但是，有一些设置我们要确保更新。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a regular installation of Laravel.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个常规的Laravel安装。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，请按照以下步骤操作：
- en: 'Open `/app/config/app.php` and update these lines:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`/app/config/app.php`并更新这些行：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open `app/config/database.php` and choose your preferred database:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/config/database.php`并选择您首选的数据库：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the command line, go to the root of the app and make sure the `storage`
    folder is writable:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，转到应用程序的根目录，并确保`storage`文件夹是可写的：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Most of the configuration will happen in the `/app/config/app.php` file. While
    setting the URL isn't required, and Laravel does a great job figuring it out without
    setting it, it's always good to remove any work from the framework that we can.
    Next, we set our location. If we choose to provide **localization** in our app,
    this setting will be our default. Then, we set our application key, since it's
    best to not keep the default.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分配置将在`/app/config/app.php`文件中进行。虽然设置URL并不是必需的，而且Laravel在没有设置的情况下也能很好地解决这个问题，但最好是尽量减少框架的工作量。接下来，我们设置我们的位置。如果我们选择在应用程序中提供**本地化**，这个设置将是我们的默认设置。然后，我们设置我们的应用程序密钥，因为最好不要保留默认设置。
- en: 'Next, we set which database driver we''ll be using. Laravel comes with four
    drivers out of the box: mysql, sqlite, sqlsrv (MS SQL Server), and pgsql (Postgres).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置将使用的数据库驱动程序。Laravel默认提供四种驱动程序：mysql、sqlite、sqlsrv（MS SQL Server）和pgsql（Postgres）。
- en: Finally, our `app/storage` directory will be used for keeping any temporary
    data, such as sessions or cache, if we choose. To allow this, we need to make
    sure the app can write to the directory.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的`app/storage`目录将用于保存任何临时数据，例如会话或缓存，如果我们选择的话。为了允许这一点，我们需要确保应用程序可以写入该目录。
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'For an easy way to create a secure application key, remove the default key
    and leave it empty. Then, in your command line, navigate to your application root
    directory and type:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要轻松创建一个安全的应用程序密钥，删除默认密钥并将其留空。然后，在命令行中，转到应用程序根目录并键入：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That will create a unique and secure key and automatically save it in your configuration
    file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个独特且安全的密钥，并自动保存在您的配置文件中。
- en: Using Laravel with Sublime Text 2
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sublime Text 2与Laravel
- en: One of the most popular text editors used for coding is Sublime Text. Sublime
    has many features that make coding fun, and with plugins, we can add in Laravel-specific
    features to help with our app.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 用于编码的最受欢迎的文本编辑器之一是Sublime Text。Sublime具有许多功能，使编码变得有趣，通过插件，我们可以添加特定于Laravel的功能来帮助我们的应用程序。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Sublime Text 2 is a popular code editor that is very extensible and makes writing
    code effortless. An evaluation version can be downloaded from [http://www.sublimetext.com/2](http://www.sublimetext.com/2).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text 2是一款非常可扩展的流行代码编辑器，使编写代码变得轻松。可以从[http://www.sublimetext.com/2](http://www.sublimetext.com/2)下载评估版本。
- en: We also need to have the Package Control package installed and enabled in Sublime,
    and that can be found at [http://wbond.net/sublime_packages/package_control/installation](http://wbond.net/sublime_packages/package_control/installation).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在Sublime中安装并启用Package Control包，可以在[http://wbond.net/sublime_packages/package_control/installation](http://wbond.net/sublime_packages/package_control/installation)找到。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'For this recipe, follow these steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行操作：
- en: In your menu bar, go to **Preferences** then **Package Control**:![How to do
    it...](graphics/2827OS_01_01.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单栏中，转到**首选项**然后**包控制**：![操作步骤...](graphics/2827OS_01_01.jpg)
- en: Choose **Install Package**:![How to do it...](graphics/2827OS_01_02.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**安装包**：![操作步骤...](graphics/2827OS_01_02.jpg)
- en: Search for `laravel` to see the listing. Choose **Laravel 4 Snippets** and let
    it install. After it's complete, choose **Laravel-Blade** and install it.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`laravel`以查看列表。选择**Laravel 4 Snippets**并让其安装。安装完成后，选择**Laravel-Blade**并安装它。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The Laravel snippets in Sublime Text 2 greatly simplify writing common code,
    and it includes pretty much everything we'll need for application development.
    For example, when creating a route, simply start typing `Route` and a list will
    pop up allowing us to choose which route we want, which then automatically completes
    the rest of the code we need.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text 2中的Laravel片段大大简化了编写常见代码，并且几乎包括了我们在应用程序开发中所需的一切。例如，当创建路由时，只需开始输入`Route`，然后会弹出一个列表，允许我们选择我们想要的路由，然后自动完成我们需要的其余代码。
- en: '![How it works...](graphics/2827OS_01_03.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](graphics/2827OS_01_03.jpg)'
- en: There's more...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Installing the Laravel-Blade package is helpful if we use the Blade template
    system that comes with Laravel. It recognizes Blade code in the files and will
    automatically highlight the syntax.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Laravel-Blade包对于使用Laravel自带的Blade模板系统非常有帮助。它可以识别文件中的Blade代码，并自动突出显示语法。
- en: Setting up your IDE to autocomplete Laravel's namespaces
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置IDE以自动完成Laravel的命名空间
- en: Most **IDEs** (**Integrated Development Environment**) have some form of code
    completion as part of the program. To get Laravel's namespaces to autocomplete,
    we may need to help it recognize what the namespaces are.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数**IDEs**（集成开发环境）在程序的一部分中具有某种形式的代码完成。为了使Laravel的命名空间自动完成，我们可能需要帮助它识别命名空间是什么。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll be adding namespaces to the NetBeans IDE, but the process
    will be similar with others.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个操作，我们将在NetBeans IDE中添加命名空间，但是在其他IDE中的过程类似。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Follow these steps to complete this recipe:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成此操作：
- en: 'Download the following pre-made file that lists the Laravel namespaces: [https://gist.github.com/barryvdh/5227822](https://gist.github.com/barryvdh/5227822).'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载列出Laravel命名空间的预制文件：[https://gist.github.com/barryvdh/5227822](https://gist.github.com/barryvdh/5227822)。
- en: Create a folder anywhere on your computer to hold this file. For our purposes,
    we'll add the file to `C:/ide_helper/ide_helper.php`:![How to do it...](graphics/2827OS_01_04.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在计算机的任何位置创建一个文件夹来保存此文件。为了我们的目的，我们将文件添加到`C:/ide_helper/ide_helper.php`：![操作步骤...](graphics/2827OS_01_04.jpg)
- en: After creating a project with the Laravel framework, navigate to **File** |
    **Project Properties** | **PHP Include Path**:![How to do it...](graphics/2827OS_01_05.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用Laravel框架创建项目后，转到**文件** | **项目属性** | **PHP包含路径**：![操作步骤...](graphics/2827OS_01_05.jpg)
- en: Click on **Add Folder…** and then add the folder at `C:/ide_helper`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**添加文件夹...**，然后添加`C:/ide_helper`文件夹。
- en: Now when we start typing the code, the IDE will automatically suggest code to
    complete:![How to do it...](graphics/2827OS_01_06.jpg)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当我们开始输入代码时，IDE将自动建议完成的代码：![操作步骤...](graphics/2827OS_01_06.jpg)
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Some IDEs need help understanding the syntax of a framework. To get NetBeans
    to understand, we download a list of all the Laravel classes and options. Then,
    when we add it to the Include Path, NetBeans will automatically check the file
    and show us the autocomplete options.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一些IDE需要帮助理解框架的语法。为了让NetBeans理解，我们下载了所有Laravel类和选项的列表。然后，当我们将其添加到包含路径时，NetBeans将自动检查文件并显示自动完成选项。
- en: There's more...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can have the documents downloaded and updated automatically using Composer.
    For installation instructions, visit [https://github.com/barryvdh/laravel-ide-helper](https://github.com/barryvdh/laravel-ide-helper).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Composer自动下载和更新文档。有关安装说明，请访问[https://github.com/barryvdh/laravel-ide-helper](https://github.com/barryvdh/laravel-ide-helper)。
- en: Using Autoloader to map a class name to its file
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Autoloader将类名映射到其文件
- en: Using Laravel's ClassLoader, we can easily include any of our custom class libraries
    in our code and have them readily available.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Laravel的ClassLoader，我们可以轻松地在我们的代码中包含任何自定义类库，并使它们随时可用。
- en: Getting ready
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to set up a standard Laravel installation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个操作，我们需要设置一个标准的Laravel安装。
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此操作，请按照以下步骤进行操作：
- en: In the Laravel `/app` directory, create a new directory named `custom`, which
    will hold our custom classes.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Laravel的`/app`目录中，创建一个名为`custom`的新目录，其中将保存我们的自定义类。
- en: 'In the `custom` directory, create a file named `MyShapes.php` and add this
    simple code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`custom`目录中，创建一个名为`MyShapes.php`的文件，并添加以下简单代码：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `/app/start` directory, open `global.php` and update `ClassLoader` so
    it looks like this:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/app/start`目录中，打开`global.php`并更新`ClassLoader`，使其看起来像这样：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can use that class in any part of our application. For example, if we
    create a route:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以在应用程序的任何部分使用该类。例如，如果我们创建一个路由：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Most of the time, we will use Composer to add packages and libraries to our
    app. However, there may be libraries that aren't available through Composer or
    custom libraries that we want to keep separate. To accomplish this, we need to
    dedicate a spot to hold our class libraries; in this case, we create a directory
    named `custom` and put it in our `app` directory.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，我们会使用Composer向我们的应用程序添加包和库。但是，可能有一些库无法通过Composer获得，或者我们想要保持独立的自定义库。为了实现这一点，我们需要专门的位置来保存我们的类库；在这种情况下，我们创建一个名为`custom`的目录，并将其放在我们的`app`目录中。
- en: Then we add our class files, making sure the class names and filenames are the
    same. This could either be classes we create ourselves or maybe even a legacy
    class that we need to use.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加我们的类文件，确保类名和文件名相同。这既可以是我们自己创建的类，也可以是我们需要使用的传统类。
- en: Finally, we add the directory to Laravel's ClassLoader. When that's complete,
    we'll be able to use those classes anywhere in our application.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将目录添加到Laravel的ClassLoader中。完成后，我们将能够在应用程序的任何地方使用这些类。
- en: See also
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating advanced Autoloaders with namespaces and directories* recipe
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名空间和目录创建高级自动加载器
- en: Creating advanced Autoloaders with namespaces and directories
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命名空间和目录创建高级自动加载器
- en: If we want to be sure that our custom classes don't conflict with any other
    class in our app, we will need to add them to a namespace. Using the PSR-0 standard
    and Composer, we can easily autoload these classes into Laravel.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想确保我们的自定义类不会与应用程序中的任何其他类发生冲突，我们需要将它们添加到命名空间中。使用PSR-0标准和Composer，我们可以轻松地将这些类自动加载到Laravel中。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to set up a standard Laravel installation.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要设置一个标准的Laravel安装。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，请按照以下步骤进行：
- en: Inside the `/app` directory, create a new directory named `custom`, and inside
    of `custom`, create a directory named `Custom`, and in `Custom`, create a directory
    named `Shapes`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/app`目录中，创建一个名为`custom`的新目录，并在`custom`中创建一个名为`Custom`的目录，在`Custom`中创建一个名为`Shapes`的目录。
- en: 'Inside the `/app/custom/Custom/Shapes` directory, create a file named `MyShapes.php`
    and add this code:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/app/custom/Custom/Shapes`目录中，创建一个名为`MyShapes.php`的文件，并添加以下代码：
- en: '[PRE15]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the root of the application, open the `composer.json` file and locate the
    `autoload` section. Update it so it looks like this:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的根目录中，打开`composer.json`文件并找到`autoload`部分。更新它使其看起来像这样：
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the command line and run `dump-autoload` on Composer:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中运行`composer`上的`dump-autoload`：
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we can call that class by using its namespace. For example, if we create
    a route:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以通过其命名空间调用该类。例如，如果我们创建一个路由：
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Namespaces are a powerful addition to PHP, and they allow our classes to be
    used without us having to worry about their class names interfering with other
    class names. By autoloading namespaces in Laravel, we could create a complex group
    of classes and never have to worry about class names conflicting with other namespaces.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间是PHP的一个强大补充，它允许我们使用类而不必担心它们的类名与其他类名发生冲突。通过在Laravel中自动加载命名空间，我们可以创建一组复杂的类，而不必担心类名与其他命名空间发生冲突。
- en: For our purposes, we're loading the custom class through composer, and the PSR-0
    standard of autoloading.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们的目的，我们通过composer加载自定义类，并使用PSR-0标准进行自动加载。
- en: There's more...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To further extend the use of our namespaced class, we could use the **IoC**
    to bind it to our app. More information can be found in the Laravel documentation
    at [http://laravel.com/docs/ioc](http://laravel.com/docs/ioc).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步扩展我们的命名空间类的使用，我们可以使用**IoC**将其绑定到我们的应用程序。更多信息可以在Laravel文档中找到[http://laravel.com/docs/ioc](http://laravel.com/docs/ioc)。
- en: See also
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using Autoloader to map a class name to its file* recipe
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自动加载器将类名映射到其文件的配方
