["```php\nclass PostController extends Post\n{\n    public function __construct(Post $post){\n        //do something with $post\n    }\n}\n```", "```php\n$ourCustomerPost = new OurCustomPost();\n$this->app->instance(\"\\Post\", $ourCustomerPost);\n```", "```php\n$postController = $this->app->make('PostController');\n```", "```php\ncomposer create-project --prefer-dist laravel/lumen blog\n```", "```php\nphp -S localhost:8000 -t public\n```", "```php\n//$app->withFacades();   //$app->withEloquent();\n```", "```php\nphp artisan make:migration create_users_table\n```", "```php\nCreated Migration: 2017_06_23_180043_create_users_table\n```", "```php\n<?php   use Illuminate\\Database\\Migrations\\Migration; use Illuminate\\Database\\Schema\\Blueprint;   class CreateUsersTable extends Migration {    /**\n * Run the migrations. * * @return void\n */  public function up()\n { Schema::create('users', function(Blueprint $table)\n {  $table->integer('id', true);\n  $table->string('name', 100);\n  $table->string('email', 50)->unique('email_unique');\n  $table->string('password', 100);\n $table->timestamps();  }); }      /**\n * Reverse the migrations. * * @return void\n */  public function down()\n { Schema::drop('users');\n }   } \n```", "```php\nphp artisan migrate\n```", "```php\n<?php   use Illuminate\\Database\\Migrations\\Migration; use Illuminate\\Database\\Schema\\Blueprint;   class CreatePostsTable extends Migration {    /**\n * Run the migrations. * * @return void\n */  public function up()\n { Schema::create('posts', function(Blueprint $table)\n {  $table->integer('id', true);\n  $table->string('title', 100);\n  $table->enum('status', array('draft','published'))->default('draft');\n  $table->text('content', 65535);\n  $table->integer('user_id')->index('user_id_foreign');\n\n         $table->timestamps();\n }); }      /**\n * Reverse the migrations. * * @return void\n */  public function down()\n { Schema::drop('posts');\n }   } \n```", "```php\n<?php   use Illuminate\\Database\\Migrations\\Migration; use Illuminate\\Database\\Schema\\Blueprint;   class CreateCommentsTable extends Migration {    /**\n * Run the migrations. * * @return void\n */  public function up()\n { Schema::create('comments', function(Blueprint $table)\n {  $table->integer('id', true);\n  $table->string('comment', 250);\n  $table->integer('post_id')->index('post_id');\n  $table->integer('user_id')->index('user_id');\n\n         $table->timestamps();\n }); }      /**\n * Reverse the migrations. * * @return void\n */  public function down()\n { Schema::drop('comments');\n }   } \n```", "```php\nphp artisan migrate\n```", "```php\nphp artisan make:migration add_foreign_keys_to_comments_table\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\n\nclass AddForeignKeysToCommentsTable extends Migration {\n\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('comments', function(Blueprint $table)\n        {\n            $table->foreign('post_id', 'post_id_comment_foreign')->references('id')->on('posts')->onUpdate('RESTRICT')->onDelete('RESTRICT');\n            $table->foreign('post_id', 'post_id_foreign')->references('id')->on('posts')->onUpdate('RESTRICT')->onDelete('RESTRICT');\n            $table->foreign('user_id', 'user_id_comment_foreign')->references('id')->on('users')->onUpdate('RESTRICT')->onDelete('RESTRICT');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('comments', function(Blueprint $table)\n        {\n            $table->dropForeign('post_id_comment_foreign');\n            $table->dropForeign('post_id_foreign');\n            $table->dropForeign('user_id_comment_foreign');\n        });\n    }\n\n}\n```", "```php\n<?php   use Illuminate\\Database\\Migrations\\Migration; use Illuminate\\Database\\Schema\\Blueprint;   class AddForeignKeysToPostsTable extends Migration {    /**\n * Run the migrations. * * @return void\n */  public function up()\n { Schema::table('posts', function(Blueprint $table)\n {  $table->foreign('user_id', 'user_id_foreign')->references('id')->on('users')->onUpdate('RESTRICT')->onDelete('RESTRICT');\n }); }      /**\n * Reverse the migrations. * * @return void\n */  public function down()\n { Schema::table('posts', function(Blueprint $table)\n {  $table->dropForeign('user_id_foreign');\n }); }   } \n```", "```php\n  $table->foreign('user_id', 'user_id_foreign')->references('id')->on('users')->onUpdate('RESTRICT')->onDelete('RESTRICT');\n```", "```php\nphp artisan migrate\n```", "```php\ncomposer require --dev flipbox/lumen-generator\n```", "```php\nif ($app->environment() !== 'production') {\n  $app->register(Flipbox\\LumenGenerator\\LumenGeneratorServiceProvider::class); }\n```", "```php\nphp artisan migrate\n```", "```php\nphp artisan make:controller PostController --resource\n```", "```php\n<?php   namespace App\\Http\\Controllers;   use Illuminate\\Http\\Request;   class PostController extends Controller {\n  /**\n * Display a listing of the resource. * * @return \\Illuminate\\Http\\Response\n */  public function index()\n {  //\n  }    /**\n * Store a newly created resource in storage. * * @param \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */  public function store(Request $request)\n {  //\n  }    /**\n * Display the specified resource. * * @param int  $id\n * @return \\Illuminate\\Http\\Response\n */  public function show($id)\n {  //\n  }    /**\n * Update the specified resource in storage. * * @param \\Illuminate\\Http\\Request  $request\n * @param int  $id\n * @return \\Illuminate\\Http\\Response\n */  public function update(Request $request, $id)\n {  //\n  }    /**\n * Remove the specified resource from storage. * * @param int  $id\n * @return \\Illuminate\\Http\\Response\n */  public function destroy($id)\n {  //\n  } } \n```", "```php\n<?php   /* |---------------------------------------------------------------- | Application Routes |---------------------------------------------------------------- | | Here is where you can register all of the routes for an application. | It is a breeze. Simply tell Lumen the URIs it should respond to | and give it the Closure to call when that URI is requested. | */   $app->get('/', function () use ($app) {\n  return $app->version(); });  $app->get('/api/posts', [\n    'uses' => 'PostController@index',\n    'as' => 'list_posts'\n]);\n```", "```php\npublic function index() {\n return ['response' =>\n        [\n            'id' => 1,\n            'title' => 'Some Post',\n            'body' => 'Here is post body'\n        ] **];** }\n```", "```php\nphp -S localhost:8000 -t public\n```", "```php\n{\"response\":{\"id\":1,\"title\":\"Some Post\",\"body\":\"Here is post body\"}}\n```", "```php\nphp artisan route:list\n```", "```php\n$app->resource('api/posts', 'PostController');\n```", "```php\nfunction resource($uri, $controller) {\n  //$verbs = ['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE'];\n  global $app;\n\n  $app->get($uri, $controller.'@index');\n  $app->post($uri, $controller.'@store');\n\n  $app->get($uri.'/{id}', $controller.'@show');\n  $app->put($uri.'/{id}', $controller.'@update');\n  $app->patch($uri.'/{id}', $controller.'@update');\n\n  $app->delete($uri.'/{id}', $controller.'@destroy'); }  \n```", "```php\n<?php   /* |---------------------------------------------------------------- | Application Routes |---------------------------------------------------------------- | | Here is where you can register all of the routes for an application. | It is a breeze. Simply tell Lumen the URIs it should respond to | and give it the Closure to call when that URI is requested. | */    function resource($uri, $controller)\n{\n    //$verbs = ['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE'];\n\n    global $app;\n\n    $app->get($uri, $controller.'@index');\n    $app->post($uri, $controller.'@store');\n\n    $app->get($uri.'/{id}', $controller.'@show');\n    $app->put($uri.'/{id}', $controller.'@update');\n    $app->patch($uri.'/{id}', $controller.'@update');\n\n    $app->delete($uri.'/{id}', $controller.'@destroy'); **}**     $app->get('/', function () use ($app) {\n  return $app->version(); });   resource('api/posts', 'PostController'**);** \n```", "```php\nphp artisan route:list\n```", "```php\nphp artisan make:model Post\n```", "```php\nphp artisan make:model Comment\n```", "```php\n<?php   namespace App;   use Illuminate\\Auth\\Authenticatable; use Laravel\\Lumen\\Auth\\Authorizable; use Illuminate\\Database\\Eloquent\\Model; use Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract; use Illuminate\\Contracts\\Auth\\Access\\Authorizable as AuthorizableContract;   class User extends Model implements AuthenticatableContract, AuthorizableContract {\n  use Authenticatable, Authorizable;    /**\n * The attributes that are mass assignable. * * @var array\n */  protected $fillable = [\n  'name', 'email',\n ];    /**\n * The attributes excluded from the model's JSON form. * * @var array\n */  protected $hidden = [\n  'password',\n ]; public function posts(){\n        return $this->hasMany('App\\Post');\n    }\n\n    public function comments(){\n        return $this->hasMany('App\\Comment'); **}** } \n```", "```php\n<?php   namespace App;   use Illuminate\\Database\\Eloquent\\Model;   class Post extends Model {\n public function comments(){\n        return $this->hasMany('App\\Comment');\n    }\n\n    public function user(){\n        return $this->belongsTo('App\\User'); **}** } \n```", "```php\n<?php   namespace App;   use Illuminate\\Database\\Eloquent\\Model;   class Comment extends Model {\n public function post(){\n        return $this->belongsTo(\"App\\Post\");\n    }\n\n    public function user(){\n        return $this->belongsTo(\"App\\User\"); **}** } \n```", "```php\npublic function index(\\App\\Post $post) {\n  return $post->paginate(20); }\n```", "```php\n<?php   namespace App\\Http\\Controllers;   use Illuminate\\Http\\Request;   class PostController extends Controller {   public function __construct(\\App\\Post $post)\n    {\n        $this->post = $post; **}**    /**\n * Display a listing of the resource. * * @return \\Illuminate\\Http\\Response\n */  public function index()\n { return $this->post->paginate(20**);**\n }    /**\n * Store a newly created resource in storage. * * @param \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */  public function store(Request $request)\n { $input = $request->all();\n        $this->post->create($input);\n\n        return [\n            'data' => $input **];**\n }    /**\n * Display the specified resource. * * @param int  $id\n * @return \\Illuminate\\Http\\Response\n */  public function show($id)\n {  return $this->post->find($id**);**\n }    /**\n * Update the specified resource in storage. * * @param \\Illuminate\\Http\\Request  $request\n * @param int  $id\n * @return \\Illuminate\\Http\\Response\n */  public function update(Request $request, $id)\n { $input = $request->all();\n        $this->post->where('id', $id)->update($input);\n\n        return $this->post->find($id**);**\n }    /**\n * Remove the specified resource from storage. * * @param int  $id\n * @return \\Illuminate\\Http\\Response\n */  public function destroy($id)\n { $post = $this->post->destroy($id);\n\n        return ['message' => 'deleted successfully', 'post_id' => $post**];**\n } } \n```", "```php\n{\n   \"current_page\":1,\n   \"data\":[\n      {\n         \"id\":1,\n         \"title\":\"test\",\n         \"status\":\"draft\",\n         \"content\":\"test post\",\n         \"user_id\":2\n      }\n   ],\n   \"from\":1,\n   \"last_page\":1,\n   \"next_page_url\":null,\n   \"path\":\"http:\\/\\/localhost:8000\\/api\\/posts\",\n   \"per_page\":20,\n   \"prev_page_url\":null,\n   \"to\":1,\n   \"total\":1\n}\n```", "```php\npublic function index() {\n $posts = $this->post->paginate(20);\n    $data = $posts['data'];\n\n    $response = [\n        'data' => $data,\n        'total_count' => $posts['total'],\n        'limit' => $posts['per_page'],\n        'pagination' => [\n            'next_page' => $posts['next_page_url'],\n            'current_page' => $posts['current_page']\n        ]\n    ];\n\n    return $response**;** }\n```", "```php\npublic function store(Request $request) {\n  $input = $request->all();   $validationRules = [\n        'content' => 'required|min:1',\n        'title' => 'required|min:1',\n        'status' => 'required|in:draft,published',\n        'user_id' => 'required|exists:users,id'\n    ];\n\n    $validator = \\Validator::make($input, $validationRules);\n    if ($validator->fails()) {\n        return new \\Illuminate\\Http\\JsonResponse(\n            [\n                'errors' => $validator->errors()\n            ], \\Illuminate\\**Http\\**Response::HTTP_BAD_REQUEST\n        );\n **}**   $post = $this->post->create($input);    return [\n  'data' => $post\n  ]; }\n```", "```php\npublic function show($id) {\n  $post = $this->post->find($id);\n if(!$post) {\n        abort(404);\n    }\n\n    return $post**;** }\n```", "```php\npublic function update(Request $request, $id) {\n  $input = $request->all();    $post = $this->post->find($id);    if(!$post) {\n abort(404);\n }   $post->fill($input);\n  $post->save();    return $post; }\n```", "```php\npublic function destroy($id) {\n $post = $this->post->find($id);\n\n    if(!$post) {\n        abort(404);\n    }\n\n    $post**->delete();**    return ['message' => 'deleted successfully', 'post_id' => $id]; }\n```", "```php\n<?php   namespace App\\Http\\Controllers;   use Illuminate\\Http\\Request; use Illuminate\\Http\\Response; use Illuminate\\Http\\JsonResponse;   class PostController extends Controller {    public function __construct(\\App\\Post $post)\n {  $this->post = $post;\n }    /**\n * Display a listing of the resource. * * @return \\Illuminate\\Http\\Response\n */  public function index()\n {  $posts = $this->post->paginate(20);\n  $data = $posts['data'];    $response = [\n  'data' => $data,\n  'total_count' => $posts['total'],\n  'limit' => $posts['per_page'],\n  'pagination' => [\n  'next_page' => $posts['next_page_url'],\n  'current_page' => $posts['current_page']\n ] ];    return $response;\n }    /**\n * Store a newly created resource in storage. * * @param \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */  public function store(Request $request)\n {  $input = $request->all();    $validationRules = [\n  'content' => 'required|min:1',\n  'title' => 'required|min:1',\n  'status' => 'required|in:draft,published',\n  'user_id' => 'required|exists:users,id'\n  ];    $validator = \\Validator::make($input, $validationRules);\n  if ($validator->fails()) {\n  return new JsonResponse(\n [  'errors' => $validator->errors()\n ], Response::HTTP_BAD_REQUEST\n  );\n }   $post = $this->post->create($input);    return [\n  'data' => $post\n  ];\n }    /**\n * Display the specified resource. * * @param int  $id\n * @return \\Illuminate\\Http\\Response\n */  public function show($id)\n {  $post = $this->post->find($id);    if(!$post) {\n abort(404);\n }    return $post;\n }    /**\n * Update the specified resource in storage. * * @param \\Illuminate\\Http\\Request  $request\n * @param int  $id\n * @return \\Illuminate\\Http\\Response\n */  public function update(Request $request, $id)\n {  $input = $request->all();    $post = $this->post->find($id);    if(!$post) {\n abort(404);\n }    $post->fill($input);\n  $post->save();    return $post;\n }    /**\n * Remove the specified resource from storage. * * @param int  $id\n * @return \\Illuminate\\Http\\Response\n */  public function destroy($id)\n {  $post = $this->post->find($id);    if(!$post) {\n abort(404);\n }    $post->delete();    return ['message' => 'deleted successfully', 'post_id' => $id];\n } } \n```", "```php\n<?php   /* |---------------------------------------------------------------- | Application Routes |---------------------------------------------------------------- | | Here is where you can register all of the routes for an application. | It is a breeze. Simply tell Lumen the URIs it should respond to | and give it the Closure to call when that URI is requested. | */     function resource($uri, $controller, $except **= []**) {\n  //$verbs = ['GET', 'HEAD', 'POST', 'PUT', 'PATCH', 'DELETE'];    global $app;     if(!in_array('index', $except**)){**\n  $app->get($uri, $controller.'@index');\n **}**   if(!in_array('store', $except)) {        $app->post($uri, $controller . '@store'); }\n\n    if(!in_array('show', $except)) {        $app->get($uri . '/{id}', $controller . '@show'); };\n\n    if(!in_array('udpate', $except)) {\n        $app->put($uri . '/{id}', $controller . '@update');\n        $app->patch($uri . '/{id}', $controller . '@update'); }\n\n    if(!in_array('destroy', $except)) {        $app->delete($uri . '/{id}', $controller . '@destroy'); **}** }     $app->get('/', function () use ($app) {\n  return $app->version(); });     resource('api/posts', 'PostController');  resource('api/comments', 'CommentController', ['store','index'**]);**   $app->post('api/posts/{id}/comments', $controller . '@store');\n$app->get('api/posts/{id}/comments', $controller . '@index'**);**  \n```"]