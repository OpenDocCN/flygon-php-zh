["```php\n{\n \"base\": \"EUR\",\n \"date\": \"2017-03-10\",\n \"rates\": {\n \"GBP\": 0.8725,\n \"HRK\": 7.419,\n \"USD\": 1.0606\n  }\n}\n\n```", "```php\n<?xml version=\"1.0\" ?> <env:Envelope>\n<env:Header>\n<!-- ... -->\n  </env:Header>\n<env:Body>\n<!-- ... -->\n  <env:Fault>\n<!-- ... -->\n  </env:Fault>\n</env:Body>\n</env:Envelope>\n\n```", "```php\n<?xml version=\"1.0\" ?> <definitions>\n<types>\n<!-- ... -->\n  </types>\n<message>\n<!-- ... -->\n  </message>\n<portType>\n<!-- ... -->\n  </portType>\n<binding>\n<!-- ... -->\n  </binding>\n<port>\n<!-- ... -->\n  </port>\n<service>\n<!-- ... -->\n  </service>\n</definitions>\n\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> <customer>\n <name type=\"string\"><![CDATA[John]]></name>\n <age type=\"integer\">34</age> \n <addresses>\n <address><![CDATA[The Address #1]]></address>\n </addresses>\n</customer>\n\n```", "```php\n<?php $xml  = new XMLWriter(); $xml->openMemory(); $xml->setIndent(true); // optional formatting   $xml->startDocument('1.0', 'UTF-8'); $xml->startElement('customer');   $xml->startElement('name'); $xml->writeAttribute('type', 'string'); $xml->writeCData('John'); $xml->endElement(); // </name> $xml->startElement('age'); $xml->writeAttribute('type', 'integer'); $xml->writeRaw(34); $xml->endElement(); // </age> $xml->startElement('addresses'); $xml->startElement('address'); $xml->writeCData('The Address #1'); $xml->endElement(); // </address> $xml->endElement(); // </addresses>   $xml->endElement(); // </customer>   $document = $xml->outputMemory();\n\n```", "```php\n<?php $xml = new XMLReader(); $xml->open(__DIR__ . '/simple.xml');   $name = ''; $age = ''; $address = '';   while ($xml->read()) {   if ($xml->name == 'name') {\n  $name = $xml->readString();\n  $xml->next();\n } elseif ($xml->name == 'age') {\n  $age = $xml->readString();\n  $xml->next();\n } elseif ($xml->name == 'address') {\n  $address = $xml->readString();\n  $xml->next();\n } }   echo sprintf(\n  'Customer %s, at age %s, living at %s',\n  $name, $age, $address );\n\n```", "```php\n<?php   $document = new SimpleXMLElement(\n  '<?xml version=\"1.0\" encoding=\"UTF-8\"?><customer></customer>' );   $name = $document->addChild('name', 'John'); $age = $document->addChild('age', 34); $addresses = $document->addChild('addresses'); $address = $addresses->addChild('address', 'The Address #1'); echo $document->asXML();\n\n```", "```php\n<?php   $document = new SimpleXMLElement(__DIR__ . '/simple.xml', null, true);   $name = (string)$document->name; $age = (string)$document->age; $address = (string)$document->addresses[0]->address; echo sprintf(\n  'Customer %s, at age %s, living at %s',\n  $name, $age, $address );\n\n```", "```php\n<?php $document = new DOMDocument('1.0', 'UTF-8'); $document->formatOutput = true; // optional $customer = $document->createElement('customer'); $customer = $document->appendChild($customer); $name = $document->createElement('name'); $name = $customer->appendChild($name); $nameTypeAttr = $document->createAttribute('type'); $nameTypeAttr->value = 'string'; $name->appendChild($nameTypeAttr); $name->appendChild($document->createCDATASection('John')); $age = $document->createElement('age'); $age = $customer->appendChild($age); $ageTypeAttr = $document->createAttribute('type'); $ageTypeAttr->value = 'integer'; $age->appendChild($ageTypeAttr); $age->appendChild($document->createTextNode(34));   $addresses = $document->createElement('addresses'); $addresses = $customer->appendChild($addresses); $address = $document->createElement('address'); $address = $addresses->appendChild($address); $address->appendChild($document->createCDATASection('The Address #1')); echo $document->saveXML();\n\n```", "```php\n<?php   $document = new DOMDocument(); $document->load(__DIR__ . '/simple.xml');   $name = $document->getElementsByTagName('name')[0]->nodeValue; $age = $document->getElementsByTagName('age')[0]->nodeValue; $address = $document->getElementsByTagName('address')[0]->nodeValue; echo sprintf(\n  'Customer %s, at age %s, living at %s',\n  $name, $age, $address );\n\n```", "```php\n<?php namespace Foggyline;   class Customer {\n  /**\n * Says \"Welcome customer...\" * @param $name\n * @return string\n */  function welcome($name)\n {  return 'Welcome customer: ' . $name;\n } } \n\n```", "```php\n<?php namespace Foggyline;   class User {\n  /**\n * Says \"Welcome user...\" * @param $name\n * @return string\n */  function welcome($name)\n {  return 'Welcome user: ' . $name;\n } } \n\n```", "```php\n<?php   require_once __DIR__ . '/services/Foggyline/Customer.php'; require_once __DIR__ . '/services/Foggyline/User.php'; class ServiceProxy {\n  private $customerService;\n  private $userService;    public function __construct()\n {  $this->customerService = new Foggyline\\Customer();\n  $this->userService = new Foggyline\\User();\n }    /**\n * Says \"Welcome customer...\" * @soap\n  * @param $name\n * @return string\n */  public function customerWelcome($name)\n {  return $this->customerService->welcome($name);\n }    /**\n * Says \"Welcome user...\" * @soap\n  * @param $name\n * @return string\n */  public function userWelcome($name)\n {  return $this->userService->welcome($name);\n } }\n\n```", "```php\n<?php require_once __DIR__ . '/ServiceProxy.php'; $options = [   'uri' => 'http://soap-service.server/index.php' ]; $server = new SoapServer(null, $options);   $server->setClass('ServiceProxy');   $server->handle(); \n\n```", "```php\ncomposer require php2wsdl/php2wsdl\n\n```", "```php\n<?php require_once __DIR__ . '/vendor/autoload.php'; require_once __DIR__ . '/ServiceProxy.php';   $class = 'ServiceProxy'; $serviceURI = 'http://soap-service.server/index.php';   $wsdlGenerator = new PHP2WSDL\\PHPClass2WSDL($class, $serviceURI); $wsdlGenerator->generateWSDL(true); file_put_contents(__DIR__ . '/wsdl.xml', $wsdlGenerator->dump());\n\n```", "```php\n<?xml version=\"1.0\"?> <definitions xmlns=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:tns=\"http://soap-service.server/index.php\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap-enc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" name=\"ServiceProxy\" targetNamespace=\"http://soap-service.server/index.php\">\n<types>\n<xsd:schema targetNamespace=\"http://soap-service.server/index.php\">\n<xsd:import namespace=\"http://schemas.xmlsoap.org/soap/encoding/\"/>\n</xsd:schema>\n</types>\n<portType name=\"ServiceProxyPort\">\n <operation name=\"customerWelcome\">\n <documentation>Says \"Welcome customer...\"</documentation>\n <input message=\"tns:customerWelcomeIn\"/>\n <output message=\"tns:customerWelcomeOut\"/>\n </operation>\n <operation name=\"userWelcome\">\n <documentation>Says \"Welcome user...\"</documentation>\n <input message=\"tns:userWelcomeIn\"/>\n <output message=\"tns:userWelcomeOut\"/>\n</operation>\n</portType>\n<binding name=\"ServiceProxyBinding\" type=\"tns:ServiceProxyPort\">\n<soap:binding style=\"rpc\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>\n<operation name=\"customerWelcome\">\n<soap:operation soapAction=\"http://soap-service.server/index.php#customerWelcome\"/>\n<input>\n<soap:body use=\"encoded\" encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" namespace=\"http://soap-service.server/index.php\"/>\n</input>\n<output>\n<soap:body use=\"encoded\" encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" namespace=\"http://soap-service.server/index.php\"/>\n</output>\n</operation>\n<operation name=\"userWelcome\">\n<soap:operation soapAction=\"http://soap-service.server/index.php#userWelcome\"/>\n<input>\n<soap:body use=\"encoded\" encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" namespace=\"http://soap-service.server/index.php\"/>\n</input>\n<output>\n<soap:body use=\"encoded\" encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" namespace=\"http://soap-service.server/index.php\"/>\n</output>\n</operation>\n</binding>\n<service name=\"ServiceProxyService\">\n<port name=\"ServiceProxyPort\" binding=\"tns:ServiceProxyBinding\">\n <soap:address location=\"http://soap-service.server/index.php\"/>\n</port>\n</service>\n<message name=\"customerWelcomeIn\">\n <part name=\"name\" type=\"xsd:anyType\"/>\n</message>\n<message name=\"customerWelcomeOut\">\n <part name=\"return\" type=\"xsd:string\"/>\n</message>\n<message name=\"userWelcomeIn\">\n  <part name=\"name\" type=\"xsd:anyType\"/>\n</message>\n<message name=\"userWelcomeOut\">\n <part name=\"return\" type=\"xsd:string\"/>\n</message>\n</definitions>\n\n```", "```php\n// NON-WSDL MODE: $server = new SoapServer(null, $options);\n\n// WSDL MODE: $server = new SoapServer('http://soap-service.server/wsdl.xml'); $server = new SoapServer('http://soap-service.server/wsdl.xml');\n\n```", "```php\n<?php $options = [\n  'location' => 'http://soap-service.server/index.php',\n  'uri' => 'http://soap-service.server/index.php',\n  'trace ' => true, ];   // NON-WSDL MODE: $client = new SoapClient($wsdl = null, $options); // WSDL MODE: $client = new SoapClient('http://soap-service.server/wsdl.xml', $options);   $client = new SoapClient('http://soap-service.server/wsdl.xml', $options);   echo $client->customerWelcome('John'); echo $client->userWelcome('Mariya');\n\n```", "```php\nPOST /index.php HTTP/1.1\nHost: soap-service.server\nConnection: Keep-Alive\nUser-Agent: PHP-SOAP/7.0.10\nContent-Type: text/xml; charset=utf-8\nSOAPAction: \"http://soap-service.server/index.php#customerWelcome\"\nContent-Length: 525\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n\n xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"\n SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n <SOAP-ENV:Body>\n <ns1:customerWelcome>\n <name xsi:type=\"xsd:string\">John</name>\n </ns1:customerWelcome>\n </SOAP-ENV:Body>\n</SOAP-ENV:Envelope>\n\n```", "```php\n<?php   class User {\n  public $name;\n  public $age;\n  public $salary; } $user = new User(); $user->name = 'John'; $user->age = 34; $user->salary = 4200.50;   echo json_encode($user); // {\"name\":\"John\",\"age\":34,\"salary\":4200.5}   $employees = ['John', 'Mariya', 'Sarah', 'Marc'];   echo json_encode($employees); // [\"John\",\"Mariya\",\"Sarah\",\"Marc\"]\n\n```", "```php\n<?php   $user = json_decode('{\"name\":\"John\",\"age\":34,\"salary\":4200.5}'); print_r($user); //    stdClass Object //    ( //        [name] => John //        [age] => 34 //        [salary] => 4200.5 //    )\n\n```", "```php\n<?php   if ('POST' == $_SERVER['REQUEST_METHOD']) {\n  header('Content-type: application/json');\n  echo json_encode(['data' => 'Triggered customer POST!']); }   if ('GET' == $_SERVER['REQUEST_METHOD']) {\n  header('Content-type: application/json');\n  echo json_encode(['data' => 'Triggered customer GET!']); }   if ('PUT' == $_SERVER['REQUEST_METHOD']) {\n  header('Content-type: application/json');\n  echo json_encode(['data' => 'Triggered customer PUT!']); }   if ('DELETE' == $_SERVER['REQUEST_METHOD']) {\n  header('Content-type: application/json');\n  echo json_encode(['data' => 'Triggered customer DELETE!']); }\n\n```", "```php\ncomposer require silex/silex \"~2.0\"\n\n```", "```php\n<?php require_once __DIR__ . '/vendor/autoload.php'; use Silex\\Application; use Symfony\\Component\\HttpFoundation\\Request; use Symfony\\Component\\HttpFoundation\\Response;   $app = new Silex\\Application();   // The \"before\" middleware, convenient for auth and request data check $app->before(function (Request $request, Application $app) {\n  // Some auth token control\n  if (!$request->headers->get('X-AUTH-TOKEN')) {\n  // todo: Implement\n  }\n  // JSON content type control\n  if ($request->headers->get('Content-Type') != 'application/json') {\n  // todo: Implement\n  } });   // The \"error\" middleware, convenient for service wide error handling $app->error(function (\\Exception $e, Request $request, $code) {\n  // todo: Implement });   // The \"OPTIONS\" route, set to trigger for any URL $app->options('{url}', function ($url) use ($app) {\n  return new Response('', 204, ['Allow' => 'POST, GET, PUT, DELETE, OPTIONS']); })->assert('url', '.+');   // The \"after\" middleware, convenient for CORS control $app->after(function (Request $request, Response $response) {\n  $response->headers->set('Access-Control-Allow-Headers', 'origin, content-type, accept, X-AUTH-TOKEN');\n  $response->headers->set('Access-Control-Allow-Origin', '*');\n  $response->headers->set('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE'); }); // The \"POST /user/welcome\" REST service endpoint $app->post('/user/welcome', function (Request $request, Application $app) {\n  $data = json_decode($request->getContent(), true);\n  return $app->json(['data' => 'Welcome ' . $data['name']]); })->bind('user_welcome');   $app->run();\n\n```", "```php\n<IfModule mod_rewrite.c>\nOptions -MultiViews\n  RewriteEngine On\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteRule ^ index.php [QSA,L] </IfModule>\n\n```", "```php\n$app->get('/resource/path', function () { /* todo: logic */ }); $app->post('/resource/path', function () { /* todo: logic */ }); $app->put('/resource/path', function () { /* todo: logic */ }); $app->delete('/resource/path', function () { /* todo: logic */ }); $app->patch('/resource/path', function () { /* todo: logic */ }); $app->options('/resource/path', function () { /* todo: logic */ });\n\n```", "```php\n<?php $ch = curl_init();   $headers = [\n  'Content-Type: application/json',\n  'X-AUTH-TOKEN: some-auth-token-here' ]; curl_setopt($ch, CURLOPT_URL, 'http://rest-service.server/user/welcome'); curl_setopt($ch, CURLOPT_POST, true); curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode(['name' => 'John'])); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);   $result = curl_exec($ch);   curl_close($ch);   echo $result;\n\n```", "```php\nPOST /user/welcome HTTP/1.1\nHost: rest-service.server\nAccept: */*\nContent-Type: application/json\nX-AUTH-TOKEN: some-auth-token-here\nContent-Length: 15\n\n{\"name\":\"John\"}\n\n```", "```php\n<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n <meta charset=\"UTF-8\">\n <title>Client App</title>\n <script  src=\"https://code.jquery.com/jquery-3.1.1.min.js\"\n  integrity=\"sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=\"\n  crossorigin=\"anonymous\"></script>\n </head>\n<body>\n <script>\n    jQuery.ajax({\n method: 'POST',\n url: 'http://rest-service.server/user/welcome',\n headers: {'X-AUTH-TOKEN': 'some-auth-token-here'},\n data: JSON.stringify({name: 'John'}),\n dataType: 'json',\n contentType: 'application/json',\n success: function (response) {\n console.log(response.data);\n      }\n    });\n </script>\n </body>\n</html>\n\n```", "```php\nsudo apt-get update\nsudo apt-get -y install php automake bison flex g++ git libboost-all-dev libevent-dev libssl-dev libtool make pkg-config\n\n```", "```php\nwget http://apache.mirror.anlx.net/thrift/0.10.0/thrift-0.10.0.tar.gz\ntar -xvf thrift-0.10.0.tar.gz\ncd thrift-0.10.0/\n\n```", "```php\n./configure\nmake\nmake install\n\n```", "```php\necho \"export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/\" >> ~/.bashrc\n\n```", "```php\nthrift -version\n\n```", "```php\nmkdir thrift-service\ncd thrift-service/\nmkdir client\nmkdir server\nmkdir vendor\ncd vendor\ngit clone https://github.com/apache/thrift.git\n\n```", "```php\nnamespace php user\n\nservice GreetingService\n{\n  string hello(1: string name),\n  string goodbye()\n}\n\n```", "```php\nthrift -r -gen php:server Greeting.thrift\n\n```", "```php\n<?php\n\nrequire_once __DIR__ . '/../vendor/thrift/lib/php/lib/Thrift/ClassLoader/ThriftClassLoader.php';\n\nuse Thrift\\ClassLoader\\ThriftClassLoader;\nuse Thrift\\Transport\\TPhpStream;\nuse Thrift\\Transport\\TBufferedTransport;\nuse Thrift\\Protocol\\TBinaryProtocol;\nuse user\\GreetingServiceProcessor;\nuse user\\GreetingServiceIf;\n\n$loader = new ThriftClassLoader();\n$loader->registerNamespace('Thrift', __DIR__ . '/../vendor/thrift/lib/php/lib');\n$loader->registerDefinition('user', __DIR__ . '/../gen-php');\n$loader->register();\n\nclass GreetingServiceImpl implements GreetingServiceIf\n{\n  public function hello($name)\n  {\n    return 'Hello ' . $name . '!';\n  }\n\n  public function goodbye()\n  {\n    return 'Goodbye!';\n  }\n}\n\nheader('Content-Type', 'application/x-thrift');\n\n$handler = new GreetingServiceImpl();\n$processor = new GreetingServiceProcessor($handler);\n$transport = new TBufferedTransport(new TPhpStream(TPhpStream::MODE_R | TPhpStream::MODE_W));\n$protocol = new TBinaryProtocol($transport, true, true);\n\n$transport->open();\n$processor->process($protocol, $protocol);\n$transport->close();\n\n```", "```php\n<?php\n\nrequire_once __DIR__ . '/../vendor/thrift/lib/php/lib/Thrift/ClassLoader/ThriftClassLoader.php';\n\nuse Thrift\\ClassLoader\\ThriftClassLoader;\nuse Thrift\\Transport\\THttpClient;\nuse Thrift\\Transport\\TBufferedTransport;\nuse Thrift\\Protocol\\TBinaryProtocol;\nuse user\\GreetingServiceClient;\n\n$loader = new ThriftClassLoader();\n$loader->registerNamespace('Thrift', __DIR__ . '/../vendor/thrift/lib/php/lib');\n$loader->registerDefinition('user', __DIR__ . '/../gen-php');\n$loader->register();\n\n$socket = new THttpClient('thrift-service.server', 80, '/index.php');\n$transport = new TBufferedTransport($socket);\n$protocol = new TBinaryProtocol($transport);\n$client = new GreetingServiceClient($protocol);\n\n$transport->open();\n\necho $client->hello('John');\necho $client->goodbye();\n\n$transport->close();\n\n```"]