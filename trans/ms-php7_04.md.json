["```php\n<?php\n\nclass User\n{\n  public function __construct()\n  {\n    var_dump('__construct');\n  }\n}\n\nnew User;\nnew User();\n\n```", "```php\n<?php\n\nclass User\n{\n  protected $name;\n  protected $age;\n\n  public function __construct($name, $age)\n  {\n    $this->name = $name;\n    $this->age = $age;\n    var_dump($this->name);\n    var_dump($this->age);\n  }\n}\n\nnew User; #1\nnew User('John'); #2\nnew User('John', 34); #3\nnew User('John', 34, 4200.00); #4\n\n```", "```php\nWarning: Missing argument 1 for User::__construct() // #1\nWarning: Missing argument 2 for User::__construct() // #1 & #2\n\n```", "```php\n<?php\n\nclass User\n{\n  protected $name;\n  protected $age;\n\n  public function __construct($name, $age)\n  {\n    $this->name = $name;\n    $this->age = $age;\n  }\n}\n\nclass Employee extends User\n{\n  public function __construct($employeeName, $employeeAge)\n  {\n    var_dump($this->name);\n    var_dump($this->age);\n  }\n}\n\nnew Employee('John', 34);\n\n```", "```php\nNULL NULL\n\n```", "```php\nclass Employee extends User\n{\n public function __construct($employeeName, $employeeAge)\n {\n   parent::__construct($employeeName, $employeeAge);\n   var_dump($this->name);\n   var_dump($this->age);\n }\n}\n\n```", "```php\n string(4) \"John\" int(34)\n\n```", "```php\n<?php\n\nclass User\n{\n  public function __construct()\n  {\n    var_dump('__construct');\n  }\n\n  public static function hello($name)\n  {\n    return 'Hello ' . $name;\n  }\n}\n\necho User::hello('John');\n\n```", "```php\nHello John\n\n```", "```php\n<?php\n\nclass User\n{\n public final function __construct($name)\n {\n var_dump($name);\n }\n}\n\nclass Director extends User\n{\n\n}\n\nclass Employee extends User\n{\n public function __construct($name)\n {\n var_dump($name);\n }\n}\n\nnew User('John'); #1\nnew Director('John'); #2\nnew Employee('John'); #3\n\n```", "```php\nFatal error: Cannot override final method User::__construct()\n\n```", "```php\n public function __construct(\n   \\Magento\\Catalog\\Api\\ProductRepositoryInterface $productRepository,\n   \\Magento\\GiftMessage\\Model\\MessageFactory $messageFactory,\n   \\Magento\\Backend\\Model\\Session\\Quote $session,\n   \\Magento\\GiftMessage\\Helper\\Message $giftMessageMessage\n ) {\n   $this->productRepository = $productRepository;\n   $this->_messageFactory = $messageFactory;\n   $this->_session = $session;\n   $this->_giftMessageMessage = $giftMessageMessage;\n }\n\n```", "```php\n<?php\n\nclass User\n{\n   public function __destruct()\n   {\n      echo '__destruct';\n   }\n}\n\n```", "```php\necho 'A';\nnew User();\necho 'B';\n\n// outputs \"A__destructB\"\n\n```", "```php\necho 'A';\n$user = new User();\necho 'B';\n\n// outputs \"AB__destruct\"\n\n```", "```php\necho 'A';\n$user = new User();\necho 'B';\nunset($user);\necho 'C';\n\n// outputs \"AB__destructC\"\n\n```", "```php\necho 'A';\n$user = new User();\necho 'B';\nexit;\necho 'C';\n\n// outputs \"AB__destruct\"\n\n```", "```php\npublic mixed __call(string $name, array $arguments)\n\n```", "```php\n<?php\n\nclass User\n{\n public function __call($name, $arguments)\n {\n echo $name . ': ' . implode(', ', $arguments) . PHP_EOL;\n }\n\n public function bonus($amount)\n {\n echo 'bonus: ' . $amount . PHP_EOL;\n }\n}\n\n$user = new User();\n$user->hello('John', 34);\n$user->bonus(560.00);\n$user->salary(4200.00);\n\n```", "```php\n__call => hello: John, 34\nbonus: 560\n__call => salary: 4200\n\n```", "```php\npublic function __call($method, $args)\n{\n   switch (substr($method, 0, 3)) {\n     case 'get':\n       $key = $this->_underscore(substr($method, 3));\n       $index = isset($args[0]) ? $args[0] : null;\n     return $this->getData($key, $index);\n     case 'set':\n       $key = $this->_underscore(substr($method, 3));\n       $value = isset($args[0]) ? $args[0] : null;\n     return $this->setData($key, $value);\n     case 'uns':\n       $key = $this->_underscore(substr($method, 3));\n     return $this->unsetData($key);\n     case 'has':\n       $key = $this->_underscore(substr($method, 3));\n     return isset($this->_data[$key]);\n   }\n   // ...\n}\n\n```", "```php\n$params = new \\Magento\\Framework\\DataObject();\n$params->setCategoryId(false);\n$params->setConfigureMode(true);\n$params->setBuyRequest($quoteItem->getBuyRequest());\n\n```", "```php\n<?php\n\nclass User extends \\Magento\\Framework\\DataObject\n{\n\n}\n\n$user = new User();\n\n$user->setName('John');\n$user->setAge(34);\n$user->setSalary(4200.00);\n\necho $user->getName();\necho $user->getAge();\necho $user->getSalary();\n\n```", "```php\npublic static mixed __callStatic (string $name, array $arguments)\n\n```", "```php\n<?php\n\nclass User\n{\n  public static function __callStatic($name, $arguments)\n  {\n    echo '__callStatic => ' . $name . ': ' . implode(', ', $arguments)\n      . PHP_EOL;\n  }\n\n  public static function bonus($amount)\n  {\n  echo 'bonus: ' . $amount . PHP_EOL;\n  }\n}\n\n```", "```php\nUser::hello('John', 34);\nUser::bonus(560.00);\nUser::salary(4200.00);\n\n```", "```php\n__callStatic => hello: John, 34\nbonus: 560\n__callStatic => salary: 4200\n\n```", "```php\npublic void __set(string $name, mixed $value)\n\n```", "```php\n<?php\n\nclass User\n{\n  private $data = array();\n\n  private $name;\n  protected $age;\n  public $salary;\n\n  public function __set($name, $value)\n  {\n    $this->data[$name] = $value;\n  }\n}\n\n$user = new User();\n$user->name = 'John';\n$user->age = 34;\n$user->salary = 4200.00;\n$user->message = 'hello';\n\nvar_dump($user);\n\n```", "```php\nobject(User)#1 (4) {\n  [\"data\":\"User\":private]=> array(3) {\n    [\"name\"]=> string(4) \"John\"\n    [\"age\"]=> int(34)\n    [\"message\"]=> string(5) \"hello\"\n  }\n  [\"name\":\"User\":private]=> NULL\n  [\"age\":protected]=> NULL\n  [\"salary\"]=> float(4200)\n}\n\n```", "```php\nPHP Warning: The magic method __set() must have public visibility and cannot be static...\n\n```", "```php\npublic mixed __get(string $name)\n\n```", "```php\n<?php\n\nclass User\n{\n  private $data = [\n    'name' => 'Marry',\n    'age' => 32,\n    'salary' => 5300.00,\n  ];\n\n  private $name = 'John';\n  protected $age = 34;\n  public $salary = 4200.00;\n\n  public function __get($name)\n  {\n    if (array_key_exists($name, $this->data)) {\n      echo '__get => ' . $name . ': ' . $this->data[$name] . PHP_EOL;\n    } else {\n      trigger_error('Undefined property: ' . $name, E_USER_NOTICE);\n    }\n  }\n}\n\n$user = new User();\n\necho $user->name . PHP_EOL;\necho $user->age . PHP_EOL;\necho $user->salary . PHP_EOL;\necho $user->message . PHP_EOL;\n\n```", "```php\n__get => name: Marry\n\n__get => age: 32\n\n4200\n\nPHP Notice: Undefined property: message in...\n\n```", "```php\npublic bool __isset(string $name)\n\n```", "```php\n<?php\n\nclass User\n{\n  private $data = [\n    'name' => 'John',\n    'age' => 34,\n  ];\n\n  public function __isset($name)\n  {\n    if (array_key_exists($name, $this->data)) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\n$user = new User();\n\nvar_dump(isset($user->name));\n\n```", "```php\npublic function __isset($key)\n{\n  switch (true) {\n    case isset($this->params[$key]):\n    return true;\n\n    case isset($this->queryParams[$key]):\n    return true;\n\n    case isset($this->postParams[$key]):\n    return true;\n\n    case isset($_COOKIE[$key]):\n    return true;\n\n    case isset($this->serverParams[$key]):\n    return true;\n\n    case isset($this->envParams[$key]):\n    return true;\n\n    default:\n    return false;\n  }\n}\n\n```", "```php\npublic bool __unset(string $name)\n\n```", "```php\n<?php\n\nclass User\n{\n  private $data = [\n    'name' => 'John',\n    'age' => 34,\n  ];\n\n  public function __unset($name)\n  {\n    unset($this->data[$name]);\n  }\n}\n\n$user = new User();\n\nvar_dump($user);\nunset($user->age);\nunset($user->salary);\nvar_dump($user);\n\n```", "```php\nobject(User)#1 (1) {\n  [\"data\":\"User\":private]=> array(2) {\n    [\"name\"]=> string(4) \"John\"\n    [\"age\"]=> int(34)\n  }\n}\n\nobject(User)#1 (1) {\n  [\"data\":\"User\":private]=> array(1) {\n    [\"name\"]=> string(4) \"John\"\n  }\n}\n\n```", "```php\nunset($user->age); // will trigger __unset()\n((unset) $user->age); // won't trigger __unset()\n\n```", "```php\n<?php\n\n$age = 34;\n$name = 'John';\n\n$obj = new stdClass();\n$obj->age = 34;\n$obj->name = 'John';\n\nvar_dump(serialize($age));\nvar_dump(serialize($name));\nvar_dump(serialize($obj));\n\n```", "```php\nstring(5) \"i:34;\"\nstring(11) \"s:4:\"John\";\"\nstring(56) \"O:8:\"stdClass\":2:{s:3:\"age\";i:34;s:4:\"name\";s:4:\"John\";}\"\n\n```", "```php\n<?php\n\nclass User\n{\n  public $name = 'John';\n  private $age = 34;\n  protected $salary = 4200.00;\n}\n\n$user = new User();\n\nvar_dump(serialize($user));\n\n```", "```php\nstring(81) \"O:4:\"User\":3:{s:4:\"name\";s:4:\"John\";s:9:\"Userage\";i:34;s:9:\"*salary\";d:4200;}\"\n\n```", "```php\n<?php\n\nclass User\n{\n  public $name = 'John';\n  private $age = 34;\n  protected $salary = 4200.00;\n\n  public function __sleep() \n  {\n    // Cleanup & other operations???\n    return ['name', 'salary'];\n  }\n}\n\n$user = new User();\n\nvar_dump(serialize($user));\n\n```", "```php\nstring(60) \"O:4:\"User\":2:{s:4:\"name\";s:4:\"John\";s:9:\"*salary\";d:4200;}\"\n\n```", "```php\n<?php\n\nclass Backup\n{\n  protected $ftpClient;\n  protected $ftpHost;\n  protected $ftpUser;\n  protected $ftpPass;\n\n  public function __construct($host, $username, $password)\n  {\n    $this->ftpHost = $host;\n    $this->ftpUser = $username;\n    $this->ftpPass = $password;\n\n    echo 'TEST!!!' . PHP_EOL;\n\n    $this->connect();\n  }\n\n  public function connect()\n  {\n    $this->ftpClient = ftp_connect($this->ftpHost, 21, 5);\n    ftp_login($this->ftpClient, $this->ftpUser, $this->ftpPass);\n  }\n\n  public function __sleep()\n  {\n    return ['ftpHost', 'ftpUser', 'ftpPass'];\n  }\n\n  public function __wakeup()\n  {\n    $this->connect();\n  }\n}\n\n$backup = new Backup('test.rebex.net', 'demo', 'password');\n$serialized = serialize($backup);\n$unserialized = unserialize($serialized);\n\nvar_dump($backup);\nvar_dump($serialized);\nvar_dump($unserialized);\n\n```", "```php\nobject(Backup)#1 (4) {\n  [\"ftpClient\":protected]=> resource(4) of type (FTP Buffer)\n  [\"ftpHost\":protected]=> string(14) \"test.rebex.net\"\n  [\"ftpUser\":protected]=> string(4) \"demo\"\n  [\"ftpPass\":protected]=> string(8) \"password\"\n}\n\nstring(119) \"O:6:\"Backup\":3:{s:10:\"*ftpHost\";s:14:\"test.rebex.net\";s:10:\"*ftpUser\";s:4:\"demo\";s:10:\"*ftpPass\";s:8:\"password\";}\"\n\nobject(Backup)#2 (4) {\n  [\"ftpClient\":protected]=> resource(5) of type (FTP Buffer)\n  [\"ftpHost\":protected]=> string(14) \"test.rebex.net\"\n  [\"ftpUser\":protected]=> string(4) \"demo\"\n  [\"ftpPass\":protected]=> string(8) \"password\"\n}\n\n```", "```php\n<?php\n\nclass User\n{\n  protected $name;\n  protected $age;\n\n  public function __construct($name, $age)\n  {\n    $this->name = $name;\n    $this->age = $age;\n  }\n}\n\n$user = new User('John', 34);\necho $user;\n\n```", "```php\nCatchable fatal error: Object of class User could not be converted to string in...\n\n```", "```php\n<?php\n\nclass User\n{\n  protected $name;\n  protected $age;\n\n  public function __construct($name, $age)\n  {\n    $this->name = $name;\n    $this->age = $age;\n  }\n\n  public function __toString()\n  {\n    return $this->name . ', age ' . $this->age;\n  }\n}\n\n$user = new User('John', 34);\necho $user;\n\n```", "```php\nJohn, age 34\n\n```", "```php\n public function __toString()\n {\n   try {\n     $this->seek(0);\n     return (string) stream_get_contents($this->stream);\n   } catch (\\Exception $e) {\n     return '';\n   }\n }\n\n```", "```php\nmixed __invoke([ $... ])\n\n```", "```php\n<?php\n\nclass User\n{\n  public function __invoke($name, $age)\n  {\n    echo $name . ', ' . $age;\n  }\n}\n\n```", "```php\n$user = new User();\n\n$user('John', 34); // outputs: John, 34\n\ncall_user_func($user, 'John', 34); // outputs: John, 34\n\n```", "```php\nvar_dump(is_callable($user)); // true\n\n```", "```php\nstatic object __set_state(array $properties)\n\n```", "```php\n<?php\n\nclass User\n{\n  public $name = 'John';\n  public $age = 34;\n  private $salary = 4200.00;\n  protected $identifier = 'ABC';\n}\n\n$user = new User();\nvar_export($user); // outputs string \"User::__set_state...\"\nvar_export($user, true); // returns string \"User::__set_state...\"\n\n```", "```php\nUser::__set_state(array(\n 'name' => 'John',\n 'age' => 34,\n 'salary' => 4200.0,\n 'identifier' => 'ABC',\n))\n\nstring(113) \"User::__set_state(array(\n 'name' => 'John',\n 'age' => 34,\n 'salary' => 4200.0,\n 'identifier' => 'ABC',\n))\"\n\n```", "```php\n<?php\n\nclass User\n{\n  public $name = 'John';\n  public $age = 34;\n  private $salary = 4200.00;\n  protected $identifier = 'ABC';\n\n  public static function __set_state($properties)\n  {\n    $user = new User();\n\n    $user->name = $properties['name'];\n    $user->age = $properties['age'];\n    $user->salary = $properties['salary'];\n    $user->identifier = $properties['identifier'];\n\n    return $user;\n  }\n}\n\n$user = new User();\n$user->name = 'Mariya';\n$user->age = 32;\n\neval('$obj = ' . var_export($user, true) . ';');\n\nvar_dump($obj);\n\n```", "```php\nobject(User)#2 (4) {\n  [\"name\"]=> string(6) \"Mariya\"\n  [\"age\"]=> int(32)\n  [\"salary\":\"User\":private]=> float(4200)\n  [\"identifier\":protected]=> string(3) \"ABC\"\n}\n\n```", "```php\nvoid __clone(void)\n\n```", "```php\n<?php\n\nclass User\n{\n  public $identifier;\n\n  public function __clone()\n  {\n    $this->identifier = null;\n  }\n}\n\n$user = new User();\n$user->identifier = 'john';\n\n$user2 = clone $user;\n\nvar_dump($user);\nvar_dump($user2);\n\n```", "```php\nobject(User)#1 (1) {\n  [\"identifier\"]=> string(4) \"john\"\n}\n\nobject(User)#2 (1) {\n  [\"identifier\"]=> NULL\n}\n\n```", "```php\narray __debugInfo(void)\n\n```", "```php\n<?php\n\nclass User\n{\n  public $name = 'John';\n  public $age = 34;\n  private $salary = 4200.00;\n  private $bonus = 680.00;\n  protected $identifier = 'ABC';\n  protected $logins = 67;\n\n  public function __debugInfo()\n  {\n    return [\n      'name' => $this->name,\n      'income' => $this->salary + $this->bonus\n    ];\n  }\n}\n\n$user = new User();\n\nvar_dump($user);\n\n```", "```php\nobject(User)#1 (2) {\n  [\"name\"]=> string(4) \"John\"\n  [\"income\"]=> float(4880)\n}\n\n```"]