- en: Functional JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式JavaScript
- en: The future of JavaScript will be functional. Indeed, many changes that were
    brought to the language in the last few years are allowing for easier and more
    efficient implementations when using functional programming techniques.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript的未来将是函数式的。事实上，过去几年对语言所做的许多更改都使得在使用函数式编程技术时更容易、更高效的实现成为可能。
- en: 'In this chapter, we will see how JavaScript is increasingly becoming a functional
    language and how this programming paradigm can be a vector for performance. We
    will learn how replacing overly complex code with simplified functional versions
    and how using immutability and tail-call optimization will help make JavaScript
    more efficient in the long run. Thus, we will cover the following points:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到JavaScript如何越来越成为一种函数式语言，以及这种编程范式如何成为性能的一个向量。我们将学习如何用简化的函数版本替换过于复杂的代码，以及如何使用不可变性和尾调用优化将有助于使JavaScript在长期内更加高效。因此，我们将涵盖以下几点：
- en: Simplifying functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化函数
- en: Functional programming techniques
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数式编程技术
- en: More upcoming JavaScript features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多即将推出的JavaScript功能
- en: Simplifying functions
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化函数
- en: Traditionally, computer science students are told to keep their functions simple.
    It is often said that one function should correspond to one single action. Indeed,
    the more a function has cyclomatic complexity, the harder it is to reuse, maintain
    and test. The more a function becomes a purely logical being that has no real-world
    roots in a clearly identifiable action, the harder it is to grasp and use in combination
    with other functions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，计算机科学学生被告知保持他们的函数简单。经常说一个函数应该对应一个单一的动作。事实上，函数的圈复杂度越高，它就越难以重用、维护和测试。函数变得越来越纯粹的逻辑实体，没有真实世界中清晰可识别的动作根源，它就越难以理解和与其他函数结合使用。
- en: Functional programming principles
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程原则
- en: The **functional programming** (**FP**) paradigm pushes this reasoning further
    by considering computational design as being based on mathematical functions and
    the immutability of state and data. FP's guiding principle is that the entire
    computer program should be a single, referentially transparent expression. At
    its core, the concept of FP requires that functions be pure, referentially transparent
    and free of side effects. A function is pure when, given the same input, it always
    returns the same output. It is referentially transparent when its functional expression
    is interchangeable with its corresponding value anywhere inside a computer program.
    It is free of side effects when it does not modify an application's state outside
    of its scope. Thus, for example, modifying a variable that is declared outside
    of its scope or echoing a message to a screen are considered to be functional
    side effects that must be avoided as much as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数式编程**（**FP**）范式通过将计算设计视为基于数学函数和状态和数据的不可变性而进一步推动这种推理。FP的指导原则是整个计算机程序应该是一个单一的、引用透明的表达式。在其核心，FP的概念要求函数是纯的、引用透明的，并且没有副作用。当给定相同的输入时，函数是纯的，它总是返回相同的输出。当其函数表达式可以在计算机程序的任何地方与其相应的值互换时，它是引用透明的。当它不修改其范围之外的应用程序状态时，它是没有副作用的。因此，例如，修改在其范围之外声明的变量或向屏幕回显消息被认为是必须尽可能避免的函数副作用。'
- en: 'An example of a pure function would be as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数的一个例子如下：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next function is not pure, because there are two side effects:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个函数不是纯的，因为有两个副作用：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A referentially transparent function can be replaced, anywhere inside the code,
    with a constant that equals the functional expression''s computed value:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 引用透明函数可以在代码的任何地方替换为等于函数表达式计算值的常量：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For example, this function is not referentially transparent:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个函数不是引用透明的：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Amongst the most notable JavaScript functions that are not referentially transparent
    and that generate side effects, we can mention these: `Date`, `Math.random`, `delete`,
    `Object.assign`, `Array.splice`, `Array.sort`, and `RegExp.exec`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在最显著的JavaScript函数中，不是引用透明的并且产生副作用的有：`Date`、`Math.random`、`delete`、`Object.assign`、`Array.splice`、`Array.sort`和`RegExp.exec`。
- en: 'There are many advantages of keeping functions simple and pure. The most important
    ones are:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 保持函数简单和纯净有许多优点。最重要的是：
- en: Simpler critical paths, whereby the developer's cognitive burden is reduced
    when trying to maintain or update an application
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化关键路径，开发人员在尝试维护或更新应用程序时减少认知负担
- en: Easier testing of functions
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易测试函数
- en: Free compiler optimizations, whereby a compiler might decide to replace a functional
    expression with its corresponding constant value at compile time, rather than
    computing the function each time
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费编译器优化，编译器可能决定在编译时用相应的常量值替换函数表达式，而不是每次计算函数
- en: Future performance boosts due to runtime optimizations
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来由于运行时优化而提高的性能
- en: Safe multithreading by avoiding race conditions due to application state mutability
    (JavaScript is single threaded for now, but who knows what the future holds)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过避免应用程序状态的可变性而实现安全的多线程（JavaScript目前是单线程的，但谁知道未来会发生什么）
- en: Functions as first-class citizens
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数作为一等公民
- en: Functions as first-class citizens is a principle that states that functions
    should be considered to be just like any other datatype. When this is allowed
    within a language, functions can become higher-order functions whereby any function
    can be received as a parameter and returned as a computational value from any
    other function, just as any other datatype would.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 函数作为一等公民是一个原则，它规定函数应该被视为与任何其他数据类型一样。当语言允许这种情况时，函数可以成为高阶函数，其中任何函数都可以作为参数接收，并且可以从任何其他函数返回计算值，就像任何其他数据类型一样。
- en: When functions are pure and referentially transparent, they can more easily
    be used as first-class citizen functions. Thus, it becomes easier to combine functions
    together in order to dynamically produce other functions. This is what is known
    as function composition. Currying, by which a new function is dynamically generated
    to translate the evaluation of its single argument to another function with multiple
    arguments, and partial application, by which a new dynamically generated function
    with less arity will fix the number of arguments of another function, are the
    two main ways to combine functions together. As we will see later in this chapter,
    ES2020 is getting ready to introduce these concepts into the JavaScript programming
    language.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数是纯的并且引用透明时，它们可以更容易地被用作一等公民函数。因此，更容易将函数组合在一起以动态产生其他函数。这就是所谓的函数组合。柯里化是一种动态生成新函数的方法，将其单个参数的评估转换为具有多个参数的另一个函数，并且部分应用是一种新动态生成的函数，其参数数量较少将修复另一个函数的参数数量。正如我们将在本章后面看到的，ES2020正准备将这些概念引入JavaScript编程语言中。
- en: Dealing with side effects
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理副作用
- en: What should we do with input and output, networking, user input and user interfaces
    if they are necessary to avoid all forms of side effects? According to FP principles,
    these interactions with the real world are to be encapsulated inside special data
    structures. Even though the contained value or values remains unknown until runtime,
    these special data structures make it possible to map a function to one or more
    wrapped values (functor), to map a wrapped function to one or more wrapped values
    (applicative) or to map a wrapped function that returns an instance of its own
    data structure type to one or more wrapped values (monad). This way, side effects
    remain segregated from pure functions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要避免所有形式的副作用，我们应该如何处理输入和输出、网络、用户输入和用户界面？根据FP原则，与现实世界的这些交互应该封装在特殊的数据结构中。即使包含的值在运行时仍然是未知的，这些特殊的数据结构使得可以将函数映射到一个或多个包装值（函子），将包装函数映射到一个或多个包装值（应用程序）或将返回其自身数据结构类型实例的包装函数映射到一个或多个包装值（单子）。这样，副作用就与纯函数分离开来。
- en: Immutability
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可变性
- en: Another important principle of FP is immutability. Modifying state and data
    generates cyclomatic complexity and makes any computer program prone to bugs and
    to inefficiency in general. Indeed, all variables should, in fact, be immutable.
    A variable should never change its value, from the moment it is allocated to memory
    until the moment it is deallocated, in order to avoid changing the state of the
    application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: FP的另一个重要原则是不可变性。修改状态和数据会产生圈复杂度，并使任何计算机程序容易出现错误和低效。事实上，所有变量实际上都应该是不可变的。变量从分配到内存的时刻直到释放的时刻都不应该改变其值，以避免改变应用程序的状态。
- en: 'Since ES6, it is now possible to use the `const` keyword to define a constant
    or immutable variable. Here is an example of its usage:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 自ES6以来，现在可以使用`const`关键字来定义常量或不可变变量。以下是一个示例：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This added feature now makes it possible to prevent the modifications of variables
    through assignments. This way, it is possible to protect a JavaScript application's
    state from mutation during its entire runtime.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新增的功能现在可以防止通过赋值修改变量。这样，就可以在整个运行时期保护JavaScript应用程序的状态免受突变的影响。
- en: 'Whenever possible, the developer should always prefer using `const` over `let`
    or `var`. Trying to modify a variable that was declared using the `const` keyword
    will cause the following error (`chap8_js_const_1.html`):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，开发人员应始终优先使用`const`而不是`let`或`var`。尝试修改使用`const`关键字声明的变量将导致以下错误（`chap8_js_const_1.html`）：
- en: '![](assets/955b0b5c-7a4f-4818-bc13-9efe8dc21f06.png)Assigning to a constant
    variable causes a ''TypeError'''
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/955b0b5c-7a4f-4818-bc13-9efe8dc21f06.png)给常量变量赋值会导致''TypeError'''
- en: Functional programming techniques
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程技术
- en: Since ES6, JavaScript has made it easier to implement software solutions using
    FP. Many engine optimizations have been added that allow for better performance
    when programming JavaScript according to FP principles. Mapping, filtering, reducing
    and tail-call optimization are some of these techniques.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 自ES6以来，JavaScript已经更容易使用FP实现软件解决方案。许多引擎优化已经添加，使得根据FP原则编程JavaScript时可以获得更好的性能。映射、过滤、减少和尾调用优化是其中的一些技术。
- en: Map
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射
- en: 'Map is a higher-order function that allows us to map a callback to each element
    of a collection. It is particularly useful when translating all elements of an
    array from one set of values to another. Here is a simple code example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 映射是一种高阶函数，它允许我们将回调映射到集合的每个元素。当将数组的所有元素从一组值转换为另一组值时，它特别有用。以下是一个简单的代码示例：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This technique makes it possible to avoid using structural loops as much as
    possible when simply modifying the values of an array.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术使得在简单修改数组的值时尽可能避免使用结构循环成为可能。
- en: Filter
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤
- en: 'Filter is a higher-order function that allows us to distinguish and keep only
    certain elements of a collection based on a Boolean predicate. Of course, filtering
    is particularly useful when removing certain elements from a collection based
    on a certain condition. Take the following code as an example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤是一种高阶函数，它允许我们根据布尔谓词区分和保留集合中的某些元素。当根据特定条件从集合中移除某些元素时，过滤当然是非常有用的。以以下代码为例：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Filtering is a great way to avoid loops and nested conditions in order to extract
    some desired dataset.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤是避免循环和嵌套条件以提取所需数据集的一种很好的方法。
- en: Reduce
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少
- en: 'Reduce is a higher-order function that allows us to combine elements of a collection
    into a single returned value based on a combining function. This technique is
    really useful when dealing with cumulative or concatenated values. In the following
    example, we are calculating the sum of the array’s elements:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Reduce是一个高阶函数，它允许我们根据组合函数将集合的元素合并为一个返回值。当处理累积或连接值时，这种技术非常有用。在下面的例子中，我们正在计算数组元素的总和：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Another FP technique that we will have a look at is tail-call optimization.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再看一种FP技术，即尾调用优化。
- en: Tail-call optimization
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尾调用优化
- en: In order to better understand what **tail-call optimization** (**TCO**) is,
    we will need to define what it is, understand how it works and learn how to determine
    if a function is tail-called or not.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解**尾调用优化**（**TCO**）是什么，我们需要定义它是什么，了解它是如何工作的，并学习如何确定一个函数是否被尾调用。
- en: What is TCO?
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是尾调用优化？
- en: Tail-calling, or tail recursion, is a functional programming technique by which
    a function calls a subroutine function as its final procedure before returning
    control to its own caller. Direct recursion occurs when a function calls itself
    recursively. Recursion is mutual, or indirect, if a function calls another function
    which, in turn, calls the original function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 尾调用或尾递归是一种函数式编程技术，其中一个函数在返回控制权给自己的调用者之前调用一个子例程函数作为其最终过程。如果一个函数递归地调用自身，则发生直接递归。如果一个函数调用另一个函数，而另一个函数又调用原始函数，则递归是相互的或间接的。
- en: Thus, for example, when a function tail-calls itself, it stacks itself over
    and over again until a certain condition is met, at which point it will definitely
    return, thus effectively popping the entire call stack.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，例如，当一个函数尾调用自身时，它会一遍又一遍地将自己堆叠，直到满足某个条件为止，此时它一定会返回，从而有效地弹出整个调用堆栈。
- en: Optimizing tail-calls consists of popping the current function from the call
    stack before performing the tail-call and keeping the current function's caller
    address as the return address for the tail-call. Thus, the memory footprint of
    the stack remains small and stack overflow is in fact avoided altogether.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 优化尾调用包括在执行尾调用之前从调用堆栈中弹出当前函数，并将当前函数的调用者地址保留为尾调用的返回地址。因此，堆栈的内存占用保持较小，实际上完全避免了堆栈溢出。
- en: How TCO works
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尾调用优化的工作原理
- en: 'Let''s compare two stack frames, one without TCO and the other with TCO. Let''s
    have a look at the following code first:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较两个堆栈帧，一个没有尾调用优化，另一个有尾调用优化。首先让我们看一下以下代码：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once allocated to memory, without using TCO, the three stack frames from of
    the previous code would look like the following diagram:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有使用尾调用优化的情况下，分配给内存后，前面代码的三个堆栈帧将如下图所示：
- en: '![](assets/6827868d-40db-4ec7-b97b-104901360e92.jpg)A typical last-in, first-out
    (LIFO) call stack'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的后进先出（LIFO）调用堆栈
- en: Once value 6 is assigned to variable `z`, the stack frame is ready to be popped.
    In this case, stack frame **2** is kept entirely in memory only to keep the address
    of `console.log()`. This is where TCO can make a difference. If, before calling
    `b()`, stack frame **2** were to be popped from the stack while keeping the original
    caller's return address intact, only one function would get stacked at any given
    moment at runtime and stack space would be reduced.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将值6分配给变量`z`，堆栈帧就准备好被弹出。在这种情况下，堆栈帧**2**仅保留在内存中，只是为了保留`console.log()`的地址。这就是尾调用优化可以产生差异的地方。如果在调用`b()`之前，堆栈帧**2**被从堆栈中弹出，同时保持原始调用者的返回地址不变，那么在运行时只会有一个函数被堆叠，堆栈空间将会减少。
- en: 'The entire stack would only count two stack frames no matter how many times
    functions would get tail-called. A tail-called optimized stack would therefore
    look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 无论函数被尾调用多少次，整个堆栈只会计算两个堆栈帧。因此，经过尾调用优化的堆栈看起来会像这样：
- en: '![](assets/a6a59afc-3610-47a7-89a4-df099ac36392.png)A tail-call optimized call
    stack'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尾调用优化的调用堆栈
- en: Some have stated that implementing TCO would be a bad idea in certain JavaScript
    implementations, as doing so would disrupt the actual execution flow of an application,
    make debugging harder and break telemetry software in general. This might be the
    case for certain JavaScript implementations, but it is certainly not true in the
    absolute sense. Technically speaking, implementing TCO might prove to be difficult
    due to technical debt in certain JavaScript implementations, but it is certainly
    not necessary to require a syntactic flag for something that should be implicit
    in any language, especially when using a strict mode flag.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一些人声称，在某些JavaScript实现中实现尾调用优化会是一个坏主意，因为这样做会破坏应用程序的实际执行流程，使调试变得更加困难，并且一般会破坏遥测软件。在某些JavaScript实现中，这可能是真的，但绝对不是绝对的。从技术上讲，由于某些JavaScript实现中存在技术债务，实现尾调用优化可能会很困难，但绝对不需要为某些应该在任何语言中都是隐含的东西而要求一个语法标志，特别是在使用严格模式标志时。
- en: 'This being said, not all browsers and JavaScript projects have implemented
    this ES6 feature yet, but it is a question of time before they will have to do
    it and developers should be ready for this major change. Indeed, this change from
    the structural to the functional paradigm will make it possible to make very efficient
    loops using functions rather than well-known loop structures. The main advantages
    of programming according to these new principles will be:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，并非所有浏览器和JavaScript项目都已经实现了这个ES6功能，但它只是时间问题，他们迟早都得这么做，开发人员应该为这一重大变化做好准备。事实上，从结构范式到函数范式的这一变化将使得使用函数而不是众所周知的循环结构来制作非常高效的循环成为可能。根据这些新原则进行编程的主要优势将是：
- en: Greater efficiency by consuming less memory and taking less time to complete
    large-sized loops
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过消耗更少的内存和花费更少的时间来完成大型循环，从而提高效率
- en: Less cyclomatic complexity and simplified critical paths
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少圈复杂度和简化关键路径
- en: A reduced number of lines of code and less cognitive burden for the developer
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码行数减少，开发人员的认知负担减轻
- en: Encapsulated and well-organized code
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封装和组织良好的代码
- en: Better tested code in general
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般来说，更好地测试代码
- en: As of the time of writing, only Safari 11, iOS 11, Kinoma XS6 and Duktape 2.2
    fully support tail-call optimization.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 截至撰写本文时，只有Safari 11、iOS 11、Kinoma XS6和Duktape 2.2完全支持尾调用优化。
- en: 'Let''s take the two following code examples (`chap8_js_performance_1.html`
    and `chap8_js_performance_2.html`) in order to compare the performance of a traditional
    `for` loop with a tail-call optimized function. Here is the first example:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看两个代码示例（`chap8_js_performance_1.html`和`chap8_js_performance_2.html`），以比较传统的`for`循环与尾调用优化函数的性能。以下是第一个示例：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the second:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第二个：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If we benchmark these two scripts, we will notice that there is not that much
    of a difference between the two, except that the one that uses tail-calls can
    be more easily unit tested, has a very simple critical path and could easily be
    memoized as it is still referentially transparent even if not pure for obvious
    reasons.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对这两个脚本进行基准测试，我们会注意到它们之间没有太大的区别，除了使用尾调用的那个更容易进行单元测试，具有非常简单的关键路径，并且即使出于明显的原因而不是纯的，它仍然可以很容易地进行记忆化。
- en: 'Here are the results for the first script:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第一个脚本的结果：
- en: '![](assets/3e1b8d2e-4d1d-4cf0-8ef9-1be527cdd7c3.png)The results when using
    a structural ''for'' loop'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用结构化'for'循环时的结果
- en: 'And, the results of the second script are:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个脚本的结果是：
- en: '![](assets/bb839aba-3e5f-40ce-b355-994e4177fcf7.png)The results when using
    stacked functions that are tail-call optimized'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用经过尾调用优化的堆叠函数时的结果
- en: Now, let's try to have a better grasp of this ES6 feature through a few code
    examples that will allow us to better recognize the different ways in which tail-calls
    can be used.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一些代码示例更好地了解这个ES6功能，以便更好地识别尾调用的不同用法。
- en: Recognizing tail-calls
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别尾调用
- en: As mentioned previously, tail-calls occur when a subroutine callee is called
    as the last procedure of the current function. There are many ways in which this
    can happen.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，尾调用发生在子例程被调用为当前函数的最后一个过程时。这种情况有很多种。
- en: 'If you are using a ternary operator in the following manner, both the `one()`
    and `two()` functions are tail-calls:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以以下方式使用三元运算符，则`one()`和`two()`函数都是尾调用：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following code example is not a tail-call, because the callee is called
    from within the body of the function and could be used to do further computation
    instead of simply being returned to the caller:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例不是尾调用，因为被调用者是从函数体内部调用的，可以用于进一步计算，而不仅仅是返回给调用者：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is another example where one callee is not in a tail-call position:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是另一个示例，其中一个被调用者不处于尾调用位置：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The reason is that the `one()` function can be combined with other computations
    in this context, whereas the `two()` function cannot and its returned value will
    simply be assigned to the `a` constant. The same would apply if we were to use
    logical operators instead of a comma as seen in this example.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是在这种情况下，`one()`函数可以与其他计算结合在一起，而`two()`函数不能，其返回值将简单地分配给`a`常量。如果我们使用逻辑运算符而不是逗号，那么同样的情况也会发生。
- en: Let's continue with other upcoming JavaScript features.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续了解其他即将推出的JavaScript功能。
- en: More upcoming JavaScript features
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多即将推出的JavaScript功能
- en: Many other features will soon be added to JavaScript that will push the language
    further down the road of functional and asynchronous programming. Let's have a
    look at a few of them.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他功能将很快添加到JavaScript中，这将进一步推动语言朝着功能性和异步编程的方向发展。让我们来看看其中的一些。
- en: Async functions
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步函数
- en: Because of asynchronous programming, the need for FP will be felt even more
    when generators will be used to do so and when avoiding race conditions will become
    even more important than it is now.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于异步编程，当生成器用于此目的时，对FP的需求将会更加迫切，避免竞争条件将变得比现在更加重要。
- en: 'Indeed, ES2017 introduced `async` / `await` functions. These functions will
    allow us to easily create an `event` loop and make asynchronous I/O calls from
    within the loop in order to obtain non-blocking code. There will be many practical
    applications of this, including the possibility of speeding up web page loading
    times by asynchronously downloading complimentary JavaScript files after rendering
    is completed. Here is a code example using these types of functions:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，ES2017引入了`async` / `await`函数。这些函数将允许我们轻松创建一个`event`循环，并在循环内部进行异步I/O调用，以获得非阻塞代码。这将有许多实际应用，包括在渲染完成后异步下载补充的JavaScript文件以加快网页加载时间的可能性。以下是使用这些类型函数的代码示例：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Async generators and for-await-of loops
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步生成器和for-await-of循环
- en: 'ES2018 defines the specifications for async generators and `for-await-of` loops.
    These features are already available in most browsers and will be of great help
    when programming asynchronously in JavaScript. They will mostly simplify the creation
    of queues and loops when iterating over async requests. Moreover, using async
    iterators, iterables and generators with async calls will be made very easy with
    the use of promises. Here is a simple code example using these new features:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ES2018定义了异步生成器和`for-await-of`循环的规范。这些功能已经在大多数浏览器中可用，并且在JavaScript中进行异步编程时将非常有帮助。它们将大大简化在异步请求上进行迭代时创建队列和循环。此外，使用异步迭代器、可迭代对象和生成器与异步调用将通过使用promises变得非常容易。以下是使用这些新功能的简单代码示例：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Pipeline operator
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道操作符
- en: 'An ES2020 proposal is in the works to include more FP concepts such as easy
    function chaining using a pipeline operator. Thus, chaining functions will be
    made much simpler. Instead of doing something similar to this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ES2020提案正在制定中，其中包括更多FP概念，例如使用管道操作符进行简单的函数链接。因此，链接函数将变得更加简单。而不是做类似于这样的事情：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We would only need to do this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要这样做：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Partial application
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分应用
- en: 'A very important FP technique is also amongst the ES2020 proposals: partial
    application. As mentioned earlier, this FP technique makes it possible to fix
    a number of arguments to a function by producing a new dynamically generated function
    with less arity. Here is a simple code example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ES2020提案中还有一个非常重要的FP技术：部分应用。如前所述，这种FP技术可以通过生成一个参数更少的新动态生成的函数，来固定函数的一些参数。以下是一个简单的代码示例：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The ES2020 proposal suggests that partial application could be performed as
    follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ES2020提案建议，可以通过以下方式执行部分应用：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Of course, we could mention many other FP techniques that could find their way
    into the ES2020 specifications, such as function binding, currying and pattern
    matching, but what one must know is that JavaScript is increasingly becoming a
    functional language and that many future engine optimizations will automatically
    enhance overall performance of any executed code if it is written with FP principles
    in mind.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还可以提到许多其他FP技术，这些技术可能会出现在ES2020规范中，比如函数绑定、柯里化和模式匹配，但必须知道的是，JavaScript越来越成为一种函数式语言，并且许多未来的引擎优化将自动增强任何执行的代码的整体性能，如果它是根据FP原则编写的。
- en: For further information on functional programming and functional JavaScript,
    please get one of the many good books and videos on these subjects that have been
    published by Packt Publishing in recent years.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有关函数式编程和函数式JavaScript的更多信息，请阅读Packt Publishing近年来出版的许多优秀书籍和视频。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We now have a better understanding of why JavaScript is increasingly becoming
    a functional language and how this programming paradigm can be a vector for performance.
    We have learned how replacing overly complex code with simplified functional versions
    and how using immutability and tail-call optimization can help make JavaScript
    more efficient. We also got a quick glimpse of the upcoming features of the JavaScript
    language.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在更好地理解了为什么JavaScript越来越成为一种函数式语言，以及这种编程范式如何成为性能的一个向量。我们了解了如何用简化的函数式版本替换过于复杂的代码，以及如何使用不可变性和尾调用优化来提高JavaScript的效率。我们还简要了解了JavaScript语言即将推出的功能。
- en: In the next chapter, we will have a look at a few projects that have went along
    with Google's Faster Web initiative over the years and we will see how it is possible
    to combine these technologies in order to boost overall web server performance.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一些项目，这些项目多年来一直与谷歌的更快网络计划一起进行，并且我们将看到如何结合这些技术以提高整体网络服务器性能。
