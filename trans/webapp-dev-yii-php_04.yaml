- en: Chapter 4. Project CRUD
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。项目CRUD
- en: Now that we have a basic application in place and configured to communicate
    with our database, we can begin to work on some real features of our application.
    We know that the "project" is one of the most fundamental components in our application.
    A user cannot do anything useful with the TrackStar application without first
    either creating or choosing an existing project within which to add tasks and
    other issues. For this reason, we want to first turn our focus to getting some
    project functionality into the application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个基本的应用程序，并配置好与我们的数据库通信，我们可以开始着手一些我们应用程序的真正功能。我们知道"项目"是我们应用程序中最基本的组件之一。用户在TrackStar应用程序中不能做任何有用的事情，而不是首先创建或选择一个现有的项目，然后在其中添加任务和其他问题。因此，我们首先要把注意力转向将一些项目功能加入应用程序。
- en: Feature planning
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能规划
- en: At the end of our efforts in this chapter, our application should allow users
    to create new projects, select from a list of existing projects, update/edit existing
    projects, and delete existing projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的努力结束时，我们的应用程序应该允许用户创建新项目，从现有项目列表中选择，更新/编辑现有项目，并删除现有项目。
- en: 'In order to achieve this goal, we should identify the more granular tasks on
    which to focus. The list below identifies a list of tasks we aim to accomplish
    within this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个目标，我们应该确定更加细粒度的任务来关注。下面的列表确定了我们在本章内的任务清单：
- en: Design the database schema to support projects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计数据库架构以支持项目
- en: Build the necessary tables and all other database objects identified in the
    schema
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建架构中标识的必要表和所有其他数据库对象
- en: Create the Yii AR model classes needed to allow the application to easily interact
    with the created database table(s)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Yii AR模型类，以便应用程序可以轻松地与创建的数据库表进行交互
- en: 'Create the Yii controller class(es) that will house the functionality to do
    the following:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Yii控制器类，用于包含以下功能：
- en: Create new projects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新项目
- en: Retrieve a list of existing projects for display
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索现有项目列表以显示
- en: Update the data associated with existing projects
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新与现有项目相关的数据
- en: Delete existing projects
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除现有项目
- en: 'Create the Yii view files and presentation tier logic that will:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Yii视图文件和表示层逻辑，将：
- en: Display the form to allow for new project creation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示表单以允许创建新项目
- en: Display a listing of all the existing projects
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示所有现有项目的列表
- en: Display the form to allow for a user to edit an existing project
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示表单以允许用户编辑现有项目
- en: Add a delete button to the project listing to allow for project deletion
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目列表中添加删除按钮，以允许删除项目
- en: This is certainly enough to get us started.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对足够让我们开始了。
- en: Creating the project table
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目表
- en: Back in [Chapter 3](ch03.html "Chapter 3. The TrackStar Application"), *The
    TrackStar Application*, we talked about the basic data that represents a project,
    and we decided that we would use a MySQL relational database to build the persistence
    layer of this application. Now we need to design and build the table that will
    persist our project data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[第3章](ch03.html "第3章。TrackStar应用程序") *TrackStar应用程序*，我们谈到了代表项目的基本数据，并且我们决定我们将使用MySQL关系数据库来构建这个应用程序的持久层。现在我们需要设计和构建将持久化我们项目数据的表。
- en: We know projects need to have a name and a description. We are also going to
    keep some basic table auditing information on each table by tracking the time
    a record was created and updated, as well as who created and updated the record.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道项目需要有名称和描述。我们还将在每个表上保留一些基本的表审计信息，通过跟踪记录创建和更新的时间，以及谁创建和更新记录。
- en: 'Based on these properties, the following is how the project table will look:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些属性，项目表将如下所示：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, before we jump right in and just use our favorite MySQL database editor
    to create this table, we need to talk about how we can use Yii to manage the changes
    that will take place in our database schema as we build our TrackStar application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们直接使用我们喜爱的MySQL数据库编辑器来创建这个表之前，我们需要讨论一下我们如何使用Yii来管理我们的数据库架构的变化，因为我们构建我们的TrackStar应用程序时会发生变化。
- en: Yii database migrations
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yii数据库迁移
- en: We know it is a good practice to track version changes of our application source
    code. As you are following along in building our TrackStar application, it would
    be wise to use version control software such as SVN or GIT to help manage all
    the changes we make to our codebase along the way. If our codebase changes get
    out of sync with our database changes, it is likely that our entire application
    will break. So, it would also be really great to manage the structural changes
    we will be making to our database along the way.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道跟踪应用程序源代码的版本更改是一个好习惯。当您在构建我们的TrackStar应用程序时，使用版本控制软件如SVN或GIT来帮助管理我们在代码库中所做的所有更改是明智的。如果我们的代码库更改与数据库更改不同步，很可能我们整个应用程序都会崩溃。因此，管理我们将在数据库中进行的结构更改也是非常重要的。
- en: Yii helps us out in this regard. Yii provides a database migration tool that
    keeps track of database migration history and allows us to apply new migrations
    as well as revert existing migrations to allow us to restore the database structure
    to a previous state.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Yii在这方面帮助了我们。Yii提供了一个数据库迁移工具，用于跟踪数据库迁移历史，并允许我们应用新的迁移，以及回滚现有的迁移，以便我们将数据库结构恢复到先前的状态。
- en: 'The Yii migration utility is a console command that we use with the `yiic`
    command-line tool. As a console command, it uses a configuration file specific
    to console commands, which, by default, is `protected/config/console.php`. We
    need to properly configure our database component in this file. Just as we did
    in our `main.php config` file, we need to define our `db` component to use our
    MySQL database. If you open up the `protected/config/console.php` configuration
    file, you''ll see that it already has a MySQL configuration defined, but it is
    commented out. Let''s remove the SQLite configuration and uncomment the MySQL
    configuration, changing the username and password as appropriate for your database
    settings:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Yii迁移实用程序是一个控制台命令，我们使用`yiic`命令行工具。作为控制台命令，它使用一个特定于控制台命令的配置文件，默认情况下是`protected/config/console.php`。我们需要在这个文件中正确配置我们的数据库组件。就像我们在`main.php`配置文件中所做的那样，我们需要定义我们的`db`组件来使用我们的MySQL数据库。如果你打开`protected/config/console.php`配置文件，你会看到它已经定义了一个MySQL配置，但是被注释掉了。让我们删除SQLite配置并取消注释MySQL配置，根据你的数据库设置更改用户名和密码：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we have our configuration change in place, we can proceed to create
    the migration. To do so, we use the `yiic` command-line utility tool with the
    `migrate` command. Creating a migration takes the general form of:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了配置更改，可以继续创建迁移。为此，我们使用`yiic`命令行实用工具和`migrate`命令。创建迁移的一般形式如下：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, the required `name` parameter allows us to specify a brief description
    of the database change we are making. The `name` parameter is used as part of
    the migration filename and PHP class name. Therefore, it should only contain letters,
    digits, or underscore characters. Yii takes the input name parameter, and appends
    a UTC timestamp (in the format of *yymmdd_hhmmss*), with the letter *m* for migration,
    to use as both the filename and the PHP class name. Let''s go ahead and create
    a new migration for our project table, and this naming convention will be made
    clearer. From the command line, navigate to the application `protected/` directory
    and then issue the command to create a new migration using the name `create_project_table`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，必需的`name`参数允许我们指定我们正在进行的数据库更改的简要描述。`name`参数用作迁移文件名和PHP类名的一部分。因此，它应该只包含字母、数字或下划线字符。Yii接受输入的名称参数，并附加一个UTC时间戳（格式为*yymmdd_hhmmss*），并在其后加上字母*m*以用作文件名和PHP类名。让我们继续为我们的项目表创建一个新的迁移，这个命名约定将更加清晰。从命令行中，导航到应用程序的`protected/`目录，然后发出使用名称`create_project_table`创建新迁移的命令：
- en: '![Yii database migrations](graphics/8727_04_17.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Yii数据库迁移](graphics/8727_04_17.jpg)'
- en: 'This creates the file `/Webroot/trackstar/protected/migrations/m121108_195611_create_project_table.php`
    with the following content:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建文件`/Webroot/trackstar/protected/migrations/m121108_195611_create_project_table.php`，内容如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Of course, we''ll have to make some changes to this file in order to have it
    create our new table. We implement the `up()` method to apply our desired database
    changes and we implement the `down()` method to revert these changes, which will
    allow us to revert to a previous version of our database structure. The `safeUp()`
    and `safeDown()` methods are similar, but they will execute the changes within
    a database transaction in order to treat the entire migration as an atomic unit
    to be executed in an all-or-nothing manner. In this case, the change we want to
    apply is to create a new table, and we can revert this change by dropping the
    table. These changes are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们将不得不对这个文件进行一些更改，以便它创建我们的新表。我们实现`up()`方法来应用我们所需的数据库更改，并实现`down()`方法来撤消这些更改，这将允许我们恢复到数据库结构的先前版本。`safeUp()`和`safeDown()`方法类似，但它们将在数据库事务中执行更改，以便将整个迁移作为原子单元以一种全有或全无的方式执行。在这种情况下，我们要应用的更改是创建一个新表，我们可以通过删除表来撤消这些更改。这些更改如下：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After saving our changes, we can execute the migration. From still within the
    `protected/` directory, execute the migration as such:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改后，我们可以执行迁移。在`protected/`目录中，执行以下迁移：
- en: '![Yii database migrations](graphics/8727_04_18.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Yii数据库迁移](graphics/8727_04_18.jpg)'
- en: Using the migrate command with no arguments will result in migrating up (that
    is executing the `up()` method) for every migration that has not yet been applied.
    And, since this is the first time we have run a migration, Yii is going to create
    a new migration history table, `tbl_migration`, for us automatically. Yii uses
    this table to keep track of what migrations have already been applied. If we specify
    *down* as a command-line argument to the migrate command, the last applied migration
    will be reverted by running the `down()` method of that migration.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不带参数的迁移命令将导致对尚未应用的每个迁移执行迁移（即执行`up()`方法）。而且，由于这是我们第一次运行迁移，Yii将自动为我们创建一个新的迁移历史表`tbl_migration`。Yii使用此表来跟踪已经应用的迁移。如果我们在迁移命令的命令行参数中指定*down*，则将通过运行该迁移的`down()`方法来撤消最后应用的迁移。
- en: Now that we have applied our migration, our new `tbl_project` table has now
    been created and is ready for us to use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经应用了迁移，我们的新的`tbl_project`表已经被创建并准备好供我们使用。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We''ll be using Yii migrations throughout the book as we develop our TrackStar
    application, so we''ll continue to learn more about them as we use them. For more
    detailed information on Yii migrations, see:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发我们的TrackStar应用程序时，我们将在整本书中使用Yii迁移，因此在使用它们时我们将继续学习更多关于它们的知识。有关Yii迁移的更详细信息，请参见：
- en: '[http://www.yiiframework.com/doc/guide/1.1/en/database.migration](http://www.yiiframework.com/doc/guide/1.1/en/database.migration)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.yiiframework.com/doc/guide/1.1/en/database.migration](http://www.yiiframework.com/doc/guide/1.1/en/database.migration)'
- en: Naming conventions
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名约定
- en: You may have noticed that we defined our database table as well as all of the
    column names in lowercase. Throughout our development, we will use lowercase for
    all table names and column names. This is primarily because different DBMSs handle
    case sensitivity differently. As one example, **PostgreSQL** treats column names
    as case insensitive by default, and we must quote a column in a query condition
    if the column contains mixed-case letters. Using lowercase would help eliminate
    this problem.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到我们将数据库表以及所有列名都定义为小写。在整个开发过程中，我们将使用小写来表示所有表名和列名。这主要是因为不同的DBMS以不同的方式处理大小写敏感性。例如，**PostgreSQL**默认情况下将列名视为不区分大小写，如果列包含混合大小写字母，则必须在查询条件中引用列。使用小写将有助于消除这个问题。
- en: You may have also noticed that we used a `tbl_` prefix in naming our projects
    table. As of version 1.1.0, Yii provides integrated support for using a table
    prefix. A table prefix is a string that is prepended to the names of the tables.
    It is often used in shared hosting environments where multiple applications share
    a single database and use different table prefixes to differentiate from each
    other; a sort of name-spacing for your database objects. For example, one application
    could use `tbl_` as a prefix while another could use `yii_`. Also, some database
    administrators use this as a naming convention to prefix database objects with
    an identifier as to what type of entity they are or otherwise going to use. They
    use a prefix to help organize objects into similar groups. Using table prefixes
    is a matter of preference and certainly not required.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到我们在命名项目表时使用了`tbl_`前缀。从1.1.0版本开始，Yii提供了对表前缀的集成支持。表前缀是一个字符串，它被添加到表的名称之前。它经常用于共享托管环境，其中多个应用程序共享一个单一的数据库，并使用不同的表前缀来区分彼此；一种数据库对象的名称空间。例如，一个应用程序可以使用`tbl_`作为前缀，而另一个应用程序可以使用`yii_`。此外，一些数据库管理员使用这个作为一个命名约定，以前缀数据库对象的标识符，以确定它们是什么类型的实体或者将要使用。他们使用前缀来帮助将对象组织成相似的组。使用表前缀是一种偏好，当然不是必需的。
- en: 'In order to take full advantage of the integrated table prefix support in Yii,
    one must appropriately set the `CDbConnection::tablePrefix` property to be the
    desired table prefix. Then, in SQL statements used throughout the application,
    one can use `{{TableName}}` to refer to table names, where `TableName` is the
    name of the table, but without the prefix. For example, if we were to make this
    configuration change, we could use the following code to query all projects:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用Yii中集成的表前缀支持，必须适当地设置`CDbConnection::tablePrefix`属性为所需的表前缀。然后，在整个应用程序中使用的SQL语句中，可以使用`{{TableName}}`来引用表名，其中`TableName`是表的名称，但不包括前缀。例如，如果我们要进行这个配置更改，我们可以使用以下代码来查询所有项目：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But this is getting a little ahead of ourselves. Let's leave our configuration
    as it is for now, and revisit this topic when we get into database querying a
    little later in our application development.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但这有点超前。让我们暂时保持配置不变，等到我们稍后在应用程序开发中进行数据库查询时再回顾这个话题。
- en: Creating the AR model class
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AR模型类
- en: Now that we have the `tbl_project` table created, we need to create the Yii
    model class to allow us to easily manage the data in that table. We introduced
    Yii's ORM layer, **Active Record** (AR), back in [Chapter 1](ch01.html "Chapter 1. Meet
    Yii"), *Meet Yii*. Now we will see a concrete example of that in the context of
    this application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`tbl_project`表，我们需要创建Yii模型类，以便我们可以轻松地管理该表中的数据。我们在[第1章](ch01.html "第1章。遇见Yii")
    *遇见Yii*中介绍了Yii的ORM层，**Active Record**（AR）。现在我们将在这个应用程序的上下文中看到一个具体的例子。
- en: Configuring Gii
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Gii
- en: 'Back in [Chapter 2](ch02.html "Chapter 2. Getting Started"), *Getting Started*
    when we were building our simple "Hello, World!" Yii application, we introduced
    the code generation tool, **Gii**. If you recall, before we could begin using
    Gii, we had to configure it for use within our application. We need to do so again
    in our new TrackStar application. As a reminder, to configure Gii for use, open
    up `protected/config/main.php` and the Gii module is defined as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[第2章](ch02.html "第2章。入门") *入门*，当我们构建我们简单的“Hello, World!” Yii应用程序时，我们介绍了代码生成工具**Gii**。如果您还记得，在我们开始使用Gii之前，我们必须为其配置我们的应用程序。我们需要在我们的新TrackStar应用程序中再次这样做。作为提醒，要配置Gii的使用，打开`protected/config/main.php`，并定义Gii模块如下：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This configures Gii as an application module. We will cover Yii *modules* in
    detail later in the book. The important thing at this point is to make sure this
    is added to the configuration file and that you provide your password (or set
    the password to `false` for development environments to avoid being prompted with
    the login screen). Now, navigate to the tool by going to `http://localhost/trackstar/index.php?r=gii`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将Gii配置为一个应用程序模块。我们将在本书的后面详细介绍Yii *模块*。此时重要的是确保将其添加到配置文件中，并提供您的密码（或者在开发环境中将密码设置为`false`，以避免被提示登录屏幕）。现在，通过转到`http://localhost/trackstar/index.php?r=gii`来导航到该工具。
- en: Using Gii to create our Project AR class
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Gii创建我们的Project AR类
- en: 'The main menu page for Gii looks like the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Gii的主菜单页面如下所示：
- en: '![Using Gii to create our Project AR class](graphics/8727_04_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gii创建我们的Project AR类](graphics/8727_04_02.jpg)'
- en: 'Since we want to create a new model class for our `tbl_project` table, the
    **Model Generator** option seems like the right choice. Clicking on that link
    takes us to the following page:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们想要为我们的`tbl_project`表创建一个新的模型类，**模型生成器**选项似乎是正确的选择。点击该链接会带我们到以下页面：
- en: '![Using Gii to create our Project AR class](graphics/8727_04_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gii创建我们的Project AR类](graphics/8727_04_03.jpg)'
- en: The **Table Prefix** field is primarily used to help Gii determine how to name
    the AR class we are generating. If you are using a prefix, you can add this here.
    This way, it won't use that prefix when naming the new class. In our case, we
    are using the `tbl_` prefix, so we should specify that here. Specifying this value
    will mean that our new generated AR class will be named `Project`, rather than
    `Tbl_project`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**表前缀**字段主要用于帮助Gii确定我们正在生成的AR类的命名方式。如果您使用前缀，可以在此处添加。这样，它在命名新类时就不会使用该前缀。在我们的情况下，我们使用`tbl_`前缀，所以我们应该在这里指定。指定此值将意味着我们新生成的AR类将被命名为`Project`，而不是`Tbl_project`。'
- en: The next two fields are asking for our table name and the name of the class
    file we want it to generate. Type in the name of our table `tbl_project` in the
    **Table Name** field, and watch as the **Model Class** name autopopulates. The
    convention for the **Model Class** name is the name of the table, minus the prefix,
    and starts with an uppercase letter. So, it will assume a name of Project for
    our model class name, but you can of course customize this.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个字段要求我们的表名和我们想要生成的类文件的名称。在**表名**字段中输入我们的表名`tbl_project`，并观察**模型类**名称自动填充。**模型类**名称的约定是表的名称，减去前缀，并以大写字母开头。因此，它将假定我们的模型类名称为Project，但您当然可以自定义。
- en: The next few fields allow for further customization. The **Base Class** field
    is used to specify the class from which our model class will extend. This will
    need to be `CActiveRecord` or a child class thereof. The **Model Path** field
    lets us specify where in the application directory structure to output the new
    file. The default is `protected/models/` (alias `application.models`). The **Build
    Relations** checkbox allows you to decide whether or not to have Gii automatically
    define relationships between AR objects by using the relationships defined between
    MySQL database tables. It is checked by default. The last field allows us to specify
    a template on which the code generation is based. We can customize the default
    one to meet any specific needs we have that might be common to all such class
    files. For now, the default values for these fields meet our needs just fine.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几个字段允许进一步定制。**基类**字段用于指定我们的模型类将继承的类。这将需要是`CActiveRecord`或其子类。**模型路径**字段让我们指定在应用程序目录结构中输出新文件的位置。默认值是`protected/models/`（别名`application.models`）。**构建关系**复选框允许您决定是否让Gii通过使用在MySQL数据库表之间定义的关系来自动定义AR对象之间的关系。它默认为选中状态。最后一个字段允许我们指定基于哪个模板进行代码生成。我们可以自定义默认模板以满足可能适用于所有这类类文件的任何特定需求。目前，这些字段的默认值完全满足我们的需求。
- en: 'Proceed by clicking on the **Preview** button. This will result in the following
    table displaying along the bottom of the page:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**预览**按钮继续。这将导致以下表格显示在页面底部：
- en: '![Using Gii to create our Project AR class](graphics/8727_04_04.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gii创建我们的项目AR类](graphics/8727_04_04.jpg)'
- en: 'This link allows you to preview the code that will be generated. Before you
    hit **Generate**, click on the `models/Project.php` link. The following screenshot
    displays what this preview will look like:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接允许您预览将要生成的代码。在点击**生成**之前，点击`models/Project.php`链接。以下截图显示了这个预览的样子：
- en: '![Using Gii to create our Project AR class](graphics/8727_04_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gii创建我们的项目AR类](graphics/8727_04_05.jpg)'
- en: It provides a scrollable pop up so that we can preview the file that will be
    generated.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一个可滚动的弹出窗口，以便我们可以预览将要生成的文件。
- en: 'Okay, close this pop up and go ahead and click on the **Generate** button.
    Assuming all went well, you should see something like the following screenshot
    displayed towards the bottom of the page:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，关闭这个弹出窗口，然后点击**生成**按钮。假设一切顺利，您应该看到页面底部显示类似以下截图的内容：
- en: '![Using Gii to create our Project AR class](graphics/8727_04_06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![使用Gii创建我们的项目AR类](graphics/8727_04_06.jpg)'
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Ensure that the path to which Gii is attempting to create the new file, `protected/models/`
    (or if you changed the location, whatever directory path you specified in the
    **Model Path** form field), is writable by your web server process prior to attempting
    to generate your new model class. Otherwise, you will receive a write permissions
    error.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试生成新模型类之前，请确保Gii尝试创建新文件的路径`protected/models/`（或者如果您更改了位置，则是**模型路径**表单字段中指定的任何目录路径）可被您的Web服务器进程写入，否则您将收到写入权限错误。
- en: Gii has created a new Yii active record model class for us and named it `Project.php`
    as we instructed. It has also placed it, as we instructed, in the default Yii
    location for model classes, `protected/models/`. This class is a wrapper class
    for our `tbl_project` database table. All of the columns in the `tbl_project`
    table are accessible as properties of the `Project` AR class.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Gii已为我们创建了一个新的Yii活动记录模型类，并按照我们的指示命名为`Project.php`。它还将其放在了默认的Yii模型类位置`protected/models/`中，这是我们指示的位置。这个类是我们的`tbl_project`数据库表的包装类。`tbl_project`表中的所有列都可以作为`Project`
    AR类的属性访问。
- en: Enabling CRUD operations for projects
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为项目启用CRUD操作
- en: We now have a new AR model class, but now what? Typically in an MVC architecture,
    we need a controller and a view to go with our model to complete the picture.
    In our case, we need to be able to manage our projects in the application. We
    need to be able to create new projects, retrieve information about existing projects,
    update the information on existing projects, and delete existing projects. We
    need to add a controller class that will handle these CRUD (Create, Read, Update,
    Delete) operations on our model class, as well as a view file to provide a GUI
    to allow the user to do this in the browser. One approach we could take is to
    open our favorite code editor and create a new controller and view classes. But,
    luckily, we don't have to.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个新的AR模型类，但接下来呢？在MVC架构中，通常我们需要一个控制器和一个视图来配合我们的模型，以完成整个架构。在我们的情况下，我们需要能够在应用程序中管理我们的项目。我们需要能够创建新项目，检索现有项目的信息，更新现有项目的信息，并删除现有项目。我们需要添加一个控制器类，该类将处理我们的模型类上的CRUD（创建、读取、更新、删除）操作，以及一个视图文件，以提供GUI，允许用户在浏览器中执行这些操作。我们可以采取的一种方法是打开我们喜欢的代码编辑器，并创建一个新的控制器和视图类。但是，幸运的是，我们不必这样做。
- en: Creating CRUD scaffolding for projects
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为项目创建CRUD脚手架
- en: Once again, the Gii tool is going to rescue us from having to write common,
    tedious, and often time-consuming code. CRUD operations are such a common need
    on database tables created for applications that the developers of Yii decided
    to provide this for us. If coming from other frameworks, you may know this by
    the term **scaffolding**. Let's see how to take advantage of this in Yii.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，Gii工具将帮助我们摆脱编写常见、繁琐且耗时的代码。CRUD操作在为应用程序创建的数据库表上是如此常见，Yii的开发人员决定为我们提供这个功能。如果您来自其他框架，您可能会知道这个术语**脚手架**。让我们看看如何在Yii中利用这一点。
- en: 'Navigate back to the main Gii menu located at `http://localhost/trackstar/index.php?r=gii`
    and select the **Crud Generator** link. You will be presented with the following
    screen:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到位于`http://localhost/trackstar/index.php?r=gii`的主Gii菜单，并选择**Crud Generator**链接。您将看到以下屏幕：
- en: '![Creating CRUD scaffolding for projects](graphics/8727_04_07.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![为项目创建CRUD脚手架](graphics/8727_04_07.jpg)'
- en: Here we are presented with two input form fields. The first one is asking for
    us to specify the **Model Class** against which we would like all of the CRUD
    operations to be generated. In our case, this is the `Project` AR class we created
    earlier. So we'll type in **Project** in this field. As we do this, we notice
    that the **Controller ID** field is autopopulated with the name **project**. This
    is Yii's naming convention. Of course, you can change this to be another name
    if you prefer, but we'll stick with this default for now. We'll also use the default
    base controller class, `Controller`, which was created for us when we initially
    created our application, as well as the default code template file from which
    to generate the class file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到两个输入表单字段。第一个要求我们指定针对哪个**模型类**生成所有CRUD操作。在我们的情况下，这是我们之前创建的`Project` AR类。因此，我们将在此字段中输入**Project**。在这样做时，我们注意到**控制器ID**字段自动填充了名称**project**。这是Yii的命名约定。当然，您可以更改为其他名称，但我们暂时将坚持使用默认值。我们还将使用默认的基础控制器类`Controller`，这是在我们最初创建应用程序时为我们创建的，以及默认的代码模板文件来生成类文件。
- en: 'With all of these fields filled in, clicking on the **Preview** button results
    in the following table being displayed at the bottom of the page:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 填写了所有这些字段后，点击**预览**按钮会在页面底部显示以下表格：
- en: '![Creating CRUD scaffolding for projects](graphics/8727_04_08.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![为项目创建CRUD脚手架](graphics/8727_04_08.jpg)'
- en: We can see that quite a few files are going to be generated. A new `ProjectController`
    controller class that will house all of the CRUD action methods is at the top
    of the list. The rest of the list represents all of the many separate view files
    that are also going to be created. There is a separate view file for each of the
    operations as well as one that will provide the ability to search project records.
    You can, of course, choose not to generate some of these by changing the checkboxes
    in the corresponding **Generate** column in the table. However, for our purposes,
    we would like Gii to create all of these for us.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到将生成相当多的文件。列表顶部是一个新的`ProjectController`控制器类，将包含所有CRUD操作方法。列表的其余部分代表还将创建的许多单独的视图文件。每个操作都有一个单独的视图文件，还有一个将提供搜索项目记录功能的视图文件。当然，您可以通过更改表中相应**生成**列中的复选框来选择不生成其中的一些文件。但是，对于我们的目的，我们希望Gii为我们创建所有这些文件。
- en: 'Go ahead and click on the **Generate** button. You should see the following
    success message at the bottom of the page:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请点击**生成**按钮。您应该在页面底部看到以下成功消息：
- en: '![Creating CRUD scaffolding for projects](graphics/8727_04_09.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![为项目创建CRUD脚手架](graphics/8727_04_09.jpg)'
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may need to ensure that both `/protected/controllers` as well as `/protected/views`
    under the root application directory are both writable by the web server process.
    Otherwise, you will receive permission errors, rather than this success result.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要确保根应用程序目录下的`/protected/controllers`和`/protected/views`都可以被Web服务器进程写入。否则，您将收到权限错误，而不是这个成功的结果。
- en: We can now click on the **try it now** link to take our new functionality for
    a test drive.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以点击**立即尝试**链接，测试我们的新功能。
- en: Doing so takes you to a project listing page. This is the page that displays
    all of the projects currently in the system. In our case, we have not created
    any yet, so the page gives us a **No results found** message. Let's change this
    by creating a new project.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会带您到一个项目列表页面。这是显示系统中当前所有项目的页面。在我们的情况下，我们还没有创建任何项目，所以页面会显示**未找到结果**的消息。让我们通过创建一个新项目来改变这种情况。
- en: Creating a new project
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新项目
- en: On the project listing page (`http://localhost/trackstar/index.php?r=project`)
    there is a little navigation area on the right-hand side of the page. Click on
    the **Create Project** link. You'll discover this actually takes us to the login
    page, rather than a form to create a new project. The reason for this is that
    the code Gii has generated applies a rule that stipulates only properly authenticated
    users (that is logged in users) can create new projects. Any anonymous user that
    attempts to access the functionality to create a new project will be redirected
    to the login page. We'll cover authentication and authorization in detail later.
    For now, go ahead and log in using the credentials username as `demo` and password
    as `demo`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目列表页面（`http://localhost/trackstar/index.php?r=project`）的右侧有一个小的导航区域。单击**创建项目**链接。您会发现这实际上将我们带到登录页面，而不是一个创建新项目的表单。原因是Gii生成的代码应用了一个规则，规定只有经过适当身份验证的用户（即已登录的用户）才能创建新项目。任何尝试访问创建新项目功能的匿名用户都将被重定向到登录页面。我们稍后会详细介绍身份验证和授权。现在，继续使用用户名`demo`和密码`demo`登录。
- en: 'A successful login should redirect you to the following URL:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 成功登录后，应将您重定向到以下URL：
- en: '`http://localhost/trackstar/index.php?r=project/create`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/index.php?r=project/create`'
- en: 'This page displays an input form for adding a new project, as shown in the
    following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面显示了一个用于添加新项目的输入表单，如下面的屏幕截图所示：
- en: '![Creating a new project](graphics/8727_04_10.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](graphics/8727_04_10.jpg)'
- en: Let's quickly fill out this form to create a new project. The form indicates
    there are two required fields, **Name** and **Description**. The Gii code generator
    was smart enough to know that since we defined the `tbl_project.name` and `tbl_project.description`
    columns in our database table as `NOT NULL`, this should translate to required
    form fields when creating a new project. Pretty cool, right?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速填写这个表单来创建一个新项目。表单指示有两个必填字段，**名称**和**描述**。Gii代码生成器足够聪明，知道我们在数据库表中定义了`tbl_project.name`和`tbl_project.description`列为`NOT
    NULL`，这应该在创建新项目时转换为必填表单字段。很酷，对吧？
- en: 'So, we''ll need to at least fill out these two fields. Give it the name, `Test
    Project`, and give the description as `Test project description`. Clicking on
    the **Create** button will post the form data back to the server and attempt to
    add a new project record. If there are any validation errors, a simple error message
    will display that highlights each field in error. A successful save will redirect
    to the specific listing for the newly created project. Ours was successful and
    we were redirected to the page `http://localhost/trackstar/index.php?r=project/view&id=1`,
    as shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们至少需要填写这两个字段。给它起名字，`测试项目`，并将描述设置为`测试项目描述`。单击**创建**按钮将把表单数据发送回服务器，并尝试添加一个新的项目记录。如果有任何验证错误，将显示一个简单的错误消息，突出显示每个错误的字段。成功保存将重定向到新创建项目的特定列表。我们的成功了，我们被重定向到页面`http://localhost/trackstar/index.php?r=project/view&id=1`，如下面的屏幕截图所示：
- en: '![Creating a new project](graphics/8727_04_11.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![创建新项目](graphics/8727_04_11.jpg)'
- en: As we briefly mentioned previously, one thing we notice about our new project
    creation form is that both the name and the description fields were marked as
    being required. This is due to the fact that we defined the name and description
    columns in our database table to not allow for null values. Let's take a look
    at how these required fields work in Yii.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前简要提到的，我们注意到我们的新项目创建表单中，名称和描述字段都被标记为必填项。这是因为我们在数据库表中定义了名称和描述列不允许为空值。让我们看看Yii中这些必填字段是如何工作的。
- en: Form field validation
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单字段验证
- en: When working with AR model classes within forms in Yii, setting validation rules
    around form fields is a snap. This is done by specifying values in an array defined
    in the `rules()` method within AR model classes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中的表单中使用AR模型类时，围绕表单字段设置验证规则非常简单。这是通过在AR模型类中的`rules()`方法中定义的数组中指定值来完成的。
- en: 'If you take a look at the code in the `Project` model class, (`/protected/models/Project.php`)
    you''ll discover that the `rules()` public function has already been defined for
    us, and that there are already a few rules in there:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看`Project`模型类中的代码（`/protected/models/Project.php`），您会发现`rules()`公共函数已经为我们定义好了，并且其中已经有一些规则了：
- en: '[PRE7]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `rules()` method returns an array of rules. Each rule is of the following
    general format:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`rules()`方法返回一个规则数组。每个规则的一般格式如下：'
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `Attribute List` is a string of comma separated class property names to
    be validated according to the `Validator`. The `Validator` specifies what kind
    of rule should be enforced. The `on` parameter specifies a list of scenarios in
    which the rule should be applied. For example, if we were to specify that a validation
    should be applied in an `insert` scenario context, this would indicate that the
    rule should only be applied during an insert of a new record.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`Attribute List`是一个逗号分隔的类属性名称字符串，根据`Validator`进行验证。`Validator`指定应强制执行什么样的规则。`on`参数指定应用规则的情景列表。例如，如果我们指定验证应在`insert`情景上下文中应用，这将表示规则应仅在插入新记录时应用。'
- en: If a specific scenario is not defined, the validation rule is applied in all
    scenarios whenever validation is performed on the model data.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有定义特定的情景，验证规则将在模型数据进行验证时的所有情景中应用。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As of Version 1.1.11 of Yii, you can also specify an `except` parameter, which
    allows you to exclude validations for certain scenarios. The syntax is the same
    as for the `on` parameter.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从Yii的1.1.11版本开始，您还可以指定一个`except`参数，它允许您排除某些情景的验证。语法与`on`参数相同。
- en: Finally, you can also specify additional options as `name=>value pairs`, which
    are used to initialize the validator's properties. These additional options will
    vary depending on the properties of the validator being specified.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您还可以指定额外的选项作为`name=>value`对，用于初始化验证器的属性。这些额外的选项将根据指定的验证器的属性而有所不同。
- en: 'The validator can either be a method in the model class, or a separate validator
    class. If defined as a model class method, it must have the following signature:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 验证器可以是模型类中的一个方法，也可以是一个单独的验证器类。如果定义为模型类方法，它必须具有以下签名：
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If using a separate class to define the validator, that class must extend from
    `CValidator`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用一个单独的类来定义验证器，那个类必须继承自`CValidator`。
- en: 'There are actually three ways to specify a validator:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上有三种指定验证器的方法：
- en: Specify a method name in the model class itself
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模型类本身中指定一个方法名
- en: Specify a separate class that is of a validator type (that is a class that extends
    `CValidator`)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定一个验证器类型的单独类（即一个继承自`CValidator`的类）
- en: Specify a predefined alias to an existing validator class in the Yii framework
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Yii框架中指定现有验证器类的预定义别名
- en: 'Yii provides many predefined validator classes for you and also provides aliases
    with which to reference these when defining rules. The complete list of predefined
    validator class aliases as of Yii Version 1.1.12 is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Yii为您提供了许多预定义的验证器类，并提供了别名来定义规则时引用这些类。截至Yii版本1.1.12，预定义的验证器类别名的完整列表如下：
- en: '**boolean**: Alias of `CBooleanValidator`, validates the attribute that contains
    either `true` or `false`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**boolean**：`CBooleanValidator`的别名，验证包含`true`或`false`的属性'
- en: '**captcha**: Alias of `CCaptchaValidator`, validates the attribute value that
    is same as the verification code displayed in a CAPTCHA'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**captcha**：`CCaptchaValidator`的别名，验证属性值是否与CAPTCHA中显示的验证码相同'
- en: '**compare**: Alias of `CCompareValidator`, compares two attributes and validates
    they are equal'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**compare**：`CCompareValidator`的别名，比较两个属性并验证它们是否相等'
- en: '**email**: Alias of `CEmailValidator`, validates the attribute value that is
    a valid e-mail address'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**email**：`CEmailValidator`的别名，验证属性值是否为有效的电子邮件地址'
- en: '**date**: Alias of `CDateValidator`, validates the attribute value that is
    a valid date, time, or date-time value'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**date**：`CDateValidator`的别名，验证属性值是否为有效的日期、时间或日期时间值'
- en: '**default**: Alias of `CDefaultValueValidator`, assigns a default value to
    the attributes specified'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**default**：`CDefaultValueValidator`的别名，为指定的属性分配默认值'
- en: '**exist**: Alias of `CExistValidator`, validates the attribute value against
    a specified table column in a database'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**exist**：`CExistValidator`的别名，验证属性值是否与数据库中指定表列中的值相匹配'
- en: '**file**: Alias of `CFileValidator`, validates the attribute value that contains
    the name of an uploaded file'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**file**：`CFileValidator`的别名，验证包含已上传文件名称的属性值'
- en: '**filter**: Alias of `CFilterValidator`, transforms the attribute value with
    a specified filter'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**filter**：`CFilterValidator`的别名，使用指定的过滤器转换属性值'
- en: '**in**: Alias of `CRangeValidator`, validates if the data is within a prespecified
    range of values, or exists within a specified list of values'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**in**：`CRangeValidator`的别名，验证数据是否在预定范围内的值，或者存在于指定的值列表中'
- en: '**length**: Alias of `CStringValidator`, validates whether the length of the
    attribute value is within a specified range'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**length**：`CStringValidator`的别名，验证属性值的长度是否在指定范围内'
- en: '**match**: Alias of `CRegularExpressionValidator`, uses a regular expression
    to validate the attribute value'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**match**：`CRegularExpressionValidator`的别名，使用正则表达式验证属性值'
- en: '**numerical**: Alias of `CNumberValidator`, validates whether the attribute
    value is a valid number'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**numerical**：`CNumberValidator`的别名，验证属性值是否为有效数字'
- en: '**required**: Alias of `CRequiredValidator`, validates whether the attribute
    value is empty or not'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**required**：`CRequiredValidator`的别名，验证属性值是否为空'
- en: '**type**: alias of `CTypeValidator`, validates whether the attribute value
    is of a specific data type'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**type**：`CTypeValidator`的别名，验证属性值是否为特定数据类型'
- en: '**unique**: Alias of `CUniqueValidator`, validates that the attribute value
    is unique, and is compared against a database table column'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**unique**：`CUniqueValidator`的别名，验证属性值是否唯一，并与数据库表列进行比较'
- en: '**url**: Alias of `CUrlValidator`, validates whether the attribute value is
    a valid URL'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**url**：`CUrlValidator`的别名，验证属性值是否为有效的URL'
- en: 'We see that in our `rules()` function, there is a rule defined that specifies
    the name and description attributes and uses the Yii alias `required` to specify
    the validator:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到在我们的`rules()`函数中，有一个规则定义了名称和描述属性，并使用了Yii别名`required`来指定验证器：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It is the declaration of this validation rule that is responsible for the little
    red asterisks next to the **Name** and **Description** fields on the new project
    form. This indicates that this field is now required. If we go back to our new
    project creation form (`http://localhost/trackstar/index.php?r=project/create`)
    and attempt to submit the form without specifying either the **Name** or **Description**,
    we''ll get a nicely formatted error message telling us that we cannot submit the
    form with blank values for these fields, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个验证规则的声明负责在新项目表单的**名称**和**描述**字段旁边显示小红色星号。这表示这个字段现在是必填的。如果我们回到新项目创建表单（`http://localhost/trackstar/index.php?r=project/create`）并尝试提交表单而没有指定**名称**或**描述**，我们将得到一个精美格式的错误消息，告诉我们不能提交带有这些字段空值的表单，如下面的截图所示：
- en: '![Form field validation](graphics/8727_04_12.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![表单字段验证](graphics/8727_04_12.jpg)'
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As we previously mentioned, the Gii code generation tool will automatically
    add validation rules to the AR class based on the definitions of the columns in
    the underlying table. We saw this for the **Name** and **Description** columns
    defined with `NOT NULL` constraints that had associated required validators defined.
    As another example, columns that have length restrictions, like our name column
    being defined as `varchar(255)`, will have character limit rules automatically
    applied. We notice by taking another look at our `rules()` method in the `Project`
    AR class that Gii autocreated the rule `array('name', 'length', 'max'=>255)` for
    us based on its column definition. For more information about validators see [http://www.yiiframework.com/doc/guide/1.1/en/form.model#declaring-validation-rules](http://www.yiiframework.com/doc/guide/1.1/en/form.model#declaring-validation-rules).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，Gii代码生成工具将根据底层表中列的定义自动向AR类添加验证规则。我们看到了**Name**和**Description**列定义为`NOT
    NULL`约束，并且有相关的必填验证器定义。另一个例子是，具有长度限制的列，比如我们的名字列被定义为`varchar(255)`，将自动应用字符限制规则。通过再次查看我们在`Project`
    AR类中的`rules()`方法，我们注意到Gii根据其列定义为我们自动创建了规则`array('name', 'length', 'max'=>255)`。有关验证器的更多信息，请参见[http://www.yiiframework.com/doc/guide/1.1/en/form.model#declaring-validation-rules](http://www.yiiframework.com/doc/guide/1.1/en/form.model#declaring-validation-rules)。
- en: Reading the project
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读项目
- en: We have actually already seen this in action when we were taken to the project
    details page after successfully saving a new project `http://localhost/trackstar/index.php?r=project/view&id=1`.
    This page demonstrates the *R* in CRUD. However, to view the entire listing, we
    can click on the **List Project** link in the right-hand side column. This takes
    us back to where we started, except now we have our newly created project in the
    project list. So, we have the ability to retrieve a listing of all of the projects
    in the application, as well as view the details of each project individually.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们成功保存一个新项目后被带到项目详细信息页面时，我们实际上已经看到了这个过程`http://localhost/trackstar/index.php?r=project/view&id=1`。该页面展示了CRUD中的*R*。然而，要查看整个列表，我们可以点击右侧列中的**List
    Project**链接。这将带我们回到起点，只是现在我们在项目列表中有了我们新创建的项目。因此，我们有能力检索应用程序中所有项目的列表，以及查看每个项目的详细信息。
- en: Updating and deleting projects
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新和删除项目
- en: 'Navigating back to a project details page can be done by clicking on the little
    project **ID** link on any of the projects in the listing. Let''s do this for
    our newly created project, which is **ID: 1** in our case. Clicking on this link
    takes us to the project details page for this project. This page has a number
    of action operations in its right-hand side column that are shown in following
    screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '通过点击列表中任何项目的小项目**ID**链接，可以导航回项目详细信息页面。让我们为我们新创建的项目，即我们的情况下的**ID: 1**，做这个操作。点击此链接将带我们到该项目的项目详细信息页面。该页面在其右侧列中显示了一些操作功能，如下截图所示：'
- en: '![Updating and deleting projects](graphics/8727_04_13.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![更新和删除项目](graphics/8727_04_13.jpg)'
- en: We can see both of the **Update Project** and **Delete Project** links, which
    provide us with the *U* and *D* in our CRUD operations respectively. We'll leave
    it up to you to verify that these links work as expected.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到**Update Project**和**Delete Project**链接，分别为我们提供了CRUD操作中的*U*和*D*。我们将留给您来验证这些链接是否按预期工作。
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The delete functionality is restricted to admin users; that is, you have to
    be logged in using the username/password combination of `admin`/`admin`. So, if
    you are verifying the delete functionality and receive a 403 error, ensure you
    are logged in as an administrator. This is discussed in more detail later, and
    we cover authentication and authorization in great detail in a later chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 删除功能仅限于管理员用户；也就是说，您必须使用`admin`/`admin`的用户名/密码组合登录。因此，如果您正在验证删除功能并收到403错误，请确保您以管理员身份登录。这将在后面更详细地讨论，并且我们将在后面的章节中详细介绍身份验证和授权。
- en: Managing projects in Admin mode
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在管理模式下管理项目
- en: 'The last link that we have not covered in the previous screenshot depicting
    our project operations is the **Manage Project** link. Go ahead and click on this
    link. It will most likely result in an authorization error as shown in the following
    screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一个截图中未涵盖的最后一个链接是**Manage Project**链接。请点击此链接。这很可能会导致授权错误，如下截图所示：
- en: '![Managing projects in Admin mode](graphics/8727_04_14.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![在管理模式下管理项目](graphics/8727_04_14.jpg)'
- en: The reason for this error is that this functionality invokes a simple access
    control feature in Yii, and restricts access to *admin* users only. If you recall,
    when we logged into the application in order to create a new project, we used
    `demo`/`demo` as our username/password combination. This `demo` user does not
    have the authorization to access this admin page. The code generated by Gii restricts
    the access to this functionality.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 出现此错误的原因是该功能调用了Yii中的简单访问控制功能，并且只限制了*admin*用户的访问。如果您回忆起，当我们登录应用程序以创建新项目时，我们使用`demo`/`demo`作为我们的用户名/密码组合。这个`demo`用户没有权限访问此管理员页面。由Gii生成的代码限制了对此功能的访问。
- en: 'An **administrator** in this context is simply someone who has logged in with
    the username/password combination of `admin`/`admin`. Go ahead and log out of
    the application by clicking on **Logout (demo)** present in the main navigation
    bar. Then log in again, but this time, use these administrator credentials. Once
    successfully logged in as `admin` you should notice the top navigation logout
    link change to **Logout (admin)**. Then navigate back to a specific project listing
    page, for example, `http://localhost/trackstar/index.php?r=project/view&id=1`,
    and try the **Manage Project** link again. You should now see what is shown in
    the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个上下文中，**管理员**简单地指的是使用`admin`/`admin`用户名/密码组合登录的人。请点击主导航栏中的**注销（演示）**来退出应用程序。然后再次登录，但这次使用管理员凭据。成功以`admin`身份登录后，您会注意到顶部导航栏的注销链接变成了**注销（管理员）**。然后返回到特定的项目列表页面，例如`http://localhost/trackstar/index.php?r=project/view&id=1`，再次尝试**管理项目**链接。您现在应该看到以下截图中显示的内容：
- en: '![Managing projects in Admin mode](graphics/8727_04_15.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![在管理员模式下管理项目](graphics/8727_04_15.jpg)'
- en: 'What we now see is a highly interactive version of our project listing page.
    It displays all the projects in an interactive data table. Each row has inline
    links to view, update, and delete each project. Clicking on any of the column
    header links sorts the project list by that column value. And the little input
    boxes in the second row allow you to search this project list by keywords within
    those individual column values. The advanced search link exposes an entire search
    form providing the ability to specify multiple search criteria to submit against
    one search. The following screenshot displays this advanced search form:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在看到的是我们项目列表页面的高度互动版本。它显示了所有项目在一个互动数据表中。每一行都有内联链接，可以查看、更新和删除每个项目。点击任何列标题链接都会按照该列数值对项目列表进行排序。第二行的小输入框允许您通过关键词在各个列数值中搜索这个项目列表。高级搜索链接会显示一个完整的搜索表单，提供了指定多个搜索条件来提交一个搜索的能力。以下截图显示了这个高级搜索表单：
- en: '![Managing projects in Admin mode](graphics/8727_04_16.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![在管理员模式下管理项目](graphics/8727_04_16.jpg)'
- en: We have basically implemented all of the functionality we set out to achieve
    in this iteration, and haven't really had to code much of anything. In fact, with
    the help of Gii, not only did we create all of the CRUD functionality, we have
    also implemented basic project searching functionality that we were not expecting
    to achieve. Though very basic, we have a fully functioning application, with features
    specific to a project task tracking application, and have made very little effort
    to achieve it.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上实现了这个迭代中设定的所有功能，而且几乎没有编写任何代码。事实上，借助Gii的帮助，我们不仅创建了所有的CRUD功能，还实现了我们没有预期到达的基本项目搜索功能。虽然非常基础，但我们已经拥有了一个完全功能的应用程序，具有特定于项目任务跟踪应用程序的功能，并且几乎没有付出太多的努力。
- en: Of course we still have a lot of work to complete on our TrackStar application.
    All of this scaffolding code is not intended to fully replace application development.
    It provides us with an excellent starting point and foundation on which to continue
    to build our application. As we work through all the details and nuances of how
    the project functionality should work, we can rely on this autogenerated code
    to keep things moving forward at a rapid pace.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们的TrackStar应用程序还有很多工作要完成。所有这些脚手架代码并不打算完全取代应用程序开发。它为我们提供了一个很好的起点和基础，可以继续构建我们的应用程序。当我们通过项目功能应该如何工作的所有细节和微妙之处时，我们可以依靠这个自动生成的代码以快速的速度推动事情向前发展。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Even though we did not do much coding in this chapter, we accomplished quite
    a lot. We created a new database table, which allowed us to see Yii Active Record
    (AR) in action. We used the Gii tool to first create an AR model class to wrap
    our `tbl_project` database table. We then demonstrated how to use the Gii code
    generation tool to generate actual CRUD functionality in the web application.
    This amazing tool quickly created the functionality we needed, and even took it
    a step further by providing us with an administrative dashboard allowing us to
    search and sort our projects based on different criteria. We also demonstrated
    how to implement model data validation and how this translates to form field validation
    in Yii.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在本章中我们没有做太多编码，但我们取得了很大的成就。我们创建了一个新的数据库表，这使我们能够看到Yii Active Record（AR）的实际运行情况。我们使用Gii工具首先创建了一个AR模型类来包装我们的`tbl_project`数据库表。然后我们演示了如何使用Gii代码生成工具在Web应用程序中生成实际的CRUD功能。这个神奇的工具快速地创建了我们需要的功能，甚至进一步提供了一个管理仪表板，让我们可以根据不同的条件搜索和排序我们的项目。我们还演示了如何实现模型数据验证以及这如何转化为Yii中表单字段验证。
- en: In the next chapter, we will build on what we have learned here and dive more
    deeply into Active Record in Yii as we introduce related entities in our data
    model.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在已学到的基础上继续深入研究Yii中的Active Record，同时在我们的数据模型中引入相关实体。
