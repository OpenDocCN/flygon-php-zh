["```php\n// chap3_strict_typing.php \n\ndeclare(strict_types = 0); \n\n$start = microtime(true); \n\nfunction test ($variable) \n{ \n    $variable++; \n\n    return \"$variable is a test.\"; \n} \n\nob_start(); \n\nfor ($x = 0; $x < 1000000; $x++) { \n\n    $array[$x] = (string) $x; \n\n    echo test($array[$x]) . PHP_EOL; \n\n} \n\n$time = microtime(true) - $start; \n\nob_clean(); \n\nob_end_flush(); \n\necho 'Time elapsed: ' . $time . PHP_EOL; \n```", "```php\n// chap3_strict_typing_modified.php \n\ndeclare(strict_types = 1); \n\n$start = microtime(true); \n\nfunction test (int $variable) : string \n{ \n    $variable++; \n\n    return $variable . ' is a test.'; \n} \n\nob_start(); \n\nfor ($x = 0; $x < 1000000; $x++) { \n\n    $array[$x] = (int) $x; \n\n    echo test($array[$x]) . PHP_EOL; \n\n} \n\n$time = microtime(true) - $start; \n\nob_clean(); \n\nob_end_flush(); \n\necho 'Time elapsed: ' . $time . PHP_EOL; \n```", "```php\n// chap3_immutable_arrays.php \n\n$start = microtime(true); \n\nfor ($x = 0; $x < 10000; $x++) { \n    $array[] = [ \n        'key1' => 'This is the first key', \n        'key2' => 'This is the second key', \n        'key3' => 'This is the third key', \n    ]; \n} \n\necho $array[8181]['key2'] . PHP_EOL; \n\n$time = microtime(true) - $start; \n\necho 'Time elapsed: ' . $time . PHP_EOL; \n\necho memory_get_usage() . ' bytes' . PHP_EOL; \n```", "```php\n// chap3_variables.php \n\n$start = microtime(true); \n\nfor ($x = 0; $x < 10000; $x++) { \n    $$x = 'test'; \n} \n\nfor ($x = 0; $x < 10000; $x++) { \n    $$x = $x; \n} \n\n$time = microtime(true) - $start; \n\necho 'Time elapsed: ' . $time . PHP_EOL; \n\necho memory_get_usage() . ' bytes' . PHP_EOL; \n```", "```php\n// chap3_string_interpolation.php\n\n$a = str_repeat(chr(rand(48, 122)), rand(1024, 3000));\n\n$b = str_repeat(chr(rand(48, 122)), rand(1024, 3000));\n\n$start = microtime(true);\n\nfor ($x = 0; $x < 10000; $x++) {\n    $$x = \"$a is not $b\";\n}\n\n$time = microtime(true) - $start;\n\necho 'Time elapsed: ' . $time . PHP_EOL;\n\necho memory_get_usage() . ' bytes' . PHP_EOL; \n```", "```php\n// chap3_references.php \n\n$start = microtime(true); \n\nfunction test (&$byRefVar) \n{ \n    $test = $byRefVar; \n} \n\n$variable = array_fill(0, 10000, 'banana'); \n\nfor ($x = 0; $x < 10000; $x++) { \n    test($variable); \n} \n\n$time = microtime(true) - $start; \n\necho 'Time elapsed: ' . $time . PHP_EOL; \n\necho memory_get_usage() . ' bytes' . PHP_EOL; \n```", "```php\n// chap3_dynamic_1.php \n\n$start = microtime(true); \n\n$x = 1; \n\n$data = []; \n\n$populateArray = function ($populateArray, $data, $x) { \n\n    $data[$x] = $x; \n\n    $x++; \n\n    return $x <= 1000 ? $populateArray($populateArray, $data, $x) : $data; \n\n}; \n\n$data = $populateArray($populateArray, $data, $x); \n\n$time = microtime(true) - $start; \n\necho 'Time elapsed: ' . $time . PHP_EOL; \n\necho memory_get_usage() . ' bytes' . PHP_EOL; \n```", "```php\n// chap3_dynamic_2.php \n\n$start = microtime(true); \n\n$x = 1; \n\n$data = []; \n\nfunction populateArray(Array $data, $x) \n{ \n    $data[$x] = $x; \n\n    $x++; \n\n    return $x <= 1000 ? populateArray($data, $x) : $data; \n} \n\n$data = populateArray($data, $x); \n\n$time = microtime(true) - $start; \n\necho 'Time elapsed: ' . $time . PHP_EOL; \n\necho memory_get_usage() . ' bytes' . PHP_EOL; \n```", "```php\n// chap3_dynamic_3.php \n\n$start = microtime(true); \n\n$data = []; \n\nfunction populateArray(Array $data) \n{ \n    static $x = 1; \n\n    $data[$x] = $x; \n\n    $x++; \n\n    return $data; \n} \n\nfor ($x = 1; $x <= 1000; $x++) { \n    $data = populateArray($data); \n} \n\n$time = microtime(true) - $start; \n\necho 'Time elapsed: ' . $time . PHP_EOL; \n\necho memory_get_usage() . ' bytes' . PHP_EOL; \n```", "```php\n// chap3_dynamic_4.php\n\n$start = microtime(true);\n\n$data = [];\n\nfunction populateArray()\n{\n    for ($i = 1; $i <= 1000; $i++) {\n\n        yield $i => $i;\n\n    }\n\n    return;\n}\n\nforeach (populateArray() as $key => $value) {\n\n    $data[$key] = $value;\n\n}\n\n$time = microtime(true) - $start;\n\necho 'Time elapsed: ' . $time . PHP_EOL;\n\necho memory_get_usage() . ' bytes' . PHP_EOL;\n```", "```php\n// chap3_memoization_before.php \n\n$start = microtime(true); \n\n$x = 1; \n\n$data = []; \n\nfunction populateArray(Array $data, $x) \n{ \n    $data[$x] = $x; \n\n    $x++; \n\n    return $x <= 1000 ? populateArray($data, $x) : $data; \n} \n\n$data = populateArray($data, $x); \n\n$data = populateArray($data, $x); \n\n$data = populateArray($data, $x); \n\n$data = populateArray($data, $x); \n\n$data = populateArray($data, $x); \n\n$time = microtime(true) - $start; \n\necho 'Time elapsed: ' . $time . PHP_EOL; \n\necho memory_get_usage() . ' bytes' . PHP_EOL; \n```", "```php\n// chap3_memoization_after.php \n\n$start = microtime(true); \n\n$x = 1; \n\n$data = []; \n\nfunction populateArray(Array $data, $x) \n{ \n    static $cache = []; \n\n    static $key; \n\n    if (!isset($key)) { \n        $key = md5(serialize($x)); \n    } \n\n    if (!isset($cache[$key])) { \n\n        $data[$x] = $x; \n\n        $x++; \n\n        $cache[$key] = $x <= 1000 ? populateArray($data, $x) : $data; \n\n    } \n\n    return $cache[$key]; \n\n} \n\n$data = populateArray($data, $x); \n\n$data = populateArray($data, $x); \n\n$data = populateArray($data, $x); \n\n$data = populateArray($data, $x); \n\n$data = populateArray($data, $x); \n\n$time = microtime(true) - $start;\n```", "```php\necho 'Time elapsed: ' . $time . PHP_EOL; \n\necho memory_get_usage() . ' bytes' . PHP_EOL; \n```"]