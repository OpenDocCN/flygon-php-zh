["```php\n**$ php artisan migrate:install**\n\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreateUsersTable extends Migration {\n\n  /**\n   * Run the migrations.\n   *\n   * @return void\n   */\n  public function up()\n  {\n    Schema::create('users', function(Blueprint $table)\n    {\n      $table->smallIncrements('id')->unsigned();\n      $table->string('name');\n      $table->string('email')->unique();\n      $table->string('password', 60);\n      $table->rememberToken();\n      $table->timestamps();\n      $table->softDeletes();\n    });\n  }\n\n  /**\n   * Reverse the migrations.\n   *\n   * @return void\n   */\n  public function down()\n  {\n    Schema::drop('users');\n  }\n\n}\n```", "```php\n/*\n*   created_at is set with timestamps\n*/\n$user = new User();\n$user->email = \"johndoe@acmewidgets.com\";\n$user->name = \"John Doe\";\n$user->save(); // created_at is set with timestamps\n\n/*\n*   updated_at is set with timestamps\n*/\n$user = User::find(1); //where 1 is the $id\n$user->email = \"johndoe@acmeenterprise.com\";\n$user->save(); //updated_at is updated\n```", "```php\n$table->softDeletes();\n```", "```php\n**$ php artisan migrate**\n\n```", "```php\n**$ php artisan migrate:rollback**\n\n```", "```php\n\"require-dev\": {\n    \"phpunit/phpunit\": \"~4.0\",\n    \"phpspec/phpspec\": \"~2.1\",\n    \"xethron/migrations-generator\": \"dev-feature/laravel-five-stable\",\n    \"way/generators\": \"dev-feature/laravel-five-stable\"\n  },\n```", "```php\n\"repositories\": [\n  {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:jamisonvalenta/Laravel-4-Generators.git\"\n  }],\n```", "```php\n'providers' => [\n\n        /*\n         * Laravel Framework Service Providers...\n         */\n          Illuminate\\Foundation\\Providers\\ArtisanServiceProvider::class,\n          Illuminate\\Auth\\AuthServiceProvider::class,\n          Illuminate\\Broadcasting\\BroadcastServiceProvider::class,\n        ...\n    'Way\\Generators\\GeneratorsServiceProvider',\n    'Xethron\\MigrationsGenerator\\MigrationsGeneratorServiceProvider'\n]\n```", "```php\n**$ php artisan**\n\n```", "```php\n**$ php artisan migrate:generate**\n\n```", "```php\n**Using connection: mysql**\n\n**Generating migrations for: accommodations, amenities, amenity_room, cities, countries, currencies, locations, rates, reservation_room, reservations, rooms, states, users**\n**Do you want to log these migrations in the migrations table? [Y/n] Y**\n**Migration table created successfully.**\n**Next Batch Number is: 1\\. We recommend using Batch Number 0 so that it becomes the \"first\" migration [Default: 0]** \n**Setting up Tables and Index Migrations**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_accommodations_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_amenities_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_amenity_room_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_cities_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_countries_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_currencies_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_locations_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_rates_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_reservation_room_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_reservations_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_rooms_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_states_table.php**\n**Created: /var/www/laravel.example/database/migrations/2015_02_07_170311_create_users_table.php**\n\n**Finished!**\n\n```", "```php\n$table->smallInteger('state_id')->unsigned()->index('state_id');\n```", "```php\npublic $timestamps = false;\n```", "```php\n<?php\n\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass DatabaseSeeder extends Seeder {\n\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        Model::unguard();\n\n        //create a user\n        $user = new \\MyCompany\\User();\n        $user->id=1;\n        $user->email = \"testing@tester.com\";\n        $user->password = Hash::make('p@ssw0rd');\n        $user->save();\n\n        //create a country\n        $country = new \\MyCompany\\Accommodation\\Location\\State;\n        $country->name = \"United States\";\n        $country->id = 236;\n        $country->save();\n\n        //create a state\n        $state = new \\MyCompany\\Accommodation\\Location\\State;\n        $state->name = \"Pennsylvania\";\n        $state->id = 1;\n        $state->save();\n\n        //create a city\n        $city = new \\MyCompany\\Accommodation\\Location\\City;\n        $city->name = \"Pittsburgh\";\n        $city->save();\n\n        //create a location\n        $location = new \\MyCompany\\Accommodation\\Location;\n        $location->city_id = $city->id;\n        $location->state_id = $state->id;\n        $location->country_id = 236;\n        $location->latitude = 40.44;\n        $location->longitude = 80;\n        $location->code = '15212';\n        $location->address_1 = \"100 Main Street\";\n        $location->save();\n\n        //create a new accommodation\n        $accommodation = new \\MyCompany\\Accommodation;\n        $accommodation->name = \"Royal Plaza Hotel\";\n        $accommodation->location_id = $location;\n        $accommodation->description = \"A modern, 4-star hotel\";\n        $accommodation->save();\n\n        //create a room\n        $room1 = new \\MyCompany\\Accommodation\\Room;\n        $room1->room_number= 'A01';\n        $room1->accommodation_id = $accommodation->id;\n        $room1->save();\n\n        //create another room\n        $room2 = new \\MyCompany\\Accommodation\\Room;\n        $room2->room_number= 'A02';\n        $room2->accommodation_id = $accommodation->id;\n        $room2->save();\n\n        //create the room array\n        $rooms = [$room1,$room2];\n\n    }\n\n}\n```", "```php\n<?php\n\nnamespace MyCompany\\Accommodation;\n\ninterface RepositoryInterface {\n    public function create($attributes);\n}\n```", "```php\n<?php\n\nnamespace MyCompany\\Accommodation;\n\nclass ReservationRepository implements RepositoryInterface {\n    private $reservation;\n\n    function __construct($reservation)\n    {\n        $this->reservation = $reservation;\n    }\n\n    public function create($attributes)\n    {\n        $this->reservation->create($attributes);\n        return $this->reservation;\n    }\n}\n```", "```php\npublic function create($attributes)\n{\n\n    $modelAttributes= array_except($attributes, ['rooms']);\n\n    $reservation = $this->reservationModel->create($modelAttributes);\n    if (isset($attributes['rooms']) ) {\n        $reservation->rooms()->sync($attributes['rooms']);\n    }\n    return $reservation;\n}\n```", "```php\npublic function rooms(){\n    return $this->belongsToMany('MyCompany\\Accommodation\\Room')->withTimestamps();\n}\n```", "```php\n    'default' => 'sqlite',\n       'connections' => array(\n        'sqlite' => array(\n            'driver'   => 'sqlite',\n            'database' => ':memory:',\n            'prefix'   => '',\n        ),\n    ),\n```", "```php\n<php>\n        <env name=\"APP_ENV\" value=\"testing\"/>\n        <env name=\"CACHE_DRIVER\" value=\"array\"/>\n        <env name=\"SESSION_DRIVER\" value=\"array\"/>\n        <env name=\"DB_DRIVER\" value=\"sqlite\"/>\n</php>\n```", "```php\n'default' => 'mysql',\n```", "```php\n'default' => env('DB_DRIVER', 'mysql'),\n```", "```php\n<?php\n\nclass TestCase extends Illuminate\\Foundation\\Testing\\TestCase {\n\n    public function setUp()\n    {\n        parent::setUp();\n        Artisan::call('migrate');\n        Artisan::call('db:seed');\n    }\n\n    /**\n    * Creates the application.\n    *\n    * @return \\Illuminate\\Foundation\\Application\n    */\n    public function createApplication()\n    {\n        $app = require __DIR__.'/../bootstrap/app.php';\n        $app->make('Illuminate\\Contracts\\Console\\Kernel')->bootstrap();\n        return $app;\n    }\n\n    public function tearDown()\n    {\n        Artisan::call('migrate:rollback');\n    }\n}\n```", "```php\n<?php\n\nclass ExampleTest extends TestCase {\n\n    /**\n    * A basic functional test example.\n    *\n    * @return void\n    */\n\npublic function testReserveRoomExample()\n    {\n\n        $reservationRepository = new \\MyCompany\\Accommodation\\ReservationRepository(\n            new \\MyCompany\\Accommodation\\Reservation());\n        $reservationValidator = new \\MyCompany\\Accommodation\\ReservationValidator();\n        $start_date = '2015-10-01';\n        $end_date = '2015-10-10';\n        $rooms = \\MyCompany\\Accommodation\\Room::take(2)->lists('id')->toArray();\n        if ($reservationValidator->validate($start_date,$end_date,$rooms)) {\n            $reservation = $reservationRepository->create(['date_start'=>$start_date,'date_end'=>$end_date,'rooms'=>$rooms,'reservation_number'=>'0001']);\n        }\n\n        $this->assertInstanceOf('\\MyCompany\\Accommodation\\Reservation',$reservation);\n        $this->assertEquals('2015-10-01',$reservation->date_start);\n        $this->assertEquals(2,count($reservation->rooms));\n}\n```", "```php\n**$ phpunit**\n\n```", "```php\n**$ phpunit**\n**PHPUnit 4.5.0 by Sebastian Bergmann and contributors.**\n\n**Configuration read from /var/www/laravel.example/phpunit.xml**\n\n**.**\n**F**\n\n**Time: 1.59 seconds, Memory: 10.75Mb**\n\n**There was 1 failure:**\n\n**1) ExampleTest::testReserveRoomExample**\n**Failed asserting that 2 matches expected 3.**\n\n**/var/www/laravel.example/tests/ExampleTest.php:24**\n\n**FAILURES!** \n**Tests: 2, Assertions: 4, Failures: 1.**\n\n```", "```php\n   $this->assertEquals(3,count($reservationResult->rooms));\n```", "```php\n**Failed asserting that 2 matches expected 3.**\n\n```", "```php\n**$ composer require behat/behat behat/mink behat/mink-extension laracasts/behat-laravel-extension --dev**\n\n```", "```php\n**$ behat --init**\n\n```", "```php\n<?php\n\nuse Behat\\Behat\\Context\\Context;\nuse Behat\\Behat\\Context\\SnippetAcceptingContext;\nuse Behat\\Gherkin\\Node\\PyStringNode;\nuse Behat\\Gherkin\\Node\\TableNode;\n\n/**\n * Defines application features from the specific context.\n */\nclass FeatureContext implements Context, SnippetAcceptingContext\n{\n    /**\n     * Initializes context.\n     *\n     * Every scenario gets its own context instance.\n     * You can also pass arbitrary arguments to the\n     * context constructor through behat.yml.\n     */\n    public function __construct()\n    {\n    }\n}\n```", "```php\nclass FeatureContext implements Context, SnippetAcceptingContext\n```", "```php\n<?php\n\nuse Behat\\Behat\\Context\\Context;\nuse Behat\\Behat\\Context\\SnippetAcceptingContext;\nuse Behat\\Gherkin\\Node\\PyStringNode;\nuse Behat\\Gherkin\\Node\\TableNode;\n\n/**\n * Defines application features from the specific context.\n */\nclass FeatureContext implements Context, SnippetAcceptingContext\n{\n    /**\n     * Initializes context.\n     *\n     * Every scenario gets its own context instance.\n     * You can also pass arbitrary arguments to the\n     * context constructor through behat.yml.\n     */\n    public function __construct()\n    {\n    }\n     /**\n     * @BeforeSuite\n     */\n     public static function prepare(SuiteEvent $event)\n     {\n        Artisan::call('migrate');\n        Artisan::call('db:seed');\n\n     }\n\n     /**\n     * @AfterSuite \n     */\n     public function cleanup(ScenarioEvent $event)\n     {\n        Artisan::call('migrate:rollback');\n     }\n}\n```", "```php\nFeature: Reserve Room\n  In order to verify the reservation system\n  As an accommodation reservation user\n  I need to be able to create a reservation in the system\n  Scenario: Reserve a Room\n   When I create a reservation\n         Then I should have one reservation\n```", "```php\n**$ behat**\n\n```", "```php\n**Feature: Reserve Room**\n **In order to verify the reservation system**\n **As an accommodation reservation user**\n **I need to be able to create a reservation in the system**\n\n **Scenario: List 2 files in a directory # features/reservation.feature:5**\n **When I create a reservation**\n **Then I should have one reservation**\n\n**1 scenario (1 undefined)**\n**2 steps (2 undefined)**\n**0m0.10s (7.48Mb)**\n\n**--- FeatureContext has missing steps. Define them with these snippets:**\n\n **/****\n *** @When I create a reservation**\n ***/**\n **public function iCreateAReservation()**\n **{**\n **throw new PendingException();**\n **}**\n\n **/****\n *** @Then I should have one reservation**\n ***/**\n **public function iShouldHaveOneReservation()**\n **{**\n **throw new PendingException();**\n **}**\n\n```", "```php\n**$ composer require guzzlehttp/guzzle**\n\n```", "```php\n<?php\n\nuse Behat\\Behat\\Context\\Context;\nuse Behat\\Behat\\Context\\SnippetAcceptingContext;\nuse Behat\\Gherkin\\Node\\PyStringNode;\nuse Behat\\Gherkin\\Node\\TableNode;\nuse Behat\\MinkExtension\\Context\\MinkContext;\nuse Behat\\Testwork\\Hook\\Scope\\BeforeSuiteScope;\nuse Behat\\Testwork\\Hook\\Scope\\AfterSuiteScope;\nuse GuzzleHttp\\Client;\n\n/**\n * Defines application features from the specific context.\n */\nclass FeatureContext extends MinkContext implements Context, SnippetAcceptingContext\n{\n    /**\n     * Initializes context.\n     *\n     * Every scenario gets its own context instance.\n     * You can also pass arbitrary arguments to the\n     * context constructor through behat.yml.\n     */\n    protected $httpClient;\n\n    public function __construct()\n    {\n        $this->httpClient = new Client();\n    }\n    /**\n     * @BeforeSuite\n     */\n    public static function prepare(BeforeSuiteScope $scope)\n    {\n        Artisan::call('migrate');\n        Artisan::call('db:seed');\n\n    }\n\n    /**\n     * @When I create a reservation\n     */\n    public function iCreateAReservation()\n    {\n        $request = $this->httpClient->post('http://laravel.example/reservations',['body'=> ['start_date'=>'2015-04-01','end_date'=>'2015-04-04','rooms[]'=>'100']]);\n        if ((int)$request->getStatusCode()!==201)\n        {\n            throw new Exception('A successfully created status code must be returned');\n        }\n    }\n\n    /**\n     * @Then I should have one reservation\n     */\n    public function iShouldHaveOneReservation()\n    {\n        $request = $this->httpClient->get('http://laravel.example/reservations');\n        $arr = json_decode($request->getBody());\n        if (count($arr)!==1)\n        {\n            throw new Exception('there must be exactly one reservation');\n        }\n    }\n\n    /**\n     * @AfterSuite\n     */\n    public static function cleanup(AfterSuiteScope $scope)\n    {\n        Artisan::call('migrate:rollback');\n    }\n}\n\n    /**\n     * @When I create a reservation\n     */\n    public function iCreateAReservation()\n    {\n        $request = $this->httpClient->post('http://laravel.example/reservations',['body'=> ['start_date'=>'2015-04-01','end_date'=>'2015-04-04','rooms[]'=>'100']]);\n        if ((int)$request->getStatusCode()!==201)\n        {\n            throw new Exception('A successfully created status code must be returned');\n        }\n    }\n```", "```php\n**$ php artisan make:controller ReservationsController**\n\n```", "```php\n<?php namespace MyCompany\\Http\\Controllers;\n\nuse MyCompany\\Http\\Requests;\nuse MyCompany\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse MyCompany\\Accommodation\\ReservationRepository;\nuse MyCompany\\Accommodation\\ReservationValidator;\nuse MyCompany\\Accommodation\\Reservation;\n\nclass ReservationsController extends Controller {\n\n    /**\n    * Display a listing of the resource.\n    *\n    * @return Response\n    */\n    public function index()\n    {\n        return Reservation::all();\n    }\n\n    /**\n    * Store a newly created resource in storage.\n    *\n    * @return Response\n    */\n    public function store()\n    {\n        $reservationRepository = new ReservationRepository(new Reservation());\n        $reservationValidator = new ReservationValidator();\n        if ($reservationValidator->validate(\\Input::get('start_date'),\n        \\Input::get('end_date'),\\Input::get('rooms')))\n        {\n        $reservationRepository->create(['date_start'=>\\Input::get('start_date'),'date_end'=>\\Input::get('end_date'),'rooms'=>\\Input::get('rooms')]);\n        return response('', '201');\n        }\n    }\n}\n```", "```php\n**Route::resource('reservations','ReservationController');**\n\n```", "```php\n**Feature: Reserve Room**\n **In order to verify the reservation system**\n **As an accommodation reservation user**\n **I need to be able to create a reservation in the system**\n\n **Scenario: Reserve a Room**\n **When I create a reservation         # FeatureContext::iCreateAReservation()**\n **Then I should have one reservation  # FeatureContext::iShouldHaveOneReservation()**\n\n**1 scenario (1 passed)**\n**2 steps (2 passed)**\n\n```"]