- en: Chapter 4. Starting your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。开始你的应用程序
- en: We are ready to start developing the framework behind our application!
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们准备开始开发我们应用程序的框架！
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Create a simple PHP framework from scratch - Bones
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始创建一个简单的PHP框架 - Bones
- en: Learn how to use Git for source control
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用Git进行源代码控制
- en: Add functionality to Bones to handle URL requests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加功能到Bones来处理URL请求
- en: Build out support for views and layouts, so that we can add a frontend to our
    application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建视图和布局的支持，以便我们可以为我们的应用程序添加一个前端
- en: Add code to allow us to handle all of the HTTP methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加代码以允许我们处理所有的HTTP方法
- en: Set up complex routing and build it into an example application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置复杂的路由并将其构建到一个示例应用程序中
- en: Add the ability to use public files and use them with our framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加使用公共文件并在我们的框架中使用它们的能力
- en: Publish our code to GitHub, so that we can manage our source code
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的代码发布到GitHub，以便我们可以管理我们的源代码
- en: Let's jump right into it!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: What we'll build in this book
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本书中我们将构建什么
- en: For the rest of this book, we will create a simple social network that is similar
    to Twitter. Let's call it `Verge`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将创建一个类似Twitter的简单社交网络。让我们称之为`Verge`。
- en: '`Verge` will allow users to sign up, log in, and create posts. By building
    this application, we''ll jump over the same hurdles that most developers do when
    they build an application, and we''ll learn to rely on CouchDB for some of the
    heavy lifting.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`Verge`将允许用户注册、登录和创建帖子。通过构建这个应用程序，我们将跳过大多数开发人员在构建应用程序时遇到的障碍，并学会依赖CouchDB来完成一些繁重的工作。'
- en: In order to build Verge, we are going to make a light PHP wrapper that will
    handle the basic routing and HTTP requests that we mentioned in the previous chapter.
    Let's call this framework `Bones`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建Verge，我们将制作一个轻量级的PHP包装器，用于处理基本路由和HTTP请求，这些在前一章中提到过。让我们称这个框架为`Bones`。
- en: Bones
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 骨架
- en: 'In this book, we are going to build a very lightweight framework called `Bones`
    to run our application. You will probably wonder to yourself *why are we building
    another framework?* It''s a valid question! There are tons of PHP frameworks out
    there such as: Zend framework, Cake, Symfony, and so on. These are all powerful
    frameworks, but they also have a steep learning curve, and it would be impossible
    to touch on each of them in this book. Instead, we''ll create an extremely light
    PHP framework that will help simplify our development but won''t have a lot of
    other bells and whistles. By building this framework, you''ll have a greater understanding
    of HTTP methods and how to build light applications from the ground up. Once you''ve
    developed this application using Bones, it should be easy for you to apply your
    knowledge to another framework, because we''ll be using some pretty standard processes.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将构建一个非常轻量级的框架`Bones`来运行我们的应用程序。你可能会想*为什么我们要构建另一个框架？*这是一个合理的问题！有很多PHP框架，比如：Zend框架，Cake，Symfony等等。这些都是强大的框架，但它们也有一个陡峭的学习曲线，而且在本书中不可能涉及到它们的每一个。相反，我们将创建一个非常轻量级的PHP框架，它将帮助简化我们的开发，但不会有很多其他的花里胡哨。通过构建这个框架，你将更好地理解HTTP方法以及如何从头开始构建轻量级应用程序。一旦你使用Bones开发了这个应用程序，你应该很容易将你的知识应用到另一个框架上，因为我们将使用一些非常标准的流程。
- en: 'If you run into any problems through this chapter or are eager to see the finished
    product, then you can access the full Bones framework on GitHub: [https://github.com/timjuravich/bones](http://https://github.com/timjuravich/bones).
    I''ll also cover an easy way for you to grab all of this code at the end of this
    chapter.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在本章遇到任何问题或渴望看到最终成品，那么你可以在GitHub上访问完整的Bones框架：[https://github.com/timjuravich/bones](http://https://github.com/timjuravich/bones)。我还将在本章末尾介绍一个简单的方法，让你可以获取所有这些代码。
- en: Let's get started by setting up our project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置我们的项目。
- en: Project setup
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目设置
- en: In this section, we'll go through the steps of creating folders for our code
    and make sure that we initialize Git so that our source code can be tracked as
    we add new features to the project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将逐步创建用于我们代码的文件夹，并确保我们初始化Git，以便我们可以跟踪我们向项目添加新功能时的源代码。
- en: Time for action — creating the directories for Verge
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 为Verge创建目录
- en: Let's begin the setup of our project by creating a directory in the `/Library/WebServer/Documents`
    folder, and name that directory `verge`. This directory will contain all of the
    code for your project. For the sake of brevity, throughout this chapter, we'll
    call `/Library/WebServer/Documents/verge` our **working** directory.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在`/Library/WebServer/Documents`文件夹中创建一个名为`verge`的目录来开始设置我们的项目，并将该目录包含所有项目的代码。为了简洁起见，在本章中，我们将称`/Library/WebServer/Documents/verge`为我们的**工作**目录。
- en: 'Inside our working directory, let''s create four new folders for our source
    files to go into:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的工作目录中，让我们创建四个新的文件夹，用于存放我们的源文件：
- en: Create a folder called `classes`. This folder will contain the PHP class objects
    that we'll be using in this project
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`classes`的文件夹。这个文件夹将包含我们在这个项目中将要使用的PHP类对象
- en: Create a folder called `lib`. This folder will contain PHP libraries that our
    application relies on, which, in our case, will be the `Bones` framework and the
    class that will communicate with CouchDB.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`lib`的文件夹。这个文件夹将包含我们的应用程序依赖的PHP库，也就是我们的`Bones`框架和将与CouchDB通信的类。
- en: Create a folder called `public`. This folder will contain all of our public
    files, such as **Cascading Style Sheets (CSS)** , JavaScript, and images that
    our applications will need.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`public`的文件夹。这个文件夹将包含我们所有的公共文件，比如**层叠样式表（CSS）**，JavaScript和我们的应用程序需要的图片。
- en: Create a folder called `views`. This folder will contain our layout and the
    different pages of our web application.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`views`的文件夹。这个文件夹将包含我们的布局和网页应用程序的不同页面。
- en: 'If you were to look at your working directory, the end result of this section
    should look similar to the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看你的工作目录，本节的最终结果应该类似于以下截图：
- en: '![Time for action — creating the directories for Verge](graphics/3586_04_005.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![开始行动-为Verge创建目录](graphics/3586_04_005.jpg)'
- en: What just happened?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We quickly created some placeholder folders for the organization of the code
    that we'll add throughout the rest of this book.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快速创建了一些占位符文件夹，用于组织本书其余部分中将添加的代码。
- en: Source control with Git
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Git进行源代码控制
- en: In order for us to keep track of our application, our progress, and to allow
    us to roll back if we make mistakes, we need to have source control on our repository
    up and running. We installed Git in [Chapter 2](ch02.html "Chapter 2. Setting
    up your Development Environment"), *Setting Up Your Development Environment*,
    so let's put it to good use. There are a few desktop clients out there that you
    can use, but we'll use the command line for simplicity, so that it works for everyone.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪我们的应用程序、我们的进展，并允许我们在犯错时回滚，我们需要在我们的仓库上运行源代码控制。我们在[第2章](ch02.html "第2章。设置您的开发环境")中安装了Git，*设置您的开发环境*，所以让我们好好利用它。虽然有一些桌面客户端可以使用，但为了简单起见，我们将使用命令行，以便适用于所有人。
- en: Time for action — initializing a Git repository
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动-初始化Git仓库
- en: Git needs to be initialized in the root of each development project so that
    it can keep a track of all of the project files. Let's do this for our newly created
    `verge` project!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Git需要在每个开发项目的根目录中初始化，以便跟踪所有项目文件。让我们为我们新创建的`verge`项目做这个！
- en: Open **Terminal**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以更改目录到我们的工作目录：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Type the following command to initialize our Git directory:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以初始化我们的Git目录：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Git will respond with the following:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git将回应以下内容：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Keep your **Terminal** window open so that you can interact with Git in this
    chapter.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持您的**终端**窗口打开，以便在本章中与Git进行交互。
- en: What just happened?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used **Terminal** to initialize our Git repository by using the command `git
    init` in our working directory. Git responded to let us know that everything went
    okay. Now that we have our Git repository set up, we'll need to add each file
    under source control when new ones are created. The syntax for adding a file to
    Git is simple, `git add path_to_file`. You can also add all of the files within
    a directory recursively with a wildcard statement by typing `"git" add .`". In
    most parts of this chapter, we'll be quickly adding files, so we will use `"git
    add .".`
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**终端**通过在工作目录中使用命令`git init`来初始化我们的Git仓库。Git回应让我们知道一切都进行得很顺利。现在我们已经设置好了Git仓库，当创建新文件时，我们需要将每个文件添加到源代码控制中。将文件添加到Git的语法很简单，`git
    add path_to_file`。您还可以通过输入`"git add ."`的通配符语句递归地添加目录中的所有文件。在本章的大部分部分，我们将快速添加文件，因此我们将使用`"git
    add ."`。
- en: Implementing basic routing
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现基本路由
- en: Before we start creating `Bones`, let's first look into why we'll need its help.
    Let's start by creating a simple file that will just make sure that our application
    is all set up and ready to go.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建`Bones`之前，让我们先看看为什么我们需要它的帮助。让我们首先创建一个简单的文件，确保我们的应用程序已经设置好并准备就绪。
- en: 'Time for action — creating our first file: index.php'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动-创建我们的第一个文件：index.php
- en: The first file we'll create is a file called `index.php`. This file will handle
    all of the requests to our application and eventually will be the main application
    controller that will talk to `Bones`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的第一个文件是一个名为`index.php`的文件。这个文件将处理我们应用程序的所有请求，并最终将成为主要的应用程序控制器，将与`Bones`进行通信。
- en: 'Create `index.php` in the working directory, and add the following text:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作目录中创建`index.php`，并添加以下文本：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open your browser, and go to the url: `http://localhost/verge/`.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，转到网址：`http://localhost/verge/`。
- en: 'The `index.php` file will display the following words:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.php`文件将显示以下文字：'
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What just happened?
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a simple PHP file called `index.php` that simply returns text to
    us at this point. We can access this file only if we directly go to `http://localhost/verge/`
    or `http://localhost/verge/index.php`. However, our goal is that `index.php` will
    be hit for almost every request inside of our working directory (with the exception
    being our `public` files). In order for us to do this, we need to add a `.htaccess`
    file that will allow us to use URL rewriting.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的PHP文件，名为`index.php`，目前只是简单地返回文本给我们。我们只能在直接访问`http://localhost/verge/`或`http://localhost/verge/index.php`时访问这个文件。然而，我们的目标是`index.php`将被我们工作目录中的几乎每个请求所访问（除了我们的`public`文件）。为了做到这一点，我们需要添加一个`.htaccess`文件，允许我们使用URL重写。
- en: .htaccess files
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .htaccess文件
- en: '`.htaccess` files are known as distributed configuration files, and they allow
    Apache configurations to be overridden on a directory basis. If you remember,
    in [Chapter 1](ch01.html "Chapter 1. Introduction to CouchDB"), *Introduction
    to CouchDB* we made sure that we could use the `.htaccess` files by changing some
    lines of code to `Override All`. Most PHP frameworks utilize the `.htaccess` files
    in the same way that we will, so it''s important for you to get familiar with
    this process.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`.htaccess`文件被称为分布式配置文件，它允许Apache配置在目录基础上被覆盖。如果您记得，在[第1章](ch01.html "第1章。CouchDB简介")中，*CouchDB简介*，我们确保可以通过改变一些代码行来使用`.htaccess`文件，以`Override
    All`。大多数PHP框架都以我们将要使用的方式利用`.htaccess`文件，因此您需要熟悉这个过程。'
- en: Time for action — creating the .htaccess file
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动-创建.htaccess文件
- en: In order for us to handle all requests to a directory, we'll create a `.htaccess`
    file in the working directory.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理对目录的所有请求，我们将在工作目录中创建一个`.htaccess`文件。
- en: Create a file called `.htaccess` in the working directory.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作目录中创建一个名为`.htaccess`的文件。
- en: 'Add the following code to the file:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Open the file `index.php` in the working directory.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作目录中打开`index.php`文件。
- en: 'Change the code inside of `index.php` to match the following:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`index.php`中的代码以匹配以下内容：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Open your browser, go to `http://localhost/verge/test/abc`, and go to `http://localhost/verge/test/123`.
    Notice that the page will respond back to you with the same value that you entered
    at the end of the root URL.![Time for action — creating the .htaccess file](graphics/3586_04_007.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，转到`http://localhost/verge/test/abc`，然后转到`http://localhost/verge/test/123`。注意页面会以你在根URL末尾输入的相同值回应你。![执行操作-创建.htaccess文件](graphics/3586_04_007.jpg)
- en: What just happened?
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We first created a `.htaccess` file to enable us to do URL rewriting. The first
    line,`<IfModule mod_rewrite.c>`, checks to make sure that we enabled the `mod_rewrite`
    module. This will be `true` because we enabled `mod_rewrite` in our `http.conf`
    file in [Chapter 2](ch02.html "Chapter 2. Setting up your Development Environment").
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个`.htaccess`文件，以便启用URL重写。第一行`<IfModule mod_rewrite.c>`检查我们是否启用了`mod_rewrite`模块。这将是`true`，因为我们在[第2章](ch02.html
    "第2章。设置开发环境")的`http.conf`文件中启用了`mod_rewrite`。
- en: The next line of the file says `RewriteEngine On`, and it does it exactly what
    you think it does; it turns Apache's `RewriteEngine` on and waits for some conditions
    and rules. Next, we set two `RewriteCond` (rewrite conditions). The first `RewriteCond`
    tells `RewriteEngine` to rewrite URLs if the passed URL does not match the location
    of an existing file (which is what the `f` stands for). The second `RewriteCond`
    tells `RewriteEngine` to rewrite URLs that are not already an existing directory
    (which is what the `-d` stands for). Lastly, we set our `RewriteRule`, which says
    that when a URL is entered for the first value, forward it to the second value
    (target). This `RewriteRule` tells the `RewriteEngine` that any URL that is passed
    to this directory should be forced to go through the index file and passed the
    route to the `index.php` file in the form of a query string named `request`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的下一行说`RewriteEngine On`，它确切地做了你认为它会做的事情；它打开了Apache的`RewriteEngine`并等待一些条件和规则。接下来，我们设置了两个`RewriteCond`（重写条件）。第一个`RewriteCond`告诉`RewriteEngine`，如果传递的URL与现有文件的位置不匹配（这就是`f`的含义），则重写URL。第二个`RewriteCond`告诉`RewriteEngine`，重写URL如果它不是已经存在的目录（这就是`-d`的含义）。最后，我们设置了我们的`RewriteRule`，它表示当输入一个URL时，将其转发到第二个值（目标）。这个`RewriteRule`告诉`RewriteEngine`，传递到这个目录的任何URL都应该被强制通过索引文件，并将路由传递给`index.php`文件，形成一个名为`request`的查询字符串。
- en: At the end, the string is `[QSA, L]`. Let me explain what this means. `QSA`
    means, if there are any query strings added to the request, append it to the rewrite
    target. `L` means, stop trying to find matches, and don't apply any more rules.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，字符串是`[QSA, L]`。让我解释一下这是什么意思。`QSA`表示，如果有任何查询字符串添加到请求中，请将其附加到重写目标。`L`表示，停止尝试查找匹配项，并且不应用任何其他规则。
- en: You then opened up the `index.php` file and changed the code to output the `request`
    variable. You now know that the route entered into the browser will be passed
    to the `index.php` file in the form of a query string.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你打开了`index.php`文件，并更改了代码以输出`request`变量。现在你知道，输入浏览器的路由将以查询字符串的形式传递给`index.php`文件。
- en: With all of this code in place, we tested everything out, and by going to the
    URL `http://localhost/verge/test/abc`, our `index.php` file returned `test/abc`.
    When we changed the URL to `http://localhost/verge/test/123`, our `index.php`
    file returned `test/123` back to us.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有了所有这些代码，我们测试了一切，通过转到URL`http://localhost/verge/test/abc`，我们的`index.php`文件返回了`test/abc`。当我们将URL更改为`http://localhost/verge/test/123`时，我们的`index.php`文件将`test/123`返回给我们。
- en: Hacking together URLs
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拼凑URL
- en: 'At this point, we technically could scrap things together with a bunch of `if`
    statements, allowing our website to serve up different content. For example, we
    could show different content based on the URL, by just adding a few pieces of
    code into `index.php` as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们技术上可以用一堆`if`语句拼凑在一起，让我们的网站提供不同的内容。例如，我们可以根据URL显示不同的内容，只需将一些代码添加到`index.php`中，如下所示：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this piece of code, if a user went to the URL `http://localhost/verge`,
    their browser would display:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，如果用户转到URL`http://localhost/verge`，他们的浏览器将显示：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Likewise, if a user went to `http://localhost/verge/signup`, their browser
    would display:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果用户转到`http://localhost/verge/signup`，他们的浏览器将显示：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We could extend this way of thinking further and further, by writing a variety
    of `if` statements, stringing our code into one long file, and jumping right into
    programming our application. However, this would be an absolute nightmare to maintain,
    difficult to debug, and is just bad practice, in general.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步扩展这种思维方式，通过编写各种`if`语句，将我们的代码串联成一个长文件，并立即开始编写我们的应用程序。然而，这将是一个维护的噩梦，难以调试，并且一般来说是不好的做法。
- en: Instead, let's delete all of the code in our `index.php` file and focus on building
    our project the right way. For the rest of this chapter, we'll work on creating
    a simple framework called `Bones`, which will handle some of the heavy lifting
    of requests for us.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们删除`index.php`文件中的所有代码，专注于以正确的方式构建我们的项目。在本章的其余部分，我们将致力于创建一个名为`Bones`的简单框架，它将为我们处理一些请求的繁重工作。
- en: Creating the skeleton of Bones
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Bones的骨架
- en: As I've mentioned before, `Bones` is an extremely lightweight framework consisting
    of a little over 100 lines of code in all, which resides in one file. In this
    section, we'll begin to form the structure onto which we will build more and more
    functionality in the following sections.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，`Bones`是一个非常轻量级的框架，总共只有100多行代码，全部都在一个文件中。在本节中，我们将开始形成一个结构，以便在接下来的章节中构建更多的功能。
- en: Time for action — hooking up our application to Bones
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作-将我们的应用程序连接到Bones
- en: Let's start by creating the `Bones` library and then connecting our `index.php`
    file to it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建`Bones`库，然后将我们的`index.php`文件连接到它。
- en: Create a file named `bones.php` inside of the `lib` folder of our working directory
    (`/Library/Webserver/Documents/verge/lib/bones.php`).
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的工作目录的`lib`文件夹中创建一个名为`bones.php`的文件(`/Library/Webserver/Documents/verge/lib/bones.php`)。
- en: 'Add the following code to the `index.php` file in our working directory, so
    that we can talk to the newly created `bones.php` file:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到我们工作目录中的`index.php`文件中，以便我们可以与新创建的`bones.php`文件进行通信：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What just happened?
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: All that this code is doing is including our `lib/bones.php` file, and that's
    good enough for us right now! Notice that we didn't end the file with a `?>`,
    as you may be accustomed to seeing. The `?>` tag is actually optional, and, in
    our case, leaving it will allow us to reduce the unwanted whitespace and to add
    headers to response later in the code, if we would like.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码所做的就是包含我们的`lib/bones.php`文件，现在这已经足够了！请注意，我们没有用`?>`结束文件，这可能不是你习惯看到的。`?>`标签实际上是可选的，在我们的情况下，不使用它可以减少不需要的空白，并且在代码后面添加响应头，如果需要的话。
- en: Using Bones to handle requests
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bones处理请求
- en: To illustrate what we are planning to do with the `Bones` class, let's go through
    a quick example on what we would like to accomplish by the end of this section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明我们计划使用`Bones`类做什么，让我们通过一个快速示例来看看我们希望在本节结束时实现的目标。
- en: If a browser was to hit the URL `http://localhost/verge/signup`, we want `Bones`
    to intercept the call and interpret it as `http://localhost/verge/index.php?request=signup`.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果浏览器访问URL `http://localhost/verge/signup`，我们希望`Bones`拦截调用并将其解释为`http://localhost/verge/index.php?request=signup`。
- en: '`Bones` will then look through a list of routes that we''ve defined in our
    `index.php` file and see if there''s a match.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，`Bones`将查看我们在`index.php`文件中定义的路由列表，并查看是否有匹配。
- en: If there is indeed a match, `Bones` will perform a callback to the matching
    function and execute the actions inside of that route.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果确实有匹配，`Bones`将执行匹配函数的回调并执行该路由内的操作。
- en: If any of that was confusing, don't worry. Hopefully it'll start to make sense
    as we slowly build this functionality.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以上内容有些令人困惑，不用担心。随着我们慢慢构建这个功能，希望它会开始变得有意义。
- en: Time for action — creating the class structure of Bones
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-创建Bones的类结构
- en: 'Let''s start building out the `Bones` class by adding the following code to
    the `lib/bones.php` file inside our working directory:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向我们的工作目录中的`lib/bones.php`文件添加以下代码来开始构建`Bones`类：
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Library/Webserver/Documents/verge/lib/bones.php`'
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What just happened?
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just created our `Bones` class, added a few `private` and `public` variables,
    and a strange function called `get_instance()`. The private static variable `$instance`,
    mixed with the function `get_instance()`, forms something that is called **The
    Singleton Pattern**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了我们的`Bones`类，添加了一些`private`和`public`变量，以及一个名为`get_instance()`的奇怪函数。私有静态变量`$instance`与函数`get_instance()`结合在一起，形成了所谓的**单例模式**。
- en: The Singleton Pattern allows our `Bones` class to not just be a simple class,
    but also to be one object. This means that each time we call our `Bones` class,
    we are accessing a single existing object. But if the object does not exist, it
    will create a new one for us to use. It's a bit of a complex idea; however, I
    hope it starts to make sense as we make use of it down the road.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 单例模式允许我们的`Bones`类不仅仅是一个简单的类，还可以是一个对象。这意味着每次调用我们的`Bones`类时，我们都在访问一个现有的对象。但如果对象不存在，它将为我们创建一个新的对象来使用。这是一个有点复杂的想法；然而，我希望随着我们在后面使用它，它开始变得有意义。
- en: Accessing the route
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问路由
- en: Now that we have the basic concept of our class, let's add some functions to
    grab and interpret the route (URL that was passed to `Bones)` each time a new
    request is created. We will then compare the result against each possible route
    in the next section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了我们类的基本概念，让我们添加一些函数来获取和解释路由（传递给`Bones`的URL）每次创建新请求时。然后我们将在下一节中将结果与每个可能的路由进行比较。
- en: Time for action — creating functions to access the route on Bones creation
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-创建函数以访问Bones创建时的路由
- en: 'In order for us to figure out what route was passed in a request, we''ll need
    to add the following two functions to the `lib/bones.php` file underneath the
    closing bracket of the `get_instance()` function:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了弄清楚请求中传递了什么路由，我们需要在`lib/bones.php`文件的`get_instance()`函数的结束括号下面添加以下两个函数：
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Library/Webserver/Documents/verge/lib/bones.php`'
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What just happened?
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: In this piece of code, we added a function called `__construct()`, which is
    a function that is automatically called each time a class is created. Our `__construct()`
    function then calls another function named `get_route()`, which will grab the
    route (if there is one) from our request query string and return it to the instance's
    `route` variable.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们添加了一个名为`__construct()`的函数，这是一个在每次创建类时自动调用的函数。我们的`__construct()`函数然后调用另一个名为`get_route()`的函数，它将从我们的请求查询字符串中获取路由（如果有的话）并将其返回给实例的`route`变量。
- en: Matching URLs
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 匹配URL
- en: In order for us to match up the routes of our application, we will need to push
    each possible route through a function called `register`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了匹配我们应用程序的路由，我们需要将每个可能的路由通过一个名为`register`的函数。
- en: Time for action — creating the register function to match routes
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-创建注册函数以匹配路由
- en: 'The `register` function will be one of the most important functions in the
    `Bones` class down the road, but we''ll just get started by adding the following
    code at the end of our `lib/bones.php` file:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`register`函数将是`Bones`类中最重要的函数之一，但我们将从在`lib/bones.php`文件的末尾添加以下代码开始：'
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Library/Webserver/Documents/verge/lib/bones.php`'
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What just happened?
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We started by creating a public static function called `register`. This function
    has two parameters: `$route` and `$callback. $route` contains the route that we
    are attempting to match against the actual route, and `$callback` is the function
    that will be executed if the routes do match. Notice that, at the start of the
    `register` function, we call for our `Bones` instance, using the `static:get_instance()`
    function. This is the Singleton Pattern in action, returning the single instance
    of the `Bones` object to us.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个名为`register`的公共静态函数。这个函数有两个参数：`$route`和`$callback`。`$route`包含我们试图匹配实际路由的路由，`$callback`是如果路由匹配则将被执行的函数。请注意，在`register`函数的开头，我们调用了我们的`Bones`实例，使用`static:get_instance()`函数。这就是单例模式的作用，将`Bones`对象的单一实例返回给我们。
- en: The `register` function then checks to see if the route that we visited through
    our browser matches the route that was passed into the function. If there is a
    match, our `$route_found` variable will be set to `true`, which will allow us
    to skip looking through the rest of the routes. The `register` function will then
    execute a callback function that will do the work that was defined in our route.
    Our `Bones` instance will also be passed with the callback function, so that we
    can use it to our advantage. If the route is not a match, we will return `false`
    so that we know the route wasn't a match.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`register`函数检查我们通过浏览器访问的路由是否与传入函数的路由匹配。如果匹配，我们的`$route_found`变量将被设置为`true`，这将允许我们跳过查看其余的路由。`register`函数将执行一个回调函数，该函数将执行我们在路由中定义的工作。我们的`Bones`实例也将与回调函数一起传递，这样我们就可以利用它。如果路由不匹配，我们将返回`false`，以便我们知道路由不匹配。
- en: 'We are now at the end of what we''ll do in `Bones` for now. So, make sure to
    end your class with a closing bracket as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了我们在`Bones`中的工作。所以，请确保用以下方式结束你的类：
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Calling the register function from our application
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从我们的应用程序调用`register`函数
- en: We now have a basic understanding of what `Bones` is supposed to do, but we're
    missing a function that will tie our `index.php` and `lib/bones.php` files together.
    We'll eventually create four functions that will do this, one for each HTTP method.
    But, for now, let's just create our `get` function.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在对`Bones`应该做什么有了基本的了解，但我们缺少一个将我们的`index.php`和`lib/bones.php`文件联系在一起的函数。我们最终将创建四个函数来做到这一点，每个函数对应一个HTTP方法。但是，现在让我们先创建我们的`get`函数。
- en: Time for action — creating a get function in our Bones class
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在我们的Bones类中创建一个get函数
- en: 'Let''s create a `get` function at the top of the `lib/bones.php` file, right
    after the`<?php` tag and before we define the `Bones` class:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`lib/bones.php`文件的顶部创建一个`get`函数，在`<?php`标签之后，在我们定义`Bones`类之前：
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Library/Webserver/Documents/verge/lib/bones.php`'
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What just happened?
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: This function lies in the `lib/bones.php` file and is called for each `get`
    route that you have defined in your `index.php` file. This function is a simple
    pass-through function that hands off the route and callback to the `register`
    function of `Bones`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数位于`lib/bones.php`文件中，并且被调用来处理你在`index.php`文件中定义的每个`get`路由。这个函数是一个简单的传递函数，将路由和回调传递给`Bones`的`register`函数。
- en: Are we on the same page?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否在同一页面上？
- en: 'We did a whole lot in this section. Let''s double check that your code matches
    my code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分我们做了很多事情。让我们仔细检查一下你的代码是否与我的代码匹配：
- en: '`/Library/Webserver/Documents/verge/lib/bones.php`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`/Library/Webserver/Documents/verge/lib/bones.php`'
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding routes to our application
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为我们的应用程序添加路由
- en: We are finished with our `lib/bones.php` file for now. All we need to do is
    add a few routes to our `index.php` file that call the `get` function that lives
    in the `lib/bones.php` folder.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了我们的`lib/bones.php`文件。我们所需要做的就是在我们的`index.php`文件中添加一些路由，调用`lib/bones.php`文件夹中的`get`函数。
- en: Time for action — creating routes for us to test against Bones
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——为我们测试`Bones`的路由创建路由
- en: 'Open up the `index.php` file and add the following two routes so that we can
    test our new code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`index.php`文件，添加以下两个路由，以便我们可以测试我们的新代码：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: What just happened?
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just created two routes for our `Bones` class to handle `/` (which is the
    root URL) and `/signup`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为我们的`Bones`类创建了两个路由，分别处理`/`（即根URL）和`/signup`。
- en: 'There are a few things to notice in the code that we just added:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚刚添加的代码中有一些需要注意的地方：
- en: Our two `get` routes are now clean, little functions, including our route and
    a function that will act as our callback function
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的两个`get`路由现在都是干净的小函数，包括我们的路由和一个将作为回调函数的函数。
- en: Once the function is executed, we are using `echo` to display the simple text
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦函数被执行，我们就使用`echo`来显示简单的文本。
- en: When a route is matched and a callback is executed from `Bones`, the instance
    of `Bones` is returned as the variable `$app`, which can be used anywhere in the
    callback function
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个路由匹配并且从`Bones`执行回调时，`Bones`的实例将作为变量`$app`返回，可以在回调函数中的任何地方使用
- en: Testing it out!
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试一下！
- en: We're all set to test out our new additions to `Bones!` Open up your browser,
    and go to `http://localhost/verge/`. You'll see the word `Home`. Then direct your
    browser to `http://localhost/verge/signup`, and you'll see the text `Signup!`
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好测试我们对`Bones`的新添加内容了！打开你的浏览器，然后转到`http://localhost/verge/`。你会看到`Home`这个词。然后将你的浏览器指向`http://localhost/verge/signup`，你会看到`Signup!`这个文本。
- en: While our application is still very basic, I hope you see the strength in adding
    routes in this simple fashion. Feel free to play around and add a few more routes
    before moving on to the next section.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的应用程序仍然非常基础，但我希望你能看到以这种简单的方式添加路由的强大之处。在继续下一部分之前，随意玩耍并添加一些更多的路由。
- en: Adding changes to Git
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将更改添加到Git
- en: In this section, we started our `lib/bones.php` library and added some simple
    routing. Let's add all of our changes to Git so that we can track our progress.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们启动了我们的`lib/bones.php`库，并添加了一些简单的路由。让我们将所有的更改都添加到Git中，这样我们就可以跟踪我们的进度了。
- en: Open **Terminal**.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以更改目录到我们的工作目录：
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add all of the files that we''ve created in this directory by typing the following
    command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令将我们在此目录中创建的所有文件添加进来：
- en: '[PRE19]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Give Git a description of what we''ve done since our last commit:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给Git一个描述，说明自上次提交以来我们做了什么：
- en: '[PRE20]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Handling layouts and views
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理布局和视图
- en: We're going to take a break from routes for a bit and add some fun frontend
    functionality. Every application consists of a number of pages which we'll call
    **views**. Each view has a standard layout that these views will populate. Layouts
    are a wrapper for views and may contain links to CSS references, navigation, or
    whatever else you think makes sense to be common to each view.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将暂时停止路由的操作，添加一些有趣的前端功能。每个应用程序都由一些页面组成，我们将称之为**视图**。每个视图都有一个标准的布局，这些视图将填充。布局是视图的包装器，可能包含到CSS引用、导航或其他你认为对每个视图都是通用的内容。
- en: Using Bones to support views and layouts
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bones支持视图和布局
- en: In order to support views and layouts, we will need to add some additional functionality
    to our `Bones` class.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持视图和布局，我们需要向我们的`Bones`类添加一些额外的功能。
- en: Time for action — using constants to get the location of the working directory
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用常量获取工作目录的位置
- en: The first thing that we need to do is create a named constant called `ROOT`,
    which will give us the full location of our working directory. Until now, we haven't
    had to do any extra including of files, but with our layouts and views, it'll
    start to get a bit difficult if we don't add some functionality to get the working
    directory. In order to support this, let's add a simple line of code right at
    the top of our `lib/bones.php` file.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建一个名为`ROOT`的命名常量，它将给出我们工作目录的完整位置。到目前为止，我们还没有不得不包含任何额外的文件，但是随着我们的布局和视图，如果我们不添加一些功能来获取工作目录，它将开始变得有点困难。为了支持这一点，让我们在`lib/bones.php`文件的顶部添加一行简单的代码。
- en: '[PRE21]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What just happened?
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: This line of code creates a constant named `ROOT` that we can then use throughout
    our code to reference the working directory. `__DIR__` gives us the root of the
    current file (`/Library/Webserver/Documents/verge/lib`). So, we'll want to look
    at one more directory back by appending `/.`. to the path.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码创建了一个名为`ROOT`的常量，我们可以在整个代码中使用它来引用工作目录。`__DIR__`给出了当前文件的根目录(`/Library/Webserver/Documents/verge/lib`)。因此，我们将希望通过在路径后添加`/.`来查看另一个目录。
- en: Time for action — allowing Bones to store variables and the content path
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-允许Bones存储变量和内容路径
- en: We need to be able to set and receive variables to our views from `index.php`.
    So, let's add that support into `Bones`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要能够从`index.php`中设置和接收变量到我们的视图中。因此，让我们将这个支持添加到`Bones`中。
- en: 'Let''s define a `public` array called `$vars` that will allow us to store variables
    from our routes in `index.php` and a string called `$content` that will house
    the path to the view that will be loaded into our layout. We''ll start by adding
    two variables just inside our `lib/bones.php` class:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一个名为`$vars`的`public`数组，它将允许我们从`index.php`中的路由中存储变量，并且定义一个名为`$content`的字符串，它将存储视图的路径，这些视图将加载到我们的布局中。我们将首先在`lib/bones.php`类中添加两个变量：
- en: '[PRE22]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In order for us to set variables from our `index.php` file, we'll create a simple
    function called `set` that will allow us to pass an index and a value for a variable
    and save it to the current `Bones` instance. Let's create a function in `lib/bones.php`
    called `set`, right after the `get_route()` function.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了能够从`index.php`文件中设置变量，我们将创建一个简单的名为`set`的函数，它将允许我们传递一个索引和一个变量的值，并将其保存到当前的`Bones`实例中。让我们在`lib/bones.php`中的`get_route()`函数之后创建一个名为`set`的函数。
- en: '[PRE23]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: What just happened?
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added two new variables, `$vars` and `$content`, to our `Bones` class. Both
    of them will be utilized in the next section. We then created a `set` function
    to allow us to send variables to our `Bones` class from our `index.php` file so
    that we can display them in our views.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向`Bones`类添加了两个新变量`$vars`和`$content`。它们两者将在下一节中被使用。然后我们创建了一个`set`函数，允许我们从`index.php`文件发送变量到我们的`Bones`类，以便我们可以在我们的视图中显示它们。
- en: Next, we need to add the ability for us to call views from `index.php` and have
    them displayed. The function that will house this functionality will be called
    `render`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加能够从`index.php`中调用视图并显示它们的功能。将包含此功能的函数称为`render`。
- en: Time for action — allowing our application to display a view by calling it in
    index.php
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-通过在index.php中调用它来允许我们的应用程序显示视图
- en: 'We''ll start by creating a `public` function, called `render` that accepts
    two arguments. The first is `$view`, which is the name (or path) of the view you
    want to display, and the second is `$layout`, which will define which layout we
    use to show the view. Layout will also have a default value, so that we can keep
    things simple, in order to handle the displaying of views. Add the following code
    to the `lib/bones.php` file, right after the `set` function:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个名为`render`的`public`函数，它接受两个参数。第一个是`$view`，它是你想要显示的视图的名称（或路径），第二个是`$layout`，它将定义我们用来显示视图的布局。布局也将有一个默认值，以便我们可以保持简单，以处理视图的显示。在`lib/bones.php`文件中的`set`函数之后添加以下代码：
- en: '[PRE24]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: What just happened?
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created the `render` function that will set the path of the view that we
    want to display in our layout. All of the views will be saved inside the `views`
    directory that we created earlier in this chapter. The code then loops through
    each of the variables set in the instance's `vars` array. For each variable, we
    use a strange syntax `$$`, which allows us to set a variable using the key we
    defined in our array. This will allow us to reference the variables directly in
    our views. Finally, we added a simple `if` statement that checks to see if a `layout`
    file is defined. If `$layout` is not defined, we'll simply return the content
    of the view. If `$layout` is defined, we'll include the layout, which will return
    our view wrapped in the defined layout. We do this so that we can avoid using
    layouts down the road, if we want. For instance, in an AJAX call, we might just
    want to return the view without the layout.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`render`函数，它将设置我们想要在布局中显示的视图的路径。所有的视图都将保存在我们在本章前面创建的`views`目录中。然后，代码循环遍历实例的`vars`数组中设置的每个变量。对于每个变量，我们使用一个奇怪的语法`$$`，这使我们能够使用我们在数组中定义的键来设置一个变量。这将允许我们直接在我们的视图中引用这些变量。最后，我们添加了一个简单的`if`语句，用于检查是否定义了一个`layout`文件。如果未定义`$layout`，我们将简单地返回视图的内容。如果定义了`$layout`，我们将包含布局，这将返回我们的视图包裹在定义的布局中。我们这样做是为了以后避免使用布局。例如，在一个AJAX调用中，我们可能只想返回视图而不包含布局。
- en: Time for action — creating a simple layout file
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——创建一个简单的布局文件
- en: In this section, we'll create a simple layout file called `layout.php`. Remember
    that in our `render` function, there is a default value for `$layout`, and that
    is set to `layout`. This means that, by default, `Bones` will look for `views/layout.php`.
    So, let's create that file now.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建一个名为`layout.php`的简单布局文件。请记住，在我们的`render`函数中，`$layout`有一个默认值，它被设置为`layout`。这意味着，默认情况下，`Bones`将查找`views/layout.php`。所以，现在让我们创建这个文件。
- en: Start by creating a new file in our `views` directory called `layout.php`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在我们的`views`目录中创建一个名为`layout.php`的新文件。
- en: Add the following code in the newly created `views/layout.php:`
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的`views/layout.php`中添加以下代码：
- en: '[PRE25]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: What just happened?
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We created a very simple HTML layout that will be used in all of our views in
    the application. If you remember, our `render` function in `Bones` uses the path
    set as the `$content` variable that we set in the previous function and also includes
    it, so that we can display the view.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个非常简单的HTML布局，它将在应用程序的所有视图中使用。如果你记得，我们在`Bones`的`render`函数中使用了路径设置为`$content`变量，我们在前一个函数中设置了它，并且也包含了它，这样我们就可以显示视图。
- en: Adding views to our application
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向我们的应用程序添加视图
- en: Now that we have all of the pieces in place for views, we just need to add a
    few lines of code to the `index.php` file, so that we can render views.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经把所有的部分都放在了视图中，我们只需要在`index.php`文件中添加几行代码，这样我们就可以呈现视图了。
- en: Time for action — rendering views inside of our routes
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在我们的路由中呈现视图
- en: 'Let''s replace the existing portions of code inside our routes that just echoed
    out text with the following code that will actually use our new framework:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用以下代码替换我们路由中已经输出文本的现有部分，这些代码将实际使用我们的新框架：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: What just happened?
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: For the root route, we used our new function `set` to pass a variable with the
    key of`'message'` and its contents being`'Welcome Back!'`, and we then told `Bones`
    to render the home view. For the `signup` route, we are just rendering the `signup`
    view.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 对于根路由，我们使用了我们的新函数`set`来传递一个键为`'message'`的变量，并且它的内容是`'Welcome Back!'`，然后我们告诉`Bones`呈现主页视图。对于`signup`路由，我们只是呈现`signup`视图。
- en: Time for action — creating views
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——创建视图
- en: We are just about ready to test this new code out, but we need to create the
    actual views so that we can display them.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎准备好测试这段新代码了，但我们需要创建实际的视图，这样我们才能显示它们。
- en: Start by creating two new files in the `views` folder, inside our working directory,
    called `home.php` and `signup.php`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在我们的工作目录中的`views`文件夹中创建两个新文件，分别命名为`home.php`和`signup.php`。
- en: 'Add the following code to the `views/home.php` file by writing the following
    code:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过编写以下代码将以下代码添加到`views/home.php`文件中：
- en: '[PRE27]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the following code to the `views/signup.php` file:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`views/signup.php`文件中：
- en: '[PRE28]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: What just happened?
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We created two simple views that will be rendered by the `index.php` file. The
    line of code inside `views/home.php` that says`<?php echo $message; ?>`, will
    display the variable with the name message that was passed to our `Bones` library
    from our `index.php` file. Test it out!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个简单的视图，它们将由`index.php`文件呈现。`views/home.php`文件中的一行代码`<?php echo $message;
    ?>`将显示传递给我们的`Bones`库的`index.php`文件中的名称为message的变量。试一下吧！
- en: Open up your browser, go to `http://localhost/verge/` or `http://localhost/verge/signup`,
    and you'll see that all of our hard work has paid off. Our layout is now rendering,
    and our views are being displayed. We were also able to pass a variable, called
    `message`, from `index.php` and output the value on our home view. I hope you
    can start to see the strength of what we are adding to `Bones` so far!
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的浏览器，转到`http://localhost/verge/`或`http://localhost/verge/signup`，你会看到我们所有的辛勤工作都得到了回报。我们的布局现在正在呈现，我们的视图正在显示。我们还能够从`index.php`传递一个名为`message`的变量，并在我们的主页视图上输出该值。我希望你能开始看到我们迄今为止为`Bones`添加的功能的强大之处！
- en: Adding changes to Git
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将更改添加到Git
- en: So far, we added support for layouts and views, which will help us build out
    all of the pages of our application. Let's add all of our changes to Git, so that
    we can track our progress.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为布局和视图添加了支持，这将帮助我们构建应用程序的所有页面。让我们把所有的改变都添加到Git中，这样我们就可以跟踪我们的进展。
- en: Open **Terminal**.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以更改目录到我们的工作目录：
- en: '[PRE29]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add all of the files that we''ve created in this directory, by typing the following
    command:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令，将我们在该目录中创建的所有文件都添加进去：
- en: '[PRE30]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Give Git a description of what we''ve done since our last commit:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给Git一个描述，说明我们自上次提交以来做了什么：
- en: '[PRE31]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Adding support for other HTTP methods
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加对其他HTTP方法的支持
- en: 'Until now, we''ve been handling `GET` calls, but in a web application, we will
    have to be able to support all of the `HTTP` methods that we have talked about
    in the previous chapter: `GET, PUT, POST`, and `DELETE`.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在处理`GET`调用，但在Web应用程序中，我们将需要支持我们在上一章中讨论过的所有`HTTP`方法：`GET, PUT, POST`和`DELETE`。
- en: Time for action — retrieving the HTTP method used in a request
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-检索请求中使用的HTTP方法
- en: We have done most of the heavy lifting required to support, capture, and handle
    HTTP requests. We just need to plug in a few extra lines of code.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了支持、捕获和处理HTTP请求所需的大部分繁重工作。我们只需要插入几行额外的代码。
- en: 'Let''s add a variable to our `Bones` class, called `$method`, after our `$route`
    variable. This variable will store the `HTTP` method that was performed on each
    request:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在我们的`Bones`类中添加一个变量`$method`，在我们的`$route`变量之后。这个变量将存储每个请求上执行的`HTTP`方法：
- en: '[PRE32]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In order for us to get the method on each request, we will need to add a line
    of code in our `__construct()` function, named `get_route()`, and save the value
    of the result in our instances variable `$method`. This means that when `Bones`
    is created on each request, it will also retrieve the method and save it to our
    `Bones` instance, so that we can use it down the road. Do this by adding the following
    code:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让我们在每个请求中获取方法，我们需要在我们的`__construct()`函数中添加一行代码，名为`get_route()`，并将结果的值保存在我们的实例变量`$method`中。这意味着当`Bones`在每个请求中被创建时，它也将检索方法并将其保存到我们的`Bones`实例中，以便我们以后可以使用它。通过添加以下代码来实现这一点：
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s create the function called `get_method()`, so that our `__construct()`
    function can call it. Let''s add it right after our `get_route()` method:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`get_method()`的函数，这样我们的`__construct()`函数就可以调用它。让我们在我们的`get_route()`方法之后添加它：
- en: '[PRE34]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: What just happened?
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added a variable `$method` to your `Bones` class. This variable is set by
    the function `get_route()`, and returns a value to the instances `$method` variable
    each time a request is made to `Bones` through the `__construct()` method. That
    probably sounds super confusing, but bear with me.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在你的`Bones`类中添加了一个变量`$method`。这个变量是由函数`get_route()`设置的，并且每次通过`__construct()`方法向`Bones`发出请求时，都会将一个值返回给实例`$method`变量。这可能听起来非常令人困惑，但请耐心等待。
- en: The `get_route()` function uses an array called `$_SERVER` that is created by
    the web server, and allows us to retrieve information on request and execution.
    This simple one liner is saying that if `REQUEST_METHOD` is set in `$_SERVER`,
    then return it, but if `REQUEST_METHOD` is not set for whatever reason, just return
    `GET` for the method to be safe.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_route()`函数使用一个名为`$_SERVER`的数组，这个数组是由Web服务器创建的，并允许我们检索有关请求和执行的信息。这个简单的一行代码是在说，如果`$_SERVER`中设置了`REQUEST_METHOD`，那么就返回它，但如果由于某种原因`REQUEST_METHOD`没有设置，就返回`GET`以确保方法的安全。'
- en: Time for action — altering the register to support different methods
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-修改注册以支持不同的方法
- en: Now that we are retrieving the method on each request, we need to alter our
    register function so that we can pass `$method` along with each of our routes
    in order for them to match properly.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在每个请求中检索方法，我们需要修改我们的注册函数，以便我们可以在每个路由中传递`$method`，以便它们能够正确匹配。
- en: 'Add `$method` onto the `register` function in `lib/bones.php` so that we can
    pass a method into the function:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`lib/bones.php`的`register`函数中添加`$method`，以便我们可以将一个方法传递到函数中：
- en: '[PRE35]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We now need to update our simple route matching in our register function to
    also check that the passed routes `$method` matches our instance variables `$bones->method`,
    which is the method that actually happened on the server:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要更新我们在注册函数中的简单路由匹配，以检查传递的路由`$method`是否与我们的实例变量`$bones->method`匹配，这是实际发生在服务器上的方法：
- en: '[PRE36]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: What just happened?
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added a `$method` argument to be passed into our `register` function. We
    then used this `$method` variable in our `register` function by adding it to the
    list of arguments that have to be `true` in order for a route to be considered
    a match. Therefore, if the routes match, but if it's a different `HTTP` method
    than expected, it will be ignored. This will allow you to create routes with the
    same name but act differently based on the method that is passed. Sounds just
    like `REST`, which we talked about in the previous chapter, doesn't it?
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的`register`函数中添加了一个`$method`参数。然后我们在我们的`register`函数中使用这个`$method`变量，通过将它添加到必须为`true`的参数列表中，以便路由被视为匹配。因此，如果路由匹配，但如果它是一个不同于预期的`HTTP`方法，它将被忽略。这将允许您创建具有相同名称但根据传递的方法而有所不同的路由。听起来就像我们在上一章中讨论的`REST`，不是吗？
- en: 'In order to execute the `register` functions, let''s look back at the `get`
    function that we have at the beginning of our `lib/bones.php` file:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行`register`函数，让我们回顾一下我们在`lib/bones.php`文件开头的`get`函数：
- en: '[PRE37]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Hopefully, it should be pretty easy to see what we're going to do next. Let's
    expand our current `get` function and create three more functions, one for each
    of the remaining HTTP methods, making sure we pass in each method's name in caps.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 希望很容易看出我们接下来要做什么。让我们扩展我们当前的`get`函数，并创建另外三个函数，分别对应剩下的每种HTTP方法，确保我们以大写形式传递每种方法的名称。
- en: '[PRE38]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We have added all of the functionality needed in our Bones library to allow
    us to use other HTTP methods, pretty simple right?
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的Bones库中添加了所有需要的功能，以便我们可以使用其他HTTP方法，非常简单对吧？
- en: Time for action — adding simple but powerful helpers to Bones
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-向Bones添加简单但强大的辅助功能
- en: Let's add two little functions to our `lib/bones.php` file that will help us
    use forms.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的`lib/bones.php`文件中添加两个小函数，这将帮助我们使用表单。
- en: 'Add a function called `form` that looks as follows:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`form`的函数，如下所示：
- en: '[PRE39]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add a function called `make_route`. This function will allow our `Bones` instance
    to create clean links so that we can link to other resources in our application:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`make_route`的函数。这个函数将允许我们的`Bones`实例创建干净的链接，以便我们可以链接到应用程序中的其他资源：
- en: '[PRE40]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: What just happened?
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added a simple function called `form` that serves as a wrapper around the
    `$_POST` array, which is an array of variables passed through the `HTTP POST`
    method. This will allow us to collect values after we `POST` them. The next function
    we created is called `make_route`. This function will soon be used everywhere
    to create clean links so that we can link to other resources in our application.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个名为`form`的简单函数，它作为`$_POST`数组的包装器，这是通过`HTTP POST`方法传递的变量数组。这将允许我们在`POST`后收集值。我们创建的下一个函数叫做`make_route`。这个函数很快将被用于创建干净的链接，以便我们可以链接到应用程序中的其他资源。
- en: Using a form to test our HTTP method support
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用表单测试我们的HTTP方法支持
- en: We've added some cool stuff here. Let's move on to test the support of the newly
    added HTTP methods.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里添加了一些很酷的东西。让我们继续测试新添加的HTTP方法的支持。
- en: 'Open up the file `verge/views/signup.php`, and add a simple form, similar to
    the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件`verge/views/signup.php`，并添加一个简单的表单，类似于以下内容：
- en: '[PRE41]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We set the form's `action` attribute by using `$this->make_route. $this->make_route`
    used our `Bones` instance to make a route that would resolve to our `signup` route.
    We then defined the method as using the `post` method. The rest of the form is
    pretty standard with a label and textbox for `name`, and a `submit` button to
    process the form.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用`$this->make_route`设置了表单的`action`属性。`$this->make_route`使用我们的`Bones`实例来创建一个解析为我们的`signup`路由的路由。然后我们定义了使用`post`方法。表单的其余部分都是相当标准的，包括`name`的标签和文本框，以及用于处理表单的`submit`按钮。
- en: If you were to go in your browser to `http://localhost/verge/signup`, you would
    now see the form, but if you click on the `submit` button, you will be sent to
    a blank page. This is because we haven't yet defined our `post` method in our
    `index.php` file.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中输入`http://localhost/verge/signup`，您现在将看到表单，但如果您单击`submit`按钮，您将被发送到一个空白页面。这是因为我们还没有在`index.php`文件中定义我们的`post`方法。
- en: 'Open up the `index.php` file, and add the following code:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`index.php`文件，并添加以下代码：
- en: '[PRE42]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Let's walk through this piece of code and make sure it's clear what we're doing
    here. We're telling `Bones` to look for the route `/signup` with a `post` method
    being sent to it. Once this route is resolved, the callback will set the value
    of a variable `message` with some text. The text includes the new function we
    created called `$app->form('name')`. This function is grabbing the posted value
    from the form with the attribute `name`. We are then going to tell `Bones` to
    render the home view, allowing us to see the message.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们走过这段代码，确保清楚我们在这里做什么。我们告诉`Bones`查找`/signup`路由，并将`post`方法发送到它。一旦解析了这个路由，回调将使用一些文本设置变量`message`的值。文本包括我们创建的新函数`$app->form('name')`。这个函数正在从具有属性`name`的表单中获取发布的值。然后我们将告诉`Bones`渲染主视图，以便我们可以看到消息。
- en: Testing it out!
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试一下！
- en: Let's try all of this out now!
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们试试这些！
- en: 'Open up your browser, and go to: `http://localhost/verge/signup`.'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，转到：`http://localhost/verge/signup`。
- en: Your browser should show the following:![Testing it out!](graphics/3586_04_010.jpg)
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的浏览器应该显示以下内容：![测试一下！](graphics/3586_04_010.jpg)
- en: Enter your name (I entered `Tim)`, and click on **Submit**.![Testing it out!](graphics/3586_04_015.jpg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的名字（我输入了`Tim`），然后单击**提交**。![测试一下！](graphics/3586_04_015.jpg)
- en: Adding changes to Git
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将更改添加到Git
- en: In this section, we added support for all of the HTTP methods, which will allow
    us to handle any type of requests. Let's add all of our changes to Git, so that
    we can track our progress.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们为所有的HTTP方法添加了支持，这将允许我们处理任何类型的请求。让我们将所有的更改添加到Git，以便我们可以跟踪我们的进展。
- en: Open **Terminal**.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以更改目录到我们的工作目录：
- en: '[PRE43]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add all of the files that we created in this directory by typing the following
    command:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令来添加我们在此目录中创建的所有文件：
- en: '[PRE44]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Give Git a description of what we''ve done since our last commit:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给Git描述我们自上次提交以来所做的工作：
- en: '[PRE45]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Adding support for complex routing
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加对复杂路由的支持
- en: Our framework is technically all ready for us to start building on top. However,
    we don't have enough support to match and handle complex routes. Since most applications
    will need this, let's quickly add it.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的框架在技术上已经准备好让我们开始构建。但是，我们还没有足够的支持来匹配和处理复杂的路由。由于大多数应用程序都需要这个，让我们快速添加它。
- en: Handling complex routes
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理复杂的路由
- en: For example, in the `index.php` file, we'll want to be able to define a route
    for a user profile. This route might be `/user/:username`. In this case, `:username`
    will be a variable that we can then access. So, if you went to the URL `/user/tim`,
    you could access the username `tim` by using `Bones` to grab that section of the
    URL, and return its value.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在`index.php`文件中，我们希望能够为用户配置文件定义路由。这个路由可能是`/user/:username`。在这种情况下，`:username`将是一个我们可以访问的变量。因此，如果您访问URL`/user/tim`，您可以使用`Bones`来获取URL的该部分，并返回其值。
- en: 'Let''s start by adding another variable and another call in our `__construct`
    function to our `lib/bones.php` file:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先在我们的`lib/bones.php`文件的`__construct`函数中添加另一个变量和另一个调用：
- en: '[PRE46]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We just added two variables to our `Bones` instance called `$route_segments`
    and `$route_variables. $route_segments` is set each time the `Bones` object is
    created using `__construct()`. The `$route_segments` array splits `$route` into
    usable segments by splitting them on a slash (/). This will allow us to examine
    the URL that the browser sends to `Bones`, and then decide if the route matches.
    `$route_variables` will be a library of variables that were passed in through
    the route, and it will enable us to use the `index.php` file.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在我们的`Bones`实例中添加了两个变量，称为`$route_segments`和`$route_variables。$route_segments`每次使用`__construct()`创建`Bones`对象时都会设置。`$route_segments`数组通过在斜杠(/)上分割它们来将`$route`分割成可用的段。这将允许我们检查浏览器发送到`Bones`的URL，然后决定路由是否匹配。`$route_variables`将是通过路由传递的变量的库，它将使我们能够使用`index.php`文件。
- en: Now, let's start doctoring up the `register` function so that we can handle
    these special routes. Let's remove all of the code that's in there, and slowly
    add some code back.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始修改 `register` 函数，以便处理这些特殊路由。让我们删除所有代码，然后慢慢添加一些代码。
- en: '[PRE47]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We added an `if` statement that checked to see if the route has already matched.
    If it has, we just ignore everything else in the `register` function. Then, we
    added `$url_parts`. This will split up the route that we pass into the register
    function, and will help us compare this route against the actual route the browser
    hit.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个 `if` 语句，检查路由是否已经匹配。如果是，我们就忽略 `register` 函数中的其他所有内容。然后，我们添加了 `$url_parts`。这将拆分我们传递到注册函数中的路由，并将帮助我们将此路由与浏览器实际访问的路由进行比较。
- en: Note
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We'll be closing the `if` statement and register function when we finish up
    this section; don't forget to do that!
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成这一部分时，我们将关闭 `if` 语句和注册函数；不要忘记这样做！
- en: Let's start to compare `$bones->route_segments`, which is the route that the
    browser hit, against `$url_parts`, which is the route that we are trying to match.
    First, let's check to make sure that `$route_segments` and `$url_parts` are the
    same length. This will make sure that we save time by not digging deeper into
    the function, since we already know it doesn't match.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始比较 `$bones->route_segments`（浏览器访问的路由）和 `$url_parts`（我们正在尝试匹配的路由）。首先，让我们检查确保
    `$route_segments` 和 `$url_parts` 的长度相同。这将确保我们节省时间，因为我们已经知道它不匹配。
- en: Add the following code into our `register` function in `lib/bones.php:`
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `lib/bones.php` 的 `register` 函数中添加以下代码：
- en: '[PRE48]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Now, let's add a `for` loop inside the `if` statement that will loop each of
    the `$url_parts`, and try to match it against `route_segments`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `if` 语句中添加一个 `for` 循环，循环每个 `$url_parts`，并尝试将其与 `route_segments` 匹配。
- en: '[PRE49]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In order to identify variables, we'll check for the existence of a colon (:).
    This represents the fact that this segment contains a variable value.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别变量，我们将检查冒号（:）的存在。这表示该段包含变量值。
- en: '[PRE50]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Next, let's add a line of code that will take the value of the segment and save
    it into our `$route_variables` array, allowing us to use it later. Just because
    we found one matching variable, it does not mean that the whole route is a match,
    so we aren't going to set `$matched = true` just yet.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一行代码，将段的值保存到我们的 `$route_variables` 数组中，以便稍后使用。仅仅因为我们找到一个匹配的变量，并不意味着整个路由就匹配了，所以我们暂时不会设置
    `$matched = true`。
- en: '[PRE51]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Let's break the line of code that we just added down. The second part, `$bones->route_segments[$key]`,
    is grabbing the value of the segment that was passed to the browser and has the
    same index as the segment we are currently looping through.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解刚刚添加的代码行。第二部分 `$bones->route_segments[$key]` 获取传递给浏览器的段的值，并且具有与我们当前循环的段相同的索引。
- en: Then, `$bones->route_variables[substr($part, 1)]` saves the value into the `$route_variables`
    array with the index set to the `$part` value and then uses `substr` to make sure
    that we don't include the colon in the key.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`$bones->route_variables[substr($part, 1)]` 将值保存到 `$route_variables` 数组中，索引设置为
    `$part` 的值，然后使用 `substr` 确保我们不包括键中的冒号。
- en: 'This piece of code is a bit confusing. So, let''s just go through a quick use
    case:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码有点混乱。所以，让我们快速通过一个使用案例：
- en: Open up your browser, and enter the URL `/users/tim`.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，输入URL `/users/tim`。
- en: This register route starts checking the route `/users/:username`.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个注册路由开始检查路由 `/users/:username`。
- en: '`$bones->route_segments[$key]` would return `tim`.'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$bones->route_segments[$key]` 将返回 `tim`。'
- en: '`$bones->route_variables[substr($part, 1)]` would save the value with the index
    username, enabling us later retrieve the value `tim`.'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$bones->route_variables[substr($part, 1)]` 将保存值，并使我们能够稍后检索值 `tim`。'
- en: Now, let's finish off this if statement by inspecting the segments that do not
    contain route variables (the `else` part of the `if` statement). In this area,
    we are going to check to make sure that the segment we are checking matches the
    segment that was passed from the URL of the browser.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们完成这个 `if` 语句，检查不包含路由变量的段（`if` 语句的 `else` 部分）。在这个区域，我们将检查我们正在检查的段是否与从浏览器的
    URL 传递的段匹配。
- en: '[PRE52]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The code we just added checks to see if the value we were looping through `$part`
    matches the parallel segment in `$route_segments`. We then check to see if we've
    already marked this route as not matching. This shows us that we've already marked
    it as not matching in a previous segment check. If the routes do not match, we
    are going to set `$matched = false`. This will tell us that the URLs do not match,
    and we can ignore the rest of the route.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的代码检查我们循环遍历的 `$part` 是否与 `$route_segments` 中的并行段匹配。然后，我们检查是否已经标记此路由不匹配。这告诉我们，在先前的段检查中，我们已经标记它为不匹配。如果路由不匹配，我们将设置
    `$matched = false`。这将告诉我们 URL 不匹配，并且我们可以忽略路由的其余部分。
- en: Let's add the final piece to the routing matching puzzle. This statement will
    look quite a bit similar to our old matching statement, but it will actually be
    quite a bit cleaner.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为路由匹配谜题添加最后一部分。这个语句看起来与我们旧的匹配语句相似，但实际上会更加简洁。
- en: '[PRE53]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This piece of code checks to make sure that our route matches in the matching
    statements above, by looking at the `$matched` variable. Then, we check to see
    that the HTTP method matches the route we check. If there is no match, we return
    `false` and exit out of this function. If there is a match, we set `$route_found
    = true`, and then perform a callback on the route, which will execute the code
    inside of the route defined in the `index.php` file.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码检查我们的路由是否与上面的匹配语句匹配，查看 `$matched` 变量。然后，我们检查 HTTP 方法是否与我们检查的路由匹配。如果没有匹配，我们返回
    `false` 并退出该函数。如果匹配，我们设置 `$route_found = true`，然后对路由执行回调，这将执行 `index.php` 文件中定义的路由内的代码。
- en: Finally, let's just close out the `if $route_found` statement and the `register`
    function by adding the closing brackets to end this function.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们关闭`if $route_found`语句和`register`函数，通过添加闭合括号来结束这个函数。
- en: '[PRE54]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We added a lot of code in the past section. So, check to make sure your code
    matches up with what I have:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的部分中，我们添加了很多代码。所以，请检查一下你的代码是否和我的一致：
- en: '[PRE55]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Accessing route variables
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问路由变量
- en: 'Now that we are saving the route variables into an array, we need to add a
    function called `request` into the `lib/bones.php` file:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将路由变量保存到一个数组中，我们需要在`lib/bones.php`文件中添加一个名为`request`的函数：
- en: '[PRE56]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This function accepts a variable called `$key` and returns the value of the
    object in our `route_variables` array by returning the value with that same key.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受一个名为`$key`的变量，并通过返回具有相同键的对象在我们的`route_variables`数组中的值来返回值。
- en: Adding more complex routes to index.php
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在index.php中添加更复杂的路由
- en: We've done a lot of hard work. Let's test to make sure that it all went smoothly.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经做了很多工作。让我们测试一下，确保一切顺利。
- en: 'Let''s add a quick route to `index.php` to test out the route variables:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`index.php`中添加一个快速路由来测试路由变量：
- en: '[PRE57]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: We added a route with a route variable `message`. When the route was found and
    executed through the callback, we set a variable `message` to the value of the
    route variable message. Then, we rendered the home page, just as we've done a
    few times before.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个带有路由变量`message`的路由。当路由被找到并通过回调执行时，我们将变量`message`设置为路由变量message的值。然后，我们渲染了主页，就像我们之前做了几次一样。
- en: Testing it out!
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试一下！
- en: 'If you open your browser and access the URL `http://localhost/verge/say/hello`,
    the browser will display: `hello`.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开浏览器并访问URL `http://localhost/verge/say/hello`，浏览器将显示：`hello`。
- en: If you change the value to anything different, it will display the same value
    right back to you.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将值更改为任何不同的值，它将把相同的值显示回给你。
- en: Adding changes to Git
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将更改添加到Git
- en: This section added more detailed route matching and allowed us to have route
    variables in our URLs. Let's add all of our changes to Git so that we can track
    our progress.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分添加了更详细的路由匹配，并允许我们在URL中使用路由变量。让我们把所有的改变都添加到Git中，这样我们就可以跟踪我们的进展。
- en: Open **Terminal**.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以更改目录到我们的工作目录：
- en: '[PRE58]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Add all of the files that we created in this directory by typing the following
    command:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令，将我们在这个目录中创建的所有文件都添加进去：
- en: '[PRE59]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Give Git a description of what we''ve done since our last commit:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给Git一个描述，说明我们自上次提交以来做了什么：
- en: '[PRE60]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Adding support for public files
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加对公共文件的支持
- en: An important part of developing web applications is the ability to use CSS and
    JS files. Currently, we really don't have a good way to use and display them.
    Let's change that!
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Web应用程序的一个重要部分是能够使用CSS和JS文件。目前，我们真的没有一个很好的方法来使用和显示它们。让我们改变这一点！
- en: Time for action — altering .htaccess to support public files
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——修改.htaccess以支持公共文件
- en: We need to alter the `.htaccess` file, so that the request for the `public`
    files is not passed to the `index.php` file, but instead goes into to the `public`
    folder and finds the requested resource.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改`.htaccess`文件，这样对`public`文件的请求不会被传递到`index.php`文件，而是进入`public`文件夹并找到请求的资源。
- en: Start by opening up the .htaccess file that's in the root of our project.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先打开我们项目根目录中的.htaccess文件。
- en: 'Add the following highlighted code:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下突出显示的代码：
- en: '[PRE61]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: What just happened?
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We just added `RewriteRule` to bypass our*"catch* all" rule that directs all
    requests if it's a `public` file. We then simplify the route to allow the URL
    to resolve to `/css` and `/js` instead of `/public/css` and `/public/js`.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了`RewriteRule`来绕过我们的“捕获所有”规则，如果是`public`文件的话，就将所有请求定向。然后我们简化路由，允许URL解析为`/css`和`/js`，而不是`/public/css`和`/public/js`。
- en: We're ready to use public files. We just need to implement them, which should
    be just as easy as setting it up.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好使用公共文件了。我们只需要实现它们，这应该和设置一样容易。
- en: Time for action — creating a stylesheet for the application
  id: totrans-342
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——为应用程序创建一个样式表
- en: Let's start by adding a stylesheet to change the look of our application.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先添加一个样式表来改变我们应用程序的外观。
- en: 'Open `views/layout.php`. This file currently drives the layout for all of the
    pages in our project. We just need to add code to include our stylesheet:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`views/layout.php`。这个文件目前驱动着我们项目中所有页面的布局。我们只需要添加代码来包含我们的样式表：
- en: '[PRE62]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Create a new file named `master.css`, and place it in our working directory's
    `public/css` folder.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`master.css`的新文件，并将其放在我们工作目录的`public/css`文件夹中。
- en: Add a quick piece of code to `public/css/master.css` that will display a different
    color background, so that we can test that this all works.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`public/css/master.css`中添加一小段代码，以显示不同颜色的背景，这样我们就可以测试所有这些是否有效。
- en: '[PRE63]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: What just happened?
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We added a reference to a new stylesheet for our application called `master.css`.
    We used the standard markup to include a stylesheet, and used one of the functions
    of `Bones, make_route`, to properly create the path to the file.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个新的应用程序样式表`master.css`的引用。我们使用标准标记来包含样式表，并使用`Bones, make_route`的一个函数来正确创建文件的路径。
- en: Let's test to make sure our stylesheet is now being displayed properly.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下，确保我们的样式表现在被正确显示。
- en: Open up your browser, and go to `http://localhost/verge/`.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，然后转到`http://localhost/verge/`。
- en: Your browser should show the following:![What just happened?](graphics/3586_04_020.jpg)
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的浏览器应该显示以下内容：![What just happened?](graphics/3586_04_020.jpg)
- en: Notice that the background color of our page has changed to grey, showing that
    the stylesheet has kicked in!
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意我们页面的背景颜色已经变成了灰色，显示出样式表已经生效了！
- en: Adding changes to Git
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将更改添加到Git
- en: In this section, we added support for public files such as stylesheet, JavaScript,
    and images. We then tested it out by creating a `master.css` file. Let's add all
    of our changes to Git, so that we can track our progress.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们添加了对样式表、JavaScript和图像等公共文件的支持。然后我们通过创建一个`master.css`文件来测试它。让我们把所有的改变都添加到Git中，这样我们就可以跟踪我们的进展。
- en: Open **Terminal**.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过键入以下命令，将目录更改为我们的工作目录：
- en: '[PRE64]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Add all of the files that we created in this directory by typing the following
    command:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过键入以下命令，将我们在此目录中创建的所有文件添加进来：
- en: '[PRE65]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Give Git a description of what we''ve done since our last commit:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给Git一个描述，说明自上次提交以来我们所做的工作：
- en: '[PRE66]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Publishing your code to GitHub
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的代码发布到GitHub
- en: Now that we've created our framework and all of the underlying code, we can
    push our code to any service provider that supports Git. In this book, we'll use
    **GitHub**.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的框架和所有底层代码，我们可以将我们的代码推送到任何支持Git的服务提供商。在本书中，我们将使用**GitHub**。
- en: 'You can create an account on GitHub by going to: [https://github.com/plans](http://https://github.com/plans).
    GitHub has a variety of plans that you can choose from, but I recommend you pick
    the free account, so that you don''t have to pay anything at this time. If you
    already have an account, you can log in and skip the creation of a new account.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问以下网址在GitHub上创建一个帐户：[https://github.com/plans](http://https://github.com/plans)。GitHub有各种不同的计划供您选择，但我建议您选择免费帐户，这样您就不必在此时支付任何费用。如果您已经有帐户，可以登录并跳过创建新帐户的步骤。
- en: '![Publishing your code to GitHub](graphics/3586_04_025.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![将您的代码发布到GitHub](graphics/3586_04_025.jpg)'
- en: Click on **Create a free account**.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建免费帐户**。
- en: Note
  id: totrans-369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's important to note that, by choosing a free account, all of your repositories
    will be `public`. This means that anyone will be able to see your code. This is
    fine for now, but as you get further in development, you might want to register
    for a paid account, so that it's not publicly available.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，选择免费帐户后，您的所有存储库都将是“公共”的。这意味着任何人都可以看到您的代码。现在这样做没问题，但随着开发的进展，您可能希望注册一个付费帐户，以便它不是公开可用的。
- en: '![Publishing your code to GitHub](graphics/3586_04_030.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![将您的代码发布到GitHub](graphics/3586_04_030.jpg)'
- en: You will be shown a quick signup form. Fill it out completely, and click on
    **Create an account** when you are done.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个快速注册表单。填写完整，并在完成后点击**创建帐户**。
- en: With your account created, you will be shown your account dashboard. On this
    screen, you will see any activity on your account or repositories that you are
    watching. Since we do not yet have any repositories, we should start by clicking
    on **New Repository**.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完帐户后，您将看到您的帐户仪表板。在此屏幕上，您将看到您的帐户或您正在关注的存储库的任何活动。由于我们还没有任何存储库，因此应该首先点击**新存储库**。
- en: '![Publishing your code to GitHub](graphics/3586_04_035.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![将您的代码发布到GitHub](graphics/3586_04_035.jpg)'
- en: The **Create A New Repository** page will allow you to make a new repository
    for your code to live in.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建新存储库**页面将允许您创建一个新的存储库来存放您的代码。'
- en: '![Publishing your code to GitHub](graphics/3586_04_040.jpg)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![将您的代码发布到GitHub](graphics/3586_04_040.jpg)'
- en: Complete the rest of this form by filling in each field.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 通过填写每个字段来完成此表单的其余部分。
- en: '**Project Name:** `verge`'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目名称：**`verge`'
- en: '**Description:** `A social network called verge built using Bones`'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述：**`使用Bones构建的名为verge的社交网络`'
- en: '**Homepage URL:** You can leave this blank for now'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页URL：**现在您可以将其留空'
- en: Click on **Create Repository**
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击**创建存储库**
- en: Your repository is now created and ready for you to push your code to. All you
    need to do is run a few statements in **Terminal**.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 您的存储库现在已创建并准备好推送您的代码。您只需要在**终端**中运行几条语句。
- en: Open **Terminal**.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Type the following command to change directories to our working directory:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入以下命令以更改目录到我们的工作目录：
- en: '[PRE67]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Add GitHub as your remote repository by entering the following command and
    replacing **username** with your GitHub username:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令并将**用户名**替换为您的GitHub用户名，将GitHub添加为您的远程存储库：
- en: '[PRE68]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Push your local repository to GitHub.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的本地存储库推送到GitHub。
- en: '[PRE69]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Git will return a bunch of text and will stop when it's complete.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git将返回一大堆文本，并在完成时停止。
- en: If refresh the URL of your Git repository on [https://github.com](https://github.com)
    (my URL is [https://github.com/timjuravich/verge](https://github.com/timjuravich/verge)),
    you will see all of your files, and if you click on **history** you will see all
    of the changes that you have added in each section as we've gone through this
    chapter.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如果刷新您在[https://github.com](https://github.com)上的Git存储库的URL（我的URL是[https://github.com/timjuravich/verge](https://github.com/timjuravich/verge)），您将看到所有文件，如果点击**历史记录**，您将看到我们在本章中进行的每个部分中添加的所有更改。
- en: '![Publishing your code to GitHub](graphics/3586_04_045.jpg)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![将您的代码发布到GitHub](graphics/3586_04_045.jpg)'
- en: As you start adding more code, you have to manually push your code to GitHub
    each time by performing the command `git push origin master`. We'll continue to
    add to this repository as we go through this book.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您不断添加更多的代码，您必须手动每次将代码推送到GitHub，执行命令`git push origin master`。在我们继续阅读本书的过程中，我们将继续向此存储库添加内容。
- en: Get complete code from GitHub
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从GitHub获取完整的代码
- en: If somewhere along the way you got lost, or weren't able to get everything working
    exactly like it should, you can easily clone Bones from a Git repository from
    GitHub, and you'll have a fresh copy with all of the changes we've made in this
    chapter.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在某个地方迷失了方向，或者无法使一切都像应该的那样工作，您可以轻松地从GitHub的Git存储库中克隆Bones，并且您将获得一个包含我们在本章中所做的所有更改的新副本。
- en: Open **Terminal**.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Use the following command to change directories to our working directory:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将目录更改为我们的工作目录：
- en: '[PRE70]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Clone the repository to your local machine by typing the following command:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过键入以下命令，将存储库克隆到您的本地计算机：
- en: '[PRE71]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Git will grab all of the files from GitHub, and move them to your local machine.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git将从GitHub获取所有文件，并将它们移动到您的本地计算机。
- en: Summary
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'We have done a tremendous amount of work in this chapter! We have:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经做了大量的工作！我们已经：
- en: Created a PHP framework from scratch to handle web requests
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始创建一个PHP框架来处理Web请求
- en: Added functionality for clean URLs, route variables, HTTP method support, a
    simple view and layout engine, and a system to display `public` files such as
    stylesheets, JavaScript, and images
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了清晰的URL、路由变量、HTTP方法支持、简单的视图和布局引擎，以及一个用于显示`public`文件（如样式表、JavaScript和图像）的系统
- en: Tested each part our framework with our browser to make sure we could access
    our changes
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用我们的浏览器测试了框架的每个部分，以确保我们能够访问我们的更改
- en: Published our code to GitHub so that we can see our changes and manage our code
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的代码发布到GitHub，这样我们就可以看到我们的更改并管理我们的代码。
- en: Get ready! In the next chapter, we're going to dive headfirst into connecting
    our newly created application to CouchDB.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了！在下一章中，我们将直奔主题，将我们新创建的应用程序连接到CouchDB。
