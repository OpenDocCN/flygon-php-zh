- en: Chapter 1. Design and Architectural Pattern Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。设计和架构模式基础知识
- en: Programming is actually a lifestyle rather than a job. It's an intense mental
    activity. The best developers in the world think about their work 24/7\. They
    come up with their best ideas when they are not at their work desks. Generally,
    their finest work is done away from the keyboard.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编程实际上是一种生活方式，而不仅仅是一份工作。这是一种强烈的精神活动。世界上最优秀的开发人员24/7都在思考他们的工作。他们在工作桌前不在时想出最好的想法。通常，他们最好的工作是在键盘之外完成的。
- en: As developers need to look at problems from a different standpoint, software
    projects cannot be accelerated by spending more time in the office or adding more
    people to a project. Development is not just about timelines and assigned tasks.
    If you visit the development centers of world-famous software companies such as
    Google and IBM, you'll see that there are many opportunities for spending time
    away from the keyboard for developers. Programming questions have to be thought
    of in the context of the real world. So, object-oriented programming was invented
    to make writing software more instinctive for our hunter-gatherer brains; that
    is, software components took on the properties and behavior of objects in the
    real world. When looking for a solution to a problem or a way to accomplish what
    we want, we generally hope to find a way that is reusable, optimized, and cheap.
    We, as developers, have a few standard ways of approaching some commonly recurring
    problems in programming, which are called **design patterns** .
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于开发人员需要从不同的角度看待问题，软件项目不能通过在办公室花更多时间或增加项目人员来加速。开发不仅仅是关于时间表和分配的任务。如果你访问谷歌和IBM等世界著名软件公司的开发中心，你会发现开发人员有很多机会远离键盘。编程问题必须在现实世界的背景下考虑。因此，面向对象编程是为了使我们的狩猎采集大脑更本能地编写软件而发明的；也就是说，软件组件具有现实世界中对象的属性和行为。当寻找问题的解决方案或实现我们想要的方式时，我们通常希望找到一种可重用、优化和廉价的方式。作为开发人员，我们有一些标准的方法来解决编程中一些常见的重复问题，这些方法被称为**设计模式**。
- en: When you come across certain problems that recur, you try and find solutions
    to solve them that can be used by anyone and everyone. This concept is prevalent
    everywhere – mechanics, architecture, and even human behavior for that matter.
    Programming is absolutely not an exception.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遇到一些经常出现的问题时，你会尝试找到解决方案，以便任何人都可以使用。这个概念无处不在 - 无论是机械、建筑，甚至是人类行为。编程绝对不例外。
- en: Programming solutions depend on the needs of the problems and are modified accordingly
    because each problem has its own unique conditions. Commonly recurring problems
    exist in both real life and programming life. So, design patterns are given to
    us to implement our project. These patterns have already been tested and used
    by many other developers for solving similar problems successfully. Using design
    patterns also makes it possible to work with clean, standardized, and readable
    code. Deciding to write a program that does X but using pattern Y is a recipe
    for disaster. It might work for programs such as `hello world` , fit for demonstrating
    the code constructs for patterns, but not much else.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编程解决方案取决于问题的需求，并相应地进行修改，因为每个问题都有其独特的条件。常见的重复问题存在于现实生活和编程生活中。因此，设计模式被赋予我们来实现我们的项目。这些模式已经被许多其他开发人员测试和使用，成功地解决了类似的问题。使用设计模式还可以使我们使用干净、标准化和可读的代码。决定编写一个使用模式Y的程序来执行X的程序是一种灾难的做法。它可能适用于演示模式的代码构造的程序，比如`hello
    world`，但不适用于其他大部分情况。
- en: Through patterns, we could also find a way to work around the inefficiencies
    that a language may have. Also, a thing to note here, inefficiency is usually
    associated with negativity, but it may not necessarily be bad at all times.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过模式，我们还可以找到一种解决语言可能存在的低效性的方法。还有一点要注意的是，低效性通常与负面联系在一起，但并不一定总是不好的。
- en: In this book, we'll cover PHP design patterns with the Laravel PHP Framework.
    In the first few chapters, we'll also give examples from the Laravel core code.
    In the chapters that follow, we'll cover the MVC pattern fundamentals. Then we'll
    try to examine the differences between an MVC pattern approach to Laravel and
    a common MVC approach. We hope this book will help you increase your code quality.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Laravel PHP框架来介绍PHP设计模式。在前几章中，我们还将从Laravel核心代码中给出例子。在接下来的章节中，我们将介绍MVC模式的基础知识。然后，我们将尝试分析MVC模式在Laravel和常见MVC方法之间的区别。我们希望本书能帮助您提高代码质量。
- en: Please note that finding the best stable, high-quality solution directly depends
    on your knowledge of the platform and language. We highly recommend that you be
    well-versed with the data types and fundamentals of object-oriented programming
    in PHP and Laravel Framework.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，找到最稳定、高质量的解决方案直接取决于你对平台和语言的了解。我们强烈建议您熟悉PHP和Laravel框架中的数据类型和面向对象编程的基础知识。
- en: In this chapter, we'll explain design pattern terms and learn about the classification
    of these design patterns and their elements. We'll give some examples from the
    Laravel core code, which contains the design patterns used in the framework. Finally,
    we'll explain the **Mode-View-Controller** ( **MVC** ) architectural pattern and
    its benefits.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将解释设计模式术语，并学习这些设计模式及其元素的分类。我们将从Laravel核心代码中给出一些例子，其中包含了框架中使用的设计模式。最后，我们将解释**模型-视图-控制器**（**MVC**）架构模式及其优势。
- en: Design patterns
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模式
- en: Design patterns were first introduced by Eric Gamma and his three friends in
    1994\. A design pattern is basically a pattern of software design that is implemented
    on multiple projects, and its intended success gives an idea to prove this pattern
    as a solution of commonly recurring problems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式最早是由Eric Gamma和他的三个朋友在1994年首次提出的。设计模式基本上是在多个项目上实施的软件设计模式，并且其预期成功给出了一个想法，证明这种模式是解决常见重复问题的解决方案。
- en: Design patterns are ways to solve a problem and the way to get your intended
    result in the best possible manner. So, design patterns are not only ways to create
    a large and robust system, but they also provide great architectures in a friendly
    manner.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式是解决问题的方式，也是以最佳方式获得预期结果的方式。因此，设计模式不仅是创建大型和健壮系统的方式，还以友好的方式提供了出色的架构。
- en: 'In software engineering, a design pattern is a general repeatable and optimized
    solution to a commonly occurring problem within a given context in software design.
    It is a description or template for how to solve a problem, and the solution can
    be used in different instances. The following are some of the benefits of using
    design patterns:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，设计模式是软件设计中常见问题的一般可重复和优化解决方案。它是如何解决问题的描述或模板，解决方案可以在不同的实例中使用。以下是使用设计模式的一些好处：
- en: Maintenance
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护
- en: Documentation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档
- en: Readability
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可读性
- en: Ease in finding appropriate objects
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松找到合适的对象
- en: Ease in determining object granularity
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松确定对象的粒度
- en: Ease in specifying object interfaces
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松指定对象接口
- en: Ease in implementing even for large software projects
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使对于大型软件项目，实现起来也很容易
- en: Implements the code reusability concept
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现代码的可重用性概念
- en: If you are not familiar with design patterns, the best way to begin understanding
    is observing the solutions we use for commonly occurring, everyday life problems.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉设计模式，了解的最佳方法是观察我们用于常见的日常生活问题的解决方案。
- en: 'Let''s take a look at the following image:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下下面的图片：
- en: '![Design patterns](Image00001.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![设计模式](Image00001.jpg)'
- en: 'Many different types of power plugs exist in the world. So, we need a solution
    that is reusable, optimized, and cheaper than buying a new device for different
    power plug types. In simple words, we need an adapter. Have a look at the following
    image of an adapter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上存在许多不同类型的电源插头。因此，我们需要一个可重复使用、优化且比购买新设备更便宜的解决方案，以适应不同的电源插头类型。简而言之，我们需要一个适配器。看一下适配器的下面图片：
- en: '![Design patterns](Image00002.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![设计模式](Image00002.jpg)'
- en: In this case, an adapter is the best solution that's reusable, optimized, and
    cheap. But an adapter does not provide us with a solution when our car's wheel
    blows out.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，适配器是最佳解决方案，它是可重复使用、优化且便宜的。但是当我们的汽车轮胎爆胎时，适配器并不能为我们提供解决方案。
- en: In object-oriented languages, we the programmers use the objects to do whatever
    we want to have the outcome we desire. Hence, we have many types of objects, situations,
    and problems. That means we need more than just one approach to solving different
    kinds of problems.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象的语言中，我们程序员使用对象来实现我们想要的结果。因此，我们有许多类型的对象、情况和问题。这意味着我们需要不止一种方法来解决不同类型的问题。
- en: Elements of design patterns
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计模式的元素
- en: 'The following are the elements of design patterns:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是设计模式的元素：
- en: '**Name** : This is a handle we can use to describe the problem'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：这是我们用来描述问题的句柄'
- en: '**Problem** : This describes when to apply the pattern'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题**：这描述了何时应用模式'
- en: '**Solution** : This describes the elements, relationships, responsibilities,
    and collaborations, in a way that we follow to solve a problem'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案**：这描述了元素、关系、责任和协作的方式，我们遵循这种方式来解决问题'
- en: '**Consequences** : This details the results and trade-offs of applying the
    pattern'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结果**：这详细说明了应用模式的结果和权衡'
- en: Classification of design patterns
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计模式的分类
- en: 'Design patterns are generally divided into three fundamental groups:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式通常分为三个基本组：
- en: Creational patterns
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模式
- en: Structural patterns
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构模式
- en: Behavioral patterns
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为模式
- en: Let's examine these in the following subsections.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在以下小节中进行检查。
- en: Creational patterns
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建模式
- en: 'Creational patterns are a subset of design patterns in the field of software
    development; they serve to create objects. They decouple the design of an object
    from its representation. Object creation is encapsulated and outsourced (for example,
    in a factory) to keep the context of object creation independent from concrete
    implementation. This is in accordance with the rule: "Program on the interface,
    not the implementation."'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模式是软件开发领域中设计模式的一个子集；它们用于创建对象。它们将对象的设计与其表示分离。对象创建被封装和外包（例如，在工厂中），以保持对象创建的上下文独立于具体实现。这符合规则：“基于接口编程，而不是实现。”
- en: 'Some of the features of creational patterns are as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模式的一些特点如下：
- en: '**Generic instantiation** : This allows objects to be created in a system without
    having to identify a specific class type in code (Abstract Factory and Factory
    pattern)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用实例化**：这允许在系统中创建对象，而无需在代码中标识特定的类类型（抽象工厂和工厂模式）'
- en: '**Simplicity** : Some of the patterns make object creation easier, so callers
    will not have to write large, complex code to instantiate an object (Builder (Manager)
    and Prototype pattern)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单性**：一些模式使对象创建变得更容易，因此调用者不必编写大量复杂的代码来实例化对象（生成器（管理器）和原型模式）'
- en: '**Creation constraints** : Creational patterns can put bounds on who can create
    objects, how they are created, and when they are created'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建约束**：创建模式可以限制谁可以创建对象，它们如何创建对象以及何时创建对象'
- en: 'The following patterns are called creational patterns:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下模式被称为创建模式：
- en: The Abstract Factory pattern
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象工厂模式
- en: The Factory pattern
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂模式
- en: The Builder (Manager) pattern
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器（管理器）模式
- en: The Prototype pattern
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型模式
- en: The Singleton pattern
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单例模式
- en: Structural patterns
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构模式
- en: In software engineering, design patterns structure patterns facilitate easy
    ways for communications between various entities.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，设计模式结构模式为各种实体之间的通信提供了简单的方式。
- en: 'Some of the examples of structures of the samples are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例的结构如下：
- en: '**Composition** : This composes objects into a tree structure (whole hierarchies).
    Composition allows customers to be uniformly treated as individual objects according
    to their composition.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合：这将对象组合成树形结构（整个层次结构）。组合允许客户根据其组合统一对待为个体对象。
- en: '**Decorator** : This dynamically adds options to an object. A Decorator is
    a flexible alternative embodiment to extend functionality.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装饰器：这动态地向对象添加选项。装饰器是扩展功能的灵活替代实现。
- en: '**Flies** : This is a share of small objects (objects without conditions) that
    prevent overproduction.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 飞行：这是一种小对象的共享（没有条件的对象），可以防止过度生产。
- en: '**Adapter** : This converts the interface of a class into another interface
    that the clients expect. Adapter lets those classes work together that would normally
    not be able to because of the different interfaces.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适配器：这将类的接口转换为客户端期望的另一个接口。适配器让那些由于不同接口而通常无法一起工作的类能够一起工作。
- en: '**Facade** : This provides a unified interface meeting the various interfaces
    of a subsystem. Facade defines a higher-level interface to the subsystem, which
    is easier to use.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外观：这提供了符合子系统各种接口的统一接口。外观定义了一个更容易使用的子系统的高级接口。
- en: '**Proxy** : This implements the replacement (surrogate) of another object that
    controls access to the original object.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理：这实现了另一个对象的替代（代理），控制对原始对象的访问。
- en: '**Bridge** : This separates an abstraction from its implementation, which can
    then be independently altered.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 桥接：这将抽象与其实现分离，然后可以独立地进行更改。
- en: Behavioral patterns
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行为模式
- en: 'Behavioral patterns are all about a class'' objects'' communication. Behavioral
    patterns are those patterns that are most specifically concerned with communication
    between objects. The following is a list of the behavioral patterns:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 行为模式主要涉及类对象之间的通信。行为模式是最关注对象之间通信的模式。以下是行为模式的列表：
- en: Chain of Responsibility pattern
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 责任链模式
- en: Command pattern
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令模式
- en: Interpreter pattern
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释器模式
- en: Iterator pattern
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代器模式
- en: Mediator pattern
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中介者模式
- en: Memento pattern
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备忘录模式
- en: Observer pattern
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察者模式
- en: State pattern
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态模式
- en: Strategy pattern
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略模式
- en: Template pattern
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板模式
- en: Visitor pattern
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问者模式
- en: 'We''ll cover these patterns in the following chapters. If you want to check
    out the usage of some patterns in the Laravel core, have a look at the following
    list:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中介绍这些模式。如果您想查看Laravel核心中某些模式的用法，请查看以下列表：
- en: '**The Builder (Manager)** **pattern** : `Illuminate\Auth\AuthManager` and `Illuminate\Session\SessionManager`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器（管理器）模式：`Illuminate\Auth\AuthManager`和`Illuminate\Session\SessionManager`
- en: '**The Factory** **pattern** : `Illuminate\Database\DatabaseManager` and `Illuminate\Validation\Factory`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂模式：`Illuminate\Database\DatabaseManager`和`Illuminate\Validation\Factory`
- en: '**The Repository** **pattern** : `Illuminate\Config\Repository` and `Illuminate\Cache\Repository`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储库模式：`Illuminate\Config\Repository`和`Illuminate\Cache\Repository`
- en: '**The Strategy** **pattern** : `IIlluminate\Cache\StoreInterface` and `Illuminate\Config\LoaderInterface`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略模式：`IIlluminate\Cache\StoreInterface`和`Illuminate\Config\LoaderInterface`
- en: '**The Provider** **pattern** : `IIlluminate\Auth\AuthServiceProvider` and `Illuminate\Hash\HashServiceProvider`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供程序模式：`IIlluminate\Auth\AuthServiceProvider`和`Illuminate\Hash\HashServiceProvider`
- en: What is MVC?
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是MVC？
- en: 'The MVC triad of classes were used to build user interfaces in Smalltalk-80
    in 1988\. MVC is an architectural pattern that is used in software engineering,
    whose fundamental principle is based on the idea that the logic of an application
    should be separated from its presentation. It divides a given software application
    into three interconnected parts, so as to separate internal representations of
    information from the way that information is presented to or accepted from the
    user. Refer to the following figure:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 1988年，MVC类三合一被用于构建Smalltalk-80中的用户界面。MVC是一种软件工程中使用的架构模式，其基本原则是应用程序的逻辑应与其表示分离。它将给定的软件应用程序分为三个相互连接的部分，以便将信息的内部表示与信息呈现或用户接受的方式分离开来。参考以下图：
- en: '![What is MVC?](Image00003.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![什么是MVC？](Image00003.jpg)'
- en: In the preceding figure, you'll see the elements of MVC. It shows the general
    life cycle on an MVC-based application of a request. As you can see, using an
    MVC architectural pattern in projects allows you to separate different layers
    of applications, such as the database layer and the UI layer.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，您将看到MVC的元素。它显示了基于MVC的应用程序请求的一般生命周期。如您所见，在项目中使用MVC架构模式允许您将应用程序的不同层分离开，例如数据库层和UI层。
- en: 'The benefits of using the MVC pattern are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MVC模式的好处如下：
- en: Different views and controllers can be substituted to provide alternate user
    interfaces for the same model.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的视图和控制器可以替换，为同一模型提供替代用户界面。
- en: It provides multiple simultaneous views of the same model.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了同一模型的多个同时视图。
- en: The change propagation mechanism ensures that all views simultaneously reflect
    the current state of the model.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更传播机制确保所有视图同时反映模型的当前状态。
- en: Changes affecting just the user interface of the application become easier to
    make.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改只影响应用程序的用户界面变得更容易。
- en: It is easier to test the core of the application, as it is encapsulated by the
    model.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过模型封装，更容易测试应用程序的核心。
- en: One of the great benefits of the MVC pattern is that it allows you to recycle
    the application's logic when you use different templates. For example, when you
    want to implement an external API inside a part of your application, it will be
    very helpful to reuse the application's logic. If the MVC approach of Laravel
    is followed thoroughly, you will only need to modify the controller to render
    many different templates/views.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC模式的一个巨大好处是，当您使用不同的模板时，它允许您重复使用应用程序的逻辑。例如，当您想要在应用程序的某个部分内实现外部API时，重用应用程序的逻辑将非常有帮助。如果严格遵循Laravel的MVC方法，您只需要修改控制器以呈现许多不同的模板/视图。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have explained the fundamentals of design patterns. We've
    also introduced some design patterns that are used in the Laravel Framework. Finally,
    we explained the MVC architectural pattern concepts and its benefits.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经解释了设计模式的基础知识。我们还介绍了一些在Laravel框架中使用的设计模式。最后，我们解释了MVC架构模式的概念及其好处。
- en: In the next chapter, we'll cover the MVC concept in depth and its usage in Laravel.
    Before moving on to learn about design patterns and their usage in Laravel with
    the actual code, the most important thing is understanding the framework's approach
    to the MVC concept.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入介绍MVC概念及其在Laravel中的使用。在继续学习设计模式及其在Laravel中的实际代码使用之前，最重要的是理解框架对MVC概念的处理方式。
