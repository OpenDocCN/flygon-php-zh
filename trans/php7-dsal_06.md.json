["```php\nclass TreeNode { \n\n    public $data = NULL; \n\n    public $children = []; \n\n    public function __construct(string $data = NULL) { \n\n      $this->data = $data; \n\n    } \n\n    public function addChildren(TreeNode $node) { \n\n      $this->children[] = $node; \n\n    } \n\n} \n\n```", "```php\nclass Tree { \n\n    public $root = NULL; \n\n    public function __construct(TreeNode $node) { \n\n      $this->root = $node; \n\n    } \n\n    public function traverse(TreeNode $node, int $level = 0) { \n\n      if ($node) { \n\n        echo str_repeat(\"-\", $level); \n\n        echo $node->data . \"\\n\"; \n\n        foreach ($node->children as $childNode) { \n\n          $this->traverse($childNode, $level + 1); \n\n        } \n\n      } \n\n    } \n\n} \n\n```", "```php\n    $ceo = new TreeNode(\"CEO\"); \n\n    $tree = new Tree($ceo); \n\n```", "```php\n$cto     = new TreeNode(\"CTO\"); \n\n$cfo     = new TreeNode(\"CFO\"); \n\n$cmo     = new TreeNode(\"CMO\"); \n\n$coo     = new TreeNode(\"COO\"); \n\n$ceo->addChildren($cto); \n\n$ceo->addChildren($cfo); \n\n$ceo->addChildren($cmo); \n\n$ceo->addChildren($coo); \n\n$seniorArchitect = new TreeNode(\"Senior Architect\"); \n\n$softwareEngineer = new TreeNode(\"Software Engineer\"); \n\n$userInterfaceDesigner      = new TreeNode(\"User Interface Designer\"); \n\n$qualityAssuranceEngineer = new TreeNode(\"Quality Assurance Engineer\"); \n\n$cto->addChildren($seniorArchitect); \n\n$seniorArchitect->addChildren($softwareEngineer); \n\n$cto->addChildren($qualityAssuranceEngineer); \n\n$cto->addChildren($userInterfaceDesigner); \n\n$tree->traverse($tree->root); \n\n```", "```php\nCEO\n\n-CTO\n\n--Senior Architect\n\n---Software Engineer\n\n--Quality Assurance Engineer\n\n--User Interface Designer\n\n-CFO\n\n-CMO\n\n-COO\n\n```", "```php\nclass BinaryNode { \n\n    public $data; \n\n    public $left; \n\n    public $right; \n\n    public function __construct(string $data = NULL) { \n\n      $this->data = $data; \n\n      $this->left = NULL; \n\n      $this->right = NULL; \n\n    } \n\n    public function addChildren(BinaryNode $left, BinaryNode $right) { \n\n      $this->left = $left;\n\n      $this->right = $right;\n\n    }\n\n}\n\n```", "```php\nclass BinaryTree { \n\n    public $root = NULL; \n\n    public function __construct(BinaryNode $node) { \n\n    $this->root = $node; \n\n    } \n\n    public function traverse(BinaryNode $node, int $level    \n\n      = 0) { \n\n      if ($node) { \n\n          echo str_repeat(\"-\", $level); \n\n          echo $node->data . \"\\n\"; \n\n          if ($node->left) \n\n            $this->traverse($node->left, $level + 1); \n\n          if ($node->right) \n\n            $this->traverse($node->right, $level + 1); \n\n         } \n\n    } \n\n} \n\n```", "```php\n$final = new BinaryNode(\"Final\"); \n\n$tree = new BinaryTree($final); \n\n$semiFinal1 = new BinaryNode(\"Semi Final 1\"); \n\n$semiFinal2 = new BinaryNode(\"Semi Final 2\"); \n\n$quarterFinal1 = new BinaryNode(\"Quarter Final 1\"); \n\n$quarterFinal2 = new BinaryNode(\"Quarter Final 2\"); \n\n$quarterFinal3 = new BinaryNode(\"Quarter Final 3\"); \n\n$quarterFinal4 = new BinaryNode(\"Quarter Final 4\"); \n\n$semiFinal1->addChildren($quarterFinal1, $quarterFinal2); \n\n$semiFinal2->addChildren($quarterFinal3, $quarterFinal4); \n\n$final->addChildren($semiFinal1, $semiFinal2); \n\n$tree->traverse($tree->root); \n\n```", "```php\nFinal\n\n-Semi Final 1\n\n--Quarter Final 1\n\n--Quarter Final 2\n\n-Semi Final 2\n\n--Quarter Final 3\n\n--Quarter Final 4\n\n```", "```php\n    $nodes = []; \n\n    $nodes[] = \"Final\"; \n\n    $nodes[] = \"Semi Final 1\"; \n\n    $nodes[] = \"Semi Final 2\"; \n\n    $nodes[] = \"Quarter Final 1\"; \n\n    $nodes[] = \"Quarter Final 2\"; \n\n    $nodes[] = \"Quarter Final 3\"; \n\n    $nodes[] = \"Quarter Final 4\"; \n\n```", "```php\nclass BinaryTree { \n\n    public $nodes = []; \n\n    public function __construct(Array $nodes) { \n\n      $this->nodes = $nodes; \n\n    } \n\n    public function traverse(int $num = 0, int $level = 0) { \n\n      if (isset($this->nodes[$num])) { \n\n          echo str_repeat(\"-\", $level); \n\n          echo $this->nodes[$num] . \"\\n\"; \n\n          $this->traverse(2 * $num + 1, $level+1); \n\n          $this->traverse(2 * ($num + 1), $level+1); \n\n      } \n\n    } \n\n} \n\n```", "```php\n$tree = new BinaryTree($nodes); \n\n$tree->traverse(0); \n\n```", "```php\nFinal\n\n-Semi Final 1\n\n--Quarter Final 1\n\n--Quarter Final 2\n\n-Semi Final 2\n\n--Quarter Final 3\n\n--Quarter Final 4\n\n```", "```php\nclass Node { \n\n    public $data; \n\n    public $left; \n\n    public $right; \n\n    public function __construct(int $data = NULL) { \n\n       $this->data = $data; \n\n       $this->left = NULL; \n\n       $this->right = NULL; \n\n    } \n\n    public function min() { \n\n       $node = $this; \n\n       while($node->left) { \n\n         $node = $node->left; \n\n       } \n\n         return $node; \n\n    } \n\n    public function max() { \n\n         $node = $this; \n\n         while($node->right) { \n\n            $node = $node->right; \n\n         } \n\n         return $node; \n\n    } \n\n    public function successor() { \n\n         $node = $this; \n\n         if($node->right) \n\n               return $node->right->min(); \n\n         else \n\n               return NULL; \n\n    } \n\n    public function predecessor() { \n\n         $node = $this; \n\n         if($node->left) \n\n               return $node->left->max(); \n\n         else \n\n               return NULL;\n\n    }\n\n}\n\n```", "```php\nclass BST { \n\n    public $root = NULL; \n\n    public function __construct(int $data) { \n\n         $this->root = new Node($data); \n\n    } \n\n    public function isEmpty(): bool { \n\n         return $this->root === NULL; \n\n    } \n\n    public function insert(int $data) { \n\n         if($this->isEmpty()) { \n\n               $node = new Node($data); \n\n               $this->root = $node; \n\n               return $node; \n\n         }  \n\n    $node = $this->root; \n\n    while($node) { \n\n      if($data > $node->data) { \n\n          if($node->right) { \n\n            $node = $node->right; \n\n          } else { \n\n            $node->right = new Node($data); \n\n            $node = $node->right; \n\n            break; \n\n          } \n\n      } elseif($data < $node->data) { \n\n          if($node->left) { \n\n            $node = $node->left; \n\n          } else { \n\n            $node->left = new Node($data); \n\n            $node = $node->left; \n\n            break; \n\n          } \n\n      } else { \n\n            break; \n\n      } \n\n    } \n\n    return $node; \n\n    } \n\n    public function traverse(Node $node) { \n\n      if ($node) { \n\n          if ($node->left) \n\n            $this->traverse($node->left); \n\n          echo $node->data . \"\\n\"; \n\n          if ($node->right)\n\n            $this->traverse($node->right);\n\n      }\n\n    }\n\n}\n\n```", "```php\n$tree = new BST(10); \n\n$tree->insert(12); \n\n$tree->insert(6); \n\n$tree->insert(3); \n\n$tree->insert(8); \n\n$tree->insert(15); \n\n$tree->insert(13); \n\n$tree->insert(36); \n\n$tree->traverse($tree->root);\n\n```", "```php\n3\n\n6\n\n8\n\n10\n\n12\n\n13\n\n15\n\n36\n\n```", "```php\npublic function search(int $data) { \n\n  if ($this->isEmpty()) { \n\n      return FALSE; \n\n  } \n\n  $node = $this->root; \n\n  while ($node) { \n\n      if ($data > $node->data) { \n\n        $node = $node->right; \n\n      } elseif ($data < $node->data) { \n\n        $node = $node->left; \n\n      } else { \n\n        break; \n\n      } \n\n  } \n\n  return $node; \n\n}\n\n```", "```php\necho $tree->search(14) ? \"Found\" : \"Not Found\";\n\necho \"\\n\";\n\necho $tree->search(36) ? \"Found\" : \"Not Found\";\n\n```", "```php\nNot Found\n\nFound\n\n```", "```php\n    public $data;\n\n    public $left;\n\n    public $right;\n\n    public $parent;\n\n    public function __construct(int $data = NULL, Node $parent = NULL)   \n\n     {\n\n      $this->data = $data; \n\n      $this->parent = $parent; \n\n      $this->left = NULL; \n\n      $this->right = NULL; \n\n     }\n\n```", "```php\npublic function delete() { \n\n    $node = $this; \n\n    if (!$node->left && !$node->right) { \n\n        if ($node->parent->left === $node) { \n\n          $node->parent->left = NULL; \n\n        } else { \n\n          $node->parent->right = NULL; \n\n        } \n\n    } elseif ($node->left && $node->right) { \n\n        $successor = $node->successor(); \n\n        $node->data = $successor->data; \n\n        $successor->delete(); \n\n    } elseif ($node->left) { \n\n        if ($node->parent->left === $node) { \n\n          $node->parent->left = $node->left; \n\n          $node->left->parent = $node->parent->left; \n\n        } else { \n\n          $node->parent->right = $node->left; \n\n          $node->left->parent = $node->parent->right; \n\n        } \n\n        $node->left = NULL; \n\n    } elseif ($node->right) { \n\n        if ($node->parent->left === $node) { \n\n          $node->parent->left = $node->right; \n\n          $node->right->parent = $node->parent->left; \n\n        } else { \n\n          $node->parent->right = $node->right; \n\n          $node->right->parent = $node->parent->right; \n\n        } \n\n        $node->right = NULL; \n\n    }\n\n}\n\n```", "```php\nfunction insert(int $data)\n\n {\n\n    if ($this->isEmpty()) {\n\n          $node = new Node($data);\n\n          $this->root = $node;\n\n          return $node;\n\n    }\n\n    $node = $this->root;\n\n    while ($node) {\n\n          if ($data > $node->data) {\n\n                if ($node->right) {\n\n                      $node = $node->right;\n\n                }\n\n                else {\n\n                      $node->right = new Node($data, $node);\n\n                      $node = $node->right;\n\n                      break;\n\n                }\n\n          }\n\n          elseif ($data < $node->data) {\n\n                if ($node->left) {\n\n                      $node = $node->left;\n\n                }\n\n                else {\n\n                      $node->left = new Node($data, $node);\n\n                      $node = $node->left;\n\n                      break;\n\n                }\n\n          }\n\n          else {\n\n                break;\n\n    }\n\n }\n\n    return $node;\n\n }\n\n```", "```php\npublic function remove(int $data) {\n\n    $node = $this->search($data);\n\n    if ($node) $node->delete();\n\n }\n\n```", "```php\n   $tree->remove(15);\n\n   $tree->traverse($tree->root);\n\n```", "```php\n3\n\n6\n\n8\n\n10\n\n12\n\n13\n\n36\n\n```", "```php\npublic function traverse(Node $node, string $type=\"in-order\") { \n\nswitch($type) {        \n\n    case \"in-order\": \n\n      $this->inOrder($node); \n\n    break; \n\n    case \"pre-order\": \n\n      $this->preOrder($node); \n\n    break; \n\n    case \"post-order\": \n\n      $this->postOrder($node); \n\n    break;       \n\n}      \n\n} \n\npublic function preOrder(Node $node) { \n\n  if ($node) { \n\n      echo $node->data . \" \"; \n\n      if ($node->left) $this->traverse($node->left); \n\n      if ($node->right) $this->traverse($node->right); \n\n  }      \n\n} \n\npublic function inOrder(Node $node) { \n\n  if ($node) {           \n\n      if ($node->left) $this->traverse($node->left); \n\n      echo $node->data . \" \"; \n\n      if ($node->right) $this->traverse($node->right); \n\n  } \n\n} \n\npublic function postOrder(Node $node) { \n\n  if ($node) {           \n\n      if ($node->left) $this->traverse($node->left); \n\n      if ($node->right) $this->traverse($node->right); \n\n      echo $node->data . \" \"; \n\n  } \n\n} \n\n```", "```php\n   $tree->traverse($tree->root, 'pre-order');\n\n   echo \"\\n\";\n\n   $tree->traverse($tree->root, 'in-order');\n\n   echo \"\\n\";\n\n   $tree->traverse($tree->root, 'post-order');\n\n```", "```php\n10 3 6 8 12 13 15 36\n\n3 6 8 10 12 13 15 36\n\n3 6 8 12 13 15 36 10\n\n```"]