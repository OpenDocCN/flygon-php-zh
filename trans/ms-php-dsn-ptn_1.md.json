["```php\ninterface Animal \n{ \n  public function eat(string $food) : bool; \n\n  public function talk(bool $shout) : string; \n} \n\n```", "```php\nclass Cat implements Animal { \n} \n\n```", "```php\nClass Cat contains 2 abstract methods and must therefore be declared abstract or implement the remaining methods (Animal::eat, Animal::talk) \n\n```", "```php\nclass Cat implements Animal \n{ \n  public function eat(string $food): bool \n  { \n    if ($food === \"tuna\") { \n      return true; \n    } else { \n      return false; \n    } \n  } \n\n  public function talk(bool $shout): string \n  { \n    if ($shout === true) { \n      return \"MEOW!\"; \n    } else { \n      return \"Meow.\"; \n    } \n  } \n} \n\n```", "```php\n**$felix = new Cat();echo**\n**$felix->talk(false);**\n\n```", "```php\nclass Dog implements Animal \n{ \n  public function eat(string $food): bool \n  { \n    if (($food === \"dog food\") || ($food === \"meat\")) { \n      return true; \n    } else { \n      return false; \n    } \n  } \n\n  public function talk(bool $shout): string \n  { \n    if ($shout === true) { \n      return \"WOOF!\"; \n    } else { \n      return \"Woof woof.\"; \n    } \n  } \n} \n\n```", "```php\n$pets = array( \n  'felix'     => new Cat(), \n  'oscar'     => new Dog(), \n  'snowflake' => new Cat() \n); \n\n```", "```php\nforeach ($pets as $pet) { \n  echo $pet->talk(false); \n} \n\n```", "```php\nabstract class Animal \n{ \n  abstract public function eat(string $food) : bool; \n\n  abstract public function talk(bool $shout) : string; \n\n  public function walk(int $speed): bool { \n    if ($speed > 0) { \n      return true; \n    } else { \n      return false; \n    } \n  } \n} \n\n```", "```php\nclass Cat implements Animal \n\n```", "```php\nclass Cat extends Animal \n\n```", "```php\n**$whiskers = new Cat();**\n**$whiskers->walk(1);**\n\n```", "```php\n(new \\IcyApril\\ChapterOne\\Cat())->walk(1); \n\n```", "```php\nfinal class Animal \n{ \n  public function walk() \n  { \n    return \"walking...\"; \n  } \n} \n\nclass Cat extends Animal \n{ \n} \n\n```", "```php\nFatal error: Class Cat may not inherit from final class (Animal) \n\n```", "```php\nclass Animal \n{ \n  final public function walk() \n  { \n    return \"walking...\"; \n  } \n} \n\nclass Cat extends Animal \n{ \n  public function walk () { \n    return \"walking with tail wagging...\"; \n  } \n} \n\n```", "```php\nFatal error: Cannot override final method Animal::walk() \n\n```", "```php\nclass Animal \n{ \n  public function walk() \n  { \n    return \"walking...\"; \n  } \n} \n\nclass Cat extends Animal \n{ \n  public function walk () { \n    return \"walking with tail wagging...\"; \n  } \n} \n\n```", "```php\nfunction setFirstName(string $name): bool \n{ \n  $this->firstName = $name; \n  return true; \n} \n\nfunction setLastName(string $name): bool \n{ \n  $this->lastName = $name; \n  return true; \n} \n\n```", "```php\ntrait Name \n{ \n  function setFirstName(string $name): bool \n  { \n    $this->firstName = $name; \n    return true; \n  } \n\n  function setLastName(string $name): bool \n  { \n    $this->lastName = $name; \n    return true; \n  } \n} \n\n```", "```php\nclass Cat extends Animal \n{ \n  use Name; \n\n  public function walk() \n  { \n    return \"walking with tail wagging...\"; \n  } \n} \n\n```", "```php\n**$whiskers = new Cat();\n$whiskers->setFirstName('Paul');\necho $whiskers->firstName;**\n\n```", "```php\ntrait Name \n{ \n  function setFirstName(string $name): bool \n  { \n    $this->firstName = $name; \n    return true; \n  } \n\n  function setLastName(string $name): bool \n  { \n    $this->lastName = $name; \n    return true; \n  } \n} \n\nclass Animal \n{ \n  public function walk() \n  { \n    return \"walking...\"; \n  } \n} \n\nclass Cat extends Animal \n{ \n  use Name; \n\n  public function walk() \n  { \n    return \"walking with tail wagging...\"; \n  } \n} \n\n$whiskers = new Cat(); \n$whiskers->setFirstName('Paul'); \necho $whiskers->firstName;  \n\n```", "```php\nfunction addNumbers (int $a, int $b): int \n{ \n  return $a + $b; \n} \n\n```", "```php\n**echo addNumbers(5, \"5.0\");**\n\n```", "```php\ndeclare(strict_types=1); \n\n```", "```php\nclass Address \n{ \n  public $firstLine; \n  public $postcode; \n  public $country; \n\n  public function __construct(string $firstLine, string $postcode, string $country) \n  { \n    $this->firstLine = $firstLine; \n    $this->postcode = $postcode; \n    $this->country = $country; \n  } \n} \n\n```", "```php\nclass Customer \n{ \n  public $name; \n  public $address; \n\n  public function __construct($name, Address $address) \n  { \n    $this->name = $name; \n    $this->address = $address; \n  } \n} \n\n```", "```php\n**$address = new Address('10 Downing Street', 'SW1A 2AA', 'UK');\n$customer = new Customer('Davey Cameron', $address);\nvar_dump($customer);**\n\n```", "```php\nclass Bear { \n  private $hasPaws = true; \n} \n\n```", "```php\n**$richard = new Bear();**\n\n```", "```php\n**echo $richard->hasPaws;**\n\n```", "```php\n**Fatal error: Cannot access private property Bear::$hasPaws**\n\n```", "```php\nvar_dump($richard); \n\n```", "```php\nobject(Bear)#1 (1) { \n   [\"hasPaws\":\"Bear\":private]=> \n   bool(true) \n} \n\n```", "```php\nclass Bear { \n  private $hasPaws = true; \n  public function __debugInfo () { \n    return call_user_func('get_object_vars', $this); \n  } \n} \n\n```", "```php\nobject(Bear)#1 (0) {  \n} \n\n```", "```php\n<?php \nclass Bear { \n  private $hasPaws = true; \n  public $growls = true; \n\n  public function __debugInfo () { \n    return call_user_func('get_object_vars', $this); \n  } \n} \n$richard = new Bear(); \nvar_dump($richard); \n\n```", "```php\nobject(Bear)#1 (1) { \n  [\"growls\"]=> \n  bool(true) \n} \n\n```", "```php\n{ \n  \"autoload\": { \n    \"psr-4\": { \n      \"IcyApril\\\\ChapterOne\": \"src/\" \n    } \n  } \n} \n\n```", "```php\n<?php \nnamespace IcyApril\\ChapterOne; \n\nclass Book \n{ \n  public function __construct() \n  { \n    echo \"Hello world!\"; \n  } \n} \n\n```", "```php\nrequire_once('vendor/autoload.php'); \n\n```", "```php\nnew \\IcyApril\\ChapterOne\\Book(); \n\n```"]