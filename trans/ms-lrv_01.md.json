["```php\nAPP_ENV=local\nAPP_DEBUG=true\nAPP_KEY=SomeRandomString\nDB_HOST=localhost\nDB_DATABASE=example\nDB_USERNAME=DBUser\nDB_PASSWORD=DBPass\nCACHE_DRIVER=file\nSESSION_DRIVER=file\n```", "```php\n**# phpspec describe MyCompany/AccommodationRepository**\n\n```", "```php\n<?php\n\nnamespace spec\\MyCompany;\n\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\n\nclass AccommodationRepositorySpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType('MyCompany\\AccommodationRepository');\n    }\n<?php\n\nnamespace MyCompany;\n\nclass AccommodationRepository\n{\n}\n```", "```php\n**# phpspec run**\n\n```", "```php\n**class MyCompany\\AcccommodationRepository does not exist.**\n**Do you want me to create 'MyCompany\\AccommodationRepository' for you? [Y/n]**\n\n```", "```php\n<?php\n\nnamespace MyCompany;\n\nclass AccommodationRepository\n{}\n```", "```php\n**# phpspec describe**\n **MyCompany/Accommodation/ReservationValidator**\n\n```", "```php\n<?php\n\nnamespace spec\\MyCompany\\Accommodation;\n\nuse PhpSpec\\ObjectBehavior;\nuse Prophecy\\Argument;\n\nclass ReservationSpec extends ObjectBehavior\n{\n    function it_is_initializable()\n    {\n        $this->shouldHaveType('MyCompany\\Accommodation\\Reservation');\n    }\n}\n```", "```php\n**# phpspec run**\n\n```", "```php\n**Do you want me to create** \n **'MyCompany\\Accommodation\\ReservationValidator' for you?**\n\n```", "```php\n<?php namespace MyCompany\\Accommodation;\n\n class ReservationValidator {\n }\n```", "```php\n<?php\nnamespace MyCompany\\Accommodation;\n\nuse Carbon\\Carbon;\n\nclass ReservationValidator\n{\n\n    public function validate($start_date, $end_date, $rooms)\n    {\n    }\n}\n```", "```php\nfunction its_start_date_must_come_before_the_end_date ($start_date,$end_date,$room)\n{\n    $rooms = [$room];\n    $start_date = '2015-06-03';\n    $end_date = '2015-06-03';\n    $this->shouldThrow('\\InvalidArgumentException')->duringValidate( $start_date, $end_date, $rooms);\n}\n```", "```php\n**# phpspec run**\n\n```", "```php\n **Do you want me to create 'MyCompany\\Accommodation\\Reservation::validate()'** \n **for you?**\n\n```", "```php\n$end = Carbon::createFromFormat('Y-m-d', $end_date);\n$start = Carbon::createFromFormat('Y-m-d', $start_date);\n\n        if ($end->diffInDays($start)<1) {\n            throw new \\InvalidArgumentException('Requires end date to be greater than start date.');\n        }\n```", "```php\nif ( $end->diffInDays($start) < 1 ) {\n```", "```php\nif (!$end->diffInDays($start)>0)\n```", "```php\n const MINIMUM_STAY_LENGTH = 1;\n```", "```php\n    /**\n     * @param $end\n     * @param $start\n     * @return bool\n     */\n    private function endDateIsGreaterThanStartDate($end, $start)\n    {\n        return $end->diffInDays($start) >= MINIMUM_STAY_LENGTH;\n    }\n```", "```php\nif (!$this->endDateIsGreaterThanStartDate($end, $start))\n```", "```php\nfunction it_cannot_be_made_for_more_than_fifteen_days(User $user, $start_date, $end_date, Room $room)\n{\n        $start_date = '2015-06-01';\n        $end_date = '2015-07-30';\n        $rooms = [$room];\n        $this->shouldThrow('\\InvalidArgumentException')\n        ->duringCreateNew( $user,$start_date,$end_date,$rooms);\n}\n```", "```php\n  if ($end->diffInDays($start)>15) {\n       throw new \\InvalidArgumentException('Cannot reserve a room\n       for more than fifteen (15) days.');\n  }\n```", "```php\n   const MAXIMUM_STAY_LENGTH = 15;\n   /**\n     * @param $end\n     * @param $start\n     * @return bool\n     */\n    private function daysAreGreaterThanMaximumAllowed($end, $start)\n    {\n        return $end->diffInDays($start) > self::MAXIMUM_STAY_LENGTH;\n    }\n\n   if ($this->daysAreGreaterThanMaximumAllowed($end, $start)) {\n            throw new \\InvalidArgumentException ('Cannot reserve a room for more than fifteen (15) days.');\n   }\n```", "```php\nprivate function daysAreWithinAcceptableRange($end, $start)\n    {\n        if ($this->daysAreLessThanMinimumAllowed($end, $start)\n            || $this->daysAreGreaterThanMaximumAllowed($end, $start)) {\n           return false;\n        } else {\n           return true;\n        }\n    }\n```", "```php\nif (!$this->daysAreWithinAcceptableRange($end, $start)) {\n            throw new \\InvalidArgumentException('Requires a stay length from '\n                . self::MINIMUM_STAY_LENGTH . ' to '. self::MAXIMUM_STAY_LENGTH . ' days.');\n        }\n```", "```php\nit_cannot_contain_than_four_rooms\n```", "```php\nfunction it_cannot_contain_than_four_rooms(User $user, $start_date, $end_date, Room $room1, Room $room2, Room $room3, Room $room4, Room $room5)\n```", "```php\n$rooms = [$room1, $room2, $room3, $room4, $room5];\n    $this->shouldThrow('\\InvalidArgumentException')->duringCreateNew($user,$start_date,$end_date,$rooms);\n    }\n```", "```php\n<?php\n\nnamespace MyCompany\\Accommodation;\n\nuse Carbon\\Carbon;\nclass ReservationValidator\n{\n\n    const MINIMUM_STAY_LENGTH = 1;\n    const MAXIMUM_STAY_LENGTH = 15;\n    const MAXIMUM_ROOMS = 4;\n\n    /**\n     * @param $start_date\n     * @param $end_date\n     * @param $rooms\n     * @return $this\n     */\n    public function validate($start_date, $end_date, $rooms)\n    {\n        $end = Carbon::createFromFormat('Y-m-d', $end_date);\n        $start = Carbon::createFromFormat('Y-m-d', $start_date);\n\n        if (!$this->daysAreWithinAcceptableRange($end, $start)) {\n            throw new \\InvalidArgumentException('Requires a stay length from '\n                . self::MINIMUM_STAY_LENGTH . ' to '. self::MAXIMUM_STAY_LENGTH . ' days.');\n        }\n        if (!is_array($rooms)) {\n            throw new \\InvalidArgumentException('Requires last parameter rooms to be an array.');\n        }\n        if ($this->tooManyRooms($rooms)) {\n            throw new \\InvalidArgumentException('Cannot reserve more than '. self::MAXIMUM_ROOMS .' rooms.');\n        }\n\n        return $this;\n\n    }\n\n    /**\n     * @param $end\n     * @param $start\n     * @return bool\n     */\n    private function daysAreLessThanMinimumAllowed($end, $start)\n    {\n        return $end->diffInDays($start) < self::MINIMUM_STAY_LENGTH;\n    }\n\n    /**\n     * @param $end\n     * @param $start\n     * @return bool\n     */\n    private function daysAreGreaterThanMaximumAllowed($end, $start)\n    {\n        return $end->diffInDays($start) > self::MAXIMUM_STAY_LENGTH;\n    }\n\n    /**\n     * @param $end\n     * @param $start\n     * @return bool\n     */\n    private function daysAreWithinAcceptableRange($end, $start)\n    {\n        if ($this->daysAreLessThanMinimumAllowed($end, $start)\n            || $this->daysAreGreaterThanMaximumAllowed($end, $start)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @param $rooms\n     * @return bool\n     */\n    private function tooManyRooms($rooms)\n    {\n        return count($rooms) > self::MAXIMUM_ROOMS;\n    }\n\n    public function rooms(){\n        return $this->belongsToMany('MyCompany\\Accommodation\\Room')->withTimestamps();\n    }\n\n}\n```", "```php\n$ php artisan make:controller RoomController\n\n<?php namespace MyCompany\\Http\\Controllers;\n\nuse MyCompany\\Http\\Requests;\nuse MyCompany\\Http\\Controllers\\Controller;\n\nuse Illuminate\\Http\\Request;\nclass RoomController extends Controller {\n\n        /**\n        * Display a listing of the resource.\n        *\n        * @return Response\n        */\n        public function index()\n        {}\n\n        /**\n        * Show the form for creating a new resource.\n        *\n        * @return Response\n        */\n        public function create()\n        {}\n\n        /**\n        * Store a newly created resource in storage.\n        *\n        * @return Response\n        */\n        public function store()\n        {}\n\u2026.\n\n}\n```", "```php\n**$ php artisan make:commandReserveRoomCommand --handler**\n\n```", "```php\n<?php namespace MyCompany\\Commands;\n\nuse MyCompany\\Commands\\Command;\n\nclass ReserveRoomCommand extends Command {\n\n    /**\n    * Create a new command instance.\n    *\n    * @return void\n    */\n    public function __construct()\n    {\n        //\n    }\n\n}\n```", "```php\n<?php namespace MyCompany\\Commands;\n\nuse MyCompany\\Commands\\Command;\nuse MyCompany\\User;\n\nclass ReserveRoomCommand extends Command {\n\n    public $user;\n    public $rooms;\n    public $start_date;\n    public $end_date;\n\n    /**\n    * Create a new command instance.\n    *\n    * @return void\n    */\n    public function __construct(User $user, $start_date, $end_date, $rooms)\n    {\n        $this->rooms = $rooms;\n        $this->user = $user;\n        $this->start_date = $start_date;\n        $this->end_date = $end_date;\n    }\n\n}\n```", "```php\n<?php namespace MyCompany\\Handlers\\Commands;\n\nuse MyCompany\\Commands\\ReserveRoomCommand;\n\nuse Illuminate\\Queue\\InteractsWithQueue;\n\nclass ReserveRoomCommandHandler {\n\n    /**\n    * Create the command handler.\n    *\n    * @return void\n    */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n    * Handle the command.\n    *\n    * @paramReserveRoomCommand  $command\n    * @return void\n    */\n    public function handle(ReserveRoomCommand $command)\n    {\n        //\n    }\n\n}\n```", "```php\npublic function handle(ReserveRoomCommand $command)\n    {\n        $reservation = new \\MyCompany\\Accommodation\\ReservationValidator();\n        $reservation->validate(\n        $command->start_date, $command->end_date, $command->rooms);\n    } \n```"]