["```php\n$start Time = microtime(); \n\n$count = 0;\n\nfunction fibonacci(int $n): int { \n\n    global $count; \n\n    $count++; \n\n    if ($n == 0) { \n\n        return 1; \n\n    } else if ($n == 1) { \n\n        return 1; \n\n    } else { \n\n        return fibonacci($n - 1) + fibonacci($n - 2); \n\n    } \n\n} \n\necho fibonacci(30) . \"\\n\"; \n\necho \"Function called: \" . $count . \"\\n\"; \n\n$endTime = microtime(); \n\necho \"time =\" . ($endTime - $startTime) . \"\\n\";\n\n```", "```php\n1346269\n\nFunction called: 2692537\n\ntime =0.531349\n\n```", "```php\n$startTime = microtime(); \n\n$fibCache = []; \n\n$count = 0; \n\nfunction fibonacciMemoized(int $n): int { \n\n    global $fibCache; \n\n    global $count; \n\n    $count++; \n\n    if ($n == 0 || $n == 1) { \n\n        return 1; \n\n    } else {\n\n    if (isset($fibCache[$n - 1])) { \n\n        $tmp = $fibCache[$n - 1]; \n\n    } else {\n\n        $tmp = fibonacciMemoized($n - 1); \n\n        $fibCache[$n - 1] = $tmp; \n\n    } \n\n    if (isset($fibCache[$n - 2])) { \n\n        $tmp1 = $fibCache[$n - 2]; \n\n    } else { \n\n        $tmp1 = fibonacciMemoized($n - 2); \n\n        $fibCache[$n - 2] = $tmp1; \n\n    } \n\n    return $tmp + $tmp1; \n\n    } \n\n} \n\necho fibonacciMemoized(30) . \"\\n\"; \n\necho \"Function called: \" . $count . \"\\n\"; \n\n$endTime = microtime(); \n\necho \"time =\" . ($endTime - $startTime) . \"\\n\"; \n\n```", "```php\n1346269\n\nFunction called: 31\n\ntime =5.299999999997E-5\n\n```", "```php\nfunction strFindAll(string $pattern, string $txt): array { \n\n    $M = strlen($pattern); \n\n    $N = strlen($txt); \n\n    $positions = []; \n\n    for ($i = 0; $i <= $N - $M; $i++) { \n\n      for ($j = 0; $j < $M; $j++) \n\n          if ($txt[$i + $j] != $pattern[$j]) \n\n          break; \n\n      if ($j == $M) \n\n          $positions[] = $i; \n\n  }\n\n    return $positions; \n\n} \n\n```", "```php\n$txt = \"AABAACAADAABABBBAABAA\"; \n\n$pattern = \"AABA\"; \n\n$matches = strFindAll($pattern, $txt); \n\nif ($matches) { \n\n    foreach ($matches as $pos) { \n\n        echo \"Pattern found at index : \" . $pos . \"\\n\"; \n\n    } \n\n} \n\n```", "```php\nPattern found at index : 0\n\nPattern found at index : 9\n\nPattern found at index : 16\n\n```", "```php\nfunction ComputeLPS(string $pattern, array &$lps) { \n\n    $len = 0; \n\n    $i = 1; \n\n    $M = strlen($pattern); \n\n    $lps[0] = 0; \n\n    while ($i < $M) { \n\n    if ($pattern[$i] == $pattern[$len]) { \n\n        $len++; \n\n        $lps[$i] = $len; \n\n        $i++; \n\n    } else { \n\n        if ($len != 0) { \n\n          $len = $lps[$len - 1]; \n\n        } else { \n\n          $lps[$i] = 0; \n\n          $i++; \n\n        } \n\n    } \n\n    } \n\n}\n\n```", "```php\nfunction KMPStringMatching(string $str, string $pattern): array { \n\n    $matches = []; \n\n    $M = strlen($pattern); \n\n    $N = strlen($str); \n\n    $i = $j = 0; \n\n    $lps = []; \n\n    ComputeLPS($pattern, $lps); \n\n    while ($i < $N) { \n\n    if ($pattern[$j] == $str[$i]) { \n\n        $j++; \n\n        $i++; \n\n    } \n\n    if ($j == $M) { \n\n        array_push($matches, $i - $j); \n\n        $j = $lps[$j - 1]; \n\n    } else if ($i < $N && $pattern[$j] != $str[$i]) { \n\n        if ($j != 0) \n\n        $j = $lps[$j - 1]; \n\n        else \n\n        $i = $i + 1; \n\n    } \n\n    } \n\n    return $matches; \n\n} \n\n```", "```php\n$txt = \"AABAACAADAABABBBAABAA\"; \n\n$pattern = \"AABA\"; \n\n$matches = KMPStringMatching($txt, $pattern); \n\nif ($matches) { \n\n    foreach ($matches as $pos) { \n\n        echo \"Pattern found at index : \" . $pos . \"\\n\"; \n\n    }\n\n}\n\n```", "```php\nPattern found at index : 0\n\nPattern found at index : 9\n\nPattern found at index : 16\n\n```", "```php\nfunction huffmanEncode(array $symbols): array { \n\n    $heap = new SplPriorityQueue; \n\n    $heap->setExtractFlags(SplPriorityQueue::EXTR_BOTH); \n\n    foreach ($symbols as $symbol => $weight) { \n\n        $heap->insert(array($symbol => ''), -$weight); \n\n    } \n\n    while ($heap->count() > 1) { \n\n    $low = $heap->extract(); \n\n    $high = $heap->extract(); \n\n    foreach ($low['data'] as &$x) \n\n        $x = '0' . $x; \n\n    foreach ($high['data'] as &$x) \n\n        $x = '1' . $x; \n\n    $heap->insert($low['data'] + $high['data'],  \n\n            $low['priority'] + $high['priority']); \n\n    } \n\n    $result = $heap->extract(); \n\n    return $result['data']; \n\n} \n\n```", "```php\n$txt = 'PHP 7 Data structures and Algorithms'; \n\n$symbols = array_count_values(str_split($txt)); \n\n$codes = huffmanEncode($symbols); \n\necho \"Symbol\\t\\tWeight\\t\\tHuffman Code\\n\"; \n\nforeach ($codes as $sym => $code) { \n\n    echo \"$sym\\t\\t$symbols[$sym]\\t\\t$code\\n\"; \n\n} \n\n```", "```php\nSymbol          Weight          Huffman Code\n\ni               1               00000\n\nD               1               00001\n\nd               1               00010\n\nA               1               00011\n\nt               4               001\n\nH               1               01000\n\nm               1               01001\n\nP               2               0101\n\ng               1               01100\n\no               1               01101\n\ne               1               01110\n\nn               1               01111\n\n7               1               10000\n\nl               1               10001\n\nu               2               1001\n\n 5               101\n\nh               1               11000\n\nc               1               11001\n\na               3               1101\n\nr               3               1110\n\ns               3               1111\n\n```", "```php\nfunction velocityMagnifier(array $jobs) { \n\n     $n = count($jobs); \n\n    usort($jobs, function($opt1, $opt2) { \n\n        return $opt1['velocity'] < $opt2['velocity']; \n\n    }); \n\n    $dMax = max(array_column($jobs, \"deadline\")); \n\n    $slot = array_fill(1, $dMax, -1); \n\n    $filledTimeSlot = 0; \n\n    for ($i = 0; $i < $n; $i++) { \n\n    $k = min($dMax, $jobs[$i]['deadline']); \n\n    while ($k >= 1) { \n\n        if ($slot[$k] == -1) { \n\n          $slot[$k] = $i; \n\n          $filledTimeSlot++; \n\n          break; \n\n        } \n\n        $k--; \n\n    } \n\n      if ($filledTimeSlot == $dMax) { \n\n          break; \n\n      } \n\n    } \n\n    echo(\"Stories to Complete: \"); \n\n    for ($i = 1; $i <= $dMax; $i++) { \n\n        echo $jobs[$slot[$i]]['id']; \n\n        if ($i < $dMax) { \n\n            echo \"\\t\"; \n\n        } \n\n    } \n\n    $maxVelocity = 0; \n\n    for ($i = 1; $i <= $dMax; $i++) { \n\n        $maxVelocity += $jobs[$slot[$i]]['velocity']; \n\n    } \n\n    echo \"\\nMax Velocity: \" . $maxVelocity; \n\n} \n\n```", "```php\n$jobs = [ \n\n    [\"id\" => \"S1\", \"deadline\" => 2, \"velocity\" => 95], \n\n    [\"id\" => \"S2\", \"deadline\" => 1, \"velocity\" => 32], \n\n    [\"id\" => \"S3\", \"deadline\" => 2, \"velocity\" => 47], \n\n    [\"id\" => \"S4\", \"deadline\" => 1, \"velocity\" => 42], \n\n    [\"id\" => \"S5\", \"deadline\" => 3, \"velocity\" => 28], \n\n    [\"id\" => \"S6\", \"deadline\" => 4, \"velocity\" => 64] \n\n]; \n\nvelocityMagnifier($jobs); \n\n```", "```php\nStories to Complete: S3    S1    S5    S6\n\nMax Velocity: 234\n\n```", "```php\nProcedure knapsack(n, W, w1,...,wN, v1,...,vN) \n\nfor w = 0 to W \n\n    M[0, w] = 0 \n\nfor i = 1 to n \n\n    for w = 0 to W \n\n    if wi > w : \n\n        M[i, w] = M[i-1, w] \n\n    else : \n\n        M[i, w] = max (M[i-1, w], vi + M[i-1, w-wi ]) \n\nreturn M[n, W] \n\nend procedure  \n\n```", "```php\nfunction knapSack(int $maxWeight, array $weights, array $values, int $n) { \n\n    $DP = []; \n\n    for ($i = 0; $i <= $n; $i++) { \n\n      for ($w = 0; $w <= $maxWeight; $w++) { \n\n          if ($i == 0 || $w == 0) \n\n          $DP[$i][$w] = 0; \n\n          else if ($weights[$i - 1] <= $w) \n\n          $DP[$i][$w] =  \n\n            max($values[$i-1]+$DP[$i - 1][$w - $weights[$i-1]] \n\n            , $DP[$i - 1][$w]); \n\n          else \n\n          $DP[$i][$w] = $DP[$i - 1][$w]; \n\n        } \n\n    } \n\n    return $DP[$n][$maxWeight]; \n\n} \n\n$values = [10, 20, 30, 40, 50]; \n\n$weights = [1, 2, 3, 4, 5]; \n\n$maxWeight = 10; \n\n$n = count($values); \n\necho knapSack($maxWeight, $weights, $values, $n); \n\n```", "```php\nfunction LCSLength(X[1..m], Y[1..n]) \n\n    C = array[m][n] \n\n    for i := 0..m \n\n       C[i,0] = 0 \n\n    for j := 0..n \n\n       C[0,j] = 0 \n\n    for i := 1..m \n\n        for j := 1..n \n\n            if(i = 0 or j = 0) \n\n                C[i,j] := 0 \n\n            else if X[i] = Y[j] \n\n                C[i,j] := C[i-1,j-1] + 1 \n\n            else \n\n                C[i,j] := max(C[i,j-1], C[i-1,j]) \n\n    return C[m,n] \n\n```", "```php\nfunction LCS(string $X, string $Y): int { \n\n    $M = strlen($X); \n\n    $N = strlen($Y); \n\n    $L = []; \n\n    for ($i = 0; $i <= $M; $i++) \n\n      $L[$i][0] = 0; \n\n    for ($j = 0; $j <= $N; $j++) \n\n      $L[0][$j] = 0; \n\n    for ($i = 0; $i <= $M; $i++) { \n\n      for ($j = 0; $j <= $N; $j++) {         \n\n          if($i == 0 || $j == 0) \n\n          $L[$i][$j] = 0; \n\n          else if ($X[$i - 1] == $Y[$j - 1]) \n\n          $L[$i][$j] = $L[$i - 1][$j - 1] + 1; \n\n          else \n\n          $L[$i][$j] = max($L[$i - 1][$j], $L[$i][$j - 1]); \n\n      } \n\n    } \n\n    return $L[$M][$N]; \n\n} \n\n```", "```php\n$X = \"AGGTAB\"; \n\n$Y = \"GGTXAYB\"; \n\necho \"LCS Length:\".LCS( $X, $Y ); \n\n```", "```php\ndefine(\"GC\", \"-\"); \n\ndefine(\"SP\", 1); \n\ndefine(\"GP\", -1); \n\ndefine(\"MS\", -1); \n\nfunction NWSquencing(string $s1, string $s2) { \n\n    $grid = []; \n\n    $M = strlen($s1); \n\n    $N = strlen($s2); \n\n    for ($i = 0; $i <= $N; $i++) { \n\n    $grid[$i] = []; \n\n      for ($j = 0; $j <= $M; $j++) { \n\n          $grid[$i][$j] = null; \n\n      } \n\n    } \n\n    $grid[0][0] = 0; \n\n    for ($i = 1; $i <= $M; $i++) { \n\n        $grid[0][$i] = -1 * $i; \n\n    } \n\n    for ($i = 1; $i <= $N; $i++) { \n\n        $grid[$i][0] = -1 * $i; \n\n    } \n\n    for ($i = 1; $i <= $N; $i++) { \n\n      for ($j = 1; $j <= $M; $j++) { \n\n          $grid[$i][$j] = max( \n\n            $grid[$i - 1][$j - 1] + ($s2[$i - 1] === $s1[$j - 1] ? SP : \n\n              MS), $grid[$i - 1][$j] + GP, $grid[$i][$j - 1] + GP \n\n          ); \n\n      } \n\n    } \n\n    printSequence($grid, $s1, $s2, $M, $N); \n\n} \n\n```", "```php\n$X = \"GAATTCAGTTA\"; \n\n$Y = \"GGATCGA\"; \n\n```", "```php\nfunction printSequence($grid, $s1, $s2, $j, $i) { \n\n    $sq1 = []; \n\n    $sq2 = []; \n\n    $sq3 = []; \n\n    do { \n\n    $t = $grid[$i - 1][$j]; \n\n    $d = $grid[$i - 1][$j - 1]; \n\n    $l = $grid[$i][$j - 1]; \n\n    $max = max($t, $d, $l); \n\n    switch ($max) { \n\n        case $d: \n\n        $j--; \n\n        $i--; \n\n          array_push($sq1, $s1[$j]); \n\n          array_push($sq2, $s2[$i]); \n\n          if ($s1[$j] == $s2[$i]) \n\n              array_push($sq3, \"|\"); \n\n          else \n\n              array_push($sq3, \" \"); \n\n        break; \n\n        case $t: \n\n        $i--; \n\n          array_push($sq1, GC); \n\n          array_push($sq2, $s2[$i]); \n\n          array_push($sq3, \" \"); \n\n        break; \n\n        case $l: \n\n          $j--; \n\n          array_push($sq1, $s1[$j]); \n\n          array_push($sq2, GC); \n\n          array_push($sq3, \" \"); \n\n        break; \n\n    } \n\n    } while ($i > 0 && $j > 0); \n\n    echo implode(\"\", array_reverse($sq1)) . \"\\n\"; \n\n    echo implode(\"\", array_reverse($sq3)) . \"\\n\"; \n\n    echo implode(\"\", array_reverse($sq2)) . \"\\n\"; \n\n} \n\n```", "```php\nG-AATTCAGTTA\n\n| | | | |  |\n\nGGA-T-C-G--A\n\n```", "```php\ndefine(\"N\", 9); \n\ndefine(\"UNASSIGNED\", 0); \n\nfunction FindUnassignedLocation(array &$grid, int &$row,  \n\nint &$col): bool { \n\n    for ($row = 0; $row < N; $row++) \n\n      for ($col = 0; $col < N; $col++) \n\n          if ($grid[$row][$col] == UNASSIGNED) \n\n          return true; \n\n    return false; \n\n} \n\nfunction UsedInRow(array &$grid, int $row, int $num): bool { \n\n    return in_array($num, $grid[$row]); \n\n} \n\nfunction UsedInColumn(array &$grid, int $col, int $num): bool { \n\n    return in_array($num, array_column($grid, $col)); \n\n} \n\nfunction UsedInBox(array &$grid, int $boxStartRow,  \n\nint $boxStartCol, int $num): bool { \n\n    for ($row = 0; $row < 3; $row++) \n\n    for ($col = 0; $col < 3; $col++) \n\nif ($grid[$row + $boxStartRow][$col + $boxStartCol] == $num) \n\n        return true; \n\n    return false; \n\n} \n\nfunction isSafe(array $grid, int $row, int $col, int $num): bool { \n\n    return !UsedInRow($grid, $row, $num) && \n\n        !UsedInColumn($grid, $col, $num) && \n\n        !UsedInBox($grid, $row - $row % 3, $col - $col % 3, $num); \n\n} \n\n```", "```php\nfunction SolveSudoku(array &$grid): bool { \n\n    $row = $col = 0; \n\n    if (!FindUnassignedLocation($grid, $row, $col)) \n\n        return true; // success! no empty space \n\n    for ($num = 1; $num <= N; $num++) { \n\n      if (isSafe($grid, $row, $col, $num)) { \n\n          $grid[$row][$col] = $num; // make assignment \n\n          if (SolveSudoku($grid)) \n\n          return true;  // return, if success \n\n          $grid[$row][$col] = UNASSIGNED;  // failure \n\n      } \n\n    } \n\n    return false; // triggers backtracking \n\n} \n\nfunction printGrid(array $grid) { \n\n    foreach ($grid as $row) { \n\n        echo implode(\"\", $row) . \"\\n\"; \n\n    } \n\n}\n\n```", "```php\n$grid = [ \n\n    [0, 0, 7, 0, 3, 0, 8, 0, 0], \n\n    [0, 0, 0, 2, 0, 5, 0, 0, 0], \n\n    [4, 0, 0, 9, 0, 6, 0, 0, 1], \n\n    [0, 4, 3, 0, 0, 0, 2, 1, 0], \n\n    [1, 0, 0, 0, 0, 0, 0, 0, 5], \n\n    [0, 5, 8, 0, 0, 0, 6, 7, 0], \n\n    [5, 0, 0, 1, 0, 8, 0, 0, 9], \n\n    [0, 0, 0, 5, 0, 3, 0, 0, 0], \n\n    [0, 0, 2, 0, 9, 0, 5, 0, 0] \n\n]; \n\nif (SolveSudoku($grid) == true) \n\n    printGrid($grid); \n\nelse \n\n    echo \"No solution exists\"; \n\n```", "```php\n297431856\n\n361285497\n\n485976321\n\n743659218\n\n126847935\n\n958312674\n\n534128769\n\n879563142\n\n612794583\n\n```", "```php\n$reviews = []; \n\n$reviews['Adiyan'] = [\"McDonalds\" => 5, \"KFC\" => 5, \"Pizza Hut\" => 4.5, \"Burger King\" => 4.7, \"American Burger\" => 3.5, \"Pizza Roma\" => 2.5]; \n\n$reviews['Mikhael'] = [\"McDonalds\" => 3, \"KFC\" => 4, \"Pizza Hut\" => 3.5, \"Burger King\" => 4, \"American Burger\" => 4, \"Jafran\" => 4]; \n\n$reviews['Zayeed'] = [\"McDonalds\" => 5, \"KFC\" => 4, \"Pizza Hut\" => 2.5, \"Burger King\" => 4.5, \"American Burger\" => 3.5, \"Sbarro\" => 2]; \n\n$reviews['Arush'] = [\"KFC\" => 4.5, \"Pizza Hut\" => 3, \"Burger King\" => 4, \"American Burger\" => 3, \"Jafran\" => 2.5, \"FFC\" => 3.5]; \n\n$reviews['Tajwar'] = [\"Burger King\" => 3, \"American Burger\" => 2, \"KFC\" => 2.5, \"Pizza Hut\" => 3, \"Pizza Roma\" => 2.5, \"FFC\" => 3]; \n\n$reviews['Aayan'] = [ \"KFC\" => 5, \"Pizza Hut\" => 4, \"Pizza Roma\" => 4.5, \"FFC\" => 4]; \n\n```", "```php\nfunction pearsonScore(array $reviews, string $person1, string $person2): float { \n\n$commonItems = array(); \n\nforeach ($reviews[$person1] as $restaurant1 => $rating) { \n\n    foreach ($reviews[$person2] as $restaurant2 => $rating) { \n\n        if ($restaurant1 == $restaurant2) { \n\n          $commonItems[$restaurant1] = 1; \n\n        } \n\n    } \n\n} \n\n$n = count($commonItems); \n\nif ($n == 0) \n\n    return 0.0; \n\n    $sum1 = 0; \n\n    $sum2 = 0; \n\n    $sqrSum1 = 0; \n\n    $sqrSum2 = 0; \n\n    $pSum = 0; \n\n    foreach ($commonItems as $restaurant => $common) { \n\n      $sum1 += $reviews[$person1][$restaurant]; \n\n      $sum2 += $reviews[$person2][$restaurant]; \n\n      $sqrSum1 += $reviews[$person1][$restaurant] ** 2; \n\n      $sqrSum2 += $reviews[$person2][$restaurant] ** 2; \n\n      $pSum += $reviews[$person1][$restaurant] *  \n\n      $reviews[$person2][$restaurant]; \n\n    } \n\n    $num = $pSum - (($sum1 * $sum2) / $n); \n\n    $den = sqrt(($sqrSum1 - (($sum1 ** 2) / $n))  \n\n      * ($sqrSum2 - (($sum2 ** 2) / $n))); \n\n    if ($den == 0) { \n\n      $pearsonCorrelation = 0; \n\n    } else { \n\n      $pearsonCorrelation = $num / $den; \n\n    } \n\n return (float) $pearsonCorrelation; \n\n} \n\n```", "```php\nfunction getRecommendations(array $reviews, string $person): array { \n\n    $calculation = []; \n\n    foreach ($reviews as $reviewer => $restaurants) { \n\n    $similarityScore = pearsonScore($reviews, $person, $reviewer); \n\n        if ($person == $reviewer || $similarityScore <= 0) { \n\n            continue; \n\n        } \n\n        foreach ($restaurants as $restaurant => $rating) { \n\n            if (!array_key_exists($restaurant, $reviews[$person])) { \n\n                if (!array_key_exists($restaurant, $calculation)) { \n\n                    $calculation[$restaurant] = []; \n\n                    $calculation[$restaurant]['Total'] = 0; \n\n                    $calculation[$restaurant]['SimilarityTotal'] = 0; \n\n                } \n\n            $calculation[$restaurant]['Total'] += $similarityScore * \n\n              $rating; \n\n            $calculation[$restaurant]['SimilarityTotal'] += \n\n              $similarityScore; \n\n            } \n\n        } \n\n    } \n\n    $recommendations = []; \n\n    foreach ($calculation as $restaurant => $values) { \n\n    $recommendations[$restaurant] = $calculation[$restaurant]['Total']  \n\n      / $calculation[$restaurant]['SimilarityTotal']; \n\n    } \n\n    arsort($recommendations); \n\n    return $recommendations; \n\n} \n\n```", "```php\n$person = 'Arush'; \n\necho 'Restaurant recommendations for ' . $person . \"\\n\"; \n\n$recommendations = getRecommendations($reviews, $person); \n\nforeach ($recommendations as $restaturant => $score) { \n\n    echo $restaturant . \" \\n\"; \n\n} \n\n```", "```php\nRestaurant recommendations for Arush\n\nMcDonalds\n\nPizza Roma\n\nSbarro\n\n```", "```php\n$sparseArray = []; \n\n$sparseArray[0][5] = 1; \n\n$sparseArray[1][0] = 1; \n\n$sparseArray[2][4] = 2; \n\n$sparseArray[3][2] = 2; \n\n$sparseArray[4][6] = 1; \n\n$sparseArray[5][7] = 2; \n\n$sparseArray[6][6] = 1; \n\n$sparseArray[7][1] = 1; \n\nfunction getSparseValue(array $array, int $i, int $j): int { \n\n    if (isset($array[$i][$j])) \n\n        return $array[$i][$j]; \n\n    else \n\n        return 0; \n\n} \n\necho getSparseValue($sparseArray, 0, 2) . \"\\n\"; \n\necho getSparseValue($sparseArray, 7, 1) . \"\\n\"; \n\necho getSparseValue($sparseArray, 8, 8) . \"\\n\"; \n\n```", "```php\n0\n\n1\n\n0\n\n```", "```php\nk1(\"PHP\") = 5 \n\nk2(\"PHP\") = 9 \n\n```", "```php\nk1(\"algorithm\") = 2 \n\nk2(\"algorithm\") = 5 \n\n```", "```php\nk1(\"error\") = 2 \n\nk2(\"error\") = 9 \n\n```"]