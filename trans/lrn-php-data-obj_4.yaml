- en: Chapter 4. Prepared Statements
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。准备好的语句
- en: In the previous chapters, we have looked at the basics of PDO, and you may have
    noticed that most of its functionality resembles the traditional extensions used
    to connect to databases. The only new thing is exceptions, but even that can be
    similar to traditional error handling.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们已经了解了PDO的基础知识，您可能已经注意到它的大部分功能类似于用于连接数据库的传统扩展。唯一的新功能是异常，但即使这一点也可以类似于传统的错误处理。
- en: 'In this chapter we will look at a new concept that was not present in PHP before
    PDO: prepared statements. We will see how they can further simplify our code and
    even lead to better performance. We will also look at how PDO works with BLOBs—all
    in a database-independent manner, of course.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到PHP中PDO之前不存在的一个新概念：准备好的语句。我们将看到它们如何进一步简化我们的代码，甚至提高性能。我们还将看看PDO如何以数据库无关的方式处理BLOBs。
- en: Regarding our library management application, we will rewrite the edit/update
    functionality added in the previous chapter so as to facilitate prepared statements,
    as well as add support for book cover images, which we will keep in the database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们的图书馆管理应用程序，我们将重写前一章中添加的编辑/更新功能，以便支持准备好的语句，并添加对书籍封面图片的支持，我们将保存在数据库中。
- en: Prepared Statements
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好的语句
- en: A **prepared statement** is a template for executing one or more SQL queries
    against the database. The idea behind prepared statements is that, with queries
    that use the same syntax but different values, it is much faster to pre-process
    the syntax once and then execute it several times using different parameters.
    Consider the following task. We have to insert the names of several new authors
    into our database. Of course, we can use command line client or the `add author`
    page we recently created, but we decide to use a PHP script.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**准备好的语句**是针对数据库执行一个或多个SQL查询的模板。准备好的语句的理念是，对于使用相同语法但不同值的查询，预处理语法一次，然后使用不同参数多次执行会更快。考虑以下任务。我们必须将几位新作者的姓名插入到我们的数据库中。当然，我们可以使用命令行客户端或我们最近创建的`add
    author`页面，但我们决定使用一个PHP脚本。'
- en: 'Let''s assume that the authors to be added are kept in a PHP array:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设要添加的作者保存在一个PHP数组中：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a two-dimensional array, through which we will iterate using a `foreach`
    loop so as to insert both the authors' details into the database.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个二维数组，我们将使用`foreach`循环来迭代，以便将两位作者的详细信息插入到数据库中。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, we create an SQL statement on each iteration for every author
    and take care of quoting all the parameters.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们在每次迭代中为每个作者创建一个SQL语句，并引用所有参数。
- en: 'With prepared statements, we can construct the query just once and execute
    it any number of times by just passing different values to it. Our code would
    then look like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用准备好的语句，我们可以只构建一次查询，然后通过传递不同的值任意次数执行它。我们的代码将如下所示：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: From the above code snippet, you can see that a prepared statement is first
    *prepared* by calling the `PDO::prepare()` method. This method accepts a string
    containing an SQL command where the values that change are replaced with question
    mark characters. The call returns an object of class `PDOStatement`. Then in the
    loop we call the statement's `execute()` method rather than `PDO::query()` method.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的代码片段中，您可以看到准备好的语句首先通过调用`PDO::prepare()`方法*准备*。该方法接受一个包含SQL命令的字符串，其中变化的值被问号字符替换。调用返回一个`PDOStatement`类的对象。然后在循环中，我们调用语句的`execute()`方法，而不是`PDO::query()`方法。
- en: The `PDOStatement::execute()` method accepts an array of values, which are inserted
    into the SQL query in place of the question marks. The number and order of elements
    in that array must be same as the number and match the order of question marks
    in the query template passed to `PDO::prepare()`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`PDOStatement::execute()`方法接受一个值数组，这些值将被插入到SQL查询中，取代问号。该数组中的元素数量和顺序必须与传递给`PDO::prepare()`的查询模板中问号的数量和顺序相同。'
- en: You must have noticed that we don't use `PDO::quote()` in the code—PDO takes
    care of proper quoting of the incoming values.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您一定注意到我们在代码中没有使用`PDO::quote()`——PDO会正确引用传入的值。
- en: Positional and Named Placeholders
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位置和命名占位符
- en: The previous example used question marks to designate the position of values
    in the prepared statement. That's why these question marks are called **positional
    placeholders**. When using them you must take care of proper order of the elements
    in the array that you are passing to the `PDOStatement::execute()` method. While
    they are quick to write, they may become a source for hard-to-track errors, especially
    when you change the query columns. To protect yourself, against this you can use
    the so-called **named placeholders**, which consist of descriptive names preceded
    by a colon, instead of question marks.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子使用问号来指定准备好的语句中数值的位置。这就是为什么这些问号被称为**位置占位符**。当使用它们时，您必须注意传递给`PDOStatement::execute()`方法的数组中元素的正确顺序。虽然它们写起来很快，但当您更改查询列时，它们可能成为难以跟踪错误的源泉。为了保护自己免受这种影响，您可以使用所谓的**命名占位符**，它们由冒号前面的描述性名称组成，而不是问号。
- en: 'With named placeholders, we can rewrite the code to insert the two authors
    in the following way:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名占位符，我们可以以以下方式重写代码来插入这两位作者：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we replaced the three question marks with named placeholders
    and then in the call to `PDOStatement::execute()` we supplied an array of key-value
    pairs where keys are the corresponding named placeholders and values are the data
    that we want to insert into the database.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们用命名占位符替换了三个问号，然后在调用`PDOStatement::execute()`时，我们提供了一个键值对数组，其中键是相应的命名占位符，值是我们要插入数据库的数据。
- en: 'With named placeholders, the order of the elements in the array is not significant,
    only the association matters. For example, we could rewrite the loop as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名占位符时，数组中元素的顺序并不重要，只有关联才重要。例如，我们可以将循环重写如下：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With positional placeholders, however, we can pass the values of the `$author`
    array to the `PDOStatement::execute()` method as long as we are sure that the
    order of its elements matches the order of the placeholders:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于位置占位符，只要我们确保其元素的顺序与占位符的顺序匹配，就可以将`$author`数组的值传递给`PDOStatement::execute()`方法：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note how we used the `array_values()` function to get rid of the string keys
    and convert the associative array to a list.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们如何使用`array_values()`函数来摆脱字符串键并将关联数组转换为列表。
- en: If we supply an array of values that do not match the number of placeholders
    in the query to `PDOStatement::execute()` or we pass an associative array to a
    statement that uses positional placeholders (or a list to a statement, which uses
    named placeholders), this will be treated as an error and an exception will be
    thrown (provided that exceptions have been enabled previously in a call to `PDO::setAttribute()`
    method).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们向`PDOStatement::execute()`提供的值数组与查询中的占位符数量不匹配，或者我们向使用位置占位符的语句传递了一个关联数组（或向使用命名占位符的语句传递了一个列表），这将被视为错误，并且将抛出异常（前提是之前在调用`PDO::setAttribute()`方法中启用了异常）。
- en: 'There is one important thing to note about the usage of placeholders. They
    cannot be used as a part of a value that you pass to the database. This is best
    demonstrated with an example of invalid usage:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于占位符的使用有一件重要的事情需要注意。它们不能作为您传递给数据库的值的一部分。这最好通过一个无效使用示例来演示：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This must be rewritten as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这必须重写为：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The idea here is, not to put the placeholder inside a string in the SQL template—this
    has to be done in the call to `PDOStatement::execute()` method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是，不要将占位符放在SQL模板中的字符串中——这必须在调用`PDOStatement::execute()`方法中完成。
- en: Prepared Statements and Bound Values
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备语句和绑定值
- en: The examples above used the so-called **unbound statements**. This means that
    we were supplying the values for the query in an array passed to the `PDOStatement::execute()`
    method. PDO also supports **bound statements** where you can explicitly bind an
    immediate value or a variable to a named or positional placeholder.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例使用了所谓的**未绑定语句**。这意味着我们在传递给`PDOStatement::execute()`方法的数组中提供了查询的值。PDO还支持**绑定语句**，其中您可以将立即值或变量显式绑定到命名或位置占位符。
- en: 'To bind an immediate value to a statement, the `PDOStatement::bindValue()`
    method is used. This method accepts the placeholder identifier and a value. The
    placeholder identifier is the 1-based index of the question mark in the query
    for positional placeholders or the name of the named placeholder. For example,
    we could rewrite the example with positional placeholders to use bound values
    in the following way:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要将立即值绑定到语句，使用`PDOStatement::bindValue()`方法。此方法接受占位符标识符和一个值。占位符标识符是查询中位置占位符的问号的基于1的索引，或命名占位符的名称。例如，我们可以将使用位置占位符的示例重写为以下方式使用绑定值：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you prefer named placeholders, you can write:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢使用命名占位符，可以编写：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, in both cases we don't supply anything in the call to `PDOStatement::execute()`.
    Again, as with unbound statements, if you don't bind a value for every placeholder,
    the call to `PDOStatement::execute()` will fail, leading to an exception.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在这两种情况下，我们在调用`PDOStatement::execute()`时不提供任何内容。同样，与未绑定语句一样，如果您没有为每个占位符绑定值，调用`PDOStatement::execute()`将失败，导致异常。
- en: 'PDO can also bind result set columns to PHP variables for SELECT queries. These
    variables will be modified with corresponding column values on every call to `PDOStatement::fetch()`.
    This is an alternative to fetching the result set row as an array or an object
    as discussed in [Chapter 2](ch02.html "Chapter 2. Using PHP Data Objects: First
    Steps"). Consider the following example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PDO也可以将结果集列绑定到PHP变量以用于SELECT查询。这些变量将在每次调用`PDOStatement::fetch()`时被相应列的值修改。这是在[第2章](ch02.html
    "第2章。使用PHP数据对象：第一步")中讨论的将结果集行作为数组或对象获取的替代方法。考虑以下示例：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will render all the authors in the table. The variables are bound in the
    call to the `PDOStatement::bindColumn()` method, which expects the first parameter
    to be the 1-based index of the column in the result set or the column name as
    returned from the database, and the second parameter is the variable to be updated.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现表中的所有作者。变量在调用`PDOStatement::bindColumn()`方法时绑定，该方法期望第一个参数是结果集中的列的基于1的索引或从数据库返回的列名，第二个参数是要更新的变量。
- en: Note that when using bound columns, the `PDOStatement::fetch()` method should
    be called with the `PDO::FETCH_BOUND` mode, or this should be preset with a `PDOStatement::setFetchMode(PDO::FETCH_BOUND)`
    call. Also, the call to the `PDOStatement::bindColumn()` method must be made after
    the call to `PDOStatement::execute()` method so that PDO knows how many columns
    there are in the result set.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当使用绑定列时，应使用`PDO::FETCH_BOUND`模式调用`PDOStatement::fetch()`方法，或者应该在调用`PDOStatement::setFetchMode(PDO::FETCH_BOUND)`之前进行预设。此外，必须在调用`PDOStatement::execute()`方法之后调用`PDOStatement::bindColumn()`方法，以便PDO知道结果集中有多少列。
- en: Let's get back to our library application now and enhance it with some prepared
    statements. Since the only pages that rely on the values supplied by the user
    are *add/edit a book* and *add/edit an author*, we will rewrite the two corresponding
    scripts, `editBook.php` and `editAuthor.php`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到我们的图书馆应用程序，并增强它以使用一些预处理语句。由于仅依赖用户提供的值的页面是*添加/编辑书籍*和*添加/编辑作者*，我们将重写两个相应的脚本，`editBook.php`和`editAuthor.php`。
- en: 'Of course, we will only rewrite those bits of the code that update the database.
    For `editBook.php` these are lines 65 to 102\. I will present these lines here
    for your convenience:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们只会重写更新数据库的代码部分。对于`editBook.php`，这些是第65到102行。我将在这里为您方便起见呈现这些行：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As we can see, the part that constructs the query is very long. With a prepared
    statement, this code snippet can be rewritten as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，构造查询的部分非常长。使用预处理语句，可以将此代码片段重写如下：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We follow the same logic—if we are editing an existing book, we construct an
    `UPDATE` query. If we are adding a new book, then we have to use an `INSERT` query.
    The `$sql` variable will hold the appropriate statement template. In both cases,
    the statement has six positional placeholders, and I intentionally hard-coded
    the book ID into the `UPDATE` query so that we can create and execute the statement
    regardless of the required operation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遵循相同的逻辑 - 如果我们正在编辑现有书籍，我们构建一个`UPDATE`查询。如果我们要添加新书，那么我们必须使用`INSERT`查询。`$sql`变量将保存适当的语句模板。在这两种情况下，语句都有六个位置占位符，我故意将书籍ID硬编码到`UPDATE`查询中，以便我们可以创建并执行语句，而不管所需的操作是什么。
- en: After we have instantiated the statement, we wrap the call to its `execute()`
    method into a *try…catch* block as an exception that may get thrown if the ISBN
    already existed in the database. Upon successful execution of the statement we
    redirect the browser to the books listing page. If the call fails, we alert the
    user with a note that the ISBN is incorrect (or that the book already exists in
    the database).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实例化语句之后，我们将其`execute()`方法的调用包装在*try…catch*块中，因为如果ISBN已经存在于数据库中，可能会抛出异常。在语句成功执行后，我们将浏览器重定向到书籍列表页面。如果调用失败，我们会用一个提示通知用户ISBN不正确（或者书籍已经存在于数据库中）。
- en: You can see that our code is now much shorter. Also, we don't need to quote
    the values as the prepared statement does this for us. Now you can play with this
    a bit and change the databases between MySQL and SQLite in `common.inc.php` to
    see that prepared statements work for both of them. You may also want to rewrite
    this code to use named placeholders instead of positional ones. If you do, remember
    to supply placeholder names in the array passed to the `PDOStatement::execute()`
    method.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们的代码现在要短得多。此外，我们不需要引用值，因为准备好的语句已经为我们做了这个。现在您可以稍微玩弄一下，并在`common.inc.php`中将数据库更改为MySQL和SQLite，以查看准备好的语句是否适用于它们两个。您可能还想重写此代码，以使用命名占位符而不是位置占位符。如果这样做，请记住在传递给`PDOStatement::execute()`方法的数组中提供占位符名称。
- en: 'Now let''s look at the corresponding code block in `editAuthor.php` (lines
    42 to 59):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看`editAuthor.php`中的相应代码块（第42至59行）：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As we don''t expect an exception here, the code is shorter. Now let''s rewrite
    it to use a prepared statement:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不希望在这里出现异常，所以代码更短。现在让我们重写它以使用准备好的语句：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Again, depending on the required operation, we create the SQL template and assign
    it to the `$sql` variable. Then we instantiate the `PDOStatement` object and call
    its `execute` method with the author's details. As our query should never fail
    (except for an unforeseen database failure) we don't expect an exception here
    and redirect to the authors listing pages.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 再次取决于所需的操作，我们创建SQL模板并将其分配给`$sql`变量。然后我们实例化`PDOStatement`对象，并使用作者的详细信息调用其`execute`方法。由于我们的查询不应该失败（除非出现意外的数据库故障），我们不希望在这里出现异常，并重定向到作者列表页面。
- en: Make sure that you test this code with both MySQL and SQLite.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您使用MySQL和SQLite测试此代码。
- en: Working with BLOBs
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用BLOBs
- en: Let's now extend our application so that we can upload the books' cover images
    and display them. Just as with traditional database access, we will use a **BLOB
    field** in the books table for this purpose, as well as a **varchar field** to
    store the image's MIME type, which we will need to supply to the browser along
    with the image data. Also, we will need another script that will fetch the image
    data from the table and pass it to the browser. (We will reference this script
    from the`<img>` tag.).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们扩展我们的应用程序，以便我们可以上传书籍的封面图片并显示它们。与传统的数据库访问一样，我们将在书籍表中使用**BLOB字段**，以及一个**varchar字段**来存储图像的MIME类型，我们需要将其与图像数据一起提供给浏览器。此外，我们还需要另一个脚本，它将从表中获取图像数据并将其传递给浏览器。（我们将从`<img>`标签中引用此脚本。）
- en: Traditionally, we would not care that we are inserting a BLOB column into the
    calls to `mysql_query()` or `sqlite_query()`—we would just make sure that they
    are properly quoted. With PDO, however, things are different. PDO works with BLOB
    columns with the help of streams and prepared statements.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，我们不会在对`mysql_query()`或`sqlite_query()`的调用中插入BLOB列 - 我们只需确保它们被正确引用。但是，使用PDO，情况就不同了。PDO通过流和准备好的语句处理BLOB列。
- en: 'Let''s look at the following example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, we open the file to be inserted with the `fopen()` function
    for reading in the binary mode (so that we don't have problems with newline characters
    across platforms) and then bind the file handle to the statement in the call to
    the `PDOStatement::bindParam()` method specifying the `PDO::PARAM_LOB` flag (so
    that PDO understands that we have bound a file handle rather than an immediate
    value).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们使用`fopen()`函数以二进制模式打开要插入的文件（这样我们就不会在不同平台上遇到换行符的问题），然后在调用`PDOStatement::bindParam()`方法时将文件句柄绑定到语句，并指定`PDO::PARAM_LOB`标志（以便PDO了解我们绑定的是文件句柄而不是立即值）。
- en: In the call to the `PDOStatement::execute()` method, PDO will read the data
    from the file and pass it to the database.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在对`PDOStatement::execute()`方法的调用中，PDO将从文件中读取数据并将其传递给数据库。
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are wondering why PDO works in such a way, a short explanation is that,
    if your BLOB is very large, the query may fail. Normally database servers have
    a setting that limits communication packet size. (You can compare this with `post_max_size`
    PHP setting). If you are passing relatively large string inside an SQL `INSERT`
    or `UPDATE` statement, it may exceed that packet size and the query will fail.
    With streams, PDO ensures that data is sent in smaller packets so that the query
    executes successfully.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想知道为什么PDO以这种方式工作，简短的解释是，如果您的BLOB非常大，查询可能会失败。通常数据库服务器有一个限制通信数据包大小的设置。（您可以将其与`post_max_size`PHP设置进行比较）。如果您在SQL
    `INSERT`或`UPDATE`语句中传递相对较大的字符串，它可能会超过数据包大小，导致查询失败。使用流，PDO确保数据以较小的数据包发送，以便查询成功执行。
- en: 'The BLOBs should also be read with streams. So to retrieve a BLOB column inserted
    in the above example, the following code could be used:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: BLOBs也应该用流来读取。因此，要检索上面示例中插入的BLOB列，可以使用以下代码：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this case, the `$blob` variable will be a stream resource that can be read
    with stream-handling functions. Here we used the `stream_get_contents()` function
    to read all the data into the `$data` variable. If we want to directly return
    the data to the browser (as we will in our application), we could employ the `fpassthru()`
    function.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`$blob`变量将是一个可以使用流处理函数读取的流资源。在这里，我们使用了`stream_get_contents()`函数将所有数据读入`$data`变量中。如果我们想直接将数据返回给浏览器（就像我们在应用程序中将要做的那样），我们可以使用`fpassthru()`函数。
- en: 'As of this writing (PHP version 5.2.3), the returned blob column is not a stream
    but the actual data contained in the column (string). Please refer to PHP bug
    #40913 at [http://bugs.php.net/bug.php?id=40913](http://bugs.php.net/bug.php?id=40913)
    for details. Hence the last line in the above code snippet is not required, the
    `$blob` variable will hold the actual data. The source of showCover.php file below
    treats the returned data as a string rather than a blob, so that the code works
    in current PHP version.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前（PHP版本5.2.3），返回的blob列不是流，而是列中包含的实际数据（字符串）。有关详细信息，请参阅PHP bug＃40913 [http://bugs.php.net/bug.php?id=40913](http://bugs.php.net/bug.php?id=40913)。因此，上述代码片段中的最后一行是不需要的，`$blob`变量将保存实际数据。下面showCover.php文件的源代码将返回的数据视为字符串而不是blob，因此代码可以在当前PHP版本中运行。
- en: 'So, let''s begin with altering our database and adding the new columns to it:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始修改我们的数据库，并向其中添加新的列：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can also execute these queries in the SQLite command line client without
    modifications. Now, let's modify the `editBook.php` file. We will add another
    field to the existing form. This line will allow the user to upload the cover
    image and enhance the form validation to check whether the user has really uploaded
    an image (by examining the MIME type of the uploaded file).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在SQLite命令行客户端中执行这些查询，无需修改。现在，让我们修改`editBook.php`文件。我们将在现有表单中添加另一个字段。这行将允许用户上传封面图片，并增强表单验证以检查用户是否真的上传了一张图片（通过检查上传文件的MIME类型）。
- en: We will also allow the user to modify the book's details without resubmitting
    the cover image file. To achieve this, we will update the cover columns only when
    there has been a successful file upload. So our script logic will use two queries.
    The first one will update or create the book record, and the second will update
    the `coverMime` and `coverImage` columns.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将允许用户在不重新提交封面图片文件的情况下修改书籍的详细信息。为此，我们将仅在成功上传文件时更新封面列。因此，我们的脚本逻辑将使用两个查询。第一个将更新或创建书籍记录，第二个将更新`coverMime`和`coverImage`列。
- en: 'With this in mind, the `editBook.php` file will look like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，`editBook.php`文件将如下所示：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The highlighted parts are the bits that we have added or changed. Now, we need
    to validate our form and the uploaded file (on lines 60 to 73). If there is a
    successful upload, the `$uploadSuccess` boolean variable will be set to `true`,
    and we will use this value later to see whether we need to update the cover columns.
    Since we allow the upload to happen for new books too, we use the `PDO::lastInsertId()`
    method value (on line 100) to get the ID of the newly created books (otherwise
    we just use the `$books['id']` value). If the upload fails, we add a corresponding
    warning to the `$warnings` array and let the existing error logic do its job.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的部分是我们添加或更改的部分。现在，我们需要验证我们的表单和上传的文件（第60到73行）。如果上传成功，`$uploadSuccess`布尔变量将设置为`true`，我们稍后将使用这个值来查看是否需要更新封面列。由于我们也允许新书进行上传，我们使用`PDO::lastInsertId()`方法值（在第100行）来获取新创建书籍的ID（否则我们只使用`$books['id']`值）。如果上传失败，我们将向`$warnings`数组添加相应的警告，并让现有的错误逻辑执行其工作。
- en: 'The actual cover image update happens on lines 105 to 110, using the prepared
    statement and the stream. On our form, see how we add the `multipart/form-data`
    attribute to the form tag on line 140\. It is needed for the file uploads to work.
    Also, the form now has a new input field (lines #182-185) allowing us to select
    and upload a file. The next lines will display the current cover image (if any).
    Note that the`<img>` tag references a new file, `showCover.php`, which we will
    have to create now:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的封面图片更新发生在105到110行，使用了准备好的语句和流。在我们的表单中，看到我们如何在第140行的表单标签上添加了`multipart/form-data`属性。这是文件上传所必需的。此外，表单现在有一个新的输入字段（第182-185行），允许我们选择并上传文件。接下来的行将显示当前的封面图片（如果有的话）。请注意，`<img>`标签引用了一个新文件`showCover.php`，我们现在需要创建它：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now for a new book, the form looks like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于一本新书，表单看起来像这样：
- en: '![Working with BLOBs](graphics/2660_04_01.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![使用BLOBs](graphics/2660_04_01.jpg)'
- en: 'As you can see, there is a new field allowing us to upload the cover image.
    Since a newly created book does not have any cover image, there is no current
    cover image. For a book with a cover image the page will look like the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有一个新字段允许我们上传封面图片。由于新创建的书没有任何封面图片，因此没有当前的封面图片。对于有封面图片的书，页面将如下所示：
- en: '![Working with BLOBs](graphics/2660_04_02.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![使用BLOBs](graphics/2660_04_02.jpg)'
- en: You can now play with the application to see how the form works without uploading
    the image. (It should preserve the old image if any.) You can also see how it
    processes files that are too large or non-image files. (It should display a warning
    above the form.) Make sure that you switch between databases so that we are database-independent.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用应用程序来查看表单在不上传图片的情况下的工作方式。（如果有的话，它应该保留旧图片。）您还可以看到它如何处理过大或非图片文件。（它应该在表单上方显示警告。）确保在不同数据库之间切换，以便我们是数据库无关的。
- en: 'As the final touch to the cover images, we can reformat the books listing page,
    `books.php`, so that the cover images are displayed there too. I will present
    the new code here with the changed part highlighted:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为封面图片的最后一步，我们可以重新格式化书籍列表页面`books.php`，以便在那里也显示封面图片。我将在这里呈现新代码，并突出显示更改的部分：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The first cell will contain the image (if any). The author and title are now
    rendered in the same cell to save table width. Now the Books listing should look
    something like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个单元格将包含图片（如果有的话）。现在作者和标题都在同一个单元格中呈现，以节省表格宽度。现在图书列表应该看起来像这样：
- en: '![Working with BLOBs](graphics/2660_04_03.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![使用BLOBs](graphics/2660_04_03.jpg)'
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter introduced us to a new concept: Prepared Statements. We have seen
    how they simplify our queries and further protect us from SQL syntax errors and
    code vulnerabilities. We also took a look at how to work with BLOBs using streams
    so that we don''t run the risk of query failures. Our application can now be used
    to upload and show cover images for the books in the database.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向我们介绍了一个新概念：准备语句。我们已经看到它们如何简化我们的查询，并进一步保护我们免受SQL语法错误和代码漏洞的影响。我们还看了如何使用流处理BLOBs，以便我们不会出现查询失败的风险。我们的应用现在可以用于上传和显示数据库中书籍的封面图片。
- en: 'In the next chapter, we shall see how to determine the number of rows in a
    result set, which is necessary to paginate long lists of items. (The most common
    example is a search engine that breaks the result list into 10 results per page.)
    Also, we will familiarize ourselves with a new concept: scrollable cursors that
    will allow us to fetch a subset of rows from a result set starting at a specified
    position.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何确定结果集中的行数，这对于对长列表进行分页是必要的。（最常见的例子是搜索引擎将结果列表分成每页10个结果。）此外，我们将熟悉一个新概念：可滚动的游标，它将允许我们从指定位置开始获取结果集的子集行。
