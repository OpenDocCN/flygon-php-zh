- en: Dealing with the Angular Router and Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Angular路由和组件
- en: 'We have come to one of the most important parts of **Single Page Applications**
    (**SPAs**): the use of routes. As you saw in [Chapter 3](55bf9899-fbc7-458e-b7f5-22be56951fe6.xhtml),
    *Understanding the Core Concepts of Angular 6*, the Angular framework provides
    a powerful tool for dealing with application routing: @ angular/router dependency.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来到了**单页应用程序**（**SPA**）中最重要的部分之一：使用路由。正如您在[第3章](55bf9899-fbc7-458e-b7f5-22be56951fe6.xhtml)中所看到的，*理解Angular
    6的核心概念*，Angular框架提供了一个强大的工具来处理应用程序路由：@ angular/router依赖项。
- en: In the next few sections, you'll learn how to use some of these features, such
    as child-views, and how to create master detail pages. In addition, we will start
    building the application's visual field, filling in the templates with HTML markup.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，您将学习如何使用其中一些功能，例如子视图，以及如何创建主细节页面。此外，我们将开始构建应用程序的视觉字段，填充模板与HTML标记。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Preparing the baseline code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备基线代码
- en: Adding components to the application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向应用程序添加组件
- en: Dealing with Angular routes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理Angular路由
- en: Configuring child routes for detail pages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为详细页面配置子路由
- en: Building frontend views
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建前端视图
- en: Preparing the baseline code
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备基线代码
- en: 'Now, we need to prepare our baseline code, a process very similar to that under
    previous chapters. Let''s follow these steps:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要准备我们的基线代码，这个过程与之前的章节非常相似。让我们按照以下步骤进行：
- en: Copy all of the content from the `chapter-08` folder.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`chapter-08`文件夹中的所有内容。
- en: Rename the folder to `chapter-08`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件夹重命名为`chapter-08`。
- en: Delete the `storage-db` folder.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`storage-db`文件夹。
- en: Now, let's make some changes to the `docker-compose.yml` file, to fit a new
    database and server containers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`docker-compose.yml`文件进行一些更改，以适应新的数据库和服务器容器。
- en: 'Open `docker-compose.yml` and replace the contents with the following code:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`docker-compose.yml`并用以下代码替换内容：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that we changed the container names, the database, and the MySQL user:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们更改了容器名称、数据库和MySQL用户：
- en: '`container_name: chapter-08-mysql`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-08-mysql`'
- en: '`container_name: chapter-08-webserver`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-08-webserver`'
- en: '`container_name: chapter-08-php-fpm`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-08-php-fpm`'
- en: '`MYSQL_DATABASE=chapter-08`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_DATABASE=chapter-08`'
- en: '`MYSQL_USER=chapter-08`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_USER=chapter-08`'
- en: 'Add the changes that we made to the Git source control. Open your Terminal
    window and type the following command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们所做的更改添加到Git源代码控制中。打开您的终端窗口，输入以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Adding components to our application
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的应用程序添加组件
- en: Now, we are going to continue to add some more components to our application.
    We must remember that, in the application summary, we defined a page for the bikes
    list that refers to the `api/bikes` endpoint of our API; also, we will have a
    bike details page that refers to the `api/bikes/id `   endpoint, containing the
    details of the selected bike. And, we will do the same to the `api/builders` endpoint.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续向我们的应用程序添加一些组件。我们必须记住，在应用程序摘要中，我们定义了一个页面，用于自行车列表，该页面指向我们API的`api/bikes`端点；此外，我们将有一个自行车详细信息页面，该页面指向`api/bikes/id`端点，包含所选自行车的详细信息。而且，我们将对`api/builders`端点做同样的处理。
- en: 'So, let''s start creating the components:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始创建组件：
- en: 'Open your Terminal window inside `./Client/src/app`, and type the following
    command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/src/app`中打开您的终端窗口，输入以下命令：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At the end of the previous command, you will see the following structure, inside
    the `bikes` modules:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令的末尾，您将看到`bikes`模块中的以下结构：
- en: '![](assets/a86529d5-b1bd-40f2-8754-81253a80502b.png)Bikes module structure'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a86529d5-b1bd-40f2-8754-81253a80502b.png)自行车模块结构'
- en: The preceding command will create a root `bikes` folder to store every module
    related to the `bikes` endpoint; this pattern allows us to have a modular application,
    where each new feature (for example, `bikes-detail` or `bike-list`) will be organized
    in the same way.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个根`bikes`文件夹，用于存储与`bikes`端点相关的每个模块；这种模式允许我们拥有一个模块化的应用程序，其中每个新功能（例如`bikes-detail`或`bike-list`）都将以相同的方式组织起来。
- en: For example, we can add a new inventory module that will be created inside its
    own module (`inventory.module.ts`) and stored inside the `bikes` module directory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以添加一个新的库存模块，该模块将在其自己的模块（`inventory.module.ts`）中创建，并存储在`bikes`模块目录中。
- en: Consider this a good practice, and keep your modules and components organized
    in this way; avoid grouping more than one component in the root of the same folder.
    This prevents your code from turning into spaghetti code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将此视为一种良好的实践，并以这种方式组织您的模块和组件；避免将多个组件分组在同一文件夹的根目录中。这可以防止您的代码变成意大利面代码。
- en: 'Open your Terminal window inside `./Client/src/app`, and type the following
    command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/src/app`中打开您的终端窗口，输入以下命令：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, you will see the following result for the `builders` module:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将看到`builders`模块的以下结果：
- en: '![](assets/e7536e17-72e0-41b3-8e11-05e841199fdb.png)Builders folder structure'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e7536e17-72e0-41b3-8e11-05e841199fdb.png)构建者文件夹结构'
- en: 'Note that the `builders` module (at `./Client/src/app/pages/builders/builders.module.ts`)
    was updated with the new Builder-detail component added to the declarations property,
    as you can see in the following highlighted code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`builders`模块（位于`./Client/src/app/pages/builders/builders.module.ts`）已更新，新添加了Builder-detail组件到declarations属性中，如下面的突出显示代码所示：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The best part of this is that the Angular CLI is clever enough to add the newly
    created component to the module it belongs to. The same was done when we created
    the `bike-detail` component.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的部分是，Angular CLI足够聪明，可以将新创建的组件添加到其所属的模块中。当我们创建`bike-detail`组件时也是这样做的。
- en: Dealing with Angular routes
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Angular路由
- en: At this point, we will continue with the development of our sample application.
    In the previous chapter, we created some Angular components for the frontend application,
    but before we write the contents of each one of them, we are going to create some
    routes.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将继续开发我们的示例应用程序。在上一章中，我们为前端应用程序创建了一些Angular组件，但在编写每个组件的内容之前，我们将创建一些路由。
- en: Before we dive into the code, it’s important for you to understand how the Angular
    router works.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入代码之前，你需要了解Angular路由器的工作原理。
- en: 'When you click on a link or go to a URL (for example, `http://localhost:4200/bikes`),
    the Angular router:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击链接或转到URL（例如`http://localhost:4200/bikes`）时，Angular路由器：
- en: Checks the browser URL.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查浏览器URL。
- en: Finds which router state corresponds to the URL.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找与URL对应的路由器状态。
- en: Applies route guards, if they were defined in the router state.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用路由守卫，如果它们在路由器状态中被定义。
- en: Activates the respective Angular component to display the page.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活相应的Angular组件以显示页面。
- en: 'Also, each route can contain the following properties:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个路由可以包含以下属性：
- en: '**path**: String; the path to match the URL'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**path**：字符串；匹配URL的路径'
- en: '**patchMatch**: String; how to match the URL'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**patchMatch**：字符串；如何匹配URL'
- en: '**component**: Class reference; component to activate when the route is activated'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**component**：类引用；当路由被激活时要激活的组件'
- en: '**redirectTo**: String; URL to redirect to when this route is activated'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**redirectTo**：字符串；当激活此路由时要重定向到的URL'
- en: '**data**: Static data to assign to the route'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**data**：要分配给路由的静态数据'
- en: '**resolve**: Dynamic data to resolve and merge with the data, when resolved'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**resolve**：要解析和合并到数据中的动态数据，当解析时'
- en: '**children**: Child routes'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**children**：子路由'
- en: In the next sections, we will see two methods for creating routes for our application,
    one of them using children routes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到两种为我们的应用程序创建路由的方法，其中一种使用子路由。
- en: You can read more about routes in the official documentation at [https://angular.io/guide/router](https://angular.io/guide/router).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在官方文档的[https://angular.io/guide/router](https://angular.io/guide/router)中了解更多关于路由的信息。
- en: Creating authentication routes
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建身份验证路由
- en: 'Let''s take a look at the current folder structure of our authentication module:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们身份验证模块的当前文件夹结构：
- en: '![](assets/ef1b4d55-2a3d-41ac-becc-b7111c4ab23d.png)Auth module folder structure'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/ef1b4d55-2a3d-41ac-becc-b7111c4ab23d.png)Auth模块文件夹结构'
- en: In the preceding screenshot, note that we created only one route file inside the
    root of the `auth` folder; we did not include any route files in any of the other
    folders/modules inside the `auth` folder, such as `login`, `register`, and `logout`.
    This is because we will use the `auth-routing.module.ts` file to create all of
    the routes related to authentication.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，请注意我们只在`auth`文件夹的根目录中创建了一个路由文件；我们没有在`auth`文件夹内的任何其他文件夹/模块中包含任何路由文件，比如`login`，`register`和`logout`。这是因为我们将使用`auth-routing.module.ts`文件来创建与身份验证相关的所有路由。
- en: 'Now, we will create the authentication routes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建身份验证路由：
- en: 'Open the **`auth-routing.module.ts`** file inside the `./Client/src/app/pages/auth`
    directory, and add the following block of code right after `Router import`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth`目录中的**`auth-routing.module.ts`**文件，并在`Router
    import`之后添加以下代码块：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, add the following code inside the `routes`constant:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`routes`常量内添加以下代码：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, let's work on the other routes for the application, starting with the `home`
    module.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始处理应用程序的其他路由，从`home`模块开始。
- en: Creating home routing
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建home路由
- en: 'Now, we will create the `home` routes, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建`home`路由，如下所示：
- en: 'Open `./Client/src/app/pages/home/home-routing.module.ts` and `import` the
    component:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/home/home-routing.module.ts`并`import`组件：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open `./Client/src/app/pages/home/home-routing.module.ts` and add the following
    route object inside the `routes` constant:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/home/home-routing.module.ts`并在`routes`常量内添加以下路由对象：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As our home page is very simple, it contains only one route; later on, in other
    modules, you will see more complex routes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的主页非常简单，只包含一个路由；稍后在其他模块中，你将看到更复杂的路由。
- en: Configuring child routes for details pages
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置详细页面的子路由
- en: We will use another approach to create the builders and bikes routes in Angular.
    We will use child routes, also called nested views.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用另一种方法来在Angular中创建builders和bikes路由。我们将使用子路由，也称为嵌套视图。
- en: When you are using multiple children, it is pretty important to be careful with
    the route object order.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用多个子路由时，非常重要的是要小心处理路由对象的顺序。
- en: When the router receives a URL, it follows the contents in order, starting with
    the first element of the array; if it finds a match to the complete URL, it stops
    and instantiates the corresponding component(s).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当路由器接收到URL时，它会按顺序遵循内容，从数组的第一个元素开始；如果找到与完整URL匹配的内容，它将停止并实例化相应的组件。
- en: In the next sections, you will see how to implement a well-known UI pattern
    called **master detail page**. We will make another component to help us organize
    the folder structure.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将看到如何实现一个名为**master detail page**的著名UI模式。我们将创建另一个组件来帮助我们组织文件夹结构。
- en: Adding builders child routes
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加builders子路由
- en: 'Let''s create the child routes for the following views in our frontend application:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们前端应用程序中的以下视图创建子路由：
- en: '`builders-list`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`builders-list`'
- en: '`builders-detail`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`builders-detail`'
- en: 'Open `./Client/src/app/pages/builders/builders-routing.module.ts` and `import`
    the component:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/builders/builders-routing.module.ts`并`import`组件：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Still in `./Client/src/app/pages/builders/builders-routing.module.ts`, add
    the following `routes` object inside the `routes` constant:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`./Client/src/app/pages/builders/builders-routing.module.ts`中，在`routes`常量内添加以下`routes`对象：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding code snippet, you will notice two things that are different:
    one is that we are using a `children` route array property, and the other is a
    new component, called `BuilderListComponent`. So, let''s create this new component.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，你会注意到两件不同的事情：一是我们使用了`children`路由数组属性，另一个是一个新的组件，名为`BuilderListComponent`。所以，让我们创建这个新组件。
- en: 'Inside **`./Client/src/app`**, type the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**`./Client/src/app`**内，输入以下命令：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You will see the following structure in the `builders` module:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在`builders`模块中看到以下结构：
- en: '![](assets/bb4f792e-1343-4ecf-ae04-882a97be677e.png)Builders module with builder-list
    module'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bb4f792e-1343-4ecf-ae04-882a97be677e.png)带有builder-list模块的Builders模块'
- en: Adding bikers child routes
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加bikers子路由
- en: 'Let''s create the child routes for the following views in our frontend application:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们前端应用程序中的以下视图创建子路由：
- en: '`bike-list`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bike-list`'
- en: '`bike-detail`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bike-detail`'
- en: 'Now we will import the components at the top of file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在文件顶部导入组件：
- en: 'Open `./Client/src/app/pages/bikes/bikes-routing.module.ts` and `import` the
    component:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/bikes-routing.module.ts`并`import`组件：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Still in `./Client/src/app/pages/bikes/bikes-routing.module.ts`, add the following
    route object inside the `routes` constant:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`./Client/src/app/pages/bikes/bikes-routing.module.ts`中，在`routes`常量内添加以下路由对象：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, it is time to create the new `BikeListComponent`, as we did previously,
    with `Builders`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建新的`BikeListComponent`了，就像我们之前用`Builders`一样。
- en: 'Inside `./Client/src/app`, type the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/src/app`中，输入以下命令：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will see the following structure in the `bikes` module:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在`bikes`模块中看到以下结构：
- en: '![](assets/2174a330-819c-497e-a2ba-e12e2698afa0.png)Bikes module with bike-list
    module'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2174a330-819c-497e-a2ba-e12e2698afa0.png)带有bike-list模块的bikes模块'
- en: Refactoring app.component.html
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构app.component.html
- en: As we discussed previously, let's now make our views a little more attractive.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，让我们现在让我们的视图更具吸引力。
- en: Let's add our navigation component. For now, we will not put content in this
    file; we'll do that later on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加我们的导航组件。现在，我们不会在这个文件中放内容；我们以后会做。
- en: 'Open `./Client/src/app/app.component.html` and replace the code with the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/app.component.html`并用以下代码替换原代码：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that the preceding code doesn't have any content right now – just a simple
    markup for footer notes. In the next section, you will see how to add something
    more interesting.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述代码目前没有任何内容 - 只是页脚注释的简单标记。在下一节中，你将看到如何添加更有趣的内容。
- en: Building frontend views
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建前端视图
- en: 'Most of the components that we create with Angular receive an HTML template,
    as you saw in previous chapters:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数我们用Angular创建的组件都会有一个HTML模板，就像你在之前的章节中看到的那样：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This ability that the framework has – to create the component connected to its
    respective view – is fantastic. It has that feature out of the box. It also includes
    a style sheet totally independent of the rest of the application, as you can see
    in the previous code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 框架具有创建与其相应视图连接的组件的能力是很棒的。它具有这个功能。它还包括一个完全独立于应用程序其余部分的样式表，正如你在前面的代码中所看到的。
- en: In the next step, we will add the HTML necessary to give our application a pleasant
    look, as we suggested in previous chapters.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将添加必要的HTML来让我们的应用程序看起来更加愉快，就像我们在之前的章节中建议的那样。
- en: Creating the navigation component
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建导航组件
- en: 'Open `./Client/src/app/layout/nav/nav.component.html` and replace the paragraph
    with the `nav works` string with the following code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/layout/nav/nav.component.html`并用以下代码替换段落中的`nav works`字符串：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'There are two important things about the preceding code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 关于上述代码有两个重要的事情：
- en: We are using the `routerLink` property; later in this chapter, you will see
    how to use it.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用`routerLink`属性；在本章的后面部分，你将看到如何使用它。
- en: We are setting the title page with the `<title>` tag, using the `Title` service,
    a built-in service from Angular. As we are building an SPA, we need to use this
    resource to give a title to our views; without it, all of the pages in our application
    will have the same client name. Remember, the `Title` tag was set when we first
    created the application with the Angular CLI, and it will receive the application
    name that we defined.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用`Title`服务来使用`<title>`标签设置页面标题，这是Angular内置的服务。由于我们正在构建一个SPA，我们需要使用这个资源来给我们的视图一个标题；如果没有它，我们应用程序中的所有页面都将具有相同的客户端名称。请记住，当我们首次使用Angular
    CLI创建应用程序时，`Title`标签已经设置好了，并且将接收我们定义的应用程序名称。
- en: 'Let''s update the `<title>` tag, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新`<title>`标签，如下所示：
- en: 'Open `./Client/src/app/layout/nav/nav.component.ts`and add the following code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/layout/nav/nav.component.ts`并添加以下代码：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open `./Client/src/app/app.module.ts` and add the `Title` import to the top
    of the file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/app.module.ts`并将`Title`导入添加到文件顶部：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, add the `Title` provider to the `@ngModules` provider:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`Title`提供者添加到`@ngModules`提供者中：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'So, if we check the browser at the same URL again (`http://localhost:4200/`),
    we can see a list of links, and we can navigate through them. The result will
    be similar to the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们再次在浏览器中检查相同的URL（`http://localhost:4200/`），我们可以看到一个链接列表，并且我们可以通过它们进行导航。结果将类似于以下截图：
- en: '![](assets/49f889df-1199-4cf6-b5d8-993499dfbc3b.png)Navigation links'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/49f889df-1199-4cf6-b5d8-993499dfbc3b.png)导航链接'
- en: Don't worry about the class names in our markup; later on in the book, we will
    add some style sheets, including some Bootstrap components.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心我们标记中的类名；在本书的后面，我们将添加一些样式表，包括一些Bootstrap组件。
- en: Creating the home view and template
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建home视图和模板
- en: 'Open `./Client/src/app/pages/home/home.component.html` and replace the paragraph
    with the `home works` string with the following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/home/home.component.html`并用以下代码替换段落中的`home works`字符串：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Creating the bikes router-outlet
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建bikes router-outlet
- en: 'Open `./Client/src/app/pages/bikes/bikes.component.html`and replace the paragraph
    with the `bikes works` string with the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/bikes.component.html`并用以下代码替换段落中的`bikes works`字符串：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Creating the bike-list view and template
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建bike-list视图和模板
- en: 'Open `./Client/src/app/pages/bikes/bike-list/bike-list.component.html` and
    replace the paragraph with the `bike-list` works string with the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/bike-list/bike-list.component.html`并用以下代码替换段落中的`bike-list`
    works字符串：
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Creating the bike-detail view and template
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建bike-detail视图和模板
- en: 'Open `./Client/src/app/pages/bikes/bike-detail/bike-detail.component.html`
    and replace the paragraph with the `bike-detail` works string with the following
    code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/bike-detail/bike-detail.component.html`并用以下代码替换段落中的`bike-detail`
    works字符串：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Creating the builders router-outlet
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建构建器router-outlet
- en: 'Open `./Client/src/app/pages/builders/builders.component.html`and replace the
    paragraph with the `builders` works string with the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/builders/builders.component.html`并用以下代码替换带有`builders`
    works字符串的段落：
- en: '[PRE25]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Creating the builder-list view and template
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建构建者列表视图和模板
- en: 'Open `./Client/src/app/pages/builders/builder-list/builder-list.component.html` and
    replace the paragraph with the following code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/builders/builder-list/builder-list.component.html`并用以下代码替换带有以下代码的段落：
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Creating the builder-detail view and template
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建构建者详情视图和模板
- en: 'Open `./Client/src/app/pages/builders/builder-detail/builder-detail.component.html`
    and replace the paragraph with `builder-detail` works string with the following
    code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/builders/builder-detail/builder-detail.component.html`并用以下代码替换带有`builder-detail`
    works字符串的段落：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Creating the login view and template
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建登录视图和模板
- en: 'Open `./Client/src/app/pages/auth/login/login.component.html` and replace the
    paragraph with the `login` works string with the following code:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/login/login.component.html`并用以下代码替换带有`login`
    works字符串的段落：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Creating the register view and template
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建注册视图和模板
- en: 'Open `./Client/src/app/pages/auth/register/register.component.html` and replace
    the paragraph with the `register` works string with the following code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/register/register.component.html`并用以下代码替换带有`register`
    works字符串的段落：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We now have the necessary code in our templates. However, we have not applied
    any style sheets yet. Don't worry about it at the moment; in the next sections,
    you'll see some more important points in the application, before we apply our
    style sheet. Let's take a look at what we have so far.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在模板中有了必要的代码。但是目前不用担心样式表；在接下来的章节中，您将看到应用样式表之前应用的一些更重要的点。让我们来看看我们目前有什么。
- en: Testing routes and views
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试路由和视图
- en: 'Let''s start the application in development mode and check some URLs, to see
    the results of our routes and templates:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以开发模式启动应用程序并检查一些URL，以查看我们路由和模板的结果：
- en: 'Open your Terminal window inside the `./Client` folder and type the following
    command:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client`文件夹中打开您的终端窗口，然后输入以下命令：
- en: '[PRE30]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Open your default browser, and go to `http://localhost:4200/bikes/1`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的默认浏览器，然后转到`http://localhost:4200/bikes/1`。
- en: 'You will see a result very similar to the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个非常类似于以下截图的结果：
- en: '![](assets/3eb62e63-740a-465f-ab6b-a6b9050dcac2.png)Bike detail page'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/3eb62e63-740a-465f-ab6b-a6b9050dcac2.png)自行车详情页面'
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You have come to the end of another chapter. In this chapter, you learned how
    to create additional components in modules, such as the `bikes` module. You added
    some routes using the Angular router, and learned how to use child routes. In
    addition, you learned how to create a navigation component and update the `<title>`
    tag of your pages, using an Angular default service.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经完成了另一章的学习。在这一章中，您学会了如何在模块中创建额外的组件，比如`bikes`模块。您使用了Angular路由添加了一些路由，并学会了如何使用子路由。此外，您还学会了如何创建导航组件并使用Angular默认服务更新页面的`<title>`标签。
