["```php\n{ \n  \"autoload\": { \n    \"psr-4\": { \n      \"IcyApril\\\\ChapterOne\": \"src/\" \n    } \n  } \n} \n\n```", "```php\n{ \n  \"autoload\": { \n    \"psr-4\": { \n      \"IcyApril\\\\ChapterOne\": \"src/\" \n    } \n  }, \n  \"require\": { \n    \"guzzlehttp/guzzle\": \"^6.1\" \n  } \n} \n\n```", "```php\n{ \n  \"autoload\": { \n    \"psr-4\": { \n      \"IcyApril\\\\ChapterTwo\": \"src/\" \n    } \n  } \n} \n\n```", "```php\n{ \n  \"autoload\": { \n    \"psr-4\": { \n      \"IcyApril\\\\ChapterOne\": \"src/\" \n    } \n  }, \n  \"require\": { \n    \"IcyApril/my-private-repo\": \"dev-master\" \n  }, \n  \"repositories\": [ \n    { \n      \"type\": \"vcs\", \n      \"url\": \"git@bitbucket.org:IcyApril/my-private-repo.git\" \n    } \n  ] \n} \n\n```", "```php\n{ \n  \"autoload\": { \n    \"psr-4\": { \n      \"IcyApril\\\\ChapterOne\": \"src/\" \n    } \n  }, \n  \"require\": { \n    \"IcyApril/myLibrary\": \"@dev\" \n  }, \n  \"repositories\": [ \n    { \n      \"type\": \"vcs\", \n      \"url\": \"http://svn.example.com/path/to/myLibrary\" \n    } \n  ] \n} \n\n```", "```php\n{ \n  \"autoload\": { \n    \"psr-4\": { \n      \"IcyApril\\\\ChapterOne\": \"src/\" \n    } \n  }, \n  \"require\": { \n    \"pear-pear2.php.net/PEAR2_Text_Markdown\": \"*\", \n    \"pear-pear2/PEAR2_HTTP_Request\": \"*\" \n  }, \n  \"repositories\": [ \n    { \n      \"type\": \"pear\", \n      \"url\": \"https://pear2.php.net\" \n    } \n  ] \n} \n\n```", "```php\n<?php \nclass God \n{ \n  public function getTime(): int \n  { \n    return time(); \n  } \n\n  public function getYesterdayDate(): string \n  { \n    return date(\"F j, Y\", time() - 60 * 60 * 24); \n  } \n\n  public function getDaysInMonth(): int \n  { \n    return cal_days_in_month(CAL_GREGORIAN, date('m'), date('Y')); \n  } \n\n  public function isCacheWritable(): bool \n  { \n    return is_writable(CACHE_FILE); \n  } \n\n  public function writeToCache($data): bool \n  { \n    return (file_put_contents(CACHE_FILE, $data) !== false); \n  } \n\n  public function whatIsThisClass(): string \n  { \n    return \"Pure technical debt in the form of a God Class.\"; \n  } \n} \n\n```", "```php\n<?php \n\nclass Watch \n{ \n  public function getTime(): int \n  { \n    return time(); \n  } \n\n  public function getYesterdayDate(): string \n  { \n    return date(\"F j, Y\", time() - 60 * 60 * 24); \n  } \n\n  public function getDaysInMonth(): int \n  { \n    return cal_days_in_month(CAL_GREGORIAN, date('m'), date('Y')); \n  } \n} \n\n```", "```php\n<?php \nclass CacheManager \n{ \n  public function isCacheWritable(): bool \n  { \n    return is_writable(CACHE_FILE); \n  } \n\n  public function writeToCache($data): bool \n  { \n    return (file_put_contents(CACHE_FILE, $data) !== false); \n  } \n} \n\n```", "```php\n**composer require vlucas/phpdotenv**\n\n```", "```php\n<?php \n\nclass Singleton \n{ \n\n  private static $instance; \n\n  public static function getInstance() \n  { \n    if (null === static::$instance) { \n      static::$instance = new static(); \n    } \n\n    return static::$instance; \n  } \n\n  protected function __construct() \n  { \n  } \n\n  private function __clone() \n  { \n  } \n\n  private function __wakeup() \n  { \n  } \n} \n\n```", "```php\n**$order = new Transaction('1234 5678 9012 3456', 26);**\n\n```", "```php\n**$order = new Transaction($clientCreditCard, $client);**\n\n```", "```php\n**sudo apt-get install monit**\n\n```", "```php\n**sudo nano /etc/monit/monitrc**\n\n```", "```php\n**monitmonit status**\n\n```", "```php\n<VirtualHost *:80> \n    ServerName test.local \n    DocumentRoot /var/www/html/ \n    ProxyPass /api http://api.local \n    ProxyPassReverse /api http://api.local \n</VirtualHost> \n\n```", "```php\n<?php \n\nnamespace Pheanstalk; \n\ninterface PheanstalkInterface \n{ \n    const DEFAULT_PORT = 11300; \n    const DEFAULT_DELAY = 0; \n    const DEFAULT_PRIORITY = 1024; \n    const DEFAULT_TTR = 60; \n    const DEFAULT_TUBE = 'default'; \n\n    public function setConnection(Connection $connection); \n\n    public function getConnection(); \n\n    public function bury($job, $priority = self::DEFAULT_PRIORITY); \n\n    public function delete($job); \n\n    public function ignore($tube); \n\n    public function kick($max); \n\n    public function kickJob($job); \n\n    public function listTubes(); \n\n    public function listTubesWatched($askServer = false); \n\n    public function listTubeUsed($askServer = false); \n\n    public function pauseTube($tube, $delay); \n\n    public function resumeTube($tube); \n\n    public function peek($jobId); \n\n    public function peekReady($tube = null); \n\n    public function peekDelayed($tube = null); \n\n    public function peekBuried($tube = null); \n\n    public function put($data, $priority = self::DEFAULT_PRIORITY, $delay = self::DEFAULT_DELAY, $ttr = self::DEFAULT_TTR); \n\n    public function putInTube($tube, $data, $priority = self::DEFAULT_PRIORITY, $delay = self::DEFAULT_DELAY, $ttr = self::DEFAULT_TTR); \n\n    public function release($job, $priority = self::DEFAULT_PRIORITY, $delay = self::DEFAULT_DELAY); \n\n    public function reserve($timeout = null); \n\n    public function reserveFromTube($tube, $timeout = null); \n\n    public function statsJob($job); \n\n    public function statsTube($tube); \n\n    public function stats(); \n\n    public function touch($job); \n\n    public function useTube($tube); \n\n    public function watch($tube); \n\n    public function watchOnly($tube); \n} \n\n```", "```php\n<?php \n\n$isAdmin = false; \nextract($_GET); \n\nif ($isAdmin === true) { \n  echo \"Hey \".$name.\"; here, have some secret information!\"; \n} \n\n```", "```php\n<?php \n\n$isAdmin = false; \n\nif ($isAdmin === true) { \n    echo \"Hey \".htmlspecialchars($_GET['name']).\"; here, have some secret information!\"; \n} \n\n```", "```php\n<?php \n\nclass BadCar \n{ \n  private $started = false; \n  private $speed = 0; \n\n  private $topSpeed = 125; \n\n  /** \n   * Starts car. \n   * @return bool \n   */ \n  public function startCar(): bool \n  { \n    $this->started = true; \n\n    return $this->started; \n  } \n\n  /** \n   * Changes speed, increments by 1 if $accelerate is true, else decrease by 1\\. \n   * @param $accelerate \n   * @return bool \n   * @throws Exception \n   */ \n  public function changeSpeed(bool $accelerate): bool \n  { \n    if ($this->started !== true) { \n      throw new Exception('Car not started.'); \n    } \n\n    if ($accelerate == true) { \n      if ($this->speed > $this->topSpeed) { \n        return false; \n      } else { \n        $this->speed++; \n        return true; \n      } \n    } else { \n      if ($this->speed <= 0) { \n        return false; \n      } else { \n        $this->speed--; \n        return true; \n      } \n    } \n  } \n\n  /** \n   * Stops car. \n   * @return bool \n   * @throws Exception \n   */ \n  public function stopCar(): bool \n  { \n    if ($this->started !== true) { \n      throw new Exception('Car not started.'); \n    } \n\n    $this->started = false; \n\n    return true; \n  } \n} \n\n```", "```php\n<?php \nclass GoodCar \n{ \n  private $started = false; \n  private $speed = 0; \n\n  private $topSpeed = 125; \n\n  /** \n   * Starts car. \n   * @return bool \n   */ \n  public function startCar(): bool \n  { \n    $this->started = true; \n\n    return $this->started; \n  } \n\n  /** \n   * Changes speed, increments by 1 if $accelerate is true, else decrease by 1\\. \n   * @param bool $accelerate \n   * @return bool \n   */ \n  public function changeSpeed(bool $accelerate): bool \n  { \n    if ($this->started !== true) { \n      $this->startCar(); \n    } \n\n    if ($accelerate == true) { \n      if ($this->speed > $this->topSpeed) { \n        return false; \n      } else { \n        $this->speed++; \n        return true; \n      } \n    } else { \n      if ($this->speed <= 0) { \n        return false; \n      } else { \n        $this->speed--; \n        return true; \n      } \n    } \n  } \n\n  /** \n   * Stops car. \n   * @return bool \n   */ \n  public function stopCar(): bool \n  { \n    if ($this->started !== true) { \n      return false; \n    } \n\n    $this->started = false; \n\n    return true; \n  } \n} \n\n```", "```php\n{ \n  \"autoload\": { \n    \"psr-4\": { \n      \"IcyApril\\\\Example\": \"src/\" \n    } \n  }, \n  \"require\": { \n    \"illuminate/database\": \"*\", \n **\"phpunit/phpunit\": \"*\",** \n    \"robmorgan/phinx\": \"*\" \n  } \n} \n\n```", "```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<phpunit colors=\"true\" bootstrap=\"./vendor/autoload.php\"> \n  <testsuites> \n    <testsuite name=\"Application Test Suite\"> \n      <directory>./tests/</directory> \n    </testsuite> \n  </testsuites> \n</phpunit> \n\n```", "```php\n<?php \nclass App extends PHPUnit_Framework_TestCase \n{ \n  public function testApp() \n  { \n$this->assertTrue(true); \n  } \n} \n\n```", "```php\n<?php \nclass TaxiMeter \n{ \n  const MIN_RATE = 2.50; \n  const secondsInDay = 60 * 60 * 24; \n  const MILE_RATE = 0.2; \n\n  private $timeOfDay; \n  private $baseRate; \n  private $miles; \n  private $dob; \n\n  /** \n   * TaxiMeter constructor. \n   * @param int $timeOfDay \n   * @param float $baseRate \n   * @param string $driverDateOfBirth \n   * @throws Exception \n   */ \n  public function __construct(int $timeOfDay, float $baseRate, string $driverDateOfBirth) \n  { \n    if ($timeOfDay > self::SECONDS_IN_DAY) { \n      throw new Exception('There can only be ' . self::SECONDS_IN_DAY . ' seconds in a day.'); \n    } else if ($timeOfDay < 0) { \n      throw new Exception('Value cannot be negative.'); \n    } else { \n      $this->timeOfDay = $timeOfDay; \n    } \n\n    if ($baseRate < self::MIN_RATE) { \n      throw new Exception('Base rate below minimum.'); \n    } else { \n      $this->baseRate = $baseRate; \n    } \n\n    $dateArr = explode('/', $driverDateOfBirth); \n    if (count($dateArr) == 3) { \n      if ((checkdate($dateArr[0], $dateArr[1], $dateArr[2])) !== true) { \n        throw new Exception('Invalid date, please use mm/dd/yyyy.'); \n      } \n    } else { \n      throw new Exception('Invalid date formatting, please use simple mm/dd/yyyy.'); \n    } \n    $this->dob = $driverDateOfBirth; \n\n    $this->miles = 0; \n\n  } \n\n  /** \n   * @param int $miles \n   * @return bool \n   */ \n  public function addMilage(int $miles): bool \n  { \n    $this->miles += $miles; \n    return true; \n  } \n\n  /** \n   * @return float \n   * @throws Exception \n   */ \n  public function getRate(): float \n  { \n    $dynamicRate = $this->miles * self::MILE_RATE; \n\n    $totalRate = $dynamicRate + $this->baseRate; \n\n    if (is_numeric($totalRate)) { \n      return $totalRate; \n    } else { \n      throw new Exception('Invalid rate output.'); \n    } \n  } \n} \n\n```", "```php\n<?php \n\nclass TaxiMeter \n{ \n  const MIN_RATE = 2.50; \n  const SECONDS_IN_DAY = 60 * 60 * 24; \n  const MILE_RATE = 0.2; \n\n  private $timeOfDay; \n  private $baseRate; \n  private $miles; \n\n  /** \n   * TaxiMeter constructor. \n   * @param int $timeOfDay \n   * @param float $baseRate \n   * @param string $driverDateOfBirth \n   * @throws Exception \n   */ \n  public function __construct(int $timeOfDay, float $baseRate, string $driverDateOfBirth) \n  { \n    $this->setTimeOfDay($timeOfDay); \n\n    $this->setBaseRate($baseRate); \n\n    $this->validateDriverDateOfBirth($driverDateOfBirth); \n\n    $this->miles = 0; \n\n  } \n\n  /** \n   * Set timeOfDay class variable. \n   * Only providing it doesn't exceed the maximum seconds in a day (const secondsInDay) and is greater than 0\\. \n   * @param $timeOfDay \n   * @return bool \n   * @throws Exception \n   */ \n  private function setTimeOfDay($timeOfDay): bool \n  { \n    if ($timeOfDay > self::SECONDS_IN_DAY) { \n      throw new Exception('There can only be ' . self::SECONDS_IN_DAY . ' seconds in a day.'); \n    } else if ($timeOfDay < 0) { \n      throw new Exception('Value cannot be negative.'); \n    } else { \n      $this->timeOfDay = $timeOfDay; \n      return true; \n    } \n  } \n\n  /** \n   * Sets the base rate variable providing it's over the MIN_RATE class constant. \n   * @param $baseRate \n   * @return bool \n   * @throws Exception \n   */ \n  private function setBaseRate($baseRate): bool \n  { \n    if ($baseRate < self::MIN_RATE) { \n      throw new Exception('Base rate below minimum.'); \n    } else { \n      $this->baseRate = $baseRate; \n      return true; \n    } \n  } \n\n  /** \n   * Validates \n   * @param $driverDateOfBirth \n   * @return bool \n   * @throws Exception \n   */ \n  private function validateDriverDateOfBirth($driverDateOfBirth): bool \n  { \n    $dateArr = explode('/', $driverDateOfBirth); \n    if (count($dateArr) == 3) { \n      if ((checkdate($dateArr[0], $dateArr[1], $dateArr[2])) !== true) { \n        throw new Exception('Invalid date, please use mm/dd/yyyy.'); \n      } \n    } else { \n      throw new Exception('Invalid date formatting, please use simple mm/dd/yyyy.'); \n    } \n\n    return true; \n  } \n\n  /** \n   * Adds given milage to the milage class variable. \n   * @param int $miles \n   * @return bool \n   */ \n  public function addMilage(int $miles): bool \n  { \n    $this->miles += $miles; \n    return true; \n  } \n\n  /** \n   * Calculates rate of trip. \n   * Times class constant mileRate against the current milage in miles class variables and adds the base rate. \n   * @return float \n   * @throws Exception \n   */ \n  public function getRate(): float \n  { \n    $dynamicRate = $this->miles * self::MILE_RATE; \n\n    $totalRate = $dynamicRate + $this->baseRate; \n\n    if (is_numeric($totalRate)) { \n      return $totalRate; \n    } else { \n      throw new Exception('Invalid rate output.'); \n    } \n  } \n} \n\n```", "```php\n  const minRate = 2.50; \n  const secondsInDay = 60 * 60 * 24; \n  const mileRate = 0.2; \n\n```"]