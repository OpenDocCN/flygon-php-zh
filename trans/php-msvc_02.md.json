["```php\n**$ uname -r \n3.10.0-229.el7.x86_64** \n\n```", "```php\n**yum update**\n\n```", "```php\n**# tee /etc/yum.repos.d/docker.repo <<-'EOF' \n[dockerrepo] \nname=Docker Repository \nbaseurl=https://yum.dockerproject.org/repo/main/centos/7/ \nenabled=1 \ngpgcheck=1 \ngpgkey=https://yum.dockerproject.org/gpg \nEOF**\n\n```", "```php\n**yum install docker-engine** \n\n```", "```php\n**systemctl enable docker.service**\n\n```", "```php\n **systemctl start docker** \n\n```", "```php\n**groupadd docker**\n**usermod -aG docker my_username**\n\n```", "```php\n**$ uname -r\n3.11.0-15-generic** \n\n```", "```php\n**apt-get update** \n\n```", "```php\n**apt-get install apt-transport-https ca-certificates \napt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys \\ 58118E89F3A912897C070ADBF76221572C52609D** \n\n```", "```php\n **Ubuntu Precise 12.04 (LTS):**  \n    deb https://apt.dockerproject.org/repo ubuntu-precise main \n    **Ubuntu Trusty 14.04 (LTS):**\n    deb https://apt.dockerproject.org/repo ubuntu-trusty main \n    **Ubuntu Xenial 16.04 (LTS):**\n    deb https://apt.dockerproject.org/repo ubuntu-xenial main \n\n```", "```php\n**apt-get update** \n\n```", "```php\n**apt-get purge lxc-docker** \n\n```", "```php\n**apt-get update && apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual** \n\n```", "```php\n**apt-get install docker-engine** \n\n```", "```php\n            GRUB_CMDLINE_LINUX=\"cgroup_enable=memory swapaccount=1\"\n\n    ```", "```php\n     **update-grub**\n\n    ```", "```php\n**ufw status**\n\n```", "```php\n    vi /etc/default/ufw\n    DEFAULT_FORWARD_POLICY=\"ACCEPT\"\n```", "```php\n**ufw reload**\n\n```", "```php\n**ufw allow 2375/tcp**\n\n```", "```php\n    DOCKER_OPTS=\"--dns 8.8.8.8\"\n```", "```php\n    DOCKER_OPTS=\"--dns 8.8.8.8 --dns 9.9.9.9\"\n```", "```php\n**service docker restart**\n\n```", "```php\n    dns=dnsmasq\n```", "```php\n**restart network-manager**\n**restart docker**\n\n```", "```php\n**groupadd docker\nusermod -aG docker my_username** \n\n```", "```php\n**systemctl enable docker**\n\n```", "```php\n**$ docker --version && docker-compose --version && docker-machine --version**\n\n```", "```php\n**$ docker run -d -p 8080:80 --name webserver-test nginx**\n\n```", "```php\n    version: '2'\n    services:\n```", "```php\n    version: '2'\n    services:\n    \u00a0\u00a0\u00a0 autodiscovery:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 build: ./autodiscovery/\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 mem_limit: 128m\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 expose:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - 53\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - 8300\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - 8301\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - 8302\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - 8400\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - 8500\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - 8500:8500\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 dns:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 - 127.0.0.1\n\n```", "```php\n    FROM consul:v0.7.0 \n\n```", "```php\n    microservice_base_fpm: \n      build: ./microservices/base/php-fpm/ \n    links: \n      - autodiscovery \n    expose: \n      - 9000 \n    environment: \n      - BACKEND=microservice_base_nginx \n      - CONSUL=autodiscovery \n\n```", "```php\n    FROM php:7-fpm \n\n    RUN apt-get update && apt-get -y install \\ \n      git g++ libcurl4-gnutls-dev libicu-dev libmcrypt-dev \n      libpq-dev libxml2-dev \n      unzip zlib1g-dev \\ \n      && git clone -b php7 \n      https://github.com/phpredis/phpredis.git \n      /usr/src/php/ext/redis \\\n      && docker-php-ext-install curl intl json mbstring \n      mcrypt pdo pdo_pgsql \n      redis xml \\ \n      && apt-get autoremove && apt-get autoclean \\ \n      && rm -rf /var/lib/apt/lists/* \n\n    RUN echo 'date.timezone=\"Europe/Madrid\"' >>  \n      /usr/local/etc/php/conf.d/date.ini \n    RUN echo 'session.save_path = \"/tmp\"' >>  \n      /usr/local/etc/php/conf.d/session.ini \n\n    ENV CONSUL_TEMPLATE_VERSION 0.16.0 \n    ENV CONSUL_TEMPLATE_SHA1  \n    064b0b492bb7ca3663811d297436a4bbf3226de706d2b76adade7021cd22e156 \n\n    RUN curl --retry 7 -Lso /tmp/consul-template.zip \\ \n      \"https://releases.hashicorp.com/\n      consul-template/${CONSUL_TEMPLATE_VERSION}/\n      consul-template_${CONSUL_TEMPLATE_VERSION}_linux_amd64.zip\" \\ \n    && echo \"${CONSUL_TEMPLATE_SHA1}  /tmp/consul-template.zip\" \n    | sha256sum -c \\ \n    && unzip /tmp/consul-template.zip -d /usr/local/bin \\ \n    && rm /tmp/consul-template.zip \n\n    ENV CONTAINERPILOT_VERSION 2.4.3 \n    ENV CONTAINERPILOT_SHA1 2c469a0e79a7ac801f1c032c2515dd0278134790 \n    ENV CONTAINERPILOT file:///etc/containerpilot.json \n\n    RUN curl --retry 7 -Lso /tmp/containerpilot.tar.gz \\ \n      \"https://github.com/joyent/containerpilot/releases/download/\n      ${CONTAINERPILOT_VERSION}/containerpilot-\n      ${CONTAINERPILOT_VERSION}.tar.gz\" \n      \\ \n      && echo \"${CONTAINERPILOT_SHA1}  /tmp/containerpilot.tar.gz\" \n      | sha1sum -c \\ \n      && tar zxf /tmp/containerpilot.tar.gz -C /usr/local/bin \\ \n      && rm /tmp/containerpilot.tar.gz \n\n    COPY config/ /etc \n    COPY scripts/ /usr/local/bin \n\n    RUN chmod +x /usr/local/bin/reload.sh \n\n    CMD [ \"/usr/local/bin/containerpilot\", \"php-fpm\", \"--nodaemonize\"] \n\n```", "```php\n    { \n      \"consul\": \"{{ if .CONSUL_AGENT }}localhost{{ else }}{{ .CONSUL }}\n      {{ end }}:8500\", \n      \"preStart\": \"/usr/local/bin/reload.sh preStart\", \n      \"logging\": {\"level\": \"DEBUG\"}, \n      \"services\": [ \n        { \n          \"name\": \"microservice_base_fpm\", \n          \"port\": 80, \n          \"health\": \"/usr/local/sbin/php-fpm -t\", \n          \"poll\": 10, \n          \"ttl\": 25, \n          \"interfaces\": [\"eth1\", \"eth0\"] \n        } \n      ], \n      \"backends\": [ \n        { \n          \"name\": \"{{ .BACKEND }}\", \n          \"poll\": 7, \n          \"onChange\": \"/usr/local/bin/reload.sh\" \n        } \n      ], \n      \"coprocesses\": [{{ if .CONSUL_AGENT }} \n        { \n          \"command\": [\"/usr/local/bin/consul\", \"agent\", \n            \"-data-dir=/var/lib/consul\", \n            \"-config-dir=/etc/consul\", \n            \"-rejoin\", \n            \"-retry-join\", \"{{ .CONSUL }}\", \n            \"-retry-max\", \"10\", \n          \"-retry-interval\", \"10s\"], \n          \"restarts\": \"unlimited\" \n        }\n      {{ end }}] \n    } \n\n```", "```php\n    #!/bin/bash \n\n    SERVICE_NAME=${SERVICE_NAME:-php-fpm} \n    CONSUL=${CONSUL:-consul} \n    preStart() { \n      echo \"php-fpm preStart\" \n    } \n\n    onChange() { \n      echo \"php-fpm onChange\" \n    } \n\n    help() { \n      echo \"Usage: ./reload.sh preStart  \n      => first-run configuration for php-fpm\" \n      echo \"      ./reload.sh onChange  \n      => [default] update php-fom config on \n      upstream changes\" \n    } \n\n    until \n      cmd=$1 \n      if [ -z \"$cmd\" ]; then \n             onChange \n      fi \n      shift 1 \n      $cmd \"$@\" \n      [ \"$?\" -ne 127 ] \n    do \n      onChange \n      exit \n    done \n\n```", "```php\n    microservice_base_nginx: \n      build: ./microservices/base/nginx/ \n      links: \n        - autodiscovery \n        - microservice_base_fpm \n      environment: \n        - BACKEND=microservice_base_fpm \n        - CONSUL=autodiscovery \n      ports: \n        - 8080:80 \n\n```", "```php\n    \"telemetry\": { \n      \"port\": 9090, \n      \"sensors\": [ \n        { \n          \"name\": \"nginx_connections_unhandled_total\", \n          \"help\": \"Number of accepted connnections that were not handled\", \n          \"type\": \"gauge\", \n          \"poll\": 5, \n          \"check\": [\"/usr/local/bin/sensor.sh\", \"unhandled\"] \n        }, \n        { \n          \"name\": \"nginx_connections_load\", \n          \"help\": \"Ratio of active connections (less waiting) to \n          the maximum  \n          worker connections\", \n          \"type\": \"gauge\", \n          \"poll\": 5, \n          \"check\": [\"/usr/local/bin/sensor.sh\", \"connections_load\"] \n        }\n      ]\n    } \n\n```", "```php\n    #!/bin/bash \n    set -e \n\n    help() { \n      echo 'Make requests to the Nginx stub_status endpoint and \n      pull out metrics' \n      echo 'for the telemetry service. Refer to the Nginx docs \n      for details:' \n      echo 'http://nginx.org/en/docs/http/ngx_http_stub_status_module.html' \n    } \n\n    unhandled() { \n      local accepts=$(curl -s --fail localhost/nginx-health | awk 'FNR == 3 \n      {print $1}') \n      local handled=$(curl -s --fail localhost/nginx-health | awk 'FNR == 3 \n      {print $2}') \n      echo $(expr ${accepts} - ${handled}) \n    } \n\n    connections_load() { \n      local scraped=$(curl -s --fail localhost/nginx-health) \n      local active=$(echo ${scraped} \n      | awk '/Active connections/{print $3}') \n      local waiting=$(echo ${scraped} | awk '/Reading/{print $6}') \n      local workers=$(echo $(cat /etc/nginx/nginx.conf | perl -n -e'/\n      worker_connections *(\\d+)/ && print $1') ) \n      echo $(echo \"scale=4; (${active} - ${waiting}) / ${workers}\" | bc) \n    } \n\n    cmd=$1 \n    if [ ! -z \"$cmd\" ]; then \n      shift 1 \n      $cmd \"$@\" \n      exit \n    fi \n\n    help \n\n```", "```php\n    #!/bin/bash \n\n    SERVICE_NAME=${SERVICE_NAME:-nginx} \n    CONSUL=${CONSUL:-consul} \n\n    preStart() { \n      consul-template \\ \n            -once \\ \n            -dedup \\ \n            -consul ${CONSUL}:8500 \\ \n            -template \"/etc/nginx/nginx.conf.ctmpl:/etc/nginx/nginx.conf\" \n    } \n\n    onChange() { \n      consul-template \\ \n            -once \\ \n            -dedup \\ \n            -consul ${CONSUL}:8500 \\ \n            -template \"/etc/nginx/nginx.conf.ctmpl:/etc/nginx/\n            nginx.conf:nginx -s reload\" \n    } \n\n    help() { \n      echo \"Usage: ./reload.sh preStart  \n      => first-run configuration for Nginx\" \n      echo \"      ./reload.sh onChange  => [default] update Nginx config on \n      upstream changes\" \n    } \n\n    until \n      cmd=$1 \n      if [ -z \"$cmd\" ]; then \n             onChange \n      fi \n      shift 1 \n      $cmd \"$@\" \n      [ \"$?\" -ne 127 ] \n    do \n       onChange \n       exit \n    done \n\n```", "```php\n **POST** /path **HTTP/**1.1 Host: example.com\n    foo=bar&baz=bat\n```", "```php\n **HTTP/**1.1 200 **OK** Content-Type: text/plain\n```", "```php\n    $message = $message->withHeader('foo', 'bar');\n    echo $message->getHeaderLine('foo');\n    // Outputs: bar\n    echo $message->getHeaderLine('FoO');\n    // Outputs: bar\n```", "```php\n    $message = $message ->withHeader('foo', 'bar') ->\n    withAddedHeader('foo', 'baz');\n    $header = $message->getHeaderLine('foo'); \n    // $header contains: 'bar, baz'\n    $header = $message->getHeader('foo'); // ['bar', 'baz']\n```", "```php\n    isReadable()\n    isWritable()\n    isSeekable()\n```", "```php\n    origin-form\n    absolute-form\n    authority-form\n    asterisk-form\n```", "```php\n    $request = $request\n    ->withMethod('OPTIONS')\n    ->withRequestTarget('*')\n    ->withUri(new Uri('https://example.org/'));\n```", "```php\n    OPTIONS * HTTP/1.1\n```", "```php\n    $_COOKIE\n    $_GET\n    $_POST\n    $_FILES\n    $_SERVER\n```", "```php\n    array(    \n      'files' => array(        \n        'name' => array(            \n          0 => 'file0.txt',              \n          1 => 'file1.html',        \n        ),\n        'type' => array(\n          0 => 'text/plain',             \n          1 => 'text/html',\n        ),        \n    /* etc. */    ), )\n```", "```php\n\n    array( \n      'files' => array(\n        0 => array(\n        'name' => 'file0.txt',\n        'type' => 'text/plain',\n      /* etc. */        ),\n      1 => array(\n        'name' => 'file1.html',\n        'type' => 'text/html',\n        /* etc. */        \n      ),    \n    ), )\n```", "```php\n    use Psr\\Http\\Message\\ResponseInterface; \n    use Psr\\Http\\Message\\ServerRequestInterface;  \n    function (ServerRequestInterface $request, ResponseInterface $response, \n    callable $next = null) \n    {    \n      // Do things before the program itself and the next middleware   \n      // If exists next middleware call it and get its response    \n      if (!is_null($next)) {  \n      $response = $next($request, $response);    }    \n      // Do things after the previous middleware has finished    \n      // Return response    \n      return $response; \n    }\n```", "```php\n    use Psr\\Http\\Message\\ResponseInterface; \n    use Psr\\Http\\Message\\ServerRequestInterface; \n    $first = function (ServerRequestInterface $request, \n    ResponseInterface $response, callable $next) \n    {\n      $request = $request->withAttribute('word', 'hello');   \n      $response = $next($request, $response);    \n      $response = $response->withHeader('X-App-Environment', \n      'development');\n      return $response; \n    } class Second {    \n      public function __invoke(ServerRequestInterface $request, \n      ResponseInterface $response, callable $next) \n      {\n        $response->getBody()->write('word:'. \n        $request->getAttribute('word'));        \n        $response = $next($request, $response);       \n        $response = $response->withStatus(200, 'OK');\n        return $response;    \n      } \n    }\n    $second = new Second; $endfunction = function (\n    ServerRequestInterface $request, ResponseInterface $response) \n    {\n      $response->getBody()->write('function reached');   \n      return $response; \n    }\n```", "```php\n    class MiddlewareHandler {\n    public function __construct()\n    { //this depends the framework and you are using\n        $this->middlewareStack = new Stack; \n        $this->middlewareStack[] = $first;        \n        $this->middlewareStack[] = $second; \n        $this->middlewareStack[] = $endfunction;\n    }\n    ... }\n```", "```php\n    try { // Things to do } \n    catch (\\Exception $e) { \n      // Error happened return \n      $response->withStatus(500); \n    }\n```"]