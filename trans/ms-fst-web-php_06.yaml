- en: Querying a Modern SQL Database Efficiently
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高效查询现代SQL数据库
- en: We will now learn how to query an SQL database efficiently using Modern SQL.
    In this chapter, we will define what Modern SQL is and how to use it. We will
    start by defining the concept of Modern SQL and understanding what makes it different
    from traditional SQL by describing many of its features. Thus, we will acquire
    knowledge of how to convert certain traditional SQL queries into modern ones and
    when it is best to do so. Moreover, by doing so, we will better understand how
    Modern SQL can help us optimize a server's performance in more than one way.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何使用现代SQL高效地查询SQL数据库。在本章中，我们将定义现代SQL是什么以及如何使用它。我们将从定义现代SQL的概念开始，了解它与传统SQL的区别，并描述许多其特点。因此，我们将了解如何将某些传统SQL查询转换为现代查询以及何时最好这样做。此外，通过这样做，我们将更好地了解现代SQL如何帮助我们以多种方式优化服务器性能。
- en: 'Therefore, we will cover the following points:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将涵盖以下内容：
- en: Understanding what Modern SQL is and its features
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解现代SQL及其特点
- en: Learning how and when to use `WITH` and `WITH RECURSIVE`, `CASE`, `OVER AND
    PARTITION BY`, `OVER AND ORDER BY`, GROUPING SETS, JSON clauses and functions,
    `FILTER` and `LATERAL` queries.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用`WITH`和`WITH RECURSIVE`、`CASE`、`OVER AND PARTITION BY`、`OVER AND ORDER
    BY`、GROUPING SETS、JSON子句和函数、`FILTER`和`LATERAL`查询。
- en: Modern SQL
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代SQL
- en: What is Modern SQL and how does it distinguish itself from traditional SQL?
    What are its main features? Let's start by defining the concept itself.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现代SQL是什么，它与传统SQL有何不同？它的主要特点是什么？让我们从定义概念开始。
- en: Definition
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义
- en: 'As Markus Winand states on his website [https://modern-sql.com](https://modern-sql.com),
    Modern SQL can be defined as "*an internationally standardized, widely available
    and Turing complete data processing language supporting relational and non-relational
    data models*." This definition refers to a set of standards that were promoted
    by the ISO and ANSI organizations over the years and that added new features to
    the SQL programming language. Since SQL-92, many new versions of the SQL standard
    were adopted and these standards introduced many new features based on relational
    and non-relational models. Here is a short list of these features with the corresponding
    standard that confirmed their adoption into the SQL language:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Markus Winand在他的网站[https://modern-sql.com](https://modern-sql.com)上所述，现代SQL可以被定义为“*一种国际标准化、广泛可用且图灵完备的数据处理语言，支持关系和非关系数据模型*。”这个定义指的是ISO和ANSI组织多年来推广的一系列标准，并为SQL编程语言添加了新功能。自SQL-92以来，SQL标准的许多新版本被采纳，并且这些标准引入了许多基于关系和非关系模型的新功能。以下是这些功能的简要列表，以及确认它们被采纳到SQL语言中的相应标准：
- en: '`WITH` and `WITH RECURSIVE` (SQL:1999)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WITH`和`WITH RECURSIVE`（SQL：1999）'
- en: '`CASE` (SQL:1999 and SQL:2003)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CASE`（SQL：1999和SQL：2003）'
- en: '`OVER AND PARTITION BY` (SQL:2003 and SQL:2011)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OVER AND PARTITION BY`（SQL：2003和SQL：2011）'
- en: '`OVER AND ORDER BY` (SQL:2003 and SQL:2011)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OVER AND ORDER BY`（SQL：2003和SQL：2011）'
- en: GROUPING SETS (SQL:2011)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GROUPING SETS（SQL：2011）
- en: JSON clauses and functions (SQL:2016)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON子句和函数（SQL：2016）
- en: '`FILTER` (SQL:2003)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FILTER`（SQL：2003）'
- en: '`LATERAL` queries (SQL:1999)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LATERAL`查询（SQL：1999）'
- en: This being said, it should be noted that most of these features were not implemented
    by most **relational database management systems** (**RDBMSs**) until fairly recently.
    Most RDBMSs were only offering to their users, a more traditional SQL language
    based solely on the relational model promoted by the aging SQL-92 standard. It
    has only been in the most recent years that many, if not most, of RDBMSs have
    started implementing Modern SQL features.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，大多数这些功能直到最近才被大多数关系数据库管理系统（RDBMS）实现。大多数RDBMS仅为其用户提供了基于老化的SQL-92标准所推广的关系模型的传统SQL语言。直到最近几年，许多RDBMS才开始实现现代SQL功能。
- en: 'Moreover, let''s give this word of warning: using these features will not immediately
    yield great performance hikes for your database server. So, what is the point
    of using these features in your code base? The point is to make your code base
    compatible with future database engine optimizations and to avoid most problems
    related to slow query execution.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们提出警告：使用这些功能不会立即为您的数据库服务器带来巨大的性能提升。那么，在您的代码库中使用这些功能的意义是什么？目的是使您的代码库与未来的数据库引擎优化兼容，并避免大多数与慢查询执行相关的问题。
- en: 'But, before looking further into the new SQL features, we will install `phpMyAdmin`
    inside our Linux for PHP container in order to see the results of our queries
    in a user-friendly fashion. To do so, please enter the following commands on the
    container''s CLI:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但在进一步了解新的SQL功能之前，我们将在我们的Linux中为PHP容器安装`phpMyAdmin`，以便以用户友好的方式查看我们查询的结果。为此，请在容器的CLI上输入以下命令：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These commands should make it possible to access the database server from a
    web interface at `http://localhost:8181/phpmyadmin`. When visiting this address
    via your favorite browser, you should see the following screen:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令应该可以让您通过Web界面访问数据库服务器，网址为`http://localhost:8181/phpmyadmin`。在您喜欢的浏览器中访问此地址时，您应该看到以下屏幕：
- en: '![](assets/a0aac6ea-6f8d-4787-a740-eb10c29e4428.png)Enter your username and
    password on phpMyAdmin''s login page'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a0aac6ea-6f8d-4787-a740-eb10c29e4428.png)在phpMyAdmin的登录页面上输入用户名和密码'
- en: Once `phpMyAdmin` is installed, you can log in to the database server with the
    Username `root` and an empty Password.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`phpMyAdmin`后，您可以使用用户名`root`和空密码登录到数据库服务器。
- en: Now, let's have a look at each one of these new SQL features in more detail.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更详细地了解每一个新的SQL功能。
- en: WITH and WITH RECURSIVE
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WITH和WITH RECURSIVE
- en: 'The first feature is what is known as a **Common Table Expression** (**CTE**).
    A CTE is a temporary result set which allows you to join the same data to itself
    multiple times. There are two types of CTEs: non-recursive (`WITH`) and recursive
    (`WITH RECURSIVE`).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个功能是所谓的**公共表达式**（**CTE**）。CTE是一个临时结果集，允许您多次将相同的数据连接到自身。有两种类型的CTE：非递归（`WITH`）和递归（`WITH
    RECURSIVE`）。
- en: 'The non-recursive kind of CTE works like a derived table, allowing you to `SELECT`
    from a temporary result set. A simple example, using a fictitious staff table,
    would be:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 非递归类型的CTE就像派生表一样，允许您从临时结果集中`SELECT`。一个简单的例子，使用一个虚构的员工表，将是：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The recursive kind of CTE is composed of two parts. The first part of the query
    is what is called the anchor member of the CTE. The anchor's result set is what
    is considered to be the base result set (T[0]). The second part is the recursive
    member which will run with T[i] as input and T[i+1] as output until an empty result
    set is returned. The query's final result set will be a `UNION ALL` between the
    recursive result set (T[n]) and the anchor (T[0]).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 递归类型的CTE由两部分组成。查询的第一部分称为CTE的锚成员。锚的结果集被认为是基本结果集（T[0]）。第二部分是递归成员，它将以T[i]作为输入和T[i+1]作为输出运行，直到返回一个空的结果集。查询的最终结果集将是递归结果集（T[n）和锚（T[0]）之间的`UNION
    ALL`。
- en: 'In order to better understand recursive CTEs and how useful they can be, let''s
    give an example. But, before we begin, let''s start by loading the following table
    into the test database. On the container''s CLI, enter this command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解递归CTE以及它们可以有多么有用，让我们举个例子。但在开始之前，让我们先将以下表加载到测试数据库中。在容器的CLI中，输入此命令：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once done, you can make sure that everything was loaded correctly by opening
    the database with `phpMyAdmin`, as seen here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以通过使用`phpMyAdmin`打开数据库来确保一切都加载正确，如下所示：
- en: '![](assets/5f8e9316-5aeb-4914-9e5d-428303e40b4c.png)All the rows found in the
    employees table of the test database'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/5f8e9316-5aeb-4914-9e5d-428303e40b4c.png)测试数据库中员工表中找到的所有行'
- en: 'In order to better understand CTEs, we will begin by using a basic query with
    multiple joins to obtain a hierarchical result set. To obtain the entire hierarchy
    of employees based solely on the presence of the manager''s ID in the employee''s
    record in the database, we would have to think of a query with multiple joins
    to the same table. In the SQL tab, enter this query:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解CTE，我们将从使用具有多个连接的基本查询开始，以获得分层结果集。为了仅基于数据库中员工记录中经理ID的存在来获取员工的整个层次结构，我们必须考虑使用多个连接到同一表的查询。在SQL选项卡中，输入此查询：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will obtain this result set:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得这个结果集：
- en: '![](assets/c5516de5-df0b-41d3-8bff-c9321342231e.png)Hierarchical tree of all
    the employees generated with the JOIN statements'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c5516de5-df0b-41d3-8bff-c9321342231e.png)使用连接语句生成的所有员工的分层树'
- en: 'The first thing to notice is that this query presumes that we know in advance
    the number of levels in this hierarchy, which implies that we did a previous query
    to confirm this fact about our dataset. The second thing is the clumsiness of
    having to repeat the `JOIN` clauses in order to retrieve the entire result set.
    A recursive CTE is the perfect way to optimize such queries. To obtain the exact
    same result set with a recursive CTE, we would have to run the following query:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，这个查询假设我们事先知道这个层次结构中的级别数量，这意味着我们之前做了一个查询来确认关于我们数据集的这个事实。第二件事是，为了检索整个结果集，必须重复`JOIN`子句的笨拙。递归CTE是优化这种查询的完美方式。要使用递归CTE获得完全相同的结果集，我们必须运行以下查询：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If we were to compare the two previous queries by running them against MariaDB's
    performance schema, even though they do not offer the same functionality pertaining
    to the dynamic discovery of the number of levels in our hierarchy, we would get
    a better idea of what is going on under the hood.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过运行它们针对MariaDB的性能模式来比较前两个查询，即使它们不提供有关我们层次结构中级别动态发现的相同功能，我们也会更好地了解底层发生了什么。
- en: 'Firstly, let''s run the multiple join query with the `EXPLAIN` statement:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用`EXPLAIN`语句运行多个连接查询：
- en: '![](assets/f4eb1ecc-c582-40ef-8fb8-f9e4e112e77a.png)MariaDB''s query execution
    plan with the JOIN statements'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f4eb1ecc-c582-40ef-8fb8-f9e4e112e77a.png)MariaDB的连接语句查询执行计划'
- en: 'And now against the RDBMS''s performance schema:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来看一下RDBMS的性能模式：
- en: '![](assets/8fc22b94-631c-4e12-a209-4d3447747a98.png)The multiple joins caused
    65 operations in the database engine'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8fc22b94-631c-4e12-a209-4d3447747a98.png)多个连接导致数据库引擎中的65个操作'
- en: 'Secondly, let''s go through the same steps, but with the recursive CTE:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，让我们按照相同的步骤进行，但使用递归CTE：
- en: '![](assets/f055c2ca-730c-4af5-b8e7-f9504a5793b2.png)MariaDB''s query execution
    plan with the recursive CTE'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f055c2ca-730c-4af5-b8e7-f9504a5793b2.png)MariaDB的递归CTE查询执行计划'
- en: 'And, the performance schema should yield the following result:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 而性能模式应该产生以下结果：
- en: '![](assets/b0996943-fe99-42b8-8948-837863f9a63a.png)The CTE caused 47 operations
    in the database engine'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b0996943-fe99-42b8-8948-837863f9a63a.png)CTE在数据库引擎中引起了47个操作'
- en: Although this recursive CTE was a little slower than the basic multiple join
    query on my computer, it did generate fewer engine operations overall when all
    the selected columns were indexed. So, why is this more performant? A recursive
    CTE will allow you to avoid the hassle of creating a stored procedure, or something
    similar, in order to recursively discover the number of levels in your hierarchy
    tree, for example. This would most certainly make the multiple join query much
    slower if we added these operations to the main query. Also, a recursive CTE might
    be a kind of derived table that is not much quicker than a View and slightly slower
    than a basic multiple join query, but it is certainly very scalable and very useful
    when querying a database in order to walk a hierarchy tree, when using ranking
    functions or when modifying table contents based on a small result subset while
    resting assured that your more complex queries will benefit, for free, from future
    engine optimizations. Moreover, it will make your development cycle more efficient
    as it will make your code more readable to other developers by keeping it **DRY**
    ("**Don't Repeat Yourself**").
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个递归CTE在我的电脑上比基本的多重连接查询慢了一点，但当所有选择的列都被索引时，它确实生成了更少的引擎操作。那么，为什么这更有效率呢？递归CTE将允许你避免创建存储过程或类似的东西，以便递归地发现你的层次树中的级别数量，例如。如果我们将这些操作添加到主查询中，多重连接查询肯定会慢得多。此外，递归CTE可能是一种派生表，不比视图快多少，比基本的多重连接查询稍慢一点，但在查询数据库时非常可扩展和有用，以便在休息时基于小的结果子集修改表内容，同时确保你更复杂的查询将免费受益于未来的引擎优化。此外，它将使你的开发周期更加高效，因为它将使你的代码对其他开发人员更易读，保持**DRY**（“**不要重复自己**”）。
- en: Let's move on to the next feature, the `CASE` expression.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一个特性，`CASE`表达式。
- en: CASE
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例
- en: Even though the `CASE` expression seems to remind us of imperative structures
    such as `IF`, `SWITCH`, and the like, it still does not allow for program flow
    control like those imperative structures, but rather allows for declarative evaluation
    of values based on certain conditions. Let's have a look at the following example
    in order to better understand this feature.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`CASE`表达式似乎让我们想起了诸如`IF`、`SWITCH`之类的命令式结构，但它仍不允许像这些命令式结构那样进行程序流控制，而是允许根据某些条件对值进行声明性评估。让我们看下面的例子，以更好地理解这个特性。
- en: 'Please enter the following query in the SQL tab of the test database via the
    `phpMyAdmin` interface:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请在`phpMyAdmin`界面的测试数据库的SQL选项卡中输入以下查询：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This query should yield the following result set:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询应该产生以下结果集：
- en: '![](assets/777459b1-42ce-4b2f-bf6f-7b9c17dbe087.png)Result set of the query
    containing the CASE statement'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/777459b1-42ce-4b2f-bf6f-7b9c17dbe087.png)包含CASE语句的查询结果集'
- en: As the result shows, the row with an `id` value of `2` was filtered out from
    the input of the second `COUNT` function as the `CASE` expression applied the
    condition which states that the superior column must not have a `NULL` value in
    order to count the id column. Using this feature of Modern SQL is not, for the
    most part, a question of added performance, but rather a question of avoiding
    stored procedures and controlling execution flows as much as possible, while keeping
    the code clean, easily readable and maintainable.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如结果所示，具有`id`值为`2`的行被从第二个`COUNT`函数的输入中过滤掉，因为`CASE`表达式应用了条件，即上级列必须不具有`NULL`值才能计算id列。使用这个现代SQL的特性，在很大程度上不是为了提高性能，而是为了尽可能地避免存储过程和控制执行流程，同时保持代码清晰、易读和可维护。
- en: OVER and PARTITION BY
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OVER和PARTITION BY
- en: '`OVER` and `PARTITION BY` are window functions that allow calculations to be
    done over a set of rows. Unlike aggregate functions, window functions do not group
    the results though. In order to better understand these two window functions,
    let''s take the time to run the following query in the `phpMyAdmin` web interface:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`OVER`和`PARTITION BY`是窗口函数，允许对一组行进行计算。与聚合函数不同，窗口函数不会对结果进行分组。为了更好地理解这两个窗口函数，让我们花点时间在`phpMyAdmin`的Web界面上运行以下查询：'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After running this query, you should see the following result:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个查询后，你应该看到以下结果：
- en: '![](assets/4c735583-b305-467f-9f6d-026e2f01ca5a.png)List of managers with payroll
    per manager'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4c735583-b305-467f-9f6d-026e2f01ca5a.png)每个经理的工资单列表'
- en: As we can see, the result set shows the payroll per manager column without grouping
    the results. This is why we had to use the `DISTINCT` statement in order to avoid
    having multiple rows for the same manager. Obviously, window functions allow for
    efficient querying and optimized performance when doing aggregate calculations
    on subsets of rows that have some sort of relationship to the current row.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，结果集显示了每个经理的工资单列，而不是对结果进行分组。这就是为什么我们必须使用`DISTINCT`语句，以避免对同一个经理出现多行。显然，窗口函数允许在当前行与某种关系的行子集上进行高效的查询和优化性能的聚合计算。
- en: OVER AND ORDER BY
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OVER和ORDER BY
- en: The `OVER AND ORDER BY` window functions are very useful when it comes to ranking
    within a subset of rows, calculating running totals or simply avoiding self-joins.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`OVER AND ORDER BY`窗口函数在对行子集进行排名、计算累积总数或简单地避免自连接时非常有用。'
- en: 'To illustrate when to use this most useful feature, we will take the previous
    example and determine the best paid employees on each payroll per manager by executing
    this query:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明何时使用这个最有用的特性，我们将采用前面的例子，并通过执行这个查询来确定每个经理的每个工资单上薪水最高的员工：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Executing this query will give this result set:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这个查询将得到以下结果集：
- en: '![](assets/7db91a77-1ede-437a-bbd5-7cad5cb5a5b1.png)List of the best paid employees
    on each payroll per manager'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7db91a77-1ede-437a-bbd5-7cad5cb5a5b1.png)每个经理的每个工资单上薪水最高的员工列表'
- en: The returned result set allows us to see the breakdown of each payroll and ranks
    each employee within each subset. And what is the underlying execution plan that
    will allow us to get all these details about these subsets of data? The answer
    is a `SIMPLE` query! In the case of our query, there is a dependent subquery,
    but that is because we are fetching the last name of each manager in order to
    make the result set more interesting.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的结果集使我们能够查看每个工资单的细分，并对每个子集中的每个员工进行排名。那么，允许我们获取关于这些数据子集的所有这些细节的底层执行计划是什么？答案是一个`SIMPLE`查询！在我们的查询中，存在一个依赖子查询，但这是因为我们正在获取每个经理的姓氏，以使结果集更有趣。
- en: 'This would be the resulting query after removing the dependent subquery:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除依赖子查询后，这将是生成的查询：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And here is the underlying execution plan for this version of the same query:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相同查询版本的底层执行计划：
- en: '![](assets/cd90e410-83c9-43db-b954-62c9bf09cf54.png)The query execution plan
    is simple when avoiding to fetch the last name of the manager'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/cd90e410-83c9-43db-b954-62c9bf09cf54.png)避免获取经理姓氏时，查询执行计划是简单的'
- en: By running the query without the dependent subquery that was returning each
    manager's last name, the `select_type` of our query execution plan is `SIMPLE`.
    This makes for a highly efficient query that will be easily maintainable in the
    future.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在没有返回每个经理姓氏的依赖子查询的情况下运行查询，我们的查询执行计划的`select_type`是`SIMPLE`。这将产生一个高效的查询，未来易于维护。
- en: GROUPING SETS
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GROUPING SETS
- en: 'GROUPING SETS make it possible to apply many `GROUP BY` clauses in one single
    query. Moreover, this new feature introduces the notion of a `ROLLUP`,  which
    is an extra row added to the result set that gives a summary of the results as
    a super-aggregate of previously returned values. Let''s give a very simple example
    using the employees table in the test database. Let''s execute the following query
    in the `phpMyAdmin` web interface:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: GROUPING SETS使得可以在一个查询中应用多个`GROUP BY`子句。此外，这一新功能引入了`ROLLUP`的概念，它是结果集中添加的额外行，以先前返回的值的超级聚合形式给出结果的摘要。让我们在测试数据库的employees表中给出一个非常简单的例子。在`phpMyAdmin`的Web界面中执行以下查询：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once executed, you should see this result:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，您应该会看到这个结果：
- en: '![](assets/65ce923d-82e4-43dc-80bd-0ab65ea65110.png)GROUPING SETS make it possible
    to apply many GROUP BY clauses in one single query'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/65ce923d-82e4-43dc-80bd-0ab65ea65110.png)GROUPING SETS使得可以在一个查询中应用多个GROUP
    BY子句'
- en: 'The multiple `GROUP BY` clauses have allowed us to quickly see each individual
    salary of each employee under the supervision of each manager. If we now add the
    `ROLLUP` operator to the `GROUP BY` clauses, we will obtain this result:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 多个`GROUP BY`子句使我们能够快速查看每个经理监督下每个员工的工资。如果现在将`ROLLUP`操作符添加到`GROUP BY`子句中，我们将获得这个结果：
- en: '![](assets/b0c388e6-2ed6-4a28-9db9-1cae7aa20bbf.png)The result set when adding
    the ROLLUP operator to the GROUP BY clauses'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b0c388e6-2ed6-4a28-9db9-1cae7aa20bbf.png)在GROUP BY子句中添加ROLLUP操作符后的结果集'
- en: The `ROLLUP` operator adds extra rows that contain a super-aggregate result
    for each subset and for the entire result set. The execution plan reveals that
    the underlying `select_type` is once more `SIMPLE` instead of having multiple
    queries united with a `UNION` operator as we would have done before this feature
    existed. Once more, Modern SQL offers us a highly optimized query which will remain
    highly maintainable for many years to come.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`ROLLUP`操作符添加了额外的行，其中包含每个子集和整个结果集的超级聚合结果。执行计划显示，底层的`select_type`再次是`SIMPLE`，而不是在此功能存在之前我们将使用`UNION`操作符将多个查询合并。再次，现代SQL为我们提供了一个高度优化的查询，将在未来多年内保持高度可维护性。'
- en: JSON clauses and functions
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON子句和函数
- en: One of the latest additions to the SQL language is the JSON features. This new
    group of features makes it easier to benefit from the advantages of storing certain
    types of unstructured and schema-less data like the JSON format in a very structured
    and relational way using SQL native functions. This allows for many things, such
    as applying integrity contraints on certain JSON fields contained in a JSON document,
    indexing certain JSON fields, easily converting and returning unstructured data
    into relational data and vice versa, and inserting or updating unstructured data
    by the means of the proven reliability of SQL transactions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: SQL语言的最新增强之一是JSON功能。这一系列新功能使得更容易从SQL本机函数中受益，将某些类型的非结构化和无模式数据（如JSON格式）以非常结构化和关系方式存储。这允许许多事情，例如对JSON文档中包含的某些JSON字段应用完整性约束，对某些JSON字段进行索引，轻松地将非结构化数据转换并返回为关系数据，反之亦然，并通过SQL事务的可靠性插入或更新非结构化数据。
- en: To fully appreciate this new group of features, let's insert some data into
    the test database by executing a query that will convert the JSON data into relational
    data.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分欣赏这一系列新功能，让我们通过执行查询将一些数据插入测试数据库，将JSON数据转换为关系数据。
- en: 'First, please execute the following command on the container''s CLI:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请在容器的CLI上执行以下命令：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the new table is loaded into the database, you can execute the following
    query:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 新表加载到数据库后，您可以执行以下查询：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once executed, you should see this result:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，您应该会看到这个结果：
- en: '![](assets/902782e2-c7c8-4e12-8aaf-d1238df20da2.png)The JSON functions automatically
    convert the JSON data into relational data'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/902782e2-c7c8-4e12-8aaf-d1238df20da2.png)JSON函数会自动将JSON数据转换为关系数据'
- en: 'As we can see, converting JSON unstructured data into relational and structured
    data was very easy using the new JSON functions. Inserting unstructured data into
    a structured database is just as easy. Moreover, the added constraint would verify
    that the JSON string being inserted is valid. To verify this feature, let''s attempt
    to insert invalid JSON data into our test table:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，使用新的JSON函数将JSON非结构化数据转换为关系和结构化数据非常容易。将非结构化数据插入结构化数据库同样容易。此外，添加的约束将验证要插入的JSON字符串是否有效。为了验证这一功能，让我们尝试将无效的JSON数据插入我们的测试表中：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Upon trying to execute the query, we would get the following error message:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试执行查询时，我们将收到以下错误消息：
- en: '![](assets/ca660695-dede-40df-932e-b66f89a12210.png)The JSON constraints make
    sure that the JSON string being inserted is valid'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/ca660695-dede-40df-932e-b66f89a12210.png)JSON约束确保要插入的JSON字符串是有效的'
- en: Thus, Modern SQL makes working with JSON-formatted data easy in an SQL environment.
    This will greatly optimize performance at the application level, as it will now
    be possible to eliminate the overhead that comes with having to `json_encode()`
    and `json_decode()` every time an application needs to retrieve or store JSON-formatted
    data into a relational database.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现代SQL使得在SQL环境中轻松处理JSON格式的数据。这将极大地优化应用程序级别的性能，因为现在可以消除每次应用程序需要检索或存储JSON格式数据到关系数据库时都需要`json_encode()`和`json_decode()`的开销。
- en: 'There are many more Modern SQL features that we could try to better understand,
    but not all RDBMSs have implemented them and many of these features would require
    that we analyze implementation details. We will simply look at two more features
    that have not been implemented within the MariaDB server, but that have been within
    the PostgreSQL server. In order to start and use the PostgreSQL server that is
    included in the Linux for PHP container, please enter the following commands on
    the container''s CLI:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多现代SQL功能，我们可以尝试更好地理解，但并非所有RDBMS都已实现，并且其中许多功能需要我们分析实现细节。我们将简单地看一下两个在MariaDB服务器中未实现但在PostgreSQL服务器中实现的功能。要启动和使用包含在Linux
    for PHP容器中的PostgreSQL服务器，请在容器的CLI上输入以下命令：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After entering these commands, you should be able to access the PostgreSQL
    server via the `phpPgAdmin` web interface at `http://localhost:8181/phppgadmin`.
    Point your browser to this address and click on the Servers icon in the upper
    right-hand corner of the screen in order to see the following interface:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 输入这些命令后，您应该能够通过`phpPgAdmin` Web界面访问PostgreSQL服务器，网址为`http://localhost:8181/phppgadmin`。将浏览器指向此地址，并点击屏幕右上角的服务器图标，以查看以下界面：
- en: '![](assets/1c4e010d-a76d-4d51-9676-cae9bb368916.png)Only one available PostgreSQL
    server is listed and is accessible through port 5432'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1c4e010d-a76d-4d51-9676-cae9bb368916.png)列出唯一可用的PostgreSQL服务器，并通过端口5432访问'
- en: 'From here, click on the PostgreSQL link in the center of the page, type `postgres`
    as the Username and leave the Password empty on the login page:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，点击页面中央的PostgreSQL链接，在登录页面上，将用户名输入为`postgres`，密码留空：
- en: '![](assets/c770642c-08c9-4ddb-a5a5-9b3468636b4f.png)On the login page, type
    in the username ''postgres'' and the leave the password box empty'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c770642c-08c9-4ddb-a5a5-9b3468636b4f.png)在登录页面上，输入用户名''postgres''，并将密码框留空'
- en: 'Then, click on the Login button and you should be able to access the server:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击“登录”按钮，您应该能够访问服务器：
- en: '![](assets/6bf40f18-277d-4e62-ab10-6505c96eb23b.png)The server displays postgres
    as its only available database'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6bf40f18-277d-4e62-ab10-6505c96eb23b.png)服务器显示postgres作为唯一可用的数据库'
- en: 'Finally, we will create a database that will allow us to learn how to use the
    two last Modern SQL features that we will cover in this book. In the `phpPgAdmin`
    interface, click on the Create database link and fill out the form in order to
    create the test database:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将创建一个数据库，以便学习如何使用本书中将要介绍的最后两个现代SQL功能。在`phpPgAdmin`界面中，点击“创建数据库”链接，并填写表单以创建test数据库：
- en: '![](assets/b9e3abd9-2616-4dd0-8f9c-f17aa5ce963d.png)Create the database test
    with the template1 template and an encoding of LATIN1'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b9e3abd9-2616-4dd0-8f9c-f17aa5ce963d.png)使用template1模板和LATIN1编码创建名为test的数据库'
- en: 'By clicking on the Create button, you will create the test database alongside
    the postgres database:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建”按钮，您将创建test数据库并将其与postgres数据库一起创建：
- en: '![](assets/347ae761-f294-471d-98b6-393bcdaa8114.png)Now, the server displays
    the test database alongside the postgres database'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/347ae761-f294-471d-98b6-393bcdaa8114.png)现在，服务器显示test数据库和postgres数据库'
- en: 'Once this is done, enter the following commands on the container''s CLI:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，在容器的CLI上输入以下命令：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We are now ready to try out the `FILTER` clause.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备尝试`FILTER`子句。
- en: FILTER
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FILTER
- en: 'Another very interesting feature of Modern SQL is the `FILTER` clause. It makes
    it possible to add `WHERE` clauses to aggregation functions. Let''s try the `FILTER`
    clause by executing the following query in the SQL tab of the test database in
    the `phpPgAdmin` interface:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现代SQL的另一个非常有趣的功能是`FILTER`子句。它可以将`WHERE`子句添加到聚合函数中。让我们通过在`phpPgAdmin`界面的test数据库的SQL选项卡中执行以下查询来尝试`FILTER`子句：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You should get the following result:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会得到以下结果：
- en: '![](assets/a84067cb-b25f-4409-bf2b-cdf8e447095a.png)Result set of the query
    containing the FILTER statement'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a84067cb-b25f-4409-bf2b-cdf8e447095a.png)包含FILTER语句的查询结果集'
- en: The `FILTER` clause is great for generating reports without adding too much
    overhead in the query's `WHERE` clauses.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`FILTER`子句非常适合在查询的`WHERE`子句中生成报表而不会增加太多开销。'
- en: Moreover, a `FILTER` clause is great for pivot tables, where grouping by year
    and month is made more complicated by the fact that it is necessary to generate
    a report that must cross month and year on two different axes (month = *x* and
    year = *y*, for example).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`FILTER`子句非常适合数据透视表，其中按年和月进行分组更加复杂，因为必须生成一个跨越月份和年份的报表，这在两个不同的轴上（例如月份=*x*和年份=*y*）变得更加复杂。
- en: Let's continue with the last Modern SQL feature, `LATERAL` queries.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续讨论最后一个现代SQL功能，`LATERAL`查询。
- en: LATERAL queries
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LATERAL查询
- en: '`LATERAL` queries allow you to select more than one column and one row in a
    correlated subquery. This is very useful when creating Top-N subqueries and trying
    to join table functions together, thus making unnesting them a clear possibility.
    The `LATERAL` query can then be thought of as a sort of SQL `foreach` loop.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`LATERAL`查询允许您在相关子查询中选择多个列和一行以上。在创建Top-N子查询并尝试将表函数连接在一起时，这非常有用，从而使得解除嵌套成为可能。然后，可以将`LATERAL`查询视为一种SQL
    `foreach`循环。'
- en: 'Let''s give a simple example that would illustrate how a `LATERAL` query would
    work. Let''s say that we have two hypothetical tables that contain data on films
    and actors:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个简单的例子来说明`LATERAL`查询是如何工作的。假设我们有两个假想的包含有关电影和演员数据的表：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As we can see, the `LATERAL` subquery is selecting multiple columns from the
    actor table `(actor.name and actor.biography)` while still being able to correlate
    references from the film table `(film.id)`. Many optimizations, whether it be
    performance optimizations or code readability and maintainability, become a real
    possibility with `LATERAL` queries.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`LATERAL`子查询从演员表中选择了多列（actor.name和actor.biography），同时仍然能够与电影表（film.id）相关联。许多优化，无论是性能优化还是代码可读性和可维护性，都成为了使用`LATERAL`查询的真正可能性。
- en: For further information on Modern SQL, I invite you to consult *Markus Winand*'s
    excellent website ([https://modern-sql.com](https://modern-sql.com)), and listen
    to *Elizabeth Smith*'s great presentation on this topic at *Nomad PHP* ([https://nomadphp.com/product/modern-sql/](https://nomadphp.com/product/modern-sql/)).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有关现代SQL的更多信息，我邀请您查阅Markus Winand的优秀网站（https://modern-sql.com），并收听Elizabeth Smith在Nomad
    PHP上关于这个主题的精彩演讲（https://nomadphp.com/product/modern-sql/）。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to query an SQL database efficiently using
    Modern SQL. We have defined what Modern SQL is and how we can use it. We have
    acquired knowledge of how to convert certain traditional SQL queries into modern
    ones and when it is best to do so. Moreover, by doing so, we now better understand
    how Modern SQL can help us optimize a server's performance in more than one way.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用现代SQL高效地查询SQL数据库。我们定义了现代SQL是什么，以及我们如何使用它。我们学会了如何将某些传统的SQL查询转换为现代查询，以及何时最好这样做。此外，通过这样做，我们现在更好地理解了现代SQL如何帮助我们以多种方式优化服务器的性能。
- en: In the next chapter, we will cover a few of JavaScript’s best and worst parts,
    especially those that pertain to code efficiency and overall performance, and
    how a developer should always write safe, reliable and highly efficient JavaScript
    code, mostly by avoiding *danger-driven development*.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些JavaScript的优点和缺点，特别是与代码效率和整体性能有关的部分，以及开发人员应该如何始终编写安全、可靠和高效的JavaScript代码，主要是通过避免“危险驱动开发”。
