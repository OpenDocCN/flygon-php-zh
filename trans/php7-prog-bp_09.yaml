- en: Chapter 9.  Reactive Extensions in PHP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。PHP中的响应式扩展
- en: 'In this chapter, we''ll talk about Reactive extensions in PHP, a PHP library
    that allows PHP programmers to work with PHP in a reactive manner, and how to
    use in event, also known as publish-subscribe programming. We''ll also discuss
    the idea of functional programming in PHP and how to program in a more succinct
    way. We will also discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论PHP中的响应式扩展，这是一个允许PHP程序员以响应式方式使用PHP的库，以及如何在事件中使用，也称为发布-订阅编程。我们还将讨论PHP中的函数式编程的概念以及如何以更简洁的方式进行编程。我们还将讨论以下主题：
- en: Map
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射
- en: Reduce
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少
- en: Defer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟
- en: 'Reactive extensions in the following use cases:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是响应式扩展的使用案例：
- en: Data analysis of logs (parsing Apache logs)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志数据分析（解析Apache日志）
- en: Queueing systems (asynchronously working through a queue of tasks)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排队系统（异步处理任务队列）
- en: Events
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件
- en: Reactive extensions are a way to code in a functional way using PHP. They are
    a set of libraries (available on GitHub at [https://github.com/ReactiveX/RxPHP](https://github.com/ReactiveX/RxPHP))
    that can help you compose event-based programs by using observable collections
    and LINQ-style query operators in PHP.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式扩展是使用PHP以函数式方式编码的一种方式。它们是一组库（在GitHub上可用，网址为[https://github.com/ReactiveX/RxPHP](https://github.com/ReactiveX/RxPHP)），可以帮助您使用PHP中的可观察集合和LINQ风格的查询操作来组合基于事件的程序。
- en: An introduction to observables
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可观察对象的介绍
- en: In short, you will be doing event-driven programming, where you will work with
    what's called as the event loop, and attaching (hooking up) events to do your
    bidding.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，您将进行事件驱动的编程，其中您将使用所谓的事件循环，并附加（连接）事件来执行您的命令。
- en: Installation is a simple composer that is required is all.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安装只需要一个简单的composer。
- en: How does Reactive PHP work? In PHP, there is no such way to create a server
    except when running the code `php -S localhost:8000`. PHP will treat the current
    directory as the basis of the public directory (in Apache, usually this is `/var/www`
    or `C:/xampp/htdocs` when using  **XAMPP**). This, by the way, has been available
    since PHP 5.4.0 only and also works with PHP 7.x.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式PHP是如何工作的？在PHP中，除了运行代码`php -S localhost:8000`之外，没有其他方式来创建服务器。PHP将当前目录视为公共目录的基础（在Apache中，通常是`/var/www`或使用**XAMPP**时为`C:/xampp/htdocs`）。顺便说一句，这仅在PHP
    5.4.0之后才可用，也适用于PHP 7.x。
- en: There is no programmable way to control how that PHP command-line interface's
    server actually works.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 没有可编程的方式来控制PHP命令行界面服务器的实际工作方式。
- en: Every time you send a request to that server, PHP server will be in charge of
    handling whether it's a valid request, and handle the event by itself. In short,
    every request is a new request-there's no streaming or events that get involved.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每次向该服务器发送请求时，PHP服务器将负责处理它是否是有效请求，并自行处理事件。简而言之，每个请求都是一个新请求-没有涉及流或事件。
- en: '**RxPHP** works by creating an event loop by creating a PHP stream under the
    hood, which has added functions that help make **Reactive Programming** possible.
    The stream basically has a recursive function (a function that keeps calling itself
    and creates a loop of commands, in essence). An event loop is basically a programming
    construct that runs an infinite loop, which simply waits for events and be able
    to react (in other words, run some function) to each of those events.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**RxPHP**通过在底层创建一个PHP流来创建事件循环，该流具有帮助使**响应式编程**成为可能的附加函数。该流基本上具有一个递归函数（一个不断调用自身并创建命令循环的函数）。事件循环基本上是一个编程构造，运行一个无限循环，简单地等待事件并能够对每个事件做出反应（换句话说，运行一些函数）。'
- en: Introduction to event loop and ReactiveX
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件循环和ReactiveX的介绍
- en: The best way to get acquainted with event loop is through a popular library
    in the JavaScript world, that is, jQuery.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉事件循环的最佳方法是通过JavaScript世界中的一个流行库，即jQuery。
- en: If you have experience working with jQuery, you can simply create (or chain)
    events to a simple DOM selector and then write code to handle those specific events.
    For example, you could create an `onClick` event by attaching it to a specific
    link and then code what will happen when that link is clicked.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有使用jQuery的经验，您可以简单地创建（或链接）事件到一个简单的DOM选择器，然后编写代码来处理这些特定事件。例如，您可以通过将其附加到特定链接上创建一个`onClick`事件，然后编写当单击该链接时会发生什么的代码。
- en: 'If you''re familiar with jQuery, the code to control a link that has the ID
    `someLink` would look something like the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉jQuery，控制具有ID`someLink`的链接的代码将如下所示：
- en: 'HTML:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: HTML：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'JavaScript:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding code snippet, every time jQuery finds an element with an ID
    of `someLink`, it will do something on each click event.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，每当jQuery找到一个ID为`someLink`的元素时，它将在每次单击事件上执行某些操作。
- en: As it is in an event loop, it will loop over each *iteration* of the event loop
    and work on what needs to be done.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它在事件循环中，它将循环遍历事件循环的每个*迭代*并处理需要完成的工作。
- en: However, it is a little bit different in Reactive Programming, which is a form
    of functional programming. Functional programming is about keeping functions as
    pure as possible and does not have side effects. Another aspect of functional
    programming is immutability, but we'll discuss that in another part.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在响应式编程中有一点不同，它是函数式编程的一种形式。函数式编程是关于尽可能保持函数的纯净，不产生副作用。函数式编程的另一个方面是不可变性，但我们将在另一个部分讨论这一点。
- en: In Reactive Programming, we basically have the concept of **Observables** and
    **Observers**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应式编程中，我们基本上有**可观察对象**和**观察者**的概念。
- en: An Observable emits events in the form of data, and an Observer subscribes to
    the Observable in order to receive its events.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可观察对象以数据形式发出事件，观察者订阅可观察对象以接收其事件。
- en: The point of programming using Reactive extensions is to be able to program
    in a more *functional* manner. Instead of programming a `while`, `for` loop we
    instead invoke an event loop, which will track the Observers and their Observables
    (subscribers). The good thing about programming in this way is that there is a
    way to treat data as data that streams into your program over time. By feeding
    information this way, we can now make event-based or event-driven programs, where
    your code will react.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用响应式扩展进行编程的重点是能够以更*功能化*的方式进行编程。我们不再编写`while`、`for`循环，而是调用一个事件循环，它将跟踪观察者和它们的Observable（订阅者）。以这种方式提供信息的好处是，现在可以制作基于事件或事件驱动的程序，其中您的代码将做出反应。
- en: With this you can create programs that run forever in the background and just
    Reactive extensions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，你可以创建在后台永远运行的程序，只是响应式扩展。
- en: 'Let''s discuss some available functions of Reactive extensions:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一些响应式扩展的可用函数：
- en: delay
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟
- en: defer
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟
- en: scheduler
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度器
- en: recursive-scheduler
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归调度器
- en: '`map` and `flatMap`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`map`和`flatMap`'
- en: reduce
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少
- en: toArray
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换为数组
- en: merge
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并
- en: do
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 做
- en: scan
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描
- en: zip
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩
- en: delay
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟
- en: 'The `delay` function in RxPHP is used as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在RxPHP中，`delay`函数的使用如下：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, we create an `EventLoopScheduler`, which will help us
    schedule the execution of code by an interval of 1,000 milliseconds. The delay
    function is given 500 milliseconds to execute, and a take function will only take
    5 milliseconds before finally subscribing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个`EventLoopScheduler`，它将帮助我们按1000毫秒的间隔安排代码的执行。延迟函数被给予500毫秒来执行，take函数将在最终订阅之前只花费5毫秒。
- en: defer
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟
- en: 'The  `defer` function waits for *X* number of iterations before doing what
    is to be done:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`defer`函数在执行之前等待*X*次迭代才会执行：'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, we create an Observable object, which will return 42
    when the `defer` function is called. The `defer` function s a type of promise
    and returns an Observable, and the code inside it will be executed in an asynchronous
    manner. When the Observable is subscribed to, the functions are in a way *tied*
    together or *bound* to each other and then get *invoked* or *triggered*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个Observable对象，当调用`defer`函数时，它将返回42。`defer`函数是一种承诺类型，返回一个Observable，其中的代码将以异步方式执行。当Observable被订阅时，函数以一种方式*绑定*在一起，然后被*调用*或*触发*。
- en: What is an Observable, you might ask? In ReactiveX, an Observer subscribes to
    an Observable. An Observer then reacts to whatever item or sequence of items that
    the Observable emits.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，什么是Observable？在ReactiveX中，观察者订阅Observable。然后观察者对Observable发出的任何项或序列做出反应。
- en: This means that when you have a bunch of events that are being sent to your
    application, but handle them in an asynchronous manner, meaning not necessarily
    in the order that they may have come in.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当您的应用程序收到一堆事件，但以异步方式处理它们时，不一定按照它们可能到达的顺序处理它们。
- en: In the preceding code, `stdoutObserver` is an observer that puts out whatever
    is in the event loop or the Observable into the `stdout` or console log.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`stdoutObserver`是一个观察者，它将事件循环或Observable中的任何内容输出到`stdout`或控制台日志中。
- en: Scheduler
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调度器
- en: 'Schedulers work with three main components: an execution context, which is
    the ability to *do* the job given to it; the execution policy is *how* it will
    be ordered; and there''s the clock or timer or the underlying system which measures
    time, which is needed to schedule *when* it will be executed.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器与三个主要组件一起工作：执行上下文，即执行给定任务的能力；执行策略是*如何*它将被排序；还有时钟或计时器或测量时间的基础系统，这是需要安排*何时*执行的。
- en: 'The scheduler code is used as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器代码的使用方式如下：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It basically creates an `eventScheduler`, which executes the event loop and
    parameterizes the concurrency level. A simple scheduler within RxPHP is used in
    the preceding delay.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上创建了一个`eventScheduler`，执行事件循环并对并发级别进行参数化。在前面的延迟中使用了RxPHP中的简单调度器。
- en: recursive-scheduler
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归调度器
- en: 'This is how the recursive-scheduler function is used:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是递归调度函数的使用方式：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code works by adding several scheduler timers, which then recursively
    or repeatedly return an Observable and then subscribe to it afterward. The preceding
    code will generate 21 Observables.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码通过添加几个调度器定时器，然后递归或重复返回一个Observable，然后订阅它。前面的代码将生成21个Observables。
- en: 'Here''s what happens after 1 second:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 1秒后发生了什么：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After this, it will dispose the Observables and finally print out the memory
    usage:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，它将处理Observables并最终打印出内存使用情况：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: map and flatMap
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射和扁平映射
- en: A `map` is a simple function that takes another function and loops through or
    iterates through a bunch of elements (an Array), and applies or invokes the function
    passed into each of those elements.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`map`是一个简单的函数，它接受另一个函数并循环遍历一堆元素（一个数组），并对每个元素应用或调用传递给这些元素的函数。'
- en: A `flatMap`, on the other hand, subscribes to the Observable as well, meaning
    that you no longer have to take care of.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`flatMap`也订阅Observable，这意味着您不再需要关心。
- en: reduce
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减少
- en: The `reduce` function simply applies a function to Observables coming in. In
    short, it takes a bunch of Observables and applies a function to all of them in
    a sequential manner, applying one to the next result.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`reduce`函数简单地将一个函数应用于传入的Observables。简而言之，它接受一堆Observables，并以顺序方式将函数应用于所有这些Observables，将一个应用于下一个结果。'
- en: 'Here is an example of how to use a `reduce` function:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用`reduce`函数的示例：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: toArray
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换为数组
- en: 'The `toArray` function lets you manipulate Observables and create an array
    from them. The code to use `toArray` looks like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`toArray`函数允许您操作Observables并从中创建数组。使用`toArray`的代码如下：'
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we first create an Observable based on the Array `[1,2,3,4]`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先基于数组`[1,2,3,4]`创建了一个Observable。
- en: This allows us to work with the values of an array and subscribe to them using
    the Observer. In ReactiveX programming, every Observer only works with Observables.
    In short, the `toArray` function allows us to create Observers that subscribe
    to a source array.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够使用数组的值并使用观察者订阅它们。在ReactiveX编程中，每个观察者只能与Observables一起工作。简而言之，`toArray`函数允许我们创建订阅源数组的观察者。
- en: merge
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并
- en: The `merge` function is simply an operator that combines multiple Observables
    into one by merging their emissions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`merge`函数只是一个操作符，它通过合并它们的发射将多个Observables合并为一个。'
- en: 'Any `onError` notification from any of the source Observables will be immediately
    passed through to the Observers. This will terminate the merged Observable:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 任何源Observable的`onError`通知都将立即传递给观察者。这将终止合并的Observable：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: do
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: do
- en: 'The `do` function simply registers an action to take upon a variety of Observable
    life cycle events. Basically, you will register callbacks that ReactiveX will
    call only when certain events take place in the Observable. The callbacks will
    be called independently from the normal set of notifications. There are various
    operators that RxPHP have designed to allow this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`do`函数只是在各种Observable生命周期事件上注册一个操作。基本上，您将注册回调，ReactiveX只会在Observable中发生某些事件时调用这些回调。这些回调将独立于正常的通知集合调用。RxPHP设计了各种操作符来允许这样做：'
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: scan
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: scan
- en: 'The `scan` operator applies a function to each item that an Observable emits.
    It applies this sequentially and emits each successive value:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`scan`操作符对Observable发出的每个项目应用一个函数。它按顺序应用这个函数并发出每个连续的值：'
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is an example of `scan` without a seed:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个没有种子的`scan`的例子：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: zip
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: zip
- en: 'The `zip` method returns an Observable and applies a function of your choosing
    to the combination of items emitted in sequence. The results of this function
    will become the items emitted by the returned Observable:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`zip`方法返回一个Observable，并对按顺序发出的项目的组合应用您选择的函数。这个函数的结果将成为返回的Observable发出的项目：'
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the following sample code, we use `zip` without a result selector:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例代码中，我们使用`zip`而没有结果选择器：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Parsing logs through a Reactive scheduler
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Reactive调度程序解析日志
- en: It is difficult to just have theoretical knowledge of Reactive extensions and
    functional programming techniques and not be able to know when it can be used.
    In order to apply our knowledge, let's take a look at the following scenario.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅拥有Reactive扩展和函数式编程技术的理论知识而不知道何时可以使用它是困难的。为了应用我们的知识，让我们看看以下的情景。
- en: Let's assume we have to read an Apache log file in an asynchronous manner.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要以异步方式读取Apache日志文件。
- en: 'An Apache log line looks like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Apache日志行看起来像这样：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's dissect the parts of each line.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解每行的部分。
- en: First, we have the IP address. It has three dots in between some numbers. Second,
    we have the field that logs the domain of the server.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有IP地址。它在一些数字之间有三个点。其次，我们有记录服务器域的字段。
- en: Third, we have the date and time. Then we get the string, which says what was
    accessed and using what HTTP protocol. The status is 200, followed by the process
    ID and, finally, the name of the requestor, also known as the referrer.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，我们有日期和时间。然后我们得到一个字符串，它说访问了什么，使用了什么HTTP协议。状态码是200，后面是进程ID，最后是请求者的名称，也称为引用者。
- en: When reading the Apache logs, we just want the IP address, the URL, and the
    date and time of access, and we also want to know what browser was used.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取Apache日志时，我们只想要IP地址、URL和访问的日期和时间，还想知道使用了什么浏览器。
- en: 'We know we can dissect the data into the spaces between them, so let''s just
    change the logs into arrays split by the following method:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们可以将数据分解成它们之间的空格，所以让我们将日志改为由以下方法分割的数组：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let's add an Observable so that we can execute the preceding function asynchronously,
    meaning it will work by reading the log file every hour.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个Observable，以便我们可以异步执行前面的函数，这意味着它将通过每小时读取日志文件来工作。
- en: 'The code would look like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 代码看起来像这样：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Event queues with ReactiveX
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReactiveX中的事件队列
- en: An event queue would simply ensure that things that are to be done in a synchronous
    manner or in a first-in first-out manner. Let's define first what a queue is.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 事件队列只需确保以同步方式或先进先出方式完成的事情。让我们首先定义队列是什么。
- en: A queue is basically a list of things to do, which will get executed one by
    one until all the things in the queue have been finished.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 队列基本上是一个要做的事情列表，它将一个接一个地执行，直到队列中的所有事情都完成了。
- en: In Laravel, for example, there is already a concept of queues, where we go through
    the elements of the queue. You can find the documentation at [https://laravel.com/docs/5.0/queues](https://laravel.com/docs/5.0/queues)
    .
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel中，例如，已经有了队列的概念，我们遍历队列的元素。您可以在[https://laravel.com/docs/5.0/queues](https://laravel.com/docs/5.0/queues)找到文档。
- en: Queues are usually used in systems that need to do some tasks in order and not
    in an asynchronous function. In PHP, there is already the `SplQueue` class, which
    provides the main functionalities of a queue implemented using a doubly linked
    list.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 队列通常用于需要按顺序执行一些任务而不是在异步函数中执行的系统。在PHP中，已经有了`SplQueue`类，它使用双向链表实现了队列的主要功能。
- en: In general, queues are executed in the order that they come in. In ReactiveX,
    things are more of an asynchronous nature. In this scenario, we will implement
    a priority queue, where each task has corresponding levels of priority.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，队列按照它们的顺序执行。在ReactiveX中，事情更多的是异步的。在这种情况下，我们将实现一个优先级队列，其中每个任务都有相应的优先级。
- en: 'This is what a simple `PriorityQueue` code in ReactiveX would look like:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是ReactiveX中一个简单的`PriorityQueue`代码：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, we used the `PriorityQueue` library of RxPHP. We set
    some schedulers and queued them in a `PriorityQueue`. We gave each scheduled item
    a priority or time to spend in execution with 1 and 2\. In the preceding scenario,
    the first item will execute first because it is the first priority and has the
    shortest time (1). Finally, we remove the `ScheduledItem` just to show what's
    possible with `PriorityQueue` in the RxPHP library.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了RxPHP的`PriorityQueue`库。我们设置了一些调度程序，并将它们排入了`PriorityQueue`中。我们为每个调度的项目分配了优先级或执行时间，分别为1和2。在前面的场景中，第一个项目将首先执行，因为它具有最高的优先级并且执行时间最短（1）。最后，我们移除了`ScheduledItem`，只是为了展示在RxPHP库中`PriorityQueue`的可能性。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: You learned to work with the Reactive extensions library, RxPHP. Reactive Programming
    is all about using Observables and Observers, which is similar to working with
    subscribers and publishers.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您学会了如何使用响应式扩展库RxPHP。响应式编程主要是使用Observables和Observers，这类似于使用订阅者和发布者进行工作。
- en: You learned how to use `delay`, `defer`, `map`, and `flatMap`, among other operators,
    and how to use a scheduler.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您学会了如何使用`delay`、`defer`、`map`和`flatMap`等操作符，以及如何使用调度程序。
- en: You also learned how to read an Apache log file and schedule it to read after
    every hour and how to work with RxPHP's `PriorityQueue` class.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您还学会了如何读取Apache日志文件并安排在每小时后进行读取，以及如何使用RxPHP的`PriorityQueue`类。
