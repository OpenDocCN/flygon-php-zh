["```php\n// /repo/ch02/php7_variadic_params.php\nfunction multiVardump(...$args) {\n\u00a0\u00a0\u00a0\u00a0$output = '';\n\u00a0\u00a0\u00a0\u00a0foreach ($args as $var)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$output .= var_export($var, TRUE);\n\u00a0\u00a0\u00a0\u00a0return $output;\n}\n$a = new ArrayIterator(range('A','F'));\n$b = function (string $val) { return str_rot13($val); };\n$c = [1,2,3];\n$d = 'TEST';\necho multiVardump($a, $b, $c);\necho multiVardump($d);\n```", "```php\n// ch02/includes/php7_sql_lib.php\n// other functions not shown\nfunction where(stdClass $obj, $a, $b = '', $c = '', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$d = '') {\n\u00a0\u00a0\u00a0\u00a0$obj->where[] = $a;\n\u00a0\u00a0\u00a0\u00a0$obj->where[] = $b;\n\u00a0\u00a0\u00a0\u00a0$obj->where[] = $c;\n\u00a0\u00a0\u00a0\u00a0$obj->where[] = $d;\n}\n```", "```php\n// /repo/ch02/php7_variadics_sql.php\nrequire_once __DIR__ . '/includes/php7_sql_lib.php';\n$start = '2021-01-01';\n$end\u00a0\u00a0\u00a0= '2021-04-01';\n$select = new stdClass();\nfrom($select, 'events');\ncols($select, ['id', 'event_key', \n\u00a0\u00a0\u00a0\u00a0'event_name', 'event_date']);\nlimit($select, 10);\nwhere($select, 'event_date', '>=', \"'$start'\");\nwhere($select, 'AND');\nwhere($select, 'event_date', '<', \"'$end'\");\n$sql = render($select);\n// remaining code not shown\n```", "```php\n// ch02/includes/php8_sql_lib.php\n// other functions not shown\nfunction where(stdClass $obj, ...$args) {\n\u00a0\u00a0\u00a0\u00a0$obj->where = (empty($obj->where))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? $args\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: array_merge($obj->where, $args);\n}\n```", "```php\n// /repo/ch02/php8_variadics_sql.php\nrequire_once __DIR__ . '/includes/sql_lib2.php';\n$start = '2021-01-01';\n$end\u00a0\u00a0\u00a0= '2021-04-01';\n$select = new stdClass();\nfrom($select, 'events');\ncols($select, ['id', 'event_key', \n\u00a0\u00a0\u00a0\u00a0'event_name', 'event_date']);\nlimit($select, 10);\nwhere($select, 'event_date', '>=', \"'$start'\", \n\u00a0\u00a0\u00a0\u00a0'AND', 'event_date', '<', \"'$end'\");\n$sql = render($select);\n// remaining code not shown\n```", "```php\nSELECT id,event_key,event_name,event_date \nFROM events \nWHERE event_date >= '2021-01-01' \n\u00a0\u00a0\u00a0\u00a0AND event_date <= '2021-04-01' \nLIMIT 10\n```", "```php\n// src/Php7/Sql/Where.php\nnamespace Php7\\Sql;\nclass Where {\n\u00a0\u00a0\u00a0\u00a0public $where = [];\n\u00a0\u00a0\u00a0\u00a0public function where($a, $b = '', $c = '', $d = '') {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->where[] = $a;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->where[] = $b;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->where[] = $c;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->where[] = $d;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0// other code not shown\n}\n```", "```php\n// src/Php7/Sql/Select.php\nnamespace Php7\\Sql;\nclass Select extends Where {\n\u00a0\u00a0\u00a0\u00a0public function where(...$args)\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->where = (empty($obj->where))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? $args\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: array_merge($obj->where, $args);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0// other code not shown\n}\n```", "```php\n// /repo/ch02/php7_variadics_problem.php\nrequire_once __DIR__ . '/../src/Server/Autoload/Loader.php'\n$loader = new \\Server\\Autoload\\Loader();\nuse Php7\\Sql\\Select;\n$start = \"'2021-01-01'\";\n$end\u00a0\u00a0\u00a0= \"'2021-04-01'\";\n$select = new Select();\n$select->from($select, 'events')\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->cols($select, ['id', 'event_key', \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'event_name', 'event_date'])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->limit($select, 10)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->where($select, 'event_date', '>=', \"'$start'\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'AND', 'event_date', '<=', \"'$end'\");\n$sql = $select->render();\n// other code not shown\n```", "```php\nWarning: Declaration of Php7\\Sql\\Select::where(...$args) should be compatible with Php7\\Sql\\Where::where($a, $b = '', $c = '', $d = '') in /repo/src/Php7/Sql/Select.php on line 5 \n```", "```php\n<?xml version='1.0' standalone='yes'?>\n<produce>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<file>/repo/ch02/includes/produce.xml</file>\n\u00a0\u00a0\u00a0\u00a0<dept>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<fruit>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<apple>11</apple>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<banana>22</banana>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<cherry>33</cherry>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</fruit>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<vegetable>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<artichoke>11</artichoke>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<beans>22</beans>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<cabbage>33</cabbage>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</vegetable>\n\u00a0\u00a0\u00a0\u00a0</dept>\n</produce>\n```", "```php\n// /repo/ch02/php7_nullsafe_xml.php\n$xml = simplexml_load_file(__DIR__ . \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'/includes/produce.xml');\n$produce = [\n\u00a0\u00a0\u00a0\u00a0'fruit' => ['apple','banana','cherry','pear'],\n\u00a0\u00a0\u00a0\u00a0'vegetable' => ['artichoke','beans','cabbage','squash']\n];\n$pattern = \"%10s : %d\\n\";\nforeach ($produce as $type => $items) {\n\u00a0\u00a0\u00a0\u00a0echo ucfirst($type) . \":\\n\";\n\u00a0\u00a0\u00a0\u00a0foreach ($items as $item) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$qty = getQuantity($xml, $type, $item);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf($pattern, $item, $qty);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```php\nfunction getQuantity(SimpleXMLElement $xml, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string $type, string $item {\n\u00a0\u00a0\u00a0\u00a0$qty = 0;\n\u00a0\u00a0\u00a0\u00a0if (!empty($xml->dept)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!empty($xml->dept->$type)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!empty($xml->dept->$type->$item)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$qty = $xml->dept->$type->$item;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return $qty;\n}\n```", "```php\n// /repo/ch02/php8_nullsafe_xml.php\n$xml = simplexml_load_file(__DIR__ . \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'/includes/produce.xml'\n$produce = [\n\u00a0\u00a0\u00a0\u00a0'fruit' => ['apple','banana','cherry','pear']\n\u00a0\u00a0\u00a0\u00a0'vegetable' => ['artichoke','beans','cabbage','squash']\n];\n$pattern = \"%10s : %d\\n\";\nforeach ($produce as $type => $items) {\n\u00a0\u00a0\u00a0\u00a0echo ucfirst($type) . \":\\n\";\n\u00a0\u00a0\u00a0\u00a0foreach ($items as $item) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf($pattern, $item, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$xml?->dept?->$type?->$item);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```php\n// ch02/includes/nullsafe_config.php\nreturn new class() {\n\u00a0\u00a0\u00a0\u00a0const HEADERS = ['Name','Amt','Age','ISO','Company'];\n\u00a0\u00a0\u00a0\u00a0const PATTERN = \"%20s | %16s | %3s | %3s | %s\\n\";\n\u00a0\u00a0\u00a0\u00a0public function json($fn) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$json = file_get_contents($fn);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return json_decode($json, TRUE);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public function csv($fn) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$arr = [];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fh = new SplFileObject($fn, 'r');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while ($node = $fh->fgetcsv()) $arr[] = $node;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $arr;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public function txt($fn) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$arr = [];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fh = new SplFileObject($fn, 'r');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while ($node = $fh->fgets())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$arr[] = explode(\"\\t\", $node);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $arr;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0// all code not shown\n};\n```", "```php\n\u00a0\u00a0\u00a0\u00a0public function display(array $data) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$total\u00a0\u00a0= 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vprintf(self::PATTERN, self::HEADERS);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach ($data as $row) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$total += $row[1];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$row[1] = number_format($row[1], 0);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$row[2] = (string) $row[2];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vprintf(self::PATTERN, $row);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo 'Combined Wealth: ' \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. number_format($total, 0) . \"\\n\"\n\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\u00a0\n```", "```php\n// /repo/ch02/php7_nullsafe_short.php\n$config\u00a0\u00a0= include __DIR__ . \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'/includes/nullsafe_config.php';\n$allowed = ['csv' => 'csv','json' => 'json','txt'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> 'txt'];\n$format\u00a0\u00a0= $_GET['format'] ?? 'txt';\n$ext\u00a0\u00a0\u00a0\u00a0\u00a0= $allowed[$format] ?? 'txt';\n$fn\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0= __DIR__ . '/includes/nullsafe_data.' . $ext;\nif (file_exists($fn)) {\n\u00a0\u00a0\u00a0\u00a0if (is_object($config)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (method_exists($config, 'display')) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (method_exists($config, $ext)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$config->display($config->$ext($fn));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```php\n// /repo/ch02/php8_nullsafe_short.php\n$config\u00a0\u00a0= include __DIR__ . \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'/includes/nullsafe_config.php';\n$allowed = ['csv' => 'csv','json' => 'json',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'txt' => 'txt'];\n$format\u00a0\u00a0= $_GET['format'] ?? $argv[1] ?? 'txt';\n$ext\u00a0\u00a0\u00a0\u00a0\u00a0= $allowed[$format] ?? 'txt';\n$fn\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0= __DIR__ . '/includes/nullsafe_data.' . $ext;\nif (file_exists($fn)) {\n\u00a0\u00a0\u00a0\u00a0$config?->display($config->$ext($fn));\n}\n```", "```php\n// /repo/ch02/php7_ops_concat_1.php\n$a = 11;\n$b = 22;\necho \"Sum: \" . $a + $b;\n```", "```php\nroot@php8_tips_php7 [ /repo/ch02 ]# php php7_ops_concat_1.php\nPHP Warning:\u00a0\u00a0A non-numeric value encountered in /repo/ch02/php7_ops_concat_1.php on line 5\nPHP Stack trace:\nPHP\u00a0\u00a0\u00a01\\. {main}() /repo/ch02/php7_ops_concat_1.php:0\nWarning: A non-numeric value encountered in /repo/ch02/php7_ops_concat_1.php on line 5\nCall Stack:\n\u00a0\u00a00.0001\u00a0\u00a0\u00a0\u00a0\u00a0345896\u00a0\u00a0\u00a01\\. {main}()\n22\n```", "```php\nroot@php8_tips_php8 [ /repo/ch02 ]# php php8_ops_concat_1.php \nSum: 33\n```", "```php\n    // /repo/ch02/php7_nested_ternary.php\n    $path = realpath(__DIR__ . '/..');\n    $searchPath = '/ch';\n    $searchExt\u00a0\u00a0= 'php';\n    $dirIter\u00a0\u00a0\u00a0\u00a0= new RecursiveDirectoryIterator($path);\n    $itIter\u00a0\u00a0\u00a0\u00a0\u00a0= new RecursiveIteratorIterator($dirIter);\n    ```", "```php\n    function find_using_if($iter, $searchPath, $searchExt) {\n    \u00a0\u00a0\u00a0\u00a0$matching\u00a0\u00a0= [];\n    \u00a0\u00a0\u00a0\u00a0$non_match = [];\n    \u00a0\u00a0\u00a0\u00a0$discard\u00a0\u00a0\u00a0= [];\n    \u00a0\u00a0\u00a0\u00a0foreach ($iter as $name => $obj) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!$obj->isFile()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$discard[] = $name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} elseif (!strpos($name, $searchPath)) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$discard[] = $name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} elseif ($obj->getExtension() !== $searchExt) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$non_match[] = $name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$matching[] = $name;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0show($matching, $non_match);\n    }\n    ```", "```php\n    function find_using_tern($iter, $searchPath, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$searchExt){\n    \u00a0\u00a0\u00a0\u00a0$matching\u00a0\u00a0= [];\n    \u00a0\u00a0\u00a0\u00a0$non_match = [];\n    \u00a0\u00a0\u00a0\u00a0$discard\u00a0\u00a0\u00a0= [];\n    \u00a0\u00a0\u00a0\u00a0foreach ($iter as $name => $obj) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$match = !$obj->isFile()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? $discard[] = $name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: !strpos($name, $searchPath)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? $discard[] = $name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: $obj->getExtension() !== $searchExt\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? $non_match[] = $name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: $matching[] = $name;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0show($matching, $non_match);\n    }\n    ```", "```php\n// /repo/ch02/php8_arrow_func_1.php\n$addOld = function ($a, $b) { return $a + $b; };\n```", "```php\n// /repo/ch02/php8_arrow_func_2.php\n// not all code shown\n$old = function ($today) use ($format) {\n\u00a0\u00a0\u00a0\u00a0return $today->format($format);\n};\n```", "```php\n    // /repo/ch02/php8_arrow_func_3.php\n    function genKey(int $size) {\n    \u00a0\u00a0\u00a0\u00a0$alpha1\u00a0\u00a0= range('A','Z');\n    \u00a0\u00a0\u00a0\u00a0$alpha2\u00a0\u00a0= range('a','z');\n    \u00a0\u00a0\u00a0\u00a0$special = '!@#$%^&*()_+,./[]{}|=-';\n    \u00a0\u00a0\u00a0\u00a0$len\u00a0\u00a0\u00a0\u00a0\u00a0= strlen($special) - 1;\n    \u00a0\u00a0\u00a0\u00a0$numeric = range(0, 9);\n    \u00a0\u00a0\u00a0\u00a0$text\u00a0\u00a0\u00a0\u00a0= '';\n    \u00a0\u00a0\u00a0\u00a0for ($x = 0; $x < $size; $x++) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$algo = rand(1,4);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$func = match ($algo) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01 => fn() => $alpha1[array_rand($alpha1)],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02 => fn() => $alpha2[array_rand($alpha2)]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03 => fn() => $special[rand(0,$len)],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04 => fn() => \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$numeric[array_rand($numeric)],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default => fn() => ' '\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$text .= $func();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return $text;\n    }\n    ```", "```php\n    function textCaptcha(string $text) {\n    \u00a0\u00a0\u00a0\u00a0$algos = ['upper','lower','bold',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'italics','large','small'];\n    \u00a0\u00a0\u00a0\u00a0$color = ['#EAA8A8','#B0F6B0','#F5F596',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'#E5E5E5','white','white'];\n    \u00a0\u00a0\u00a0\u00a0$lgSpan = '<span style=\"font-size:32pt;\">';\n    \u00a0\u00a0\u00a0\u00a0$smSpan = '<span style=\"font-size:8pt;\">';\n    \u00a0\u00a0\u00a0\u00a0shuffle($algos);\n    \u00a0\u00a0\u00a0\u00a0shuffle($color);\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0$bkgTmp = new ArrayIterator($color);\n    \u00a0\u00a0\u00a0\u00a0$bkgIter = new InfiniteIterator($bkgTmp);\n    \u00a0\u00a0\u00a0\u00a0$algoTmp = new ArrayIterator($algos);\n    \u00a0\u00a0\u00a0\u00a0$algoIter = new InfiniteIterator($algoTmp);\n    \u00a0\u00a0\u00a0\u00a0$len = strlen($text);\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0$captcha = '';\n    \u00a0\u00a0\u00a0\u00a0for ($x = 0; $x < $len; $x++) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$char = $text[$x];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bkg\u00a0\u00a0= $bkgIter->current();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$algo = $algoIter->current();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$func = match ($algo) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'upper'\u00a0\u00a0\u00a0=> fn() => strtoupper($char),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'lower'\u00a0\u00a0\u00a0=> fn() => strtolower($char),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'bold'\u00a0\u00a0\u00a0\u00a0=> fn() => \"<b>$char</b>\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'italics' => fn() => \"<i>$char</i>\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'large'\u00a0\u00a0\u00a0=> fn() => $lgSpan \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. $char . '</span>',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'small'\u00a0\u00a0\u00a0=> fn() => $smSpan \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. $char . '</span>',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default\u00a0\u00a0\u00a0=> fn() => $char\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$captcha .= '<span style=\"background-color:' \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. $bkg . ';\">' \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. $func() . '</span>';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$algoIter->next();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bkgIter->next();\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return $captcha;\n    }\n    ```", "```php\n    $text = genKey(8);\n    echo \"Original: $text<br />\\n\";\n    echo 'Captcha : ' . textCaptcha($text) . \"\\n\";\n    ```", "```php\n// /repo/ch02/php7_dereference_1.php\n$alpha = range('A','Z');\necho $alpha[15] . $alpha[7] . $alpha[15];\n// output: PHP\n```", "```php\n// /repo/ch02/php8_dereference_2.php\n$alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n$num\u00a0\u00a0\u00a0= '0123456789';\n$test\u00a0\u00a0= [15, 7, 15, 34];\nforeach ($test as $pos)\n\u00a0\u00a0\u00a0\u00a0echo \"$alpha$num\"[$pos];\n```", "```php\nroot@php8_tips_php7 [ /repo/ch02 ]# php php7_dereference_2.php \nPHP Parse error:\u00a0\u00a0syntax error, unexpected '[', expecting ',' or ';' in /repo/ch02/php7_dereference_2.php on line 7\nParse error: syntax error, unexpected '[', expecting ',' or ';' in /repo/ch02/php7_dereference_2.php on line 7\n```", "```php\nroot@php8_tips_php8 [ /repo/ch02 ]# php php8_dereference_2.php \nPHP8\n```", "```php\n// /repo/ch02/php8_dereference_3.php\ndefine('FILENAME', __FILE__);\necho FILENAME[-3] . FILENAME[-2] . FILENAME[-1];\necho __FILE__[-3] . __FILE__[-2] . __FILE__[-1];\n```", "```php\nroot@php8_tips_php7 [ /repo/ch02 ]# php php7_dereference_3.php\nPHP Parse error:\u00a0\u00a0syntax error, unexpected '[', expecting ',' or ';' in /repo/ch02/php7_dereference_3.php on line 7\nParse error: syntax error, unexpected '[', expecting ',' or ';' in /repo/ch02/php7_dereference_3.php on line 7\n```", "```php\nroot@php8_tips_php8 [ /repo/ch02 ]# php php8_dereference_3.php\nphpphp\n```", "```php\nclass JsonResponse {\n\u00a0\u00a0\u00a0\u00a0public static function render($data) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return json_encode($data, JSON_PRETTY_PRINT);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```php\nclass SerialResponse {\n\u00a0\u00a0\u00a0\u00a0public static function render($data) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return serialize($data);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```php\nclass Test {\n\u00a0\u00a0\u00a0\u00a0const JSON = ['JsonResponse'];\n\u00a0\u00a0\u00a0\u00a0const TEXT = 'SerialResponse';\n\u00a0\u00a0\u00a0\u00a0public static function getJson($data) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo self::JSON[0]::render($data);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0public static function getText($data) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo self::TEXT::render($data);\n\u00a0\u00a0\u00a0\u00a0}\n}\n```", "```php\nroot@php8_tips_php7 [ /repo/ch02 ]# php php7_dereference_4.php PHP Parse error:\u00a0\u00a0syntax error, unexpected '::' (T_PAAMAYIM_NEKUDOTAYIM), expecting ',' or ';' in /repo/ch02/php7_dereference_4.php on line 26\nParse error: syntax error, unexpected '::' (T_PAAMAYIM_NEKUDOTAYIM), expecting ',' or ';' in /repo/ch02/php7_dereference_4.php on line 26\n```", "```php\nroot@php8_tips_php8 [ /repo/ch02 ]# php php8_dereference_4.php\n{\n\u00a0\u00a0\u00a0\u00a0\"A\": 111,\n\u00a0\u00a0\u00a0\u00a0\"B\": 222,\n\u00a0\u00a0\u00a0\u00a0\"C\": 333}\na:3:{s:1:\"A\";i:111;s:1:\"B\";i:222;s:1:\"C\";i:333;}\n```", "```php\n// /repo/ch02/php7_arbitrary_exp.php\n$nav = [\n\u00a0\u00a0\u00a0\u00a0'home'\u00a0\u00a0\u00a0\u00a0\u00a0=> 'home.html',\n\u00a0\u00a0\u00a0\u00a0'about'\u00a0\u00a0\u00a0\u00a0=> 'about.html',\n\u00a0\u00a0\u00a0\u00a0'services' => 'services/index.html',\n\u00a0\u00a0\u00a0\u00a0'support'\u00a0\u00a0=> 'support/index.html',\n];\n$html = __DIR__ . '/../includes/'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. $nav[$_GET['page'] ?? 'home'];\n```", "```php\n// /repo/ch02/php8_arbitrary_exp_new.php\n// definition of the JsonRespone and SerialResponse\n// classes are shown above\n$allowed = [\n\u00a0\u00a0\u00a0\u00a0'json' => 'JsonResponse',\n\u00a0\u00a0\u00a0\u00a0'text' => 'SerialResponse'\n];\n$data = ['A' => 111, 'B' => 222, 'C' => 333];\necho (new $allowed[$_GET['type'] ?? 'json'])\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0->render($data);\n```", "```php\n// /repo/ch02/php7_array_splice.php\n$arr\u00a0\u00a0= ['Person', 'Camera', 'TV', 'Woman', 'Man'];\n$repl = ['Female', 'Male'];\n$tmp\u00a0\u00a0= $arr;\n$out\u00a0\u00a0= array_splice($arr, 3, count($arr), $repl);\nvar_dump($arr);\n$arr\u00a0\u00a0= $tmp;\n$out\u00a0\u00a0= array_splice($arr, 3, NULL, $repl);\nvar_dump($arr);\n```", "```php\nrepo/ch02/php7_array_splice.php:11:\narray(7) {\n\u00a0\u00a0[0] =>\u00a0\u00a0string(6) \"Person\"\n\u00a0\u00a0[1] =>\u00a0\u00a0string(6) \"Camera\"\n\u00a0\u00a0[2] =>\u00a0\u00a0string(2) \"TV\"\n\u00a0\u00a0[3] =>\u00a0\u00a0string(6) \"Female\"\n\u00a0\u00a0[4] =>\u00a0\u00a0string(4) \"Male\"\n\u00a0\u00a0[5] =>\u00a0\u00a0string(5) \"Woman\"\n\u00a0\u00a0[6] =>\u00a0\u00a0string(3) \"Man\"\n}\n```", "```php\nroot@php8_tips_php8 [ /repo/ch02 ]# php php8_array_splice.php\n// some output omitted\narray(5) {\n\u00a0\u00a0[0]=>\u00a0\u00a0string(6) \"Person\"\n\u00a0\u00a0[1]=>\u00a0\u00a0string(6) \"Camera\"\n\u00a0\u00a0[2]=>\u00a0\u00a0string(2) \"TV\"\n\u00a0\u00a0[3]=>\u00a0\u00a0string(6) \"Female\"\n\u00a0\u00a0[4]=>\u00a0\u00a0string(4) \"Male\"\n}\n```", "```php\n    // /repo/ch02/php8_array_slice.php\n    ini_set('memory_limit', '1G');\n    $start = microtime(TRUE);\n    $arr\u00a0\u00a0\u00a0= [];\n    $alpha = range('A', 'Z');\n    $beta\u00a0\u00a0= $alpha;\n    $loops = 10000;\u00a0\u00a0\u00a0\u00a0\u00a0// size of outer array\n    $iters = 500;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// total iterations\n    $drip\u00a0\u00a0= 10;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// output every $drip times\n    $cols\u00a0\u00a0= 4;\n    for ($x = 0; $x < $loops; $x++)\n    \u00a0\u00a0\u00a0\u00a0foreach ($alpha as $left)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach ($beta as $right)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$arr[] = $left . $right . rand(111,999);\n    ```", "```php\n    $max = count($arr);\n    for ($x = 0; $x < $iters; $x++ ) {\n    \u00a0\u00a0\u00a0\u00a0$offset = rand(999999, $max);\n    \u00a0\u00a0\u00a0\u00a0$slice\u00a0\u00a0= array_slice($arr, $offset, 4);\n    \u00a0\u00a0\u00a0\u00a0// not all display logic is shown\n    }\n    $time = (microtime(TRUE) - $start);\n    echo \"\\nElapsed Time: $time seconds\\n\";\n    ```", "```php\n// /repo/ch02/php7_starts_ends_with.php\n$start = 'https';\nif (substr($url, 0, strlen($start)) !== $start) \n\u00a0\u00a0\u00a0\u00a0$msg .= \"URL does not start with $start\\n\";\n// not all code is shown\n```", "```php\n// /repo/ch02/php8_starts_ends_with.php\n$start = 'https';\nif (!str_starts_with($url, $start))\n\u00a0\u00a0\u00a0\u00a0$msg .= \"URL does not start with $start\\n\";\n// not all code is shown\n```", "```php\n$end = 'login';\nif (strpos(strrev($url), strrev($end)) !== 0)\n\u00a0\u00a0\u00a0\u00a0$msg .= \"URL does not end with $end\\n\";\n```", "```php\nif (!str_ends_with($url, $end))\n\u00a0\u00a0\u00a0\u00a0$msg .= \"URL does not end with $end\\n\";\n```", "```php\n// /repo/ch02/php7_str_contains.php\n$start\u00a0\u00a0\u00a0\u00a0= microtime(TRUE);\n$target\u00a0\u00a0\u00a0= '/ London /';\n$data_src = __DIR__ . '/../sample_data\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/cities15000_min.txt';\n$fileObj\u00a0\u00a0= new SplFileObject($data_src, 'r');\nwhile ($line = $fileObj->fgetcsv(\"\\t\")) {\n\u00a0\u00a0\u00a0\u00a0$tz\u00a0\u00a0\u00a0\u00a0\u00a0= $line[17] ?? '';\n\u00a0\u00a0\u00a0\u00a0if ($tz) unset($line[17]);\n\u00a0\u00a0\u00a0\u00a0$str\u00a0\u00a0\u00a0\u00a0= implode(' ', $line);\n\u00a0\u00a0\u00a0\u00a0$city\u00a0\u00a0\u00a0= $line[1] ?? 'Unknown';\n\u00a0\u00a0\u00a0\u00a0$local1 = $line[10] ?? 'Unknown';\n\u00a0\u00a0\u00a0\u00a0$iso\u00a0\u00a0\u00a0\u00a0= $line[8] ?? '??';\n\u00a0\u00a0\u00a0\u00a0if (preg_match($target, $str))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%25s : %12s : %4s\\n\", $city, $local1, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$iso);\n}\necho \"Elapsed Time: \" . (microtime(TRUE) - $start) . \"\\n\";\n```", "```php\n// /repo/ch02/php8_str_contains.php\n// not all code is shown\n\u00a0\u00a0\u00a0\u00a0if (str_contains($str, $target))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%25s : %12s : %4s\\n\", $city, $local1, \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$iso);\n```", "```php\n// /repo/ch02/php8_sqlite_query.php\ndefine('DB_FILE', __DIR__ . '/tmp/sqlite.db');\n$sqlite = new SQLite3(DB_FILE);\n$sql = 'SELECT * FROM geonames '\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. 'WHERE country_code = :cc AND population > :pop';\n$stmt = $sqlite->prepare($sql);\n$stmt->bindValue(':cc', 'IN');\n$stmt->bindValue(':pop', 2000000);\n$result = $stmt->execute();\nwhile ($row = $result->fetchArray(SQLITE3_ASSOC)) {\n\u00a0\u00a0\u00a0\u00a0printf(\"%20s : %2s : %16s\\n\", \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$row['name'], $row['country_code'],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0number_format($row['population']));\n}\u00a0\u00a0// not all code is shown\n```", "```php\nfunction NAME (int $actionCode, ...$params) \n{ /* callback code */ };\n```", "```php\n    // /repo/ch02/includes/auth_callback.php\n    define('DB_FILE', '/tmp/sqlite.db');\n    define('PATTERN', '%-8s | %4s | %-28s | %-15s');\n    define('DEFAULT_TABLE', 'Unknown');\n    define('DEFAULT_USER', 'guest');\n    define('ACL' , [\n    \u00a0\u00a0\u00a0\u00a0'admin' => [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'users' => [SQLite3::READ, SQLite3::SELECT,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SQLite3::INSERT, SQLite3::UPDATE,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SQLite3::DELETE],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'geonames' => [SQLite3::READ, SQLite3::SELECT,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SQLite3::INSERT, SQLite3::UPDATE, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SQLite3::DELETE],\n    \u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0'guest' => [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'geonames' => [SQLite3::READ, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SQLite3::SELECT],\n    \u00a0\u00a0\u00a0\u00a0],\n    ]);\n    ```", "```php\n    function auth_callback(int $code, ...$args) {\n    \u00a0\u00a0\u00a0\u00a0$status = SQLite3::DENY;\n    \u00a0\u00a0\u00a0\u00a0$table\u00a0\u00a0= DEFAULT_TABLE;\n    \u00a0\u00a0\u00a0\u00a0if ($code === SQLite3::SELECT) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$status = SQLite3::OK;\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!empty($args[0])) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$table = $args[0];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} elseif (!empty($_SESSION['table'])) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$table = $_SESSION['table'];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$user\u00a0\u00a0= $_SESSION['user'] ?? DEFAULT_USER;\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0if (!empty(ACL[$user])) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!empty(ACL[$user][$table])) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (in_array($code, ACL[$user][$table])) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$status = SQLite3::OK;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    \u00a0\u00a0} // end of \"if ($code === SQLite3::SELECT)\"\n    \u00a0\u00a0$_SESSION['table'] = $table;\n    \u00a0\u00a0return $status;\n    } // end of function definition\n    ```", "```php\n    // /repo/ch02/php8_sqlite_auth_admin.php\n    include __DIR__ . '/includes/auth_callback.php';\n    // Here we simulate the user acquisition:\n    session_start();\n    $_SESSION['user'] = \n    \u00a0\u00a0\u00a0\u00a0$argv[1] ?? $_GET['usr'] ?? DEFAULT_USER;\n    ```", "```php\n    $name = ['jclayton','mpaulovich','nrousseau',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'jporter'];\n    $email = ['unlikelysource.com',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'lfphpcloud.net','phptraining.net'];\n    shuffle($name);\n    shuffle($email);\n    $user_name = $name[0];\n    $user_email = $name[0] . '@' . $email[0];\n    $id = md5($user_email . rand(0,999999));\n    ```", "```php\n    $sqlite = new SQLite3(DB_FILE);\n    $sqlite->setAuthorizer('auth_callback');\n    ```", "```php\n    $sql = 'INSERT INTO users '\n    \u00a0\u00a0\u00a0\u00a0\u00a0. 'VALUES (:id, :name, :email, :pwd);';\n    $stmt = $sqlite->prepare($sql);\n    ```", "```php\n    if ($stmt) {\n    \u00a0\u00a0\u00a0\u00a0$stmt->bindValue(':id', $id);\n    \u00a0\u00a0\u00a0\u00a0$stmt->bindValue(':name', $user_name);\n    \u00a0\u00a0\u00a0\u00a0$stmt->bindValue(':email', $user_email);\n    \u00a0\u00a0\u00a0\u00a0$stmt->bindValue(':pwd', 'password');\n    \u00a0\u00a0\u00a0\u00a0$result = $stmt->execute();\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0$sql = 'SELECT * FROM users';\n    \u00a0\u00a0\u00a0\u00a0$result = $sqlite->query($sql);\n    \u00a0\u00a0\u00a0\u00a0while ($row = $result->fetchArray(SQLITE3_ASSOC))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"%-10s : %-\u00a0\u00a010s\\n\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$row['user_name'], $row['user_email']);\n    }\n    ```"]