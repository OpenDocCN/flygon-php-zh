- en: Chapter 7. Best Practices in PHP Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。PHP编程的最佳实践
- en: So far, we discussed performance-related topics. Now, in this chapter, we will
    study best practices in PHP applications' development and deployment. This is
    a vast topic, but we will cover it briefly. PHP provides all levels of programmers
    with the ability to write quality code easily and quickly. However, when the application
    advances to a more complex nature, we forget to follow the best practices. To
    produce a high performance PHP application, it is necessary to keep in mind the
    performance at every line of the code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了与性能相关的主题。现在，在本章中，我们将学习PHP应用程序开发和部署的最佳实践。这是一个广泛的主题，但我们将简要介绍。PHP为所有级别的程序员提供了编写高质量代码的能力。然而，当应用程序变得更加复杂时，我们忘记了遵循最佳实践。为了开发高性能的PHP应用程序，有必要在代码的每一行都考虑性能。
- en: 'We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Coding styles
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编码风格
- en: Design patterns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计模式
- en: Service-oriented architecture (SOA)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向服务的架构（SOA）
- en: Test-driven development (TDD) and PHPUnit testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试驱动开发（TDD）和PHPUnit测试
- en: PHP frameworks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP框架
- en: Version control systems and Git
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制系统和Git
- en: Deployment
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: Coding styles
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编码风格
- en: There are too many coding styles out there, such as PSR-0, PSR-1, PSR-2, PSR-3,
    and so on. Programmers can use different standards as they want, but it is necessary
    to follow a standard that is already used in the libraries or a framework in use
    to make the code more readable. For example, Laravel uses the PSR-1 and PSR-4
    coding standards, so if we are developing in Laravel, we should follow these coding
    standards. Some PHP frameworks, such as Yii 2 and **Zend Framework 2**, follow
    the PSR-2 coding standards. However, none of these frameworks stick to a single
    standard; most of them follow a mixed standard according to their requirements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有太多的编码风格，比如PSR-0、PSR-1、PSR-2、PSR-3等等。程序员可以按照自己的意愿使用不同的标准，但有必要遵循已经在库或框架中使用的标准，以使代码更易读。例如，Laravel使用PSR-1和PSR-4编码标准，所以如果我们在Laravel中开发，就应该遵循这些编码标准。一些PHP框架，比如Yii
    2和Zend Framework 2，遵循PSR-2编码标准。然而，这些框架都没有坚持单一标准；大多数都根据自己的需求遵循混合标准。
- en: The important point is to follow the standard that is used in the libraries
    used in the application. An organization can also use its own coding standards
    for internal purposes. It is not a requirement for coding; it is a requirement
    for readability and producing quality code that others can understand.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要遵循应用程序中使用的库的标准。组织也可以为内部目的使用自己的编码标准。这不是编码的要求，而是可读性和产生他人可以理解的高质量代码的要求。
- en: '**PHP Framework Interop Group** (**PHP-FIG**) is a group whose members defined
    coding standards for PHP. Full details about PSR standards can be found on their
    website at [http://www.php-fig.org/](http://www.php-fig.org/).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: PHP Framework Interop Group（PHP-FIG）是一个成员定义了PHP编码标准的团体。有关PSR标准的详细信息可以在他们的网站上找到[http://www.php-fig.org/](http://www.php-fig.org/)。
- en: 'Instead of discussing a specific coding standard, let''s discuss best practices
    in coding styles for PHP:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与讨论特定编码标准不同，让我们讨论PHP编码风格的最佳实践：
- en: 'The first letter of each word in the class name must be capital. The opening
    brace should be on the line after the class declaration, and the closing brace
    should be on the line after the class end line. Here''s an example:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类名中每个单词的首字母必须大写。大括号应该在类声明后的行上，结束括号应该在类结束行的下一行。这是一个例子：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Class methods and function names should follow the camel case naming convention.
    The starting braces should be on the next line of the class declaration, and the
    end brace should be on the line at the end of the function definition. There should
    be no spaces between the method name and the parenthesis. Also, there should be
    no space between the first argument, the opening parenthesis, the last argument,
    and the closing parenthesis. Also, there should be no space between an argument
    and the comma at the end of this argument, but there should be a space between
    a comma and the next argument. Here''s an example:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类方法和函数名应遵循驼峰命名约定。起始大括号应该在类声明的下一行，结束括号应该在函数定义的最后一行。方法名和括号之间不应有空格。此外，参数和括号之间不应有空格，参数的逗号之后应有一个空格，但逗号和下一个参数之间应有一个空格。这是一个例子：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If there is a namespace declaration, there must be a single empty line after
    its declaration. If there are use declarations, all of them must go after that
    namespace''s declarations. There must be one use declaration per line, and there
    must be a space after the use block. Also, the `extends` and `implements` keywords
    must be on the same line as the class declaration. Here''s an example:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有命名空间声明，声明后必须有一个空行。如果有使用声明，所有使用声明都必须放在该命名空间声明之后。每行必须有一个使用声明，并且在使用块之后必须有一个空格。此外，`extends`和`implements`关键字必须与类声明在同一行上。这是一个例子：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Visibility must be declared for all properties, and the properties must be
    in camel case. Also, properties must not be prepended with an underscore for private
    or protected visibilities. Take a look at the following example:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有属性都必须声明可见性，并且属性必须使用驼峰命名法。此外，私有或受保护的属性不得以下划线开头。看下面的例子：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If there is an `abstract` keyword, it must come before the `class` keyword
    for classes, and the `final` keyword must come before the method''s visibility
    in the case of methods. On the other hand, the `static` keyword must come after
    the method visibility. Take a look at this example:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有`abstract`关键字，它必须在类关键字之前出现，对于方法，`final`关键字必须在方法的可见性之前出现。另一方面，`static`关键字必须在方法可见性之后出现。看一个例子：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: All PHP keywords must be used in lowercase, including the `true` and `false`
    keywords. Constants must be declared and used in capital case.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有PHP关键字必须使用小写，包括`true`和`false`关键字。常量必须以大写形式声明和使用。
- en: 'For all control structures, there must be a space after the control structure
    keyword. If there is an expression for this control structure, there must be no
    space between the parenthesis holding this expression and the block of code that
    follows. There must be a space after the parenthesis and the starting brace. The
    starting brace must be on the same line as the control structure. The closing
    brace must be on the line after the end of the body. Refer to the following code
    for a better understanding:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有控制结构，关键字后必须有一个空格。如果有一个表达式用于这个控制结构，那么括号中不应该有空格，后面跟着的代码块也不应该有空格。括号和开始的大括号之间必须有一个空格。开始的大括号必须在同一行上。结束的大括号必须在主体结束的下一行。参考以下代码以更好地理解：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the case of loops, the spaces must be as in the following examples:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在循环的情况下，空格必须如下例所示：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For the purpose of this book, I did not follow the rule of the opening brace
    being on the same line as the control structure declaration and always used it
    on the next line of the declaration. I did not find it clearer; it is a personal
    choice, and anybody can follow the standards mentioned here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，我没有遵循大括号在控制结构声明的同一行上的规则，并且总是在声明的下一行使用它。我觉得这样做并不更清晰；这是个人选择，任何人都可以遵循这里提到的标准。
- en: Standards are good to follow as they make the code more readable and professional.
    However, never try to invent your own new standards; always follow those that
    are already invented and followed by the community.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循标准是很好的，因为它们使代码更易读和专业。但是，永远不要试图发明自己的新标准；总是遵循已经被社区发明和遵循的标准。
- en: Test-driven development (TDD)
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发（TDD）
- en: Test-driven development is the process of testing every aspect of the application
    during development. Either the tests are defined before development and then development
    is made to pass these tests, or the classes and libraries are built and then tested.
    Testing the application is very important, and launching an application without
    tests is like jumping from a 30-floor-high building without a parachute.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发是在开发过程中测试应用程序的每个方面。测试可以在开发之前定义，然后进行开发以通过这些测试，或者构建类和库然后进行测试。测试应用程序非常重要，没有测试就启动应用程序就像从30层楼高的建筑物上跳下而没有降落伞。
- en: PHP does not provide any built-in features to test, but there are other test
    frameworks that can be used for this purpose. One of most widely used frameworks
    or libraries is PHPUnit. It is a very powerful tool and provides lots of features.
    Now, let's have a look at it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: PHP没有提供任何内置功能来进行测试，但有其他测试框架可以用于此目的。其中最广泛使用的框架或库之一是PHPUnit。它是一个非常强大的工具，提供了许多功能。现在，让我们来看看它。
- en: The installation of PHPUnit is easy. Just download it and place it in your project
    root so that it can be accessed from the command line.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit的安装很容易。只需下载并将其放在项目的根目录中，以便可以从命令行访问。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PHPUnit installation and basic details, including features and examples, can
    be found at [https://phpunit.de/](https://phpunit.de/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit的安装和基本细节，包括功能和示例，可以在[https://phpunit.de/](https://phpunit.de/)找到。
- en: 'Let''s have a simple example. We have a `Book` class, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个简单的例子。我们有一个`Book`类，如下所示：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is an example of a simple class that initializes the `title` property when
    the class is instantiated. When the `getBook` method is called, it returns the
    title of the book.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单类的示例，当类被实例化时初始化`title`属性。当调用`getBook`方法时，它返回书的标题。
- en: 'Now, we want to make a test in which we will check whether the `getBook` method
    returns `PHP 7` as a title. So, perform the following steps to create the test:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要进行一个测试，检查`getBook`方法是否返回`PHP 7`作为标题。因此，执行以下步骤创建测试：
- en: Create a `tests` directory at your project's root. Create a `BookTest.php` file
    in the `tests` directory.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录下创建一个`tests`目录。在`tests`目录中创建一个`BookTest.php`文件。
- en: 'Now, place the following code in the `BookTest.php` file:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将以下代码放入`BookTest.php`文件中：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, we have written our first test. Note that we named our class `BookTest`,
    which extends the `PHPUnit_Framework_TestCase` class. We can name our test class
    whatever we want. However, the name should be easily recognizable so that we know
    this is written for the class that needs to be tested.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经编写了我们的第一个测试。请注意，我们将我们的类命名为`BookTest`，它继承了`PHPUnit_Framework_TestCase`类。我们可以随意命名我们的测试类。但是，名称应该容易识别，这样我们就知道这是为需要测试的类编写的。
- en: Then, we added a method named `testBookClass`. We are also free to select whatever
    name we want to give to this method, but it should start with the word `test`.
    If not, PHPUnit will not execute the method and will issue a warning—in our case,
    for the preceding test class—that no tests were found.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们添加了一个名为`testBookClass`的方法。我们也可以自由选择给这个方法任何名称，但是它应该以单词`test`开头。如果不是，PHPUnit将不会执行该方法，并会发出警告——在我们的情况下，对于前面的测试类，没有找到任何测试。
- en: In the `testBookClass` method, we created an object of the `Book` class and
    passed `PHP 7` as our title. Then, we fetched the title using the `getBook` method
    of the `Book` class. The important part is the last line of the `testBookClass`
    method, which performs the assertion and checks whether the data returned from
    `getBook` is the desired data or not.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在`testBookClass`方法中，我们创建了一个`Book`类的对象，并将`PHP 7`作为我们的标题传递。然后，我们使用`Book`类的`getBook`方法获取标题。重要的部分是`testBookClass`方法的最后一行，它执行断言并检查从`getBook`返回的数据是否是期望的数据。
- en: 'Now, we are ready to run our first test. Open the command line or terminal
    in the root of the project and issue the following command:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备运行我们的第一个测试。在项目的根目录中打开命令行或终端，并发出以下命令：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the command is executed, we will have an output similar to the following
    screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令被执行时，我们将得到类似以下截图的输出：
- en: '![Test-driven development (TDD)](graphics/B05225_07_01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![测试驱动开发（TDD）](graphics/B05225_07_01.jpg)'
- en: Our test is executed successfully as it met the criteria defined in our test.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试成功执行，因为它满足了我们测试中定义的标准。
- en: 'Now, let''s change our class a little bit and pass `PHP` to the `Book` class,
    as shown in the following code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们稍微改变我们的类，并将`PHP`传递给`Book`类，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, we are looking for PHP 7, and our `Book` class returns `PHP`, so it does
    not pass our test. After executing this test, we will have a failure, as shown
    in the following screenshot:![Test-driven development (TDD)](graphics/B05225_07_02.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们正在寻找PHP 7，我们的`Book`类返回`PHP`，所以它没有通过我们的测试。执行此测试后，我们将会失败，如下面的截图所示：![测试驱动开发（TDD）](graphics/B05225_07_02.jpg)
- en: As seen in the preceding screenshot, we expected `PHP 7`, and we got an actual
    result of `PHP 7`. The `–` sign shows the expected value, and the `+` sign shows
    the actual value.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们期望得到`PHP 7`，而实际结果是`PHP 7`。`-`符号显示了期望值，`+`符号显示了实际值。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the previous topic, we discussed how we can perform tests on our libraries.
    We only discussed a simple basic test. PHPUnit is not limited to these simple
    tests, but covering PHPUnit completely is out of the scope of this book. A very
    nice book on PHPUnit is *PHPUnit Essentials*, published by Packt Publishing.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的主题中，我们讨论了如何对我们的库执行测试。我们只讨论了一个简单的基本测试。PHPUnit不仅限于这些简单的测试，但完全覆盖PHPUnit超出了本书的范围。一本关于PHPUnit的很好的书是Packt
    Publishing出版的*PHPUnit Essentials*。
- en: Design patterns
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模式
- en: A design pattern solves a specific problem. It is not a tool; it is just a description
    or template that describes how to solve a specific problem. Design patterns are
    important, and they play a good role in writing clean and clear code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式解决特定问题。它不是一个工具；它只是描述或模板，描述如何解决特定问题。设计模式很重要，在编写清晰的代码方面起着很好的作用。
- en: One of the most widely used design patterns in the PHP community is the **Model
    View Controller** (**MVC**) pattern. Most PHP frameworks are built upon this pattern.
    MVC advises you to keep the business logic and data operations (that is, the model)
    separate from the presentation (the view). Controllers just play the role of a
    middleman between models and views and make the communication between them possible.
    There is no direct communication between models and views. If a view needs any
    kind of data, it sends a request to the controller. The controller knows how to
    operate on this request and, if needed, make a call to the model to perform any
    operation on the data (fetch, insert, validate, delete, and so on). Then at last,
    the controller sends a response to the view.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP社区中最广泛使用的设计模式之一是**模型视图控制器**（**MVC**）模式。大多数PHP框架都建立在这种模式之上。MVC建议将业务逻辑和数据操作（即模型）与表示（视图）分开。控制器只是在模型和视图之间充当中间人的角色，并使它们之间的通信成为可能。模型和视图之间没有直接的通信。如果视图需要任何类型的数据，它会向控制器发送请求。控制器知道如何处理这个请求，并在需要时调用模型对数据进行任何操作（获取、插入、验证、删除等）。然后最后，控制器向视图发送响应。
- en: In best practices, fat models and skinny controllers are used. This means that
    controllers are only used to take a specific action on a request and nothing else.
    Even in some modern frameworks, the validation is moved out of the controllers
    and is performed at the model level. These models perform all the operations on
    the data. In modern frameworks, models are considered as a layer, which can have
    multiple parts, such as the business logic, **Create Read Update Delete** (**CRUD**)
    database operations, data mapper pattern and services, and so on. So, a full load
    of models and controllers is just sitting there and enjoying the lazy work load.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在最佳实践中，使用肥模型和瘦控制器。这意味着控制器仅用于对请求执行特定操作，而不做其他事情。甚至在一些现代框架中，验证被移出控制器，并在模型层执行。这些模型执行所有数据操作。在现代框架中，模型被视为一个层，可以有多个部分，如业务逻辑、**创建读取更新删除**（**CRUD**）数据库操作、数据映射器模式和服务等。因此，模型和控制器的全部负载只是坐在那里，享受懒惰的工作负载。
- en: Another widely used design pattern is the factory design pattern. This pattern
    simply creates objects that are needed to be used. Another good pattern is the
    observer pattern, in which an object calls different observers on a specific event
    or task on it. This is mainly used for event handling. Yet another widely used
    pattern is the **singleton pattern**, which is used when there is a requirement
    that only a single object of a class be used throughout the application's execution.
    *A singleton object can't be serialized and cloned*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个广泛使用的设计模式是工厂设计模式。这种模式简单地创建需要使用的对象。另一个好的模式是观察者模式，其中一个对象在特定事件或任务上调用不同的观察者。这主要用于事件处理。另一个广泛使用的模式是单例模式，当需要在应用程序执行期间仅使用类的单个对象时使用。单例对象无法序列化和克隆。
- en: Service-oriented architecture (SOA)
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向服务的架构（SOA）
- en: In service-oriented architecture, the application's components provide services
    to each other on a defined protocol. Each component is loosely coupled with each
    other, and the only way of communication between them is through the services
    they provide.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向服务的架构中，应用程序的组件在定义的协议上为彼此提供服务。每个组件之间松散耦合，它们之间的通信方式是通过它们提供的服务。
- en: In PHP, Symfony provides the best way to have SOA as it is mainly an HTTP-centric
    framework. Symfony is the most mature, well-tested collection of libraries that
    are widely used by other PHP frameworks, such as Zend Framework, Yii, Laravel,
    and others.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，Symfony提供了拥有SOA的最佳方式，因为它主要是一个以HTTP为中心的框架。Symfony是最成熟、经过充分测试的库集合，被其他PHP框架广泛使用，如Zend
    Framework、Yii、Laravel等。
- en: Let's consider a scenario where we have a backend and a frontend for a website
    and a mobile application. Normally, in most applications, the backend and frontend
    run on the same code base and on a single access point, and an API or web service
    is built for mobile applications to communicate with this backend. It is good,
    but we need great. So, for high performance and scalable applications, the separate
    components run independently of each other. If they need to communicate with each
    other, they communicate through the web services.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个情景，我们有一个网站和一个移动应用的后端和前端。通常，在大多数应用程序中，后端和前端在同一代码库和单一访问点上运行，并且为移动应用构建了一个API或Web服务来与后端通信。这很好，但我们需要更好。因此，对于高性能和可扩展的应用程序，各个组件独立运行。如果它们需要相互通信，它们通过Web服务进行通信。
- en: Web services are the central communication point between the frontend and backend
    and between the backend and mobile applications. The backend is the main hub of
    data and any other business logic. It can be standalone and built using any programming
    language, such as PHP. The frontend can be built using normal HTML/CSS, AngularJS,
    Node.js, jQuery, or any other technology for the frontend. Similarly, mobile apps
    can be native or built on cross-platform technologies. The backend doesn't care
    what the frontend and mobile apps are built on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务是前端和后端之间以及后端和移动应用之间的中心通信点。后端是数据和任何其他业务逻辑的主要枢纽。它可以独立运行，并使用任何编程语言构建，比如PHP。前端可以使用普通的HTML/CSS、AngularJS、Node.js、jQuery或任何其他前端技术构建。同样，移动应用可以是原生的，也可以基于跨平台技术构建。后端不关心前端和移动应用是基于什么构建的。
- en: Being object-oriented and reusable always
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 始终是面向对象和可重用的
- en: This may seem difficult for a small, single-page application in which only a
    few things are happening, but this is not the case. The classes are easy to handle,
    and the code is always clear. Also, the classes separate the application logic
    from the views. This make things more logical. In the earlier days when structure
    code was used and a bunch of functions had to be created either in the view files
    or in a separate file, this would have been too easy. However, when applications
    got more complex, it got more difficult to handle.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个小型的单页应用程序来说，这可能看起来很困难，只有少数事情发生，但事实并非如此。类很容易处理，代码始终清晰。此外，类将应用程序逻辑与视图分离。这使得事情更加合乎逻辑。在早期使用结构化代码和必须在视图文件或单独文件中创建一堆函数时，这将变得太容易。然而，当应用程序变得更加复杂时，处理起来就更加困难。
- en: Always try to create loosely coupled classes to make them more reusable in other
    applications. Also, always perform a single task in each method of the class.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 始终尝试创建松耦合的类，使它们在其他应用程序中更具重用性。此外，始终在类的每个方法中执行单个任务。
- en: PHP frameworks
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP框架
- en: We all know about frameworks, and they are not essential to a programmer's life.
    There are lots of frameworks, and each framework has its own superiority over
    other frameworks in some features. All frameworks are good, but what make a framework
    not suitable for an application are the application's requirements.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道框架，并且它们对程序员的生活并非必不可少。有很多框架，每个框架在某些功能上都有其自身的优势。所有框架都很好，但使框架不适合应用程序的是应用程序的需求。
- en: Let's say that we want to build an enterprise-level CRM application, which framework
    will suit us best? This is the most important, confusing, and time-wasting question.
    First, we need to know the complete requirements for the CRM application, usage
    capacity, features, data security, and performance.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想构建一个企业级的CRM应用程序，哪种框架最适合我们？这是最重要、最令人困惑和最浪费时间的问题。首先，我们需要了解CRM应用程序的完整需求、使用容量、功能、数据安全性和性能。
- en: Version control system (VCS) and Git
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制系统（VCS）和Git
- en: Version controller system provides the flexibility to properly maintain code,
    changes, and versions of the application. Using VCS, a complete team can work
    together on an application, and they can pull other team members' changes and
    their own changes to the system without any big troubles. In case of a disaster,
    VCS provides the ability to fall back to an old, more stable version of the application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统提供了灵活性，可以正确地维护应用程序的代码、更改和版本。使用VCS，整个团队可以共同在一个应用程序上工作，他们可以从系统中拉取其他团队成员的更改和自己的更改，而不会有太大的麻烦。在灾难发生时，VCS提供了回退到旧的、更稳定版本的应用程序的能力。
- en: Oh wait! Are we talking about VCS? Did we mention Git? Nope! So, let's start
    with Git.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 哦等等！我们在谈论版本控制系统吗？我们提到了Git吗？没有！所以，让我们从Git开始。
- en: Git is a powerful tool. It monitors changes in each file in a branch, and when
    pushed to a remote branch, only the changed files are uploaded. Git keeps a history
    of the file changes and provides you with the ability to compare the changed files.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个强大的工具。它监视分支中每个文件的更改，当推送到远程分支时，只上传更改的文件。Git保留文件更改的历史记录，并提供您比较更改文件的能力。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A very informative and good book on Git is *Git Essentials* published by Packt
    Publishing. Also, an official and free book about Git can be found at [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Git的一本非常信息丰富且优秀的书是Packt Publishing出版的*Git Essentials*。此外，关于Git的官方免费书籍可以在[https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)找到。
- en: Deployment and Continuous Integration (CI)
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和持续集成（CI）
- en: FTP is obsolete. It is not feasible for today, it makes things slow, and a normal
    FTP connection is insecure. It is hard for a team to deploy their changes using
    FTP because it creates huge conflicts in their code and this may cause problems,
    while uploading changes and can override each other's changes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: FTP已经过时。对于今天来说不可行，它会使事情变慢，而且普通的FTP连接是不安全的。团队使用FTP部署其更改是困难的，因为它会在他们的代码中造成巨大的冲突，这可能会在上传更改时造成问题，并且可能会覆盖彼此的更改。
- en: Using a Git versioning system, such as GitHub, GitLab, and Bitbucket, we can
    make our deployment automatic. Different developers use different setups for automatic
    deployments, and it all depends on their own choice and ease. The general rules
    of using automatic deployments are to make them easy for a team and to not use
    FTP.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Git版本控制系统，如GitHub、GitLab和Bitbucket，我们可以使部署自动化。不同的开发人员使用不同的自动部署设置，这完全取决于他们自己的选择和便利性。使用自动部署的一般规则是使团队易于使用，并且不使用FTP。
- en: 'The following is a general flowchart for a deployment setup:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是部署设置的一般流程图：
- en: '![Deployment and Continuous Integration (CI)](graphics/B05225_07_03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![部署和持续集成（CI）](graphics/B05225_07_03.jpg)'
- en: 'As shown in the preceding flowchart, we have two servers: the staging or testing
    the server and production server. On the staging server, we have an exact copy
    of the website to test new features and others, and the production server has
    our live website.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的流程图所示，我们有两个服务器：暂存或测试服务器和生产服务器。在暂存服务器上，我们有网站的精确副本，用于测试新功能和其他内容，而生产服务器则有我们的实时网站。
- en: 'Now, we have a repository that has two main branches: the master branch and
    the production branch. The master branch is used for development and testing purposes,
    and the production branch is used for final production features. Note that the
    production branch should only accept merging, and it should not accept commits
    so that the production environment is completely safe.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个具有两个主要分支的存储库：主分支和生产分支。主分支用于开发和测试目的，而生产分支用于最终生产功能。请注意，生产分支应仅接受合并，不应接受提交，以便生产环境完全安全。
- en: 'Now, let''s say that we want to add a customer registration feature to our
    application. We will perform the following steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想要向我们的应用程序添加客户注册功能。我们将执行以下步骤：
- en: The first and most important thing to do is to create a new branch from the
    production branch head. Let's name this branch `customer-registration`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，也是最重要的是从生产分支头部创建一个新分支。让我们将此分支命名为`customer-registration`。
- en: Now, add all the new features to this `customer-registration` branch and while
    verifying on the local development server, merge this branch to the local master
    branch.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将所有新功能添加到`customer-registration`分支，并在本地开发服务器上验证后，将此分支合并到本地主分支。
- en: After merging the new branch to the local master branch, push the master branch
    to remote master branch. A successful push will cause the new features to be moved
    to the staging server.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新分支合并到本地主分支后，将主分支推送到远程主分支。成功推送将导致新功能移动到暂存服务器。
- en: Now, test all the new features on the staging server.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在暂存服务器上测试所有新功能。
- en: When everything works fine, merge the remote master branch with the remote production
    branch. This will cause all the changes to be moved to the production branch,
    and this merge will cause all the new changes to be moved to the production server.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一切正常时，将远程主分支与远程生产分支合并。这将导致所有更改移动到生产分支，并且此合并将导致所有新更改移动到生产服务器。
- en: An ideal setup similar to the preceding one makes deployment very easy, and
    a complete team can work on the application regardless of the geographical location.
    In case any issue occurs during the deployment, one can be easily fall back to
    the old version of the production branch.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于前面的设置，一个理想的设置使部署非常容易，整个团队可以在不同的地理位置工作应用程序。如果在部署过程中出现任何问题，可以轻松地回退到旧版本的生产分支。
- en: '**Continuous Integration** (**CI**) is a technique in which all the members
    of a team have to integrate their code into a shared repository, and then each
    check by the team member is verified by automatic builds to catch errors and problems
    in the early stages.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是一种技术，团队的所有成员都必须将其代码集成到共享存储库中，然后团队成员的每次检查都经过自动构建进行验证，以捕获早期阶段的错误和问题。'
- en: There are several tools that are used for CI for PHP; some of these are PHPCI,
    Jenkins, Travis CI, and others.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种用于PHP的CI工具；其中一些是PHPCI、Jenkins、Travis CI等。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed a few best practices, including coding standards
    and styles, PHP frameworks, design patterns, Git, and deployment. Also, we discussed
    the PHPUnit framework to test classes and libraries against tests. Also, we discussed
    Service-oriented design, which plays a major role in creating APIs for applications.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些最佳实践，包括编码标准和风格、PHP框架、设计模式、Git和部署。此外，我们还讨论了PHPUnit框架，用于对类和库进行测试。此外，我们还讨论了面向服务的设计，在为应用程序创建API方面发挥了重要作用。
- en: In this book, we studied setting up development environments, including Linux
    servers, specifically Debian and Ubuntu, and we also discussed Vagrant. The new
    features of PHP are also listed with sample codes. You read in detail about the
    tools that we can use to improve the performance of an application and a database.
    Also, we discussed debugging and stress or load testing our applications and some
    best practices of writing quality code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们研究了设置开发环境，包括Linux服务器，特别是Debian和Ubuntu，我们还讨论了Vagrant。还列出了PHP的新功能，并附有示例代码。您可以详细了解我们可以使用的工具，以提高应用程序和数据库的性能。此外，我们还讨论了调试和应力或负载测试我们的应用程序以及编写高质量代码的一些最佳实践。
- en: We mostly summarized the tools and techniques with simple examples to introduce
    the reader to these tools and techniques. There is a good chance that each tool
    and technique has its own book written for a more advanced usage. We recommend
    you follow up on these tools and techniques and conduct more research for their
    advance usage. Good luck Php-ing!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要总结了工具和技术，并提供了简单的示例，向读者介绍这些工具和技术。每种工具和技术都有可能有自己的书籍，用于更高级的用途。我们建议您跟进这些工具和技术，并进行更多的研究以了解其高级用途。祝您Php-ing好运！
