- en: Chapter 3. Useful Tools Using jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用jQuery的实用工具
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Making tool tips using Ajax
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ajax制作工具提示
- en: Creating Autocomplete from a database
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库创建自动完成
- en: Building a tab navigation using jQuery
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery构建选项卡导航
- en: Rotating content
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转内容
- en: Creating an image slider
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建图像滑块
- en: Creating pageless pagination
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建无页码分页
- en: Loading images using Lightbox
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Lightbox加载图像
- en: Growing textarea using the jGrow plugin
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jGrow插件增加文本区域
- en: HTML replacement of the select dropdown
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML替换选择下拉框
- en: Improving date selection with Datepicker
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Datepicker改进日期选择
- en: Drag-and-drop functionality
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖放功能
- en: Ajax shopping cart
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ajax购物车
- en: Sorting and filtering data
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序和过滤数据
- en: Adding visual effects and animations
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加视觉效果和动画
- en: We need Ajax tools or plugins to get an "Ajaxified" website. jQuery plugins
    are usually a great timesaver as they're mostly Plug-and-Play type of scripts.
    jQuery's selector-based approach makes it easier to convert normal web pages into
    "Ajaxified" web pages in an unobtrusive manner. In this chapter, we'll see some
    productive jQuery plugins and their usage.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要Ajax工具或插件来获取“Ajax化”的网站。jQuery插件通常是一个很好的时间节省者，因为它们通常是即插即用类型的脚本。jQuery的基于选择器的方法使得将普通网页转换为“Ajax化”网页变得更加简单，以不显眼的方式。在本章中，我们将看到一些高效的jQuery插件及其用法。
- en: Making tool tips using Ajax
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ajax制作工具提示
- en: 'Web browsers render the contents of the `title` attributes in a **tool tip**.
    There are some problems with the browsers'' tool tips such as:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Web浏览器会在**工具提示**中呈现`title`属性的内容。浏览器工具提示存在一些问题，例如：
- en: Their appearance isn't consistent across browsers
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的外观在各个浏览器中不一致
- en: Browser tool tips can't be styled
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器工具提示无法样式化
- en: To solve these aesthetic UI issues, we have a number of jQuery plugins. In this
    recipe, we'll look into using the BeautyTips plugin to get tool tips.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些美学UI问题，我们有许多jQuery插件。在本教程中，我们将研究如何使用BeautyTips插件获取工具提示。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll require the BeautyTips jQuery plugin from [http://plugins.jquery.com/project/bt](http://plugins.jquery.com/project/bt)
    along with jQuery Core. Optionally, we may require the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从[http://plugins.jquery.com/project/bt](http://plugins.jquery.com/project/bt)获取BeautyTips
    jQuery插件以及jQuery Core。可选地，我们可能需要以下内容：
- en: '**ExplorerCanvas** from [http://excanvas.sourceforge.net/](http://excanvas.sourceforge.net/)
    to support the `canvas` element in Internet Explorer. Note that BeautyTips uses
    the `canvas` element for generating bubble tips.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ExplorerCanvas**来自[http://excanvas.sourceforge.net/](http://excanvas.sourceforge.net/)，以支持Internet
    Explorer中的`canvas`元素。请注意，BeautyTips使用`canvas`元素来生成气泡提示。'
- en: The **hoverIntent** plugin from [http://cherne.net/brian/resources/jquery.hoverIntent.html](http://cherne.net/brian/resources/jquery.hoverIntent.html),
    as it changes the hover behavior. jQuery's default `hover` event fires whenever
    a bound element is hovered upon, and that sometimes creates poor user experience—especially
    when the user unintentionally hovers over a particular element. The hoverIntent
    plugin solves this issue by adding intervals and a timeout for the hover event
    so that user's intention is clearly met. When installed, BeautyTips uses hoverIntent
    instead of hover.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**hoverIntent**插件来自[http://cherne.net/brian/resources/jquery.hoverIntent.html](http://cherne.net/brian/resources/jquery.hoverIntent.html)，因为它改变了悬停行为。jQuery的默认`hover`事件在绑定元素悬停时触发，有时会导致用户体验不佳，特别是当用户无意中悬停在特定元素上时。hoverIntent插件通过为悬停事件添加间隔和超时来解决此问题，以便清楚地满足用户意图。安装后，BeautyTips使用hoverIntent而不是hover。'
- en: The **bgiframe** plugin from [http://plugins.jquery.com/project/bgiframe](http://plugins.jquery.com/project/bgiframe)
    as it fixes the IE6 z-index issue with form elements. When bgiframe is available
    on the page, BeautyTips will automatically use it.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bgiframe**插件来自[http://plugins.jquery.com/project/bgiframe](http://plugins.jquery.com/project/bgiframe)，因为它修复了IE6中表单元素的z-index问题。当页面上有bgiframe时，BeautyTips将自动使用它。'
- en: The **Easing** plugin when we need animation effects.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Easing**插件在需要动画效果时使用。'
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Making a tool tip with the BeautyTips plugin is easy as it's merely a Plug-and-Play
    setup. Let's see how help tips are made available when the user is filling up
    forms.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BeautyTips插件制作工具提示很容易，因为它只是一个即插即用的设置。让我们看看当用户填写表单时如何提供帮助提示。
- en: '![How to do it...](graphics/3081_03_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/3081_03_01.jpg)'
- en: 'The following code makes getting the display in the preceding screenshot easier:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使得在前面的屏幕截图中获取显示更容易：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And, in the JavaScript triggering, it''s simpler to use the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 而在JavaScript触发中，使用以下代码更简单：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: BeautyTips uses the `canvas` element to draw the bubbles commonly referred to
    as tool tips, help tips, help balloons, and talk bubbles. The main idea behind
    using `canvas` is to achieve bubbles of any shape. BeautyTips has inbuilt style
    support for normal bubbles, Google Maps bubbles, Facebook tool tips, and Netflix
    tool tips. It also supports custom bubble themes through CSS.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: BeautyTips使用`canvas`元素来绘制通常称为工具提示、帮助提示、帮助气球和对话气泡的气泡。使用`canvas`的主要思想是实现任何形状的气泡。BeautyTips具有内置样式支持，用于普通气泡、Google地图气泡、Facebook工具提示和Netflix工具提示。它还通过CSS支持自定义气泡主题。
- en: 'As noted in our example, to get tool tips on form inputs, the bubble texts
    are automatically taken from the `title` attribute of the element attached. Thus,
    it degrades gracefully and compliant with accessibility standards. In circumstances
    where we may need to show some other texts in bubble tip, we can do that by adding
    the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们的示例中所述，要在表单输入上获取工具提示，气泡文本会自动从附加元素的`title`属性中获取。因此，它会优雅地降级，并符合辅助功能标准。在可能需要在气泡提示中显示其他文本的情况下，我们可以通过添加以下代码来实现：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Bubble tips are usually placed on the right side of the element. When there''s
    no space available, it automatically adjusts and detects the position. The API
    offers the ability to set the position, too, as shown:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 气泡提示通常放置在元素的右侧。当没有可用空间时，它会自动调整和检测位置。API还提供了设置位置的能力，如下所示：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The default trigger event is `hover`. When the hoverIntent plugin is found
    on the page, it will make use of it to improve the user experience. As mentioned
    in the preceding text, the hoverIntent plugin will set time to fire the `hover`
    event and, thereby, avoid unnecessary event triggering when the user accidentally
    moves over the element. Through the API, we can also customize the trigger event
    to something other than `hover`, as shown:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的触发事件是`hover`。当页面上找到hoverIntent插件时，它将利用它来改善用户体验。如前文所述，hoverIntent插件将设置触发`hover`事件的时间，从而在用户意外移动到元素上时避免不必要的事件触发。通过API，我们还可以将触发事件定制为除`hover`之外的其他内容，如下所示：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To specify when the `trigger` event should be hidden, we have to pass a second
    parameter. The following code will trigger `bubble tip` in the `focus` event and
    hide it in the `blur` event:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定`trigger`事件何时应该隐藏，我们必须传递第二个参数。以下代码将在`focus`事件中触发`bubble tip`，并在`blur`事件中隐藏它：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Bubble text content can also be loaded from a remote Ajax page using the `ajaxPath`
    attribute as a parameter:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 气泡文本内容也可以使用`ajaxPath`属性作为参数从远程Ajax页面加载：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's more...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The jQuery ecosystem has lot of plugins available to get tool tips easily.
    Features of BeautyTips are usually sufficient in most scenarios. However, we may
    come across a situation where we want to get the exact (or similar) tool tips
    used in other sites. Here, we discuss few such plugins:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery生态系统中有很多可用的插件可以轻松获取工具提示。BeautyTips的功能在大多数情况下通常足够了。然而，我们可能会遇到一种情况，我们希望获取其他网站中使用的确切（或类似）工具提示。在这里，我们讨论了一些这样的插件：
- en: '**tipsy**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tipsy**'
- en: This plugin is available at [http://onehackoranother.com/projects/jquery/tipsy/](http://onehackoranother.com/projects/jquery/tipsy/)
    . It focuses on getting Facebook-like mini-information tool tips easily.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件可以在[http://onehackoranother.com/projects/jquery/tipsy/](http://onehackoranother.com/projects/jquery/tipsy/)找到。它专注于轻松获取类似Facebook的迷你信息工具提示。
- en: '**BubbleTip**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BubbleTip**'
- en: This plugin, found at [http://code.google.com/p/bubbletip/](http://code.google.com/p/bubbletip/),
    helps us to get shadowed and animated tool tips.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件可以在[http://code.google.com/p/bubbletip/](http://code.google.com/p/bubbletip/)找到，它可以帮助我们获取阴影和动画工具提示。
- en: '**jGrowl**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jGrowl**'
- en: In Mac OS X, the Growl framework lets developers raise an alert message. This
    jGrowl plugin, found at [http://stanlemon.net/projects/jgrowl.html](http://stanlemon.net/projects/jgrowl.html),
    imitates the same alert functionality. We can create nifty tool tips/alert pop-ups
    on the browser, using this plugin.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OS X中，Growl框架允许开发人员发出警报消息。这个jGrowl插件可以在[http://stanlemon.net/projects/jgrowl.html](http://stanlemon.net/projects/jgrowl.html)找到，它模仿了相同的警报功能。我们可以使用这个插件在浏览器上创建漂亮的工具提示/警报弹出窗口。
- en: '**qTip**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qTip**'
- en: This is yet another tool tip plugin, found at [http://craigsworks.com/projects/qtip2./](http://craigsworks.com/projects/qtip2./).
    It has lots of options and also provides visually pleasing tool tips.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个工具提示插件，可以在[http://craigsworks.com/projects/qtip2./](http://craigsworks.com/projects/qtip2./)找到。它有很多选项，还提供视觉上令人愉悦的工具提示。
- en: Creating Autocomplete from a database
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库创建自动完成
- en: 'Most of the time, users are sick of filling up forms. However, from the website''s
    point of view, user input is very important for data mining and better service.
    When the end user has the ability to fill up forms quickly, or fill up forms easily,
    it will help both end users and the website owners. Autocomplete is one such attempt
    to help end users. Overall, we have two types of Autocomplete designs:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，用户厌倦了填写表单。然而，从网站的角度来看，用户输入对于数据挖掘和更好的服务非常重要。当最终用户能够快速填写表单或轻松填写表单时，这将有助于最终用户和网站所有者。自动完成是帮助最终用户的一种尝试。总的来说，我们有两种类型的自动完成设计：
- en: Within the browser UI, by allowing the browser to remember certain form inputs
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过允许浏览器记住某些表单输入，在浏览器UI中
- en: Within websites that employ the Autocomplete technique to quickly fill up forms
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用自动完成技术快速填写表单的网站中
- en: In this recipe, we'll see how to integrate the jQuery UI Autocomplete plugin
    in a PHP script.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将看到如何在PHP脚本中集成jQuery UI Autocomplete插件。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll require the jQuery UI from [http://jqueryui.com/](http://jqueryui.com/),
    with the Autocomplete component. Note that the jQuery UI download page, [http://jqueryui.com/download](http://jqueryui.com/download),
    has a wizard-like interface to select the necessary files easily.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从[http://jqueryui.com/](http://jqueryui.com/)获取jQuery UI，其中包括自动完成组件。请注意，jQuery
    UI下载页面[http://jqueryui.com/download](http://jqueryui.com/download)具有向导式界面，可以轻松选择必要的文件。
- en: Regarding the database, we'll need to have a table with the schema `jslibs (id,
    name)`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据库，我们需要一个具有模式`jslibs（id，name）`的表。
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: First, we'll start the Autocomplete integration without a database, and then
    we'll add database support. Integrating the jQuery UI Autocomplete widget is straightforward.
    Let's improve the UI of a polling application with Autocomplete support. Note
    that the Autocomplete pattern is usually preferred in a scenario where the input
    can be anything within a predetermined set, or from users.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从没有数据库的情况下开始自动完成集成，然后再添加数据库支持。集成jQuery UI Autocomplete小部件很简单。让我们通过自动完成支持改进轮询应用程序的用户界面。请注意，自动完成模式通常在输入可以是预定集合中的任何内容或来自用户的情况下首选。
- en: '![How to do it...](graphics/3081_03_02.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![操作步骤...](graphics/3081_03_02.jpg)'
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the JavaScript code, it's as simple as hooking the input element through
    its `id:`
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript代码中，通过其`id`挂钩输入元素就像这样简单：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we have hardcoded the Autocomplete values through the `source` option.
    When the size of the `values` set is high, we have to remotely provide the values
    over server script. So, let''s add remote value functionality to the preceding
    setup by creating `values.php`, as shown in the following code snippet:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过`source`选项硬编码了自动完成值。当`values`集的大小很大时，我们必须通过服务器脚本远程提供值。因此，让我们通过创建`values.php`来为前面的设置添加远程值功能，如下面的代码片段所示：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, hook `values.php` in the Autocomplete call:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在自动完成调用中挂钩`values.php`：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `source` parameter holds the values that are to be autocompleted. We can
    set them directly with an object set. The other option is to set them through
    a remote Ajax request. Since the server script pulls values dynamically, it will
    be a little inefficient when the data is not cached. Therefore, we have formed
    a `cache` buffer object for every term that's been sent to the server. This improves
    the performance when the user is hitting backspace or re-enters the previous query.
    In such cases, the requests will immediately be served from the locally saved
    data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`参数保存要自动完成的值。我们可以直接使用对象集来设置它们。另一个选项是通过远程Ajax请求设置它们。由于服务器脚本动态提取值，当数据没有被缓存时，它会有点低效。因此，我们为每个发送到服务器的术语形成了一个`cache`缓冲对象。这样可以提高用户按退格键或重新输入上一个查询时的性能。在这种情况下，请求将立即从本地保存的数据中提供服务。'
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It is relevant to note that the jQuery UI Autocomplete plugin has numerous
    features, for example, the ability to autocomplete multiple values (say while
    entering tags in `delicious.com)`, the ability to fix the number of inputs, and
    so on. A few interesting topics and plugins are described next:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，jQuery UI自动完成插件具有许多功能，例如自动完成多个值（例如在`delicious.com`中输入标签时），固定输入数量等。接下来描述了一些有趣的主题和插件：
- en: '**Sphinx:**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sphinx:**'
- en: The server-side script search function isn't efficient as it uses the `LIKE`
    operator, which would require a full table scan. A better option is to use full
    text search using Sphinx. More about Sphinx can be found at [http://sphinxsearch.com/](http://sphinxsearch.com/)
    .
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端脚本搜索功能不高效，因为它使用`LIKE`运算符，这将需要完整的表扫描。更好的选择是使用Sphinx使用全文搜索。有关Sphinx的更多信息，请访问[http://sphinxsearch.com/](http://sphinxsearch.com/)。
- en: '**Geocoded Autocomplete:**'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理编码自动完成：**'
- en: This is an interesting jQuery plugin to autocomplete locality addresses using
    the Google Maps API. When integrated, it makes it easier for users to enter their
    address. It is available at [https://github.com/lorenzsell/Geocoded-Autocomplete](https://github.com/lorenzsell/Geocoded-Autocomplete)
    .
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有趣的jQuery插件，可以使用Google Maps API自动完成地点地址。集成后，用户更容易输入他们的地址。它可以在[https://github.com/lorenzsell/Geocoded-Autocomplete](https://github.com/lorenzsell/Geocoded-Autocomplete)找到。
- en: Building a tab navigation using jQuery
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery构建选项卡导航
- en: Any site is incomplete without navigation links. Tabs are a good user interface
    approach to bring navigation to the site. Navigation links can easily be designed
    to look like tabs, through CSS. There are many tab implementations in jQuery.
    In this recipe, we'll look into how to integrate the jQuery UI Tabs plugin easily.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 任何网站都不完整没有导航链接。选项卡是将导航引入网站的良好用户界面方法。通过CSS，可以轻松地设计导航链接看起来像选项卡。在jQuery中有许多选项卡实现。在这个教程中，我们将看看如何轻松集成jQuery
    UI选项卡插件。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We'll require the jQuery UI from [http://jqueryui.com/](http://jqueryui.com/),
    with the Tabs component.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要从[http://jqueryui.com/](http://jqueryui.com/)获取jQuery UI，其中包括选项卡组件。
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The **jQuery UI Tabs** plugin makes use of accessible markup standards. As soon
    as we use predefined HTML markup, and hook it to **jQuery UI Tabs** with a selector,
    we're done!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery UI选项卡**插件使用了可访问的标记标准。只要我们使用预定义的HTML标记，并使用选择器将其连接到**jQuery UI选项卡**，我们就完成了！'
- en: '![How to do it...](graphics/3081_03_03.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/3081_03_03.jpg)'
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And, in the JavaScript call, we simply bind it as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，在JavaScript调用中，我们只需绑定它如下：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '**jQuery UI Tabs** markup has navigation links defined in an unordered list
    within the `tabs` container. The tab contents are placed next to the navigation
    links. Mapping from the navigation link to the tab container is done through the
    `id` of the containers.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery UI选项卡**标记在`tabs`容器中定义了无序列表中的导航链接。选项卡内容放置在导航链接旁边。从导航链接到选项卡容器的映射是通过容器的`id`完成的。'
- en: The theme of the tab has been applied from `jquery.ui.all.css` by applying the
    CSS selectors through JavaScript.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 选项卡的主题是通过JavaScript应用CSS选择器应用的`jquery.ui.all.css`。
- en: As seen in the following screenshot, the markup provides graceful degradation.
    When JavaScript is not available for some reason, the navigation still works,
    letting the link jump to the container.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，当由于某种原因JavaScript不可用时，标记提供了优雅的降级。导航仍然有效，让链接跳转到容器。
- en: '![How it works...](graphics/3081_03_04.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/3081_03_04.jpg)'
- en: There's more...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The **jQuery UI Tabs** plugin offers other nifty features too, such as loading
    Ajax content, the ability to get the tab displayed at the bottom, the ability
    to have sortable tabs through jQuery UI Sortable, and so on. Let''s see how to
    achieve these common features:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery UI选项卡**插件还提供其他一些不错的功能，例如加载Ajax内容，能够在底部显示选项卡，通过jQuery UI Sortable实现可排序选项卡等。让我们看看如何实现这些常见功能：'
- en: '**Remote Ajax Tabs:**'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程Ajax选项卡：**'
- en: 'Getting remote links to load in tabs is easy. jQuery UI Tabs has inbuilt support
    for that. So, it is enough to change the HTML markup alone:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 获取远程链接以在选项卡中加载很容易。jQuery UI选项卡内置支持此功能。因此，仅更改HTML标记就足够了：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, note that we don't have to add any container `div` element for remote
    link loading.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，请注意我们不必为远程链接加载添加任何容器`div`元素。
- en: '**Sortable Tabs:**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可排序选项卡：**'
- en: 'Firefox browser''s tabs are **sortable** —they can be dragged-and-dropped to
    change the order. **jQuery UI Tabs** are not sortable by default, but that ability
    can be added by using the `sortable` UI plugin:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox浏览器的选项卡是**可排序**的-它们可以拖放以更改顺序。**jQuery UI选项卡**默认情况下不可排序，但可以通过使用`sortable`UI插件添加该功能：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that the tabs' navigation links section found in an unordered list will
    be added with the `ui-tabs-nav` class dynamically when the `tabs()` call has been
    made and the unordered list's `ul` element has been hooked with the `sortable()`
    call.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当调用`tabs()`并且无序列表的`ul`元素已经与`sortable()`调用连接时，无序列表中找到的选项卡导航链接部分将动态添加`ui-tabs-nav`类。
- en: '**Styling Tabs:**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**样式选项卡：**'
- en: 'Styling tabs to change the appearance is easy. It can be done in the following
    ways:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过样式化选项卡来改变外观很容易。可以通过以下方式完成：
- en: An online theming tool called **ThemeRoller**, found at [http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为**ThemeRoller**的在线主题工具，位于[http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/)
- en: Manually tweaking the styles found in CSS declarations starting with `ui-tabs-`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动调整以`ui-tabs-`开头的CSS声明中找到的样式
- en: See also
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*The Building SEO-friendly Ajax websites* recipe in [Chapter 7](ch07.html "Chapter 7. Implementing
    Best Practices to Build Ajax Websites"),*Implementing Best Practices to Build
    Ajax Websites*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*在[第7章](ch07.html "第7章。实施构建Ajax网站的最佳实践")中的*构建SEO友好的Ajax网站*食谱*，*实施构建Ajax网站的最佳实践*'
- en: Rotating content
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旋转内容
- en: Scrolling content with effects in the iPhone and Mac OS is very attractive.
    In Web 2.0 sites, too, we sometimes require to fly or scroll the contents. That
    content rotation is usually needed for news tickers, announcement scrollers, stylish
    effects to present content like slideshows, and so on. The jQuery ecosystem has
    lot of plugins for that purpose. However, the `jQuery.scrollTo` plugin is relatively
    simple, provides lot of effects, and can therefore effectively be used in many
    situations.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在iPhone和Mac OS中使用效果滚动内容非常吸引人。在Web 2.0网站中，有时我们也需要飞行或滚动内容。通常需要内容旋转的地方包括新闻滚动条、公告滚动条、漂亮的幻灯片效果等。jQuery生态系统中有很多插件可用于此目的。然而，`jQuery.scrollTo`插件相对简单，提供了很多效果，因此可以在许多情况下有效地使用。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Along with the jQuery core library, we'll require the `jQuery.scrollTo` plugin
    from [http://plugins.jquery.com/project/ScrollTo](http://plugins.jquery.com/project/ScrollTo).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 除了jQuery核心库，我们还需要从[http://plugins.jquery.com/project/ScrollTo](http://plugins.jquery.com/project/ScrollTo)获取`jQuery.scrollTo`插件。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Here, we'll see how to scroll the content of the `div` container dynamically,
    using JavaScript. Initially, the HTML markup is straightforward, with a `div`
    container and links to trigger scroll down or up events.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看到如何使用JavaScript动态滚动`div`容器的内容。最初，HTML标记很简单，有一个`div`容器和用于触发向下或向上滚动事件的链接。
- en: '![How to do it...](graphics/3081_03_05.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/3081_03_05.jpg)'
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In JavaScript code, the trigger link `click` events are attached to the `scrollTo()`
    call:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript代码中，触发链接`click`事件附加到`scrollTo()`调用：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Width, height, and overflow properties are set through CSS, to get scrollbars
    on the content:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过CSS设置宽度、高度和溢出属性，以在内容上获得滚动条：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`scrollTo()` is a single method that takes variable parameters to control the
    scrolling effect. In the preceding example, the `content` container has been set
    to a fixed `width` and `height`, through CSS. To get the scrollbar, we have set
    the `overflow` property with the `auto` value. Therefore, some of the content
    gets hidden when the page is loaded. To scroll down, we have used `$(''#content'').scrollTo(800,
    ''slow'')`;.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`scrollTo()`是一个单一的方法，它接受可变参数来控制滚动效果。在上面的例子中，通过CSS将`content`容器设置为固定的`width`和`height`。为了获得滚动条，我们已经将`overflow`属性设置为`auto`值。因此，当页面加载时，一些内容会被隐藏。要向下滚动，我们使用了`$(''#content'').scrollTo(800,
    ''slow'')`；。'
- en: Here, `800` is the offset value to which the content should scroll. Animation
    speed is set to `slow`; without this parameter and value, the content will scroll
    instantly. Similarly, to scroll up or to reset the position of the content, we
    have used `$('#content').scrollTo(0, 'slow')`;.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`800`是内容应该滚动到的偏移值。动画速度设置为`slow`；没有这个参数和值，内容将立即滚动。类似地，要向上滚动或重置内容的位置，我们使用了`$('#content').scrollTo(0,
    'slow')`；。
- en: 'The first parameter of `scrollTo()` accepts the following values:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`scrollTo()`的第一个参数接受以下值：'
- en: '**Percentage value:**'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**百分比值：**'
- en: For example, if we call $(`'#content').scrollTo('50%', 'slow'),` the content
    will scroll only halfway up. To scroll down all the way, we may also use `$('#content').scrollTo('100%',
    'slow')` instead of $('#content').scrollTo(800,'slow').
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们调用$(`'#content').scrollTo('50%', 'slow')`，内容将只滚动到一半的位置。要滚动到最底部，我们也可以使用`$('#content').scrollTo('100%',
    'slow')`，而不是`$('#content').scrollTo(800,'slow')`。
- en: '**Selector:**'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择器：**'
- en: 'It is possible to scroll up to a particular selector in the content by passing
    the selector value in the first parameter, in this manner: `$(''#content'')` .scrollTo(`''#target'',''slow'').`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在第一个参数中传递选择器值来滚动到内容中的特定选择器，如下所示：`$('#content')` .scrollTo(`'#target','slow')`。
- en: '**Pixel value:**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**像素值：**'
- en: 'It also accepts pixel values like so: $(''#content'').scrollTo(''50px'',''slow'').
    This will keep the offset value in pixels.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 它还接受像这样的像素值：$('#content').scrollTo('50px','slow')。这将保持像素偏移值。
- en: '**jQuery object:**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQuery对象：**'
- en: 'A jQuery object can also be passed to specify the target in the following way:
    `$(''#content'').scrollTo($(''#target''),''slow'').`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以传递jQuery对象来指定目标，如下所示：`$('#content').scrollTo($('#target'),'slow')`。
- en: 'Apart from these, there are parameters to control the axis (whether to scroll
    in the horizontal or vertical direction), margin, queue (when set to `true`, it
    will make the scrolling happen in both axes, one by one), and callback functions.
    For example, the following snippet will scroll the content to a particular target
    element and also will prompt with the alert box once scrolling is completed:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，还有控制轴（是水平方向还是垂直方向滚动）、边距、队列（当设置为`true`时，会使滚动在两个轴上依次进行），以及回调函数的参数。例如，以下代码片段将滚动内容到特定的目标元素，并在滚动完成后弹出警告框：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: There's more...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`scrollTo()` is a generic plugin. It''s extended with a few plugins for ease
    of use:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`scrollTo()`是一个通用插件。它通过几个插件进行了扩展，以便更容易使用：'
- en: '**jQuery.SerialScroll:**'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQuery.SerialScroll：**'
- en: This plugin is available at [http://flesler.blogspot.com/2008/02/jqueryserialscroll.html.](http://flesler.blogspot.com/2008/02/jqueryserialscroll.html.)
    It uses the scrollTo plugin and can be used to get news tickers or easy horizontal
    and vertical scrolling.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件可在[http://flesler.blogspot.com/2008/02/jqueryserialscroll.html.](http://flesler.blogspot.com/2008/02/jqueryserialscroll.html.)上找到。它使用了scrollTo插件，可用于获取新闻滚动条或轻松的水平和垂直滚动。
- en: '**jQuery.LocalScroll:**'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQuery.LocalScroll：**'
- en: 'This is available at [http://flesler.blogspot.com/2007/10/jquerylocalscroll-10.html](http://flesler.blogspot.com/2007/10/jquerylocalscroll-10.html).
    It improves the local scrolling of anchor links with animation. For example, the
    following JavaScript code will make all local links scroll smoothly with animation:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在[http://flesler.blogspot.com/2007/10/jquerylocalscroll-10.html](http://flesler.blogspot.com/2007/10/jquerylocalscroll-10.html)找到。它改进了带有动画的锚链接的本地滚动。例如，以下JavaScript代码将使所有本地链接平滑滚动带有动画：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And then, local links like this will animate when jumping:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，像这样的本地链接将在跳转时进行动画：
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating an image slider
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建图像滑块
- en: Displaying images in a page as photo albums, features, screenshots, and so on
    are a common requirement in most websites. Displaying images in a slider with
    some effects will spice it up and would make the website "Ajaxified". To provide
    such effects and have a better finish, there are lot of jQuery plugins. In this
    recipe, we'll see how to display an image slider using the jCarousel plugin.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面中显示照片相册、特色、截图等图像是大多数网站的常见需求。在滑块中显示图像并添加一些效果将使其更加生动，并且会使网站“Ajax化”。为了提供这样的效果并获得更好的效果，有很多jQuery插件。在本食谱中，我们将看到如何使用jCarousel插件显示图像滑块。
- en: Getting ready
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll require the jCarousel plugin from [http://sorgalla.com/projects/jcarousel/](http://sorgalla.com/projects/jcarousel/),
    along with the jQuery core library.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要从[http://sorgalla.com/projects/jcarousel/](http://sorgalla.com/projects/jcarousel/)获取jCarousel插件，以及jQuery核心库。
- en: How to do it...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: It is enough to use the normal HTML markup—images in an unordered list—to get
    a photo listing. In order to hook the jCarousel plugin to the unordered list,
    we have set the `id`. To set the theme, we have set class to `jcarousel-skin-ie7`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 只需使用普通的HTML标记——无序列表中的图像——即可获得照片列表。为了将jCarousel插件连接到无序列表，我们已经设置了`id`。为了设置主题，我们将类设置为`jcarousel-skin-ie7`。
- en: '![How to do it...](graphics/3081_03_06.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/3081_03_06.jpg)'
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we attach jCarousel to the unordered list, through the selector, as shown
    in the following snippet:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过选择器将jCarousel附加到无序列表中，如下面的代码片段所示：
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This brings the wonderful **Image slider**, as shown in the preceding screenshot.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了精彩的**图像滑块**，如前面的屏幕截图所示。
- en: How it works...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Here, we have used simple and accessible HTML markup to display images—each
    image is wrapped inside an unordered list. We have hooked the jCarousel to the
    unordered list through its `id` to get a nifty image slider.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用简单和易于访问的HTML标记来显示图像——每个图像都包裹在无序列表中。我们通过其`id`将jCarousel连接到无序列表，以获得一个漂亮的图像滑块。
- en: 'jCarousel is bundled with two CSS skins:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: jCarousel捆绑了两种CSS皮肤：
- en: Tango—in compliance with the **Tango Desktop Project** that makes it possible
    to get consistent graphical user experiences for all open source software—found
    at [http://tango.freedesktop.org/](http://tango.freedesktop.org/).
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tango——符合**Tango桌面项目**的规定，使得所有开源软件都能获得一致的图形用户体验，网址为[http://tango.freedesktop.org/](http://tango.freedesktop.org/)。
- en: '**IE7**'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IE7**'
- en: 'jCarousel iterates every image in the unordered list and forms the sliding
    panel. It also takes care of navigating to the next and previous images. By default,
    the image slider appears in the horizontal direction. To have it appear in the
    vertical direction, we have to set it as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: jCarousel迭代无序列表中的每个图像并形成滑动面板。它还负责导航到下一个和上一个图像。默认情况下，图像滑块以水平方向显示。要使其以垂直方向显示，我们必须进行如下设置：
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The image slider is not circular. The next and previous buttons are disabled
    after hitting the last image in the slider. Sometimes, we may need to have a slider
    that keeps rolling in a circular manner. Getting that with jCarousel is simple
    and is done with the following code snippet:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图像滑块不是循环的。在滑块中的最后一个图像后，下一个和上一个按钮将被禁用。有时，我们可能需要一个保持以循环方式滚动的滑块。使用jCarousel很简单，可以通过以下代码片段实现：
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'jCarousel has the ability to set how many images should be scrolled for a next
    or previous sliding:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: jCarousel具有设置下一个或上一个滑动应滚动多少图像的能力：
- en: '[PRE25]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: There's more...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In fact, we have lots of plugins and ways to get image sliders. Here are some
    alternatives to jCarousel:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们有很多插件和方法可以获得图像滑块。以下是一些jCarousel的替代方案：
- en: '**Lightbox:**'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lightbox:**'
- en: Lightbox is covered in an upcoming recipe in this chapter. Some implementations
    have image sliding and slideshow options, and so we may use such versions as image
    sliders.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Lightbox将在本章的即将推出的食谱中介绍。一些实现具有图像滑动和幻灯片选项，因此我们可以使用这样的版本作为图像滑块。
- en: '**GalleryView:**'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GalleryView:**'
- en: GalleryView, available at [http://plugins.jquery.com/project/galleryview](http://plugins.jquery.com/project/galleryview)
    , has visually pleasing features to display an image gallery. It also has a thumbnail
    option to view available images instantly.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: GalleryView，网址为[http://plugins.jquery.com/project/galleryview](http://plugins.jquery.com/project/galleryview)，具有视觉上令人愉悦的功能来显示图像库。它还具有缩略图选项，可以立即查看可用的图像。
- en: Creating pageless pagination
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建无页码分页
- en: When the records on a page exceed certain limits, it is common to split the
    records into multiple pages and let the user access the pages through page-numbered
    links/next/previous/first/last links. Such a system is called **pagination.**
    In some Web 2.0 websites, we can find pageless pagination. It is unique; there
    is a "More" link at the bottom and, when clicked, will load content below it,
    through Ajax. This user interface is interesting, as the user doesn't have to
    click a "Previous" link to view previous pages; they're already available within
    the current page.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面上的记录超过一定限制时，通常会将记录分成多个页面，并让用户通过页码链接/下一页/上一页/第一页/最后一页链接访问页面。这样的系统称为**分页**。在一些Web
    2.0网站中，我们可以找到无页码分页。这是独特的；底部有一个“更多”链接，点击后将通过Ajax加载其下方的内容。这种用户界面很有趣，因为用户不必点击“上一页”链接来查看以前的页面；它们已经在当前页面中可用。
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll require the jQuery core library with a DB table in a schema similar
    to what is shown in the following code snippet:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要jQuery核心库和与以下代码片段中所示的模式类似的DB表。
- en: '[PRE26]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We create simple pagination that works by passing the page number over the
    query string. Here, we have used database connection statements for connecting
    and selecting the database of the `users` table. In every page, we have set the
    code to load only `10` records. In this code, we have mixed **templating** with
    programming logic:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的分页，通过查询字符串传递页码。在这里，我们使用了数据库连接语句来连接和选择`users`表的数据库。在每一页中，我们设置了代码只加载`10`条记录。在这段代码中，我们将**模板**与编程逻辑混合使用：
- en: '[PRE27]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For the JavaScript part, we have a simple call without any other plugins:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JavaScript部分，我们只需简单调用，不需要其他插件：
- en: '[PRE28]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This simple setup doesn't even require any plugins. In the PHP code, we have
    listed `$records_per_page` records through MySQL's `LIMIT` syntax. Furthermore,
    the code outputs the HTML without header and footer, when invoked through an Ajax
    call by sniffing `HTTP_X_REQUESTED_WITH`. For brevity, we have used basic syntax
    for templating. In JavaScript code, we have used `delegate()`. This is because
    the **Load next page** link is being dynamically loading—otherwise, we could have
    used the `click()` method. Note that `click()will` work only on the existing elements
    on a page, whereas `delegate()` will work on elements that are already on the
    page as well as those that will be created in the future. The `delegate()` method
    handles event delegation elegantly and is an easy replacement for `click()`. Apart
    from the logic of pagination and selective output for the Ajax call, use of even
    delegation to get the dynamically loaded link to respond to a `click` event (the
    core logic in JavaScript) is extremely simple—a call to `$.ajax()`. Also, note
    that our code works with page refresh, when JavaScript is not available, thus
    making it degrade gracefully.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的设置甚至不需要任何插件。在PHP代码中，我们通过MySQL的`LIMIT`语法列出了`$records_per_page`条记录。此外，当通过嗅探`HTTP_X_REQUESTED_WITH`进行Ajax调用时，代码输出不带头部和页脚的HTML。为了简洁起见，我们使用了模板的基本语法。在JavaScript代码中，我们使用了`delegate()`。这是因为**加载下一页**链接是动态加载的——否则，我们可以使用`click()`方法。请注意，`click()`只对页面上现有的元素起作用，而`delegate()`将对页面上已经存在的元素以及将来创建的元素起作用。`delegate()`方法优雅地处理事件委托，并且是`click()`的一个简单替代。除了分页逻辑和对Ajax调用的选择性输出之外，使用事件委托来使动态加载的链接响应`click`事件（JavaScript中的核心逻辑）非常简单——调用`$.ajax()`。还要注意，我们的代码在JavaScript不可用时可以通过页面刷新来工作，因此可以很好地降级。
- en: There's more...
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To test the pageless pagination, we may have to generate dummy data. Some programming
    frameworks have inbuilt support to generate test data. There are also online tools
    available.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试无页面分页，我们可能需要生成虚拟数据。一些编程框架内置支持生成测试数据。也有在线工具可用。
- en: '**GenerateData**'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成数据**'
- en: The online service GenerateData found at [http://www.generatedata.com/](http://www.generatedata.com/)
    is a very good and easy tool to generate sample test data.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在线服务GenerateData位于[http://www.generatedata.com/](http://www.generatedata.com/)，是一个非常好用的工具，可以生成样本测试数据。
- en: Loading images using Lightbox
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Lightbox加载图像
- en: In Ajax, Lightbox is a very useful concept, where the content of a link that
    is clicked, or an image, or video is loaded in a container window without taking
    the user to a separate page. Lightbox also turns a set of images found on the
    page into a slideshow in the container window. The original Lightbox script was
    written in the Prototype framework. In jQuery, there are lots of implementations
    available. However, the ColorBox plugin takes a lead with a better user interface
    and features. In this recipe, we'll see how to use the ColorBox plugin to improve
    Lightbox.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ajax中，Lightbox是一个非常有用的概念，点击链接的内容，或者图像，或视频加载到容器窗口中，而不会将用户带到单独的页面。Lightbox还将页面上找到的一组图像转换为容器窗口中的幻灯片放映。原始的Lightbox脚本是在Prototype框架中编写的。在jQuery中，有很多实现可用。然而，ColorBox插件以更好的用户界面和功能领先。在这个教程中，我们将看到如何使用ColorBox插件来改进Lightbox。
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Lightbox concept was introduced by Lokesh Dhakar. More details on this can
    be found on his website at [http://www.lokeshdhakar.com/projects/lightbox2/](http://www.lokeshdhakar.com/projects/lightbox2/).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Lightbox概念是由Lokesh Dhakar引入的。关于这个更多的细节可以在他的网站[http://www.lokeshdhakar.com/projects/lightbox2/](http://www.lokeshdhakar.com/projects/lightbox2/)上找到。
- en: Getting ready
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll require the ColorBox jQuery plugin from [http://colorpowered.com/colorbox/](http://colorpowered.com/colorbox/)
    along with the jQuery core library.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从[http://colorpowered.com/colorbox/](http://colorpowered.com/colorbox/)获取ColorBox
    jQuery插件以及jQuery核心库。
- en: How to do it...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: ColorBox HTML markup is merely a list of image links. We have listed the image
    links through an unordered list.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: ColorBox HTML标记仅仅是一组图像链接。我们通过无序列表列出了图像链接。
- en: '![How to do it...](graphics/3081_03_07.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/3081_03_07.jpg)'
- en: '[PRE29]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Similar to other jQuery plugins, it''s just about triggering through a selector:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他jQuery插件类似，只需通过选择器触发：
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This causes the images to load in the ColorBox overlay, as shown in the preceding
    screenshot.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致图像在ColorBox叠加中加载，如前面的屏幕截图所示。
- en: How it works...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In principle, the Lightbox script iterates all hooked links and stops them
    from getting loaded with page refresh. Here, we have listed a set of image links
    in an unordered list and then attached them to the `colorbox()` call. The ColorBox
    first forms the overlay container for the images being loaded. The ColorBox dimensions
    take the following defaults and can be overridden through parameter setting:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，Lightbox脚本会迭代所有挂接的链接，并阻止它们在页面刷新时加载。在这里，我们列出了一个无序列表中的一组图像链接，然后将它们附加到`colorbox()`调用。ColorBox首先形成了用于加载图像的叠加容器。ColorBox尺寸采用以下默认值，并可以通过参数设置进行覆盖：
- en: '[PRE31]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'With the default options, the ColorBox doesn''t have the automatic slideshow
    feature enabled. To enable automatic slideshow, the code is as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 默认选项下，ColorBox没有启用自动幻灯片放映功能。要启用自动幻灯片放映，代码如下：
- en: '[PRE32]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The ColorBox theme can easily be changed through CSS and it already comes with
    five different styles.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: ColorBox主题可以通过CSS轻松更改，它已经带有五种不同的样式。
- en: There's more...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It is common to find a number of implementations for the same functionality,
    as developers sometimes start a new project because of dissatisfaction over existing
    implementations. And, for the same reasons, we have many Lightbox implementations
    available, such as the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会发现对于相同功能有多种实现，因为开发人员有时会因对现有实现不满而开始新项目。出于同样的原因，我们有许多Lightbox实现可用，例如以下内容：
- en: '**Lightbox Clones Matrix:**'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lightbox克隆矩阵:**'
- en: The Lightbox Clones Matrix, available at [http://planetozh.com/projects/lightbox-clones/](http://planetozh.com/projects/lightbox-clones/),
    shows the comparison between various Lightbox implementations.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Lightbox克隆矩阵，可在[http://planetozh.com/projects/lightbox-clones/](http://planetozh.com/projects/lightbox-clones/)上找到，显示了各种Lightbox实现之间的比较。
- en: '**SlimBox 2:**'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SlimBox 2:**'
- en: This is another Lightbox implementation. The original SlimBox implementation,
    first written in the Mootools framework, was very much appreciated for being lightweight.
    Later, in version 2, the author ported his code to jQuery—[http://www.digitalia.be/software/slimbox2](http://www.digitalia.be/software/slimbox2).
    It's 100% compliant with the original Lightbox by Lokesh Dhakar in terms of features
    and HTML markup. So, we can quickly replace the original Lightbox with it by just
    changing the JavaScript library path.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一种Lightbox实现。最初在Mootools框架中编写的原始SlimBox实现因其轻量级而受到很高评价。后来，在第2版中，作者将他的代码移植到了jQuery中—[http://www.digitalia.be/software/slimbox2](http://www.digitalia.be/software/slimbox2)。它在功能和HTML标记方面与Lokesh
    Dhakar的原始Lightbox完全兼容。因此，我们可以通过更改JavaScript库路径来快速将原始Lightbox替换为它。
- en: Growing textarea using the jGrow plugin
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jGrow插件增长textarea
- en: In web browsers, the `textarea` element's height and width are controlled through
    the `rows` and `cols` attributes or through `height` and `width` CSS properties.
    When we enter more text in the `textarea`, the upper text will move up, leaving
    a scrollbar. To improve the UI for `textarea`, some Ajax experts have made the
    `textarea` grow when more text is entered. In this recipe, we'll see how to use
    the jGrow plugin to get such a growing `textarea`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web浏览器中，`textarea`元素的高度和宽度通过`rows`和`cols`属性或通过`height`和`width`CSS属性进行控制。当我们在`textarea`中输入更多文本时，上方的文本将向上移动，留下滚动条。为了改进`textarea`的UI，一些Ajax专家已经使`textarea`在输入更多文本时增长。在这个教程中，我们将看到如何使用jGrow插件来获得这样一个增长的`textarea`。
- en: Getting ready
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We'll require the jGrow jQuery plugin from [http://lab.berkerpeksag.com/jGrow](http://lab.berkerpeksag.com/jGrow)
    along with the jQuery core library.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从[http://lab.berkerpeksag.com/jGrow](http://lab.berkerpeksag.com/jGrow)获取jGrow
    jQuery插件以及jQuery核心库。
- en: How to do it...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Here, we have used a simple `textarea` with an `id` set, so that it can easily
    be hooked with jQuery selector.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一个简单的带有设置`id`的`textarea`，以便可以轻松地与jQuery选择器连接。
- en: '![How to do it...](graphics/3081_03_08.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到...](graphics/3081_03_08.jpg)'
- en: 'Here''s the HTML markup:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是HTML标记：
- en: '[PRE33]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Again, as usual, we have attached the plugin through the `id` value of the `textarea:`
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们通过`textarea`的`id`值附加了插件：
- en: '[PRE34]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When hooked to the `textarea`, the jGrow plugin creates a `div` element above
    the text area and starts holding the input text. This makes it easier to control
    the height through CSS properties. On every `keyup` event, a new jGrow call is
    made to trigger, and thus, it increases the height whenever necessary.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 当连接到`textarea`时，jGrow插件会在文本区域上方创建一个`div`元素，并开始保存输入文本。这样可以通过CSS属性更容易地控制高度。在每次`keyup`事件上，都会进行新的jGrow调用来触发，从而在必要时增加高度。
- en: 'It also has an option to limit the growing height, so that it won''t let it
    grow beyond the specified height:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有一个选项来限制增长的高度，以便它不会超出指定的高度：
- en: '[PRE35]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: There's more...
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Improving the `textarea` UI will improve usability. There are similar plugins
    available in the jQuery ecosystem. One of them is **autoGrowInput**. Just like
    we have a growing `textarea`, we may, at some time, want to have a growing input
    box. In that case, we may use this plugin available at [http://stackoverflow.com/questions/931207/is-there-a-jquery-autogrow-plugin-for-text-fields](http://stackoverflow.com/questions/931207/is-there-a-jquery-autogrow-plugin-for-text-fields).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 改进`textarea`的UI将提高可用性。在jQuery生态系统中有类似的插件可用。其中之一是**autoGrowInput**。就像我们有一个增长的`textarea`一样，有时候我们可能想要一个增长的输入框。在这种情况下，我们可以使用这个插件，该插件可在[http://stackoverflow.com/questions/931207/is-there-a-jquery-autogrow-plugin-for-text-fields](http://stackoverflow.com/questions/931207/is-there-a-jquery-autogrow-plugin-for-text-fields)上找到。
- en: HTML replacement of the select dropdown
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替换select下拉框的HTML
- en: Improving the UI of the form select dropdown is an interesting topic. For instance,
    except Internet Explorer, other web browsers support styling of each option in
    the `select` element. This is of great help, especially when we have to show country
    flag along with country name when listing countries in the **selectbox**. As direct
    styling of the `option` elements is not possible in Internet Explorer, one approach
    is to replace them with an anchored ordered/unordered list so that each list can
    be styled. In this recipe, we'll look into such HTML replacement.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 改进表单选择下拉框的UI是一个有趣的话题。例如，除了Internet Explorer之外，其他Web浏览器支持对`select`元素中的每个选项进行样式设置。这对我们来说非常有帮助，特别是当我们在**selectbox**中列出国家时，需要显示国家旗帜和国家名称。由于在Internet
    Explorer中无法直接对`option`元素进行样式设置，因此一种方法是将其替换为带有锚定的有序/无序列表，以便对每个列表进行样式设置。在这个教程中，我们将研究这种HTML替换方法。
- en: Getting ready
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We'll require the jQuery UI selectmenu plugin from [https://github.com/fnagel/jquery-ui](http://https://github.com/fnagel/jquery-ui)
    along with the jQuery UI core.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从[https://github.com/fnagel/jquery-ui](http://https://github.com/fnagel/jquery-ui)获取jQuery
    UI selectmenu插件以及jQuery UI核心。
- en: How to do it...
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: The HTML markup to get this done is a simple form with the `select` element.
    Note that we are going to use the jQuery UI selectmenu plugin to convert the `select`
    element to an unordered list and get the styling done through CSS.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此操作的HTML标记是一个带有`select`元素的简单表单。请注意，我们将使用jQuery UI selectmenu插件将`select`元素转换为无序列表，并通过CSS进行样式设置。
- en: '![How to do it...](graphics/3081_03_09.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到...](graphics/3081_03_09.jpg)'
- en: '[PRE36]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When we attach the jQuery UI selectmenu to the `select` element, it gets replaced
    with an unordered list.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将jQuery UI selectmenu附加到`select`元素时，它会被替换为一个无序列表。
- en: '[PRE37]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works...
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As mentioned, at least for now, easy styling is more likely to be possible in
    an ordered/unordered list rather than in a selectbox, especially in Internet Explorer.
    When the selectbox is attached to the plugin, it iterates over the select options
    and creates an unordered list of options. It also hides the original selectbox.
    For the rest of the effect to mimic the selectbox, all selection and highlighting
    are being handled through JavaScript over the unordered list.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，至少目前来看，易于样式化更可能出现在有序/无序列表中，而不是在选择框中，特别是在Internet Explorer中。当选择框附加到插件时，它会遍历选择选项并创建一个无序选项列表。它还会隐藏原始的选择框。为了模仿选择框的其余效果，所有选择和高亮都是通过JavaScript在无序列表上处理的。
- en: As this plugin is compliant with jQuery UI, it brings the same theming power
    to this plugin. We can apply themes to it, just like other jQuery UI elements.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个插件符合jQuery UI，它为这个插件带来了相同的主题化能力。我们可以像其他jQuery UI元素一样对其应用主题。
- en: There's more...
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are some peculiar cases where we'll be forced to use selectbox replacement.
    That will mostly happen when we target more browsers.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些特殊情况，我们将被迫使用选择框替换。这在我们针对更多的浏览器时可能会经常发生。
- en: '**Icons for options:**'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选项图标：**'
- en: 'We''d require this replacement when trying to put icons next to options. Some
    example cases are: including country flag icons in a countries dropdown, including
    user avatars in a users dropdown, and so on.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当尝试在选项旁边放置图标时，我们需要这个替代。一些示例情况包括：在国家下拉菜单中包含国家旗帜图标，在用户下拉菜单中包含用户头像等。
- en: '**Chosen:**'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chosen:**'
- en: This selectbox replacement plugin transforms the single selectbox UI making
    it searchable as in Autocomplete. For the multi-select selectbox, it transforms
    into delicious.com's tag input UI. It can be found at http://harvesthq.github.com/chosen/.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选择框替换插件转换了单个选择框UI，使其可以像自动完成一样进行搜索。对于多选选择框，它会转换为delicious.com的标签输入UI。它可以在http://harvesthq.github.com/chosen/上找到。
- en: Improving date selection with Datepicker
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过日期选择器改进日期选择
- en: A **Datepicker** or calendar widget is part of any Web 2.0 website. It helps
    in quickly selecting dates visually and thus avoids errors in the date when a
    user has to input it in a particular format. The jQuery UI offers a datepicker
    plugin to which themes can be applied. In this recipe, we'll see how to use or
    integrate this datepicker in any website.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 日期选择器或日历小部件是任何Web 2.0网站的一部分。它有助于快速可视地选择日期，从而避免用户在特定格式中输入日期时出现错误。jQuery UI提供了一个日期选择器插件，可以应用主题。在这个教程中，我们将看到如何在任何网站中使用或集成这个日期选择器。
- en: Getting ready
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll require the jQuery UI from [http://jqueryui.com/](http://jqueryui.com/),
    with the datepicker component.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从[http://jqueryui.com/](http://jqueryui.com/)获取jQuery UI，其中包含日期选择器组件。
- en: How to do it...
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To get the datepicker widget, we create a date input field to get date of birth.
    We set the `name` and `id` attributes to `dob`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得日期选择器小部件，我们创建一个日期输入字段来获取出生日期。我们将`name`和`id`属性设置为`dob`。
- en: '![How to do it...](graphics/3081_03_10.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/3081_03_10.jpg)'
- en: '[PRE38]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'When the `dob` input field is triggered with a `datepicker()` call, it attaches
    the calendar widget. The calendar widget pops up when the input field is clicked
    on:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`datepicker()`调用触发`dob`输入字段时，它会附加日历小部件。当单击输入字段时，日历小部件会弹出：
- en: '[PRE39]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The jQuery UI datepicker plugin creates a dynamic calendar widget when attached
    over any `input` element. In its default behavior, it will pop up when the attached
    input textbox is triggered. It improves the usability of selecting dates considerably.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当附加到任何`input`元素上时，jQuery UI日期选择器插件会创建一个动态日历小部件。在其默认行为中，当触发附加的输入文本框时，它会弹出。它极大地提高了选择日期的可用性。
- en: 'We can get an inline calendar by hooking it to a `div` tag:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将其挂钩到`div`标签来获得内联日历：
- en: '[PRE40]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'It''s also possible to have more months shown in the calendar by setting the
    `numberOfMonths` parameter:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过设置`numberOfMonths`参数在日历中显示更多月份：
- en: '[PRE41]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Similarly, we can also restrict the date to a particular range:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们也可以限制日期到特定范围：
- en: '[PRE42]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the preceding case, the date that can be selected will range from "2 days
    from current date" to "1 month 15 days from current date".
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的情况下，可以选择的日期范围从“当前日期后2天”到“当前日期后1个月15天”。
- en: 'By default, the date format uses the American format of mm/dd/yy. It can be
    changed to another format with the `dateFormat` parameter, say to ISO format,
    as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，日期格式使用美国格式mm/dd/yy。可以使用`dateFormat`参数更改为另一种格式，比如ISO格式，如下所示：
- en: '[PRE43]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: There's more...
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We have very nice jQuery plugins to choose dates. Here are some useful datepicker
    plugins:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有非常好的jQuery插件来选择日期。以下是一些有用的日期选择器插件：
- en: '**Continuous calendar:**'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连续日历：**'
- en: This plugin lists the calendar in a continuous format, making it easier to select
    dates across months. This is available at [http://old.laughingpanda.org/mediawiki/index.php/Continuous_calendar](http://old.laughingpanda.org/mediawiki/index.php/Continuous_calendar).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件以连续格式列出日历，使得跨月选择日期更容易。它可以在[http://old.laughingpanda.org/mediawiki/index.php/Continuous_calendar](http://old.laughingpanda.org/mediawiki/index.php/Continuous_calendar)上找到。
- en: '**wdCalendar:**'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**wdCalendar:**'
- en: This plugin isn't for selecting dates, but it's a full-blown calendar application
    similar to Google Calendar. It's available with PHP server scripts at [http://www.web-delicious.com/jquery-plugins/](http://www.web-delicious.com/jquery-plugins/).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件不是用于选择日期的，而是类似于Google日历的完整日历应用程序。它可以在[http://www.web-delicious.com/jquery-plugins/](http://www.web-delicious.com/jquery-plugins/)上找到PHP服务器脚本。
- en: Drag-and-drop functionality
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拖放功能
- en: Drag-and-drop functionality is a major feature of the modern Web. It is the
    ability to move objects around on the website. In this task, we will learn how
    to build a nice drag-and-drop layout using `jQuery.sortable()`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 拖放功能是现代Web的一个重要特性。它是在网站上移动对象的能力。在这个任务中，我们将学习如何使用`jQuery.sortable()`构建一个漂亮的拖放布局。
- en: Getting ready
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In the beginning, we will need to download the jQuery library with jQuery UI
    and include them before the closing the`</body>` tag:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要下载带有jQuery UI的jQuery库，并在`</body>`标签之前包含它们：
- en: '[PRE44]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In this example, we will use a random image downloaded from the internet (with
    preferred dimensions of 200x80 pixels).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用从互联网上下载的随机图片（首选尺寸为200x80像素）。
- en: How to do it...
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'When the jQuery library with jQuery UI is ready, we can start with HTML. We
    will build four main `div` elements: `top, sidebar, sidebar2`, and `mainContent`.
    Each of them includes a `sortable` list:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当jQuery库与jQuery UI准备就绪时，我们可以开始使用HTML。我们将构建四个主要的`div`元素：`top, sidebar, sidebar2`和`mainContent`。每个都包括一个`sortable`列表：
- en: '[PRE45]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, the CSS styles need to be applied:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在需要应用CSS样式：
- en: '[PRE46]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: When the HTML and CSS are ready, we can see the following result:![How to do
    it...](graphics/3081_03_11.jpg)
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当HTML和CSS准备就绪时，我们可以看到以下结果：![如何做...](graphics/3081_03_11.jpg)
- en: 'Now we have nice static layout. Let''s start with JavaScript:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了漂亮的静态布局。让我们从JavaScript开始：
- en: '[PRE47]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: After applying this simple function, our result will look like the following:![How
    to do it...](graphics/3081_03_12.jpg)
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用这个简单的功能后，我们的结果将如下所示：![如何做...](graphics/3081_03_12.jpg)
- en: How it works...
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The main magic happens inside the `sortable` function. We are binding the sortable
    functionality on all lists in the document, as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的魔术发生在`sortable`函数内部。我们正在将可排序功能绑定到文档中的所有列表，如下所示：
- en: '`$(''#sidebar ul, #top ul, #sidebar2 ul, #mainContent ul'')`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(''#sidebar ul, #top ul, #sidebar2 ul, #mainContent ul'')`'
- en: '[PRE48]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We are connecting them with each other in order to be able to move an item
    from one list to the other, as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在将它们连接在一起，以便能够将一个项目从一个列表移动到另一个列表，如下所示：
- en: '`connectWith: ''.sortable''`,'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`connectWith: ''.sortable''`'
- en: 'When the object is close enough to one of the sortable lists, we can see the
    placeholder (green division with dashed border) with the help of `placeholder:
    ''placeholder''`.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '当对象靠近其中一个可排序的列表时，我们可以看到占位符（带有虚线边框的绿色分区）的帮助下`placeholder: ''placeholder''`。'
- en: There's more...
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Moving the objects around the website is really nice, but it is not so useful
    without the ability to save the current location. Now, we will learn how to store
    this information in cookies and how to read them when it is needed. We will use
    the jQuery Cookie plugin from [http://plugins.jquery.com/project/Cookie](http://plugins.jquery.com/project/Cookie),
    as follows:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站上移动对象确实很好，但如果没有保存当前位置的能力，它就不那么有用。现在，我们将学习如何将这些信息存储在cookies中，以及在需要时如何读取它们。我们将使用来自[http://plugins.jquery.com/project/Cookie](http://plugins.jquery.com/project/Cookie)的jQuery
    Cookie插件，如下所示：
- en: '[PRE49]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We will also use the possibility to save the layout information on the server
    side using Ajax, as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用Ajax在服务器端保存布局信息的可能性，如下所示：
- en: '**Saving items:**'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存物品：**'
- en: 'We can create a function, `getItems()`, to find every unsorted list in the
    document, save its ID as a groupName, and find all items related to this group.
    The result will be the string `items` in the form `"group1=item1,item2&group2=item3,item4,..."`:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个`getItems()`函数，来查找文档中的每个未排序列表，将其ID保存为groupName，并找到与该组相关的所有项目。结果将是以`"group1=item1,item2&group2=item3,item4,..."`形式的字符串`items`：
- en: '[PRE50]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Once we know how to get all the items, we''ll want to save them in cookies.
    For this purpose, we will use the `update` method in a `sortable` function:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道如何获取所有的物品，我们就想要将它们保存在cookies中。为此，我们将在`sortable`函数中使用`update`方法：
- en: '[PRE51]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Our `ajax/saveLayout.php` file could look like the following:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`ajax/saveLayout.php`文件可能如下所示：
- en: '[PRE52]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '**Loading Items:**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载物品：**'
- en: Loading items is the same as reversing the function `getItems`. First of all,
    we need to read `items` from the cookies, which are stored there as a string.
    We will split this string by `'&'` into groups, by `'='` into the group name and
    array of items, and by `','` into separated items. When we have the list of items,
    we will split them into lists, by group name. If the items are not stored in cookies,
    we will load them from the server (`ajax/getLayout.php`).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 加载物品与反转`getItems`函数相同。首先，我们需要从cookies中读取`items`，它们以字符串的形式存储在那里。我们将通过`'&'`拆分这个字符串成组，通过`'='`拆分成组名和项目数组，通过`,`拆分成单独的项目。当我们有项目列表时，我们将它们按组名拆分成列表。如果项目没有存储在cookies中，我们将从服务器加载它们（`ajax/getLayout.php`）。
- en: '[PRE53]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The `ajax/getLayout.php` example file will look like the following:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`ajax/getLayout.php`示例文件将如下所示：'
- en: '[PRE54]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The `renderItems()` function can be triggered by the `click` event on `renderButton:`
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`renderItems()`函数可以由`renderButton`上的`click`事件触发：'
- en: '[PRE55]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Ajax shopping cart
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ajax购物车
- en: 'Shopping carts play an important role in e-commerce websites. In this task,
    we will learn how to build a shopping cart with Ajax functionality to provide
    the best user experience. The result of this task will look like the following
    screenshot:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车在电子商务网站中扮演着重要的角色。在这个任务中，我们将学习如何使用Ajax功能构建一个购物车，以提供最佳的用户体验。这个任务的结果将如下截图所示：
- en: '![Ajax shopping cart](graphics/3081_03_13.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![Ajax购物车](graphics/3081_03_13.jpg)'
- en: Getting ready
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All we need for this task is the latest jQuery library and a sample `.php` file,
    `ajax/shopping-cart.php`.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个任务所需要的只是最新的jQuery库和一个样本`.php`文件，`ajax/shopping-cart.php`。
- en: 'This script will provide basic server functionality to retrieve and receive
    data:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本将提供基本的服务器功能来检索和接收数据：
- en: '[PRE56]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: How to do it...
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s start with HTML:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从HTML开始：
- en: '[PRE57]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, we need to include our CSS:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要包含我们的CSS：
- en: '[PRE58]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'And the last, but most important—JavaScript functionality:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，但最重要的是JavaScript功能：
- en: '[PRE59]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works...
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The Ajax shopping cart functionality has two main parts. The first part handles
    the product list. Every product item has a `Buy` button where we can bind the
    `click` event with the functionality to add a product to the shopping cart:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax购物车功能有两个主要部分。第一部分处理产品列表。每个产品项都有一个`Buy`按钮，我们可以将`click`事件与将产品添加到购物车的功能绑定在一起：
- en: '[PRE60]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The second part is the shopping cart itself. By default, it includes the `incart-product-template`.
    This template is used to build a product based on a selected product from the
    product list.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分是购物车本身。默认情况下，它包括`incart-product-template`。此模板用于基于产品列表中选择的产品构建产品。
- en: '[PRE61]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: There's more...
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In e-commerce websites, we need to be very careful and protect our data as much
    as possible. One of the attacks we can prepare for is **Cross-Site Request Forgery
    (CSRF)**. CSRF is an attack that tricks a victim into loading a specific page
    that contains a malicious request. The page acts like a favorite website (such
    as our e-mail provider) waiting for our request (changing the password, sending
    an e-mail), and tries to get sensitive data.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子商务网站中，我们需要非常小心地保护我们的数据。我们可以准备的攻击之一是**跨站请求伪造（CSRF）**。CSRF是一种欺骗受害者加载包含恶意请求的特定页面的攻击。该页面的行为类似于一个喜爱的网站（例如我们的电子邮件提供商），等待我们的请求（更改密码，发送电子邮件），并试图获取敏感数据。
- en: The best strategy to protect our website against a CSRF attack is by using CSRF
    tokens in our requests. We can generate a unique token for the user and store
    it in the session. When the token provided in the request matches with the token
    stored in the session, we can accept the request. If not, we will reject it.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 保护我们的网站免受CSRF攻击的最佳策略是在我们的请求中使用CSRF令牌。我们可以为用户生成一个唯一的令牌并将其存储在会话中。当请求中提供的令牌与会话中存储的令牌匹配时，我们可以接受该请求。如果不匹配，我们将拒绝它。
- en: 'To use this token in our source, we need to make it available in JavaScipt:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的源代码中使用这个令牌，我们需要在JavaScipt中使其可用：
- en: '[PRE62]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Then, we will include an extra post parameter for `csrf_token` in our jQuery
    source:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在我们的jQuery源中包含一个额外的`csrf_token`后参数：
- en: '[PRE63]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Sorting and filtering data
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序和过滤数据
- en: Usually, the best place for sorting and filtering data is the database. But,
    sometimes, we need to work with the given data on the client side only. For example,
    filtering a simple contact list or sorting a small data grid. In this task, we
    will learn how to filter and sort data on the client side.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对数据进行排序和过滤的最佳位置是数据库。但有时，我们需要仅在客户端处理给定的数据。例如，过滤简单的联系人列表或对小型数据网格进行排序。在这个任务中，我们将学习如何在客户端对数据进行过滤和排序。
- en: Getting ready
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will need the jQuery library:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要jQuery库：
- en: '[PRE64]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: We will also need a sample of data in JSON format from `json/developers.json:`
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要从`json/developers.json`中获取JSON格式的数据样本：
- en: '[PRE65]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: How to do it...
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the beginning, we will build the HTML code with `searchPlaceHolder` and
    `datalist`, as shown in the following code snippet:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一开始，我们将使用`searchPlaceHolder`和`datalist`构建HTML代码，如下面的代码片段所示：
- en: '[PRE66]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'We will use some nifty CSS:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用一些巧妙的CSS：
- en: '[PRE67]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'When the HTML and CSS are ready, we can start with JavaScript:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当HTML和CSS准备好后，我们可以开始使用JavaScript：
- en: '[PRE68]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: When everything is ready, our result looks like the following:![How to do it...](graphics/3081_03_14.jpg)
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一切准备就绪时，我们的结果如下所示：![如何做...](graphics/3081_03_14.jpg)
- en: How it works...
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `document.ready` event, we ask the server for data. This data is saved
    as the `developers` object and is sorted by the full name of each developer.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在`document.ready`事件中，我们向服务器请求数据。这些数据保存为`developers`对象，并按每个开发人员的全名进行排序。
- en: Once the data object has been retrieved from the server, we call the `initContacts()`;
    function. This function processes the developers object and creates a list of
    developers in datalist. When the user enters a search term then the searchString
    variable is populated. This triggers a refresh of the developers list, showing
    only those developers whose name, location or label contains the exact search
    string.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从服务器检索到数据对象，我们调用`initContacts()`函数。该函数处理开发人员对象并在数据列表中创建开发人员列表。当用户输入搜索词时，搜索字符串变量被填充。这会触发开发人员列表的刷新，仅显示那些名字、位置或标签包含完全匹配搜索字符串的开发人员。
- en: There's more...
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The sorting of the data in the preceding example works only for strings. If
    we want to use sorting by integer or by date we have to create new sorting functions:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，数据的排序仅适用于字符串。如果我们想要按整数或日期进行排序，我们必须创建新的排序函数：
- en: '**Sorting by integer:**'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按整数排序：**'
- en: 'This is an example of a sorting function for integers (ascending order):'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个按整数排序的示例函数（升序）：
- en: '[PRE69]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '**Sorting by date:**'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按日期排序：**'
- en: 'Here, the data is sorted by date:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，数据按日期排序：
- en: '[PRE70]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Adding visual effects and animations
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加视觉效果和动画
- en: The biggest advantage of jQuery is in its ability to work with the DOM, and
    create neat effects and animations. In this task, we will learn how to create
    our own image/content slider with the ability to load images dynamically.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery最大的优势在于它能够与DOM一起工作，并创建整洁的效果和动画。在这个任务中，我们将学习如何创建我们自己的图像/内容滑块，并能够动态加载图像。
- en: Getting ready
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will need to prepare some example images and save them to our `images` folder.
    And, of course, we will need the jQuery library.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要准备一些示例图片并将它们保存到我们的`images`文件夹中。当然，我们还需要jQuery库。
- en: How to do it...
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'As usual, we will start with HTML code:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像往常一样，我们将从HTML代码开始：
- en: '[PRE71]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'In this task, the CSS code is really important:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个任务中，CSS代码非常重要：
- en: '[PRE72]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'And, finally, JavaScript functionality:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，JavaScript功能：
- en: '[PRE73]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The result of the preceding source code is a simple image slider:![How to do
    it...](graphics/3081_03_15.jpg)
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面源代码的结果是一个简单的图像滑块：![如何做...](graphics/3081_03_15.jpg)
- en: How it works...
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The slider has two main objects—the list with images and the navigation. The
    navigation contains buttons **(Prev, Next)** for changing the current image. After
    clicking on one of these buttons, we call the `moveTo()` function. This function
    animates the left margin of the sliding list:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块有两个主要对象——包含图像的列表和导航。导航包含**（上一个，下一个）**按钮，用于更改当前图像。单击其中一个按钮后，我们调用`moveTo()`函数。该函数会动画显示滑动列表的左边距：
- en: '[PRE74]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'When the animation is completed, we check the visibility of the navigation
    buttons, as follows:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 当动画完成时，我们检查导航按钮的可见性，如下所示：
- en: '[PRE75]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The slider uses the `preloadPictures()` function to preload the required pictures
    dynamically. When the page loads for the first time, we will load the first two
    pictures into the slider. The first picture is displayed and the second one is
    prepared for smooth sliding. After clicking on the **Next** button we will call
    the `preloadPictures()` function again, to preload another picture to the list.
    This will be prepared for the next slide, as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 滑块使用`preloadPictures()`函数动态预加载所需的图片。当页面首次加载时，我们将把前两张图片加载到滑块中。第一张图片被显示，第二张图片被准备好进行平滑滑动。点击**下一个**按钮后，我们将再次调用`preloadPictures()`函数，预加载另一张图片到列表中。这将为下一张幻灯片做准备，如下所示：
- en: '[PRE76]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: There's more...
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can combine more animations in one slider. Now, we will create a description
    list, which will provide separate information for the current slide. We will modify
    `navContainer:`
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在一个滑块中结合更多的动画。现在，我们将创建一个描述列表，为当前幻灯片提供单独的信息。我们将修改`navContainer:`
- en: '[PRE77]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'We will also make the following addition to our CSS:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将对我们的CSS进行以下添加：
- en: '[PRE78]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Next, we will extend the `moveTo()` function, as follows:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将扩展`moveTo()`函数，如下所示：
- en: '[PRE79]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Now, we have achieved a nice image/content slider with a professional look:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经实现了一个具有专业外观的漂亮的图像/内容滑块：
- en: '![There''s more...](graphics/3081_03_16.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](graphics/3081_03_16.jpg)'
