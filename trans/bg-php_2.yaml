- en: Chapter 2. Arrays and Loops
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。数组和循环
- en: In the previous chapter, we covered variables and data types along with the
    different operators. We also covered how to control the flow of programs using
    conditionals. In this chapter, we will focus on how to store multiple values using
    arrays and how to control the flow using loops. The basic idea of an array is
    that it is a variable type, allowing one to store multiple items within a single
    `container`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了变量和数据类型以及不同的运算符。我们还讨论了如何使用条件控制程序的流程。在本章中，我们将重点讨论如何使用数组存储多个值以及如何使用循环控制流程。数组的基本思想是它是一种变量类型，允许将多个项目存储在一个“容器”中。
- en: For example, if you wanted to store the names of all the employees working in
    a company under the same variable, an array would help you do that. Loops are
    used when we want to run the same block of code multiple times. This saves a lot
    of work for the developer by reusing the pre-defined code block. These two concepts
    are at the core of almost every PHP-based web application and website on the web
    today.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想要将公司中所有员工的姓名存储在同一个变量下，数组将帮助您实现这一点。当我们想要多次运行相同的代码块时，使用循环。这通过重用预定义的代码块为开发人员节省了大量工作。这两个概念几乎是今天几乎每个基于PHP的Web应用程序和网站的核心。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Implement one-dimensional and multidimensional arrays
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一维和多维数组
- en: Identify the difference between indexed and associative arrays
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别索引数组和关联数组之间的区别
- en: Perform different operations on arrays
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数组执行不同的操作
- en: Implement various types of loops
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现各种类型的循环
- en: Arrays
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: In this section, we will talk about the various types of arrays and then look
    at some common operations with them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论各种类型的数组，然后查看一些常见的操作。
- en: Indexed Arrays
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引数组
- en: Indexed arrays are the most common types of arrays that you will see, and they
    can be defined as either prepopulated or empty.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 索引数组是您将看到的最常见的数组类型，它们可以被定义为预填充或空的。
- en: 'An empty array can be defined as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按以下方式定义空数组：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that `$the_array` is a variable. You can use any other variable that you
    like.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`$the_array`是一个变量。您可以使用任何其他变量。
- en: 'Another way to use the shortcut syntax:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用快捷语法的另一种方法：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you want to initiate an array with values, you can do so as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要使用值初始化数组，可以按以下方式执行：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When you initialize an array with prepopulated values, each element gets a numeric
    index, starting at 0\. So, in the preceding example, the index for Jill will be
    0, the index for Michael will be 1, the index for John will be 2, and the index
    for Sally will be 3.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用预填充值初始化数组时，每个元素都会获得一个数字索引，从0开始。因此，在前面的例子中，Jill的索引将为0，Michael的索引将为1，John的索引将为2，Sally的索引将为3。
- en: 'In order to print out the first index of the `students` array, you can use
    the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印`students`数组的第一个索引，可以使用以下代码：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Usually, when you use an array, you want to add to it throughout the course
    of your program. This can be done in one of two ways:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当您使用数组时，希望在程序运行过程中添加到数组中。可以通过以下两种方式之一完成：
- en: 'The `append` shortcut:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`append`快捷方式：'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Or the `array`_`push` function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或`array_push`函数：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Typically, the shortcut method is used by developers; if you want to push multiple
    records to an array at a time, you can use the `array_push` function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，开发人员使用快捷方法；如果要一次将多个记录推送到数组中，可以使用`array_push`函数。
- en: 'Sometimes, you''ll have an element in an array that needs to be removed. To
    remove an element from an array, use the `unset` function. In the following example,
    we remove "Tom" from the array:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能需要从数组中删除一个元素。要从数组中删除一个元素，使用`unset`函数。在下面的例子中，我们从数组中删除了“Tom”：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The last section that we will discuss before moving on is updating an element.
    To do so, do the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们将讨论最后一个部分，即更新一个元素。要这样做，请执行以下操作：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Associative Arrays
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关联数组
- en: 'Next is associative arrays, better known as key value pairs. With associative
    arrays, you can use text-based keys to store your values, which can be helpful
    in specific cases. For example, if we take one of the students from the preceding
    examples (in this case, Michael), we can store his `age`, `gender`, and `favorite
    color,` as shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是关联数组，也称为键值对。使用关联数组，您可以使用基于文本的键来存储值，这在特定情况下可能会有所帮助。例如，如果我们从前面的例子中取一个学生（在这种情况下是Michael），我们可以存储他的`age`，`gender`和`favorite
    color`，如下所示：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you need to access a specific value in the array, you can use the `key`.
    For example, if we want to print Michael''s age, we can do the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要访问数组中的特定值，可以使用`key`。例如，如果我们想打印Michael的年龄，可以这样做：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Adding data to an `associative` array is just as easy as adding data to an
    indexed array. You can simply use the key and assign a value. Let''s suppose that
    we want to add an occupation to Michael''s array:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 向`associative`数组添加数据与向索引数组添加数据一样简单。您只需使用键并分配一个值。假设我们要向Michael的数组添加一个职业：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To remove an element from an associative array, follow the same steps that we
    did with the `indexed` array, but this time, use the key.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要从关联数组中删除一个元素，请按照我们在`indexed`数组中所做的相同步骤，但这次使用键。
- en: 'Let''s remove the occupation that we added in the last step:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除我们在上一步中添加的职业：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Working with Arrays
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数组
- en: 'In this section, we are going to include `name`, `age`, `location`, and `education
    level`. Follow these steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将包括`name`，`age`，`location`和`education level`。请按照以下步骤：
- en: Open your code editor and create a new file, `arrays.php.`
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的代码编辑器并创建一个新文件`arrays.php`。
- en: 'Within the new file, create your open and close `php` tags:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中，创建您的`php`标签：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we are going to create a new variable, called `$myinfo,` and initialize
    it with a new array:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个新变量，称为`$myinfo`，并用一个新数组初始化它：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then, we are going to populate the new array with our `name`, `age`, `location`,
    and `education level`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将使用我们的`name`，`age`，`location`和`education level`填充新数组。
- en: 'Next, we''ll print our data:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将打印我们的数据：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open your working directory in the Terminal, and type the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中打开您的工作目录，并键入以下命令：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will get a result as displayed in the following output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得如下输出所示的结果：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Converting a String into an Array
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将字符串转换为数组
- en: 'Sometimes, when you''re building a PHP-based application, you don''t instantiate
    an array with a predefined set of data - which is the case when building a utility
    script, for example. Let''s suppose that you have a variable with the string version
    of a filename, and you want to get the name of the file without the extension.
    This task can be done easily, by using the `explode` function. The `explode` function
    takes two arguments: the delimiter, and the string that you want to convert into
    an array. `Explode` function takes two arguments:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在构建基于PHP的应用程序时，您不会使用预定义的数据集来实例化数组-例如在构建实用程序脚本时。假设您有一个包含文件名字符串版本的变量，并且希望获取不带扩展名的文件名。通过使用`explode`函数，可以轻松完成此任务。`explode`函数接受两个参数：分隔符和要转换为数组的字符串。`Explode`函数接受两个参数：
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding example, we define a filename variable, and then, using the
    explode function, we break the string into its parts with the period delimiter.
    The `$filename_parts` variable contains an array of two elements, the first being
    the string `myexamplefile`, and the second containing the string `txt`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们定义了一个文件名变量，然后使用explode函数，使用句点分隔符将字符串分解为其部分。`$filename_parts`变量包含两个元素的数组，第一个是字符串`myexamplefile`，第二个包含字符串`txt`。
- en: Knowing this, we can print out the filename by accessing the 0 index of the
    array of string parts.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 知道这一点，我们可以通过访问字符串部分的0索引来打印出文件名。
- en: Merging an Array into a String
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将数组合并为字符串
- en: 'Along with the `explode` function, PHP also gives us a function that allows
    us to do the exact opposite: the `implode` function. When you want to take an
    existing array and convert it into a string, you can use the implode function
    to define a delimiter and pass it the array; you''ll get a single string as a
    result.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`explode`函数之外，PHP还为我们提供了一个允许我们执行完全相反操作的函数：`implode`函数。当您想要获取现有数组并将其转换为字符串时，可以使用implode函数来定义分隔符并将其传递给数组；您将获得一个单个字符串作为结果。
- en: 'Let''s go back to the `explode` example. Suppose that we have a filename and
    want to append some other string to the end of it before saving it back to a string:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到`explode`的例子。假设我们有一个文件名，并希望在将其保存回字符串之前在其末尾附加一些其他字符串：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding code example, we start off by using the explode function to
    break our original filename into its parts. We then access the filename portion
    and append the string _v1 to the end of it. Using the implode function, we recombine
    the filename using its parts, and finally, we print it back to the screen for
    the user to see.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们首先使用explode函数将原始文件名分解为其部分。然后，我们访问文件名部分并在其末尾附加字符串_v1。使用implode函数，我们使用其部分重新组合文件名，最后，我们将其打印回屏幕供用户查看。
- en: Slicing Arrays
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切片数组
- en: 'Another `array_slice` function; by default, the function requires only two
    arguments, but it can take four. The two required arguments are the array itself
    and the starting point for the new array. The two optional arguments are the length
    of (or number of elements to include in) the new array and the preserve option.
    The preserve option allows you to decide whether the current array elements should
    remain the same, or be reordered after the split. Here''s a basic usage example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个`array_slice`函数；默认情况下，该函数只需要两个参数，但可以接受四个。两个必需的参数是数组本身和新数组的起始点。两个可选参数是新数组的长度（或要包含的元素数）和保留选项。保留选项允许您决定当前数组元素是保持不变还是在拆分后重新排序。以下是一个基本的使用示例：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding example, when we run the fruit array through `array_slice,`
    we will get an array containing oranges, lemons, and limes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，当我们通过`array_slice`运行水果数组时，我们将获得一个包含橙子、柠檬和酸橙的数组。
- en: Sorting an Array
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对数组进行排序
- en: Sorting is another important tool for building certain types of programs. One
    of the sorting functions that you'll often see in PHP is the `ksort` function.
    `ksort` allows you to pass an array in as an argument, and then sort it in ascending
    order.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 排序是构建某些类型的程序的另一个重要工具。您经常在PHP中看到的排序函数之一是`ksort`函数。`ksort`允许您将数组作为参数传递，然后按升序对其进行排序。
- en: 'An example of how to use it is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用的示例如下：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding example, we have an array of people. Once you put the people
    array through the `ksort` function, you should see the names in alphabetical order.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们有一个人的数组。一旦您将人们数组通过`ksort`函数，您应该会看到按字母顺序排列的名称。
- en: Multidimensional Arrays
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多维数组
- en: 'The next type is the `multidimensional` array. Multidimensional arrays are
    simply arrays within arrays. In our previous examples of arrays, we stored a student''s
    name. What happens when we want to store multiple details for a specific student?
    This is where multidimensional arrays come in. Let''s look at how we can define
    a student array that also stores the student''s `gender` and `favorite` `color`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个类型是`多维`数组。多维数组只是数组中的数组。在我们之前的数组示例中，我们存储了一个学生的名字。当我们想要为特定学生存储多个详细信息时会发生什么？这就是多维数组发挥作用的地方。让我们看看如何定义一个还存储学生的`性别`和`最喜欢的`
    `颜色`的学生数组：
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, open the `Lesson 2.php` from the code files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的代码片段，请打开代码文件中的`Lesson 2.php`。
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If we want to access a student''s information, we can use the following key:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要访问学生的信息，我们可以使用以下键：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding example will print out Jill's age. With multidimensional arrays,
    we update element values in pretty much the same way we do when using one-dimensional
    arrays.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子将打印出Jill的年龄。对于多维数组，我们更新元素值的方式基本上与使用一维数组时相同。
- en: 'For example, if we want to change Jill''s age to `21,` we do the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想将Jill的年龄更改为`21`，我们执行以下操作：
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Including an Array of Hobbies in Our Existing Project
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们现有项目中包含一个爱好数组
- en: 'In this section, we are going to expand on the previous example to include
    an array of hobbies:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将扩展前面的例子，包括一个爱好数组：
- en: Open your code editor and create a new file, `multidimensional.php`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的代码编辑器并创建一个新文件`multidimensional.php`。
- en: Within the new file, create your open and close `php` tags.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中，创建你的开启和关闭`php`标签。
- en: 'Create a new variable called `$user,` and initialize it with a new array:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`$user`的新变量，并用一个新数组进行初始化：
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Populate the new array with two main sections: `info` and `hobbies`. In the
    info array, store the `name`, `age`, `location,` and `education level`, and in
    the `hobbies` array, we will store three hobbies.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用两个主要部分填充新数组：`info`和`hobbies`。在info数组中，存储`name`，`age`，`location`和`education
    level`，在`hobbies`数组中，我们将存储三个爱好。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 2.php` file in the code files
    folder.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 2.php`文件。
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next we''ll print our data:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来我们将打印我们的数据：
- en: Note
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 2.php` file in the code files
    folder.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 2.php`文件。
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open your working directory in the Terminal and type the following command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中打开你的工作目录，并输入以下命令：
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You will get a result based on the input that we provided in the preceding array.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到一个基于我们在前面数组中提供的输入的结果。
- en: Loops
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环
- en: Loops are powerful tools within any programming language. They allow you to
    write code that can be executed a specific number of times, based on a given condition.
    In this section, you will learn about the various loops that are available to
    you, such as for loops, foreach loops, `while` loops, and `do-while` loops.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 循环是任何编程语言中强大的工具。它们允许你编写可以根据给定条件执行特定次数的代码。在本节中，你将学习到各种可用的循环，如for循环、foreach循环、`while`循环和`do-while`循环。
- en: for Loop
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: for循环
- en: 'We will start our exploration of loops with the `for` loop. It is known to
    be the most complex loop structure, and it is used when you know how many times
    you need a block of code to run. The structure of a for loop is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`for`循环开始探索循环。它被认为是最复杂的循环结构，当你知道需要一段代码运行多少次时就会使用它。for循环的结构如下：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The steps to create the `for` loop are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`for`循环的步骤如下：
- en: Initialize the starting count variable - usually, it will start at `0`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化起始计数变量 - 通常会从`0`开始。
- en: Provide an evaluation condition that resolves to either `true` or `false`. The
    loop will continue if the condition is `true`, and will exit (or break) when the
    condition is `false`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个解析为`true`或`false`的评估条件。如果条件为`true`，循环将继续，如果条件为`false`，循环将退出（或中断）。
- en: Increment the value by a specific number. Typically, it would be incremented
    by `1`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照特定数字递增值。通常，它会递增`1`。
- en: 'Here''s a complete example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个完整的例子：
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Combining Loops and Arrays
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合循环和数组
- en: 'In this section, we are going to explore how to combine loops and arrays. Here
    are the steps to do it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将探索如何结合循环和数组。以下是实现它的步骤：
- en: Open your code editor and create a new file, `forloop.php.`
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的代码编辑器并创建一个新文件`forloop.php`。
- en: 'Within the new file, create your open and close `php` tags:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中，创建你的开启和关闭`php`标签：
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we create a new variable called `$food,` and initialize it with a new
    array:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们创建一个名为`$food`的新变量，并用一个新数组进行初始化：
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, we populate the new array with food names:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们用食物名称填充新数组：
- en: '[PRE32]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, we loop through our array and print our data:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们循环遍历我们的数组并打印我们的数据：
- en: '[PRE33]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The count function returns the number of elements within an array.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: count函数返回数组中的元素数。
- en: 'Open your working directory in the Terminal, and type the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中打开你的工作目录，并输入以下命令：
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: while Loops
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: while循环
- en: 'The next loop that we will explore is the while loop. while loops are used
    when you want to cycle through a block of code until a specific condition is met.
    while loops are defined as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探索的下一个循环是while循环。当你想要循环执行一段代码直到满足特定条件时，就会使用while循环。while循环的定义如下：
- en: '[PRE35]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'while loops are pretty simple, as they only require a condition to run. The
    loop will continue until the condition is false:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: while循环非常简单，因为它只需要一个条件来运行。循环将一直持续，直到条件为false。
- en: '![while Loops](graphics/2_01.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![while循环](graphics/2_01.jpg)'
- en: 'Here''s a simple example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个简单的例子：
- en: '[PRE36]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We take the preceding `count` variable and assign it the value of 1\. The `while`
    condition checks to see whether the `count` variable is less than 25, and will
    break once the `counter` variable equals 25\. Inside of the while function, we
    `echo` out the current count, and then increment the `count` variable by 1.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取前面的`count`变量并赋值为1。`while`条件检查`count`变量是否小于25，并且一旦`counter`变量等于25，就会中断。在while函数内部，我们输出当前计数，然后递增`count`变量1。
- en: Working with the while Function
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用while函数
- en: 'In this section, we will build a `while` function which will iterate while
    the `counter` is less than 30\. Follow these steps::'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将构建一个`while`函数，它将在`counter`小于30的情况下进行迭代。按照以下步骤进行：
- en: Open your code editor and create a new file, `while.php.`
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的代码编辑器并创建一个新文件`while.php`。
- en: 'Within the new file, create your open and close `php` tags:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中，创建你的开启和关闭`php`标签：
- en: '[PRE37]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, we define a `counter` function and initialize it with the number 1:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个`counter`函数，并用数字1进行初始化：
- en: '[PRE38]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, we can create a `while` loop that will echo out the current count, and
    then increase `counter` by 1:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以创建一个`while`循环，它将输出当前计数，然后将`counter`增加1：
- en: '[PRE39]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Open your working directory in the Terminal, and type the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中打开你的工作目录，并输入以下命令：
- en: '[PRE40]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Do-While Loops
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: do-while循环
- en: Do-while loops are just like while loops, but instead of running the condition
    at the beginning of the loop, they check after the internal code block has been
    run. The idea is that if you need the block of code to run at least once, you
    use this loop instead of a while loop.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: do-while循环与while循环类似，但它不是在循环开始时运行条件，而是在内部代码块运行后检查条件。其思想是，如果你需要至少运行一次代码块，就使用这个循环而不是while循环。
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do-while loops are also called exit controlled loops.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: do-while循环也称为退出控制循环。
- en: 'Do-while loops are represented as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: do-while循环的表示如下：
- en: '[PRE41]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We are going to modify the while loop from what precedes:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改之前的while循环：
- en: '[PRE42]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Conversion of a while Loop to a do-while Loop
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将while循环转换为do-while循环
- en: 'In this section, we are going to copy the previous example, but convert the
    while loop to a do-while loop so that you can see the differences in how they
    function. Follow these steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将复制前面的示例，但将while循环转换为do-while循环，以便您可以看到它们的功能差异。按照以下步骤进行：
- en: Create a new file and call it `dowhile.php.`
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件并将其命名为`dowhile.php`。
- en: Next, open up the `while.php` file and copy the contents into the `dowhile.php`
    file.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`while.php`文件，并将内容复制到`dowhile.php`文件中。
- en: 'We are now going to modify the `while` function to resemble the following code:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将修改`while`函数以使其类似于以下代码：
- en: '[PRE43]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Open your working directory in the Terminal, and type the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中打开您的工作目录，并输入以下命令：
- en: '[PRE44]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: foreach Loops
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: foreach循环
- en: 'foreach loops are next on our list. foreach loops are designed to give programmers
    a simple way to iterate through an array. This loop will only work with arrays
    and objects, which you will learn about later in this book. There are two syntaxes
    for this loop:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是foreach循环。foreach循环旨在为程序员提供一种简单的方法来遍历数组。这个循环只能用于数组和对象，这些您将在本书后面学习。这个循环有两种语法：
- en: '[PRE45]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The first syntax takes a given array and iterates through each element in the
    array, assigning it to the secondary variable. For example:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个语法接受一个给定的数组，并遍历数组中的每个元素，将其分配给次要变量。例如：
- en: '[PRE46]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In the preceding example, we define an array filled with students' names. We
    then use the foreach loop to iterate through our `students` array and `echo` out
    each name.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们定义了一个填充有学生姓名的数组。然后，我们使用foreach循环遍历我们的`students`数组，并`echo`出每个姓名。
- en: 'The second syntax is written as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种语法写成如下：
- en: '[PRE47]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In this version of the `for each` function, the given array is iterated through,
    but instead of giving a single element, it gives you both the `key` and the `element`
    itself. Here''s an example of how we''ll use it:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的`for each`函数中，给定的数组被遍历，但不是给出单个元素，而是同时给出`key`和`element`本身。以下是我们将如何使用它的示例：
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 2.php` file in the code files
    folder.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 2.php`文件。
- en: '[PRE48]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In this example, we define a multidimensional array that stores each student's
    age and favorite color and is indexed using the student's name. We then use the
    `foreach` function to iterate through the `students` array and assign each element's
    key to the `name` variable and the student's info to the `info` variable. Within
    the loop, we `echo` out the student's name, along with their age.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们定义了一个存储每个学生年龄和最喜欢的颜色的多维数组，并使用学生的姓名作为索引。然后，我们使用`foreach`函数遍历`students`数组，并将每个元素的键分配给`name`变量，将学生的信息分配给`info`变量。在循环内，我们`echo`出学生的姓名，以及他们的年龄。
- en: 'Activity: Working with the foreach Loop'
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动：使用foreach循环
- en: Let's put our understanding of for each loops into practice.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将对于每个循环的理解付诸实践。
- en: Your manager has asked you to create a PHP script that will calculate how much
    each employee makes per month, based on their given salary.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您的经理要求您创建一个PHP脚本，根据他们的工资计算每个员工每月赚多少钱。
- en: 'This is what you do:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您要做的是：
- en: Create a new directory and name it `monthly_payment`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新目录并命名为`monthly_payment`。
- en: Within the new directory, create an `index.php` file.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新目录中，创建一个`index.php`文件。
- en: 'First, you''ll define the multidimensional array that will store the employee''s
    name, job title, and salary:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您将定义一个多维数组，用于存储员工的姓名、职称和工资：
- en: '[PRE49]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, define the `foreach` loop that will iterate through the `employee` array:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义`foreach`循环，它将遍历`employee`数组：
- en: '[PRE50]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Finally, add an `echo` statement that will print the name, title, and calculated
    monthly pay:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个`echo`语句，用于打印姓名、职称和计算出的月薪：
- en: '[PRE51]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The calculator script is now done. If you need to add additional employees,
    it is as easy as adding an additional associative array with the employee's info.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 计算器脚本现在已经完成。如果您需要添加额外的员工，只需添加一个带有员工信息的额外关联数组即可。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have reached the end of the second chapter. In this chapter, we have seen
    how to declare and define an array and have covered the different types of arrays.
    We saw the various operations that can be performed on an array. We have also
    covered control flow statements such as the for loop, while loop, and do while
    loop.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到了第二章的结尾。在这一章中，我们看到了如何声明和定义数组，并涵盖了不同类型的数组。我们看到了可以对数组执行的各种操作。我们还涵盖了诸如for循环、while循环和do
    while循环之类的控制流语句。
- en: In the next chapter, we are going to learn about code reusability using functions
    and classes, taking you one step closer to building your own custom application.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用函数和类实现代码的可重用性，让您离构建自己的定制应用程序更近一步。
