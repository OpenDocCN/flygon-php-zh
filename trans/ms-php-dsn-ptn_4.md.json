["```php\n<?php \n\ninterface Book \n{ \n  public function __construct(string $title, string $author, string $contents); \n\n  public function getTitle(): string; \n\n  public function getAuthor(): string; \n\n  public function getContents(): string; \n} \n\n```", "```php\n<?php \n\nclass EBook implements Book \n{ \n\n  public $title; \n  public $author; \n  public $contents; \n\n  public function __construct(string $title, string $author, string $contents) \n  { \n    $this->title = $title; \n    $this->author = $author; \n    $this->contents = $contents; \n  } \n\n  public function getTitle(): string \n  { \n    return $this->contents; \n  } \n\n  public function getAuthor(): string \n  { \n    return $this->author; \n  } \n\n  public function getContents(): string \n  { \n    return $this->contents; \n  } \n} \n\n```", "```php\n<?php \n\nclass PrintBook implements Book \n{ \n\n  public $eBook; \n\n  public function __construct(string $title, string $author, string $contents) \n  { \n    $this->eBook = new EBook($title, $author, $contents); \n  } \n\n  public function getTitle(): string \n  { \n    return $this->eBook->getTitle(); \n  } \n\n  public function getAuthor(): string \n  { \n    return $this->eBook->getAuthor(); \n  } \n\n  public function getContents(): string \n  { \n    return $this->eBook->getContents(); \n  } \n\n  public function getText(): string \n  { \n    $contents = $this->eBook->getTitle() . \" by \" . $this->eBook->getAuthor(); \n    $contents .= \"\\n\"; \n    $contents .= $this->eBook->getContents(); \n\n    return $contents; \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Book.php'); \nrequire_once('EBook.php'); \n$PHPBook = new EBook(\"Mastering PHP Design Patterns\", \"Junade Ali\", \"Some contents.\"); \n\nrequire_once('PrintBook.php'); \n$PHPBook = new PrintBook(\"Mastering PHP Design Patterns\", \"Junade Ali\", \"Some contents.\"); \necho $PHPBook->getText(); \n\n```", "```php\nSome contents. by Junade Ali \nSome contents. \n\n```", "```php\n<?php \n\nclass ATM \n{ \n  private $balance; \n\n  public function __construct(float $balance) \n  { \n    $this->balance = $balance; \n  } \n\n  public function withdraw(float $amount): float \n  { \n    if ($this->reduceBalance($amount) === true) { \n      return $amount; \n    } else { \n      throw new Exception(\"Couldn't withdraw money.\"); \n    } \n  } \n\n  protected function reduceBalance(float $amount): bool \n  { \n    if ($amount >= $this->balance) { \n      return false; \n    } \n\n    $this->balance = ($this->balance - $amount); \n    return true; \n  } \n\n  public function getBalance(): float \n  { \n    return $this->balance; \n  } \n} \n\n```", "```php\n<?php \n\nclass ATMWithPhoneTopUp extends ATM \n{ \n  public function getTopUp(float $amount, int $time): string \n  { \n    if ($this->reduceBalance($amount) === true) { \n      return $this->generateTopUpCode($amount, $time); \n    } else { \n      throw new Exception(\"Couldn't withdraw money.\"); \n    } \n  } \n\n  private function generateTopUpCode(float $amount, int $time): string \n  { \n    return $amount . $time . rand(0, 10000); \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('ATM.php'); \n\n$atm = new ATM(500.00); \n$atm->withdraw(50); \necho $atm->getBalance(); \necho \"\\n\"; \n\nrequire_once('ATMWithPhoneTopUp.php'); \n\n$adaptedATM = new ATMWithPhoneTopUp(500.00); \necho \"Top-up code: \" . $adaptedATM->getTopUp(50, time()); \necho \"\\n\"; \necho $adaptedATM->getBalance(); \n\n```", "```php\n450 \nTop-up code: 5014606939121598 \n450 \n\n```", "```php\n<?php \n\nclass Insurance \n{ \n  private $limit; \n  private $excess; \n\n  public function __construct(float $limit, float $excess) \n  { \n    if ($excess >= $limit) { \n      throw New Exception('Excess must be less than premium.'); \n    } \n\n    $this->limit = $limit; \n    $this->excess = $excess; \n  } \n\n  public function monthlyPremium(): float \n  { \n    return ($this->limit-$this->excess)/200; \n  } \n\n  public function annualPremium(): float \n  { \n    return $this->monthlyPremium()*11.5; \n  } \n} \n\n```", "```php\n<?php \n\ninterface MarketCompare \n{ \n  public function __construct(float $limit, float $excess); \n  public function getAnnualPremium(); \n  public function getMonthlyPremium(); \n} \n\n```", "```php\n<?php \n\nclass InsuranceMarketCompare implements MarketCompare \n{ \n  private $premium; \n\n  public function __construct(float $limit, float $excess) \n  { \n    $this->premium = new Insurance($limit, $excess); \n  } \n\n  public function getAnnualPremium(): float \n  { \n    return $this->premium->annualPremium(); \n  } \n\n  public function getMonthlyPremium(): float \n  { \n    return $this->premium->monthlyPremium(); \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Insurance.php'); \n\n$quote = new Insurance(10000, 250); \necho $quote->monthlyPremium(); \necho \"\\n\"; \n\nrequire_once('MarketCompare.php'); \nrequire_once('InsuranceMarketCompare.php'); \n\n$quote = new InsuranceMarketCompare(10000, 250); \necho $quote->getMonthlyPremium(); \necho \"\\n\"; \necho $quote->getAnnualPremium(); \n\n```", "```php\n48.75 \n48.75 \n560.625 \n\n```", "```php\n<?php \n\ninterface Shape \n{ \n  public function draw(); \n} \n\n```", "```php\n<?php \n\nclass Circle implements Shape \n{ \n\n  private $colour; \n  private $x; \n  private $y; \n  private $radius; \n\n  public function __construct(string $colour) \n  { \n    $this->colour = $colour; \n  } \n\n  public function setX(int $x) \n  { \n    $this->x = $x; \n  } \n\n  public function setY(int $y) \n  { \n    $this->y = $y; \n  } \n\n  public function setRadius(int $radius) \n  { \n    $this->radius = $radius; \n  } \n\n  public function draw() \n  { \n    echo \"Drawing circle which is \" . $this->colour . \" at [\" . $this->x . \", \" . $this->y . \"] of radius \" . $this->radius . \".\"; \n    echo \"\\n\"; \n  } \n} \n\n```", "```php\n<?php \n\nclass ShapeFactory \n{ \n  private $shapeMap = array(); \n\n  public function getCircle(string $colour) \n  { \n    $circle = 'Circle' . '_' . $colour; \n\n    if (!isset($this->shapeMap[$circle])) { \n      echo \"Creating a \".$colour.\" circle.\"; \n      echo \"\\n\"; \n      $this->shapeMap[$circle] = new Circle($colour); \n    } \n\n    return $this->shapeMap[$circle]; \n  } \n} \n\n```", "```php\nrequire_once('Shape.php'); \nrequire_once('Circle.php'); \nrequire_once('ShapeFactory.php'); \n\n$colours = array('red', 'blue', 'green', 'black', 'white', 'orange'); \n\n$factory = new ShapeFactory(); \n\nfor ($i = 0; $i < 100; $i++) { \n  $randomColour = $colours[array_rand($colours)]; \n\n  $circle = $factory->getCircle($randomColour); \n  $circle->setX(rand(0, 100)); \n  $circle->setY(rand(0, 100)); \n  $circle->setRadius(100); \n\n  $circle->draw(); \n} \n\n```", "```php\nCreating a green circle. \nDrawing circle which is green at [29, 26] of radius 100\\. \nCreating a black circle. \nDrawing circle which is black at [17, 64] of radius 100\\. \nDrawing circle which is black at [81, 86] of radius 100\\. \nDrawing circle which is black at [0, 73] of radius 100\\. \nCreating a red circle. \nDrawing circle which is red at [10, 15] of radius 100\\. \nDrawing circle which is red at [70, 79] of radius 100\\. \nDrawing circle which is red at [13, 78] of radius 100\\. \nDrawing circle which is green at [78, 27] of radius 100\\. \nCreating a blue circle. \nDrawing circle which is blue at [38, 11] of radius 100\\. \nCreating a orange circle. \nDrawing circle which is orange at [43, 57] of radius 100\\. \nDrawing circle which is blue at [58, 65] of radius 100\\. \nDrawing circle which is orange at [75, 67] of radius 100\\. \nDrawing circle which is green at [92, 59] of radius 100\\. \nDrawing circle which is blue at [53, 3] of radius 100\\. \nDrawing circle which is black at [14, 33] of radius 100\\. \nCreating a white circle. \nDrawing circle which is white at [84, 46] of radius 100\\. \nDrawing circle which is green at [49, 61] of radius 100\\. \nDrawing circle which is orange at [57, 44] of radius 100\\. \nDrawing circle which is orange at [64, 33] of radius 100\\. \nDrawing circle which is white at [42, 74] of radius 100\\. \nDrawing circle which is green at [5, 91] of radius 100\\. \nDrawing circle which is white at [87, 36] of radius 100\\. \nDrawing circle which is red at [74, 94] of radius 100\\. \nDrawing circle which is black at [19, 6] of radius 100\\. \nDrawing circle which is orange at [70, 83] of radius 100\\. \nDrawing circle which is green at [74, 64] of radius 100\\. \nDrawing circle which is white at [89, 21] of radius 100\\. \nDrawing circle which is red at [25, 23] of radius 100\\. \nDrawing circle which is blue at [68, 96] of radius 100\\. \nDrawing circle which is green at [74, 6] of radius 100\\. \n\n```", "```php\n<?php \n\ninterface Music \n{ \n  public function play(); \n} \n\n```", "```php\n<?php \n\nclass Song implements Music \n{ \n  public $id; \n  public $name; \n\n  public function  __construct(string $name) \n  { \n    $this->id = uniqid(); \n    $this->name = $name; \n  } \n\n  public function play() \n  { \n    printf(\"Playing song #%s, %s.\\n\", $this->id, $this->name); \n  } \n} \n\n```", "```php\nvar_dump(spl_object_hash(new stdClass()) === spl_object_hash(new stdClass())); \n\n```", "```php\n$object = new StdClass(); \nvar_dump(spl_object_hash($object) === spl_object_hash(new stdClass())); \n\n```", "```php\n<?php \n\nclass Playlist implements Music \n{ \n  private $songs = array(); \n\n  public function addSong(Music $content): bool \n  { \n    $this->songs[spl_object_hash($content)] = $content; \n    return true; \n  } \n\n  public function removeItem(Music $content): bool \n  { \n    unset($this->songs[spl_object_hash($content)]); \n    return true; \n  } \n\n  public function play() \n  { \n    foreach ($this->songs as $content) { \n      $content->play(); \n    } \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Music.php'); \nrequire_once('Playlist.php'); \nrequire_once('Song.php'); \n\n$songOne = new Song('Lost In Stereo'); \n$songTwo = new Song('Running From Lions'); \n$songThree = new Song('Guts'); \n$playlistOne = new Playlist(); \n$playlistTwo = new Playlist(); \n$playlistThree = new Playlist(); \n$playlistTwo->addSong($songOne); \n$playlistTwo->addSong($songTwo); \n$playlistThree->addSong($songThree); \n$playlistOne->addSong($playlistTwo); \n$playlistOne->addSong($playlistThree); \n$playlistOne->play(); \n\n```", "```php\nPlaying song #57106d5adb364, Lost In Stereo. \nPlaying song #57106d5adb63a, Running From Lions. \nPlaying song #57106d5adb654, Guts. \n\n```", "```php\n<?php \n\ninterface Messenger \n{ \n  public function send($body); \n} \n\n```", "```php\n<?php \n\nclass InstantMessenger implements Messenger \n{ \n  public function send($body) \n  { \n    echo \"InstantMessenger: \" . $body; \n  } \n} \n\n```", "```php\n<?php \n\nclass SMS implements Messenger \n{ \n  public function send($body) \n  { \n    echo \"SMS: \" . $body; \n  } \n} \n\n```", "```php\n<?php \n\ninterface Transmitter \n{ \n  public function setSender(Messenger $sender); \n\n  public function send($body); \n} \n\n```", "```php\n<?php \n\nabstract class Device implements Transmitter \n{ \n  protected $sender; \n\n  public function setSender(Messenger $sender) \n  { \n    $this->sender = $sender; \n  } \n} \n\n```", "```php\n<?php \n\nclass Phone extends Device \n{ \n  public function send($body) \n  { \n    $body .= \"\\n\\n Sent from a phone.\"; \n\n    return $this->sender->send($body); \n  } \n} \n\n```", "```php\n<?php \n\nclass Tablet extends Device \n{ \n  public function send($body) \n  { \n    $body .= \"\\n\\n Sent from a Tablet.\"; \n\n    return $this->sender->send($body); \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Transmitter.php'); \nrequire_once('Device.php'); \nrequire_once('Phone.php'); \nrequire_once('Tablet.php'); \n\nrequire_once('Messenger.php'); \nrequire_once('SMS.php'); \nrequire_once('InstantMessenger.php'); \n\n$phone = new Phone(); \n$phone->setSender(new SMS()); \n\n$phone->send(\"Hello there!\"); \n\n```", "```php\nSMS: Hello there! \n\n Sent from a phone. \n\n```", "```php\n<?php \n\nnamespace IcyApril\\PetShop; \n\ninterface AnimalFeeder \n{ \n  public function __construct(string $petName); \n\n  public function dropFood(int $hungerLevel, bool $water = false): string; \n\n  public function displayFood(int $hungerLevel): string; \n} \n\n```", "```php\n<?php \n\nnamespace IcyApril\\PetShop\\AnimalFeeders; \n\nuse IcyApril\\PetShop\\AnimalFeeder; \n\nclass Cat implements AnimalFeeder \n{ \n  public function __construct(string $petName) \n  { \n    $this->petName = $petName; \n  } \n\n  public function dropFood(int $hungerLevel, bool $water = false): string \n  { \n    return $this->selectFood($hungerLevel) . ($water ? ' with water' : ''); \n  } \n\n  public function displayFood(int $hungerLevel): string \n  { \n    return $this->selectFood($hungerLevel); \n  } \n\n  protected function selectFood(int $hungerLevel): string \n  { \n    switch ($hungerLevel) { \n      case 0: \n        return 'lamb'; \n        break; \n      case 1: \n        return 'chicken'; \n        break; \n      case 3: \n        return 'tuna'; \n        break; \n    } \n  } \n} \n\n```", "```php\n<?php \n\nnamespace IcyApril\\PetShop\\AnimalFeeders; \n\nclass Dog \n{ \n\n  public function __construct(string $petName) \n  { \n    if (strlen($petName) > 10) { \n      throw new \\Exception('Name too long.'); \n    } \n\n    $this->petName = $petName; \n  } \n\n  public function dropFood(int $hungerLevel, bool $water = false): string \n  { \n    return $this->selectFood($hungerLevel) . ($water ? ' with water' : ''); \n  } \n\n  public function displayFood(int $hungerLevel): string \n  { \n    return $this->selectFood($hungerLevel); \n  } \n\n  protected function selectFood(int $hungerLevel): string \n  { \n    if ($hungerLevel == 3) { \n      return \"chicken and vegetables\"; \n    } elseif (date('H') < 10) { \n      return \"turkey and beef\"; \n    } else { \n      return \"chicken and rice\"; \n    } \n  } \n} \n\n```", "```php\n<?php \n\nnamespace IcyApril\\PetShop; \n\nclass AnimalFeederProxy \n{ \n  protected $instance; \n\n  public function __construct(string $feeder, string $name) \n  { \n    $class = __NAMESPACE__ . '\\\\AnimalFeeders' . $feeder; \n    $this->instance = new $class($name); \n  } \n\n  public function __call($name, $arguments) \n  { \n    return call_user_func_array([$this->instance, $name], $arguments); \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('AnimalFeeder.php'); \nrequire_once('AnimalFeederProxy.php'); \n\nrequire_once('AnimalFeeders/Cat.php'); \n$felix = new \\IcyApril\\PetShop\\AnimalFeederProxy('Cat', 'Felix'); \necho $felix->displayFood(1); \necho \"\\n\"; \necho $felix->dropFood(1, true); \necho \"\\n\"; \n\nrequire_once('AnimalFeeders/Dog.php'); \n$brian = new \\IcyApril\\PetShop\\AnimalFeederProxy('Dog', 'Brian'); \necho $brian->displayFood(1); \necho \"\\n\"; \necho $brian->dropFood(1, true); \n\n```", "```php\nchicken \nchicken with water \nturkey and beef \nturkey and beef with water \n\n```", "```php\n<?php \n\nclass Manufacturer \n{ \n  private $capacity; \n\n  public function __construct(int $capacity) \n  { \n    $this->capacity = $capacity; \n  } \n\n  public function build(): string \n  { \n    return uniqid(); \n  } \n} \n\n```", "```php\n<?php \n\nclass Post \n{ \n  private $sender; \n\n  public function __construct(string $sender) \n  { \n    $this->sender = $sender; \n  } \n\n  public function dispatch(string $item, string $to): bool \n  { \n    if (strlen($item) !== 13) { \n      return false; \n    } \n\n    if (empty($to)) { \n      return false; \n    } \n\n    return true; \n  } \n} \n\n```", "```php\n<?php \n\nclass SMS \n{ \n  private $from; \n\n  public function __construct(string $from) \n  { \n    $this->from = $from; \n  } \n\n  public function send(string $to, string $message): bool \n  { \n    if (empty($to)) { \n      return false; \n    } \n\n    if (strlen($message) === 0) { \n      return false; \n    } \n\n    echo $to . \" received message: \" . $message; \n    return true; \n  } \n} \n\n```", "```php\n<?php \n\nclass ToyShop \n{ \n  private $courier; \n  private $manufacturer; \n  private $sms; \n\n  public function __construct(String $factoryAdress, String $contactNumber, int $capacity) \n  { \n    $this->courier = new Post($factoryAdress); \n    $this->sms = new SMS($contactNumber); \n    $this->manufacturer = new Manufacturer($capacity); \n  } \n\n  public function processOrder(string $address, $phone) \n  { \n    $item = $this->manufacturer->build(); \n    $this->courier->dispatch($item, $address); \n    $this->sms->send($phone, \"Your order has been shipped.\"); \n  } \n} \n\n```", "```php\n<?php \n\nrequire_once('Manufacturer.php'); \nrequire_once('Post.php'); \nrequire_once('SMS.php'); \nrequire_once('ToyShop.php'); \n\n$childrensToyFactory = new ToyShop('1 Factory Lane, Oxfordshire', '07999999999', 5); \n$childrensToyFactory->processOrder('8 Midsummer Boulevard', '07123456789'); \n\n```"]