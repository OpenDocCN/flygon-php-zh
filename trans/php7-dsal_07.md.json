["```php\nprocedure bubbleSort( A : list of sortable items ) \n\n   n = length(A) \n\n   for i = 0 to n inclusive do  \n\n     for j = 0 to n-1 inclusive do \n\n       if A[j] > A[j+1] then \n\n         swap( A[j], A[j+1] ) \n\n       end if \n\n     end for \n\n   end for \n\nend procedure\n\n```", "```php\nfunction bubbleSort(array $arr): array { \n\n    $len = count($arr); \n\n    for ($i = 0; $i < $len; $i++) { \n\n      for ($j = 0; $j < $len - 1; $j++) { \n\n          if ($arr[$j] > $arr[$j + 1]) { \n\n            $tmp = $arr[$j + 1]; \n\n            $arr[$j + 1] = $arr[$j]; \n\n            $arr[$j] = $tmp; \n\n          } \n\n      } \n\n    }     \n\n    return $arr; \n\n}\n\n```", "```php\n$tmp = $arr[$j + 1];\n\n$arr[$j + 1] = $arr[$j];\n\n$arr[$j] = $tmp;\n\n```", "```php\nif ($arr[$j] < $arr[$j + 1]) {\n\n}\n\n```", "```php\n$arr = [20, 45, 93, 67, 10, 97, 52, 88, 33, 92]; \n\n$sortedArray = bubbleSort($arr); \n\necho implode(\",\", $sortedArray); \n\n```", "```php\n10,20,33,45,52,67,88,92,93,97\n\n```", "```php\nprocedure bubbleSort( A : list of sortable items ) \n\n   n = length(A) \n\n   for i = 1 to n inclusive do  \n\n     swapped = false \n\n     for j = 1 to n-1 inclusive do \n\n       if A[j] > A[j+1] then \n\n         swap( A[j], A[j+1] ) \n\n         swapped = true \n\n       end if \n\n     end for \n\n     if swapped is false \n\n        break \n\n     end if \n\n   end for \n\nend procedure\n\n```", "```php\nfunction bubbleSort(array $arr): array { \n\n    $len = count($arr); \n\n    for ($i = 0; $i < $len; $i++) { \n\n      $swapped = FALSE; \n\n      for ($j = 0; $j < $len - 1; $j++) { \n\n          if ($arr[$j] > $arr[$j + 1]) { \n\n            $tmp = $arr[$j + 1]; \n\n            $arr[$j + 1] = $arr[$j]; \n\n            $arr[$j] = $tmp; \n\n            $swapped = TRUE; \n\n          } \n\n      } \n\n         if(! $swapped) break; \n\n    }     \n\n    return $arr; \n\n} \n\n```", "```php\nprocedure bubbleSort( A : list of sortable items ) \n\n   n = length(A) \n\n   for i = 1 to n inclusive do  \n\n     swapped = false \n\n     for j = 1 to n-i-1 inclusive do \n\n       if A[j] > A[j+1] then \n\n         swap( A[j], A[j+1] ) \n\n         swapped = true \n\n       end if \n\n     end for \n\n     if swapped is false \n\n        break \n\n     end if \n\n   end for \n\nend procedure \n\n```", "```php\nfunction bubbleSort(array $arr): array {\n\n    $len = count($arr); \n\n    for ($i = 0; $i < $len; $i++) { \n\n      $swapped = FALSE; \n\n      for ($j = 0; $j < $len - $i - 1; $j++) { \n\n          if ($arr[$j] > $arr[$j + 1]) { \n\n            $tmp = $arr[$j + 1]; \n\n            $arr[$j + 1] = $arr[$j]; \n\n            $arr[$j] = $tmp; \n\n            $swapped = TRUE; \n\n          } \n\n      } \n\n      if(! $swapped) break; \n\n    }     \n\n    return $arr; \n\n} \n\n```", "```php\nprocedure bubbleSort( A : list of sortable items )\n\n   n = length(A)\n\n   bound = n -1\n\n   for i = 1 to n inclusive do\n\n     swapped = false\n\n     newbound = 0\n\n     for j = 1 to bound inclusive do\n\n       if A[j] > A[j+1] then\n\n         swap( A[j], A[j+1] )\n\n            swapped = true\n\n            newbound = j\n\n       end if\n\n     end for\n\n     bound = newbound\n\n     if swapped is false\n\n        break\n\n     end if\n\n   end for\n\nend procedure\n\n```", "```php\nfunction bubbleSort(array $arr): array {\n\n    $len = count($arr);\n\n    $count = 0;\n\n    $bound = $len-1;\n\n    for ($i = 0; $i < $len; $i++) {\n\n     $swapped = FALSE;\n\n     $newBound = 0;\n\n      for ($j = 0; $j < $bound; $j++) {\n\n          $count++;\n\n          if ($arr[$j] > $arr[$j + 1]) {\n\n            $tmp = $arr[$j + 1];\n\n            $arr[$j + 1] = $arr[$j];\n\n            $arr[$j] = $tmp;\n\n            $swapped = TRUE;\n\n            $newBound = $j;\n\n          }\n\n      }\n\n     $bound = $newBound;\n\n     if(! $swapped) break;\n\n    }\n\n    echo $count.\"\\n\";\n\n    return $arr;\n\n}\n\n```", "```php\nprocedure selectionSort( A : list of sortable items )\n\n   n = length(A)\n\n   for i = 1 to n inclusive do\n\n     min = i\n\n     for j = i+1 to n inclusive do\n\n       if A[j] < A[min] then\n\n         min = j\n\n       end if\n\n     end for\n\n     if min != i\n\n        swap(a[i],a[min])\n\n     end if\n\n   end for\n\nend procedure\n\n```", "```php\nfunction selectionSort(array $arr): array {\n\n    $len = count($arr);\n\n    for ($i = 0; $i < $len; $i++) {\n\n      $min = $i;\n\n      for ($j = $i+1; $j < $len; $j++) {\n\n          if ($arr[$j] < $arr[$min]) {\n\n            $min = $j;\n\n          }\n\n      }\n\n      if ($min != $i) {\n\n          $tmp = $arr[$i];\n\n          $arr[$i] = $arr[$min];\n\n          $arr[$min] = $tmp;\n\n      }\n\n    }\n\n    return $arr;\n\n}\n\n```", "```php\nprocedure insertionSort( A : list of sortable items )\n\n   n = length(A)\n\n   for i = 1 to n inclusive do\n\n     key = A[i]\n\n     j = i - 1\n\n     while j >= 0 and A[j] > key   do\n\n       A[j+1] = A[j]\n\n       j--\n\n     end while\n\n     A[j+1] = key\n\n   end for\n\nend procedure\n\n```", "```php\nfunction insertionSort(array &$arr) { \n\n    $len = count($arr); \n\n    for ($i = 1; $i < $len; $i++) { \n\n      $key = $arr[$i]; \n\n      $j = $i - 1; \n\n      while($j >= 0 && $arr[$j] > $key) { \n\n          $arr[$j+1] = $arr[$j]; \n\n          $j--; \n\n      }      \n\n      $arr[$j+1] = $key; \n\n    }     \n\n}\n\n```", "```php\n$arr = [20, 45, 93, 67, 10, 97, 52, 88, 33, 92];\n\ninsertionSort($arr);\n\necho implode(\",\", $arr);\n\n```", "```php\n\n     n = length(A)      \n\n     if ( n == 1 ) return a \n\n     var l1 as array = a[0] ... a[n/2] \n\n     var l2 as array = a[n/2+1] ... a[n] \n\n     l1 = mergesort( l1 ) \n\n     l2 = mergesort( l2 ) \n\n     return merge( l1, l2 ) \n\nend func\n\nfunc merge( a: array, b : array )\n\n     c = array\n\n     while ( a and b have elements )\n\n          if ( a[0] > b[0] )\n\n               add b[0] to the end of c\n\n               remove b[0] from b\n\n          else\n\n               add a[0] to the end of c\n\n               remove a[0] from a\n\n     end while\n\n     while ( a has elements )\n\n          add a[0] to the end of c\n\n          remove a[0] from a\n\n     end while\n\n     while ( b has elements )\n\n          add b[0] to the end of c\n\n          remove b[0] from b\n\n     return c\n\n     end while\n\nend func\n\n```", "```php\nfunction mergeSort(array $arr): array { \n\n    $len = count($arr); \n\n    $mid = (int) $len / 2; \n\n    if ($len == 1) \n\n         return $arr; \n\n    $left  = mergeSort(array_slice($arr, 0, $mid)); \n\n    $right = mergeSort(array_slice($arr, $mid)); \n\n    return merge($left, $right); \n\n}\n\n```", "```php\nfunction merge(array $left, array $right): array { \n\n    $combined = []; \n\n    $countLeft = count($left); \n\n    $countRight = count($right); \n\n    $leftIndex = $rightIndex = 0; \n\n    while ($leftIndex < $countLeft && $rightIndex < $countRight) { \n\n      if ($left[$leftIndex] > $right[$rightIndex]) { \n\n          $combined[] = $right[$rightIndex]; \n\n          $rightIndex++; \n\n      } else { \n\n          $combined[] = $left[$leftIndex]; \n\n          $leftIndex++; \n\n      } \n\n    } \n\n    while ($leftIndex < $countLeft) { \n\n      $combined[] = $left[$leftIndex]; \n\n      $leftIndex++; \n\n    } \n\n    while ($rightIndex < $countRight) { \n\n      $combined[] = $right[$rightIndex]; \n\n      $rightIndex++; \n\n    } \n\n    return $combined;\n\n}\n\n```", "```php\n$arr = [20, 45, 93, 67, 10, 97, 52, 88, 33, 92];\n\n$arr = mergeSort($arr);\n\necho implode(\",\", $arr);\n\n```", "```php\nT(n)     = T(n/2) + T(n/2) + n    , for N>1 with T(1) = 0 \n\n         = 2 T(n/2)+n \n\nT(n)/n   = 2 T(n/2)/n + 1              // divide both side by n \n\n         = T(n/2)/(n/2)  + 1                  \n\n         = T(n/4)/(n/4)  + 1+ 1        // telescoping \n\n         = T(n/8)/(n/8)  + 1+ 1 + 1      // again telescoping \n\n         = ...... \n\n         = T(n/n)/(n/n)  + 1 + 1 + 1 + ....... + 1 \n\n         = log (n)                     // since T(1) = 0      \n\nSo T(n)  = n log (n)                   // multiply both side with n \n\n```", "```php\nprocedure Quicksort(A : array,p :int ,r: int)\n\n    if (p < r)\n\n       q = Partition(A,p,r)\n\n       Quicksort(A,p,q)\n\n       Quicksort(A,q+1,r)\n\n    end if\n\nend procedure\n\nprocedure Partition(A : array,p :int ,r: int)\n\n    pivot = A[p]\n\n    i = p-1\n\n    j = r+1\n\n    while (true)\n\n           do\n\n            i := i + 1\n\n           while A[i] < pivot    \n\n           do\n\n             j := j - 1\n\n           while A[j] > pivot\n\n      if i < j then\n\n          swap A[i] with A[j]\n\n      else\n\n          return j\n\n      end if\n\n   end while\n\nend procedure\n\n```", "```php\nfunction quickSort(array &$arr, int $p, int $r) {\n\n  if($p < $r) {\n\n    $q = partition($arr, $p, $r);\n\n    quickSort($arr, $p, $q);\n\n    quickSort($arr, $q+1, $r);\n\n  }\n\n}\n\n```", "```php\nfunction partition(array &$arr, int $p, int $r){ \n\n  $pivot = $arr[$p]; \n\n  $i = $p-1; \n\n  $j = $r+1; \n\n  while(true) \n\n  { \n\n   do { \n\n    $i++; \n\n   } while($arr[$i] < $pivot && $arr[$i] != $pivot); \n\n   do { \n\n    $j--; \n\n   } while($arr[$j] > $pivot && $arr[$j] != $pivot); \n\n   if($i < $j) { \n\n    $temp = $arr[$i]; \n\n    $arr[$i] = $arr[$j]; \n\n    $arr[$j] = $temp; \n\n   } else { \n\n    return $j; \n\n      } \n\n  } \n\n}\n\n $arr = [20, 45, 93, 67, 10, 97, 52, 88, 33, 92]; \n\nquickSort($arr, 0, count($arr)-1); \n\necho implode(\",\", $arr);\n\n```", "```php\nfunction bucketSort(array &$data) { \n\n    $n = count($data); \n\n    if ($n <= 0) \n\n         return;                          \n\n    $min = min($data); \n\n    $max = max($data); \n\n    $bucket = []; \n\n    $bLen = $max - $min + 1; \n\n    $bucket = array_fill(0, $bLen, []); \n\n    for ($i = 0; $i < $n; $i++) { \n\n         array_push($bucket[$data[$i] - $min], $data[$i]); \n\n    } \n\n    $k = 0; \n\n    for ($i = 0; $i < $bLen; $i++) {\n\n         $bCount = count($bucket[$i]);\n\n      for ($j = 0; $j < $bCount; $j++) { \n\n          $data[$k] = $bucket[$i][$j];\n\n          $k++;\n\n      }\n\n    }\n\n} \n\n```"]