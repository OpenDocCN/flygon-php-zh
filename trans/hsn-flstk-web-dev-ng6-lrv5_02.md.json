["```php\nnpm install -g typescript\n```", "```php\ntsc --help\n```", "```php\n{ \"compilerOptions\":\n  { \"target\": \"es5\",\n   \"module\": \"commonjs\"\n  }\n}\n```", "```php\ntsc --init\n```", "```php\n{\n\"compilerOptions\": {\n/* Basic Options */\n/* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */\n\"target\": \"es5\",\n/* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */\n\"module\": \"commonjs\",\n...\n/* Strict Type-Checking Options */\n/* Enable all strict type-checking options. */\n\"strict\": true,\n...\n/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n\"esModuleInterop\": true\n/* Source Map Options */\n...\n/* Experimental Options */\n...\n}\n}\n```", "```php\nconsole.log('First Sample With TypeScript');\n```", "```php\ntsc sample-01.ts\n```", "```php\nclass MyClass {\n  public static sum(x:number, y: number) {\n  console.log('Number is: ', x + y);\n  return x + y;\n }\n}\nMyClass.sum(3, 5);\n```", "```php\ntsc sample-01.ts\n```", "```php\ntsc sample-01.ts\n```", "```php\nerror TS2345: Argument of type '\"a\"' is not assignable to parameter of type 'number'.\n```", "```php\ntsc sample-01.ts --watch\n```", "```php\nMyClass.sum(5, 5);\n```", "```php\n\nfunction Myband () {\n  let band: string;\n  let active: boolean;\n  let numberOfAlbuns: number;\n}\n```", "```php\nconst organizedArray: [number, string, boolean] = [0, 'text',\n      false];\nlet myArray: [number, string, boolean];\nmyArray = ['text', 0, false]\nconsole.log(myArray);\n```", "```php\ntsc tuple.ts\n```", "```php\ntuple.ts(4,1): error TS2322: Type '[string, number, false]' is not assignable to type '[number, string, boolean]'.\n Type 'string' is not assignable to type 'number'.\n```", "```php\n// using tuple as Type\ntype Tuple = [number, string, boolean];\nlet myTuple: Tuple;\nmyTuple = [0, 'text', false];\nconsole.log(myTuple);\n```", "```php\nnode tuple.js\n```", "```php\nfunction myVoidExample(firstName: string, lastName: string): string {\n    return firstName + lastName;\n}\nconsole.log(myVoidExample('Jhonny ', 'Cash'));\n```", "```php\nvoid.ts(1,62): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n```", "```php\nfunction myVoidExample(firstName: string, lastName: string): void {\nconst name = firstName + lastName;\n}\n```", "```php\nlet band: any;\nband = {\n    name: \"Motorhead\",\n    description: \"Heavy metal band\",\n    rate: 10\n}\nconsole.log(band);\nband = \"Motorhead\";\nconsole.log(band);\n```", "```php\ntsc any.ts\n```", "```php\nnode any.js\n```", "```php\n{ name: 'Motorhead', description: 'Heavy metal band', rate: 10 }\n Motorhead\n```", "```php\nenum bands {\n    Motorhead,\n    Metallica,\n    Slayer\n}\nconsole.log(bands);\n```", "```php\ntsc enum.ts\n```", "```php\nnode enum.js\n```", "```php\n{ '0': 'Motorhead',\n '1': 'Metallica',\n '2': 'Slayer',\n Motorhead: 0,\n Metallica: 1,\n Slayer: 2 }\n```", "```php\nlet myFavoriteBand = bands.Slayer;\nconsole.log(myFavoriteBand);\n```", "```php\n{ '0': 'Motorhead',\n '1': 'Metallica',\n '2': 'Slayer',\n Motorhead: 0,\n Metallica: 1,\n Slayer: 2 }\n My Favorite band is:  Slayer\n```", "```php\nconst myMessage = (text: string): never => {\n    throw new Error(text);\n}\nconst myError = () => Error('Some text here');\n```", "```php\nfunction neverHappen(someVariable: any) {\n    if (typeof someVariable === \"string\" && typeof someVariable ===\n     \"number\") {\n    console.log(someVariable);\n    }\n}\nneverHappen('text');\n```", "```php\nlet A = null;\n    console.log(A) // null\n    console.log(B) // undefined\n```", "```php\nclass Band {\n    public name: string;\n    constructor(text: string) {\n    this.name = text;\n    }\n}\n```", "```php\nclass MyBand {\n    // Properties without prefix are public\n    // Available is; Private, Protected\n    albums: Array<string>;\n    members: number;\n    constructor(albums_list: Array<string>, total_members: number) {\n        this.albums = albums_list;\n        this.members = total_members;\n    }\n    // Methods\n    listAlbums(): void {\n        console.log(\"My favorite albums: \");\n        for(var i = 0; i < this.albums.length; i++) {\n            console.log(this.albums[i]);\n        }\n    }\n}\n// My Favorite band and his best albums\nlet myFavoriteAlbums = new MyBand([\"Ace of Spades\", \"Rock and Roll\", \"March or Die\"], 3);\n// Call the listAlbums method.\nconsole.log(myFavoriteAlbums.listAlbums());\n```", "```php\n/////////// using inheritance with TypeScript ////////////\nclass MySinger extends MyBand {\n    // All Properties from MyBand Class are available inherited here\n    // So we define a new constructor.\n    constructor(albums_list: Array<string>, total_members: number) {\n        // Call the parent's constructor using super keyword.\n        super(albums_list, total_members);\n    }\n    listAlbums(): void{\n        console.log(\"Singer best albums:\");\n        for(var i = 0; i < this.albums.length; i++) {\n            console.log(this.albums[i]);\n        }\n    }\n}\n// Create a new instance of the YourBand class.\nlet singerFavoriteAlbum = new MySinger([\"At Falson Prision\", \"Among out the Stars\", \"Heroes\"], 1);\nconsole.log(singerFavoriteAlbum.listAlbums());\n```", "```php\ninterface Band {\n    name: string,\n    total_members: number\n}\n```", "```php\ninterface Band {\n    name: string,\n    total_members: number\n}\nfunction unknowBand(band: Band): void {\n    console.log(\"This band: \" + band.name + \", has: \" +                 band.total_members + \" members\");\n}\n```", "```php\n// create a band object with the same properties from Band interface:\nlet newband = {\n    name: \"Black Sabbath\",\n    total_members: 4\n}\nconsole.log(unknowBand(newband));\n```", "```php\nThis band: Black Sabbath, has: 4 members\n```", "```php\nfunction genericFunction<T>( arg: T ): T [] {\n    let myGenericArray: T[] = [];\n    myGenericArray.push(arg);\n    return myGenericArray;\n}\n```", "```php\nfunction genericFunction<T>( arg: T ): T [] {\n    let myGenericArray: T[] = [];\n    myGenericArray.push(arg);\n    return myGenericArray;\n}\nlet stringFromGenericFunction = genericFunction<string>(\"Some string goes here\");\nconsole.log(stringFromGenericFunction[0]);\nlet numberFromGenericFunction = genericFunction(190);\nconsole.log(numberFromGenericFunction[0]);\n```", "```php\ntsc generics.ts\n```", "```php\nnode generics.js\n```", "```php\nSome string goes here\n 190\n```", "```php\nlet numberFromGenericFunction = genericFunction<number>(190);\nconsole.log(numberFromGenericFunction[0]);\n```", "```php\nexport class MyBand {\n    // Properties without prefix are public\n    // Available is; Private, Protected\n    albums: Array<string>;\n    members: number;\n    constructor(albums_list: Array<string>, total_members: number) {\n        this.albums = albums_list;\n        this.members = total_members;\n    }\n    // Methods\n    listAlbums(): void {\n        console.log(\"My favorite albums: \");\n        for(var i = 0; i < this.albums.length; i++) {\n            console.log(this.albums[i]);\n        }\n    }\n}\n```", "```php\nimport MyBand = require('./export');\nconsole.log(Myband());\n```", "```php\nimport { MyBand } from './export';\nconsole.log(new Myband(['ZZ Top', 'Motorhead'], 3));\n```"]