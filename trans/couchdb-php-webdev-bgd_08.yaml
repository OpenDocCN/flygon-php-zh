- en: Chapter 8. Using Design Documents for Views and Validation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。使用设计文档进行视图和验证
- en: So far, our application is not dramatically different from what you might do
    if you were using MySQL or some other relational database. But, in this chapter,
    we're really going to turn up the heat on what we can do with CouchDB by using
    it to handle a lot of things that may have been pain points with relational databases
    in the past.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序与使用 MySQL 或其他关系数据库时并没有太大的不同。但是，在本章中，我们将真正发挥 CouchDB 的作用，通过它来处理以前在关系数据库中可能是痛点的许多事情。
- en: 'In this chapter we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Define design documents
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义设计文档
- en: Learn about views and how to use them to query data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解视图以及如何使用它们来查询数据
- en: Discover the power of MapReduce functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现 MapReduce 函数的威力
- en: Play with CouchDB's `validation` function
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CouchDB 的 `validation` 函数
- en: Let's not waste time, and move right into talking about design documents.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不浪费时间，直接谈论设计文档。
- en: Design documents
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计文档
- en: '**Design documents** are one of the special things that CouchDB has in its
    arsenal that you might not expect from a database. On the surface, design documents
    look the same as regular documents. They have the standard fields: `_id` and `_rev`,
    and can be created, read, updated, and deleted. But unlike normal documents, they
    contain application code in the form of JavaScript and have a specific structure.
    This JavaScript can drive validation, display views with `map` and `reduce` functions,
    and a whole lot more. We''ll touch on each of these features and how to use them
    shortly.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计文档** 是 CouchDB 的特殊功能之一，你可能没有从数据库中预期到。表面上，设计文档看起来和普通文档一样。它们有标准字段：`_id` 和
    `_rev`，可以创建、读取、更新和删除。但与普通文档不同的是，它们包含 JavaScript 形式的应用代码，并且具有特定的结构。这些 JavaScript
    可以驱动验证，使用 `map` 和 `reduce` 函数显示视图，以及更多功能。我们将简要介绍每个功能以及如何使用它们。'
- en: A basic design document
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个基本的设计文档
- en: 'A basic design document might look similar to the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的设计文档可能看起来类似于以下内容：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`The _id` and `_rev` should look familiar, but unlike other documents so far,
    the `_id` has a readable name: `_design/example`. Design documents are identified
    as such by having `_design` in the name. So, it''s important that you follow this
    format.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`_id` 和 `_rev` 应该看起来很熟悉，但与迄今为止的其他文档不同，`_id` 有一个可读的名称：`_design/example`。设计文档通过名称中包含
    `_design` 来标识。因此，您需要遵循这种格式。'
- en: Moving on from `_id` and `_rev`, you'll notice the key views. Views are a big
    part of design documents, so let's talk more about them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `_id` 和 `_rev` 过渡后，您会注意到键视图。视图是设计文档的重要组成部分，让我们更多地谈谈它们。
- en: Views
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: '**Views** are what CouchDB gives us to index, query, and report on our database''s
    documents. If you are reading this book after a MySQL experience, then views will
    be the replacement for the typical SQL `SELECT` statements.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**视图** 是 CouchDB 提供给我们的用于索引、查询和报告数据库文档的工具。如果您在 MySQL 经验之后阅读本书，那么视图将替代典型的 SQL
    `SELECT` 语句。'
- en: Now that you have a bit of a background on what views are, you'll notice that
    in the previous design document, we've created a view called `test`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对视图有了一些了解，您会注意到在前面的设计文档中，我们创建了一个名为 `test` 的视图。
- en: Map functions
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 映射函数
- en: 'Inside the `example` key, we''ve placed a function called `map`. Map functions
    are JavaScript functions that consume documents, and then transform them from
    their original structure into a new key/value pair that your application can then
    use. Map functions are critical to understand. So, let''s look at the simplest
    implementation of a `map` function to make sure we''re all on the same page:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `example` 键内，我们放置了一个名为 `map` 的函数。Map 函数是 JavaScript 函数，用于消耗文档，然后将它们从原始结构转换为应用程序可以使用的新的键/值对。了解
    Map 函数至关重要。因此，让我们看一下 `map` 函数的最简单实现，以确保我们都在同一个页面上。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When the example `map` function is called, CouchDB will attempt to index each
    of the documents in the database and push them through this function in a JSON
    format using the `doc` argument. From there, we are calling a function called
    `emit` which accepts a key and a value, from which the key and value will be saved
    to an array, which will be returned once the indexing is complete.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用示例 `map` 函数时，CouchDB 将尝试索引数据库中的每个文档，并使用 `doc` 参数以 JSON 格式将它们传递给这个函数。然后，我们调用一个名为
    `emit` 的函数，它接受一个键和一个值，从中键和值将保存到一个数组中，并在索引完成后返回。
- en: The key and value of the `emit` function can be whatever field of a document
    that you would like. In this example, we are passing `doc._id` as the key and
    `doc` as the value into the `emit` function. `doc._id`, as you might have guessed,
    is the `_id` field of the document that is being indexed, and `doc` is the entire
    document represented in a JSON format.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`emit` 函数的键和值可以是文档中的任何字段。在这个例子中，我们将 `doc._id` 作为键，`doc` 作为值传递给 `emit` 函数。`doc._id`
    可能是被索引的文档的 `_id` 字段，`doc` 是以 JSON 格式表示的整个文档。'
- en: We're going to use views to play with our data in the next section. To make
    sure that you can completely decipher what views do to our data, make sure that
    you have at least five or six posts created in the `verge` database.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用视图来处理我们的数据。为了确保您完全理解视图对我们的数据做了什么，请确保您在 `verge` 数据库中至少创建了五到六篇帖子。
- en: Time for action — creating a temporary view
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 — 创建临时视图
- en: CouchDB provides temporary views for us to use when we are developing or trying
    to test the result of a view. Let's create a temporary view using Futon so that
    we can play with some of our data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB 为我们提供了临时视图，供我们在开发或尝试测试视图结果时使用。让我们使用 Futon 创建一个临时视图，以便我们可以处理一些数据。
- en: Open your browser, and go to Futon (`http://localhost:5984/_utils/`).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，转到 Futon (`http://localhost:5984/_utils/`)。
- en: Make sure that you are logged in to the `admin` account by checking the bottom
    of the right column.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已登录到 `admin` 帐户，通过检查右侧列的底部。
- en: Go into our `verge` database by clicking on `verge`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击 `verge` 进入我们的 `verge` 数据库。
- en: Click on the drop-down box, and select **Temporary view...**.![Time for action
    — creating a temporary view](graphics/3586_08_005.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下拉框，选择**临时视图...**。![进行操作的时间-创建临时视图](graphics/3586_08_005.jpg)
- en: This form will allow us to play around with views and test them against data
    in real time.![Time for action — creating a temporary view](graphics/3586_08_010.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个表单将允许我们玩弄视图并实时测试它们与数据。![进行操作的时间-创建临时视图](graphics/3586_08_010.jpg)
- en: 'Let''s edit the code in the **Map Function** text area, so that it matches
    the example code we looked at earlier:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编辑**Map Function**文本区域中的代码，使其与我们之前查看的示例代码匹配：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Click on **Run** to see the results of the `map` function.![Time for action
    — creating a temporary view](graphics/3586_08_015.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**以查看`map`函数的结果。![进行操作的时间-创建临时视图](graphics/3586_08_015.jpg)
- en: Let's make sure we're only seeing posts by checking that `doc.type` is equal
    to `post:`
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们确保我们只能通过检查`doc.type`是否等于`post:`来看到帖子。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Click on **Run** again, and you'll see the same results.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**运行**，你会看到相同的结果。
- en: What just happened?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just learned how to create a temporary view in CouchDB so that we can test
    the `map` function that we looked at earlier. Using the temporary view interface
    that Futon gives us, we ran our example `map` function and were shown a list of
    key/value pairs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学习了如何在CouchDB中创建一个临时视图，以便我们可以测试之前查看的`map`函数。使用Futon给我们的临时视图界面，我们运行了我们的示例`map`函数，并显示了一系列键/值对。
- en: Finally, we strengthened our `map` function a bit to make sure that we were
    only looking at documents with `type` equal to `post`. Right now, the change didn't
    do anything to our `map` function, but that would change as soon as we added a
    document with a different type. If you remember, this is because CouchDB stores
    documents in a flat data store; meaning that as we add new document types, we'll
    want to be specific on which ones we deal with. So, by adding the `if` statement
    into our code, we're telling CouchDB to ignore the documents that do not have
    `type` set as `post`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们稍微加强了我们的`map`函数，以确保我们只查看`type`等于`post`的文档。现在，这个改变对我们的`map`函数没有任何影响，但是一旦我们添加了一个不同类型的文档，情况就会改变。如果你记得的话，这是因为CouchDB将文档存储在一个扁平的数据存储中；这意味着当我们添加新的文档类型时，我们希望具体指出我们要处理哪些文档。因此，通过在我们的代码中添加`if`语句，我们告诉CouchDB忽略那些`type`未设置为`post`的文档。
- en: Time for action — creating a view for listing posts
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行操作的时间-创建用于列出帖子的视图
- en: 'You might have noticed the warning on the temporary view page that said the
    following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了临时视图页面上的警告，内容如下：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's heed this warning and create a design document so that we can start to
    build this all into our application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们听从这个警告，创建一个设计文档，这样我们就可以开始将所有这些构建到我们的应用程序中。
- en: Open your browser to Futon.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器到Futon。
- en: 'Navigate to the temporary view page that we were working with: (`http://localhost:5984/_utils/database.html?verge/_temp_view`).'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们正在使用的临时视图页面：（`http://localhost:5984/_utils/database.html?verge/_temp_view`）。
- en: Let's make our function a bit more useful, and change our key to `doc.user`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们让我们的函数更有用一些，将我们的键改为`doc.user`。
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Click on **Run** to see the results.![Time for action — creating a view for
    listing posts](graphics/3586_08_020.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**以查看结果。![进行操作的时间-创建用于列出帖子的视图](graphics/3586_08_020.jpg)
- en: Now that our view has the code that we want to use in our application, click
    on **Save As...** to save this view and create a design document for us.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的视图中有我们想要在应用程序中使用的代码，点击**另存为...**以保存此视图并为我们创建一个设计文档。
- en: A window will be displayed asking us to give the design document and the view
    a name. Enter `_design/application` as the name for **Design Document** name and
    `posts_by_user` as for **View Name**, then click on **Save**.![Time for action
    — creating a view for listing posts](graphics/3586_08_025.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示一个窗口，要求我们给设计文档和视图命名。将`_design/application`输入为**设计文档**名称，`posts_by_user`输入为**视图名称**，然后点击**保存**。![进行操作的时间-创建用于列出帖子的视图](graphics/3586_08_025.jpg)
- en: What just happened?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a design document from our temporary view so that our application
    could use it. This time, we changed the key from `doc._id` to `doc.user`, to allow
    us to select documents with a specific username, which will be helpful in just
    a few minutes. We then saved this temporary view into a view called, `posts_by_user`,
    and saved it into a new design document called `_design/application`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从临时视图中创建了一个设计文档，以便我们的应用程序可以使用它。这一次，我们将键从`doc._id`更改为`doc.user`，以便我们可以选择具有特定用户名的文档，这将在几分钟内有所帮助。然后，我们将这个临时视图保存为一个名为`posts_by_user`的视图，并将其保存到一个名为`_design/application`的新设计文档中。
- en: You can use Futon's interface to easily check that our design document was created
    successfully.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用Futon的界面轻松检查我们的设计文档是否成功创建。
- en: Open your browser, and go to the `verge` database in Futon (`http://localhost:5984/_utils/database.html?verge`).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，进入Futon中的`verge`数据库（`http://localhost:5984/_utils/database.html?verge`）。
- en: Click on the view drop-down box, and select **Design documents**.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击视图下拉框，选择**设计文档**。
- en: You'll only see one document here, which is our newly created design document
    called `_design/application`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你只会在这里看到一个文档，那就是我们新创建的设计文档，名为`_design/application`。
- en: Click on the document, and you'll see the full design document.![What just happened?](graphics/3586_08_030.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文档，你会看到完整的设计文档。![刚刚发生了什么？](graphics/3586_08_030.jpg)
- en: 'While we''re at it, let''s quickly look at how you can use Futon to test out
    a design document and its views:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 趁热打铁，让我们快速看看如何使用Futon来测试设计文档及其视图：
- en: Open up your browser to Futon, and make sure you are looking at the `verge`
    database (`http://localhost:5984/_utils/database.html?verge`).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器到Futon，并确保你正在查看`verge`数据库（`http://localhost:5984/_utils/database.html?verge`）。
- en: Click on the view drop-down box, and you'll see the application (the name of
    our design document). Click on the view called `posts_by_user`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击视图下拉框，你会看到应用程序（我们设计文档的名称）。点击名为`posts_by_user`的视图。
- en: You'll be shown the results of the view, as well as the code that is currently
    associated with it.![What just happened?](graphics/3586_08_035.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到视图的结果，以及当前与之关联的代码。![刚刚发生了什么？](graphics/3586_08_035.jpg)
- en: From this page, you can click on the results and see the document details. You
    can even change the code for your view by simply typing the new code in and clicking
    on **Save**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个页面，您可以点击结果并查看文档详细信息。您甚至可以通过简单地输入新代码并点击**保存**来更改视图的代码。
- en: It's been fun playing with these simple views, but let's get a bit deeper into
    how we can actually use these views to query our documents.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 玩弄这些简单视图很有趣，但让我们深入一点，看看我们实际上如何使用这些视图来查询我们的文档。
- en: Querying map functions
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询map函数
- en: 'There are a variety of options that we can use in our `map` queries. I will
    touch on the most common ones, but you can find more my looking at CouchDB''s
    wiki: [http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options](http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的`map`查询中使用各种选项。我将涉及最常见的一些选项，但您可以通过查看CouchDB的wiki找到更多：[http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options](http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options)。
- en: 'The most common query options are:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的查询选项是：
- en: '`reduce`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reduce`'
- en: '`startkey`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`startkey`'
- en: '`endkey`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`endkey`'
- en: '`key`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`'
- en: '`limit`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit`'
- en: '`skip`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip`'
- en: '`descending`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`descending`'
- en: '`include_docs`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_docs`'
- en: Let's use some of these options with our `posts_by_user` view to see what kind
    of results we can get.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一些这些选项与我们的`posts_by_user`视图，看看我们可以得到什么样的结果。
- en: Time for action — querying the posts_by_user view
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-查询posts_by_user视图
- en: Remember that design document is still a document, which means that we can query
    it just as we would query a regular document. The only difference will be that
    we need to use a slightly different URL pattern to hit the correct file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，设计文档仍然是一个文档，这意味着我们可以像查询常规文档一样查询它。唯一的区别是我们需要使用稍微不同的URL模式来命中正确的文件。
- en: Open Terminal.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Use a `curl` statement to query our design document by passing a key of `johndoe`
    (or another user in your database that has a decent amount of posts), then pass
    it through `python mjson.tool` to make it a bit prettier:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个`curl`语句通过传递`johndoe`的关键字（或者您数据库中帖子数量较多的其他用户）来查询我们的设计文档，然后通过`python mjson.tool`使其变得更漂亮：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The terminal will respond with something similar to the following:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端将返回类似以下的内容：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What just happened?
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just used a `curl` statement to query the `posts_by_user` view in our application
    design document. We passed `johndoe` as the key for our view to search with, which
    CouchDB used to return only documents that matched that key. We then used `python
    mjson.tool` so that we could see our output in a friendly manner.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用了一个`curl`语句来查询我们应用程序设计文档中的`posts_by_user`视图。我们将`johndoe`作为我们的视图搜索的关键字传递，CouchDB用它来返回只匹配该关键字的文档。然后我们使用`python
    mjson.tool`，这样我们就可以以友好的方式看到我们的输出。
- en: Let's have some more fun and talk through a few quick scenarios to determine
    how we could solve them with the map's `query` options.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再玩一会儿，通过几个快速场景来讨论一下，确定我们如何使用map的`query`选项来解决它们。
- en: 'What if you really wanted to only retrieve the first post that our `map` function
    would return for `johndoe?` You can do this by adding `limit=1` to the end of
    our query string:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您真的只想检索我们的`map`函数为`johndoe`返回的第一篇帖子，您可以通过在查询字符串的末尾添加`limit=1`来实现这一点：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Your terminal will respond with the following output. Notice that this time
    you are only getting one post in return:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的终端将返回以下输出。请注意，这次您只会得到一篇帖子：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, what if we wanted to see the last post that our map function would return
    for `johndoe?` You can do this by adding `descending=true`, along with `limit=1`,
    to the end of our statement to get the newest one, as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们想要看到我们的`map`函数为`johndoe`返回的最后一篇帖子，您可以通过在我们的语句末尾添加`descending=true`以及`limit=1`来实现这一点，以获取最新的帖子，如下所示：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Your command-line will return precisely what you are looking for: the last
    post created by `johndoe`.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的命令行将精确返回您要查找的内容：由`johndoe`创建的最后一篇帖子。
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With some of those examples under your belt, it should be clear that we can
    chain and combine our `query` options to retrieve the data in a variety of ways.
    We could play with querying views for a while, but let's move on to trying to
    build the `posts_by_user` view into our application, in order to allow us to show
    a user's posts on their profile.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些示例，您应该清楚地知道我们可以链式和组合我们的`query`选项以各种方式检索数据。我们可以玩一会儿查询视图，但让我们继续尝试将`posts_by_user`视图构建到我们的应用程序中，以便我们可以在用户的个人资料上显示用户的帖子。
- en: Using the view in our application
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在我们的应用程序中使用视图
- en: We've done most of the heavy lifting needed to query our database; we just need
    to add a few lines of code to our application.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了查询数据库所需的大部分繁重工作；我们只需要向我们的应用程序添加几行代码。
- en: Time for action — adding support to get_posts_by_user in the post class
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-在帖子类中添加对get_posts_by_user的支持
- en: Open `classes/post.php` in your text editor.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`classes/post.php`。
- en: Create a new `public` function called `get_posts_by_user` that will accept `$username`
    as a parameter.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`get_posts_by_user`的新的`public`函数，它将接受`$username`作为参数。
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, let's create a new instance of `Bones`, so that we can query CouchDB. Let's
    also instantiate an array called `$posts`, which we'll return at the end of this
    function.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个新的`Bones`实例，以便我们可以查询CouchDB。让我们还实例化一个名为`$posts`的数组，在这个函数的最后返回它。
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, let's query our view by passing `$username` as the key, and let's use
    a `foreach` function to iterate through all of the results into a holding `$_post`
    variable.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们通过传递`$username`作为关键字来查询我们的视图，并使用`foreach`函数来遍历所有结果到一个名为`$_post`的变量中。
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, let's use the data in the `$_post` variable to create and populate
    a new instance of `Post`. Then, let's add `$post` to the `$posts` array.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用`$_post`变量中的数据创建和填充一个新的`Post`实例。然后，让我们将`$post`添加到`$posts`数组中。
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What just happened?
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a function called `get_posts_by_user` and placed it in our `Post`
    class. This function accepted an argument called `$username`. The `get_posts_by_user`
    function uses the `get_posts_by_user` view to return a list of posts into a generic
    class, from which we iterated through each document, created individual `Post`
    objects, and pushed them into an array. You'll notice that we had to use `$_post->value`
    to get the post document. Remember that this is because our view returns a list
    of keys and values, one for each document, and our entire document lives in the
    `value` field.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`get_posts_by_user`的函数，并将其放在我们的`Post`类中。这个函数接受一个名为`$username`的参数。`get_posts_by_user`函数使用`get_posts_by_user`视图将帖子列表返回到一个通用类中，我们遍历每个文档，创建单独的`Post`对象，并将它们推入数组中。您会注意到，我们必须使用`$_post->value`来获取帖子文档。请记住，这是因为我们的视图返回一个键和值的列表，每个文档一个，我们整个文档都存在于`value`字段中。
- en: In short, this function enabled us to pass in a user's username and retrieve
    an array of posts created by the passed user.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这个函数使我们能够传入用户的用户名，并检索由传入用户创建的帖子数组。
- en: Time for action — adding posts to the user profile
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——将帖子添加到用户资料
- en: 'Now that we have done all of the heavy lifting to get our user''s posts, we
    just have a few more lines of code until we can have them show up in the user
    profile. Let''s start by adding some code in our `index.php` file to accept the
    username from the route, pass it to the `get_posts_by_user` function, and pass
    the data to the profile view:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有繁重的工作，获取了用户的帖子，我们只需要再写几行代码，就可以让它们显示在用户资料中。让我们首先在`index.php`文件中添加一些代码，接受路由中的用户名，将其传递给`get_posts_by_user`函数，并将数据传递给资料视图：
- en: 'Open `index.php`, find `the /user/:username` route, and add the following code
    to pass the returned posts from our `get_posts_by_user` function to a variable
    for our view to access:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`，找到`/user/:username`路由，并添加以下代码，将我们的`get_posts_by_user`函数返回的帖子传递给一个变量，以便我们的视图访问：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open `views/user/profile.php`, and add the following code right below the **Create
    a new post** text area so that we can display a list of posts on the user profile
    page:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`views/user/profile.php`，并在**创建新帖子**文本区域的下面添加以下代码，以便我们可以在用户资料页面上显示帖子列表：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finally, to support some of the new code that we added, let's update our `public/css/master.css`
    file for the profile to look nice and clean.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了支持我们添加的一些新代码，让我们更新我们的`public/css/master.css`文件，使资料看起来漂亮整洁。
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: What just happened?
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发生了什么？
- en: We just added some code to the `index.php` file so that when users navigate
    to a user's profile, our application will take the username from the route to
    the `get_posts_by_user` function and pass the result of that function into a variable
    called `posts`. Then, in the `views/user/profile.php` page, we looped through
    the posts and used Bootstraps CSS rules to make it look nice. Finally, we added
    a few lines of code to our `master.css` file to make everything look nice.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚在`index.php`文件中添加了一些代码，这样当用户导航到用户的资料时，我们的应用程序将从路由中获取用户名，传递给`get_posts_by_user`函数，并将该函数的结果传递给一个名为`posts`的变量。然后，在`views/user/profile.php`页面中，我们循环遍历帖子，并使用Bootstrap的CSS规则使其看起来漂亮。最后，我们在我们的`master.css`文件中添加了几行代码，使一切看起来漂亮。
- en: In this section, we also added a (Delete) link next to each post that doesn't
    currently do anything. We'll hook this up later in this chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们还在每篇帖子旁边添加了一个(删除)链接，目前还没有任何功能。我们将在本章后面再连接它。
- en: Fire up our browser, and let's check to make sure that everything is working
    correctly.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 打开我们的浏览器，让我们检查一下，确保一切都正常工作。
- en: Open your browser, and log in as one of your users.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，以一个用户的身份登录。
- en: Click on **My Profile** to see the user profile.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**我的个人资料**查看用户资料。
- en: You should now see the complete profile with all of the user's posts.![What
    just happened?](graphics/3586_08_040.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该能够看到包含用户所有帖子的完整资料。![发生了什么？](graphics/3586_08_040.jpg)
- en: Let's test to make sure that our list is working by typing some text into the
    text area and clicking on **Submit**.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们测试一下，确保我们的列表正常工作，输入一些文本到文本区域中，然后点击**提交**。
- en: Your profile was refreshed, and your new post should show up at the top of the
    list.![What just happened?](graphics/3586_08_045.jpg)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的个人资料已刷新，您的新帖子应该显示在列表的顶部。![发生了什么？](graphics/3586_08_045.jpg)
- en: Feel free to pause here, log in as a few different users, and create a ton of
    posts!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 随意在这里暂停一下，以几个不同的用户身份登录，并创建大量的帖子！
- en: 'When you''re done, let''s move on to talk about the `map` function''s companion:
    **reduce**.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，让我们继续讨论`map`函数的伴侣：**reduce**。
- en: Reduce functions
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Reduce函数
- en: '**Reduce** allows you to process the key/value pairs returned by the `map`
    function, and then break them down into a single value or smaller grouping of
    values. To make things easier for us, CouchDB comes with three built-in `reduce`
    functions called `_count, _sum`, and `_stats`.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**Reduce**允许您处理`map`函数返回的键/值对，然后将它们分解为单个值或更小的值组。为了让我们的工作更容易，CouchDB带有三个内置的`reduce`函数，分别是`_count,
    _sum`和`_stats`。'
- en: '`_count:` It returns the number of mapped values'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_count:` 它返回映射值的数量'
- en: '`_sum:` It returns the sum of the mapped values'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_sum:` 它返回映射值的总和'
- en: '`_stats:` It returns numerical statistics of the mapped values, including sum,
    count, min, and max'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_stats:` 它返回映射值的数值统计，包括总和、计数、最小值和最大值'
- en: Since `reduce` functions may not be 100 percent straightforward to a new developer,
    let's cut to the chase and use one in our application.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`reduce`函数对于新开发者来说可能不是100%直观，让我们直截了当地在我们的应用程序中使用它。
- en: 'In the next section, we are going to create a `reduce` function for our `get_posts_by_user`
    view that will display the number of posts each user has created. Have a look
    at our existing design document that shows what the `reduce` function would look
    like:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将为我们的`get_posts_by_user`视图创建一个`reduce`函数，显示每个用户创建的帖子数量。看一下我们现有的设计文档，显示了`reduce`函数的样子：
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this example, the `reduce` function grouped together all of the usernames
    from the `map` function and returned a count of how many times each username occurred
    in the list.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`reduce`函数将`map`函数中的所有用户名分组，并返回每个用户名在列表中出现的次数。
- en: Time for action — creating the reduce function in Futon
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作-在Futon中创建reduce函数
- en: Adding a `reduce` function to a view is surprisingly easy to do using Futon.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Futon向视图添加`reduce`函数非常容易。
- en: Open your browser and go to the `verge` database in Futon (`http://localhost:5984/_utils/database.html?verge`).
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，进入Futon中的`verge`数据库（`http://localhost:5984/_utils/database.html?verge`）。
- en: Click on the view drop-down box, and you'll see the application (the name of
    our design document). You can click on the view called `posts_by_user`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击视图下拉框，你会看到应用程序（我们设计文档的名称）。你可以点击名为`posts_by_user`的视图。
- en: Click on **View Code**, so that you can see the text areas for **Map** and **Reduce**.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**查看代码**，这样你就可以看到**Map**和**Reduce**的文本区域。
- en: Enter `_count` into the **Reduce** text area, and click on **Save**.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Reduce**文本区域输入`_count`，然后点击**保存**。
- en: You can verify that your `reduce` function is working properly by clicking on
    the **Reduce** checkbox right below the **Save** button.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击**保存**按钮下面的**Reduce**复选框来验证你的`reduce`函数是否正常工作。
- en: You should see a screenshot similar to the following:![Time for action — creating
    the reduce function in Futon](graphics/3586_08_047.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的屏幕截图：![执行操作-在Futon中创建reduce函数](graphics/3586_08_047.jpg)
- en: What just happened?
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just used Futon to update our view to use a `_count reduce` function. We
    then tested the `reduce` function in the same view by clicking on the **Reduce**
    checkbox. You'll notice that our `reduce` function also returned a key/value pair
    with the key equal to the username and the value equal to the count of posts that
    they have created.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用Futon更新了我们的视图以使用`_count reduce`函数。然后，我们通过点击**Reduce**复选框在同一视图中测试了`reduce`函数。你会注意到我们的`reduce`函数也返回了一个键/值对，键等于用户名，值等于他们创建的帖子的数量。
- en: Time for action — adding support to our application to consume the reduce function
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作-为我们的应用程序添加支持以使用reduce函数
- en: Now that we have created the `reduce` function, let's add some code to our application
    to retrieve the value.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`reduce`函数，让我们向我们的应用程序添加一些代码来检索这个值。
- en: Open `classes/post.php`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`classes/post.php`。
- en: Now that we've created a `reduce` function, we need to make sure that the `get_posts_by_user`
    function uses the view without using the `reduce` function. We'll do this by adding
    `reduce=false` to the query string. This tells the view not to run the `reduce`
    function.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个`reduce`函数，我们需要确保`get_posts_by_user`函数在不使用`reduce`函数的情况下使用该视图。我们将通过在查询字符串中添加`reduce=false`来实现这一点。这告诉视图不要运行`reduce`函数。
- en: '[PRE20]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Create a new `public` function called `get_post_count_by_user` that will accept
    `$username` as a parameter.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`get_post_count_by_user`的新的`public`函数，它将接受`$username`作为参数。
- en: '[PRE21]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let's add a call to our view that mimics our `get_posts_by_user` function. But,
    this time, we'll add `reduce=true` to the query string. Once we get a result from
    the view, traverse through the data to get the value that is located in the value
    of the first returned row.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个调用我们的视图，模仿我们的`get_posts_by_user`函数。但是，这一次，我们将在查询字符串中添加`reduce=true`。一旦我们从视图中获得结果，就遍历数据以获取位于第一个返回行的值中的值。
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Open `index.php`, and find the `/user/:username` route.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`，找到`/user/:username`路由。
- en: Add code to pass the value from the `get_post_count_by_user` function to a variable
    that our view can access.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加代码将`get_post_count_by_user`函数的值传递给我们的视图可以访问的变量。
- en: '[PRE23]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Finally, open up the user profile (`views/user/profile.php`) and display the
    $post_count variable at the top of our `post` list.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开用户资料（`views/user/profile.php`）并在我们的`post`列表顶部显示$post_count变量。
- en: '[PRE24]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: What just happened?
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We started this section by updating our existing `get_posts_by_user` function
    and told it not to run the `reduce` function, just the `map` function. Then, we
    created a function called `get_post_count_by_user` that accessed our `posts_by_user`
    view. But, this time, we told it to run the `reduce` function by passing `reduce=true`
    in our call. When we received the value from the `reduce` function, we navigated
    into the value of the first row and returned it. We're looking at just one row,
    because we're only passing in one username, meaning that only one value will be
    returned.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过更新现有的`get_posts_by_user`函数开始本节，并告诉它不要运行`reduce`函数，只运行`map`函数。然后，我们创建了一个名为`get_post_count_by_user`的函数，它访问了我们的`posts_by_user`视图。但是，这一次，我们告诉它通过在调用中传递`reduce=true`来运行`reduce`函数。当我们从`reduce`函数接收到值时，我们进入第一行的值并返回它。我们只看一个行，因为我们只传入一个用户名，这意味着只会返回一个值。
- en: We then called `get_post_count_by_user` from the user profile route and passed
    it to the `user/profile.php` view. In the view, we outputted `$post_count` at
    the top of the list of posts.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们从用户资料路由调用`get_post_count_by_user`并将其传递给`user/profile.php`视图。在视图中，我们在帖子列表的顶部输出了`$post_count`。
- en: With that small amount of code, we've added a cool piece of functionality to
    our profile. Let's test it out to see what `$post_count` displays.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这么少的代码，我们为我们的资料添加了一个很酷的功能。让我们测试一下看看`$post_count`显示了什么。
- en: 'Open your browser, and go to John Doe''s user profile by going to: `http://localhost/verge/user/johndoe`.'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，通过`http://localhost/verge/user/johndoe`进入John Doe的用户资料。
- en: Notice that we are now displaying the number of posts at the top of the `post`
    list.![What just happened?](graphics/3586_08_048.jpg)
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，我们现在在`post`列表的顶部显示了帖子的数量。![刚刚发生了什么？](graphics/3586_08_048.jpg)
- en: More with MapReduce
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多关于MapReduce
- en: Using the `map` and `reduce` functions together is often referred to as **MapReduce**,
    and when used together they can be a powerful method of data analysis. Unfortunately,
    we can't go through a variety of case studies in this book, but I'll include some
    references for further education at the end of this chapter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`map`和`reduce`函数一起通常被称为**MapReduce**，当它们一起使用时，它们可以成为数据分析的强大方法。不幸的是，我们无法在本书中介绍各种案例研究，但我会在本章末尾包含一些进一步学习的参考资料。
- en: Validation
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证
- en: In this section, we're going to expose and talk about another really unique
    property of CouchDB — its built-in support for document function. This feature
    allows us to have tighter controls on our data and can safeguard us from some
    nasty problems that can occur with web applications.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将揭示并讨论CouchDB的另一个非常独特的属性-其内置的文档函数支持。这个功能允许我们对我们的数据进行更严格的控制，并可以保护我们免受一些可能在Web应用程序中发生的严重问题。
- en: Remember that our `verge` database is readable by any user, which hasn't really
    been a problem for us yet. But, what if, for instance, someone found out where
    our database was stored? They could easily create and delete the documents in
    our database in no time.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们的`verge`数据库可以被任何用户读取，这对我们来说还不是一个问题。但是，例如，如果有人找出了我们的数据库存储位置怎么办？他们可以很容易地在我们的数据库中创建和删除文档。
- en: In order to fully illustrate this problem, let's add a functionality that will
    allow our users to delete their posts. This simple function will illustrate a
    potential security hole, which we will then patch up with CouchDB's `validation`
    function.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分说明这个问题，让我们添加一个功能，允许我们的用户删除他们的帖子。这个简单的功能将说明一个潜在的安全漏洞，然后我们将用CouchDB的`validation`函数来修补它。
- en: Time for action — adding support for $_rev to our classes
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-为我们的类添加对$_rev的支持
- en: Up until this point, we've seen the `_rev` key in our CouchDB documents, but
    we haven't had to actually use it in our application. In order for us to take
    any actions on an already existing document, we'll need to pass `_rev`, along
    with `_id`, to ensure that we are acting on the most recent document.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 直到这一点，我们在CouchDB文档中看到了`_rev`键，但我们实际上并没有在我们的应用程序中使用它。为了能够对已经存在的文档采取任何操作，我们需要传递`_rev`以及`_id`，以确保我们正在处理最新的文档。
- en: Let's prepare for this by adding a `$_rev` variable to our `base` class.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向我们的`base`类添加一个`$_rev`变量来为此做好准备。
- en: Open `classes/base.php` in your working directory, and add the `$_rev` variable.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的工作目录中打开`classes/base.php`，并添加`$_rev`变量。
- en: '[PRE25]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Unfortunately, now anytime we call the `to_json` function, `_rev` will always
    be included, regardless of it being used or not. If we were to send CouchDB a
    `null _rev`, it would throw an error. So, let's add some code to the `to_json`
    function in `classes/base.php` to unset our `_rev` variable if it has no value
    set.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不幸的是，现在每次调用`to_json`函数时，无论是否使用，`_rev`都将始终包含在内。如果我们向CouchDB发送一个`null _rev`，它将抛出错误。因此，让我们在`classes/base.php`的`to_json`函数中添加一些代码，如果没有设置值，就取消设置我们的`_rev`变量。
- en: '[PRE26]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: What just happened?
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added `$_rev` to our `base` class. Up until this point, we haven't really
    had a need to use this value, but it's a requirement when we are dealing with
    existing documents. After adding `$_rev` to the `base` class, we had to retrofit
    our `to_json` function so that it would unset `$_rev` if it didn't have a value
    set.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`$_rev`添加到我们的`base`类中。直到这一点，我们实际上并没有需要使用这个值，但在处理现有文档时，这是一个要求。在将`$_rev`添加到`base`类之后，我们不得不修改我们的`to_json`函数，以便在没有设置值时取消设置`$_rev`。
- en: Time for action — adding support to delete posts in our application
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-在我们的应用程序中添加删除帖子的支持
- en: Now that we have access to the `_rev` variable in our `base` class, let's add
    support so that our application can delete posts from the user profile.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在`base`类中有访问`_rev`变量的支持，让我们添加支持，以便我们的应用程序可以从用户个人资料中删除帖子。
- en: Let's start by opening `classes/post.php` and adding a line of code to the `get_posts_by_user`
    function so that we have `_rev` available to us.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从打开`classes/post.php`并向`get_posts_by_user`函数添加一行代码开始，以便我们可以使用`_rev`。
- en: '[PRE27]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Next, let's create a nice and simple `delete` function in the `classes/post.php`
    file, so we can delete the posts.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们在`classes/post.php`文件中创建一个简单的`delete`函数，以便我们可以删除帖子。
- en: '[PRE28]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now that we have the backend support to delete the posts, let's add a route
    in our `index.php` file that accepts `_id` and `_rev`. With this route, we can
    trigger the deletion of posts from our profile page.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了删除帖子的后端支持，让我们在我们的`index.php`文件中添加一个接受`_id`和`_rev`的路由。通过这个路由，我们可以触发从我们的个人资料页面删除帖子。
- en: '[PRE29]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Finally, let's update our `views/user/profile.php` page, so that when users
    click on the `delete` link, they hit our route, and we pass the necessary variables.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们更新我们的`views/user/profile.php`页面，以便用户点击`delete`链接时，会命中我们的路由，并传递必要的变量。
- en: '[PRE30]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: What just happened?
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just added support for users to delete posts from their profile. We started
    by making sure that we returned `_rev` to our post objects in the `get_posts_by_user`
    function, so that we can pass it when we are attempting to delete a post. Next,
    we created a `delete` function in our `post` class that accepts `$id` and `$rev`
    as attributes and calls Sag's `delete` method. Then, we created a new route called
    `/post/delete` that allows us to pass `_id` and `_rev` to it. In this route, we
    created a new `Post` object to which we set `_id` and `_rev` and then called the
    `delete` function. We then set the `success` variable and refreshed the profile.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加了支持用户从其个人资料中删除帖子。我们首先确保在`get_posts_by_user`函数中将`_rev`返回到我们的帖子对象中，以便在尝试删除帖子时可以传递它。接下来，我们在我们的`post`类中创建了一个接受`$id`和`$rev`作为属性并调用Sag的`delete`方法的`delete`函数。然后，我们创建了一个名为`/post/delete`的新路由，允许我们向其传递`_id`和`_rev`。在这个路由中，我们创建了一个新的`Post`对象，为其设置了`_id`和`_rev`，然后调用了`delete`函数。然后我们设置了`success`变量并刷新了个人资料。
- en: Finally, we made the `delete` link operational in the user profile by passing
    `$post->_id` and `$post->_rev` to the `/post/delete` route.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过将`$post->_id`和`$post->_rev`传递给`/post/delete`路由，使用户个人资料中的`delete`链接可操作。
- en: Sweet! We can now click on **Delete** next to any post on the site, and it will
    be removed from the database. Let's give it a shot.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们可以点击网站上任何帖子旁边的**删除**，它将从数据库中删除。让我们试一试。
- en: Open your browser and go to `http://localhost/verge`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，转到`http://localhost/verge`。
- en: Log in as any user, and go to their user profile.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以任何用户身份登录，转到他们的用户资料。
- en: Click on the **(Delete)** button.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**（删除）**按钮。
- en: The page will reload, and your post will be magically gone!
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面将重新加载，您的帖子将神奇地消失！
- en: This code technically works just as we planned, but if you played around with
    deleting posts for a few minutes, you might have noticed that we have a problem
    here. Right now, any user can delete a post from any profile, meaning that I could
    go to your profile and delete all of your posts. Of course, we can quickly fix
    this problem by hiding the **Delete** button. But, let's take a step back, and
    quickly think about this.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码从技术上讲确实按照我们的计划工作，但是如果您玩了几分钟删除帖子，您可能会注意到我们这里有一个问题。现在，任何用户都可以从任何个人资料中删除帖子，这意味着我可以转到您的个人资料并删除您的所有帖子。当然，我们可以通过隐藏**删除**按钮来快速解决这个问题。但是，让我们退一步，快速思考一下。
- en: What would happen if someone came across (or guessed) the `_id` and `_rev` of
    a user's posts, and passed it to the `/post/delete` route? The post would be deleted,
    because we don't have any user-level validation to ensure that the person trying
    to delete the document is actually the owner of the document.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人找到（或猜到）用户帖子的`_id`和`_rev`，并将其传递给`/post/delete`路由，会发生什么？帖子将被删除，因为我们没有任何用户级别的验证来确保试图删除文档的人实际上是文档的所有者。
- en: Let's fix this problem on a database level first, then we'll work backwards
    and hide the **Delete** button correctly in the interface.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先在数据库级别解决这个问题，然后我们将逆向工作，并在界面中正确隐藏**删除**按钮。
- en: CouchDB's support for validation
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CouchDB对验证的支持
- en: 'CouchDB provides validation for documents via a function in the design document
    called `validate_doc_update`. This function can cancel the creation/update/deletion
    of a document if the action doesn''t meet our criteria. Validation functions have
    a defined structure and fit right into a design document as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB通过设计文档中的`validate_doc_update`函数为文档提供验证。如果操作不符合我们的标准，此函数可以取消文档的创建/更新/删除。验证函数具有定义的结构，并且可以直接适用于设计文档，如下所示：
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Let's look at the `validate_doc_update` function and make sure we are clear
    on what is happening here.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`validate_doc_update`函数，并确保我们清楚这里发生了什么。
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`newDoc:` It is the document that you are trying to save'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`newDoc:`它是您要保存的文档'
- en: '`oldDoc:` It is the existing document (if there is an existing one)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`oldDoc:`它是现有的文档（如果有的话）'
- en: '`userCtx:` It is the user object and their roles'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`userCtx:`它是用户对象和他们的角色'
- en: Now that we know what parameters we have at our disposal, let's make a simple
    `validate` function that ensures that only the creator of a document can update
    or delete that document.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们可以使用哪些参数，让我们创建一个简单的`validate`函数，确保只有文档的创建者才能更新或删除该文档。
- en: Time for action — adding a validate function to ensure that only creators can
    update or delete their documents
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-添加一个验证函数，以确保只有创建者可以更新或删除他们的文档
- en: Adding `validate` functions can be a bit odd, because unlike views, there isn't
    a nice interface in Futon for us to use. The quickest way to add the `validate_doc_update`
    function is to treat it like a normal field in our document and type the code
    right into the value. It's a bit strange, but it is the quickest way to adjust
    design documents. At the end of the chapter, I'll give you some resources if you
    want to get a bit cleaner with how you manage design documents.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`validate`函数可能有点奇怪，因为与视图不同，在Futon中没有一个很好的界面供我们使用。添加`validate_doc_update`函数的最快方法是将其视为文档中的普通字段，并将代码直接输入值中。这有点奇怪，但这是调整设计文档的最快方法。在本章的末尾，如果您想更清晰地了解如何管理设计文档，我会给您一些资源。
- en: Open your browser and go to Futon (`http://localhost:5984/_utils/`).
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，转到Futon（`http://localhost:5984/_utils/`）。
- en: Make sure that you are logged in to the `admin` account by checking that the
    bottom right column says **Welcome**.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已登录到`admin`帐户，方法是检查右下角列是否显示**欢迎**。
- en: Go to our `verge` database by clicking on `verge`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击`verge`转到我们的`verge`数据库。
- en: Click on our `_design/application` design document.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击我们的`_design/application`设计文档。
- en: Click on **Add Field**, and call this field `validate_doc_update`.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加字段**，并将此字段命名为`validate_doc_update`。
- en: 'In the **Value** text area, add the following code (formatting and indents
    don''t matter):'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**值**文本区域中，添加以下代码（格式和缩进无关紧要）：
- en: '[PRE33]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Click on **Save**, and your document will be updated to include the validate
    function.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**，您的文档将被更新以包括验证函数。
- en: What just happened?
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just used Futon to update our `_design/application` design document. We used
    the simple interface to create the `validate_doc_update` function and put our
    validation code in the value. The code might look a bit confusing; let's walk
    through it real quick.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用Futon更新了我们的`_design/application`设计文档。我们使用简单的界面创建了`validate_doc_update`函数，并将验证代码放在值中。代码可能看起来有点混乱；让我们快速浏览一下。
- en: 'First, we checked to make sure that the document we''re saving has a user variable
    attached to it using this `if` statement:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们检查要保存的文档是否使用此`if`语句附加了一个用户变量：
- en: '[PRE34]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, we checked to see if the username on the document matched that of the
    currently logged-in user:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们检查文档上的用户名是否与当前登录用户的用户名匹配：
- en: '[PRE35]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If it turns out that the document did have a user tied to it, and the user
    that attempted to save was not the logged-in user, then we throw a forbidden error
    (HTTP response with status code `403)` with details on why the document could
    not be saved with this line of code:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果事实证明文档确实与用户相关联，并且尝试保存的用户不是已登录用户，则我们使用以下代码行抛出禁止错误（带有状态码`403`的HTTP响应），并说明为什么无法保存文档：
- en: '[PRE36]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'It''s worth noting that a design document can only have one `validate_doc_update`
    function. So, if you want to carry out different types of validations on different
    documents, then you would have to do something as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，一个设计文档只能有一个`validate_doc_update`函数。因此，如果你想对不同的文档进行不同类型的验证，那么你需要做如下操作：
- en: '[PRE37]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: There is a lot more we could do with validation functions. In fact, the `_users`
    database, which we use frequently, drives all of the user validation and controls
    using the `validate_doc_update` function.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用验证函数做更多的事情。事实上，我们经常使用的`_users`数据库通过`validate_doc_update`函数驱动所有用户验证和控制。
- en: Now, let's test out our `validation` function.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们测试一下我们的`validation`函数。
- en: Open your browser, and go to `http://localhost/verge`.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，转到`http://localhost/verge`。
- en: Log in as a different user than `John Doe`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以一个不同于`John Doe`的用户登录。
- en: 'Go to the profile of `John Doe` by going to: `http://localhost/verge/user/johndoe`.'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问：`http://localhost/verge/user/johndoe`，转到`John Doe`的个人资料。
- en: Try clicking on the `(Delete)` button.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试点击`(Delete)`按钮。
- en: Your browser will display the following message to you:![What just happened?](graphics/3586_08_050.jpg)
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的浏览器将向你显示以下消息：![刚刚发生了什么？](graphics/3586_08_050.jpg)
- en: Great! CouchDB threw a `403` error for us, because it knew that we weren't logged
    in as `John Doe` and we tried to delete one of his posts. If you wanted to investigate
    further, you could log in as `John Doe` again and verify that you can delete his
    posts when you are logged in as him.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！CouchDB为我们抛出了一个`403`错误，因为它知道我们没有以`John Doe`的身份登录，而我们试图删除他的帖子。如果你想进一步调查，你可以再次以`John
    Doe`的身份登录，并验证当你以他的身份登录时是否可以删除他的帖子。
- en: We can feel safe in knowing that no matter what interface a user uses, Sag,
    curl, or even through Futon, CouchDB will ensure that a user must own a document
    in order for them to delete it.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以放心地知道，无论用户使用什么接口，Sag、curl，甚至通过Futon，CouchDB都会确保用户必须拥有文档才能删除它。
- en: We could add a more graceful error message for this validation error, but it's
    rare that this error will happen, so let's move on for now. Let's just add some
    simple logic to our user profile so users don't have the ability to delete the
    posts of other users.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为这个验证错误添加一个更优雅的错误消息，但这种错误很少发生，所以现在让我们继续。让我们只是在用户个人资料中添加一些简单的逻辑，这样用户就没有能力删除其他用户的帖子。
- en: Time for action – hiding the delete buttons when not on the current user's profile
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-当不在当前用户的个人资料页面时隐藏删除按钮
- en: Hiding the delete buttons from a user is actually very easy for us to do. While
    this method is no replacement for our previous validation function, it's a nice
    and friendly way for us to safeguard against users from accidentally trying to
    delete other's posts.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 对用户隐藏删除按钮对我们来说实际上非常容易。虽然这种方法不能取代我们之前的验证函数，但对我们来说，这是一种友好的方式，可以防止用户意外尝试删除其他人的帖子。
- en: Open view/user/profile.php in your text editor.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开view/user/profile.php。
- en: Find the loop where our posts are created, and add this code around our delete
    button.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到我们创建帖子的循环，并在我们的删除按钮周围添加这段代码。
- en: '[PRE38]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: What just happened?
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just used our simple variable `$is_current_user` to hide the delete button
    from a user when they are looking at someone else's profile and show it when they
    are looking at their own. This is the same technique we used to show and hide
    the text area for creating posts earlier in this chapter.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用了我们简单的变量`$is_current_user`，当用户查看其他人的个人资料时，隐藏了删除按钮，并在查看自己的个人资料时显示了它。这与我们在本章早期用于显示和隐藏创建帖子文本区域的技术相同。
- en: If one of your users went to another user's profile now, they wouldn't be able
    to see the option to delete one of their posts. Even if they somehow managed to
    find out the `_id` and `_rev` of a post, and were able to trigger the deletion
    of a post, the `validation` function would stop them dead in their tracks.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的用户现在去另一个用户的个人资料，他们将无法看到删除他们帖子的选项。即使他们以某种方式找到了帖子的`_id`和`_rev`，并且能够触发删除帖子，`validation`函数也会阻止他们。
- en: Wrapping up
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We went through a lot in this chapter, but I was only able to touch on a few
    points that would definitely be worth researching more.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们经历了很多，但我只能触及一些绝对值得进一步研究的要点。
- en: Want more examples?
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 想要更多例子吗？
- en: Learning advanced techniques for `MapReduce` functions and design documents
    could take up an entire book. In fact, there is an entire book on it! If you want
    to learn more about real use-case scenarios and how to deal with one-to-many and
    many-to-many relationships, then check out a book from *Bradley Holt* called Writing
    and *Querying MapReduce Views in CouchDB.*
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 学习`MapReduce`函数和设计文档的高级技术可能需要一整本书的篇幅。事实上，已经有一整本书在讲这个！如果你想了解更多关于真实用例场景以及如何处理一对多和多对多关系的内容，那就看看*Bradley
    Holt*的一本书，名为《在CouchDB中编写和查询MapReduce Views》。
- en: Working with design documents in Futon is too hard!
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Futon中使用设计文档太难了！
- en: You aren't the only one who thinks that working with design documents in Futon
    is too hard.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不是唯一一个认为在Futon中使用设计文档太难的人。
- en: 'There are a few tools that might be worth checking out:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些工具可能值得一试：
- en: '**CouchApp** ([http://couchapp.org/](http://couchapp.org/)): It is a utility
    that can enable you to create full-blown JavaScript applications that run inside
    of CouchDB. However, the way it manages design documents can also make your life
    easier when developing PHP applications.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CouchApp** ([http://couchapp.org/](http://couchapp.org/))：这是一个实用程序，可以让你创建在CouchDB内部运行的完整的JavaScript应用程序。然而，它管理设计文档的方式也可以在开发PHP应用程序时让你的生活更轻松。'
- en: '**LoveSeat** ([http://www.russiantequila.com/wordpress/?p=119](http://www.russiantequila.com/wordpress/?p=119)):
    It is a lightweight editor that works under Mono, meaning it will work on any
    operating system. It allows you to very easily manage your documents and design
    documents.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LoveSeat** ([http://www.russiantequila.com/wordpress/?p=119](http://www.russiantequila.com/wordpress/?p=119))：这是一个轻量级的编辑器，可以在Mono下工作，这意味着它可以在任何操作系统上运行。它允许你非常容易地管理你的文档和设计文档。'
- en: Summary
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a deep dive into CouchDB and utilized some of its unique
    characteristics to make our apps simpler. More specifically, we talked about design
    documents and how CouchDB uses them, creating views and a design document using
    Futon. We learned about views, how we can query them with options, such as SQL,
    queried our posts in views with the help of MapReduce, consumed a view in our
    application to dynamically display a list and count of posts for each user, and
    we also learned how to build validation into CouchDB and used it to safeguard
    our application.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入研究了CouchDB，并利用了它的一些独特特性来使我们的应用程序更简单。更具体地说，我们讨论了设计文档以及CouchDB如何使用它们，使用Futon创建视图和设计文档。我们了解了视图，以及如何使用选项查询它们，例如SQL，如何在视图中使用MapReduce查询我们的帖子，在我们的应用程序中使用视图动态显示每个用户的帖子列表和计数，还学习了如何在CouchDB中构建验证并将其用于保护我们的应用程序。
- en: In the next chapter, we will take our application a few steps further and add
    fun features, such as improving our user experience with JQuery, adding pagination,
    using Gravatars, and more!
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步完善我们的应用程序，并添加一些有趣的功能，例如使用JQuery改善用户体验，添加分页，使用Gravatars等等！
