["```php\nCREATE TABLE posts( \nid INT(11) PRIMARY KEY AUTO INCREMENT, \npost_title TEXT, \npost_content TEXT, \npost_date DATETIME, \nmodified DATETIME, \npublished DATETIME \n); \n\n```", "```php\n//admin.php \n<form action=\"admin.php\" method=\"post\"> \nUsername: <input type=\"text\" name=\"username\"><br /> \nPassword: <input type=\"text\" name=\"username\"><br /> \n<input type=\"submit\" name=\"submit\"> \n</form> \n<?php \n$db = new mysqli(); //etc \n\nFunction checkPassword($username, $password) { \n//generate hash \n    $bpassword = password_hash($password); \n\n//clean up username for sanitization \n$username = $db->real_escape_string($username); \n\n    $query = mysqli_query(\"SELECT * FROM users WHERE password='\".$bpassword.\"' AND username = '\". $username. \"'\"); \nif($query->num_rows() > 0) { \nreturn true; \n     } \nreturn false; \n} \n\nif(isset$_POST[' assword']) && isset ($_POST['username']) ) { \nIf(checkPassword($_POST['username'], $_POST['password'])) { \n$_SESSION['admin'] = true; \n$_SESSION['logged_in'] = true; \n$_SESSION['expires'] = 3600; //1 hour \n      $_SESSION['signin_time'] = time(); //unix time \n      header('Location: admin_crud_posts.php'); \n} \nelse { \n       //lead the user out \nheader('Location: logout.php'); \n    } \n   } \n} \n\n```", "```php\n<?php \n$db = new mysqli(); //etc \nfunction delete($post_id) { \n   $sql_query = \"DELETE FROM posts WHERE id= '\". $post_id.\"'\"; \n  $db->query($sql_query); \n\n} \n\nfunction update($postTitle, $postContent, $postAuthor, $postId) { \n$sql_query = \"UPDATE posts  \n   SET  title = '\".$postTitle. \"',  \n   post_content = '\". $postContent. \"',  \n   post_author='\". $postAuthor.\"'   \n   WHERE id = '\".$postId.\"'\"; \n   $db->query($sql_query); \n} \n\nfunction create($postTitle, $postContent, $postAuthor) { \n\n$insert_query = \"INSERT INTO posts (null , \n    '\" . $postTitle.\"', \n    '\". $postContent.\"', \n   '\" $postAuthor.\"')\";  \n\n$db->query($insert_query); \n\n} \n\n$query = \"SELECT * FROM posts\"; \n$result = $db->query($query); \n\n//display \n?> \n<table> \n<tr> \n<td>Title</td> \n<td>Content</td> \n<td>Author</td> \n<td>Administer</td> \n</tr> \nwhile($row = $db->fetch_array($query,MYSQLI_ASSOC)) { \n  $id = $row['id']; \necho '<tr>'; \n\necho '<td>' .$row['title'] . '</td>'; \n\necho '<td>' . $row['content'] . '</td>';   \n\necho '<td>' . $row['author'] . '</td>'; \n\necho '<td><a href=\"edit.php?postid='.$id.'\">Edit</a>'; \necho '<a href=\"delete.php?postid='.$id.'\">Delete</a>'.</td>';' \necho '</tr>'; \n} \necho \"</table>\"; \n\n?> \n\n```", "```php\n<?php \nfunction redirect($home) { \nheader('Location: '. $home); \n} \nif(!empty($_POST)) { \n   $query = 'UPDATE posts SET title='\" .  $_POST['title']. \"', content='\". $_POST['content'].\"' WHERE id = \".$_POST['id']; \n   $db->query($query); \n   redirect('index.php'); \n} else { \n  $id = $_GET['id']; \n  $q = \"SELECT * FROM posts WHERE id= '\".$_GET['id'] . \"'\" \n?> \n<form action=\"edit.php\" method=\"post\"> \n\n<input name=\"post_title type=\"text\" value=\" =\"<?php echo  $_POST[ \ntitle'] ?>\"> \n\n<input type=\"text\" value=\"<?php echo $_POST['content'] ?>\"> \n\n<input type=\"hidden\" value=\"<?php echo $_GET['id'] ?>\"> \n\n</form> \n<?php \n} \n?> \n\n```", "```php\n<?php \n\nfunction redirect($home) { \n    header('Location: '. $home); \n} \nif(isset ($_GET['postid'])) { \n    $query = \"DELETE FROM  posts WHERE id = '\".$_GET['post_id'].\"'\"; \n$db->query($query); \nredirect('index.php'); \n} \n\n```", "```php\n<html> \n<?php \n$res = $db->query(\"SELECT * FROM posts LIMIT 10\"); \nforeach$posts as $post { \n<h1><?phpecho $post[]?> \n?> \n} \n?> \n\n```", "```php\n<?php \nrequire \"vendor/autoload\"; \n$faker = FakerFactory::create(); \nfor($i=0; $i < 10; $i++) { \n  $id = $i; \n  $post = $faker->paragraph(3, true); \n  $title  = $faker->text(150);  \n  $query = \"INSERT INTO posts VALUES (\".$id.\",'\".$title.\"','\".$post . \"','1')\" \n} \n\n?> \n\n```", "```php\n**curl -L -O \n\u00a0\u00a0\u00a0\u00a0\u00a0 https://download.elastic.co/elasticsearch/release/org/elasticsearch\n\u00a0\u00a0\u00a0\u00a0\u00a0 /distribution/tar/elasticsearch/2.1.0/elasticsearch-2.1.0.tar.gz**\n\n```", "```php\n**tar -zxvf elasticsearch-2.1.0.tar.gz**\n**cd /path/to/elasticsearch/archive**\n\n```", "```php\n**cd bin**\n**./elasticsearch**\n\n```", "```php\n**brew install elasticsearch**\n\n```", "```php\n          { \n          \"require\":{ \n          \"elasticsearch/elasticsearch\":\"~2.0\" \n          } \n          } \n\n    ```", "```php\n          curl-s http://getcomposer.org/installer | php \n          phpcomposer.phar install --no-dev \n\n    ```", "```php\n          require'vendor/autoload.php'; \n\n          $client =Elasticsearch\\ClientBuilder::create()->build(); \n\n    ```", "```php\n$params=[ \n    'index'=> 'my_index', \n    'type'=> 'my_type', \n    'id'=> 'my_id', \n    'body'=>['testField'=> 'abc'] \n]; \n\n$response = $client->index($params); \nprint_r($response); \n\n```", "```php\n$params=[ \n    'index'=> 'my_index', \n    'type'=> 'my_type', \n    'id'=> 'my_id' \n]; \n\n$response = $client->get($params); \nprint_r($response); \n\n```", "```php\n$params=[ \n    'index'=> 'my_index', \n    'type'=> 'my_type', \n    'body'=>[ \n        'query'=>[ \n            'match'=>[ \n                'testField'=> 'abc' \n] \n] \n] \n]; \n\n$response = $client->search($params); \nprint_r($response); \n\n```", "```php\n<div class=\"col-md-6\"> \n<div class=\"panel panel-info\"> \n<div class=\"panel-heading\">Create Document for indexing</div> \n<div class=\"panel-body\"> \n<form method=\"post\" action=\"new_document\" role=\"form\"> \n<div class=\"form-group\"> \n<label class=\"control-label\" for=\"Title\">Title</label> \n<input type=\"text\" class=\"form-control\" id=\"newTitle\" placeholder=\"Title\"> \n</div> \n<div class=\"form-group\"> \n<label class=\"control-label\" for=\"exampleInputFile\">Post Content</label> \n<textarea class=\"form-control\" rows=\"5\" name=\"post_body\"></textarea> \n<p class=\"help-block\">Add some Content</p> \n</div> \n<div class=\"form-group\"> \n<label class=\"control-label\">Keywords/Tags</label> \n<div class=\"col-sm-10\"> \n<input type=\"text\" class=\"form-control\" placeholder=\"keywords, tags, more keywords\" name=\"keywords\"> \n</div> \n<p class=\"help-block\">You know, #tags</p> \n</div> \n<button type=\"submit\" class=\"btnbtn-default\">Create New Document</button> \n</form> \n</div> \n</div> \n</div> \n\n```", "```php\npublic function insertData($data) { \n  $sql = \"INSERT INTO posts ('title', 'tags', 'content') VALUES('\" . $data['title] . \"','\" . $data['tags'] . \"','\" .$data['content'] . \")\"; \nmysql_query($sql); \n} \n\ninsertData($_POST); \n\n```", "```php\n$params=[ \n    'index'=> 'my_posts', \n    'type'=>'posts', \n    'id'=>'posts', \n    'body'=>[ \n       'title'=>$_POST['title'], \n       'tags' => $_POST['tags'], \n       'content' => $_POST['content'] \n] \n]; \n\n$response = $client->index($params); \nprint_r($response); \n\n```", "```php\ninput { \nredis { \nkey =>phplogs \ndata_type => ['list'] \n  } \n} \n\n```", "```php\n<?php \n$redis = new Redis() or die(\"Cannot load Redis module.\"); \n$redis->connect('localhost'); \n$redis->set('random', rand(5000,6000)); \necho $redis->get('random'); \n\n```", "```php\ncomposer init \n\n```", "```php\ncomposer require monolog/monolog\n```", "```php\n<?php \nrequire'vendor/autoload.php' \n\nuseMonolog\\Logger; \nuseMonolog\\Handler\\RedisHandler; \nuseMonolog\\Formatter\\LogstashFormatter; \nusePredis\\Client; \n\n$redisHandler=newRedisHandler(newClient(),'phplogs'); \n$formatter =newLogstashFormatter('my_app'); \n$redisHandler->setFormatter($formatter); \n\n// Create a Logger instance  \n$logger =newLogger('logstash_test', array($redisHandler)); \n$logger->info('Logging some infos to logstash.'); \n\n```", "```php\n$ mkdir ~/server_scripts \n$ cd ~/server_scripts \n\n```", "```php\n<?php \n$db_name = 'test'; \n$db_pass = 'test123'; \n$db_username = 'testuser' \n$host = 'localhost'; \n$dbconn = mysqli_connect(); \n$date_now = date('Y-m-d 00:00:00'); \n$date_now_end = date('Y-m-d 00:00:00',mktime() + 86400); \n$res = $dbcon->query(\"SELECT * FROM posts WHERE created >= '\". $date_now.\"' AND created < '\". $date_now_end. \"'\"); \n\nwhile($row = $dbconn->fetch_object($res)) { \n  /* do redis queries here */ \n\n} \n\n```", "```php\noutput{ \nelasticsearch_http{ \nhost=> localhost \n} \n} \n\n```", "```php\ninput { \nfile { \npath => \"/var/log/apache/access.log\" \nstart_position => beginning  \nignore_older => 0  \n    } \n} \n\nfilter { \ngrok { \nmatch => { \"message\" => \"%{COMBINEDAPACHELOG}\"} \n    } \ngeoip { \nsource => \"clientip\" \n    } \n} \n\noutput { \nelasticsearch {} \nstdout {} \n} \n\n```", "```php\n<script> \n\n$(function () {  \nclient.search({ \nindex: 'apachelogs', \ntype: 'logs', \nbody: { \nquery: { \n       \"match_all\": { \n\n       }, \n       {  \n         \"range\": { \n             \"epoch_date\": { \n               \"lt\": <?php echo mktime(0,0,0, date('n'), date('j'), date('Y') ) ?>, \n\n               \"gte\": <?php echo mktime(0,0,0, date('n'), date('j'), date('Y')+1 ) ?> \n          } \n         } \n       }  \n          } \n       } \n}).then(function (resp) { \nvar hits = resp.hits.hits; \nvarlogCounts = new Array(); \n    _.map(resp.hits.hits, function(count) \n    {logCounts.push(count.count)}); \n\n  $('#container').highcharts({ \nchart: { \ntype: 'bar' \n        }, \ntitle: { \ntext: 'Apache Logs' \n        }, \nxAxis: { \ncategories: logDates \n        }, \nyAxis: { \ntitle: { \ntext: 'Log Volume' \n            } \n        }, \n   plotLines: [{ \n         value: 0, \n         width: 1, \n         color: '#87D82F' \n         }] \n   }, \n   tooltip: { \n   valueSuffix: ' logs' \n    }, \n   plotOptions: { \n   series: { \n         cursor: 'pointer', \n         point: { \n   }, \n   marker: { \n   lineWidth: 1 \n       } \n     } \n   }, \n   legend: { \n         layout: 'vertical', \n         align: 'right', \n         verticalAlign: 'middle', \n         borderWidth: 0 \n      }, \n   series: [{ \n   name: 'Volumes', \n   data: logCounts \n       }] \n      });  \n\n}, function (err) { \nconsole.trace(err.message); \n    $('#container').html('We did not get any data'); \n}); \n\n}); \n   </script> \n\n   <div id=\"container\" style=\"width:100%; height:400px;\"></div> \n\n```", "```php\n<form> \n<select name=\"date_start\" id=\"dateStart\"> \n<?php \n$aWeekAgo = date('Y-m-d H:i:s', mktime( 7 days)) \n    $aMonthAgo = date(Y-m-d H:i:s', mktime( -30));    \n//a month to a week \n<option value=\"time\">Time start</option> \n</select> \n<select name=\"date_end\" id=\"dateEnd\"> \n<?php \n    $currentDate= date('Y-m-d H:i:s');        \n$nextWeek = date('', mktime(+7 d)); \n    $nextMonth = date( ,mktime (+30)); \n?> \n<option value=\"\"><?php echo substr($currentData,10);?> \n</option> \n<button id=\"filter\" name=\"Filter\">Filter</button> \n</form> \n\n```", "```php\n<script src=\"https://code.jquery.com/jquery-2.2.4.min.js\" integrity=\"sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=\" crossorigin=\"anonymous\"></script> \n\n<script src=\"txet/javascript\"> \n$(\"button#filter\").click {  \ndateStart = $('input#dateStart').val().split(\"/\"); \ndateEnd = $('input#dateEnd').val().split(\"/\"); \nepochDateStart = Math.round(new Date(parseInt(dateStart[])]), parseInt(dateStart[1]), parseInt(dateStart[2])).getTime()/1000); \nepochDateEnd = Math.round(new Date(parseInt(dateEnd [])]), parseInt(dateEnd [1]), parseInt(dateEnd[2])).getTime()/1000); \n\n       }; \n\nclient.search({ \nindex: 'apachelogs', \ntype: 'logs', \nbody: { \nquery: { \n       \"match_all\": { \n\n       }, \n       {  \n         \"range\": { \n             \"epoch_date\": { \n               \"lt\": epochDateStart, \n\n               \"gte\": epochDateEnd \n          } \n         } \n       }  \n          } \n       } \n}).then(function (resp) { \nvar hits = resp.hits.hits; //look for hits per day fromelasticsearch apache logs \nvarlogCounts = new Array(); \n    _.map(resp.hits.hits, function(count) \n    {logCounts.push(count.count)}); \n\n$('#container').highcharts({ \nchart: { \ntype: 'bar' \n        }, \ntitle: { \ntext: 'Apache Logs' \n        }, \nxAxis: { \ncategories: logDates \n        }, \nyAxis: { \ntitle: { \ntext: 'Log Volume' \n            } \n        } \n\n   }); \n}); \n</script> \n\n```", "```php\n$(\"button#filter\").click( function() { \n   //..other code \n  $(\"#container\").animate ({ \nwidth: [ \"toggle\", \"swing\" ], \nheight: [ \"toggle\", \"swing\" ] \n}); \n\n}); \n\n```", "```php\ninput {    file { \npath => '/var/log/apache2/access.log' \n        } \n} \n\nfilter { \ngrok { \n    match =>{ \"message\" => \"%{COMBINEDAPACHELOG}\" } \n  } \ndate { \nmatch => [ \"timestamp\" , \"dd/MMM/yyyy:HH:mm:ss Z\" ] \n  } \n} \n\n```", "```php\n<form action=\"search_elasticsearch.php\" method=\"post\"> \n<table> \n   <tr> \n<td>Select time or query search term \n<tr><td>Time or search</td> \n<td><select> \n    <option value=\"time\">Time</option> \n     <option value=\"query\">Query Term</option> \n<select> \n</td>  \n</tr> \n<tr> \n<td>Time Start/End</td> \n  <td><input type=\"text\" name=\"searchTimestart\" placeholder=\"YYYY-MM-DD HH:MM:SS\" > /  \n  <input type=\"text\" name=\"searchTimeEnd\" placeholder=\"YYYY-MM-DD HH:MM:SS\" > \n</td> \n</tr> \n<tr> \n<td>Search Term:</td><td><input name=\"searchTerm\"></td> \n</tr> \n<tr><td colspan=\"2\"> \n<input type=\"submit\" name=\"search\"> \n</td></tr> \n</table> \n</form> \n\n```", "```php\n**$ curl http://localhost:9200/_search?q=post_date>2016-11-15**\n\n```", "```php\n{\"took\":403,\"timed_out\":false,\"_shards\":{\"total\":5,\"successful\":5,\"failed\":0},\"hits\":{\"total\":1,\"max_score\":0.01989093,\"hits\":[{\"_index\":\"posts\",\"_type\":\"post\",\"_id\":\"1\",\"_score\":0.01989093,\"_source\":{ \n  body: { \n    \"user\" : \"kimchy\", \n    \"post_date\" : \"2016-11-15T14:12:12\", \n    \"post_body\" : \"trying out Elasticsearch\" \n  }  \n}}]}} \n\n```", "```php\n<?php \n$db = new mysqli(HOST, DB_USER, DB_PASSWORD, DB_NAME); //define the connection details \n\nif(isset($_POST['search'])) {  \n\n$hashSearchTerm = md5($_POST['search']); \n    //get from redis and check if key exist,  \n    //if it does, return search result    \n    $rKeys = $redis->keys(*); \n\n   if(in_array($rKeys, $hashSearchTerm){  \n         $searchResults =  $redis->get($hashSearchTerm); \n         echo \"<ul>\"; \n         foreach($searchResults as $result) { \n                 echo \"<li> \n     <a href=\"readpost.php?id=\" . $result ['postId']. \"\">\".$result['postTitle'] . \"</a> \n        </li>\" ; \n         echo \"</ul>\"; \n        } \n   } else { \n     $query = \"SELECT * from posts WHERE post_title LIKE '%\".$_POST['search'].\"%' OR post_content LIKE '%\".$_POST['search'].\"%'\"; \n\n     $result = $db->query($query); \n     if($result->num_rows() > 0) { \n     echo \"<ul>;\" \n     while ($row = $result->fetch_array(MYSQL_BOTH))  \n       { \n       $queryResults = [ \n       'postId' => $row['id'], \n       'postTitle' => $row['post_title']; \n        ]; \n\n        echo \"<li> \n     <a href=\"readpost.php?id=\" . $row['id']. \"\">\".$row['post_title'] . \"</a> \n        </li>\" ; \n       } \n     echo \"</ul>\"; \n\n     $redis->setEx($hashSearchTerm, 3600, $queryResults); \n\n     } \n   } \n} //end if $_POST \nelse { \n  echo \"No search term in input\"; \n} \n?> \n\n```", "```php\n0,15,30,45 * * * * php /path/to/phpfile \n\n```", "```php\n# shipper from apache logs to redis data \noutput { \nredis { host => \"127.0.0.1\" data_type => \"channel\" key => \"logstash-%{@type}-%{+yyyy.MM.dd.HH}\" } \n} \n\n```", "```php\nfunctiongetPreviousSearches() { \nreturn  $redis->get('searches'); //an array of previously searched searchDates \n} \n\n$prevSearches = getPreviousSearches(); \n\n$prevResults = $redis->get('prev_results');  \n\nif($_POST['search']) { \n\n  if(in_array($prevSEarches)&&in_array($prevResults[$_POST['search']])) { \nif($prevSEarches[$_POST['search'])] { \n            $redis->expire($prevSearches($_POST['searchDate'])) { \n         Return $prevResults[$_POST['search']]; \n} else { \n         $values =$redis->get('logstash-'.$_POST['search']); \n             $previousResults[] = $values; \n         $redis->set('prev_results', $previousResults); \n\n          } \n\n} \n     }   \n  } \n\n```", "```php\nbower install elasticsearch \n\n```", "```php\nvar client = new $.es.Client({ \nhosts: 'localhost:9200' \n}); \n\n```", "```php\nvarsearchQuery = { \nsearch: {queryItems: [ { \n'title: 'someName',  \n  'author': 'Joe',  \n   'tags': 'some tags'}  \n] }; \n}; \n\n```", "```php\nclient.ping({ \nrequestTimeout: 30000, \n\n  // undocumented params are appended to the query string \nhello: \"elasticsearch\" \n}, function (error) { \nif (error) { \nconsole.error('elasticsearch cluster is down!'); \n  } else { \nconsole.log('All is well'); \n  } \n}); \n\n```", "```php\nlocalStorage.setItem('results',JSON.stringify(results)); \n\n```", "```php\nvar searches = localStorage.get('searches'); \nif(searches != mktime( date('H'), date('i')-15) ) { \n  //fetch again \nvarsearchParams = { \nindex: 'logdates', \nbody:  \nquery: { \nmatch: { \ndate: $('#search_date').value; \n\n} \nclient.search(); \n} else { \n  //output results from previous search; \nprevResults[$(\"#search_date\").val()]; \n} \n\n```", "```php\ncurl -d \"Hello World\" -d \"foo=bar&name=John\" http://localhost/dev/streams/php_input.php \n\n```", "```php\nreadfile('php://input') \n\n```", "```php\n<?php \nrequire 'vendor/autoload.php'; \n$client = new Elasticsearch\\Client(); \nob_start(); \n$log['body'] = array('hello' => 'world', 'message' => 'some test'); \n$log['index'] = 'test'; \n$log['type'] = 'log'; \necho json_encode($log);  \n//flush output of echo into $data \n$data = ob_get_flush(); \n$newData = json_decode($data); //turn back to array \n$client->index($newData); \n\n```", "```php\nCREATE TABLE feed ( \nId INT(11) PRIMARY KEY, \nPost_title TEXT, \npost_content TEXT, \npost_topics TEXT, \npost_time DATETIME, \npost_type VARCHAR(255), \nposted_by INT (11) DEFAULT '1'  \n) ; \n\n```", "```php\nINSERT INTO feed (`post_title`, `post_content`, `post_time`, `post_type`) VALUES ('some title', 'some content', '2015-03-20 00:00:00', 'image', 1); \n\n```", "```php\n<h2>Post something</h2> \n\n<form type=\"post\" action=\"submit_status.php\" enctype=\"multipart/form-data\"> \nTitle:<input name=\"title\" type=\"text\" /> \nDetails: <input name=\"content\" type=\"text\"> \nSelect photo:  \n<input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\"> \n<input type=\"hidden\" value=\"<?php echo $_SESSION['user_id'] ?>\" name=\"user_id\"> \n<input name=\"submit\" type=\"submit\"> \n\n</form> \n\n```", "```php\n<?php \nuse Elasticsearch\\ClientBuilder; \n\n   require 'vendor/autoload.php'; \n\n$db = new mysqli(HOST, DB_USER, DB_PASSWORD, DATABASE); \n\n $client = ClientBuilder::create()->build(); \nif(isset($_POST['submit'])) { \n  $contentType = (!empty($_FILES['fileToUpload'])) ? 'image' : ' \n\n$db->query(\"INSERT INTO feed (`post_title`, `post_content`, `post_time`, `post_type`, `posted_by`)  \nVALUES ('\". $_POST['title'] .\"','\" . $_POST['content'] . \"','\" . date('Y-m-d H:i:s'). \"','\" . $contentType . \"','\" . $_POST['user_id']); \n\n//save into elasticsearch \n$params = [ \n    'index' => 'my_feed', \n    'type' => 'posts', \n    'body' => [  \n      'contenttype' => $contentType, \n      'title'  => $_POST['title'], \n      'content' => $_POST['content'],         \n      'author' => $_POST['user_id'] \n    ] \n]; \n       $client->index($params); \n  } \n\n ?> \n\n```", "```php\n$ curl-XPUT 'http://localhost:9200/friends/'-d '{ \n\"settings\":{ \n\"number_of_shards\":3, \n\"number_of_replicas\":2 \n} \n}' \n\n```", "```php\n$ curl-XPUT 'http://localhost:9200/friends/'-d '{ \n\"settings\":{ \n\"number_of_shards\":3, \n\"number_of_replicas\":2 \n} \n}' \n\n```", "```php\n$ curl-XPUT 'http://localhost:9200/friends/posts/1'-d '{ \n\"user\":\"kimchy\", \n\"post_date\":\"2016-06-15T14:12:12\", \n\"message\":\"fred the friend\" \n}' \n\n```"]