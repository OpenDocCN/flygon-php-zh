- en: Chapter 3. Implement an Autoloader
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。实现自动加载器
- en: In this step, we will set up automatic class loading. After this, when we need
    a class file, we will not need an `include` or `require` statement to load it
    for us. You should review the PHP documentation on autoloaders before continuing
    – [http://www.php.net/manual/en/language.oop5.autoload.php](http://www.php.net/manual/en/language.oop5.autoload.php).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将设置自动类加载。之后，当我们需要一个类文件时，我们将不需要`include`或`require`语句来为我们加载它。在继续之前，您应该查看PHP自动加载器的文档
    - [http://www.php.net/manual/en/language.oop5.autoload.php](http://www.php.net/manual/en/language.oop5.autoload.php)。
- en: PSR-0
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PSR-0
- en: There are many different autoloader recommendations in PHP land. The one we
    will be using to modernize our legacy application is based on something called
    `PSR-0`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: PHP领域中有许多不同的自动加载器建议。我们将使用基于名为`PSR-0`的东西来现代化我们的旧应用程序。
- en: PSR-0 is a PHP Framework Interoperability Group recommendation for structuring
    your class files. The recommendation rises out of a long history of projects using
    the "class-to-file" naming convention from the days of PHP 4\. Originating with
    Horde and PEAR, the convention was adopted by early PHP 5 projects such as Solar
    and Zend Framework, and later by projects such as Symfony2.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: PSR-0是PHP框架互操作性组的一个推荐，用于构建您的类文件。该推荐起源于许多项目使用“类到文件”命名约定的长期历史，从PHP 4时代开始。该约定最初由Horde和PEAR发起，后来被早期的PHP
    5项目（如Solar和Zend Framework）以及后来的项目（如Symfony2）采用。
- en: We use PSR-0 instead of the newer PSR-4 recommendation because we are dealing
    with legacy code, code that was probably developed before PHP 5.3 namespaces came
    into being. Code written before PHP 5.3 did not have access to namespace separators,
    so authors following the class-to-file naming convention would typically use underscores
    in class names as a pseudo-namespace separator. PSR-0 makes an allowance for older
    non-PHP-5.3 pseudo-namespaces, making it more suitable for our legacy needs, whereas
    PSR-4 does not.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用PSR-0而不是更新的PSR-4建议，因为我们正在处理旧代码，这些代码可能是在PHP 5.3命名空间出现之前开发的。在PHP 5.3之前编写的代码无法访问命名空间分隔符，因此遵循类到文件命名约定的作者通常会在类名中使用下划线作为伪命名空间分隔符。PSR-0为旧的非PHP-5.3伪命名空间做出了让步，使其更适合我们的旧代码需求，而PSR-4则不适用。
- en: Under PSR-0, the class name maps directly to a file system sub-path. Given a
    fully-qualified class name, any PHP 5.3 namespace separators are converted to
    directory separators, and underscores in the class portion of the name are also
    converted to directory separators. (Underscores in the namespace portion proper
    are *not* converted to directory separators.) The result is prefixed with a base
    directory location, and suffixed with `.php`, to create a file path where the
    class file may be found. For example, the fully-qualified class name `\Foo\Bar\Baz_Dib`
    would be found in a sub-path named `Foo/Bar/Baz/Dib.php` on a UNIX-style file
    system.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据PSR-0，类名直接映射到文件系统的子路径。给定一个完全合格的类名，任何PHP 5.3命名空间分隔符都会转换为目录分隔符，并且名称中的下划线也会转换为目录分隔符。（命名空间部分中的下划线*不*会转换为目录分隔符。）结果会以基本目录位置为前缀，并以`.php`为后缀，创建一个文件路径，类文件可以在其中找到。例如，完全合格的类名`\Foo\Bar\Baz_Dib`将在UNIX风格的文件系统上的子路径`Foo/Bar/Baz/Dib.php`中找到。
- en: A Single Location for Classes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类的单一位置
- en: Before we implement a PSR-0 autoloader, we need to pick a directory location
    in the codebase to hold every class that will ever be used in the codebase. Some
    projects already have such a location; it may be called `includes`, `classes`,
    `src`, `lib` or something similar.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现PSR-0自动加载器之前，我们需要选择代码库中的一个目录位置，用于保存代码库中将来使用的所有类。一些项目已经有了这样的位置；它可能被称为`includes`、`classes`、`src`、`lib`或类似的名称。
- en: If a location like that already exists, examine it carefully. Does it have *only*
    class files in it, or is it a combination of class files and other kinds of files?
    If it has anything besides class files in it, or if no such location exists, create
    a new directory location and call it classes (or some other properly descriptive
    name).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经存在这样的位置，请仔细检查它。它是否*只*包含类文件，还是包含其他类型的文件？如果它除了类文件之外还有其他东西，或者没有这样的位置存在，那么创建一个新的目录位置，并将其命名为classes（或其他适当描述的名称）。
- en: This directory will be the central location for all classes used throughout
    the project. Later, we will begin moving classes from their scattered locations
    in the project to this central location.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录将是整个项目中使用的所有类的中央位置。稍后，我们将开始将类从项目中分散的位置移动到这个中央位置。
- en: Add Autoloader Code
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加自动加载器代码
- en: Once we have a central directory location for our class files, we need to set
    up an autoloader to look in that location for classes. We can create the autoloader
    as a static method, an instance method, an anonymous function, or a regular global
    function. (Which one we use is not as important as actually doing the autoloading.)
    Then we will register it with `spl_autoload_register()` early in our bootstrap
    or setup code, before any classes are called.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了一个中央目录位置用于存放我们的类文件，我们需要设置一个自动加载器来在该位置查找类。我们可以将自动加载器创建为静态方法、实例方法、匿名函数或常规全局函数。（我们使用哪种方法并不像实际进行自动加载那样重要。）然后我们将在我们的引导或设置代码中早期使用`spl_autoload_register()`进行注册，以便在调用任何类之前进行注册。
- en: As a Global Function
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为全局函数
- en: Perhaps the most straightforward way to implement our new autoloader code is
    as a global function. Below, we find the autoloader code to use; the function
    name is prefixed with `mlaphp_` to make sure it does not conflict with any existing
    function names.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 也许实现我们的新自动加载器代码最直接的方法是作为全局函数。下面，我们找到要使用的自动加载器代码；函数名以`mlaphp_`为前缀，以确保它不会与任何现有的函数名冲突。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that the `$dir` variable represents an absolute directory as the base
    path for our central class directory. As an alternative on PHP 5.3 and later,
    it is perfectly acceptable to use the `__DIR__` constant in that variable so the
    absolute path is no longer hard-coded, but is instead relative to the file where
    the function is located. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`$dir`变量表示中央类目录的基本路径的绝对目录。作为PHP 5.3及更高版本的替代方案，可以在该变量中使用`__DIR__`常量，以便绝对路径不再是硬编码的，而是相对于函数所在文件的路径。例如：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you are stuck on PHP 5.2 for some reason, the `__DIR__` constant is not available.
    You can replace `dirname(__DIR__)` with `dirname(dirname(__FILE__))` in that case.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因我们卡在PHP 5.2上，`__DIR__`常量是不可用的。在这种情况下，可以用`dirname(dirname(__FILE__))`替换`dirname(__DIR__)`。
- en: As a Closure
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为闭包
- en: 'If we are using PHP 5.3, we can create the autoloader code as a closure and
    register it with SPL in a single step:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用的是PHP 5.3，我们可以将自动加载器代码创建为一个闭包，并在一个步骤中将其注册到SPL中：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As a Static or Instance method
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为静态或实例方法
- en: This is my preferred way of setting up an autoloader. Instead of using a function,
    we create the autoloader code in a class as an instance method or a static method.
    I recommend instance methods over static ones, but your situation will dictate
    which is more appropriate.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我设置自动加载器的首选方式。我们不使用函数，而是将自动加载器代码创建为一个类的实例方法或静态方法。我推荐实例方法而不是静态方法，但您的情况将决定哪种更合适。
- en: First, we create our autoloader class file in our central class directory location.
    If we are using PHP 5.3 or later, we should use a proper namespace; otherwise,
    we use underscores as pseudo-namespace separators.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在我们的中央类目录位置创建我们的自动加载器类文件。如果我们使用的是PHP 5.3或更高版本，我们应该使用一个合适的命名空间；否则，我们使用下划线作为伪命名空间分隔符。
- en: 'The following is a PHP 5.3 example. Under versions earlier than PHP 5.3, we
    would omit the `namespace` declaration and name the class `Mlaphp_Autoloader`.
    Either way, the file should be in the sub-path `Mlaphp/Autoloader.php`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个PHP 5.3的示例。在PHP 5.3之前的版本中，我们将省略`namespace`声明，并将类命名为`Mlaphp_Autoloader`。无论哪种方式，文件都应该在子路径`Mlaphp/Autoloader.php`中：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, in the setup or bootstrap file, `require_once` the class file, instantiate
    it if needed, and register the method with SPL. Note that we use the array-callable
    format here, where the first array element is either a class name or an object
    instance, and the second element is the method to call:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在设置或引导文件中，`require_once`类文件，根据需要实例化它，并使用SPL注册方法。请注意，我们在这里使用数组可调用格式，第一个数组元素是类名或对象实例，第二个元素是要调用的方法：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Please pick either an instance method or a static method, not both. The one
    is not a fallback for the other.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请选择实例方法或静态方法，而不是两者兼有。一个不是另一个的备用。
- en: Using The __autoload() Function
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`__autoload()`函数
- en: 'If we are stuck on PHP 5.0 for some reason, we can use the `__autoload()` function
    in place of the SPL autoloader registry. There are drawbacks to doing things this
    way, but under PHP 5.0 it is our only alternative. We do not need to register
    it with SPL (in fact, we cannot, since SPL was not introduced until PHP 5.1).
    We will not be able to mix-and-match other autoloaders in this implementation;
    only one `__autoload()` function is allowed. If an `__autoload()` function is
    already defined, we will need to merge this code with any code already existing
    in the function:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因我们卡在PHP 5.0上，我们可以使用`__autoload()`函数来代替SPL自动加载器注册。这样做有一些缺点，但在PHP 5.0下这是我们唯一的选择。我们不需要在SPL中注册它（事实上，我们不能这样做，因为SPL直到PHP
    5.1才被引入）。在这种实现中，我们将无法混合和匹配其他自动加载器；只允许一个`__autoload()`函数。如果`__autoload()`函数已经被定义，我们需要将这段代码与函数中已经存在的任何代码合并：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I strongly recommend against using this kind of implementation in PHP 5.1 and
    later.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议不要在PHP 5.1及更高版本中使用这种实现。
- en: Autoloader Priority
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动加载器优先级
- en: Regardless of how we implement our autoloader code, we need it to be available
    *before* any classes get called in the codebase. It cannot hurt to register the
    autoloader as one of the very first bits of logic in our codebase, probably in
    a setup or bootstrap script.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们如何实现我们的自动加载器代码，我们都需要在代码库中调用任何类之前使其可用。在我们的代码库中注册自动加载器作为最初的逻辑之一可能不会有害，可能在设置或引导脚本中。
- en: Common Questions
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: What If I Already Have An Autoloader?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我已经有一个自动加载器呢？
- en: 'Some legacy applications may already have a custom autoloader in place. If
    this is our situation, we have some options:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一些传统应用程序可能已经有一个自定义的自动加载器。如果是这种情况，我们有一些选择：
- en: '**Use the existing autoloader as-is**: This is our best option if there is
    already a central directory location for the application class files.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用现有的自动加载器**：如果已经有一个应用程序类文件的中央目录位置，这是我们最好的选择。'
- en: '**Modify the existing autoloader to add PSR-0 behavior**: This is a good option
    if the autoloader does not conform to PSR-0 recommendations.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修改现有的自动加载器以添加PSR-0行为**：如果自动加载器不符合PSR-0建议，这是一个很好的选择。'
- en: Register the PSR-0 autoloader described in this chapter with SPL in addition
    to the existing autoloader. This is another good option when the existing autoloader
    does not conform to PSR-0 recommendations.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SPL中注册本章描述的PSR-0自动加载器，以及现有的自动加载器。当现有的自动加载器不符合PSR-0建议时，这是另一个很好的选择。
- en: 'Other legacy codebases may have a third-party autoloader in place, such as
    Composer. If Composer is present, we can obtain its autoloader instance and add
    our central class directory location for autoloading like so:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其他传统代码库可能已经有第三方自动加载器，比如Composer。如果Composer存在，我们可以获取它的自动加载器实例，并像这样添加我们的中央类目录位置进行自动加载：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With that, we can co-opt Composer for our own purposes, making our own autoloader
    code unnecessary.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以利用Composer来实现我们自己的目的，从而使我们自己的自动加载器代码变得不必要。
- en: What are the Performance Implications Of Autoloading?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动加载的性能影响是什么？
- en: There is some reason to think that using autoloaders may cause a slight performance
    drag compared to using `include`, but the evidence is mixed and situation-dependent.
    If it is true that autoloading is comparatively slower, how big of a performance
    hit can be expected?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些理由认为使用自动加载器可能会导致轻微的性能下降，与使用`include`相比，但证据参差不齐且情况依赖。如果自动加载相对较慢，那么可以预期会有多大的性能损失？
- en: I assert that, when modernizing a legacy application, it is probably not an
    important consideration. Any performance drag incurred from autoloading is minuscule
    compared to the other possible performance issues in your legacy application,
    such as the database interactions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我断言，在现代化遗留应用程序时，这可能并不是一个重要的考虑因素。与遗留应用程序中可能存在的其他性能问题相比，自动加载所带来的性能损失微不足道，比如数据库交互。
- en: In most legacy applications, or even in most modern ones, attempting to optimize
    performance on autoloading is a case of attempting to optimize on the wrong resource.
    There are other resources that are likely to be worse offenders, just ones that
    we don't see or don't think of.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数遗留应用程序中，甚至在大多数现代应用程序中，试图优化自动加载的性能是试图优化错误的资源。可能存在其他更严重的资源，只是我们看不到或没有考虑到。
- en: If autoloading is the single worst performance bottleneck in your legacy application,
    then you are in fantastic shape. (In that case, you should return this book for
    a refund, and then tell me if you are hiring, because I want to work for you.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果自动加载是你的遗留应用中性能最差的瓶颈，那么你的状况非常好。（在这种情况下，你应该退还这本书，然后告诉我你是否在招聘，因为我想为你工作。）
- en: How Do Class Names Map To File Names?
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类名如何映射到文件名？
- en: 'The PSR-0 rules can be confusing. Here are some class-to-file mapping examples
    to illustrate its expectations:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: PSR-0规则可能令人困惑。以下是一些类到文件映射的示例，以说明其期望：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can see that there is some unexpected behavior in the last three examples.
    This is born of the transitional nature of PSR-0: `Foo\Bar\Baz, Foo\Bar_Baz`,
    and `Foo_Bar_Baz` all map to the same file. Why is this?'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到最后三个示例中存在一些意外行为。这是由于PSR-0的过渡性质造成的：`Foo\Bar\Baz, Foo\Bar_Baz`和`Foo_Bar_Baz`都映射到同一个文件。为什么会这样？
- en: Recall that pre-PHP-5.3 codebases did not have namespaces, and so used underscores
    as a pseudo-namespace separator. PHP 5.3 introduced a real namespace separator.
    The PSR-0 standard had to accommodate both cases simultaneously, so it honors
    underscores in the relative class name (i.e., the final part of the fully-qualified
    name) as directory separators, but underscores in the namespace part are left
    alone.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，PHP 5.3之前的代码库没有命名空间，因此使用下划线作为伪命名空间分隔符。PHP 5.3引入了真正的命名空间分隔符。PSR-0标准必须同时适应这两种情况，因此它将相对类名（即完全合格名称的最后部分）中的下划线视为目录分隔符，但命名空间部分中的下划线则保持不变。
- en: The lesson here is that if you are on PHP 5.3, you should never use underscores
    in your relative class names (although underscores in the namespace are fine).
    If you are on a version before PHP 5.3, you have no choice but to use only underscores,
    as there is only the class name and no actual namespace portion; interpret underscores
    as namespace separators in that case.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的教训是，如果你使用的是PHP 5.3，你不应该在相对类名中使用下划线（尽管在命名空间中使用下划线是可以的）。如果你使用的是PHP 5.3之前的版本，你别无选择，只能使用下划线，因为只有类名，没有实际的命名空间部分；在这种情况下，将下划线解释为命名空间分隔符。
- en: Review and next steps
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: At this point we have not modified our legacy application very much. We have
    added and registered some autoloader code, but it is not actually being called
    yet.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们并没有对我们的遗留应用进行太多修改。我们添加并注册了一些自动加载器代码，但实际上还没有被调用。
- en: No matter. Having an autoloader is critical to the next step in modernizing
    our legacy application. Using an autoloader will allow us to start removing `include`
    statements that only load classes and functions. The remaining `include` statements
    will be logical-flow includes, showing us which parts of the system are logic
    and which are definition-only. This is the beginning of our transition from an
    include-oriented architecture toward a class-oriented architecture.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何。拥有一个自动加载器对于我们现代化遗留应用的下一步至关重要。使用自动加载器将允许我们开始移除仅加载类和函数的`include`语句。剩下的`include`语句将是逻辑流程包含，向我们展示系统的哪些部分是逻辑的，哪些是仅定义的。这是我们从基于include的架构向基于类的架构过渡的开始。
