["```php\n    {\n        \"autoload\": {\n            \"psr-4\": {\n                \"App\\\\\" : \"app/\",\n                \"System\\\\\" : \"system/\"\n            }\n        },\n        \"require\": {\n            \"filp/whoops\": \"^2.1\"\n        }\n    }\n    ```", "```php\n    Options \u2013Indexes\n    ```", "```php\n    <IfModule mod_rewrite.c>\n    //more code\n    </IfModule>\n    ```", "```php\n    RewriteEngine On\n    RewriteBase /\n    ```", "```php\n    # Disable directory snooping\n    Options -Indexes\n\n    <IfModule mod_rewrite.c>\n\n        # Uncomment the rule below to force HTTPS (SSL)\n    \u2026\u2026\u2026..\n        RewriteRule ^(.*)$ index.php?$1 [QSA,L]\n    </IfModule>\n    ```", "```php\n    if(file_exists('../vendor/autoload.php')){\n        require '../vendor/autoload.php';\n    } else {\n        echo \"<h1>Please install via composer.json</h1>\";\n        echo \"<p>Install Composer instructions: <a href='https://getcomposer.org/doc/00-intro.md#globally'>https://getcomposer.org/doc/00-intro.md#globally</a></p>\";\n        echo \"<p>Once composer is installed navigate to the working directory in your terminal/command prompt and enter 'composer install'</p>\";\n        exit;\n    }\n    ```", "```php\n    define('ENVIRONMENT', 'development');\n    ```", "```php\n    if (defined('ENVIRONMENT')){\n        switch (ENVIRONMENT){\n            case 'development':\n                error_reporting(E_ALL);\n            break;\n            case 'production':\n                error_reporting(0);\n            break;\n            default:\n                exit('The application environment is not set correctly.');\n        }\n    }\n    ```", "```php\n    <?php\n    if(file_exists('../vendor/autoload.php')){\n        require '../vendor/autoload.php';\n    } else {\n    \u2026\u2026\n                error_reporting(0);\n            break;\n    default:\n                exit('The application environment is not set correctly.');\n        }\n\n    }\n    ```", "```php\n    php \u2013S localhost:8000 \u2013t Webroot\n    ```", "```php\n    PHP 7.1.4 Development Server started at Wed Nov 29 20:37:27 2017\n    Listening on http://localhost:8000\n    Document root is /Users/davidcarr/Dropbox /projects/localsites/framework/webroot\n    Press Ctrl-C to quit.\n    ```", "```php\n    composer install\n\n    ```", "```php\n    Loading composer repositories with package information\n    Updating dependencies (including require-dev)\n    Package operations: 2 installs, 0 updates, 0 removals\n      - Installing psr/log (1.0.2) Loading from cache\n      - Installing filp/whoops (2.1.14) Downloading: 100%\n    filp/whoops suggests installing symfony/var-dumper (Pretty print complex values better with var-dumper available)\n    filp/whoops suggests installing whoops/soap (Formats errors as SOAP responses)\n    Writing lock file\n    Generating autoload files\n    ```", "```php\n    //initiate config\n    $config = App\\Config::get();\n\n    new System\\Route($config);\n    ```", "```php\n    <?php namespace App;\n\n    class Config {\n    \u2026\u2026\n        public static function get()\n                'db_name'     => 'mini',\n                'db_username' => 'root',\n                'db_password' => '',\n            ];\n        }\n    }\n    ```", "```php\n    <?php\n    namespace System;\n\n    /*\n     * View - load template pages\n     *\n     */\n    class View {\n    \u2026\u2026.\n            } else {\n                die(\"View: $path not found!\");\n            }\n\n        }\n    }\n    ```", "```php\n    use System\\View;\n    ```", "```php\n    <?php namespace System;\n\n    use System\\View;\n    class Route\n    {\n        public function __construct($config)\n        {\n    ```", "```php\n    $url        = explode('/', trim($_SERVER['REQUEST_URI'], '/'));\n    $controller = !empty($url[0]) ? $url[0] : $config['default_controller'];\n    $method     = !empty($url[1]) ? $url[1] : $config['default_method'];\n    $args       = !empty($url[2]) ? array_slice($url, 2) : array();\n    $class      = $config['namespace'].$controller;0\n    ```", "```php\n    //check the class exists\n    if (! class_exists($class)) {\n        return $this->not_found();\n    }\n    ```", "```php\n    //check the method exists\n    if (! method_exists($class, $method)) {\n        return $this->not_found();\n    }\n    ```", "```php\n    //create an instance of the controller\n    $classInstance = new $class;\n    ```", "```php\n    //call the controller and its method and pass in any arguments\n    call_user_func_array(array($classInstance, $method), $args);\n    ```", "```php\n    //class or method not found return a 404 view\n    public function not_found()\n    {\n        $view = new View();\n        return $view->render('404');\n    }\n    ```", "```php\n    <?php namespace System;\n\n    use System\\View;\n\n    class Route\n    \u2026\u2026.\n        {\n            $view = new View();\n            return $view->render('404');\n        }\n     }\n    }\n    ```", "```php\n    View: 404 not found!\n    ```", "```php\n    <?php namespace System;\n\n    use System\\View;\n\n    class BaseController\n    {\n\n      public $view;\n    \u2026\u2026\u2026\n        $url = isset($_SERVER['REQUEST_URI']) ? rtrim($_SERVER['REQUEST_URI'], '/') : NULL;\n        $url = filter_var($url, FILTER_SANITIZE_URL);\n        return $this->url = $url;\n      }\n\n    }\n    ```", "```php\n    //set default controller\n    'default_controller' => 'Home',\n\n    //set default method\n    'default_method' => 'index',\n    ```", "```php\n    <?php\n    namespace App\\Controllers;\n\n    use System\\BaseController;\n\n    class Home extends BaseController\n    {\n      public function index()\n      {\n        return $this->view->render('default');\n      }\n    }\n    ```", "```php\n    Hello from default view.\n    <?php ohno!\n    ```", "```php\n    <?php\n    namespace App\\Helpers;\n\n    use PDO;\n    ```", "```php\n    class Database extends PDO\n    {\n    protected static $instances = array();\n    ```", "```php\n    GET method\n\n    public static function get($config)\n    {\n      // Group information\n    \u2026\u2026.\n      // Setting Database into $instances to avoid duplication\n      self::$instances[$id] = $instance;\n\n      //return the pdo instance\n      return $instance;\n\n    }\n    ```", "```php\n    public function raw($sql)\n    {\n      return $this->query($sql);\n    }\n    ```", "```php\n    public function select($sql, $array = array(), $fetchMode = PDO::FETCH_OBJ, $class = '')\n    {\n    \u2026\u2026\n        return $stmt->fetchAll($fetchMode);\n      }\n    }\n    ```", "```php\n    public function insert($table, $data)\n    {\n      ksort($data);\n      $fieldNames = implode(',', array_keys($data));\n      $fieldValues = ':'.implode(', :', array_keys($data));\n\n      $stmt = $this->prepare(\"INSERT INTO $table ($fieldNames) VALUES ($fieldValues)\");\n\n      foreach ($data as $key => $value) {\n        $stmt->bindValue(\":$key\", $value);\n      }\n      $stmt->execute();\n     return $this->lastInsertId();\n    }\n    ```", "```php\n    public function update($table, $data, $where)\n\n    {\n\n      ksort($data);\n\n      $fieldDetails = null;\n    \u2026\u2026.\n      }\n      $stmt->execute();\n      return $stmt->rowCount();\n    }\n    ```", "```php\n    public function delete($table, $where, $limit = 1)\n    {\n      ksort($where);\n\n    \u2026\u2026..\n      $stmt->execute();\n      return $stmt->rowCount();\n    }\n    ```", "```php\n    public function truncate($table)\n    {\n      return $this->exec(\"TRUNCATE TABLE $table\");\n    }\n    ```", "```php\n    <?php namespace App\\Helpers;\n\n    use PDO;\n    class Database extends PDO\n    {\n      /**\n       * @var array Array of saved databases for reusing\n       */\n       */\n    \u2026\u2026\n      {\n        return $this->exec(\"TRUNCATE TABLE $table\");\n      }\n    }\n    ```", "```php\n    <?php namespace System;\n    /*\n     * model - the base model\n     *\n    \u2026\u2026..\n    //connect to PDO here.\n    $this->db = Database::get($config);\n    }\n    }\n    ```", "```php\n    use mini\n    ```", "```php\n    create table contacts ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n    `name` varchar(255) DEFAULT NULL,\n    PRIMARY KEY (`id`)\n    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n    ```", "```php\n    show tables;\n\n    +-----------------+\n    | Tables_in_mini |\n    +-----------------+\n    | contacts    |\n    +-----------------+\n    1 row in set (0.00 sec)\n\n    Insert data into the table\n    insert into contacts (name) values('Dave');\n    insert into contacts (name) values('Markus');\n\n    this will insert the records to see the contents of the table:\n    select * from contacts;\n\n    +----+--------+\n    | id | name  |\n    +----+--------+\n    |  1 | Dave  |\n    |  2 | Markus |\n    +----+--------+\n    2 rows in set (0.00 sec)\n    ```", "```php\n    <?php\n    namespace App\\Models;\n    use System\\BaseModel;\n\n    class Contact extends BaseModel\n    {\n      public function getContacts()\n      {\n        return $this->db->select('* FROM contacts);\n      }\n    }\n    ```", "```php\n    <?php\n    namespace App\\Controllers;\n\n    use System\\BaseController;\n\n    class Contacts extends BaseController\n    {\n      public function index()\n      {\n\n      }\n    }\n    ```", "```php\n    public function index()\n    {\n      return $this->view->render('contacts/index');\n    }\n    ```", "```php\n    use App\\Models\\Contact;\n\n    ```", "```php\n    $contacts = new Contact();\n    $records = $contacts->getContacts();\n    ```", "```php\n    return $this->view->render('contacts/index', compact('records'));\n    ```", "```php\n    <?php\n    if (isset($records)) {\n      foreach ($records as $row) {\n        echo $row->name.'<br>';\n      }\n    }\n    ```"]