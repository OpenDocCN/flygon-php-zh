["```php\ninterface Stack { \n\n    public function push(string $item); \n\n    public function pop(); \n\n    public function top(); \n\n    public function isEmpty(); \n\n}\n\n```", "```php\nclass Books implements Stack { \n\n    private $limit; \n\n    private $stack; \n\n    public function __construct(int $limit = 20) { \n\n      $this->limit = $limit; \n\n      $this->stack = []; \n\n    } \n\n    public function pop(): string { \n\n      if ($this->isEmpty()) { \n\n          throw new UnderflowException('Stack is empty'); \n\n      } else { \n\n          return array_pop($this->stack); \n\n      } \n\n    } \n\n    public function push(string $newItem) { \n\n      if (count($this->stack) < $this->limit) { \n\n          array_push($this->stack, $newItem); \n\n      } else { \n\n          throw new OverflowException('Stack is full'); \n\n      } \n\n    } \n\n    public function top(): string { \n\n      return end($this->stack); \n\n    } \n\n    public function isEmpty(): bool { \n\n      return empty($this->stack); \n\n    } \n\n}\n\n```", "```php\npublic function pop():  string { \n\n  if ($this->isEmpty()) {\n\n      throw new UnderflowException('Stack is empty');\n\n  } else {\n\n      return array_pop($this->stack);\n\n  }\n\n }\n\n```", "```php\ntry { \n\n    $programmingBooks = new Books(10); \n\n    $programmingBooks->push(\"Introduction to PHP7\"); \n\n    $programmingBooks->push(\"Mastering JavaScript\"); \n\n    $programmingBooks->push(\"MySQL Workbench tutorial\"); \n\n    echo $programmingBooks->pop().\"\\n\"; \n\n    echo $programmingBooks->top().\"\\n\"; \n\n} catch (Exception $e) { \n\n    echo $e->getMessage(); \n\n}\n\n```", "```php\nMySQL Workbench tutorial\n\nMastering JavaScript\n\n```", "```php\nclass BookList implements Stack { \n\n    private $stack; \n\n    public function __construct() { \n\n      $this->stack = new LinkedList(); \n\n    }\n\n    public function pop(): string { \n\n      if ($this->isEmpty()) { \n\n          throw new UnderflowException('Stack is empty'); \n\n      } else { \n\n          $lastItem = $this->top(); \n\n          $this->stack->deleteLast(); \n\n          return $lastItem; \n\n      } \n\n    } \n\n    public function push(string $newItem) { \n\n      $this->stack->insert($newItem); \n\n    } \n\npublic function top(): string { \n\n  return $this->stack->getNthNode($this->stack->getSize())->data; \n\n} \n\n    public function isEmpty(): bool { \n\n      return $this->stack->getSize() == 0; \n\n    } \n\n}\n\n```", "```php\ntry { \n\n    $programmingBooks = new BookList(); \n\n    $programmingBooks->push(\"Introduction to PHP7\"); \n\n    $programmingBooks->push(\"Mastering JavaScript\"); \n\n    $programmingBooks->push(\"MySQL Workbench tutorial\"); \n\n    echo $programmingBooks->pop().\"\\n\"; \n\n    echo $programmingBooks->pop().\"\\n\"; \n\n    echo $programmingBooks->top().\"\\n\"; \n\n} catch (Exception $e) { \n\n    echo $e->getMessage(); \n\n}\n\n```", "```php\nMySQL Workbench tutorial\n\nMastering JavaScript\n\nIntroduction to PHP7\n\n```", "```php\n$books = new SplStack(); \n\n$books->push(\"Introduction to PHP7\"); \n\n$books->push(\"Mastering JavaScript\"); \n\n$books->push(\"MySQL Workbench tutorial\"); \n\necho $books->pop() . \"\\n\"; \n\necho $books->top() . \"\\n\"; \n\n```", "```php\nvalid = true \n\ns = empty stack \n\nfor (each character of the string) { \n\n   if(character = ( or { or [ ) \n\n       s.push(character) \n\n  else if (character = ) or } or ] ) { \n\n   if(s is empty) \n\nvalid = false \n\n     last = s.pop() \n\n    if(last is not opening parentheses of character)  \n\n         valid = false \n\n  } \n\n} \n\nif(s is not empty) \n\nvalid = false\n\n```", "```php\nfunction expressionChecker(string $expression): bool { \n\n    $valid = TRUE; \n\n    $stack = new SplStack(); \n\n    for ($i = 0; $i < strlen($expression); $i++) { \n\n    $char = substr($expression, $i, 1); \n\n    switch ($char) { \n\n      case '(': \n\n      case '{': \n\n      case '[': \n\n      $stack->push($char); \n\n      break; \n\n      case ')': \n\n      case '}': \n\n      case ']': \n\n      if ($stack->isEmpty()) { \n\n          $valid = FALSE; \n\n      } else { \n\n        $last = $stack->pop(); \n\n        if (($char == \")\" && $last != \"(\")  \n\n          || ($char == \"}\" && $last != \"{\")  \n\n          || ($char == \"]\" && $last != \"[\")) { \n\n      $valid = FALSE; \n\n        } \n\n    } \n\n    break; \n\n  } \n\n  if (!$valid) \n\n      break; \n\n    } \n\n    if (!$stack->isEmpty()) { \n\n    $valid = FALSE; \n\n    } \n\n    return $valid; \n\n}\n\n```", "```php\n$expressions = []; \n\n$expressions[] = \"8 * (9 -2) + { (4 * 5) / ( 2 * 2) }\"; \n\n$expressions[] = \"5 * 8 * 9 / ( 3 * 2 ) )\"; \n\n$expressions[] = \"[{ (2 * 7) + ( 15 - 3) ]\"; \n\nforeach ($expressions as $expression) { \n\n    $valid = expressionChecker($expression); \n\n    if ($valid) { \n\n    echo \"Expression is valid \\n\"; \n\n    } else { \n\n    echo \"Expression is not valid \\n\"; \n\n    } \n\n} \n\n```", "```php\nExpression is valid\n\nExpression is not valid\n\nExpression is not valid\n\n```", "```php\ninterface Queue { \n\n    public function enqueue(string $item); \n\n    public function dequeue(); \n\n    public function peek(); \n\n    public function isEmpty(); \n\n}\n\n```", "```php\nclass AgentQueue implements Queue {\n\n    private $limit; \n\n    private $queue; \n\n    public function __construct(int $limit = 20) { \n\n      $this->limit = $limit; \n\n      $this->queue = []; \n\n    } \n\n    public function dequeue(): string { \n\n      if ($this->isEmpty()) { \n\n          throw new UnderflowException('Queue is empty'); \n\n      } else { \n\n          return array_shift($this->queue); \n\n      } \n\n    } \n\n    public function enqueue(string $newItem) { \n\n      if (count($this->queue) < $this->limit) { \n\n          array_push($this->queue, $newItem); \n\n      } else { \n\n          throw new OverflowException('Queue is full'); \n\n      } \n\n    } \n\n    public function peek(): string { \n\n      return current($this->queue); \n\n    } \n\n    public function isEmpty(): bool { \n\n      return empty($this->queue); \n\n    } \n\n}\n\n```", "```php\ntry { \n\n    $agents = new AgentQueue(10); \n\n    $agents->enqueue(\"Fred\"); \n\n    $agents->enqueue(\"John\"); \n\n    $agents->enqueue(\"Keith\"); \n\n    $agents->enqueue(\"Adiyan\"); \n\n    $agents->enqueue(\"Mikhael\"); \n\n    echo $agents->dequeue().\"\\n\"; \n\n    echo $agents->dequeue().\"\\n\"; \n\n    echo $agents->peek().\"\\n\"; \n\n} catch (Exception $e) { \n\n    echo $e->getMessage(); \n\n} \n\n```", "```php\nFred\n\nJohn\n\nKeith\n\n```", "```php\nclass AgentQueue implements Queue { \n\n    private $limit; \n\n    private $queue; \n\n    public function __construct(int $limit = 20) { \n\n      $this->limit = $limit; \n\n      $this->queue = new LinkedList(); \n\n    } \n\n    public function dequeue(): string { \n\n      if ($this->isEmpty()) { \n\n          throw new UnderflowException('Queue is empty'); \n\n      } else { \n\n          $lastItem = $this->peek(); \n\n          $this->queue->deleteFirst(); \n\n          return $lastItem; \n\n      } \n\n    } \n\n    public function enqueue(string $newItem) { \n\n      if ($this->queue->getSize() < $this->limit) { \n\n          $this->queue->insert($newItem); \n\n      } else { \n\n          throw new OverflowException('Queue is full'); \n\n      } \n\n    } \n\n    public function peek(): string { \n\n      return $this->queue->getNthNode(1)->data; \n\n    } \n\n    public function isEmpty(): bool { \n\n      return $this->queue->getSize() == 0; \n\n    } \n\n}\n\n```", "```php\n$agents = new SplQueue(); \n\n$agents->enqueue(\"Fred\"); \n\n$agents->enqueue(\"John\"); \n\n$agents->enqueue(\"Keith\"); \n\n$agents->enqueue(\"Adiyan\"); \n\n$agents->enqueue(\"Mikhael\"); \n\necho $agents->dequeue().\"\\n\"; \n\necho $agents->dequeue().\"\\n\"; \n\necho $agents->bottom().\"\\n\";\n\n```", "```php\nclass ListNode {\n\n    public $data = NULL; \n\n    public $next = NULL;\n\n    public $priority = NULL;\n\n    public function __construct(string $data = NULL, int $priority = \n\n      NULL) { \n\n      $this->data = $data;\n\n      $this->priority = $priority;\n\n    }\n\n}\n\n```", "```php\npublic function insert(string $data = NULL, int $priority = NULL) { \n\n  $newNode = new ListNode($data, $priority); \n\n  $this->_totalNode++; \n\n  if ($this->_firstNode === NULL) { \n\n      $this->_firstNode = &$newNode; \n\n  } else { \n\n      $previous = $this->_firstNode; \n\n      $currentNode = $this->_firstNode; \n\n      while ($currentNode !== NULL) { \n\n      if ($currentNode->priority < $priority) { \n\n         if ($currentNode == $this->_firstNode) { \n\n         $previous = $this->_firstNode; \n\n         $this->_firstNode = $newNode; \n\n         $newNode->next = $previous; \n\n         return; \n\n         } \n\n         $newNode->next = $currentNode; \n\n         $previous->next = $newNode; \n\n         return; \n\n    } \n\n    $previous = $currentNode; \n\n    $currentNode = $currentNode->next; \n\n    } \n\n  } \n\n  return TRUE; \n\n}\n\n```", "```php\ntry { \n\n    $agents = new AgentQueue(10); \n\n    $agents->enqueue(\"Fred\", 1); \n\n    $agents->enqueue(\"John\", 2); \n\n    $agents->enqueue(\"Keith\", 3); \n\n    $agents->enqueue(\"Adiyan\", 4); \n\n    $agents->enqueue(\"Mikhael\", 2); \n\n    $agents->display(); \n\n    echo $agents->dequeue().\"\\n\"; \n\n    echo $agents->dequeue().\"\\n\"; \n\n} catch (Exception $e) { \n\n    echo $e->getMessage(); \n\n}\n\n```", "```php\nAdiyan\n\nKeith\n\nJohn\n\nMikhael\n\nFred\n\n```", "```php\nclass MyPQ extends SplPriorityQueue { \n\n    public function compare($priority1, $priority2) { \n\n    return $priority1 <=> $priority2; \n\n    }\n\n}\n\n$agents = new MyPQ();\n\n$agents->insert(\"Fred\", 1); \n\n$agents->insert(\"John\", 2);\n\n$agents->insert(\"Keith\", 3);\n\n$agents->insert(\"Adiyan\", 4);\n\n$agents->insert(\"Mikhael\", 2);\n\n//mode of extraction\n\n$agents->setExtractFlags(MyPQ::EXTR_BOTH); \n\n//Go to TOP\n\n$agents->top();\n\nwhile ($agents->valid()) {\n\n    $current = $agents->current();\n\n    echo $current['data'] . \"\\n\";\n\n    $agents->next();\n\n}\n\n```", "```php\nclass CircularQueue implements Queue { \n\n    private $queue; \n\n    private $limit; \n\n    private $front = 0; \n\n    private $rear = 0; \n\n    public function __construct(int $limit = 5) { \n\n      $this->limit = $limit; \n\n      $this->queue = []; \n\n    } \n\n    public function size() { \n\n      if ($this->rear > $this->front) \n\n          return $this->rear - $this->front; \n\n      return $this->limit - $this->front + $this->rear; \n\n    } \n\n    public function isEmpty() { \n\n      return $this->rear == $this->front; \n\n    } \n\n    public function isFull() { \n\n      $diff = $this->rear - $this->front; \n\n      if ($diff == -1 || $diff == ($this->limit - 1)) \n\n          return true; \n\n      return false; \n\n    } \n\n    public function enqueue(string $item) { \n\n      if ($this->isFull()) { \n\n          throw new OverflowException(\"Queue is Full.\"); \n\n      } else { \n\n          $this->queue[$this->rear] = $item; \n\n          $this->rear = ($this->rear + 1) % $this->limit; \n\n      } \n\n    } \n\n    public function dequeue() { \n\n      $item = \"\"; \n\n      if ($this->isEmpty()) { \n\n          throw new UnderflowException(\"Queue is empty\"); \n\n      } else { \n\n          $item = $this->queue[$this->front]; \n\n          $this->queue[$this->front] = NULL; \n\n          $this->front = ($this->front + 1) % $this->limit; \n\n      } \n\n      return $item; \n\n    } \n\n    public function peek() { \n\n      return $this->queue[$this->front]; \n\n    }\n\n}\n\n```", "```php\nclass DeQueue { \n\n    private $limit; \n\n    private $queue; \n\n    public function __construct(int $limit = 20) { \n\n      $this->limit = $limit; \n\n      $this->queue = new LinkedList(); \n\n    } \n\n    public function dequeueFromFront(): string { \n\n      if ($this->isEmpty()) { \n\n          throw new UnderflowException('Queue is empty'); \n\n      } else { \n\n          $lastItem = $this->peekFront(); \n\n          $this->queue->deleteFirst(); \n\n          return $lastItem; \n\n      } \n\n    } \n\n    public function dequeueFromBack(): string { \n\n      if ($this->isEmpty()) { \n\n          throw new UnderflowException('Queue is empty'); \n\n      } else { \n\n          $lastItem = $this->peekBack(); \n\n          $this->queue->deleteLast(); \n\n          return $lastItem; \n\n      } \n\n    } \n\n    public function enqueueAtBack(string $newItem) { \n\n      if ($this->queue->getSize() < $this->limit) { \n\n          $this->queue->insert($newItem); \n\n      } else { \n\n          throw new OverflowException('Queue is full'); \n\n      } \n\n    } \n\n    public function enqueueAtFront(string $newItem) { \n\n      if ($this->queue->getSize() < $this->limit) { \n\n          $this->queue->insertAtFirst($newItem); \n\n      } else { \n\n          throw new OverflowException('Queue is full'); \n\n      } \n\n    } \n\n    public function peekFront(): string { \n\n      return $this->queue->getNthNode(1)->data; \n\n    } \n\n    public function peekBack(): string { \n\n      return $this->queue->getNthNode($this->queue->getSize())->data; \n\n    } \n\n    public function isEmpty(): bool { \n\n      return $this->queue->getSize() == 0; \n\n    } \n\n}\n\n```", "```php\ntry { \n\n    $agents = new DeQueue(10); \n\n    $agents->enqueueAtFront(\"Fred\"); \n\n    $agents->enqueueAtFront(\"John\"); \n\n    $agents->enqueueAtBack(\"Keith\"); \n\n    $agents->enqueueAtBack(\"Adiyan\"); \n\n    $agents->enqueueAtFront(\"Mikhael\"); \n\n    echo $agents->dequeueFromBack() . \"\\n\"; \n\n    echo $agents->dequeueFromFront() . \"\\n\"; \n\n    echo $agents->peekFront() . \"\\n\"; \n\n} catch (Exception $e) { \n\n    echo $e->getMessage(); \n\n}\n\n```", "```php\nAdiyan\n\nMikhael\n\nJohn\n\n```"]