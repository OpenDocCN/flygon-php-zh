- en: Chapter 10. Building the Shipment Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。构建运输模块
- en: The shipment module, alongside the `payment` module, provides a basis for further
    sales functionality in our web shop. It will enable us to choose the shipment
    method when we reach the checkout process of the upcoming `sales` module. Similar
    to `payment`, `shipment` can be sort of static and dynamic. Whereas static might
    imply a fixed pricing value, or even a calculated one by some simple conditions,
    dynamic usually implies a connection to external API services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 运输模块，以及“支付”模块，为我们的网店提供了进一步的销售功能的基础。当我们到达即将到来的“销售”模块的结账过程时，它将使我们能够选择运输方式。与“支付”类似，“shipment”可能是静态的和动态的。静态可能意味着固定的定价值，甚至是通过一些简单条件计算出来的值，动态通常意味着与外部API服务的连接。
- en: Throughout this chapter, we will touch base with both types and see how we can
    set up a basic structure for implementing the `shipment` module.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将接触到两种类型，并看看如何为实施“shipment”模块设置基本结构。
- en: 'In this chapter, we will be covering the following topics of the `shipment`
    module:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖“shipment”模块的以下主题：
- en: Requirements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求
- en: Dependencies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖关系
- en: Implementation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施
- en: Unit testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Functional testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: Requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求
- en: 'Application requirements, defined under [Chapter 4](ch04.html "Chapter 4. Requirement
    Specification for a Modular Web Shop App"), *Requirement Specification for Modular
    Web Shop App*, do not give us any specifics as to what type of shipment we need
    to implement. Thus, for the purpose of this chapter, we will develop two shipment
    methods: dynamic rate shipment and flat rate shipment. Dynamic rate shipment is
    used as a way of connecting the shipment method to a real shipment processor,
    such as UPS, FedEx, and so on. It will not, however, actually connect to any of
    the external APIs.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用要求，在[第4章](ch04.html "第4章。模块化网店应用的需求规范")中定义，*模块化网店应用的需求规范*，并没有给出我们需要实施的运输方式的具体信息。因此，在本章中，我们将开发两种运输方式：动态费率运输和固定费率运输。动态费率运输用作将运输方式连接到真实运输处理器（如UPS、FedEx等）的方式。但是，它实际上不会连接到任何外部API。
- en: 'Ideally, we want this done by an interface similar to the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望通过类似以下的接口来实现：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `getInfo` method can then be used to fetch the available delivery options
    for the given order information, while the process method would then process the
    selected delivery option. For example, we might have an API return "same day delivery
    ($9.99)",= and "standard delivery ($4.99)" as delivery options under the dynamic
    rate shipment method.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`getInfo`方法可以用于获取给定订单信息的可用交付选项，而处理方法将处理所选的交付选项。例如，我们可能会有一个API返回“当天送货（$9.99）”和“标准送货（$4.99）”作为动态费率运输方式的交付选项。
- en: Having such a shipment interface would then impose the requirement of having
    the `SalesBundle` module, which we still haven't developed. We will therefore
    proceed with our shipment methods, using a Symfony controller for handling the
    process method and a service for handling the `getInfo` method.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这样一个运输接口将要求拥有我们尚未开发的“SalesBundle”模块。因此，我们将继续使用Symfony控制器处理过程方法和处理`getInfo`方法的服务来处理我们的运输方式。
- en: Similarly, as we did with the payment method in the previous chapter, we will
    expose our `getInfo` method through tagged Symfony services. The tag we will be
    using for shipment methods is `shipment_method`. Later on, during the checkout
    process, the `SalesBundle` module will fetch all of the services tagged with `shipment_method`
    and use them internally for a list of available shipment methods to work with.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章中的支付方式一样，我们将通过标记的Symfony服务公开我们的`getInfo`方法。我们将用于运输方式的标记是`shipment_method`。在结账过程中，“SalesBundle”模块将获取所有标记为`shipment_method`的服务，并在内部使用它们来获取可用的运输方式列表。
- en: Dependencies
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖关系
- en: We are building the module the other way round. That is, we are building it
    before we know anything about the `SalesBundle` module, which is the only module
    that will be using it. With that in mind, the `shipment` module has no firm dependencies
    on any other module. However, it might have been more convenient to build the
    `SalesBundle` module first and then expose a few interfaces that the `shipment`
    module might use.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在以另一种方式构建模块。也就是说，我们在了解“SalesBundle”模块的任何信息之前就构建它，这是唯一会使用它的模块。考虑到这一点，“shipment”模块不依赖于任何其他模块。但是，构建“SalesBundle”模块然后公开一些“shipment”模块可能使用的接口可能更方便。
- en: Implementation
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施
- en: 'We will start off by creating a new module called `Foggyline\ShipmentBundle`.
    We will do so with the help of the console by running the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个名为`Foggyline\ShipmentBundle`的新模块。我们将通过运行以下命令来使用控制台完成：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The command triggers an interactive process, which asks us several questions
    along the way, shown as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令触发一个交互式过程，沿途询问我们几个问题，如下所示：
- en: '![Implementation](graphics/B05460_10_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![实施](graphics/B05460_10_01.jpg)'
- en: 'Once done, files `app/AppKernel.php` and `app/config/routing.yml` are modified
    automatically. The `registerBundles` method of an `AppKernel` class has been added
    to the following line under the `$bundles` array:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，文件`app/AppKernel.php`和`app/config/routing.yml`将自动修改。在`$bundles`数组下添加了`AppKernel`类的`registerBundles`方法：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `routing.yml` file has been updated with the following entry:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`routing.yml`文件已更新为以下条目：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to avoid colliding with the core application code, we need to change
    `prefix: /`into `prefix: /shipment/`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '为了避免与核心应用程序代码冲突，我们需要将`prefix: /`更改为`prefix: /shipment/`。'
- en: Creating a flat rate shipment service
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建固定费率运输服务
- en: The flat rate shipment service is going to provide the fixed shipment method
    that our `sales` module is going to use for its checkout process. Its role is
    to provide the shipment method labels, code, delivery options, and processing
    URLs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 定价运输服务将提供固定的运输方式，我们的“销售”模块将在结账过程中使用。它的作用是提供运输方式标签、代码、交付选项和处理URL。
- en: 'We will start by defining the following service under the services element
    of the `src/Foggyline/ShipmentBundle/Resources/config/services.xml` file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在`src/Foggyline/ShipmentBundle/Resources/config/services.xml`文件的`services`元素下定义以下服务：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This `service` accepts only one argument: the `router`. The `tagname` value
    is set to `shipment_method`, as our `SalesBundle` module will be looking for shipment
    methods based on the `shipment_method` tag assigned to the service.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`service`只接受一个参数：`router`。`tagname`的值设置为`shipment_method`，因为我们的`SalesBundle`模块将根据分配给服务的`shipment_method`标签来寻找运输方法。
- en: 'We will now create the actual `service` class, within the `src/Foggyline/ShipmentBundle/Service/FlatRateShipment.php`
    file as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在`src/Foggyline/ShipmentBundle/Service/FlatRateShipment.php`文件中创建实际的`service`类，如下所示：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `getInfo` method is what's going to provide the necessary information to
    our future `SalesBundle` module in order for it to construct the `shipment` step
    of the checkout process. It accepts a series of arguments:`$street`, `$city`,
    `$country`, `$postcode`, `$amount`, and `$qty`. We can consider these to be part
    of some unified shipment interface. `delivery_options` in this case returns a
    single, fixed value. `url_process` is the URL to which we will be inserting our
    selected shipment method. Our future `SalesBundle` module will then merely be
    doing an AJAX POST to this URL, expecting either a success or error JSON response,
    which is quite similar to what we imagined doing with payment methods.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`getInfo`方法将为我们未来的`SalesBundle`模块提供必要的信息，以便它构建结账过程的`shipment`步骤。它接受一系列参数：`$street`、`$city`、`$country`、`$postcode`、`$amount`和`$qty`。我们可以将这些视为统一的运输接口的一部分。在这种情况下，`delivery_options`返回一个固定值。`url_process`是我们将插入所选运输方法的URL。我们未来的`SalesBundle`模块将仅仅对这个URL进行一个AJAX
    POST，期望得到一个成功或错误的JSON响应，这与我们想象中使用支付方法的方式非常相似。'
- en: Creating a flat rate shipment controller and routes
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建固定费率运输控制器和路由
- en: 'We edit the `src/Foggyline/ShipmentBundle/Resources/config/routing.xml` file
    by adding the following route definitions to it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过向`src/Foggyline/ShipmentBundle/Resources/config/routing.xml`文件添加以下路由定义来编辑它：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We then create a `src/Foggyline/ShipmentBundle/Controller/FlatRateController.php`.
    file with content as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个`src/Foggyline/ShipmentBundle/Controller/FlatRateController.php`文件，内容如下：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We should now be able to access a URL, like `/app_dev.php/shipment/flat_rate/process`,
    and see the output of `processAction`. Implementations given here are dummy ones.
    What is important for us to know is that the `sales` module will, during its checkout
    process, render any possible `delivery_options` pushed through the `getInfo` method
    of a `shipment_method` tagged service. Meaning, the checkout process should show
    flat rate shipment as an option. The behavior of checking out will be coded such
    that if a `shipment` method is not selected, it will prevent the checkout process
    from going any further. We will touch upon this some more when we get to the `SalesBundle`
    module.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该能够访问一个URL，比如`/app_dev.php/shipment/flat_rate/process`，并看到`processAction`的输出。这里给出的实现是虚拟的。对我们来说重要的是，`sales`模块将在其结账过程中，通过`shipment_method`标记的服务的`getInfo`方法推送任何可能的`delivery_options`。这意味着结账过程应该显示固定费用运输作为一个选项。结账的行为将被编码，如果没有选择`shipment`方法，它将阻止结账过程继续进行。当我们到达`SalesBundle`模块时，我们将更详细地讨论这一点。
- en: Creating a dynamic rate payment service
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建动态费率支付服务
- en: Aside from the flat rate shipment method, let's go ahead and define one more
    dynamic shipment, called Dynamic Rate.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了固定费用运输方法，让我们继续定义另一种动态运输，称为动态费率。
- en: 'We will start by defining the following service under the `services` element
    of the `src/Foggyline/ShipmentBundle/Resources/config/services.xml` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在`src/Foggyline/ShipmentBundle/Resources/config/services.xml`文件的`services`元素下定义以下服务：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `service` defined here accepts only one `router` argument. The `tag name`
    property is the same as with the flat rate shipment service.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里定义的`service`只接受一个`router`参数。`tag name`属性与固定费用运输服务相同。
- en: 'We will then create the `src/Foggyline/ShipmentBundle/Service/DynamicRateShipment.php`
    file, with content as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将创建`src/Foggyline/ShipmentBundle/Service/DynamicRateShipment.php`文件，内容如下：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Unlike the flat rate shipment, here the `delivery_options` key of the `getInfo`
    method is constructed with the response of the `getDeliveryOptions` method. The
    method is internal to the service and is not imagined as exposed or to be looked
    at as part of an interface. We can easily imagine doing some API calls within
    it, in order to fetch calculated rates for our dynamic shipment method.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与固定费用运输不同，这里`getInfo`方法的`delivery_options`键是由`getDeliveryOptions`方法的响应构建的。该方法是服务内部的，不被想象为公开或作为接口的一部分。我们可以很容易地想象在其中进行一些API调用，以便为我们的动态运输方法获取计算费率。
- en: Creating a dynamic rate shipment controller and routes
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建动态费率运输控制器和路由
- en: 'Once the dynamic rates shipment service is in place, we can go ahead and create
    the necessary route for it. We will start by adding the following route definition
    to the `src/Foggyline/ShipmentBundle/Resources/config/routing.xml` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦动态费率运输服务就位，我们就可以为其创建必要的路由。我们将首先在`src/Foggyline/ShipmentBundle/Resources/config/routing.xml`文件中添加以下路由定义：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We will then create the `src/Foggyline/ShipmentBundle/Controller/DynamicRateController.php`
    file, with content as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建`src/Foggyline/ShipmentBundle/Controller/DynamicRateController.php`文件，内容如下：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Similar to the flat rate shipment, here we have added a simple dummy implementation
    of the process and method. The incoming `$request` should contain the same info
    as the service `getInfo` method, meaning, it should have the following arguments
    available: `$street`, `$city`, `$country`, `$postcode`, `$amount`, and `$qty`.
    The method responses will feed into the `SalesBundle` module later on. We can
    easily implement more robust functionality from within these methods, but that
    is out of the scope of this chapter.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与固定费率运输类似，这里我们添加了一个简单的虚拟实现过程和方法。传入的`$request`应该包含与服务`getInfo`方法相同的信息，也就是说，它应该有以下参数可用：`$street`、`$city`、`$country`、`$postcode`、`$amount`和`$qty`。方法的响应将在后面的`SalesBundle`模块中使用。我们可以很容易地从这些方法中实现更健壮的功能，但这超出了本章的范围。
- en: Unit testing
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: The `FoggylineShipmentBundle` module is quite simple. By providing only two
    simple services and two simple controllers, it's easy to test.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`FoggylineShipmentBundle`模块非常简单。通过提供两个简单的服务和两个简单的控制器，很容易进行测试。'
- en: 'We will start off by adding the following line under the `testsuites` element
    of our `phpunit.xml.dist` file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在`phpunit.xml.dist`文件的`testsuites`元素下添加以下行：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With that in place, running the `phpunit` command from root of our shop should
    pick up any test we have defined under the `src/Foggyline/ShipmentBundle/Tests/`
    directory.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个文件，从商店的根目录运行`phpunit`命令应该会检测到我们在`src/Foggyline/ShipmentBundle/Tests/`目录下定义的任何测试。
- en: 'Now, let''s go ahead and create a test for our `FlatRateShipment` service.
    We will do so by creating a `src/Foggyline/ShipmentBundle/Tests/Service/FlatRateShipmentTest.php`
    file, with content as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续为我们的`FlatRateShipment`服务创建一个测试。我们将创建一个`src/Foggyline/ShipmentBundle/Tests/Service/FlatRateShipmentTest.php`文件，内容如下：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Two simple tests are being run here. One checks if we can instantiate a service
    via a container, and the other checks if we can do so directly. Once instantiated,
    we simply call the `getInfo` method of a service, passing it a dummy address and
    order information. Although we are not actually using this data within the `getInfo`
    method, we need to pass something along otherwise the test will fail. The method
    is expected to return a response that contains several keys under the shipment
    key, most notably `title`, `code`, `delivery_options`, and `url_process`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里运行了两个简单的测试。一个是检查我们是否可以通过容器实例化一个服务，另一个是检查我们是否可以直接这样做。一旦实例化，我们只需调用服务的`getInfo`方法，向其传递一个虚拟地址和订单信息。虽然我们实际上并没有在`getInfo`方法中使用这些数据，但我们需要传递一些东西，否则测试将失败。该方法预期返回一个包含在shipment键下的几个关键字的响应，最重要的是`title`、`code`、`delivery_options`和`url_process`。
- en: 'Now, let''s go ahead and create a test for our `DynamicRateShipment` service.
    We will do so by creating a `src/Foggyline/ShipmentBundle/Tests/Service/DynamicRateShipmentTest.php`
    file, with content as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续为我们的`DynamicRateShipment`服务创建一个测试。我们将创建一个`src/Foggyline/ShipmentBundle/Tests/Service/DynamicRateShipmentTest.php`文件，内容如下：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This test is nearly identical to that of the `FlatRateShipment` service. Here,
    we also have two simple tests: one fetching the payment method via a container,
    and the other directly via a class. The difference being that we are no longer
    asserting the presence of `delivery_options` not being empty. This is because
    a real API request might not return any options for delivery, depending on the
    given address and order information.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试几乎与`FlatRateShipment`服务的测试相同。在这里，我们也有两个简单的测试：一个通过容器获取支付方法，另一个通过类直接获取。不同之处在于我们不再断言`delivery_options`的存在。这是因为真实的API请求可能不会根据给定的地址和订单信息返回任何交付选项。
- en: Functional testing
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试
- en: Our entire module has only two controller classes that we want to test for responses.
    We want to make sure that the process method of the `FlatRateController` and `DynamicRateController`
    classes are accessible and working.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们整个模块只有两个控制器类，我们要测试它们的响应。我们要确保`FlatRateController`和`DynamicRateController`类的`process`方法是可访问且有效的。
- en: 'We will first create an `src/Foggyline/ShipmentBundle/Tests/Controller/FlatRateControllerTest.php`
    file, with content as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个`src/Foggyline/ShipmentBundle/Tests/Controller/FlatRateControllerTest.php`文件，内容如下：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will then create a `src/Foggyline/ShipmentBundle/Tests/Controller/DynamicRateControllerTest.php`
    file, with content as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个`src/Foggyline/ShipmentBundle/Tests/Controller/DynamicRateControllerTest.php`文件，内容如下：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Both tests are nearly identical. They contain a test for a single process action
    method. As it is coded now, the controller process action simply returns a fixed
    success JSON response. We can easily extend it to return more than just a fixed
    response and can accompany that change with a more robust functional test.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个测试几乎是相同的。它们包含一个单一过程操作方法的测试。目前，控制器过程操作方法只是返回一个固定的成功JSON响应。我们可以很容易地扩展它以返回不仅仅是一个固定的响应，并且可以伴随着更健壮的功能测试。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter we have built a `shipment` module with two shipment
    methods. Each shipment method provided the available delivery options. The flat
    rate shipment method has only one fixed value under its delivery options, whereas
    the dynamic rate method gets its values from the `getDeliveryOptions` method.
    We can easily embed a real shipping API as part of `getDeliveryOptions` in order
    to provide truly dynamic shipping options.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个具有两种运输方法的`shipment`模块。每种运输方法都提供了可用的交付选项。固定费率运输方法在其交付选项下只有一个固定值，而动态费率方法从`getDeliveryOptions`方法中获取其值。我们可以很容易地在`getDeliveryOptions`中嵌入一个真实的运输API，以提供真正动态的运输选项。
- en: Obviously, we lack the official interfaces here, as we did with payment methods.
    However, this is something we can always come back to and refactor in our application
    as we finalize the `final` module.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们在这里缺少官方接口，就像我们在支付方法中一样。然而，这是我们可以随时回来并在我们最终的`final`模块中重构的内容。
- en: Similar to the payment methods, the idea here was to create a minimal structure
    that showcases how one can develop a simple shipment module for further customization.
    Using the `shipment_methodservice` tag, we effectively exposed the shipment methods
    for the future `sales` module.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与支付方式类似，这里的想法是创建一个最小的结构，展示如何开发一个简单的装运模块以供进一步定制。通过使用“shipment_methodservice”标签，我们有效地为未来的“销售”模块暴露了装运方法。
- en: Moving forward, in the next chapter, we will build a `sales` module, which will
    finally make use of our `payment` and `shipment` modules.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将构建一个“销售”模块，最终将利用我们的“支付”和“装运”模块。
