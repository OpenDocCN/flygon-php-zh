- en: Chapter 7. An Advanced Example
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。一个高级示例
- en: By now, you should be able to develop web applications with PDO. However, our
    example application is manageable when it has been kept rather small with limited
    functionality. Soon you will realize that mixing all the data access, user input,
    and display logic in one file can become a hassle to manage.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该能够使用PDO开发Web应用程序。但是，当应用程序保持相当小且功能有限时，我们的示例应用程序是可管理的。很快您将意识到，在一个文件中混合所有的数据访问、用户输入和显示逻辑可能会变得难以管理。
- en: To write a more manageable code and to allow more than one developer to work
    on a project, the data access user input processing, and page rendering should
    be separated. You have probably heard of the **Model-View-Controller** programming
    paradigm (MVC), which is widely used for big web applications. The idea is to
    keep the data access and modification modules, which is the **Model**, separate
    from data presentation, which is the **View**. The view can be very complex, so
    a template engine is usually used. Finally, the **controller** is a PHP script
    that receives user input, accesses the model, and prepares the view.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写更易管理的代码，并允许多个开发人员共同开发项目，数据访问用户输入处理和页面呈现应该分开。您可能已经听说过广泛用于大型Web应用程序的**模型-视图-控制器**编程范式（MVC）。其思想是将数据访问和修改模块（即**模型**）与数据呈现（即**视图**）分开。视图可能非常复杂，因此通常使用模板引擎。最后，**控制器**是一个接收用户输入、访问模型并准备视图的PHP脚本。
- en: In addition to making the code base more manageable, such division allows us
    to access the functionality of the model from other applications (using maintenance
    scripts running on either the application’s own server or on other servers, which
    are accessed via RPC or SOAP calls).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使代码库更易管理外，这种划分还允许我们从其他应用程序（使用在应用程序自己的服务器上运行的维护脚本或在其他服务器上运行的脚本，通过RPC或SOAP调用访问）访问模型的功能。
- en: As PDO is object-oriented and can return instances of classes from calls to
    the `PDOStatement::fetch()` method, we will use object-oriented programming to
    model our data entities (books, authors, and borrowed book records).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PDO是面向对象的，并且可以从对`PDOStatement::fetch()`方法的调用中返回类的实例，因此我们将使用面向对象编程来模拟我们的数据实体（书籍、作者和借书记录）。
- en: Designing the Model
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模型
- en: Model is usually comprised of a static class (methods of which are called statically),
    and several classes that emulate data entities. Calls to the methods of this Model
    class either return instances of other model classes, or `PDOStatement` instances
    that return instances of model classes in calls to the `fetch()` method.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 模型通常由一个静态类组成（其方法被静态调用），以及模拟数据实体的几个类。对该模型类的方法的调用要么返回其他模型类的实例，要么返回`PDOStatement`实例，后者在调用`fetch()`方法时返回模型类的实例。
- en: For our application, the classes will be `Model, Book, Author`, and `Borrower`.
    These classes reflect the tables in our example database and allow us to perform
    simple operations on the underlying data. (The main idea is to isolate SQL from
    the controller scripts into relevant model classes.) For example, the `Book` class
    may have a method to return an `Author` class instance that would represent the
    author for that book. On the other hand, the `Author` class might have a method
    to return a list of `Book` class instances representing each book written by that
    author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，类将是`Model，Book，Author`和`Borrower`。这些类反映了我们示例数据库中的表，并允许我们对底层数据执行简单的操作。（主要思想是将SQL从控制器脚本中隔离到相关的模型类中。）例如，`Book`类可能有一个方法来返回一个代表该书的作者的`Author`类实例。另一方面，`Author`类可能有一个方法来返回一个由该作者撰写的每本书的`Book`类实例的列表。
- en: In this chapter, we will develop our own static `Model` class along with the
    `Book, Author`, and `Borrower` classes. Before we begin, we should clearly define
    what methods (functionality) every class will have. Let's define the functionality
    of the model.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发我们自己的静态`Model`类以及`Book，Author`和`Borrower`类。在开始之前，我们应该清楚地定义每个类将具有的方法（功能）。让我们定义模型的功能。
- en: '`Model` class should contain static methods that will act as *entry points*
    to the data stored in the database. Such methods should do the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`Model`类应包含静态方法，这些方法将充当数据库中存储的数据的*入口点*。这些方法应该执行以下操作：'
- en: Get all the books.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有的书籍。
- en: Get all the authors.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有的作者。
- en: Get all the book borrowers.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有的书籍借阅者。
- en: Get the number of books.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取书籍的数量。
- en: Get the number of authors.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取作者的数量。
- en: Get the number of book borrowers.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取书籍借阅者的数量。
- en: Get a book by ID.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按ID获取一本书。
- en: Get an author by ID.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按ID获取作者。
- en: Get a borrower by ID.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按ID获取借书人。
- en: On the other hand, the `Model` class will not contain methods that are performed
    on a book or on an author. To lend a book, we will use a method defined in the
    `Book` class, and to return a book, we will use a method in the `Borrower` class.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`Model`类将不包含在书籍或作者上执行的方法。要借出一本书，我们将使用`Book`类中定义的方法，要归还一本书，我们将使用`Borrower`类中的方法。
- en: 'Let''s now plan the methods for the `Book` class:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们计划`Book`类的方法：
- en: Get the author.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取作者。
- en: Get a list of the book's borrowers.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取书籍的借书人列表。
- en: Lend a book.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 借出一本书。
- en: 'The `Author` class is even simpler for our example application:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例应用程序，`Author`类甚至更简单：
- en: Get all the books.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取所有的书籍。
- en: Get the number of books by this author.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取该作者的书籍数量。
- en: 'Finally, there is the `Borrower` class that represents a record in the borrowers
    table:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有代表借书人表中记录的`Borrower`类：
- en: Get the book.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取书籍。
- en: Return the book.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回书籍。
- en: The properties of every data entity will be accessible as instance variables
    of the relevant class. Also, the methods in these classes will contain PDO calls
    that we have already written in `books.php` and other files. We will move these
    methods to the relevant classes, and these files will just act as controllers
    that process user input. Form validation will still be the task of the controller
    scripts. However, we are not going to separate the display logic from the business
    logic, since our application is very simple, and there is no need to use any template
    engine or even to move the page rendering code into a separate **include** file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数据实体的属性将作为相关类的实例变量可访问。此外，这些类中的方法将包含我们已经在`books.php`和其他文件中编写的PDO调用。我们将这些方法移动到相关的类中，这些文件将只作为处理用户输入的控制器。表单验证仍然是控制器脚本的任务。但是，我们不打算将显示逻辑与业务逻辑分开，因为我们的应用程序非常简单，没有必要使用任何模板引擎，甚至将页面渲染代码移动到单独的**include**文件中。
- en: In addition to that, we will not be using the global `$conn` variable any more.
    The `Model` class will have a private static variable of the same name and a method
    to retrieve the connection object. This method will follow the singleton pattern
    and create the object on demand if it's not yet created or simply return it if
    it's already intitialized (For more information on the singleton pattern and an
    example implementation in PHP5 you can visit [http://en.wikipedia.org/wiki/Singleton_pattern](http://en.wikipedia.org/wiki/Singleton_pattern).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们将不再使用全局变量`$conn`。`Model`类将有一个同名的私有静态变量和一个检索连接对象的方法。这个方法将遵循单例模式，并在需要时创建对象，如果尚未创建，则简单地返回它（有关单例模式的更多信息以及在PHP5中的示例实现，您可以访问[http://en.wikipedia.org/wiki/Singleton_pattern](http://en.wikipedia.org/wiki/Singleton_pattern)）。
- en: We will keep all the classes in a separate file, `classes.inc.php`, which will
    then be included from `common.inc.php`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把所有类都放在一个名为`classes.inc.php`的单独文件中，然后从`common.inc.php`中包含它。
- en: 'Let''s begin with the central `Model` class:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从中心的`Model`类开始：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, this class defines the `getConn()` method that is used to retrieve
    the PDO connection object, as well as nine more methods—three methods for every
    data entity (book, author, and borrower). The methods to get all the data entities
    (`getBooks()`, `getAuthors()`, and `getBorrowers())` return a `PDOStatement` pre-configured
    to fetch instances of relevant classes. The methods to return the number of every
    data entity, fetch an integer, while the method to return a single data entity,
    fetch an instance of the data entity model class. Note how we close cursors in
    these methods—this functionality has been transferred from the controller files.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，这个类定义了`getConn()`方法，用于检索PDO连接对象，以及另外九个方法——每个数据实体（书籍、作者和借阅者）三个方法。获取所有数据实体的方法（`getBooks()`、`getAuthors()`和`getBorrowers()`）返回一个预配置为获取相关类实例的`PDOStatement`。返回每个数据实体的数量的方法获取一个整数，而返回单个数据实体的方法获取数据实体模型类的实例。请注意这些方法中如何关闭游标——这个功能已经从控制器文件中转移过来。
- en: Let's now look at the three model classes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看这三个模型类。
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we have just two methods. One is used to get the book's author. (Note how
    we reuse the `Model::getAuthor()` method here.) Another method provides the *lend
    book* functionality. Note how we reread the copies column from the database rather
    than rely on the `$this->copies` variable. As we have seen in the previous chapter,
    this is done to ensure data integrity. The `$this->copies` variable gets assigned
    long before the transaction begins, and by the time that the `Book::lend()` method
    is called, the actual count of copies in the database might have changed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们只有两个方法。一个用于获取书籍的作者（请注意我们在这里重用了`Model::getAuthor()`方法）。另一个方法提供了*借书*功能。请注意我们是从数据库中重新读取了副本列的值，而不是依赖于`$this->copies`变量。正如我们在上一章中看到的，这是为了确保数据完整性。`$this->copies`变量在事务开始之前就被赋值了，当调用`Book::lend()`方法时，数据库中的实际副本数量可能已经发生了变化。
- en: That's why we reread that value inside the transaction again. Also, this method
    returns null if the operation fails or an instance of `Borrower` class if the
    operation is successful. If an error occurs, an exception gets thrown that is
    handled by the exception handler defined in `common.inc.php` (just as it did previously).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们在事务中再次读取该值。此外，如果操作失败，此方法将返回null，如果操作成功，将返回`Borrower`类的实例。如果发生错误，将抛出一个异常，由`common.inc.php`中定义的异常处理程序处理（就像以前一样）。
- en: 'Another `model` class is `Author`. It''s very simple:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个`model`类是`Author`。它非常简单：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These two methods just return the list of books written by this author and the
    number of books in this list.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个方法只是返回该作者写的书籍列表和此列表中的书籍数量。
- en: 'Finally, the `Borrower` class represents a record in the borrower''s table:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`Borrower`类表示借阅者表中的一条记录：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Essentially, the body of the `returnBook()` method is transferred from the `returnBook.php`
    file (just as the `Book::lend()` method was transferred with a slight modification
    from the `lendBook.php` file).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，`returnBook()`方法的主体是从`returnBook.php`文件中转移过来的（就像`Book::lend()`方法是从`lendBook.php`文件中稍作修改后转移过来的一样）。
- en: Modifying the Frontend to Use the Model
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改前端以使用模型
- en: 'Now that we have removed the data access logic from the files that generate
    frontend pages, let''s see how we should modify them. Let''s start with the `books.php`
    file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从生成前端页面的文件中删除了数据访问逻辑，让我们看看应该如何修改它们。让我们从`books.php`文件开始：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, we have removed the SQL commands and the calls to the PDO class
    instance methods, and replaced them with corresponding calls to the methods of
    the `Model` class. (Note the highlighted lines.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经删除了SQL命令和对PDO类实例方法的调用，并用`Model`类的方法调用替换了它们（请注意突出显示的行）。
- en: Another important change is that the instances of the `Book` class returned
    in the `while` loop (starting on line 30) don't have the variables for the author's
    first or last names. To get these variables, we call the `Book::getAuthor()` method
    for every book that we display. Then, later in the loop, we reference either the
    `$b` variable to access the book's properties or the `$a` variable to access the
    author's details. Note how we access these details as the object variables rather
    than array elements here.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的变化是，在`while`循环中返回的`Book`类的实例（从第30行开始）没有作者的名字或姓氏的变量。为了获取这些变量，我们为我们显示的每一本书调用`Book::getAuthor()`方法。然后，在循环的后面，我们引用`$b`变量来访问书的属性，或者引用`$a`变量来访问作者的详细信息。请注意，我们在这里访问这些细节时，是作为对象变量而不是数组元素。
- en: This happened because the `Model::getBooks()` method does not employ table joins
    any more, so the instances of the `Book` class won't contain author details. Instead,
    the `Book` class defines a method to get the `Author` object for that book. This
    means that, for every book that we display, we will execute an extra SQL query
    to get the author's details.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为`Model::getBooks()`方法不再使用表连接，所以`Book`类的实例不会包含作者的详细信息。相反，`Book`类定义了一个方法来获取该书的`Author`对象。这意味着，对于我们显示的每一本书，我们将执行额外的SQL查询来获取作者的详细信息。
- en: On the first sight this may seem too expensive, performance-wise. But on the
    other hand, in real life application, we would show just one page (say, 20 books)
    from a table of several thousand records. In this case, a `SELECT` statement without
    `JOIN` on the `books` table selecting the rows to be displayed in the current
    page and followed by some simple queries for every row to be displayed may be
    more performance-effective.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这可能在性能上显得过于昂贵。但另一方面，在实际应用中，我们可能只会显示表中的一页（比如说，20本书），而表中可能有数千条记录。在这种情况下，一个在`books`表上没有`JOIN`的`SELECT`语句，选择要在当前页面显示的行，然后对每一行进行一些简单的查询，可能更有效率。
- en: 'However, if this approach is inappropriate, then the `Model` class can be extended
    with another method, for example, `Model::getBooksWithAuthors()`, that would return
    instances of the `Book` class where the `lastName` and `firstName` variables would
    be present. This method might look like the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果这种方法不合适，那么`Model`类可以扩展另一个方法，例如`Model::getBooksWithAuthors()`，它将返回`Book`类的实例，其中`lastName`和`firstName`变量将存在。这个方法可能看起来像下面这样：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Developing the model part may constrain us in terms of flexibility, but this
    is the price to pay for code manageability. However, this can be overcome with
    additional methods in the model classes or, if this is really necessary, with
    direct communication with PDO. The above method is possible because PDO does not
    care what variables were defined in the class; it just dynamically creates variables
    for every column returned by the query.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 开发模型部分可能会在灵活性方面对我们施加限制，但这是为了代码可管理性而付出的代价。然而，这可以通过模型类中的其他方法或者如果真的有必要的话，通过与PDO的直接通信来克服。上述方法是可能的，因为PDO不关心类中定义了哪些变量；它只是动态地为查询返回的每一列创建变量。
- en: This is a very powerful feature when used responsibly. If not used with care,
    you may end up with hard-to-track logical errors. For example, if in the above
    method you selected the `ID` column from the authors table, then its value would
    overwrite the `ID` column value selected from the books table. Other methods in
    the `Book` class rely on the value in the `id` field being correct and may lead
    to severe data corruption if this value is incorrect.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当谨慎使用时，这是一个非常强大的功能。如果不小心使用，可能会导致难以跟踪的逻辑错误。例如，如果在上述方法中从作者表中选择了`ID`列，那么它的值将覆盖从书表中选择的`ID`列的值。`Book`类中的其他方法依赖于`id`字段中的值是正确的，如果这个值不正确，可能会导致严重的数据损坏。
- en: Another file that we should now modify is `authors.php:`
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该修改的另一个文件是`authors.php:`
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we just replaced the direct communication with PDO with the call to the
    `Model` class as well as rewrote the loop to use object variables rather than
    array elements.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是用对`Model`类的调用替换了与PDO的直接通信，并重写了循环以使用对象变量而不是数组元素。
- en: The changes made to the application also allow us to remove SQL-related code
    bits from `author.php:`
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对应用程序所做的更改还允许我们从`author.php:`中删除与SQL相关的代码片段。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The changes here are rather cosmetic, as it just removes the direct communication
    with PDO and changes to the *object* syntax from the *array* syntax on highlighted
    lines.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的变化相当表面，它只是删除了与PDO的直接通信，并将高亮显示的行上的*数组*语法更改为*对象*语法。
- en: Finally, the last page that shows a list from `borrowers.php:`
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，显示`borrowers.php`中的列表的最后一个页面：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this file, we have the same problem as we had with `books.php` page—the `Model`
    class returns instances of the `Borrower` class without the book title and the
    author name, which we want to display on this page. Because of that, we get the
    `Book` class instance for each `Borrower` class instance on every iteration, and
    then use that object to get author details.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们遇到了与`books.php`页面相同的问题——`Model`类返回的`Borrower`类实例没有书名和作者名，而我们希望在这个页面上显示。因此，我们在每次迭代中为每个`Borrower`类实例获取`Book`类实例，然后使用该对象获取作者的详细信息。
- en: 'Finally, we will modify two more pages to make use of our newly created data
    model. These two are `lendBook.php` and `returnBook.php`. They probably contained
    the longest bit of code that interfaced with PDO. From `lendBook.php` we remove
    all the code wrapped within the transaction:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将修改另外两个页面，以利用我们新创建的数据模型。这两个页面是`lendBook.php`和`returnBook.php`。它们可能包含了与PDO交互的最长的代码段。从`lendBook.php`中，我们移除了事务内部的所有代码：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note how we changed the part that *lends* the book—the `Bool::lend()` method
    returns `null` in case of failure, so we will display a message that there are
    no more books left to lend. If the operation is successful, then `Book::lend()`
    method returns the `Borrower` class instance (which evaluates to `true` in the
    `if` statement) and the page redirects to `books.php`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何改变了*借出*图书的部分——`Bool::lend()`方法在失败的情况下返回`null`，因此我们将显示没有更多可借的书的消息。如果操作成功，那么`Book::lend()`方法将返回`Borrower`类实例（在`if`语句中求值为`true`），页面将重定向到`books.php`。
- en: 'Similarly, we remove the PDO-related code from `returnBook.php` and replace
    it with the corresponding call to the `Borrower::returnBook()` method:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们从`returnBook.php`中删除了与PDO相关的代码，并用相应的调用`Borrower::returnBook()`方法替换：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Advantages of Separating the Model
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分离模型的优势
- en: So far, almost all of the files that generate front-end pages don't contain
    data access logic and are easier to manage. On the other hand, the model classes
    can be used from outside our application, and additional pages can be quickly
    created to represent the information in the database in other formats such as
    XML.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，几乎所有生成前端页面的文件都不包含数据访问逻辑，更容易管理。另一方面，模型类可以从我们的应用程序外部使用，并且可以快速创建额外的页面来以其他格式（如XML）表示数据库中的信息。
- en: For example, consider the following page (which we will call `books.xml.php):`
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下页面（我们将其称为`books.xml.php`）：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This file allows us to export the list of books in XML format for another application.
    As you can see, the changes to the original `books.php` file are only in the display
    logic. If you now navigate to the page, you should see the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件允许我们以XML格式导出书籍列表，供另一个应用程序使用。正如你所看到的，对原始的`books.php`文件的更改只在显示逻辑中。如果你现在导航到该页面，你应该会看到以下内容：
- en: '![Advantages of Separating the Model](graphics/2660_07_01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![分离模型的优势](graphics/2660_07_01.jpg)'
- en: With a slight modification, we were able to create new representation of our
    data (The second and third books have been collapsed to fit everything on the
    screenshot).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过轻微修改，我们能够创建数据的新表示（第二和第三本书已经折叠以适应截图）。
- en: Another advantage of defining `model` classes is that these classes become the
    central point for data access and manipulation. For example, if you change the
    SQL for representing data from several tables (using joins) or find a way to optimize
    a query, you just have to update the relevant model class, and the scripts (controllers)
    that were using that query don't have to get updated. This is a major manageability
    advantage.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`model`类的另一个优势是，这些类成为数据访问和操作的中心点。例如，如果你改变了用于表示来自多个表的数据的SQL（使用连接）或找到了优化查询的方法，你只需要更新相关的模型类，使用该查询的脚本（控制器）就不需要更新。这是一个重要的可管理性优势。
- en: You may extend abstract model classes to imitate extended functionality for
    real subclasses in a common data model. For example, in a content management system
    you can create an abstract base class called `Item`, which will have common properties
    for all the subclasses (item types) such as author, keywords, and creation date.
    Then the model can perform some operations for all possible subclasses without
    further coding so that the existing code is extensively reused.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以扩展抽象模型类，以模拟通用数据模型中真实子类的扩展功能。例如，在内容管理系统中，你可以创建一个名为`Item`的抽象基类，它将为所有子类（项目类型）具有共同的属性，如作者、关键词和创建日期。然后模型可以对所有可能的子类执行一些操作，而无需进一步编码，以便广泛重用现有代码。
- en: There are tools called **object-relational mappers** (**ORMs**) that make use
    of the ideas described in this chapter. ORMs are used to create powerful object-oriented
    applications where you have virtually no SQL code in you model. (In fact, these
    tools after some configuring play the role of the model in your application.)
    You can read more about ORMs at [http://en.wikipedia.org/wiki/Object-relational_mapping](http://en.wikipedia.org/wiki/Object-relational_mapping).
    Propel ([http://propel.phpdb.org/](http://propel.phpdb.org/)) is a popular ORM
    tool for PHP5.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种叫做**对象关系映射器**（**ORMs**）的工具，它们利用了本章描述的思想。ORMs用于创建功能强大的面向对象应用程序，在这些应用程序中，你的模型中几乎没有SQL代码。（事实上，这些工具在一些配置后扮演了你应用程序中的模型的角色。）你可以在[http://en.wikipedia.org/wiki/Object-relational_mapping](http://en.wikipedia.org/wiki/Object-relational_mapping)了解更多关于ORMs的信息。Propel
    ([http://propel.phpdb.org/](http://propel.phpdb.org/))是PHP5的一种流行的ORM工具。
- en: Further Thoughts
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步思考
- en: 'The model developed in this chapter, needs some improvements in at least two
    areas, if you want to use it in a real-life application. We didn''t create methods
    in the model that would provide the functionality of the `editBook.php` and `editAuthor.php`
    files. However, you should now be ready to add this functionality by yourself.
    We will provide you with some tips:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开发的模型在至少两个领域需要一些改进，如果你想在实际应用中使用它的话。我们没有在模型中创建能够提供`editBook.php`和`editAuthor.php`文件功能的方法。然而，现在你应该准备自己添加这些功能。我们将为你提供一些提示：
- en: Create the `Book::update()` and `Author::update()` methods. These methods should
    accept parameters that reflect the properties of each object (for the `Author`
    class, this should be first name, last name, and biography).
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`Book::update()`和`Author::update()`方法。这些方法应该接受反映每个对象属性的参数（对于`Author`类，这应该是名字、姓氏和传记）。
- en: These methods should use prepared statements to update the corresponding records
    in the database (based on the `$this->id` value).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些方法应该使用预处理语句来更新数据库中相应的记录（基于`$this->id`的值）。
- en: 'The `Model` class should be extended with two more methods, `Model::createBook()`
    and `Model::createAuthor()`. These methods should accept the same list of parameters
    as `Book::update()` and `Author::update()`. Both should insert a row based on
    the passed parameters, into the relevant table. This can be done with the following
    code:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Model`类应该扩展两个方法，`Model::createBook()`和`Model::createAuthor()`。这些方法应该接受与`Book::update()`和`Author::update()`相同的参数列表。两者都应该根据传递的参数插入一行到相关表中。可以使用以下代码完成这个操作：'
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The idea here is to concentrate entity updating in a single place, namely `Author::update()`.
    We employ a transaction here to ensure that, if anything happens, the empty row
    is not stored in the database.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这里的想法是将实体更新集中在一个地方，即`Author::update()`。我们在这里使用事务来确保，如果发生任何事情，空行不会存储在数据库中。
- en: The form processing code should detect whether it's editing an existing entity
    or creating a new one and call `Model::createAuthor()` or `Author::update()` on
    an already existing instance appropriately.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单处理代码应该检测它是在编辑现有实体还是创建新实体，并在已经存在的实例上适当地调用`Model::createAuthor()`或`Author::update()`。
- en: Another problem is that, the methods of the model classes do not validate accepted
    parameters. They should provide validation of every parameter passed to the database
    if you are going to expose your data model to third-party applications. If accessed
    via web browser, our data model is protected by the form validation code. However,
    direct access to the model classes is not as secure.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，模型类的方法不验证接受的参数。如果要将数据模型暴露给第三方应用程序，它们应该对传递到数据库的每个参数进行验证。如果通过Web浏览器访问，我们的数据模型受到表单验证代码的保护。然而，直接访问模型类并不那么安全。
- en: It is advisable to throw an exception from the model methods that accept user-supplied
    parameters in case the validation fails. Also, web form validation and method
    parameter validation should use common code. (For example, you might develop a
    `Validation` class that could be used to validate values regardless of where they
    come from.) This code should be used from within the form validation code and
    model methods. By doing this, so you will assure code reuse and a single place
    for the validation rules.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在模型方法中接受用户提供的参数时，如果验证失败，抛出异常。此外，Web表单验证和方法参数验证应该使用通用代码。（例如，您可以开发一个`Validation`类，无论值来自何处，都可以用来验证。）这段代码应该从表单验证代码和模型方法中使用。通过这样做，您将确保代码重用和验证规则的单一位置。
- en: Finishing Up
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收尾工作
- en: PHP Data Objects is a great and easy-to-use technology. However, it's still
    in its infancy and many improvements and other changes are yet to come. Be sure
    to keep yourself updated with the latest news from PHP developers and from the
    large community of PHP fans and users.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: PHP数据对象是一种很棒且易于使用的技术。然而，它仍处于起步阶段，许多改进和其他变化尚未到来。一定要及时了解来自PHP开发人员和大量PHP粉丝和用户的最新消息。
- en: Effective use of PDO and PHP in general, is possible only with a sound understanding
    of security threats and how to protect against them. Using PDO's prepared statements
    diminishes the risk of SQL injection attacks, but you, the developer, are still
    responsible for securing your application. Make sure that you keep track of the
    latest developments in the security field.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 只有对安全威胁有深刻的理解并知道如何防范，才能有效地使用PDO和PHP。使用PDO的预处理语句可以减少SQL注入攻击的风险，但作为开发人员，您仍然负责保护您的应用程序。确保您及时了解安全领域的最新发展。
- en: Happy PHP-ing!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 愉快的PHP编程！
