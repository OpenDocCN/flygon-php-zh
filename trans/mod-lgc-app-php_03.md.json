["```php\n**setup.php**\n1 <?php\n2 // ... setup code ...\n3\n4 // define an autoloader function in the global namespace\n5 function mlaphp_autoloader($class)\n6 {\n7 // strip off any leading namespace separator from PHP 5.3\n8 $class = ltrim($class, '\\\\');\n9\n10 // the eventual file path\n11 $subpath = '';\n12\n13 // is there a PHP 5.3 namespace separator?\n14 $pos = strrpos($class, '\\\\');\n15 if ($pos !== false) {\n16 // convert namespace separators to directory separators\n17 $ns = substr($class, 0, $pos);\n18 $subpath = str_replace('\\\\', DIRECTORY_SEPARATOR, $ns)\n19 . DIRECTORY_SEPARATOR;\n20 // remove the namespace portion from the final class name portion\n21 $class = substr($class, $pos + 1);\n22 }\n23\n24 // convert underscores in the class name to directory separators\n25 $subpath .= str_replace('_', DIRECTORY_SEPARATOR, $class);\n26\n27 // the path to our central class directory location\n28 $dir = '/path/to/app/classes';\n29\n30 // prefix with the central directory location and suffix with .php,\n31 // then require it.\n32 $file = $dir . DIRECTORY_SEPARATOR . $subpath . '.php';\n33 require $file;\n34 }\n35\n36 // register it with SPL\n37 spl_autoload_register('mlaphp_autoloader');\n38 ?>\n```", "```php\n1 <?php\n2 // go \"up one directory\" for the central classes location\n3 $dir = dirname(__DIR__) . '/classes';\n4 ?>\n```", "```php\n**setup.php**\n1 <?php\n2 // ... setup code ...\n3\n4 // register an autoloader as an anonymous function\n5 spl_autoload_register(function ($class) {\n6 // ... the same code as in the global function ...\n7 });\n8\n9 // ... other setup code ...\n10 ?>\n```", "```php\n**/path/to/app/classes/Mlaphp/Autoloader.php**\n1 <?php\n2 namespace Mlaphp;\n3\n4 class Autoloader\n5 {\n6 // an instance method alternative\n7 public function load($class)\n8 {\n9 // ... the same code as in the global function ...\n10 }\n11\n12 // a static method alternative\n13 static public function loadStatic($class)\n14 {\n15 // ... the same code as in the global function ...\n16 }\n17 }\n18 ?>\n```", "```php\n**setup.php**\n1 <?php\n2 // ... setup code ...\n3\n4 // require the autoloader class file\n5 require_once '/path/to/app/classes/Mlaphp/Autoloader.php';\n6\n7 // STATIC OPTION: register a static method with SPL\n8 spl_autoload_register(array('Mlaphp\\Autoloader', 'loadStatic'));\n9\n10 // INSTANCE OPTION: create the instance and register the method with SPL\n11 $autoloader = new \\Mlaphp\\Autoloader();\n12 spl_autoload_register(array($autoloader, 'load'));\n13\n14 // ... other setup code ...\n15 ?>\n```", "```php\n**setup.php**\n1 <?php\n2 // ... setup code ...\n3\n4 // define an __autoload() function\n5 function __autoload($class)\n6 {\n7 // ... the global function code ...\n8 }\n9\n10 // ... other setup code ...\n11 ?>\n```", "```php\n1 <?php\n2 // get the registered Composer autoloader instance from the vendor/\n3 // subdirectory\n4 $loader = require '/path/to/app/vendor/autoload.php';\n5\n6 // add our central class directory location; do not use a class prefix as\n7 // we may have more than one top-level namespace in the central location\n8 $loader->add('', '/path/to/app/classes');\n9 ?>\n```", "```php\nFoo           => Foo.php\nFoo_Bar       => Foo/Bar.php\nFoo           => Foo/Bar.php\nFoo_Bar\\Bar   => Foo_Bar/Baz.php\nFoo\\Bar\\Baz   => Foo/Bar/Baz.php # ???\nFoo\\Baz_Bar   => Foo/Bar/Baz.php # ???\nFoo_Bar_Baz   => Foo/Bar/Baz.php # ???\n```"]