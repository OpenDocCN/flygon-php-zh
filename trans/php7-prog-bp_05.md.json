["```php\n**$ composer init .**\n\n```", "```php\n**$ composer require slim/slim**\n\n```", "```php\n<?php \nuse \\Slim\\App; \nuse \\Slim\\Http\\Request; \nuse \\Slim\\Http\\Response; \n\nrequire \"vendor/autoload.php\"; \n\n$app = new App(); \n$app->get(\"/\", function(Request $req, Response $res): Response { \n    return $res->withJson([\"message\" => \"Hello World!\"]); \n}); \n$app->run(); \n\n```", "```php\nRewriteEngine on \nRewriteCond %{REQUEST_FILENAME} !-f \nRewriteCond %{REQUEST_FILENAME} !-d \nRewriteRule ^([^?]*)$ /index.php [NC,L,QSA] \n\n```", "```php\n**apt-get install httpie**\n**# Alternatively:**\n**pip install --upgrade httpie**\n\n```", "```php\n$app->get( \n    '/users/{username}', \n    function(Request $req, Response $res, array $args): Response { \n        return $res->withJson([ \n          'message' => 'Hello ' . $args['username' \n        ]); \n    } \n); \n\n```", "```php\n$app->post('/users', function(Request $req, Response $res): Response { \n    $body = $req->getParsedBody(); \n    return $response->withJson([ \n        'message' => 'creating user ' . $body['username'] \n    ]); \n}); \n\n```", "```php\n**$ curl -d '&username=martin&firstname=Martin&lastname=Helmich' http://localhost/users** \n**$ curl -d '{\"username\":\"martin\",\"firstname\":\"Martin\",\"lastname\":\"Helmich\"}' -H'Content-Type: application/json' http://localhost/users**\n**$ curl -d '<user><username>martin</username><firstname>Martin</firstname><lastname>Helmich</lastname></user>' -H'Content-Type: application/xml'**\n\n```", "```php\n$httpClient = new \\GuzzleHttp\\Client(); \n\n$app = new \\Slim\\App(); \n$app->any('{path:.*}', \n    function( \n        ServerRequestInterface $req, \n        ResponseInterface $response \n    ) use ($client): ResponseInterface { \n        return $client->send( \n            $request->withUri( \n                $request->getUrl()->withHost('your-upstream-server.local') \n            ) \n        ); \n    } \n); \n\n```", "```php\n**$app->add(function (Request $req, Response $res, callable $next): Response {**\n**\u00a0\u00a0\u00a0 $auth = $req->getHeader('Authorization');**\n**\u00a0\u00a0\u00a0 if (!$auth) {**\n**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return $res->withStatus(401);**\n**\u00a0\u00a0\u00a0 }**\n**\u00a0\u00a0\u00a0 if (substr($auth, 0, 6) !== 'Basic ' ||**\n**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 base64_decode(substr($auth, 6)) !== 'admin:secret') {**\n**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return $res->withStatus(401);**\n**\u00a0\u00a0\u00a0 }**\n**\u00a0\u00a0\u00a0 return $next($req, $res);**\n**}**\n\n$app->get('/users/{username}', function(Request $req, Response $res): Response {\n\u00a0\u00a0\u00a0 // Handle the request\n});\n\n$app->get('/users/{username}', function(Request $req, Response $res): Response { \n    // Handle the request \n}); \n\n```", "```php\n      GET /profiles?firstName=Martin&limit=10 \n\n```", "```php\n ****$ docker run --name profiles-db -d mongodb**** \n\n```", "```php\nFROM php:7-apache \n\nRUN apt-get update && \\ \n    apt-get install -y libssl-dev && \\ \n    pecl install mongodb && \\ \n    docker-php-ext-enable mongodb \nRUN a2enmod rewrite \n\n```", "```php\n**$ docker build -t packt-chp5 .**\n**$ docker run --name profiles-web --link profiles-db:db \\**\n**-v $PWD:/var/www/html -p 80:80 packt-chp5**\n\n```", "```php\n{ \n    \"name\": \"packt-php7/chp5-rest-example\", \n    \"type\": \"project\", \n    \"authors\": [{ \n        \"name\": \"Martin Helmich\", \n        \"email\": \"php7-book@martin-helmich.de\" \n    }], \n    \"require\": { \n        \"php\": \">=7.0\", \n        \"slim/slim\": \"^3.1\", \n        \"mongodb/mongodb\": \"^1.0\", \n        \"phpunit/phpunit\": \"^5.1\", \n        \"ext-mongodb\": \"*\" \n    }, \n    \"autoload\": { \n        \"psr-4\": { \n            \"Packt\\\\Chp5\": \"src/\" \n        } \n    } \n} \n\n```", "```php\ndeclare(strict_types = 1); \nnamespace Packt\\Chp5\\Model; \n\nclass Profile \n{ \n    private $username; \n    private $givenName; \n    private $familyName; \n    private $passwordHash; \n    private $interests; \n    private $birthday; \n\n    public function __construct( \n        string $username, \n        string $givenName, \n        string $familyName, \n        string $passwordHash, \n        array $interests = [], \n        DateTime $birthday = null \n    ) { \n        $this->username     = $username; \n        $this->givenName    = $givenName; \n        $this->familyName   = $familyName; \n        $this->passwordHash = $passwordHash; \n        $this->interests    = $interests; \n        $this->birthday     = $birthday; \n    } \n\n    // getter methods omitted for brevity \n} \n\n```", "```php\ndeclare(strict_types = 1); \nnamespace Packt\\Chp5\\Service; \n\nuse MongoDB\\Collection; \nuse Packt\\Chp5\\Model\\Profile; \n\nclass ProfileService \n{ \n    private $profileCollection; \n\n    public function __construct(Collection $profileCollection) \n    { \n        $this->profileCollection = $profileCollection; \n    } \n} \n\n```", "```php\n\u00a0**\u00a0\u00a0 public function insertProfile(Profile $profile): Profile**\n**\u00a0\u00a0\u00a0 {**\n**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $record = $this->profileToRecord($profile);**\n**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 $this->profileCollection->insertOne($profile);**\n**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return $profile;**\n**\u00a0\u00a0\u00a0 }**\n\n    private function profileToRecord(Profile $profile): array \n    { \n        return [ \n            'username'     => $profile->getUsername(), \n            'passwordHash' => $profile->getPasswordHash(), \n            'familyName'   => $profile->getFamilyName(), \n            'givenName'    => $profile->getGivenName(), \n            'interests'    => $profile->getInterests(), \n            'birthday'     => $profile->getBirthDay()->format('Y-m-d') \n        ]; \n    } \n} \n\n```", "```php\n    public function updateProfile(Profile $profile): Profile \n    { \n        $record = $this->profileToRecord($profile); \n        $this->profileCollection->findOneAndUpdate( \n            ['username' => $profile->getUsername()], \n            ['$set' => $record] \n        ); \n        return $profile; \n    } \n\n```", "```php\n[ \n  'givenName' => 'Martin', \n  'birthday' => [ \n    '$gte' => '1980-01-01' \n  ], \n  'interests' => [ \n    '$elemMatch' => [ \n      'Open Source', \n      'Science Fiction' \n    ] \n] \n\n```", "```php\n[ \n  '$set' => [ \n    'givenName' => 'Max', \n  ], \n  '$addToSet' => [ \n    'interests' => ['Music'] \n  ] \n] \n\n```", "```php\ndeclare(strict_types = 1); \n$manager = new \\MongoDB\\Driver\\Manager('mongodb://db:27017'); \n$collection = new \\MongoDB\\Collection($manager, 'database-name', 'profiles'); \n\n$profileService = new \\Packt\\Chp5\\Service\\ProfileService($collection); \n$profileService->insertProfile(new \\Packt\\Chp5\\Model\\Profile( \n    'jdoe', \n    'John', \n    'Doe', \n    password_hash('secret', PASSWORD_BCRYPT), \n    ['Open Source', 'Science Fiction', 'Death Metal'], \n    new \\DateTime('1970-01-01') \n)); \n\n```", "```php\npublic function hasProfile(string $username): bool \n{ \n    return $this->profileCollection->count(['username' => $username]) > 0; \n} \n\n```", "```php\npublic function getProfile(string $username): Profile \n{ \n    $record = $this->profileCollection->findOne(['username' => $username]); \n    if ($record) { \n        return $this->recordToProfile($record); \n    } \n    throw new UserNotFoundException($username); \n} \n\nprivate function recordToProfile(BSONDocument $record): Profile \n{ \n    return new Profile( \n        $record['username'], \n        $record['givenName'], \n        $record['familyName'], \n        $record['passwordHash'], \n        $record['interests']->getArrayCopy(), \n        new \\DateTime($record['birthday']); \n    ); \n} \n\n```", "```php\n$app->get('/users', function(Request $req, Response $res): Response { \n    return $response->withJson(['foo' => 'bar']); \n}); \n\n```", "```php\nnamespace Packt\\Chp5\\Mapper; \n\ntrait ProfileJsonMapping \n{ \n    private function profileToJson(Profile $profile): array \n    { \n        return [ \n            'username'   => $profile->getUsername(), \n            'givenName'  => $profile->getGivenName(), \n            'familyName' => $profile->getFamilyName(), \n            'interests'  => $profile->getInterests(), \n            'birthday'   => $profile->getBirthday()->format('Y-m-d') \n        ]; \n    } \n\n    private function profileFromJson(string $username, array $json): Profile \n    { \n        return new Profile( \n            $username, \n            $json['givenName'], \n            $json['familyName'], \n            $json['passwordHash'] ?? password_hash($json['password']), \n            $json['interests'] ?? [], \n            new \\DateTime($json['birthday']) \n        ); \n    } \n} \n\n```", "```php\nnamespace Packt\\Chp5\\Route; \n// imports omitted for brevity \n\nclass ShowProfileRoute \n{ \n    use ProfileJsonMapping; \n    private $profileService; \n\n    public function __construct(ProfileService $profileService) \n    { \n        $this->profileService = $profileService; \n    } \n\n    public function __invoke(Request $req, Response $res, array $args): Response \n    { \n        $username = $args['username']; \n        if ($this->profileService->hasProfile($username)) { \n            $profile = $this->profileService->getProfile($username); \n            return $res->withJson($this->profileToJson($profile)); \n        } else { \n            return $res \n                ->withStatus(404) \n                ->withJson(['msg' => 'the user ' . $username . ' does not exist']); \n        } \n    } \n} \n\n```", "```php\nuse MongoDB\\Driver\\Manager; \nuse MongoDB\\Collection; \nuse Packt\\Chp5\\Service\\ProfileService; \nuse Packt\\Chp5\\Route\\ShowProfileRoute; \nuse Slim\\App; \n\n$manager        = new Manager('mongodb://db:27017'); \n$collection     = new Collection($manager, 'database-name', 'profiles'); \n**$profileService = new ProfileService($collection);** \n\n$app = new App(); \n**$app->get('/profiles/{username}', new \nShowProfileRoute($profileService));** \n$app->run(); \n\n```", "```php\nnamespace Packt\\Chp5\\Route; \n// Imports omitted for brevity \n\nclass PutProfileRoute \n{ \n    use ProfileJsonMapping; \n    private $profileService; \n\n    public function __construct(ProfileService $profileService) \n    { \n        $this->profileService = $profileService; \n    } \n\n    public function __invoke(Request $req, Response $res, array $args): Response \n    { \n        $username      = $args['username']; \n        $profileJson   = $req->getParsedBody(); \n        $alreadyExists = $this->profileService->hasProfile($username); \n\n        $profile = $this->profileFromJson($username, $profileJson); \n        if ($alreadyExists) { \n            $profile = $this->profileService->updateProfile($profile); \n            return $res->withJson($this->profileToJson($profile)); \n        } else { \n            $profile = $this->profileService->insertProfile($profile); \n            return $res->withJson($this->profileToJson($profile))->withStatus(201); \n        } \n    } \n} \n\n```", "```php\n// As both parameters have a \"string\" type hint, strict typing will \n// cause PHP to throw a TypeError when one of the two parameters should \n// be null \n$profile = new Profile( \n    $jsonObject['familyName'], \n    $jsonObject['givenName'] \n); \n\n```", "```php\n$app = new App(); \n$app->get('/profiles/{username}', new \nShowProfileRoute($profileService)); \n**$app->put('/profiles/{username}', new \nPutProfileRoute($profileService));** \n$app->run(); \n\n```", "```php\n$ http PUT http://localhost/profiles/jdoe givenName=John familyName=Doe \\ \npassword=secret birthday=1970-01-01 \n\n```", "```php\nnamespace Packt\\Chp5\\Service\\ProfileService; \n// ... \n\nclass ProfileService \n{ \n    // ... \n\n **public function getProfiles(array $filter = []): Traversable**\n **{** \n **$records = $this->profileCollection->find($filter);** \n **foreach ($records as $record) {** \n **yield $this->recordToProfile($record);** \n **}** \n **}** \n} \n\n```", "```php\npublic function getProfiles(array $filter = []): Traversable \n{ \n    $records  = $this->profileCollection->find($filter); \n    $profiles = new ArrayObject(); \n\n    foreach ($records as $record) { \n        $profiles->append($this->recordToProfile($record)); \n    } \n\n    return $profiles; \n} \n\n```", "```php\npublic function getProfiles( \n    array  $filter        = [], \n **string $sorting       = 'username',** \n **bool   $sortAscending = true** \n): Traversable { \n    $records = $this->profileCollection->find($filter, ['sort' => [ \n **$sorting => $sortAscending ? 1 : -1** \n **]]);** \n\n    // ... \n} \n\n```", "```php\nnamespace Packt\\Chp5\\Route; \n\nclass ListProfileRoute \n{ \n    use ProfileJsonMapping; \n\n    private $profileService; \n\n    public function __construct(ProfileService $profileService) \n    { \n        $this->profileService = $profileService; \n    } \n\n    public function __invoke(Request $req, Response $res): Response \n    { \n        $params = $req->getQueryParams(); \n\n        $sort = $params['sort'] ?? 'username'; \n        $asc  = !($params['desc'] ?? false); \n        $profiles     = $this->profileService->getProfiles($params, $sort, $asc); \n        $profilesJson = []; \n\n        foreach ($profiles as $profile) { \n            $profilesJson[] = $this->profileToJson($profile); \n        } \n\n        return $response->withJson($profilesJson); \n    } \n} \n\n```", "```php\n$app = new App(); \n**$app->get('/profiles', new ListProfileRoute($profileService));** \n$app->get('/profiles/{username}', new ShowProfileRoute($profileService)); \n$app->put('/profiles/{username}', new PutProfileRoute($profileService)); \n$app->run(); \n\n```", "```php\nclass ProfileService \n{ \n    // ... \n\n **public function deleteProfile(string $username)** \n **{** \n **$this->profileCollection->findOneAndDelete(['username' =>\n $username]);** \n **}** \n} \n\n```", "```php\nnamespace Packt\\Chp5\\Route; \n// Imports omitted... \n\nclass DeleteProfileRoute \n{ \n\n    /** @var ProfileService */ \n    private $profileService; \n\n    public function __construct(ProfileService $profileService) \n    { \n        $this->profileService = $profileService; \n    } \n\n    public function __invoke(Request $req, Response $res, array $args): Response \n    { \n        $username = $args['username']; \n        if ($this->profileService->hasProfile($username)) { \n            $this->profileService->deleteProfile($username); \n            return $res->withStatus(204); \n        } else { \n            return $res \n                ->withStatus(404) \n                ->withJson(['msg' => 'user \"' . $username . '\" does not exist']); \n        } \n    } \n} \n\n```", "```php\nnamespace Packt\\Chp5\\Middleware \n\nclass ProfileMiddleware \n{ \n    private $profileService; \n\n    public function __construct(ProfileService $profileService) \n    { \n        $this->profileService = $profileService; \n    } \n\n    public function __invoke(Request $req, Response $res, callable $next): Response \n    { \n        $username = $request->getAttribute('route')->getArgument('username'); \n        if ($this->profileService->hasProfile($username)) { \n            $profile = $this->profileService->getProfile($username); \n            return $next($req->withAttribute('profile', $profile)); \n        } else { \n            return $res \n                ->withStatus(404) \n                ->withJson(['msg' => 'user \"' . $username . '\" does not exist'); \n        } \n    } \n} \n\n```", "```php\n**$profileMiddleware = new ProfileMiddleware($profileService);** \n\n$app = new App(); \n$app->get('/profiles', new ListProfileRoute($profileService)); \n$app->get('/profiles/{username}', new ShowProfileRoute($profileService)) \n **->add($profileMiddleware);** \n$app->delete('/profiles/{username}', new DeleteProfileRoute($profileService)) \n **->add($profileMiddleware);** \n$app->put('/profiles/{username}', new PutProfileRoute($profileService)); \n$app->run(); \n\n```", "```php\nclass ShowProfileRoute \n{ \n    // ... \n\n    public function __invoke(Request $req, Response $res): Response \n    { \n **$profile = $req->getAttribute('profile');** \n        return $res->withJson($this->profileToJson($profile)); \n    } \n} \n\n```", "```php\nclass DeleteProfileRoute \n{ \n    // ... \n\n    public function __invoke(Request $req, Response $res): Response \n    { \n **$profile = $req->getAttribute('profile');** \n        $this->profileService->deleteProfile($profile->getUsername()); \n        return $res->withStatus(204); \n    } \n} \n\n```", "```php\nreturn new Profile( \n    $username, \n    $json['givenName'], \n    $json['familyName'], \n    $json['passwordHash'] ?? password_hash($json['password']), \n    $json['interests'] ?? [], \n    $json['birthday'] ? new \\DateTime($json['birthday']) : NULL \n); \n\n```", "```php\ntry { \n    $this->jsonToProfile($req->getParsedBody()); \n} catch (\\TypeError $err) { \n    return $response \n        ->withStatus(400) \n        ->withJson(['msg' => $err->getMessage()]); \n} \n\n```", "```php\nnamespace Packt\\Chp5\\Middleware; \n\nclass ProfileValidationMiddleware \n{ \n    private $profileService; \n\n    public function __construct(ProfileService $profileService) \n    { \n        $this->profileService = $profileService; \n    } \n\n    public function __invoke(Request $req, Response $res, callable $next): Response \n    { \n        $username      = $request->getAttribute('route')->getArgument('username'); \n        $profileJson   = $req->getParsedBody(); \n        $alreadyExists = $this->profileService->hasProfile($username); \n\n        $errors = []; \n\n        if (!isset($profileJson['familyName'])) { \n            $errors[] = 'missing property \"familyName\"'; \n        }  \n\n        if (!isset($profileJson['givenName'])) { \n            $errors[] = 'missing property \"givenName\"'; \n        }  \n\n        if (!$alreadyExists && \n            !isset($profileJson['password']) && \n            !isset($profileJson['passwordHash']) \n        ) { \n            $errors[] = 'missing property \"password\" or \"passwordHash\"; \n        } \n\n        if (count($errors) > 0) { \n            return $res \n                ->withStatus(400) \n                ->withJson([ \n                    'msg' => 'request body does not contain a valid user profile', \n                    'errors' => $errors \n                ]); \n        } else { \n            return $next($req, $res); \n        } \n    } \n} \n\n```", "```php\n$profileMiddleware = new ProfileMiddleware($profileService); \n**$validationMiddleware = new ProfileValidationMiddleware($profileService);** \n\n$app = new App(); \n$app->get('/profiles', new ListProfileRoute($profileService)); \n$app->get('/profiles/{username}', new ShowProfileRoute($profileService)) \n    ->add($profileMiddleware); \n$app->delete('/profiles/{username}', new DeleteProfileRoute($profileService)) \n    ->add($profileMiddleware); \n$app->put('/profiles/{username}', new PutProfileRoute($profileService)) \n **->add($validationMiddleware);** \n$app->run(); \n\n```", "```php\nnamespace Packt\\Chp5\\Route; \n\nclass PutImageRoute \n{ \n    private $imageDir; \n\n    public function __construct(string $imageDir) \n    { \n        $this->imageDir = $imageDir; \n    } \n\n    public function __invoke(Request $req, Response $res): Response \n    { \n        if (!is_dir($this->imageDir)) { \n            mkdir($this->imageDir); \n        } \n\n        $profile    = $req->getAttribute('profile'); \n        $fileName   = $this->imageDir . '/' . $profile->getUsername(); \n **$fileHandle = fopen($fileName, 'w');** \n **while (!$req->getBody()->eof()) {** \n **fwrite($fileHandle, $req->getBody()->read(4096));** \n **}** \n **fclose($fileHandle);** \n        return $res->withJson(['msg' => 'image was saved']); \n    } \n} \n\n```", "```php\n$profileMiddleware = new ProfileMiddleware($profileService); \n$validationMiddleware = new ProfileValidationMiddleware($profileService); \n\n$app = new App(); \n// ... \n**$app->put('/profiles/{username}/image', new PutImageRoute(__DIR__ . '/images'))**\n **->add($profileMiddleware);** \n$app->run(); \n\n```", "```php\n**curl --data-binary @very-big-image.jpeg -H 'Content-Type: image/jpeg' -X PUT \n-v http://localhost/profiles/jdoe/image**\n\n```", "```php\nnamespace Packt\\Chp5\\Route; \n\nclass ShowImageRoute \n{ \n    /** @var string */ \n    private $imageDir; \n\n    public function __construct(string $imageDir) \n    { \n        $this->imageDir = $imageDir; \n    } \n\n    public function __invoke(Request $req, Response $res, array $args): Response \n    { \n        $profile     = $req->getAttribute('profile'); \n        $filename    = $this->imageDir . '/' . $profile->getUsername(); \n        $fileHandle  = fopen($filename, 'r'); \n        $contentType = mime_content_type($filename); \n\n        return $res \n            ->withStatus(200) \n            ->withHeader('Content-Type', $contentType) \n            ->withBody(new Body($fileHandle)); \n    } \n} \n\n```", "```php\n$app = new \\Slim\\App(); \n// ... \n**$app->get('/profiles/{username}/image', new\nShowImageRoute(__DIR__ . '/images'))** \n **->add($profileMiddleware);** \n$app->put('/profiles/{username}/image', new PutImageRoute(__DIR__ . '/images')) \n    ->add($profileMiddleware); \n$app->run(); \n\n```", "```php\n{ \n  \"_id\": <object ID> \n  \"length\": <file size in bytes>, \n  \"chunkSize\": <size of each chunk in bytes, default 261120>, \n  \"uploadDate\": <timestamp at which the file was saved>, \n  \"md5\": <MD5 checksum of the file, as hex string>, \n  \"filename\": <the file's name>, \n  \"contentType\": <MIME type of file contents>, \n  \"aliases\": <list of alternative file names>, \n  \"metadata\": <arbitrary metadata> \n} \n\n```", "```php\n{ \n  \"_id\": <chunk ID>, \n  \"files_id\": <object ID of the file this chunk belongs to>, \n  \"n\": <index of the chunk within the file>, \n  \"data\": <binary data, of the file's chunk length> \n} \n\n```", "```php\n**composer require helmich/gridfs**\n\n```", "```php\n$manager = new \\MongoDB\\Driver\\Manager('mongodb://db:27017'); \n$database = new \\MongoDB\\Database($manager, 'database-name'); \n\n**$bucketOptions = (new \\Helmich\\GridFS\\Options\\BucketOptions)**\n **->withBucketName('profileImages');**\n**$bucket = new \\Helmich\\GridFS\\Bucket($database, $bucketOptions);** \n$profiles = $database->selectCollection('profiles'); \n\n// ... \n\n**$app->get('/profiles/{username}/image', new \nShowImageRoute($bucket))** \n    ->add($profileMiddleware); \n**$app->put('/profiles/{username}/image', new \nPutImageRoute($bucket))** \n    ->add($profileMiddleware); \n$app->run(); \n\n```", "```php\n**use Helmich\\GridFS\\BucketInterface;** \n\nclass PutImageRoute \n{ \n **private $bucket;** \n\n    public function __construct(BucketInterface $bucket) \n    { \n **$this->bucket = $bucket** \n    } \n\n    // ... \n} \n\n```", "```php\npublic function __invoke(Request $req, Response $res, array $args): Response \n{ \n    $profile       = $req->getAttribute('profile'); \n    $contentType   = $req->getHeader('content-type')[0]; \n    $uploadOptions = (new \\Helmich\\GridFS\\Options\\UploadOptions) \n      ->withMetadata(['content-type' => $contentType]); \n\n    $stream = $req->getBody()->detach(); \n    $fileId = $this->bucket->uploadFromStream( \n        $profile->getUsername(), \n        $stream, \n        $uploadOptions \n    ); \n    fclose($stream); \n    return $res->withJson(['msg' => 'image was saved']); \n} \n\n```", "```php\npublic function __invoke(Request $req, Response $res, array $args): Response \n{ \n    $profile = $req->getAttribute('profile'); \n    $stream = $this->bucket->openDownloadStreamByName($profile->getUsername()); \n    $file = $stream->file(); \n\n    return $res \n        ->withStatus(200) \n        ->withHeader('content-type', $file['metadata']['content-type']) \n        ->withBody(new \\Helmich\\GridFS\\Stream\\Psr7\\DownloadStreamAdapter($stream)); \n} \n\n```"]