["```php\n<?php \n\nfunction safe_title(string $s) \n{ \n    $safe = htmlspecialchars($s); \n    return strtoupper($safe); \n} \n```", "```php\n<?php \n\nfunction safe_title2(string $s) \n{ \n    return strtoupper(htmlspecialchars($s)); \n} \n```", "```php\n<?php \nrequire_once __DIR__.'/vendor/autoload.php'; \n\nuse function Functional\\compose; \n\n$safe_title2 = compose('htmlspecialchars', 'strtoupper'); \n```", "```php\n<?php \n\n$titles = ['Firefly', 'Buffy the Vampire Slayer', 'Stargate Atlantis', 'Tom & Jerry', 'Dawson's Creek']; \n\n$titles2 = array_map(function(string $s) { \n    return strtoupper(htmlspecialchars($s)); \n}, $titles); \n\n$titles3 = array_map(compose('htmlspecialchars', 'strtoupper'),  $titles); \n```", "```php\n<?php \n\n$titles4 = array_map(compose('htmlspecialchars', 'strtoupper', 'trim'), $titles); \n```", "```php\n<?php \nfunction excerpt(string $s) \n{ \n    return substr($s, 0, 5); \n} \n\necho excerpt('Lorem ipsum dolor si amet.'); \n// Lorem \n```", "```php\n<?php \n\nfunction substr_curryied(string $s) \n{ \n    return function(int $start) use($s) { \n        return function(int $length) use($s, $start) { \n            return substr($s, $start, $length); \n        }; \n    }; \n} \n\n$f = substr_curryied('Lorem ipsum dolor sit amet.'); \n$g = $f(0); \necho $g(5); \n// Lorem \n```", "```php\n<?php \n\necho substr_curryied('Lorem ipsum dolor sit amet.')(0)(5); \n// Lorem \n```", "```php\n<?php \n\nfunction pluck(string $property) \n{ \n    return function($o) use($property) { \n        if (is_object($o) && isset($o->{$propertyName})) { \n            return $o->{$property}; \n        } elseif ((is_array($o) || $o instanceof ArrayAccess) &&  isset($o[$property])) { \n            return $o[$property]; \n        } \n\n        return false; \n    }; \n} \n```", "```php\n<?php \n\n$user = ['name' => 'Gilles', 'country' => 'Switzerland', 'member'  => true]; \npluck('name')($user); \n```", "```php\n<?php \n\n$users = [ \n    ['name' => 'Gilles', 'country' => 'Switzerland', 'member' =>  true], \n    ['name' => 'L\u00e9on', 'country' => 'Canada', 'member' => false], \n    ['name' => 'Olive', 'country' => 'England', 'member' => true], \n]; \npluck('country')($users); \n```", "```php\n<?php \n\narray_filter($users, pluck('member')); \n```", "```php\n<?php \n\npluck('name', array_filter($users, pluck('member'))); \n```", "```php\n<?php \n\nfunction map(callable $callback) \n{ \n    return function(array $array) use($callback) { \n        return array_map($callback, $array); \n    }; \n} \n\nfunction replace($regex) \n{ \n    return function(string $replacement) use($regex) { \n        return function(string $subject) use($regex, $replacement)  \n{ \n            return preg_replace($regex, $replacement, $subject); \n        }; \n    }; \n} \n```", "```php\n<?php function map(callable $callback) \n{ \n    return function(array $array) use($callback) { \n        return array_map($callback, $array); \n    }; \n} \n\nfunction replace($regex) \n{ \n    return function(string $replacement) use($regex) { \n        return function(string $subject) use($regex, $replacement)  \n{ \n            return preg_replace($regex, $replacement, $subject); \n        }; \n    }; \n} \n```", "```php\n<?php \n\nfunction curry_n(int $count, callable $function): callable \n{ \n    $accumulator = function(array $arguments) use($count,  $function, &$accumulator) { \n        return function() use($count, $function, $arguments,  $accumulator) { \n            $arguments = array_merge($arguments, func_get_args()); \n\n            if($count <= count($arguments)) { \n                return call_user_func_array($function,  $arguments); \n            } \n\n            return $accumulator($arguments); \n        }; \n    }; \n    return $accumulator([]); \n} \n```", "```php\n<?php \n\nfunction curry(callable $function, bool $required = true):  callable \n{ \n    if(is_string($function) && strpos($function, '::', 1) !==  false) { \n        $reflection = new \\ReflectionMethod($f); \n    }  \n    else if(is_array($function) && count($function) == 2)  \n    { \n        $reflection = new \\ReflectionMethod($function[0],  $function[1]); \n    }  \n    else if(is_object($function) && method_exists($function,  '__invoke'))  \n    { \n        $reflection = new \\ReflectionMethod($function,  '__invoke'); \n    }  \n    else  \n    {         \n        $reflection = new \\ReflectionFunction($function); \n    } \n\n    $count = $required ? $reflection->getNumberOfRequiredParameters() : \n        $reflection->getNumberOfParameters(); \n\n    return curry_n($count, $function); \n} \n```", "```php\n<?php \n\n$map = curry_n(2, 'array_map'); \n$filter = curry_n(2, 'array_filter'); \n```", "```php\n<?php \n\n$trim = $map('trim'); \n$hash = $map('sha1'); \n\n$oddNumbers = $filter([1, 3, 5, 7]); \n$vowels = $filter(['a', 'e', 'i', 'o', 'u']); \n```", "```php\n<?php \n\nfunction substr_curryied(string $s) \n{ \n    return function(int $start) use($s) { \n        return function(int $length) use($s, $start) { \n            return substr($s, $start, $length); \n        }; \n    }; \n} \n\n$f = substr_curryied('Lorem ipsum dolor sit amet.'); \n$g = $f(0); \necho $g(5); \n// Lorem \n```", "```php\n<?php \n\n$map = curry(function(array $array, callable $cb) {}); \n$take = curry(function(string $string, int $count) {}); \n\n$firstTwo = function(array $array) { \n    return $map($array, function(string $s) { \n        return $take($s, 2); \n    }); \n} \n```", "```php\n<?php \n\n$map = curry(function(callable $cb, array $array) {}); \n$take = curry(function(int $count, string $string) {}); \n\n$firstTwo = $map($take(2)); \n```", "```php\n<?php \n\nuse function Functional\\partial_right; \n\n$firstTwo = partial_right($map, partial_right($take, 2)); \n```", "```php\n<?php \n\nclass User { \n    public function phone(): string \n    { \n        return ''; \n    } \n\n    public function registration_date(): DateTime \n    { \n        return new DateTime(); \n    } \n} \n\n$users = [new User(), new User(), new User()]; // etc. \n```", "```php\n<?php \n\nclass User { \n    public function phone(): string \n    { \n        return ''; \n    }  \n    public function registration_date(): DateTime \n    { \n        return new DateTime(); \n    } \n} \n\n$users = [new User(), new User(), new User()]; // etc. \n```", "```php\n<?php \n\nfunction getUserPhonesFromDate($limit, $users) \n{ \n    return array_map(function(User $u) { \n        return $u->phone(); \n    }, array_filter($users, function(User $u) use($limit) { \n        return $u->registration_date()->getTimestamp() > $limit; \n    })); \n} \n```", "```php\n<?php \n\nuse function Functional\\map; \nuse function Functional\\filter; \nuse function Functional\\partial_method; \n\nfunction getUserPhonesFromDate2($limit, $users) \n{ \n    return map( \n        filter(function(User $u) use($limit) { \n            return $u->registration_date()->getTimestamp()  >$limit; \n        }, $users), \n        partial_method('phone') \n    ); \n} \n```", "```php\n<?php \n\nfunction greater($limit) { \n    return function($a) { \n        return $a > $limit; \n    }; \n} \n\nfunction getUserPhonesFromDate3($limit, $users) \n{ \n    return map( \n        filter(compose( \n            partial_method('registration_date'), \n            partial_method('getTimestamp'), \n            greater($limit) \n          ), \n          $users), \n        partial_method('phone') \n    ); \n} \n```", "```php\n<?php \n\nuse function Functional\\partial_right; \n\n$filter = curry('filter'); \n$map = function($cb) { \n    return function($data) use($cb) { \n        return map($data, $cb); \n    }; \n}; \n\nfunction getPhonesFromDate($limit) \n{ \n    return function($data) use($limit) { \n        $function = compose( \n            $filter(compose( \n            partial_method('getTimestamp'), \n                partial_method('registration_date'), \n                greater($limit) \n            )), \n            $map(partial_method('phone')) \n        ); \n        return $function($data); \n    }; \n} \n```", "```php\ngetFromDate($limit) = filter( \n  (->registration_date) >> \n  (->getTimestamp) >> \n  (> $limit) \n) >> map(->phone) \n```", "```php\n<?php \n\nuse function Functional\\sort; \nuse function Functional\\compare_on; \n\nfunction take(int $count) { \n    return function($array) use($count) { \n        return array_slice($array, 0, $count); \n    }; \n}; \n\nfunction compare($a, $b) { \n    return $a == $b ? 0 : $a < $b ? -1 : 1; \n} \n\nfunction getAtMostThreeFromDate($limit) \n{ \n    return function($data) use($limit) { \n        $function = compose( \n            partial_right( \n                'sort', \n                compare_on('compare',  partial_method('registration_date')) \n            ), \n            take(3), \n            getPhonesFromDate($limit) \n        ); \n        return $function($data); \n    }; \n} \n```"]