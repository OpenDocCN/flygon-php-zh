["```php\n<?php \nnamespace Newsletter;  \n//this must always be in every class that will use namespaces \nclass Authentication { \n} \n?> \n\n```", "```php\nUse Newsletter\\Authentication; \n\n```", "```php\nClass Authorization { \n     public function verify($email, $password) { \n         //check for the $email and password encrypted with bcrypt \n         $bcrypt_options = [ \n            'cost' => 12, \n            'salt' => 'secret' \n         ]; \n         $password_hash = password_hash($password, PASSWORD_BCRYPT, $bcrypt_options); \n         $q= \"SELECT * FROM users WHERE email = '\". $email. \"' AND password = '\".$password_hash. \"'\"; \n         if($result = $this->db->query($q)) { \n                     while ($obj = results->fetch_object()) { \n                           $user_id = $obj->id; \n} \n\n         } else { \n   $user_id = null; \n} \n         $result->close(); \n         $this->db->close(); \n         return $user_id; \n\n    } \n} \n\n```", "```php\nNamespace Newsletter; \nuse DB; \nClass DbContainer { \n   Public function getDBConnection($dbConnDetails) {  \n   //connect to database here: \n    $DB = new \\DB($server, $username, $password, $dbname); \n       return $DB; \n  } \n} \n\n```", "```php\n<?php \n/** \n * After registering this autoload function with SPL, the following line \n * would cause the function to attempt to load the \\Newsletter\\Qux class \n * from /path/to/project/src/Newsletter/Qux.php: \n *  \n *      new \\Newsletter\\Qux; \n *       \n * @param string $class The fully-qualified class name. \n * @return void \n */ \nspl_autoload_register(function ($class) { \n    // project-specific namespace prefix \n    $prefix = 'Newsletter'; \n    // base directory for the namespace prefix \n    $base_dir = __DIR__ . '/src/'; \n    // does the class use the namespace prefix? \n    $len = strlen($prefix); \n    if (strncmp($prefix, $class, $len) !== 0) { \n        // no, move to the next registered autoloader \n        return; \n    } \n    // get the relative class name \n    $relative_class = substr($class, $len); \n    // replace the namespace prefix with the base directory,               //replace namespace \n    // separators with directory separators in the relative class      //name, append \n    // with .php \n    $file = $base_dir . str_replace('', '/', $relative_class) . '.php'; \n    // if the file exists, require it \n    if (file_exists($file)) { \n        require $file; \n    } \n}); \n\n```", "```php\n//sample dbconfig.php \nreturn array('server' => 'localhost', \n  'username' => 'root', \n  'password => '', \n  'dbname' => 'newsletterdb' \n); \n\n```", "```php\nClass DbContainer { \npublic function  loadConfig ($filePath) { \n\n   if($filePath) { \n     $config = require($filePath); \n     return $config; //contains the array  \n   } \n\n} \n\n```", "```php\nClass DB { \n //... \npublic function connect($server, $username, $password, $dbname) { \n   $this->connection = new MySQLI($server, $username, $password, $dbname); \n     return $this->connection; \n} \n} \n\n```", "```php\nrequire('spl_autoloader_function.php'); \n\n$dbContainer = new \\DBContainer; //loads our DB from src folder, using the spl_autoload_functionabove. \n\n$dbConfig = $db->getConfig('dbconfig.php'); \n\n$dbContainer = getDB($dbConfig); //now contains the array of database configuration details \n\n```", "```php\n$DB = new \\DB;  \n$DBConn = $DB->connect($dbContainer['server'],$dbContainer['username'],$dbContainer['password'],$dbContainer['dbname']); \n\n```", "```php\npublic function select_where($table, $where_clause) { \n   return $this->db->query(\"SELECT * FROM \". $table.\" WHERE \" . $where_clause); \n} \n\n```", "```php\nClass Authorization { \n    //this is used to get the database class into Authorization  \n    Public function instantiateDB($dbInstance){ \n       $this->db = $dbInstance; \n    } \n\n    public function verify($email, $password) { \n         //check for the $email and password encrypted with bcrypt \n         $bcrypt_options = [ \n            'cost' => 12, \n            'salt' => 'secret' \n         ]; \n         $password_hash = password_hash($password, PASSWORD_BCRYPT, $bcrypt_options); \n         //select with condition \n         $this->db->select_where('users', \"email = '$email' AND password = '$password_hash'\"); \n         if($result = $this->db->query($q)) { \n                     while ($obj = results->fetch_object()) { \n                           $user_id = $obj->id; \n} \n\n         } else { \n   $user_id = null; \n} \n         $result->close(); \n         $this->db->close(); \n         return $user_id; \n\n    } \n} \n\n```", "```php\n<?php \nsession_start(); \n$domain = 'http://www.socialexample.info'; \nrequire_once 'autoload.php'; \n\nuse FacebookFacebookSession; \nuse FacebookFacebookRedirectLoginHelper; \nuse FacebookFacebookRequest; \nuse FacebookFacebookResponse; \nuse FacebookFacebookSDKException; \nuse FacebookFacebookRequestException; \nuse FacebookFacebookAuthorizationException; \nuse FacebookGraphObject; \nuse FacebookEntitiesAccessToken; \nuse FacebookHttpClientsFacebookCurlHttpClient; \nuse FacebookHttpClientsFacebookHttpable; \n\n// init app with app id and secret (get from creating an app) \n$fbAppId = '123456382121312313'; //change this. \n$fbAppSecret = '8563798aasdasdasdweqwe84'; \nFacebookSession::setDefaultApplication($fbAppId, $fbAppSecret); \n// login helper with redirect_uri \n    $helper = new FacebookRedirectLoginHelper($domain . '/fbconfig.php' ); \ntry { \n  $session = $helper->getSessionFromRedirect(); \n} catch( FacebookRequestException $ex ) { \necho \"Hello, sorry but we've encountered an exception and could not log you in right now\"; \n} catch( Exception $ex ) { \n  // Tell user something has happened \n  echo \"Hello, sorry but we could not log you in right now\";       \n} \n// see if we have a session \nif ( isset( $session ) ) { \n  // graph api request for user data \n  $request = new FacebookRequest( $session, 'GET', '/me' ); \n  $response = $request->execute(); \n  // get response \n//start a graph object with the user email \n  $graphObject = $response->getGraphObject(); \n  $id = $graphObject->getProperty('id');  \n  $fullname = $graphObject->getProperty('name');  \n  $email = $graphObject->getProperty('email'); \n\n     $_SESSION['FB_id'] = $id;            \n     $_SESSION['FB_fullname'] = $fullname; \n     $_SESSION['FB_email'] =  $email; \n\n//save user to session \n     $_SESSION['UserName'] = $email; //just for demonstration purposes \n//redirect user to index page        \n    header(\"Location: index.php\"); \n} else { \n  $loginUrl = $helper->getLoginUrl(); \n header(\"Location: \".$loginUrl); \n} \n?> \n\n```", "```php\n<?php \nsession_start();  \n?> \n<!doctype html> \n<html > \n  <head> \n    <title>Login to SocialNewsletter.com</title> \n<link href=\" https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" rel=\"stylesheet\">  \n </head> \n  <body> \n  <?php if ($_SESSION['FB_id']): ?>      <!--  After user login  --> \n<div class=\"container\"> \n<div class=\"hero-unit\"> \n  <h1>Hello <?php echo $_SESSION['UserName']; ?></h1> \n  <p>How to login with PHP</p> \n  </div> \n<div class=\"span4\"> \n <ul class=\"nav nav-list\"> \n<li class=\"nav-header\">FB ID: <?php echo $_SESSION['FB_id']; ?></li> \n<li> Welcome <?php echo $_SESSION['FB_fullName']; ?></li> \n<div><a href=\"logout.php\">Logout</a></div> \n</ul></div></div> \n    <?php else: ?>     <!-- Before login -->  \n<div class=\"container\"> \n<h1>Login with Facebook</h1> \n           Not Connected with Facebook. \n<div> \n      <a href=\"fbconfig.php\">Login with Facebook</a></div> \n      </div> \n    <?php endif ?> \n  </body> \n</html> \n\n```", "```php\nCREATE TABLE member_details(  \n  id INT(11) PRIMARY KEY AUTO_INCREMENT, \n  firstname VARCHAR(255), \n  lastname VARCHAR(255), \n  email VARCHAR(255), \n  canNotify TINYINT(1), \n  member_id INT(11) \n); \n\n```", "```php\nCREATE TABLE users ( \n   id INT(11) PRIMARY KEY AUTO_INCREMENT \n   username VARCHAR(255), \n   password VARCHAR(255), \n); \n\n```", "```php\nCREATE TABLE subscriptions ( \n  `id` INT(11) PRIMARY KEY AUTO_INCREMENT, \n  `newsletter_id` INT(11) NOT NULL, \n  `member_id` INT(11) NOT NULL, \n  `active` BOOLEAN DEFAULT true \n); \n\n```", "```php\nCREATE TABLE newsletters ( \nid INT(11) PRIMARY KEY AUTO_INCREMENT, \nnewsletter_name (TEXT), \nnewsletter_count INT(11) NOT NULL DEFAULT '0', \nmarketer_id INT(11) NOT NULL, \nis_active TINYINT(1), \ncreated_at DATETIME, \n\n); \n\n```", "```php\nCREATE TABLE publications ( \n  newsleterId INT(11) PRIMARY KEY AUTO_INCREMENT, \n  status VARCHAR(25), \n  content TEXT, \n  template TEXT, \n  sent_at DATETIME, \n  created_at DATETIME, \n); \n\n```", "```php\nClass Dashboard { \n  public function getSubscriptions($member_id) { \n  $query = $db->query(\"SELECT * FROM subscriptions, newsletters WHERE subscriptions.member_id ='\". $member_id.\"'\"); \n  if($query->num_rows() > 0) { \n      while ($row = $result->fetch_assoc()) { \n          $data  = array(  \n            'name' => $row->newsletter_name,  \n            'count' => $row->newsletter_count, \n            'mem_id' => $row->member_id,  \n            'active' => $row->active \n         ); \n      } \n      return $data; \n  }  \n} \n} \n\n```", "```php\n $member_id = $_SESSION['member_id']; \n $dashboard = new Dashboard; \n $member_subscriptions = $dashboard->getSubscriptions($member_id); \n ?> \n  <table> \n    <tr> \n      <td>Member Id</td><td>Newsletter Name</td><td>Newsletter count</td><td>Active</td> \n     </tr> \n<?php \n foreach($member_subscriptions as $subs) { \n    echo '<tr> \n     <td>'. $subs['mem_id'] . '</td>' .  \n     '<td>' . $subs['name'].'</td>' .  \n     '<td>' . $subs['count'] . '</td>'. \n     '<td>' . $subs['active'] . '</td> \n     </tr>'; \n } \n echo '</table>'; \n\n```", "```php\nCREATE TABLE marketers ( \nid INT(11) AUTO_INCREMENT, \nmarketer_name VARCHAR(255) NOT NULL, \nmarketer_email VARCHAR(255) NOT NULL, \nmarketer_password VARCHAR(255) NOT NULL, \n\nPRIMARY KEY `id`  \n); \n\n```", "```php\nCREATE TABLE newsletter_admins ( \n  Id INT(11) AUTO_INCREMENT, \n  marketer_id INT(11) , \n  newsletter_id INT(11), \n  PRIMARY KEY `id`, \n); \n\n```", "```php\n<?php  \nclass NewsletterDb { \npublic $db; \n\nfunction __construct($dbinstance) { \n$this->db = $dbinstance; \n} \n\n//get admins = marketers \npublic function get_admins ($newsletter_id) { \n$query = \"SELECT * FROM newsletter_admins LEFT JOIN marketers ON marketers.id = newsletter_admins.admin_id.WHERE newsletters_admins.newsletter_id = '\".$newsletter_id.\"'\"; \n  $this->db->query($query); \n} \n} \n\n```", "```php\n\n<?php \n$admin_username = 'admin'; \n$password = 'test1234'; \n?> \n\n```", "```php\n<html> \n<?php  \nif(isset($_POST['username']) && isset($_POST['password'])) { \n  //check if they match then login \n  if($_POST['username'] == $admin_username  \n    && $_POST['password'] == $password) { \n   //create session and login \n   $_SESSION['logged_in'] = true; \n   $_SESSION['logged_in_user'] = $admin_username; \n      header('http://ourwebsite.com/admin/welcome_dashboard.php'); \n } \n ?> \n} \n</html> \n\n```", "```php\n$domain = 'http://ourwebsite.com'; \n$redirect_url = '/admin/welcome_dashboard.php'; \nheader($domain . $redirect_url); \n\n```", "```php\nFunction get_neewsletter_marketers() { \n  $q = \"SELECT * FROM marketers LEFT JOIN newsletters '; \n  $q .= \"WHERE marketers.id = newsletters.marketer_id\"; \n\n  $res = $db->query($q); \n\n  while ($row = $res->fetch_assoc()) { \n   $marketers = array( \n     'name' => $row['marketer_name'], \n     'email' => $row['marketer_email'], \n     'id' => $row['marketer_id'] \n    ); \n  } \n  return $marketers; \n} \n\n```", "```php\n<table> \n<tr> \n <th>Marketer Email</th> \n  <th>Edit</th> \n <th>Delete</th> \n</tr> \n\n```", "```php\n$marketrs = get_newsletter_marketers(); \n\n```", "```php\nforeach($marketers as $marketer) { \n  echo '<tr><td>'. $marketer['email'] .'</td> \n   <td><a href=\"edit_marketer.php?id='. $marketer['id'].'\">Edit</a></td> \n  <td><a href=\"delete_marketer.php\">delete</td> \n  </tr>'; \n} \necho '</table>'; \n\n```", "```php\nfunction delete_marketer($marketer_id) { \n  $q = \"DELETE FROM marketers WHERE marketers.id = '\" .   $marketer_id . \"'\"; \n   $this->db->query($q); \n} \n$marketer_id = $_GET['id']; \ndelete_marketer($marketer_id); \n\n```", "```php\nif(empty($_POST['submit'])) { \n  $marketer_id = $_GET['id']; \n  $q = \"SELECT * FROM marketers WHERE id = '\" . $marketer_id.\"'\"; \n\n $res = $db->query($q); \n\n  while ($row = $res->fetch_assoc()) { \n   $marketer = array( \n     'name' => $row['marketer_name'], \n     'email' => $row['marketer_email'], \n     'id' => $row['id'] \n    ); \n  } \n\n  ?> \n  <form action=\"update_marketer.php\" method=\"post\"> \n   <input type=\"hidden\" name=\"marketer_id\" value=\"<?php echo $marketer['id'] ?>\"> \n   <input type=\"text\" name=\"marketer_name\" value=\"<?php echo $marketer['name'] ?>\"> \n   <input type=\"text\" name=\"marketer_email\" value=\"<?php echo $marketer['email'] ?>\"> \n  <input type=\"submit\" name=\"submit\" /> \n</form> \n  <?php \n\n  } else { \n     $q = \"UPDATE marketers SET marketer_name='\" . $_POST['marketer_name'] . \", marketer_email = '\". $_POST['marketer_email'].\"' WHERE id = '\".$_POST['marketer_id'].\"'\"; \n   $this->db->query($q); \n   echo \"Marketer's details has been updated\"; \n  } \n?> \n\n```", "```php\n<html> \n<!doctype html> \n\n<sidebar style=\"text-align:left\"> \n{{MENU}} \n</sidebar> \n\n<main style=\"text-align:right\"> \n   {{CONTENT}} \n</main> \n</html> \n\n```", "```php\nCREATE TABLE newsletter_templates ( \n Id INT(11) PRIMARY KEY AUTO_INCREMENT, \nNewsletter_id INT(11) NOT NULL, \n   Template TEXT NOT NULL, \n   Created_by INT(11) NOT NULL   \n) ENGINE=InnoDB; \n\n```", "```php\n$cleanhtml = htmlentities('<html> \n<!doctype html> \n\n<sidebar style=\"text-align:left\"> \n{{MENU}} \n</sidebar> \n\n<main style=\"text-align:right\"> \n   {{CONTENT}} \n</main> \n</html> \n'); \n<form> \n   <h2>Newsletter Custom Template</h2> \n  <textarea name=\"customtemplate\"> \n<?php echo $cleanhtml; ?> \n</textarea> \n  <input type=\"submit\" value=\"Save Template\" name=\"submit\"> \n  </form> \n\n```", "```php\n$template = require('template.class.php'); \n$q = \"SELECT * FROM newsletter_members WHERE newsletter_id = 1\"; //if we're going to mail newsletter #1  \n$results = $db->query($q); \nWhile ($rows =$results->fetch_assoc() ) { \n  //gather data  \n  $newsletter_title = $row['title']; \n  $member_email = $row['template']; \n  $menu = $row['menu']; //this is a new field to contain any menu html \n  $content = $row['content']; \n  $content_with_menu = $template->replace_menu($menu, $content); \n  $emailcontent = $template->         replace_contents($content,$content_with_menu); \n  //mail away! \n  mail($member_email, 'info@maillist.com', $newsletter_title ,$email_content); \n} \n\n```", "```php\nclass Template { \n   public function replace_menu($menu, $content) { \n     return  str_replace('{{MENU}}', $menu, $content); \n   } \n   public function replace_contents ($actualcontent, $content) { \n    return str_replace('{{CONTENT}}', $actualcontent,  $content); \n   }  \n} \n\n```", "```php\n<ul> \n  <li><a href=\"http://someUrl.com\">some URL</a></li> \n<li><a href=\"http://someNewUrl.com\">some new URL</a></li> \n<li><a href=\"http://someOtherUrl.com\">some other URL</a></li> \n</ul> \n\n```", "```php\nCREATE TABLE links ( \n   id INT(11) PRIMARY KEY AUTO_INCREMENT, \n   link_title TEXT NOT NULL, \n   actual_link TEXT, \n   shortened_link VARCHAR(255), \n   created DATETIME, \n   created_by INT(11) \n); \n\n```", "```php\npublic function createShortLink($site_url,$title, $actual_url,$created_by) { \n    $created_date = date('Y-m-d H:i:s'); \n  $new_url = $site_url . \"h?=\" . md5($actual_url); \n  $res = $this->db->query(\"INSERT INTO links VALUES (null, $title ,'\". $actual_url. \"', '\". $new_url.\", '\". $created_date.\"','\".$created_by.\"'\"),; \n  )); \n   return $res; \n} \n\n```", "```php\nCREATE TABLE link_hits ( \n   link_id INT(11), \n   num_hits INT(11) \n); \n\n```", "```php\n$res = $this->db->query(\"INSERT INTO links VALUES (null, '$actual_url',$title, '$new_url', '$created_date', '$created_by'\"); \n\n$new_insert_id = $this->db->insert_id; \n\n$dbquery = INSERT INTO link_hits VALUES($new_insert_id,0); \n\n$this->db->query($dbquery); \n\n```", "```php\nClass LinkHit {       \n\n     Public function __construct($mysqli) { \n          $this->db = $mysqli; \n      } \n\n   public function  hitUpdate ($link_id) { \n\n  $query = \"UPDATE link_hits SET num_hits++ WHERE link_id='\".    $link_id. \"'\"; \n\n   //able to update \n     $this->db->query($query)       \n   } \n\n   Public function checkHit ($shorturl) { \n   $arrayUrl = parse_url($shortUrl); \nparse_str($parts['query'],$query); \n$hash = $query['h'];  \n\n   $testQuery = $this->db->query(\"SELECT id FROM links WHERE shortened_link LIKE '%$hash%'\"); \n   if($this->db->num_rows > 0) { \n         while($row = $testQuery->fetch_array() ) { \n   return $row['id']; \n          } \n   } else { \n     echo \"Could not find shorted link\"; \n     return null; \n  } \n} \n\n//instantiating the function: \n$mysqli = new mysqli('localhost','test_user','test_password','your_database'); \n$Link = new LinkHit($mysqli); \n$short_link_id = $Link->checkHit(\"http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]\"); \n\nif($short_link_id !== null) { \n  $link->hitUpdate($isShort); \n} \n\n```", "```php\n$user_id = $_SESSION['user_id']; \n$sql = \"SELECT * FROM links LEFT JOIN link_hits ON links.id = link_hits.link_id WHERE links.created_by='\" . $user_id. \"'\"; \n$query = $mysqli->query($sql); \n?> \n<table> \n<tr> \n<td>Link id</td><td>Link hits</td></tr> \n<?php \nwhile($obj = $query->fetch_object()) { \n  echo '<tr><td>'.$obj->link.'</td> \n<td>' . $obj->link_hits.'</td></tr></tr>'; \n} \n?> \n</table> \n\n```", "```php\n<script src=\"socket.io/socket.io.js\"></script> \n\n```", "```php\n{ \n    \"autoload\": { \n        \"psr-0\": { \n            \"MyApp\": \"src\" \n        } \n    }, \n    \"require\": { \n        \"cboden/ratchet\": \"0.3.*\" \n    } \n} \n\n```", "```php\nnamespace SupportChat; \nuse Ratchet\\MessageComponentInterface; \nuse Ratchet\\ConnectionInterface; \n\nclass SupportChat implements MessageComponentInterface { \n  Protected $clients; \n  Public function __construct() { \n    $this->clients = new \\SplObjectStorage; \n  } \n} \n\n```", "```php\nPublic function onOpen(ConnectionInterface $conn) { \n  $this->clients->attach($conn); \n  echo \"A connection has been established\"; \n} \n\n```", "```php\nPublic function onMessage (ConnectionInterface $from, $msg) { \n foreach ($this->clients as $client) { \n        if ($from !== $client) { \n            $client->send($msg); \n        } \n    } \n} \n\npublic function onClose(ConnectionInterface $conn) { \n$this->clients->detach($conn); \n} \n\n```", "```php\npublic function onError (ConnectionInterface $conn) { \n$this->clients->detach($conn); \n} \n\n```", "```php\nvar messages = []; \n\n// connect to the socket server \nvar conn = new WebSocket('ws://localhost:8088'); \nconn.onopen = function(e) { \n   console.log('Connected to server:', conn); \n} \n\nconn.onerror = function(e) { \n   console.log('Error: Could not connect to server.'); \n} \n\nconn.onclose = function(e) { \n   console.log('Connection closed'); \n} \n\n// handle new message received from the socket server \nconn.onmessage = function(e) { \n   // message is data property of event object \n   var message = JSON.parse(e.data); \n   console.log('message', message); \n\n   // add to message list \n   var li = '<li>' + message.text + '</li>'; \n   $('.message-list').append(li); \n} \n\n// attach onSubmit handler to the form \n$(function() { \n   $('.message-form').on('submit', function(e) { \n         // prevent form submission which causes page reload \n         e.preventDefault(); \n\n         // get the input \n         var input = $(this).find('input'); \n\n         // get message text from the input \n         var message = { \n               type: 'message', \n               text: input.val() \n         }; \n\n         // clear the input \n         input.val(''); \n\n         // send message to server \n         conn.send(JSON.stringify(message)); \n   }); \n}); \n\n```", "```php\n<!DOCTYPE html> \n<html> \n<head> \n   <title>Chat with Support</title> \n   <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.js\"></script> \n   <script src=\"app.js\"></script> \n</head> \n<body> \n\n   <h1>Chat with Support</h1> \n\n   <h2>Messages</h2> \n   <ul class=\"message-list\"></ul> \n   <form class=\"message-form\"> \n         <input type=\"text\" size=\"40\" placeholder=\"Type your message here\" /> \n         <button>Send message</button> \n   </form> \n</body> \n</html> \n\n```", "```php\n\n<?php \n// import namespaces \nuse Ratchet\\Server\\IoServer; \nuse Ratchet\\WebSocket\\WsServer; \nuse SupportChat\\Chat; \n\n// use the autoloader provided by Composer \nrequire dirname(__DIR__) . '/vendor/autoload.php'; \n\n// create a websocket server \n$server = IoServer::factory( \n    new WsServer( \n        new Chat() \n    ) \n    , 8088 \n); \n\n$server->run(); \n\n```", "```php\n<form class=\"message-form\" id=\"chatform\"> \n         <input type=\"text\" name=\"firstname\" size=\"25\" placeholder=\"Your Name\"> \n         <input type=\"text\" name=\"email\" size=\"25\" placeholder=\"Email\"> \n\n         <input type=\"text\" name=\"message\" size=\"40\" placeholder=\"Type your message here\" /> \n         <button>Send message</button> \n   </form> \n\n```", "```php\n<script> \n$(document).ready(function() { \n   $('submit').on('click', function() { \n     $.post('sendsupportmessage.php', $(\"#chatform\").serialize()) \n       .done(function(data) { \n         alert('Your message has been sent'); \n      }); \n   }); \n}); \n</script> \n\n```", "```php\n<?php \n  if( !empty($_POST['message'])) { \n    $message = htmlentities($_POST['message']); \n  } \n\n  if( !empty($_POST['email'])) { \n    $email = htmlentities($_POST['email']); \n  } \n\n  if( !empty($_POST['firstname']) ) { \n    $firstname = htmlentities($_POST['firstname']); \n  }  \n\n  $emailmessage = 'A support message from ' . $firstname . '; \n  $emailmessage .=  ' with email address: ' . $email . '; \n  $emailmessage .= ' has been received. The message is '. $message; \n\n   mail('contact@yoursite.com', 'Support message', $emailmessage);  \n\n  echo \"success!\"; \n?> \n\n```", "```php\n$foo = ''; \nif(isset($foo)) { print 'But no its empty'; } \nelse { print 'PHP7 rocks!'; } \n\n```", "```php\n.done(function(data) { \n   if(data === 'succcess!') { \n     var successHtml = '<li>Your message was sent</li>'; \n     $('.message-list').append(successHtml); \n\n   } \n      } \n\n```"]