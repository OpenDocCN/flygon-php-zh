- en: Chapter 1. Meet Yii
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。见识Yii
- en: Web development frameworks help jump-start your application by immediately delivering
    the core foundation and plumbing needed to quickly turn your ideas scribbled on
    the whiteboard into functional, production-ready code. With all of the common
    features expected from web applications today, and available framework options
    that meet these expectations, there is little reason to code your next web application
    from scratch. A modern, flexible, and extensible framework is almost as essential
    a tool to today's web developer as the programming language itself. And when the
    two are particularly complementary, the results are an extremely powerful toolkit—Java
    and Spring, Ruby and Rails, C# and .NET, and PHP and Yii.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络开发框架通过立即提供核心基础和所需的基础设施，帮助您快速将白板上的想法转化为功能齐全的生产就绪代码，从而帮助您快速启动应用程序。有了今天网络应用程序所需的所有常见功能，并且有可用的框架选项来满足这些期望，几乎没有理由从头开始编写下一个网络应用程序。现代、灵活、可扩展的框架几乎和编程语言本身一样是今天网络开发人员的必备工具。当两者特别互补时，结果是一个非常强大的工具包——比如Java和Spring、Ruby和Rails、C#和.NET以及PHP和Yii。
- en: Yii is the brainchild of founder Qiang Xue, who started the development of this
    open source framework on January 1, 2008\. Qiang had previously developed and
    maintained the PRADO framework for many years prior to starting this. The years
    of experience and user feedback cultivated from the PRADO project solidified the
    need for a much easier, more extensible, and more efficient PHP5-based framework,
    to meet the ever-growing needs of application developers. The initial alpha version
    of Yii was officially released to meet these needs in October of 2008\. Its extremely
    impressive performance metrics when compared to other PHP-based frameworks immediately
    drew very positive attention. On December 3, 2008, Yii 1.0 was officially released,
    and as of Oct 1, 2012, the latest production-ready version is up to 1.1.12\. It
    has a growing development team and continues to gain in popularity among PHP developers
    everyday.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Yii是创始人薛强的心血结晶，他于2008年1月1日开始开发这个开源框架。薛强在开始这个项目之前，曾经多年开发和维护PRADO框架。从PRADO项目中积累的多年经验和用户反馈，巩固了对一个更易于扩展、更高效的基于PHP5的框架的需求，以满足应用开发人员日益增长的需求。Yii的初始alpha版本于2008年10月正式发布，与其他基于PHP的框架相比，其极其出色的性能指标立即引起了极大的关注。2008年12月3日，Yii
    1.0正式发布，截至2012年10月1日，最新的生产就绪版本为1.1.12。它拥有一个不断壮大的开发团队，并且每天都在PHP开发人员中不断增加其知名度。
- en: The name **Yii** is an acronym for **Yes, it is**, and is pronounced as *Yee*
    or (*ji:*). Yii is a high-performance, component-based, web application framework
    written in PHP5\. The name is also representative of the adjectives most used
    to describe it, such as easy, efficient, and extensible. Let's take a quick look
    at each of these characteristics of Yii, turn by turn.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Yii**这个名字是**Yes, it is**的缩写，发音为*Yee*或(*ji:*)。Yii是一个高性能、基于组件的、用PHP5编写的Web应用程序框架。这个名字也代表了最常用来描述它的形容词，比如易用、高效和可扩展。让我们快速看一下Yii的每个特点。逐个进行。'
- en: Easy
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 易用
- en: To run a Yii version 1.x-powered web application, all you need are the core
    framework files and a web server supporting PHP 5.1.0 or higher. To develop with
    Yii, you only need to know PHP and object-oriented programming. You are not required
    to learn any new configuration or templating language. Building a Yii application
    mainly involves writing and maintaining your own custom PHP classes, some of which
    will extend from the core, Yii framework component classes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行基于Yii 1.x的Web应用程序，您只需要核心框架文件和支持PHP 5.1.0或更高版本的Web服务器。要使用Yii进行开发，您只需要了解PHP和面向对象编程。您不需要学习任何新的配置或模板语言。构建Yii应用程序主要涉及编写和维护自己的自定义PHP类，其中一些将扩展自核心Yii框架组件类。
- en: Yii incorporates many of the great ideas and work from other well-known web
    programming frameworks and applications. So if you are coming to Yii from using
    other web development frameworks, it is likely that you will find it familiar
    and easy to navigate.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Yii吸收了许多其他知名Web编程框架和应用程序的优秀理念和工作。因此，如果您从其他网络开发框架转向Yii，您很可能会发现它很熟悉并且易于操作。
- en: Yii also embraces a *convention over configuration* philosophy, which contributes
    to its ease of use. This means that Yii has sensible defaults for almost all the
    aspects that are used for configuring your application. Following the prescribed
    conventions, you can write less code and spend less time developing your application.
    However, Yii does not force your hand. It allows you to customize all of its defaults
    and makes it easy to override all of these conventions. We will be covering some
    of these defaults and conventions later in this chapter and throughout the book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Yii还秉承着“约定优于配置”的理念，这有助于其易用性。这意味着Yii对于几乎所有用于配置应用程序的方面都有合理的默认值。遵循规定的约定，您可以编写更少的代码，并花费更少的时间开发应用程序。但是，Yii并不强迫您。它允许您自定义所有默认值，并且很容易覆盖所有这些约定。我们将在本章和整本书中介绍一些这些默认值和约定。
- en: Efficient
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高效
- en: Yii is a high-performance, component-based framework that can be used for developing
    web applications on any scale. It encourages maximum code reuse in web programming
    and can significantly accelerate the development process. As mentioned previously,
    if you stick with Yii's built-in conventions, you can get your application up
    and running with little or no manual configuration.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Yii是一个高性能的基于组件的框架，可用于开发任何规模的Web应用程序。它鼓励在Web编程中最大程度地重用代码，并且可以显著加速开发过程。正如之前提到的，如果您遵循Yii的内置约定，您可以几乎不需要手动配置就能让应用程序立即运行起来。
- en: Yii is also designed to help you with *DRY* development. **DRY** stands for
    **Don't Repeat Yourself** , a key concept of agile application development. All
    Yii applications are built using the **Model-View-Controller** (**MVC**) architecture.
    Yii enforces this development pattern by providing a place to keep each piece
    of your MVC code. This minimizes duplication and helps promote code reuse and
    ease of maintainability. The less code you need to write, the less time it takes
    to get your application to market. The easier it is to maintain your application,
    the longer it will stay on the market.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Yii还设计为帮助您进行*DRY*开发。**DRY**代表**不要重复自己**，这是敏捷应用程序开发的一个关键概念。所有Yii应用程序都是使用**模型-视图-控制器**（**MVC**）架构构建的。Yii通过提供一个地方来保存您的MVC代码的每一部分来强制执行这种开发模式。这最小化了重复，并有助于促进代码重用和易于维护。您需要编写的代码越少，将应用程序推向市场所需的时间就越少。应用程序越容易维护，它在市场上的时间就越长。
- en: Of course, the framework is not just efficient to use, it is remarkably fast
    and performance optimized. Yii has been developed with performance optimization
    in mind from the very beginning, and the result is one of the most efficient PHP
    frameworks around. So any additional overhead that Yii adds to applications written
    on top of it is extremely negligible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个框架不仅使用高效，而且速度非常快，性能优化。Yii从一开始就考虑了性能优化，并且结果是PHP框架中最高效的之一。因此，Yii增加到其上的应用程序的任何额外开销都是极其微不足道的。
- en: Extensible
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展
- en: Yii has been carefully designed to allow nearly every piece of its code to be
    extended and customized to meet any project requirement. In fact, it is difficult
    not to take advantage of Yii's ease of extensibility, since a primary activity
    when developing a Yii application is extending the core framework classes. And
    if you want to turn your extended code into useful tools for other developers,
    Yii provides easy-to-follow steps and guidelines to help you create such third-party
    extensions. This allows you to contribute to Yii's ever-growing list of features
    and actively participate in extending Yii itself.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Yii经过精心设计，几乎可以扩展和定制其代码的每一部分，以满足任何项目需求。事实上，很难不利用Yii的可扩展性，因为开发Yii应用程序的主要活动之一就是扩展核心框架类。如果您想将扩展的代码转化为其他开发人员有用的工具，Yii提供了易于遵循的步骤和指南，帮助您创建这样的第三方扩展。这使您能够为Yii不断增长的功能列表做出贡献，并积极参与扩展Yii本身。
- en: Remarkably, this ease-of-use, superior performance, and depth of extensibility
    does not come at the cost of sacrificing its features. Yii is packed with features
    to help you meet those high demands placed on today's web applications. AJAX-enabled
    widgets, RESTful and SOAP Web services integration, enforcement of an MVC architecture,
    DAO and relational ActiveRecord database layer, sophisticated caching, hierarchical
    role-based access control, theming, internationalization (I18N), and localization
    (L10N) are just the tip of the Yii iceberg. As of version 1.1, the core framework
    is now packaged with an official extension library called *Zii*. These extensions
    are developed and maintained by the core framework team members, and continue
    to extend Yii's core feature set. And with a deep community of users who are also
    contributing by writing Yii extensions, the overall feature set available to a
    Yii-powered application is growing daily. A list of available, user-contributed
    extensions on the Yii framework website can be found at [http://www.yiiframework.com/extensions](http://www.yiiframework.com/extensions).
    There is also an *unofficial* extension repository of great extensions that can
    be found at [http://yiiext.github.com/](http://yiiext.github.com/), which really
    demonstrates the strength of the community and the extensibility of this framework.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这种易用性、卓越性能和深度的可扩展性并不是以牺牲其功能为代价的。Yii充满了功能，帮助您满足当今Web应用程序所面临的高要求。支持AJAX的小部件，RESTful和SOAP
    Web服务集成，MVC架构的强制执行，DAO和关系ActiveRecord数据库层，复杂的缓存，分层基于角色的访问控制，主题，国际化（I18N）和本地化（L10N）只是Yii冰山一角。从1.1版本开始，核心框架现在打包了一个官方扩展库，称为*Zii*。这些扩展由核心框架团队成员开发和维护，并继续扩展Yii的核心功能集。并且随着一个庞大的用户社区，他们也通过编写Yii扩展来贡献，Yii应用程序的整体功能集每天都在增长。在Yii框架网站上可以找到可用的用户贡献的扩展列表，网址为[http://www.yiiframework.com/extensions](http://www.yiiframework.com/extensions)。还有一个*非官方*的扩展库，其中包含了一些很棒的扩展，网址为[http://yiiext.github.com/](http://yiiext.github.com/)，这真正展示了社区的力量和这个框架的可扩展性。
- en: MVC architecture
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC架构
- en: As mentioned earlier, Yii is an MVC framework and provides an explicit directory
    structure for each piece of model, view, and controller code. Before we get started
    with building our first Yii application, we need to define a few key terms and
    look at how Yii implements and enforces this MVC architecture.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，Yii是一个MVC框架，并为每个模型、视图和控制器代码的每个部分提供了明确的目录结构。在我们开始构建第一个Yii应用程序之前，我们需要定义一些关键术语，并了解Yii如何实现和强制执行这种MVC架构。
- en: Model
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: Typically in an MVC architecture, the *model* is responsible for maintaining
    the state, and should encapsulate the business rules that apply to the data that
    defines this state. A model in Yii is any instance of the framework class `CModel`
    or its child class. A model class is typically comprised of data attributes that
    can have separate labels (something user friendly for the purpose of display),
    and can be validated against a set of rules defined in the model. The data that
    makes up the attributes in the model class could come from a row of a database
    table or from the fields in a user input form.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在MVC架构中，*模型*负责维护状态，并应该封装适用于定义此状态的数据的业务规则。在Yii中，模型是框架类`CModel`或其子类的任何实例。模型类通常由可以具有单独标签（用于显示目的的用户友好内容）的数据属性组成，并且可以根据模型中定义的一组规则进行验证。构成模型类属性的数据可以来自数据库表的一行，也可以来自用户输入表单中的字段。
- en: Yii implements two kinds of models, namely the form model (a `CFormModel` class)
    and active record (a `CActiveRecord` class). They both extend from the same base
    class `CModel`. The class `CFormModel` represents a data model that collects HTML
    form inputs. It encapsulates all the logic for form field validation, and any
    other business logic that may need to be applied to the form field data. It can
    then store this data in memory or, with the help of an active record model, store
    data in a database.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Yii实现了两种模型，即表单模型（`CFormModel`类）和活动记录（`CActiveRecord`类）。它们都是从同一个基类`CModel`继承而来。`CFormModel`类表示收集HTML表单输入的数据模型。它封装了所有表单字段验证的逻辑，以及可能需要应用于表单字段数据的任何其他业务逻辑。然后它可以将这些数据存储在内存中，或者借助活动记录模型将数据存储在数据库中。
- en: '**Active Record** (**AR**) is a design pattern used to abstract database access
    in an object-oriented fashion. Each AR object in Yii is an instance of `CActiveRecord`
    or its child class, which wraps a single row in a database table or view, that
    encapsulates all the logic and details around database access, and houses much
    of the business logic that is required to be applied to that data. The data field
    values for each column in the table row are represented as properties of the active
    record object. Active Record is described in more detail a little later.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 活动记录（AR）是一种设计模式，用于以面向对象的方式抽象数据库访问。Yii中的每个AR对象都是`CActiveRecord`或其子类的实例，它包装数据库表或视图中的单行数据，封装了所有与数据库访问相关的逻辑和细节，并包含了大部分需要应用于该数据的业务逻辑。表行中每个列的数据字段值都表示为活动记录对象的属性。稍后将更详细地介绍活动记录。
- en: View
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: Typically the *view* is responsible for rendering the user interface, often
    based on the data in the model. A view in Yii is a PHP script that contains user
    interface-related elements, often built using HTML, but can also contain PHP statements.
    Usually, any PHP statements within the view are very simple, conditional or looping
    statements, or refer to other Yii UI-related elements such as HTML helper class
    methods or prebuilt widgets. More sophisticated logic should be separated from
    the view and placed appropriately in either the model, if dealing directly with
    the data, or the controller, for more general business logic.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常*视图*负责呈现用户界面，通常基于模型中的数据。Yii中的视图是一个包含用户界面相关元素的PHP脚本，通常使用HTML构建，但也可以包含PHP语句。通常，视图中的任何PHP语句都非常简单，是条件或循环语句，或者引用其他Yii
    UI相关元素，如HTML助手类方法或预构建小部件。更复杂的逻辑应该与视图分离，并适当放置在模型中（如果直接处理数据）或控制器中（用于更一般的业务逻辑）。
- en: Controller
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: The *controller* is our main director of a routed request, and is responsible
    for taking user input, interacting with the model, and instructing the view to
    update and display appropriately. A controller in Yii is an instance of `CController`
    or a child class thereof. When a controller runs, it performs the requested action,
    which then interacts with the necessary models, and renders an appropriate view.
    An action, in its simplest form, is a controller class method whose name starts
    with the word *action*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*控制器*是我们路由请求的主要指挥官，负责接收用户输入，与模型交互，并指示视图更新和适当显示。Yii中的控制器是`CController`或其子类的实例。当控制器运行时，它执行请求的操作，然后与必要的模型交互，并呈现适当的视图。一个操作，简单来说，就是一个以*action*开头的控制器类方法。'
- en: 'Stitching these together: Yii request routing'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将这些连接在一起：Yii请求路由
- en: 'In MVC implementations, a web request typically has the following life cycle:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在MVC实现中，Web请求通常具有以下生命周期：
- en: The browser sends a request to the server hosting the MVC application
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器向托管MVC应用程序的服务器发送请求
- en: A controller action is invoked to handle the request
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用控制器操作来处理请求
- en: The controller interacts with the model
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器与模型交互
- en: The controller invokes the view
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器调用视图
- en: The view renders the data (often as HTML) and returns it to the browser for
    display
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图呈现数据（通常为HTML）并将其返回给浏览器显示
- en: Yii's MVC implementation is no exception. In a Yii application, incoming requests
    from the browser are first received by a router. The router analyzes the request
    to decide where in the application it should be sent for further processing. In
    most cases, the router identifies a specific action method within a controller
    class to which the request is passed. This action method will look at the incoming
    request data, possibly interact with the model, and perform other needed business
    logic. Eventually, this action method will prepare the response data and send
    it to the view. The view will then format this data to conform to the desired
    layout and design, and return it for the browser to display.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Yii的MVC实现也不例外。在Yii应用程序中，来自浏览器的传入请求首先由路由器接收。路由器分析请求以决定应将其发送到应用程序的何处进行进一步处理。在大多数情况下，路由器会识别控制器类中的特定操作方法，将请求传递给该方法。这个操作方法将查看传入的请求数据，可能与模型交互，并执行其他所需的业务逻辑。最终，这个操作方法将准备好响应数据并发送给视图。视图将格式化这些数据以符合所需的布局和设计，并返回给浏览器显示。
- en: Blog posting example
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 博客发布示例
- en: 'To help all of this make more sense, let''s look at a fictitious example. Let''s
    pretend that we have used Yii to build ourselves a new blog site `http://yourblog.com`.
    This site is like most typical blog sites out there. The home page displays a
    list of recently posted blog posts. The names of each of these blog postings are
    hyperlinks that take the user to the page that displays the full article. The
    following diagram illustrates how Yii handles an incoming request sent from clicking
    on one of these hypothetical blog post links:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解所有这些，让我们看一个虚构的例子。假设我们使用Yii构建了一个新的博客网站`http://yourblog.com`。这个网站与大多数典型的博客网站类似。主页显示最近发布的博客文章列表。每篇博客文章的名称都是超链接，可以将用户带到显示完整文章的页面。以下图表说明了Yii如何处理从点击这些假想博客文章链接发送的传入请求：
- en: '![Blog posting example](graphics/9584_01_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![博客发布示例](graphics/9584_01_01.jpg)'
- en: The figure traces the request that is made from a user clicking on the link:`http://yourblog.com/post/show/id/99`
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该图表跟踪了用户点击链接时发出的请求：`http://yourblog.com/post/show/id/99`
- en: 'First the request is sent to the router. The router parses the request, to
    decide where to send it. The structure of the URL is key to the decision that
    the router will make. By default, Yii recognizes URLs with the following format:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请求被发送到路由器。路由器解析请求，决定将其发送到何处。URL的结构对路由器将做出的决定至关重要。默认情况下，Yii识别以下格式的URL：
- en: '`http://hostname/index.php?r=ControllerID/ActionID`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://hostname/index.php?r=ControllerID/ActionID`'
- en: 'The `r` querystring variable refers to the route that is analyzed by the Yii
    router. It will parse this route to determine the appropriate controller and action
    method, to further handle the request. Now you may have immediately noticed that
    our example URL above does not follow this default format. It is a very simple
    matter of configuring the application to recognize the URLs in the following format:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`r`查询字符串变量指的是Yii路由器分析的路由。它将解析此路由以确定适当的控制器和操作方法，以进一步处理请求。现在您可能立即注意到我们上面的示例URL不遵循此默认格式。这只是一个非常简单的配置应用程序以识别以下格式的URL：'
- en: '`http://hostname/ControllerID/ActionID`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://hostname/ControllerID/ActionID`'
- en: We will continue to use this simplified format for the purposes of this example.
    The `ControllerID` name in the URL refers to the name of the controller. By default
    this is the first part of the controller class name, up to the word `Controller`.
    So for example, if your controller class name is `TestController`, the `ControllerID`
    name would be *test*. `ActionID` similarly refers to the name of the action that
    is defined by the controller. If the action is a simple method defined within
    the controller, this will be whatever follows the word `action` in the method
    name. For example, if your action method is named `actionCreate()`, the `ActionID`
    name is `create`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用这种简化的格式来进行示例。URL中的`ControllerID`名称指的是控制器的名称。默认情况下，这是控制器类名称的第一部分，直到单词`Controller`。例如，如果您的控制器类名称是`TestController`，`ControllerID`名称将是*test*。`ActionID`类似地指的是由控制器定义的操作的名称。如果操作是在控制器内定义的简单方法，那么它将是方法名称中跟在单词`action`后面的任何内容。例如，如果您的操作方法名为`actionCreate()`，`ActionID`名称就是`create`。
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If the `ActionID` is omitted, the controller will take the default action, which
    by convention is a method in the controller called `actionIndex()`. If the `ControllerID`
    is also omitted, the application will use the default controller. The Yii default
    controller is called `SiteController`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果省略了`ActionID`，控制器将采取默认操作，按照约定是控制器中称为`actionIndex()`的方法。如果还省略了`ControllerID`，应用程序将使用默认控制器。Yii默认控制器称为`SiteController`。
- en: Turning back to the example, the router will analyze the URL, `http://yourblog.com/post/show/id/99`,
    and take the first part of the URL path `post` to be the `ControllerID` and the
    second part `show` to be the `ActionID`. This will translate to routing the request
    to the `actionShow()` method within the `PostController` class. The last part
    of the URL, the `id/99` part, is a *name/value* querystring parameter that will
    be available to the method during processing. In this example, the number `99`
    represents the unique internal ID for the selected blog post.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 回到示例，路由器将分析URL`http://yourblog.com/post/show/id/99`，并将URL路径的第一部分`post`作为`ControllerID`，将第二部分`show`作为`ActionID`。这将转换为将请求路由到`PostController`类中的`actionShow()`方法。URL的最后部分，`id/99`部分，是一个*名称/值*查询字符串参数，在处理过程中将可用于该方法。在这个示例中，数字`99`代表所选博客文章的唯一内部ID。
- en: In our fictitious blog application, the `actionShow()` method handles requests
    for specific blog post entries. It uses the querystring variable `id` to determine
    which specific post is being requested. It asks the model to retrieve information
    about blog post entry number 99\. The model AR class interacts with the database
    to retrieve the requested data. After retrieving the data from the model, our
    controller further prepares it for display by making it available to the view.
    The view is then responsible for handling the data layout and providing a response
    back to the browser for user display.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们虚构的博客应用程序中，`actionShow()`方法处理特定博客文章条目的请求。它使用查询字符串变量`id`来确定请求的特定文章。它要求模型检索有关博客文章条目编号99的信息。模型AR类与数据库交互以检索所请求的数据。在从模型检索数据后，我们的控制器通过使其可用于视图来进一步准备数据以供显示。视图然后负责处理数据布局，并向浏览器提供响应以供用户显示。
- en: This MVC architecture allows us to separate our data presentation from our data
    manipulation, validation, and other application business logic. This makes it
    very easy for developers to change aspects of the application without affecting
    the UI, and for UI designers to freely make changes without affecting the model
    or business logic. This separation also makes it very easy to provide multiple
    presentations of the same model code. For example, you could use the same model
    code that drives the HTML layout of `http://yourblog.com` to drive an RIA presentation,
    a mobile application, web services, or a command-line interface. In the end, following
    these set conventions and separating the functionality will result in an application
    that is much easier to extend and maintain.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这种MVC架构允许我们将数据呈现与数据操作、验证和其他应用程序业务逻辑分开。这使得开发人员非常容易改变应用程序的各个方面而不影响UI，UI设计人员也可以自由地进行更改而不影响模型或业务逻辑。这种分离还使得非常容易提供同一模型代码的多个呈现方式。例如，您可以使用驱动`http://yourblog.com`的HTML布局的相同模型代码来驱动RIA呈现、移动应用程序、Web服务或命令行界面。最终，遵循这些约定并分离功能将导致一个更容易扩展和维护的应用程序。
- en: Yii does a lot more to help you enforce this separation, than simply providing
    some naming conventions and suggestions for where your code should be placed.
    It helps to take care of all the lower-level, "glue" code needed to stitch all
    the pieces together. This allows you to reap the benefits of a strict MVC designed
    application without having to spend all the time in coding the details yourself.
    Let's take a look at some of these lower-level details.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Yii做了很多工作来帮助您执行这种分离，不仅仅提供一些命名约定和代码放置建议。它有助于处理所有需要将所有部分粘合在一起的低级"胶水"代码。这使您能够在不必自己编写所有细节的情况下获得严格的MVC设计应用程序的好处。让我们来看看其中一些低级细节。
- en: Object-relational mapping and Active Record
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象关系映射和Active Record
- en: For the most part, the web applications we build house their data in a relational
    database. The blog posting application we used in the previous example holds blog
    post content in database tables. However, web applications need the data that
    is held in the persistent database storage to be mapped to in-memory class properties
    that define the domain objects. **Object-relational mapping** (**ORM**) libraries
    provide this mapping of database tables to domain object classes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在很大程度上，我们构建的Web应用程序将其数据存储在关系数据库中。我们在上一个示例中使用的博客帖子应用程序将博客帖子内容存储在数据库表中。然而，Web应用程序需要将持久数据库存储中的数据映射到定义域对象的内存类属性中。**对象关系映射**（**ORM**）库提供了将数据库表映射到域对象类的功能。
- en: Much of the code that deals with ORM is about describing how fields in the database
    correspond to properties in our in-memory objects, and is tedious and repetitive
    to write. Luckily, Yii comes to the rescue and saves us from this repetition and
    tedium by providing an ORM layer in the form of the Active Record (AR) pattern.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 处理ORM的大部分代码都是关于描述数据库中的字段如何对应到我们内存对象的属性，并且编写起来是乏味和重复的。幸运的是，Yii通过提供Active Record（AR）模式的ORM层来拯救我们，使我们免受这种重复和乏味。
- en: Active Record
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Active Record
- en: As previously mentioned, AR is a design pattern used to abstract database access
    in an object-oriented fashion. It maps tables to classes, rows to objects, and
    columns to class properties. In other words, each instance of an Active Record
    class represents a single row in a database table. However, an AR class is more
    than just a set of attributes that are mapped to columns in a database table.
    It also houses the necessary business logic to be applied to that data. The end
    result is a class that defines everything about how it should be written to and
    read from the database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，AR是一种用于以面向对象的方式抽象数据库访问的设计模式。它将表映射到类，行映射到对象，列映射到类属性。换句话说，每个Active Record类的实例代表数据库表中的一行。然而，AR类不仅仅是一组属性，这些属性映射到数据库表中的列。它还包含应用于该数据的必要业务逻辑。最终结果是一个定义了如何写入和从数据库中读取的类。
- en: 'By relying on convention and sticking with reasonable defaults, Yii''s implementation
    of AR will save the developer a ton of time that might otherwise be spent in configuration,
    or in writing the tedious and repetitive SQL statements required to create, read,
    update, and delete data. It also allows the developer to access data stored in
    the database in an object-oriented manner. To illustrate this, let''s take our
    fictitious blog example once again. The following is some example code that uses
    AR to operate on a specific blog posting, whose internal ID, which is also used
    as the table''s primary key, is `99`. It first retrieves the posting by using
    the primary key. It then changes the title and updates the database to save the
    changes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过依赖约定并坚持合理的默认设置，Yii对AR的实现将节省开发人员大量时间，否则可能会花在配置上，或者编写创建、读取、更新和删除数据所需的乏味重复的SQL语句上。它还允许开发人员以面向对象的方式访问存储在数据库中的数据。为了说明这一点，让我们再次以我们虚构的博客示例为例。以下是一些使用AR操作特定博客帖子的示例代码，其内部ID（也用作表的主键）为`99`。它首先通过使用主键检索帖子。然后更改标题并更新数据库以保存更改：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Active Record completely relieves us of the tedium of having to write any SQL
    code or to otherwise deal with the underlying database.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Active Record完全解除了我们编写任何SQL代码或以其他方式处理底层数据库的乏味。
- en: In fact, active record in Yii does even more than this. It integrates seamlessly
    with many other aspects of the Yii framework. There are many "active" HTML helper
    input form fields that tie directly to their respective AR class attributes. In
    this way, AR extracts the input form field values directly into the model. It
    also supports sophisticated, automated data validation, and if the validation
    fails, the Yii view classes easily display the validation errors to the end user.
    We will be revisiting AR and providing concrete examples many times throughout
    this book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，Yii中的Active Record甚至做得更多。它与Yii框架的许多其他方面无缝集成。有许多"活动"HTML助手输入表单字段直接与它们各自的AR类属性相关联。通过这种方式，AR直接提取输入表单字段的值到模型中。它还支持复杂的自动数据验证，如果验证失败，Yii视图类可以轻松地将验证错误显示给最终用户。我们将在本书中多次重新访问AR并提供具体示例。
- en: The view and controller
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图和控制器
- en: The view and the controller are very close cousins. The controller makes available
    the data for display to the view, and the view generates pages that trigger events
    that send data to the controller.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 视图和控制器非常密切相关。控制器使数据可供视图显示，视图生成页面触发事件，将数据发送到控制器。
- en: In Yii, a view file belongs to the controller class that rendered it. In this
    way, we can access the controller instance by simply referring to `$this` inside
    a view script. This implementation makes the view and controller very intimate
    indeed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中，视图文件属于呈现它的控制器类。通过这种方式，我们可以在视图脚本中简单地引用`$this`来访问控制器实例。这种实现方式使视图和控制器非常密切。
- en: When it comes to Yii controllers, there is a lot more to the story than just
    calling the model and rendering views. Controllers can manage services to provide
    sophisticated pre and postprocessing on requests, implement basic access control
    rules to limit access to certain actions, manage application-wide layout and nested
    layout file rendering, manage pagination of data, and many other behind-the-scenes
    services. Again, we have Yii to thank for not having to get our hands dirty with
    these messy details.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到Yii控制器时，故事远不止调用模型和渲染视图那么简单。控制器可以管理服务，以提供对请求的复杂预处理和后处理，实现基本的访问控制规则以限制对某些操作的访问，管理应用程序范围的布局和嵌套布局文件的渲染，管理数据的分页，以及许多其他幕后服务。再次感谢Yii，让我们不必为这些混乱的细节而费心。
- en: There is a lot to Yii. The best way to explore all its beauty is to start using
    it. Now that we have some of the very basic ideas and terminology under our belt,
    we are in a great position to do just that.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Yii有很多内容。探索它所有美丽的最佳方式就是开始使用它。现在我们已经掌握了一些非常基本的想法和术语，我们有很好的条件来做到这一点。
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we were introduced at a very high-level to the Yii PHP Web
    application framework. We also covered a number of software design concepts embraced
    by Yii. Don''t worry if the abstract nature of this initial discussion was a tad
    lost on you. It will all make sense once we dive into specific examples. But to
    recap, we specifically covered:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在很高的层次上介绍了Yii PHP Web应用程序框架。我们还涵盖了Yii所采用的许多软件设计概念。如果你对这次初步讨论的抽象性有些困惑，不要担心。一旦我们深入具体的例子，一切都会变得清晰起来。但总结一下，我们具体涵盖了：
- en: The importance and utility of application development frameworks
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序开发框架的重要性和实用性
- en: What Yii is and the characteristics of Yii that make it incredibly powerful
    and useful
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yii是什么，以及使Yii变得非常强大和有用的特点。
- en: MVC application architecture and the implementation of this architecture in
    Yii
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC应用程序架构以及在Yii中实现此架构
- en: A typical Yii web request life cycle and URL structure
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的Yii Web请求生命周期和URL结构
- en: Object-relational mapping and Active Record in Yii
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yii中的对象关系映射和Active Record
- en: In the next chapter, we will go through the simple Yii installation process
    and start building a working application to better illustrate all of these ideas.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过简单的Yii安装过程，并开始构建一个工作应用程序，以更好地阐述所有这些想法。
