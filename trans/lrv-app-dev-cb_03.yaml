- en: Chapter 3. Authenticating Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。验证您的应用程序
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Setting up and configuring the Auth library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和配置Auth库
- en: Creating an authentication system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个身份验证系统
- en: Retrieving and updating user info after logging in
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在登录后检索和更新用户信息
- en: Restricting access to certain pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制对某些页面的访问
- en: Setting up OAuth with the HybridAuth package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置OAuth与HybridAuth包
- en: Using OpenID for logins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OpenID进行登录
- en: Logging in using Facebook credentials
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Facebook凭据登录
- en: Logging in using Twitter credentials
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Twitter凭据登录
- en: Logging in using LinkedIn
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LinkedIn登录
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Many modern web applications include some way for users to register and log
    in. To make sure our application and our users' information is secure, we need
    to make sure that each user is properly authenticated. Laravel includes a great
    `Auth` class that makes this task very easy to accomplish. In this chapter, we'll
    begin with setting up our own authentication system, and move on to using third-party
    authentication in our Laravel app.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代网络应用程序都包括用户注册和登录的方式。为了确保我们的应用程序和用户信息的安全，我们需要确保每个用户都经过适当的身份验证。Laravel包括一个很棒的`Auth`类，使得这个任务非常容易完成。在本章中，我们将从设置我们自己的身份验证系统开始，然后转向在我们的Laravel应用程序中使用第三方身份验证。
- en: Setting up and configuring the Auth library
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置和配置Auth库
- en: To use Laravel's authentication system, we need to make sure it's set up correctly.
    In this recipe, we'll see a common way to accomplish the setup.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Laravel的身份验证系统，我们需要确保它设置正确。在这个食谱中，我们将看到一种常见的完成设置的方式。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To set up the authentication, we just need to have Laravel installed and a MySQL
    instance running.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置身份验证，我们只需要安装Laravel并运行一个MySQL实例。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To complete this recipe, follow these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: 'Go into your `app/config/session.php` config file and make sure it''s set to
    use `native`:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入您的`app/config/session.php`配置文件，并确保它设置为使用`native`：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `app/config/auth.php` config file defaults should be fine but make sure
    they are set as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`app/config/auth.php`配置文件的默认设置应该是可以的，但确保它们设置如下：'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In MySQL, create a database named as `authapp` and make sure the settings are
    correct in the `app/config/database.php` config file. The following are the settings
    that we''ll be using:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MySQL中，创建一个名为`authapp`的数据库，并确保在`app/config/database.php`配置文件中设置正确。以下是我们将使用的设置：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We''ll set up our `Users` table using migrations and the Schema builder with
    the Artisan command line, so we need to create our migrations table:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用迁移和Schema构建器以及Artisan命令行来设置我们的`Users`表，因此我们需要创建我们的迁移表：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create the migration for our `Users` table:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的`Users`表创建迁移：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `app/database/migrations` directory, there will be a new file that has
    the date followed by `create_users_table.php` as the filename. In that file, we
    create our table:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/database/migrations`目录中，将会有一个新文件，文件名是日期后跟着`create_users_table.php`。在那个文件中，我们创建我们的表：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the migration in Artisan to create our table and everything should be set
    up:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Artisan中运行迁移来创建我们的表，一切都应该设置好了：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Authentication uses sessions to store user information, so we first need to
    make sure our Sessions are configured correctly. There are various ways to store
    sessions, including using the database or Redis, but for our purpose we'll just
    use the `native` driver, which leverages Symfony's native session driver.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证使用会话来存储用户信息，因此我们首先需要确保我们的会话配置正确。有各种各样的方式来存储会话，包括使用数据库或Redis，但是为了我们的目的，我们将只使用`native`驱动程序，它利用了Symfony的原生会话驱动程序。
- en: When setting up the auth configuration, we'll be using the Eloquent ORM as our
    driver, an e-mail address as our username, and the model will be User. Laravel
    ships with a default User model and it works very well out of the box, so we'll
    use it. For the sake of simplicity, we'll stick with the default configuration
    of the table name, a pluralized version of the model class name, but we could
    customize it if we wanted.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置身份验证配置时，我们将使用Eloquent ORM作为我们的驱动程序，电子邮件地址作为我们的用户名，模型将是User。Laravel附带了一个默认的User模型，并且它在开箱即用时非常好用，所以我们将使用它。为了简单起见，我们将坚持使用表名的默认配置，即模型类名的复数形式，但是如果我们想要的话，我们可以自定义它。
- en: Once we make sure our database configuration is set, we can use Artisan to create
    our migrations. In our migration, we'll create our user's table, and store the
    e-mail address, password, a name, and a boolean field to store whether the user
    is an admin or not. Once that's complete, we run the migration, and our database
    will be set up to build our authentication system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确保我们的数据库配置设置正确，我们就可以使用Artisan来创建我们的迁移。在我们的迁移中，我们将创建我们的用户表，并存储电子邮件地址、密码、姓名和一个布尔字段来存储用户是否是管理员。完成后，我们运行迁移，我们的数据库将设置好来构建我们的身份验证系统。
- en: Creating an authentication system
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建身份验证系统
- en: In this recipe, we'll be creating a simple authentication system. It can be
    used as it is or extended to include much more functionality.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将创建一个简单的身份验证系统。它可以直接使用，也可以扩展以包括更多的功能。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the code created in the *Setting up and configuring the Auth
    library* recipe as the basis for our authentication system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用*设置和配置Auth库*食谱中创建的代码作为我们身份验证系统的基础。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To finish this recipe, follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: 'Create a route in our `routes.php` file to hold our registration form:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中创建一个路由来保存我们的注册表单：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a registration form by creating a new file in `app/views` named as `registration.php`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`app/views`中创建一个名为`registration.php`的新文件来创建一个注册表单：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Make a route to process the registration page:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由来处理注册页面：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Make a simple page for your profile by adding a route in `routes.php`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`routes.php`中添加一个路由来为您的个人资料创建一个简单的页面：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a login route in `routes.php` to hold the login form:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中创建一个登录路由来保存登录表单：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In our `app/views` directory, create a file named `login.php`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/views`目录中，创建一个名为`login.php`的文件：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a route in `routes.php` to authenticate the login:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中创建一个路由来验证登录：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a route in `routes.php` that is a secured page:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中创建一个安全页面的路由：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To begin with, we create a fairly simple registration system. In our registration
    form, we'll be asking for an e-mail address, password, password confirmation,
    a name, and then an option for whether the user is an admin. In the form fields,
    we also add `Input::old()`; thus, if the form doesn't validate correctly, we can
    repopulate the fields without needing the user to re-enter all the information.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个相当简单的注册系统。在我们的注册表单中，我们将要求输入电子邮件地址、密码、密码确认、姓名，以及用户是否是管理员的选项。在表单字段中，我们还添加了`Input::old()`；因此，如果表单验证不正确，我们可以重新填充字段，而无需用户重新输入所有信息。
- en: Our form then posts, adding in the CSRF filter, and runs through some validation.
    If the validation passes, we create a new instance of our User model and add in
    the fields from our form. For the password, we use `Hash::make()` to keep the
    password secure. Since our admin field accepts a boolean value, we see if the
    admin checkbox was checked; if so, we set the value to `1`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们的表单提交，添加CSRF过滤器，并进行一些验证。如果验证通过，我们就创建一个新的User模型实例，并添加表单中的字段。对于密码，我们使用`Hash::make()`来保护密码安全。由于我们的admin字段接受布尔值，我们检查admin复选框是否被选中；如果是，我们将值设置为`1`。
- en: If everything is saved correctly, we can automatically log in the user by passing
    the just created user ID to `Auth::loginUsingId()`, and redirect them to the profile
    page.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切保存正确，我们可以通过将刚创建的用户ID传递给`Auth::loginUsingId()`来自动登录用户，并将他们重定向到profile页面。
- en: The first thing the profile route does is run `Auth::check()` to see if the
    user is actually logged in. If he/she isn't, it will display a link to the login
    page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: profile路由的第一件事是运行`Auth::check()`来查看用户是否真的已登录。如果没有，它将显示一个链接到登录页面。
- en: The login page is a simple form asking for e-mail ID and password. When submitted,
    we put those two values in an array and pass them to `Auth::attempt()`, which
    will automatically hash our password, and look up the credentials in the database.
    If it's successful, the `Auth` class will set a session and we redirect the user
    to the profile page.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面是一个简单的表单，要求输入电子邮件ID和密码。提交后，我们将这两个值放入一个数组中，并将它们传递给`Auth::attempt()`，它将自动对我们的密码进行哈希处理，并在数据库中查找凭据。如果成功，`Auth`类将设置一个会话，并将用户重定向到profile页面。
- en: If the user happens to try and access the *secured* routes, the system will
    direct them to the login page. Using Laravel's `Redirect::intended()`, we can
    then direct them back to the page they originally tried to access.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户尝试访问*安全*路由，系统将把他们重定向到登录页面。使用Laravel的`Redirect::intended()`，我们可以将他们重定向回他们最初尝试访问的页面。
- en: See also
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Setting up and configuring the Auth library* recipe
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设置和配置Auth库*示例'
- en: Retrieving and updating user info after logging in
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在登录后检索和更新用户信息
- en: After a user is logged in, we will need to get the information we have about
    him/her. In this recipe, we'll see how to get that information.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 用户登录后，我们需要获取关于他/她的信息。在这个示例中，我们将看到如何获取这些信息。
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the code created in the *Setting up and configuring the Auth
    library* and *Creating an authentication system* recipes as the basis for this
    recipe.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用*设置和配置Auth库*和*创建身份验证系统*示例中创建的代码作为此示例的基础。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'Update the profile route with this code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新profile路由：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create our profile view in the `app/views` directory by creating a file named
    as `profile.php`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`app/views`目录中创建一个名为`profile.php`的文件来创建我们的profile视图：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Make a route to hold our form to edit the information:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由来保存我们的表单以编辑信息：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a view for our edit form:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的编辑表单创建一个视图：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Make a route to process the form:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个处理表单的路由：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To get our user's information and allow him/her to update it, we start by reworking
    on our profile route. We create a profile view and pass `Auth::user()` to it in
    the variable `$user`. Then, in the view file, we simply echo out any of the information
    we collected. We're also creating a link to a page where the user can edit his/her
    information.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取用户的信息并允许他/她更新信息，我们首先重新设计我们的profile路由。我们创建一个profile视图，并将`Auth::user()`传递给变量`$user`。然后，在视图文件中，我们简单地输出我们收集到的任何信息。我们还创建了一个链接到一个页面，用户可以在该页面编辑他/她的信息。
- en: Our profile edit page first checks to make sure the user is logged in. If so,
    we want to populate the `$user` variable. Since we'll redisplay the form if there
    is a validation error, we first check if there's anything in `Input::old()`. If
    not, this is probably a new visit to the page, so we just use `Auth::user()`.
    If `Input::old()` is being used, we'll recast it as an object, since it's normally
    an array, and use that in our `$user` variable.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的profile编辑页面首先检查用户是否已登录。如果是，我们希望填充`$user`变量。由于如果有验证错误，我们将重新显示表单，所以我们首先检查`Input::old()`中是否有任何内容。如果没有，这可能是页面的新访问，所以我们只使用`Auth::user()`。如果正在使用`Input::old()`，我们将将其重新转换为对象，因为它通常是一个数组，并在我们的`$user`变量中使用它。
- en: Our edit view form is very similar to our registration form, except that, if
    we're logged in, the form is already populated.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的编辑视图表单与注册表单非常相似，只是如果我们已登录，表单已经被填充。
- en: When the form is submitted, it is run through some validation. If everything
    is valid, we need to get the User from the database, using `User::find()` and
    the user ID that's stored in `Auth::user()`. We then add our form input to the
    user object. With the password field, if it was left empty, we can assume that
    the user didn't want to change it. So we'll only update the password if something
    was already entered.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，它会经过一些验证。如果一切有效，我们需要从数据库中获取用户，使用`User::find()`和存储在`Auth::user()`中的用户ID。然后我们将我们的表单输入添加到用户对象中。对于密码字段，如果它为空，我们可以假设用户不想更改它。因此，我们只有在已经输入了内容时才会更新密码。
- en: Finally, we save the user information and redirect him/her back to the profile
    page.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们保存用户信息并将其重定向回个人资料页面。
- en: There's more...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The e-mail value in our database will probably need to be unique. For this recipe,
    we might want to do a quick check of the user's table, and make sure the e-mail
    address being updated isn't used somewhere else.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们数据库中的电子邮件值可能需要是唯一的。对于本步骤，我们可能需要快速检查用户表，并确保正在更新的电子邮件地址没有在其他地方使用。
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating an authentication system* recipe
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建身份验证系统*的步骤'
- en: Restricting access to certain pages
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制对某些页面的访问
- en: In this recipe, we'll explore how to restrict access to various pages in our
    app. This way, we can make pages viewable to only those with the correct credentials.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本步骤中，我们将探讨如何限制对应用程序中各种页面的访问。这样，我们可以使页面只对具有正确凭据的用户可见。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the code created in the *Setting up and configuring the Auth
    library* and *Creating an authentication system* recipes as the basis for this
    recipe.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用*设置和配置Auth库*和*创建身份验证系统*的步骤中创建的代码作为本步骤的基础。
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: 'Create a filter in our `filters.php` file that checks for logged-in users.
    The default Laravel `auth` filter will be fine:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`filters.php`文件中创建一个检查已登录用户的过滤器。默认的Laravel`auth`过滤器就可以了：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a filter in `filter.php` for checking if a user is an admin:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`filter.php`中创建一个用于检查用户是否为管理员的过滤器：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Make a route that we restrict to logged-in users:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个我们限制给已登录用户的路由：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Make a route that is restricted to admins:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个只限管理员访问的路由：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Filters are a powerful part of Laravel and can be used to simplify many tasks.
    The default `auth` filter that comes with Laravel simply checks if a user is logged
    in or not and, if not, redirects him/her to the login page. In our `restricted`
    route, we add the `auth` filter to run before the function is executed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器是Laravel的一个强大部分，可以用来简化许多任务。Laravel默认的`auth`过滤器只是简单地检查用户是否已登录，如果没有，则将其重定向到登录页面。在我们的`restricted`路由中，我们添加`auth`过滤器在函数执行之前运行。
- en: Our `auth_admin` filter checks to make sure the user is logged in and also checks
    if the user is set as `admin`. If not, he/she is redirected back to the normal
    restricted page.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`auth_admin`过滤器用于确保用户已登录，并检查用户是否设置为`admin`。如果没有，他/她将被重定向回普通的受限页面。
- en: Setting up OAuth with the HybridAuth package
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HybridAuth包设置OAuth
- en: There may be times when we don't want to worry about storing users' passwords.
    In that case, OAuth has become a popular alternative that allows us to authenticate
    a user based on a third-party service such as Facebook or Twitter. This recipe
    will show how to set up the `HybridAuth` package to make OAuth easy.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们可能不想担心存储用户的密码。在这种情况下，OAuth已经成为一个流行的选择，它允许我们基于第三方服务（如Facebook或Twitter）对用户进行身份验证。本步骤将展示如何设置`HybridAuth`包以简化OAuth。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation and a way to access
    the command-line interface, so we can use the Artisan command-line utility.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本步骤，我们需要一个标准的Laravel安装和一种访问命令行界面的方法，以便我们可以使用Artisan命令行实用程序。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: 'Open our app''s `composer.json` file and add HybridAuth to the `require` section,
    so it should look like this:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们应用的`composer.json`文件，并将HybridAuth添加到`require`部分，使其看起来像这样：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the command-line interface, update composer as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行界面中，按以下方式更新composer：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `app/config` directory, create a new file named as `oauth.php`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中，创建一个名为`oauth.php`的新文件：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We begin by adding the HybridAuth package to our composer files. Now, when we
    update composer, it will automatically download the package and install it for
    us. From then on, we can use the library throughout our app.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要将HybridAuth包添加到我们的composer文件中。现在，当我们更新composer时，它将自动下载并安装该包。从那时起，我们可以在整个应用程序中使用该库。
- en: 'Our next step is to set up a configuration file. This file begins with a URL
    to which the authentication site will send the user back. That URL should be routed
    to either a route or controller where we''ll run HybridAuth and do the actual
    authentication. Finally, we need to add in our credentials for the sites we want
    to authenticate against. A full list of sites can be found at the HybridAuth site:
    [http://hybridauth.sourceforge.net/userguide.html](http://hybridauth.sourceforge.net/userguide.html).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是设置一个配置文件。该文件以一个URL开头，身份验证站点将向该URL发送用户。该URL应该路由到我们将运行HybridAuth并进行实际身份验证的路由或控制器。最后，我们需要添加我们要对抗进行身份验证的站点的凭据。可以在HybridAuth网站上找到完整的站点列表：[http://hybridauth.sourceforge.net/userguide.html](http://hybridauth.sourceforge.net/userguide.html)。
- en: Using OpenID for logins
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenID进行登录
- en: If we don't want to store our users' passwords in our application, there are
    other authentication methods that use third parties, such as OAuth and OpenID.
    In this recipe, we'll use OpenID to log in our users.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想在我们的应用程序中存储用户的密码，还有其他使用第三方的身份验证方法，比如OAuth和OpenID。在本步骤中，我们将使用OpenID来登录我们的用户。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have a standard installation of Laravel and complete
    the *Setting up OAuth with the HybridAuth package* recipe.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本步骤，我们需要一个标准的Laravel安装，并完成*使用HybridAuth包设置OAuth*的步骤。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: 'In our `app/config` directory, create a new file named as `openid_auth.php`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/config`目录中，创建一个名为`openid_auth.php`的新文件：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In our `routes.php` file, create a route to hold our login form:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，创建一个路由来保存我们的登录表单：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In our `app/views` directory, create a new view named as `login.php`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/views`目录中，创建一个名为`login.php`的新视图：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In `routes.php`, create the route to run the authentication:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，创建用于运行身份验证的路由：
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We start by creating a config file for the HybridAuth library, setting the URL
    where the user will be redirected after authentication, and enabling OpenID.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个HybridAuth库的配置文件，设置用户在身份验证后将被重定向的URL，并启用OpenID。
- en: Next, we create route and a view where the user can enter the OpenID URL they
    want to use. A popular one is that of Google, so we suggest using the URL [https://www.google.com/accounts/o8/id](https://www.google.com/accounts/o8/id)
    or even have it automatically set as a value in the form.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个路由和一个视图，用户可以在其中输入他们想要使用的OpenID URL。一个流行的URL是Google的URL，所以我们建议使用URL[https://www.google.com/accounts/o8/id](https://www.google.com/accounts/o8/id)，甚至可以自动将其设置为表单中的一个值。
- en: After submitting the form, we should be directed to the authentication system
    of the OpenID site and then redirected back to our site. There, we can show the
    user's name, and e-mail ID, and show all the information that was sent back.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 提交表单后，我们应该被引导到OpenID网站的身份验证系统，然后重定向回我们的网站。在那里，我们可以显示用户的姓名和电子邮件ID，并显示所有发送回来的信息。
- en: There's more...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Much more information about what OpenID offers is available at [http://openid.net/developers/specs/](http://openid.net/developers/specs/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有关OpenID提供的更多信息，请访问[http://openid.net/developers/specs/](http://openid.net/developers/specs/)。
- en: Logging in using Facebook credentials
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Facebook凭据登录
- en: If we don't want to worry about storing a user's information and credentials,
    we could use OAuth to authenticate with another service. One of the most popular
    is using Facebook for logins. With Laravel and the HybridAuth library, we can
    easily implement OAuth authentication with Facebook.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想担心存储用户的信息和凭据，我们可以使用OAuth来与另一个服务进行身份验证。其中一个最受欢迎的是使用Facebook进行登录。使用Laravel和HybridAuth库，我们可以轻松地实现与Facebook的OAuth身份验证。
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have the HybridAuth package installed and set up
    as in the *Setting up OAuth with the HybridAuth package* recipe.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要安装HybridAuth包，并按照*使用HybridAuth包设置OAuth*的步骤进行设置。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: Create a new App at [https://developers.facebook.com](https://developers.facebook.com).
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://developers.facebook.com](https://developers.facebook.com)创建一个新的应用程序。
- en: 'Get the App ID and App Secret keys, and in the `app/config` directory, create
    a file named as `fb_auth.php`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取App ID和App Secret密钥，在`app/config`目录中创建一个名为`fb_auth.php`的文件：
- en: '[PRE31]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a route in `routes.php` to hold our Facebook login button:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中创建一个用于我们的Facebook登录按钮的路由：
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Make a route to process the login information and display it:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由来处理登录信息并显示它：
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After getting our Facebook API credentials, we need to create a configuration
    file with those credentials and our callback URL. We also need to pass in the
    scope, which is any extra permission we might want from our user. In this case,
    we're just going to get their e-mail ID.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 获取我们的Facebook API凭据后，我们需要创建一个包含这些凭据和回调URL的配置文件。我们还需要传递作用域，这是我们可能想要从用户那里获得的任何额外权限。在这种情况下，我们只是要获取他们的电子邮件ID。
- en: Our facebook login page is a simple link to a route where we do the authentication.
    The user will then be taken to Facebook to login and/or authorize our site, and
    then redirected back to our `fbauth` route.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Facebook登录页面是一个简单的链接到一个路由，我们在那里进行身份验证。然后用户将被带到Facebook进行登录和/或授权我们的网站，然后重定向回我们的`fbauth`路由。
- en: At this point, we're just displaying the information that was returned, but
    we'd also probably want to save the information to our own database.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们只是显示返回的信息，但我们可能也想将信息保存到我们自己的数据库中。
- en: There's more...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If we're testing this on our local computer using something like MAMP or WAMP,
    Facebook allows us to use the callback URL of localhost.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在本地计算机上使用MAMP或WAMP进行测试，Facebook允许我们使用localhost作为回调URL。
- en: Logging in using Twitter credentials
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Twitter凭据登录
- en: If we don't want to worry about storing the user's information and credentials,
    we could use OAuth to authenticate with another service. A popular service to
    use for logins is Twitter. With Laravel and the HybridAuth library, we can easily
    implement OAuth authentication with Twitter.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想担心存储用户的信息和凭据，我们可以使用OAuth来与另一个服务进行身份验证。一个常用的用于登录的服务是Twitter。使用Laravel和HybridAuth库，我们可以轻松地实现与Twitter的OAuth身份验证。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have the HybridAuth package installed and set up
    as in the *Setting up OAuth with the HybridAuth package* recipe.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要安装HybridAuth包，并按照*使用HybridAuth包设置OAuth*的步骤进行设置。
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: Create a new app at [https://dev.twitter.com/apps](https://dev.twitter.com/apps).
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://dev.twitter.com/apps](https://dev.twitter.com/apps)创建一个新的应用程序。
- en: 'Get the Consumer Key and the Consumer Secret, and in the `app/config` directory,
    create a file named as `tw_auth.php`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取Consumer Key和Consumer Secret，并在`app/config`目录中创建一个名为`tw_auth.php`的文件：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a route in `routes.php` for our Twitter login button:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中创建一个用于我们的Twitter登录按钮的路由：
- en: '[PRE35]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Make a route to process the Twitter information:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由来处理Twitter信息：
- en: '[PRE36]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After getting our Twitter API credentials, we need to create a configuration
    file with those credentials and our callback URL.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 获取我们的Twitter API凭据后，我们需要创建一个包含这些凭据和回调URL的配置文件。
- en: We then make a Twitter login view, which is a simple link to a route where we
    do the authentication. The user will then be taken to Twitter to login and/or
    authorize our site, and then redirected back to our `twauth` route. Here, we get
    their display name and their Twitter icon.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个Twitter登录视图，这是一个简单的链接到一个路由，我们在那里进行身份验证。然后用户将被带到Twitter进行登录和/或授权我们的网站，然后重定向回我们的`twauth`路由。在这里，我们获取他们的显示名称和他们的Twitter图标。
- en: At this point, we're just displaying the information that was returned, but
    we'd also probably want to save the information to our own database.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们只是显示返回的信息，但我们可能也想将信息保存到我们自己的数据库中。
- en: There's more...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If we're testing this on our local computer using something like MAMP or WAMP,
    Twitter will NOT allow a callback URL of localhost, but we can use `127.0.0.1`
    in its place.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在本地计算机上使用类似MAMP或WAMP的东西进行测试，Twitter将不允许使用localhost作为回调URL，但我们可以使用`127.0.0.1`代替。
- en: Logging in using LinkedIn
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LinkedIn进行登录
- en: If we don't want to worry about storing user's information and credentials,
    we could use OAuth to authenticate with another service. A popular service to
    use for logins, especially for business applications, is LinkedIn. With Laravel
    and the `HybridAuth` library, we can easily implement OAuth authentication with
    LinkedIn.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想担心存储用户信息和凭据，我们可以使用OAuth来验证另一个服务。一个常用的用于登录的服务，特别是用于商业应用程序的服务，是LinkedIn。使用Laravel和`HybridAuth`库，我们可以轻松地实现与LinkedIn的OAuth验证。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have the HybridAuth package installed and set up
    as in the *Setting up OAuth with the HybridAuth package* recipe.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要安装并设置HybridAuth包，就像在*使用HybridAuth包设置OAuth*步骤中一样。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行操作：
- en: Create a new app at [https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer).
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer)创建一个新的应用程序。
- en: 'Get the API Key and the Secret Key, and in the `app/config` directory, create
    a file named `li_auth.php`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取API密钥和秘密密钥，在`app/config`目录中创建一个名为`li_auth.php`的文件：
- en: '[PRE37]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a route in `routes.php` for our LinkedIn login button:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中创建一个用于LinkedIn登录按钮的路由：
- en: '[PRE38]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Make a route to process the LinkedIn information:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个处理LinkedIn信息的路由：
- en: '[PRE39]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After getting our LinkedIn API credentials, we need to create a configuration
    file with those credentials and our callback URL.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 获得我们的LinkedIn API凭据后，我们需要创建一个包含这些凭据和回调URL的配置文件。
- en: We then make a LinkedIn login view, with a simple link to a route where we do
    the LinkedIn authentication. The user will then be taken to the LinkedIn site
    to login and/or authorize our site, and then redirected back to our `liauth` route.
    Here, we get their first name, last name, e-mail ID, and their avatar.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个LinkedIn登录视图，其中包含一个简单的链接到一个路由，我们在这个路由中进行LinkedIn验证。用户将被带到LinkedIn网站进行登录和/或授权我们的网站，然后重定向回我们的`liauth`路由。在这里，我们获取他们的名字、姓氏、电子邮件ID和他们的头像。
- en: At this point, we're just displaying the information that was returned, but
    we'd also probably want to save the information to our own database.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们只是显示返回的信息，但我们可能也想将信息保存到我们自己的数据库中。
