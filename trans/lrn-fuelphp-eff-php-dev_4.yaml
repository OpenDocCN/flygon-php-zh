- en: Chapter 4. Demo Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。演示应用程序
- en: Now that we are through with the introduction to the FuelPHP framework, it's
    time to build something. We will run through the Oil command-line tool migration,
    putting it all together in the example application. In this chapter we will be
    creating a simple blogging application much like WordPress.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了FuelPHP框架，是时候开始构建一些东西了。我们将通过Oil命令行工具迁移，将所有内容整合到示例应用程序中。在本章中，我们将创建一个类似WordPress的简单博客应用程序。
- en: 'In their own words, WordPress is becoming the operating system of the Web.
    According to founder *Matt Mullenweg*:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 用他们自己的话来说，WordPress正在成为网络的操作系统。根据创始人Matt Mullenweg的说法：
- en: '*"WordPress now powers 18.9% of the Web, has over 46m downloads"*'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"WordPress现在占据了网络的18.9%，已经有超过4600万次下载"*'
- en: 'Visit the following link for more information on the article:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 访问以下链接以获取有关文章的更多信息：
- en: '[http://thenextweb.com/insider/2013/07/27/wordpress-now-powers-18-9-of-the-web-has-over-46m-downloads-according-to-founder-matt-mullenweg/](http://thenextweb.com/insider/2013/07/27/wordpress-now-powers-18-9-of-the-web-has-over-46m-downloads-according-to-founder-matt-mullenweg/)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://thenextweb.com/insider/2013/07/27/wordpress-now-powers-18-9-of-the-web-has-over-46m-downloads-according-to-founder-matt-mullenweg/](http://thenextweb.com/insider/2013/07/27/wordpress-now-powers-18-9-of-the-web-has-over-46m-downloads-according-to-founder-matt-mullenweg/)'
- en: Now, WordPress has a focus much larger than blogging or simple journals. Although
    a simple application or website, creating a simple blog will demonstrate a lot
    of the FuelPHP features—from database migrations, pivoting ideas, and code to
    full temporal models to store revisions of journal entries.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，WordPress的焦点远远超出了博客或简单的期刊。尽管是一个简单的应用程序或网站，创建一个简单的博客将演示FuelPHP的许多功能，从数据库迁移、扭转思想和代码到存储期刊条目修订的完整时间模型。
- en: Before starting to code, let's first think about what to build and what the
    minimum viable product will be.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，让我们先考虑要构建什么，以及最小可行产品是什么。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating and running database migrations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和运行数据库迁移
- en: Using Oil to create models
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Oil创建模型
- en: Using Oil to create controllers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Oil创建控制器
- en: Installing and using the HTML5 Boilerplate
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和使用HTML5 Boilerplate
- en: Putting it all together to create an administration system with scaffolding
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起，创建一个带有脚手架的管理系统
- en: Using the Oil command-line console
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Oil命令行控制台
- en: Getting started
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: Just like WordPress, we're going to start small and demonstrate some of the
    FuelPHP tools that make your life easier while developing our project with FuelPHP.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就像WordPress一样，我们将从小处开始，演示一些FuelPHP工具，这些工具在使用FuelPHP开发项目时可以让您的生活更轻松。
- en: Before creating your project, first create a source control repository. In this
    example, we'll use GitHub ([https://github.com](https://github.com)), but alternatives
    such as **Bitbucket** ([https://bitbucket.org](https://bitbucket.org)) or **beanstalk**
    ([http://beanstalkapp.com](http://beanstalkapp.com)) may be more suitable for
    you.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目之前，首先创建一个源代码控制存储库。在这个示例中，我们将使用GitHub（[https://github.com](https://github.com)），但是其他选择，如**Bitbucket**（[https://bitbucket.org](https://bitbucket.org)）或**beanstalk**（[http://beanstalkapp.com](http://beanstalkapp.com)）可能更适合您。
- en: To begin with, log in to your account and then create a new project/repository.
    For the purpose of this application we can choose the public option as it's free
    with GitHub. In this example, we'll call our project `journal`. Make sure to record
    the repository URL from the right–hand side of the page—you will need it shortly.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，登录您的帐户，然后创建一个新的项目/存储库。对于这个应用程序，我们可以选择公共选项，因为它在GitHub上是免费的。在这个示例中，我们将称我们的项目为`journal`。确保记录页面右侧的存储库URL，您很快会需要它。
- en: 'Now, let''s create the project on our development machine, but first you need
    to navigate to your `home` folder using the following command line:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在开发机器上创建项目，但首先您需要使用以下命令行导航到您的`home`文件夹：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, navigate to the `Sites` folder using this command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令导航到`Sites`文件夹：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you don''t have a `Sites` folder, let''s create one:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有`Sites`文件夹，让我们创建一个：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once in your Sites folder, run the following Oil command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Sites文件夹中，运行以下Oil命令：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: Please note that in these examples, the $ represents the start of a new line
    in the terminal. When running the commands you should only need the text after
    the `$` for example `php oil create journal`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这些示例中，$表示终端中新行的开始。运行命令时，您只需要`$`后面的文本，例如`php oil create journal`。
- en: 'If you are using Apache on your local development machine, the next step will
    be to create the virtual hosts (**vhosts**) for the new site and then modify the
    hosts file. You need to have an Apache configuration with a `sites-available`
    folder and a `sites-enabled` folder. Then, a small script from a friend will prove
    to be invaluable. It can be installed with the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本地开发机器上使用Apache，下一步将是为新站点创建虚拟主机（**vhosts**），然后修改hosts文件。您需要有一个带有`sites-available`文件夹和`sites-enabled`文件夹的Apache配置。然后，来自朋友的一个小脚本将证明是非常宝贵的。可以使用以下命令安装它：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: 'This script is a set of PHP functions that set up the Apache vhosts and the
    hosts file on your computer. All of the actions are simple, but they allow you
    to get it set up quicker. The code can be viewed publicly at the following link:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本是一组PHP函数，用于在您的计算机上设置Apache vhosts和hosts文件。所有操作都很简单，但它们可以让您更快地设置它。代码可以在以下链接公开查看：
- en: '[https://github.com/maartenJacobs/quickhost](https://github.com/maartenJacobs/quickhost)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/maartenJacobs/quickhost](https://github.com/maartenJacobs/quickhost)'
- en: Or or the more information can be found at [https://github.com/digitales/quickhost](https://github.com/digitales/quickhost)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更多信息可以在[https://github.com/digitales/quickhost](https://github.com/digitales/quickhost)找到。
- en: 'Once the scripts are installed, we will be able to run the following set of
    commands to set up Apache so that we can use a local domain `http://journal.dev`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安装脚本后，我们将能够运行以下一组命令来设置Apache，以便我们可以使用本地域`http://journal.dev`：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The reason for using `sudo` is to allow Apache to be gracefully restarted and
    to modify the hosts file. This will map the domain name to the localhost IP address
    (`127.0.0.1`). In this example, we have chosen the `.dev` **top-level domain**
    (**TLD**) to differentiate it from the production and the staging environments.
    We could have chosen `.local`, but this can cause conflicts with the Active Directory
    ([http://en.wikipedia.org/wiki/Active_Directory](http://en.wikipedia.org/wiki/Active_Directory))
    on some operating systems, especially on Mac OS X.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sudo`的原因是允许Apache优雅地重新启动并修改主机文件。这将将域名映射到本地主机IP地址（`127.0.0.1`）。在此示例中，我们选择了`.dev`顶级域（TLD）来区分它与生产和暂存环境。我们也可以选择`.local`，但这可能会在某些操作系统上（尤其是在Mac
    OS X上）与Active Directory（[http://en.wikipedia.org/wiki/Active_Directory](http://en.wikipedia.org/wiki/Active_Directory)）发生冲突。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This has been tested on Mac OS X and it should work on *nix, but may not work
    on Windows environments without changing the scripts.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这已在Mac OS X上进行了测试，应该可以在*nix上运行，但在Windows环境中可能需要更改脚本才能运行。
- en: We'll need a data store for the journal entries, so let's configure it now.
    Load the `db.php` configuration found at `fuel/app/config/development/db.php`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个数据存储来存储日志条目，所以现在让我们进行配置。加载`fuel/app/config/development/db.php`中找到的`db.php`配置。
- en: 'As mentioned before, FuelPHP has the notion of environments, so we can add
    the development database configuration to source control and it won''t affect
    the other environments. Therefore, your `db.php` file should look something like
    this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，FuelPHP具有环境的概念，因此我们可以将开发数据库配置添加到源代码控制中，而不会影响其他环境。因此，您的`db.php`文件应该如下所示：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I tend to setup a separate database users for each project. This ensures that
    no project can touch the database of another project. In my db.php I'm using a
    dbname, username and password of journal_dev so you are welcome to change your
    version of the db.php file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我倾向于为每个项目设置单独的数据库用户。这确保了没有项目可以触及另一个项目的数据库。在我的db.php中，我正在使用journal_dev的dbname、用户名和密码，所以您可以更改您的db.php文件版本。
- en: Although not recommended on the live environment, enabling `profiling` can help
    while developing the project. The example configuration has it enabled.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不建议在生产环境中使用，但启用`profiling`可以在开发项目时提供帮助。示例配置已启用它。
- en: 'We have the code and the repository, now let''s link them:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有代码和存储库，现在让我们将它们链接起来：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Replace the `<repository URL>` above with your repository URL. Now, is also
    a good time to set up a few branches for the different environments: `develop`,
    `staging`, and `production`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 用您的存储库URL替换上面的`<repository URL>`。现在，也是设置几个不同环境的分支的好时机：`develop`、`staging`和`production`：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Continuing on the setup theme, let's set the database tables.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 继续设置主题，让我们设置数据库表。
- en: Creating a database table
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库表
- en: Before creating the tables in the database, let's first detail what data will
    be stored and which initial fields will be there in the tables.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中创建表之前，让我们首先详细说明将存储哪些数据以及表中将有哪些初始字段。
- en: For blogging, we will have blog posts or entries and these will have a published
    date. They will be categorized to enable grouping of similar themes. Each post
    will be associated with an author (user) and will have content and an excerpt.
    We can add free-form tagging later.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于博客，我们将有博客文章或条目，这些文章将有发布日期。它们将被分类以便对类似主题进行分组。每篇文章将与作者（用户）相关联，并且将具有内容和摘录。我们可以稍后添加自由形式的标记。
- en: Entries
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条目
- en: 'The following fields exist in the `Entries` table:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Entries`表中存在以下字段：'
- en: '`id` (int): This will be the primary identifier'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`（整数）：这将是主要标识符'
- en: '`name` (varchar)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`（varchar）'
- en: '`slug` (varchar)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slug`（varchar）'
- en: '`excerpt` (text)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`excerpt`（文本）'
- en: '`content` (text)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content`（文本）'
- en: '`published_at` (int)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`published_at`（整数）'
- en: '`created_at` (timestamp): This will be a timestamp of when the record was created'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_at`（时间戳）：这将是记录创建时的时间戳'
- en: '`updated_at` (timestamp) - This will be a timestamp of when the record was
    last updated'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updated_at`（时间戳）- 这将是记录上次更新的时间戳'
- en: Categories
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类别
- en: 'The following fields exist in the `Categories` table:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`Categories`表中存在以下字段：'
- en: '`id` (int): This will be the primary indentifier'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`（整数）：这将是主要标识符'
- en: '`name` (varchar)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`（varchar）'
- en: '`slug` (varchar)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slug`（varchar）'
- en: '`created_at` (timestamp): This will be a timestamp of when the record was created'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_at`（时间戳）：这将是记录创建时的时间戳'
- en: '`updated_at` (timestamp): This will be a timestamp of when the record was last
    updated'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updated_at`（时间戳）：这将是记录上次更新的时间戳'
- en: Users
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: 'The following fields exist in the `Users` table:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Users`表中存在以下字段：'
- en: '`id` (int): This will be the primary indentifier'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`（整数）：这将是主要标识符'
- en: '`name` (varchar)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`（varchar）'
- en: '`username` (varchar)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username`（varchar）'
- en: '`password` (varchar)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`（varchar）'
- en: '`email` (varchar)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`（varchar）'
- en: '`last_login` (timestamp)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_login`（时间戳）'
- en: '`login_hash` (text)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`login_hash`（文本）'
- en: '`profile_fields` (text)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile_fields`（文本）'
- en: '`created_at` (timestamp): This will be a timestamp of when the record was created'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_at`（时间戳）：这将是记录创建时的时间戳'
- en: '`updated_at` (timestamp): This will be a timestamp of when the record was last
    updated'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updated_at`（时间戳）：这将是记录上次更新的时间戳'
- en: We also need a link table so that multiple entries can be categorized in the
    same categories.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个链接表，以便多个条目可以分类到相同的类别中。
- en: categories_entries
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: categories_entries
- en: 'The following fields exist in the `categories_entries` table:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`categories_entries`表中存在以下字段：'
- en: '`id` (int): This will be the primary identifier'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`（整数）：这将是主要标识符'
- en: '`category_id` (int): This will be the primary identifier of the category'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`category_id`（整数）：这将是类别的主要标识符'
- en: '`entry_id` (int): This will be the primary identifier of the entry'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entry_id`（整数）：这将是条目的主要标识符'
- en: '`created_at` (timestamp): This will be a timestamp of when the record was created'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_at`（时间戳）：这将是记录创建时的时间戳'
- en: '`updated_at` (timestamp): This will be a timestamp of when the record was last
    updated'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updated_at`（时间戳）：这将是记录上次更新的时间戳'
- en: You may have noticed that each table has an `id`, a `created_at` table, and
    an `updated_at` field. These are automatically added by the FuelPHP Oil tool and
    can prove to be useful when linking or forming relationships between data objects.
    They do add a minimal overhead, but this should not be of concern at this stage,
    as the extra storage required is minimal.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到每个表都有一个`id`、一个`created_at`表和一个`updated_at`字段。这些都是由FuelPHP Oil工具自动添加的，当链接或形成数据对象之间的关系时，它们可能会很有用。它们确实会增加一些额外的开销，但在这个阶段这不应该成为问题，因为额外的存储需求是很小的。
- en: 'Let''s create some migrations using the FuelPHP Oil tool:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用FuelPHP Oil工具创建一些迁移：
- en: '[PRE9]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will create the migrations to assemble the posts database table. There
    is no need to detail the `id`, `created_at`, or `updated_at` fields as these will
    be automatically generated. If you don't need these extra time-based fields, you
    can append `--no-timestamp` at the end of the `generate` command.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建迁移以组装posts数据库表。不需要详细说明`id`、`created_at`或`updated_at`字段，因为这些将自动生成。如果你不需要这些额外的基于时间的字段，你可以在`generate`命令的末尾添加`--no-timestamp`。
- en: Tip
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We are running through migration examples here and we will use the proper entries
    table when generating the models later in this chapter.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里运行迁移示例，并且在本章后面生成模型时将使用正确的entries表。
- en: Migrations and Oil
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移和石油
- en: When quickly creating projects and getting the bare bones together, the FuelPHP
    Oil tool can handle some of the more repetitive tasks for you, allowing you to
    concentrate on other aspects of the project. This ranges from setting up the database
    tables (as demonstrated before) to creating models and controllers. The FuelPHP
    Oil tool can also be used to scaffold an administration system that is ready to
    be used to administer contents with a full user-authentication system. It'll provide
    the starting point; although the results won't always be pretty, it will be functional.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速创建项目并组织基本结构时，FuelPHP Oil工具可以处理一些更加重复的任务，让你可以集中精力处理项目的其他方面。这包括设置数据库表（如之前演示的）以及创建模型和控制器。FuelPHP
    Oil工具还可以用来搭建一个管理系统，该系统已经准备好用于管理内容，并带有完整的用户认证系统。它将提供起点；虽然结果不总是美观的，但它是功能性的。
- en: This allows you to test ideas quickly and iterate towards the perfect code.
    We'll run through the individual features of Oil to create models, controllers,
    and database migrations. This will give us more time to tweak and create a more
    polished project/journal.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这使你可以快速测试想法并迭代向完美的代码。我们将逐个介绍Oil的各个功能，以创建模型、控制器和数据库迁移。这将给我们更多时间来调整和创建一个更加完善的项目/日志。
- en: One of the most useful features of Oil is the ability to migrate the database
    structure. These can be used to ensure the consistency between environments. When
    deploying code, it's possible to run migrations on the database as well.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Oil最有用的功能之一是迁移数据库结构的能力。这些可以用于确保不同环境之间的一致性。在部署代码时，也可以在数据库上运行迁移。
- en: 'Migrations can be used to rename a table, add and remove fields or even tables.
    Oil has the notion of magic migrations. These start with a keyword''s prefix,
    making it easy to see what they will be doing:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移可以用于重命名表、添加和删除字段甚至表。Oil有魔术迁移的概念。这些以关键字前缀开始，使得很容易看出它们将要做什么：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You need to be aware of the keywords when creating a migration. Keywords include
    `create_`, `rename_`, `add_`, `delete_`, `rename_`, and `drop_`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建迁移时，你需要注意关键字。关键字包括`create_`、`rename_`、`add_`、`delete_`、`rename_`和`drop_`。
- en: Migrations are stored in `fuel/app/migrations` and a list of performed migrations
    is stored in `fuel/app/config/<environment>/migrations.php`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移存储在`fuel/app/migrations`中，已执行的迁移列表存储在`fuel/app/config/<environment>/migrations.php`中。
- en: 'Additionally, the migration''s database table records the current state of
    the project. Running migrations is as a simple as typing the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，迁移的数据库表记录了项目的当前状态。运行迁移就像输入以下命令一样简单：
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can simply type `r` and `g` to run the refine and generate Oil actions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以简单地输入`r`和`g`来运行refine和generate Oil操作。
- en: 'If you want to migrate up or down, run the following commands:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要迁移上升或下降，请运行以下命令：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These commands can be worked into a deployment script, so that migrations can
    automatically be run when the new code is added to different environments. This
    is particularly useful for avoiding errors on the production environment.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令可以被整合到部署脚本中，这样迁移就可以在将新代码添加到不同环境时自动运行。这对避免在生产环境中出现错误特别有用。
- en: 'Before progressing to generating models and their database tables, let''s drop
    the posts table we created previously:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续生成模型及其数据库表之前，让我们删除之前创建的posts表：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Models
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型
- en: 'Now that we have a brief understanding of migrations and Oil, let''s put Oil
    to use. We''ll create a model along with their corresponding database table details
    with the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对迁移和Oil有了简要的了解，让我们开始使用Oil。我们将使用以下命令创建一个模型以及相应的数据库表细节：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will create both the model and migration. Let''s open the newly created
    `entry.php` model, located at `fuel/app/classes/model/`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建模型和迁移。让我们打开新创建的`entry.php`模型，位于`fuel/app/classes/model/`：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You''ll notice in the newly generated model that it is extending the ORM Model.
    For this to work, we''ll need to include the ORM package in the autoloader. This
    is a good chance to introduce the FuelPHP autoloader configuration. Load the configuration
    file located at `fuel/app/config/config.php`. Look for the `''always load''` section
    and uncomment the `''always_load''` array, as shown in the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到新生成的模型正在扩展ORM模型。为了使其工作，我们需要在自动加载器中包含ORM包。这是一个很好的机会来介绍FuelPHP自动加载器配置。加载位于`fuel/app/config/config.php`的配置文件。查找`'always
    load'`部分，并取消注释`'always_load'`数组，如下所示：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When you install new packages, simply add them in the `always_load` array to
    automatically load them. Sometimes, a package is needed only in a certain method
    or class. In this instance, however, we can load the package only when needed.
    More information on this can be found at the following link:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当您安装新的包时，只需将它们添加到`always_load`数组中以自动加载它们。有时，一个包只在某个方法或类中需要。然而，在这种情况下，我们可以只在需要时加载包。关于这方面的更多信息可以在以下链接找到：
- en: '[http://fuelphp.com/docs/classes/package.html#method_load](http://fuelphp.com/docs/classes/package.html#method_load)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://fuelphp.com/docs/classes/package.html#method_load](http://fuelphp.com/docs/classes/package.html#method_load)'
- en: Now, let us go back to the `entry` model. You'll notice the `$_properties` array,
    this will make it easier to call variables from the model layer. If you add a
    new database field, it'll need to be added to the `properties` array. The ORM
    package includes the notion of observers, these are actions that can execute methods
    or functions at different times. The ones used in the model are `before_insert`
    and `before_update`. These are currently being used to create the timestamps at
    the time of adding or updating entries.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到`entry`模型。您会注意到`$_properties`数组，这将使从模型层调用变量变得更容易。如果您添加了新的数据库字段，它将需要添加到`properties`数组中。ORM包括观察者的概念，这些是可以在不同时间执行方法或函数的操作。模型中使用的是`before_insert`和`before_update`。目前正在使用它们来在添加或更新条目时创建时间戳。
- en: 'The other observers are listed in the documentation; one that will be useful
    for use is `Observer_Slug`. This observer will handle turning the entry title
    to a URL safe and avoid the need to rewrite pre-existing functionality. Let''s
    add this observer to our entry model by adding the following snippet to the `observers`
    array:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 其他观察者在文档中列出；其中一个对我们有用的是`Observer_Slug`。这个观察者将处理将条目标题转换为URL安全，并避免重写现有功能的需要。让我们通过将以下片段添加到`observers`数组中，将这个观察者添加到我们的entry模型中：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, when we save an entry, the slug will automatically be updated.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们保存一个条目时，slug将自动更新。
- en: 'There are some other database tables we have to create. Let''s do this now
    and then we can create relations between their models to make our lives easier:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一些其他数据库表。让我们现在这样做，然后我们可以创建它们的模型之间的关系，以使我们的生活更轻松：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For the `entry` model, add `Observer_Slug` to the new category model.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`entry`模型，将`Observer_Slug`添加到新的类别模型中。
- en: For the `user` table, we are going to use the Auth package, as it includes the
    user authentication functionality. To do this, we need to copy the default Auth
    package configuration to our application configuration.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`user`表，我们将使用Auth包，因为它包括用户认证功能。为此，我们需要将默认的Auth包配置复制到我们的应用程序配置中。
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'At this stage, we should change the salt value in the `auth.php` configuration
    file. Once this is done, we have to run the following command to create the necessary
    `auth` tables:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们应该在`auth.php`配置文件中更改盐值。完成后，我们必须运行以下命令来创建必要的`auth`表：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s run the migration tool to make sure the database is updated:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行迁移工具，确保数据库已更新：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now that we have the database structure established, we can relate the models
    with each other. This is made possible by the ORM model, which natively supports
    the following relationships:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了数据库结构，我们可以将模型之间的关系联系起来。这是由ORM模型实现的，它原生支持以下关系：
- en: '`belongs_to`: This model has the primary key for the relation and it belongs
    to a single related object.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`belongs_to`：该模型具有关系的主键，它属于一个相关对象。'
- en: '`has_one`: Its primary key is stored in another table that belongs to this
    model. It has a single relation only.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_one`：它的主键存储在属于该模型的另一个表中。它只有一个关系。'
- en: '`has_many`: Its primary key is saved in multiple results of another model.
    Each other model will need to belong to this one. It can have many relations.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_many`：它的主键保存在另一个模型的多个结果中。每个其他模型都需要属于这个模型。它可以有许多关系。'
- en: '`many_to_many`: This keeps track of the many-to-many relations using a linking
    table. This table keeps a record of the primary key pairs from the tables being
    linked. It can have, and belong, many models. For example, a blog post can have
    many categories and a category can be linked to many blog posts.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`many_to_many`：这使用一个链接表跟踪多对多关系。这个表记录了被链接表的主键对。它可以有，并且属于，许多模型。例如，一个博客文章可以有许多类别，一个类别可以链接到许多博客文章。'
- en: For the journal, we'll use the `belongs_to`, `has_one`, and `many_to_many` relations.
    Making full use of the relationships only needs a quick addition to the already-created
    models. Load the entry model in your favorite text editor. The model can be found
    at `fuel/app/classes/model/entry.php`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于日志，我们将使用`belongs_to`，`has_one`和`many_to_many`关系。充分利用关系只需要快速添加到已创建的模型中。在您喜欢的文本编辑器中加载entry模型。该模型可以在`fuel/app/classes/model/entry.php`中找到。
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following code to the model just before closing the curly brace:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭大括号之前，将以下代码添加到模型中：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We don''t always need to include the full `$_belongs_to` declaration. In most
    situations, we can simply use the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不总是需要包含完整的`$_belongs_to`声明。在大多数情况下，我们可以简单地使用以下内容：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With these additions, we are configuring the ORM model to treat the relationship
    between entries and categories as a many-to-many relationship. Instead of directly
    linking categories to entries, we are using the `category_entry` link table. This
    table is named using the singular version of the tables to be linked in an alphabetical
    order; in this case, the joining of `categories` and `entries` gives us a table
    name `category_entry`. The reason we want to use the link table is because we
    want to have the ability to assign multiple categories to each entry, so that
    the categories can be reused without requiring duplication. For example, if we
    retrieve an entry, the list of categories would be obtained in the following manner:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些添加，我们正在配置ORM模型，将条目和类别之间的关系视为多对多关系。我们不是直接将类别链接到条目，而是使用`category_entry`链接表。这个表的命名是使用要链接的表的单数版本按字母顺序排列；在这种情况下，`categories`和`entries`的连接给我们一个表名`category_entry`。我们想要使用链接表的原因是因为我们希望能够为每个条目分配多个类别，这样就可以重复使用类别而不需要重复。例如，如果我们检索一个条目，类别列表将以以下方式获取：
- en: '[PRE25]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this example, we are looking for an entry with its ID set as `1`. If this
    is found, the full entry object will be returned, otherwise it will return false.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在寻找ID设置为`1`的条目。如果找到，将返回完整的条目对象，否则将返回false。
- en: In addition to the many-to-many relationship, let's link the users to the entries
    that they authored.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 除了多对多的关系，让我们将用户链接到他们撰写的条目。
- en: 'Firstly, we need to add the `user_id` to the entries table:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将`user_id`添加到条目表中：
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We need to add `user_id` to the entry model `$_properties`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`user_id`添加到条目模型的`$_properties`中：
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Since the relationship maps from `user_id` to the primary `id` key in the `user`
    table, we can just define the user as a part of the `$_belongs_to` array. Everything
    else will fall into place once the reciprocal relation is added to the `Model_User`
    model:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 由于关系从`user_id`映射到`user`表中的主`id`键，我们可以将用户定义为`$_belongs_to`数组的一部分。一旦将互补关系添加到`Model_User`模型中，其他所有内容都会就位：
- en: '[PRE28]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Talking about the `Model_User`, it needs to be created:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到`Model_User`，需要创建它：
- en: '[PRE29]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Although most of the user functionality are done from within the Auth package,
    adding the user model is necessary for the `Model_Entry` relation with the user
    data. Therefore, load the `user` model `user.php` located at `fuel/app/classes/model/`
    and add the following array:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数用户功能都是通过Auth包内完成的，但添加用户模型对于与用户数据的`Model_Entry`关系是必要的。因此，加载位于`fuel/app/classes/model/`的`user.php`用户模型，并添加以下数组：
- en: '[PRE30]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `category` and `category_entry` models also need the relations creating.
    To do this, navigate to the `category.php` file located at `fuel/app/class/mode/`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`category`和`category_entry`模型也需要创建关系。要做到这一点，导航到位于`fuel/app/class/mode/`的`category.php`文件：'
- en: '[PRE31]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following is the listing for the `entry.php` file located at `fuel/app/classes/model/category/`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是位于`fuel/app/classes/model/category/`的`entry.php`文件的列表：
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now that we have the models and the migrations, it would be a good idea to add
    them in the source control. Once that's done, let's start creating the controller
    to make use of the models and then the views (including forms).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了模型和迁移，将它们添加到源代码控制是个好主意。一旦完成，让我们开始创建控制器来使用模型，然后创建视图（包括表单）。
- en: Controllers
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: Controllers, like the models, can be created using Oil. The main controllers
    will be for managing entries and categories. These will come in two flavors, the
    publicly viewable site controllers and the administration system for the entries
    and categories tables.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器和模型一样，可以使用Oil创建。主要的控制器将用于管理条目和类别。这将有两种类型，公开可见的站点控制器和条目和类别表的管理系统。
- en: 'Our controllers probably won''t be needed to handle RESTful requests, at least
    initially. So, we should extend the `Controller_Template` and as luck would have
    it, that is the way that the Oil tool is set up to run. When we create a controller
    with Oil, it''ll be created to extend the template controller. We only need to
    think about what actions and methods we need for doing this. As we will primarily
    be displaying the entries and categories information for the blog, let''s start
    with the `index` and `view` actions:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制器可能最初不需要处理RESTful请求。因此，我们应该扩展`Controller_Template`，幸运的是，这正是Oil工具设置运行的方式。当我们使用Oil创建控制器时，它将被创建为扩展模板控制器。我们只需要考虑我们需要做什么操作和方法。因为我们主要将显示博客的条目和类别信息，所以让我们从`index`和`view`操作开始：
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This will create the controller, a template file, and the views needed for the
    methods—`index` and `view`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建控制器、模板文件和所需方法的视图——`index`和`view`。
- en: 'Let us have a look at `entry.php`, which is located at `fuel/app/classes/controller/`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下位于`fuel/app/classes/controller/`的`entry.php`：
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: There are a few interesting things to notice in the controller generated. The
    first is that each method that relates directly to a URL is prefixed with `action_`.
    This makes it easier to see which methods relate directly to a URL and which methods
    cover other functionality within the controller
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的控制器中有一些有趣的事情需要注意。首先是每个直接与URL相关的方法都以`action_`为前缀。这样可以更容易地看出哪些方法直接与URL相关，哪些方法涵盖了控制器内的其他功能
- en: You will also notice that the active view is being passed to the view in the
    `$data` array. This is used to pass variables to the view, allowing the logic
    to be done prior to view rendering. This leaves the views purely for presentation,
    as they should be. The keys in the `data` array will be translated to variables
    in the view, for example, `$data['subnav']` will be callable via the `$subnav`
    variable in the view.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到活动视图被传递到`$data`数组中的视图中。这用于将变量传递给视图，允许在视图渲染之前进行逻辑处理。这样视图就纯粹用于呈现，就像它们应该的那样。`data`数组中的键将被转换为视图中的变量，例如，`$data['subnav']`将通过视图中的`$subnav`变量调用。
- en: 'The `Controller_Template` class also has a couple of other methods—`before()`
    and `after()`—which are particularly useful. The `before()` method can be used
    for user authentication for the administration system, and this will be demonstrated
    later in this chapter. We will be using it for the administration system to ensure
    that only authenticated users can access the administration system. When using
    the `before()` method in your controller, make sure you call the `parent::before()`
    method, for example:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`Controller_Template`类还有另外两个方法——`before()`和`after()`——这两个方法非常有用。`before()`方法可用于管理系统的用户身份验证，这将在本章后面进行演示。我们将在管理系统中使用它，以确保只有经过身份验证的用户才能访问管理系统。在控制器中使用`before()`方法时，请确保调用`parent::before()`方法，例如：'
- en: '[PRE35]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Views
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图
- en: When creating the controller with the Oil tool, a template and views are also
    created. Let's have a look at one of the views, load `fuel/app/views/entry/index.php`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Oil工具创建控制器时，还会创建模板和视图。让我们来看看其中一个视图，加载`fuel/app/views/entry/index.php`。
- en: 'You will notice the lack of opening and closing HTML body in the view. The
    test of the presentation elements are handled by the `template.php` file found
    in the root of the views folder. Before looking at `template.php`, let''s discuss
    some of the parts of the `index.php` file:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中，你会注意到缺少开头和结尾的HTML body。`template.php`文件位于views文件夹的根目录中，负责处理演示元素的测试。在查看`template.php`之前，让我们讨论一下`index.php`文件的一些部分：
- en: '[PRE36]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As shown in the preceding line of code, it is using the core FuelPHP `Arr` class,
    which is a set of helper functions for working with arrays. In this instance,
    the `get` method is used. This allows you to check for a given key in an array,
    it then returns false if the key can't be found. The view is using this functionality
    to output the `'active'` style class for the active page / view.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码行所示，它使用了核心FuelPHP `Arr`类，这是一组用于处理数组的辅助函数。在这种情况下，使用了`get`方法。这允许您检查数组中是否存在给定的键，如果找不到键，则返回false。视图正在使用此功能来输出活动页面/视图的`'active'`样式类。
- en: The second core class being used is the `Html::anchor()`. This class provides
    a large selection of HTML tags, and it ensures that all tags used are valid with
    the `Doctype` declaration. We are using the `anchor` method to output a link to
    the view. The first value is the link, while the second is the display title (the
    bit in between the `a` tags). One reason for using this helper method is to ensure
    that the links work no matter what the URL of the environment is, or whether the
    app is installed in a sub folder or subdomain. Now, let's have a quick look at
    the `template.php` file found at `fuel/app/views/template.php`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个正在使用的核心类是`Html::anchor()`。这个类提供了大量的HTML标签，并确保所有使用的标签都符合`Doctype`声明。我们使用`anchor`方法来输出到视图的链接。第一个值是链接，第二个是显示标题（在`a`标签之间的部分）。使用这个辅助方法的一个原因是确保链接在任何环境的URL下都能正常工作，无论应用程序是安装在子文件夹还是子域中。现在，让我们快速看一下`fuel/app/views/template.php`中的`template.php`文件。
- en: 'By default, the template uses the Twitter bootstrap to give a quick starting
    point for your projects. FuelPHP expects a CSS and JS folder within the public
    folder of your project. Loading CSS and JavaScript files is as easy as using the
    following code in your template:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，模板使用Twitter bootstrap为项目提供快速起点。FuelPHP期望项目的public文件夹中有CSS和JS文件夹。加载CSS和JavaScript文件就像在模板中使用以下代码一样简单：
- en: '[PRE37]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'As with frameworks such as Ruby on Rails, FuelPHP implements a flash session
    for passing variables and values between page loads. By default FuelPHP has two
    flash sessions, named `success` and `error` by default. You can of course add
    as many flash sessions to FuelPHP as you need. The following is an example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 与Ruby on Rails等框架一样，FuelPHP实现了flash会话，用于在页面加载之间传递变量和值。默认情况下，FuelPHP有两个flash会话，默认命名为`success`和`error`。当然，您可以根据需要向FuelPHP添加任意数量的flash会话。以下是一个示例：
- en: '[PRE38]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following examples are both ways by which the flash sessions are output
    in the template:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例是模板中输出flash会话的两种方式：
- en: '[PRE39]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The rest of `template.php` is a fairly straightforward HTML. Creating websites
    that respond to the screen size of the visitor is proving to be very a popular
    way of supporting mobile devices. So we should start thinking about the mobile-sized
    screen first before adding layouts for the desktop. To help with this, we are
    going to make use of the HTML5 Boilerplate ([http://html5boilerplate.com](http://html5boilerplate.com)).
    We''re going to customize the version of the Boilerplate and this can be done
    via the [http://www.initializr.com/](http://www.initializr.com/) companion site.
    To do this carry out the following steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`template.php`的其余部分是相当简单的HTML。创建能够响应访问者屏幕尺寸的网站，正在成为支持移动设备的一种非常流行的方式。因此，在为桌面添加布局之前，我们应该首先考虑移动尺寸的屏幕。为了帮助实现这一点，我们将使用HTML5
    Boilerplate ([http://html5boilerplate.com](http://html5boilerplate.com))。我们将自定义Boilerplate的版本，可以通过[http://www.initializr.com/](http://www.initializr.com/)伴侣网站完成。要做到这一点，请执行以下步骤：'
- en: 'On the Initializr website, there should be 3 options: Classic H5BP, Responsive,
    and Bootstrap. Choose the **Classic H5BP** option (the gray button) and then the
    **Responsive Bootstrap** 2.3.2 template option. Finally click on **Download it!**.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Initializr网站上，应该有3个选项：Classic H5BP、Responsive和Bootstrap。选择**Classic H5BP**选项（灰色按钮），然后选择**Responsive
    Bootstrap** 2.3.2模板选项。最后点击**Download it!**。
- en: Copy the resulting downloaded file to the public folder of your journal application.
    Copy the `js`, `css`, and `img` folders into your assets folder.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的文件复制到您的日志应用程序的public文件夹中。将`js`、`css`和`img`文件夹复制到您的assets文件夹中。
- en: Now, open the `index.html` file in your text editor and edit it. The next step
    is a case of taking elements from the `index.html` file and adding them to your
    `template.php` file.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开文本编辑器中的`index.html`文件并进行编辑。下一步是从`index.html`文件中提取元素并将其添加到`template.php`文件中。
- en: 'Here is an example of what you will end up with:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最终的示例：
- en: '[PRE40]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Tip
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: After you are finished with the `index.html` file, make sure to delete it from
    your public folder; otherwise you may have problems loading the journal website.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 完成`index.html`文件后，请确保从公共文件夹中删除它；否则，您可能会在加载日志网站时遇到问题。
- en: Most of the `template.php` file has been mentioned earlier, except for the `Asset::set_path()`.
    The HTML5 Boilerplate includes the vendor folder for the `modernizr` JavaScript
    file. By default, the Asset loader will look into the `css` and `js` folders located
    at `public/assets`, but it won't look at the folders within those directories.
    We are using the `set_path()` method to include the vendor folder in the JavaScript
    loading. The second variable in `set_path()` lets the Asset loader know that the
    new path is a JavaScript folder.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`template.php`文件的大部分内容已经在前面提到过，除了`Asset::set_path()`。HTML5 Boilerplate包括`modernizr`
    JavaScript文件的`vendor`文件夹。默认情况下，Asset加载器将查找位于`public/assets`的`css`和`js`文件夹，但不会查看这些目录中的文件夹。我们使用`set_path()`方法将`vendor`文件夹包含在JavaScript加载中。`set_path()`中的第二个变量让Asset加载器知道新路径是一个JavaScript文件夹。'
- en: Now, we have a chance to check the site in the browser, for example, `http://journal.dev/entry`
    or `http://localhost/Site/journal/entry` or `http://127.0.0.1/Site/journal/entry`,
    depending upon your development machine configuration.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有机会在浏览器中检查网站，例如`http://journal.dev/entry`或`http://localhost/Site/journal/entry`或`http://127.0.0.1/Site/journal/entry`，具体取决于您的开发机器配置。
- en: At the moment, the first web page that visitors will see is the FuelPHP welcome
    page. We should change this so that the entry listing page is the first one the
    visitors see. Doing this is quick and it can easily be done with routes in FuelPHP.
    Load the `routes.php` configuration file located at `fuel/app/config/`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，访问者将看到的第一个网页是FuelPHP欢迎页面。我们应该更改这一点，使得访问者首先看到条目列表页面。这样做很快，可以很容易地通过FuelPHP中的路由来完成。加载位于`fuel/app/config/`的`routes.php`配置文件。
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You can change the welcome page to the entry listing page by changing `'welcome/index'`
    to `'entry/index'`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将`'welcome/index'`更改为`'entry/index'`来将欢迎页面更改为条目列表页面。
- en: Back in your browser, navigate to the top level of the journal site, for example,
    `http://journal.dev` or `http://localhost/Site/journal` or `http://127.0.0.1/Site/journal`.
    You will notice that your entry index page is showing.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 回到浏览器，在日志网站的顶层导航到，例如`http://journal.dev`或`http://localhost/Site/journal`或`http://127.0.0.1/Site/journal`。您会注意到您的条目索引页面正在显示。
- en: So far, we have covered the basic parts of the controllers and views, and we
    installed the HTML5 Boilerplate. Now, we should look at the administration of
    the entries and categories.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了控制器和视图的基本部分，并安装了HTML5 Boilerplate。现在，我们应该看一下条目和类别的管理。
- en: 'Before looking at the administration system, there is one thing left to do
    on the public site—categories. Let''s generate the category index and viewing
    controller:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看管理系统之前，公共网站上还有一件事要做——类别。让我们生成类别索引和查看控制器：
- en: '[PRE42]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You're probably thinking that it's all fine and dandy to be able to display
    entries and categories, but how do we actually deal with the administration system?
    The next section will teach us how to do this.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能认为能够显示条目和类别很好，但我们实际上如何处理管理系统呢？下一节将教会我们如何做到这一点。
- en: Generating an administration system using Oil
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Oil生成管理系统
- en: We're going to use the Oil tool to quickly build an administration system for
    entries and categories.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Oil工具快速构建一个条目和类别的管理系统。
- en: 'Along with creating migrations and controllers, Oil can also be used to scaffold
    the functionality for you. This comes in two flavors: one for the frontend, like
    we''ve already seen, and the other is the administration system with full controls.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建迁移和控制器之外，Oil还可以用来为您搭建功能。这有两种风格：一种是用于前端，就像我们已经看到的那样，另一种是具有完全控制的管理系统。
- en: 'Before continuing, we need to rename the `category` and `entry` models. This
    is because they will be recreated as part of the administration system scaffolding.
    We rename them so that we have a copy of the previous relations that we set up
    in those models:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们需要重命名`category`和`entry`模型。这是因为它们将作为管理系统脚手架的一部分重新创建。我们将它们重命名，以便我们有之前在这些模型中设置的关系的副本：
- en: '[PRE43]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, let''s run the administration scaffold Oil command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行管理脚手架Oil命令：
- en: '[PRE44]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The `-force` element is needed to rerun the shared files in the administration
    system so that the category files are created.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`-force`元素是必需的，以便重新运行管理系统中的共享文件，以便创建类别文件。'
- en: Oil has created a few files for you, but, unfortunately, it does not know about
    the category and entry relationship or the `Observer_Slug` Property. As such,
    we need to relate back to the `Entry and Category` models, we will also need to
    add back `Observer_Slug`. This process will be straightforward with the recently
    renamed entry and category models.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Oil已经为您创建了一些文件，但不幸的是，它不知道类别和条目的关系，也不知道`Observer_Slug`属性。因此，我们需要关联回`Entry和Category`模型，我们还需要添加回`Observer_Slug`。这个过程将与最近重命名的条目和类别模型一样简单。
- en: 'While editing the models, we need to remove or comment out the following:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑模型时，我们需要删除或注释掉以下内容：
- en: '[PRE45]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We also need to do the same with the references in the administration entry
    and category controllers. `Observer_Slug` that is defined in the models will handle
    the slug.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在管理条目和类别控制器中做同样的事情。在模型中定义的`Observer_Slug`将处理slug。
- en: Therefore, you need to check lines 32, 66, and 86 of `category.php` located
    at `fuel/app/classes/controller/admin/;`, and also check the lines 32, 69, and
    92 of `entry.php` located at the same folder.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您需要检查位于`fuel/app/classes/controller/admin/`的`category.php`的第32、66和86行，并且还需要检查位于相同文件夹中的`entry.php`的第32、69和92行。
- en: As a part of the scaffolding process, a couple of forms have been created and
    are shared between the creation and editing of both entry and category views.
    Load `fuel/app/views/admin/category/_form.php` and `fuel/app/views/admin/entry/_form.php`.
    In both forms, comment out the references to slug as it is not needed.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 作为脚手架过程的一部分，已经创建了一些表单，并在条目和类别视图的创建和编辑之间共享。加载`fuel/app/views/admin/category/_form.php`和`fuel/app/views/admin/entry/_form.php`。在两个表单中，注释掉对slug的引用，因为它不需要。
- en: In your browser, navigate to `http://journal.dev/admin` or `http://localhost/Site/journal/admin`
    or `http://127.0.0.1/Site/journal/admin` and you will be redirected to a login
    form. We haven't set up a user account yet, but Oil comes to the rescue.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中，导航到`http://journal.dev/admin`或`http://localhost/Site/journal/admin`或`http://127.0.0.1/Site/journal/admin`，您将被重定向到登录表单。我们还没有设置用户帐户，但Oil可以帮助解决问题。
- en: 'Load your terminal and run:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 加载您的终端并运行：
- en: '[PRE46]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This starts an interactive console, which can make use of the core FuelPHP and
    package code. In this instance, we need to call the Auth package to create a new
    user.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个交互式控制台，可以利用核心FuelPHP和包代码。在这种情况下，我们需要调用Auth包来创建一个新用户。
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This command will output the `user_id` of the newly created account. `100` represents
    the highest default user privilege and role in the Auth package. To exit the console
    session, simply type `exit` and run it.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将输出新创建帐户的`user_id`。`100`代表Auth包中的最高默认用户特权和角色。要退出控制台会话，只需输入`exit`并运行。
- en: Now, you will be able to log in to your newly created administration system.
    From there, you will be able to add new categories and entries.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将能够登录到您新创建的管理系统。从那里，您将能够添加新的类别和条目。
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has given a brief introduction to the project structure and how
    the FuelPHP Oil command-line tool can help you get set up very quickly.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要介绍了项目结构以及FuelPHP Oil命令行工具如何帮助您快速设置。
- en: Oil acts as a scaffolding structure, but you will still need to fill in the
    gaps. For example, it's possible to retrieve the linked entries and categories
    from the blog, but we still need to build the necessary administration controls
    for setting up with the relationships.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Oil充当脚手架结构，但您仍然需要填补空白。例如，可以从博客中检索链接的条目和类别，但我们仍然需要构建必要的管理控件来设置关系。
- en: In the next chapter, we will look at packages in more detail and then create
    our own package, which can be shared with the community.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地了解包，并创建我们自己的包，可以与社区共享。
