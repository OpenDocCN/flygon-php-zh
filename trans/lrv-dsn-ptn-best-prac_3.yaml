- en: Chapter 3. Views in MVC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。MVC中的视图
- en: In this chapter, we will discuss what the View is, its structure, its purpose,
    and the advantages of Laravel's View layer and Blade template engine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论视图是什么，它的结构，它的目的，以及Laravel的视图层和Blade模板引擎的优势。
- en: What is a View?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是视图？
- en: The View in Laravel refers to the V in MVC. The View consists of presentation
    logic aspects such as templates and caching and the code that involves presentation.
    Precisely, the View defines exactly what is presented to the user. Usually, Controllers
    pass data to each View to render in some format. Views collect data from users
    as well. This is where you're likely to find HTML markup in your MVC application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel中的View指的是MVC中的V。视图包括演示逻辑方面，如模板和缓存，以及涉及演示的代码。准确地说，视图定义了向用户呈现的内容。通常，控制器将数据传递给每个视图以某种格式呈现。视图也从用户那里收集数据。这是你可能在MVC应用程序中找到HTML标记的地方。
- en: Most modern MVCs, such as Laravel Framework, implement a template language that
    adds a further layer of abstraction from PHP. Added layers mean added overhead.
    Here, we stick with the speed of PHP within the template, yet all the logic stays
    outside. This makes it easy for User Interface (UI) designers to develop themes/templates
    without the need to learn any programming languages.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代MVC，如Laravel框架，实现了一种模板语言，从PHP中添加了一个抽象层。添加层意味着增加了开销。在这里，我们坚持在模板中使用PHP的速度，但所有逻辑都留在外面。这使得用户界面（UI）设计师可以开发主题/模板，而无需学习任何编程语言。
- en: 'In many MVC implementations, the View layer speaks with Controllers and Models.
    The approach is well explained in the following figure:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多MVC实现中，视图层与控制器和模型进行通信。这种方法在以下图中得到了很好的解释：
- en: '![What is a View?](Image00006.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![什么是视图？](Image00006.jpg)'
- en: As you can see in the preceding figure, the View communicates with both the
    Controller and the Model. At first sight, it seems like a very flexible approach
    to develop an application with OOP languages. Sharing data between all objects
    of MVC and accessing them in any layer of application sounds very cool. Unfortunately,
    the method causes some problems that depend on the project's size.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上图中所看到的，视图与控制器和模型都有通信。乍一看，这似乎是一种使用面向对象编程语言开发应用程序的非常灵活的方法。在MVC的所有对象之间共享数据，并在应用程序的任何层中访问它们听起来非常酷。不幸的是，这种方法会导致一些依赖于项目规模的问题。
- en: The foremost problems are the complexity of allocating development tasks between
    teams/developers. If you don't set the development rules, it will lead to chaotic
    situations such as unmanageable spaghetti code. Also, we have to consider extra
    costs of development such as training the developers and comparatively long development
    processes, which directly affect the cost of the project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最主要的问题是在团队/开发人员之间分配开发任务的复杂性。如果你不设定开发规则，就会导致混乱的情况，比如无法管理的意大利面代码。此外，我们还必须考虑开发的额外成本，比如培训开发人员和相对较长的开发过程，这直接影响项目的成本。
- en: As we mentioned at the beginning of the book, development not only involves
    coding or sharing tasks, it's also the process that includes the planning and
    marketing of the project development method.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书开头提到的，开发不仅涉及编码或共享任务，还包括规划和推广项目开发方法的过程。
- en: 'Laravel ships a different kind of approach to MVC. According to Laravel, the
    View layer should only communicate with the Controller. The Model communicates
    with the Controller. Let''s look at the following figure:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel采用了一种不同的MVC方法。根据Laravel，视图层应该只与控制器通信。模型与控制器通信。让我们看一下以下图：
- en: '![What is a View?](Image00007.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![什么是视图？](Image00007.jpg)'
- en: 'As you can see in the preceding figure, the layers of application are completely
    separated. Thus, you can get easily manageable code and a development team. Generally,
    we need at least three files in MVCs: the Model file, the Controller file, and
    the View file. Let''s explain the View file through its objects.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上图中所看到的，应用程序的层完全分离。因此，你可以轻松地管理代码和开发团队。通常，我们在MVC中至少需要三个文件：模型文件、控制器文件和视图文件。让我们通过视图文件来解释视图。
- en: View objects
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图对象
- en: 'In your application, there is usually more than one HTML page that contains
    forms, asset references, and so on; for example, if you are developing an e-commerce
    application. In a simple e-commerce system, there are product lists, categories,
    carts, and product detail pages that we need. This means that we need four templates
    and too much data to present to our users. We can group the objects of the View
    layer as shown:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用程序中，通常会有多个包含表单、资产引用等的HTML页面；例如，如果你正在开发一个电子商务应用程序。在一个简单的电子商务系统中，有产品列表、类别、购物车和产品详细页面。这意味着我们需要四个模板和太多的数据呈现给用户。我们可以将视图层的对象分组如下：
- en: HTML elements (div, header, section, and so on)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML元素（div、header、section等）
- en: HTML form elements (input, select, and so on)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML表单元素（输入、选择等）
- en: Asset and JavaScript references (`.css` and `.js` )
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产和JavaScript引用（.css和.js）
- en: 'When you work on a project that has dynamic data, separating the template files
    does not help simplify the problem because you still need programming language
    functions to process objects. This causes what we don''t want to face—spaghetti
    code. When a project has inline PHP code in HTML documents, you will face problems
    in keeping the code simple. Let''s take a look at the generic template file contents
    that are not implemented with any template language in the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在处理具有动态数据的项目时，分离模板文件并不能简化问题，因为你仍然需要编程语言函数来处理对象。这会导致我们不想面对的“意大利面代码”。当项目中的HTML文档中有内联PHP代码时，你将面临保持代码简单的问题。让我们来看一下以下代码中没有使用任何模板语言实现的通用模板文件内容：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As a UI developer, you need prior knowledge of the PHP language (at least knowledge
    of the syntax of the language) to understand the code you see. As we mentioned
    in [Chapter 1](text00015.html#page "Chapter 1. Design and Architectural Pattern
    Fundamentals") , *Design and Architectural Pattern Fundamentals* , most modern
    MVC frameworks come with a template language bundled to be used in Views. Laravel
    ships an implemented template language to be used with Views; this is called the
    Blade template engine, or simply Blade.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为UI开发人员，你需要对PHP语言有一定的了解（至少要了解语言的语法）才能理解你看到的代码。正如我们在[第1章](text00015.html#page
    "第1章.设计和架构模式基础")中提到的，*设计和架构模式基础*，大多数现代MVC框架都附带了一个模板语言，用于在视图中使用。Laravel附带了一个实现的模板语言用于视图；这就是Blade模板引擎，或者简称Blade。
- en: View in Laravel
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Laravel中的视图
- en: 'According to Laravel''s MVC approach, the View handles data from the Controller.
    This means that the View gets the data that is usually already formatted as we
    need. If the View directly communicates with the Model, we have to format, validate,
    or filter the data at the View layer, as seen in the previous example code. So,
    let''s see what a Blade template file looks like in the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Laravel的MVC方法，视图处理来自控制器的数据。这意味着视图获取的数据通常已经按我们的需要格式化了。如果视图直接与模型通信，我们必须在视图层格式化、验证或过滤数据，就像前面示例代码中所示的那样。因此，让我们看看Blade模板文件在下面的代码中是什么样子的：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There is neither PHP syntax nor any unclosed brackets problems. So, we have
    a cleaner template file. Thanks to Blade''s built-in features, we can get clearer
    View files. Generally, the header and footer sections are common to all pages
    in our applications. There are two ways to add them. The first and unrecommended
    way is to separate the header, footer, and body sections in three files, similar
    to something shown in the following example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 没有PHP语法问题，也没有未闭合的括号问题。因此，我们有一个更清晰的模板文件。由于Blade内置的功能，我们可以得到更清晰的视图文件。通常，头部和底部部分在我们应用程序的所有页面中都是通用的。有两种方法可以添加它们。第一种不推荐的方法是将头部、底部和主体部分分别放在三个文件中，类似于下面的示例：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This way is not recommended because it requires each page to include both the
    header and the footer. This also means that if we add a right or left column,
    we will need to change all the Views of our application. The best way to implement
    this in Blade is shown as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式不推荐，因为它要求每个页面都包括头部和底部。这也意味着，如果我们添加右侧或左侧栏，我们将需要更改应用程序的所有视图。在Blade中实现这一点的最佳方式如下所示：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding file is our layout View, for example, `master_layout.blade.php`
    . As you can see, there is a function for the content that is using the `yield()`
    function. This is a placeholder; therefore, when any View file extends this file,
    the section named `content` will be shown instead of the `yield()` function. You
    can define as many sections in your master layout as you need. So, when we want
    to use this layout in a View file, we should use it as shown in the following
    code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的文件是我们的布局视图，例如，`master_layout.blade.php`。正如你所看到的，这里有一个用到`yield()`函数的内容函数。这是一个占位符；因此，当任何视图文件扩展了这个文件，名为`content`的部分将显示在`yield()`函数的位置。你可以在你的主布局中定义尽可能多的部分。所以，当我们想在一个视图文件中使用这个布局时，我们应该像下面的代码一样使用它：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That's it! You can extend the master layout in as many Views as you need, and
    you can create multiple layouts as your application requires.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！你可以在需要的视图中扩展主布局，并根据应用程序的需要创建多个布局。
- en: Summary
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned the role of Views in the MVC pattern, and what Laravel's
    approach to Views is. We saw the basics of the Blade template engine functions.
    For more information, please refer to Laravel's online documentation at [http://laravel.com/](http://laravel.com/)
    .
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了MVC模式中视图的角色，以及Laravel对视图的处理方式。我们了解了Blade模板引擎函数的基础知识。更多信息，请参考Laravel的在线文档[http://laravel.com/](http://laravel.com/)。
- en: In the next chapter, we'll cover the role of the Controller, the maestro in
    the MVC philosophy of Laravel.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍控制器的角色，即Laravel MVC哲学中的主角。
