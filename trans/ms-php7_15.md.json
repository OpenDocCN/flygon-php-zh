["```php\nwget https://phar.phpunit.de/phpunit.phar\nchmod +x phpunit.phar\nsudo mv phpunit.phar /usr/local/bin/phpunit\nphpunit --version\n\n```", "```php\ncomposer require phpunit/phpunit\n\n```", "```php\n<?php declare(strict_types=1); namespace Foggyline\\Catalog\\Model; class Product {\n  protected $id;\n  protected $title;\n  protected $price;\n  protected $taxRate;    public function __construct(string $id, string $title, float $price, int $taxRate)\n {  $this->id = $id;\n  $this->title = $title;\n  $this->price = $price;\n  $this->taxRate = $taxRate;\n }    public function getId(): string\n {  return $this->id;\n }  public function getTitle(): string\n {  return $this->title;\n }    public function getPrice(): float\n {  return $this->price;\n }    public function getTaxRate(): int\n {  return $this->taxRate;\n } }\n\n```", "```php\n<?php   declare(strict_types=1);   namespace Foggyline\\Catalog\\Model; class Category {\n  protected $title;\n  protected $products;    public function __construct(string $title, array $products)\n {  $this->title = $title;\n  $this->products = $products;\n }  public function getTitle(): string\n {  return $this->title;\n }    public function getProducts(): array\n  {\n  return $this->products;\n } } \n\n```", "```php\n<?php namespace Foggyline\\Catalog\\Model;   // Just a dummy class, for testing purpose class Layer {\n  public function dummy()\n {  $time = time();\n  sleep(2);\n  $time = time() - $time;\n  return $time;\n } }\n\n```", "```php\n<?php   declare(strict_types=1);   namespace Foggyline\\Catalog\\Block\\Category;   use Foggyline\\Catalog\\Model\\Category; class View {\n  protected $category;    public function __construct(Category $category)\n {  $this->category = $category;\n }    public function render(): string\n {  $products = '';\n\n  foreach ($this->category->getProducts() as $product) {\n  if ($product instanceof \\Foggyline\\Catalog\\Model\\Product) {\n  $products .= '<div class=\"product\">\n <h1 class=\"product-title\">' . $product->getTitle() . '</h1>\n <div class=\"product-price\">' . number_format($product->getPrice(), 2, ',', '.') . '</h1>\n </div>';\n } }    return '<div class=\"category\">\n <h1 class=\"category-title\">' . $this->category->getTitle() . '</h1>\n <div class=\"category-products\">' . $products . '</div>\n </div>';\n } }\n\n```", "```php\n<?php   $loader = require __DIR__ . '/vendor/autoload.php'; $loader->addPsr4('Foggyline\\\\', __DIR__ . '/src/Foggyline');\n\n```", "```php\n<?php   require __DIR__ . '/autoload.php';    use Foggyline\\Catalog\\Model\\Product; use Foggyline\\Catalog\\Model\\Category; use Foggyline\\Catalog\\Block\\Category\\View as CategoryView;   $category = new Category('Laptops', [\n  new Product('RL', 'Red Laptop', 1499.99, 25),\n  new Product('YL', 'Yellow Laptop', 2499.99, 25),\n  new Product('BL', 'Blue Laptop', 3499.99, 25), ]);   $categoryView = new CategoryView($category); echo $categoryView->render();\n\n```", "```php\n<?php   namespace Foggyline\\Catalog\\Test\\Unit\\Model;   use PHPUnit\\Framework\\TestCase; use Foggyline\\Catalog\\Model\\Product;   class ProductTest extends TestCase {\n  protected $product;    public function setUp()\n {  $this->product = new Product('SL', 'Silver Laptop', 4599.99, 25);\n }    public function testTitle()\n {  $this->assertEquals(\n  'Silver Laptop',\n  $this->product->getTitle()\n ); }  public function testPrice()\n {  $this->assertEquals(\n  4599.99,\n  $this->product->getPrice()\n ); } }\n\n```", "```php\n<?php   namespace Foggyline\\Catalog\\Test\\Unit\\Model;   use PHPUnit\\Framework\\TestCase; use Foggyline\\Catalog\\Model\\Product; use Foggyline\\Catalog\\Model\\Category;   class CategoryTest extends TestCase {\n  protected $category;    public function setUp()\n {  $this->category = new Category('Laptops', [\n  new Product('TRL', 'Test Red Laptop', 1499.99, 25),\n  new Product('TYL', 'Test Yellow Laptop', 2499.99, 25),\n ]); }    public function testTotalProductsCount()\n {  $this->assertCount(2, $this->category->getProducts());\n }  public function testTitle()\n {  $this->assertEquals('Laptops', $this->category->getTitle());\n } }\n\n```", "```php\n<?php   namespace Foggyline\\Catalog\\Test\\Unit\\Block\\Category;   use PHPUnit\\Framework\\TestCase; use Foggyline\\Catalog\\Model\\Product; use Foggyline\\Catalog\\Model\\Category; use Foggyline\\Catalog\\Block\\Category\\View as CategoryView;   class ViewTest extends TestCase {\n  protected $category;\n  protected $categoryView;    public function setUp()\n {  $this->category = new Category('Laptops', [\n  new Product('TRL', 'Test Red Laptop', 1499.99, 25),\n  new Product('TYL', 'Test Yellow Laptop', 2499.99, 25),\n ]);  $this->categoryView = new CategoryView($this->category);\n }  public function testCategoryTitle()\n {  $this->assertContains(\n  '<h1 class=\"category-title\">Laptops',\n  $this->categoryView->render()\n ); }    public function testProductsContainer()\n {  $this->assertContains(\n  '<h1 class=\"product-title\">Test Yellow',\n  $this->categoryView->render()\n ); } }\n\n```", "```php\n<phpunit bootstrap=\"autoload.php\">\n <testsuites>\n <testsuite name=\"foggyline\">\n <directory>src/Foggyline/*/Test/Unit/*</directory>\n </testsuite>\n </testsuites>\n</phpunit>\n\n```", "```php\n<phpunit bootstrap=\"autoload.php\">\n <testsuites>\n <testsuite name=\"foggyline\">\n <directory>src/Foggyline/*/Test/Unit/*</directory>\n </testsuite>\n </testsuites>\n <filter>\n <whitelist>\n <directory>src/Foggyline/</directory>\n <exclude>\n <file>src/config.php</file>\n <file>src/auth.php</file>\n <directory>src/Foggyline/*/Test/</directory>\n </exclude> \n </whitelist>\n <logging>\n <log type=\"coverage-html\" target=\"log/report\" lowUpperBound=\"50\" \n        highLowerBound=\"80\"/>\n </logging>\n </filter>\n</phpunit>\n\n```", "```php\nphpunit --coverage-html log/report\n\n```", "```php\nwget https://github.com/Behat/Behat/releases/download/v3.3.0/behat.phar\nchmod +x behat.phar\nsudo mv behat.phar /usr/local/bin/behat\nbehat --version \n\n```", "```php\ncomposer require behat/behat\n\n```", "```php\n<?php declare(strict_types=1);   namespace Foggyline\\Checkout\\Model;   class Cart implements \\Countable {\n  protected $productQtyMapping = [];    public function addProduct(\\Foggyline\\Catalog\\Model\\Product $product, int $qty): self\n  {\n  $this->productQtyMapping[$product->getId()]['product'] = $product;\n  $this->productQtyMapping[$product->getId()]['qty'] = $qty;\n  return $this;\n }  public function removeProduct($productId): self\n  {\n  if (isset($this->productQtyMapping[$productId])) {\n  unset($this->productQtyMapping[$productId]);\n }    return $this;\n }    public function getSubtotal()\n {  $subtotal = 0.0;    foreach ($this->productQtyMapping as $mapping) {\n  $subtotal += ($mapping['qty'] * $mapping['product']->getPrice());\n }    return $subtotal;\n }    public function getTotal()\n {  $total = 0.0;    foreach ($this->productQtyMapping as $mapping) {\n  $total += ($mapping['qty'] * ($mapping['product']->getPrice() + ($mapping['product']->getPrice() * ($mapping['product']->getTaxRate() / 100))));\n }    return $total;\n }    public function count()\n {  return count($this->productQtyMapping);\n } }\n\n```", "```php\n<?php   $loader = require __DIR__ . '/vendor/autoload.php'; $loader->addPsr4('Foggyline\\\\', __DIR__ . '/src/Foggyline'); use Foggyline\\Catalog\\Model\\Product; use \\Foggyline\\Checkout\\Model\\Cart;   $cart = new Cart(); $cart->addProduct(new Product('RL', 'Red Laptop', 75.00, 25), 1); $cart->addProduct(new Product('YL', 'Yellow Laptop', 100.00, 25), 1); echo $cart->getSubtotal(), PHP_EOL; echo $cart->getTotal(), PHP_EOL;   $cart->removeProduct('YL'); echo $cart->getSubtotal(), PHP_EOL; echo $cart->getTotal(), PHP_EOL;\n\n```", "```php\n<?php   use Behat\\Behat\\Context\\Context; use Behat\\Gherkin\\Node\\PyStringNode; use Behat\\Gherkin\\Node\\TableNode; /**\n * Defines application features from the specific context. */ class FeatureContext implements Context {\n  /**\n * Initializes context. * * Every scenario gets its own context instance. * You can also pass arbitrary arguments to the * context constructor through behat.yml. */  public function __construct()\n { } } \n\n```", "```php\nFeature: Checkout cart\n  In order to buy products\n  As a customer\n  I need to be able to put products into a cart\n\n  Rules:\n  - Each product TAX rate is 25%\n  - Delivery for basket under $100 is $10\n  - Delivery for basket over $100 is $5\n\nScenario: Buying a single product under $100\nGiven there is a \"Red Laptop\", which costs $75.00 and has a tax rate of 25\nWhen I add the \"Red Laptop\" to the cart\nThen I should have 1 product in the cart\nAnd the overall subtotal cart price should be $75.00\nAnd the delivery cost should be $10.00\nAnd the overall total cart price should be $103.75\n\nScenario: Buying two products over $100\nGiven there is a \"Red Laptop\", which costs $75.00 and has a tax rate of 25\nAnd there is a \"Yellow Laptop\", which costs $100.00 and has a tax rate of 25\nWhen I add the \"Red Laptop\" to the cart\nAnd I add the \"Yellow Laptop\" to the cart\nThen I should have 2 product in the cart\nAnd the overall subtotal cart price should be $175.00\nAnd the delivery cost should be $5.00\nAnd the overall total cart price should be $223.75\n\n```", "```php\nbehat --dry-run --append-snippets\n\n```", "```php\n<?php   use Behat\\Behat\\Tester\\Exception\\PendingException; use Behat\\Behat\\Context\\Context; use Behat\\Gherkin\\Node\\PyStringNode; use Behat\\Gherkin\\Node\\TableNode;   /**\n * Defines application features from the specific context. */ class FeatureContext implements Context {\n  /**\n * Initializes context. * * Every scenario gets its own context instance. * You can also pass arbitrary arguments to the * context constructor through behat.yml. */  public function __construct()\n { }    /**\n * @Given there is a :arg1, which costs $:arg2 and has a tax rate of :arg3\n */  public function thereIsAWhichCostsAndHasATaxRateOf($arg1, $arg2, $arg3)\n {  throw new PendingException();\n }    /**\n * @When I add the :arg1 to the cart\n */  public function iAddTheToTheCart($arg1)\n {  throw new PendingException();\n }    /**\n * @Then I should have :arg1 product in the cart\n */  public function iShouldHaveProductInTheCart($arg1)\n {  throw new PendingException();\n }    /**\n * @Then the overall subtotal cart price should be $:arg1\n */  public function theOverallSubtotalCartPriceShouldBe($arg1)\n {  throw new PendingException();\n }    /**\n * @Then the delivery cost should be $:arg1\n */  public function theDeliveryCostShouldBe($arg1)\n {  throw new PendingException();\n }    /**\n * @Then the overall total cart price should be $:arg1\n */  public function theOverallTotalCartPriceShouldBe($arg1)\n {  throw new PendingException();\n } } \n\n```", "```php\n<?php $loader = require __DIR__ . '/../../vendor/autoload.php'; $loader->addPsr4('Foggyline\\\\', __DIR__ . '/../../src/Foggyline');   use Behat\\Behat\\Tester\\Exception\\PendingException; use Behat\\Behat\\Context\\Context; use Behat\\Gherkin\\Node\\PyStringNode; use Behat\\Gherkin\\Node\\TableNode;   use Foggyline\\Catalog\\Model\\Product; use \\Foggyline\\Checkout\\Model\\Cart; use \\PHPUnit\\Framework\\Assert; /**\n * Defines application features from the specific context. */ class FeatureContext implements Context {\n  protected $cart;\n  protected $products = [];    /**\n * Initializes context. * * Every scenario gets its own context instance. * You can also pass arbitrary arguments to the * context constructor through behat.yml. */  public function __construct()\n {  $this->cart = new Cart();\n }    /**\n * @Given there is a :arg1, which costs $:arg2 and has a tax rate of :arg3\n */  public function thereIsAWhichCostsAndHasATaxRateOf($arg1, $arg2, $arg3)\n {  $this->products[$arg1] = new Product($arg1, $arg1, $arg2, $arg3);\n }    /**\n * @When I add the :arg1 to the cart\n */  public function iAddTheToTheCart($arg1)\n {  $this->cart->addProduct($this->products[$arg1], 1);\n }  /**\n * @Then I should have :arg1 product in the cart\n */  public function iShouldHaveProductInTheCart($arg1)\n { Assert::assertCount((int)$arg1, $this->cart);\n }    /**\n * @Then the overall subtotal cart price should be $:arg1\n */  public function theOverallSubtotalCartPriceShouldBe($arg1)\n { Assert::assertEquals($arg1, $this->cart->getSubtotal());\n }    /**\n * @Then the delivery cost should be $:arg1\n */  public function theDeliveryCostShouldBe($arg1)\n { Assert::assertEquals($arg1, $this->cart->getDeliveryCost());\n }    /**\n * @Then the overall total cart price should be $:arg1\n */  public function theOverallTotalCartPriceShouldBe($arg1)\n { Assert::assertEquals($arg1, $this->cart->getTotal());\n } } \n\n```", "```php\ncomposer require phpunit/phpunit\n\n```", "```php\nwget https://github.com/phpspec/phpspec/releases/download/3.2.3/phpspec.phar\nchmod +x phpspec.phar\nsudo mv phpspec.phar /usr/local/bin/phpspec\nphpspec --version\n\n```", "```php\ncomposer require phpspec/phpspec\n\n```", "```php\n<?php namespace PhpSpec\\Matcher; interface Matcher {\n  public function supports($name, $subject, array $arguments);\n  public function positiveMatch($name, $subject, array $arguments);\n  public function negativeMatch($name, $subject, array $arguments);\n  public function getPriority(); } \n\n```", "```php\nphpspec describe Foggyline/Checkout/Model/Cart\nphpspec describe Foggyline/Catalog/Model/Product\n\n```", "```php\n<?php namespace spec\\Foggyline\\Checkout\\Model; use Foggyline\\Checkout\\Model\\Cart; use PhpSpec\\ObjectBehavior; use Prophecy\\Argument;   class CartSpec extends ObjectBehavior {\n  function it_is_initializable()\n {  $this->shouldHaveType(Cart::class);\n } }\n\n```", "```php\n<?php namespace spec\\Foggyline\\Catalog\\Model;   use Foggyline\\Catalog\\Model\\Product; use PhpSpec\\ObjectBehavior; use Prophecy\\Argument; class ProductSpec extends ObjectBehavior {\n  function it_is_initializable()\n {  $this->shouldHaveType(Product::class);\n } }\n\n```", "```php\n<?php   namespace spec\\Foggyline\\Checkout\\Model;   use Foggyline\\Checkout\\Model\\Cart; use PhpSpec\\ObjectBehavior; use Prophecy\\Argument; use Foggyline\\Catalog\\Model\\Product;   class CartSpec extends ObjectBehavior {\n  function it_is_initializable()\n {  $this->shouldHaveType(Cart::class);\n }    function it_adds_single_product_to_cart()\n {  $this->addProduct(\n  new Product('YL', 'Yellow Laptop', 1499.99, 25),\n  2\n  );    $this->count()->shouldBeLike(1);\n }    function it_adds_two_products_to_cart()\n {  $this->addProduct(\n  new Product('YL', 'Yellow Laptop', 1499.99, 25),\n  2\n  );\n\n  $this->addProduct(\n  new Product('RL', 'Red Laptop', 2499.99, 25),\n  2\n  );\n\n  $this->count()->shouldBeLike(2);\n } } \n\n```", "```php\n<?php   namespace spec\\Foggyline\\Catalog\\Model;   use Foggyline\\Catalog\\Model\\Product; use PhpSpec\\ObjectBehavior; use Prophecy\\Argument;   class ProductSpec extends ObjectBehavior {\n  function it_is_initializable()\n {  $this->shouldHaveType(Product::class);\n }  function let()\n {  $this->beConstructedWith(\n  'YL', 'Yellow Laptop', 1499.99, 25\n  );\n }    function its_price_should_be_like()\n {  $this->getPrice()->shouldBeLike(1499.99);\n }    function its_title_should_be_like()\n {  $this->getTitle()->shouldBeLike('Yellow Laptop');\n } } \n\n```", "```php\nphpspec run --bootstrap=autoload.php\n\n```", "```php\nphpspec describe Foggyline/Checkout/Model/Guest/Cart\n\n```", "```php\n<?php   namespace Foggyline\\Checkout\\Model\\Guest; class Cart { } \n\n```", "```php\n$this->getTitle()->shouldBeLike('Yellow');\n\n```", "```php\nsudo apt-get -y install jmeter\n\n```", "```php\nwget http://ftp.carnet.hr/misc/apache//jmeter/binaries/apache-jmeter-3.2.tgz\ntar -xf apache-jmeter-3.2.tgz\n\n```", "```php\njmeter -n -t web-test-plan.jmx\n\n```"]