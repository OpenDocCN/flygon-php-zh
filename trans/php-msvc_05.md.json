["```php\n    {\n \u00a0\u00a0\u00a0  \"name\": \"php-microservices/user\",\n \u00a0\u00a0\u00a0  \"description\": \"Finding Secrets, User microservice\",\n \u00a0\u00a0\u00a0  \"keywords\": [\"finding secrets\", \"user\", \"microservice\", \"Lumen\" ],\n \u00a0\u00a0\u00a0  \"license\": \"MIT\",\n \u00a0\u00a0\u00a0  \"type\": \"project\",\n \u00a0\u00a0\u00a0  \"require\": {\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"php\": \">=5.5.9\",\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"laravel/lumen-framework\": \"5.2.*\",\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"vlucas/phpdotenv\": \"~2.2\"\n \u00a0\u00a0\u00a0  },\n \u00a0\u00a0\u00a0  \"require-dev\": {\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"fzaninotto/faker\": \"~1.4\",\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"phpunit/phpunit\": \"~4.0\",\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"behat/behat\": \"3.*\"\n \u00a0\u00a0\u00a0  },\n \u00a0\u00a0\u00a0  \"autoload\": {\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"psr-4\": {\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"App\": \"app/\"\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n \u00a0\u00a0\u00a0  },\n \u00a0\u00a0\u00a0  \"autoload-dev\": {\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"classmap\": [\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"tests/\",\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"database/\"\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0]\n \u00a0\u00a0\u00a0  }\n    }\n```", "```php\n**composer install**\n\n```", "```php\n    $app->group([\n \u00a0\u00a0     'prefix' => 'api/v1',\n \u00a0\u00a0     'namespace' => 'App\\Http\\Controllers'],\n \u00a0\u00a0     function ($app) {\n \u00a0\u00a0         $app->get('user', 'UserController@index');\n \u00a0\u00a0         $app->get('user/{id}', 'UserController@get');\n \u00a0\u00a0         $app->post('user', 'UserController@create');   \n \u00a0\u00a0         $app->put('user/{id}', 'UserController@update');\n \u00a0\u00a0         $app->delete('user/{id}', 'UserController@delete');\n \u00a0\u00a0         $app->get('user/{id}/location', \n            'UserController@getCurrentLocation');\n \u00a0\u00a0         $app->post('user/{id}/location/latitude/{latitude}\n            /longitude/{longitude}', \n            'UserController@setCurrentLocation');\n        }\n    );\n```", "```php\n    $app->get('user/{id}', 'UserController@get');\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 namespace App\\Http\\Controllers;\n \u00a0\u00a0 use Illuminate\\Http\\Request;\n \u00a0\u00a0 class UserController extends Controller\n \u00a0\u00a0 {\n   \u00a0\u00a0 public function index(Request $request)\n      {\n        return response()->json(['method' => 'index']);\n      }\n \u00a0\u00a0   public function get($id)\n      {\n        return response()->json(['method' => 'get', 'id' => $id]);\n      }\n      public function create(Request $request)\n      {\n        return response()->json(['method' => 'create']);\n      }\n      public function update(Request $request, $id)\n      {\n        return response()->json(['method' => 'update', 'id' => $id]);\n      }\n      public function delete($id)\n      {\n        return response()->json(['method' => 'delete', 'id' => $id]);\n      }\n      public function getCurrentLocation($id)\n      {\n        return response()->json(['method' => 'getCurrentLocation',\n                                'id' => $id]);\n      }\n      public function setCurrentLocation(Request $request, $id,\n                                         $latitude, $longitude)\n      {\n        return response()->json(['method' => 'setCurrentLocation',\n                                 'id' => $id, 'latitude' => $latitude,\n                                 'longitude' => $longitude]);\n      }\n    }\n```", "```php\n\u00a0\u00a0\u00a0 return response()->json(['method' => 'update', 'id' => $id]);\n```", "```php\n\u00a0\u00a0\u00a0 {\n      \"method\" : \"update\",\n      \"id\" : 123\n    }\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 namespace App\\Http\\Middleware;\n \u00a0\u00a0 use Closure;\n\n \u00a0\u00a0 class ApiKeyMiddleware\n \u00a0\u00a0 {\n      const API_KEY = 'RSAy430_a3eGR';\n      public function handle($request, Closure $next)\n      {\n        if ($request->input('api_key') !== self::API_KEY) {\n            die('API_KEY invalid');\n        }\n        return $next($request);\n      }\n    }\n```", "```php\n\u00a0\u00a0\u00a0 $app->middleware([App\\Http\\Middleware\\ApiKeyMiddleware::class]);\n \u00a0\u00a0 $app->routeMiddleware(['api_key' => App\\Http\\Middleware\n    \\ApiKeyMiddleware::class]);\n```", "```php\n\u00a0\u00a0\u00a0 $app->group([\n \u00a0\u00a0     **'middleware' => 'api_key'**, \n \u00a0\u00a0     'prefix' => 'api/v1',\n \u00a0\u00a0     'namespace' => 'App\\Http\\Controllers'],\n \u00a0\u00a0     function($app) {\n \u00a0\u00a0         $app->get('user', 'UserController@index');\n \u00a0\u00a0         $app->get('user/{id}', 'UserController@get');\n \u00a0\u00a0         $app->post('user', 'UserController@create');\n```", "```php\n\u00a0\u00a0\u00a0 public function duel(Request $request) \n \u00a0\u00a0 {\n \u00a0\u00a0     return response()->json([]);\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 $app->post('battle/duel', 'BattleController@duel');\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 namespace App\\Algorithm;\n \u00a0\u00a0 class Dice\n \u00a0\u00a0 {\n \u00a0\u00a0     const TOTAL_ROUNDS\u00a0\u00a0 = 3;\n \u00a0\u00a0     const MIN_DICE_VALUE = 1;\n \u00a0\u00a0     const MAX_DICE_VALUE = 6;\n \u00a0\u00a0     public function fight()\n \u00a0\u00a0     {\n \u00a0\u00a0         $totalRoundsWin = [\n \u00a0\u00a0             'player1' => 0,\n \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  'player2' => 0\n \u00a0\u00a0         ];\n\n  \u00a0\u00a0        for ($i = 0; $i < self::TOTAL_ROUNDS; $i++) {\n      \u00a0\u00a0        $player1Result = rand(\n    \u00a0\u00a0              self::MIN_DICE_VALUE,\n    \u00a0\u00a0              self::MAX_DICE_VALUE\n    \u00a0\u00a0          );\n     \u00a0\u00a0         $player2Result = rand(\n        \u00a0\u00a0          self::MIN_DICE_VALUE,\n     \u00a0\u00a0             self::MAX_DICE_VALUE\n      \u00a0\u00a0        );\n     \u00a0\u00a0         $roundResult = ($player1Result <=> $player2Result);\n    \u00a0\u00a0          if ($roundResult === 1) {\n      \u00a0\u00a0            $totalRoundsWin['player1'] = \n    \u00a0\u00a0              $totalRoundsWin['player1'] + 1;\n    \u00a0\u00a0          } else if ($roundResult === -1) {\n     \u00a0\u00a0             $totalRoundsWin['player2'] = \n      \u00a0\u00a0            $totalRoundsWin['player2'] + 1;\n      \u00a0\u00a0        }\n      \u00a0\u00a0    }\n\n  \u00a0\u00a0        return $totalRoundsWin;\n \u00a0\u00a0     }\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 namespace App\\Http\\Controllers;\n \u00a0\u00a0 use Illuminate\\Http\\Request;\n \u00a0\u00a0\u00a0**use App\\Algorithm\\Dice;**\n\n \u00a0\u00a0 class BattleController extends Controller\n \u00a0\u00a0 {\n **protected $battleAlgorithm = null;**\n **protected function setBattleAlgorithm()**\n **{**\n **$this->battleAlgorithm = new Dice();**\n **}**\n\n \u00a0\u00a0     /** ... Code omitted ... **/\n\n **public function duel(Request $request)**\n **{**\n **$this->setBattleAlgorithm();**\n**$duelResult = $this->battleAlgorithm->fight();** \n **return response()->json(**\n **[**\n **'player1'\u00a0\u00a0\u00a0\u00a0 => $request->input('userA'),**\n**\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0       'player2'\u00a0\u00a0\u00a0\u00a0 => $request->input('userB'),**\n**\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 'duelResults' => $duelResult**\n**\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 ]**\n**\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0);**\n **}**\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 {\n  \u00a0\u00a0    \"player1\": \"John\",\n  \u00a0\u00a0    \"player2\": \"Joe\",\n   \u00a0\u00a0   \"duelResults\": {\n    \u00a0\u00a0      \"player1\": 2,\n\u00a0\u00a0\u00a0  \u00a0\u00a0     \"player2\": 1\n    \u00a0\u00a0  }\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 {\n   \u00a0\u00a0   // Code omitted\n  \u00a0\u00a0    \"require\": {\n\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"php\": \">=5.5.9\",\n\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0  \"laravel/lumen-framework\": \"5.2.*\",\n\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\"vlucas/phpdotenv\": \"~2.2\",\n **\"guzzlehttp/guzzle\": \"~6.0\"**\n   \u00a0\u00a0   },\n   \u00a0\u00a0   // Code omitted\n \u00a0\u00a0 }\n```", "```php\n**cd /var/www/html && compose update**\n\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n\n \u00a0\u00a0 namespace App\\Http\\Controllers;\n \u00a0\u00a0 use Illuminate\\Http\\Request;\n \u00a0\u00a0 class UserController extends Controller\n \u00a0\u00a0 {\n \u00a0\u00a0     **protected $userCache = [**\n  \u00a0\u00a0        **1 => [**\n **'name' => 'John',**\n **'city' => 'Barcelona'**\n **],**\n **2 => [**\n **'name' => 'Joe',**\n       \u00a0\u00a0       **'city' => 'Paris'**\n      \u00a0\u00a0    **]**\n   \u00a0\u00a0   **];**\n\n   \u00a0\u00a0   /** ... Code omitted ... **/\n\n   \u00a0\u00a0   **public function get($id)**\n    \u00a0\u00a0  **{**\n    \u00a0\u00a0      **return response()->json(**\n **$this->userCache[$id]**\n **);**\n   \u00a0\u00a0   **}**\n\n   \u00a0\u00a0   /** ... Code omitted ... **/\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 {\n \u00a0\u00a0     \"name\": \"Joe\",\n \u00a0\u00a0     \"city\": \"Paris\"\n \u00a0\u00a0 }\n```", "```php\n     **docker-compose stop**\n\n    ```", "```php\n    \u00a0  \u00a0\u00a0 microservice_battle_fpm:\n     \u00a0\u00a0       build: ./microservices/battle/php-fpm/\n     \u00a0\u00a0       volumes_from:\n              - source_battle\n     \u00a0\u00a0       links:\n      \u00a0\u00a0          - autodiscovery\n     \u00a0\u00a0\u00a0 **- microservice_user_nginx**\n      \u00a0\u00a0      expose:\n       \u00a0\u00a0         - 9000\n         \u00a0\u00a0   environment:\n           \u00a0\u00a0     - BACKEND=microservice-battle-nginx\n        \u00a0\u00a0        - CONSUL=autodiscovery\n    ```", "```php\n     **docker-compose start**\n\n    ```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 namespace App\\Http\\Controllers;\n \u00a0\u00a0 use Illuminate\\Http\\Request;\n \u00a0\u00a0 use App\\Algorithm\\Dice;\n \u00a0\u00a0\u00a0**use GuzzleHttp\\Client;**\n\n \u00a0\u00a0 class BattleController extends Controller\n \u00a0\u00a0 {\n  \u00a0\u00a0    **const USER_ENDPOINT = 'http://microservice_user_nginx/api\n\u00a0\u00a0\u00a0     /v1/user/';**\n \u00a0\u00a0     /** ... Code omitted ... **/\n\n \u00a0\u00a0     public function duel(Request $request)\n \u00a0\u00a0     {\n  \u00a0\u00a0        $this->setBattleAlgorithm();\n\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0  $duelResult = $this->battleAlgorithm->fight();\n\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0  **$client = new Client(['verify' => false]);**\n**\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0  $player1Data = $client->get(                          \n   \u00a0\u00a0       self::USER_ENDPOINT . $request->input('userA'));**\n**\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0  $player2Data = $client->get(                          \n    \u00a0\u00a0      self::USER_ENDPOINT . $request->input('userB'));**\n\n  \u00a0\u00a0        return response()->json(\n   \u00a0\u00a0           [\n   \u00a0\u00a0               'player1' => **json_decode($player1Data->getBody())**,\n  \u00a0\u00a0                'player2' => **json_decode($player2Data->getBody())**,\n   \u00a0\u00a0               'duelResults' => $duelResult\n    \u00a0\u00a0          ]\n    \u00a0\u00a0      );\n   \u00a0\u00a0   }\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 {\n \u00a0\u00a0     \"player1\": {\n \u00a0\u00a0         \"name\": \"John\",\n\u00a0 \u00a0\u00a0 \u00a0\u00a0     \"city\": \"Barcelona\"\n  \u00a0\u00a0    },\n   \u00a0\u00a0   \"player2\": {\n  \u00a0\u00a0        \"name\": \"Joe\",\n\u00a0\u00a0 \u00a0\u00a0 \u00a0     \"city\": \"Paris\"\n \u00a0\u00a0     },\n \u00a0\u00a0     \"duelResults\": {\n \u00a0\u00a0 \u00a0\u00a0\u00a0     \"player1\": 0,\n \u00a0\u00a0 \u00a0\u00a0\u00a0     \"player2\": 3\n  \u00a0\u00a0    }\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 links:\n \u00a0\u00a0     - autodiscovery\n \u00a0\u00a0     - microservice_secret_database\n```", "```php\n\u00a0\u00a0\u00a0 microservice_secret_database:\n \u00a0\u00a0     build: ./microservices/secret/database/\n \u00a0\u00a0     environment:\n \u00a0\u00a0         - CONSUL=autodiscovery\n \u00a0\u00a0         - MYSQL_ROOT_PASSWORD=mysecret\n \u00a0\u00a0         - MYSQL_DATABASE=finding_secrets\n \u00a0\u00a0         - MYSQL_USER=secret\n  \u00a0\u00a0        - MYSQL_PASSWORD=mysecret\n \u00a0\u00a0     ports:\n      \u00a0\u00a0    - 6666:3306\n```", "```php\n**docker exec -it docker_microservice_secret_fpm_1 /bin/bash**\n\n```", "```php\n**cd /var/www/html**\n\n```", "```php\n**php artisan make:migration create_secrets_table**\n\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 use Illuminate\\Database\\Schema\\Blueprint;\n \u00a0\u00a0 use Illuminate\\Database\\Migrations\\Migration;\n \u00a0\u00a0 class CreateSecretsTable extends Migration\n \u00a0\u00a0 {\n \u00a0\u00a0     public function up()\n \u00a0\u00a0     {\n \u00a0\u00a0     }\n \u00a0\u00a0     public function down()\n \u00a0\u00a0     {\n \u00a0\u00a0     }\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 use Illuminate\\Database\\Schema\\Blueprint;\n \u00a0\u00a0 use Illuminate\\Database\\Migrations\\Migration;\n \u00a0\u00a0 class CreateSecretsTable extends Migration\n \u00a0\u00a0 {\n \u00a0\u00a0     public function up()\n \u00a0\u00a0     {\n  \u00a0\u00a0        Schema::create(\n   \u00a0\u00a0           'secrets', \n   \u00a0\u00a0           function (Blueprint $table) {\n   \u00a0\u00a0               $table->increments('id');\n  \u00a0\u00a0                $table->string('name', 255);\n  \u00a0\u00a0                $table->double('latitude');\n    \u00a0\u00a0              $table->double('longitude')\n    \u00a0\u00a0                  ->nullable();\n   \u00a0\u00a0               $table->string('location_name', 255);\n   \u00a0\u00a0               $table->timestamps();\n  \u00a0\u00a0            }\n \u00a0\u00a0         );\n \u00a0\u00a0     }\n \u00a0\u00a0     public function down()\n \u00a0\u00a0     {\n  \u00a0\u00a0        Schema::drop('secrets');\n  \u00a0\u00a0    }\n \u00a0\u00a0 }\n```", "```php\n**php artisan migrate\nMigrated: 2016_11_09_200645_create_secrets_table**\n\n```", "```php\n\u00a0\u00a0\u00a0 +------+----------------------------------------+\n \u00a0\u00a0 | Ran? | Migration \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0|\n \u00a0\u00a0 +------+----------------------------------------+\n \u00a0\u00a0 | Y\u00a0\u00a0\u00a0 \u00a0| 2016_11_09_200645_create_secrets_table |\n \u00a0\u00a0 +------+----------------------------------------+\n```", "```php\n**php artisan migrate:rollback**\n\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 use Illuminate\\DatabaseSeeder;\n \u00a0\u00a0 class SecretsTableSeeder extends Seeder\n \u00a0\u00a0 {\n \u00a0\u00a0     public function run()\n  \u00a0\u00a0    {\n \u00a0\u00a0         DB::table('secrets')->delete();\n \u00a0\u00a0         DB::table('secrets')->insert([\n  \u00a0\u00a0            [\n  \u00a0\u00a0                'name' => 'amber', \n  \u00a0\u00a0                'latitude' => 42.8805, \n \u00a0\u00a0                 'longitude' => -8.54569, \n \u00a0\u00a0                 'location_name' => 'Santiago de Compostela'\n     \u00a0\u00a0         ],\n\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  [\n      \u00a0\u00a0            'name' => 'diamond', \n      \u00a0\u00a0            'latitude' => 38.2622, \n     \u00a0\u00a0             'longitude' => -0.70107,\n     \u00a0\u00a0             'location_name' => 'Elche'\n      \u00a0\u00a0        ],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0  [\n      \u00a0\u00a0            'name' => 'pearl', \n     \u00a0\u00a0             'latitude' => 41.8919,\n     \u00a0\u00a0             'longitude' => 2.5113, \n     \u00a0\u00a0             'location_name' => 'Rome'\n      \u00a0\u00a0        ],\n\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0  [\n      \u00a0\u00a0            'name' => 'ruby', \n      \u00a0\u00a0            'latitude' => 53.4106, \n      \u00a0\u00a0            'longitude' => -2.9779, \n       \u00a0\u00a0           'location_name' => 'Liverpool'\n       \u00a0\u00a0       ],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0  [\n      \u00a0\u00a0            'name' => 'sapphire', \n     \u00a0\u00a0             'latitude' => 50.08804, \n        \u00a0\u00a0          'longitude' => 14.42076, \n         \u00a0\u00a0         'location_name' => 'Prague'\n         \u00a0\u00a0     ]\n\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0  ]);\n  \u00a0\u00a0    }\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 public function run()\n \u00a0\u00a0 {\n \u00a0\u00a0     $this->call('SecretsTableSeeder');\n \u00a0\u00a0 }\n```", "```php\n**php artisan db:seed**\n\n```", "```php\nSELECT * FROM secrets LIMIT 10 //MySQL\nSELECT TOP 10 * FROM secrets //SqlServer\nSELECT * FROM secrets WHERE rownum<=10; //Oracle\n```", "```php\n\u00a0\u00a0\u00a0 $app->withEloquent();\n```", "```php\n\u00a0\u00a0\u00a0 DB_CONNECTION=mysql\n \u00a0\u00a0 DB_HOST=microservice_secret_database\n \u00a0\u00a0 DB_PORT=3306\n \u00a0\u00a0 DB_DATABASE=finding_secrets\n \u00a0\u00a0 DB_USERNAME=secret\n \u00a0\u00a0 DB_PASSWORD=mysecret\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 namespace App\\Model;\n \u00a0\u00a0 use Illuminate\\Database\\Eloquent\\Model;\n \u00a0\u00a0 class Secret extends Model\n \u00a0\u00a0 {\n \u00a0\u00a0     protected $table \u00a0\u00a0\u00a0= 'secrets';\n \u00a0\u00a0     protected $fillable = [\n \u00a0\u00a0         'name', \n \u00a0\u00a0         'latitude', \n \u00a0\u00a0         'longitude',                            \n \u00a0\u00a0         'location_name'\n \u00a0\u00a0     ];\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 namespace App\\Transformers;\n \u00a0\u00a0 use App\\Model\\Secret;\n \u00a0\u00a0 use League\\Fractal\\Transformer\\Abstract;\n \u00a0\u00a0 class SecretTransformer extends TransformerAbstract\n \u00a0\u00a0 {\n \u00a0\u00a0     public function transform(Secret $secret)\n \u00a0\u00a0     {\n  \u00a0\u00a0        return [\n  \u00a0\u00a0            'id' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 => $secret->id,\n  \u00a0\u00a0            'name' \u00a0\u00a0\u00a0\u00a0 => $secret->name,\n  \u00a0\u00a0            'location' \u00a0=> [\n     \u00a0\u00a0             'latitude' \u00a0=> $secret->latitude,\n     \u00a0\u00a0             'longitude' => $secret->longitude,\n         \u00a0\u00a0         'name' \u00a0\u00a0\u00a0\u00a0 => $secret->location_name\n        \u00a0\u00a0      ]\n       \u00a0\u00a0   ];\n   \u00a0\u00a0   }\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 use App\\Model\\Secret;\n \u00a0\u00a0 use App\\Transformers\\SecretTransformer;\n \u00a0\u00a0 use League\\Fractal\\Manager;\n \u00a0\u00a0 use League\\Fractal\\Resource\\Collection;\n```", "```php\n\u00a0\u00a0\u00a0 public function index(\n \u00a0\u00a0     Manager $fractal, \n \u00a0\u00a0     SecretTransformer $secretTransformer, \n \u00a0\u00a0     Request $request)\n \u00a0\u00a0 {\n  \u00a0\u00a0    $records = Secret::all();\n  \u00a0\u00a0    $collection = new Collection(\n    \u00a0\u00a0      $records, \n  \u00a0\u00a0        $secretTransformer\n   \u00a0\u00a0   );\n \u00a0\u00a0     $data = $fractal->createData($collection)\n \u00a0\u00a0         ->toArray();\n\n \u00a0\u00a0     return response()->json($data);\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 {\n \u00a0\u00a0     \"data\": [\n \u00a0\u00a0         {\n   \u00a0\u00a0           \"id\": 1,\n  \u00a0\u00a0            \"name\": \"amber\",\n  \u00a0\u00a0            \"location\": {\n  \u00a0\u00a0                \"latitude\": 42.8805,\n \u00a0\u00a0                 \"longitude\": -8.54569,\n  \u00a0\u00a0                \"name\": \"Santiago de Compostela\"\n \u00a0\u00a0             }\n \u00a0\u00a0         },\n\n  \u00a0\u00a0        /** Code omitted ** /\n  \u00a0\u00a0        {\n  \u00a0\u00a0            \"id\": 5,\n   \u00a0\u00a0           \"name\": \"sapphire\",\n    \u00a0\u00a0          \"location\": {\n     \u00a0\u00a0             \"latitude\": 50.08804,\n     \u00a0\u00a0             \"longitude\": 14.42076,\n     \u00a0\u00a0             \"name\": \"Prague\"\n    \u00a0\u00a0          }\n    \u00a0\u00a0      }\n  \u00a0\u00a0    ]\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 return [\n \u00a0\u00a0     'default' \u00a0\u00a0\u00a0 => 'mysql',\n \u00a0\u00a0     'connections' => [\n \u00a0\u00a0         'mysql' => [\n \u00a0\u00a0             'driver'\u00a0\u00a0\u00a0 => 'mysql',\n \u00a0\u00a0             'host' \u00a0\u00a0\u00a0\u00a0 => env('DB_HOST'),\n \u00a0\u00a0             'database' \u00a0=> env('DB_DATABASE'),\n \u00a0\u00a0             'username' \u00a0=> env('DB_USERNAME'),\n \u00a0\u00a0             'password' \u00a0=> env('DB_PASSWORD'),\n \u00a0\u00a0             'collation' => 'utf8_unicode_ci'\n \u00a0\u00a0         ]\n \u00a0\u00a0     ]\n \u00a0\u00a0 ];\n```", "```php\n\u00a0\u00a0\u00a0 $app->withFacades();\n \u00a0\u00a0 $app->withEloquent();\n \u00a0\u00a0\u00a0**$app->configure('database');**\n\n```", "```php\n\u00a0\u00a0\u00a0 public function create(Request $request)\n \u00a0\u00a0 {\n  \u00a0\u00a0    **$this->validate(**\n **$request,**\n **[**\n **'name' \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 => 'required|string|unique:secrets,name',**\n **'latitude' \u00a0\u00a0\u00a0\u00a0 => 'required|numeric',**\n**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  'longitude' \u00a0\u00a0\u00a0 => 'required|numeric',**\n**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  'location_name' => 'required|string'**\n **]**\n**\u00a0 \u00a0\u00a0    );**\n\n```", "```php\n\u00a0\u00a0\u00a0 {\n \u00a0\u00a0     \"name\": \"amber\",\n \u00a0\u00a0     \"latitude\":\"1.23\",\n \u00a0\u00a0     \"longitude\":\"-1.23\",\n \u00a0\u00a0     \"location_name\": \"test\"\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 {\n \u00a0\u00a0     \"name\": [\n \u00a0\u00a0         \"The name has already been taken.\"\n \u00a0\u00a0     ]\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 $secret = Secret::create($request->all());\n \u00a0\u00a0 if ($secret->save() === false) {\n \u00a0\u00a0     // Manage Error\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 microservice_user_fpm:\n \u00a0\u00a0     build: ./microservices/user/php-fpm/\n  \u00a0\u00a0    volumes_from:\n  \u00a0\u00a0        - source_user\n  \u00a0\u00a0    links:\n  \u00a0\u00a0        - autodiscovery\n **- microservice_secret_nginx**\n \u00a0\u00a0     expose:\n \u00a0\u00a0         - 9000\n  \u00a0\u00a0    environment:\n  \u00a0\u00a0        - BACKEND=microservice-user-nginx\n  \u00a0\u00a0        - CONSUL=autodiscovery\n```", "```php\n**docker-compose start**\n\n```", "```php\n\u00a0\u00a0\u00a0 $app->get(\n \u00a0\u00a0     'user/{id}/wallet', \n \u00a0\u00a0     'UserController@getWallet'\n \u00a0\u00a0 );\n```", "```php\n\u00a0\u00a0\u00a0 public function getWallet($id)\n \u00a0\u00a0 {\n \u00a0\u00a0     /* ... Code ommited ... */\n \u00a0\u00a0     $client = new Client(['verify' => false]);\n \u00a0\u00a0     try {\n \u00a0\u00a0         $remoteCall = $client->get(\n \u00a0\u00a0             'http://microservice_secret_nginx                       \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0  /api/v1/secret/1');\n \u00a0\u00a0     } catch (ConnectException $e) {\n \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* ... Code ommited ... */\n \u00a0\u00a0         throw $e;\n \u00a0\u00a0     } catch (ServerException $e) {\n \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* ... Code ommited ... */\n \u00a0\u00a0     } catch (Exception $e) {\n \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* ... Code ommited ... */\n \u00a0\u00a0     }\n \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* ... Code ommited ... */\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 $remoteCall = $client->get(\n \u00a0\u00a0     **'http://this_uri_is_not_going_to_work'\n \u00a0\u00a0\u00a0**);\n```", "```php\n    public function get($id)\n    {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this_function_does_not_exist();\n    }\n```", "```php\n\u00a0\u00a0\u00a0 /** Code omitted **/\n \u00a0\u00a0 use SymfonyComponentHttpFoundationResponse;\n \u00a0\u00a0 use GuzzleHttpExceptionConnectException;\n\n \u00a0\u00a0 /** Code omitted **/\n\n \u00a0\u00a0 public function render($request, Exception $e)\n \u00a0\u00a0 {\n \u00a0\u00a0     switch ($e) {\n \u00a0\u00a0         case ($e instanceof ConnectException) :\n \u00a0\u00a0             return response()->json(\n \u00a0\u00a0                 [\n \u00a0\u00a0                     'error' => 'connection_error',\n \u00a0\u00a0                     'code' \u00a0=> '123'\n     \u00a0\u00a0             ],\n      \u00a0\u00a0            Response::HTTP_SERVICE_UNAVAILABLE\n      \u00a0\u00a0        );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0  break;\n\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0default :\n\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  return parent::render($request, $e);\n\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 break;\n  \u00a0\u00a0    }\u00a0\u00a0 \n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 microservice_user_redis:\n \u00a0\u00a0     build: ./microservices/user/redis/\n  \u00a0\u00a0    links:\n   \u00a0\u00a0       - autodiscovery\n   \u00a0\u00a0   expose:\n    \u00a0\u00a0      - 6379\n   \u00a0\u00a0   ports:\n    \u00a0\u00a0      - 6379:6379\n```", "```php\n\u00a0\u00a0\u00a0 links:\n  \u00a0\u00a0    - autodiscovery\n   \u00a0\u00a0   - microservice_secret_nginx\n   \u00a0\u00a0   - microservice_user_redis\n```", "```php\n\u00a0\u00a0\u00a0 FROM redis:latest\n```", "```php\n\u00a0\u00a0\u00a0 \"predis/predis\": \"~1.0\",\n \u00a0\u00a0 \"illuminate/redis\": \"5.2.*\"\n```", "```php\n\u00a0\u00a0\u00a0 \"illuminate/mail\": \"5.2.*\"\n```", "```php\n\u00a0\u00a0\u00a0 QUEUE_DRIVER=redis\n \u00a0\u00a0 CACHE_REDIS_CONNECTION=default\n \u00a0\u00a0 REDIS_HOST=microservice_user_redis\n \u00a0\u00a0 REDIS_PORT=6379\n \u00a0\u00a0 REDIS_DATABASE=0\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 return [\n  \u00a0\u00a0    'redis' => [\n  \u00a0\u00a0        'client'  => 'predis',\n\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0  'cluster' => false,\n\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0  'default' => [\n    \u00a0\u00a0          'host' \u00a0\u00a0\u00a0 => env('REDIS_HOST', 'localhost'),\n\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  'password' => env('REDIS_PASSWORD', null),\n\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  'port' \u00a0\u00a0\u00a0 => env('REDIS_PORT', 6379),\n\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  'database' => env('REDIS_DATABASE', 0),\n\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0  ],\n   \u00a0\u00a0   ]\n \u00a0\u00a0 ];\n```", "```php\n\u00a0\u00a0\u00a0 $app->register(\n \u00a0\u00a0     Illuminate\\Redis\\RedisServiceProvider::class\n \u00a0\u00a0 );\n \u00a0\u00a0 $app->configure('database');\n \u00a0\u00a0 $app->configure('queue');\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 namespace AppJobs;\n \u00a0\u00a0 use GuzzleHttpClient;\n \u00a0\u00a0 class GiftJob extends Job\n \u00a0\u00a0 {\n   \u00a0\u00a0   public function __construct()\n \u00a0\u00a0     {\n \u00a0\u00a0     }\n\n  \u00a0\u00a0    public function handle()\n   \u00a0\u00a0   {\n  \u00a0\u00a0        $client = new Client(['verify' => false]);\n\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 \u00a0$remoteCall = $client->get(\n  \u00a0\u00a0            'http://microservice_secret_nginx                                     \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0  /api/v1/secret/1'\n   \u00a0\u00a0       );\n\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0  /* Do stuff with the return from a remote service, for \n            example save it in the wallet */\n \u00a0\u00a0     }\n \u00a0\u00a0 }\n```", "```php\n**\u00a0\u00a0\u00a0 use AppJobsGiftJob;**\n \u00a0\u00a0 public function create(Request $request)\n \u00a0\u00a0 {\n \u00a0\u00a0     /* ... Code omitted (validate & save data) ... */\n \u00a0\u00a0\u00a0 **$this->dispatch(new GiftJob());**\n \u00a0\u00a0     /* ... Code omitted ... */\n \u00a0\u00a0 }\n```", "```php\n\u00a0\u00a0\u00a0 php artisan queue:work\n```", "```php\n**\u00a0\u00a0\u00a0 [2016-11-13 17:59:23] Processed: AppJobsGiftJob**\n\n```", "```php\n\u00a0\u00a0\u00a0 microservice_location_redis:\n \u00a0\u00a0     build: ./microservices/location/redis/\n  \u00a0\u00a0    links:\n \u00a0\u00a0         - autodiscovery\n \u00a0\u00a0     expose:\n \u00a0\u00a0         - 6379\n \u00a0\u00a0     ports:\n     \u00a0\u00a0     - 6380:6379\n```", "```php\n\u00a0\u00a0\u00a0 links:\n \u00a0\u00a0     - autodiscovery\n \u00a0\u00a0\u00a0 **- microservice_location_redis**\n\n```", "```php\n\u00a0\u00a0\u00a0 FROM redis:latest\n```", "```php\n\u00a0\u00a0\u00a0 \"predis/predis\": \"~1.0\",\n \u00a0\u00a0 \"illuminate/redis\": \"5.2.*\"\n```", "```php\n\u00a0\u00a0\u00a0 CACHE_DRIVER=redis\n \u00a0\u00a0 CACHE_REDIS_CONNECTION=default\n \u00a0\u00a0 REDIS_HOST=microservice_location_redis\n \u00a0\u00a0 REDIS_PORT=6379\n \u00a0\u00a0 REDIS_DATABASE=0\n```", "```php\n\u00a0\u00a0\u00a0 <?php\n \u00a0\u00a0 return [\n \u00a0\u00a0     'redis' => [\n  \u00a0\u00a0        'client'  => 'predis',\n\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0  'cluster' => false,\n\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0  'default' => [\n  \u00a0\u00a0            'host' \u00a0\u00a0\u00a0 => env('REDIS_HOST', 'localhost'),\n\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  'password' => env('REDIS_PASSWORD', null),\n\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  'port' \u00a0\u00a0\u00a0 => env('REDIS_PORT', 6379),\n\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  'database' => env('REDIS_DATABASE', 0),\n    \u00a0\u00a0      ],\n   \u00a0\u00a0   ]\n \u00a0\u00a0 ];\n```", "```php\n\u00a0\u00a0\u00a0 $app->configure('database');\n \u00a0\u00a0 $app->configure('cache');\n \u00a0\u00a0 $app->register(\n \u00a0\u00a0     Illuminate\\Redis\\RedisServiceProvider::class\n \u00a0\u00a0 );\n```", "```php\n**use Illuminate\\Support\\FacadesCache;** \n \u00a0\u00a0     /* ... Omitted code ... */\n \u00a0\u00a0\u00a0**const DEFAULT_CACHE_TIME = 1;**\n\n \u00a0\u00a0 public function getClosestSecrets($originPoint)\n \u00a0\u00a0 {\n \u00a0\u00a0\u00a0 **$cacheKey = 'L' . $originPoint['latitude'] .                   \n \u00a0\u00a0     $originPoint['longitude'];**\n   \u00a0\u00a0   **$closestSecrets = Cache::remember(\n   \u00a0\u00a0       $cacheKey,\n    \u00a0\u00a0      self::DEFAULT_CACHE_TIME,\n    \u00a0\u00a0      function () use($originPoint) {**\n\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0    $calculatedClosestSecrets = [];\n\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0    \u00a0$distances = array_map(\n      \u00a0\u00a0            function($item) use($originPoint) {\n\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0          return $this->getDistance(\n       \u00a0\u00a0                   $item['location'], \n       \u00a0\u00a0                   $originPoint\n        \u00a0\u00a0              );\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 \u00a0        }, \n        \u00a0\u00a0          self::$cacheSecrets\n        \u00a0\u00a0      );\n         \u00a0\u00a0     asort($distances);\n       \u00a0\u00a0       $distances = array_slice(\n      \u00a0\u00a0            $distances, \n        \u00a0\u00a0          0,\n         \u00a0\u00a0         self::MAX_CLOSEST_SECRETS, \n         \u00a0\u00a0         true\n        \u00a0\u00a0      );\n       \u00a0\u00a0       foreach ($distances as $key => $distance) {\n        \u00a0\u00a0          $calculatedClosestSecrets[] = \n                    self::$cacheSecrets[$key];\n           \u00a0\u00a0   }\n\n       \u00a0\u00a0       return $calculatedClosestSecrets;\n     \u00a0\u00a0  **});**\n **return $closestSecrets;**\n \u00a0\u00a0 }\n    /* ... Omitted code ... */\n```", "```php\n\u00a0\u00a0\u00a0 $value = Cache::get('key', 'default');\n```"]