- en: Progressive Web Applications with the Angular CLI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular CLI构建渐进式Web应用程序
- en: As we mentioned in Chapter 3 , *Understanding the Core Concepts of Angular 6*,
    Angular is one of the main frameworks for developing modern web applications based
    on JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第3章中提到的，*了解Angular 6的核心概念*，Angular是基于JavaScript开发现代Web应用程序的主要框架之一。
- en: In [Chapter 6](a5910f49-091c-42b8-bf4c-56a23d2ea354.xhtml), *Creating a RESTful
    API Using Laravel Framework-2*, we completed the backend API using Laravel resources,
    eloquent relationships, and token-based authentication. Now, we have everything
    we need to connect the frontend application to the backend; before we do that,
    let's look at what we will learn in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](a5910f49-091c-42b8-bf4c-56a23d2ea354.xhtml)中，*使用Laravel框架创建RESTful API-2*，我们使用Laravel资源、eloquent关系和基于令牌的身份验证完成了后端API。现在，我们已经拥有连接前端应用程序到后端所需的一切；在我们这样做之前，让我们看看本章将学到什么。
- en: In this chapter, we will see some changes that occurred in the `angular-cli.json`
    file, which now provides improved support for multiple applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到`angular-cli.json`文件中发生的一些更改，该文件现在提供了对多个应用程序的改进支持。
- en: We will also look at how to use `ng add` to create a **Progressive Web Application**
    (**PWA**), and how we can organize our project as modules.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看看如何使用`ng add`创建**渐进式Web应用程序**（**PWA**），以及如何将项目组织为模块。
- en: 'In this chapter, we will cover the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Starting a web application with the Angular CLI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular CLI启动Web应用程序
- en: Building the baseline for a PWA
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建PWA的基线
- en: Creating boilerplate components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建样板组件
- en: Starting a web application with the Angular CLI
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular CLI启动Web应用程序
- en: 'When we started writing this chapter, the Angular framework had launched its
    newest version: version 6\. In previous chapters, we have already commented on
    some of the novelties that are present in this version.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始撰写本章时，Angular框架已推出了最新版本：版本6。在之前的章节中，我们已经评论了这个版本中存在的一些新功能。
- en: The new version is more focused on development tools (such as the Angular CLI)
    than the evolution of the framework itself. We can cite the new functions of the
    Angular CLI with commands such as `ng update` and `ng add`, which are very useful
    for updating packages and adding new ones.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本更加专注于开发工具（如Angular CLI）而不是框架本身的演进。我们可以引用Angular CLI的新功能，如`ng update`和`ng
    add`命令，这些对于更新包和添加新包非常有用。
- en: 'The first thing that we need to do is update the Angular CLI on the machine;
    open your Terminal window and type the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是更新机器上的Angular CLI；打开您的终端窗口并输入以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command will install Angular CLI 6.0.0 on your machine globally.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在您的机器上全局安装Angular CLI 6.0.0。
- en: Preparing the baseline code
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备基线代码
- en: 'Now, we need to prepare our baseline code, a process very similar to that of
    previous chapters. Follow these steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要准备我们的基线代码，这个过程与之前的章节非常相似。按照以下步骤进行：
- en: Copy all of the content from the `chapter-05` folder.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`chapter-05`文件夹中的所有内容。
- en: Rename the folder to `chapter-07`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件夹重命名为`chapter-07`。
- en: Delete the `storage-db` folder.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`storage-db`文件夹。
- en: Now, let's make some changes to the `docker-compose.yml` file, to fit a new
    database and server containers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`docker-compose.yml`文件进行一些更改，以适应新的数据库和服务器容器。
- en: 'Open `docker-compose.yml` and replace the contents with the following:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`docker-compose.yml`并用以下内容替换其中的内容：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note that we changed the container names, the database, and the MySQL user:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们更改了容器名称、数据库和MySQL用户：
- en: '`container_name: chapter-07-mysql`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-07-mysql`'
- en: '`container_name: chapter-07-webserver`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-07-webserver`'
- en: '`container_name: chapter-07-php-fpm`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-07-php-fpm`'
- en: '`MYSQL_DATABASE=chapter-07`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_DATABASE=chapter-07`'
- en: '`MYSQL_USER=chapter-07`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_USER=chapter-07`'
- en: 'Another important point to pay attention to is the configuration of the `php-fpm`
    container volume, which we are now naming as `Server` instead of `project` on
    previous chapters, according to the following highlighted code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的重要点是`php-fpm`容器卷的配置，我们现在将其命名为`Server`，而不是在之前的章节中命名为`project`，根据以下突出显示的代码：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open `chapter-07` in `vs.code` and rename the project folder to `Server`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vs.code`中打开`chapter-07`并将项目文件夹重命名为`Server`。
- en: As you saw in the previous chapters, the Laravel framework has a well-defined
    way of using its views; this is due to the MVC standard upon which Laravel is
    built.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在之前的章节中看到的，Laravel框架有一种明确定义其视图使用方式；这是由于Laravel构建在MVC标准之上。
- en: In addition, Laravel uses a JavaScript framework called Vue.js, which can be
    found in the `./Server/resources/assets/js` folder.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Laravel使用一个名为Vue.js的JavaScript框架，可以在`./Server/resources/assets/js`文件夹中找到。
- en: In order to not mix things up, we will create our frontend application in a
    folder called `Client`, at the same level as the newly named `Server` folder.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不混淆，我们将在一个名为`Client`的文件夹中创建我们的前端应用程序，与新命名的`Server`文件夹处于同一级别。
- en: Create a new folder called `Client` at the root of the `chapter-07` folder.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-07`文件夹的根目录下创建一个名为`Client`的新文件夹。
- en: 'At the end of these changes, you should see the same project structure as the
    following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些更改结束时，您应该看到与以下屏幕截图相同的项目结构：
- en: '![](assets/c7c558f4-335d-416f-86dc-b410b0e60ecf.png)Application structure'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c7c558f4-335d-416f-86dc-b410b0e60ecf.png)应用程序结构'
- en: 'This is the best way to keep your application uncoupled from your API. With
    this method, we have some advantages:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是保持应用程序与API解耦的最佳方法。通过这种方法，我们有一些优势：
- en: The frontend code is isolated from the rest of the application; we can host
    it in a static web service, such as an **Amazon Web Services** (**AWS**) bucket,
    or any other web server.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端代码与应用程序的其余部分隔离；我们可以将其托管在静态Web服务中，例如**亚马逊网络服务**（**AWS**）存储桶，或任何其他Web服务器。
- en: Application deployments can be done separately, so that the API evolves independently
    of the frontend application, and vice versa.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用部署可以分开进行，以便API独立于前端应用程序进行演进，反之亦然。
- en: 'Add the changes that we made to the Git source control. Open your Terminal
    window and type the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们对Git源代码所做的更改添加到源代码控制中。打开终端窗口，输入以下命令：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Scaffolding a web application with the Angular CLI
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Angular CLI搭建Web应用
- en: 'Let''s start building our frontend application with the new version of Angular,
    using the Angular CLI:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用Angular CLI构建我们的前端应用程序的新版本：
- en: 'Open your Terminal window at the root project and type the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录打开终端窗口，输入以下命令：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous command will create all of the boilerplate code that we need, this
    time using the SCSS syntax for style sheets and the `--routing` flag to create
    application routes.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的命令将创建我们需要的所有样板代码，这次使用SCSS语法进行样式表和`--routing`标志来创建应用程序路由。
- en: 'At the end of the previous command, our application will have the following
    structure:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一个命令结束时，我们的应用程序将具有以下结构：
- en: '![](assets/bfdd5946-7b1a-4f2c-a505-bbcd095c24c2.png)New application structure'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bfdd5946-7b1a-4f2c-a505-bbcd095c24c2.png)新的应用程序结构'
- en: 'One of the changes that version 6 of Angular and the Angular CLI brings is
    the `angular.json` file, which was previously named `angular-cli.json`. Its structure
    is very different, as you can see in the following screenshot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Angular和Angular CLI版本6带来的变化之一是`angular.json`文件，之前的名称是`angular-cli.json`。它的结构非常不同，如下面的截图所示：
- en: '![](assets/0c8a4da1-fd67-4049-9b2f-148c8ab77317.png)Angular JSON file'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0c8a4da1-fd67-4049-9b2f-148c8ab77317.png)Angular JSON文件'
- en: 'As for the application files, we have almost the same code organization and
    files that we had before, as you can see in the following screenshot:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至于应用程序文件，我们几乎有与之前相同的代码组织和文件，如下面的截图所示：
- en: '![](assets/2135d742-4694-46f3-aa13-48b4a203df0a.png)New Angular app structure'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2135d742-4694-46f3-aa13-48b4a203df0a.png)新的Angular应用结构'
- en: In the previous screenshot, note that we now have a file called `browserlist`;
    it is used to add browser-specific prefixes to CSS-generated code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，请注意我们现在有一个名为`browserlist`的文件；它用于向CSS生成的代码添加特定于浏览器的前缀。
- en: Creating the directory structure
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建目录结构
- en: To facilitate our development, we will create some directories in the application
    so that our project will be ready to be scaled. This means that we can add any
    modules/features that we want, in an organized way.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便我们的开发，我们将在应用程序中创建一些目录，这样我们的项目将准备好进行扩展。这意味着我们可以以有组织的方式添加任何我们想要的模块/功能。
- en: This step is very important, because, sometimes, the structure within the project
    is defined; it is not recommended to change it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步非常重要，因为有时项目内部的结构是固定的；不建议更改它。
- en: 'For this step, we will use a nomenclature of modules or pages. We will use
    the API definition services that we made in the previous chapter as the baseline:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将使用模块或页面的命名约定。我们将使用前一章中制作的API定义服务作为基线：
- en: A home page, which we will call a `home` page
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`home`的主页
- en: A page of motorcycles, which we will call a `bike-list` page
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`bike-list`的摩托车页面
- en: A bike detail page, which we will call a `bike-details` page
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`bike-details`的自行车详情页面
- en: A builders page, which we will call a `builders-list` page
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`builders-list`的构建者页面
- en: A builder details page, which we will call a `builder-details` page
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`builder-details`的构建者详情页面
- en: A register page, which we will call a `register` page
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`register`的注册页面
- en: A login page, which we will call a `login` page
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`login`的登录页面
- en: 'Based on the preceding descriptions, our application will have the following
    pages, or modules:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前述描述，我们的应用程序将具有以下页面或模块：
- en: '`bike`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bike`'
- en: '`builder`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`builder`'
- en: '`register`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`register`'
- en: '`login`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`login`'
- en: '`home`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`home`'
- en: We prefer to use a nomenclature of *modules* or *pages* instead of components
    at this time, not to be confused with the terminology of components proposed by
    Angular, where everything is based on components.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更喜欢在这个时候使用*模块*或*页面*的命名约定，而不是组件，以免与Angular提出的组件术语混淆，其中一切都基于组件。
- en: In the end, this is just a different way of referring to the application structure.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这只是一种不同的方式来指代应用程序结构。
- en: Open VS Code, and, inside `Client/src/app`, create a new folder named `pages`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VS Code，在`Client/src/app`中，创建一个名为`pages`的新文件夹。
- en: Still in VS Code and inside `Client/src/app`, create a new folder named `layout`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中，进入`Client/src/app`，创建一个名为`layout`的新文件夹。
- en: Still in VS Code and inside `Client/src/app`, create a new folder named `shared`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中，进入`Client/src/app`，创建一个名为`shared`的新文件夹。
- en: 'Let''s look at what the folder names mean in the following table:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下表中的文件夹名称的含义：
- en: '| Folder | Description |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹 | 描述 |'
- en: '| --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `pages` | Holds all of the application''s modules and pages; for example, `pages/bike/bike-component.html` and `pages/builder/builder-component.html`.
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `pages` | 包含应用程序的所有模块和页面；例如，`pages/bike/bike-component.html` 和 `pages/builder/builder-component.html`。
    |'
- en: '| `layout` | Holds all layout components; for example, `layout/nav/nav-component.html`,
    `layout/footer/footer-component.html`. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `layout` | 包含所有布局组件；例如，`layout/nav/nav-component.html`，`layout/footer/footer-component.html`。
    |'
- en: '| `shared` | Holds shared services, pipes, and so on; for example, a service
    shared by all application pages or components. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `shared` | 包含共享服务、管道等；例如，所有应用程序页面或组件共享的服务。 |'
- en: 'So, at the end of step 3, we will have the following structure:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在第3步结束时，我们将拥有以下结构：
- en: '![](assets/60895152-3d84-4926-a56b-430492a0a601.png)Folder structure'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/60895152-3d84-4926-a56b-430492a0a601.png)文件夹结构'
- en: Building the baseline for a PWA
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建PWA的基线
- en: As we discussed earlier, we can now use the new `ng add` command to create a
    PWA. But, before that, let's take a look at the concept of a PWA.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，现在我们可以使用新的`ng add`命令来创建PWA。但在此之前，让我们先了解一下PWA的概念。
- en: A PWA is a set of techniques for developing web applications, progressively
    adding features that were previously only possible in native apps.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: PWA是一套用于开发Web应用程序的技术，逐渐添加了以前只在原生应用中可能的功能。
- en: 'The main advantage for the user is that they do not have to download an application
    before knowing if it will be worth it or not. In addition, we can cite the following
    advantages:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的主要优势是他们不必在知道是否值得下载应用程序之前就下载应用程序。此外，我们可以列举以下优势：
- en: '**Progressive**: For any user, regardless of browser'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渐进式**：适用于任何用户，无论使用的是哪种浏览器'
- en: '**Responsive**: Made for any device: desktop, tablet, and mobile'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应式**：适用于任何设备：台式机、平板电脑和移动设备'
- en: '**Connection**: Works even if the user is offline'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接**：即使用户处于离线状态也能工作'
- en: '**App-like**: The user feels as if they are in a native app'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类似应用程序**：用户感觉自己就像在本机应用程序中'
- en: '**Updated**: No need to download application updates; the browser will simply
    detect and update automatically, if necessary'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新**：无需下载应用程序更新；浏览器将自动检测并更新，如果有必要的话'
- en: '**Secure**: Only with HTTPs'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：只有使用HTTPs'
- en: '**Engaging**: Through push notifications, the user can be constantly engaged'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**吸引力**：通过推送通知，用户可以保持持续参与'
- en: '**Installable**: You can add an icon on your smartphone''s home screen with
    just one click'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可安装**：您可以通过单击一个图标将其添加到智能手机的主屏幕上'
- en: '**SEO-friendly**: Search engines can find the contents of applications (which
    benefits both users and businesses)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SEO友好**：搜索引擎可以找到应用程序的内容（这有利于用户和企业）'
- en: You can read more about progressive web applications at [https://developers.google.com/web/progressive-web-apps/](https://developers.google.com/web/progressive-web-apps/).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://developers.google.com/web/progressive-web-apps/](https://developers.google.com/web/progressive-web-apps/)上阅读更多关于渐进式Web应用程序的信息。
- en: 'There are still disadvantages to PWA in building native applications, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PWA在构建本机应用程序方面仍然存在一些缺点，如下所示：
- en: PWAs do not yet have full control over the hardware of the device; Bluetooth,
    contact lists, and NFC are some examples of features that cannot be accessed by
    PWA.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PWA尚未完全控制设备的硬件；蓝牙、联系人列表和NFC是一些无法通过PWA访问的功能的例子。
- en: Although Google, Microsoft, and Mozilla are betting high on PWAs, Apple isn't.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管谷歌、微软和Mozilla对PWA抱有很高的期望，但苹果并没有。
- en: 'There are still two important features not supported by Safari: push notifications
    and offline operation. But Apple is already considering implementing PWAs, even
    though it may not have much of a choice.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Safari仍然不支持两个重要功能：推送通知和离线操作。但苹果已经在考虑实现PWA，尽管它可能没有太多选择。
- en: For all of the negatives, it is only a matter of time – thinking about it, the
    Angular team already provides us with support for creating PWAs using only the
    Angular CLI.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有的负面因素，这只是时间问题——想想看，Angular团队已经为我们提供了使用Angular CLI创建PWA的支持。
- en: Adding PWA features using ng add
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ng add添加PWA功能
- en: Now, let's look at how we can do this.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们如何做到这一点。
- en: 'Open your Terminal window inside of the `chapter-06/Client` folder and type
    the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在`chapter-06/Client`文件夹中打开您的终端窗口，并输入以下命令：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The previous command will generate an output similar to the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将生成类似以下截图的输出：
- en: '![](assets/edaea9d8-5588-4ca6-b2f2-ab8f995f6288.png)Angular PWA output'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/edaea9d8-5588-4ca6-b2f2-ab8f995f6288.png)Angular PWA输出'
- en: Understanding the key files in PWA
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解PWA中的关键文件
- en: Let's check some important changes made in our application files. The previous
    command will add two new files at the root folder.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一些在我们的应用程序文件中进行的重要更改。前面的命令将在根文件夹中添加两个新文件。
- en: 'The `manifest.json` file is used to set up the:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`manifest.json`文件用于设置：'
- en: Theme color
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主题颜色
- en: Application name
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序名称
- en: Default display mode
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认显示模式
- en: Icon configuration and size
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图标配置和大小
- en: Also, it is possible to set up description tags, related applications, and the
    platform.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以设置描述标签、相关应用程序和平台。
- en: A `ngsw-config.json`  file (also known as a service worker configuration), used
    to setup assetsGroup, dataGroups, navigationUrls and cache.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`ngsw-config.json`文件（也称为service worker配置），用于设置assetsGroup、dataGroups、navigationUrls和cache。
- en: Inside `src/assets` was created a new folder called `icons`; this icon will
    be shown as an application bookmark on your mobile phone screen.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/assets`中创建了一个名为`icons`的新文件夹；此图标将显示为移动电话屏幕上的应用程序书签。
- en: 'And the following files was updated:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文件已更新：
- en: '`angular.json` .'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`angular.json`。'
- en: '`package.json` adding: `@angular/pwa` and `@angular/service-worker`.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`添加：`@angular/pwa`和`@angular/service-worker`。'
- en: '`app.module.ts` registers the service-worker in production. This means that
    we can see the service-worker in action by using the production command; later
    in this chapter, we will see how to use it.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.module.ts`在生产中注册了service-worker。这意味着我们可以通过使用生产命令来看到service-worker的工作；在本章的后面，我们将看到如何使用它。'
- en: '`index.html` adds the `manifest.json` file and the theme color in the `<head>`
    tag.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`在`<head>`标签中添加了`manifest.json`文件和主题颜色。'
- en: PWA in action
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PWA在行动
- en: As we mentioned in step 4, the Angular engine applies the service work in the
    application only in production mode; that is, only when we use the `ng build`
    command.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第4步中提到的，Angular引擎只在生产模式下将service work应用于应用程序；也就是说，只有在使用`ng build`命令时才会应用。
- en: 'So, let''s look at how this works in practice. But first, let''s see if everything
    has happened as expected, with the creation of the application and the installation
    of `@angular/pwa`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们看看这在实践中是如何工作的。但首先，让我们看看是否一切都按预期发生了，包括应用程序的创建和`@angular/pwa`的安装：
- en: 'Open your Terminal window in the `./Client` folder, and type the following
    command:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client`文件夹中打开您的终端窗口，并输入以下命令：
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Remember that the `npm start` command is the same as `ng server`; you can check
    all of the `npm` aliases on the `scripts` tag inside of `package.json`. There,
    we have the following aliases:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`npm start`命令与`ng server`相同；您可以在`package.json`的`scripts`标签中检查所有`npm`别名。在那里，我们有以下别名：
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'At the end of the previous command, we can see the following message as the
    output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令结束时，我们可以看到以下消息作为输出：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is followed by an output similar to the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是类似以下的输出：
- en: '![](assets/a012adee-a0d6-43bd-934f-34ad9bf16867.png)Angular dev server output'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a012adee-a0d6-43bd-934f-34ad9bf16867.png)Angular开发服务器输出'
- en: Open your default browser and navigate to `http://localhost:4200/`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的默认浏览器，并导航到`http://localhost:4200/`。
- en: 'Now, you can see the welcome screen:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以看到欢迎屏幕：
- en: '![](assets/a7fbd412-51b1-4cdb-9c88-506289d46502.png)Angular welcome screen'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/a7fbd412-51b1-4cdb-9c88-506289d46502.png)Angular欢迎屏幕
- en: Let's check the `manifest.json` file. Almost all new browsers have a web inspector,
    where we can debug any website or web application. For the next check, we will
    use the Chrome browser, but you can use your default or favorite browser.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`manifest.json`文件。几乎所有新的浏览器都有一个Web检查器，我们可以在其中调试任何网站或Web应用程序。对于下一个检查，我们将使用Chrome浏览器，但您可以使用您的默认或喜爱的浏览器。
- en: In your browser, click Open to open the web inspector.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，点击“打开”以打开Web检查器。
- en: If you are in Chrome, click on the A**pplication** menu tab.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在Chrome中，请点击**应用程序**菜单选项卡。
- en: 'Click on **manifest** on the left-hand menu, and you should see a panel similar
    to the following screenshot:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单上的**清单**，您应该会看到一个类似于以下截图的面板：
- en: '![](assets/460f7169-fd5f-4d1f-9599-a10fac0d45d8.png)Web inspector'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/460f7169-fd5f-4d1f-9599-a10fac0d45d8.png)Web检查器
- en: As you can see in the previous screenshot, everything looks as expected; our
    `manifest.json` file is available, with all of the configurations we saw earlier.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上一张截图中所看到的，一切都如预期那样；我们的`manifest.json`文件可用，其中包含我们之前看到的所有配置。
- en: Note the Add to homescreen link at the right-hand side of the Identity heading;
    this means that we can add this application on a mobile phone homescreen or a
    browser application's tab.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意Identity标题右侧的“添加到主屏幕”链接；这意味着我们可以将此应用程序添加到手机主屏幕或浏览器应用程序的选项卡上。
- en: 'However, if you click on this link, you will see a console error, as shown
    in the following screenshot:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 但是，如果您点击此链接，您将看到一个控制台错误，如下截图所示：
- en: '![](assets/d46fcfb2-09a0-4348-8168-dc954049aba9.png)Service worker console
    error'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/d46fcfb2-09a0-4348-8168-dc954049aba9.png)服务工作者控制台错误
- en: This means that we don't have a service worker, and it's true. Remember that
    Angular will only inject the Service Workers in production, and we are using **`ng
    server` **behind the scenes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们没有服务工作者，这是真的。请记住，Angular只会在生产中注入服务工作者，我们在幕后使用**`ng server` **。
- en: Also, if you click on the service work right-hand side menu, you will see an
    empty panel.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您点击服务工作者右侧菜单，您将看到一个空面板。
- en: Running the application in production mode
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在生产模式下运行应用程序
- en: 'Now, it''s time to check out our application in production mode, to understand
    how a service works:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在生产模式下检查我们的应用程序，了解服务是如何工作的：
- en: 'Go back to your Terminal window and stop the Angular server with the following
    command:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您的终端窗口，并使用以下命令停止Angular服务器：
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Still in the Terminal, type the `build` command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在终端中，键入`build`命令：
- en: '[PRE10]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that the preceding `npm build` alias command doesn't make use of
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的`npm build`别名命令没有使用
- en: the `--prod` flag. So, you need to use the `ng build --prod`
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`--prod`标志。所以，你需要使用`ng build --prod`'
- en: command, or update the `npm build` command with the `--prod` flag.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 命令，或使用`--prod`标志更新`npm build`命令。
- en: At the end of the previous command, we can see another folder inside the `Client`
    directory, called `dist`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令的末尾，我们可以看到`Client`目录中的另一个文件夹，名为`dist`。
- en: Angular service – workers in action
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular服务-工作者在行动
- en: 'Now, it''s time to start the application generated inside the `./Client/dist/Client`
    folder, to see the service work in action. Don''t worry about this path for now;
    later in the book, we will change it:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候启动生成在`./Client/dist/Client`文件夹中的应用程序，以查看服务工作者的工作情况。现在不要担心这个路径；在本书的后面，我们会进行更改：
- en: 'Open your Terminal window inside the `./Client/dist/Client` folder, and type
    the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/dist/Client`文件夹中打开您的终端窗口，并键入以下命令：
- en: '[PRE11]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Remember that we installed the HTTP server in the previous chapter; if you haven't
    done so, go to [https://www.npmjs.com/package/http-server](https://www.npmjs.com/package/http-server)
    and follow the installation process.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们在上一章中安装了HTTP服务器；如果您还没有这样做，请转到[https://www.npmjs.com/package/http-server](https://www.npmjs.com/package/http-server)并按照安装过程进行操作。
- en: Open your browser at `http://localhost:4200/`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:4200/`。
- en: In the browser, open the web inspector panel and click on the **Application**
    tab menu.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，打开Web检查器面板，点击右侧菜单中的**应用程序**选项卡菜单。
- en: 'You will see the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下内容：
- en: '![](assets/53f31bc2-fe24-4cdd-8c5d-1d97b4e66922.png)Web inspector application
    panel'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/53f31bc2-fe24-4cdd-8c5d-1d97b4e66922.png)Web检查器应用程序面板
- en: Now, we have the service worker properly configured and running in our application.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经正确配置并在我们的应用程序中运行服务工作者。
- en: Go back to your browser and click on the **Manifest** menu in the right-hand
    side menu.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回浏览器，点击右侧菜单中的**清单**菜单。
- en: Now, click on the add to **homescreen** link.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“添加到**主屏幕**”链接。
- en: 'Congratulations! You have added our application to your apps panel. If you
    are in Chrome, you will see the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已将我们的应用程序添加到您的应用程序面板中。如果您在Chrome中，您将看到以下内容：
- en: '![](assets/9e864de1-a81c-4596-a7df-35daa91dfe05.png)Application icon'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/9e864de1-a81c-4596-a7df-35daa91dfe05.png)应用程序图标
- en: So, if you click on the Angular icon, you will be redirected to `http://localhost:8080/`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您点击Angular图标，您将被重定向到`http://localhost:8080/`。
- en: At this moment, we already have the basis for our PWA.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此刻，我们已经有了PWA的基础。
- en: Don't worry about the application name; we are using `Client`, but in the real
    world, you can choose your own name.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心应用程序名称；我们使用的是`Client`，但在现实世界中，您可以选择自己的名称。
- en: Debugging a progressive web application
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试渐进式Web应用程序
- en: 'Now, we are going to present a very useful tool for debugging progressive web
    applications. It is an extension to the Chrome navigator, called the Lighthouse:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将介绍一个非常有用的工具，用于调试渐进式Web应用程序。这是Chrome导航器的一个扩展，称为Lighthouse：
- en: You can get more information about Lighthouse at [https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk/related?hl=us-EN](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk/related?hl=us-EN).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk/related?hl=us-EN](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk/related?hl=us-EN)获取有关Lighthouse的更多信息。
- en: 'Open the Chrome browser and click on the right-hand side Lighthouse extension,
    as shown in the following screenshot:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Chrome浏览器，点击右侧的Lighthouse扩展，如下截图所示：
- en: '![](assets/0ec10f1a-f289-4cd3-9b4e-89066a2a9b3e.png)Lighthouse extension'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0ec10f1a-f289-4cd3-9b4e-89066a2a9b3e.png)Lighthouse扩展'
- en: Click on the **Generate report** button.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**生成报告**按钮。
- en: 'After the report generation, you will see a result similar to the following
    screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 生成报告后，您将看到类似以下截图的结果：
- en: '![](assets/8650a77f-7a0a-41de-8a3a-2975a89977b1.png)Lighthouse report'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8650a77f-7a0a-41de-8a3a-2975a89977b1.png)Lighthouse报告'
- en: 'The Lighthouse will analyze five primary items:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Lighthouse将分析五个主要项目：
- en: Performance
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: PWA
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PWA
- en: Accessibility
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可访问性
- en: Best practices
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践
- en: '**Search engine optimization** (**SEO**)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索引擎优化**（**SEO**）'
- en: Note that we have a high score level in each category, even without any content;
    let's focus on the SEO category for now.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使没有任何内容，我们在每个类别中都有一个高分级别；现在让我们专注于SEO类别。
- en: Let's look at how we can improve SEO.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何改进SEO。
- en: 'Click on SEO in the menu on the left-hand side; you will see the following
    screenshot:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中点击SEO；您将看到以下截图：
- en: '![](assets/1c5e57f7-6892-4ffc-860e-c573aad58972.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1c5e57f7-6892-4ffc-860e-c573aad58972.png)'
- en: The preceding warning tells us that our application doesn't have a meta description
    tag on `index.html`. So, let's fix it.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 上述警告告诉我们，我们的应用程序在`index.html`上没有meta描述标签。所以，让我们修复它。
- en: 'Open `./Client/src/index.html` and add the following code right after the viewport
    meta tag:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在`./Client/src/index.html`中，在viewport meta标签之后添加以下代码：
- en: '[PRE12]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we check again, we will see the following report:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次检查，我们将看到以下报告：
- en: '![](assets/be4b7199-46af-466d-a41b-51a2ef49cee9.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/be4b7199-46af-466d-a41b-51a2ef49cee9.png)'
- en: Note that we have a 100% score for SEO
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在SEO方面得分为100%
- en: This way, we can locate all of the problems in our application and correct them
    properly.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以找到应用程序中的所有问题并正确地进行修正。
- en: We now have everything we need to prepare our application to consume our API,
    but we still have a lot of work left to build the frontend application.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好让我们的应用程序消耗我们的API，但是我们仍然有很多工作要做来构建前端应用程序。
- en: In the next steps, we will look at how to add our components using the Angular
    CLI.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将看看如何使用Angular CLI添加我们的组件。
- en: Creating boilerplate Angular components
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建样板Angular组件
- en: As we saw previously, our application has some pages for registration, login,
    and the visualization of the motorcycles list, builders list, and motorcycle voting
    scheme. At this point, we are going to create all of the necessary code to compose
    these features.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，我们的应用程序有一些页面用于注册、登录以及摩托车列表、建造者列表和摩托车投票方案的可视化。在这一点上，我们将创建所有必要的代码来组成这些功能。
- en: Creating the home module and component
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主页模块和组件
- en: 'In the next lines, we will create the `home` module and component:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几行中，我们将创建`home`模块和组件：
- en: 'Open your Terminal window in `./Client/src/app` and type the following command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/src/app`中打开您的终端窗口，并键入以下命令：
- en: '[PRE13]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As we saw previously, the preceding command will generate three new files:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，上述命令将生成三个新文件：
- en: '`src/app/pages/home/home-routing.module.ts`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/pages/home/home-routing.module.ts`'
- en: '`src/app/pages/home/home.modules.spec.ts`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/pages/home/home.modules.spec.ts`'
- en: '`src/app/pages/home/home.module.ts`'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/pages/home/home.module.ts`'
- en: Now, we just need to generate the `home` component.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要生成`home`组件。
- en: 'Still in the Terminal, type the following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在终端中，键入以下命令：
- en: '[PRE14]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At the end of the previous command, you will see the following structure in
    the `pages` folder:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令结束时，您将在`pages`文件夹中看到以下结构：
- en: '![](assets/12d4473b-2b1d-4e5c-8a9b-deab577c4e1d.png)Home module structure'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/12d4473b-2b1d-4e5c-8a9b-deab577c4e1d.png)主页模块结构'
- en: Note that we created a complete module/folder, as we explained previously. Now,
    we can call the new folder `home`. We need to import the newly created `home`
    module into our main project; let's look at how we can do that.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们创建了一个完整的模块/文件夹，就像我们之前解释的那样。现在，我们可以称新文件夹为`home`。我们需要将新创建的`home`模块导入到我们的主项目中；让我们看看如何做到这一点。
- en: 'Open `src/app/app.modules.ts` and add the following lines of code:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/app.modules.ts`并添加以下代码行：
- en: '[PRE15]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Creating the bikes module and component
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建摩托车模块和组件
- en: 'Now, it''s time to create another module and component; let''s look at how
    to do it:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建另一个模块和组件了；让我们看看如何做到这一点：
- en: 'Still in your Terminal window, in `./Client/src/app`, type the following command:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口中，在`./Client/src/app`中，键入以下命令：
- en: '[PRE16]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As we saw previously, the preceding command will generate three new files:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，上述命令将生成三个新文件：
- en: '`src/app/pages/bikes/bikes-routing.module.ts`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/pages/bikes/bikes-routing.module.ts`'
- en: '`src/app/pages/bikes/bikes.modules.spec.ts`'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/pages/bikes/bikes.modules.spec.ts`'
- en: '`src/app/pages/bikes/bikes.module.ts`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/pages/bikes/bikes.module.ts`'
- en: Now, we just need to generate the `bike` component.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要生成`bike`组件。
- en: 'Type the following command:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入以下命令：
- en: '[PRE17]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'At the end of the previous command, you will see the following structure in
    the `pages` folder:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令结束时，您将在`pages`文件夹中看到以下结构：
- en: '![](assets/bd231faf-fa52-4a06-a103-ffd4ce3f141d.png)Bike module structure'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bd231faf-fa52-4a06-a103-ffd4ce3f141d.png)摩托车模块结构'
- en: Now, we can call the new folder `bikes` (as the Bikes module). We need to import
    the newly created `bikes` module into our main project; let's see how we can do
    that.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以称新文件夹为`bikes`（作为Bikes模块）。我们需要将新创建的`bikes`模块导入到我们的主项目中；让我们看看如何做到这一点。
- en: 'Open `src/app/app.modules.ts` and add the following lines of code:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/app.modules.ts`并添加以下代码行：
- en: '[PRE18]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that we are injecting the newly created `BikesModule` as a dependent of
    `app.module`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在将新创建的`BikesModule`注入为`app.module`的依赖项。
- en: Now, it is time to perform the same action for the Builders, Login, and Register
    pages.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候为Builders、Login和Register页面执行相同的操作了。
- en: Creating the builders module and component
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建builders模块和组件
- en: 'It is time to create the `builders` module, using the Angular CLI. Let''s look
    at how we can do that:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候使用Angular CLI创建`builders`模块了。让我们看看我们如何做到这一点：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE19]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As you saw previously, the preceding command will generate three new files:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您之前所看到的，上述命令将生成三个新文件：
- en: '`src/app/pages/builders/builders-routing.module.ts`'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/pages/builders/builders-routing.module.ts`'
- en: '`src/app/pages/builders/builders.modules.spec.ts`'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/pages/builders/builders.modules.spec.ts`'
- en: '`src/app/pages/builders/builders.module.ts`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/app/pages/builders/builders.module.ts`'
- en: 'Still in your Terminal window, type the following command to generate the component:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口中，输入以下命令来生成组件：
- en: '[PRE20]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the newly created module to the app modules; open `src/app/app.modules.ts`
    and add the following lines of code:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的模块添加到应用程序模块中；打开`src/app/app.modules.ts`并添加以下代码：
- en: '[PRE21]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Preparing Auth routes – login, register, and logout components
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备Auth路由 - 登录、注册和注销组件
- en: 'Now, we can create the Auth routes, including `Login` and `Register`; again,
    we will use the power of the Angular CLI to create a new module and components:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建Auth路由，包括`Login`和`Register`；同样，我们将使用Angular CLI的强大功能来创建新的模块和组件：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE22]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Still in your Terminal window, type the following command to generate the component:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口中，输入以下命令来生成组件：
- en: '[PRE23]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the newly created module to the app modules; open `src/app/auth/auth.modules.ts`
    and add the following lines of code:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的模块添加到应用程序模块中；打开`src/app/auth/auth.modules.ts`并添加以下代码：
- en: '[PRE24]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Pay attention; this time, we added `LoginComponent` to `auth.module.ts`,
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 注意；这次，我们将`LoginComponent`添加到`auth.module.ts`中，
- en: and didn't add it to `app.module.ts`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 并没有将其添加到`app.module.ts`中。
- en: Now, it is time to create the `register` component inside of `auth.module`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在`auth.module`中创建`register`组件了。
- en: 'Open your Terminal window and type the following command:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE25]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the newly created module to the app modules; open `src/app/auth/auth.modules.ts`
    and add the following lines of code:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的模块添加到应用程序模块中；打开`src/app/auth/auth.modules.ts`并添加以下代码：
- en: '[PRE26]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open your Terminal window and type the following command:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE27]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the newly created module to the app modules; open `src/app/auth/auth.modules.ts`
    and add the following lines of code:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的模块添加到应用程序模块中；打开`src/app/auth/auth.modules.ts`并添加以下代码：
- en: '[PRE28]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: At this point, our authentication module is complete; that is, we have all of
    the components that we will use – `register`, `login`, and `logout`. But we still
    need to inject our new module into the main application module.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的认证模块已经完成；也就是说，我们拥有了所有我们将使用的组件 - `register`、`login`和`logout`。但是我们仍然需要将新模块注入到主应用程序模块中。
- en: 'Open the app modules, open `src/app/app.modules.ts`, and add the following
    lines of code:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开应用程序模块，打开`src/app/app.modules.ts`并添加以下代码：
- en: '[PRE29]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'At the end of this step, you will have the following structure:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步结束时，您将拥有以下结构：
- en: '![](assets/400a32a2-e034-43dc-bad8-a74961bd3802.png)Application modules structure'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/400a32a2-e034-43dc-bad8-a74961bd3802.png)应用程序模块结构'
- en: Creating a layout component
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建布局组件
- en: For the last step of this section, we will create a layout component for the
    main navigation of our app. Note that, this time, we will only create the component
    itself, without the module and route.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后一步中，我们将为应用程序的主导航创建一个布局组件。请注意，这次我们只会创建组件本身，而不包括模块和路由。
- en: 'Still in your Terminal window, type the following command:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口中，输入以下命令：
- en: '[PRE30]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding command will generate the following structure:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将生成以下结构：
- en: '![](assets/58129ae7-59fc-4c64-9a89-87daa622b263.png)Layout folder structure'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/58129ae7-59fc-4c64-9a89-87daa622b263.png)布局文件夹结构'
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations; you just finished one more chapter, and you now have a solid
    frontend application, prepared to receive all of the features it needs.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜；您刚刚完成了又一章，现在您拥有一个坚固的前端应用程序，准备接收所有需要的功能。
- en: In this chapter, we created a progressive web application with Angular, using
    the advanced techniques of code organization. You also learned how to create modules
    and components using the Angular CLI.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Angular创建了一个渐进式Web应用程序，使用了代码组织的高级技术。您还学会了如何使用Angular CLI创建模块和组件。
- en: In the next chapter, we will learn how to create the components and routes of
    our application.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何创建应用程序的组件和路由。
