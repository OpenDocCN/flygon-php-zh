- en: Chapter 5. Using Code Documentation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用代码文档
- en: Code tells you how, comments tell you why - Jeff Atwood
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 代码告诉你如何做，注释告诉你为什么 - Jeff Atwood
- en: 'In this chapter, we are going to document our PHP source code using the NetBeans
    IDE. We will learn how to quickly document variables, methods, classes, or the
    entire project, and discuss the following issues:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用NetBeans IDE来记录我们的PHP源代码。我们将学习如何快速记录变量、方法、类或整个项目，并讨论以下问题：
- en: Convention for source documentation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源文档的约定
- en: How to document the source code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何记录源代码
- en: PHP project API documentation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP项目API文档
- en: Writing great documentation
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写优秀的文档
- en: Coding is the art of instructing machines, and when it comes to human readability,
    code should be expressive, self-explanatory, and beautiful. The code should be
    reusable and understandable, so that you can use it again a couple of months from
    now. A good practitioner makes the code as simple as possible to understand, and
    keeps the code documentation where it is really required.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 编码是指导机器的艺术，当涉及到人类可读性时，代码应该是表达性的、自解释的和美观的。代码应该是可重用和可理解的，这样你可以在几个月后再次使用它。一个好的实践者会尽可能地简化代码，只在真正需要的地方保留代码文档。
- en: Code documentation is the motivating part of coding, particularly when you are
    working in a collaborative team environment; documentation should be done in a
    sensible way, so that learning the intent of the code can be faster among collaborators.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 代码文档是编码的激励部分，特别是当你在协作团队环境中工作时；文档应该以一种明智的方式完成，这样学习代码的意图在协作者之间可以更快地进行。
- en: A regular practice to document the source code is putting comments in your code
    specified by the **PHPDoc** format, so that your code becomes more meaningful
    and the external documentation generator can parse such comments.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 记录源代码的常规做法是在代码中放置符合**PHPDoc**格式的注释，这样你的代码就变得更有意义，外部文档生成器可以解析这样的注释。
- en: PHPDoc—commenting standard for PHP
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHPDoc——PHP的注释标准
- en: PHPDoc is an adaptation of Javadoc for the PHP programming language. Since it
    is the standard for commenting the PHP code, it allows external document generators,
    such as phpDocumentor and ApiGen to generate HTML documentation for APIs. It helps
    a variety of IDEs, such as NetBeans, PhpStorm, Zend Studio, and Aptana Studio,
    to interpret variable types and provide improved code completion, type hinting,
    and debugging. According to PHPDoc, documentation is written using text blocks
    named **DocBlock**, which precede the element to be documented. As a way of describing
    programming constructs such as class, interface, functions, methods, and so on,
    tag annotations are used inside the DocBlock.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: PHPDoc是针对PHP编程语言的Javadoc的一种适应。由于它是PHP代码的标准注释，它允许外部文档生成器，如phpDocumentor和ApiGen为API生成HTML文档。它有助于各种IDE，如NetBeans，PhpStorm，Zend
    Studio和Aptana Studio，解释变量类型并提供改进的代码完成、类型提示和调试。根据PHPDoc，文档是使用名为**DocBlock**的文本块编写的，这些文本块位于要记录的元素之前。作为描述编程构造的一种方式，例如类、接口、函数、方法等，标签注释被用在DocBlock内部。
- en: Example of a DocBlock
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DocBlock的例子
- en: A DocBlock is an extended C++ style PHP comment that begins with "/**" and has
    "*" at the beginning of every line.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: DocBlock是一个扩展的C++风格的PHP注释，以"/**"开头，每一行都以"*"开头。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A DocBlock contains three basic segments, in this order:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: DocBlock包含三个基本部分，按照以下顺序：
- en: Short description
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简短描述
- en: Long description
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长描述
- en: Tags
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签
- en: 'Example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例子：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The short description starts on the first line, and can be terminated with a
    blank line or a period. A period inside a word (for example `example.com` or `0.1
    %)` is ignored. If the short description becomes more than three lines long, then
    only the first line is taken. The long description continues for as many lines
    as required, and may contain the HTML markup for display formatting. The external
    document parser will convert all the whitespaces into a single space in the long
    description, and may use paragraph breaks to define newlines, or `<pre>`, as discussed
    in the following section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简短描述从第一行开始，可以用空行或句号结束。单词中的句号（例如`example.com`或`0.1 %)`会被忽略。如果简短描述超过三行，那么只有第一行会被采用。长描述可以继续多行，并且可以包含用于显示格式的HTML标记。外部文档解析器将在长描述中将所有空格转换为单个空格，并可能使用段落分隔符来定义换行，或者`<pre>`，如下一节所述。
- en: 'The long and short description of a DocBlock is parsed for a few selected HTML
    tags, which determine additional formatting using the followings tags:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: DocBlock的长描述和简短描述会被解析为一些选定的HTML标签，这些标签使用以下标签进行附加格式化：
- en: '`<b>:` This tag is used to emphasize/bold the text'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<b>:` 这个标签用于强调/加粗文本'
- en: '`<code>:` This tag is used to surround the PHP code; some converters will highlight
    it'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<code>:` 这个标签用于包围PHP代码；一些转换器会对其进行高亮显示'
- en: '`<br>:` This tag is used to provide a hard-line break, and may be ignored by
    some converters'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<br>:` 这个标签用于提供硬换行，并且可能会被一些转换器忽略'
- en: '`<i>:` This tag is used to italicize/mark the text as important'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<i>:` 这个标签用于将文本标记为重要的斜体'
- en: '`<kbd>:` This tag is used to denote the keyboard input/screen display'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<kbd>:` 这个标签用于表示键盘输入/屏幕显示'
- en: '`<li>:` This tag is used to list items'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<li>:` 这个标签用于列出项目'
- en: '`<ol>:` This tag is used to create an ordered list'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ol>:` 这个标签用于创建有序列表'
- en: '`<ul>:` This tag is used to create an unordered list'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ul>:` 这个标签用于创建无序列表'
- en: '`<p>:` This tag is used to enclose all the paragraphs; otherwise, content will
    be considered text'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<p>:` 这个标签用于包含所有段落；否则，内容将被视为文本'
- en: '`<pre>:` This tag is used to preserve line breaks and spacing, and assumes
    all tags are text (like XML''s CDATA)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<pre>:` 这个标签用于保留换行和间距，并假定所有标签都是文本（就像XML的CDATA）'
- en: '`<samp>:` This tag is used to denote samples or examples (non-PHP)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<samp>:` 这个标签用于表示样本或示例（非PHP）'
- en: '`<var>:` This tag is used to denote a variable name'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<var>:` 这个标签用于表示变量名'
- en: In rare cases when the text `"<b>"` is needed in a DocBlock, use a double delimiter,
    as in `<<b>>`. The external document generator will automatically translate that
    to the physical text `"<b>"`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在罕见的情况下，如果需要在DocBlock中使用文本`"<b>"`，请使用双定界符，如`<<b>>`。外部文档生成器将自动将其转换为物理文本`"<b>"`。
- en: Acquainting with PHPDoc tags
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熟悉PHPDoc标签
- en: PHPDoc tags are single words prefixed by an `@` symbol, and are only parsed
    if they are the first thing on the new line of a DocBlock. A DocBlock precedes
    before structural elements, and such elements can be programming constructs, such
    as namespaces, classes, interfaces, traits, functions, methods, properties, constants,
    and variables.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: PHPDoc标签是以`@`符号为前缀的单词，并且只有在它们是DocBlock新行上的第一件事情时才会被解析。DocBlock在结构元素之前，这些元素可以是编程构造，如命名空间、类、接口、特征、函数、方法、属性、常量和变量。
- en: 'Some common lists of tags with details have been divided into groups for better
    understanding, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的标签列表及详细信息已分成组，以便更好地理解，如下所示：
- en: Data type tags
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据类型标签
- en: '| Tag | Usage | Description |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | 用法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `@param` | Type `[$varname]` description | Documents a function or method
    parameter. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `@param` | 类型`[$varname]` 描述 | 记录函数或方法的参数。 |'
- en: '| `@return` | `Type description` | Documents the return type of a function
    or method. This tag should not be used for constructors or methods defined with
    a `void` return type. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `@return` | `类型描述` | 文档化函数或方法的返回类型。此标记不应用于构造函数或返回类型为`void`的方法。 |'
- en: '| `@var` | `Type` | Documents the data type for a class variable or constant.
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `@var` | `类型` | 记录类变量或常量的数据类型。 |'
- en: Legal tags
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 法律标签
- en: '| Tag | Usage | Description |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | 用法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `@author` | Author name `<author@email>` | Documents the author of the current
    element |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `@author` | 作者名称`<author@email>` | 记录当前元素的作者 |'
- en: '| `@copyright` | `Name date` | Documents copyright information |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `@copyright` | `名称日期` | 记录版权信息 |'
- en: '| `@license` | `URL name` | Is used to indicate which license is applicable
    for the associated structural elements |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `@license` | `URL名称` | 用于指示适用于相关结构元素的许可证 |'
- en: Versioning tags
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 版本标签
- en: '| Tag | Usage | Description |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | 用法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `@version` | `Version string` | Provides the version number of a class or
    method |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `@version` | `版本字符串` | 提供类或方法的版本号 |'
- en: '| `@since` | `Version string` | Documents the release version |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `@since` | `版本字符串` | 记录发布版本 |'
- en: '| `@deprecated` | `Version description` | Is used to indicate which elements
    are deprecated and are to be removed in a future version |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `@deprecated` | `版本描述` | 用于指示哪些元素已被弃用并将在将来的版本中被移除 |'
- en: '| `@todo` | `Information string` | Documents things that need to be done to
    the code at a later date |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `@todo` | `信息字符串` | 记录需要在以后的日期对代码进行的事情 |'
- en: Other tags
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他标签
- en: '| Tag | Usage | Description |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | 用法 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `@example` | `/path/to/example` | Documents the location of an external saved
    example file |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `@example` | `/path/to/example` | 记录外部保存示例文件的位置 |'
- en: '| `@link` | `URL link text` | Documents the URL reference |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `@link` | `URL链接文本` | 记录URL引用 |'
- en: '| `@see` | `Element name(s) separated by comma` | Documents any element |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `@see` | `逗号分隔的元素名称` | 记录任何元素 |'
- en: '| `@uses` | `Name of element` | Documents how the element is used |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `@uses` | `元素名称` | 记录元素的使用方式 |'
- en: '| `@package` | `Name of a package` | Documents a group of related classes and
    functions |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `@package` | `包的名称` | 记录一组相关的类和函数 |'
- en: '| `@subpackage` | `Name of sub package` | Documents a group of related classes
    and functions |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `@subpackage` | `子包的名称` | 记录一组相关的类和函数 |'
- en: Among the most used tags, `@param` and `@return` can be used only for functions
    and methods, `@var` for properties and constants, `@package` and `@subpackage`
    for procedural pages or classes, while other tags, such as `@author, @version`,
    and so on, can be used for any element. Besides these tags, `@example` and `@link`
    can be used as inline tags.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在最常用的标签中，`@param`和`@return`只能用于函数和方法，`@var`用于属性和常量，`@package`和`@subpackage`用于过程页面或类，而其他标签，如`@author，@version`等，可以用于任何元素。除了这些标签，`@example`和`@link`可以用作内联标签。
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the list of tags at [http://www.phpdoc.org/docs/latest/for-users/list-of-tags.html](http://www.phpdoc.org/docs/latest/for-users/list-of-tags.html).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.phpdoc.org/docs/latest/for-users/list-of-tags.html](http://www.phpdoc.org/docs/latest/for-users/list-of-tags.html)找到标签列表。
- en: Now, we will dive into documenting our PHP source code using NetBeans.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将深入使用NetBeans来记录我们的PHP源代码。
- en: Documenting the source code
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录源代码
- en: In this section, we will learn to document functions, methods, classes, interfaces,
    global variables, constants, and so on, and discuss the benefits of using such
    a code documentation. As discussed earlier, in the collaborative development environment,
    the description of methods, classes, and so on, are very important to learn the
    intent of the code, and we will see that implemented practically in this section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何记录函数、方法、类、接口、全局变量、常量等，并讨论使用此类代码文档的好处。如前所述，在协作开发环境中，方法、类等的描述对于了解代码的意图非常重要，我们将在本节中实际实现这一点。
- en: Now, create a new PHP project named `Chapter5` in NetBeans, and use it for all
    the following tutorials.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在NetBeans中创建一个名为`Chapter5`的新PHP项目，并将其用于所有接下来的教程。
- en: Documenting the functions and methods
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录函数和方法
- en: In this section, we will learn to use the NetBeans auto documentation feature
    at the beginning of a PHP function or method.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何在PHP函数或方法的开头使用NetBeans自动文档功能。
- en: Time for action — documenting a PHP function or method
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 文档化PHP函数或方法
- en: 'In this tutorial, let''s create a simple PHP function or method with some parameters
    passed into it and different types of variables declared inside it. We are just
    practicing to see how the NetBeans auto documentation generator works on such
    commonly used structural elements. Let''s go through the following steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，让我们创建一个简单的PHP函数或方法，其中传入一些参数，并在其中声明不同类型的变量。我们只是在练习，看看NetBeans自动生成文档生成器在这些常用的结构元素上是如何工作的。让我们按照以下步骤进行：
- en: 'Add a PHP file named `sample1.php` into the project, and type a PHP function
    as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中添加一个名为`sample1.php`的PHP文件，并输入一个PHP函数，如下所示：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this function we can see that there are three parameters passed into the
    `testFunc` method—`$param1` as `DateTime, $param2` without type-hinting as it
    may have a mixed type of value, and `$param3` is optional with a default `NULL`
    value. Also, inside the body, the function contains one integer type variable
    and returns that integer type as well.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们可以看到有三个参数传递到`testFunc`方法中-`$param1`作为`DateTime`，`$param2`没有类型提示，因为它可能具有混合类型的值，`$param3`是可选的，默认值为`NULL`。此外，在函数体内，函数包含一个整数类型变量，并且也返回该整数类型。
- en: 'Type `/**` in the line before the `testFunc` function, and press *Enter*. You
    can see that NetBeans parses the function and generates the documentation before
    the function according to the PHPDoc standard, which looks similar to the following:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`testFunc`函数之前的行中键入`/**`，然后按*Enter*。您会看到NetBeans解析函数并在函数之前根据PHPDoc标准生成文档，看起来类似于以下内容：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the previous code snippet, we can see that NetBeans generated the documentation
    mentioning the parameters and return type, which are listed as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们可以看到NetBeans生成了文档，其中提到了参数和返回类型，列举如下：
- en: Parameters are annotated with the `@param` tag and parameter type from the given
    type hinting
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数用`@param`标记注释，并且从给定的类型提示中获取参数类型
- en: The return type is annotated with `@return`
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型用`@return`进行注释
- en: You can see that the type and name beside each tag are separated with a whitespace.
    In case the type hint is unavailable, then NetBeans leaves it as a simple `type`,
    such as `$param2.` The word that is usually used in documentation is `"mixed"`
    when the real data type is unknown and you can edit that `"type"` as well.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到每个标签旁边的类型和名称之间用空格分隔。如果类型提示不可用，那么NetBeans会将其保留为简单的`type`，例如`$param2`。在文档中通常使用的词是当真实数据类型未知时使用`"mixed"`，您也可以编辑该`"type"`。
- en: 'You can add a description of each variable in the documentation; beside the
    variable name, just put the description with a leading whitespace as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在文档中为每个变量添加描述；在变量名旁边，只需加上一个前导空格的描述，如下所示：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Also, you may want to add a short description for the documentation, which
    looks similar to the following:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，您可能希望为文档添加一个简短的描述，看起来类似于以下内容：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, let's see how this NetBeans-generated documentation looks, while someone
    tries to call this `testFunc` from anywhere within the project. Try to type the
    function name anywhere. Say, let's start typing the function name in the `index.php`
    file inside the project, and you will see the NetBeans auto-suggestion of that
    function name with parameter hints and the documentation, as follows:![Time for
    action — documenting a PHP function or method](graphics/5801_05_01.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看这个NetBeans生成的文档是什么样子，当有人试图从项目中的任何地方调用这个`testFunc`时。尝试在任何地方输入函数名。比如，在项目内的`index.php`文件中开始输入函数名，你会看到NetBeans自动提示该函数名以及参数提示和文档，如下所示：![操作时间-记录PHP函数或方法](graphics/5801_05_01.jpg)
- en: If documentation is available for a function or any element, then NetBeans shows
    the documentation while auto-suggestion is in process, as shown in the previous
    screenshot.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数或任何元素有文档可用，那么NetBeans在自动建议过程中显示文档，就像前面的截图中所示的那样。
- en: What just happened?
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just learned how to use the NetBeans auto documentation generator. By typing
    `/**` and pressing *Enter* before the functions, we can parse the metadata and
    generate the documentation. We can update the documentation as well. Again, the
    external document generator can extract such DocBlocks to create the project API
    documentation. Now, we will add a documentation before a PHP class in the next
    section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学会了如何使用NetBeans自动生成文档生成器。通过在函数之前键入`/**`并按*Enter*，我们可以解析元数据并生成文档。我们也可以更新文档。同样，外部文档生成器可以提取这样的DocBlocks来创建项目API文档。现在，我们将在下一节中在PHP类之前添加文档。
- en: Documenting classes
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录类
- en: A document before a class is very important to learn about the class and its
    usage. A best practice is to decorate the preceding documentation with proper
    annotations, such as `@package, @author, @copyright, @license, @link`, and `@version`,
    and with a proper description of the class.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在类之前的文档非常重要，可以了解类及其用法。最佳实践是使用适当的注释对前面的文档进行装饰，例如`@package, @author, @copyright,
    @license, @link`和`@version`，并对类进行适当的描述。
- en: Time for action — documenting the PHP class and class variables
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间-记录PHP类和类变量
- en: In this section, we will add a PHP class using NetBeans and update the preceding
    DocBlock with class documentation tags. So let's go for it...
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用NetBeans添加一个PHP类，并使用类文档标签更新前面的DocBlock。所以让我们开始吧...
- en: Right-click on the `Chapter5` project to choose **New | PHP Class...**, insert
    the class name as `Test` into the **File Name** box, and click on **Finish**,
    as follows:![Time for action — documenting the PHP class and class variables](graphics/5801_05_02.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Chapter5`项目选择**新建|PHP类...**，在**文件名**框中插入类名`Test`，然后点击**完成**，如下所示：![操作时间-记录PHP类和类变量](graphics/5801_05_02.jpg)
- en: The `Test` class should look similar to the following:![Time for action — documenting
    the PHP class and class variables](graphics/5801_05_03.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Test`类应该看起来类似于以下内容：![操作时间-记录PHP类和类变量](graphics/5801_05_03.jpg)'
- en: In the previous screenshot, you can see that the opened `Test class` has an
    added DocBlock at the top with a sample class description along with the `@author`
    tag.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张截图中，您可以看到打开的“Test class”在顶部添加了一个带有示例类描述和“@author”标签的DocBlock。
- en: You may want to add PHPDoc tags before the line containing the `@author` tag;
    say you want to add the `@package` tag as soon as you type `@p`. The NetBeans
    code auto completion feature shows tags starting with `@p` to have a description
    that looks similar to the following screenshot:![Time for action — documenting
    the PHP class and class variables](graphics/5801_05_04.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能希望在包含“@author”标签的行之前添加PHPDoc标签；假设您想要在键入“@p”时立即添加“@package”标签。NetBeans代码自动完成功能显示以“@p”开头的标签，其描述看起来类似于以下截图：![执行时间-记录PHP类和类变量](graphics/5801_05_04.jpg)
- en: 'Update the DocBlock with your own, so it looks similar to the following:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您自己的方式更新DocBlock，使其看起来类似于以下内容：
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the above documentation, you can see that corresponding tags have been added
    for the class, so that the class information is available while you try to instantiate
    the class object with code completion, as follows:![Time for action — documenting
    the PHP class and class variables](graphics/5801_05_05.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述文档中，您可以看到已为类添加了相应的标签，因此在尝试使用代码完成实例化类对象时，可以使用类信息，如下所示：![执行时间-记录PHP类和类变量](graphics/5801_05_05.jpg)
- en: Also, such a class DocBlock can be extracted using the external API documentation
    generator.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以使用外部API文档生成器提取这样的类DocBlock。
- en: 'Now, type a class variable named `$variable` into the `Test` class as follows:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下方式在“Test”类中输入一个名为`$variable`的类变量：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To add the class variable documentation, type `/**`, and hit *Enter* before
    the line in which it is declared, so that the documentation looks similar to the
    following:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加类变量文档，请键入`/**`，并在声明它的行之前按*Enter*，以便文档看起来类似于以下内容：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, you may update the block as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以按照以下方式更新块：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In order to view the class hierarchy tree, at a later section, you may add
    a child class in our project named `TestChild` extending the `Test` class, which
    looks similar to the following:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在以后的部分查看类层次结构树，您可以在我们的项目中添加一个名为“TestChild”的子类，扩展“Test”类，看起来类似于以下内容：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What just happened?
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We have practiced how to add documentation before PHP functions, classes, and
    its attributes using the PHPDoc format, and tested how this documented information
    becomes available throughout the project. The same style of DocBlock or appropriate
    tags can be applicable to document the PHP interfaces as well.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经练习了如何在PHP函数、类及其属性之前添加文档，并测试了这些文档信息如何在整个项目中可用。相同风格的DocBlock或适当的标签也适用于文档化PHP接口。
- en: Documenting TODO tasks
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记录TODO任务
- en: You can use the `@todo` tag for an element, to document planned changes, which
    have not been implemented yet, and the tag may be used for almost any element
    that can be documented (global variable, constant, function, method, define, class,
    and variable).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用“@todo”标签为元素添加计划更改的文档，这些更改尚未实施，该标签几乎可以用于可以文档化的任何元素（全局变量、常量、函数、方法、定义、类和变量）。
- en: Time for action — using @todo tags
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行时间-使用@todo标签
- en: 'In this tutorial, we will learn to use `@todo` tags to document our future
    tasks, and will view the tasks list from the NetBeans task or action items window:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用`@todo`标签记录我们的未来任务，并将从NetBeans任务或操作项窗口查看任务列表：
- en: 'Inside the `TestChild` PHP class or in the preceding document block of the
    class, we can use a `@todo` tag; inside multiple line comments or DocBlock, add
    a tag similar to the following:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“TestChild”PHP类内或类的前面文档块中，我们可以使用“@todo”标签；在多行注释或DocBlock中，添加类似于以下内容的标签：
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the above document block, we can see that the task has been described beside
    the tag separated by a whitespace. Also, a `@todo` tag can be added using a single
    comment line as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的文档块中，我们可以看到任务已经被描述在标签旁，用空格分隔。此外，可以使用单行注释添加“@todo”标签，如下所示：
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So, the `TestChild` class may look similar to the following:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，“TestChild”类可能看起来类似于以下内容：
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As we add the tasks inside the file, the task should be visible in NetBeans'
    **Tasks** or **Action Items** window; press *Ctrl* + *6* to open the window, and
    the added task should be listed in the **Tasks** window, as shown in the following
    screenshot:![Time for action — using @todo tags](graphics/5801_05_06.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在文件中添加任务时，任务应该在NetBeans的**任务**或**操作项**窗口中可见；按下*Ctrl* + *6*打开窗口，添加的任务应该在**任务**窗口中列出，如下截图所示：![执行时间-使用@todo标签](graphics/5801_05_06.jpg)
- en: What just happened?
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: NetBeans updates the task list in the **Task** window as soon as a new task
    is added using the `TODO` task marker, and you can have all the tasks listed in
    that window for the entire project or for all the opened projects at NetBeans.
    Such tags can be used when we have something in mind that we want to implement
    and haven't got enough time to write the code, considering its future implementation.
    So, you can drop the idea in appropriate places using the `@todo` tag.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`TODO`任务标记添加新任务后，NetBeans会立即更新**任务**窗口中的任务列表，并且您可以在该窗口中列出整个项目或所有在NetBeans中打开的项目的所有任务。当我们有想要实现但没有足够时间编写代码的想法时，可以使用这些标签，考虑到其未来的实现。因此，您可以使用`@todo`标签在适当的位置放下这个想法。
- en: So far, we have learned how to use PHPDoc standard tags to document the PHP
    source elements, and also dealt with DocBlock to write source documentation. Elementary
    concepts regarding source documentation have been discussed. So, in our next section,
    we will learn to extract such DocBlocks, to generate HTML documentation for the
    entire project or API.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何使用PHPDoc标准标签来记录PHP源元素，并处理了DocBlock来编写源文档。已经讨论了有关源文档的基本概念。因此，在我们的下一节中，我们将学习如何提取这样的DocBlock，以为整个项目或API生成HTML文档。
- en: Documenting the API
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录API
- en: As we have already discussed the significance of source documentation, the documentation
    should be presented to a general user in a well-organized way or graphically elaborated
    using HTML pages. Such API documentation, converted from source DocBlocks, can
    be the technical documentation used for learning about the source. NetBeans comes
    with the support to generate API documentation from the PHP source for the entire
    project using the **ApiGen** auto documentor tool.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经讨论过源代码文档的重要性，文档应以一种井然有序的方式呈现给一般用户，或者使用HTML页面进行图形化阐述。这样的API文档，从源DocBlocks转换而来，可以作为了解源代码的技术文档。NetBeans支持使用**ApiGen**自动文档工具从整个项目的PHP源代码生成API文档。
- en: ApiGen is the tool for creating API documentation using the PHPDoc standard,
    and supports the latest PHP 5.3 features, such as namespaces, packages, linking
    between documentation, cross referencing to PHP standard classes and general documentation,
    creation of highlighted source code, and support for PHP 5.4 traits. It also generates
    a page with trees of classes, interfaces, traits, and exceptions for the project.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: ApiGen是使用PHPDoc标准创建API文档的工具，并支持最新的PHP 5.3功能，如命名空间、包、文档之间的链接、对PHP标准类和一般文档的交叉引用、高亮源代码的创建，以及对PHP
    5.4 traits的支持。它还为项目生成了一个包含类、接口、traits和异常树的页面。
- en: Tip
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Check out the ApiGen features at `http://apigen.org/##features`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 查看ApiGen的功能：`http://apigen.org/##features`。
- en: In the next section, we will discuss how to install ApiGen and configure it
    with NetBeans.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论如何安装ApiGen并在NetBeans中配置它。
- en: Configuring ApiGen
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置ApiGen
- en: We will first install ApiGen via PEAR and configure it with NetBeans, so that
    we can generate the API documentation from the IDE. We can automatically install
    ApiGen and all of its dependencies with PEAR auto-discover enabled. Enabling the
    discover feature not only automatically adds ApiGen to the system PATH, but also
    allows for an easy updating of each ApiGen component.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过PEAR安装ApiGen并在NetBeans中配置它，以便我们可以从IDE生成API文档。我们可以启用PEAR自动发现功能，自动安装ApiGen及其所有依赖项。启用发现功能不仅会自动将ApiGen添加到系统路径，还允许轻松更新每个ApiGen组件。
- en: Time for action — installing ApiGen and configuring it with NetBeans
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间-安装ApiGen并在NetBeans中配置
- en: 'We are already familiar with installing PHP libraries via PEAR (discussed in
    the previous chapter), and we may have had the PEAR configuration `auto_discover`
    set to ON. In this section, we will install and configure ApiGen with NetBeans,
    using the following steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经熟悉了通过PEAR安装PHP库（在上一章中讨论过），并且可能已经将PEAR配置`auto_discover`设置为ON。在本节中，我们将使用以下步骤在NetBeans中安装和配置ApiGen：
- en: 'From the terminal or command prompt, run the following commands to install
    ApiGen:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端或命令提示符中运行以下命令安装ApiGen：
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `install` command will automatically download and install ApiGen along with
    all of its dependencies. Skip the first command if you have already enabled PEAR
    `auto_discover.`
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`install`命令将自动下载并安装ApiGen以及其所有依赖项。如果您已经启用了PEAR`auto_discover`，则跳过第一个命令。'
- en: Now, we need to add the ApiGen executable file to the IDE. Open the **IDE Options**
    window from **Tools | Options**, and choose the **PHP Tab | ApiGen** tab, then
    click on the **Search...** button to search for ApiGen scripts. The ApiGen scripts
    should be listed automatically, as shown in the following screenshot:![Time for
    action — installing ApiGen and configuring it with NetBeans](graphics/5801_05_07.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将ApiGen可执行文件添加到IDE中。从**工具|选项**中打开**IDE选项**窗口，选择**PHP选项卡|ApiGen**选项卡，然后单击**搜索...**按钮搜索ApiGen脚本。ApiGen脚本应该会自动列出，如下图所示：![操作时间-安装ApiGen并在NetBeans中配置](graphics/5801_05_07.jpg)
- en: From the previous screenshot, select `apigen.bat` for Windows OS or `apigen`
    for other OSes, and press **OK** to have the ApiGen script integrated with the
    IDE, as shown in the following screenshot:![Time for action — installing ApiGen
    and configuring it with NetBeans](graphics/5801_05_08.jpg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一张截图中，选择`apigen.bat`（Windows操作系统）或`apigen`（其他操作系统），然后按**确定**，将ApiGen脚本集成到IDE中，如下图所示：![操作时间-安装ApiGen并在NetBeans中配置](graphics/5801_05_08.jpg)
- en: You may browse the ApiGen script path there as well.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在那里浏览ApiGen脚本路径。
- en: Press **OK** to save the settings.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按**确定**保存设置。
- en: What just happened?
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: Up until now, we have configured the ApiGen tool with NetBeans, and this tool
    is ready to be used for PHP projects. Once you have integrated the tool with the
    IDE, you may want to use it from the IDE for the HTML documentation generation
    for your PHP projects. In our next tutorial, we will learn the usage of the tool
    from the IDE.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在NetBeans中配置了ApiGen工具，该工具已准备好用于PHP项目。一旦您将该工具与IDE集成，您可能希望从IDE中使用它为您的PHP项目生成HTML文档。在我们的下一个教程中，我们将学习如何从IDE中使用该工具。
- en: Generating API documentation
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成API文档
- en: We will generate the HTML documentation using ApiGen for the sample PHP project
    `Chapter5`, and the tool extracts documentation from the DocBlocks available in
    the project. The generation process can be viewable in the **Output** window of
    the IDE. Finally, the generated HTML documentation opens in the web browser.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用ApiGen为示例PHP项目`Chapter5`生成HTML文档，并且该工具从项目中可用的DocBlocks中提取文档。生成过程可以在IDE的**输出**窗口中查看。最后，生成的HTML文档将在Web浏览器中打开。
- en: Time for action — generating documentation using ApiGen
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间-使用ApiGen生成文档
- en: 'Using integrated ApiGen from the IDE, we will run the documentation generator.
    Note that we need to define the target directory to store the HTML documents.
    Let''s create the HTML documentation for our sample project, according to the
    following steps:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IDE集成的ApiGen，我们将运行文档生成器。请注意，我们需要定义目标目录以存储HTML文档。根据以下步骤为我们的示例项目创建HTML文档：
- en: Right-click on the `chapter5` project node. From the context menu, choose **Properties
    | ApiGen**, and the following **Project Properties** window will be displayed:![Time
    for action — generating documentation using ApiGen](graphics/5801_05_09.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`chapter5`项目节点。从上下文菜单中，选择**属性 | ApiGen**，将显示以下**项目属性**窗口：![Time for action
    — generating documentation using ApiGen](graphics/5801_05_09.jpg)
- en: From the previous **Project Properties** window, define the **Target Directory**
    where the HTML pages will be stored, and uncheck the **PHP** box for excluding
    PHP's default elements from the documentation. In this project, let's create a
    directory named `doc` as the target directory inside the project, so that the
    documentation can be browsed at `http://localost/chapter5/doc/`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一个**项目属性**窗口中，定义HTML页面将存储的**目标目录**，并取消选中**PHP**框以排除文档中的PHP默认元素。在此项目中，让我们在项目内创建一个名为`doc`的目录作为目标目录，以便可以在`http://localost/chapter5/doc/`上浏览文档。
- en: Click on **OK** to save the settings.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**保存设置。
- en: Now, right-click on the `chapter5` project node. This will generate a menu,
    which will look similar to the following screenshot:![Time for action — generating
    documentation using ApiGen](graphics/5801_05_10.jpg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键单击`chapter5`项目节点。这将生成一个菜单，看起来类似于以下屏幕截图：![Time for action — generating documentation
    using ApiGen](graphics/5801_05_10.jpg)
- en: From the previous project context menu, choose **Generate Documentation** to
    start the HTML document generation process, from the given DocBlocks.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上一个项目上下文菜单中，选择**生成文档**以开始从给定的DocBlocks生成HTML文档的过程。
- en: As soon as we chose **Generate Documentation** in the previous step, the HTML
    documentation generator started to progress, and completed the HTML documentation.
    The generation process is summarized in the **Output** window, as follows:![Time
    for action — generating documentation using ApiGen](graphics/5801_05_11.jpg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步中选择**生成文档**后，HTML文档生成器开始进行进展，并完成了HTML文档。生成过程总结在**输出**窗口中，如下所示：![Time for
    action — generating documentation using ApiGen](graphics/5801_05_11.jpg)
- en: Also the HTML documentation for the entire project has been opened in a browser
    that looks similar to the following:![Time for action — generating documentation
    using ApiGen](graphics/5801_05_12.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，整个项目的HTML文档也已在浏览器中打开，看起来类似于以下内容：![Time for action — generating documentation
    using ApiGen](graphics/5801_05_12.jpg)
- en: In the above screenshot, we can see that the HTML documentation has been created
    for the entire project. The documentation is organized according to packages,
    classes, and functions as per the left frame.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的屏幕截图中，我们可以看到已为整个项目创建了HTML文档。文档按照包、类和函数在左侧框架中的顺序进行组织。
- en: Browse through the links created for the project, and explore how the classes
    and methods are represented over there. You may click on the **TestChild** class
    link in the previous window to get the following screenshot:![Time for action
    — generating documentation using ApiGen](graphics/5801_05_13.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览为项目创建的链接，并探索类和方法在那里是如何表示的。您可以点击上一个窗口中的**TestChild**类链接，以获取以下屏幕截图：![Time for
    action — generating documentation using ApiGen](graphics/5801_05_13.jpg)
- en: In the above screenshot, we can see that the class inheritance is also represented
    using a tree along with a suitably decorated documentation for the class, as per
    its DocBlock.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上面的屏幕截图中，我们可以看到类继承也使用树形图表示，并且根据其DocBlock适当装饰了类的文档。
- en: What just happened?
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a professional API documentation from the source code comments block,
    and discovered how the classes were organized properly in the final documentation.
    Note that ApiGen provides a searching facility for classes, functions, and so
    on at the generated HTML interface, and also provides a customizable template
    facility to modify the overall documentation's look. We are now confident enough
    to document the PHP source code effectively.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从源代码注释块中创建了专业的API文档，并发现了类在最终文档中是如何被正确组织的。请注意，ApiGen在生成的HTML界面上为类、函数等提供了搜索功能，并提供了可自定义的模板功能，以修改整体文档的外观。我们现在有足够的信心有效地为PHP源代码进行文档化。
- en: Pop quiz — reviewing tags
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速测验 —— 复习标签
- en: Which of the following tags is applicable for only functions or methods?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个标签仅适用于函数或方法？
- en: '`@author`'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@author`'
- en: '`@package`'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@package`'
- en: '`@param`'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@param`'
- en: '`@link`'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@link`'
- en: Which of the following tags can be used to document the release version of any
    element?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个标签可用于文档化任何元素的发布版本？
- en: '`@version`'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@version`'
- en: '`@since`'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@since`'
- en: '`@deprecated`'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@deprecated`'
- en: '`@todo`'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@todo`'
- en: Which of the following tags can be used as an inline tag?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个标签可以用作内联标签？
- en: '`@example`'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@example`'
- en: '`@param`'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@param`'
- en: '`@version`'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@version`'
- en: '`@see`'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@see`'
- en: Have a go hero — doing more with documentation
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试更多的英雄 —— 处理文档
- en: Each time you run the NetBeans documentation generator, it wipes out the target
    directory and creates a new set of HTML documents there. Try commenting interfaces,
    constants, traits, and so on, and run the documentation generator to test the
    generated API documents.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 每次运行NetBeans文档生成器时，它都会清除目标目录并在那里创建一组新的HTML文档。尝试对接口、常量、特性等进行注释，并运行文档生成器以测试生成的API文档。
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have discussed and practiced how to document the source
    code for PHP applications using NetBeans.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经讨论并练习了如何使用NetBeans为PHP应用程序文档化源代码。
- en: 'We have specially focused on the following topics:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们特别关注了以下主题：
- en: PHPDoc standards and tags
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHPDoc标准和标签
- en: Documenting PHP functions/methods, classes, and its variables
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档化PHP函数/方法、类及其变量
- en: Documenting TODO tasks
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档化TODO任务
- en: Configuring ApiGen with NetBeans
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NetBeans配置ApiGen
- en: API documentation using ApiGen
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ApiGen进行API文档
- en: Finally, it was fun to use the auto-doc generator, and get the HTML documentation
    generated within a few seconds.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用自动文档生成器非常有趣，并且在几秒钟内生成了HTML文档。
- en: As we are going for the collaborative PHP development in our next chapter, such
    source documentation is required, in order to maintain a good practice within
    the development team. In the next chapter, we will learn to use the version control
    system (Git) from NetBeans.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们下一章进行协作PHP开发时，需要这样的源代码文档，以便在开发团队内保持良好的实践。在下一章中，我们将学习如何从NetBeans使用版本控制系统（Git）。
