["```php\n< a href=\"some url\" id=\"someLink\"> \n\n```", "```php\n$(\"#someLink\").on('click', function() { \n   //some code here \n}); \n\n```", "```php\n<?php \nrequire_once __DIR__ . '/../bootstrap.php'; \n\n$loop = new \\React\\EventLoop\\StreamSelectLoop(); \n\n$scheduler  = new \\Rx\\Scheduler\\EventLoopScheduler($loop); \n\n\\Rx\\Observable::interval(1000, $scheduler) \n    ->doOnNext(function ($x) { \n        echo \"Side effect: \" . $x . \"\\n\"; \n    }) \n    ->delay(500) \n    ->take(5) \n    ->subscribe($createStdoutObserver(), $scheduler); \n\n$loop->run(); \n\n```", "```php\n<?php \n\nrequire_once __DIR__.'/../bootstrap.php'; \n\n$source = \\Rx\\Observable::defer(function () { \n    return \\Rx\\Observable::just(42); \n}); \n\n$subscription = $source->subscribe($stdoutObserver); \n?> \n\n```", "```php\n$loop    = \\React\\EventLoop\\Factory::create(); \n$scheduler = new \\Rx\\Scheduler\\EventLoopScheduler($loop); \n\n```", "```php\n<?php \n\nrequire_once __DIR__ . '/../bootstrap.php'; \n\nuse Rx\\Observable; \n\nclass RecursiveReturnObservable extends Observable \n{ \n    private $value; \n\n    /** \n     * @param mixed $value Value to return. \n     */ \n    public function __construct($value) \n    { \n        $this->value = $value; \n    } \n\n    public function subscribe(\\Rx\\ObserverInterface $observer, $scheduler = null) \n    { \n        return $scheduler->scheduleRecursive(function ($reschedule) use ($observer) { \n            $observer->onNext($this->value); \n            $reschedule(); \n        }); \n    } \n} \n\n$loop      = React\\EventLoop\\Factory::create(); \n$scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop); \n\n$observable = new RecursiveReturnObservable(42); \n$observable->subscribe($stdoutObserver, $scheduler); \n\n$observable = new RecursiveReturnObservable(21); \n$disposable = $observable->subscribe($stdoutObserver, $scheduler); \n\n$loop->addPeriodicTimer(0.01, function () { \n    $memory    = memory_get_usage() / 1024; \n    $formatted = number_format($memory, 3) . 'K'; \n    echo \"Current memory usage: {$formatted}\\n\"; \n}); \n\n// after a second we'll dispose the 21 observable \n$loop->addTimer(1.0, function () use ($disposable) { \n    echo \"Disposing 21 observable.\\n\"; \n    $disposable->dispose(); \n}); \n\n$loop->run(); \n\n```", "```php\n//Next value: 21 \n//Next value: 42 \n//Next value: 21 \n//Next value: 42 \n//Next value: 21 \n\n```", "```php\n//Disposing 21 observable. \n//Next value: 42 \n//Next value: 42 \n//Next value: 42 \n//Next value: 42 \n//Next value: 42 \n//Current memory usage: 3,349.203K \n\n```", "```php\n<?php \n\nrequire_once __DIR__ . '/../bootstrap.php'; \n\n//Without a seed \n$source = \\Rx\\Observable::fromArray(range(1, 3)); \n\n$subscription = $source \n    ->reduce(function ($acc, $x) { \n        return $acc + $x; \n    }) \n    ->subscribe($createStdoutObserver()); \n\n```", "```php\n<?php \n\nuse Rx\\Observer\\CallbackObserver; \n\nrequire_once __DIR__ . '/../bootstrap.php'; \n\n$source = \\Rx\\Observable::fromArray([1, 2, 3, 4]); \n\n$observer = $createStdoutObserver(); \n\n$subscription = $source->toArray() \n    ->subscribe(new CallbackObserver( \n        function ($array) use ($observer) { \n            $observer->onNext(json_encode($array)); \n        }, \n        [$observer, \"onError\"], \n        [$observer, \"onCompleted\"] \n    )); \n\n```", "```php\n<?php \n\nrequire_once __DIR__ . '/../bootstrap.php'; \n\n$loop      = React\\EventLoop\\Factory::create(); \n$scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop); \n\n$observable       = Rx\\Observable::just(42)->repeat(); \n$otherObservable  = Rx\\Observable::just(21)->repeat(); \n$mergedObservable = $observable \n    ->merge($otherObservable) \n    ->take(10); \n\n$disposable = $mergedObservable->subscribe($stdoutObserver, $scheduler); \n\n$loop->run(); \n\n```", "```php\n<?php \n\nrequire_once __DIR__ . '/../bootstrap.php'; \n\n$source = \\Rx\\Observable::range(0, 3) \n    ->doOnEach(new \\Rx\\Observer\\CallbackObserver( \n        function ($x) { \n            echo 'Do Next:', $x, PHP_EOL; \n        }, \n        function (Exception $err) { \n            echo 'Do Error:', $err->getMessage(), PHP_EOL; \n        }, \n        function () { \n            echo 'Do Completed', PHP_EOL; \n        } \n    )); \n\n$subscription = $source->subscribe($stdoutObserver); \n\n```", "```php\n<?php \n\nrequire_once __DIR__ . '/../bootstrap.php'; \n\n//With a seed \n$source = Rx\\Observable::range(1, 3); \n\n$subscription = $source \n    ->scan(function ($acc, $x) { \n        return $acc * $x; \n    }, 1) \n    ->subscribe($createStdoutObserver()); \n\n```", "```php\n<?php \n\nrequire_once __DIR__ . '/../bootstrap.php'; \n\n//Without a seed \n$source = Rx\\Observable::range(1, 3); \n\n$subscription = $source \n    ->scan(function ($acc, $x) { \n        return $acc + $x; \n    }) \n    ->subscribe($createStdoutObserver()); \n\n```", "```php\n<?php \n\nrequire_once __DIR__ . '/../bootstrap.php'; \n\n//With a result selector \n$range = \\Rx\\Observable::fromArray(range(0, 4)); \n\n$source = $range \n    ->zip([ \n        $range->skip(1), \n        $range->skip(2) \n    ], function ($s1, $s2, $s3) { \n        return $s1 . ':' . $s2 . ':' . $s3; \n    }); \n\n$observer = $createStdoutObserver(); \n\n$subscription = $source->subscribe($createStdoutObserver()); \n\n```", "```php\n<?php \n\nuse Rx\\Observer\\CallbackObserver; \n\nrequire_once __DIR__ . '/../bootstrap.php'; \n\n//Without a result selector \n$range = \\Rx\\Observable::fromArray(range(0, 4)); \n\n$source = $range \n    ->zip([ \n        $range->skip(1), \n        $range->skip(2) \n    ]); \n\n$observer = $createStdoutObserver(); \n\n$subscription = $source \n    ->subscribe(new CallbackObserver( \n        function ($array) use ($observer) { \n            $observer->onNext(json_encode($array)); \n        }, \n        [$observer, \"onError\"], \n        [$observer, \"onCompleted\"] \n    )); \n\n```", "```php\n111.222.333.123 HOME - [01/Feb/1998:01:08:39 -0800] \"GET /bannerad/ad.htm HTTP/1.0\" \n200 198 \"http://www.referrer.com/bannerad/ba_intro.htm\"\"Mozilla/4.01 (Macintosh; I; PPC)\" \n\n111.222.333.123 HOME - [01/Feb/1998:01:08:46 -0800] \"GET /bannerad/ad.htm HTTP/1.0\" \n200 28083 \"http://www.referrer.com/bannerad/ba_intro.htm\"\"Mozilla/4.01 (Macintosh; I; PPC)\" \n\n```", "```php\n<?php \nfunction readLogData($pathToLog) { \n$logs = []; \n$data = split('\\n', read($pathToLog);) //log newlines \n\nforeach($data as line) { \n$logLine = split('',$line); \n  $ipAddr = $logLine[0]; \n  $time = $logLine[3]; \n$accessedUrl = $logLine[6]; \n  $referrer = $logLine[11]; \n  $logs[] = [ \n'IP' => $ipAddr, \n'Time' => $time, \n'URL' => $accessedUrl, \n'UserAgent' => $referrer \n  ]; \n\n} \nreturn $logs; \n} \n\n```", "```php\n$loop      = React\\EventLoop\\StreamSelectLoop; \n$scheduler = new Rx\\Scheduler\\EventLoopScheduler($loop); \n\n$intervalScheduler = \\Rx\\Observable::interval(3600000, $scheduler); \n\n//execute function to read logFile: \n$intervalScheduler::defer(function() { \nreadLogData('/var/log/apache2/access.log'); \n})->subscribe($createStdoutObserver()); \n\n```", "```php\nuse \\Rx\\Scheduler\\PriorityQueue; \n\nVar $firstItem = new ScheduledItem(null, null, null, 1, null); \n\nvar $secondtItem = new ScheduledItem(null, null, null, 2, null); \n$queue          = new PriorityQueue(); \n$queue->enqueue($firstItem); \n$queue->enqueue($secondItem); \n//remove firstItem if not needed in queue \n$queue->remove($firstItem); \n\n```"]