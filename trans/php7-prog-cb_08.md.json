["```php\n    <head>\n      <title>PHP 7 Cookbook</title>\n      <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n    </head>\n    ```", "```php\n    <table>\n      <tr>\n        <td>&#x1F648;</td>\n        <td>&#x1F649;</td>\n        <td>&#x1F64A;</td>\n      </tr>\n    </table>\n    ```", "```php\n    <table>\n      <tr>\n        <td><?php echo \"\\u{1F648}\"; ?></td>\n        <td><?php echo \"\\u{1F649}\"; ?></td>\n        <td><?php echo \"\\u{1F64A}\"; ?></td>\n      </tr>\n    </table>\n    ```", "```php\n\\u{xxxx}\n```", "```php\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>PHP 7 Cookbook</title>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n  </head>\n```", "```php\n  <body>\n    <table>\n      <tr>\n        <td>&#x1F648;</td>\n        <td>&#x1F649;</td>\n        <td>&#x1F64A;</td>\n      </tr>\n    </table>\n  </body>\n</html>\n```", "```php\n  <tr>\n    <td><?php echo \"\\u{1F648}\"; ?></td>\n    <td><?php echo \"\\u{1F649}\"; ?></td>\n    <td><?php echo \"\\u{1F64A}\"; ?></td>\n  </tr>\n```", "```php\n    echo \"\\u{202E}Reversed text\";\n    echo \"\\u{202D}\";    // returns output to left-to-right\n    ```", "```php\n    echo \"ma\\u{00F1}ana\"; // shows ma\u00f1ana\n    ```", "```php\n    echo \"man\\u{0303}ana\"; // also shows ma\u00f1ana\n    ```", "```php\n    echo \"\\u{00E9}l\\u{00E8}ve\";\n    echo \"e\\u{0301}le\\u{0300}ve\";\n    ```", "```php\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>PHP 7 Cookbook</title>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n  </head>\n```", "```php\n  <body>\n    <pre>\n      <?php\n        echo \"\\u{202E}Reversed text\"; // reversed\n        //echo \"\\u{202D}\"; // stops reverse\n        echo \"ma\u00f1ana\";  // using pre-composed characters\n        echo \"ma\\u{00F1}ana\"; // pre-composed character\n        echo \"man\\u{0303}ana\"; // \"n\" with combining ~ character (U+0303)\n        echo \"\u00e9l\u00e8ve\";\n        echo \"\\u{00E9}l\\u{00E8}ve\"; // pre-composed characters\n        echo \"e\\u{0301}le\\u{0300}ve\"; // e + combining characters\n      ?>\n    </pre>\n</body>\n</html>\n```", "```php\n    namespace Application\\I18n;\n    use Locale as PhpLocale;\n    class Locale extends PhpLocale\n    {\n      const FALLBACK_LOCALE = 'en';\n      // some code\n    }\n    ```", "```php\n    <?php phpinfo(INFO_VARIABLES); ?>\n    ```", "```php\n    protected $localeCode;\n    public function setLocaleCode($acceptLangHeader)\n    {\n      $this->localeCode = $this->acceptFromHttp($acceptLangHeader);\n    }\n    ```", "```php\n    public function getAcceptLanguage()\n    {\n      return $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? self::FALLBACK_LOCALE;\n    }\n    public function getLocaleCode()\n    {\n      return $this->localeCode;\n    }\n    ```", "```php\n    public function __construct($localeString = NULL)\n    {\n      if ($localeString) {\n        $this->setLocaleCode($localeString);\n      } else {\n        $this->setLocaleCode($this->getAcceptLanguage());\n      }\n    }\n    ```", "```php\n<?php\n  require __DIR__ . '/../Application/Autoload/Loader.php';\n  Application\\Autoload\\Loader::init(__DIR__ . '/..');\n  use Application\\I18n\\Locale;\n```", "```php\n$locale = [NULL, 'fr-FR', 'da, en-gb;q=0.8, en;q=0.7'];\n```", "```php\necho '<table>';\nforeach ($locale as $code) {\n  $locale = new Locale($code); \n  echo '<tr>\n    <td>' . htmlspecialchars($code) . '</td>\n    <td>' . $locale->getLocaleCode() . '</td>\n  </tr>';\n}\necho '</table>';\n```", "```php\n3,080,512.92.\n```", "```php\n3 080 512,92\n```", "```php\n    use NumberFormatter;\n    protected $numberFormatter;\n    ```", "```php\n    public function getNumberFormatter()\n    {\n      if (!$this->numberFormatter) {\n        $this->numberFormatter = new NumberFormatter($this->getLocaleCode(), NumberFormatter::DECIMAL);\n      }\n      return $this->numberFormatter;\n    }\n    ```", "```php\n    public function formatNumber($number)\n    {\n      return $this->getNumberFormatter()->format($number);\n    }\n    ```", "```php\n    public function parseNumber($string)\n    {\n      $result = $this->getNumberFormatter()->parse($string);\n      return ($result) ? $result : self::ERROR_UNABLE_TO_PARSE;\n    }\n    ```", "```php\n<?php\n  require __DIR__ . '/../Application/Autoload/Loader.php';\n  Application\\Autoload\\Loader::init(__DIR__ . '/..');\n  use Application\\I18n\\Locale;\n```", "```php\n  $localeFr = new Locale('fr_FR');\n  $localeUk = new Locale('en_GB');\n  $number   = 1234567.89;\n?>\n```", "```php\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>PHP 7 Cookbook</title>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"php7cookbook_html_table.css\">\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Number</th>\n        <td>1234567.89</td>\n      </tr>\n      <tr>\n        <th>French Format</th>\n        <td><?= $localeFr->formatNumber($number); ?></td>\n      </tr>\n      <tr>\n        <th>UK Format</th>\n        <td><?= $localeUk->formatNumber($number); ?></td>\n      </tr>\n      <tr>\n        <th>UK Parse French Number: <?= $localeFr->formatNumber($number) ?></th>\n        <td><?= $localeUk->parseNumber($localeFr->formatNumber($number)); ?></td>\n      </tr>\n      <tr>\n        <th>UK Parse UK Number: <?= $localeUk->formatNumber($number) ?></th>\n        <td><?= $localeUk->parseNumber($localeUk->formatNumber($number)); ?></td>\n      </tr>\n      <tr>\n        <th>FR Parse FR Number: <?= $localeFr->formatNumber($number) ?></th>\n        <td><?= $localeFr->parseNumber($localeFr->formatNumber($number)); ?></td>\n      </tr>\n      <tr>\n        <th>FR Parse UK Number: <?= $localeUk->formatNumber($number) ?></th>\n        <td><?= $localeFr->parseNumber($localeUk->formatNumber($number)); ?></td>\n      </tr>\n    </table>\n  </body>\n</html>\n```", "```php\n    const FALLBACK_CURRENCY = 'GBP';\n    protected $currencyCode;\n    public function __construct($localeString = NULL, $currencyCode = NULL)\n    {\n      // add this to the existing code:\n      $this->currencyCode = $currencyCode ?? self::FALLBACK_CURRENCY;\n    }\n    ```", "```php\n    namespace Application\\I18n;\n    class IsoCodes\n    {\n      public $name;\n      public $iso2;\n      public $iso3;\n      public $iso_numeric;\n      public $iso_3166;\n      public $currency_name;\n      public $currency_code;\n      public $currency_number;\n      public function __construct(array $data)\n      {\n        $vars = get_object_vars($this);\n        foreach ($vars as $key => $value) {\n          $this->$key = $data[$key] ?? NULL;\n        }\n      }\n    }\n    ```", "```php\n    namespace Application\\I18n;\n\n    interface IsoCodesInterface\n    {\n      public function getCurrencyCodeFromIso2CountryCode($iso2) : IsoCodes;\n    }\n    ```", "```php\n    namespace Application\\I18n;\n\n    use PDO;\n    use Application\\Database\\Connection;\n\n    class IsoCodesDb implements IsoCodesInterface\n    {\n      protected $isoTableName;\n      protected $iso2FieldName;\n      protected $connection;\n      public function __construct(Connection $connection, $isoTableName, $iso2FieldName)\n      {\n        $this->connection = $connection;\n        $this->isoTableName = $isoTableName;\n        $this->iso2FieldName = $iso2FieldName;\n      }\n      public function getCurrencyCodeFromIso2CountryCode($iso2) : IsoCodes\n      {\n        $sql = sprintf('SELECT * FROM %s WHERE %s = ?', $this->isoTableName, $this->iso2FieldName);\n        $stmt = $this->connection->pdo->prepare($sql);\n        $stmt->execute([$iso2]);\n        return new IsoCodes($stmt->fetch(PDO::FETCH_ASSOC);\n      }\n    }\n    ```", "```php\n    const ERROR_UNABLE_TO_PARSE = 'ERROR: Unable to parse';\n    const FALLBACK_CURRENCY = 'GBP';\n\n    protected $currencyFormatter;\n    protected $currencyLookup;\n    protected $currencyCode;\n    ```", "```php\n    public function getCountryCode()\n    {\n      return $this->getRegion($this->getLocaleCode());\n    }\n    public function getCurrencyCode()\n    {\n      return $this->currencyCode;\n    }\n    ```", "```php\n    public function getCurrencyFormatter()\n    {\n      if (!$this->currencyFormatter) {\n        $this->currencyFormatter = new NumberFormatter($this->getLocaleCode(), NumberFormatter::CURRENCY);\n      }\n      return $this->currencyFormatter;\n    }\n    ```", "```php\n    public function __construct($localeString = NULL, IsoCodesInterface $currencyLookup = NULL)\n    {\n      // add this to the existing code:\n      $this->currencyLookup = $currencyLookup;\n      if ($this->currencyLookup) {\n        $this->currencyCode = $this->currencyLookup->getCurrencyCodeFromIso2CountryCode($this->getCountryCode())->currency_code;\n      } else {\n        $this->currencyCode = self::FALLBACK_CURRENCY;\n      }\n    }\n    ```", "```php\n    public function formatCurrency($currency)\n    {\n      return $this->getCurrencyFormatter()->formatCurrency($currency, $this->currencyCode);\n    }\n    public function parseCurrency($string)\n    {\n      $result = $this->getCurrencyFormatter()->parseCurrency($string, $this->currencyCode);\n      return ($result) ? $result : self::ERROR_UNABLE_TO_PARSE;\n    }\n    ```", "```php\nCREATE TABLE `iso_country_codes` (\n  `name` varchar(128) NOT NULL,\n  `iso2` varchar(2) NOT NULL,\n  `iso3` varchar(3) NOT NULL,\n  `iso_numeric` int(11) NOT NULL AUTO_INCREMENT,\n  `iso_3166` varchar(32) NOT NULL,\n  `currency_name` varchar(32) DEFAULT NULL,\n  `currency_code` char(3) DEFAULT NULL,\n  `currency_number` int(4) DEFAULT NULL,\n  PRIMARY KEY (`iso_numeric`)\n) ENGINE=InnoDB AUTO_INCREMENT=895 DEFAULT CHARSET=utf8;\n```", "```php\n<?php\ndefine('DB_CONFIG_FILE', __DIR__ . '/../config/db.config.php');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\I18n\\Locale;\nuse Application\\I18n\\IsoCodesDb;\nuse Application\\Database\\Connection;\nuse Application\\I18n\\Locale;\n```", "```php\n$connection = new Connection(include DB_CONFIG_FILE);\n$isoLookup = new IsoCodesDb($connection, 'iso_country_codes', 'iso2');\n```", "```php\n$localeFr = new Locale('fr-FR', $isoLookup);\n$localeUk = new Locale('en_GB', $isoLookup);\n$number   = 1234567.89;\n?>\n```", "```php\n    use IntlCalendar;\n    use IntlDateFormatter;\n    ```", "```php\n    const DATE_TYPE_FULL   = IntlDateFormatter::FULL;\n    const DATE_TYPE_LONG   = IntlDateFormatter::LONG;\n    const DATE_TYPE_MEDIUM = IntlDateFormatter::MEDIUM;\n    const DATE_TYPE_SHORT  = IntlDateFormatter::SHORT;\n\n    const ERROR_UNABLE_TO_PARSE = 'ERROR: Unable to parse';\n    const ERROR_UNABLE_TO_FORMAT = 'ERROR: Unable to format date';\n    const ERROR_ARGS_STRING_ARRAY = 'ERROR: Date must be string YYYY-mm-dd HH:ii:ss or array(y,m,d,h,i,s)';\n    const ERROR_CREATE_INTL_DATE_FMT = 'ERROR: Unable to create international date formatter';\n\n    protected $dateFormatter;\n    ```", "```php\n    public function getDateFormatter($type)\n    {\n      switch ($type) {\n        case self::DATE_TYPE_SHORT :\n          $formatter = new IntlDateFormatter($this->getLocaleCode(),\n            IntlDateFormatter::SHORT, IntlDateFormatter::SHORT);\n          break;\n        case self::DATE_TYPE_MEDIUM :\n          $formatter = new IntlDateFormatter($this->getLocaleCode(), IntlDateFormatter::MEDIUM, IntlDateFormatter::MEDIUM);\n          break;\n        case self::DATE_TYPE_LONG :\n          $formatter = new IntlDateFormatter($this->getLocaleCode(), IntlDateFormatter::LONG, IntlDateFormatter::LONG);\n          break;\n        case self::DATE_TYPE_FULL :\n          $formatter = new IntlDateFormatter($this->getLocaleCode(), IntlDateFormatter::FULL, IntlDateFormatter::FULL);\n          break;\n        default :\n          throw new InvalidArgumentException(self::ERROR_CREATE_INTL_DATE_FMT);\n      }\n      $this->dateFormatter = $formatter;\n      return $this->dateFormatter;\n    }\n    ```", "```php\n    public function formatDate($date, $type, $timeZone = NULL)\n    {\n      $result   = NULL;\n      $year     = date('Y');\n      $month    = date('m');\n      $day      = date('d');\n      $hour     = 0;\n      $minutes  = 0;\n      $seconds  = 0;\n    ```", "```php\n    if (is_string($date)) {\n      list($dateParts, $timeParts) = explode(' ', $date);\n      list($year,$month,$day) = explode('-',$dateParts);\n      list($hour,$minutes,$seconds) = explode(':',$timeParts);\n    } elseif (is_array($date)) {\n      list($year,$month,$day,$hour,$minutes,$seconds) = $date;\n    } else {\n      throw new InvalidArgumentException(self::ERROR_ARGS_STRING_ARRAY);\n    }\n    ```", "```php\n    $intlDate = IntlCalendar::createInstance($timeZone, $this->getLocaleCode());\n    $intlDate->set($year,$month,$day,$hour,$minutes,$seconds);\n    ```", "```php\n      $formatter = $this->getDateFormatter($type);\n      if ($timeZone) {\n        $formatter->setTimeZone($timeZone);\n      }\n      $result = $formatter->format($intlDate);\n      return $result ?? self::ERROR_UNABLE_TO_FORMAT;\n    }\n    ```", "```php\n    public function parseDate($string, $type = NULL)\n    {\n     if ($type) {\n      $result = $this->getDateFormatter($type)->parse($string);\n     } else {\n      $tryThese = [self::DATE_TYPE_FULL,\n        self::DATE_TYPE_LONG,\n        self::DATE_TYPE_MEDIUM,\n        self::DATE_TYPE_SHORT];\n      foreach ($tryThese as $type) {\n      $result = $this->getDateFormatter($type)->parse($string);\n        if ($result) {\n          break;\n        }\n      }\n     }\n     return ($result) ? $result : self::ERROR_UNABLE_TO_PARSE;\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\I18n\\Locale;\n\n$localeFr = new Locale('fr-FR');\n$localeUs = new Locale('en_US');\n$date     = '2016-02-29 17:23:58';\n?>\n```", "```php\necho $localeFr->formatDate($date, Locale::DATE_TYPE_FULL);\necho $localeUs->formatDate($date, Locale::DATE_TYPE_MEDIUM);\n$localeUs->parseDate($localeFr->formatDate($date, Locale::DATE_TYPE_MEDIUM));\n// etc.\n```", "```php\n    namespace Application\\I18n;\n\n    class Day\n    {\n      public $dayOfMonth;\n      public function __construct($dayOfMonth)\n      {\n        $this->dayOfMonth = $dayOfMonth;\n      }\n      public function __invoke()\n      {\n        return $this->dayOfMonth ?? '';\n      }\n    }\n    ```", "```php\n    namespace Application\\I18n;\n\n    use IntlCalendar;\n\n    class Calendar\n    {\n\n      const DAY_1 = 'EEEEE';  // T\n      const DAY_2 = 'EEEEEE'; // Tu\n      const DAY_3 = 'EEE';   // Tue\n      const DAY_FULL = 'EEEE'; // Tuesday\n      const MONTH_1 = 'MMMMM'; // M\n      const MONTH_3 = 'MMM';  // Mar\n      const MONTH_FULL = 'MMMM';  // March\n      const DEFAULT_ACROSS = 3;\n      const HEIGHT_FULL = '150px';\n      const HEIGHT_SMALL = '60px';\n\n      protected $locale;\n      protected $dateFormatter;\n      protected $yearArray;\n      protected $height;\n\n      public function __construct(Locale $locale)\n      {\n        $this->locale = $locale;\n      }\n\n         // other methods are discussed in the following bullets\n\n    }\n    ```", "```php\n    protected function getDateFormatter()\n    {\n     if (!$this->dateFormatter) {\n      $this->dateFormatter = $this->locale->getDateFormatter(Locale::DATE_TYPE_FULL);\n     }\n     return $this->dateFormatter;\n    }\n    ```", "```php\n    public function buildMonthArray($year, $month, $timeZone = NULL)\n    {\n    $month -= 1; \n    //IntlCalendar months are 0 based; Jan==0, Feb==1 and so on\n      $day = 1;\n      $first = TRUE;\n      $value = 0;\n      $monthArray = array();\n    ```", "```php\n    $cal = IntlCalendar::createInstance($timeZone, $this->locale->getLocaleCode());\n    $cal->set($year, $month, $day);\n    $maxDaysInMonth = $cal->getActualMaximum(IntlCalendar::FIELD_DAY_OF_MONTH);\n    ```", "```php\n    $formatter = $this->getDateFormatter();\n    $formatter->setPattern('e');\n    $firstDayIsWhatDow = $formatter->format($cal);\n    ```", "```php\n    while ($day <= $maxDaysInMonth) {\n      for ($dow = 1; $dow <= 7; $dow++) {\n        $cal->set($year, $month, $day);\n        $weekOfYear = $cal->get(IntlCalendar::FIELD_WEEK_OF_YEAR);\n        if ($weekOfYear > 52) $weekOfYear = 0;\n    ```", "```php\n          if ($first) {\n            if ($dow == $firstDayIsWhatDow) {\n              $first = FALSE;\n              $value = $day++;\n            } else {\n              $value = NULL;\n            }\n          } else {\n            if ($day <= $maxDaysInMonth) {\n              $value = $day++;\n            } else {\n              $value = NULL;\n            }\n          }\n          $monthArray[$weekOfYear][$dow] = new Day($value);\n        }\n      }\n      return $monthArray;\n    }\n    ```", "```php\n    protected function getDay($type, $cal)\n    {\n      $formatter = $this->getDateFormatter();\n      $formatter->setPattern($type);\n      return $formatter->format($cal);\n    }\n    ```", "```php\n    protected function getWeekHeaderRow($type, $cal, $year, $month, $week)\n    {\n      $output = '<tr>';\n      $width  = (int) (100/7);\n      foreach ($week as $day) {\n        $cal->set($year, $month, $day());\n        $output .= '<th style=\"vertical-align:top;\" width=\"' . $width . '%\">' . $this->getDay($type, $cal) . '</th>';\n      }\n      $output .= '</tr>' . PHP_EOL;\n      return $output;\n    }\n    ```", "```php\n    protected function getWeekDaysRow($week)\n    {\n      $output = '<tr style=\"height:' . $this->height . ';\">';\n      $width  = (int) (100/7);\n      foreach ($week as $day) {\n        $output .= '<td style=\"vertical-align:top;\" width=\"' . $width . '%\">' . $day() .  '</td>';\n      }\n      $output .= '</tr>' . PHP_EOL;\n      return $output;\n    }\n    ```", "```php\n    public function calendarForMonth($year, \n        $month, \n        $timeZone = NULL, \n        $dayType = self::DAY_3, \n        $monthType = self::MONTH_FULL, \n        $monthArray = NULL)\n    {\n      $first = 0;\n      if (!$monthArray) \n        $monthArray = $this->yearArray[$year][$month]\n        ?? $this->buildMonthArray($year, $month, $timeZone);\n    ```", "```php\n      $month--;\n      $cal = IntlCalendar::createInstance($timeZone, $this->locale->getLocaleCode());\n      $cal->set($year, $month, 1);\n      $formatter = $this->getDateFormatter();\n      $formatter->setPattern($monthType);\n    ```", "```php\n      $this->height = ($dayType == self::DAY_FULL) \n         ? self::HEIGHT_FULL : self::HEIGHT_SMALL;\n      $html = '<h1>' . $formatter->format($cal) . '</h1>';\n      $header = '';\n      $body   = '';\n      foreach ($monthArray as $weekNum => $week) {\n        if ($first++ == 1) {\n          $header .= $this->getWeekHeaderRow($dayType, $cal, $year, $month, $week);\n        }\n        $body .= $this->getWeekDaysRow($dayType, $week);\n      }\n      $html .= '<table>' . $header . $body . '</table>' . PHP_EOL;\n      return $html;\n    }\n    ```", "```php\n    public function buildYearArray($year, $timeZone = NULL)\n    {\n      $this->yearArray = array();\n      for ($month = 1; $month <= 12; $month++) {\n        $this->yearArray[$year][$month] = $this->buildMonthArray($year, $month, $timeZone);\n      }\n      return $this->yearArray;\n    }\n\n    public function getYearArray()\n    {\n      return $this->yearArray;\n    }\n    ```", "```php\n    public function calendarForYear($year, \n      $timeZone = NULL, \n      $dayType = self::DAY_1, \n      $monthType = self::MONTH_3, \n      $across = self::DEFAULT_ACROSS)\n    {\n      if (!$this->yearArray) $this->buildYearArray($year, $timeZone);\n      $yMax = (int) (12 / $across);\n      $width = (int) (100 / $across);\n      $output = '<table>' . PHP_EOL;\n      $month = 1;\n      for ($y = 1; $y <= $yMax; $y++) {\n        $output .= '<tr>';\n        for ($x = 1; $x <= $across; $x++) {\n          $output .= '<td style=\"vertical-align:top;\" width=\"' . $width . '%\">' . $this->calendarForMonth($year, $month, $timeZone, $dayType, $monthType, $this->yearArray[$year][$month++]) . '</td>';\n        }\n        $output .= '</tr>' . PHP_EOL;\n      }\n      $output .= '</table>';\n      return $output;\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\I18n\\Locale;\nuse Application\\I18n\\Calendar;\n\n$localeFr = new Locale('fr-FR');\n$localeUs = new Locale('en_US');\n$localeTh = new Locale('th_TH');\n$calendarFr = new Calendar($localeFr);\n$calendarUs = new Calendar($localeUs);\n$calendarTh = new Calendar($localeTh);\n$year = 2016;\n$month = 1;\n?>\n```", "```php\n<!DOCTYPE html>\n<html>\n  <head>\n  <title>PHP 7 Cookbook</title>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"php7cookbook_html_table.css\">\n  </head>\n  <body>\n    <h3>Year: <?= $year ?></h3>\n    <?= $calendarFr->calendarForMonth($year, $month, NULL, Calendar::DAY_FULL); ?>\n    <?= $calendarUs->calendarForMonth($year, $month, NULL, Calendar::DAY_FULL); ?>\n    <?= $calendarTh->calendarForMonth($year, $month, NULL, Calendar::DAY_FULL); ?>\n  </body>\n</html>\n```", "```php\n$localeTh = new Locale('th_TH');\n$localeEs = new Locale('es_ES');\n$calendarTh = new Calendar($localeTh);\n$calendarEs = new Calendar($localeEs);\n$year = 2016;\necho $calendarTh->calendarForYear($year);\necho $calendarEs->calendarForYear($year);\n```", "```php\n    namespace Application\\I18n;\n\n    use DateTime;\n    use DatePeriod;\n    use DateInterval;\n    use InvalidArgumentException;\n\n    class Event\n    {\n      // code\n    }\n    ```", "```php\n    const INTERVAL_DAY = 'P%dD';\n    const INTERVAL_WEEK = 'P%dW';\n    const INTERVAL_MONTH = 'P%dM';\n    const FLAG_FIRST = 'FIRST';    // 1st of the month\n    const ERROR_INVALID_END  = 'Need to supply either # occurrences or an end date';\n    const ERROR_INVALID_DATE = 'String i.e. YYYY-mm-dd or DateTime instance only';\n    const ERROR_INVALID_INTERVAL = 'Interval must take the form \"P\\d+(D | W | M)\"';\n\n    public $id;\n    public $flag;\n    public $value;\n    public $title;\n    public $locale;\n    public $interval;\n    public $description;\n    public $occurrences;\n    public $nextDate;\n    protected $endDate;\n    protected $startDate;\n    ```", "```php\n    public function __construct($title, \n        $description,\n        $startDate,\n        $interval,\n        $value,\n        $occurrences = NULL,\n        $endDate = NULL,\n        $flag = NULL)\n    {\n    ```", "```php\n    $this->id = md5($title . $interval . $value) . sprintf('%04d', rand(0,9999));\n    $this->flag = $flag;\n    $this->value = $value;\n    $this->title = $title;\n    $this->description = $description;\n    $this->occurrences = $occurrences;\n    ```", "```php\n    try {\n      $this->interval = new DateInterval(sprintf($interval, $value));\n      } catch (Exception $e) {\n      error_log($e->getMessage());\n      throw new InvalidArgumentException(self::ERROR_INVALID_INTERVAL);\n    }\n    ```", "```php\n      $this->startDate = $this->stringOrDate($startDate);\n      if ($endDate) {\n        $this->endDate = $this->stringOrDate($endDate);\n      } elseif ($occurrences) {\n        $this->endDate = $this->calcEndDateFromOccurrences();\n      } else {\n      throw new InvalidArgumentException(self::ERROR_INVALID_END);\n      }\n      $this->nextDate = $this->startDate;\n    }\n    ```", "```php\n    protected function stringOrDate($date)\n    {\n      if ($date === NULL) { \n        $newDate = NULL;\n      } elseif ($date instanceof DateTime) {\n        $newDate = $date;\n      } elseif (is_string($date)) {\n        $newDate = new DateTime($date);\n      } else {\n        throw new InvalidArgumentException(self::ERROR_INVALID_END);\n      }\n      return $newDate;\n    }\n    ```", "```php\n    protected function calcEndDateFromOccurrences()\n    {\n      $endDate = new DateTime('now');\n      $period = new DatePeriod(\n    $this->startDate, $this->interval, $this->occurrences);\n      foreach ($period as $date) {\n        $endDate = $date;\n      }\n      return $endDate;\n    }\n    ```", "```php\n    public function __toString()\n    {\n      return $this->title;\n    }\n    ```", "```php\n    public function  getNextDate(DateTime $today)\n    {\n      if ($today > $this->endDate) {\n        return FALSE;\n      }\n      $next = clone $today;\n      $next->add($this->interval);\n      return $next;\n    }\n    ```", "```php\n    protected $events = array();\n    public function addEvent(Event $event)\n    {\n      $this->events[$event->id] = $event;\n    }\n    ```", "```php\n    protected function processEvents($dayObj, $cal)\n    {\n      if ($this->events && $dayObj()) {\n        $calDateTime = $cal->toDateTime();\n        foreach ($this->events as $id => $eventObj) {\n          $next = $eventObj->getNextDate($eventObj->nextDate);\n          if ($next) {\n            if ($calDateTime->format('Y-m-d') == \n                $eventObj->nextDate->format('Y-m-d')) {\n              $dayObj->events[$eventObj->id] = $eventObj;\n              $eventObj->nextDate = $next;\n            }\n          }\n        }\n      }\n      return $dayObj;\n    }\n    ```", "```php\n      while ($day <= $maxDaysInMonth) {\n        for ($dow = 1; $dow <= 7; $dow++) {\n          // add this to the existing code:\n          $dayObj = $this->processEvents(new Day($value), $cal);\n          $monthArray[$weekOfYear][$dow] = $dayObj;\n        }\n      }\n    ```", "```php\n    protected function getWeekDaysRow($type, $week)\n    {\n      $output = '<tr style=\"height:' . $this->height . ';\">';\n      $width  = (int) (100/7);\n      foreach ($week as $day) {\n        $events = '';\n        if ($day->events) {\n          foreach ($day->events as $single) {\n            $events .= '<br>' . $single->title;\n            if ($type == self::DAY_FULL) {\n              $events .= '<br><i>' . $single->description . '</i>';\n            }\n          }\n        }\n        $output .= '<td style=\"vertical-align:top;\" width=\"' . $width . '%\">' \n      . $day() . $events . '</td>';\n      }\n      $output .= '</tr>' . PHP_EOL;\n      return $output;\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\I18n\\ { Locale, Calendar, Event };\n\ntry {\n  $year = 2016;\n  $localeEs = new Locale('es_ES');\n  $calendarEs = new Calendar($localeEs);\n```", "```php\n  // add event: 3 days\n  $title = 'Conf';\n  $description = 'Special 3 day symposium on eco-waste';\n  $startDate = '2016-01-08';\n  $event = new Event($title, $description, $startDate, \n                     Event::INTERVAL_DAY, 1, 2);\n  $calendarEs->addEvent($event);\n```", "```php\n  $title = 'Pay Rent';\n  $description = 'Sent rent check to landlord';\n  $startDate = new DateTime('2016-02-01');\n  $event = new Event($title, $description, $startDate, \n    Event::INTERVAL_MONTH, 1, '2017-09-01', NULL, Event::FLAG_FIRST);\n  $calendarEs->addEvent($event);\n```", "```php\n} catch (Throwable $e) {\n  $message = $e->getMessage();\n}\n?>\n<!DOCTYPE html>\n<head>\n  <title>PHP 7 Cookbook</title>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"php7cookbook_html_table.css\">\n</head>\n<body>\n<h3>Year: <?= $year ?></h3>\n<?= $calendarEs->calendarForYear($year, 'Europe/Berlin', \n    Calendar::DAY_3, Calendar::MONTH_FULL, 2); ?>\n<?= $calendarEs->calendarForMonth($year, 1  , 'Europe/Berlin', \n    Calendar::DAY_FULL); ?>\n</body>\n</html>\n```", "```php\n    namespace Application\\I18n\\Translate\\Adapter;\n    interface TranslateAdapterInterface\n    {\n      public function translate($msgid);\n    }\n    ```", "```php\n    namespace Application\\I18n\\Translate\\Adapter;\n\n    trait TranslateAdapterTrait\n    {\n      protected $translation;\n      public function translate($msgid)\n      {\n        return $this->translation[$msgid] ?? $msgid;\n      }\n    }\n    ```", "```php\n    namespace Application\\I18n\\Translate\\Adapter;\n\n    use Exception;\n    use Application\\I18n\\Locale;\n\n    class Ini implements TranslateAdapterInterface\n    {\n      use TranslateAdapterTrait;\n      const ERROR_NOT_FOUND = 'Translation file not found';\n      public function __construct(Locale $locale, $filePattern)\n      {\n        $translateFileName = sprintf($filePattern, $locale->getLocaleCode());\n        if (!file_exists($translateFileName)) {\n          error_log(self::ERROR_NOT_FOUND . ':' . $translateFileName);\n          throw new Exception(self::ERROR_NOT_FOUND);\n        } else {\n          $this->translation = parse_ini_file($translateFileName);\n        }\n      }\n    }\n    ```", "```php\n    public function __construct(Locale $locale, $filePattern)\n    {\n      $translateFileName = sprintf($filePattern, $locale->getLocaleCode());\n      if (!file_exists($translateFileName)) {\n        error_log(self::ERROR_NOT_FOUND . ':' . $translateFileName);\n        throw new Exception(self::ERROR_NOT_FOUND);\n      } else {\n        $fileObj = new SplFileObject($translateFileName, 'r');\n        while ($row = $fileObj->fgetcsv()) {\n          $this->translation[$row[0]] = $row[1];\n        }\n      }\n    }\n    ```", "```php\n    namespace Application\\I18n\\Translate\\Adapter;\n\n    use Exception;\n    use Application\\Database\\Connection;\n    use Application\\I18n\\Locale;\n\n    class Database implements TranslateAdapterInterface\n    {\n      use TranslateAdapterTrait;\n      protected $connection;\n      protected $statement;\n      protected $defaultLocaleCode;\n      public function __construct(Locale $locale, \n                                  Connection $connection, \n                                  $tableName)\n      {\n        $this->defaultLocaleCode = $locale->getLocaleCode();\n        $this->connection = $connection;\n        $sql = 'SELECT msgstr FROM ' . $tableName \n           . ' WHERE localeCode = ? AND msgid = ?';\n        $this->statement = $this->connection->pdo->prepare($sql);\n      }\n      public function translate($msgid, $localeCode = NULL)\n      {\n        if (!$localeCode) $localeCode = $this->defaultLocaleCode;\n        $this->statement->execute([$localeCode, $msgid]);\n        return $this->statement->fetchColumn();\n      }\n    }\n    ```", "```php\n    namespace Application\\I18n\\Translate;\n\n    use Application\\I18n\\Locale;\n    use Application\\I18n\\Translate\\Adapter\\TranslateAdapterInterface;\n\n    class Translation\n    {\n      const DEFAULT_LOCALE_CODE = 'en_GB';\n      protected $defaultLocaleCode;\n      protected $adapter = array();\n      protected $textFilePattern = array();\n    ```", "```php\n    public function __construct(TranslateAdapterInterface $adapter, \n                  $defaultLocaleCode = NULL, \n                  $textFilePattern = NULL)\n    {\n      if (!$defaultLocaleCode) {\n        $this->defaultLocaleCode = self::DEFAULT_LOCALE_CODE;\n      } else {\n        $this->defaultLocaleCode = $defaultLocaleCode;\n      }\n      $this->adapter[$this->defaultLocaleCode] = $adapter;\n      $this->textFilePattern[$this->defaultLocaleCode] = $textFilePattern;\n    }\n    ```", "```php\n    public function setAdapter($localeCode, TranslateAdapterInterface $adapter)\n    {\n      $this->adapter[$localeCode] = $adapter;\n    }\n    public function setDefaultLocaleCode($localeCode)\n    {\n      $this->defaultLocaleCode = $localeCode;\n    }\n    public function setTextFilePattern($localeCode, $pattern)\n    {\n      $this->textFilePattern[$localeCode] = $pattern;\n    }\n    ```", "```php\n    public function __invoke($msgid, $locale = NULL)\n    {\n      if ($locale === NULL) $locale = $this->defaultLocaleCode;\n      return $this->adapter[$locale]->translate($msgid);\n    }\n    ```", "```php\n    public function text($key, $localeCode = NULL)\n    {\n      if ($localeCode === NULL) $localeCode = $this->defaultLocaleCode;\n      $contents = $key;\n      if (isset($this->textFilePattern[$localeCode])) {\n        $fn = sprintf($this->textFilePattern[$localeCode], $localeCode, $key);\n        if (file_exists($fn)) {\n          $contents = file_get_contents($fn);\n        }\n      }\n      return $contents;\n    }\n    ```", "```php\nWelcome=Bienvenido\nAbout Us=Sobre Nosotros\nContact Us=Cont\u00e1ctenos\nFind Us=Encontrarnos\nclick=clic para m\u00e1s informaci\u00f3n\n```", "```php\n\"Welcome\",\"Bienvenido\"\n\"About Us\",\"Sobre Nosotros\"\n\"Contact Us\",\"Cont\u00e1ctenos\"\n\"Find Us\",\"Encontrarnos\"\n\"click\",\"clic para m\u00e1s informaci\u00f3n\"\n```", "```php\nCREATE TABLE `translation` (\n  `msgid` varchar(255) NOT NULL,\n  `msgstr` varchar(255) NOT NULL,\n  `locale_code` char(6) NOT NULL DEFAULT '',\n  PRIMARY KEY (`msgid`,`locale_code`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\ndefine('TEXT_FILE_PATTERN', __DIR__ . '/../data/languages/%s/%s.txt');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\I18n\\Locale;\nuse Application\\I18n\\Translate\\ { Translation, Adapter\\Database };\nuse Application\\Database\\Connection;\n\n$conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n$locale = new Locale('fr_FR');\n```", "```php\n$adapter = new Database($locale, $conn, 'translation');\n$translate = new Translation($adapter, $locale->getLocaleCode(), TEXT_FILE_PATTERN);\n?>\n```", "```php\n<!DOCTYPE html>\n<head>\n  <title>PHP 7 Cookbook</title>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"php7cookbook_html_table.css\">\n</head>\n<body>\n<table>\n<tr>\n  <th><h1 style=\"color:white;\"><?= $translate('Welcome') ?></h1></th>\n  <td>\n    <div style=\"float:left;width:50%;vertical-align:middle;\">\n    <h3 style=\"font-size:24pt;\"><i>Some Company, Inc.</i></h3>\n    </div>\n    <div style=\"float:right;width:50%;\">\n    <img src=\"jcartier-city.png\" width=\"300px\"/>\n    </div>\n  </td>\n</tr>\n<tr>\n  <th>\n    <ul>\n      <li><?= $translate('About Us') ?></li>\n      <li><?= $translate('Contact Us') ?></li>\n      <li><?= $translate('Find Us') ?></li>\n    </ul>\n  </th>\n  <td>\n    <p>\n    <?= $translate->text('main_page'); ?>\n    </p>\n    <p>\n    <a href=\"#\"><?= $translate('click') ?></a>\n    </p>\n  </td>\n</tr>\n</table>\n</body>\n</html>\n```"]