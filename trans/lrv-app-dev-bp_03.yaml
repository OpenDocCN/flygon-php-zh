- en: Chapter 3. Building an Image Sharing Website
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。构建一个图片分享网站
- en: With this chapter, we are going to create a photo sharing website. First, we
    are going to create an images table. Then we'll cover methods to resize and share
    images.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一章，我们将创建一个照片分享网站。首先，我们将创建一个图像表。然后我们将介绍调整大小和分享图像的方法。
- en: 'The following topics are covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Creating a database and migrating the images table
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库并迁移图像表
- en: Creating a photo model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个照片模型
- en: Setting custom configuration values
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置自定义配置值
- en: Installing a third-party library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装第三方库
- en: Creating a secure form for file upload
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个安全的文件上传表单
- en: Validating and processing the form
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证和处理表单
- en: Showing the image with a user interface
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户界面显示图像
- en: Listing images
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出图像
- en: Deleting the image from the database and server
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库和服务器中删除图像
- en: Creating a database and migrating the images table
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库并迁移图像表
- en: 'After successfully installing Laravel 4 and defining database credentials from
    `app/config/database.php`, create a database called `images`. For this, you can
    either create a new database from your hosting provider''s panel, or if you are
    the server administrator, you can simply run the following SQL command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 成功安装Laravel 4并从`app/config/database.php`中定义数据库凭据后，创建一个名为`images`的数据库。为此，您可以从托管提供商的面板上创建一个新的数据库，或者如果您是服务器管理员，您可以简单地运行以下SQL命令：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After successfully creating the database for the application, we need to create
    a `photos` table and install it to the database. To do this, open up your terminal,
    navigate to your project folder and run the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 成功为应用程序创建数据库后，我们需要创建一个`photos`表并将其安装到数据库中。为此，打开您的终端，导航到项目文件夹，并运行以下命令：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command will generate a new MySQL database migration for us to create a
    table named photos.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将为我们生成一个新的MySQL数据库迁移，用于创建一个名为photos的表。
- en: 'Now we need to define what sections should be in our database table. For our
    example, I thought `id column`, `image titles`, `image file names`, and `timestamps`
    should be sufficient. So for this, open the migration file just created with the
    preceding command and change its contents as shown in the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要定义数据库表中应该有哪些部分。对于我们的示例，我认为`id列`，`图像标题`，`图像文件名`和`时间戳`应该足够了。因此，打开刚刚用前面的命令创建的迁移文件，并按照以下代码更改其内容：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After saving the file, run the following command to execute migrations:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，运行以下命令执行迁移：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If no error has occurred, you are ready for the next step of the project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有发生错误，您已经准备好进行项目的下一步了。
- en: Creating a photo model
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个照片模型
- en: As you know, for anything related to database operations on Laravel, using models
    is the best practice. We will take advantage of the **Eloquent ORM**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，对于Laravel上的任何与数据库操作相关的事情，使用模型是最佳实践。我们将利用**Eloquent ORM**。
- en: 'Save the following code as `images.php` in the `app/models/` directory:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码保存为`app/models/`目录中的`images.php`：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We have set the table name with the `protected $table` variable. The content
    of which columns of the table can be updated/inserted will be decided with the
    `protected $fillable` variable. Finally, whether the model can add/update timestamps
    or not will be decided by the value of the `public $timestamps` variable. Just
    by setting this model (even without setting anything), we can easily use all the
    advantages of Eloquent ORM.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`protected $table`变量设置了表名。表的哪些列的内容可以被更新/插入将由`protected $fillable`变量决定。最后，模型是否可以添加/更新时间戳将由`public
    $timestamps`变量的值决定。只需设置这个模型（即使什么都不设置），我们就可以轻松地使用Eloquent ORM的所有优势。
- en: Our model is ready, now we can proceed to the next step and start to create
    our controller along with the upload forms. But before this, we are missing one
    simple thing. Where should the images be uploaded? What will be the maximum width
    and height of the thumbnails? To set these configuration values (think of it like
    constants of raw PHP), we should create a new configuration file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型已经准备好了，现在我们可以继续下一步，开始创建我们的控制器以及上传表单。但在此之前，我们缺少一件简单的事情。图像应该上传到哪里？缩略图的最大宽度和高度是多少？要设置这些配置值（将其视为原始PHP的常量），我们应该创建一个新的配置文件。
- en: Setting custom configuration values
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置自定义配置值
- en: With Laravel, setting configuration values is quite easy. All `config` values
    are within an array and will be defined as a `key=>value` pair.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Laravel，设置配置值非常容易。所有`config`值都在一个数组中，并且将被定义为`key=>value`对。
- en: 'Now let''s make a new configuration file. Save this file as `image.php` in
    `app/config`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个新的配置文件。将此文件保存为`app/config`中的`image.php`：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can set any other setting as you like. That''s limited to your imagination.
    You can call the settings with Laravel''s built-in `Config` Library''s `get()`
    method. Sample usage is as shown in the following code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据自己的喜好设置任何其他设置。这取决于您的想象力。您可以使用Laravel内置的`Config`库的`get()`方法调用设置。示例用法如下所示：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There is a dot (`.`) between the parameter, which splits the string into two.
    The first part is the filename of the `Config` without the extension, the second
    part is the key name of the configuration value. In our example, if we want to
    identify which folder is the uploaded folder name, we should write it as shown
    in the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在参数之间有一个点（`。`），它将字符串分成两部分。第一部分是`Config`的文件名，不包括扩展名，第二部分是配置值的键名。在我们的示例中，如果我们想要确定上传文件夹的名称，我们应该按照以下代码所示进行编写：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding code will return whatever the value is. In our example, it will
    return `public`/`uploads`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将返回任何值。在我们的示例中，它将返回`public`/`uploads`。
- en: 'One more thing: We defined some folder names for our app, but we didn''t create
    them. For some server configurations, the folders may be autocreated at the first
    attempt to upload the file, but if you don''t create them, most probably it will
    cause errors on your server configuration. Create the following folders in the
    `public` folder and make them writable:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事：我们为我们的应用程序定义了一些文件夹名称，但我们没有创建它们。对于某些服务器配置，文件夹可能会在第一次尝试上传文件时自动创建，但如果您不创建它们，很可能会导致服务器配置错误。在`public`文件夹中创建以下文件夹，并使其可写：
- en: '`uploads/`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uploads/`'
- en: '`uploads/thumbs`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uploads/thumbs`'
- en: Now we should make an upload form for our image site.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该为我们的图片站点制作一个上传表单。
- en: Installing a third-party library
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装第三方库
- en: 'We should make an upload form and then a controller for our image site. But
    before doing that, we will install a third-party library for image processing
    as we will be benefiting from its methods. Laravel 4 uses **Composer** , so it''s
    quite easy to install packages, update packages, and even update Laravel. For
    our project, we will be using a library called `Intervention` . The following
    steps must be followed to install the library:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该为我们的图片站点制作一个上传表单，然后为其创建一个控制器。但在这之前，我们将安装一个用于图像处理的第三方库，因为我们将从中受益。Laravel
    4使用**Composer**，因此安装包、更新包甚至更新Laravel都非常容易。对于我们的项目，我们将使用一个名为`Intervention`的库。必须按照以下步骤来安装该库：
- en: First, make sure you have the latest `composer.phar` file by running `php composer.phar
    self-update` in your terminal.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，确保您通过在终端中运行`php composer.phar self-update`来拥有最新的`composer.phar`文件。
- en: 'Then open `composer.json` and add a new value to the `require` section. The
    value for our library is `intervention/image: "dev-master"`.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '然后打开`composer.json`，并在`require`部分添加一个新值。我们库的值是`intervention/image: "dev-master"`。'
- en: 'Currently, our `composer.json` file''s `require` section looks as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的`composer.json`文件的`require`部分如下所示：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can find more packages for Composer at [www.packagist.org](http://www.packagist.org).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[www.packagist.org](http://www.packagist.org)上找到更多Composer包。
- en: 'After setting the value, open your terminal, navigate to the project''s `root`
    folder, and type the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置完值后，打开您的终端，导航到项目的`root`文件夹，并输入以下命令：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This command will check `composer.json` and update all the dependencies (including
    Laravel itself) and if new requirements are added, it will download and install
    them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将检查`composer.json`并更新所有依赖项（包括Laravel本身），如果添加了新的要求，它将下载并安装它们。
- en: 'After successfully downloading the library, we will now activate it. For this,
    we refer to the website of the `Intervention` class. Now open your `app/config/app.php`,
    and add the following value to the `providers` key:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功下载库后，我们现在将激活它。为此，我们参考`Intervention`类的网站。现在打开你的`app/config/app.php`，并将以下值添加到`providers`键中：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we need to set an alias so that we can call the class easily. To do this,
    add the following value to the aliases key of the same file:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要设置一个别名，以便我们可以轻松调用该类。为此，在同一文件的别名键中添加以下值：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The class has a notation that is quite easy to understand. To resize an image,
    running the following code will suffice:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该类有一个相当容易理解的注释。要调整图像大小，运行以下代码就足够了：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about the `Intervention` class, go to the following web
    address:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`Intervention`类的更多信息，请访问以下网址：
- en: '[http://intervention.olivervogel.net](http://intervention.olivervogel.net)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://intervention.olivervogel.net](http://intervention.olivervogel.net)'
- en: Now, everything for the views and the form processing is ready; we can go on
    to the next step of our project.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有关于视图和表单处理的准备工作都已经完成；我们可以继续进行项目的下一步。
- en: Creating a secure form for file upload
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个安全的文件上传表单
- en: Now we should make an upload form for our image site. We must make a view file,
    which will be loaded over a controller.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该为我们的图片站点制作一个上传表单。我们必须制作一个视图文件，它将通过控制器加载。
- en: 'First, open up `app/routes.php`, remove the line starting with `Route::get()`
    that comes with Laravel, and add the following lines:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`app/routes.php`，删除以Laravel开头的`Route::get()`行，并添加以下行：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The key `'as'` defines the name of the route (like a shortcut). So if you make
    links to the routes, even if the URL changes for the route, your links to the
    application won't be broken. The `before` key defines what filters will be used
    before the action starts. You can define your own filters, or use the built-in
    ones. We set `csrf`, so the **CSRF** (**Cross-site Request Forgery**) checking
    will be done before the action starts. This way, you can prevent attackers from
    injecting unauthorized requests into your application. You can use multiple filters
    with the separator; for example, `filter1|filter2`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 键`'as'`定义了路由的名称（类似于快捷方式）。因此，如果您为路由创建链接，即使路由的URL发生变化，您的应用链接也不会断开。`before`键定义了在动作开始之前将使用哪些过滤器。您可以定义自己的过滤器，或者使用内置的过滤器。我们设置了`csrf`，因此在动作开始之前将进行**CSRF**（跨站点请求伪造）检查。这样，您可以防止攻击者向您的应用程序注入未经授权的请求。您可以使用分隔符与多个过滤器；例如，`filter1|filter2`。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also define the CSRF protection from controllers directly.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以直接从控制器定义CSRF保护。
- en: 'Now, let''s create our first method for the controller. Add a new file containing
    the following code and name it `ImageController.php` in `app/controllers/`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为控制器创建我们的第一个方法。添加一个新文件，其中包含以下代码，并将其命名为`ImageController.php`，放在`app/controllers/`中：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Our controller is RESTful; that's why our method index is named `getIndex()`.
    In this method, we are simply loading a view.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制器是RESTful的；这就是为什么我们的方法index被命名为`getIndex()`。在这个方法中，我们只是加载一个视图。
- en: 'Now let''s create a master page for the view using the following code. Save
    this file as `frontend_master.blade.php` in `app/views/`:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们使用以下代码为视图创建一个主页面。将此文件保存为`frontend_master.blade.php`，放在`app/views/`中：
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To add a `CSS` file (which we will create in the next steps), we use the `style()`
    method of the `HTML` class. And our masterpage yields a section named `content`,
    which will be filled with the `view files` sections.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个`CSS`文件（我们将在下一步中创建），我们使用`HTML`类的`style()`方法。我们的主页面产生一个名为`content`的部分，它将用`view
    files`部分填充。
- en: 'Now, let''s create our `view file` section by using the following code. Save
    this file as `index.blade.php` in the `app/views/tpl/`directory:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下代码创建我们的`view file`部分。将此文件保存为`index.blade.php`，放在`app/views/tpl/`目录中：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the first line of the preceding code, we told the Blade Engine that we will
    be using `frontend_master.blade.php` as the layout. This is done using the `@extends()`
    method in Laravel 4.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码的第一行中，我们告诉Blade引擎，我们将使用`frontend_master.blade.php`作为布局。这是使用Laravel 4中的`@extends()`方法完成的。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are coming from Laravel 3, `@layout` is renamed as `@extends`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您来自Laravel 3，`@layout`已更名为`@extends`。
- en: Benefiting from the `Form` class of Laravel, we generated an upload form with
    the `title` field and `upload` field. Unlike Laravel 3, to make a new upload form,
    we are not using `Form::open_for_files()` anymore. It's merged with the `open()`
    method, which accepts either a string or an array if you want to pass more than
    one parameter. We will be passing the action URL as well as telling it that it's
    an upload form, so we passed two parameters. The `url` key is to define where
    the form will be submitted. The `files` parameter is Boolean, and if it's set
    to `true`, it'll make the form an upload form, so we can work with files.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 借助Laravel的`Form`类，我们生成了一个带有`title`字段和`upload`字段的上传表单。与Laravel 3不同，要创建一个新的上传表单，我们不再使用`Form::open_for_files()`。它已与`open()`方法合并，该方法接受一个字符串或一个数组，如果要传递多个参数，则可以使用数组。我们将传递动作URL以及告诉它这是一个上传表单，因此我们传递了两个参数。`url`键用于定义表单将被提交的位置。`files`参数是布尔值，如果设置为`true`，它将使表单成为上传表单，因此我们可以处理文件。
- en: To secure the form and to prevent unwanted form submission attempts, we will
    be needing a CSRF key `hidden` in our form. Thanks to Laravel's `Form` class,
    it's generated in the form automatically, right after the form opening tag. You
    can check it by looking at the source code of the generated form.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护表单并防止不必要的表单提交尝试，我们需要在表单中添加一个CSRF密钥`hidden`。多亏了Laravel的`Form`类，它会在表单打开标签后自动生成。您可以通过查看生成的表单的源代码来检查它。
- en: 'The hidden autogenerated CSRF form element looks as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的隐藏CSRF表单元素如下所示：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now let''s tidy up the form a bit. This is not directly related to our project,
    but just for the look. Save the `styles.css` file in `public/css/` (the path we
    defined on the master page):'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们稍微整理一下表单。这与我们的项目没有直接关系，只是为了外观。将`styles.css`文件保存在`public/css/`（我们在主页面上定义的路径）中：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We've styled the body by giving it 60 percent width, making it center-aligned,
    and giving it a grayish background. We also formatted `h2` and `h3` messages with
    `success` and `error` classes, and `forms`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将其宽度设置为60％，使其居中对齐，并给它一个灰色的背景来样式化主体。我们还使用`success`和`error`类以及`forms`格式化了`h2`和`h3`消息。
- en: 'After the styling, the form will look as shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在样式化之后，表单将如下截图所示：
- en: '![Creating a secure form for file upload](graphics/2111OS_03_01.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![创建安全的文件上传表单](graphics/2111OS_03_01.jpg)'
- en: Now that our form is ready, we are ready to progress to the next step of the
    project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的表单已经准备好了，我们准备进入项目的下一步。
- en: Validating and processing the form
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证和处理表单
- en: 'In this section, we are going to validate the submitted form and make sure
    that the required fields are present and the submitted file is an image. Then
    we will upload the image to our server, process the image, create the thumbnail,
    and save the image information to the database as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将验证提交的表单，并确保必填字段存在，并且提交的文件是一张图片。然后我们将上传图片到我们的服务器，处理图片，创建缩略图，并将图片信息保存到数据库中，如下所示：
- en: 'First, we need to define the form validation rules. We prefer adding such values
    to the related model, so the rules become reusable, and this prevents the code
    from becoming bloated. To do this, add the following code in the `photo.php` file
    in the `app/models/` directory (the model that we generated earlier in this chapter)
    inside the class definition before the last curly bracket(`}`):'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要定义表单验证规则。我们更喜欢将这些值添加到相关模型中，这样规则就可以重复使用，这可以防止代码变得臃肿。为此，请在`app/models/`目录中的`photo.php`文件中添加以下代码（在本章前面生成的模型中）类定义的最后一个右花括号（`}`）之前：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We set the variable as `public`, so it can be used outside the model file, and
    we set it to static, so we can directly access the variable.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将变量设置为`public`，这样它就可以在模型文件之外使用，并将其设置为静态，这样我们就可以直接访问变量。
- en: We want both `title` and `image` to be mandatory, and `title` should have at
    least three characters. Also, we want to check MIME types of the `image` column
    and make sure that it's an image.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望`title`和`image`都是必填的，而`title`应至少包含三个字符。此外，我们希望检查`image`列的MIME类型，并确保它是一张图片。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Laravel's MIME-type checking requires the `Fileinfo` extension to be installed.
    So make sure it's enabled in your PHP configuration.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的MIME类型检查需要安装`Fileinfo`扩展。因此，请确保在您的PHP配置中启用它。
- en: 'Now we need the controller''s `post` method to process the form. Add this method
    in the `ImageController.php` file in `app/controllers/` before the last curly
    bracket(`}`):'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要控制器的`post`方法来处理表单。在`app/controllers/`中的`ImageController.php`文件中添加此方法，放在最后一个右花括号（`}`）之前：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Let's dig the code one by one.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐行查看代码。
- en: First, we made a form validation and called our validation rules from the model
    that we've generated via `Photo::$upload_rules`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们进行了表单验证，并从我们通过`Photo::$upload_rules`生成的模型中调用了我们的验证规则。
- en: Then we've salted (added additional random characters for security) the filename
    and made the filename URL-friendly. First, we get the uploaded filename with the
    getClientOriginalName() method, then get the extension with the getClientOriginalExtension()
    method. We salted the filename with an eight character-long random string, which
    we gained by the random() method of the STR class. Lastly, we made the filename
    URL-friendly with Laravel's built-in slug() method of the STR class.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们对文件名进行了加盐处理（添加额外的随机字符以增强安全性），并使文件名适合URL。首先，我们使用getClientOriginalName()方法获取上传的文件名，然后使用getClientOriginalExtension()方法获取扩展名。我们使用STR类的random()方法获得一个八个字符长的随机字符串对文件名进行了加盐处理。最后，我们使用Laravel的内置slug()方法使文件名适合URL。
- en: After all the variables are ready, we first uploaded the file to the server
    with the move() method, which takes two parameters. The first parameter is the
    path to which the file is going to be transferred, the second parameter is the
    filename of the uploaded file.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有变量准备就绪后，我们首先使用move()方法将文件上传到服务器，该方法需要两个参数。第一个参数是文件将要传输到的路径，第二个参数是上传文件的文件名。
- en: After uploading, we created a static thumbnail for the uploaded image. For this,
    we benefited from Intervention, an image processing class we've implemented earlier.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传后，我们为上传的图像创建了一个静态缩略图。为此，我们利用了之前实现的图像处理类Intervention。
- en: Lastly, if everything goes okay, we add the title and image filenames to the
    database and get the ID with the insertGetId() method of Fluent Query Builder,
    which inserts the row first and returns insert_id of the column. We could also
    create the row with Eloquent ORM by setting the create() method to a variable
    and get the id_column name such as $create->id.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果一切顺利，我们将标题和图像文件名添加到数据库，并使用Fluent Query Builder的insertGetId()方法获取ID，该方法首先插入行，然后返回列的insert_id。我们还可以通过将create()方法设置为变量并获取id_column名称，如$create->id，使用Eloquent
    ORM创建行。
- en: After everything is okay and we get `insert_id`, we redirect the user to a new
    page that will show thumbnails, full-image links, and a forum thumbnail **BBCode**,
    which we will generate in the next sections.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一切都正常并且我们获得了`insert_id`之后，我们将用户重定向到一个新页面，该页面将显示缩略图、完整图像链接和一个论坛缩略图**BBCode**，我们将在接下来的部分中生成。
- en: Showing the image with a user interface
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用用户界面显示图像
- en: 'Now, we need to make a new view and method from the controller to show the
    information of the image uploaded. This can be done as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要从控制器创建一个新的视图和方法来显示上传的图像的信息。可以按以下方式完成：
- en: 'First, we need to define a `GET` route for the controller. For this, open your
    file `routes.php` in the `app` folder and add the following codes:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为控制器定义一个`GET`路由。为此，打开`app`文件夹中的`routes.php`文件，并添加以下代码：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We defined an `id` variable on the route, and with the `where()` method, using
    regular expression, we filtered it first hand. So we don't need to worry about
    filtering the ID field, whether it's a natural number or not.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在路由上定义了一个`id`变量，并使用正则表达式的`where()`方法首先进行了过滤。因此，我们不需要担心过滤ID字段，无论它是自然数还是其他。
- en: 'Now, let''s create our controller method. Add the following code inside `ImageController.php`
    in `app/controllers/` before the last curly bracket (`}`):'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的控制器方法。在`app/controllers/`中的`ImageController.php`中最后一个右花括号(`}`)之前添加以下代码：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: First, we looked for the image with the `find()` method of Eloquent ORM. If
    it returns the value as false, that means there is a row found. So we can simply
    check whether there is a result or not with a simple `if` clause. If there is
    a result, we will load our view with the found image info as a variable named
    `$image`, using the `with()` method. If no values are found, we return to the
    index page with an error message.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用Eloquent ORM的`find()`方法查找图像。如果它返回false，那意味着找到了一行。因此，我们可以简单地使用一个简单的`if`子句来检查是否有结果。如果有结果，我们将使用`with()`方法将找到的图像信息作为名为`$image`的变量加载到我们的视图中。如果没有找到值，我们将返回到索引页面并显示错误消息。
- en: 'Now let''s create the template file containing the following code. Save this
    file as `permalink.blade.php` in `app/views/tpl/`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建包含以下代码的模板文件。将此文件保存为`permalink.blade.php`，放在`app/views/tpl/`中：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You should be familiar with most methods used in this template by now. There
    is a new method called `entities()` of the `HTML` class, which actually is `htmlentities()`
    of raw PHP, but with some pre-checks and as Laravel's way.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该对此模板中使用的大多数方法都很熟悉了。还有一个名为`entities()`的新方法，属于`HTML`类，实际上是原始PHP的`htmlentities()`，但带有一些预检查，并且是Laravel的方式。
- en: Also, because we've returned the `$image` variable to the view (which is the
    database row object that we've gained using Eloquent), we can use it directly
    as `$image->columnName` in the view.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，因为我们将`$image`变量返回到视图中（这是我们使用Eloquent直接获得的数据库行对象），我们可以在视图中直接使用`$image->columnName`。
- en: 'This will produce a view as shown in the following image:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个视图，如下图所示：
- en: '![Showing the image with a user interface](graphics/2111OS_03_02.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![使用用户界面显示图像](graphics/2111OS_03_02.jpg)'
- en: We have added a permalink feature for our project, but what if we want to show
    all the images? For that, we need an `'all pages'` section in our system.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为项目添加了永久链接功能，但是如果我们想要显示所有图像怎么办？为此，我们需要在系统中添加一个`'all pages'`部分。
- en: Listing images
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出图像
- en: 'In this section, we are going to create an `''all images''` section in our
    system, which will have a page navigation (pagination) system. There are a few
    steps to be followed as shown:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在系统中创建一个`'all images'`部分，该部分将具有页面导航（分页）系统。如下所示，需要遵循一些步骤：
- en: 'First, we need to define its URL from our `route.php` file. For this, open
    `app/routes.php` and add the following lines:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要从我们的`route.php`文件中定义其URL。为此，打开`app/routes.php`并添加以下行：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, we need a method named `getAll()` (there is a `get` method at the start
    because it will be a RESTful controller) to get values and load the view. To do
    this, open your `app/controllers/ImageController.php` and add these codes before
    the last curly bracket (}):'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个名为`getAll()`的方法（因为它将是一个RESTful控制器，所以在开头有一个`get`方法）来获取值并加载视图。为此，请打开`app/controllers/ImageController.php`，并在最后一个右花括号（}）之前添加以下代码：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, we first got all the images from the database using the `paginate()` method,
    which will allow us to get the pagination links easily. After that, we loaded
    the view for the user with the images data with pagination.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`paginate()`方法从数据库中获取了所有图像，这将使我们能够轻松获取分页链接。之后，我们加载了用户的视图，并显示了带有分页的图像数据。
- en: 'To view this properly, we need a view file. Save the following code in a file
    named `all_image.blade.php` in the `app/views/tpl/` directory:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要正确查看这个，我们需要一个视图文件。将以下代码保存在名为`all_image.blade.php`的文件中，放在`app/views/tpl/`目录中：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We first extend the `frontend_master.blade.php` file with our content section.
    As for the content section, we first check whether any rows are returned. If so,
    then we loop them all in list item tags (`<li>`) with their permalinks. The `links()`
    method that came with the `paginate` class will create the pagination for us.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先用我们的内容部分扩展了`frontend_master.blade.php`文件。至于内容部分，我们首先检查是否返回了任何行。如果是，那么我们将它们全部循环在列表项标签（`<li>`）中，并附上它们的永久链接。`paginate`类提供的`links()`方法将为我们创建分页。
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can switch the pagination template from `app/config/view.php`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从`app/config/view.php`切换分页模板。
- en: If no rows have returned, that means there are no images (yet), so we show a
    warning message with a link to the new upload page (which is the index page in
    our case).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有返回行，那意味着还没有图像，因此我们会显示一个警告消息，并附上一个指向新上传页面的链接（在我们的情况下是首页）。
- en: What if a person uploads an image that is not allowed or not safe for work?
    You would not like to have them on your website, right? So there should be an
    image deleting feature on your website.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人上传了不允许或不安全的工作图像，怎么办？您肯定不希望它们出现在您的网站上，对吧？因此，您的网站应该有一个图像删除功能。
- en: Deleting the image from the database and server
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库和服务器中删除图像
- en: We would like to have a delete feature in our script, using which we will delete
    the image both from the database and from its uploaded folder. This process is
    quite easy with Laravel.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在我们的脚本中有一个删除功能，使用该功能我们将从数据库和上传的文件夹中删除图像。使用Laravel，这个过程非常简单。
- en: 'First, we need to create a new route for the action. To do this, open `app/routes.php`
    and add the following lines:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为该操作创建一个新路由。为此，请打开`app/routes.php`，并添加以下行：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we need to define the controller method `getDelete($id)` inside `ImageController`.
    To do this, open `app/controllers/ImageController.php` and add the following code
    above the last curly bracket (`}`):'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在`ImageController`中定义控制器方法`getDelete($id)`。为此，请打开`app/controllers/ImageController.php`，并在最后一个右花括号（`}`）之前添加以下代码：
- en: '[PRE28]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s understand the code:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解这段代码：
- en: First, we look at our database, and if we have an image with a given ID already
    with the `find()` method of Eloquent ORM, we will store it with a variable called
    `$image`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们查看我们的数据库，如果我们已经有了给定ID的图像，则使用Eloquent ORM的`find()`方法将其存储在名为`$image`的变量中。
- en: If the value of the `$image` is not false, there is an image matching the image
    in our database. Then, we delete the file with the `delete()` method of the File
    class. Alternatively, you can also use the unlink() method of raw PHP.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`$image`的值不为false，则数据库中有与图像匹配的图像。然后，我们使用File类的`delete()`方法删除文件。或者，您也可以使用原始PHP的unlink()方法。
- en: After the files are deleted from the file server, we delete the image's information
    row from the database. To do this, we are using the `delete()` method of Eloquent
    ORM.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件从文件服务器中删除后，我们将从数据库中删除图像的信息行。为此，我们使用了Eloquent ORM的`delete()`方法。
- en: If everything goes smoothly, we should redirect back to the main page with a
    success message saying the image is deleted successfully.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该重定向回主页，并显示成功消息，说明图像已成功删除。
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In practical application, you should have a backend interface for such actions.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中，您应该为此类操作创建一个后端界面。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've created a simple image sharing website with Laravel's
    built-in functions. We've learned how to validate our forms, how to work with
    files and check their MIME types, and set custom configuration values. We've learned
    more about database methods both with Fluent and Eloquent ORM. Also, for image
    processing, we've installed a third-party library from [packagist.org](http://packagist.org)
    using Composer and learned how to update them. We've also listed images with the
    page navigation feature and learned to delete files from the server. In the next
    chapter, we will be building a personal blog site with authentication and a members-only
    area, and we will assign blog posts to the author(s).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Laravel的内置功能创建了一个简单的图像分享网站。我们学会了如何验证我们的表单，如何处理文件并检查它们的MIME类型，并设置自定义配置值。我们还学习了使用Fluent和Eloquent
    ORM的数据库方法。此外，对于图像处理，我们使用Composer从[packagist.org](http://packagist.org)安装了第三方库，并学会了如何更新它们。我们还使用页面导航功能列出了图像，并学会了如何从服务器中删除文件。在下一章中，我们将构建一个带有身份验证和仅限会员区域的个人博客网站，并将博客文章分配给作者。
