["```php\n// /repo/ch05/php8_oop_diff_static.php\nclass Test {\n\u00a0\u00a0\u00a0\u00a0public function notStatic() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return __CLASS__ . PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0}\n}\necho Test::notStatic();\n```", "```php\nroot@php8_tips_php7 [ /repo/ch05 ]# \nphp php8_oop_diff_static.php\nPHP Deprecated:\u00a0\u00a0Non-static method Test::notStatic() should not be called statically in /repo/ch05/php8_oop_diff_static.php on line 11\nTest\n```", "```php\nroot@php8_tips_php8 [ /repo/ch05 ]#\nphp php8_oop_diff_static.php\nPHP Fatal error:\u00a0\u00a0Uncaught Error: Non-static method Test::notStatic() cannot be called statically in /repo/ch05/php8_oop_diff_static.php:11\n```", "```php\n    // /repo/ch05/php8_oop_diff_array_key_exists.php\n    $obj = new class () { public $var = 'OK.'; };\n    ```", "```php\n    // not all code is shown\n    $default = 'DEFAULT';\n    echo (isset($obj->var)) \n    \u00a0\u00a0\u00a0\u00a0? $obj->var : $default;\n    echo (property_exists($obj,'var')) \n    \u00a0\u00a0\u00a0\u00a0? $obj->var : $default;\n    echo (array_key_exists('var',$obj)) \n    \u00a0\u00a0\u00a0\u00a0? $obj->var : $default;\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch05 ]# \nphp php8_oop_diff_array_key_exists.php\nOK.OK.OK.\n```", "```php\nroot@php8_tips_php8 [ /repo/ch05 ]# \nphp php8_oop_diff_array_key_exists.php\nOK.OK.PHP Fatal error:\u00a0\u00a0Uncaught TypeError: array_key_exists(): Argument #2 ($array) must be of type array, class@anonymous given in /repo/ch05/php8_oop_diff_array_key_exists.php:10\n```", "```php\n    namespace Migration;\n    class OopBreakScan extends Base {\n    \u00a0\u00a0\u00a0\u00a0public static function scanMagicAutoloadFunction(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string $contents, array &$message) : bool {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$found\u00a0\u00a0= 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$found += (stripos($contents, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'function __autoload(') !== FALSE);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$message[] = ($found)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? Base::ERR_MAGIC_AUTOLOAD\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: sprintf(Base::OK_PASSED,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__FUNCTION__);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (bool) $found;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// remaining methods not shown\n    ```", "```php\n    // /repo/ch05/php7_autoload_function.php\n    function __autoLoad($class) {\n    \u00a0\u00a0\u00a0\u00a0$fn = __DIR__ . '/../src/'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. str_replace('\\\\', '/', $class)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. '.php';\n    \u00a0\u00a0\u00a0\u00a0require_once $fn;\n    }\n    ```", "```php\n    use Migration\\OopBreakScan;\n    $contents = file_get_contents(__FILE__);\n    $message\u00a0\u00a0= [];\n    OopBreakScan::\n    \u00a0\u00a0\u00a0\u00a0scanMagicAutoloadFunction($contents, $message);\n    var_dump($message);\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch05 ]# \nphp php7_autoload_function.php\n/repo/ch05/php7_autoload_function.php:23:\narray(1) {\n\u00a0\u00a0[0] =>\u00a0\u00a0string(96) \"WARNING: the \"__autoload()\" function is removed in PHP 8: replace with \"spl_autoload_register()\"\"\n}\n```", "```php\nroot@php8_tips_php8 [ /repo/ch05 ]# \nphp php7_autoload_function.php \nPHP Fatal error:\u00a0\u00a0__autoload() is no longer supported, use spl_autoload_register() instead in /repo/ch05/php7_autoload_function.php on line 4\n```", "```php\n    // /repo/src/Server/Autoload/Loader.php\n    namespace Server\\Autoload;\n    class Loader {\n    \u00a0\u00a0\u00a0\u00a0const DEFAULT_SRC = __DIR__ . '/../..';\n    \u00a0\u00a0\u00a0\u00a0public $src_dir = '';\n    \u00a0\u00a0\u00a0\u00a0public function __construct($src_dir = NULL) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->src_dir = $src_dir \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0?? realpath(self::DEFAULT_SRC);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spl_autoload_register([$this, 'autoload']);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function autoload($class) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fn = str_replace('\\\\', '/', $class);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fn = $this->src_dir . '/' . $fn . '.php';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$fn = str_replace('//', '/', $fn);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0require_once($fn);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n// /repo/ch05/php7_spl_spl_autoload_register.php\ntry {\n\u00a0\u00a0\u00a0\u00a0spl_autoload_register('does_not_exist', TRUE);\n\u00a0\u00a0\u00a0\u00a0$data = ['A' => [1,2,3],'B' => [4,5,6],'C' => [7,8,9]];\n\u00a0\u00a0\u00a0\u00a0$response = new \\Application\\Strategy\\JsonResponse($data);\n\u00a0\u00a0\u00a0\u00a0echo $response->render();\n} catch (Exception $e) {\n\u00a0\u00a0\u00a0\u00a0echo \"A program error has occurred\\n\";\n}\n```", "```php\nroot@php8_tips_php7 [ /repo/ch05 ]# \nphp php7_spl_spl_autoload_register.php \nA program error has occurred\n```", "```php\nroot@php8_tips_php8 [ /repo/ch05 ]# \nphp php7_spl_spl_autoload_register.php \nPHP Fatal error:\u00a0\u00a0Uncaught TypeError: spl_autoload_register(): Argument #1 ($callback) must be a valid callback, no array or string given in /repo/ch05/php7_spl_spl_autoload_register.php:12\n```", "```php\n// /repo/ch05/php8_spl_spl_autoload_register.php\ntry {\n\u00a0\u00a0\u00a0\u00a0spl_autoload_register('does_not_exist', TRUE);\n\u00a0\u00a0\u00a0\u00a0$data = ['A' => [1,2,3],'B' => [4,5,6],'C' => [7,8,9]];\n\u00a0\u00a0\u00a0\u00a0$response = new \\Application\\Strategy\\JsonResponse($data);\n\u00a0\u00a0\u00a0\u00a0echo $response->render();\n} catch (Throwable $e) {\n\u00a0\u00a0\u00a0\u00a0echo \"A program error has occurred\\n\";\n}\n```", "```php\n    // /repo/ch05/php8_oop_bc_break_construct.php\n    class Text {\n    \u00a0\u00a0\u00a0\u00a0public $fh = '';\n    \u00a0\u00a0\u00a0\u00a0public const ERROR_FN = 'ERROR: file not found';\n    \u00a0\u00a0\u00a0\u00a0public function text(string $fn) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!file_exists($fn))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new Exception(self::ERROR_FN);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->fh = new SplFileObject($fn, 'r');\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function getText() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this->fh->fpassthru();\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    $fn\u00a0\u00a0\u00a0= __DIR__ . '/../sample_data/gettysburg.txt';\n    $text = new Text($fn);\n    echo $text->getText();\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch05 ]# \n    php php8_bc_break_construct.php\n    PHP Deprecated:\u00a0\u00a0Methods with the same name as their class will not be constructors in a future version of PHP; Text has a deprecated constructor in /repo/ch05/php8_bc_break_construct.php on line 4\n    Fourscore and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty and dedicated to the proposition that all men are created equal. ... <remaining text not shown>\n    ```", "```php\n    root@php8_tips_php8 [ /repo/ch05 ]# php php8_bc_break_construct.php \n    PHP Fatal error:\u00a0\u00a0Uncaught Error: Call to a member function fpassthru() on string in /repo/ch05/php8_bc_break_construct.php:16\n    ```", "```php\n    // /repo/src/Php7/Connector/ConnectInterface.php\n    namespace Php7\\Connector;\n    interface ConnectInterface {\n    \u00a0\u00a0\u00a0\u00a0public function query(string $sql) : array;\n    }\n    ```", "```php\n    // /repo/src/Php7/Connector/Base.php\n    namespace Php7\\Connector;\n    abstract class Base implements ConnectInterface {\n    \u00a0\u00a0\u00a0\u00a0const CONN_TERMINATED = 'Connection Terminated';\n    \u00a0\u00a0\u00a0\u00a0public $conn = NULL;\n    \u00a0\u00a0\u00a0\u00a0public function __destruct() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$message = get_class($this)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. ':' . self::CONN_TERMINATED;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0error_log($message);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    // /repo/src/Php7/Connector/ConnectPdo.php\n    namespace Php7\\Connector;\n    use PDO;\n    class ConnectPdo extends Base {\n    \u00a0\u00a0\u00a0\u00a0public function __construct(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string $dsn, string $usr, string $pwd) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->conn = new PDO($dsn, $usr, $pwd);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function query(string $sql) : array {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$stmt = $this->conn->query($sql);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    // /repo/src/Php7/Connector/ConnectMysqli.php\n    namespace Php7\\Connector;\n    class ConnectMysqli extends Base {\n    \u00a0\u00a0\u00a0\u00a0public function __construct(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string $db, string $usr, string $pwd) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->conn = mysqli_connect('localhost', \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$usr, $pwd, $db) \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or die(\"Unable to Connect\\n\");\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function query(string $sql) : array {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$result = mysqli_query($this->conn, $sql);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return mysqli_fetch_all($result, MYSQLI_ASSOC);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    // /repo/ch05/php8_bc_break_destruct.php\n    include __DIR__ . '/../vendor/autoload.php';\n    use Php7\\Connector\\ {ConnectPdo,ConnectMysqli};\n    $db\u00a0\u00a0= 'test';\n    $usr = 'fake';\n    $pwd = 'xyz';\n    $dsn = 'mysql:host=localhost;dbname=' . $db;\n    $sql = 'SELECT event_name, event_date FROM events';\n    ```", "```php\n    $ptn = \"%2d : %s : %s\\n\";\n    try {\n    \u00a0\u00a0\u00a0\u00a0$conn = new ConnectPdo($dsn, $usr, $pwd);\n    \u00a0\u00a0\u00a0\u00a0var_dump($conn->query($sql));\n    } catch (Throwable $t) {\n    \u00a0\u00a0\u00a0\u00a0printf($ptn, __LINE__, get_class($t), \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$t->getMessage());\n    }\n    $conn = new ConnectMysqli($db, $usr, $pwd);\n    var_dump($conn->query($sql));\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch05 ]# \n    php php8_bc_break_destruct.php \n    15 : PDOException : SQLSTATE[28000] [1045] Access denied for user 'fake'@'localhost' (using password: YES)\n    PHP Warning:\u00a0\u00a0mysqli_connect(): (HY000/1045): Access denied for user 'fake'@'localhost' (using password: YES) in /repo/src/Php7/Connector/ConnectMysqli.php on line 8\n    Unable to Connect\n    Php7\\Connector\\ConnectMysqli:Connection Terminated\n    ```", "```php\n    root@php8_tips_php8 [ /repo/ch05 ]# \n    php php8_bc_break_destruct.php \n    15 : PDOException : SQLSTATE[28000] [1045] Access denied for user 'fake'@'localhost' (using password: YES)\n    PHP Warning:\u00a0\u00a0mysqli_connect(): (HY000/1045): Access denied for user 'fake'@'localhost' (using password: YES) in /repo/src/Php7/Connector/ConnectMysqli.php on line 8\n    Unable to Connect\n    ```", "```php\ninterface Stringable {\n\u00a0\u00a0\u00a0public function __toString(): string;\n}\n```", "```php\n    // /repo/ch05/php8_bc_break_magic_to_string.php\n    class Test {\n    \u00a0\u00a0\u00a0\u00a0public $fname = 'Fred';\n    \u00a0\u00a0\u00a0\u00a0public $lname = 'Flintstone';\n    \u00a0\u00a0\u00a0\u00a0public function __toString() : string {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this->fname . ' ' . $this->lname;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    $test = new Test;\n    $reflect = new ReflectionObject($test);\n    echo $reflect;\n    ```", "```php\nroot@php8_tips_php7 [ /repo/ch05 ]# \nphp php8_bc_break_magic_to_string.php\nObject of class [ <user> class Test ] {\n\u00a0\u00a0@@ /repo/ch05/php8_bc_break_magic_to_string.php 3-12\n```", "```php\nroot@php8_tips_php8 [ /repo/ch05 ]# \nphp php8_bc_break_magic_to_string.php\nObject of class [ <user> class Test implements Stringable ] {\n\u00a0\u00a0@@ /repo/ch05/php8_bc_break_magic_to_string.php 3-12\n```", "```php\n    // /repo/ch05/php8_serialization.php\n    class Test\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0public $name = 'Doug';\n    \u00a0\u00a0\u00a0\u00a0private $key = 12345;\n    \u00a0\u00a0\u00a0\u00a0protected $status = ['A','B','C'];\n    }\n    ```", "```php\n    $test = new Test();\n    $str = serialize($test);\n    echo $str . \"\\n\";\n    ```", "```php\n    O:4:\"Test\":3:{s:4:\"name\";s:4:\"Doug\";s:9:\"Testkey\"; i:12345;\n    s:9:\"*status\";a:3:{i:0;s:1:\"A\";i:1;s:1:\"B\";i:2;s:1:\"C\";}}\n    ```", "```php\n    $obj = unserialize($str);\n    var_dump($test, $obj);\n    ```", "```php\n    // /repo/ch05/php8_serialization_sleep.php\n    class Test\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0public $name = 'Doug';\n    \u00a0\u00a0\u00a0\u00a0protected $key = 12345;\n    \u00a0\u00a0\u00a0\u00a0protected $password = '$2y$10$ux07vQNSA0ctbzZcZNA'\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0. 'lxOa8hi6kchJrJZzqWcxpw/XQUjSNqacx.';\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function __sleep() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ['name','key'];\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    $test = new Test();\n    $str = serialize($test)\n    echo $str . \"\\n\";\n    ```", "```php\n    O:4:\"Test\":2:{s:4:\"name\";s:4:\"Doug\";s:6:\"*key\";i:12345;}\n    ```", "```php\n    class Test {\n    \u00a0\u00a0\u00a0\u00a0public $name = 'Doug';\n    \u00a0\u00a0\u00a0\u00a0public function __sleep() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ['name', 'missing'];\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    echo \"Test instance before serialization:\\n\";\n    $test = new Test();\n    var_dump($test);\n    ```", "```php\n    echo \"Test instance after serialization:\\n\";\n    $stored = serialize($test);\n    $restored = unserialize($stored);\n    var_dump($restored);\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch05 ]#\n    php php8_bc_break_sleep.php\n    Test instance before serialization:\n    /repo/ch05/php8_bc_break_sleep.php:13:\n    class Test#1 (1) {\n    \u00a0\u00a0public $name =>\u00a0\u00a0string(4) \"Doug\"\n    }\n    Test instance after serialization:\n    PHP Notice:\u00a0\u00a0serialize(): \"missing\" returned as member variable from __sleep() but does not exist in /repo/ch05/php8_bc_break_sleep.php on line 16\n    class Test#2 (2) {\n    \u00a0\u00a0public $name =>\u00a0\u00a0string(4) \"Doug\"\n    \u00a0\u00a0public $missing =>\u00a0\u00a0NULL\n    }\n    ```", "```php\n    root@php8_tips_php8 [ /repo/ch05 ]# php php8_bc_break_sleep.php \n    Test instance before serialization:\n    object(Test)#1 (1) {\n    \u00a0\u00a0[\"name\"]=>\u00a0\u00a0string(4) \"Doug\"\n    }\n    Test instance after serialization:\n    PHP Warning:\u00a0\u00a0serialize(): \"missing\" returned as member variable from __sleep() but does not exist in /repo/ch05/php8_bc_break_sleep.php on line 16\n    object(Test)#2 (1) {\n    \u00a0\u00a0[\"name\"]=>\u00a0\u00a0string(4) \"Doug\"\n    }\n    ```", "```php\n    // /repo/ch05/php8_serialization_wakeup.php\n    class Gettysburg {\n    \u00a0\u00a0\u00a0\u00a0public $fn = __DIR__ . '/gettysburg.txt';\n    \u00a0\u00a0\u00a0\u00a0public $obj = NULL;\n    \u00a0\u00a0\u00a0\u00a0public function __construct() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->obj = new SplFileObject($this->fn, 'r');\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function getText() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->obj->rewind();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this->obj->fpassthru();\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    $old = new Gettysburg();\n    echo $old->getText();\n    ```", "```php\n    PHP Fatal error:\u00a0\u00a0Uncaught Exception: Serialization of 'SplFileObject' is not allowed in /repo/ch05/php8_serialization_wakeup.php:19\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function __sleep() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ['fn'];\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    $str = serialize($old);\n    $new = unserialize($str);\n    echo $new->getText();\n    ```", "```php\n    PHP Fatal error:\u00a0\u00a0Uncaught Error: Call to a member function rewind() on null in /repo/ch05/php8_serialization_wakeup.php:13\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function __wakeup() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0self::__construct();\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\ninterface Serializable {\n\u00a0\u00a0\u00a0\u00a0public serialize () : string|null\n\u00a0\u00a0\u00a0\u00a0public unserialize (string $serialized) : void\n}\n```", "```php\n    // /repo/ch05/php8_bc_break_serializable.php\n    class A implements Serializable {\n    \u00a0\u00a0\u00a0\u00a0private $a = 'A';\n    \u00a0\u00a0\u00a0\u00a0private $b = 'B';\n    \u00a0\u00a0\u00a0\u00a0private $u = NULL;\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function serialize() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->u = new DateTime();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return serialize(get_object_vars($this));\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0public function unserialize($payload) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$vars = unserialize($payload);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach ($vars as $key => $val)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->$key = $val;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    $a1 = new A();\n    var_dump($a1);\n    ```", "```php\n    object(A)#1 (3) {\n    \u00a0\u00a0[\"a\":\"A\":private]=> string(1) \"A\"\n    \u00a0\u00a0[\"b\":\"A\":private]=> string(1) \"B\"\n    \u00a0\u00a0[\"u\":\"A\":private]=> NULL\n    }\n    ```", "```php\n    $str = serialize($a1);\n    $a2 = unserialize($str);\n    var_dump($a2);\n    ```", "```php\n    object(A)#3 (3) {\n    \u00a0\u00a0[\"a\":\"A\":private]=> string(1) \"A\"\n    \u00a0\u00a0[\"b\":\"A\":private]=> string(1) \"B\"\n    \u00a0\u00a0[\"u\":\"A\":private]=> object(DateTime)#4 (3) {\n    \u00a0\u00a0\u00a0\u00a0[\"date\"]=> string(26) \"2021-02-12 05:35:10.835999\"\n    \u00a0\u00a0\u00a0\u00a0[\"timezone_type\"]=> int(3)\n    \u00a0\u00a0\u00a0\u00a0[\"timezone\"]=> string(3) \"UTC\"\n    \u00a0\u00a0}\n    }\n    ```", "```php\n    // /repo/ch05/php8_bc_break_serialization.php\n    class Test extends ArrayObject {\n    \u00a0\u00a0\u00a0\u00a0protected $id = 12345;\n    \u00a0\u00a0\u00a0\u00a0public $name = 'Doug';\n    \u00a0\u00a0\u00a0\u00a0private $key = '';\n    \u00a0\u00a0\u00a0\u00a0public function __construct() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->key = bin2hex(random_bytes(8));\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function getKey() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $this->key;\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function __serialize() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ['id' => $this->id, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'name' => $this->name];\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```php\n    \u00a0\u00a0\u00a0\u00a0public function __unserialize($data) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->id = $data['id'];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->name = $data['name'];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->__construct();\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    $test = new Test();\n    echo \"\\nOld Key: \" . $test->getKey() . \"\\n\";\n    ```", "```php\n    Old Key: mXq78DhplByDWuPtzk820g==\n    ```", "```php\n    $str = serialize($test);\n    echo $str . \"\\n\";\n    ```", "```php\n    O:4:\"Test\":2:{s:2:\"id\";i:12345;s:4:\"name\";s:4:\"Doug\";}\n    ```", "```php\n    $obj = unserialize($str);\n    echo \"New Key: \" . $obj->getKey() . \"\\n\";\n    ```", "```php\n    New Key: kDgU7FGfJn5qlOKcHEbyqQ==\n    ```", "```php\n    try {\n    \u00a0\u00a0\u00a0\u00a0$pdo = new PDO($dsn, $usr, $pwd, $opts);\n    } catch (PDOException $p) {\n    \u00a0\u00a0\u00a0\u00a0error_log('Database Error: ' . $p->getMessage());\n    } catch (Throwable $t) {\n    \u00a0\u00a0\u00a0\u00a0error_log('Unknown Error: ' . $t->getMessage());\n    }\n    ```", "```php\n    try {\n    \u00a0\u00a0\u00a0\u00a0$pdo = new PDO($dsn, $usr, $pwd, $opts);\n    } catch (Throwable $t) {\n    \u00a0\u00a0\u00a0\u00a0error_log('Unknown Error: ' . $t->getMessage());\n    } catch (PDOException $p) {\n    \u00a0\u00a0\u00a0\u00a0error_log('Database Error: ' . $p->getMessage());\n    }\n    ```", "```php\n    interface FactoryInterface {\n    \u00a0\u00a0\u00a0\u00a0public function make(array $arr): ArrayObject;\n    }\n    ```", "```php\n    class ArrTest extends ArrayObject {\n    \u00a0\u00a0\u00a0\u00a0const DEFAULT_TEST = 'This is a test';\n    }\n    ```", "```php\n    class ArrFactory implements FactoryInterface {\n    \u00a0\u00a0\u00a0\u00a0protected array $data;\n    \u00a0\u00a0\u00a0\u00a0public function make(array $data): ArrTest {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->data = $data;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return new ArrTest($this->data);\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```php\n    $factory = new ArrFactory();\n    $obj1 = $factory->make([1,2,3]);\n    $obj2 = $factory->make(['A','B','C']);\n    var_dump($obj1, $obj2);\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch05 ]# \n    php php8_variance_covariant.php\n    PHP Fatal error:\u00a0\u00a0Declaration of ArrFactory::make(array $data): ArrTest must be compatible with FactoryInterface::make(array $arr): ArrayObject in /repo/ch05/php8_variance_covariant.php on line 9\n    ```", "```php\n    root@php8_tips_php8 [ /repo/ch05 ]# \n    php php8_variance_covariant.php\n    object(ArrTest)#2 (1) {\n    \u00a0\u00a0[\"storage\":\"ArrayObject\":private]=>\n    \u00a0\u00a0array(3) {\n    \u00a0\u00a0\u00a0\u00a0[0]=>\u00a0\u00a0\u00a0\u00a0int(1)\n    \u00a0\u00a0\u00a0\u00a0[1]=>\u00a0\u00a0\u00a0\u00a0int(2)\n    \u00a0\u00a0\u00a0\u00a0[2]=>\u00a0\u00a0\u00a0\u00a0int(3)\n    \u00a0\u00a0}\n    }\n    object(ArrTest)#3 (1) {\n    \u00a0\u00a0[\"storage\":\"ArrayObject\":private]=>\n    \u00a0\u00a0array(3) {\n    \u00a0\u00a0\u00a0\u00a0[0]=>\u00a0\u00a0\u00a0\u00a0string(1) \"A\"\n    \u00a0\u00a0\u00a0\u00a0[1]=>\u00a0\u00a0\u00a0\u00a0string(1) \"B\"\n    \u00a0\u00a0\u00a0\u00a0[2]=>\u00a0\u00a0\u00a0\u00a0string(1) \"C\"\n    \u00a0\u00a0}\n    }\n    ```", "```php\n    // /repo/ch05/php8_variance_contravariant.php\n    class IterObj extends ArrayIterator {}\n    ```", "```php\n    abstract class Base {\n    \u00a0\u00a0\u00a0\u00a0public abstract function stringify(IterObj $it);\n    }\n    ```", "```php\n    class IterTest extends Base {\n    \u00a0\u00a0\u00a0\u00a0public function stringify(iterable $it) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return implode(',', \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0iterator_to_array($it)) . \"\\n\";\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    class IterObj extends ArrayIterator {}\n    ```", "```php\n    $test\u00a0\u00a0= new IterTest();\n    $objIt = new IterObj([1,2,3]);\n    $arrIt = new ArrayIterator(['A','B','C']);\n    echo $test->stringify($objIt);\n    echo $test->stringify($arrIt);\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch05 ]#\n    php php8_variance_contravariant.php\n    PHP Fatal error:\u00a0\u00a0Declaration of IterTest::stringify(iterable $it) must be compatible with Base::stringify(IterObj $it) in /repo/ch05/php8_variance_contravariant.php on line 11\n    ```", "```php\n    root@php8_tips_php8 [ /repo/ch05 ]# php php8_variance_contravariant.php\n    1,2,3\n    A,B,C\n    ```", "```php\n    // /repo/ch05/php7_spl_splfileobject.php\n    $fn = $_GET['fn'] ?? '';\n    if (!$fn || !file_exists($fn))\n    \u00a0\u00a0\u00a0\u00a0exit('Unable to locate file');\n    ```", "```php\n    $obj = new SplFileObject($fn, 'r');\n    $safe = '';\n    while ($line = $obj->fgetss()) $safe .= $line;\n    echo '<h1>Contents</h1><hr>' . $safe;\n    ```", "```php\n    <h1>This File is Infected</h1>\n    <script>alert('You Been Hacked');</script>\n    <img src=\"http://very.bad.site/hacked.php\" />\n    ```", "```php\n// /repo/ch05/php8_spl_splfileobject.php\n$fn = $_GET['fn'] ?? '';\nif (!$fn || !file_exists($fn))\n\u00a0\u00a0\u00a0\u00a0exit('Unable to locate file');\n$obj = new SplFileObject($fn, 'r');\n$safe = '';\nwhile ($line = $obj->fgets())\n\u00a0\u00a0\u00a0\u00a0$safe .= strip_tags($line);\necho '<h1>Contents</h1><hr>' . $safe;\n```", "```php\n    array(20) {\n    \u00a0\u00a0[0] =>\u00a0\u00a0array(1) {\n    \u00a0\u00a0\u00a0\u00a0[177000000000] =>\u00a0\u00a0\u00a0\u00a0string(10) \"Bezos,Jeff\"\n    \u00a0\u00a0}\n    \u00a0\u00a0[1] =>\u00a0\u00a0array(1) {\n    \u00a0\u00a0\u00a0\u00a0[157000000000] =>\u00a0\u00a0\u00a0\u00a0string(9) \"Musk,Elon\"\n    \u00a0\u00a0}\n    \u00a0\u00a0[2] =>\u00a0\u00a0array(1) {\n    \u00a0\u00a0\u00a0\u00a0[136000000000] =>\u00a0\u00a0\u00a0\u00a0string(10) \"Gates,Bill\"\n    \u00a0\u00a0}\n    \u00a0\u00a0... remaining data not shown\n    ```", "```php\n    // /repo/ch05/php7_spl_splheap.php\n    define('SRC_FILE', __DIR__ \n    \u00a0\u00a0\u00a0\u00a0. '/../sample_data/billionaires.txt');\n    require_once __DIR__ \n    \u00a0\u00a0\u00a0\u00a0. '/../src/Server/Autoload/Loader.php';\n    $loader = new \\Server\\Autoload\\Loader();\n    ```", "```php\n    use Services\\BillionaireTracker;\n    $tracker = new BillionaireTracker();\n    $list = $tracker->extract(SRC_FILE);\n    ```", "```php\n    $heap = new class () extends SplHeap {\n    \u00a0\u00a0\u00a0\u00a0public function compare(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array $arr1, array $arr2) : int {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$cmp1 = array_values($arr2)[0];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$cmp2 = array_values($arr1)[0];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $cmp1 <=> $cmp2;\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```php\n    foreach ($list as $item)\n    \u00a0\u00a0\u00a0\u00a0$heap->insert($item);\n    ```", "```php\n    $patt = \"%20s\\t%32s\\n\";\n    $line = str_repeat('-', 56) . \"\\n\";\n    echo $tracker->view($heap, $patt, $line);\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch05 ]# \n    php php7_spl_splheap.php\n    --------------------------------------------------------\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Net Worth\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name\n    --------------------------------------------------------\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a084,000,000,000\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ambani,Mukesh\n    \u00a0\u00a0\u00a0\u00a0\u00a0115,000,000,000\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Arnault,Bernard\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a083,600,000,000\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Ballmer,Steve\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... some lines were omitted to save space ...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a058,200,000,000\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Walton,Rob\n    \u00a0\u00a0\u00a0\u00a0\u00a0100,000,000,000\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Zuckerberg,Mark\n    --------------------------------------------------------\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01,795,100,000,000\n    --------------------------------------------------------\n    ```", "```php\nroot@php8_tips_php8 [ /repo/ch05 ]# php php7_spl_splheap.php \nPHP Fatal error:\u00a0\u00a0Declaration of SplHeap@anonymous::compare(array $arr1, array $arr2): int must be compatible with SplHeap::compare(mixed $value1, mixed $value2) in /repo/ch05/php7_spl_splheap.php on line 16\n```", "```php\n$heap = new class () extends SplHeap {\n\u00a0\u00a0\u00a0\u00a0public function compare($arr1, $arr2) : int {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$cmp1 = array_values($arr2)[0];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$cmp2 = array_values($arr1)[0];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return $cmp1 <=> $cmp2;\n\u00a0\u00a0\u00a0\u00a0}\n};\n```", "```php\n    // /repo/ch05/php7_spl_spldoublylinkedlist.php\n    $double = new class() extends SplDoublyLinkedList {\n    \u00a0\u00a0\u00a0\u00a0public function show(int $mode) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->setIteratorMode($mode);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->rewind();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while ($item = $this->current()) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo $item . '. ';\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->next();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```php\n    $item = ['Person', 'Woman', 'Man', 'Camera', 'TV'];\n    foreach ($item as $key => $value)\n    \u00a0\u00a0\u00a0\u00a0if (!$double->push($value))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new Exception('ERROR');\n    ```", "```php\n    echo \"**************** Foward ********************\\n\";\n    $forward = SplDoublyLinkedList::IT_MODE_FIFO\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| SplDoublyLinkedList::IT_MODE_KEEP;\n    $double->show($forward);\n    ```", "```php\n    echo \"\\n\\n************* Reverse *****************\\n\";\n    $reverse = SplDoublyLinkedList::IT_MODE_LIFO\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0| SplDoublyLinkedList::IT_MODE_KEEP;\n    $double->show($reverse);\n    ```", "```php\n    root@php8_tips_php7 [ /repo/ch05 ]# \n    php php7_spl_spldoublylinkedlist.php\n    **************** Foward ********************\n    Person. Woman. Man. Camera. TV. \n    **************** Reverse ********************\n    TV. Camera. Man. Woman. Person. \n    ```", "```php\n    root@php8_tips_php8 [ /home/ch05 ]# \n    php php7_spl_spldoublylinkedlist.php \n    PHP Fatal error:\u00a0\u00a0Uncaught Exception: ERROR in /home/ch05/php7_spl_spldoublylinkedlist.php:23\n    ```", "```php\n$item = ['Person', 'Woman', 'Man', 'Camera', 'TV'];\nforeach ($item as $key => $value)\n\u00a0\u00a0\u00a0\u00a0$double->push($value);\n```", "```php\nroot@php8_tips_php7 [ /home/ch05 ]# \nphp php8_spl_spldoublylinkedlist.php \n**************** Foward ********************\nPerson. Woman. Man. Camera. TV. \n**************** Reverse ********************\nTV. Camera. Man. Woman. Person. \n```"]