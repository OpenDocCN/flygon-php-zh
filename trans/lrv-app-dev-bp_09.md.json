["```php\n**CREATE DATABASE laravel_api**\n\n```", "```php\n**php artisian key:generate**\n\n```", "```php\n<?php\n\nuse Illuminate\\Auth\\UserInterface;\nuse Illuminate\\Auth\\Reminders\\RemindableInterface;\n\nclass User extends Eloquent implements UserInterface, RemindableInterface {\n\n  /**\n   * The database table used by the model.\n   *\n   * @var string\n   */\n  protected $table = 'users';\n\n  /**\n   * The attributes excluded from the model's JSON form.\n   *\n   * @var array\n   */\n  protected $hidden = array('password');\n\n  // Specify which attributes should be mass-assignable\n   protected $fillable = array('email', 'password');\n\n  /**\n   * Get the unique identifier for the user.\n   *\n   * @return mixed\n   */\n  public function getAuthIdentifier()\n  {\n    return $this->getKey();\n  }\n\n  /**\n   * Get the password for the user.\n   *\n   * @return string\n   */\n  public function getAuthPassword()\n  {\n    return $this->password;\n  }\n\n  /**\n   * Get the e-mail address where password reminders are sent.\n   *\n   * @return string\n   */\n  public function getReminderEmail()\n  {\n    return $this->email;\n  }\n\n}\n```", "```php\n**php artisan migrate:make create_users_table --table=users --create**\n\n```", "```php\n  public function up()\n  {\n    Schema::create('users', function(Blueprint $table)\n    {\n      $table->increments('id');\n      $table->string('email');\n      $table->string('password');\n      $table->timestamps();\n    });\n  }\n```", "```php\n**php artisian migrate**\n\n```", "```php\n**php artisan migrate:make add_some_users**\n\n```", "```php\npublic function up()\n  {\n    User::create(array(\n            'email' => 'john@gmail.com',\n            'password' => Hash::make('johnspassword'),\n          ));\n    User::create(array(\n            'email' => 'andrea@gmail.com',\n            'password' => Hash::make('andreaspassword'),\n          ));\n  }\n```", "```php\nphp artisan migrate:make create_movies_table --table=movies --create\n```", "```php\n  public function up()\n  {\n    Schema::create('movies', function(Blueprint $table)\n    {\n      $table->increments('id');\n      $table->string('name');\n      $table->integer('release_year');\n      $table->timestamps();\n    });\n  }\n```", "```php\n**php artisian migrate**\n\n```", "```php\n<?php\nclass Movie extends Eloquent {\n\nprotected $table = 'movies';\n\nprotected $fillable = array('name','release_year');\n\npublic function Actors(){\n\n      return $this-> belongsToMany('Actor' , 'pivot_table');\n}\n\n}\n```", "```php\n**php artisan migrate:make add_some_movies**\n\n```", "```php\n  public function up()\n  {\n    Movie::create(array(\n            'name' => 'Annie Hall',\n        'release_year' => '1977'\n          ));\n\n    Movie::create(array(\n            'name' => ' Manhattan ',\n        'release_year' => '1978'\n          ));\n\nMovie::create(array(\n            'name' => 'The Shining',\n        'release_year' => '1980'\n          ));\n  }\n```", "```php\nphp artisan migrate:make create_actors_table --table=actors \u2013create\n```", "```php\n  public function up()\n  {\n    Schema::create('actors', function(Blueprint $table)\n    {\n      $table->increments('id');\n      $table->string('name');\n      $table->timestamps();\n    });\n  }\n```", "```php\nphp artisian migrate\n```", "```php\n<?php\nclass Actor extends Eloquent {\n\nprotected $table = 'actors';\n\nprotected $fillable = array('name');\n\npublic function Movies(){\n\n      return $this-> belongsToMany('Movies', 'pivot_table');\n}\n\n}\n```", "```php\nphp artisan migrate:make create_pivot_table --table=pivot_table --create\n```", "```php\n  public function up()\n  {\n    Schema::create('pivot_table', function(Blueprint $table)\n    {\n      $table->increments('id');\n      $table->integer('movies_id');\n      $table->integer('actors_id');\n      $table->timestamps();\n    });  \n}\n```", "```php\nphp artisian migrate\n```", "```php\nphp artisan migrate:make add_some_actors\n```", "```php\n  public function up()\n  {\n    $woody = Actor::create(array(\n            'name' => 'Woody Allen'\n          ));\n\n    $woody->Movies()->attach(array('1','2'));\n\n    $diane = Actor::create(array(\n            'name' => 'Diane Keaton'\n          ));\n\n$diane->Movies()->attach(array('1','2'));\n\n$jack = Actor::create(array(\n            'name' => 'Jack Nicholson'\n        ));\n\n$jack->Movies()->attach(3);\n\n}\n```", "```php\n$voody = Actor::create(array(\n            'name' => 'Woody Allen'\n          ));\n\n$voody->Movies()->attach(array('1','2'));\n```", "```php\nRoute::filter('auth.basic', function()\n{\n  return Auth::basic('email');\n});\n```", "```php\n**curl -i \u2013user andrea@gmail.com:andreaspassword localhost/api/getactorinfo/Woody%20Allen**\n\n```", "```php\nRoute::when('*', 'auth.basic');\n```", "```php\nRoute::get('api/getactorinfo/{actorname}', array('uses' => 'ActorController@getActorInfo'));\nRoute::get('api/getmovieinfo/{moviename}', array('uses' => 'MovieController@getMovieInfo'));\nRoute::put('api/addactor/{actorname}', array('uses' => 'ActorController@putActor'));\nRoute::put('api/addmovie/{moviename}/{movieyear}', array('uses' => 'MovieController@putMovie'));\nRoute::delete('api/deleteactor/{id}', array('uses' => 'ActorController@deleteActor'));\nRoute::delete('api/deletemovie/{id}', array('uses' => 'MovieController@deleteMovie'));\n```", "```php\n<?php\n\nclass ActorController extends BaseController {\npublic function getActorInfo($actorname){\n\n$actor = Actor::where('name', 'like', '%'.$actorname.'%')->first();\nif($actor){\n\n$actorInfo = array('error'=>false,'Actor Name'=>$actor->name,'Actor ID'=>$actor->id);\n$actormovies = json_decode($actor->Movies);\nforeach ($actormovies as $movie) {\n$movielist[] = array(\"Movie Name\"=>$movie->name, \"Release Year\"=>$movie->release_year);\n}\n$movielist =array('Movies'=>$movielist);\nreturn Response::json(array_merge($actorInfo,$movielist));\n\n}\nelse{\n\nreturn Response::json(array(\n'error'=>true,\n'description'=>'We could not find any actor in database like :'.$actorname\n));\n}\n}\n}\n```", "```php\n<?php\n\nclass MovieController extends BaseController {\n\npublic function getMovieInfo($moviename){\n$movie = Movie::where('name', 'like', '%'.$moviename.'%')->first();\nif($movie){\n\n$movieInfo = array('error'=>false,'Movie Name'=>$movie->name,'Release Year'=>$movie->release_year,'Movie ID'=>$movie->id);\n$movieactors = json_decode($movie->Actors);\nforeach ($movieactors as $actor) {\n$actorlist[] = array(\"Actor\"=>$actor->name);\n}\n$actorlist =array('Actors'=>$actorlist);\nreturn Response::json(array_merge($movieInfo,$actorlist));\n\n}\nelse{\n\nreturn Response::json(array(\n'error'=>true,\n'description'=>'We could not find any movie in database like :'.$moviename\n));\n}\n}\n}\n```", "```php\n**curl -i \u2013-user andrea@gmail.com:andreaspassword localhost/api/getactorinfo/Woody**\n\n```", "```php\n{\n   \"error\":false,\n   \"Actor Name\":\"Woody Allen\",\n   \"Actor ID\":1,\n   \"Movies\":[\n      {\n         \"Movie Name\":\"AnnieHall\",\n         \"Release Year\":1977\n      },\n      {\n         \"Movie Name\":\"Manhattan\",\n         \"Release Year\":1978\n      }\n   ]\n}\n```", "```php\n**curl -i --user andrea@gmail.com:andreaspassword localhost/api/getmovieinfo/Manhattan**\n\n```", "```php\n{\n   \"error\":false,\n   \"Movie Name\":\"Manhattan\",\n   \"Release Year\":1978,\n   \"Movie ID\":2,\n   \"Actors\":[\n      {\n         \"Actor\":\"Woody Allen\"\n      },\n      {\n         \"Actor\":\"Diane Keaton\"\n      }\n   ]\n}\n```", "```php\n{\n   \"error\":true,\n   \"description\":\"We could not find any movie in database like :Terminator\"\n}\n```", "```php\n{\n   \"error\":true,\n   \"description\":\"We could not find any actor in database like :Al Pacino\"\n}\n```", "```php\npublic function putActor($actorname)\n{\n\n$actor = Actor::where('name', '=', $actorname)->first();\nif(!$actor){\n\n$the_actor = Actor::create(array('name'=>$actorname));\n\nreturn Response::json(array(\n'error'=>false,\n'description'=>'The actor successfully saved. The ID number of Actor is : '.$the_actor->id\n));\n\n}\nelse{\n\nreturn Response::json(array(\n'error'=>true,\n'description'=>'We have already in database : '.$actorname.'. The ID number of Actor is : '.$actor->id\n));\n}\n}\n```", "```php\npublic function putMovie($moviename,$movieyear)\n{\n\n$movie = Movie::where('name', '=', $moviename)->first();\nif(!$movie){\n\n$the_movie = Movie::create(array('name'=>$moviename,'release_year'=>$movieyear));\n\nreturn Response::json(array(\n'error'=>false,\n'description'=>'The movie successfully saved. The ID number of Movie is : '.$the_movie->id\n));\n\n}\nelse{\n\nreturn Response::json(array(\n'error'=>true,\n'description'=>'We have already in database : '.$moviename.'. The ID number of Movie is : '.$movie->id\n));\n}\n}\n```", "```php\n**curl \u2013i \u2013X PUT \u2013-user andrea@gmail.com:andreaspassword localhost/api/addactor/Al%20Pacino**\n\n```", "```php\n{\n   \"error\":false,\n   \"description\":\"The actor successfully saved. The ID number of Actor is : 4\"\n}\n```", "```php\n{\n   \"error\":true,\n   \"description\":\"We have already in database : Al Pacino. The ID number of Actor is : 4\"\n}\n```", "```php\ncurl -i \u2013X PUT \u2013-user andrea@gmail.com:andreaspassword localhost/api/addmovie/The%20Terminator/1984\n```", "```php\n{\n   \"error\":false,\n   \"description\":\"The movie successfully saved. The ID number of Movie is : 4\"\n}\n```", "```php\n{\n   \"error\":true,\n   \"description\":\"We have already in database : The Terminator. The ID number of Movie is : 4\"\n}\n```", "```php\npublic function deleteActor($id)\n{\n\n$actor = Actor::find($id);\nif($actor){\n\n$actor->delete();\n\nreturn Response::json(array(\n'error'=>false,\n'description'=>'The actor successfully deleted : '.$actor->name\n));\n\n}\nelse{\n\nreturn Response::json(array(\n'error'=>true,\n'description'=>'We could not find any actor in database with ID number :'.$id\n));\n}\n}\n```", "```php\n<?php\nclass ActorController extends BaseController\n{\n    public function getActorInfo($actorname)\n    {\n        $actor = Actor::where('name', 'like', '%' . $actorname . '%')->first();\n        if ($actor)\n        {\n            $actorInfo   = array(\n                'error' => false,\n                'Actor Name' => $actor->name,\n                'Actor ID' => $actor->id\n            );\n            $actormovies = json_decode($actor->Movies);\n            foreach ($actormovies as $movie)\n            {\n                $movielist[] = array(\n                    \"Movie Name\" => $movie->name,\n                    \"Release Year\" => $movie->release_year\n                );\n            }\n            $movielist = array(\n                'Movies' => $movielist\n            );\n            return Response::json(array_merge($actorInfo, $movielist));\n        }\n        else\n        {\n            return Response::json(array(\n                'error' => true,\n                'description' => 'We could not find any actor in database like :' . $actorname\n            ));\n        }\n    }\n    public function putActor($actorname)\n    {\n        $actor = Actor::where('name', '=', $actorname)->first();\n        if (!$actor)\n        {\n            $the_actor = Actor::create(array(\n                'name' => $actorname\n            ));\n            return Response::json(array(\n                'error' => false,\n                'description' => 'The actor successfully saved. The ID number of Actor is : ' . $the_actor->id\n            ));\n        }\n        else\n        {\n            return Response::json(array(\n                'error' => true,\n                'description' => 'We have already in database : ' . $actorname . '. The ID number of Actor is : ' . $actor->id\n            ));\n        }\n    }\n    public function deleteActor($id)\n    {\n        $actor = Actor::find($id);\n        if ($actor)\n        {\n            $actor->delete();\n            return Response::json(array(\n                'error' => false,\n                'description' => 'The actor successfully deleted : ' . $actor->name\n            ));\n        }\n        else\n        {\n            return Response::json(array(\n                'error' => true,\n                'description' => 'We could not find any actor in database with ID number :' . $id\n            ));\n        }\n    }\n}\n```", "```php\npublic function deleteMovie($id)\n{\n\n$movie = Movie::find($id);\nif($movie){\n\n$movie->delete();\n\nreturn Response::json(array(\n'error'=>false,\n'description'=>'The movie successfully deleted : '.$movie->name\n));\n\n}\nelse{\n\nreturn Response::json(array(\n'error'=>true,\n'description'=>'We could not find any movie in database with ID number :'.$id\n));\n}\n}\n```", "```php\n<?php\nclass  extends BaseController\n{\n    public function getMovieInfo($moviename)\n    {\n        $movie = Movie::where('name', 'like', '%' . $moviename . '%')->first();\n        if ($movie)\n        {\n            $movieInfo   = array(\n                'error' => false,\n                'Movie Name' => $movie->name,\n                'Release Year' => $movie->release_year,\n                'Movie ID' => $movie->id\n            );\n            $movieactors = json_decode($movie->Actors);\n            foreach ($movieactors as $actor)\n            {\n                $actorlist[] = array(\n                    \"Actor\" => $actor->name\n                );\n            }\n            $actorlist = array(\n                'Actors' => $actorlist\n            );\n            return Response::json(array_merge($movieInfo, $actorlist));\n        }\n        else\n        {\n            return Response::json(array(\n                'error' => true,\n                'description' => 'We could not find any movie in database like :' . $moviename\n            ));\n        }\n    }\n    public function putMovie($moviename, $movieyear)\n    {\n        $movie = Movie::where('name', '=', $moviename)->first();\n        if (!$movie)\n        {\n            $the_movie = Movie::create(array(\n                'name' => $moviename,\n                'release_year' => $movieyear\n            ));\n            return Response::json(array(\n                'error' => false,\n                'description' => 'The movie successfully saved. The ID number of Movie is : ' . $the_movie->id\n            ));\n        }\n        else\n        {\n            return Response::json(array(\n                'error' => true,\n                'description' => 'We have already in database : ' . $moviename . '. The ID number of Movie is : ' . $movie->id\n            ));\n        }\n    }\n    public function deleteMovie($id)\n    {\n        $movie = Movie::find($id);\n        if ($movie)\n        {\n            $movie->delete();\n            return Response::json(array(\n                'error' => false,\n                'description' => 'The movie successfully deleted : ' . $movie->name\n            ));\n        }\n        else\n        {\n            return Response::json(array(\n                'error' => true,\n                'description' => 'We could not find any movie in database with ID number :' . $id\n            ));\n        }\n    }\n}\n```", "```php\n**curl \u2013I \u2013X DELETE \u2013-user andrea@gmail.com:andreaspassword localhost/api/deleteactor/4**\n\n```", "```php\n{\n   \"error\":false,\n   \"description\":\"The actor successfully deleted : Al Pacino\"\n}\n```", "```php\n**curl \u2013I \u2013X DELETE \u2013-user andrea@gmail.com:andreaspassword localhost/api/deletemovie/4**\n\n```", "```php\n{\n   \"error\":false,\n   \"description\":\"The movie successfully deleted : The Terminator\"\n}\n```", "```php\n{\n   \"error\":true,\n   \"description\":\"We could not find any movie in database with ID number :17\"\n}\n```", "```php\n{\n   \"error\":true,\n   \"description\":\"We could not find any actor in database with ID number :58\"\n}\n```"]