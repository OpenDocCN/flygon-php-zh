- en: Resolving Dependencies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决依赖关系
- en: Writing a loosely coupled code has become an essential skill for any professional
    developer. While legacy applications had a tendency to pack it all up, thus ending
    in one big solid block of code, modern applications take a more gradient approach
    as they largely rely on third-party libraries and other components. Nowadays,
    hardly anyone builds their own mailer, logger, router, template engine, and so
    on. Great deal of these components are out there, waiting to be consumed by our
    application through Composer. As individual components themselves are tested and
    maintained by various community or commercial entities, the cost of maintaining our
    application is significantly reduced. The overall code quality itself improves
    as an indirect consequence of more specialized developers addressing specific
    functionalities that otherwise might fall out of the area of our expertise. Harmony
    that has been made possible via loosely coupled code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 编写松散耦合的代码已经成为任何专业开发人员的必备技能。虽然传统应用程序倾向于将所有内容打包在一起，最终形成一个大的代码块，但现代应用程序采用了更渐进的方法，因为它们在很大程度上依赖于第三方库和其他组件。如今，几乎没有人会构建自己的邮件发送器、日志记录器、路由器、模板引擎等。这些组件中的大部分都可以通过
    Composer 等方式被我们的应用程序使用。由于各个组件本身都是由各种社区或商业实体测试和维护的，因此我们的应用程序维护成本大大降低。整体代码质量本身也因为更专业的开发人员处理特定功能而得以提高，这些功能可能超出了我们的专业领域。通过松散耦合的代码实现的和谐。
- en: 'There are a multitude of positive side-effects of loosely coupled code, some
    of which include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 松散耦合的代码有许多积极的副作用，其中包括以下几点：
- en: Easier refactoring
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易重构
- en: Improved code maintainability
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高代码可维护性
- en: Easier cross-platform utilization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易跨平台利用
- en: Easier cross-framework utilization
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易跨框架利用
- en: Aspiration towards a single responsibility principle compliance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对单一职责原则的追求
- en: Easier testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更容易测试
- en: 'This magic of loose coupling is easily achieved by utilizing various language
    features, such as interfaces, and design patterns, such as dependency injection. Moving
    forward, we will take a look at the basic aspects of dependency injection through
    the following sections:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用各种语言特性（如接口）和设计模式（如依赖注入）轻松实现松散耦合的魔法。接下来，我们将通过以下部分来看一下依赖注入的基本方面：
- en: Mitigating the common problem
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减轻常见问题
- en: Understanding dependency injection
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解依赖注入
- en: Understanding dependency injection container
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解依赖注入容器
- en: Mitigating the common problem
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减轻常见问题
- en: 'The dependency injection is a well-established software technique that deals
    with the problem of object dependencies, allowing us to write loosely coupled
    classes. While the pattern itself has been around for quite some time, the PHP
    ecosystem hasn''t really picked it up until major frameworks such as Symfony started
    implementing it. Nowadays, it is a de facto standard for anything other than trivial
    types of application. The whole dependency problem is easily observed through
    a simple example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入是一种既定的软件技术，处理对象依赖的问题，使我们能够编写松散耦合的类。虽然这种模式已经存在了相当长的时间，但 PHP 生态系统直到 Symfony
    等主要框架开始实施它之前并没有真正采用它。如今，除了微不足道的应用类型之外，它已经成为事实上的标准。整个依赖问题可以通过一个简单的例子轻松观察到：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we have a simple `Customer` class with a single `loadByEmail()` method.
    The troubling part is the dependency on the database `$mysqli` object being locked
    in a `loadByEmail()` instance method. This makes for tight coupling, which reduces
    code reusability and opens the door for possible system-wide side-effects to be
    induced by later code changes. To mitigate the problem, we need to inject the database
    `$mysqli` object into `$customer`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个简单的 `Customer` 类，其中有一个 `loadByEmail()` 方法。令人困扰的部分是 `loadByEmail()`
    实例方法对数据库 `$mysqli` 对象的依赖。这导致了紧耦合，降低了代码的可重用性，并为后续代码更改可能引入可能的系统范围副作用打开了大门。为了减轻问题，我们需要将数据库
    `$mysqli` 对象注入到 `$customer` 中。
- en: The MySQL Sakila database can be obtained from [https://dev.mysql.com/doc/sakila/en/](https://dev.mysql.com/doc/sakila/en/).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从[https://dev.mysql.com/doc/sakila/en/](https://dev.mysql.com/doc/sakila/en/)获取
    MySQL Sakila 数据库。
- en: There are three ways to inject the dependency into an object*:*
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方法可以将依赖注入到对象中*：*
- en: Through an instance method
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过实例方法
- en: Through a class constructor
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过类构造函数
- en: Through instance property
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过实例属性
- en: Whereas the instance method and class constructor approach seem slightly more
    popular than instance property injection.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 而实例方法和类构造函数的方法似乎比实例属性注入更受欢迎。
- en: 'The following example demonstrates the approach of using an instance method
    for dependency injection:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了使用实例方法进行依赖注入的方法：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we are injecting an instance of the `$mysqli` object into an instance
    of the `Customer` object through the customer's `loadByEmail()` instance method.
    While this is certainly a better way than instantiating the `$mysqli` object within
    the `loadByEmail()` method itself, it is easy to imagine how quickly our client
    code might become clumsy if our class were to have a dozen of methods, each requiring
    different objects to be passed to it. While this approach might seem tempting,
    injecting dependencies through instance methods violates OOP's principle of encapsulation.
    Furthermore, adding arguments to methods for the sake of dependency is anything but
    an example of best practice.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过客户的 `loadByEmail()` 实例方法将 `$mysqli` 对象的实例注入到 `Customer` 对象中。虽然这肯定比在
    `loadByEmail()` 方法内部实例化 `$mysqli` 对象的方式更好，但很容易想象，如果我们的类有十几种方法，每种方法都需要传递不同的对象，我们的客户端代码可能会变得笨拙。虽然这种方法似乎很诱人，但通过实例方法注入依赖违反了面向对象编程的封装原则。此外，为了依赖而向方法添加参数绝不是最佳实践的例子。
- en: 'Another approach would be to utilize the class constructor method as per the
    following example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是利用类构造函数方法，如下例所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we are injecting an instance of the `$mysqli` object into an instance
    of the `Customer` object through the customer's `__constructor()` method. Whether
    a single or a dozen objects are being injected, the constructor injection comes
    out as the clear winner here. The client application has a single entry point
    for all injections, making it easy to keep a track of things.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过客户的`__constructor()`方法将`$mysqli`对象的实例注入到`Customer`对象的实例中。无论是注入一个对象还是十几个对象，构造函数注入在这里都是明显的赢家。客户端应用程序有一个单一的入口点用于所有注入，这样就很容易跟踪事物。
- en: Without the notion of dependency injection, a loosely coupled code would be
    impossible to achieve.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 没有依赖注入的概念，松散耦合的代码是不可能实现的。
- en: Understanding dependency injection
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解依赖注入
- en: Throughout the introductory section, we touched upon passing dependency through
    the class `__construct()` method. There is more to it than just passing the dependent
    object. Let's consider the following three seemingly similar but different examples.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍部分，我们提到通过类`__construct()`方法传递依赖项。除了传递依赖对象之外，还有更多内容。让我们考虑以下三个看似相似但不同的例子。
- en: 'Though PHP has been supporting type hinting for quite a while now, it isn''t
    uncommon to come across pieces of code, which are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PHP已经支持类型提示很长一段时间了，但并不罕见遇到以下代码片段：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see that the `App` class `__construct()` method does not utilize the
    PHP type hinting feature. The `$config` and `$logger` variables are assumed by
    the developer to be of a certain type. While this example will work just fine,
    it still keeps our classes tightly coupled. There really is not that much difference
    between this example and the previous one where we had the `$msqli` dependency
    within the `loadByEmail()` method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`App`类的`__construct()`方法没有使用PHP类型提示功能。开发人员假定`$config`和`$logger`变量是某种类型。虽然这个例子可以正常工作，但它仍然使我们的类紧密耦合。这个例子和之前在`loadByEmail()`方法中有`$msqli`依赖的例子之间没有太大的区别。
- en: 'Adding type hinting to the mix allows us to force the types we pass into the `App`
    class `__construct()` method:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将类型提示添加到混合中允许我们强制传递给`App`类`__construct()`方法的类型：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This simple move sets us halfway through making our code loosely coupled. Although
    we are now instructing our injectable objects to be of an exact type, we are still
    locked onto a specific type, that is, implementation. Striving for loose coupling
    should not get us locked into a specific implementation; otherwise, there would
    not be much use of a dependency injection pattern.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的举措使我们的代码松散耦合了一半。虽然我们现在指示我们的可注入对象是一个确切的类型，但我们仍然锁定在一个特定类型上，也就是实现。追求松散耦合不应该让我们锁定在特定的实现上；否则，依赖注入模式就没有太多用处了。
- en: 'This third example sets an important differentiation in regards to the first
    two examples:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这第三个例子在第一个两个例子中设置了一个重要的区别：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Favoring interface type hints instead of concrete class type hints is among
    the key ingredients to write loosely coupled code. Although we are still injecting
    dependencies through the class `__construct()`, we are now doing so in a *program
    to an interface, not an implementation* manner. This allows us to avoid tight
    coupling, making our code more reusable.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 偏爱接口类型提示而不是具体类类型提示是编写松散耦合代码的关键要素之一。虽然我们仍然通过类`__construct()`注入依赖项，但现在我们是以*面向接口而不是实现*的方式来做。这使我们能够避免紧密耦合，使我们的代码更具可重用性。
- en: Clearly, these examples are ultimately simple. We can imagine how quickly things
    start to complicate when the number of injected objects increase, where each of
    the injected objects might need one, two, or even a dozen of the `__construct()`
    parameters itself. This is where the dependency injection container comes in handy.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这些例子最终都很简单。我们可以想象当注入的对象数量增加时，事情会变得多么复杂，每个注入的对象可能需要一个、两个，甚至十几个`__construct()`参数本身。这就是依赖注入容器派上用场的地方。
- en: Understanding dependency injection container
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解依赖注入容器
- en: A dependency injection container is an object that knows how to auto-wire classes
    together. The **auto-wire** term implies both instantiating and properly configuring
    objects. This is by no means an easy task, which is why there are several libraries
    addressing this functionality.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入容器是一个知道如何自动将类组合在一起的对象。**自动装配**这个术语意味着实例化和正确配置对象。这绝不是一项容易的任务，这就是为什么有几个库在解决这个功能。
- en: The DependencyInjection component provided by the Symfony framework is a neat dependency
    injection container that can be easily installed by Composer.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Symfony框架提供的DependencyInjection组件是一个整洁的依赖注入容器，可以通过Composer轻松安装。
- en: 'Moving forward, let''s go ahead and create a `di-container` directory where
    we will execute these commands and set up our project:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前进，让我们创建一个`di-container`目录，在那里我们将执行这些命令并设置我们的项目：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The resulting output suggests we should install some additional packages:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出表明我们应该安装一些额外的包：
- en: '![](assets/500c7447-11c1-4eb4-b1dd-54811758adb7.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/500c7447-11c1-4eb4-b1dd-54811758adb7.png)'
- en: 'We need to make sure we add the `symfony/yaml` and `symfony/config` packages
    by running the following console commands:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要确保通过运行以下控制台命令添加`symfony/yaml`和`symfony/config`包：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `symfony/yaml` package installs the Symfony Yaml component. This component parses
    the YAML strings into PHP arrays and the other way around. The `symfony/config` package
    installs the Symfony Config component. This component provides classes to help
    us find, load, combine, autofill, and validate configuration values from sources,
    such as YAML, XML, INI files, or even a database itself. The `symfony/dependency-injection`,
    `symfony/yaml`, and `symfony/config` packages themselves stand as a nice example
    of loosely coupled components. While the three work hand in hand to deliver the
    full scope of dependency injection functionality, components themselves follow
    the principles of loose coupling.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`symfony/yaml`包安装了Symfony Yaml组件。该组件将YAML字符串解析为PHP数组，反之亦然。`symfony/config`包安装了Symfony
    Config组件。该组件提供了帮助我们从源中查找、加载、合并、自动填充和验证配置值的类，这些源可以是YAML、XML、INI文件，甚至是数据库本身。`symfony/dependency-injection`、`symfony/yaml`和`symfony/config`包本身就是松散耦合组件的一个很好的例子。虽然这三个组件共同工作以提供完整的依赖注入功能，但组件本身遵循松耦合的原则。'
- en: Check out [http://symfony.com/doc/current/components/dependency_injection.html](http://symfony.com/doc/current/components/dependency_injection.html)
    for more information about the Symfony's DependencyInjection component.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[http://symfony.com/doc/current/components/dependency_injection.html](http://symfony.com/doc/current/components/dependency_injection.html)了解更多关于Symfony的DependencyInjection组件的信息。
- en: 'Now let''s go ahead and create the `container.yml` configuration file within
    the `di-container` directory:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续在`di-container`目录中创建`container.yml`配置文件：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `container.yml` file has a specific structure that begins with the keyword
    `services`. Without delving any deeper into it, suffice it to say that the service
    container is the Symfony's name for dependency injection container, while the
    service is any PHP object performing some task--basically, an instance of a class
    of any sort.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`container.yml`文件具有特定的结构，以关键字`services`开头。不深入研究，可以说服务容器是Symfony对依赖注入容器的称呼，而服务是执行某些任务的任何PHP对象--基本上是任何类的实例。'
- en: Right below the `services` tag, we have the `config`, `logger`, and `app` tags.
    These denote a declaration of three distinctive services. We could have easily
    named them `the_config`, `the_logger`, `the_app`, or whatever else we prefer.
    Drilling deeper into individual services, we see the `class` tag being common
    to all three services. The `class` tag tells the container what class to instantiate
    when a given service instance is asked for. Finally, the `autowire` feature used
    within the `app` service definition allows the autowiring subsystem to detect
    the dependencies of the `App` class by parsing its constructor. This makes it
    dead simple for a client code to get an instance of the `App` class without even
    being aware of the `$config` and `$logger` requirements on the `App` class `__construct()`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`services`标签下面，我们有`config`、`logger`和`app`标签。这表示了三个独特服务的声明。我们可以轻松地将它们命名为`the_config`、`the_logger`、`the_app`，或者其他我们喜欢的名称。深入研究各个服务，我们看到`class`标签是所有三个服务共有的。`class`标签告诉容器在请求给定服务实例时实例化哪个类。最后，在`app`服务定义中使用的`autowire`功能允许自动装配子系统通过解析构造函数来检测`App`类的依赖关系。这使得客户端代码非常容易获取`App`类的实例，甚至不需要了解`App`类`__construct()`中的`$config`和`$logger`要求。
- en: 'With the `container.yml` file in place, let''s go ahead and create the `index.php`
    file within the `di-container` directory:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`container.yml`文件，让我们继续在`di-container`目录中创建`index.php`文件：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Be sure to replace everything from `ConfigInterface` to `App` with the exact
    code we had in our third example from within the Understanding dependency injection
    section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 确保用我们在理解依赖注入部分的第三个示例中的确切代码替换从`ConfigInterface`到`App`的所有内容。
- en: We started off by including the `autoload.php` file so we get the auto-loading
    for our dependency container component working. The code following the `use` statements
    is the same code we had in the Understanding dependency injection section. The
    interesting part comes after it. The instance of `ContainerBuilder` is created
    and passed onto `YamlFileLoader`, which loads the `container.yml` file. Right
    after the file is loaded, we call the `compile()` method on the `$container` instance.
    Running `compile()` allows the container to pick up on the `autowire` service
    tag, among other things. Finally, we are using the `get()` method on the `$container`
    instance to fetch an instance of the `app` service. The client, in this case,
    has no upfront knowledge of arguments being passed to the `App` instance; the
    dependency container handled it all by itself based on a `container.yml` configuration.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先包含了`autoload.php`文件，以便为我们的依赖容器组件实现自动加载。在`use`语句后面的代码与我们在理解依赖注入部分中的代码相同。有趣的部分在其后。创建了`ContainerBuilder`的实例，并传递给`YamlFileLoader`，后者加载了`container.yml`文件。文件加载后，我们在`$container`实例上调用`compile()`方法。运行`compile()`允许容器识别`autowire`服务标签，以及其他内容。最后，我们在`$container`实例上使用`get()`方法来获取`app`服务的实例。在这种情况下，客户端事先不知道传递给`App`实例的参数；依赖容器根据`container.yml`配置自行处理了所有内容。
- en: Using interface type hints and the container, we are able to write more reusable,
    testable, and decoupled code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用接口类型提示和容器，我们能够编写更具可重用性、可测试性和解耦性的代码。
- en: Check out [http://symfony.com/doc/current/service_container.html](http://symfony.com/doc/current/service_container.html)
    for more information about the Symfony service container.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[http://symfony.com/doc/current/service_container.html](http://symfony.com/doc/current/service_container.html)了解更多关于Symfony服务容器的信息。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The dependency injection is a simple technique that allows us to escape from
    the shackles of tight coupling. Combined with interface type hints, we get a powerful technique
    to write loosely coupled code. This isolates and minimizes the impact of possible
    future application design changes as well as its defects. Nowadays, it is considered
    irresponsible to even write modular and large code base applications without embracing
    these simple techniques.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入是一种简单的技术，它允许我们摆脱紧耦合的枷锁。结合接口类型提示，我们得到了一个强大的技术，可以编写松散耦合的代码。这样可以隔离和最小化可能的未来应用程序设计变化以及其缺陷的影响。如今，甚至在不采用这些简单技术的情况下编写模块化和大型代码库应用程序被认为是不负责任的。
- en: Moving forward, we will take a closer look at the state of the ecosystem around
    PHP packages, their creation, and distribution.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 展望未来，我们将更仔细地研究围绕PHP包的生态系统的状态，它们的创建和分发。
