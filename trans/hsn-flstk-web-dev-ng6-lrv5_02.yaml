- en: The Benefits of TypeScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript的好处
- en: TypeScript enables you to write JavaScript code. It includes static typing and
    other features that are very common in object-oriented languages. In addition,
    with TypeScript, you can use all of the features of ECMAScript 6, because the
    compiler converts them into readable code for the current browser.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript使您能够编写JavaScript代码。它包括静态类型和其他在面向对象语言中非常常见的特性。此外，使用TypeScript，您可以使用ECMAScript
    6的所有特性，因为编译器将它们转换为当前浏览器可读的代码。
- en: 'One of the features of TypeScript is that users can create typed variables,
    like it is done in Java or C# (for example, `const VARIABLE_NAME: Type = Value`),
    Not only that, but TypeScript helps us to write clean, well-organized code. That
    is one of the reasons why the Angular team adopted TypeScript for the current
    version of the framework.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'TypeScript的一个特性是用户可以创建类型化的变量，就像在Java或C#中一样（例如，`const VARIABLE_NAME: Type =
    Value`），不仅如此，TypeScript还帮助我们编写干净、组织良好的代码。这就是为什么Angular团队为当前版本的框架采用了TypeScript的原因之一。'
- en: 'Before we begin, let''s look at what the official TypeScript documentation
    states:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，让我们看一下官方TypeScript文档中的内容：
- en: '"TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '"TypeScript是JavaScript的一种有类型的超集，可以编译为普通的JavaScript。'
- en: Any browser. Any host."
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 任何浏览器。任何主机。
- en: In this chapter, we will install TypeScript in our environment globally, in
    order to understand what happens with TypeScript files when they are converted to
    JavaScript. Don't worry; Angular applications already provide us with a TypeScript
    compiler, built into the Angular CLI.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在我们的环境中全局安装TypeScript，以了解TypeScript文件在转换为JavaScript时会发生什么。不用担心；Angular应用程序已经为我们提供了内置的TypeScript编译器。
- en: 'In this chapter, we will cover the following points:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Installing TypeScript
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装TypeScript
- en: The benefits of using TypeScript
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TypeScript的好处
- en: How to transpile a TypeScript file to a JavaScript file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将TypeScript文件转译为JavaScript文件
- en: Writing JavaScript code with static typing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态类型编写JavaScript代码
- en: Understanding interfaces, classes, and generics in TypeScript
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解TypeScript中的接口、类和泛型
- en: Installing TypeScript
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装TypeScript
- en: It's pretty simple to install and get started with TypeScript. It is necessary
    to have Node.js and Node Package Manager (NPM) installed on your machine.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和开始使用TypeScript非常简单。您的机器上必须安装Node.js和Node包管理器（NPM）。
- en: If you don't have them yet, go to [https://nodejs.org/en/download/](https://nodejs.org/en/download/) and
    follow the step-by-step installation instructions for your platform.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有它们，请前往[https://nodejs.org/en/download/](https://nodejs.org/en/download/)，并按照您的平台的逐步安装说明进行操作。
- en: 'Let''s install TypeScript, as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤安装TypeScript：
- en: 'Open your Terminal and type the following command to install the TypeScript
    compiler:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入以下命令以安装TypeScript编译器：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the `-g` flag means to install the compiler on your machine globally.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`-g`标志表示在您的机器上全局安装编译器。
- en: 'Let''s check the available TypeScript commands. Type the following command
    in the Terminal:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查一下可用的TypeScript命令。在终端中输入以下命令：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding command will provide a lot of information about the TypeScript
    compiler; we will see a simple example of how we can transpile a TypeScript file
    to a JavaScript file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将提供有关TypeScript编译器的大量信息；我们将看到一个简单的示例，演示如何将TypeScript文件转译为JavaScript文件。
- en: 'Examples:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '` tsc hello.ts`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '` tsc hello.ts`'
- en: '` tsc --outFile file.js file.ts`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '` tsc --outFile file.js file.ts`'
- en: 'Descriptions of the preceding lines are as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前面几行的描述如下：
- en: The `tsc` command compiles the `hello.ts` file.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tsc`命令编译`hello.ts`文件。'
- en: Tell the compiler to create an output file, named `hello.js`
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告诉编译器创建一个名为`hello.js`的输出文件。
- en: Creating a TypeScript project
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个TypeScript项目
- en: Some text editors, such as VS Code, give us the ability to deal with TS files
    as independent units, called File Scope. Although this is very useful for isolated
    files (as in the following examples), it is recommended that you always create
    a TypeScript project. You can then modularize your code and use dependency injection
    between files in the future.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一些文本编辑器，如VS Code，让我们有能力将TS文件作为独立单元处理，称为文件范围。尽管这对于孤立的文件（如下面的示例）非常有用，但建议您始终创建一个TypeScript项目。然后，您可以模块化您的代码，并在将来的文件之间使用依赖注入。
- en: A TypeScript project is created with a file called `tsconfig.json`, placed at
    the root of a directory. You will need to indicate to the compiler which files
    are part of the project, the compile options, and many other settings.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用名为`tsconfig.json`的文件在目录的根目录创建了一个TypeScript项目。您需要告诉编译器哪些文件是项目的一部分，编译选项以及许多其他设置。
- en: 'A basic `tsconfig.json` file contains the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的`tsconfig.json`文件包含以下代码：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although the preceding code is very simple and intuitive, we are only indicating
    which compiler we will use in our project, and also what kind of module. If the
    code snippet indicates that we are using ECMAScript 5, all TypeScript code will
    be converted to JavaScript, using ES5 syntax.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的代码非常简单和直观，我们只是指定了我们将在项目中使用的编译器，以及使用的模块类型。如果代码片段指示我们使用ECMAScript 5，所有TypeScript代码将被转换为JavaScript，使用ES5语法。
- en: 'Now, let''s look at how we can create this file automatically, with the help
    of the `tsc` compiler:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何可以借助`tsc`编译器自动创建此文件：
- en: Create a folder, called `chapter-02`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chapter-02`的文件夹。
- en: Open your Terminal inside the `chapter-02` folder.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-02`文件夹中打开您的终端。
- en: 'Type the following command:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will see the following content, generated by the `tsc` compiler:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到由`tsc`编译器生成的以下内容：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that we have omitted some sections. You should see all of the available
    options; however, most of them are commented. Do not worry about that at this
    time; later on, we will look at some of the options in more detail.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们省略了一些部分。您应该看到所有可用的选项；但是，大多数选项都是被注释掉的。现在不用担心这一点；稍后，我们将更详细地查看一些选项。
- en: Now, let's create a TypeScript file, and check that everything goes smoothly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个TypeScript文件，并检查一切是否顺利。
- en: Open VS Code in the `chapter-02` folder and create a new file, called `sample-01.ts`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-02`文件夹中打开VS Code，创建一个名为`sample-01.ts`的新文件。
- en: 'Add the following code to `sample-01.ts`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`sample-01.ts`中：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Go back to your Terminal and type the following command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的终端，输入以下命令：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In VS Code, you can use the integrated Terminal; on the top menu bar, click
    on View | Integrate Terminal [ˆ`].
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在VS Code中，你可以使用集成终端；在顶部菜单栏上，点击View | Integrate Terminal [ˆ`]。
- en: Note that another file appears with the same name, but with a `.js` extension.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，另一个文件出现了，但扩展名是`.js`。
- en: If you compare both files, they are exactly the same, because our example is
    pretty simple, and we are using a simple `console.log()` function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你比较这两个文件，它们完全相同，因为我们的例子非常简单，我们使用的是一个简单的`console.log()`函数。
- en: As TypeScript is a super set of JavaScript, all of the JS features are available
    here, too.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于TypeScript是JavaScript的超集，这里也提供了所有的JS功能。
- en: Benefits of TypeScript
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TypeScript的好处
- en: 'Here''s a small list of the benefits of using TypeScript:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用TypeScript的好处的一个小列表：
- en: TypeScript is robust, secure, and easy to debug.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript是强大的、安全的，易于调试。
- en: TypeScript code is compiled before being transformed into JavaScript, so we
    can catch all sorts of errors before running the code.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript代码在转换为JavaScript之前被编译，因此我们可以在运行代码之前捕捉各种错误。
- en: IDEs that support TypeScript have the ability to improve code completion and 
    checking static typing.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持TypeScript的IDE具有改进代码完成和检查静态类型的能力。
- en: TypeScript supports OOP (Object Oriented Programming), including modules, namespaces,
    classes, and more.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript支持面向对象编程（OOP），包括模块、命名空间、类等。
- en: The main point in TypeScript's favor is that it has been adopted by the Angular
    team; and, since Angular is one of the most important frontend frameworks for
    the development of modern web applications with JavaScript, this has motivated
    many developers, who are migrating from Version 1.x of the AngularJS to Version
    2/4/5/6, to learn it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript受欢迎的一个主要原因是它已经被Angular团队采用；而且，由于Angular是用于开发现代Web应用程序的最重要的前端框架之一，这激励了许多开发人员从AngularJS的1.x版本迁移到2/4/5/6版本学习它。
- en: A simple reason for this is that the majority of Angular tutorials and examples
    are written in TypeScript.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为大多数Angular教程和示例都是用TypeScript编写的。
- en: 'Open `sample-01.ts` and add the following code, right after the `console.log()`
    function:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`sample-01.ts`，在`console.log()`函数之后添加以下代码：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Go back to your Terminal and type the following code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的终端，输入以下代码：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, when you open the `sample-01.js` file, you will see the results shown
    in the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你打开`sample-01.js`文件时，你会看到以下截图中显示的结果：
- en: '![](assets/2490a659-f06c-4749-8e64-a62905746ed7.png)Comparing TypeScript with
    generated JavaScript'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript与生成的JavaScript进行比较
- en: Note that the sum class parameters, `(x:number, y:number)`, are given the type
    number. This is one of the advantages of TypeScript; however, as we are acting
    according to typing and using numbers within the function call `MyClass.sum(3,
    5)`, we cannot see its power.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，sum类参数`(x:number, y:number)`被赋予了类型number。这是TypeScript的一个优点；然而，由于我们根据类型和在函数调用`MyClass.sum(3,
    5)`中使用数字，我们无法看到它的强大之处。
- en: Let's make a small change, and see the difference.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一个小改变，看看区别。
- en: Change the `MyClass.sum()` function call to `MyClass.sum('a', 5)`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MyClass.sum()`函数调用更改为`MyClass.sum('a', 5)`。
- en: 'Go back to your Terminal and type the following command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到你的终端，输入以下命令：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that we receive a TypeScript error:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们收到了一个TypeScript错误：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you are using VS Code, you will see the message in the following screenshot,
    before you execute the command to compile the file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用VS Code，你会在执行编译文件之前看到以下截图中的消息：
- en: '![](assets/d90105da-eda8-4321-ad41-4a252b0c0842.png)Compiling error message'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/d90105da-eda8-4321-ad41-4a252b0c0842.png)编译错误消息'
- en: As previously mentioned, VS Code is a powerful editor for the TypeScript language;
    in addition to having an integrated Terminal, we are able to clearly see the compilation
    errors.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，VS Code是TypeScript语言的强大编辑器；除了具有集成终端外，我们还能清楚地看到编译错误。
- en: Instead of typing the same command every time, we can make some modifications
    to the TS file. We can use the `--watch` flag, and the compiler will run every
    change that we make to the file automatically.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对TS文件进行一些修改，而不是每次都输入相同的命令。我们可以使用`--watch`标志，编译器将自动运行我们对文件所做的每一次更改。
- en: 'In your Terminal, type the following command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端中，输入以下命令：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s fix it; go back to VS Code and replace the `MyClass.sum()` function
    with the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们修复它；回到VS Code，用以下代码替换`MyClass.sum()`函数：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To stop the TS compiler, just press *Ctrl +* *C*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止TS编译器，只需按下*Ctrl +* *C*。
- en: Writing JavaScript code with static types
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用静态类型编写JavaScript代码
- en: 'The first thing that you''ll notice when working with TypeScript are its static
    types, in addition to all of the JavaScript types, indicated on the following
    table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用TypeScript时，你会注意到的第一件事是它的静态类型，以及下表中指示的所有JavaScript类型：
- en: '| **Primitives** | **Objects** |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| **基本类型** | **对象** |'
- en: '| String | Function |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | 函数 |'
- en: '| Number | Array |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | 数组 |'
- en: '| Null | Prototypes |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 空 | 原型 |'
- en: '| Undefined |  |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 未定义 |  |'
- en: '| Boolean |  |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 布尔 |  |'
- en: '| Symbol |  |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 符号 |  |'
- en: 'This means that you can declare the types of variables; it''s pretty simple
    to assign a type to a variable. Let''s look at some examples, using JavaScript
    types only:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以声明变量的类型；给变量分配类型非常简单。让我们看一些例子，只使用JavaScript类型：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With TypeScript, we have a few more types, as we'll see in the following sections.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript，我们有更多的类型，我们将在以下部分中看到。
- en: Creating a tuple
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个元组
- en: 'A tuple is like an organized typed array. Let''s create one to see how it works:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 元组就像一个有组织的类型数组。让我们创建一个看看它是如何工作的：
- en: 'Inside the `chapter-02` folder, create a file called `tuple.ts`, and add the
    following code:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-02`文件夹中，创建一个名为`tuple.ts`的文件，并添加以下代码：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code looks fine for JavaScript, but in TypeScript, we must respect
    the variable type; here, we are trying to pass a string where we must pass a number.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在JavaScript中看起来很好，但在TypeScript中，我们必须尊重变量类型；在这里，我们试图传递一个字符串，而我们必须传递一个数字。
- en: 'In your Terminal, type the following command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端中，输入以下命令：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will see the following error message:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下错误消息：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In VS Code, you will see the error message before you compile your file. This
    is a very helpful feature.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在VS Code中，你会在编译文件之前看到错误消息。这是一个非常有用的功能。
- en: When we fix it with the right order (`myArray = [0, 'text', false]`), the error
    message disappears.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们用正确的顺序修复它（`myArray = [0, 'text', false]`）时，错误消息消失了。
- en: It's also possible to create a tuple type and use it to assign a variable, as
    we can see in the next example.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以创建一个元组类型，并将其用于分配一个变量，就像我们在下一个例子中看到的那样。
- en: 'Go back to your Terminal and add the following code to the `tuple.ts` file:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到你的终端，并将以下代码添加到`tuple.ts`文件中：
- en: '[PRE17]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: At this point, you may be wondering why the previous examples have a `console.log`
    output.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，你可能会想知道为什么前面的例子有`console.log`输出。
- en: With the help of Node.js, which we installed previously, we can run the examples
    and view the output of the `console.log()` function.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 借助我们之前安装的Node.js，我们可以运行示例并查看`console.log()`函数的输出。
- en: 'Inside the Terminal, type the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，输入以下命令：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that you will need to run the JavaScript version, as in the previous example.
    If you try to run the TypeScript file directly, you will probably receive an error
    message.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你需要运行JavaScript版本，就像前面的例子一样。如果你尝试直接运行TypeScript文件，你可能会收到错误消息。
- en: Using the void type
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用void类型
- en: In TypeScript, it is mandatory to define the type of the return of a function.
    When we have a function that does not have a return, we use a type called `void`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，定义函数的返回类型是强制的。当我们有一个没有返回值的函数时，我们使用一个叫做`void`的类型。
- en: 'Let''s see how it works:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: 'Create a new file called `void.ts` inside the `chapter-02` folder, and add
    the following code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`chapter-02`文件夹内创建一个名为`void.ts`的新文件，并添加以下代码：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the preceding code, everything is OK, because our function returns a value.
    If we remove the return function, we will see the following error message:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，一切都很好，因为我们的函数返回一个值。如果我们删除返回函数，我们将看到以下错误消息：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In VS Code, you would see the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在VS Code中，你会看到以下内容：
- en: '![](assets/1c7652c8-7333-4dbd-a38e-9247c6f90b4a.png)VS Code output error'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1c7652c8-7333-4dbd-a38e-9247c6f90b4a.png)VS Code输出错误'
- en: 'To fix it, replace the type `string` with `void`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要修复它，用`void`替换类型`string`：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is very useful, because our functions do not always return a value. But
    remember, we cannot declare `void` in functions that *do* return a value.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用，因为我们的函数并不总是返回一个值。但请记住，我们不能在*返回*值的函数中声明`void`。
- en: The opt-out type checking - any
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择退出类型检查 - any
- en: 'The `any` type is very useful when we do not know what to expect from a function
    (in other words, when we do not know which type we are going to return):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们不知道从函数中期望什么时（换句话说，当我们不知道我们将返回哪种类型时），`any`类型非常有用：
- en: 'Create a new file called `any.ts` inside the `chapter-02` folder, and add the
    following code:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-02`文件夹中创建一个名为`any.ts`的新文件，并添加以下代码：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that the first `band` assignment is an object, while the second is a string.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第一个`band`赋值是一个对象，而第二个是一个字符串。
- en: 'Go back to your Terminal and compile and run this piece of code; type the following
    command:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到你的终端，编译并运行这段代码；输入以下命令：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, let''s see the output. Type the following command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看一下输出。输入以下命令：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You will see the following message in the Terminal:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在终端看到以下消息：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, we can assign *anything* to our `band` variable.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以将*任何东西*赋给我们的`band`变量。
- en: Using enum
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用枚举
- en: '`enum` allows us to group values with more intuitive names. Some people prefer
    to call the enumerated list and some other names. Let''s look at an example, so
    as to make it easier to understand how this works in practice:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`enum`允许我们使用更直观的名称对值进行分组。有些人更喜欢称枚举列表为其他名称。让我们看一个例子，以便更容易理解这在实践中是如何工作的：'
- en: 'Create a file called `enum.js` in the `chapter-02` folder, and add the following
    code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-02`文件夹中创建一个名为`enum.js`的文件，并添加以下代码：
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In your Terminal, type the following command to transpile the file:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的终端中，输入以下命令以转换文件：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let''s execute the file. Type the following command:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们执行这个文件。输入以下命令：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You will see the following result in the Terminal:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在终端看到以下结果：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We can now get the value by using the name instead of the position.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过名称而不是位置来获取值。
- en: 'Add the following lines of code, right after the `console.log()` function:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`console.log()`函数之后添加以下代码行：
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, execute the commands in *steps 2* and *step 3* to check the results. You
    will see the following output in the Terminal:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，执行*步骤2*和*步骤3*中的命令以检查结果。你将在终端中看到以下输出：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that all of the values (band names) declared in the `band` object are converted
    into strings, inside an indexed object, as you can see in the preceding example.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`band`对象中声明的所有值（乐队名称）都被转换为字符串，放在一个索引对象中，就像你在前面的例子中看到的那样。
- en: Using the never type
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用never类型
- en: The never type was introduced in TypeScript 2.0; it implies a value that never
    occurs. At first glance, it may seem strange, but it can be used in some situations.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`never`类型是在TypeScript 2.0中引入的；它意味着永远不会发生的值。乍一看，它可能看起来很奇怪，但在某些情况下可以使用它。'
- en: 'Let''s look at what the official documentation says about it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看官方文档对此的解释：
- en: The `never` type represents the types of values that never occur. Specifically, never is
    the return type for functions that never return, and never is the type for variables
    under `type` guards that are never true.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`never`类型表示永远不会发生的值的类型。具体来说，`never`是永远不会返回的函数的返回类型，也是永远不会为`type`保护下的变量为真的类型。'
- en: Suppose that a messaging function that is called within another function specifies
    the callback.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在另一个函数内调用的消息传递函数指定了回调。
- en: 'It would look something like the following code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来会像以下代码：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Another example would be checking a value that is a string and number at the
    same time, such as the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是检查同时是字符串和数字的值，例如以下代码：
- en: '[PRE33]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Types: undefined and null'
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型：未定义和空
- en: In TypeScript, `undefined` and `null` are types themselves; this means that
    undefined is a type (`undefined`) and null is a type (`null`). Confusing? undefined
    and null cannot be  type  variables; they can only be assigned as values to variables.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在TypeScript中，`undefined`和`null`本身就是类型；这意味着undefined是一种类型(`undefined`)，null是一种类型(`null`)。令人困惑？undefined和null不能是类型变量；它们只能被分配为变量的值。
- en: 'They are also different: a null variable means that a variable was set to null,
    while an undefined variable has no value assigned.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也是不同的：null变量意味着变量被设置为null，而undefined变量没有分配值。
- en: '[PRE34]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Understanding interfaces, classes, and generics in TypeScript
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解TypeScript中的接口、类和泛型
- en: '**Object-Oriented Programming** (**OOP**) is a very old programming concept,
    used in languages such as Java, C#, and many others.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向对象编程**（**OOP**）是一个非常古老的编程概念，用于诸如Java、C#和许多其他语言中。'
- en: One of the advantages of using TypeScript is being able to bring some of these
    concepts into your JavaScript web applications. In addition to being able to use
    classes, interfaces, and more, we can easily extend import classes and import
    modules, as we will see in the coming examples.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript的优势之一是能够将其中一些概念带入您的JavaScript Web应用程序中。除了能够使用类、接口等，我们还可以轻松扩展导入类和导入模块，正如我们将在接下来的示例中看到的那样。
- en: We know that using classes in pure JavaScript is already an option, with the
    use of ECMAScript 5\. Although it is similar, there are some differences; we will
    not address them in this chapter, so that we do not confuse our readers. We will
    only focus on the implementations adopted in TypeScript.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道在纯JavaScript中使用类已经是一个选项，使用ECMAScript 5。虽然它很相似，但也有一些区别；我们不会在本章中讨论它们，以免混淆我们的读者。我们只会专注于TypeScript中采用的实现。
- en: Creating a class
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个类
- en: 'The best way to understand classes in TypeScript is to create one. A simple
    class looks like the following code:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 理解TypeScript中的类的最佳方法是创建一个。一个简单的类看起来像以下代码：
- en: '[PRE35]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s create our first class:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个类：
- en: 'Open your text editor and create a new file, called `my-first-class.ts`, and
    add the following code:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的文本编辑器，创建一个名为`my-first-class.ts`的新文件，并添加以下代码：
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We added some comments to the previous code to facilitate understanding.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在以前的代码中添加了一些注释以便理解。
- en: A class can have as many methods as necessary. In the case of the previous class,
    we gave only one method, to list our favorite band albums. You can test this piece
    of code on your Terminal, passing any information that you want inside the new
    `MyBand()` constructor.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类可以有尽可能多的方法。在前一个类的情况下，我们只给出了一个方法，列出我们最喜欢的乐队专辑。您可以在终端上测试这段代码，将任何您想要的信息传递给新的`MyBand()`构造函数。
- en: This is pretty simple, and if you've had some contact with Java, C#, or even
    PHP, you will have already seen this class structure.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，如果您已经接触过Java、C#甚至PHP，您可能已经看到了这个类结构。
- en: 'Here, we can apply the inheritance (OOP) principle to our class. Let''s see
    how to do it:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以将继承（OOP）原则应用于我们的类。让我们看看如何做到这一点：
- en: 'Open the `band-class.ts` file and add the following code, right after the `console.log()`
    function:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`band-class.ts`文件，并在`console.log()`函数之后添加以下代码：
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In Angular, classes are very useful for defining components, as we will see
    in the [Chapter 3](55bf9899-fbc7-458e-b7f5-22be56951fe6.xhtml), *Understand the
    core concepts of Angular 6*.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，类非常有用于定义组件，正如我们将在[第3章](55bf9899-fbc7-458e-b7f5-22be56951fe6.xhtml)中看到的那样，*理解Angular
    6的核心概念*。
- en: Declaring an interface
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明一个接口
- en: Interfaces are our allies when we use TypeScript, since they do not exist in
    pure JavaScript. They are an efficient way of grouping and typing variables, ensuring
    that they are always together, maintaining consistent code.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用TypeScript时，接口是我们的盟友，因为它们在纯JavaScript中不存在。它们是一种有效的方式来对变量进行分组和类型化，确保它们始终在一起，保持一致的代码。
- en: 'Let''s look at a practical way to declare and use an interface:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个声明和使用接口的实际方法：
- en: 'In your text editor, create a new file called `band-interface.ts`, and add
    the following code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的文本编辑器中，创建一个名为`band-interface.ts`的新文件，并添加以下代码：
- en: '[PRE38]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: To use it, assign the interface to a function type, as in the following example.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用它，请将接口分配给函数类型，就像以下示例中那样。
- en: 'Add the following code right after the interface code, in the `band-interface.ts`
    file:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`band-interface.ts`文件中的接口代码之后添加以下代码：
- en: '[PRE39]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Note that here, we are using the `Band` interface to type our `function` parameter.
    So, when we try to use it, we need to keep the same structure in new objects,
    as in the following example:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这里，我们使用`Band`接口来为我们的`function`参数命名。因此，当我们尝试使用它时，我们需要在新对象中保持相同的结构，就像以下示例中的那样：
- en: '[PRE40]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note that you can execute all of the sample files by typing the command
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以通过键入以下命令来执行所有示例文件
- en: '`tsc band-interface.ts` and the `band-interface.js` node in your Terminal.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端中键入`tsc band-interface.ts`和`band-interface.js`节点。
- en: 'So, if you follow the preceding tip, you will see the same result in your Terminal
    window:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您遵循前面的提示，您将在终端窗口中看到相同的结果：
- en: '[PRE41]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As you can see, the interfaces in TypeScript are incredible; we can do a lot
    of things with them. Throughout the course of this book, we will look at some
    more examples of using interfaces in real web applications.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，TypeScript中的接口非常棒；我们可以用它们做很多事情。在本书的课程中，我们将看一些更多使用接口在实际Web应用程序中的例子。
- en: Creating generic functions
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建泛型函数
- en: '**Generics** are a very useful way of creating flexible classes and functions.
    They are very similar to those used in C#. It''s very useful to be used in more
    than one place.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**泛型**是创建灵活类和函数的非常有用的方式。它们与C#中使用的方式非常相似。它非常有用，可以在多个地方使用。'
- en: 'We can create generic functions by adding angle brackets after the function
    names and enclosing datatypes, as in the following example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在函数名称后添加尖括号并封装数据类型来创建泛型函数，就像以下示例中的示例一样：
- en: '[PRE42]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note that the `t` inside the angle brackets (`<t>`) means that `genericFunction()`
    is of the generic type.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尖括号内的`t`（`<t>`）表示`genericFunction()`是通用类型。
- en: 'Let''s see this in practice:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看实际操作：
- en: 'In your code editor, create a new file called `generics.ts`, and add the following
    code:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码编辑器中，创建一个名为`generics.ts`的新文件，并添加以下代码：
- en: '[PRE43]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Let's see what happens with our generic function.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的通用函数会发生什么。
- en: 'Go back to your Terminal and type the following command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到您的终端并输入以下命令：
- en: '[PRE44]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, let''s execute the file with the following command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令执行文件：
- en: '[PRE45]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We will see the following result:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下结果：
- en: '[PRE46]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note that the compiler is able to identify the datatype that we are passing
    as the `function` argument. In the first case, we explicitly pass the argument
    as a string, and in the second case, we pass nothing.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，编译器能够识别我们作为`function`参数传递的数据类型。在第一种情况下，我们明确将参数作为字符串传递，而在第二种情况下，我们不传递任何东西。
- en: 'Although the compiler is able to identify the type of argument that we are
    using, it is important to always determine what kind of data we are going to pass.
    For example:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管编译器能够识别我们使用的参数类型，但始终确定我们要传递的数据类型是非常重要的。例如：
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Working with modules
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块
- en: Modules are very important when developing large-scale applications with TypeScript.
    They allow us to import and export code, classes, interfaces, variables, and functions.
    These functions are extremely common in applications with Angular.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用TypeScript开发大型应用程序时，模块非常重要。它们允许我们导入和导出代码、类、接口、变量和函数。这些函数在Angular应用程序中非常常见。
- en: However, they can only be accomplished by using a library, which could be Require.js
    for the browser, or Common.js for Node.js.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它们只能通过使用库来实现，这可能是浏览器的Require.js，或者是Node.js的Common.js。
- en: In the following sections, we will illustrate how we can use these features
    in practice.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将说明如何在实践中使用这些特性。
- en: Using the class export feature
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类导出功能
- en: Any declaration can be exported, as we mentioned previously; to do so, we just
    need to add the `export` keyword. In the following example, we will export the
    `band` class.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 任何声明都可以被导出，正如我们之前提到的；要这样做，我们只需要添加`export`关键字。在下面的例子中，我们将导出`band`类。
- en: 'In your text editor, create a file called `export.ts`, and add the following
    code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的文本编辑器中，创建一个名为`export.ts`的文件，并添加以下代码：
- en: '[PRE48]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We will now have our `Myband` class available to be imported into another file.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`Myband`类可以被导入到另一个文件中了。
- en: Importing and using external classes
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和使用外部类
- en: 'An import can be accomplished with the keyword `import`, and can be declared
    in different ways, depending on what library you are using. An example of using
    Require.js is as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关键字`import`可以实现导入，并且可以根据您使用的库的不同方式进行声明。使用Require.js的示例如下：
- en: 'Go back to your text editor, create a file called `import.ts`, and add the
    following code:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回到您的文本编辑器，创建一个名为`import.ts`的文件，并添加以下代码：
- en: '[PRE49]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'An example of using Common.js is as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Common.js的示例如下：
- en: '[PRE50]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The second method has been adopted by the Angular team, because Angular uses
    Webpack, a module bundler building modern web applications.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种方法已被Angular团队采用，因为Angular使用Webpack，这是一个构建现代Web应用程序的模块捆绑器。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you saw the basic principles of TypeScript. We merely scratched
    the surface, but we provided you with a solid base for handling Angular applications
    using TypeScript.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您看到了TypeScript的基本原则。我们只是触及了表面，但是我们为您提供了一个处理使用TypeScript开发Angular应用程序的坚实基础。
- en: Throughout the course of this book, we will enhance your understanding as we
    advance with the creation of a web application.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，随着我们创建Web应用程序的进展，我们将增强您的理解。
