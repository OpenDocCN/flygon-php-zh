- en: Chapter 2. Building a To-do List with Ajax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。使用Ajax构建待办事项列表
- en: In this chapter, we will be using the Laravel PHP framework and jQuery to build
    a to-do list with Ajax.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Laravel PHP框架和jQuery来构建一个带有Ajax的待办事项列表。
- en: 'Through out this chapter, we''ll show you the basics of **RESTful controllers**,
    **RESTful routing**, and **Request types**. The list of topics covered in this
    chapter is as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您展示**RESTful控制器**、**RESTful路由**和**请求类型**的基础知识。本章涵盖的主题列表如下：
- en: Creating and migrating our to-do list's database
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和迁移待办事项列表的数据库
- en: Creating a to-do list's model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建待办事项列表的模型
- en: Creating the template
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模板
- en: Inserting data to the database with Ajax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ajax向数据库插入数据
- en: Retrieving the list from the database
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中检索列表
- en: How to allow only Ajax requests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何只允许Ajax请求
- en: Creating and migrating our to-do list's database
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移待办事项列表的数据库
- en: As you know from the previous chapter, migrations are very helpful to control
    development steps. We'll use migrations again in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从上一章所知，迁移对于控制开发步骤非常有帮助。我们将在本章再次使用迁移。
- en: 'To create our first migration, type the following command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第一个迁移，请输入以下命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When you run this command, **Artisan** will generate a migration to generate
    a database table named `todos`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此命令时，**Artisan**将生成一个迁移以生成名为`todos`的数据库表。
- en: Now we should edit the migration file for the necessary database table columns.
    When you open the folder `migration` in `app/database/` with a file manager, you
    will see the migration file under it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该编辑迁移文件以创建必要的数据库表列。当您用文件管理器打开`app/database/`中的`migration`文件夹时，您会看到其中的迁移文件。
- en: 'Let''s open and edit the file as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式打开并编辑文件：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To build a simple to-do list, we need five columns:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个简单的待办事项列表，我们需要五列：
- en: The `id` column will store ID numbers of to-do tasks
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`列将存储待办任务的ID编号'
- en: The `title` column will store a to-do task's title
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`列将存储待办任务的标题'
- en: The `status` column will store the status of each task
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`列将存储每个任务的状态'
- en: The `created_at` and `updated_at` columns will store the created and updated
    dates of tasks
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_at`和`updated_at`列将存储任务的创建和更新日期'
- en: If you write `$table->timestamps()` in the migration file, Laravel's `migration`
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在迁移文件中写入`$table->timestamps()`，Laravel的`migration`
- en: 'class automatically creates `created_at` and `updated_at` columns. As you know
    from [Chapter 1](ch01.html "Chapter 1. Building a URL Shortener Website"), *Building
    a URL Shortener Website*, to apply migrations, we should run the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 类会自动创建`created_at`和`updated_at`列。正如您从[第1章](ch01.html "第1章。构建URL缩短网站")中所知，*构建URL缩短网站*，要应用迁移，我们应该运行以下命令：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After the command is run, if you check your database, you will see that our
    `todos` table and columns have been created. Now we need to write our model.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令后，如果您检查数据库，您会看到我们的`todos`表和列已经创建。现在我们需要编写我们的模型。
- en: Creating a todos model
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个待办事项模型
- en: 'To create a model, you should open the `app/models/` directory with your file
    manager. Create a file named `Todo.php` under the directory and write the following
    code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个模型，您应该用文件管理器打开`app/models/`目录。在该目录下创建一个名为`Todo.php`的文件，并编写以下代码：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's examine the `Todo.php` file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下`Todo.php`文件。
- en: As you see, our `Todo` class extends an `Eloquent` model, which is the **ORM**
    (**Object Relational Mapper**) database class of Laravel.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的`Todo`类扩展了Laravel的**ORM**（**对象关系映射器**）数据库类`Eloquent`。
- en: The `protected $table = 'todos';` code tells `Eloquent` about our model's table
    name. If we don't set the `table` variable, `Eloquent` accepts the plural version
    of the lower case model name as the table name. So this isn't required technically.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`protected $table = ''todos'';`代码告诉`Eloquent`关于我们模型的表名。如果我们不设置`table`变量，`Eloquent`会接受小写模型名称的复数版本作为表名。因此，从技术上讲这并不是必需的。'
- en: Now, our application needs a template file, so let's create it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的应用程序需要一个模板文件，所以让我们创建它。
- en: Creating the template
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模板
- en: Laravel uses a template engine that is called **Blade** for static and application
    template files. Laravel calls the template files from the `app/views/` directory,
    so we need to create our first template under this directory.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel使用一个名为**Blade**的模板引擎来处理静态和应用程序模板文件。Laravel从`app/views/`目录调用模板文件，因此我们需要在该目录下创建我们的第一个模板。
- en: Create a file with the name `index.blade.php`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index.blade.php`的文件。
- en: 'The file contains the following code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件包含以下代码：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code may be difficult to understand if you're writing a Blade
    template for the first time, so we'll try to examine it. You see a `foreach` loop
    in the file. This statement loops our `todo` records.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次编写Blade模板，上面的代码可能很难理解，所以我们将尝试解释一下。您会在文件中看到一个`foreach`循环。这个语句循环遍历我们的`todo`记录。
- en: We will provide you with more knowledge about it when we are creating our controller
    in this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中创建控制器时，我们将为您提供更多关于它的知识。
- en: '`If` and `else` statements are used for separating finished and waiting tasks.
    We use `if` and `else` statements for styling the tasks.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`和`else`语句用于区分已完成和待办任务。我们使用`if`和`else`语句来为任务设置样式。'
- en: 'We need one more template file for appending new records to the task list on
    the fly. Create a file with the name `ajaxData.blade.php` under the `app/views/`
    folder. The file contains the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个模板文件，用于动态向任务列表追加新记录。在`app/views/`文件夹下创建一个名为`ajaxData.blade.php`的文件。文件包含以下代码：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Also, you will see the `/assets/` directory in the source path of static files.
    When you look at the `app/views` directory, there is no directory named `assets`.
    Laravel separates the system and public files. Public accessible files stay under
    your `public` folder in `root`. So you should create a directory under your public
    folder for `asset` files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您会在静态文件的源路径中看到`/assets/`目录。当您查看`app/views`目录时，您会发现没有名为`assets`的目录。Laravel将系统文件和公共文件分开。公共可访问文件位于`root`目录下的`public`文件夹中。因此，您应该在公共文件夹下创建一个`asset`文件夹。
- en: We recommend working with these types of organized folders for developing tidy
    and easy-to-read code. Finally, you will see that we are calling jQuery from its
    main website. We also recommend this way for getting the latest, stable jQuery
    in your application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用这些类型的有组织的文件夹来开发整洁易读的代码。最后，您会发现我们是从jQuery的主网站调用的。我们还建议您以这种方式在应用程序中获取最新的稳定的jQuery。
- en: You can style your application as you wish, hence we'll not examine styling
    code here. We are putting our `style.css` files under `/public/assets/css/`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据自己的意愿为应用程序设置样式，因此我们不会在这里检查样式代码。我们将把我们的`style.css`文件放在`/public/assets/css/`下。
- en: 'For performing Ajax requests, we need JavaScript coding. This code posts our
    `add_task` and `edit_task` forms, and updates them when our tasks are completed.
    Let''s create a JavaScript file with the name `todo.js` in `/public/assets/js/`.
    The files contain the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行Ajax请求，我们需要JavaScript编码。这段代码发布了我们的`add_task`和`edit_task`表单，并在任务完成时更新它们。让我们在`/public/assets/js/`中创建一个名为`todo.js`的JavaScript文件。文件包含以下代码：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's examine the JavaScript file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查JavaScript文件。
- en: Inserting data to the database with Ajax
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ajax将数据插入到数据库
- en: In this application, we'll use the **Ajax POST** method for inserting data to
    the database. jQuery is the best JavaScript framework for these kinds of applications.
    jQuery also comes with powerful selector functions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们将使用**Ajax POST**方法将数据插入到数据库中。jQuery是这类应用程序的最佳JavaScript框架。jQuery还带有强大的选择器功能。
- en: We have two forms in our HTML code, so we need to post them with Ajax to insert
    or update the data. We'll do it with jQuery's `post()` method.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的HTML代码中有两个表单，所以我们需要使用Ajax提交它们来插入或更新数据。我们将使用jQuery的`post()`方法来实现。
- en: 'We''ll serve our JavaScript files under `/public/assets/js`, so let''s create
    a `todo.js` file under this directory. First we need a request to add new tasks.
    The JavaScript code contains the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`/public/assets/js`下提供我们的JavaScript文件，因此让我们在该目录下创建一个`todo.js`文件。首先，我们需要一个请求来添加新任务。JavaScript代码包含以下代码：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code posts our `add_task` form to the server if the user remembers to provide
    a title to the task. If the user forgets to provide a title to the task, the code
    does not post the form. After it is posted, the code will hide the form and append
    the task list with a new record. Meanwhile, we will be waiting for the response
    to get the data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户记得为任务提供标题，这段代码将把我们的`add_task`表单发布到服务器。如果用户忘记为任务提供标题，代码将不会发布表单。发布后，代码将隐藏表单并向任务列表附加一个新记录。同时，我们将等待响应以获取数据。
- en: 'So we need a second form to update a task''s title. The code will update the
    task''s title and change the text of updated records via Ajax on-the-fly. On-the-fly
    programming (or live coding) is a style of programming in which the programmer/performer/composer
    augments and modifies the program while it is running, without stopping or restarting,
    in order to assert expressive, programmable control for performance, composition,
    and experimentation at runtime. Because of the fundamental powers of programming
    languages, we believe the technical and aesthetic aspects of on-the-fly programming
    are worth exploring in web applications. The update form''s code should be as
    follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要第二个表单来更新任务的标题。代码将通过Ajax实时更新任务的标题，并更改更新记录的文本。实时编程（或现场编码）是一种编程风格，程序员/表演者/作曲家在程序运行时增加和修改程序，而无需停止或重新启动，以在运行时断言表达式、可编程控制性能、组合和实验。由于编程语言的基本功能，我们相信实时编程的技术和美学方面值得在Web应用程序中探索。更新表单的代码应该如下：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Laravel has the RESTful controller feature. This means you can define the RESTful
    base of the routes and controller functions. Also, routes can be defined for different
    request types such as **POST**, **GET**, **PUT**, or **DELETE**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel具有RESTful控制器功能。这意味着您可以定义路由和控制器函数的RESTful基础。此外，可以为不同的请求类型（如**POST**、**GET**、**PUT**或**DELETE**）定义路由。
- en: 'Before defining the routes, we need to code our controller. The controller
    files stay under `app/controllers/`; create a file in it named `TodoController.php`.
    The controller code should be as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义路由之前，我们需要编写我们的控制器。控制器文件位于`app/controllers/`下；在其中创建一个名为`TodoController.php`的文件。控制器代码应该如下：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's examine the code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查代码。
- en: As you can see in the code, RESTful functions define syntaxes such as `postFunction`,
    `getFunction`, `putFunction`, or `deleteFunction`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在代码中所看到的，RESTful函数定义了诸如`postFunction`、`getFunction`、`putFunction`或`deleteFunction`之类的语法。
- en: We have two post forms, so we need two POST functions and one GET method to
    get records from the database and show them in the template in the `foreach` statement
    to the visitor.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个提交表单，所以我们需要两个POST函数和一个GET方法来从数据库中获取记录，并在`foreach`语句中在模板中向访问者显示它们。
- en: 'Let''s examine the `postUpdate()` method in the preceding code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查前面的代码中的`postUpdate()`方法：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following points explain the preceding code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几点解释了前面的代码：
- en: The method needs a record called `id` to update. The route where we post would
    be similar to `/update/record_id`.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该方法需要一个名为`id`的记录来更新。我们提交的路由将类似于`/update/record_id`。
- en: '`$task = Todo::find($id);` is that part of the method which finds the record
    from the database which has the given `id`.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$task = Todo::find($id);`是从数据库中查找具有给定`id`的记录的方法的一部分。'
- en: '`$task->title = Input::get("title");` means to get the value of the form element
    named `title` and updating the `title` column record as the posted value.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$task->title = Input::get("title");`意味着获取名为`title`的表单元素的值，并将`title`列的记录更新为发布的值。'
- en: '`$task->save();` applies the changes and runs the update query on the database
    server.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$task->save();`应用更改并在数据库服务器上运行更新查询。'
- en: 'Let''s examine the `postAdd()` method. This method works like our `getIndex()`
    method. The first part of the code creates a new record on the database server:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`postAdd()`方法。这个方法的工作方式类似于我们的`getIndex()`方法。代码的第一部分在数据库服务器上创建一个新记录：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following points explain the preceding code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几点解释了前面的代码：
- en: The code line `$last_todo = $todo->id;` gets the ID of this record. It is equivalent
    to the `mysql_insert_id()` function.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码行`$last_todo = $todo->id;`获取了这条记录的ID。它相当于`mysql_insert_id()`函数。
- en: The code line `$todos = Todo::whereId($last_todo)->get();` fetches the record
    from the `todo` table which has an `id` column equal to `$last_todo` variable.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码行`$todos = Todo::whereId($last_todo)->get();`从具有`id`列等于`$last_todo`变量的`todo`表中获取记录。
- en: 'The code line `View::make("ajaxData") ->with("todos", $todos);` is very important
    to understand Laravel''s view mechanism:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码行`View::make("ajaxData") ->with("todos", $todos);`非常重要，以了解Laravel的视图机制：
- en: The code line `View::make("ajaxData")` refers to our template file. Do you remember
    the `ajaxData.blade.php` file, which we created under `/app/views/`? The code
    calls this file.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码行`View::make("ajaxData")`指的是我们的模板文件。你还记得我们在`/app/views/`下创建的`ajaxData.blade.php`文件吗？代码调用了这个文件。
- en: The code line `->with("todos", $todos);` assigns the last record to the template
    file as a variable named `todos` (the first parameter). So, we can show the last
    record in the template file with the `foreach` loop.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码行`->with("todos", $todos);`将最后一条记录分配给模板文件，作为名为`todos`的变量（第一个参数）。因此，我们可以使用`foreach`循环在模板文件中显示最后一条记录。
- en: Retrieving the list from the database
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库中检索列表
- en: 'We also need a method for getting the existing data from our database server.
    In our controller file, we need the function as shown in the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一种方法来从我们的数据库服务器中获取现有数据。在我们的控制器文件中，我们需要如下所示的函数：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s examine the `getIndex()` method:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下`getIndex()`方法：
- en: In the code, `$todos = Todo:all()` means to get all records from the database
    and assign them to the `$todos` variable.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代码中，`$todos = Todo:all()`表示从数据库中获取所有记录并将它们分配给`$todos`变量。
- en: In the code, `View::make("index")` defines our template file. Did you remember
    the `index.blade.php file`, which we created under `/app/views/`? The code calls
    this file.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代码中，`View::make("index")`定义了我们的模板文件。你还记得我们在`/app/views/`下创建的`index.blade.php`文件吗？代码调用了这个文件。
- en: In the code, `->with("todos", $todos);` assigns the records to the template
    file. So, we can show the records in the template file with the `foreach` loop.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在代码中，`->with("todos", $todos);`将记录分配给模板文件。因此，我们可以使用`foreach`循环在模板文件中显示记录。
- en: 'Finally, we will define our routes. For defining routes, you should open the
    `routes.php` file in the `apps` folder. Laravel has a great feature for defining
    routes named the RESTful controller. You can define all the routes with a single
    line of code as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将定义我们的路由。要定义路由，您应该在`apps`文件夹中打开`routes.php`文件。Laravel有一个很好的功能，用于定义名为RESTful控制器的路由。您可以使用一行代码定义所有路由，如下所示：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code assigns all the applications'' root-based requests to the
    `TodoController` function. If you need to, you can also define the routes manually
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将所有应用程序基于根的请求分配给`TodoController`函数。如果需要，您也可以手动定义路由，如下所示：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to allow only Ajax requests
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何仅允许Ajax请求
- en: Our application accepts all POST and GET requests even without Ajax. But we
    just need to allow an Ajax request for `add` and `update` functions. Laravel's
    `Request` class provides many methods for examining the HTTP request for your
    applications. One of these functions is named `ajax()`. We can check the request
    type under controllers or route filters.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序甚至可以在没有Ajax的情况下接受所有POST和GET请求。但我们只需要允许`add`和`update`函数的Ajax请求。Laravel的`Request`类为您的应用程序提供了许多检查HTTP请求的方法。其中一个函数名为`ajax()`。我们可以在控制器或路由过滤器下检查请求类型。
- en: Allowing the request using route filters
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用路由过滤器允许请求
- en: 'Route filters provide a convenient way of limiting, accessing, or filtering
    the requests to a given route. There are several filters included in Laravel,
    which are located in the `filters.php` file in the `app` folder. We can define
    our custom filter under this file. We''ll not use this method in this chapter,
    but we''ll examine route filters in further chapters. The route filter for an
    Ajax request should be as shown in the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 路由过滤器提供了一种方便的方式来限制、访问或过滤给定路由的请求。Laravel中包含了几个过滤器，这些过滤器位于`app`文件夹中的`filters.php`文件中。我们可以在这个文件下定义我们自定义的过滤器。我们将不在本章中使用这种方法，但我们将在后续章节中研究路由过滤器。用于Ajax请求的路由过滤器应该如下所示的代码所示：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Attaching a filter to a route is also very easy. Check the sample route shown
    in the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将过滤器附加到路由也非常容易。检查以下代码中显示的示例路由：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding example, we defined a route filter to the route with the `before`
    variable. This means, our application first checks the request type and then calls
    the controller function and passes the data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们为具有`before`变量的路由定义了一个路由过滤器。这意味着我们的应用首先检查请求类型，然后调用控制器函数并传递数据。
- en: Allowing the request using the controller side
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用控制器端允许请求
- en: 'We can check for the request type under controller. We''ll use this method
    in this section. This method is useful for function-based filtering. For doing
    this, we should change our `add` and `update` functions as shown in the following
    code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在控制器下检查请求类型。我们将在本节中使用这种方法。这种方法对于基于函数的过滤非常有用。为此，我们应该按照以下代码所示更改我们的`add`和`update`函数：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Wrapping up
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we coded to add a new task, updated it, and listed the tasks.
    We also need to update each status and delete the tasks. For doing that, we need
    two functions that are called `getDone()` and `getDelete()`. As you know from
    previous sections of this chapter, these functions are RESTful and accept GET
    method requests. So, our function should be as shown in the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们编写了添加新任务的代码，更新了它，并列出了任务。我们还需要更新每个状态并删除任务。为此，我们需要两个名为`getDone()`和`getDelete()`的函数。正如你从本章的前几节中所了解的那样，这些函数是RESTful的，并接受GET方法请求。因此，我们的函数应该如下所示的代码所示：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We also need to update the `todo.js` file. The final JavaScript code should
    be as shown in the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更新`todo.js`文件。最终的JavaScript代码应该如下所示的代码所示：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this section we tried to understand how to use Ajax with Laravel. Throughout
    the chapter, we used the basics of templating, request filtering, routing, and
    RESTful controllers. We also learned to update and delete data from our database.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们试图了解如何在Laravel中使用Ajax。在整个章节中，我们使用了模板化、请求过滤、路由和RESTful控制器的基础知识。我们还学会了如何从数据库中更新和删除数据。
- en: In the next chapter we'll try to examine Laravel's file validation and file
    processing methods.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将尝试检查Laravel的文件验证和文件处理方法。
