["```php\n<?php   class Registry {\n  private\n  $registry = [];    public\n function get($key)\n {  if (isset($this->registry[$key])) {\n  return $this->registry[$key];\n }  return null;\n }    public\n function set($key, $value, $graceful = false)\n {  if (isset($this->registry[$key])) {\n  if ($graceful) {\n  return;\n }  throw new \\RuntimeException('Registry key \"' . $key . '\"already exists');\n }  $this->registry[$key] = $value;\n }    public\n function remove($key)\n {  if (isset($this->registry[$key])) {\n  unset($this->registry[$key]);\n } }    public\n function __destruct()\n {  $keys = array_keys($this->registry);\n  array_walk($keys, [$this, 'remove']);\n } }   // Client use class User {\n  public $name; }   $user1 = new User(); $user1->name = 'John'; $user2 = new User(); $user2->name = 'Marc';   $registry = new Registry(); $registry->set('employee', $user1); $registry->set('director', $user2); echo $registry->get('director')->name; // Marc\n\n```", "```php\n<?php   class Logger {\n  private static $instance;    const TYPE_ERROR = 'error';\n  const TYPE_WARNING = 'warning';\n  const TYPE_NOTICE = 'notice';    protected function __construct()\n {  // empty?!\n  }    private function __clone()\n {  // empty?!\n  }    private function __wakeup()\n {  // empty?!\n  }    public static function getInstance()\n {  if (!isset(self::$instance)) {\n  // late static binding\n  self::$instance = new self;\n }  return self::$instance;\n }    public function log($type, $message)\n {  return sprintf('Logging %s: %s', $type, $message);\n } }   // Client use echo Logger::getInstance()->log(Logger::TYPE_NOTICE, 'test');\n\n```", "```php\n<?php   class Logger {\n  public $channel = 'N/A'; }   class SystemLogger extends Logger {\n  public function __construct()\n {  $this->channel = 'STDIN';\n }    public function log($data)\n {  return sprintf('Logging %s to %s.', $data, $this->channel);\n }    public function __clone()\n {  /* additional changes for (after)clone behavior? */\n  } }   // Client use $systemLogger = new SystemLogger(); echo $systemLogger->log('test');   $logger = clone $systemLogger; echo $logger->log('test2');   $logger->channel = 'mail'; echo $logger->log('test3');   // Logging test to STDIN. // Logging test2 to STDIN. // Logging test3 to mail.\n\n```", "```php\n<?php   interface Button {\n  public function render(); }   interface FormFactory {\n  public function createButton(); }   class LoginButton implements Button {\n  public function render()\n {  return '<button name=\"login\">Login</button>';\n } }   class RegisterButton implements Button {\n  public function render()\n {  return '<button name=\"register\">Register</button>';\n } }   class LoginFactory implements FormFactory {\n  public function createButton()\n {  return new LoginButton();\n } }   class RegisterFactory implements FormFactory {\n  public function createButton()\n {  return new RegisterButton();\n } }   // Client $loginButtonFactory = new LoginFactory(); $button = $loginButtonFactory->createButton(); echo $button->render();   $registerButtonFactory = new RegisterFactory(); $button = $registerButtonFactory->createButton(); echo $button->render();\n\n```", "```php\n<?php   class Image {\n  private $width;\n  private $height;    public function getWidth()\n {  return $this->width;\n }    public function setWidth($width)\n {  $this->width = $width;\n  return $this;\n }    public function getHeight()\n {  return $this->height;\n }    public function setHeight($height)\n {  $this->height = $height;\n  return $this;\n } }   interface ImageBuilderInterface {\n  public function setWidth($width);    public function setHeight($height);    public function getResult(); }   class ImageBuilder implements ImageBuilderInterface {\n  private $image;    public function __construct()\n {  $this->image = new Image();\n }    public function setWidth($width)\n {  $this->image->setWidth($width);\n  return $this;\n }    public function setHeight($height)\n {  $this->image->setHeight($height);\n  return $this;\n }    public function getResult()\n {  return $this->image;\n } }   class ImageBuildDirector {\n  private $builder;    public function __construct(ImageBuilder $builder)\n {  $this->builder = $builder;\n }    public function build()\n {  $this->builder->setWidth(120);\n  $this->builder->setHeight(80);\n  return $this;\n }    public function getImage()\n {  return $this->builder->getResult();\n } }   // Client use $imageBuilder = new ImageBuilder(); $imageBuildDirector = new ImageBuildDirector($imageBuilder); $image = $imageBuildDirector->build()->getImage();   var_dump($image); // object(Image)#2 (2) { [\"width\":\"Image\":private]=> int(120) [\"height\":\"Image\":private]=> int(80) }\n\n```", "```php\n<?php     class ObjectPool {\n  private $instances = [];    public function load($key)\n {  return $this->instances[$key];\n }    public function save($object, $key)\n {  $this->instances[$key] = $object;\n } }   class User {\n  public function hello($name)\n {  return 'Hello ' . $name;\n } }   // Client use $pool = new ObjectPool();   $user = new User(); $key = spl_object_hash($user);   $pool->save($user, $key);   // code...   $user = $pool->load($key); echo $user->hello('John');\n\n```", "```php\n<?php   interface ShipmentStrategy {\n  public function calculate($amount); }   class UPSShipment implements ShipmentStrategy {\n  public function calculate($amount)\n {  return 'UPSShipment...';\n } }   class FedExShipment implements ShipmentStrategy {\n  public function calculate($amount)\n {  return 'FedExShipment...';\n } }   class Checkout {\n  private $amount = 0;    public function __construct($amount = 0)\n {  $this->amount = $amount;\n }    public function estimateShipment()\n {  if ($this->amount > 199.99) {\n  $shipment = new FedExShipment();\n } else {\n  $shipment = new UPSShipment();\n }    return $shipment->calculate($this->amount);\n } }   // Client use $checkout = new Checkout(19.99); echo $checkout->estimateShipment(); // UPSShipment...   $checkout = new Checkout(499.99); echo $checkout->estimateShipment(); // FedExShipment...\n\n```", "```php\n<?php   class CheckoutSuccess implements \\SplSubject {\n  protected $salesOrder;\n  protected $observers;    public function __construct($salesOrder)\n {  $this->salesOrder = $salesOrder;\n  $this->observers = new \\SplObjectStorage();\n }    public function attach(\\SplObserver $observer)\n {  $this->observers->attach($observer);\n }    public function detach(\\SplObserver $observer)\n {  $this->observers->detach($observer);\n }    public function notify()\n {  foreach ($this->observers as $observer) {\n  $observer->update($this);\n } }    public function getSalesOrder()\n {  return $this->salesOrder;\n } }   class SalesOrder { }   class Mailer implements \\SplObserver {\n  public function update(\\SplSubject $subject)\n {  echo 'Mailing ', get_class($subject->getSalesOrder()), PHP_EOL;\n } }   class Logger implements \\SplObserver {\n  public function update(\\SplSubject $subject)\n {  echo 'Logging ', get_class($subject->getSalesOrder()), PHP_EOL;\n } }   $salesOrder = new SalesOrder(); $checkoutSuccess = new CheckoutSuccess($salesOrder); // some code... $checkoutSuccess->attach(new Mailer()); // some code... $checkoutSuccess->attach(new Logger()); // some code... $checkoutSuccess->notify();\n\n```", "```php\nPHP Fatal error: Declaration of Logger::update(CheckoutSuccess $subject) must be compatible with SplObserver::update(SplSubject $SplSubject)\n\n```", "```php\n<?php   interface PdfInterface {\n  public function generate(); }   class Pdf implements PdfInterface {\n  private $data;    public function __construct($data)\n {  $this->data = $data;\n  // Imagine resource intensive pdf generation here\n  sleep(3);\n }    public function generate()\n {  echo 'pdf: ' . $this->data;\n } }   class ProxyPdf implements PdfInterface {\n  private $pdf = null;\n  private $data;    public function __construct($data)\n {  $this->data = $data;\n }    public function generate()\n {  if (is_null($this->pdf)) {\n  $this->pdf = new Pdf($this->data);\n }  $this->pdf->generate();\n } }   // Client $pdf = new Pdf('<h1>Hello</h1>'); // 3 seconds // Some other code ... $pdf->generate();   $pdf = new ProxyPdf('<h1>Hello</h1>'); // 0 seconds // Some other code ... $pdf->generate();\n\n```", "```php\n<?php   abstract class Logger {\n  private $logNext = null;    public function logNext(Logger $logger)\n {  $this->logNext = $logger;\n  return $this->logNext;\n }    final public function push($message)\n {  $this->log($message);    if ($this->logNext !== null) {\n  $this->logNext->push($message);\n } }    abstract protected function log($message); }   class SystemLogger extends Logger {\n  public function log($message)\n {  echo 'SystemLogger log!', PHP_EOL;\n } }   class ElasticLogger extends Logger {\n  protected function log($message)\n {  echo 'ElasticLogger log!', PHP_EOL;\n } }   class MailLogger extends Logger {\n  protected function log($message)\n {  echo 'MailLogger log!', PHP_EOL;\n } }   // Client use $systemLogger  = new SystemLogger(); $elasticLogger = new ElasticLogger(); $mailLogger = new MailLogger();   $systemLogger   ->logNext($elasticLogger)\n ->logNext($mailLogger);   $systemLogger->push('Stuff to log...');   //SystemLogger log! //ElasticLogger log! //MailLogger log!\n\n```", "```php\n<?php   interface LoggerInterface {\n  public function log($message); }   class Logger implements LoggerInterface {\n  public function log($message)\n {  file_put_contents('app.log', $message . PHP_EOL, FILE_APPEND);\n } }   abstract class LoggerDecorator implements LoggerInterface {\n  protected $logger;    public function __construct(Logger $logger)\n {  $this->logger = $logger;\n }    abstract public function log($message); }   class ErrorLogger extends LoggerDecorator {\n  public function log($message)\n {  $this->logger->log('ErrorLogger: ' . $message);\n } }   class WarningLogger extends LoggerDecorator {\n  public function log($message)\n {  $this->logger->log('WarningLogger: ' . $message);\n } }   class NoticeLogger extends LoggerDecorator {\n  public function log($message)\n {  $this->logger->log('NoticeLogger: ' . $message);\n } }   // Client use (new Logger())->log('Test Logger.');   (new ErrorLogger(new Logger()))->log('Test ErrorLogger.');   (new WarningLogger(new Logger()))->log('Test WarningLogger.');   (new NoticeLogger(new Logger()))->log('Test NoticeLogger.');\n\n```", "```php\nTest Logger.\nErrorLogger: Test ErrorLogger.\nWarningLogger: Test WarningLogger.\nNoticeLogger: Test NoticeLogger.\n\n```"]