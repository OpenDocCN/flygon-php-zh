["```php\n**$ apt-get install libmzq-dev**\n**$ pecl install zmq-beta**\n\n```", "```php\nFROM php:7 \nRUN apt-get update && apt-get install -y libzmq-dev \nRUN docker-php-ext-configure pcntl && \\ \n    docker-php-ext-install pcntl && \\ \n    pecl install ev-beta && docker-php-ext-enable ev && \\ \n    pecl install zmq-beta && docker-php-ext-enable zmq \nWORKDIR /opt/app \nONBUILD ADD . /opt/app \nCMD [\"/usr/local/bin/php\", \"server.php\"] \n\n```", "```php\n{ \n  \"name\": \"packt-php7/chp7-inventory\", \n  \"type\": \"project\", \n  \"authors\": [{ \n    \"name\": \"Martin Helmich\", \n    \"email\": \"php7-book@martin-helmich.de\" \n  }], \n  \"require\": { \n    \"php\": \">= 7.0\", \n    \"ext-zmq\": \"*\" \n  }, \n  \"autoload\": { \n    \"psr-4\": { \n      \"Packt\\\\Chp7\\\\Inventory\": \"src/\" \n    } \n  } \n} \n\n```", "```php\n$args = getopt('p:', ['port=']); \n$ctx = new ZMQContext(); \n\n$port = $args['p'] ?? $args['port'] ?? 5557; \n$addr = 'tcp://*:' . $port; \n\n$sock = $ctx->getSocket(ZMQ::SOCKET_REP); \n$sock->bind($addr); \n\n```", "```php\nwhile($message = $sock->recv()) { \n    echo \"received message '\" . $message . \"'\\n\"; \n    $sock->send(\"this is my response message\"); \n} \n\n```", "```php\n$args = getopt('h', ['host=']); \n$ctx = new ZMQContext(); \n\n$addr = $args['h'] ?? $args['host'] ?? 'tcp://127.0.0.1:5557'; \n\n$sock = $ctx->getSocket(ZMQ::SOCKET_REQ); \n$sock->connect($addr); \n\n$sock->send(\"This is my request\"); \nvar_dump($sock->recv()); \n\n```", "```php\ninventory: \n  build: inventory \n  ports: \n    - 5557 \n  volumes: \n    - inventory:/usr/src/app \n\n```", "```php\n**$ docker-compose up**\n\n```", "```php\n{ \n  \"jsonrpc\": \"2.0\", \n  \"method\": \"methodName\", \n  \"params\": [\"foo\", \"bar\", \"baz\"], \n  \"id\": \"some-random-id\" \n} \n\n```", "```php\n{ \n  \"jsonrpc\": \"2.0\", \n  \"id\": \"id from request\", \n  \"result\": \"the result value\" \n} \n\n```", "```php\n{ \n  \"jsonrpc\": \"2.0\", \n  \"id\": \"id from request\", \n  \"error\": { \n    \"message\": \"the error message\", \n    \"code\": 1234 \n  } \n} \n\n```", "```php\nnamespace Packt\\Chp7\\Inventory; \n\nclass JsonRpcServer \n{ \n    private $socket; \n    private $server; \n\n    public function __construct(\\ZMQSocket $socket, $server) \n    { \n        $this->socket = $socket; \n        $this->server = $server; \n    } \n} \n\n```", "```php\npublic function run() \n{ \n    while ($msg = $this->socket->recv()) { \n        $resp = $this->handleMessage($msg); \n        $this->socket->send($resp); \n    } \n} \n\n```", "```php\nprivate function handleMessage(string $req): string { \n    $json   = json_decode($req); \n    $method = [$this->server, $json->method]; \n\n    if (is_callable($method)) { \n        $result = call_user_func_array($method, $json->params ?? []); \n        return json_encode([ \n            'jsonrpc' => '2.0, \n            'id'      => $json->id, \n            'result'  => $result \n        ]); \n    } else { \n        return json_encode([ \n            'jsonrpc' => '2.0', \n            'id'      => $json->id, \n            'error'   => [ \n                'message' => 'uncallable method ' . $json->method, \n                'code'    => -32601 \n            ] \n        ]); \n    } \n} \n\n```", "```php\nprivate function handleMessage(string $req): string { \n    $json   = json_decode($req); \n **if (json_last_error()) {** \n **return json_encode([** \n **'jsonrpc' => '2.0',** \n **'id'      => null,** \n **'error'   => [** \n **'message' => 'invalid json: ' .\njson_last_error_msg(),** \n **'code'    => -32700** \n **]** \n **]);** \n **}** \n\n    // ... \n} \n\n```", "```php\nif (is_callable($method)) { \n **try {** \n        $result = call_user_func_array($method, $json->params ?? []); \n        return json_encode(/* ... */); \n **} catch (\\Throwable $t) {** \n **return json_encode([** \n **'jsonrpc' => '2.0',** \n **'id'      => $json->id,** \n **'error'   => [** \n **'message' => $t->getMessage(),** \n **'code'    => $t->getCode()** \n **]** \n **]);** \n **}** \n} else { // ... \n\n```", "```php\nnamespace Packt\\Chp7\\Inventory\\InventoryService; \n\nclass InventoryService \n{ \n    private $stock = [ \n        1000 => 123, \n        1001 => 4, \n        1002 => 12 \n    ]; \n\n    public function checkArticle(int $articleNumber, int $amount = 1): bool \n    { \n        if (!array_key_exists($articleNumber, $this->stock)) { \n            return false; \n        } \n        return $this->stock[$articleNumber] >= $amount; \n    } \n\n    public function takeArticle(int $articleNumber, int $amount = 1): bool \n    { \n        if (!$this->checkArticle($articleNumber, $amount) { \n            return false; \n        } \n\n        $this->stock[$articleNumber] -= $amount; \n        return true; \n    } \n} \n\n```", "```php\n$args = getopt('p:', ['port=']); \n$ctx = new ZMQContext(); \n\n$port = $args['p'] ?? $args['port'] ?? 5557; \n$addr = 'tcp://*:' . $port; \n\n$sock = $ctx->getSocket(ZMQ::SOCKET_REP); \n$sock->bind($addr); \n\n**$service = new \\Packt\\Chp7\\Inventory\\InventoryService();** \n**$server = new \\Packt\\Chp7\\Inventory\\JsonRpcServer($sock, $service);** \n**$server->run();**\n\n```", "```php\n// ... \n\n$msg = [ \n    'jsonrpc' => '2.0', \n    'method'  => 'takeArticle', \n    'params'  => [1001, 2] \n]; \n\n$sock->send(json_encode($msg)); \n$response = json_decode($sock->recv()); \n\nif (isset($response->error)) { \n    // handle error... \n} else { \n    $success = $reponse->result; \n    var_dump($success); \n} \n\n```", "```php\nrequire 'vendor/autoload.php'; \n\nuse Packt\\Chp7\\Inventory\\InventoryService; \nuse Packt\\Chp7\\Inventory\\JsonRpcServer; \n\nfunction worker() \n{ \n    $ctx = new ZMQContext(); \n\n    $sock = $ctx->getSocket(ZMQ::SOCKET_REP); \n    $sock->connect('ipc://workers.ipc'); \n\n    $service = new InventoryService(); \n\n    $server = new JsonRpcServer($sock, $service); \n    $server->run(); \n} \n\n```", "```php\nfor ($i = 0; $i < 4; $i ++) { \n    $pid = pcntl_fork(); \n    if ($pid == 0) { \n        worker($i); \n        exit(); \n    } \n} \n\n```", "```php\n$args = getopt('p:', ['port=']); \n$ctx = new ZMQContext(); \n\n$port = $args['p'] ?? $args['port'] ?? 5557; \n$addr = 'tcp://*:' . $port; \n\n$ctx = new ZMQContext(); \n\n//  Socket to talk to clients \n$clients = $ctx->getSocket(ZMQ::SOCKET_ROUTER); \n$clients->bind($addr); \n\n//  Socket to talk to workers \n$workers = $ctx->getSocket(ZMQ::SOCKET_DEALER); \n$workers->bind(\"ipc://workers.ipc\"); \n\n```", "```php\n//  Connect work threads to client threads via a queue \n$device = new ZMQDevice($clients, $workers); \n$device->run(); \n\n```", "```php\n{ \n **\"name\": \"packt-php7/chp7-checkout\",** \n  \"type\": \"project\", \n  \"authors\": [{ \n    \"name\": \"Martin Helmich\", \n    \"email\": \"php7-book@martin-helmich.de\" \n  }], \n  \"require\": { \n    \"php\": \">= 7.0\", \n **\"react/zmq\": \"^0.3.0\",** \n **\"react/promise\": \"^2.2\",** \n    \"ext-zmq\": \"*\", \n **\"ext-ev\": \"*\"** \n  }, \n  \"autoload\": { \n    \"psr-4\": { \n **\"Packt\\\\Chp7\\\\Checkout\": \"src/\"** \n    } \n  } \n\n```", "```php\n<?php \nuse \\React\\ZMQ\\Factory; \nuse \\React\\ZMQ\\Context; \n\nrequire 'vendor/autoload.php'; \n\n$loop = Factory::create(); \n$ctx  = new Context($loop); \n\n$loop->run(); \n\n```", "```php\n// ... \n$ctx = new Context($loop); \n\n**$socket = $ctx->getSocket(ZMQ::SOCKET_REP);** \n**$socket->bind('tcp://0.0.0.0:5557');** \n\n$loop->run(); \n\n```", "```php\n// ... \n\n$socket = $ctx->getSocket(ZMQ::SOCKET_REP); \n$socket->bind('tcp://0.0.0.0:5557'); \n**$socket->on('message', function(string $msg) use ($socket) {** \n **echo \"received message $msg.\\n\";** \n **$socket->send('Response text');** \n**});** \n\n$loop->run(); \n\n```", "```php\n$socket->on('message', function(string $msg) use ($socket, $ctx) { \n    $check = $ctx->getSocket(ZMQ::SOCKET_REQ); \n    $check->connect('tcp://identity:5557'); \n    $check->send(/* checkArticle JSON-RPC here */); \n    $check->on('message', function(string $msg) use ($socket, $ctx) { \n        $take = $ctx->getSocket(ZMQ::SOCKET_REQ); \n        $take->connect('tcp://identity:5557'); \n        $take->send(/* takeArticle JSON-RPC here */); \n        $take->on('message', function(string $msg) use ($socket) { \n            $socket->send('success'); \n        }); \n    }); \n}); \n\n```", "```php\nnamespace Packt\\Chp7\\Checkout; \n\nuse React\\Promise\\PromiseInterface; \nuse React\\ZMQ\\Context; \n\nclass JsonRpcClient \n{ \n    private $context; \n    private $url; \n\n    public function __construct(Context $context, string $url) \n    { \n        $this->context = $context; \n        $this->url     = $url; \n    } \n\n    public function request(string $method, array $params = []): PromiseInterface \n    { \n    } \n} \n\n```", "```php\npublic function request(string $method, array $params = []): PromiseInterface \n{ \n **$body = json_encode([** \n **'jsonrpc' => '2.0',** \n **'method'  => $method,** \n **'params'  => $params,** \n **]);** \n **$sock = $this->context->getSocket(\\ZMQ::SOCKET_REQ);** \n **$sock->connect($this->url);** \n **$sock->send($body);** \n} \n\n```", "```php\n$body = json_encode([ \n    'jsonrpc' => '2.0', \n    'method'  => $method, \n    'params'  => $params, \n]); \n**$deferred = new Deferred();** \n\n$sock = $this->context->getSocket(\\ZMQ::SOCKET_REQ); \n$sock->connect($this->url); \n**$sock->on('message', function(string $response) use ($deferred) {** \n **$deferred->resolve($response);** \n**});** \n$sock->send($body); \n\n**return $deferred->promise();**\n\n```", "```php\n$sock->on('message', function(string $response) use ($deferred) { \n **$response = json_decode($response);** \n **if (isset($response->result)) {** \n **$deferred->resolve($response->result);** \n **} elseif (isset($response->error)) {** \n **$deferred->reject(new \\Exception(** \n **$response->error->message,** \n **$response->error->code** \n **);** \n **} else {** \n **$deferred->reject(new \\Exception('invalid response'));** \n **}** \n}); \n\n```", "```php\n$client = new JsonRpcClient($ctx, 'tcp://inventory:5557'); \n$client->request('checkArticle', [1000]) \n    ->then(function(bool $ok) use ($client) { \n        if ($ok) { \n            return $client->request('takeArticle', [1000]); \n        } else { \n            throw new \\Exception(\"Article is not available\"); \n        } \n    }) \n    ->then(function(bool $ok) { \n        if ($ok) { \n            echo \"Successfully took 1 item of article 1000\"; \n        } \n    }, function(\\Exception $error) { \n        echo \"An error occurred: ${error->getMessage()}\\n\"; \n    }); \n\n```", "```php\n**$client = new JsonRpcClient($ctx, 'tcp://inventory:5557');** \n$socket->on('message', function(string $msg) use ($socket, $client) { \n **$request = json_decode($msg);** \n **$promises = [];** \n **foreach ($request->cart as $article) {** \n **$promises[] = $client->request('checkArticle', [$article->articlenumber, $article->amount]);** \n    } \n}); \n\n```", "```php\n{ \n  \"cart\": [ \n    \"articlenumber\": 1000, \n    \"amount\": 2 \n  ] \n} \n\n```", "```php\n$request = json_decode($msg); \n$promises = []; \n\nforeach ($request->cart as $article) { \n    $promises[] = $client->request('checkArticle', [$article->articlenumber, $article->amount]); \n} \n\n**React\\Promise\\all($promises)->then(function(array $values) use ($socket) {** \n **if (array_sum($values) == count($values)) {** \n **echo \"all required articles are available\";** \n **} else {** \n **$socket->send(json_encode([** \n **'error' => 'not all required articles are available'** \n **]);** \n **}**\n**});**\n\n```", "```php\nReact\\Promise\\all($promises)->then(function(array $values) use ($socket, $request) { \n **$promises = [];** \n **if (array_sum($values) == count($values)) {** \n **foreach ($request->cart as $article) {** \n **$promises[] = $client->request('takeArticle', [$article->articlenumber, $article->amount]);** \n **}** \n **React\\Promise\\all($promises)->then(function() use ($socket) {** \n **$socket->send(json_encode([** \n **'result' => true** \n **]);** \n **}** \n    } else { \n        $socket->send(json_encode([ \n            'error' => 'not all required articles are available' \n        ]); \n    } \n}); \n\n```", "```php\n$ctx  = new ZMQContext(); \n$sock = $ctx->getSocket(ZMQ::SOCKET_REQ); \n$sock->connect('tcp://checkout:5557'); \n$sock->send(json_encode([ \n    'cart' => [ \n        ['articlenumber' => 1000, 'amount' => 3], \n        ['articlenumber' => 1001, 'amount' => 2] \n    ] \n])); \n\n$result = $sock->recv(); \nvar_dump($result); \n\n```", "```php\n**checkout:** \n **build: checkout** \n **volumes:** \n **- checkout:/usr/src/app** \n **links:** \n **- inventory:inventory** \ninventory: \n  build: inventory \n  ports: \n    - 5557 \n  volumes: \n    - inventory:/usr/src/app \n\n```", "```php\ntest: \n  build: checkout \n  command: php client.php \n  volumes: \n    - checkout:/usr/src/app \n  links: \n    - checkout:checkout \n\n```", "```php\n**$ docker-compose up -d \n$ docker-compose -f docker-compose.testing.yml run --rm test**\n\n```", "```php\n$socket = $ctx->getSocket(ZMQ::SOCKET_REP); \n$socket->bind('tcp://0.0.0.0:5557'); \n\n**$pubSocket = $ctx->getSocket(ZMQ::SOCKET_PUB);**\n**$pubSocket->bind('tcp://0.0.0.0:5558');** \n\n$client = new JsonRpcClient($ctx, 'tcp://inventory:5557'); \n\n```", "```php\n$socket->on('message', function(string $msg) use ($client, $pubSocket) { \n    // ... \n    React\\Promise\\all($promises)->then(function(array $values) use ($socket, $pubSocket, $request) { \n        $promises = []; \n        if (array_sum($values) == count($values)) { \n            // ... \n            React\\Promise\\all($promises)->then(function() use ($socket, $pubSocket, $request) { \n **$pubSocket->send($request);** \n            $socket->send(json_encode([ \n                'result' => true \n            ]); \n        } else { \n            $socket->send(json_encode([ \n                'error' => 'not all required articles are available' \n            ]); \n        } \n    }); \n}); \n\n$loop->run(); \n\n```", "```php\n{ \n **\"name\": \"packt-php7/chp7-mailing\",** \n    \"type\": \"project\", \n    \"authors\": [{ \n        \"name\": \"Martin Helmich\", \n        \"email\": \"php7-book@martin-helmich.de\" \n    }], \n    \"require\": { \n        \"php\": \">= 7.0\", \n        \"react/zmq\": \"^0.3.0\" \n    }, \n    \"autoload\": { \n        \"psr-4\": { \n **\"Packt\\\\Chp7\\\\Mailing\": \"src/\"** \n        } \n    } \n} \n\n```", "```php\nrequire 'vendor/autoload.php'; \n\n$loop = \\React\\EventLoop\\Factory::create(); \n$ctx  = new \\React\\ZMQ\\Context($loop); \n\n$socket = $ctx->getSocket(ZMQ::SOCKET_SUB); \n$socket->subscribe(''); \n$socket->connect('tcp://checkout:5558'); \n\n$loop->run(); \n\n```", "```php\n$socket->connect('tcp://checkout:5558'); \n**$socket->on('message', function(string $msg) {** \n **$data = json_decode($msg);** \n **if (isset($data->customer->email)) {** \n **$email = $data->customer->email;** \n **echo \"sending confirmation email to $email.\\n\";** \n **}** \n**});** \n\n$loop->run(); \n\n```", "```php\n$sock->send(json_encode([ \n    'cart' => [ \n        ['articlenumber' => 1000, 'amount' => 3], \n        ['articlenumber' => 1001, 'amount' => 2] \n    ], \n **'customer' => [** \n **'email' => 'john.doe@example.com'** \n    ] \n])); \n\n```", "```php\n# ... \ncheckout: \n  build: checkout \n  volumes: \n    - checkout:/usr/src/app \n  links: \n    - inventory:inventory \n**mailing:** \n **build: mailing** \n **volumes:** \n **- mailing:/usr/src/app** \n **links:** \n **- checkout:checkout** \ninventory: \n  build: inventory \n  ports: \n    - 5557 \n  volumes: \n    - inventory:/usr/src/app \n\n```", "```php\n**$ docker-compose up -d inventory checkout mailing**\n**$ docker-compose run --rm test**\n\n```", "```php\n**$ docker-compose logs**\n\n```", "```php\n{ \n **\"name\": \"packt-php7/chp7-shipping\",** \n    \"type\": \"project\", \n    \"authors\": [{ \n        \"name\": \"Martin Helmich\", \n        \"email\": \"php7-book@martin-helmich.de\" \n    }], \n    \"require\": { \n        \"php\": \">= 7.0.0\", \n        \"react/zmq\": \"^0.3.0\" \n    }, \n    \"autoload\": { \n        \"psr-4\": { \n **\"Packt\\\\Chp7\\\\Shipping\": \"src/\"** \n        } \n    } \n} \n\n```", "```php\nrequire 'vendor/autoload.php'; \n\n$loop = React\\EventLoop\\Factory::create(); \n$ctx  = new React\\ZMQ\\Context($loop); \n\n$subSocket = $ctx->getSocket(ZMQ::SOCKET_SUB); \n$subSocket->subscribe(''); \n$subSocket->connect('tcp://checkout:5558'); \n\n$pushSocket = $ctx->getSocket(ZMQ::SOCKET_PUSH); \n$pushSocket->bind('tcp://0.0.0.0:5557'); \n\n$loop->run(); \n\n```", "```php\n$pushSocket->bind('tcp://0.0.0.0:5557'); \n\n**$subSocket->on('message', function(string $msg) use ($pushSocket) {** \n **echo 'dispatching message to worker';** \n **$pushSocket->send($msg);** \n**});** \n\n$loop->run(); \n\n```", "```php\nrequire 'vendor/autoload.php'; \n\n$loop = React\\EventLoop\\Factory::create(); \n$ctx  = new React\\ZMQ\\Context($loop); \n\n$pullSocket = $ctx->getSocket(ZMQ::SOCKET_PULL); \n$pullSocket->connect('tcp://shippingmaster:5557'); \n\n$loop->run(); \n\n```", "```php\n$pullSocket->connect('tcp://shippingmaster:5557'); \n**$pullSocket->on('message', function(string $msg) {** \n **echo \"processing checkout order for shipping: $msg\\n\";** \n **sleep(5);** \n**});** \n\n$loop->run(); \n\n```", "```php\n# ... \n\ninventory: \n  build: inventory \n  volumes: \n    - inventory:/usr/src/app \n\n**shippingmaster:** \n **build: shipping** \n **command: php master.php** \n **volumes:** \n **- shipping:/usr/src/app** \n **links:** \n **- checkout:checkout** \n**shippingworker:** \n **build: shipping** \n **command: php worker.php** \n **volumes:** \n **- shipping:/usr/src/app** \n **links:** \n **- shippingmaster:shippingmaster**\n\n```", "```php\n**$ docker-compose up -d**\n\n```", "```php\n**$ docker-compose scale shippingworker=4**\n\n```", "```php\n**$ docker-compose run --rm test**\n\n```", "```php\n$pushSocket = $ctx->getSocket(ZMQ::SOCKET_PUSH); \n$pushSocket->bind('tcp://0.0.0.0:5557'); \n\n**$pullSocket = $ctx->getSocket(ZMQ::SOCKET_PULL);** \n**$pullSocket->bind('tcp://0.0.0.0:5558');** \n**$pullSocket->on('message', function(string $msg) {** \n **echo \"order $msg successfully processed for shipping\\n\";** \n**});** \n\n$subSocket->on('message', function(string $msg) use ($pushSocket) { \n    // ... \n}); \n\n$loop->run(); \n\n```", "```php\n**$pushSocket = $ctx->getSocket(ZMQ::SOCKET_PUSH);**\n**$pushSocket->connect('tcp://shippingmaster:5558');** \n\n$pullSocket = $ctx->getSocket(ZMQ::SOCKET_PULL); \n$pullSocket->connect('tcp://shippingmaster:5557'); \n$pullSocket->on('message', function(string $msg) use ($pushSocket) { \n    echo \"processing checkout order for shipping: $msg\\n\"; \n    sleep(5); \n **$pushSocket->send($msg);** \n}); \n\n$loop->run(); \n\n```", "```php\n**$ composer require react/http**\n\n```", "```php\nnamespace Packt\\Chp7\\Checkout; \n\nuse React\\Promise\\PromiseInterface; \n\nclass CheckoutService \n{ \n    private $client; \n\n    public function __construct(JsonRpcClient $client) \n    { \n        $this->client = $client; \n    } \n\n    public function handleCheckoutOrder(string $msg): PromiseInterface \n    { \n    } \n} \n\n```", "```php\npublic function handleCheckoutOrder(string $msg): PromiseInterface \n{ \n    $request = json_decode($msg); \n    $promises = []; \n\n    foreach ($request->cart as $article) { \n        $promises[] = $this->client->request('checkArticle', [$article->articlenumber, $article->amount]); \n    } \n\n    return \\React\\Promise\\all($promises) \n        ->then(function(array $values):bool { \n            if (array_sum($values) != count($values)) { \n                throw new \\Exception('not all articles are in stock'); \n            } \n            return true; \n        })->then(function() use ($request):PromiseInterface { \n            $promises = []; \n\n            foreach ($request->cart as $article) { \n                $promises[] = $this->client->request('takeArticle', [$article->articlenumber, $article->amount]); \n            } \n\n            return \\React\\Promise\\all($promises); \n        })->then(function(array $values):bool { \n            if (array_sum($values) != count($values)) { \n                throw new \\Exception('not all articles are in stock'); \n            } \n            return true; \n        }); \n} \n\n```", "```php\n$client          = new JsonRpcClient($ctx, 'tcp://inventory:5557'); \n**$checkoutService = new CheckoutService($client);** \n\n$socket->on('message', function($msg) use ($ctx, $checkoutService, $pubSocket, $socket) { \n    echo \"received checkout order $msg\\n\"; \n\n **$checkoutService->handleCheckoutOrder($msg)->then(function() use ($pubSocket, $msg, $socket) {** \n **$pubSocket->send($msg);** \n **$socket->send(json_encode(['msg' => 'OK']));** \n **}, function(\\Exception $err) use ($socket) {** \n **$socket->send(json_encode(['error' => $err->getMessage()]));** \n **});** \n}); \n\n```", "```php\n**$httpSocket = new \\React\\Socket\\Server($loop);** \n**$httpSocket->listen(8080, '0.0.0.0');** \n**$httpServer = new \\React\\Http\\Server($httpSocket);** \n\n$loop->run(); \n\n```", "```php\n$httpServer->on('request', function(React\\Http\\Request $req, React\\Http\\Response $res) { \n    $res->writeHead(200); \n    $res->end('Hello World'); \n}); \n\n```", "```php\n$httpServer->on('request', function(React\\Http\\Request $req, React\\Http\\Response $res) { \n **if ($request->getPath() != '/orders') {** \n **$msg = json_encode(['msg' => 'this resource does not exist']);** \n **$response->writeHead(404, [** \n **'Content-Type' => 'application/json;charset=utf8',** \n **'Content-Length' => strlen($msg)** \n **]);** \n **$response->end($msg);** \n **return;** \n **}** \n **if ($request->getMethod() != 'POST') {** \n **$msg = json_encode(['msg' => 'this method is not allowed']);** \n **$response->writeHead(405, [** \n **'Content-Type' => 'application/json;charset=utf8',** \n **'Content-Length' => strlen($msg)** \n **]);** \n **$response->end($msg);** \n **return;** \n **}** \n}); \n\n```", "```php\n$httpServer->on('request', function(React\\Http\\Request $req, React\\Http\\Response $res) { \n    // error checking omitted... \n\n **$length = $req->getHeaders()['Content-Length'];** \n **$body   = '';** \n **$request->on('data', function(string $chunk) use (&$body) {** \n **$body .= $chunk;** \n **if (strlen($body) == $length) {** \n **// body is complete!** \n **}** \n **});** \n}); \n\n```", "```php\n$httpServer->on('request', function(React\\Http\\Request $req, React\\Http\\Response $res) use ($pubSocket, $checkoutService) { \n    // error checking omitted... \n\n    $length = $req->getHeaders()['Content-Length']; \n    $body   = ''; \n\n    $request->on('data', function(string $chunk) use (&$body, $pubSocket, $checkoutService) { \n        $body .= $chunk; \n        if (strlen($body) == $length) { \n **$checkoutService->handleCheckoutOrder($body)** \n **->then(function() use ($response, $body, $pubSocket) {**\n **$pubSocket->send($body);** \n **$msg = json_encode(['msg' => 'OK']);** \n **$response->writeHead(200, [** \n **'Content-Type' => 'application/json',** \n **'Content-Length' => strlen($msg)** \n **]);** \n **$response->end($msg);** \n **}, function(\\Exception $err) use ($response) {** \n **$msg = json_encode(['msg' => $err->getMessage()]);** \n **$response->writeHead(500, [** \n **'Content-Type' => 'application/json',** \n **'Content-Length' => strlen($msg)** \n **]);** \n **$response->end($msg);** \n **});** \n        } \n    }); \n}); \n\n```", "```php\n**$ http -v localhost:8080/orders\ncart:='[{\"articlenumber\":1000,\"amount\":3}]' customer:='{\"email\":\"john.doe@example.com\"}'**\n\n```"]