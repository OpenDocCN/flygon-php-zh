- en: Going Serverless
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器之前
- en: The **serverless** term is probably among the hottest terms in the software
    industry lately. It may be described as the architecture style that partially
    or fully abstracts the infrastructure needed to run our software. This abstraction
    is usually provided by various third-party service providers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “无服务器”一词可能是最近软件行业中最热门的术语之一。它可以被描述为部分或完全抽象出运行软件所需的基础架构的架构风格。这种抽象通常由各种第三方服务提供商提供。
- en: To put it in the context of web application development, let's think about **Single
    Page Application** (**SPA**). Nowadays, we can easily develop an entire SPA on
    top of a fully managed infrastructure, such as AWS. Such a SPA may be written
    in Angular, having client components served from the S3 bucket, managing users
    through the Amazon Cognito service, whilst using DynamoDB as an application data
    store. The managed infrastructure abstracts away any hosting or server dealings
    from us, allowing us to focus our efforts on the application alone. What we end
    up with is one form of serverless application, depending on how narrow our definition
    is.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将其放在Web应用程序开发的背景下，让我们考虑单页应用程序（SPA）。如今，我们可以轻松地在完全托管的基础架构上开发整个SPA，比如AWS。这样的SPA可以用Angular编写，客户端组件可以从S3存储桶中提供，通过Amazon
    Cognito服务管理用户，同时使用DynamoDB作为应用程序数据存储。托管的基础架构将我们从任何主机或服务器交易中抽象出来，使我们能够将精力集中在应用程序上。我们最终得到的是一种无服务器应用程序，这取决于我们定义的范围有多窄。
- en: Like any architectural style, serverless is far from being **<<the solution>>**.
    While some types of application can benefit from it, others might find it a total
    mismatch. The long-running applications for example, can easily turn out to  be
    expensive solution for serverless frameworks, rather than running a workload on
    a dedicated server. The trick is to find the right balance.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何架构风格一样，无服务器远非“解决方案”。虽然某些类型的应用程序可能会从中受益，但其他类型的应用程序可能会发现它完全不匹配。例如，长时间运行的应用程序可能很容易成为无服务器框架的昂贵解决方案，而不是在专用服务器上运行工作负载。关键是找到合适的平衡。
- en: A more rigid and narrow definition of serverless is pure code/function hosting,
    often referred to as **Function as a Service** (**FaaS**). Such infrastructures
    provide highly concurrent, scalable, yet affordable solutions, given that they
    are mostly priced by *pay-per-execution* model. AWS Lambda and Iron.io are two
    platforms that perfectly depict this notion.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器的更严格和狭窄的定义是纯代码/函数托管，通常称为函数即服务（FaaS）。这样的基础设施提供高并发、可扩展、成本效益的解决方案，因为它们大多是按“按执行付费”的模式定价。AWS
    Lambda和Iron.io是两个完美体现这一概念的平台。
- en: 'In this chapter, we will take a closer look at how we can utilize both the
    AWS Lambda and the Iron.io platforms to deploy chunks of our code:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更仔细地看看如何利用AWS Lambda和Iron.io平台来部署我们代码的块：
- en: Using the serverless framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用无服务器框架
- en: Using Iron.io IronWorker
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Iron.io IronWorker
- en: Using the serverless framework
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无服务器框架
- en: The AWS Lambda is a compute service provided by **Amazon Web Services** (**AWS**).
    What makes it specific is that it lets us run code without provisioning or managing
    any servers whatsoever. The auto-scaling features enable it to withstand thousands
    of requests per second. With an added benefit of pay-per-execution pricing, this
    service caught some traction among developers. Over time, the serverless framework
    was developed to make the use of the AWS Lambda service easy.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda是由亚马逊网络服务（AWS）提供的计算服务。它的特点是可以在不提供或管理任何服务器的情况下运行代码。自动扩展功能使其能够承受每秒数千个请求。加上按执行付费的额外好处，这项服务在开发人员中引起了一些关注。随着时间的推移，无服务器框架被开发出来，以使AWS
    Lambda服务的使用变得容易。
- en: The serverless framework is available at [https://serverless.com](https://serverless.com).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器框架可在[https://serverless.com](https://serverless.com)上找到。
- en: Assuming we have an AWS account created, and a clean installation of the Ubuntu
    server at hand, let's go ahead and outline the steps needed to set up and utilize
    the serverless framework.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经创建了一个AWS账户，并且手头上有一个干净的Ubuntu服务器安装，让我们继续概述设置和利用无服务器框架所需的步骤。
- en: 'Before we can deploy applications on the AWS Lambda, we need to make sure we
    have a user with the right set of permissions. AWS permissions are quite robust,
    in that we can tune them per resource. The serverless framework uses several other
    AWS resources aside from AWS Lambda itself, such as S3, API Gateway, and a few
    others. To make our demonstration simple, we will first create an IAM User with
    Administrator access:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以在AWS Lambda上部署应用程序之前，我们需要确保我们有一个具有正确权限集的用户。AWS权限非常强大，我们可以根据资源对其进行调整。无服务器框架除了AWS
    Lambda本身之外，还使用了其他几个AWS资源，如S3、API Gateway等。为了使我们的演示简单，我们将首先创建一个具有管理员访问权限的IAM用户：
- en: 'We start by logging into the AWS console at [https://aws.amazon.com/console/](https://aws.amazon.com/console/).
    Once logged in, we need to proceed under the My Security Credentials | Users screen:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先登录到[https://aws.amazon.com/console/](https://aws.amazon.com/console/)的AWS控制台。登录后，我们需要在“我的安全凭证”|“用户”屏幕下继续：
- en: '![](assets/26e8dfc0-bee9-4725-9426-068b56ebcace.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/26e8dfc0-bee9-4725-9426-068b56ebcace.png)'
- en: 'To add a new user, we click on the Add user button. This triggers a four-step
    process, as shown in the following screenshot:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加新用户，我们点击“添加用户”按钮。这将触发一个四步过程，如下截图所示：
- en: '![](assets/2b71f9fd-594c-4e29-a045-f80cebfa993c.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2b71f9fd-594c-4e29-a045-f80cebfa993c.png)'
- en: 'We provide two pieces of information here, User name and Access type. The Programmatic
    access type is what we need for our serverless integration. Clicking on the Next:
    Permissions button gets us to the following screen:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里提供两条信息，用户名和访问类型。我们的无服务器集成需要编程访问类型。单击“下一步：权限”按钮将我们带到以下屏幕：
- en: '![](assets/afed7936-66d3-43d5-b95c-200800c9b0ac.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/afed7936-66d3-43d5-b95c-200800c9b0ac.png)'
- en: 'There are a few ways we can attach permissions to the user here. To keep things
    simple, we click on the Attach existing policies directly box, and type in AdministratorAccess
    in the Policy type field filter. We then simply check the AdministratorAccess
    policy and click on the Next: Review button, which gets us to the following screen:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里有几种方法可以在这里为用户附加权限。 为了保持简单，我们点击“直接附加现有策略”框，并在“策略类型”字段过滤器中输入AdministratorAccess。
    然后我们简单地勾选AdministratorAccess策略，然后点击“下一步：审阅”按钮，这将带我们到以下屏幕：
- en: '![](assets/e4ce7578-bcdc-45a8-9e40-d3c2c4cf9a61.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e4ce7578-bcdc-45a8-9e40-d3c2c4cf9a61.png)'
- en: 'Here, we merely review the current progress, and finally click on the Create
    user button, which gets us to the following screen:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们仅仅回顾了当前的进展，最后点击“创建用户”按钮，这将带我们到以下屏幕：
- en: '![](assets/f8227089-6927-46fa-a6a4-195feb1ce937.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f8227089-6927-46fa-a6a4-195feb1ce937.png)'
- en: We now have Access key ID and Secret access key, the two pieces of information
    required by the serverless framework.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了Access key ID和Secret access key，这是serverless框架所需的两个信息。
- en: Creating users with full administrative permissions is generally considered
    a bad security practice. Normally, we would create users with a bare minimum of
    needed permissions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通常认为，创建具有完整管理权限的用户是一个不好的安全实践。 通常，我们会创建具有所需权限的最低限度的用户。
- en: With these steps out of the way, we can move forward with setting up the serverless
    framework itself.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了这些步骤，我们可以继续设置serverless框架本身。
- en: 'The serverless framework runs on top of Node.js. Assuming we have an instance
    of a clean Ubuntu server, we can set it up by following these steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: serverless框架运行在Node.js之上。 假设我们有一个干净的Ubuntu服务器实例，我们可以通过以下步骤进行设置：
- en: 'Install Node.js with the following console commands:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下控制台命令安装Node.js：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once Node.js is installed, the `npm` console tool becomes available. The serverless
    framework itself is available as an `npm` package at [https://www.npmjs.com/package/serverless](https://www.npmjs.com/package/serverless).
    Running the following console commands should get it installed on our server:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了Node.js，`npm`控制台工具就可用了。 服务器框架本身作为一个`npm`包可在[https://www.npmjs.com/package/serverless](https://www.npmjs.com/package/serverless)上获得。
    运行以下控制台命令应该可以在我们的服务器上安装它：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](assets/3ff41a29-4d16-41cf-bff0-4bf06d7490e2.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3ff41a29-4d16-41cf-bff0-4bf06d7490e2.png)'
- en: 'With the serverless framework now installed, we need to set the console environment
    variables: `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`. These get used by
    serverless during deploy:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在安装了serverless框架，我们需要设置控制台环境变量：`AWS_ACCESS_KEY_ID`和`AWS_SECRET_ACCESS_KEY`。
    这些在部署期间由serverless使用：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can now address the bits and pieces related to PHP. The official serverless
    framework example uses an AWS lambda that runs a PHP function, which can be found
    at [https://github.com/ZeroSharp/serverless-php](https://github.com/ZeroSharp/serverless-php).
    We can install it via the following console command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以处理与PHP相关的细枝末节了。 官方serverless框架示例使用运行PHP函数的AWS Lambda，可以在[https://github.com/ZeroSharp/serverless-php](https://github.com/ZeroSharp/serverless-php)找到。
    我们可以通过以下控制台命令安装它：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This should give us an output much like the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给我们一个类似以下截图的输出：
- en: '![](assets/ecebec78-dabf-4a68-b734-acdfb7542473.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ecebec78-dabf-4a68-b734-acdfb7542473.png)'
- en: The serverless install command merely pulls the content of the Git repository
    into a local directory. Within the newly created `serverless-php` directory, there
    is an `index.php` file within which our PHP application code resides. Strangely
    enough, there are bits and pieces here that, at first, look like they have nothing
    to do with PHP, such as `handler.js`. A quick look into the `handler.js` reveals
    something interesting, which is that the AWS Lambda service does not actually
    run the PHP code directly. The way it works is that `handler.js`, which is a Node.js
    app, spawns a process with an included `php` binary file. In a nutshell,  `index.php`
    is our application file, the rest is a necessary boilerplate.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: serverless安装命令只是将Git存储库的内容拉到本地目录中。 在新创建的`serverless-php`目录中，有一个`index.php`文件，其中包含我们的PHP应用程序代码。
    令人奇怪的是，这里有一些东西，乍一看似乎与PHP无关，比如`handler.js`。 快速查看`handler.js`揭示了一些有趣的东西，即AWS Lambda服务实际上并不直接运行PHP代码。
    它的工作方式是`handler.js`，这是一个Node.js应用程序，生成一个带有包含的`php`二进制文件的进程。 简而言之，`index.php`是我们的应用程序文件，其余的是必要的样板。
- en: 'As a quick sanity check, let''s trigger the following two commands:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个快速的健全检查，让我们触发以下两个命令：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'These should give us the following output, indicating that serverless is able
    to see and execute our function:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应该给我们以下输出，表明serverless能够看到并执行我们的函数：
- en: '![](assets/43fdf30e-4b1c-4deb-a925-3602a44b81e1.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/43fdf30e-4b1c-4deb-a925-3602a44b81e1.png)'
- en: 'Finally, we are ready to deploy our PHP application to the AWS Lambda service. We
    do this by executing the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们准备将我们的PHP应用程序部署到AWS Lambda服务。 我们通过执行以下命令来实现这一点：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](assets/95344457-6c57-4980-b8b5-1142d0972798.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/95344457-6c57-4980-b8b5-1142d0972798.png)'
- en: This simple command puts in motion a series of events that result in several
    different AWS services being utilized within the AWS console.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的命令启动了一系列事件，导致在AWS控制台中利用了几种不同的AWS服务。
- en: 'Opening the link listed under endpoints shows that our application is publicly
    available:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 打开在端点下列出的链接显示我们的应用程序是公开可用的：
- en: '![](assets/9ce30662-5947-40ef-ab1f-c83d254b707e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ce30662-5947-40ef-ab1f-c83d254b707e.png)'
- en: 'This was made possible by the automatically created API entry under the Amazon
    API Gateway service, as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由Amazon API Gateway服务下自动创建的API入口所实现的，如下截图所示：
- en: '![](assets/e369c9b8-3397-46dd-b7c2-5981dca8800f.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e369c9b8-3397-46dd-b7c2-5981dca8800f.png)'
- en: 'The API Gateway bridges the `GET /hello` URL action with the AWS Lambda `serverless-php-dev-hello`
    application. A look under the AWS Lambda screen that reveals this application:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: API Gateway将`GET /hello` URL操作与AWS Lambda `serverless-php-dev-hello`应用程序连接起来。
    在AWS Lambda屏幕下查看这个应用程序：
- en: '![](assets/7f7e212a-3c65-41bd-bc8b-fd69a845e979.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7f7e212a-3c65-41bd-bc8b-fd69a845e979.png)'
- en: 'The CloudFormation stack has also been created, as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation堆栈也已创建，如下截图所示：
- en: '![](assets/b167b8cc-6d54-4f29-8577-ba77cdb709ba.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b167b8cc-6d54-4f29-8577-ba77cdb709ba.png)'
- en: 'The S3 bucket has also been created, as shown here:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: S3存储桶也已创建，如下所示：
- en: '![](assets/7f0a9b21-a5be-4b4f-b51d-9775fb452b9a.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7f0a9b21-a5be-4b4f-b51d-9775fb452b9a.png)'
- en: 'The CloudWatch log group has also been created, as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: CloudWatch日志组也已创建，如下截图所示：
- en: '![](assets/e52db856-4769-46ea-aa17-0b1c01f8e784.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e52db856-4769-46ea-aa17-0b1c01f8e784.png)'
- en: In a nutshell, `serverless deploy` kicked off quite a few services for us, thus
    giving us time to focus more on actual application development. Although AWS Lambda
    only charges a fee when a code is run, some of the other services in the mix might
    be different. This is why it is important to keep an eye on everything that gets
    automatically triggered for us.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，`serverless deploy`为我们启动了许多服务，因此我们有更多时间专注于实际的应用程序开发。尽管AWS Lambda只在运行代码时收费，但混合使用的其他一些服务可能是不同的。这就是为什么重要的是要密切关注自动触发的一切。
- en: 'Luckily for us, serverless also provides a cleanup command, which is written
    as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，无服务器还提供了一个清理命令，写成如下：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](assets/8a1807f7-94d9-4e90-bcab-e513dec0fa22.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8a1807f7-94d9-4e90-bcab-e513dec0fa22.png)'
- en: This command does an overall cleanup by removing all of the services and resources
    it previously created.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令通过删除先前创建的所有服务和资源来进行总体清理。
- en: Using Iron.io IronWorker
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Iron.io IronWorker
- en: 'Iron.io is a serverless job processing platform designed for high performance
    and concurrency. Built around Docker containers, the platform itself is language-agnostic.
    We can use it to run pretty much any programming language, including PHP. There
    are three main features of the Iron.io platform:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Iron.io是一个为高性能和并发设计的无服务器作业处理平台。该平台围绕Docker容器构建，本身是与语言无关的。我们可以使用它来运行几乎任何编程语言，包括PHP。Iron.io平台的三个主要特点是：
- en: '**IronWorker**: This is an elastic task/queue-like worker service that scales
    out processing'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IronWorker**：这是一个弹性的任务/队列式工作服务，可扩展处理'
- en: '**IronMQ**: This is a message queueing service designed for distributed systems'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IronMQ**：这是为分布式系统设计的消息队列服务'
- en: '**IronCache**: This is an elastic and durable key/value store'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IronCache**：这是一个弹性和耐用的键/值存储'
- en: While we cannot run real-time PHP within the Iron.io platform, we could utilize
    its IronWorker feature for task/queue-like type of applications.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不能在Iron.io平台上运行实时PHP，但我们可以利用其IronWorker功能来进行任务/队列式类型的应用程序。
- en: Assuming we have an Iron.io account opened and the Ubuntu server with Docker
    installed, we'll be able to follow the next steps outlining the IronWorker workflow.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经打开了一个Iron.io账户并且在Ubuntu服务器上安装了Docker，我们就能够按照下面的步骤来了解IronWorker的工作流程。
- en: 'We start by clicking the New Project button under the Iron.io dashboard. This
    opens up a simple screen, where all we need is to punch in the project name:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先点击Iron.io仪表板下的New Project按钮。这将打开一个简单的屏幕，我们只需要输入项目名称：
- en: '![](assets/3893fc43-cfa5-4ed0-b4ba-048ea945b652.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3893fc43-cfa5-4ed0-b4ba-048ea945b652.png)'
- en: 'Once the project is created, we can click on the project settings link. This
    opens up a screen with several pieces of information, including the Authentication/Configuration
    parameters:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 项目创建后，我们可以点击项目设置链接。这将打开一个屏幕，显示包括认证/配置参数在内的多个信息：
- en: '![](assets/271ab3b9-79d2-4e1b-817a-c2bfd145e822.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/271ab3b9-79d2-4e1b-817a-c2bfd145e822.png)'
- en: We will need these parameters as we will configure the `iron.json` file later
    on. With these pieces of information at hand, we are ready to proceed with the
    application bits.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将配置`iron.json`文件，因此需要这些参数。有了这些信息，我们就可以继续进行应用程序的配置。
- en: 'Application-wise, we start of by installing the `iron` console tool:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序方面，我们首先安装`iron`控制台工具：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once installed, the `iron` command should be available via the console, as
    shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，`iron`命令应该可以通过控制台使用，如下截图所示：
- en: '![](assets/456cb0f0-3aea-4c2d-afc4-61428794c65a.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/456cb0f0-3aea-4c2d-afc4-61428794c65a.png)'
- en: We are now ready to kick off our first Iron app.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备启动我们的第一个Iron应用。
- en: 'Assuming we have a clean directory where we want to put our application files,
    we start by adding `composer.json` with the following content:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个干净的目录，我们想要放置我们的应用程序文件，我们首先添加`composer.json`，内容如下：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we are just telling Composer what libraries to pull in:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是告诉Composer要拉取哪些库：
- en: '`iron_worker`: This is the client library for IronWorker ([https://packagist.org/packages/iron-io/iron_worker](https://packagist.org/packages/iron-io/iron_worker))'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`iron_worker`：这是IronWorker的客户端库（[https://packagist.org/packages/iron-io/iron_worker](https://packagist.org/packages/iron-io/iron_worker)）'
- en: '`iron_mq`: This is the client binding for IronMQ ([https://packagist.org/packages/iron-io/iron_mq](https://packagist.org/packages/iron-io/iron_mq))'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`iron_mq`：这是IronMQ的客户端绑定（[https://packagist.org/packages/iron-io/iron_mq](https://packagist.org/packages/iron-io/iron_mq)）'
- en: '`php-cli-tools`: These are the console utilities for PHP ([https://packagist.org/packages/wp-cli/php-cli-tools](https://packagist.org/packages/wp-cli/php-cli-tools))'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`php-cli-tools`：这些是用于PHP的控制台实用程序（[https://packagist.org/packages/wp-cli/php-cli-tools](https://packagist.org/packages/wp-cli/php-cli-tools)）'
- en: 'We then create `Dockerfile` with its content as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建`Dockerfile`，内容如下：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These `Dockerfile` instructions help Docker to automatically build the necessary
    image for us.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`Dockerfile`指令帮助Docker自动为我们构建必要的镜像。
- en: 'We then add the `greet.payload.json` file with its content as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加`greet.payload.json`文件及其内容如下：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is not really a necessary part of the process, but we are using it to simulate the
    payload our application receives.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上并不是流程中必要的一部分，但我们正在使用它来模拟我们的应用程序接收到的有效载荷。
- en: 'We then add the `greet.php` file with its content as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加`greet.php`文件及其内容如下：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `greet.php` file is our actual application. The job that gets created on
    the IronWorker service will be queueing and executing this application. The application
    itself is simple; it merely grabs the value of a payload variable named `name`,
    and echoes it out. This should suffice for our IronWorker demonstration purposes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`greet.php`文件是我们的实际应用程序。在IronWorker服务上创建的作业将排队并执行此应用程序。应用程序本身很简单；它只是简单地获取名为`name`的负载变量的值，并将其输出。这对于我们的IronWorker演示足够了。'
- en: 'We then create the `iron.json` file with a similar content, as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建`iron.json`文件，内容类似如下：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We ensure that we paste `project_id` and `token` obtained from the Project settings
    screen within the Iron.io dashboard.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们粘贴了从Iron.io仪表板的项目设置屏幕获取的`project_id`和`token`。
- en: With these files in place, we have defined our application, and are now ready
    to kick off Docker related tasks. The overall idea is that we will first create
    a local Docker image for testing purposes. Once we are done with the testing,
    we will push the Docker image to the Docker repository, and then configure the
    Iron.io platform to use the image from the Docker repository to power its IronWorker
    job.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些文件，我们已经定义了我们的应用程序，现在准备开始Docker相关的任务。总体思路是，我们将首先创建一个本地Docker镜像用于测试。一旦测试完成，我们将把Docker镜像推送到Docker仓库，然后配置Iron.io平台使用Docker仓库中的镜像来驱动其IronWorker作业。
- en: 'We can now install our worker dependencies into Docker, as set by the `composer.json`
    file. We will do so by running the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过运行以下命令将我们的工作程序依赖项安装到Docker中，如`composer.json`文件所设定的。
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output should show the Composer installing dependencies, as you can see
    in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该显示Composer正在安装依赖项，如下图所示：
- en: '![](assets/54528b74-a093-4227-9bfe-d67ebba7aa26.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/54528b74-a093-4227-9bfe-d67ebba7aa26.png)'
- en: 'Once Composer is done installing dependencies, we should test to see if our
    application is executing. We can do this via the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Composer安装完依赖项，我们应该测试一下我们的应用程序是否在执行。我们可以通过以下命令来做到这一点：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The resulting output of the preceding command should be a Welcome John string,
    as shown in this screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出应该是一个“欢迎John”字符串，如下图所示：
- en: '![](assets/773c3783-468f-4602-a540-ec2c766777bf.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/773c3783-468f-4602-a540-ec2c766777bf.png)'
- en: This confirms that our Docker image is working correctly, and we are now ready
    to build and deploy it to [https://hub.docker.com](https://hub.docker.com).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这证实了我们的Docker镜像正常工作，现在我们准备构建并部署它到[https://hub.docker.com](https://hub.docker.com)。
- en: Docker Hub, available at [https://hub.docker.com](https://hub.docker.com), is
    a cloud-based service that provides a centralized solution for container image
    management. While it is a commercial service, there is a free *one-repository*
    plan available.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub，位于[https://hub.docker.com](https://hub.docker.com)，是一个基于云的服务，提供了集中的容器镜像管理解决方案。虽然它是一个商业服务，但也有一个免费的*一个仓库*计划。
- en: 'Assuming we have opened a Docker Hub account, executing the following command
    via the console would flag us as logged in:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经打开了Docker Hub账户，通过控制台执行以下命令将标记我们已登录：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Where `ajzele` is the username which should be replaced with our own:![](assets/4443de04-07d7-4d4c-961e-ed0ed8e90bd3.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`ajzele`是用户名，应该用我们自己的替换：![](assets/4443de04-07d7-4d4c-961e-ed0ed8e90bd3.png)
- en: 'We can now and package our Docker image by executing the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过执行以下命令打包我们的Docker镜像：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is a standard build command that will create an `ajzele/greet` image, flagged
    with version `0.0.1`
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标准的构建命令，将创建一个带有版本`0.0.1`标记的`ajzele/greet`镜像
- en: '![](assets/249c6260-3677-4b42-ab8a-c29131084018.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/249c6260-3677-4b42-ab8a-c29131084018.png)'
- en: 'With the image now created, we should test it first before pushing it to the
    Docker Hub. Executing the following command confirms that our newly created `ajzele/greet`
    image is working fine:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建了镜像，我们应该先测试它，然后再将其推送到Docker Hub。执行以下命令确认我们新创建的`ajzele/greet`镜像工作正常：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](assets/27fcdeea-f539-4b2d-81d6-48e901398b95.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/27fcdeea-f539-4b2d-81d6-48e901398b95.png)'
- en: 'The resulting Welcome John output confirms that our image is now ready to be
    deployed to Docker Hub, which can be done using the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的欢迎John输出确认我们的镜像现在已准备好部署到Docker Hub，可以使用以下命令完成：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](assets/0e266f2c-0cb6-44f1-9a97-7b6870f8e86c.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0e266f2c-0cb6-44f1-9a97-7b6870f8e86c.png)'
- en: 'Once the push process is done, we should be able to see our image under the
    Docker Hub dashboard:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦推送过程完成，我们应该能在Docker Hub仪表板下看到我们的镜像：
- en: '![](assets/962b5d25-bf1d-45e3-a699-78234cf300d2.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/962b5d25-bf1d-45e3-a699-78234cf300d2.png)'
- en: 'Quite a few steps up until now, but we are nearly there. Now that our application
    is available as a Docker image within the Docker Hub repository, we can turn our
    focus back onto the Iron.io platform. The `iron` console tool that we installed
    early on in the process is able to register the Docker Hub image as a new worker
    under the Iron.io dashboard:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止有相当多的步骤，但我们快要完成了。现在我们的应用程序在Docker Hub仓库中可用作为Docker镜像，我们可以把重点转回Iron.io平台。我们在过程中早已安装的`iron`控制台工具能够在Iron.io仪表板下注册Docker
    Hub镜像为一个新的工作程序：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot shows the output of this command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此命令的输出：
- en: '![](assets/aa2d7445-b1b8-4ee6-9c08-382268bd66e8.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aa2d7445-b1b8-4ee6-9c08-382268bd66e8.png)'
- en: 'At this point, we should see the `ajzele/greet` worker under the Iron.io dashboard''s TASKS tab:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该在Iron.io仪表板的TASKS选项卡下看到`ajzele/greet`工作程序：
- en: '![](assets/12bdfd6d-417a-4f1a-933e-43f3ef7edd37.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/12bdfd6d-417a-4f1a-933e-43f3ef7edd37.png)'
- en: Although the worker is registered, it is not executed at this point. The Iron.io
    platform allows us to execute the worker either as a scheduled or queued task.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然工作程序已注册，但此时尚未执行。Iron.io平台允许我们将工作程序作为定时或排队任务执行。
- en: 'The scheduled task, as shown in the following screenshot, allows us to choose the registered
    Docker image along with the time of execution and a few other options:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示的定时任务允许我们选择注册的Docker镜像以及执行时间和其他一些选项：
- en: '![](assets/afdb4665-59f0-4bb3-8d05-d22a9fafeec3.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/afdb4665-59f0-4bb3-8d05-d22a9fafeec3.png)'
- en: 'The queued task, as shown in the following screenshot, also allows us to choose
    the registered Docker image, but this time without any specific timing configuration:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，排队任务还允许我们选择注册的Docker镜像，但这次没有任何特定的时间配置：
- en: '![](assets/195b6831-ff13-400e-a34a-6c9e1a1a0812.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/195b6831-ff13-400e-a34a-6c9e1a1a0812.png)'
- en: Using the `iron` console tool, we can create both, the schedule and queue tasks
    based on the `ajzele/greet` worker.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`iron`控制台工具，我们可以基于`ajzele/greet` worker创建计划和排队任务。
- en: 'The following command creates a scheduled task based on the `ajzele/greet`
    worker:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令创建了一个基于`ajzele/greet` worker的计划任务：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `start-at` parameter defines a time in the RFC3339 format.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`start-at`参数以RFC3339格式定义了一个时间。'
- en: For more information about the RFC3339 format, check out [https://tools.ietf.org/html/rfc3339](https://tools.ietf.org/html/rfc3339).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有关RFC3339格式的更多信息，请查看[https://tools.ietf.org/html/rfc3339](https://tools.ietf.org/html/rfc3339)。
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](assets/62b5908c-ed94-43e7-8f1c-5040177b6f1c.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62b5908c-ed94-43e7-8f1c-5040177b6f1c.png)'
- en: 'The Iron.io dashboard should now show this as a new entry under the SCHEDULED
    TASKS section:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Iron.io仪表板现在应该将其显示为SCHEDULED TASKS部分下的新条目：
- en: '![](assets/46ff3923-9a05-4496-a2fa-8a5c4a2d698b.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/46ff3923-9a05-4496-a2fa-8a5c4a2d698b.png)'
- en: When the scheduled time comes, the Iron.io platform will execute this scheduled
    task.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当计划的时间到来时，Iron.io平台将执行此计划任务。
- en: 'The following command creates a queued task based on the `ajzele/greet` worker:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令创建了一个基于`ajzele/greet` worker的排队任务：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows the output of this command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此命令的输出：
- en: '![](assets/14d527b1-f84d-4879-9f90-b6e337065ab5.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/14d527b1-f84d-4879-9f90-b6e337065ab5.png)'
- en: 'The Iron.io dashboard registers every executed task by increasing the Complete
    counter (currently showing *3* in the following screenshot) under the TASKS section:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Iron.io仪表板通过增加TASKS部分下的Complete计数器（在下面的截图中当前显示为*3*）记录每个执行的任务：
- en: '![](assets/1cc021bf-9195-40a4-95a2-0588d956d8bc.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1cc021bf-9195-40a4-95a2-0588d956d8bc.png)'
- en: 'Going into the `ajzele/greet` worker reveals details behind each job, both
    scheduled and queued:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 进入`ajzele/greet` worker可以查看每个作业的详细信息，包括计划和排队的作业。
- en: '![](assets/6ec8a8ac-57dd-4ce4-a397-37237b31fc67.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6ec8a8ac-57dd-4ce4-a397-37237b31fc67.png)'
- en: So far, you have learned how to create a PHP application Docker image, push
    it to the Docker Hub, register it with the Iron.io platform, and start scheduling
    and queueing tasks. The part about scheduling and queueing tasks may be a bit
    tricky as we were doing it from the console and not the PHP code.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经学会了如何创建PHP应用程序Docker镜像，将其推送到Docker Hub，将其注册到Iron.io平台，并开始调度和排队任务。关于调度和排队任务的部分可能有点棘手，因为我们是从控制台而不是从PHP代码中进行的。
- en: 'Luckily, the `composer.json` file references all of the libraries we need,
    to be able to schedule and queue tasks from the PHP code. Let''s assume, for a
    moment, that we grabbed the `iron.json` and `composer.json` files and moved onto
    a completely different server, maybe even our local development machine. All we
    need to do there is to run `composer install` on the console, and create the `index.php`
    file with content as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，`composer.json`文件引用了我们需要的所有库，以便能够从PHP代码中调度和排队任务。假设我们抓取了`iron.json`和`composer.json`文件，并移动到完全不同的服务器，甚至是我们的本地开发机器。在那里，我们只需要在控制台上运行`composer
    install`，并创建内容如下的`index.php`文件：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once this code gets executed, it will create one scheduled and one queued task,
    just as the `iron` console tool does.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这段代码被执行，它将创建一个已计划和一个排队的任务，就像`iron`控制台工具一样。
- en: While we might not host an entire PHP application with it, the Iron.io platform
    makes it easy and hassle-free to create and run various isolated jobs, giving
    developers a worthwhile serverless experience.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可能不会使用它来托管整个PHP应用程序，但Iron.io平台使得创建和运行各种隔离作业变得轻松和无忧。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we took a hands-on approach with two popular serverless
    platforms--AWS and Iron.io. Using the serverless framework, we were able to quickly
    deploy our code to the AWS Lambda service. The actual deployment involved a few
    AWS services, exposing our little chunk of code as a REST API endpoint hitting
    AWS Lambda in the background. With all of the services being managed by AWS, we
    were left with a true serverless experience. Quite a powerful concept, if we think
    about it. Aside from AWS, Iron.io is another interesting serverless platform. Unlike
    real-time code execution on AWS Lamda, the code on Iron.io executes as scheduled/queued
    tasks (not to say that AWS does not have its own queued solution as well). While
    AWS Lambda natively supports Node.js, Java, Python, and .NET Core runtimes, Iron.io
    abstracts the language away by using Docker containers. Still, we were able to
    run PHP, even on AWS Lambda, by wrapping the PHP binary through Node.js.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们采用了两个流行的无服务器平台--AWS和Iron.io的实际操作方法。使用无服务器框架，我们能够快速将我们的代码部署到AWS Lambda服务。实际的部署涉及了一些AWS服务，将我们的小代码块作为一个REST
    API端点暴露出来，后台调用AWS Lambda。由于所有服务都由AWS管理，我们得到了真正的无服务器体验。如果我们考虑一下，这是一个非常强大的概念。除了AWS，Iron.io是另一个有趣的无服务器平台。与AWS
    Lambda上的实时代码执行不同，Iron.io上的代码执行是作为已计划/排队的任务（并不是说AWS没有自己的排队解决方案）。虽然AWS Lambda原生支持Node.js、Java、Python和.NET
    Core运行时，但Iron.io通过使用Docker容器来抽象语言。尽管如此，我们仍然能够通过Node.js来包装PHP二进制文件，甚至在AWS Lambda上运行PHP。
- en: The serverless approach certainly has its appeal. While it might not be the
    complete solution for some of our applications, it can certainly take on the resource-intense
    bits. The effortless use and pay-per-execution model can be a game changer for
    some.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器方法确实具有吸引力。虽然它可能不是我们某些应用程序的完整解决方案，但它确实可以处理资源密集型的部分。无需费力的使用和按执行付费的模式对某些人来说可能是一个改变游戏规则的因素。
- en: Moving forward, we will take a look at what PHP has to offer when it comes to
    the trending reactive programming paradigm.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下PHP在流行的响应式编程范式方面提供了什么。
