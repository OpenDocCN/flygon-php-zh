- en: Chapter 3. Building a Facebook-like Status Poster using NetBeans
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用NetBeans构建类似Facebook的状态发布者
- en: In this chapter, we are going to build a cool PHP project using NetBeans IDE.
    Our plan is straightforward and simple.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用NetBeans IDE构建一个很酷的PHP项目。我们的计划很简单明了。
- en: 'We will be creating a Facebook-like status poster through the following steps:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤创建一个类似Facebook的状态发布者：
- en: Planning the project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划项目
- en: Creating a status stream display list
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建状态流显示列表
- en: Creating a status poster using PHP-AJAX
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP-AJAX创建状态发布者
- en: Most of the social networking platforms, such as Facebook, Twitter, and Google
    Plus, provide a status-posting feature among a user's friends, and also let the
    user view their friends' status posts. So, we will snoop around on how this works
    and how we can build alike. Let's choose to implement an interesting feature similar
    to the most popular social networking platform—Facebook.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数社交网络平台，如Facebook、Twitter和Google Plus，都为用户的朋友提供了状态发布功能，并允许用户查看他们朋友的状态发布。因此，我们将研究这是如何工作的，以及我们如何构建类似的功能。让我们选择实现一个类似最流行的社交网络平台Facebook的有趣功能。
- en: Also, we will discuss MySQL database connection and PHP class creation along
    with our workflow. So, let's go for it...
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将讨论MySQL数据库连接和PHP类创建以及我们的工作流程。所以，让我们开始吧...
- en: Planning the project
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划项目
- en: Proper planning of a project is crucial for the smart development and use of
    mockups, diagrams, and flow charts, so that the project can visualize the requirements
    easily. Moreover, it depicts what you are going to do, and how.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的适当规划对于智能开发和使用样机、图表和流程图至关重要，以便项目可以轻松地可视化需求。此外，它描述了你将要做什么，以及如何做。
- en: We will create a simple Facebook-like ([http://www.facebook.com](http://www.facebook.com))
    status poster, and add a list below it to display the status posts from friends,
    as well as your own statuses. In this single, frontend PHP application, we will
    exercise the JavaScript library **jQuery** ([http://jquery.com/](http://jquery.com/))
    to post the status with **AJAX** ([http://api.jquery.com/jQuery.ajax/](http://api.jquery.com/jQuery.ajax/)).
    The posted status will be displayed on top of the status stack without reloading
    the page.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的类似Facebook的（[http://www.facebook.com](http://www.facebook.com)）状态发布者，并在其下方添加一个列表，以显示朋友的状态发布，以及您自己的状态。在这个单一的前端PHP应用程序中，我们将使用JavaScript库**jQuery**（[http://jquery.com/](http://jquery.com/)）通过**AJAX**（[http://api.jquery.com/jQuery.ajax/](http://api.jquery.com/jQuery.ajax/)）发布状态。发布的状态将在不重新加载页面的情况下显示在状态堆栈顶部。
- en: While planning our project, we will view the final look of the web application
    in advance, and try to understand how we can place a particular functionality
    to work. To discuss various points of the workflow, we will have the workflow
    diagram as well.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划我们的项目时，我们将提前查看Web应用程序的最终外观，并尝试了解如何将特定功能放置到工作中。为了讨论工作流程的各个要点，我们还将拥有工作流程图。
- en: Let's have a look at what we will be building in the final stage.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看最终阶段我们将要构建的内容。
- en: '![Planning the project](graphics/5801_03_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![规划项目](graphics/5801_03_01.jpg)'
- en: 'This **Status Poster** will be functional in the following fashion:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个**状态发布者**将以以下方式运行：
- en: '![Planning the project](graphics/5801_03_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![规划项目](graphics/5801_03_02.jpg)'
- en: According to this figure, the user types in the status box and clicks on the
    **Share** button to trigger the bound JavaScript method inside `Status.js`, to
    post the status via AJAX to the server. The server-side script, `StatusPoster.php`,
    receives the status to save into the database, and responds with a success message
    after accomplishing the task. The frontend code receives the success notification
    and prepends the status at the top of the status post's display stack.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个图，用户在状态框中输入并点击“分享”按钮，触发`Status.js`中绑定的JavaScript方法，通过AJAX将状态发布到服务器。服务器端脚本`StatusPoster.php`接收状态以保存到数据库，并在完成任务后响应成功消息。前端代码接收成功通知，并在状态发布的显示堆栈顶部添加状态。
- en: 'Now, we will break the project into two parts as follows, and will develop
    them accordingly:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将根据以下两部分拆分项目，并相应地开发它们：
- en: Status stream display list
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态流显示列表
- en: Status poster using PHP-AJAX
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP-AJAX创建状态发布者
- en: We have gathered concepts regarding project workflow. So, we can start implementing
    the project right away, as per our planning. From this point, we will directly
    start PHP application development using NetBeans with a new PHP project, and make
    a good practice of the IDE. We know what to do, and within a few minutes we will
    learn how to do it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经收集了关于项目工作流程的概念。因此，根据我们的规划，我们可以立即开始实施项目。从这一点开始，我们将直接使用NetBeans开始PHP应用程序开发，创建一个新的PHP项目，并熟练使用IDE。我们知道该做什么，几分钟内我们将学会如何做。
- en: Understanding JSON-JavaScript Object Notation
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解JSON-JavaScript对象表示法
- en: '**JavaScript Object Notation (JSON)** is a lightweight, data-interchange format,
    and is easy for humans to read and write with. It is an easy format for machines
    to parse and generate, and is based on a subset of the JavaScript programming
    language. JSON is a text format that is completely language-independent.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript对象表示法（JSON）**是一种轻量级的数据交换格式，对人类来说易于阅读和编写。它是机器解析和生成的简单格式，基于JavaScript编程语言的一个子集。JSON是一种完全与语言无关的文本格式。'
- en: 'JSON is built on two structures:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JSON建立在两种结构上：
- en: 'A collection of name/value pairs: In various languages, this is realized as
    an object, record, struct, dictionary, hash table, keyed list, or an associative
    array.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组名称/值对：在各种语言中，这被实现为对象、记录、结构、字典、哈希表、键控列表或关联数组。
- en: 'An ordered list of values: In most languages, this is realized as an array,
    vector, list, or sequence.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有序的值列表：在大多数语言中，这被实现为数组、向量、列表或序列。
- en: 'For example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Introducing jQuery-the definitive JavaScript library
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入jQuery-权威的JavaScript库
- en: jQuery is a fast and concise JavaScript library, which simplifies **DOM** (**Document
    Object Model**) traversing, event handling, animating, and AJAX interactions for
    rapid web development. jQuery is designed to change the way that you write JavaScript—[http://jquery.com/](http://jquery.com/).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery是一个快速而简洁的JavaScript库，简化了DOM（文档对象模型）遍历、事件处理、动画和快速网页开发的AJAX交互。jQuery旨在改变您编写JavaScript的方式-[http://jquery.com/](http://jquery.com/)。
- en: 'Some of the reasons why we should use jQuery are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该使用jQuery的一些原因如下：
- en: Free and open source software
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费和开源软件
- en: Lightweight footprint
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻量级足迹
- en: CSS3-compliant
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符合CSS3标准
- en: Cross-browser
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨浏览器
- en: Minimal code
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小代码
- en: Off-the-shelf plugins
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现成的插件
- en: In simple terms, jQuery enables you to produce powerful and dynamic user interfaces.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，jQuery使您能够生成强大和动态的用户界面。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: With the help of various jQuery plugins, including image slider, content slider,
    pop-up boxes, tabbed content, and so on, the developer's job might be minimized,
    because all they have to do is tweak or customize the small parts of the jQuery
    plugin into bigger parts, which they've used to match their demands.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 借助各种jQuery插件，包括图像滑块、内容滑块、弹出框、选项卡内容等，开发人员的工作可能会减少，因为他们所要做的就是调整或定制jQuery插件的小部分，使其与他们的需求相匹配。
- en: Understanding AJAX-asynchronous JavaScript and XML
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解AJAX-异步JavaScript和XML
- en: '**Asynchronous JavaScript and XML** (**AJAX**) is a programming technique or
    approach used on the client-side to asynchronously retrieve the data from the
    server in the background, without interfering with the display and behavior of
    the existing page. Data is usually retrieved using the `XMLHttpRequest` object.
    Despite the name, the use of XML is not actually required, nor do the requests
    need to be asynchronous.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**异步JavaScript和XML**（**AJAX**）是一种在客户端使用的编程技术或方法，用于在后台异步地从服务器检索数据，而不干扰现有页面的显示和行为。通常使用`XMLHttpRequest`对象检索数据。尽管有这个名字，实际上并不需要使用XML，请求也不需要是异步的。'
- en: The jQuery library has a full suite of AJAX capabilities. The functions and
    methods therein allow us to load the data from the server without a browser page
    refresh.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery库具有完整的AJAX功能。其中的函数和方法允许我们从服务器加载数据，而无需刷新浏览器页面。
- en: Introducing jQuery.ajax()
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍jQuery.ajax()
- en: Let's have a look at the sample `jQuery.ajax()` API.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下示例`jQuery.ajax()` API。
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `$.ajax()` function, you can see that the AJAX configuration object
    (created using the JavaScript object literal) is passed into it, and those configurations
    can be described as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`$.ajax()`函数中，可以看到AJAX配置对象（使用JavaScript对象文字创建）被传递给它，这些配置可以描述如下：
- en: '`url` denotes the URL of the server script to communicate with'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`表示与之通信的服务器脚本的URL'
- en: '`type` denotes the HTTP request type; that is `GET/POST`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`表示HTTP请求类型；即`GET/POST`'
- en: '`data` contains the data to be sent to the server in the form of either a key
    value pair or as URL parameters'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`包含要发送到服务器的数据，可以是键值对或URL参数的形式'
- en: '`success` holds the AJAX success callback or method to perform on fetched data'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`success`保存AJAX成功回调或在获取数据时执行的方法'
- en: '`error` holds the AJAX error callback'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`保存AJAX错误回调'
- en: 'Now, let''s have another example where `jQuery.ajax()` simply loads a JavaScript
    file from the server:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再举一个例子，`jQuery.ajax()`只是从服务器加载一个JavaScript文件：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `dataType` defines the kind of data to be retrieved from the server; such
    a kind can be XML, JSON, `script`, plain text, and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`dataType`定义了要从服务器检索的数据类型；这种类型可以是XML、JSON、`script`、纯文本等。
- en: Introducing PHP Data Objects (PDO)
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍PHP数据对象（PDO）
- en: The **PHP Data Objects** (**PDO**) extension defines a lightweight and consistent
    interface for accessing databases in PHP. PDO provides a data-access abstraction
    layer, which means that regardless of which database you're using, you use the
    same functions to issue the queries and fetch the data. PDO does not provide database
    abstraction; it doesn't rewrite SQL or emulate missing features. You should use
    a full-blown abstraction layer if you need that facility.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**PHP数据对象**（**PDO**）扩展定义了一个轻量级和一致的接口，用于在PHP中访问数据库。PDO提供了一个数据访问抽象层，这意味着无论您使用哪个数据库，您都可以使用相同的函数来发出查询和获取数据。PDO不提供数据库抽象；它不重写SQL或模拟缺失的功能。如果您需要该功能，应该使用完整的抽象层。'
- en: 'It''s worth mentioning that PDO supports prepared statements, which are:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是PDO支持预处理语句，即：
- en: '**Safer:** PDO or the underlying database library will take care of escaping
    the bound variables for you. You will never be vulnerable to SQL injection attacks
    if you always use prepared statements.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更安全：**PDO或底层数据库库将为您处理绑定变量的转义。如果始终使用预处理语句，您将永远不会受到SQL注入攻击的威胁。'
- en: '**(Sometimes) Faster:** Many databases will cache the query plan for a prepared
    statement and refer to the prepared statement with a symbol, instead of retransmitting
    the entire query text. This is most noticeable if you prepare a statement only
    once, and then reuse the prepared statement object with different variables.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**（有时）更快：**许多数据库将为预处理语句缓存查询计划，并使用符号引用预处理语句，而不是重新传输整个查询文本。如果您只准备一次语句，然后使用不同的变量重用预处理语句对象，这一点最为明显。'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PHP 5.3 comes with a PDO and PDO_MYSQL driver built-in. More at [http://www.php.net/manual/en/book.pdo.php](http://www.php.net/manual/en/book.pdo.php).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 5.3内置了PDO和PDO_MYSQL驱动程序。更多信息请访问[http://www.php.net/manual/en/book.pdo.php](http://www.php.net/manual/en/book.pdo.php)。
- en: Creating the NetBeans PHP project
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建NetBeans PHP项目
- en: After finishing planning the task, we are going the deal with its practical
    implementation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 完成任务规划后，我们将处理其实际实施。
- en: Press *Ctrl+Shift+N* to start the new NetBeans PHP project and proceed with
    the creation of a new project as already discussed in [Chapter 1](ch01.html "Chapter 1. Setting
    up your Development Environment"), *Setting up your Development Environment*.
    Let's name the project as `chapter3` for our tutorial.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 按下*Ctrl+Shift+N*开始新的NetBeans PHP项目，并按照[第1章](ch01.html "第1章。设置开发环境")中已经讨论过的步骤创建新项目，*设置开发环境*。让我们将项目命名为`chapter3`，用于我们的教程。
- en: As we have created the PHP project, we will have the `index.php` file created
    automatically inside the project. So, the project can be located by pointing your
    browser to `http://localhost/chapter3/`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建了PHP项目时，项目中将自动创建`index.php`文件。因此，可以通过将浏览器指向`http://localhost/chapter3/`来定位项目。
- en: Creating the status stream display list
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建状态流显示列表
- en: According to the first part of our project, we will now create the status stream
    display list. In order to do this, we need a PHP class and a MySQL database, filled
    with some dummy data representing status posts. The PHP class, `StatusPoster.php`,
    will contain the MySQL database connection using the PDO inside its constructor,
    and a method to fetch the rows of status entries from the database.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据项目的第一部分，我们现在将创建状态流显示列表。为了做到这一点，我们需要一个PHP类和一个MySQL数据库，其中填充了一些代表状态帖子的虚拟数据。PHP类`StatusPoster.php`将在其构造函数中包含使用PDO的MySQL数据库连接，并包含一个从数据库中提取状态条目的方法。
- en: Setting up the database server
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库服务器
- en: To store and retrieve the status posts from the database, we connect with the
    MySQL database server, create the database and table to insert status entries,
    and fetch those entries to display within a status stream.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数据库中存储和检索状态帖子，我们连接到MySQL数据库服务器，创建数据库和表以插入状态条目，并获取这些条目以在状态流中显示。
- en: Time for action — connecting with MySQL database server
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作-连接到MySQL数据库服务器
- en: 'In this section, we will create a MySQL server connection by giving access
    credentials to the IDE, which displays a list of available databases under that
    connection in the IDE:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过向IDE提供访问凭据来创建MySQL服务器连接，IDE将在连接下显示可用数据库的列表：
- en: First of all, we will create the MySQL database server connection inside the
    IDE; press *Ctrl+5* to bring the **Services** window to focus, expand the **Databases**
    node, right-click on **MySQL Database Server**, and choose **Properties** to open
    the **MySQL Server Properties** window, as shown in the following screenshot:![Time
    for action — connecting with MySQL database server](graphics/5801_03_03.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在IDE内创建MySQL数据库服务器连接；按下*Ctrl+5*将**服务**窗口置于焦点，展开**数据库**节点，在**MySQL数据库服务器**上右键单击，并选择**属性**以打开**MySQL服务器属性**窗口，如下面的屏幕截图所示：![执行操作-连接到MySQL数据库服务器](graphics/5801_03_03.jpg)
- en: In the previous screenshot, the IDE already filled in the default values for
    the MySQL server details, such as the hostname, port number, username, and the
    password you just added. You may update these details at any time, as and when
    you need to.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个屏幕截图中，IDE已经填写了MySQL服务器详细信息的默认值，如主机名、端口号、用户名和您刚刚添加的密码。您可以随时更新这些详细信息。
- en: Click on the **Admin Properties** tab, which allows you to enter the information
    for controlling your MySQL server. Click on the **OK** button to save the setting.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**管理属性**选项卡，允许您输入控制MySQL服务器的信息。单击**确定**按钮以保存设置。
- en: Now, you should have all the available databases listed under the **MySQL Server**
    node, as shown in the following screenshot:![Time for action — connecting with
    MySQL database server](graphics/5801_03_04.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该在**MySQL服务器**节点下列出所有可用的数据库，如下面的屏幕截图所示：![执行操作-连接到MySQL数据库服务器](graphics/5801_03_04.jpg)
- en: What just happened?
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We have successfully connected with the MySQL server and listed all the databases
    available for the provided database user. We actually made the MySQL databases
    accessible from the IDE, so that we can directly operate any sort of database
    queries from the IDE in a quick way. Now, we will create a new database and table
    in there.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功连接到MySQL服务器，并列出了为提供的数据库用户提供的所有可用数据库。实际上，我们使得可以从IDE直接快速操作任何类型的数据库查询。现在，我们将在其中创建一个新的数据库和表。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See *Appendix* for NetBeans IDE keyboard shortcuts.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有关NetBeans IDE键盘快捷键，请参见*附录*。
- en: Creating the database and table
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库和表
- en: It's a common practice to have separate databases for each project. So, we will
    use a new database for our project, and a table to store entries. The IDE provides
    excellent GUI facilities for database management, such as SQL editor, query output
    viewer, and table viewer with column list.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个项目使用单独的数据库是一种常见做法。因此，我们将为我们的项目使用一个新的数据库，并创建一个表来存储条目。IDE提供了出色的GUI工具，用于数据库管理，如SQL编辑器、查询输出查看器和带有列列表的表查看器。
- en: Time for action — creating MySQL database and table
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作-创建MySQL数据库和表
- en: From the **MySQL Server** node, we shall create a new database and run a query
    to create the table along with the necessary column fields.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从**MySQL服务器**节点，我们将创建一个新的数据库，并运行一个查询来创建表以及必要的列字段。
- en: From the **Services** window, right-click on the **MySQL Server** node, and
    select **Create Database...**. A new dialog box will appear, as shown in the following
    screenshot:![Time for action — creating MySQL database and table](graphics/5801_03_05.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**服务**窗口，在**MySQL服务器**节点上右键单击，并选择**创建数据库...**。将出现一个新的对话框，如下面的屏幕截图所示：![执行操作-创建MySQL数据库和表](graphics/5801_03_05.jpg)
- en: Enter the name `status_poster` as the value for the **New Database Name** field.
    Leave the checkbox for **Grant Full Access to** unselected. You may grant access
    to a given user, using this checkbox and drop-down list. By default, the `admin`
    user has all the permissions.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**新数据库名称**字段中输入名称`status_poster`。不要选中**授予**的复选框。您可以使用此复选框和下拉列表向特定用户授予权限。默认情况下，`admin`用户拥有所有权限。
- en: Click on **OK** to have the new database listed under the server node, and also
    to have the new database connection node created under the **Databases** node,
    as shown in the following screenshot:![Time for action — creating MySQL database
    and table](graphics/5801_03_06.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击 **OK**，使新数据库列在服务器节点下列出，并且在 **Databases** 节点下创建新的数据库连接节点，如下图所示：![Time for
    action — creating MySQL database and table](graphics/5801_03_06.jpg)
- en: According to this screenshot, there are three subfolders under the status_poster
    connection node—**Tables, Views,** and **Procedures**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个屏幕截图，在status_poster连接节点下有三个子文件夹——**Tables, Views,** 和 **Procedures**。
- en: Now, to create a new table in our database, right-click on the **Tables** folder
    and choose **Execute Command...** to open the **SQL Editor** canvas in the main
    window, as follows:![Time for action — creating MySQL database and table](graphics/5801_03_07.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要在我们的数据库中创建一个新表，右键单击 **Tables** 文件夹，选择 **Execute Command...** 打开主窗口中的 **SQL
    Editor** 画布，如下所示：![Time for action — creating MySQL database and table](graphics/5801_03_07.jpg)
- en: 'In the SQL editor, type the following query to create the new `Status` table:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SQL编辑器中，输入以下查询来创建新的 `Status` 表：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we have `id` (auto incremented with each entry) as the primary
    key in the `status` table. We have the `name` field to store user names of up
    to `50` characters. Th`e image` field will store user thumbnail images of up to
    `100` characters. The status field will store user status posts of maximum 500
    characters, and the `timestamp` field will keep a track of the time when the status
    was posted. The database engine has chosen `MyISAM` to provide faster table entries.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在 `status` 表中，我们有 `id`（每个条目都会自动增加）作为主键。我们有 `name` 字段，可以存储长达 `50` 个字符的用户名称。`image`
    字段将存储长达 `100` 个字符的用户缩略图像。状态字段将存储最多500个字符的用户状态帖子，而 `timestamp` 字段将跟踪状态发布的时间。数据库引擎选择了
    `MyISAM` 以提供更快的表条目。
- en: So, all you need to do is just type in the MySQL query inside the NetBeans query
    editor, and run the query to have your database ready.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你只需要在NetBeans查询编辑器中输入MySQL查询，并运行查询，就可以准备好你的数据库。
- en: To execute the query, either click on the **Run SQL** button in the task bar
    at the top (*Ctrl+Shift+E*), or right-click within the SQL editor and choose **Run
    Statement**. The IDE then generates the status table in the database, and you
    will receive a message similar to the following in the **Output** window:![Time
    for action — creating MySQL database and table](graphics/5801_03_08.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行查询，可以单击顶部任务栏上的 **Run SQL** 按钮（*Ctrl+Shift+E*），或者在SQL编辑器中右键单击并选择 **Run Statement**。IDE然后在数据库中生成状态表，并在
    **Output** 窗口中收到类似以下消息：![Time for action — creating MySQL database and table](graphics/5801_03_08.jpg)
- en: You will also have your table status listed under the **Table** subfolder, under
    the `status_poster` database connection, as shown in the following screenshot:![Time
    for action — creating MySQL database and table](graphics/5801_03_09.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还会在 `status_poster` 数据库连接下的 **Table** 子文件夹中看到你的表状态，如下图所示：![Time for action
    — creating MySQL database and table](graphics/5801_03_09.jpg)
- en: In this screenshot, the expanded status table shows the created columns with
    the primary key marked in red.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，扩展的状态表显示了创建的列，主键用红色标记。
- en: What just happened?
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The IDE reveals the database management features; the creation of all those
    databases and tables can be done with a few clicks and keystrokes. Queries can
    be run within the IDE in a prompt manner, and the SQL command's execution output
    is displayed in a separate window. Next, we will insert a few sample entries into
    the created table to display them at the status stream list. We have to add some
    demo user-image files as well for this tutorial.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: IDE显示了数据库管理功能；只需点击几下和按几下键就可以完成所有这些数据库和表的创建。可以在IDE中迅速运行查询，并且SQL命令的执行输出会显示在一个单独的窗口中。接下来，我们将向创建的表中插入一些示例条目，以在状态流列表中显示它们。我们还需要为本教程添加一些演示用户图像文件。
- en: Tip
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can create a table by using the **Create Table** wizard, in **Database Explorer—right-click**
    on the **Tables** node and choose **Create Table**. The **Create Table** dialog
    box opens, from where you can add columns for the table with specific attributes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 **Database Explorer** 中的 **Create Table** 向导来创建表——右键单击 **Tables** 节点，选择
    **Create Table**。**Create Table** 对话框会打开，你可以在其中为表添加具体属性的列。
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See *Appendix* for NetBeans IDE keyboard shortcuts.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 *附录* 以获取NetBeans IDE键盘快捷键。
- en: Inserting sample rows into the table
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将示例行插入表中
- en: 'Right-click on the `status` table under the **Tables** subfolder, choose **Execute
    Command...**, and type the following query in the SQL editor, to insert some sample
    rows into the `status` table:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击 **Tables** 子文件夹下的 `status` 表，选择 **Execute Command...**，在SQL编辑器中输入以下查询，向
    `status` 表中插入一些示例行：
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see that we have a few MySQL `INSERT` queries to store some test users'
    data, such as name, image, status post, and Unix timestamp, for the status stream
    display list. Each such `INSERT` query inserts a row into the `status` table.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们有一些MySQL `INSERT` 查询来存储一些测试用户的数据，比如姓名、图片、状态帖子和Unix时间戳，用于状态流显示列表。每个这样的
    `INSERT` 查询都会向 `status` 表中插入一行。
- en: 'So, we have some sample rows in our table. In order to verify that the records
    have been added to the `status` table, right-click on the `status` table and choose
    **View Data...**. A new SQL editor tab opens in the main window with the `select
    * from status` query inside the SQL editor. Executing this statement will generate
    a tabular data viewer in the lower region of the main window, as shown in the
    following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的表中有一些示例行。为了验证记录是否已添加到 `status` 表中，右键单击 `status` 表，选择 **View Data...**。在主窗口中会打开一个新的SQL编辑器选项卡，其中包含
    `select * from status` 查询。执行此语句将在主窗口的下部区域生成一个表格数据查看器，如下图所示：
- en: '![Inserting sample rows into the table](graphics/5801_03_10.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![Inserting sample rows into the table](graphics/5801_03_10.jpg)'
- en: This SQL query is quite self-explanatory, where the `SELECT` keyword is used
    to select data from the table, and the SQL shorthand`-*` is used to denote that
    all the columns should be selected from the table.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个SQL查询相当不言自明，其中使用`SELECT`关键字从表中选择数据，并使用SQL简写`-*`表示应从表中选择所有列。
- en: Adding sample user image files
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加示例用户图像文件
- en: In this tutorial, we have inserted some sample rows to the `status` table; in
    the `image` column, we have some user image filenames, which we actually stored
    under the `user` folder, inside the project's `images` directory. Those sample
    user images can be found inside the project's source of this chapter. Download
    this complete project source from the Packt Publishing website and copy the sample
    user images.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们已经向`status`表中插入了一些示例行；在`image`列中，我们有一些用户图像文件名，实际上我们将它们存储在项目的`images`目录下的`user`文件夹中。这些示例用户图像可以在本章的项目源代码中找到。从Packt
    Publishing网站下载完整的项目源代码，并复制示例用户图像。
- en: To create a subfolder inside the `project` folder, right-click on the `chapter3`
    project node, and select **New | Folder...**; type the folder name `images` inside
    the **New Folder** dialog box, and click on **Finish** to create the folder. Now
    create another folder under the `images` directory named "user" in the same way,
    and put the copied sample user image files there.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`project`文件夹内创建一个子文件夹，在`chapter3`项目节点上右键单击，然后选择**新建|文件夹...**；在**新建文件夹**对话框中输入文件夹名称`images`，然后单击**完成**以创建文件夹。现在以相同的方式在`images`目录下创建另一个名为"user"的文件夹，并将复制的示例用户图像文件放在那里。
- en: Creating the StatusPoster PHP class
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建StatusPoster PHP类
- en: The purpose of the `StatusPoster` PHP class is to query the database for fetching
    and inserting status entries. A method of this class will be used to insert the
    status entries into that database table, and another method will be used to perform
    the action of fetching entries from the table. Simply, the class will serve as
    a database agent and can be used for necessary database operations.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`StatusPoster` PHP类的目的是查询数据库以获取和插入状态条目。该类的一个方法将用于将状态条目插入到数据库表中，另一个方法将用于执行从表中获取条目的操作。简而言之，该类将作为数据库代理，并可用于必要的数据库操作。'
- en: Time for action — creating a class, adding a constructor, and creating methods
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间-创建类，添加构造函数和创建方法
- en: We will create the `StatusPoster.php` file and the class skeleton using the
    NetBeans code template, and to create methods within the class, we will use the
    `function` template as well. We will create a MySQL database connection using
    a PDO inside the class constructor, so that the database connection is created
    along with the object instantiation and `getStatusPosts()` method to fetch the
    status posts from the table.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用NetBeans代码模板创建`StatusPoster.php`文件和类骨架，并在类内创建方法时，我们也将使用`function`模板。我们将在类构造函数中使用PDO创建MySQL数据库连接，以便在实例化对象和`getStatusPosts()`方法时创建数据库连接以从表中获取状态帖子。
- en: From the **Projects** pane, right-click on project name `chapter3`, select **New
    | PHP File...**, and name the file `StatusPoster`, as shown in the following screenshot:![Time
    for action — creating a class, adding a constructor, and creating methods](graphics/5801_03_11.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**窗格中，右键单击项目名称`chapter3`，选择**新建|PHP文件...**，并将文件命名为`StatusPoster`，如下截图所示：![操作时间-创建类，添加构造函数和创建方法](graphics/5801_03_11.jpg)
- en: Click on **Finish** to have the file added to our project and automatically
    opened in the editor. You will see PHP starting and ending tags placed inside
    the file.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**完成**，将文件添加到我们的项目中，并自动在编辑器中打开。您将看到文件中放置了PHP起始和结束标记。
- en: In order to create the PHP class skeleton, we will use PHP code templates. We
    type `cls` and press the *Tab* key to obtain the class skeleton with a constructor
    inside, as follows:![Time for action — creating a class, adding a constructor,
    and creating methods](graphics/5801_03_12.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建PHP类的骨架，我们将使用PHP代码模板。我们输入`cls`并按下*Tab*键，以获得包含构造函数的类骨架，如下所示：![操作时间-创建类，添加构造函数和创建方法](graphics/5801_03_12.jpg)
- en: In the preceding screenshot, `classname` is already selected. You will just
    have to type `StatusPoster` as the value for `classname`, and press the *Tab key*
    to select the constructor name, as shown in the following screenshot:![Time for
    action — creating a class, adding a constructor, and creating methods](graphics/5801_03_13.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述截图中，`classname`已经被选中。您只需输入`StatusPoster`作为`classname`的值，并按下*Tab键*选择构造函数名称，如下截图所示：![操作时间-创建类，添加构造函数和创建方法](graphics/5801_03_13.jpg)
- en: The constructor name remains intact, as it is the default PHP 5 naming convention
    for the constructor.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数名称保持不变，因为它是默认的PHP 5构造函数命名约定。
- en: 'Now, add some class constants and attributes to hold the database credentials,
    as shown in the following code snippet:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加一些类常量和属性来保存数据库凭据，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see the class constants added, which contain database information, such
    as the database server name, username, password, and database name, respectively.
    A `private` class variable `$db` has been added to hold the database connection
    inside a PDO object. You may modify those constants as per your own requirements.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到添加的类常量，其中包含数据库信息，如数据库服务器名称、用户名、密码和数据库名称。已添加了一个`private`类变量`$db`，用于在PDO对象中保存数据库连接。您可以根据自己的需求修改这些常量。
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Private:** This property or method can be used only by the class or object
    that it is a part of; it cannot be accessed elsewhere.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Private:** 此属性或方法只能被类或对象使用；它不能在其他地方访问。'
- en: 'To fetch the status posts from the `status` table, we will add an empty method
    named `getStatusPosts` inside the class. To do this, type `fnc` and press *Tab*
    to have the empty function code generated with the selected function name. Type
    the selected function name as `getStatusPosts`, and drop the parameter `$param`
    variable this time. Our class skeleton will look similar to the following:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了从`status`表中获取状态帖子，我们将在类中添加一个名为`getStatusPosts`的空方法。为此，输入`fnc`并按*Tab*以生成具有所选函数名称的空函数代码。这次输入所选的函数名称为`getStatusPosts`，并且不要放入参数`$param`变量。我们的类框架将类似于以下内容：
- en: '[PRE6]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have our class skeleton ready, and we shall add code inside those class methods.
    Now, we will create the database connection code inside the constructor.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了类的框架，并且将在这些类方法中添加代码。现在，我们将在构造函数中创建数据库连接代码。
- en: 'To connect MySQL using PDO, type the following lines inside the class constructor
    so that it looks similar to the following code snippet:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用PDO连接MySQL，将以下行输入类构造函数中，使其看起来类似于以下代码片段：
- en: '[PRE7]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`public function __construct ()` connects with the MySQL database using a PDO—the
    database connection in terms of a PDO instance is stored in the class''s private
    variable.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`public function __construct()`使用PDO连接到MySQL数据库-以PDO实例的形式存储在类的私有变量中。'
- en: The `$dsn` variable contains **Data Source Name (DSN)**, which holds the information
    required to connect to the database. One of the biggest advantages of using PDO
    is that if we want to migrate to other SQL solutions, then all we need to do is
    adjust the DSN parameter string.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`$dsn`变量包含**数据源名称（DSN）**，其中包含连接到数据库所需的信息。使用PDO的最大优势之一是，如果我们想要迁移到其他SQL解决方案，那么我们只需要调整DSN参数字符串。'
- en: 'The following line creates a PDO instance to represent a connection to the
    requested database, and returns a PDO object on success:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行创建了一个PDO实例，表示与请求的数据库的连接，并在成功时返回一个PDO对象：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that it throws a `PDOException` exception if the attempt to connect to
    the requested database fails.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果尝试连接到请求的数据库失败，它会抛出一个`PDOException`异常。
- en: 'To select the status posts from the table, we shall write a `select` query
    with the help of an auto completion code inside the `getStatusPosts` method. As
    we discussed in the previous chapter, SQL code completion begins with the SQL
    keyword `SELECT` and by pressing *Ctrl+Space bar*. So, we will proceed according
    to these steps and write the following query code inside this method:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了从表中选择状态帖子，我们将在`getStatusPosts`方法中使用自动完成代码编写一个`select`查询。正如我们在上一章中讨论的那样，SQL代码自动完成从SQL关键字`SELECT`开始，通过按下*Ctrl+空格*。因此，我们将按照这些步骤进行，并在这个方法中编写以下查询代码：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With this code, we selected columns (`name, image, status,` and `timestamp`),
    from the table status ordered by timestamp, in descending order. We also selected
    id in ascending order, by default. The `prepare()` method prepares the SQL statement
    to be executed by the `PDOStatement::execute()` method. After the `execute()`
    method, if rows are found, then it fetches and returns all the table entries.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这段代码，我们从表status中选择了列（`name, image, status`和`timestamp`），按时间戳降序排列。我们还按默认情况选择了id按升序排列。`prepare()`方法准备要由`PDOStatement::execute()`方法执行的SQL语句。在`execute()`方法之后，如果找到行，则它会获取并返回所有表条目。
- en: 'Now, we will instantiate an object of this class at the bottom of this file,
    with the following line:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将在文件底部实例化这个类的对象，使用以下行：
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What just happened?
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The PDO instance is created at the class constructor and is stored in the `$db`
    variable, so other member methods can access this class variable as `$this->db`,
    to use PDO methods such as `prepare(), execute()`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: PDO实例是在类构造函数中创建的，并存储在`$db`变量中，因此其他成员方法可以访问这个类变量作为`$this->db`，以使用PDO方法，如`prepare(),
    execute()`。
- en: Calling `PDO::prepare()` and `PDOStatement::execute()` for statements that will
    be issued multiple times optimizes the performance, by caching of the query plan
    and meta information, and so on.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`PDO::prepare()`和`PDOStatement::execute()`来执行多次的语句可以通过缓存查询计划和元信息等优化性能。
- en: Up to now, we have our database operations code ready inside `StatusPoster.php`.
    We will create an HTML user interface to display the status list fetched from
    the database table status.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在`StatusPoster.php`中准备好了我们的数据库操作代码。我们将创建一个HTML用户界面，以显示从数据库表status中获取的状态列表。
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See *Appendix* for NetBeans IDE keyboard shortcuts.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 查看*附录*以获取NetBeans IDE的键盘快捷键。
- en: Pop quiz — understanding PDO
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验-理解PDO
- en: Which one is not a PDO feature?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪一个不是PDO的特性？
- en: Prepared statements
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备语句
- en: Bind value
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绑定值
- en: Bind object
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绑定对象
- en: Data access abstraction
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据访问抽象
- en: Firing the user interface for displaying the status list
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动用户界面以显示状态列表
- en: The HTML user interface will display the status list retrieved by the `getStatusPosts`
    method from the `StatusPoster` class, and the user will be able to view the list
    of status posts from his test friends along with his own posts. The interface
    will use jQuery and the status list styled by the CSS classes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: HTML用户界面将显示由`StatusPoster`类的`getStatusPosts`方法检索的状态列表，并且用户将能够查看来自他的测试朋友以及他自己的帖子的状态列表。界面将使用jQuery和由CSS类样式化的状态列表。
- en: Time for action — adding CSS support to the document
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-向文档添加CSS支持
- en: 'We shall use `index.php` as our single page interface for the application,
    and will add the CSS stylesheet support to the document. To maintain practice,
    we will try to put style attributes into classes, so that they become reusable
    and can be utilized as an element''s class name whenever a specific class of styles
    is required. So, let''s create the CSS classes first:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`index.php`作为应用程序的单页面界面，并将向文档添加CSS样式表支持。为了保持实践，我们将尝试将样式属性放入类中，以便它们变得可重用，并且可以在需要特定样式类的元素的类名中使用。因此，让我们首先创建CSS类：
- en: Create a folder named `styles` inside our project source directory for our CSS
    file.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的项目源目录中创建一个名为`styles`的文件夹，用于我们的CSS文件。
- en: 'To create a **Cascading Style Sheet** where CSS classes reside, right-click
    on the `styles` folder inside the project, select **New | Cascading Style Sheet**
    from the **New Cascading Style Sheet** dialog box, name the CSS file as `styles.css`,
    and hit **Finish**. Drop all the comments and code blocks in the opened CSS file.
    Type the following style classes in the CSS file:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建一个**级联样式表**，其中包含CSS类，右键单击项目中的`styles`文件夹，从**新级联样式表**对话框中选择**新建|级联样式表**，将CSS文件命名为`styles.css`，然后点击**完成**。删除已打开的CSS文件中的所有注释和代码块。在CSS文件中键入以下样式类：
- en: '[PRE11]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We will use a `container` class to apply styles on the application interface
    container `<div>` inside the document body; `ul` li will represent the listed
    items, which are status `li` items with the parent `ul` element, and other HTML
    elements, such as h1, `img`, and `textarea`, which are also styled using CSS classes.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`container`类来在文档主体内的应用程序界面容器`<div>`上应用样式；`ul` li将表示列出的项目，这些项目是具有父`ul`元素的状态`li`项目，以及其他HTML元素，如h1、`img`和`textarea`，也使用CSS类进行样式设置。
- en: 'Add the following PHP code snippet at the top of the `index.php` file:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.php`文件的顶部添加以下PHP代码片段：
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have defined a PHP constant for defining the base URL for the web application.
    The base URL can be used to provide an absolute path for the project asset files
    (CSS or JS files). You may put your project directory name in place of [Chapter
    3](ch03.html "Chapter 3. Building a Facebook-like Status Poster using NetBeans").
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为Web应用程序定义了一个PHP常量来定义基本URL。基本URL可用于为项目资产文件（CSS或JS文件）提供绝对路径。您可以在[第3章]（ch03.html“第3章。使用NetBeans构建类似Facebook的状态发布者”）的位置放置您的项目目录名称。
- en: Now, add the following line to your `index.php` document heading below the `<title>`
    tag, to include the CSS file.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`<title>`标签下的`index.php`文档标题中添加以下行，以包含CSS文件。
- en: '[PRE13]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With this line, we have embedded the CSS file into our HTML document. Here,
    `BASE_URL` tells us that the file `styles/styles.css` is available under the project
    directory. So, our interface elements will inherit styles from the `styles.css`
    file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这行，我们已将CSS文件嵌入到我们的HTML文档中。在这里，`BASE_URL`告诉我们`styles/styles.css`文件在项目目录下可用。因此，我们的界面元素将继承`styles.css`文件的样式。
- en: What just happened?
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: In order to maintain a consistent interface over browsers, various HTML elements
    have been styled using the CSS classes, and some classes are written from where
    the assignee elements will inherit the styles.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在各种浏览器上保持一致的界面，使用CSS类对各种HTML元素进行了样式设置，并且一些类是从分配元素将继承样式的位置编写的。
- en: 'In order to maintain the CSS code to minimum lines, comma separated classes
    or element names have been used for sharing common attributes, as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将CSS代码保持在最小行数，逗号分隔的类或元素名称已用于共享公共属性，如下所示：
- en: '[PRE14]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, the `padding:5px`; style will be applied to the mentioned elements or
    with the given classes. Therefore, common attributes among the classes can be
    mitigated in this way.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`padding:5px`样式将应用于所述元素或具有给定类的元素。因此，类之间的共同属性可以通过这种方式减少。
- en: 'To understand the class reusability issue, let''s have a look at the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解类的可重用性问题，让我们看一下以下内容：
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can use `left` as the class name for multiple elements, which need the `float:left`
    style, such as `<div class="left">, <img class="left" />`, and so on.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`left`作为多个元素的类名，这些元素需要`float:left`样式，例如`<div class="left">，<img class="left"
    />`等。
- en: Time for action — adding jQuery support and custom JS library
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-添加jQuery支持和自定义JS库
- en: We will add a jQuery (a JavaScript library; more at [http://jquery.com/)](http://jquery.com/))
    support to the document and create a jQuery-based, custom JS library.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为文档添加jQuery（一个JavaScript库；更多信息请访问[http://jquery.com/)](http://jquery.com/)）支持，并创建基于jQuery的自定义JS库。
- en: 'For the JS library, we will create a separate JavaScript file, `status.js`,
    where the interface JS code will reside to serve interface tasks, such as posting
    statuses via AJAX and some utility methods for displaying the local date-time.
    So, let''s create our custom JS library:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JS库，我们将创建一个单独的JavaScript文件`status.js`，其中将包含界面JS代码以执行界面任务，例如通过AJAX发布状态以及一些用于显示本地日期时间的实用方法。因此，让我们创建我们的自定义JS库：
- en: 'To add the jQuery support from Google Content Delivery Network (CDN) to our
    document, add the following lines to your `index.php` document heading below the
    `<link>` tag:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从谷歌内容交付网络（CDN）添加jQuery支持到我们的文档中，在`index.php`文档标题下的`<link>`标签之后添加以下行：
- en: '[PRE16]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With this line, we have the latest jQuery version from the CDN. Note that version
    1.7 means the latest available version, which is 1.7.X, unless you have specified
    the exact number, which is 1.7.2 or greater. Now, our document is jQuery-enabled
    and ready to use the jQuery features.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这行，我们就可以从CDN获取最新的jQuery版本。请注意，版本1.7表示最新可用版本，即1.7.X，除非您已指定确切的数字，即1.7.2或更高版本。现在，我们的文档已启用jQuery，并准备使用jQuery功能。
- en: 'To create the jQuery-based custom JS library, add a new JavaScript file inside
    the `js` folder, and name it as `status.js`. Include the file in your document
    head, so that the `<head>` tag looks similar to the following code snippet:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建基于jQuery的自定义JS库，请在`js`文件夹中添加一个新的JavaScript文件，并将其命名为`status.js`。将文件包含在文档头部，使得`<head>`标签看起来类似于以下代码片段：
- en: '[PRE17]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, create the `Status` JS library skeleton inside the `status.js` file, as
    follows:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`status.js`文件中创建`Status` JS库骨架，如下所示：
- en: '[PRE18]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can see that the variable `Status` contains an object using the JavaScript
    object literal (key value pairs enclosed within curly braces).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到变量`Status`包含一个使用JavaScript对象文字（在大括号内封闭的键值对）的对象。
- en: '[PRE19]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that the library code is wrapped with the jQuery `$(document).ready()`
    function.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，库代码被包装在jQuery `$(document).ready()`函数中。
- en: 'Let''s write some utility JavaScript methods inside the `status` object and
    type the following `currentTime ()` method:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`status`对象内编写一些实用的JavaScript方法，并键入以下`currentTime()`方法：
- en: '[PRE20]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `currentTime ()` method returns the local time converted from the Unix timestamp.
    Remember that if the timestamp is not present, then it returns the current local
    time. A sample output could be 3:22 AM or 2:30 PM.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentTime()`方法返回从Unix时间戳转换的本地时间。请记住，如果时间戳不存在，则返回当前本地时间。示例输出可能是上午3:22或下午2:30。'
- en: You can see that in the line `var currentTime = new Date(timestamp * 1000);`,
    the Unix timestamp has been converted to the JS timestamp in milliseconds, and
    a new Date object has been created. Hours and minutes are picked from the `currentTime.getHours()`
    and `currentTime. getMinutes ()` methods, respectively. Note that the `currentTime
    () method` is delimited with a comma (,).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到在`var currentTime = new Date(timestamp * 1000);`这一行中，Unix时间戳已经转换为毫秒级的JS时间戳，并创建了一个新的Date对象。小时和分钟分别从`currentTime.getHours()`和`currentTime.getMinutes()`方法中获取。请注意，`currentTime()`方法用逗号（,）分隔。
- en: 'Add the `currentDate ()` method inside the `Status` object, as follows:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`currentDate()`方法添加到`Status`对象中，如下所示：
- en: '[PRE21]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `currentDate ()` method returns the converted local date. Similar to the
    previous method in `step 4`, it fetches the date, month, and year from the Date
    object.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentDate()`方法返回转换后的本地日期。与`步骤4`中的先前方法类似，它从Date对象中获取日期、月份和年份。'
- en: 'Now, add the `getLocalTimeStr ()` method as follows:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加`getLocalTimeStr()`方法如下：
- en: '[PRE22]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The above method returns the formatted time and date concatenated in a string.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法返回连接的格式化时间和日期字符串。
- en: What just happened?
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: jQuery provides us with a special utility on the document object called `ready`,
    allowing us to execute the code only after the DOM has completely finished loading.
    Using `$(document).ready()`, we can queue up a series of events and have them
    executed after the DOM is initialized. The `$(document).ready()` method takes
    a function (anonymous) as its argument, which is passed to be called after the
    DOM has finished loading, and executes the code inside the function.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery为我们提供了一个称为`ready`的文档对象上的特殊实用程序，允许我们在DOM完全加载完成后执行代码。使用`$(document).ready()`，我们可以排队一系列事件，并在DOM初始化后执行它们。`$(document).ready()`方法接受一个函数（匿名）作为其参数，该函数在DOM加载完成后被调用，并执行函数内的代码。
- en: If you are developing code for distribution, it's always important to compensate
    for any possible name clashing. So we passed `$` as an argument for the anonymous
    function. That `$` refers to `jQuery` inside, and hence the other `$` functions,
    which are imported after the script, don't conflict.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发用于分发的代码，始终重要的是要补偿任何可能的名称冲突。因此，我们将`$`作为匿名函数的参数传递。这个`$`在内部指的是`jQuery`，因此在脚本之后导入的其他`$`函数不会发生冲突。
- en: Finally, to obtain the local date and time from the UNIX timestamp, we have
    added the utility methods in our custom JavaScript library. As for a usage example,
    the `currentDate()` utility method can be called as `this.currentDate()and Status.currentDate()`
    from the object's inside and outside scope, respectively.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了从UNIX时间戳获取本地日期和时间，我们在自定义JavaScript库中添加了实用方法。至于用法示例，`currentDate()`实用方法可以从对象的内部和外部范围分别调用为`this.currentDate()`和`Status.currentDate()`。
- en: Time for action — showing the status list
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作时间-显示状态列表
- en: 'We shall put the interface elements inside `index.php`, and embed the PHP code
    in an appropriate way. So, let''s go through the steps:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把接口元素放在`index.php`中，并以适当的方式嵌入PHP代码。因此，让我们按照以下步骤进行：
- en: 'Modify the `index.php` file inside the `<body>` tag, drop the PHP tag, and
    place the status entries in the `<div>` container tag and elements, as follows:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`index.php`文件，在`<body>`标记内，删除PHP标记，并将状态条目放在`<div>`容器标记和元素中，如下所示：
- en: '[PRE23]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: From this code, you can see that our application interface will be within the
    `<div>` container with the id container, and the `<ul>` tag will hold the inner
    `<li>` items' stack containing the status posts from the users, which will be
    populated by some PHP codes.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 从这段代码中，您可以看到我们的应用程序界面将位于id为container的`<div>`容器内，`<ul>`标记将保存内部`<li>`项的堆栈，其中包含用户的状态帖子，这些帖子将由一些PHP代码填充。
- en: 'Above the `<!DOCTYPE html>` tag, at the top PHP code snippet of the `index.php`
    file, type the following lines to integrate the `StatusPoster` class so that the
    code snippet looks similar to the following:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.php`文件的`<!DOCTYPE html>`标记上方的顶部PHP代码片段中，键入以下行，以集成`StatusPoster`类，使代码片段看起来类似于以下内容：
- en: '[PRE24]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: From the code, the PHP class file is required once to integrate the class, and
    use its instance into our application. At this line, we called the `getStatusPosts()`
    method of the `$status` object to get all the status entries from the database,
    and the returned resultant array is stored into `$result` as well.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码中，一次需要PHP类文件来集成类，并在我们的应用程序中使用其实例。在这一行，我们调用了`$status`对象的`getStatusPosts()`方法，以从数据库中获取所有状态条目，并将返回的结果数组存储到`$result`中。
- en: 'To display a status stream, we will write the following PHP code to loop through
    the `$result` array inside the `<ul>` tag:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了显示状态流，我们将编写以下PHP代码，以在`<ul>`标记内循环遍历`$result`数组：
- en: '[PRE25]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'At first, the `$result` array has been verified for its proper type. We looped
    through the array to have each entry into the `$row` variable. The preceding server
    script generates one `<li>` item for each status entry, and each `<li>` item contains
    a user image, a hyperlinked name, a user status text, and a UNIX timestamp element.
    Note that the timestamp has been dumped into the `data-timestamp` attribute of
    a `span` element with the class name `localtime`. For a better understanding,
    an item skeleton of the status list is shown in the following diagram:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对`$result`数组进行了正确类型的验证。我们循环遍历数组，将每个条目放入`$row`变量中。前面的服务器脚本为每个状态条目生成一个`<li>`项，每个`<li>`项包含一个用户图像、一个超链接名称、一个用户状态文本和一个UNIX时间戳元素。请注意，时间戳已经转储到具有类名`localtime`的`span`元素的`data-timestamp`属性中。为了更好地理解，状态列表的项目骨架如下图所示：
- en: '![Time for action — showing the status list](graphics/5801_03_14.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![操作时间-显示状态列表](graphics/5801_03_14.jpg)'
- en: Now, we need to convert the PHP-dumped timestamp inside the `data-timestamp`
    attribute using the jQuery code, as soon as the DOM is ready. Add the following
    method inside the `Status` object of the library `status.js:`
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在DOM准备就绪时使用jQuery代码转换`data-timestamp`属性中的PHP转储时间戳。在`status.js`库的`Status`对象中添加以下方法：
- en: '[PRE26]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The method, using jQuery selector, selects all the span elements having the
    data-timestamp attribute with `$('span.localtime[data-timestamp]');.` For each
    element, it parses the timestamp with `$(this).attr('data-timestamp')`, and passes
    to `Status.getLocalTimeStr()` to obtain the local time string. Finally, it sets
    the inner HTML of each `span` element with that local time string.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jQuery选择器的方法选择所有具有`data-timestamp`属性的span元素为`$('span.localtime[data-timestamp]');`。对于每个元素，它使用`$(this).attr('data-timestamp')`解析时间戳，并传递给`Status.getLocalTimeStr()`以获取本地时间字符串。最后，它将每个`span`元素的内部HTML设置为该本地时间字符串。
- en: 'To enable `Status.showLocalTime()` to work immediately with DOM, call the method,
    as follows, before the termination line of `ready()` method:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使`Status.showLocalTime()`立即与DOM一起工作，调用该方法，如下所示，在`ready()`方法的终止行之前：
- en: '[PRE27]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: So, the users will be displayed with their local date and time under each post.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，用户将在每个帖子下显示其本地日期和时间。
- en: Finally, point your browser with the project URL, or press the **Run Project
    (chapter3)** button from the toolbar, or press *F6* from the IDE to have the status
    stream display the list, which looks similar to the following screenshot:![Time
    for action — showing the status list](graphics/5801_03_15.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，指向项目URL的浏览器，或者从工具栏中按下**运行项目（第3章）**按钮，或者从IDE中按下*F6*，以显示状态流显示列表，看起来类似于以下屏幕截图：![行动时间-显示状态列表](graphics/5801_03_15.jpg)
- en: What just happened?
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: The PHP script dumps the `<li>` items inside the `<ul>` tag, and the interface
    JS code `Status.showLocalTime()`; parses the dumped timestamp and displays it
    in the user's local time, as soon as the DOM is ready. In case we display the
    date and time from the UNIX timestamp without the time zone conversion, then we
    may have to deliver the server's date and time, which may not conform to the user's
    time. Again, the user's local timezone is unknown to the server and known to the
    client interface. So in a quick way, we used a client-end code to solve the local
    time display issue.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: PHP脚本将`<li>`项转储到`<ul>`标记中，界面JS代码`Status.showLocalTime()`；解析转储的时间戳，并在DOM准备就绪时以用户的本地时间显示它。如果我们显示UNIX时间戳的日期和时间而不进行时区转换，那么我们可能需要提供服务器的日期和时间，这可能不符合用户的时间。再次，用户的本地时区对服务器来说是未知的，对客户端界面来说是已知的。因此，我们以一种快速的方式使用客户端代码来解决本地时间显示问题。
- en: Hence, we've completed the first part of our project. We have created the interface
    where the status stream looks like Facebook.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经完成了项目的第一部分。我们已经创建了一个界面，状态流看起来像Facebook。
- en: Until now, we have been able to deal with the database operation using the IDE,
    and with the PHP class and method creation using the NetBeans code template, we
    have also been able to create the necessary user interface files for our web application.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经能够使用IDE处理数据库操作，并使用NetBeans代码模板创建PHP类和方法，我们还能够为我们的Web应用程序创建必要的用户界面文件。
- en: Have a go hero — tweaking the CSS
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下-调整CSS
- en: For large status posts, the interface can be found broken inside each `<li>`,
    so it would be best to fix the user interface issue. You may add fixed width into
    the `.content` class in the corresponding CSS file.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较大的状态帖子，界面可能会在每个`<li>`内部找到破损，因此最好修复用户界面问题。您可以在相应的CSS文件中的`.content`类中添加固定宽度。
- en: Pop quiz — understanding CSS
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小测验-理解CSS
- en: What does CSS stand for?
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS代表什么？
- en: Cascaded Style Sheet
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 级联样式表
- en: Cascading Style Sheet
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 级联样式表
- en: Colorful Style Sheet
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多彩样式表
- en: Computer Style Sheet
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算机样式表
- en: What is the correct HTML format for referring to an external stylesheet?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引用外部样式表的正确HTML格式是什么？
- en: '`<link rel="stylesheet" type="text/css" href="mystyle.css">`'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<link rel="stylesheet" type="text/css" href="mystyle.css">`'
- en: '`<style src="mystyle.css">`'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<style src="mystyle.css">`'
- en: '`<stylesheet>mystyle.css</stylesheet>`'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<stylesheet>mystyle.css</stylesheet>`'
- en: What property needs to be added into the CSS class to have some space around
    that element?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要添加到CSS类中的属性是什么，以在该元素周围留出一些空间？
- en: '`padding`'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`填充`'
- en: '`margin`'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`边距`'
- en: '`padding-bottom and padding-top`'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`padding-bottom和padding-top`'
- en: '`display`'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`显示`'
- en: Hatching out the status poster using PHP-AJAX
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP-AJAX孵化状态发布者
- en: The user's status text should be submitted to the server without reloading the
    page. To do this we can use the AJAX approach, where the user's data can be sent
    to the server with the HTTP methods, and wait for the server's response. As soon
    as the server responds, we can parse the response data and may take our decision
    programmatically. In our case, if the server responded with a success result,
    we will update our interface DOM according to that.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的状态文本应该在不重新加载页面的情况下提交到服务器。为此，我们可以使用AJAX方法，其中用户的数据可以使用HTTP方法发送到服务器，并等待服务器的响应。一旦服务器响应，我们可以以编程方式解析响应数据，并可能做出我们的决定。在我们的情况下，如果服务器以成功结果响应，我们将根据此更新我们的界面DOM。
- en: Simply, we will use AJAX to submit the user's status text with the `HTTP POST`
    method to our server-side PHP code residing at `index.php`, and we will configure
    the expected data type from the server to be JSON. So, we can easily parse the
    JSON and determine whether the status was saved successfully or not. From a successful
    server response, we can update the status stream display list and place the newly
    posted status at the top of that list. However, in the case of any failure or
    error, we can parse the error message and display that into the interface as well.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地说，我们将使用AJAX将用户的状态文本提交到位于`index.php`的服务器端PHP代码，使用`HTTP POST`方法，并配置从服务器期望的数据类型为JSON。因此，我们可以轻松解析JSON并确定状态是否成功保存。从成功的服务器响应中，我们可以更新状态流显示列表，并将新发布的状态放在该列表的顶部。但是，在任何失败或错误的情况下，我们也可以解析错误消息并将其显示在界面中。
- en: Time for action — adding the status input box to the interface
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-向界面添加状态输入框
- en: In this section, we will simply add an HTML form consisting of one text area
    for the status post and a **Submit** button for the form submission. We will add
    the form wrapped with a `div` element before the `<ul>` tag at `index.php`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简单地添加一个HTML表单，其中包含一个文本区域用于状态发布，以及一个用于表单提交的**提交**按钮。我们将在`index.php`的`<ul>`标签之前添加包含`div`元素的表单。
- en: 'In order to add the status poster box, we add the following HTML code inside
    the `div#container`, before the `<ul>` tag:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了添加状态发布框，我们将在`div#container`内添加以下HTML代码，位于`<ul>`标签之前：
- en: '[PRE28]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: So, the `div.inputbox` will contain the status input box with a `share` or `submit`
    button. `div#postStatus` will display the post submission progress information
    status that conveys it, whether the status was successfully posted or not. We
    will use some fancy loading `.gif` image while the AJAX post is in progress. The
    `ajaxload.gif` image is also kept inside the project's `images` directory.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`div.inputbox`将包含带有`share`或`submit`按钮的状态输入框。`div#postStatus`将显示发布提交进度信息状态，以传达状态是否成功发布。在AJAX发布进行中，我们将使用一些花哨的加载`.gif`图像。`ajaxload.gif`图像也保存在项目的`images`目录中。
- en: Now, refresh your browser with the project URL, and the status input box should
    look similar to the following screenshot:![Time for action — adding the status
    input box to the interface](graphics/5801_03_16.jpg)
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用项目URL刷新您的浏览器，状态输入框应该看起来与以下截图类似：![行动时间-将状态输入框添加到界面](graphics/5801_03_16.jpg)
- en: What just happened?
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: Check out the line where the `form` tag opened, `<form id="statusFrom" action="index.php"
    method="post" >`. The form can be selected with the `id` attribute using the jQuery
    `action` attribute that contains the script name as `index.php`, which means that
    it will be posted to the same file we are working on. You can see that the `method`
    attribute contains the HTTP method type in which the form will be submitted. We
    don't need the `action` and `method` attributes for the jQuery code. Rather, we
    will keep them in this case. If the browser's JavaScript is disabled, then we
    could still submit the form to `index.php` in the `POST` method.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`form`标签打开的行，`<form id="statusFrom" action="index.php" method="post" >`。可以使用jQuery选择包含脚本名称为`index.php`的`action`属性的`id`属性选择表单，这意味着它将被发布到我们正在工作的同一文件。您可以看到`method`属性包含表单将被提交的HTTP方法类型。我们不需要jQuery代码的`action`和`method`属性。相反，在这种情况下，我们将保留它们。如果浏览器的JavaScript被禁用，那么我们仍然可以以`POST`方法提交表单到`index.php`。
- en: Note that `div#postStatus` is hidden by default using the CSS class `hidden`,
    and will be visible only while AJAX works in progress.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`div#postStatus`默认使用CSS类`hidden`隐藏，并且只有在AJAX工作进行中时才会可见。
- en: Note
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: See *Appendix* for the NetBeans IDE keyboard shortcuts.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 有关NetBeans IDE键盘快捷键，请参阅*附录*。
- en: Adding new status post template to index.php
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将新的状态发布模板添加到index.php
- en: We need to maintain a separation of behavior while coding, as HTML markups shall
    be kept separate from JavaScript codes. Also, we need to update the status stream
    display list, and put the new status post at the top of the list without page
    reloading.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时，我们需要保持行为的分离，即HTML标记应与JavaScript代码分开。此外，我们需要更新状态流显示列表，并在不刷新页面的情况下将新的状态发布放在列表顶部。
- en: We know that each status entry can be organized inside an `<li>` item, where
    inside that item, the entry values such as username, image, and status post with
    local date-time mentioned beneath, should be crafted with appropriate markup elements.
    So, we need to create an entry template for the new status post. Using the template,
    JavaScript code can generate a new interface entry to be placed on top of the
    status stream.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道每个状态条目可以组织在`<li>`项内，在该项内，用户名、图片和带有本地日期时间的状态发布等条目值应该使用适当的标记元素进行构建。因此，我们需要为新的状态发布创建一个条目模板。使用模板，JavaScript代码可以生成一个新的界面条目，放置在状态流的顶部。
- en: 'Add the following template inside the document `<body>` tag, below the `div#container`
    ending tag:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档`<body>`标签内，`div#container`结束标签下方添加以下模板：
- en: '[PRE29]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We can see that there are placeholders, such as `#SRC` for the profile picture's
    image URL, `#NAME` for name of the user for the entry, `#STATUS` for status text,
    and `#TIME` for local date-time. By making a copy of this template, these placeholders
    can be replaced with appropriate values and prepended at the `<ul>` element. Note
    that the entire template is kept inside a hidden `div` element to exclude it from
    the user's view.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有一些占位符，例如`#SRC`用于个人资料图片的图像URL，`#NAME`用于条目的用户名，`#STATUS`用于状态文本，`#TIME`用于本地日期时间。通过复制此模板，这些占位符可以替换为适当的值，并在`<ul>`元素前添加。请注意，整个模板都放在一个隐藏的`div`元素中，以排除它不被用户看到。
- en: Creating the AJAX status poster
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建AJAX状态发布器
- en: AJAX is used to communicate frequently from a browser to the web server. Such
    a famous technique is being vastly used in **Rich Internet Applications** (**RIA**),
    and jQuery provides a very simple AJAX framework. The AJAX poster will post the
    status texts without page reloading, and will update the status stack with the
    latest status entry at the top.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX用于在浏览器和Web服务器之间频繁通信。这种著名的技术被广泛用于**Rich Internet Applications**（**RIA**），而jQuery提供了一个非常简单的AJAX框架。AJAX发布器将在不刷新页面的情况下发布状态文本，并将最新的状态条目更新到顶部的状态堆栈中。
- en: Time for action — creating status poster using JQuery AJAX
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-使用JQuery AJAX创建状态发布器
- en: 'We will create a `post()` method inside the `status.js` library, and bind the
    method with the click event on the **Submit** button. We will create the method
    by adding code lines one after another, as shown in the following steps:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`status.js`库中创建一个`post()`方法，并将该方法与**提交**按钮的单击事件绑定。我们将通过按照以下步骤逐行添加代码来创建该方法：
- en: 'At our `status.js` library, type the following `post()` method, terminated
    with a comma, to add it inside the `Status` library:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`status.js`库中，输入以下`post()`方法，以逗号结尾，将其添加到`Status`库中：
- en: '[PRE30]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: At the variable declaration section, the `myname` and `myimage` variables contain
    a demo logged-in, user's name and profile picture URL. The `loadingHtml` contains
    the img tag for displaying the loading GIF animation. Also, you can see that `statusTxt`
    contains the status box value obtained using `$('#status_box').val()`, and `postStatus`
    caches the `div#postStatus` element.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在变量声明部分，`myname`和`myimage`变量包含了一个演示已登录用户的名称和个人资料图片URL。`loadingHtml`包含用于显示加载GIF动画的img标签。此外，您可以看到`statusTxt`包含使用`$('#status_box').val()`获取的状态框值，`postStatus`缓存了`div#postStatus`元素。
- en: 'Now, add the following line after the variables declaration section within
    the `post()` method:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`post()`方法中的变量声明部分之后添加以下行：
- en: '[PRE31]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This code validates `statusTxt` if it is empty or if it contains a default input
    message, and even if it is within the maximum input limit of 500 characters. The
    method is returned after the execution, if any such validation fails.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码验证了`statusTxt`是否为空，是否包含默认输入消息，以及是否在500个字符的最大输入限制内。如果任何此类验证失败，则在执行后返回该方法。
- en: To display animation loading while the AJAX operation is in progress, we can
    add the following line after the previous line *(step 2):*
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在AJAX操作进行时显示动画加载，我们可以在上一行*(步骤2)*之后添加以下行：
- en: '[PRE32]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It fades in `#postStatus` of the div element with the loading image inside.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 它会在带有加载图像的div元素`#postStatus`中淡入。
- en: Now, it's time to add the AJAX feature inside the method. Add the following
    jQuery code after the previous line *(step 3):*
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候在方法中添加AJAX功能了。在上一行*(步骤3)*之后添加以下jQuery代码：
- en: '[PRE33]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this code, you can see that the AJAX skeleton is added, and the jQuery `$.ajax()`
    method passed with configuration object. The configuration object is created using
    the JavaScript object literal technique. You can see those key-value pairs; for
    example, `data` contains the serialized values of the form using `$('form').serialize(),
    url` holds the server URL where the data is to be submitted, `dataType` is given
    as JSON so that we will have a JSON object passed inside the `success()` callback
    method. Check out the default `success` and `error` callback methods; you can
    see a variable `response` passed into the `success` callback, which is actually
    a JSON object fetched from the server using AJAX.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，您可以看到已添加了AJAX骨架，并且使用jQuery `$.ajax()`方法传递了配置对象。配置对象是使用JavaScript对象字面量技术创建的。您可以看到这些键值对；例如，`data`包含使用`$('form').serialize()`序列化的表单值，`url`保存了数据要提交到的服务器URL，`dataType`设置为JSON，这样我们将在`success()`回调方法中传递一个JSON对象。查看默认的`success`和`error`回调方法；您可以看到一个变量`response`传递到`success`回调中，实际上是使用AJAX从服务器获取的JSON对象。
- en: 'On successful AJAX submission, let''s type the following code inside the `success`
    callback method:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功的AJAX提交中，让我们在`success`回调方法中输入以下代码：
- en: '[PRE34]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: As `response` passed-in is a JSON object, we examine the `response` object for
    the `response.success` attribute, which contains Boolean true or false values.
    If the `response.success` attribute is not set to `true`, then display the error
    message from response.error inside the element `div#postStatus`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`response`传入的是一个JSON对象，我们检查`response`对象的`response.success`属性，其中包含布尔值true或false。如果`response.success`属性未设置为`true`，则在元素`div#postStatus`中显示来自response.error的错误消息。
- en: So, for a success response from the server, we display the message inside `successMsg`
    and clear the input `text_area#status_box` value for the next input. Now, in the
    line `var statusHtml = $('#statusTemplate').html();`, we cached the entry template
    inside the `statusHtml` variable. At the consecutive lines, we have replaced the
    placeholders with proper entry values, and finally prepended the new entry item
    in the `<ul>` element, using the line `$('#container ul').prepend(statusHtml)`.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于来自服务器的成功响应，我们在`successMsg`中显示消息，并清除输入`text_area#status_box`的值以进行下一次输入。现在，在`var
    statusHtml = $('#statusTemplate').html();`行中，我们将条目模板缓存到`statusHtml`变量中。在连续的行中，我们用正确的条目值替换了占位符，并最终在`<ul>`元素中前置了新的条目项，使用了`$('#container
    ul').prepend(statusHtml)`行。
- en: 'In order to trigger `Status.post()` with the event, we bind the method with
    the *click* event on the `Submit` (**share**) button. Add the following code inside
    `status.js` library before the termination of the `$(document).ready()` method
    (after `Status.showLocalTime()` line):'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用事件触发`Status.post()`，我们将该方法与`Submit`（**分享**）按钮上的*click*事件绑定。在`status.js`库中的`$(document).ready()`方法终止之前（`Status.showLocalTime()`行之后）添加以下代码：
- en: '[PRE35]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: What just happened?
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We have serialized the form values to be sent to the server via AJAX, and the
    server response was parsed by the jQuery AJAX feature to obtain a JSON object
    inside the `success` callback method. We examined whether the `response` object
    carries the `success` flag or not. In case a success flag was found, we used it
    to parse the status entry template to prepare the entry HTMLs and prepend the
    entry at the top of the status list.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将表单值序列化以通过AJAX发送到服务器，并且服务器响应被jQuery AJAX功能解析为JSON对象，传递到`success`回调方法中。我们检查了`response`对象是否携带了`success`标志。如果找到了成功标志，我们使用它来解析状态条目模板，准备条目HTML，并将条目置于状态列表顶部。
- en: So, we have the AJAX status poster method `post()` bound with the status **Submit**
    button, which fires with a click on the button. Note that we reflect the `success`
    or `error` messages at the user interface while the `post()` method executes,
    and even displays the loading animation. Hence, we made our application responsive.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将AJAX状态发布方法`post()`绑定到状态**提交**按钮，当单击按钮时触发。请注意，我们在`post()`方法执行时在用户界面上反映`success`或`error`消息，甚至显示加载动画。因此，我们使我们的应用程序具有响应性。
- en: Now, let's add the server code to respond to the AJAX request.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加服务器代码来响应AJAX请求。
- en: Working with StatusPoster.php again
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 再次使用StatusPoster.php进行操作。
- en: 'To insert an entry into the database table''s `status` field, we add a `StatusPoster`
    method to our PHP class, named `insertStatus` as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将条目插入数据库表的`status`字段，我们向我们的PHP类添加了一个`StatusPoster`方法，命名为`insertStatus`，如下所示：
- en: '[PRE36]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The method takes the field values passed in an associative array, `$values`,
    prepares the MySQL insert query for the `status` table, and executes the query.
    Note that we have kept the field names in the `$fields` array and the field values
    in the `$vals` array extracted from the keys and values of the passed arrays.
    We have used `?` in place of all the given values for the prepared statement,
    each of which will be replaced with corresponding values bound with the `PDOStatement::bindValue()`
    method. The `bindValue()` method binds a value to a parameter.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受传入的关联数组`$values`中的字段值，为`status`表准备MySQL插入查询，并执行查询。请注意，我们已将字段名称保留在`$fields`数组中，并且已从传递的数组的键和值中提取出`$vals`数组中的字段值。我们已经在准备的语句中使用`?`代替所有给定的值，每个值都将用`PDOStatement::bindValue()`方法绑定。`bindValue()`方法将一个值绑定到一个参数。
- en: Note that variables containing direct user input should be escaped in order
    to make this data safe before sending in a query to MySQL. A PDO-prepared statement
    takes care of the escaping bound values for you.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，包含直接用户输入的变量应在发送到MySQL的查询之前进行转义，以使这些数据安全。PDO准备的语句会为您处理转义的绑定值。
- en: Finally, the method returns, irrespective of whether the `execute()` method
    was successful or not.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，无论`execute()`方法是否成功，该方法都会返回。
- en: Adding AJAX responder code to index.php
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将AJAX响应器代码添加到index.php
- en: Add the following AJAX responder code inside the PHP code located at the top
    of the `index.php` file, below the line `require_once 'StatusPoster.php';:`
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在位于`index.php`文件顶部的PHP代码中添加以下AJAX响应器代码，位于`require_once 'StatusPoster.php';`的下面：
- en: '[PRE37]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This code checks if there is any `POST` value contained by `$_POST['status']`;
    if yes, it trims the posted status value, and determines the length of the posted
    status string contained in `$statusStr`. The length is measured using the multi-byte,
    string length function `mb_strlen()`. If the string length is within the mentioned
    range, compact the status entry values with the associated database column names
    within an array, and pass the `insertStatus` method of the `StatusPoster` class
    to save the status.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码检查是否存在由`$_POST['status']`包含的任何`POST`值；如果是，则修剪发布的状态值，并确定包含在`$statusStr`中的发布的状态字符串的长度。使用多字节字符串长度函数`mb_strlen()`来测量长度。如果字符串长度在提到的范围内，则使用关联数据库列名将状态条目值压缩到数组中，并将`StatusPoster`类的`insertStatus`方法传递以保存状态。
- en: As the `insertStatus` method returns `true` for successful database insertion,
    we kept the returned value into the `$success` variable. Also, an AJAX request
    can be identified at server by verifying the `$_SERVER['HTTP_X_REQUESTED_WITH']`
    value is `XMLHttpRequest`.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`insertStatus`方法对于成功的数据库插入返回`true`，我们将返回的值保留在`$success`变量中。此外，可以通过验证`$_SERVER['HTTP_X_REQUESTED_WITH']`的值是否为`XMLHttpRequest`来在服务器上识别AJAX请求。
- en: So, for an AJAX request, we will deliver the JSON string; `{"success":true}`
    for `$success` contains Boolean `true`, or `{"error":"Error posting status"}`
    for `$success` contains Boolean `false`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于AJAX请求，我们将传递JSON字符串；如果`$success`包含布尔值`true`，则为`{"success":true}`，如果`$success`包含布尔值`false`，则为`{"error":"Error
    posting status"}`。
- en: Therefore, checking for the value `XMLHttpRequest` ensures the JSON string delivery
    only for the AJAX request. Finally, the preceding PHP code inserts the status
    post with or without the AJAX request. So, in the case where JavaScript is disabled
    in the client browser, the status poster form can still be submitted and the submitted
    data could be inserted as well.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，检查值`XMLHttpRequest`确保仅对AJAX请求提供JSON字符串传递。最后，前面的PHP代码插入了带有或不带有AJAX请求的状态帖子。因此，在客户端浏览器中禁用JavaScript的情况下，状态发布者表单仍然可以被提交，并且提交的数据也可以被插入。
- en: Note
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete project source for this chapter can be downloaded from the Packt
    website URL.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整项目源代码可以从Packt网站URL下载。
- en: Testing the usability of the status poster
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试状态发布者的可用性
- en: We have the status poster project ready. The interface JavaScript code posts
    to the server, the server-side code performs the instructed actions and response,
    and the interface code updates the DOM along with the response.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好状态发布者项目。接口JavaScript代码将数据发送到服务器，服务器端代码执行指示的操作和响应，接口代码将DOM与响应一起更新。
- en: 'You can test the status poster by typing in the box with your status texts,
    and clicking on the **Share** button. With the **Share** button-click, you should
    see a loading image below the input box. Within a few moments, you will see a
    **Status posted successfully** message, as the status gets prepended at the status
    display list. Finally, immediately after a status **"hello world"** has been posted,
    the screen looks similar to the following:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在框中输入状态文本并单击**分享**按钮来测试状态发布者。单击**分享**按钮后，您应该在输入框下方看到一个加载图像。几秒钟后，您将看到**状态发布成功**的消息，因为状态已在状态显示列表中预置。最后，在发布状态**"hello
    world"**后，屏幕看起来类似于以下内容：
- en: '![Testing the usability of the status poster](graphics/5801_03_17.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![测试状态发布者的可用性](graphics/5801_03_17.jpg)'
- en: 'The completed project directory structure looks similar to the following:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的项目目录结构看起来类似于以下内容：
- en: '![Testing the usability of the status poster](graphics/5801_03_18.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![测试状态发布者的可用性](graphics/5801_03_18.jpg)'
- en: Pop quiz — Reviewing jQuery knowledge
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突击测验 - 复习jQuery知识
- en: Which sign does jQuery use as a shortcut for jQuery?
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jQuery使用哪个符号作为jQuery的快捷方式？
- en: The `?` Sign
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`?` 符号'
- en: The `%` sign
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`％` 符号'
- en: The `$` sign
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$` 符号'
- en: The jQuery sign
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jQuery符号
- en: Which of the following is correct, to get the value of an input box using the
    `#element_id` ID?
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是正确的，使用`#element_id` ID获取输入框的值？
- en: '`$(''#element_id'').value()`'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element_id'').value()`'
- en: '`$(''#element_id'').text()`'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element_id'').text()`'
- en: '`$(''#element_id'').html()`'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element_id'').html()`'
- en: '`$(''#element_id'').val()`'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element_id'').val()`'
- en: Which of the following returns the length of a string stored inside the `stringVar`
    variable in JavaScript?
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个返回JavaScript中存储在`stringVar`变量中的字符串的长度？
- en: '`stringVar.size`'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stringVar.size`'
- en: '`length(stringVar)`'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`length(stringVar)`'
- en: '`stringVar.length`'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stringVar.length`'
- en: What will be the correct statement to add a `DIV` element, inside at the beginning
    of another element?
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`DIV`元素的正确语句是什么？
- en: '`$(''#container'').append(''<div></div>'')`;'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#container'').append(''<div></div>'')`;'
- en: '`$(''#container'').html(''<div></div>'')`;'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#container'').html(''<div></div>'')`;'
- en: '`$(''#container'').prepend(''<div></div>'')`;'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#container'').prepend(''<div></div>'')`;'
- en: Which one of the following will cause an element to disappear gradually?
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个将导致元素逐渐消失？
- en: '`$(''#element'').hide()`;'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element'').hide()`;'
- en: '`$(''#element'').fadeOut(''slow'')`;'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element'').fadeOut(''slow'')`;'
- en: '`$(''#element'').blur(''slow'')`;'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element'').blur(''slow'')`;'
- en: Which one of the following will be the correct code to obtain the inner HTML
    of `element1` to use as inner HTML of `element2?`
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个将是获取`element1`的内部HTML作为`element2`的内部HTML的正确代码？
- en: '`$(''#element2'').html( ) = $(''#element1'').html( )`;'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element2'').html( ) = $(''#element1'').html( )`;'
- en: '`$(''#element2'').html( $(''#element1'').innerHTML )`;'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element2'').html( $(''#element1'').innerHTML )`;'
- en: '`$(''#element1'').html( $(''#element2'').html() )`;'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element1'').html( $(''#element2'').html() )`;'
- en: '`$(''#element2'').html( $(''#element1'').html( ) )`;'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$(''#element2'').html( $(''#element1'').html( ) )`;'
- en: Have a go hero — sanitizing the status input
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试一下——清理状态输入
- en: Since the status input provided by the user is not sanitized enough, there are
    chances that raw markups or HTML tags placed inside the input will break the interface.
    So, sanitize the status input properly, and also take care of the JavaScript code
    that displays this new status entry without refreshing the page on success of
    AJAX. You may strip tags using the `trip_tags()` method from the input before
    inserting it into the `INSERT` query, if you wish not to allow tags. Again you
    may use the PHP `htmlspecialchars()` function if you wish to keep the tags. You
    have to refactor your JS codes as well; that is, you may use `$('#status_box').text()`
    instead of `$('#status_box').val()`.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户提供的状态输入未经过足够的清理，存在原始标记或HTML标记放置在输入中会破坏界面的可能性。因此，正确地清理状态输入，并且在AJAX成功时显示这个新的状态条目的JavaScript代码也要注意不刷新页面。如果您不希望允许标记，您可以在将其插入到`INSERT`查询之前使用`strip_tags()`方法剥离标记。再次，如果您希望保留标记，您可以使用PHP的`htmlspecialchars()`函数。您还需要重构您的JS代码；也就是说，您可以使用`$('#status_box').text()`而不是`$('#status_box').val()`。
- en: Summary
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have done a real-life PHP project, and we are now able to
    create and maintain a PHP project using the NetBeans IDE. Also, we are now familiar
    with the usage of the IDE for faster development. Practicing those keyboard shortcuts,
    code completion short codes, code generators, and other IDE features will quicken
    your pace and smoothen your development. All these features are meant to simplify
    your tasks and make your life easier.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们完成了一个真实的PHP项目，现在能够使用NetBeans IDE创建和维护PHP项目。此外，我们现在熟悉了使用IDE进行更快速开发的方法。练习这些键盘快捷键、代码补全快捷码、代码生成器和其他IDE功能将加快您的步伐，使您的开发更加顺利。所有这些功能都旨在简化您的任务，使您的生活更轻松。
- en: 'We have specially worked on:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们特别关注了：
- en: Setting up the database
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置数据库
- en: Creating the JavaScript library
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建JavaScript库
- en: Real-life, PHP AJAX, web application development
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真实的PHP AJAX网络应用开发
- en: Using NetBeans code templates
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NetBeans代码模板
- en: So far, we have developed a PHP project using NetBeans. In the next chapter,
    we will perform debugging and testing on some demo PHP projects to have more skills
    in dealing with critical moments in a project.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用NetBeans开发了一个PHP项目。在下一章中，我们将对一些演示PHP项目进行调试和测试，以便在处理项目中的关键时刻时具备更多的技能。
