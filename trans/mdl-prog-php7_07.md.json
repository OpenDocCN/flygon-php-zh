["```php\n**php bin/console generate:bundle --namespace=Foggyline/CatalogBundle**\n\n```", "```php\nnew Foggyline\\CatalogBundle\\FoggylineCatalogBundle()\n```", "```php\nfoggyline_catalog:\n  resource: \"@FoggylineCatalogBundle/Resources/config/routing.xml\"\n  prefix: /\n```", "```php\n**php bin/console generate:doctrine:entity**\n\n```", "```php\n**php bin/console doctrine:schema:update --force**\n\n```", "```php\n**php bin/console generate:doctrine:crud**\n\n```", "```php\nfoggyline_catalog_category:\n  resource: \"@FoggylineCatalogBundle/Controller/CategoryController.php\"\n  type:     annotation\n```", "```php\n**php bin/console generate:doctrine:entity**\n\n```", "```php\n// src/Foggyline/CatalogBundle/Entity/Category.php\n\n/**\n * @ORM\\OneToMany(targetEntity=\"Product\", mappedBy=\"category\")\n */\nprivate $products;\n\npublic function __construct()\n{\n  $this->products = new \\Doctrine\\Common\\Collections\\ArrayCollection();\n}\n\n// src/Foggyline/CatalogBundle/Entity/Product.php\n\n/**\n * @ORM\\ManyToOne(targetEntity=\"Category\", inversedBy=\"products\")\n * @ORM\\JoinColumn(name=\"category_id\", referencedColumnName=\"id\")\n */\nprivate $category;\n```", "```php\npublic function __toString()\n{\n    return $this->getTitle();\n}\n```", "```php\nCatchable Fatal Error: Object of class Foggyline\\CatalogBundle\\Entity\\Category could not be converted to string\n```", "```php\n**php bin/console doctrine:schema:update --force**\n\n```", "```php\nCREATE TABLE `product` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `category_id` int(11) DEFAULT NULL,\n  `title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n  `price` decimal(10,2) NOT NULL,\n  `sku` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n  `url_key` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n  `description` longtext COLLATE utf8_unicode_ci,\n  `qty` int(11) NOT NULL,\n  `image` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `UNIQ_D34A04ADF9038C4` (`sku`),\n  UNIQUE KEY `UNIQ_D34A04ADDFAB7B3B` (`url_key`),\n  KEY `IDX_D34A04AD12469DE2` (`category_id`),\n  CONSTRAINT `FK_D34A04AD12469DE2` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n```", "```php\n//\u2026\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n//\u2026\nclass [Category|Product]\n{\n  //\u2026\n  /**\n  * @var string\n  *\n  * @ORM\\Column(name=\"image\", type=\"string\", length=255, nullable=true)\n  * @Assert\\File(mimeTypes={ \"image/png\", \"image/jpeg\" }, mimeTypesMessage=\"Please upload the PNG or JPEG image file.\")\n  */\n  private $image;\n  //\u2026\n}\n```", "```php\n<service id=\"foggyline_catalog.image_uploader\" class=\"Foggyline\\CatalogBundle\\Service\\ImageUploader\">\n  <argument>%foggyline_catalog_images_directory%</argument>\n</service>\n```", "```php\nnamespace Foggyline\\CatalogBundle\\Service;\n\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n\nclass ImageUploader\n{\n  private $targetDir;\n\n  public function __construct($targetDir)\n  {\n    $this->targetDir = $targetDir;\n  }\n\n  public function upload(UploadedFile $file)\n  {\n    $fileName = md5(uniqid()) . '.' . $file->guessExtension();\n    $file->move($this->targetDir, $fileName);\n    return $fileName;\n  }\n}\n```", "```php\nparameters:\n  foggyline_catalog_images_directory: \"%kernel.root_dir%/../web/uploads/foggyline_catalog_images\"\n```", "```php\n$loader = new Loader\\YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));\n$loader->load('parameters.yml');\n```", "```php\npublic function newAction(Request $request) {\n  // ...\n\n  if ($form->isSubmitted() && $form->isValid()) {\n    /* @var $image \\Symfony\\Component\\HttpFoundation\\File\\UploadedFile */\n    if ($image = $category->getImage()) {\n      $name = $this->get('foggyline_catalog.image_uploader')->upload($image);\n      $category->setImage($name);\n    }\n\n    $em = $this->getDoctrine()->getManager();\n    // ...\n  }\n\n  // ...\n}\n\npublic function editAction(Request $request, Category $category) {\n  $existingImage = $category->getImage();\n  if ($existingImage) {\n    $category->setImage(\n      new File($this->getParameter('foggyline_catalog_images_directory') . '/' . $existingImage)\n    );\n  }\n\n  $deleteForm = $this->createDeleteForm($category);\n  // ...\n\n  if ($editForm->isSubmitted() && $editForm->isValid()) {\n    /* @var $image \\Symfony\\Component\\HttpFoundation\\File\\UploadedFile */\n    if ($image = $category->getImage()) {\n      $name = $this->get('foggyline_catalog.image_uploader')->upload($image);\n      $category->setImage($name);\n    } elseif ($existingImage) {\n      $category->setImage($existingImage);\n    }\n\n    $em = $this->getDoctrine()->getManager();\n    // ...\n  }\n\n  // ...\n}\n```", "```php\n<service id=\"foggyline_catalog.category_menu\" class=\"Foggyline\\CatalogBundle\\Service\\Menu\\Category\">\n  <argument type=\"service\" id=\"doctrine.orm.entity_manager\" />\n  <argument type=\"service\" id=\"router\" />\n</service>\n\n<service id=\"foggyline_catalog.onsale\" class=\"Foggyline\\CatalogBundle\\Service\\Menu\\OnSale\">\n  <argument type=\"service\" id=\"doctrine.orm.entity_manager\" />\n  <argument type=\"service\" id=\"router\" />\n</service>\n```", "```php\n//Category.php\n\nnamespace Foggyline\\CatalogBundle\\Service\\Menu;\n\nclass Category\n{\n  private $em;\n  private $router;\n\n  public function __construct(\n    \\Doctrine\\ORM\\EntityManager $entityManager,\n    \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router\n  )\n  {\n    $this->em = $entityManager;\n    $this->router = $router;\n  }\n\n  public function getItems()\n  {\n    $categories = array();\n    $_categories = $this->em->getRepository('FoggylineCatalogBundle:Category')->findAll();\n\n    foreach ($_categories as $_category) {\n      /* @var $_category \\Foggyline\\CatalogBundle\\Entity\\Category */\n      $categories[] = array(\n        'path' => $this->router->generate('category_show', array('id' => $_category->getId())),\n        'label' => $_category->getTitle(),\n      );\n    }\n\n    return $categories;\n  }\n}\n //OnSale.php\n\nnamespace Foggyline\\CatalogBundle\\Service\\Menu;\n\nclass OnSale\n{\n  private $em;\n  private $router;\n\n  public function __construct(\\Doctrine\\ORM\\EntityManager $entityManager, $router)\n  {\n    $this->em = $entityManager;\n    $this->router = $router;\n  }\n\n  public function getItems()\n  {\n    $products = array();\n    $_products = $this->em->getRepository('FoggylineCatalogBundle:Product')->findBy(\n        array('onsale' => true),\n        null,\n        5\n    );\n\n    foreach ($_products as $_product) {\n      /* @var $_product \\Foggyline\\CatalogBundle\\Entity\\Product */\n      $products[] = array(\n        'path' => $this->router->generate('product_show', array('id' => $_product->getId())),\n        'name' => $_product->getTitle(),\n        'image' => $_product->getImage(),\n        'price' => $_product->getPrice(),\n        'id' => $_product->getId(),\n      );\n    }\n\n    return $products;\n  }\n}\n```", "```php\nnamespace Foggyline\\CatalogBundle\\DependencyInjection\\Compiler;\n\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n\nclass OverrideServiceCompilerPass implements CompilerPassInterface\n{\n  public function process(ContainerBuilder $container)\n  {\n    // Override the core module 'category_menu' service\n    $container->removeDefinition('category_menu');\n    $container->setDefinition('category_menu', $container->getDefinition('foggyline_catalog.category_menu'));\n\n    // Override the core module 'onsale' service\n    $container->removeDefinition('onsale');\n    $container->setDefinition('onsale', $container->getDefinition('foggyline_catalog.onsale'));\n  }\n}\n```", "```php\npublic function build(ContainerBuilder $container)\n{\n  parent::build($container);\n  $container->addCompilerPass(new \\Foggyline\\CatalogBundle\\DependencyInjection\\Compiler\\OverrideServiceCompilerPass());\n}\n```", "```php\n<div class=\"row\">\n  <div class=\"small-12 large-12 columns text-center\">\n    <h1>{{ category.title }}</h1>\n    <p>{{ category.description }}</p>\n  </div>\n</div>\n\n<div class=\"row\">\n  <img src=\"{{ asset('uploads/foggyline_catalog_images/' ~ category.image) }}\"/>\n</div>\n\n{% set products = category.getProducts() %}\n{% if products %}\n<div class=\"row products_onsale text-center small-up-1 medium-up-3 large-up-5\" data-equalizer data-equalize-by-row=\"true\">\n{% for product in products %}\n<div class=\"column product\">\n  <img src=\"{{ asset('uploads/foggyline_catalog_images/' ~ product.image) }}\" \n    alt=\"missing image\"/>\n  <a href=\"{{ path('product_show', {'id': product.id}) }}\">{{ product.title }}</a>\n\n  <div>${{ product.price }}</div>\n  <div><a class=\"small button\" href=\"{{ path('product_show', {'id': product.id}) }}\">View</a></div>\n  </div>\n  {% endfor %}\n</div>\n{% else %}\n<div class=\"row\">\n  <p>There are no products assigned to this category.</p>\n</div>\n{% endif %}\n\n{% if is_granted('ROLE_ADMIN') %}\n<ul>\n  <li>\n    <a href=\"{{ path('category_edit', { 'id': category.id }) }}\">Edit</a>\n  </li>\n  <li>\n    {{ form_start(delete_form) }}\n    <input type=\"submit\" value=\"Delete\">\n    form_end(delete_form) }}\n  </li>\n</ul>\n{% endif %}\n```", "```php\n<div class=\"row\">\n  <div class=\"small-12 large-6 columns\">\n    <img class=\"thumbnail\" src=\"{{ asset('uploads/foggyline_catalog_images/' ~ product.image) }}\"/>\n  </div>\n  <div class=\"small-12 large-6 columns\">\n    <h1>{{ product.title }}</h1>\n    <div>SKU: {{ product.sku }}</div>\n    {% if product.qty %}\n    <div>IN STOCK</div>\n    {% else %}\n    <div>OUT OF STOCK</div>\n    {% endif %}\n    <div>$ {{ product.price }}</div>\n    <form action=\"{{ add_to_cart_url.getAddToCartUrl\n      (product.id) }}\" method=\"get\">\n      <div class=\"input-group\">\n        <span class=\"input-group-label\">Qty</span>\n        <input class=\"input-group-field\" type=\"number\">\n        <div class=\"input-group-button\">\n          <input type=\"submit\" class=\"button\" value=\"Add to Cart\">\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n\n<div class=\"row\">\n  <p>{{ product.description }}</p>\n</div>\n\n{% if is_granted('ROLE_ADMIN') %}\n<ul>\n  <li>\n    <a href=\"{{ path('product_edit', { 'id': product.id }) }}\">Edit</a>\n  </li>\n  <li>\n    {{ form_start(delete_form) }}\n    <input type=\"submit\" value=\"Delete\">\n    {{ form_end(delete_form) }}\n  </li>\n</ul>\n{% endif %}\n```", "```php\n<directory>src/Foggyline/CatalogBundle/Tests</directory>\n```", "```php\nnamespace Foggyline\\CatalogBundle\\Tests\\Service\\Menu;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nuse Foggyline\\CatalogBundle\\Service\\Menu\\Category;\n\nclass CategoryTest extends KernelTestCase\n{\n  private $container;\n  private $em;\n  private $router;\n\n  public function setUp()\n  {\n    static::bootKernel();\n    $this->container = static::$kernel->getContainer();\n    $this->em = $this->container->get('doctrine.orm.entity_manager');\n    $this->router = $this->container->get('router');\n  }\n\n  public function testGetItems()\n  {\n    $service = new Category($this->em, $this->router);\n    $this->assertNotEmpty($service->getItems());\n  }\n\n  protected function tearDown()\n  {\n    $this->em->close();\n    unset($this->em, $this->router);\n  }\n}\n```", "```php\n**phpunit src/Foggyline/CatalogBundle/Tests/Service/Menu/CategoryTest.php**\n\n```", "```php\n// Create a new client to browse the application\n$client = static::createClient(\n  array(), array(\n    'PHP_AUTH_USER' => 'john',\n    'PHP_AUTH_PW' => '1L6lllW9zXg0',\n  )\n);\n\n// Create a new entry in the database\n$crawler = $client->request('GET', '/category/');\n$this->assertEquals(200, $client->getResponse()->getStatusCode(), \"Unexpected HTTP status code for GET /product/\");\n$crawler = $client->click($crawler->selectLink('Create a new entry')->link());\n\n// Fill in the form and submit it\n$form = $crawler->selectButton('Create')->form(array(\n  'category[title]' => 'Test',\n  'category[urlKey]' => 'Test urlKey',\n  'category[description]' => 'Test description',\n));\n\n$client->submit($form);\n$crawler = $client->followRedirect();\n\n// Check data in the show view\n$this->assertGreaterThan(0, $crawler->filter('h1:contains(\"Test\")')->count(), 'Missing element h1:contains(\"Test\")');\n\n// Edit the entity\n$crawler = $client->click($crawler->selectLink('Edit')->link());\n\n$form = $crawler->selectButton('Edit')->form(array(\n  'category[title]' => 'Foo',\n  'category[urlKey]' => 'Foo urlKey',\n  'category[description]' => 'Foo description',\n));\n\n$client->submit($form);\n$crawler = $client->followRedirect();\n\n// Check the element contains an attribute with value equals \"Foo\"\n$this->assertGreaterThan(0, $crawler->filter('[value=\"Foo\"]')->count(), 'Missing element [value=\"Foo\"]');\n\n// Delete the entity\n$client->submit($crawler->selectButton('Delete')->form());\n$crawler = $client->followRedirect();\n\n// Check the entity has been delete on the list\n$this->assertNotRegExp('/Foo title/', $client->getResponse()->getContent());\n```"]