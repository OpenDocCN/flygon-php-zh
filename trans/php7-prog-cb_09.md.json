["```php\n    namespace Application\\Acl;\n    use Psr\\Http\\Message\\ { RequestInterface, ResponseInterface };\n    interface AuthenticateInterface\n    {\n      public function login(RequestInterface $request) : \n        ResponseInterface;\n    }\n    ```", "```php\n    namespace Application\\Acl;\n    use PDO;\n    use Application\\Database\\Connection;\n    use Psr\\Http\\Message\\ { RequestInterface, ResponseInterface };\n    use Application\\MiddleWare\\ { Response, TextStream };\n    class DbTable  implements AuthenticateInterface\n    {\n      const ERROR_AUTH = 'ERROR: authentication error';\n      protected $conn;\n      protected $table;\n      public function __construct(Connection $conn, $tableName)\n      {\n        $this->conn = $conn;\n        $this->table = $tableName;\n      }\n    ```", "```php\n    public function login(RequestInterface $request) : \n      ResponseInterface\n    {\n      $code = 401;\n      $info = FALSE;\n      $body = new TextStream(self::ERROR_AUTH);\n      $params = json_decode($request->getBody()->getContents());\n      $response = new Response();\n      $username = $params->username ?? FALSE;\n      if ($username) {\n          $sql = 'SELECT * FROM ' . $this->table \n            . ' WHERE email = ?';\n          $stmt = $this->conn->pdo->prepare($sql);\n          $stmt->execute([$username]);\n          $row = $stmt->fetch(PDO::FETCH_ASSOC);\n          if ($row) {\n              if (password_verify($params->password, \n                  $row['password'])) {\n                    unset($row['password']);\n                    $body = \n                    new TextStream(json_encode($row));\n                    $response->withBody($body);\n                    $code = 202;\n                    $info = $row;\n                  }\n                }\n              }\n              return $response->withBody($body)->withStatus($code);\n            }\n          }\n    ```", "```php\n    namespace Application\\Acl;\n    use Application\\MiddleWare\\ { Response, TextStream };\n    use Psr\\Http\\Message\\ { RequestInterface, ResponseInterface };\n    class Authenticate\n    {\n      const ERROR_AUTH = 'ERROR: invalid token';\n      const DEFAULT_KEY = 'auth';\n      protected $adapter;\n      protected $token;\n      public function __construct(\n      AuthenticateInterface $adapter, $key)\n      {\n        $this->key = $key;\n        $this->adapter = $adapter;\n      }\n    ```", "```php\n    public function getToken()\n    {\n      $this->token = bin2hex(random_bytes(16));\n      $_SESSION['token'] = $this->token;\n      return $this->token;\n    }\n    public function matchToken($token)\n    {\n      $sessToken = $_SESSION['token'] ?? date('Ymd');\n      return ($token == $sessToken);\n    }\n    public function getLoginForm($action = NULL)\n    {\n      $action = ($action) ? 'action=\"' . $action . '\" ' : '';\n      $output = '<form method=\"post\" ' . $action . '>';\n      $output .= '<table><tr><th>Username</th><td>';\n      $output .= '<input type=\"text\" name=\"username\" /></td>';\n      $output .= '</tr><tr><th>Password</th><td>';\n      $output .= '<input type=\"password\" name=\"password\" />';\n      $output .= '</td></tr><tr><th>&nbsp;</th>';\n      $output .= '<td><input type=\"submit\" /></td>';\n      $output .= '</tr></table>';\n      $output .= '<input type=\"hidden\" name=\"token\" value=\"';\n      $output .= $this->getToken() . '\" />';\n      $output .= '</form>';\n      return $output;\n    }\n    ```", "```php\n    public function login(\n    RequestInterface $request) : ResponseInterface\n    {\n      $params = json_decode($request->getBody()->getContents());\n      $token = $params->token ?? FALSE;\n      if (!($token && $this->matchToken($token))) {\n          $code = 400;\n          $body = new TextStream(self::ERROR_AUTH);\n          $response = new Response($code, $body);\n      } else {\n          $response = $this->adapter->login($request);\n      }\n      if ($response->getStatusCode() >= 200\n          && $response->getStatusCode() < 300) {\n          $_SESSION[$this->key] = \n            json_decode($response->getBody()->getContents());\n      } else {\n          $_SESSION[$this->key] = NULL;\n      }\n      return $response;\n    }\n\n    }\n    ```", "```php\n<?php\nsession_start();\ndefine('DB_CONFIG_FILE', __DIR__ . '/../config/db.config.php');\ndefine('DB_TABLE', 'customer_09');\ndefine('SESSION_KEY', 'auth');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\n\nuse Application\\Database\\Connection;\nuse Application\\Acl\\ { DbTable, Authenticate };\nuse Application\\MiddleWare\\ { ServerRequest, Request, Constants, TextStream };\n```", "```php\n$conn   = new Connection(include DB_CONFIG_FILE);\n$dbAuth = new DbTable($conn, DB_TABLE);\n$auth   = new Authenticate($dbAuth, SESSION_KEY);\n```", "```php\n$incoming = new ServerRequest();\n$incoming->initialize();\n$outbound = new Request();\n```", "```php\nif ($incoming->getMethod() == Constants::METHOD_POST) {\n  $body = new TextStream(json_encode(\n  $incoming->getParsedBody()));\n  $response = $auth->login($outbound->withBody($body));\n}\n$action = $incoming->getServerParams()['PHP_SELF'];\n?>\n```", "```php\n<?= $auth->getLoginForm($action) ?>\n```", "```php\n      'levels' => [0, 'BEG', 'INT', 'ADV']\n    ```", "```php\n    'pages'  => [0 => 'sorry', 'logout' => 'logout', 'login'  => 'auth',\n                 1 => 'page1', 2 => 'page2', 3 => 'page3',\n                 4 => 'page4', 5 => 'page5', 6 => 'page6',\n                 7 => 'page7', 8 => 'page8', 9 => 'page9']\n    ```", "```php\n    status => ['inherits' => <key>, 'pages' => [level => [pages allowed], etc.]]\n    ```", "```php\n    namespace Application\\Acl;\n\n    use InvalidArgumentException;\n    use Psr\\Http\\Message\\RequestInterface;\n    use Application\\MiddleWare\\ { Constants, Response, TextStream };\n\n    class Acl\n    {\n      const DEFAULT_STATUS = '';\n      const DEFAULT_LEVEL  = 0;\n      const DEFAULT_PAGE   = 0;\n      const ERROR_ACL = 'ERROR: authorization error';\n      const ERROR_APP = 'ERROR: requested page not listed';\n      const ERROR_DEF = \n        'ERROR: must assign keys \"levels\", \"pages\" and \"allowed\"';\n      protected $default;\n      protected $levels;\n      protected $pages;\n      protected $allowed; \n    ```", "```php\n    public function __construct(array $assignments)\n    {\n      $this->default = $assignments['default'] \n        ?? self::DEFAULT_PAGE;\n      $this->pages   = $assignments['pages'] ?? FALSE;\n      $this->levels  = $assignments['levels'] ?? FALSE;\n      $this->allowed = $assignments['allowed'] ?? FALSE;\n      if (!($this->pages && $this->levels && $this->allowed)) {\n          throw new InvalidArgumentException(self::ERROR_DEF);\n      }\n    }\n    ```", "```php\n    protected function mergeInherited($status, $level)\n    {\n      $allowed = $this->allowed[$status]['pages'][$level] \n        ?? array();\n      for ($x = $status; $x > 0; $x--) {\n        $inherits = $this->allowed[$x]['inherits'];\n        if ($inherits) {\n            $subArray = \n              $this->allowed[$inherits]['pages'][$level] \n              ?? array();\n            $allowed = array_merge($allowed, $subArray);\n        }\n      }\n      return $allowed;\n    }\n    ```", "```php\n    public function isAuthorized(RequestInterface $request)\n    {\n      $code = 401;    // unauthorized\n      $text['page'] = $this->pages[$this->default];\n      $text['authorized'] = FALSE;\n      $page = $request->getUri()->getQueryParams()['page'] \n        ?? FALSE;\n      if ($page === FALSE) {\n          $code = 400;    // bad request\n    ```", "```php\n    } else {\n        $params = json_decode(\n          $request->getBody()->getContents());\n        $status = $params->status ?? self::DEFAULT_LEVEL;\n        $level  = $params->level  ?? '*';\n        $allowed = $this->mergeInherited($status, $level);\n    ```", "```php\n    if (in_array($page, $allowed)) {\n        $code = 200;    // OK\n        $text['authorized'] = TRUE;\n        $text['page'] = $this->pages[$page];\n    } else {\n        $code = 401;            }\n    }\n    ```", "```php\n    $body = new TextStream(json_encode($text));\n    return (new Response())->withStatus($code)\n    ->withBody($body);\n    }\n\n    }\n    ```", "```php\n<?php // page 1 ?>\n<h1>Page 1</h1>\n<hr>\n<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. etc.</p>\n```", "```php\n<?php // menu ?>\n<a href=\"?page=1\">Page 1</a>\n<a href=\"?page=2\">Page 2</a>\n<a href=\"?page=3\">Page 3</a>\n// etc.\n```", "```php\n<?php\n  $_SESSION['info'] = FALSE;\n  session_destroy();\n?>\n<a href=\"/\">BACK</a>\n```", "```php\n<?= $auth->getLoginForm($action) ?>\n```", "```php\n<?php\n$min = [0, 'logout'];\nreturn [\n  'default' => 0,     // default page\n  'levels' => [0, 'BEG', 'INT', 'ADV'],\n  'pages'  => [0 => 'sorry', \n  'logout' => 'logout', \n  'login' => 'auth',\n               1 => 'page1', 2 => 'page2', 3 => 'page3',\n               4 => 'page4', 5 => 'page5', 6 => 'page6',\n               7 => 'page7', 8 => 'page8', 9 => 'page9'],\n  'allowed' => [\n               0 => ['inherits' => FALSE,\n                     'pages' => [ '*' => $min, 'BEG' => $min,\n                     'INT' => $min,'ADV' => $min]],\n               1 => ['inherits' => FALSE,\n                     'pages' => ['*' => ['logout'],\n                    'BEG' => [1, 'logout'],\n                    'INT' => [1,2, 'logout'],\n                    'ADV' => [1,2,3, 'logout']]],\n               2 => ['inherits' => 1,\n                     'pages' => ['BEG' => [4],\n                     'INT' => [4,5],\n                     'ADV' => [4,5,6]]],\n               3 => ['inherits' => 2,\n                     'pages' => ['BEG' => [7],\n                     'INT' => [7,8],\n                     'ADV' => [7,8,9]]]\n    ]\n];\n```", "```php\n<?php\nsession_start();\nsession_regenerate_id();\ndefine('DB_CONFIG_FILE', __DIR__ . '/../../config/db.config.php');\ndefine('DB_TABLE', 'customer_09');\ndefine('PAGE_DIR', __DIR__ . '/../pages');\ndefine('SESSION_KEY', 'auth');\nrequire __DIR__ . '/../../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/../..');\n\nuse Application\\Database\\Connection;\nuse Application\\Acl\\ { Authenticate, Acl };\nuse Application\\MiddleWare\\ { ServerRequest, Request, Constants, TextStream };\n```", "```php\n$config = require __DIR__ . '/../chap_09_middleware_acl_config.php';\n$acl    = new Acl($config);\n$conn   = new Connection(include DB_CONFIG_FILE);\n$dbAuth = new DbTable($conn, DB_TABLE);\n$auth   = new Authenticate($dbAuth, SESSION_KEY);\n```", "```php\n$incoming = new ServerRequest();\n$incoming->initialize();\n$outbound = new Request();\n```", "```php\nif (strtolower($incoming->getMethod()) == Constants::METHOD_POST) {\n    $body = new TextStream(json_encode(\n    $incoming->getParsedBody()));\n    $response = $auth->login($outbound->withBody($body));\n}\n```", "```php\n$info = $_SESSION[SESSION_KEY] ?? FALSE;\nif (!$info) {\n    $execute = function () use ($auth) {\n      include PAGE_DIR . '/auth.php';\n    };\n```", "```php\n} else {\n    $query = $incoming->getServerParams()['QUERY_STRING'] ?? '';\n```", "```php\n$outbound->withBody(new TextStream(json_encode($info)));\n$outbound->getUri()->withQuery($query);\n```", "```php\n$response = $acl->isAuthorized($outbound);\n```", "```php\n$params   = json_decode($response->getBody()->getContents());\n$isAllowed = $params->authorized ?? FALSE;\nif ($isAllowed) {\n    $execute = function () use ($response, $params) {\n      include PAGE_DIR .'/' . $params->page . '.php';\n      echo '<pre>', var_dump($response), '</pre>';\n      echo '<pre>', var_dump($_SESSION[SESSION_KEY]);\n      echo '</pre>';\n    };\n} else {\n    $execute = function () use ($response) {\n      include PAGE_DIR .'/sorry.php';\n      echo '<pre>', var_dump($response), '</pre>';\n      echo '<pre>', var_dump($_SESSION[SESSION_KEY]);\n      echo '</pre>';\n    };\n}\n}\n```", "```php\n$action = $incoming->getServerParams()['PHP_SELF'];\n?>\n<!DOCTYPE html>\n<head>\n  <title>PHP 7 Cookbook</title>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />\n</head>\n<body>\n  <?php $execute(); ?>\n</body>\n</html>\n```", "```php\n**cd /path/to/source/for/this/chapter**\n**php -S localhost:8080 -t public**\n\n```", "```php\n    <?php\n    namespace Application\\Cache;\n\n    class Constants\n    {\n      const DEFAULT_GROUP  = 'default';\n      const DEFAULT_PREFIX = 'CACHE_';\n      const DEFAULT_SUFFIX = '.cache';\n      const ERROR_GET      = 'ERROR: unable to retrieve from cache';\n      // not all constants are shown to conserve space\n    }\n    ```", "```php\n    namespace Application\\Cache;\n    interface  CacheAdapterInterface\n    {\n      public function hasKey($key);\n      public function getFromCache($key, $group);\n      public function saveToCache($key, $data, $group);\n      public function removeByKey($key);\n      public function removeByGroup($group);\n    }\n    ```", "```php\n    namespace Application\\Cache;\n    use PDO;\n    use Application\\Database\\Connection;\n    class Database implements CacheAdapterInterface\n    {\n      protected $sql;\n      protected $connection;\n      protected $table;\n      protected $dataColumnName;\n      protected $keyColumnName;\n      protected $groupColumnName;\n      protected $statementHasKey       = NULL;\n      protected $statementGetFromCache = NULL;\n      protected $statementSaveToCache  = NULL;\n      protected $statementRemoveByKey  = NULL;\n      protected $statementRemoveByGroup= NULL;\n    ```", "```php\n    public function __construct(Connection $connection,\n      $table,\n      $idColumnName,\n      $keyColumnName,\n      $dataColumnName,\n      $groupColumnName = Constants::DEFAULT_GROUP)\n      {\n        $this->connection  = $connection;\n        $this->setTable($table);\n        $this->setIdColumnName($idColumnName);\n        $this->setDataColumnName($dataColumnName);\n        $this->setKeyColumnName($keyColumnName);\n        $this->setGroupColumnName($groupColumnName);\n      }\n    ```", "```php\n    public function prepareHasKey()\n    {\n      $sql = 'SELECT `' . $this->idColumnName . '` '\n      . 'FROM `'   . $this->table . '` '\n      . 'WHERE `'  . $this->keyColumnName . '` = :key ';\n      $this->sql[__METHOD__] = $sql;\n      $this->statementHasKey = \n      $this->connection->pdo->prepare($sql);\n    }\n    public function prepareGetFromCache()\n    {\n      $sql = 'SELECT `' . $this->dataColumnName . '` '\n      . 'FROM `'   . $this->table . '` '\n      . 'WHERE `'  . $this->keyColumnName . '` = :key '\n      . 'AND `'    . $this->groupColumnName . '` = :group';\n      $this->sql[__METHOD__] = $sql;\n      $this->statementGetFromCache = \n      $this->connection->pdo->prepare($sql);\n    }\n    ```", "```php\n    public function hasKey($key)\n    {\n      $result = 0;\n      try {\n          if (!$this->statementHasKey) $this->prepareHasKey();\n              $this->statementHasKey->execute(['key' => $key]);\n      } catch (Throwable $e) {\n          error_log(__METHOD__ . ':' . $e->getMessage());\n          throw new Exception(Constants::ERROR_REMOVE_KEY);\n      }\n      return (int) $this->statementHasKey\n      ->fetch(PDO::FETCH_ASSOC)[$this->idColumnName];\n    }\n    ```", "```php\n    public function getFromCache(\n    $key, $group = Constants::DEFAULT_GROUP)\n    {\n      try {\n          if (!$this->statementGetFromCache) \n              $this->prepareGetFromCache();\n              $this->statementGetFromCache->execute(\n                ['key' => $key, 'group' => $group]);\n              while ($row = $this->statementGetFromCache\n                ->fetch(PDO::FETCH_ASSOC)) {\n                if ($row && count($row)) {\n                    yield unserialize($row[$this->dataColumnName]);\n                }\n              }\n      } catch (Throwable $e) {\n          error_log(__METHOD__ . ':' . $e->getMessage());\n          throw new Exception(Constants::ERROR_GET);\n      }\n    }\n    ```", "```php\n    public function saveToCache($key, $data, $group = Constants::DEFAULT_GROUP)\n    {\n      $id = $this->hasKey($key);\n      $result = 0;\n      try {\n          if ($id) {\n              if (!$this->statementUpdateCache) \n                  $this->prepareUpdateCache();\n                  $result = $this->statementUpdateCache\n                  ->execute(['key' => $key, \n                  'data' => serialize($data), \n                  'group' => $group, \n                  'id' => $id]);\n              } else {\n                  if (!$this->statementSaveToCache) \n                  $this->prepareSaveToCache();\n                  $result = $this->statementSaveToCache\n                  ->execute(['key' => $key, \n                  'data' => serialize($data), \n                  'group' => $group]);\n              }\n          } catch (Throwable $e) {\n              error_log(__METHOD__ . ':' . $e->getMessage());\n              throw new Exception(Constants::ERROR_SAVE);\n          }\n          return $result;\n       }\n    ```", "```php\n    public function removeByKey($key)\n    {\n      $result = 0;\n      try {\n          if (!$this->statementRemoveByKey) \n          $this->prepareRemoveByKey();\n          $result = $this->statementRemoveByKey->execute(\n            ['key' => $key]);\n      } catch (Throwable $e) {\n          error_log(__METHOD__ . ':' . $e->getMessage());\n          throw new Exception(Constants::ERROR_REMOVE_KEY);\n      }\n      return $result;\n    }\n\n    public function removeByGroup($group)\n    {\n      $result = 0;\n      try {\n          if (!$this->statementRemoveByGroup) \n              $this->prepareRemoveByGroup();\n              $result = $this->statementRemoveByGroup->execute(\n                ['group' => $group]);\n          } catch (Throwable $e) {\n              error_log(__METHOD__ . ':' . $e->getMessage());\n              throw new Exception(Constants::ERROR_REMOVE_GROUP);\n          }\n          return $result;\n      }\n    ```", "```php\n    public function setTable($name)\n    {\n      $this->table = $name;\n    }\n    public function getTable()\n    {\n      return $this->table;\n    }\n    // etc.\n    }\n    ```", "```php\n    namespace Application\\Cache;\n    use RecursiveIteratorIterator;\n    use RecursiveDirectoryIterator;\n    class File implements CacheAdapterInterface\n    {\n      protected $dir;\n      protected $prefix;\n      protected $suffix;\n      public function __construct(\n        $dir, $prefix = NULL, $suffix = NULL)\n      {\n        if (!file_exists($dir)) {\n            error_log(__METHOD__ . ':' . Constants::ERROR_DIR_NOT);\n            throw new Exception(Constants::ERROR_DIR_NOT);\n        }\n        $this->dir = $dir;\n        $this->prefix = $prefix ?? Constants::DEFAULT_PREFIX;\n        $this->suffix = $suffix ?? Constants::DEFAULT_SUFFIX;\n      }\n\n      public function hasKey($key)\n      {\n        $action = function ($name, $md5Key, &$item) {\n          if (strpos($name, $md5Key) !== FALSE) {\n            $item ++;\n          }\n        };\n\n        return $this->findKey($key, $action);\n      }\n\n      public function getFromCache($key, $group = Constants::DEFAULT_GROUP)\n      {\n        $fn = $this->dir . '/' . $group . '/' \n        . $this->prefix . md5($key) . $this->suffix;\n        if (file_exists($fn)) {\n            foreach (file($fn) as $line) { yield $line; }\n        } else {\n            return array();\n        }\n      }\n\n      public function saveToCache(\n        $key, $data, $group = Constants::DEFAULT_GROUP)\n      {\n        $baseDir = $this->dir . '/' . $group;\n        if (!file_exists($baseDir)) mkdir($baseDir);\n        $fn = $baseDir . '/' . $this->prefix . md5($key) \n        . $this->suffix;\n        return file_put_contents($fn, json_encode($data));\n      }\n\n      protected function findKey($key, callable $action)\n      {\n        $md5Key = md5($key);\n        $iterator = new RecursiveIteratorIterator(\n          new RecursiveDirectoryIterator($this->dir),\n          RecursiveIteratorIterator::SELF_FIRST);\n          $item = 0;\n        foreach ($iterator as $name => $obj) {\n          $action($name, $md5Key, $item);\n        }\n        return $item;\n      }\n\n      public function removeByKey($key)\n      {\n        $action = function ($name, $md5Key, &$item) {\n          if (strpos($name, $md5Key) !== FALSE) {\n            unlink($name);\n            $item++;\n          }\n        };\n        return $this->findKey($key, $action);\n      }\n\n      public function removeByGroup($group)\n      {\n        $removed = 0;\n        $baseDir = $this->dir . '/' . $group;\n        $pattern = $baseDir . '/' . $this->prefix . '*' \n        . $this->suffix;\n        foreach (glob($pattern) as $file) {\n          unlink($file);\n          $removed++;\n        }\n        return $removed;\n      }\n    }\n    ```", "```php\n    namespace Application\\Cache;\n    use Psr\\Http\\Message\\RequestInterface;\n    use Application\\MiddleWare\\ { Request, Response, TextStream };\n    class Core\n    {\n      public function __construct(CacheAdapterInterface $adapter)\n      {\n        $this->adapter = $adapter;\n      }\n    ```", "```php\n    public function hasKey(RequestInterface $request)\n    {\n      $key = $request->getUri()->getQueryParams()['key'] ?? '';\n      $result = $this->adapter->hasKey($key);\n    }\n    ```", "```php\n    public function getFromCache(RequestInterface $request)\n    {\n      $text = array();\n      $key = $request->getUri()->getQueryParams()['key'] ?? '';\n      $group = $request->getUri()->getQueryParams()['group'] \n        ?? Constants::DEFAULT_GROUP;\n      $results = $this->adapter->getFromCache($key, $group);\n      if (!$results) { \n          $code = 204; \n      } else {\n          $code = 200;\n          foreach ($results as $line) $text[] = $line;\n      }\n      if (!$text || count($text) == 0) $code = 204;\n      $body = new TextStream(json_encode($text));\n      return (new Response())->withStatus($code)\n                             ->withBody($body);\n    }\n    ```", "```php\n    public function saveToCache(RequestInterface $request)\n    {\n      $text = array();\n      $key = $request->getUri()->getQueryParams()['key'] ?? '';\n      $group = $request->getUri()->getQueryParams()['group'] \n        ?? Constants::DEFAULT_GROUP;\n      $data = $request->getBody()->getContents();\n      $results = $this->adapter->saveToCache($key, $data, $group);\n      if (!$results) { \n          $code = 204;\n      } else {\n          $code = 200;\n          $text[] = $results;\n      }\n          $body = new TextStream(json_encode($text));\n          return (new Response())->withStatus($code)\n                                 ->withBody($body);\n      }\n    ```", "```php\n    public function removeByKey(RequestInterface $request)\n    {\n      $text = array();\n      $key = $request->getUri()->getQueryParams()['key'] ?? '';\n      $results = $this->adapter->removeByKey($key);\n      if (!$results) {\n          $code = 204;\n      } else {\n          $code = 200;\n          $text[] = $results;\n      }\n      $body = new TextStream(json_encode($text));\n      return (new Response())->withStatus($code)\n                             ->withBody($body);\n    }\n\n    public function removeByGroup(RequestInterface $request)\n    {\n      $text = array();\n      $group = $request->getUri()->getQueryParams()['group'] \n        ?? Constants::DEFAULT_GROUP;\n      $results = $this->adapter->removeByGroup($group);\n      if (!$results) {\n          $code = 204;\n      } else {\n          $code = 200;\n          $text[] = $results;\n      }\n      $body = new TextStream(json_encode($text));\n      return (new Response())->withStatus($code)\n                             ->withBody($body);\n      }\n    } // closing brace for class Core\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', __DIR__ . '/../config/db.config.php');\ndefine('DB_TABLE', 'cache');\ndefine('CACHE_DIR', __DIR__ . '/cache');\ndefine('MAX_NUM', 100000);\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Database\\Connection;\nuse Application\\Cache\\{ Constants, Core, Database, File };\nuse Application\\MiddleWare\\ { Request, TextStream };\n```", "```php\nfunction generatePrimes($max)\n{\n  yield from [1,2,3];\n  for ($x = 5; $x < $max; $x++)\n  {\n    if($x & 1) {\n        $prime = TRUE;\n        for($i = 3; $i < $x; $i++) {\n            if(($x % $i) === 0) {\n                $prime = FALSE;\n                break;\n            }\n        }\n        if ($prime) yield $x;\n    }\n  }\n}\n```", "```php\n$conn    = new Connection(include DB_CONFIG_FILE);\n$dbCache = new Database(\n  $conn, DB_TABLE, 'id', 'key', 'data', 'group');\n$core    = new Core($dbCache);\n```", "```php\n$fileCache = new File(CACHE_DIR);\n$core    = new Core($fileCache);\n```", "```php\n$uriString = '/?group=' . Constants::DEFAULT_GROUP;\n$cacheRequest = new Request($uriString, 'get');\n$response = $core->removeByGroup($cacheRequest);\n```", "```php\n$start = time() + microtime(TRUE);\necho \"\\nTime: \" . $start;\n```", "```php\n$uriString = '/?key=Test1';\n$cacheRequest = new Request($uriString, 'get');\n$response = $core->getFromCache($cacheRequest);\n$status   = $response->getStatusCode();\nif ($status == 200) {\n    $primes = json_decode($response->getBody()->getContents());\n```", "```php\n} else {\n    $primes = array();\n    foreach (generatePrimes(MAX_NUM) as $num) {\n        $primes[] = $num;\n    }\n    $body = new TextStream(json_encode($primes));\n    $response = $core->saveToCache(\n    $cacheRequest->withBody($body));\n}\n```", "```php\n$time = time() + microtime(TRUE);\n$diff = $time - $start;\necho \"\\nTime: $time\";\necho \"\\nDifference: $diff\";\nvar_dump($primes);\n```", "```php\n    $config = [\n      'home' => [\n        'uri' => '!^/$!',\n        'exec' => function ($matches) {\n          include PAGE_DIR . '/page0.php'; }\n      ],\n      'page' => [\n        'uri' => '!^/(page)/(\\d+)$!',\n          'exec' => function ($matches) {\n            include PAGE_DIR . '/page' . $matches[2] . '.php'; }\n      ],\n      Router::DEFAULT_MATCH => [\n        'uri' => '!.*!',\n        'exec' => function ($matches) {\n          include PAGE_DIR . '/sorry.php'; }\n      ],\n    ];\n    ```", "```php\n    namespace Application\\Routing;\n    use InvalidArgumentException;\n    use Psr\\Http\\Message\\ServerRequestInterface;\n    class Router\n    {\n      const DEFAULT_MATCH = 'default';\n      const ERROR_NO_DEF  = 'ERROR: must supply a default match';\n      protected $request;\n      protected $requestUri;\n      protected $uriParts;\n      protected $docRoot;\n      protected $config;\n      protected $routeMatch;\n    ```", "```php\n    public function __construct(ServerRequestInterface $request, $docRoot, $config)\n    {\n      $this->config = $config;\n      $this->docRoot = $docRoot;\n      $this->request = $request;\n      $this->requestUri = \n        $request->getServerParams()['REQUEST_URI'];\n      $this->uriParts = explode('/', $this->requestUri);\n      if (!isset($config[self::DEFAULT_MATCH])) {\n          throw new InvalidArgumentException(\n            self::ERROR_NO_DEF);\n      }\n    }\n    ```", "```php\n    public function getRequest()\n    {\n      return $this->request;\n    }\n    public function getDocRoot()\n    {\n      return $this->docRoot;\n    }\n    public function getRouteMatch()\n    {\n      return $this->routeMatch;\n    }\n    ```", "```php\n    public function isFileOrDir()\n    {\n      $fn = $this->docRoot . '/' . $this->requestUri;\n      $fn = str_replace('//', '/', $fn);\n      if (file_exists($fn)) {\n          return $fn;\n      } else {\n          return '';\n      }\n    }\n    ```", "```php\n    public function match()\n    {\n      foreach ($this->config as $key => $route) {\n        if (preg_match($route['uri'], \n            $this->requestUri, $matches)) {\n            $this->routeMatch['key'] = $key;\n            $this->routeMatch['match'] = $matches;\n            return $route['exec'];\n        }\n      }\n      return $this->config[self::DEFAULT_MATCH]['exec'];\n    }\n    }\n    ```", "```php\n<?php\ndefine('DOC_ROOT', __DIR__);\ndefine('PAGE_DIR', DOC_ROOT . '/../pages');\n\nrequire_once __DIR__ . '/../../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/../..');\nuse Application\\MiddleWare\\ServerRequest;\nuse Application\\Routing\\Router;\n```", "```php\n$config = [\n  'home' => [\n    'uri' => '!^(/|/home)$!',\n    'exec' => function ($matches) {\n      include PAGE_DIR . '/page0.php'; }\n  ],\n  'page' => [\n    'uri' => '!^/(page)/(\\d+)(/)?$!',\n    'exec' => function ($matches) {\n      include PAGE_DIR . '/page' . $matches[2] . '.php'; }\n  ],\n  Router::DEFAULT_MATCH => [\n    'uri' => '!.*!',\n    'exec' => function ($matches) {\n      include PAGE_DIR . '/sorry.php'; }\n  ],\n];\n```", "```php\n$router = new Router((new ServerRequest())\n  ->initialize(), DOC_ROOT, $config);\n$execute = $router->match();\n$params  = $router->getRouteMatch()['match'];\n```", "```php\nif ($fn = $router->isFileOrDir()\n    && $router->getRequest()->getUri()->getPath() != '/') {\n    return FALSE;\n} else {\n    include DOC_ROOT . '/main.php';\n}\n```", "```php\n<?php // demo using middleware for routing ?>\n<!DOCTYPE html>\n<head>\n  <title>PHP 7 Cookbook</title>\n  <meta http-equiv=\"content-type\" \n  content=\"text/html;charset=utf-8\" />\n</head>\n<body>\n    <?php include PAGE_DIR . '/route_menu.php'; ?>\n    <?php $execute($params); ?>\n</body>\n</html>\n```", "```php\n<?php // menu for routing ?>\n<a href=\"/home\">Home</a>\n<a href=\"/page/1\">Page 1</a>\n<a href=\"/page/2\">Page 2</a>\n<a href=\"/page/3\">Page 3</a>\n<!-- etc. -->\n```", "```php\n**cd /path/to/source/for/this/chapter/routing**\n**php -S localhost:8080**\n\n```", "```php\n    namespace Application\\MiddleWare\\Session;\n    use InvalidArgumentException;\n    use Psr\\Http\\Message\\ { \n      ServerRequestInterface, ResponseInterface };\n    use Application\\MiddleWare\\ { Constants, Response, TextStream };\n    class Validator\n    {\n      const KEY_TEXT = 'text';\n      const KEY_SESSION = 'thumbprint';\n      const KEY_STATUS_CODE = 'code';\n      const KEY_STATUS_REASON = 'reason';\n      const KEY_STOP_TIME = 'stop_time';\n      const ERROR_TIME = 'ERROR: session has exceeded stop time';\n      const ERROR_SESSION = 'ERROR: thumbprint does not match';\n      const SUCCESS_SESSION = 'SUCCESS: session validates OK';\n      protected $sessionKey;\n      protected $currentPrint;\n      protected $storedPrint;\n      protected $currentTime;\n      protected $storedTime;\n    ```", "```php\n    public function __construct(\n      ServerRequestInterface $request, $stopTime = NULL)\n    {\n      $this->currentTime  = time();\n      $this->storedTime   = $_SESSION[self::KEY_STOP_TIME] ?? 0;\n      $this->currentPrint = \n        md5($request->getServerParams()['REMOTE_ADDR']\n          . $request->getServerParams()['HTTP_USER_AGENT']\n          . $request->getServerParams()['HTTP_ACCEPT_LANGUAGE']);\n            $this->storedPrint  = $_SESSION[self::KEY_SESSION] \n          ?? NULL;\n      if (empty($this->storedPrint)) {\n          $this->storedPrint = $this->currentPrint;\n          $_SESSION[self::KEY_SESSION] = $this->storedPrint;\n          if ($stopTime) {\n              $this->storedTime = $stopTime;\n              $_SESSION[self::KEY_STOP_TIME] = $stopTime;\n          }\n      }\n    }\n    ```", "```php\n    public function __invoke(\n      ServerRequestInterface $request, Response $response)\n    {\n      $code = 401;  // unauthorized\n      if ($this->currentPrint != $this->storedPrint) {\n          $text[self::KEY_TEXT] = self::ERROR_SESSION;\n          $text[self::KEY_STATUS_REASON] = \n            Constants::STATUS_CODES[401];\n      } elseif ($this->storedTime) {\n          if ($this->currentTime > $this->storedTime) {\n              $text[self::KEY_TEXT] = self::ERROR_TIME;\n              $text[self::KEY_STATUS_REASON] = \n                Constants::STATUS_CODES[401];\n          } else {\n              $code = 200; // success\n          }\n      }\n      if ($code == 200) {\n          $text[self::KEY_TEXT] = self::SUCCESS_SESSION;\n          $text[self::KEY_STATUS_REASON] = \n            Constants::STATUS_CODES[200];\n      }\n      $text[self::KEY_STATUS_CODE] = $code;\n      $body = new TextStream(json_encode($text));\n      return $response->withStatus($code)->withBody($body);\n    }\n    ```", "```php\n    <?php\n    use Zend\\Expressive\\Container\\ApplicationFactory;\n    use Zend\\Expressive\\Helper;\n    return [  \n      'dependencies' => [\n         'factories' => [\n            Helper\\ServerUrlMiddleware::class => \n            Helper\\ServerUrlMiddlewareFactory::class,\n            Helper\\UrlHelperMiddleware::class => \n            Helper\\UrlHelperMiddlewareFactory::class,\n            **// insert your own class here**\n         ],\n      ],\n    ```", "```php\n    'middleware_pipeline' => [\n       'always' => [\n          'middleware' => [\n             Helper\\ServerUrlMiddleware::class,\n          ],\n          'priority' => 10000,\n       ],\n       'routing' => [\n          'middleware' => [\n             ApplicationFactory::ROUTING_MIDDLEWARE,\n             Helper\\UrlHelperMiddleware::class,\n             **// insert reference to middleware here**\n             ApplicationFactory::DISPATCH_MIDDLEWARE,\n          ],\n          'priority' => 1,\n       ],\n       'error' => [\n          'middleware' => [\n             // Add error middleware here.\n          ],\n          'error'    => true,\n          'priority' => -10000,\n        ],\n      ],\n    ];\n    ```", "```php\n    session_start();    // to support use of $_SESSION\n    $loader = include __DIR__ . '/libraries/vendor/autoload.php';\n    $loader->add('Application', __DIR__ . '/libraries/vendor');\n    $loader->add('Psr', __DIR__ . '/libraries/vendor');\n    ```", "```php\n    $session = JFactory::getSession();\n    $request = \n      (new Application\\MiddleWare\\ServerRequest())->initialize();\n    $response = new Application\\MiddleWare\\Response();\n    $validator = new Application\\Security\\Session\\Validator(\n      $request, $session);\n    $response = $validator($request, $response);\n    if ($response->getStatusCode() != 200) {\n      // take some action\n    }\n    ```", "```php\n**cd /path/to/source/for/this/chapter**\n**php composer.phar create-project zendframework/zend-expressive-skeleton expressive**\n\n```", "```php\n<?php\nif (php_sapi_name() === 'cli-server'\n    && is_file(__DIR__ . parse_url(\n$_SERVER['REQUEST_URI'], PHP_URL_PATH))\n) {\n    return false;\n}\nchdir(dirname(__DIR__));\n**session_start();**\n**$_SESSION['time'] = time();**\n**$appDir = realpath(__DIR__ . '/../../..');**\n**$loader = require 'vendor/autoload.php';**\n**$loader->add('Application', $appDir);**\n$container = require 'config/container.php';\n$app = $container->get(\\Zend\\Expressive\\Application::class);\n$app->run();\n```", "```php\nnamespace App\\Action;\nuse Application\\MiddleWare\\Session\\Validator;\nuse Zend\\Diactoros\\ { Request, Response };\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nclass SessionValidateAction\n{\n  public function __invoke(ServerRequestInterface $request, \n  ResponseInterface $response, callable $next = null)\n  {\n    $inbound   = new Response();\n    $validator = new Validator($request, **time()+10**);\n    $inbound   = $validator($request, $response);\n    if ($inbound->getStatusCode() != 200) {\n        session_destroy();\n        setcookie('PHPSESSID', 0, time()-300);\n        $params = json_decode(\n          $inbound->getBody()->getContents(), TRUE);\n        echo '<h1>',$params[Validator::KEY_TEXT],'</h1>';\n        echo '<pre>',var_dump($inbound),'</pre>';\n        exit;\n    }\n    return $next($request,$response);\n  }\n}\n```", "```php\n<?php\nuse Zend\\Expressive\\Container\\ApplicationFactory;\nuse Zend\\Expressive\\Helper;\nreturn [\n  'dependencies' => [\n **'invokables' => [**\n **App\\Action\\SessionValidateAction::class =>** \n **App\\Action\\SessionValidateAction::class,**\n **],**\n   'factories' => [\n      Helper\\ServerUrlMiddleware::class => \n      Helper\\ServerUrlMiddlewareFactory::class,\n      Helper\\UrlHelperMiddleware::class => \n      Helper\\UrlHelperMiddlewareFactory::class,\n    ],\n  ],\n  'middleware_pipeline' => [\n      'always' => [\n         'middleware' => [\n            Helper\\ServerUrlMiddleware::class,\n         ],\n         'priority' => 10000,\n      ],\n      'routing' => [\n         'middleware' => [\n            ApplicationFactory::ROUTING_MIDDLEWARE,\n            Helper\\UrlHelperMiddleware::class,\n            **App\\Action\\SessionValidateAction::class,**\n            ApplicationFactory::DISPATCH_MIDDLEWARE,\n         ],\n         'priority' => 1,\n      ],\n    'error' => [\n       'middleware' => [\n          // Add error middleware here.\n       ],\n       'error'    => true,\n       'priority' => -10000,\n    ],\n  ],\n];\n```", "```php\n    class Application_MiddleWare_ServerRequest\n    extends Application_MiddleWare_Request\n    implements Psr_Http_Message_ServerRequestInterface\n    {\n    ```", "```php\n    var $serverParams;\n    var $cookies;\n    var $queryParams;\n    // not all properties are shown\n    ```", "```php\n    function initialize()\n    {\n      $params = $this->getServerParams();\n      $this->getCookieParams();\n      $this->getQueryParams();\n      $this->getUploadedFiles;\n      $this->getRequestMethod();\n      $this->getContentType();\n      $this->getParsedBody();\n      return $this->withRequestTarget($params['REQUEST_URI']);\n    }\n    ```", "```php\n    function getServerParams()\n    {\n      if (!$this->serverParams) {\n          $this->serverParams = $_SERVER;\n      }\n      return $this->serverParams;\n    }\n    // not all getXXX() methods are shown to conserve space\n    ```", "```php\n    function getRequestMethod()\n    {\n      $params = $this->getServerParams();\n      $method = isset($params['REQUEST_METHOD']) \n        ? $params['REQUEST_METHOD'] : '';\n      $this->method = strtolower($method);\n      return $this->method;\n    }\n    ```", "```php\n    function getParsedBody()\n    {\n      if (!$this->parsedBody) {\n          if (($this->getContentType() == \n               Constants::CONTENT_TYPE_FORM_ENCODED\n               || $this->getContentType() == \n               Constants::CONTENT_TYPE_MULTI_FORM)\n               && $this->getRequestMethod() == \n               Constants::METHOD_POST)\n          {\n              $this->parsedBody = $_POST;\n          } elseif ($this->getContentType() == \n                    Constants::CONTENT_TYPE_JSON\n                    || $this->getContentType() == \n                    Constants::CONTENT_TYPE_HAL_JSON)\n          {\n              ini_set(\"allow_url_fopen\", true);\n              $this->parsedBody = \n                file_get_contents('php://stdin');\n          } elseif (!empty($_REQUEST)) {\n              $this->parsedBody = $_REQUEST;\n          } else {\n              ini_set(\"allow_url_fopen\", true);\n              $this->parsedBody = \n                file_get_contents('php://stdin');\n          }\n      }\n      return $this->parsedBody;\n    }\n    ```", "```php\n    function withParsedBody($data)\n    {\n      $this->parsedBody = $data;\n      return $this;\n    }\n    ```", "```php\n    function withoutAttribute($name)\n    {\n      if (isset($this->attributes[$name])) {\n          unset($this->attributes[$name]);\n      }\n      return $this;\n    }\n\n    }\n    ```", "```php\n    $request = new Request(\n      TARGET_WEBSITE_URL,\n      Constants::METHOD_POST,\n      new TextStream($contents),\n      [Constants::HEADER_CONTENT_TYPE => \n      Constants::CONTENT_TYPE_FORM_ENCODED,\n      Constants::HEADER_CONTENT_LENGTH => $body->getSize()]\n    );\n\n    $data = http_build_query(['data' => \n    $request->getBody()->getContents()]);\n\n    $defaults = array(\n      CURLOPT_URL => $request->getUri()->getUriString(),\n      CURLOPT_POST => true,\n      CURLOPT_POSTFIELDS => $data,\n    );\n    $ch = curl_init();\n    curl_setopt_array($ch, $defaults);\n    $response = curl_exec($ch);\n    curl_close($ch);\n    ```"]