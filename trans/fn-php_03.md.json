["```php\n<?php \n\nfunction square(int $x): int \n{ \n    return $x * $x; \n} \n$squared = array_map('square', [1, 2, 3, 4]); \n// $squared contains [1, 4, 9, 16] \n```", "```php\n<?php \n\n$numbers = [1, 2, 3, 4]; \n$english = ['one', 'two', 'three', 'four']; \n$french = ['un', 'deux', 'trois', 'quatre']; \n\nfunction translate(int $n, string $e, string $f): string \n{ \n    return \"$n is $e, or $f in French.\"; \n} \nprint_r(array_map('translate', $numbers, $english, $french)); \n```", "```php\nArray \n( \n    [0] => 1 is one, or un in French. [1] => 2 is two, or deux in French. [2] => 3 is three, or trois in French. [3] => 4 is four, or quatre in French. ) \n```", "```php\n<?php \n\nprint_r(array_map(null, [1, 2], ['one', 'two'], ['un', 'deux'])); \n```", "```php\nArray \n( \n    [0] => Array \n        ( \n            [0] => 1 \n            [1] => one \n            [2] => un \n        ) \n    [1] => Array \n        ( \n            [0] => 2 \n            [1] => two \n            [2] => deux \n        ) \n) \n```", "```php\n<?php \n  function add(int $a, int $b = 10): int \n  { \n      return $a + $b; \n  } \n\n  print_r(array_map('add', ['one' => 1, 'two' => 2])); \n  print_r(array_map('add', [1, 2], [20, 30])); \n```", "```php\nArray \n( \n    [one] => 11 \n    [two] => 12 \n) \nArray \n( \n    [0] => 21 \n    [1] => 32 \n) \n```", "```php\n$data = ['one' => 1, 'two' => 2];\n\narray_map(function to_string($key) use($data) {\n    return (str) $data[$key];\n}, \narray_keys($data);\n```", "```php\n<?php\n\nfunction odd(int $a): bool\n{\n    return $a % 2 === 1;\n}\n\n$filtered = array_filter([1, 2, 3, 4, 5, 6], 'odd');\n/* $filtered contains [1, 3, 5] */\n```", "```php\n<?php\n\n$filtered = array_filter([\"one\", \"two\", \"\", \"three\", \"\"]); \n/* $filtered contains [\"one\", \"two\", \"three\"] */\n\n$filtered = array_filter([0, 1, null, 2, [], 3, 0.0]); \n/* $filtered contains [1, 2, 3] */\n```", "```php\n<?php\n\n$data = [];\nfunction key_only($key) { \n    // [...] \n}\n\n$filtered = array_filter($data, 'key_only', ARRAY_FILTER_USE_KEY);\n\nfunction both($value, $key) { \n    // [...] \n}\n\n$filtered = array_filter($data, 'both', ARRAY_FILTER_USE_BOTH);\n```", "```php\n<?php\n\nfunction sum(int $carry, int $i): int\n{\n    return $carry + $i;\n}\n\n$summed = array_reduce([1, 2, 3, 4], 'sum', 0);\n/* $summed contains 10 */\n```", "```php\n<?php\n\nfunction in_array2(string $needle, array $haystack): bool\n{\n    $search = function(bool $contains, string $item) use ($needle):bool \n    {\n        return $needle == $item ? true : $contains;\n    };\n    return array_reduce($haystack, $search, false);\n}\n\nvar_dump(in_array2('two', ['one', 'two', 'three']));\n// bool(true)\n```", "```php\n<?php\n\nfunction max2(array $data): int\n{\n    return array_reduce($data, function(int $max, int $i) : int \n    {\n        return $i > $max ? $i : $max;\n    }, 0);\n}\n\necho max2([5, 10, 23, 1, 0]);\n// 23\n```", "```php\n<?php\n\nfunction max3(array $data): int\n{\n    return array_reduce($data, 'max', 0);\n}\n```", "```php\n<?php \n\nfunction map(array $data, callable $cb): array \n{ \n    return array_reduce($data, function(array $acc, $i) use ($cb) { \n        $acc[] = $cb($i); \n        return $acc; \n    }, []);     \n} \n\nfunction filter(array $data, callable $predicate): array \n{ \n  return array_reduce($data, function(array $acc, $i)  use($predicate) { \n      if($predicate($i)) { \n          $acc[] = $i; \n      } \n      return $acc; \n  }, []); \n} \n```", "```php\n<?php \n\nprint_r(array_map(null, [1, 2], ['one', 'two'], ['un', 'deux'])); \n```", "```php\nArray \n( \n    [0] => Array \n        ( \n            [0] => 1 \n            [1] => one \n            [2] => un \n        ) \n    [1] => Array \n        ( \n            [0] => 2 \n            [1] => two \n            [2] => deux \n        ) \n) \n```", "```php\n<?php \n\n$numerals = [1, 2, 3, 4]; \n$english = ['one', 'two']; \n$french = ['un', 'deux', 'trois']; \n\nprint_r(array_map(null, $numerals, $english, $french)); \nArray \n( \n    [0] => Array \n        ( \n            [0] => 1 \n            [1] => one \n            [2] => un \n        ) \n    [1] => Array \n        ( \n            [0] => 2 \n            [1] => two \n            [2] => deux \n        ) \n    [2] => Array \n        ( \n            [0] => 3 \n            [1] => \n            [2] => trois \n        ) \n    [3] => Array \n        ( \n            [0] => 4 \n            [1] => \n            [2] => \n        ) \n) \n```", "```php\n<?php \n\nfunction unzip(array $data): array \n{ \n    $return = []; \n\n    $data = array_values($data); \n    $size = count($data[0]); \n\n    foreach($data as $child) { \n        $child = array_values($child); \n        for($i = 0; $i < $size; ++$i) { \n            if(isset($child[$i]) && $child[$i] !== null) { \n                $return[$i][] = $child[$i]; \n            } \n        } \n    } \n\n    return $return; \n} \n```", "```php\n$zipped = array_map(null, $numerals, $english, $french); \n\nlist($numerals2, $english2, $french2) = unzip($zipped); \n\nvar_dump($numerals == $numerals2); \n// bool(true) \nvar_dump($english == $english2); \n// bool(true) \nvar_dump($french == $french2); \n// bool(true) \n```", "```php\n<?php \n\nfunction searchDirectory($dir, $accumulator = []) { \n    foreach (scandir($dir) as $path) { \n        // Ignore hidden files, current directory and parent directory \n        if(strpos($path, '.') === 0) { \n            continue; \n        } \n\n        $fullPath = $dir.DIRECTORY_SEPARATOR.$path; \n\n        if(is_dir($fullPath)) { \n            $accumulator = searchDirectory($path, $accumulator); \n        } else { \n            $accumulator[] = $fullPath; \n        } \n    } \n    return $accumulator; \n} \n```", "```php\n<?php \n\nfunction hanoi(int $disc, string $source, string $destination,  string $via) \n{ \n    if ($disc === 1) { \n        echo(\"Move a disc from the $source rod to the $destination  rod\\n\"); \n    } else { \n        // step 1 : move all discs but the first to the \"via\" rod         hanoi($disc - 1, $source, $via, $destination); \n        // step 2 : move the last disc to the destination \n        hanoi(1, $source, $destination, $via); \n        // step 3 : move the discs from the \"via\" rod to the  destination \n        hanoi($disc - 1, $via, $destination, $source); \n    } \n} \n```", "```php\nMove a disc from the left rod to the right rod \nMove a disc from the left rod to the middle rod \nMove a disc from the right rod to the middle rod \nMove a disc from the left rod to the right rod \nMove a disc from the middle rod to the left rod \nMove a disc from the middle rod to the right rod \nMove a disc from the left rod to the right rod \n```", "```php\n<?php \n\nfunction while_iterative() \n{ \n    $result = 1; \n    while($result < 50) { \n        $result = $result * 2; \n    } \n    return $result; \n} \n\nfunction while_recursive($result = 1, $continue = true) \n{ \n    if($continue === false) { \n        return $result; \n    } \n    return while_recursive($result * 2, $result < 50); \n} \n```", "```php\n<?php \n\nfunction for_iterative() \n{ \n    $result = 5; \n\n    for($i = 1; $i < 10; ++$i) { \n        $result = $result * $i; \n    } \n\n    return $result; \n} \n\nfunction for_recursive($result = 5, $i = 1) \n{ \n    if($i >= 10) { \n        return $result; \n    } \n\n    return for_recursive($result * $i, $i + 1); \n} \n```", "```php\n<?php \n\nfunction for_with_helper() \n{ \n    $helper = function($result = 5, $i = 1) use(&$helper) { \n        if($i >= 10) { \n            return $result; \n        } \n\n        return $helper($result * $i, $i + 1); \n    }; \n\n    return $helper(); \n} \n```", "```php\n<?php \nfunction throw_exception() \n{ \n    throw new Exception('Message'); \n} \n\nfunction some_function($x) \n{ \n    $y = throw_exception(); \n    try { \n        $z = $x + $y; \n    } catch(Exception $e) { \n        $z = 42; \n    } \n\n    return $z; \n} \n\necho some_function(42); \n// PHP Warning: Uncaught Exception: Message \n```", "```php\n<?php \n\ntry { \n    $z = $x + throw_exception(); \n} catch(Exception $e) { \n    $z = 42; \n} \n```", "```php\n<?php \nclass A {} \n\n$a = new A(); \n\n$a->invalid_method(); \n\n// PHP Warning: Uncaught Error: Call to undefined method  A::invalid_method() \n```", "```php\nFatal error: Call to undefined method A::invalid_method()\n```", "```php\nFatal error: **Uncaught Error**: Call to undefined method A::invalid_method()\n```", "```php\n<?php class B {} \n\n$a = new B(); \n\ntry { \n    $a->invalid_method(); \n} catch(Error $e) { \n    echo \"An error occured : \".$e->getMessage(); \n} \n// An error occured : Call to undefined method B::invalid_method() \n```", "```php\n<?php \nfunction add(int $a, int $b): int \n{ \n    return $a + $b; \n} \n\ntry { \n    add(10, 'foo'); \n} catch(TypeError $e) { \n    echo \"An error occured : \".$e->getMessage(); \n} \n// An error occured : Argument 2 passed to add() must be of the type integer, string given \n```", "```php\n<?php \nfunction max2(array $data): int \n{ \n    return array_reduce($data, function(int $max, int $i) : int { \n        return $i > $max ? $i : $max; \n    }, 0); \n} \n```", "```php\n**Warning: max(): Array must contain at least one element**\n\n```", "```php\n<?php \nfunction max3(array $data) \n{ \n    if(empty($data)) { \n        trigger_error('max3(): Array must contain at least one  element', E_USER_WARNING); \n        return false; \n    } \n\n    return array_reduce($data, function(int $max, int $i) : int { \n        return $i > $max ? $i : $max; \n    }, 0); \n} \n```", "```php\n<?php \n\n/* create a new cURL resource */ \n$ch = curl_init(); \n\n/* set URL and other appropriate options */ \ncurl_setopt($ch, CURLOPT_URL, \"http://www.example.com/\"); \ncurl_setopt($ch, CURLOPT_HEADER, 0); \n\n/* grab URL and pass it to the browser */ \ncurl_exec($ch); \n\n/* close cURL resource, and free up system resources */ \ncurl_close($ch); \n```", "```php\n<?php \n\nfunction max4(array $data, int $default = 0): int \n{ \n    return empty($data) ? $default : \n      array_reduce($data, function(int $max, int $i) : int \n      { \n          return $i > $max ? $i : $max; \n      }, 0); \n} \n```", "```php\n<?php \n\nfunction max5(array $data, callable $onError): int \n{ \n    return empty($data) ? $onError() : \n      array_reduce($data, function(int $max, int $i) : int { \n          return $i > $max ? $i : $max; \n      }, 0); \n} \n\nmax5([], function(): int { \n    // You are free to do anything you want here. // Not really useful in such a simple case but \n    // when creating complex objects it can prove invaluable. return 42; \n}); \n```", "```php\n<?php \n\nabstract class Maybe \n{ \n    public static function just($value): Just \n    { \n        return new Just($value); \n    } \n\n    public static function nothing(): Nothing \n    { \n        return Nothing::get(); \n    } \n\n    abstract public function isJust(): bool; \n\n    abstract public function isNothing(): bool; \n\n    abstract public function getOrElse($default); \n} \n```", "```php\n<?php \nfinal class Just extends Maybe \n{ \n    private $value; \n\n    public function __construct($value) \n    { \n        $this->value = $value; \n    } \n\n    public function isJust(): bool \n    { \n        return true; \n    } \n\n    public function isNothing(): bool \n    { \n        return false; \n    } \n\n    public function getOrElse($default) \n    { \n        return $this->value; \n    } \n} \n```", "```php\n<?php \nfinal class Nothing extends Maybe \n{ \n    private static $instance = null; \n    public static function get() \n    { \n        if(is_null(self::$instance)) { \n            self::$instance = new static(); \n        } \n\n        return self::$instance; \n    } \n\n    public function isJust(): bool \n    { \n        return false; \n    } \n\n    public function isNothing(): bool \n    { \n        return true; \n    } \n\n    public function getOrElse($default) \n    { \n        return $default; \n    } \n} \n```", "```php\n<?php \n\n$hello = Maybe::just(\"Hello World !\"); \n$nothing = Maybe::nothing(); \n\necho $hello->getOrElse(\"Nothing to see...\"); \n// Hello World ! var_dump($hello->isJust()); \n// bool(true) \nvar_dump($hello->isNothing()); \n// bool(false) \n\necho $nothing->getOrElse(\"Nothing to see...\"); \n// Nothing to see... var_dump($nothing->isJust()); \n// bool(false) \nvar_dump($nothing->isNothing()); \n// bool(true) \n```", "```php\n<?php \n\nabstract class Maybe \n{ \n    // [...] \n\n    public static function fromValue($value, $nullValue = null) \n    { \n        return $value === $nullValue ? self::nothing() : \n            self::just($value); \n    } \n\n    abstract public function map(callable $f): Maybe; \n} \n\nfinal class Just extends Maybe \n{ \n    // [...] \n\n    public function map(callable $f): Maybe \n    { \n        return new self($f($this->value)); \n    } \n} \n\nfinal class Nothing extends Maybe \n{ \n    // [...] \n\n    public function map(callable $f): Maybe \n    { \n        return $this; \n    } \n} \n```", "```php\n<?php abstract class Maybe \n{ \n    // [...] \n    abstract public function orElse(Maybe $m): Maybe; \n    abstract public function flatMap(callable $f): Maybe;\n    abstract public function filter(callable $f): Maybe;\n} \n\nfinal class Just extends Maybe \n{ \n    // [...] \n\n    public function orElse(Maybe $m): Maybe \n    { \n        return $this; \n    } \n\n    public function flatMap(callable $f): Maybe \n    { \n        return $f($this->value); \n    } \n\n    public function filter(callable $f): Maybe \n    { \n        return $f($this->value) ? $this : Maybe::nothing(); \n    } \n} \n\nfinal class Nothing extends Maybe \n{ \n    // [...] \n\n    public function orElse(Maybe $m): Maybe \n    { \n        return $m; \n    } \n\n    public function flatMap(callable $f): Maybe \n    { \n        return $this; \n    } \n\n    public function filter(callable $f): Maybe \n    { \n        return $this; \n    } \n  } \n```", "```php\n<?php \n$user = getCurrentUser(); \n\n$name = $user == null ? 'Guest' : $user->name; \n\necho sprintf(\"Welcome %s\", $name); \n// Welcome John \n```", "```php\n<?php \n\n$user = getCurrentUser(); \n\nif($user == null) { \n   $user = new AnonymousUser(); \n} \n\necho sprintf(\"Welcome %s\", $user->name); \n// Welcome John \n```", "```php\n<?php \n\n$user = Maybe::fromValue(getCurrentUser()); \n\n$name = $user->map(function(User $u) { \n  return $u->name; \n})->getOrElse('Guest'); \n\necho sprintf(\"Welcome %s\", $name); \n// Welcome John \n\necho sprintf(\"Welcome %s\", $user->getOrElse(new AnonymousUser())->name); \n// Welcome John \n```", "```php\n<?php \n\n$dashboard = getUserDashboard(); \nif($dashboard == null) { \n    $dashboard = getGroupDashboard(); \n} \nif($dashboard == null) { \n    $dashboard = getDashboard(); \n} \n```", "```php\n<?php \n\n/* We assume the dashboards method now return Maybe instances */ \n$dashboard = getUserDashboard() \n             ->orElse(getGroupDashboard()) \n             ->orElse(getDashboard()); \n```", "```php\n<?php \n\n$num = Maybe::fromValue(42); \n\n$val = $num->map(function($n) { return $n * 2; }) \n         ->filter(function($n) { return $n < 80; }) \n         ->map(function($n) { return $n + 10; }) \n         ->orElse(Maybe::fromValue(99)) \n         ->map(function($n) { return $n / 3; }) \n         ->getOrElse(0); \necho $val; \n// 33 \n```", "```php\n<?php \n\nfunction lift(callable $f) \n{ \n    return function() use ($f) \n    { \n        if(array_reduce(func_get_args(), function(bool $status, Maybe $m) { \n            return $m->isNothing() ? false : $status; \n        }, true)) { \n            $args = array_map(function(Maybe $m) { \n                // it is safe to do so because the fold above  checked \n                // that all arguments are of type Some \n                return $m->getOrElse(null); \n            }, func_get_args()); \n            return Maybe::just(call_user_func_array($f, $args)); \n        } \n        return Maybe::nothing(); \n    }; \n} \n```", "```php\n<?php \nfunction add(int $a, int $b) \n{ \n    return $a + $b; \n} \n\n$add2 = lift('add'); \n\necho $add2(Maybe::just(1), Maybe::just(5))->getOrElse('nothing'); \n// 6 \n\necho $add2(Maybe::just(1), Maybe::nothing())- >getOrElse('nothing'); \n// nothing \n```", "```php\n<?php \nabstract class Either \n{ \n    protected $value; \n\n    public function __construct($value) \n    { \n        $this->value = $value; \n    } \n\n    public static function right($value): Right \n    { \n        return new Right($value); \n    } \n\n    public static function left($value): Left \n    { \n        return new Left($value); \n    } \n\n    abstract public function isRight(): bool; \n    abstract public function isLeft(): bool; \n    abstract public function getRight(); \n    abstract public function getLeft(); \n    abstract public function getOrElse($default); \n    abstract public function orElse(Either $e): Either; \n    abstract public function map(callable $f): Either; \n    abstract public function flatMap(callable $f): Either; \n    abstract public function filter(callable $f, $error): Either; \n} \n```", "```php\n<?php \nfunction liftEither(callable $f, $error = \"An error occured\") \n{ \n    return function() use ($f) \n    { \n        if(array_reduce(func_get_args(), function(bool $status, Either $e) { \n            return $e->isLeft() ? false : $status; \n        }, true)) { \n            $args = array_map(function(Either $e) { \n                // it is safe to do so because the fold above  checked \n                // that all arguments are of type Some \n                return $e->getRight(null); \n            }, func_get_args()); \n            return Either::right(call_user_func_array($f, $args)); \n        } \n        return Either::left($error); \n    }; \n} \n```", "```php\n**composer require lstrojny/functional-php.**\n\n```", "```php\n<?php \nrequire_once __DIR__.'/vendor/autoload.php'; \n\nuse function Functional\\map; \n\nmap(range(0, 4), function($v) { return $v * 2; }); \n\nuse Functional as F; \n\nF\\map(range(0, 4), function($v) { return $v * 2; }); \n```", "```php\n**composer require phpoption/phpoption**\n\n```", "```php\n**composer require qaribou/immutable.php.**\n\n```"]