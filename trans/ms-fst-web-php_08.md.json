["```php\nfunction myJS()\n{\n    function add(n1, n2)\n    {\n        let number1 = Number(n1);\n        let number2 = Number(n2);\n\n        return number1 + number2;\n    }\n\n}\n```", "```php\nfunction myJS()\n{\n    function add(n1, n2)\n    {\n        // 1\\. Modifies the global scope\n        number1 = Number(n1);\n        number2 = Number(n2);\n\n        // 2\\. The alert function\n        alert( number1 + number2 );\n    }\n\n}\n```", "```php\n4 === addTwo(2);\n```", "```php\nfunction myJS()\n{\n    function addRandom(n1)\n    {\n        let number1 = Number(n1);\n\n        return number1 + Math.random();\n    }\n\n}\n```", "```php\nfunction myJS()\n{\n    const number = 7;\n\n    try {\n        number = 9;\n    } catch(err) {\n```", "```php\n        // TypeError: invalid assignment to const 'number'\n        console.log(err);\n    }\n  }\n```", "```php\nfunction myJS()\n{\n    let array = [1, 2, 3];\n\n    let arrayPlusTwo = array.map(current => current + 2);\n\n    // arrayPlusTwo == [3, 4, 5]\n\n}\n```", "```php\nfunction myJS()\n{\n    let array = [1, 2, 3];\n\n    let arrayEvenNumbers = array.filter(current => current % 2 == 0);\n\n    // arrayEvenNumbers == [2]\n\n}\n```", "```php\nfunction myJS()\n{\n    let array = [1, 2, 3];\n\n    let sum = array.reduce((cumul, current) => cumul + current, 0);\n\n    // sum == 6;\n\n}\n```", "```php\nfunction a(x)\n{\n    y = x + 2;\n    return b(y);\n}\n\nfunction b(y)\n{\n    z = y + 3;\n    return z;\n}\n\nconsole.log(a(1)); // 6\n```", "```php\nfunction myJS()\n{\n    \"use strict\";\n\n    function incrementArrayBy2(myArray, len = 1, index = 0)\n    {\n        myArray[index] = index;\n        myArray[index] += 2;\n        return (index === len - 1) ? myArray : incrementArrayBy2(myArray, len, index + \n                                                                     1); // tail call\n    }\n\n    let myArray = [];\n\n    for(let i = 0; i < 100000000; i++) {\n        myArray[i] = i;\n        myArray[i] += 2;\n    }\n\n    console.log(myArray);\n}\n```", "```php\nfunction myJS()\n{\n    \"use strict\";\n\n    function incrementArrayBy2(myArray, len = 1, index = 0)\n    {\n        myArray[index] = index;\n        myArray[index] += 2;\n        return (index === len - 1) ? myArray :    \n       incrementArrayBy2(myArray, len, index +  \n                                                                     1); // tail call\n    }\n\n    let myArray = [];\n\n    myArray = incrementArrayBy2(myArray, 100000000);\n\n    console.log(myArray);\n}\n\n```", "```php\nfunction myFunction()\n{\n    // Both one() and two() are in tail positions\n    return (x === 1) ? one() : two();\n}\n```", "```php\nfunction myFunction()\n{\n    // Not in a tail position\n    one();\n}\n```", "```php\nfunction myFunction()\n{\n    // Only two() is in a tail position\n    const a = () => (one() , two());\n}\n```", "```php\nasync function createEntity(req, res) {\n    try {\n        const urlResponse = await fetch(req.body.url)\n        const html = await urlResponse.text()\n        const entity = await Entity.post({ // POST request })\n        // More stuff here\n    } catch (error) {\n        req.flash('error', `An error occurred : ${error.message}`)\n        res.redirect('/entity/new')\n    }\n}\n```", "```php\nasync function* readLines(path) {\n    let file = await fileOpen(path);\n\n    try {\n        while (!file.EOF) {\n            yield await file.readLine();\n        }\n```", "```php\n    } finally {\n        await file.close();\n    }\n}\n```", "```php\nconst text = capitalize(myClean(myTrim(' hAhaHAhA ')));\n```", "```php\nconst text = ' hAhaHAhA '\n|> myTrim\n|> myClean\n|> capitalize\n```", "```php\nfunction add(num1, num2) {\n    return num1 + num2;\n}\n\nfunction add1(num2) {\n    return add(1, num2);\n}\n```", "```php\nconst add = (x, y) => x + y\nconst add1 = add(?, 1)\n```"]