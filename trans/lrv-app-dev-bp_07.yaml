- en: Chapter 7. Creating a Newsletter System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。创建一个通讯系统
- en: 'In this chapter, we will cover an advanced newsletter system, which will use
    Laravel''s `queue` and `email` libraries. After this section, we will learn how
    to set and fire/trigger queued tasks, and how to parse e-mail templates and send
    mass e-mails to subscribers. The topics covered in this chapter are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一个高级的通讯系统，它将使用Laravel的`queue`和`email`库。在本节之后，我们将学习如何设置和触发排队任务，以及如何解析电子邮件模板并向订阅者发送大量电子邮件。本章涵盖的主题有：
- en: Creating a database and migrating the subscriber's table
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数据库并迁移订阅者的表
- en: Creating a subscriber's model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个订阅者模型
- en: Creating our subscription form
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的订阅表单
- en: Validating and processing the form
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证和处理表单
- en: Creating a queue system to process the e-mail
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个处理电子邮件的队列系统
- en: Using the Email class to process e-mails inside the queue
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Email类来处理队列中的电子邮件
- en: Testing the system
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试系统
- en: Sending e-mails with the queue directly
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接使用队列发送电子邮件
- en: In this chapter, we will be using third-party services, which will require access
    to your script, so before proceeding, make sure your project is available online.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用第三方服务，这将需要访问你的脚本，所以在继续之前，请确保你的项目可以在线访问。
- en: Creating a database and migrating the subscribers table
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个数据库并迁移订阅者表
- en: After successfully installing Laravel 4 and defining database credentials from
    `app/config/database.php`, create a database called `chapter7`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 成功安装Laravel 4并从`app/config/database.php`中定义数据库凭据后，创建一个名为`chapter7`的数据库。
- en: 'After creating the database, open up your terminal and navigate through your
    project folder, and run the following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据库后，打开你的终端，导航到你的项目文件夹，并运行以下命令：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will generate a new MySQL migration named `subscribers`
    for us. Now navigate to the `migrations` folder in `app/database/` and open up
    the migration file just created by the preceding command, and change its contents
    as shown in the following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将为我们生成一个名为`subscribers`的新MySQL迁移。现在转到`app/database/`中的`migrations`文件夹，并打开刚刚由上述命令创建的迁移文件，并按照下面的代码更改其内容：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For this chapter, we will only need the `email` column, which will hold the
    e-mail address, of the subscribers. I set this column to be, at most, 100 characters
    long, having datatype `VARCHAR,` and it is not to be left as null.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们只需要`email`列，它将保存订阅者的电子邮件地址。我将这一列设置为最多100个字符长，数据类型为`VARCHAR`，并且不允许为空。
- en: 'After saving the file, run the following command to execute migration:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，运行以下命令执行迁移：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If no error has occurred, you are ready for the next step of the project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有发生错误，你已经准备好进行项目的下一步了。
- en: Creating a subscribers model
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个订阅者模型
- en: To benefit from Eloquent ORM, the best practice is to create a model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从Eloquent ORM中受益，最佳实践是创建一个模型。
- en: 'Save the following code in `subscribers.php` at `app/models/`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码保存在`app/models/`下的`subscribers.php`文件中：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We set the table name with the variable `$table`, and columns in which the value
    must be filled by the user are set with the `$fillable` variable. Now that our
    model is ready, we can proceed to the next step, and start creating our controller,
    along with the form.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用变量`$table`设置表名，并使用变量`$fillable`设置用户必须填写值的列。现在我们的模型已经准备好了，我们可以继续下一步，开始创建我们的控制器和表单。
- en: Creating our subscription form
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的订阅表单
- en: Now we should create a form to save records to the database and specify its
    properties.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该创建一个表单来保存记录到数据库并指定它的属性。
- en: 'First, open your terminal and type the following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开你的终端，输入以下命令：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command will generate a `SubscribersController.php` file for you with some
    blank methods in the `app/controllers` directory.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将为你在`app/controllers`目录中生成一个`SubscribersController.php`文件，并在其中添加一些空方法。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default controller methods generated by the `artisan` command are not RESTful.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`artisan`命令生成的默认控制器方法不是RESTful的。'
- en: 'Now, open up `app/routes.php` and add the following code:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`app/routes.php`并添加以下代码：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Instead of defining all actions one by one, we can define all actions declared
    on a controller with one line of code. If your method names are usable as `get`
    or `post` actions directly, using the `controller()` method can save a lot of
    time. The first parameter sets the **URI** (**Uniform Resource Identifier**) for
    the controller and the second parameter defines which class in the controllers
    folder will be accessed and defined.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`controller()`方法一次性定义控制器上声明的所有操作，而不是逐个定义所有操作。如果你的方法名可以直接用作`get`或`post`操作，使用`controller()`方法可以节省大量时间。第一个参数设置控制器的**URI**（统一资源标识符），第二个参数定义了控制器文件夹中将要访问和定义的类。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Controllers which are set like this are automatically RESTful.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样设置的控制器自动是RESTful的。
- en: 'Now, let''s create the form''s controller. Remove all methods inside the auto-generated
    class and add the following code in your controller file:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建表单的控制器。删除自动生成的类中的所有方法，并在你的控制器文件中添加以下代码：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: First, we defined the process. It is quite simple here; we named the method
    as `getCreate()` , because we want our `Create` method to be RESTful. We simply
    loaded a view file, which we will be generating in the next step directly.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义了这个过程。这里很简单；我们将方法命名为`getCreate()`，因为我们希望我们的`Create`方法是RESTful的。我们简单地加载了一个视图文件，我们将在下一步直接生成。
- en: 'Now let''s create our view file. In this example, I''ve used the Ajax POST
    technique using jQuery. Save this file as `subscribe_form.blade.php` at `app/views/`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的视图文件。在这个例子中，我使用了jQuery的Ajax POST技术。将这个文件保存为`subscribe_form.blade.php`，放在`app/views/`下：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code will produce a simple form as shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将生成一个简单的表单，如下截图所示：
- en: '![Creating our subscription form](graphics/2111_07_01.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的订阅表单](graphics/2111_07_01.jpg)'
- en: Now that our form is ready, we can continue and process the form.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的表单已经准备好了，我们可以继续并处理表单。
- en: Validating and processing the form
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证和处理表单
- en: Now that we have the form, we need to validate and store the data. We also need
    to check whether the request is an Ajax request. Also, we need to return successful
    code or error messages back to the form with Ajax methods, so that the end-user
    can understand what has happened at the backend.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了表单，我们需要验证和存储数据。我们还需要检查请求是否是Ajax请求。此外，我们需要使用Ajax方法将成功的代码或错误消息返回到表单，以便最终用户可以理解后端发生了什么。
- en: 'Save the data inside `SubscribersController.php` at `app/controllers/`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据保存在`SubscribersController.php`中的`app/controllers/`：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following points explain the preceding code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几点解释了前面的代码：
- en: With the `ajax()` method of the `Request` class, you can check whether the request
    is an Ajax request or not. If it's not an Ajax request, we are redirected back
    to our subscriber's page (the form itself).
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Request`类的`ajax()`方法，你可以检查请求是否是Ajax请求。如果不是Ajax请求，我们将被重定向回我们的订阅者页面（表单本身）。
- en: If it's a valid request, then we run our form using the `make()` method of the
    `Validation` class. In this example, I've written the rules directly, but the
    best practice is to set them in models and call them to the controller directly.
    The rule `required` checks whether the field is filled. The rule `email` checks
    if the input is in a valid e-mail format, and lastly, the rule `unique` helps
    us to know whether the value is already on a row or not.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是有效的请求，那么我们将使用`Validation`类的`make()`方法运行我们的表单。在这个例子中，我直接编写了规则，但最佳实践是在模型中设置它们，并直接调用它们到控制器。规则`required`检查字段是否已填写。规则`email`检查输入是否是有效的电子邮件格式，最后，规则`unique`帮助我们知道值是否已经在行中或不在。
- en: If the form validation fails, we return the first error message directly. Returned
    content will be Ajax's response that will be echoed out into our form page. Since
    the error message is an auto-generated meaningful text message, it's safe to use
    it in our example directly. This message will show all errors from our validation.
    For example, it will echo out if the field is not a valid e-mail address, or if
    the e-mail has been submitted to the database already.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果表单验证失败，我们直接返回第一个错误消息。返回的内容将是Ajax的响应，将被回显到我们的表单页面中。由于错误消息是自动生成的有意义的文本消息，所以可以直接在我们的示例中使用。这条消息将显示所有验证错误。例如，它将回显字段是否不是有效的电子邮件地址，或者电子邮件是否已经提交到数据库中。
- en: If the form validation passes, we try to add the e-mail to our database with
    the `create()` method of Laravel's Eloquent ORM.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果表单验证通过，我们尝试使用Laravel的Eloquent ORM的`create()`方法将电子邮件添加到我们的数据库中。
- en: Creating a queue system for basic e-mail sending
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为基本的电子邮件发送创建一个队列系统
- en: 'Queues, which are featured in Laravel 4, are one of the best features that
    come with the framework. Imagine you have a long process, such as resizing all
    images, sending mass e-mails, or mass database operations. When you process these,
    they will take time. So why should we wait? Instead we will put these processes
    in a queue. With Laravel v4, this is quite easy to manage. In this section, we
    are going to create a simple queue and loop through the e-mails and will try to
    send an e-mail to each subscriber using the following steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 4中的队列是该框架提供的最好的功能之一。想象一下你有一个长时间的过程，比如调整所有图片的大小，发送大量电子邮件，或者大量数据库操作。当你处理这些时，它们会花费时间。那么为什么我们要等待呢？相反，我们将把这些过程放入队列中。使用Laravel
    v4，这是相当容易管理的。在本节中，我们将创建一个简单的队列，并循环遍历电子邮件，尝试向每个订阅者发送电子邮件，使用以下步骤：
- en: 'First, we need a queue driver for our project. This may be **Amazon SQS**,
    **Beanstalkd**, or **Iron IO**. I chose Iron IO because, currently, it''s the
    only queue driver that supports push queues. Then we need to get the package from
    packagist. Add `"iron-io/iron_mq": "dev-master"` to the `require` key of `composer.json`.
    It should look like the following code:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '首先，我们需要一个队列驱动程序。这可以是**Amazon SQS**、**Beanstalkd**或**Iron IO**。我选择了Iron IO，因为它目前是唯一支持push队列的队列驱动程序。然后我们需要从packagist获取包。将`"iron-io/iron_mq":
    "dev-master"`添加到`composer.json`的`require`键中。它应该看起来像以下代码：'
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now you should run the following command to update/download new packages:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该运行以下命令来更新/下载新的包：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We need an account from one of the queue services that Laravel officially supports.
    In this example, I'll be using the free **Iron.io** service.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个来自Laravel官方支持的队列服务的账户。在这个例子中，我将使用免费的**Iron.io**服务。
- en: First, sign up to the website [http://iron.io](http://iron.io).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，注册网站[http://iron.io](http://iron.io)。
- en: Second, after you're logged in, create a project named `laravel`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，在登录后，创建一个名为`laravel`的项目。
- en: Then, click on your project. There is a key icon that will give you the project's
    credentials. Click on that; it will provide you with `project_id` and `token`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击你的项目。有一个关键图标，会给你项目的凭据。点击它，它会提供给你`project_id`和`token`。
- en: Now navigate to `app/config/queue.php`, and change the default key driver to
    iron.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在导航到`app/config/queue.php`，并将默认的键驱动更改为iron。
- en: In the `queue` file that we opened, there is a key named `iron`, which you will
    be using to fill the credentials. Provide your `token` and `project_id` information
    there, and for the `queue` key, type `laravel`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们打开的`queue`文件中，有一个名为`iron`的键，你将使用它来填写凭据。在那里提供你的`token`和`project_id`信息，对于`queue`键，输入`laravel`。
- en: 'Now, open your terminal and type the following command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开你的终端并输入以下命令：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If everything went okay, you will get an output as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，你将得到以下输出：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, when you check the queues tab on the Iron.io project page, you will see
    a new `push` queue generated by Laravel. Because it's a push queue, the queue
    will call us when its time comes.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你在Iron.io项目页面上检查队列标签时，你会看到一个由Laravel生成的新的`push`队列。因为它是一个push队列，当队列到达时间时，队列会调用我们。
- en: Now we need some methods to catch the `push` request, to marshal it, and to
    fire it.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要一些方法来捕获`push`请求，对其进行编组并触发它。
- en: First, we will need a `get` method to trigger the `push` queue (which will mimic
    the codes to trigger the queue).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要一个`get`方法来触发`push`队列（模拟触发队列的代码）。
- en: 'Add the following code into your `routes.php` file in the `app` folder:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`app`文件夹中的`routes.php`文件中：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code will make a `push` request to a class called `SendEmail`, which we
    will be creating in further steps.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将向一个名为`SendEmail`的类发出`push`请求，我们将在后续步骤中创建该类。
- en: 'Now we will need a listener to marshal the queue. Add the following code into
    your `routes.php` file in the `app` folder:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要一个监听器来管理队列。将以下代码添加到`app`文件夹中的`routes.php`文件中：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This code will get the `push` request from our queue driver, which will put
    it up in the queue and run.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将从我们的队列驱动程序获取`push`请求，然后将其放入队列并运行。
- en: 'We will need a class to fire up the queue and send e-mails, but first we need
    an e-mail template. Save the code as `test.blade.php` in the `app/views/ emails/`
    directory:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个类来启动队列并发送电子邮件，但首先我们需要一个电子邮件模板。将代码保存为`test.blade.php`，并保存在`app/views/emails/`目录中：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is a simple e-mail template that will wrap our e-mail.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的电子邮件模板，将包装我们的电子邮件。
- en: 'Now we need a class to fire up the queue and send the e-mail. Save these class
    files directly into the `routes.php` file in the `app` folder:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要一个类来启动队列并发送电子邮件。将这些类文件直接保存到`app`文件夹中的`routes.php`文件中：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The class `SendEmail`, which we have written in the preceding code, will cover
    the queue job that we will be assigning. The method `fire()` is Laravel's own
    method to process the queue event. So when the queue is marshaled, the code inside
    the method `fire()` will be run. We can also pass parameters to `job` as a second
    parameter while we are calling the `Queue::push()` method.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的代码中编写的`SendEmail`类将覆盖我们将分配的队列作业。`fire()`方法是Laravel自己的方法，用于处理队列事件。因此，当队列被管理时，`fire()`方法内的代码将运行。我们还可以在调用`Queue::push()`方法时将参数作为第二个参数传递给`job`。
- en: With the help of Eloquent ORM, we have obtained all the subscriber methods from
    the database using the `all()` method, then with a `foreach` loop, we looped through
    all the records.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 借助Eloquent ORM，我们使用`all()`方法从数据库中获取了所有订阅者方法，然后使用`foreach`循环遍历了所有记录。
- en: After `job` is processed successfully, at the bottom, we use the `delete()`
    method so the job won't be started again on the next queue call.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功处理`job`之后，底部使用`delete()`方法，以便下一次队列调用时不会再次启动`job`。
- en: Before digging into the code further, we must learn the basics of Laravel 4's
    new feature, **Email class**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步深入代码之前，我们必须了解Laravel 4的新功能**Email类**的基础知识。
- en: Using the Email class to process e-mails inside the queue
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Email类在队列内处理电子邮件
- en: 'Before proceeding further, we need to make sure that our e-mail credentials
    are correct and we have set all the values correctly. Open the `mail.php` file
    in the `app/config/` directory, and fill the settings according to your configuration:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步进行之前，我们需要确保我们的电子邮件凭据是正确的，并且我们已经正确设置了所有值。打开`app/config/`目录中的`mail.php`文件，并根据您的配置填写设置：
- en: The parameter driver sets which e-mail driver is to be used; `mail`, `sendmail`,
    and `smtp` are the default mail-sending parameters.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数驱动程序设置要使用的电子邮件驱动程序；`mail`、`sendmail`和`smtp`是默认的邮件发送参数。
- en: If you are using `smtp`, you will need to fill the `host`, `port`, `encryption`,
    `username`, and `password` fields according to your provider.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在使用`smtp`，您需要根据您的提供商填写`host`、`port`、`encryption`、`username`和`password`字段。
- en: You can also set a default from-address with the field `from`, so you won't
    have to type the same address over and over again.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以使用字段`from`设置默认的发件人地址，这样您就不必一遍又一遍地输入相同的地址。
- en: If you're using `sendmail` as the mail-sending driver, you should make sure
    its path in the parameter `sendmail` is correct. Otherwise, the e-mails won't
    be sent.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在使用`sendmail`作为邮件发送驱动程序，您应该确保参数`sendmail`中的路径是正确的。否则，邮件将无法发送。
- en: If you're still testing your application, or you are in a live environment and
    want to test your updates without the risk of sending the wrong/unfinished e-mails,
    you should set `pretend` to `true`, so instead of actually sending the e-mails,
    it will keep them on the logfiles for you to debug.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您仍在测试应用程序，或者您处于实时环境并希望测试更新而不会发送错误/未完成的电子邮件，您应该将`pretend`设置为`true`，这样它不会实际发送电子邮件，而是将它们保留在日志文件中供您调试。
- en: While we were looping through all the records, we used Laravel's new e-mail
    sender, the `Mail` class, which is based on the popular component, `Swiftmailer`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们遍历所有记录时，我们使用了Laravel的新电子邮件发送器`Mail`类，它基于流行的组件`Swiftmailer`。
- en: 'The `Mail::send()` method takes three major parameters:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mail::send()`方法有三个主要参数：'
- en: The first parameter is the path of the e-mail template file in which the e-mail
    will be wrapped
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是电子邮件模板文件的路径，电子邮件将在其中包装
- en: The second parameter is the variable that will be sent to the view
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是将发送到视图的变量
- en: The third parameter is a closure function, where we can set the titles `from`,
    `to`, `CC/BCC`, and `attachments`
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个参数是一个闭包函数，我们可以在其中设置标题`from`、`to`、`CC/BCC`和`attachments`
- en: Additionally, you can also use the method `attach()` to add attachments to the
    e-mail
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用`attach()`方法向电子邮件添加附件
- en: Testing the system
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试系统
- en: 'After we set the queue system and the `email` class, we are ready to test the
    code we''ve written:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 设置队列系统和`email`类之后，我们准备测试我们编写的代码：
- en: First, make sure there are some valid e-mail addresses in the database.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，确保数据库中有一些有效的电子邮件地址。
- en: Now navigate through your browser and type [http://your-site-url/queue/process](http://your-site-url/queue/process).
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过浏览器导航并输入[http://your-site-url/queue/process](http://your-site-url/queue/process)。
- en: 'When you see the message `Queue Processed`, this means the queue was sent to
    our queue driver successfully. I want to describe what''s happening here, step
    by step:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您看到消息“队列已处理”时，这意味着队列已成功发送到我们的队列驱动程序。我想逐步描述这里发生的事情：
- en: First, we ping our queue driver containing `Queue::push()` with the parameters
    and additional data that we need to queue
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们使用包含`Queue::push()`的队列驱动程序进行ping，并传递我们需要排队的参数和附加数据
- en: Then, after the queue driver gets our response, it will make a post request
    to our post route `queue`/`push`, which we had set up with the `queue:subscribe`
    artisan command earlier
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，在队列驱动程序获取我们的响应后，它将向我们之前使用`queue:subscribe`artisan命令设置的`queue`/`push`的post路由发出post请求
- en: When the `push` request is received from the queue driver by our script, it
    marshals and triggers the queued event
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们的脚本从队列驱动程序接收到`push`请求时，它将调度并触发排队事件
- en: After it's triggered, the method `fire()` that is inside the class runs and
    does the job that we assigned to it
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发后，类中的`fire()`方法将运行并执行我们分配给它的任务
- en: After a while, if everything went okay, you will start to receive those e-mails
    in your inbox(es).
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过一段时间，如果一切顺利，您将开始在收件箱中收到这些电子邮件。
- en: Sending e-mails with the queue directly
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接使用队列发送电子邮件
- en: In some e-mail-sending cases, especially if we are using a third-party SMTP
    and if we are sending user registration, validation e-mails, and so on, queue
    calling may not be the best solution, but it would be great if we could queue
    it directly while sending the e-mails. Laravel's `Email` class also handles this.
    Instead of using `Mail::send()`, if we use `Mail::queue()` with the same parameters,
    the e-mail sending will be done with the help of the queue driver, and the response
    times for the end-user will be faster.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些发送电子邮件的情况下，特别是如果我们正在使用第三方SMTP，并且正在发送用户注册、验证电子邮件等，队列调用可能不是最佳解决方案，但如果我们可以在发送电子邮件时直接将其排队，那将是很好的。Laravel的`Email`类也可以处理这个问题。如果我们使用相同的参数使用`Mail::queue()`而不是`Mail::send()`，则电子邮件发送将借助队列驱动程序完成，并且最终用户的响应时间将更快。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we've created a simple newsletter subscription form
    using Laravel's `Form Builder` class using jQuery's Ajax post methods. We've validated
    and processed the form and saved the data into the database. We've also learned
    how to queue long processes easily with Laravel's `queue` class using a third-party
    queue driver. We've also covered the basics of e-mail sending with Laravel 4.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Laravel的`Form Builder`类和jQuery的Ajax提交方法创建了一个简单的新闻订阅表单。我们对表单进行了验证和处理，并将数据保存到数据库中。我们还学习了如何使用Laravel
    4的`queue`类轻松排队长时间的处理过程。我们还介绍了使用Laravel 4进行电子邮件发送的基础知识。
- en: In the next chapter, we will be writing a **Q&A** site, which will have a pagination
    system, a tag system, a third-party authentication library, a question and answer
    voting system, options to choose the best answer, and a search system for questions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将编写一个**问答**网站，该网站将具有分页系统、标签系统、第三方身份验证库、问题和答案投票系统、选择最佳答案的选项以及问题的搜索系统。
