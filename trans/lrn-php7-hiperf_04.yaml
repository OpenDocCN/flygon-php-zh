- en: Chapter 4. Improving Database Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。提高数据库性能
- en: 'Databases play a key role in dynamic websites. All incoming and outgoing data
    is stored in a database. So, if the database for a PHP application is not well
    designed and optimized, it will effect the application''s performance tremendously.
    In this chapter, we will look into the ways of optimizing our PHP application''s
    database. The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库在动态网站中扮演着关键角色。所有进出数据都存储在数据库中。因此，如果PHP应用程序的数据库设计和优化不好，将会极大地影响应用程序的性能。在本章中，我们将探讨优化PHP应用程序数据库的方法。本章将涵盖以下主题：
- en: MySQL
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL
- en: Query caching
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询缓存
- en: The MyISAM and InnoDB storage engines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyISAM和InnoDB存储引擎
- en: The Percona DB and Percona XtraDB storage engines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Percona DB和Percona XtraDB存储引擎
- en: MySQL performance monitoring tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL性能监控工具
- en: Redis
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis
- en: Memcached
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存缓存
- en: The MySQL database
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL数据库
- en: MySQL is the most commonly used **Relational Database Management System** (**RDMS**)
    for the Web. It is open source and has a free community version. It provides all
    those features that can be provided by an enterprise-level database.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL是Web上最常用的关系型数据库管理系统（RDMS）。它是开源的，有免费的社区版本。它提供了企业级数据库可以提供的所有功能。
- en: The default settings provided with the MySQL installation may not be so good
    for performance, and there are always ways to fine-tune these settings to get
    an improved performance. Also, remember that your database design plays a big
    role in performance. A poorly designed database will have an effect on the overall
    performance.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL安装提供的默认设置可能对性能不太好，总是有方法可以微调这些设置以获得更好的性能。另外，记住你的数据库设计在性能方面起着重要作用。设计不良的数据库会影响整体性能。
- en: In this section, we will discuss how to improve the MySQL database's performance.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何提高MySQL数据库的性能。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will modify the MySQL configuration's `my.cnf` file. This file is located
    in different places in different operating systems. Also, if you are using XAMPP,
    WAMP, or any other cross-platform web server solution stack package on Windows,
    this file will be located in the respective folder. Whenever `my.cnf` is mentioned,
    it is assumed that the file is open no matter which OS is used.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改MySQL配置的`my.cnf`文件。这个文件在不同的操作系统中位于不同的位置。另外，如果您在Windows上使用XAMPP、WAMP或任何其他跨平台Web服务器解决方案堆栈包，这个文件将位于相应的文件夹中。无论使用哪个操作系统，只要提到`my.cnf`，就假定文件是打开的。
- en: Query caching
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询缓存
- en: Query caching is an important performance feature of MySQL. It caches `SELECT`
    queries along with the resulting dataset. When an identical `SELECT` query occurs,
    MySQL fetches the data from memory so that the query is executed faster and thus
    reduces the load on the database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查询缓存是MySQL的一个重要性能特性。它缓存`SELECT`查询以及结果数据集。当出现相同的`SELECT`查询时，MySQL会从内存中获取数据，以便查询执行得更快，从而减少数据库的负载。
- en: 'To check whether query cache is enabled on a MySQL server or not, issue the
    following command in your MySQL command line:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查MySQL服务器上是否启用了查询缓存，请在MySQL命令行中输入以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will display the following output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将显示以下输出：
- en: '![Query caching](graphics/B05225_04_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![查询缓存](graphics/B05225_04_01.jpg)'
- en: The previous result set shows that query cache is enabled. If query cache is
    disabled, the value will be `NO`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个结果集显示查询缓存已启用。如果查询缓存被禁用，值将为“NO”。
- en: 'To enable query caching, open up the `my.cnf` file and add the following lines.
    If these lines are there and are commented, just uncomment them:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用查询缓存，打开`my.cnf`文件并添加以下行。如果这些行已经存在并被注释掉了，就取消注释：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Save the `my.cnf` file and restart the MySQL server. Let''s discuss what the
    preceding three configurations mean:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 保存`my.cnf`文件并重新启动MySQL服务器。让我们讨论一下前面三个配置的含义：
- en: '`query_cache_type`: This plays a little confusing role.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_cache_type`：这起着一种令人困惑的作用。'
- en: If `query_cache_type` is set to `1` and `query_cache_size` is 0, then no memory
    is allocated, and query cache is disabled.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`query_cache_type`设置为`1`，`query_cache_size`为0，则不分配内存，查询缓存被禁用。
- en: If `query_cache_size` is greater than 0, then query cache is enabled, memory
    is allocated, and all queries that do not exceed the `query_cache_limit` value
    or use the `SQL_NO_CACHE` option are cached.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`query_cache_size`大于0，则查询缓存已启用，分配了内存，并且所有不超过`query_cache_limit`值或使用`SQL_NO_CACHE`选项的查询都被缓存。
- en: If the `query_cache_type` value is 0 and `query_cache_size` is `0`, then no
    memory is allocated, and cache is disabled.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`query_cache_type`的值为0，`query_cache_size`为`0`，则不分配内存，缓存被禁用。
- en: If `query_cache_size` is greater than 0, then memory is allocated, but nothing
    is cached—that is, cache is disabled.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`query_cache_size`大于0，则分配了内存，但没有缓存——即缓存被禁用。
- en: '`query_cache_size`: `query_cache_size`: This indicates how much memory will
    be allocated. Some think that the more memory is used, the better it will be,
    but this is just a misunderstanding. It all depends on the database size, query
    types and ratios between read and writes, hardware, database traffic, and other
    factors. A good value for `query_cache_size` is between 100 MB and 200 MB; then,
    you can monitor the performance and other variables on which query cache depends,
    as mentioned, and adjust the size. We have used 128MB for a medium traffic Magento
    website and it is working perfectly. Set this value to `0` to disable query cache.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_cache_size`：`query_cache_size`：这表示将分配多少内存。有些人认为使用的内存越多，效果就越好，但这是一个误解。这完全取决于数据库大小、查询类型和读写比例、硬件、数据库流量和其他因素。`query_cache_size`的一个好值在100MB到200MB之间；然后，您可以监视性能和其他影响查询缓存的变量，并调整大小。我们在一个中等流量的Magento网站上使用了128MB，效果非常好。将此值设置为`0`以禁用查询缓存。'
- en: '`query_cache_limit`: This defines the maximum size of a query dataset to be
    cached. If a query dataset''s size is larger than this value, it isn''t cached.
    The value of this configuration can be guessed by finding out the largest `SELECT`
    query and the size of its returned dataset.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_cache_limit`：这定义了要缓存的查询数据集的最大大小。如果查询数据集的大小大于此值，则不会被缓存。可以通过找出最大的`SELECT`查询和其返回数据集的大小来猜测此配置的值。'
- en: Storage engines
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储引擎
- en: Storage engines (or table types) are a part of core MySQL and are responsible
    for handling operations on tables. MySQL provides several storage engines, and
    the two most widely used are MyISAM and InnoDB. Both these storage engines have
    their own pros and cons, but InnoDB is always prioritized. MySQL started using
    InnoDB as the default storage engine, starting from 5.5.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 存储引擎（或表类型）是MySQL核心的一部分，负责处理表上的操作。MySQL提供了几种存储引擎，其中最常用的是MyISAM和InnoDB。这两种存储引擎都有各自的优缺点，但总是优先考虑InnoDB。从5.5开始，MySQL开始使用InnoDB作为默认存储引擎。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: MySQL provides some other storage engines that have their own purposes. During
    the database design process, which table should use which storage engine can be
    decided. A complete list of storage engines for MySQL 5.6 can be found at [http://dev.mysql.com/doc/refman/5.6/en/storage-engines.html](http://dev.mysql.com/doc/refman/5.6/en/storage-engines.html).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL提供了一些其他具有自己目的的存储引擎。在数据库设计过程中，可以决定哪个表应该使用哪种存储引擎。MySQL 5.6的存储引擎的完整列表可以在[http://dev.mysql.com/doc/refman/5.6/en/storage-engines.html](http://dev.mysql.com/doc/refman/5.6/en/storage-engines.html)找到。
- en: 'A storage engine can be set at database level, which is then used as the default
    storage engine for each newly created table. Note that the storage engine is the
    table''s base, and different tables can have different storage engines in a single
    database. What if we have a table already created and want to change its storage
    engine? It is easy. Let''s say that our table name is `pkt_users`, its storage
    engine is MyISAM, and we want to change it to InnoDB; we will use the following
    MySQL command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在数据库级别设置存储引擎，然后将其用作每个新创建的表的默认存储引擎。请注意，存储引擎是表的基础，单个数据库中的不同表可以具有不同的存储引擎。如果已经创建了一个表并且想要更改其存储引擎怎么办？很容易。假设我们的表名是`pkt_users`，其存储引擎是MyISAM，我们想将其更改为InnoDB；我们将使用以下MySQL命令：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will change the storage engine value of the table to `INNODB`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把表的存储引擎值更改为`INNODB`。
- en: 'Now, let''s discuss the difference between the two most widely used storage
    engines: MyISAM and InnoDB.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论两种最常用的存储引擎MyISAM和InnoDB之间的区别。
- en: The MyISAM storage engine
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MyISAM存储引擎
- en: 'A brief list of features that are or are not supported by MyISAM is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是MyISAM支持或不支持的功能的简要列表：
- en: MyISAM is designed for speed, which plays best with the `SELECT` statement.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyISAM旨在提高速度，最适合与`SELECT`语句一起使用。
- en: If a table is more static—that is, the data in this table is less frequently
    updated/deleted and mostly only fetched—then MyISAM is the best option for this
    table.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果表更加静态，即该表中的数据更新/删除较少，大部分情况下只是获取数据，那么MyISAM是该表的最佳选项。
- en: MyISAM supports table-level locking. If a specific operation needs to be performed
    on the data in a table, then the complete table can be locked. During this lock,
    no operations can be performed on this table. This can cause performance degradation
    if the table is more dynamic—that is, if the data is frequently changed in this
    table.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyISAM支持表级锁定。如果需要对表中的数据执行特定操作，那么可以锁定整个表。在此锁定期间，无法对该表执行任何操作。如果表更加动态，即该表中的数据经常更改，这可能会导致性能下降。
- en: MyISAM does not have support for foreign keys.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyISAM不支持外键。
- en: MyISAM supports full-text search.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyISAM支持全文搜索。
- en: MyISAM does not support transactions. So, there is no support for `COMMIT` and
    `ROLLBACK`. If a query on a table is executed, it is executed, and there is no
    coming back.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyISAM不支持事务。因此，不支持`COMMIT`和`ROLLBACK`。如果对表执行查询，则执行查询，没有回头的余地。
- en: Data compression, replication, query caching, and data encryption is supported.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持数据压缩、复制、查询缓存和数据加密。
- en: The cluster database is not supported.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持集群数据库。
- en: The InnoDB storage engine
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InnoDB存储引擎
- en: 'A brief list of features that are or are not supported by InnoDB is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是InnoDB支持或不支持的功能的简要列表：
- en: InnoDB is designed for high reliability and high performance when processing
    a high volume of data.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InnoDB旨在在处理大量数据时具有高可靠性和高性能。
- en: InnoDB supports row-level locking. It is a good feature and is great for performance.
    Instead of locking the complete table as with MyISAM, it locks only the specific
    row for the `SELECT`, `DELETE`, or `UPDATE` operations, and during these operations,
    other data in this table can be manipulated.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InnoDB支持行级锁定。这是一个很好的特性，对性能非常有利。与MyISAM锁定整个表不同，它仅锁定`SELECT`、`DELETE`或`UPDATE`操作的特定行，在这些操作期间，该表中的其他数据可以被操作。
- en: InnoDB supports foreign keys and forcing foreign keys constraints.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InnoDB支持外键并强制外键约束。
- en: Transactions are supported. COMMIT and ROLLBACK are possible, so data can be
    recovered from a specific transaction.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持事务。可以进行COMMIT和ROLLBACK，因此可以从特定事务中恢复数据。
- en: Data compression, replication, query caching, and data encryption is supported.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持数据压缩、复制、查询缓存和数据加密。
- en: InnoDB can be used in a cluster environment, but it does not have full support.
    However, InnoDB tables can be converted to the NDB storage engine, which is used
    in the MySQL cluster by changing the table engine to NDB.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InnoDB可以在集群环境中使用，但它并没有完全支持。然而，InnoDB表可以通过将表引擎更改为NDB来转换为MySQL集群中使用的NDB存储引擎。
- en: In the following sections, we will discuss some more performance features that
    are related to InnoDB. Values for the following configuration are set in the `my.cnf`
    file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论与InnoDB相关的一些性能特性。以下配置的值在`my.cnf`文件中设置。
- en: innodb_buffer_pool_size
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: innodb_buffer_pool_size
- en: This setting defines how much memory should be used for InnoDB data and the
    indices loaded into memory. For a dedicated MySQL server, the recommended value
    is 50-80% of the installed memory on the server. If this value is set too high,
    there will be no memory left for the operating system and other subsystems of
    MySQL, such as transaction logs. So, let's open our `my.cnf` file, search for
    `innodb_buffer_pool_size`, and set the value between the recommended value (that
    is, 50-80%) of our RAM.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置定义了用于InnoDB数据和加载到内存中的索引的内存量。对于专用的MySQL服务器，推荐值是服务器上安装内存的50-80%。如果此值设置得太高，操作系统和MySQL的其他子系统，如事务日志，将没有内存。因此，让我们打开我们的`my.cnf`文件，搜索`innodb_buffer_pool_size`，并将值设置在推荐值（即RAM的50-80%）之间。
- en: innodb_buffer_pool_instances
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: innodb_buffer_pool_instances
- en: This feature is not that widely used. It enables multiple buffer pool instances
    to work together to reduce the chances of memory contentions on a 64-bit system
    and with a large value for `innodb_buffer_pool_size`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特性并不是那么广泛使用。它使多个缓冲池实例能够共同工作，以减少64位系统和`innodb_buffer_pool_size`较大值的内存争用的机会。
- en: There are different choices on which the value for `innodb_buffer_pool_instances`
    are calculated. One way is to use one instance per GB of `innodb_buffer_pool_size`.
    So, if the value of `innodb_bufer_pool_size` is 16 GB, we will set `innodb_buffer_pool_instances`
    to 16.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的选择来计算`innodb_buffer_pool_instances`的值。一种方法是每GB的`innodb_buffer_pool_size`使用一个实例。因此，如果`innodb_bufer_pool_size`的值为16GB，我们将把`innodb_buffer_pool_instances`设置为16。
- en: innodb_log_file_size
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: innodb_log_file_size
- en: The `innodb_log_file_size` is the the size of the log file that stores every
    query information executed. For a dedicated server, a value up to 4 GB is safe,
    but the time taken for crash recovery may increase if the log file's size is too
    large. So, in best practice, it is kept in between 1 and 4 GB.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`innodb_log_file_size`是存储执行的每个查询信息的日志文件的大小。对于专用服务器，最多可以设置为4GB，但如果日志文件太大，崩溃恢复所需的时间可能会增加。因此，在最佳实践中，它保持在1到4GB之间。'
- en: The Percona Server - a fork of MySQL
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Percona Server - MySQL的一个分支
- en: According to the Percona website, Percona is a free, fully compatible, enhanced,
    open source, and drop-in replacement for MySQL that provides superior performance,
    scalability, and instrumentation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Percona网站的说法，Percona是一个免费、完全兼容、增强、开源的MySQL替代品，提供卓越的性能、可伸缩性和工具。
- en: Percona is a fork of MySQL with enhanced features for performance. All the features
    available in MySQL are available in Percona. Percona uses an enhanced storage
    engine called XtraDB. According to the Percona website, it is an enhanced version
    of the InnoDB storage engine for MySQL that has more features, faster performance,
    and better scalability on modern hardware. Percona XtraDB uses memory more efficiently
    in high-load environments.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Percona是一个具有增强性能功能的MySQL分支。MySQL中可用的所有功能在Percona中也是可用的。Percona使用一个名为XtraDB的增强存储引擎。根据Percona网站的说法，这是MySQL的InnoDB存储引擎的增强版本，具有更多功能，在现代硬件上具有更快的性能和更好的可伸缩性。Percona
    XtraDB在高负载环境中更有效地使用内存。
- en: As mentioned earlier, XtraDB is a fork of InnoDB, so all the features available
    in InnoDB are available in XtraDB.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，XtraDB是InnoDB的一个分支，因此InnoDB中可用的所有功能在XtraDB中也是可用的。
- en: Installing the Percona Server
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Percona Server
- en: Percona is only available for Linux systems. It is not available for Windows
    as of now. In this book, we will install Percona Server on Debian 8\. The process
    is same for both Ubuntu and Debian.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Percona目前仅适用于Linux系统。目前不支持Windows。在本书中，我们将在Debian 8上安装Percona Server。对于Ubuntu和Debian，安装过程是相同的。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To install the Percona Server on other Linux flavors, check out the Percona
    installation manual at [https://www.percona.com/doc/percona-server/5.5/installation.html](https://www.percona.com/doc/percona-server/5.5/installation.html).
    As of now, they provide instructions for Debian, Ubuntu, CentOS, and RHEL. They
    also provide instructions to install the Percona Server from sources and Git.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要在其他Linux版本上安装Percona Server，请查看Percona安装手册[https://www.percona.com/doc/percona-server/5.5/installation.html](https://www.percona.com/doc/percona-server/5.5/installation.html)。目前，他们提供了Debian、Ubuntu、CentOS和RHEL的安装说明。他们还提供了从源代码和Git安装Percona
    Server的说明。
- en: 'Now, let''s install the Percona Server through the following steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过以下步骤安装Percona Server：
- en: 'Open your sources list file using the following command in your terminal:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用终端中的以下命令打开您的源列表文件：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If prompted for a password, enter your Debian password. The file will be opened.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提示输入密码，请输入您的Debian密码。文件将被打开。
- en: 'Now, place the following repository information at the end of the `sources.list`
    file:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将以下存储库信息放在`sources.list`文件的末尾：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file by pressing *CTRL* + *O* and close the file by pressing *CTRL*
    + *X*.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*CTRL* + *O*保存文件，按下*CTRL* + *X*关闭文件。
- en: 'Update your system using the following command in the terminal:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用终端中的以下命令更新系统：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Start the installation by issuing the following command in the terminal:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中发出以下命令开始安装：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The installation will be started. The process is the same as the MySQL server
    installation. During the installation, the root password for the Percona Server
    will be asked; you just need to enter it. When the installation is complete, you
    will be ready to use the Percona Server in the same way as MySQL.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装将开始。该过程与安装MySQL服务器的过程相同。在安装过程中，将要求输入Percona Server的root密码；您只需输入即可。安装完成后，您将可以像使用MySQL一样使用Percona
    Server。
- en: Configure the Percona Server and optimize it as discussed in the earlier sections.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据之前的章节配置和优化Percona Server。
- en: MySQL performance monitoring tools
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL性能监控工具
- en: There is always a need to monitor the performance of database servers. For this
    purpose, there are many tools available that make it easy to monitor MySQL servers
    and performance. Most of them are open source and free, and some provide a GUI.
    The command-line tools are more powerful and the best to use, though it takes
    a little time to understand and get used to them. We will discuss a few here.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '始终需要监视数据库服务器的性能。为此，有许多可用的工具，使监视MySQL服务器和性能变得容易。其中大多数是开源和免费的，并且一些提供了图形界面。命令行工具更加强大，是最好的选择，尽管需要一点时间来理解和习惯它们。我们将在这里讨论一些。 '
- en: phpMyAdmin
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: phpMyAdmin
- en: 'This is the most famous, web-based, open source, and free tool available to
    manage MySQL databases. Despite managing a MySQL server, it also provides some
    good tools to monitor a MySQL server. If we log in to phpMyAdmin and then click
    on the **Status** tab at the top, we will see the following screen:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最著名的基于Web的开源免费工具，用于管理MySQL数据库。除了管理MySQL服务器外，它还提供了一些很好的工具来监视MySQL服务器。如果我们登录到phpMyAdmin，然后点击顶部的**状态**选项卡，我们将看到以下屏幕：
- en: '![phpMyAdmin](graphics/B05225_04_02.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![phpMyAdmin](graphics/B05225_04_02.jpg)'
- en: The **Server** tab shows us basic data about the MySQL server, such as when
    it started, how much traffic is handled from the last start, information about
    connections, and so on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器**选项卡向我们显示了关于MySQL服务器的基本数据，例如启动时间，自上次启动以来处理的流量量，连接信息等。'
- en: The next is **Query Statistics**. This section provides full stats about all
    of the queries executed. It also provides a pie chart, which visualizes the percentage
    of each query type, as shown in the following screenshot.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是**查询统计**。这部分提供了关于所有执行的查询的完整统计信息。它还提供了一个饼图，可视化显示每种查询类型的百分比，如下面的截图所示。
- en: If we carefully look at the chart, we can see that we have 54% of the `SELECT`
    queries running. If we use some kind of cache, such as Memcached or Redis, these
    `SELECT` queries should not be this high. So, this graph and statistics information
    provides us with a mean to analyze our cache systems.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仔细观察图表，我们会发现我们有54%的`SELECT`查询正在运行。如果我们使用某种缓存，比如Memcached或Redis，这些`SELECT`查询不应该这么高。因此，这个图表和统计信息为我们提供了分析我们的缓存系统的手段。
- en: '![phpMyAdmin](graphics/B05225_04_03.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![phpMyAdmin](graphics/B05225_04_03.jpg)'
- en: 'The next option is **All Status Variables**, which lists all of the MySQL variables
    and their current values. In this list, one can easily find out how MySQL is configured.
    In the following screenshot, our query cache variables and their values are shown:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个选项是**所有状态变量**，列出了所有MySQL变量及其当前值。在这个列表中，可以很容易地找出MySQL的配置情况。在下面的截图中，显示了我们的查询缓存变量及其值：
- en: '![phpMyAdmin](graphics/B05225_04_04.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![phpMyAdmin](graphics/B05225_04_04.jpg)'
- en: The next option that phpMyAdmin provides is **Monitor**. This is a very powerful
    tool that displays the server resources and their usages in real time in a graphical
    way.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: phpMyAdmin提供的下一个选项是**监视器**。这是一个非常强大的工具，以图形方式实时显示服务器资源及其使用情况。
- en: '![phpMyAdmin](graphics/B05225_04_05.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![phpMyAdmin](graphics/B05225_04_05.jpg)'
- en: As shown in the preceding screenshot, we can see **Questions**, **Connections/Processes**,
    **System CPU Usage**, **Traffic**, **System Memory**, and **System swap** in a
    nice graphical interface.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，我们可以在一个漂亮的图形界面中看到**问题**、**连接/进程**、**系统CPU使用率**、**流量**、**系统内存**和**系统交换**。
- en: 'The last important section is **Advisor**. This gives us advice regarding the
    settings for performance. It gives you as many details as possible so that the
    MySQL server can be tuned for performance. A small section from the advisor section
    is shown in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重要部分是**顾问**。它为我们提供有关性能设置的建议。它尽可能多地为您提供细节，以便调整MySQL服务器以提高性能。以下截图显示了顾问部分的一个小节：
- en: '![phpMyAdmin](graphics/B05225_04_06.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![phpMyAdmin](graphics/B05225_04_06.jpg)'
- en: If all these advices are applied, some performance can be gained.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用了所有这些建议，就可以获得一些性能提升。
- en: The MySQL workbench
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL工作台
- en: 'This is a desktop application from MySQL and is fully equipped with tools to
    manage and monitor the MySQL server. It provides us with a dashboard for performance
    in which all the data related to the server can be seen in a beautiful and graphical
    way, as shown in the screenshot that follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是MySQL的桌面应用程序，配备了管理和监控MySQL服务器的工具。它为我们提供了一个性能仪表板，可以以美观和图形的方式查看与服务器相关的所有数据，如下面的截图所示：
- en: '![The MySQL workbench](graphics/B05225_04_07.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![The MySQL workbench](graphics/B05225_04_07.jpg)'
- en: Percona Toolkit
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Percona Toolkit
- en: All the tools mentioned before are good and provide some visual information
    about our database server. However, they are not good enough to show us some more
    useful information or provide more features that can make our lives easy. For
    this purpose, another command-line toolkit is available, which is called Percona
    Toolkit.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的所有工具都很好，并提供了一些关于我们数据库服务器的可视化信息。然而，它们还不足以向我们显示一些更有用的信息或提供更多可以简化我们生活的功能。为此，还有另一个命令行工具包可用，名为Percona
    Toolkit。
- en: Percona Toolkit is a set of more than 30 command-line tools, which includes
    those used to do an analysis of slow queries, archive, optimize indices and many
    more.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Percona Toolkit是一套包括用于分析慢查询、存档、优化索引等的30多个命令行工具。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Percona Toolkit is free and open source and is available under GPL. Most of
    its tools run on Linux/Unix-based systems, but some can run on Windows too. An
    installation guide can be found at [https://www.percona.com/doc/percona-toolkit/2.2/installation.html](https://www.percona.com/doc/percona-toolkit/2.2/installation.html).
    A complete set of tools can be found at [https://www.percona.com/doc/percona-toolkit/2.2/index.html](https://www.percona.com/doc/percona-toolkit/2.2/index.html).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Percona Toolkit是免费开源的，可在GPL下使用。它的大多数工具在Linux/Unix系统上运行，但也有一些可以在Windows上运行。安装指南可以在[https://www.percona.com/doc/percona-toolkit/2.2/installation.html](https://www.percona.com/doc/percona-toolkit/2.2/installation.html)找到。完整的工具集可以在[https://www.percona.com/doc/percona-toolkit/2.2/index.html](https://www.percona.com/doc/percona-toolkit/2.2/index.html)找到。
- en: Now, let's discuss a few tools in the subsections to follow.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在接下来的小节中讨论一些工具。
- en: pt-query-digest
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pt-query-digest
- en: 'This tool analyzes queries from slow, general, and binary log files. It generates
    a sophisticated report about the queries. Let''s run this tool for slow queries
    using the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具分析来自慢查询、一般查询和二进制日志文件的查询。它生成有关查询的复杂报告。让我们使用以下命令对慢查询运行此工具：
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After entering the preceding command in the terminal, we will see a long report.
    Here, we will discuss a short part of the report, as shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输入上述命令后，我们将看到一个很长的报告。在这里，我们将讨论报告的一小部分，如下屏幕截图所示：
- en: '![pt-query-digest](graphics/B05225_04_08.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![pt-query-digest](graphics/B05225_04_08.jpg)'
- en: In the preceding screenshot, slow queries are listed with the slowest at the
    top. The first query, which is a `SELECT` query, takes the most time, which is
    about 12% of the total time. The second query, which is also a `SELECT` query,
    takes 11.5% of the total time. From this report, we can see which queries are
    slow so that we can optimize them for the best performance.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，慢查询按最慢的顺序列出。第一个查询是一个“SELECT”查询，花费最长的时间，大约占总时间的12%。第二个查询也是一个“SELECT”查询，占总时间的11.5%。从这份报告中，我们可以看到哪些查询很慢，以便优化它们以获得最佳性能。
- en: 'Also, pt-query-digest displays information for each query, as shown in the
    following screenshot. In the screenshot, data about the first query is mentioned,
    including the total timing; percentage (pct) of time; min, max, and average time;
    bytes sent; and some other parameters:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，pt-query-digest显示每个查询的信息，如下屏幕截图所示。屏幕截图中提到了第一个查询的数据，包括总时间；时间百分比（pct）；最小、最大和平均时间；发送的字节数；以及其他一些参数：
- en: '![pt-query-digest](graphics/B05225_04_09.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![pt-query-digest](graphics/B05225_04_09.jpg)'
- en: pt-duplicate-key-checker
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pt-duplicate-key-checker
- en: 'This tool finds duplicate indices and duplicate foreign keys either in a set
    of specified tables or in a complete database. Let''s execute this tool again
    in a large database using the following command in the terminal:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具查找指定表集或完整数据库中的重复索引和重复外键。让我们在终端中使用以下命令再次执行此工具：
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When executed, the following output is printed:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，将打印以下输出：
- en: '![pt-duplicate-key-checker](graphics/B05225_04_10.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![pt-duplicate-key-checker](graphics/B05225_04_10.jpg)'
- en: 'At the end of the report, a summary of the indices is displayed, which is self-explanatory.
    Also, this tool prints out an `ALTER` query for each duplicate index that can
    be executed as a MySQL query to fix the index, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在报告末尾，显示了指标摘要，这是不言自明的。此工具还打印出每个重复索引的“ALTER”查询，可以作为MySQL查询执行以修复索引，如下所示：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This tool displays MySQL config information and advice for each query. This
    is a good tool that can help us set up MySQL configurations properly. We can execute
    this tool by running the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具显示每个查询的MySQL配置信息和建议。这是一个可以帮助我们正确设置MySQL配置的好工具。我们可以通过运行以下命令来执行此工具：
- en: '[PRE10]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After execution, the following output will be displayed:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，将显示以下输出：
- en: '![pt-duplicate-key-checker](graphics/B05225_04_11.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![pt-duplicate-key-checker](graphics/B05225_04_11.jpg)'
- en: There are many other tools provided by Percona Toolkit that are out of the scope
    of this book. However, the documentation at [https://www.percona.com/doc/percona-toolkit/2.2/index.html](https://www.percona.com/doc/percona-toolkit/2.2/index.html)
    is very helpful and easy to understand. It provides complete details for each
    tool, including its description and risks, how to execute it, and other options
    if there are any. This documentation is worth reading if you wish to understand
    any tool in Percona Toolkit.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Percona Toolkit还提供了许多其他工具，超出了本书的范围。但是，[https://www.percona.com/doc/percona-toolkit/2.2/index.html](https://www.percona.com/doc/percona-toolkit/2.2/index.html)上的文档非常有帮助且易于理解。它为每个工具提供了完整的详细信息，包括描述和风险，如何执行以及其他选项（如果有）。如果您希望了解Percona
    Toolkit中的任何工具，这份文档值得一读。
- en: Percona XtraDB Cluster (PXC)
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Percona XtraDB Cluster（PXC）
- en: Percona XtraDB Cluster provides a high-performance cluster environment that
    can help easily configure and manage a database on multiple servers. It enables
    databases to communicate with each other using the binary logs. The cluster environment
    helps divide the load among different database servers and provides safety from
    failure in case a server is down.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Percona XtraDB Cluster提供了一个高性能的集群环境，可以帮助轻松配置和管理多台服务器上的数据库。它使数据库可以使用二进制日志相互通信。集群环境有助于在不同的数据库服务器之间分担负载，并在服务器宕机时提供故障安全性。
- en: 'To set up the cluster, we need the following servers:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置集群，我们需要以下服务器：
- en: One server with IP 10.211.55.1, which we will call Node1
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台带有IP 10.211.55.1的服务器，我们将其称为Node1
- en: A second server with IP 10.211.55.2, which we will call Node2
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二台带有IP 10.211.55.2的服务器，我们将其称为Node2
- en: And a third server with IP 10.211.55.3, which we will call Node3
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三台带有IP 10.211.55.3的服务器，我们将其称为Node3
- en: 'As we already have the Percona repository in our sources, let''s start by installing
    and configuring Percona XtraDB Cluster, also called PXC. Perform the following
    steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在我们的资源中有Percona存储库，让我们开始安装和配置Percona XtraDB Cluster，也称为PXC。执行以下步骤：
- en: 'First, install Percona XtraDB Cluster on Node1 by issuing the following command
    in the terminal:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在终端中发出以下命令在Node1上安装Percona XtraDB Cluster：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The installation will start similarly to a normal Percona Server installation.
    During the installation, the password for a root user will be also asked.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 安装将类似于正常的Percona Server安装开始。在安装过程中，还将要求设置root用户的密码。
- en: 'When the installation is complete, we need to create a new user that has replication
    privileges. Issue the following commands in the MySQL terminal after logging in
    to it:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，我们需要创建一个具有复制权限的新用户。在登录到MySQL终端后，发出以下命令：
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first query creates a user with the username `sstpackt` and password `sstuserpassword`.
    The username and password can be anything, but a good and strong password is recommended.
    The second query sets proper privileges to our new user, including locking tables
    and replication. The third query refreshes the privileges.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个查询创建一个用户名为`sstpackt`，密码为`sstuserpassword`的用户。用户名和密码可以是任何内容，但建议使用一个好的和强大的密码。第二个查询为我们的新用户设置适当的权限，包括锁定表和复制。第三个查询刷新权限。
- en: 'Now, open the MySQL configuration file located at `/etc/mysql/my.cnf`. Then,
    place the following configuration in the `mysqld` block:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开位于`/etc/mysql/my.cnf`的MySQL配置文件。然后，在`mysqld`块中放置以下配置：
- en: '[PRE13]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file after adding the preceding configuration.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加上述配置后保存文件。
- en: 'Now, start the first node by issuing the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过发出以下命令启动第一个节点：
- en: '[PRE14]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will bootstrap the first node. Bootstrapping means getting the initial
    cluster up and running and defining which node has the correct information and
    which one all the other nodes should sync to. As Node1 is our initial cluster
    node and we created a new user here, we have to only bootstrap Node1.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引导第一个节点。引导意味着启动初始集群并定义哪个节点具有正确的信息，其他所有节点都应该同步到哪个节点。由于Node1是我们的初始集群节点，并且我们在这里创建了一个新用户，因此我们只需引导Node1。
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**SST** stands for **State Snapshot Transfer**. It is responsible for copying
    full data from one node to another. It is only used when a new node is added to
    the cluster and this node has to get complete initial data from an existing node.
    Three SST methods are available in `Percona XtraDB Cluster`, `mysqldump`, `rsync`,
    and `xtrabackup`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**SST**代表**State Snapshot Transfer**。它负责从一个节点复制完整数据到另一个节点。仅在向集群添加新节点并且此节点必须从现有节点获取完整的初始数据时使用。`Percona
    XtraDB Cluster`中有三种SST方法，`mysqldump`、`rsync`和`xtrabackup`。'
- en: 'Log in to the MySQL terminal on the first node and issue the following command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个节点上登录MySQL终端，并发出以下命令：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A very long list will be displayed. A few of them are shown in the following
    screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示一个非常长的列表。以下是其中的一些：
- en: '![Percona XtraDB Cluster (PXC)](graphics/B05225_04_12.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![Percona XtraDB Cluster (PXC)](graphics/B05225_04_12.jpg)'
- en: Now, repeat Step 1 and Step 3 for all nodes. The only configuration that needs
    to be changed for each node is `wsrep_node_address`, which should be the IP address
    of the node. Edit the `my.cnf` configuration file for all the nodes and place
    the node address in `wsrep_node_address`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对所有节点重复步骤1和步骤3。每个节点需要更改的唯一配置是`wsrep_node_address`，它应该是节点的IP地址。编辑所有节点的`my.cnf`配置文件，并将节点地址放在`wsrep_node_address`中。
- en: 'Start the two new nodes by issuing the following command in the terminal:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中发出以下命令来启动两个新节点：
- en: '[PRE16]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now each node can be verified by repeating step 7.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过重复步骤7来验证每个节点。
- en: To verify whether the cluster is working fine, create a database in one node
    and add some tables and data into the tables. After this, check other nodes for
    the newly created database, tables, and the data entered in each table. We will
    have all this data synced to each node.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证集群是否正常工作，请在一个节点中创建一个数据库，并向表中添加一些表和数据。之后，检查其他节点是否有新创建的数据库、表和每个表中输入的数据。我们将把所有这些数据同步到每个节点。
- en: Redis – the key-value cache store
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redis - 键值缓存存储
- en: Redis is an open source, in-memory key-value data store that is widely used
    for database caching. According to the Redis website ([www.Redis.io](http://www.Redis.io)),
    Redis supports data structures such as strings, hashes, lists, sets, and sorted
    lists. Also, Redis supports replication and transactions.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Redis是一个开源的内存键值数据存储，广泛用于数据库缓存。根据Redis网站（[www.Redis.io](http://www.Redis.io)）的说法，Redis支持诸如字符串、哈希、列表、集合和排序列表等数据结构。此外，Redis支持复制和事务。
- en: Note
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Redis installation instructions can be found at [http://redis.io/topics/quickstart](http://redis.io/topics/quickstart).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Redis安装说明可以在[http://redis.io/topics/quickstart](http://redis.io/topics/quickstart)找到。
- en: 'To check whether Redis is working fine on your server or not, start the Redis
    server instance by running the following command in the terminal:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查Redis在服务器上是否正常工作，请在终端中运行以下命令启动Redis服务器实例：
- en: '[PRE17]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then issue the following command in a different terminal window:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在不同的终端窗口中发出以下命令：
- en: '[PRE18]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If the output of the preceding command is as follows, the Redis server is ready
    to be run:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果上述命令的输出如下，则Redis服务器已准备就绪：
- en: '![Redis – the key-value cache store](graphics/B05225_04_13.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![Redis - 键值缓存存储](graphics/B05225_04_13.jpg)'
- en: Redis provides a command line, which provides some useful commands. There are
    two ways to execute commands on the Redis server. You can either use the previous
    method or just type `redis-cli` and hit *Enter*; we will be presented with the
    Redis command line, where we can then just type the Redis commands that will be
    executed.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Redis提供了一个命令行，其中提供了一些有用的命令。在Redis服务器上执行命令有两种方法。您可以使用以前的方法，也可以只输入`redis-cli`并按*Enter*；然后我们将看到Redis命令行，然后我们可以输入要执行的Redis命令。
- en: By default, Redis uses the IP 127.0.0.1 and port 6379\. Remote connections are
    not allowed, though remote connections can be enabled. Redis stores data that
    is already created in the database. Database names are integer numbers, such as
    0, 1, 2, and so on.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Redis使用IP 127.0.0.1和端口6379。虽然不允许远程连接，但可以启用远程连接。Redis存储已在数据库中创建的数据。数据库名称是整数，如0、1、2等。
- en: 'We won''t go in much detail about Redis here, but we will discuss a few commands
    that are worth noting. Note that all these commands can be either executed in
    the previous way, or we can just enter the `redis-cli` command window and type
    the commands without typing `redis-cli`. Also, the following commands can be executed
    directly in PHP, which makes it possible to clear out the cache directly from
    our PHP application:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这里详细讨论Redis，但我们将讨论一些值得注意的命令。请注意，所有这些命令都可以以前面的方式执行，或者我们可以只输入`redis-cli`命令窗口并输入命令，而不输入`redis-cli`。此外，以下命令可以直接在PHP中执行，这样就可以直接从我们的PHP应用程序中清除缓存：
- en: '`SELECT`: This command changes the current database. By default, redis-cli
    will be opened at database 0\. So, if we want to go to database 1, we will run
    the following command:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`选择`：此命令更改当前数据库。默认情况下，redis-cli将在数据库0打开。因此，如果我们想要转到数据库1，我们将运行以下命令：'
- en: '[PRE19]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`FLUSHDB`: This command flushes the current database. All keys or data from
    the current database will be deleted.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FLUSHDB`：此命令刷新当前数据库。当前数据库中的所有键或数据将被删除。'
- en: '`FLUSHALL`: This command flushes all the databases, no matter which database
    it is executed in.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FLUSHALL`：此命令刷新所有数据库，无论在哪个数据库中执行。'
- en: '`KEYS`: This command lists all the keys in the current database matching a
    pattern. The following command lists all the keys in the current database.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KEYS`：此命令列出与模式匹配的当前数据库中的所有键。以下命令列出当前数据库中的所有键。'
- en: '[PRE20]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, it's time for some action in PHP with Redis.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在PHP中与Redis进行一些操作了。
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As of writing this topic, PHP 7 does not have built-in support for Redis yet.
    For this book's purpose, we compiled the PHPRedis module for PHP 7, and it works
    very nicely. The module can be found at [https://github.com/phpredis/phpredis](https://github.com/phpredis/phpredis).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本主题时，PHP 7尚未内置对Redis的支持。为了本书的目的，我们为PHP 7编译了PHPRedis模块，并且它运行得非常好。该模块可以在[https://github.com/phpredis/phpredis](https://github.com/phpredis/phpredis)找到。
- en: Connecting with the Redis server
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与Redis服务器连接
- en: 'As mentioned before, by default, the Redis server runs on the IP 127.0.0.1
    and port 6379\. So, to make a connection, we will use these details. Take a look
    at the following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，默认情况下，Redis服务器在IP 127.0.0.1和端口6379上运行。因此，为了建立连接，我们将使用这些详细信息。请看以下代码：
- en: '[PRE21]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the first line, we instantiated a Redis object by the name of `redisObject`,
    which is then used in the second line to connect to the Redis server. The host
    is the local IP address 127.0.0.1, and the port is 6379\. The `connect()` method
    returns `TRUE` if the connection is successful; otherwise, it returns `FALSE`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行中，我们通过名称`redisObject`实例化了一个Redis对象，然后在第二行中使用它连接到Redis服务器。主机是本地IP地址127.0.0.1，端口是6379。`connect()`方法如果连接成功则返回`TRUE`；否则返回`FALSE`。
- en: Storing and fetching data from the Redis server
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Redis服务器存储和获取数据
- en: 'Now, we are connected to our Redis server. Let''s save some data in the Redis
    database. For our example, we want to store some string data in the Redis database.
    The code is as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已连接到我们的Redis服务器。让我们在Redis数据库中保存一些数据。例如，我们想要在Redis数据库中存储一些字符串数据。代码如下：
- en: '[PRE22]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `set` method stores data into the current Redis database and takes two
    arguments: a key and a value. A key can be any unique name, and a value is what
    we need to store. So, our key is `packt_title`, and the value is `Packt Publishing`.
    The default database is always set to 0 (zero) unless explicitly set otherwise.
    So, the preceding `set` method will save our data to database 0 with the `packt_title`
    key.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`set`方法将数据存储到当前Redis数据库，并接受两个参数：键和值。键可以是任何唯一名称，值是我们需要存储的内容。因此，我们的键是`packt_title`，值是`Packt
    Publishing`。除非显式设置，否则默认数据库始终设置为0（零）。因此，上述`set`方法将保存我们的数据到数据库0，并使用`packt_title`键。'
- en: Now, the `get` method is used to fetch data from the current database. It takes
    the key as the argument. So, the output of the preceding code will be our saved
    string data `Packt Publishing`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`get`方法用于从当前数据库中获取数据。它以键作为参数。因此，上述代码的输出将是我们保存的字符串数据`Packt Publishing`。
- en: 'Now, what about arrays or a set of data coming from the database? We can store
    them in several ways in Redis. Let''s first try the normal strings way, as shown
    here:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，来自数据库的数组或一组数据怎么办？我们可以以多种方式在Redis中存储它们。让我们首先尝试正常的字符串方式，如下所示：
- en: '[PRE23]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The output of the preceding code will be the same array. For testing purposes,
    we can comment out the `set` method and check whether the `get` method fetches
    the data or not. Remember that in the preceding code, we stored the array as a
    `json` string, then fetched it as a `json` string, and decoded it to the array.
    This is because we used the methods that are available for the string datatype,
    and it is not possible to store arrays in the string datatype.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将是相同的数组。为了测试目的，我们可以注释掉`set`方法，并检查`get`方法是否获取数据。请记住，在上述代码中，我们将数组存储为`json`字符串，然后将其作为`json`字符串获取，并解码为数组。这是因为我们使用了字符串数据类型可用的方法，不可能将数组存储在字符串数据类型中。
- en: Also, we used the `select` method to select another database and use it instead
    of 0\. This data will be stored in database 1 and can't be fetched if we are at
    database 0.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们使用`select`方法选择另一个数据库并在0之外使用它。这些数据将存储在数据库1中，如果我们在数据库0，则无法获取它们。
- en: Note
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A complete discussion of Redis is out of the scope of this book. So, we have
    provided an introduction. Note that if you use any framework, you have built-in
    libraries available for Redis that are easy to use, and any datatype can be used
    easily.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对Redis的完整讨论超出了本书的范围。因此，我们提供了一个简介。请注意，如果您使用任何框架，都可以轻松使用Redis提供的内置库，并且可以轻松使用任何数据类型。
- en: Redis management tools
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Redis管理工具
- en: 'Redis management tools provide an easy way to manage Redis databases. These
    tools provide features so that every key can be checked and a cache can be cleared
    easily. One default tool comes with Redis, called Redis-cli, and we discussed
    it earlier. Now, let''s discuss a visual tool that is great and easy to use, called
    **Redis Desktop Manage** (**RDM**). A screenshot of the main window of RDM looks
    like the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Redis管理工具提供了一种简单的方式来管理Redis数据库。这些工具提供了功能，以便可以轻松检查每个键并清除缓存。Redis自带一个默认工具，称为Redis-cli，我们之前已经讨论过。现在，让我们讨论一个视觉工具，非常好用，叫做**Redis
    Desktop Manage**（**RDM**）。RDM的主窗口的屏幕截图如下所示：
- en: '![Redis management tools](graphics/B05225_04_14.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![Redis管理工具](graphics/B05225_04_14.jpg)'
- en: 'RDM provides the following features:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: RDM提供以下功能：
- en: It connects to remote multiple Redis servers
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它连接到远程多个Redis服务器
- en: It displays data in a specific key in different formats
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以不同格式显示特定键中的数据
- en: It adds new keys to a selected database
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它向所选数据库添加新键
- en: It adds more data to a selected key
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它向选定的键添加更多数据
- en: It edits/deletes keys and their names
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它编辑/删除键和它们的名称
- en: It supports SSH and SSL and is cloud ready
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持SSH和SSL，并且可以在云中使用
- en: There are some other tools that can be used, but RDM and Redis-cli are the best
    and easiest to use.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他工具可以使用，但RDM和Redis-cli是最好和最容易使用的。
- en: Memcached key-value cache store
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Memcached键值缓存存储
- en: According to the Memcached official website, it's a free, open source, high
    performance, and distributed memory object caching system. Memcached is an in-memory
    key-value store that can store datasets from a database or API calls.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Memcached官方网站的说法，它是一个免费、开源、高性能、分布式内存对象缓存系统。Memcached是一个内存中的键值存储，可以存储来自数据库或API调用的数据集。
- en: Similarly to Redis, Memcached also helps a lot in speeding up a website. It
    stores the data (strings or objects) in the memory. This allows us to reduce the
    communication with outside resources, such as databases and or APIs.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 与Redis类似，Memcached也在加速网站方面有很大帮助。它将数据（字符串或对象）存储在内存中。这使我们能够减少与外部资源（如数据库或API）的通信。
- en: Note
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are assuming that Memcached is installed on the server. Also, the PHP extension
    for PHP 7 is also assumed to be installed.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设Memcached已经安装在服务器上。同时，也假设PHP 7的PHP扩展也已安装。
- en: 'Now, let''s play a little with Memcachd in PHP. Take a look at the following
    code:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在PHP中稍微玩一下Memcachd。看一下下面的代码：
- en: '[PRE24]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding code is a very simple example of using Memcached. The comments
    are written with each line of code and are self-explanatory. After instantiating
    a Memcached object, we have to add a Memcached server. By default, the Memcached
    server server runs on the localhost IP, which is 127.0.0.1, and on the port 11211\.
    After this, we checked for some data using a key, and if it is available, we can
    process it (in this case, we displayed it. It can be returned, or whatever processing
    is required can be carried out.). If the data is not available, we can just add
    it. Please note that the data can come from a remote server API or from the database.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码是一个非常简单的使用Memcached的例子。每行代码都有注释，很容易理解。在实例化一个Memcached对象之后，我们必须添加一个Memcached服务器。默认情况下，Memcached服务器在本地主机IP上运行，即127.0.0.1，端口号为11211。之后，我们使用一个键来检查一些数据，如果数据可用，我们可以处理它（在这种情况下，我们将其显示出来，也可以返回它，或者进行其他所需的处理）。如果数据不可用，我们可以直接添加它。请注意，数据可以来自远程服务器API或数据库。
- en: Note
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We have just provided an introduction to Memcached and how it can help us store
    data and improve performance. A complete discussion is not possible in this title.
    A good book on Memcached is *Getting Started with Memcached* by Packt Publishing.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚介绍了Memcached以及它如何帮助我们存储数据和提高性能。在本标题中无法进行完整的讨论。关于Memcached的一本好书是Packt Publishing出版的《Getting
    Started with Memcached》。
- en: Summary
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered MySQL and the Percona Server. Also, we discussed
    in detail query caching and other MySQL configuration options for performance
    in detail. We mentioned different storage engines, such as MyISAM, InnoDB, and
    Percona XtraDB. We also configured Percona XtraDB Cluster on three nodes. We discussed
    different monitoring tools, such as PhpMyAdmin monitoring tools, MySQL workbench
    performance monitoring, and Percona Toolkit. We also discussed Redis and Memcached
    caching for PHP and MySQL.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了MySQL和Percona Server。此外，我们详细讨论了查询缓存和其他MySQL性能配置选项。我们提到了不同的存储引擎，比如MyISAM、InnoDB和Percona
    XtraDB。我们还在三个节点上配置了Percona XtraDB集群。我们讨论了不同的监控工具，比如PhpMyAdmin监控工具、MySQL Workbench性能监控和Percona
    Toolkit。我们还讨论了Redis和Memcached对PHP和MySQL的缓存。
- en: In the next chapter, we will discuss benchmarking and different tools. We will
    use XDebug, Apache JMeter, ApacheBench, and Siege to benchmark different open
    source systems, such as WordPress, Magento, Drupal, and different versions of
    PHP, and compare their performance with PHP 7.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论基准测试和不同的工具。我们将使用XDebug、Apache JMeter、ApacheBench和Siege来对不同的开源系统进行基准测试，比如WordPress、Magento、Drupal以及不同版本的PHP，并将它们与PHP
    7的性能进行比较。
