["```php\n$validatedData = $request->validate([\n'field name' => 'validation rule, can be more than one',\n'field name' => 'validation rule',\n'field name' => 'validation rule',\n...\n]);\n```", "```php\n$validatedData = $request->validate([\n'make' => 'required',\n'model' => 'required',\n'year'=> 'required',\n'mods'=> 'required'\n]);\n```", "```php\n{\n    \"message\": \"The given data was invalid.\",\n    \"errors\": {\n    \"\": [\n    \"The field is required.\"\n    ]}\n}\n```", "```php\nuse Validator;\n```", "```php\n$validator = Validator::make($request->all(), [\n    'make' => 'required',\n    'model' => 'required',\n    'year'=> 'required',\n    'mods'=> 'required',\n    'builder_id' => 'required'\n]);\nif ($validator->fails()) {\n    return response()->json($validator->errors(), 422);\n}\n```", "```php\nuse Validator;\n```", "```php\n$validator = Validator::make($request->all(), \n    ['name' => 'required',\n    'description' => 'required',\n    'location'=> 'required'\n]);\nif ($validator->fails()) {\n    return response()->json($validator->errors(), 422);\n}\n```", "```php\nuse Validator;\n```", "```php\n$validator = Validator::make($request->all(), [\n    'type' => 'required',\n```", "```php\n\n    'name' => 'required',\n    'company'=> 'required',\n    'bike_id'=> 'required'\n]);\nif ($validator->fails()) {\n    return response()->json($validator->errors(), 422);\n}\n```", "```php\n// This will replace our 404 response from the MVC to a JSON response.\nif ($exception instanceof ModelNotFoundException\n    && $request->wantsJson() // Enable header Accept:\n     application/json to see the proper error msg\n) {\n    return response()->json(['error' => 'Resource not found'], 404);\n}\nif ($exception instanceof MethodNotAllowedHttpException) {\n    return response()->json(['error' => 'Method Not Allowed'], 405);\n}\nif ($exception instanceof UnauthorizedHttpException) {\n    return response()->json(['error' => 'Token not provided'], 401);\n}\n// JWT Auth related errors\nif ($exception instanceof JWTException) {\n    return response()->json(['error' => $exception], 500);\n}\nif ($exception instanceof TokenExpiredException) {\n    return response()->json(['error' => 'token_expired'], \n    $exception->getStatusCode());\n} else if ($exception instanceof TokenInvalidException) {\n    return response()->json(['error' => 'token_invalid'],\n     $exception->getStatusCode());\n}\nreturn parent::render($request, $exception);\n```", "```php\nuse Illuminate\\Database\\Eloquent\\ModelNotFoundException as ModelNotFoundException;\nuse Symfony\\Component\\HttpKernel\\Exception\\UnauthorizedHttpException as UnauthorizedHttpException;\nuse Tymon\\JWTAuth\\Exceptions\\JWTException as JWTException;\nuse Tymon\\JWTAuth\\Exceptions\\TokenExpiredException as TokenExpiredException;\nuse Tymon\\JWTAuth\\Exceptions\\TokenInvalidException as TokenInvalidException;\n```", "```php\ncurl -X GET \"http://localhost:8081/api/bikes/3\" -H \"accept: application/json\" -H \"X-CSRF-TOKEN: \"\n```", "```php\n{\"message\":\"Unauthenticated.\"}\n```", "```php\ncurl -X POST \"http://localhost:8081/api/bikes/3\" -H \"accept: application/json\" -H \"X-CSRF-TOKEN: \"\n```", "```php\n{\"error\":\"Method Not Allowed\"}\n```", "```php\nphp artisan l5-swagger:generate\n```", "```php\n{\n \"make\": \"Yamaha\",\n \"model\": \"V-Star\",\n \"year\": \"2001\",\n \"mods\": \"New exhaust system and Grips\",\n \"picture\": \"http://www.sample.com/my.bike.jpg\"\n }\n```", "```php\n\"tymon/jwt-auth\": \"1.0.*\"\n```", "```php\nphp artisan vendor:publish --provider=\"Tymon\\JWTAuth\\Providers\\LaravelServiceProvider\"\n```", "```php\n php artisan jwt:secret\n```", "```php\nJWT_SECRET=McR1It4Bw9G8jU1b4XJhDMeZs4Q5Zwear\n```", "```php\n <?php\n namespace  App;\n use  Illuminate\\Notifications\\Notifiable;\n use  Illuminate\\Foundation\\Auth\\User  as  Authenticatable;\n use  Tymon\\JWTAuth\\Contracts\\JWTSubject;\n /**\n * @SWG\\Definition(\n * definition=\"User\",\n * required={\"name\", \"email\", \"password\"},\n * @SWG\\Property(\n * property=\"name\",\n * type=\"string\",\n * description=\"User name\",\n * example=\"John Conor\"\n * ),\n * @SWG\\Property(\n * property=\"email\",\n * type=\"string\",\n * description=\"Email Address\",\n * example=\"john.conor@terminator.com\"\n * ),\n * @SWG\\Property(\n * property=\"password\",\n * type=\"string\",\n * description=\"A very secure password\",\n * example=\"123456\"\n * ),\n * )\n */\n class  User  extends  Authenticatable  implements  JWTSubject\n {\n     use  Notifiable;\n     /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n     protected  $fillable = [\n         'name', 'email', 'password',\n     ];\n     /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n     protected  $hidden = [\n         'password', 'remember_token',\n     ];\n     /**\n     * Get JSON WEB TOKEN methods.\n     *\n     * @var array\n     */\n     public  function  getJWTIdentifier()\n     {\n         return  $this->getKey();\n     } \n     public  function  getJWTCustomClaims()\n     {\n         return [];\n     }  \n     /**\n     * Relationship.\n     *\n     * @var string\n     */   \n     public  function  bikes()\n     {\n         return  $this->hasMany(App\\Bike);\n     }\n }\n```", "```php\n 'defaults' => [         'guard'  =>  'api',\n        'passwords'  =>  'users',\n ],\n 'guards'  => [\n                'web'  => [\n                        'driver'  =>  'session',\n                        'provider'  =>  'users',\n        ],        \n 'api'  => [\n                'driver'  =>  'jwt',\n                'provider'  =>  'users',\n        ],\n ],\n```", "```php\nphp artisan make:controller API/AuthController\n```", "```php\n <?php\n namespace  App\\Http\\Controllers\\API;\n use  Illuminate\\Http\\Request;\n use  App\\Http\\Controllers\\Controller;\n use  App\\User;\n use  Validator;\n class  AuthController  extends  Controller\n {\n     /**\n     * Register a new user.\n     *\n     * @param \\Illuminate\\Http\\Request $request\n     * @return \\Illuminate\\Http\\Response\n     *\n     * @SWG\\Post(\n     * path=\"/api/register\",\n     * tags={\"Users\"},\n     * summary=\"Create new User\",\n     * @SWG\\Parameter(\n     * name=\"body\",\n     * in=\"body\",\n     * required=true,\n     * @SWG\\Schema(ref=\"#/definitions/User\"),\n     * description=\"Json format\",\n     * ),\n     * @SWG\\Response(\n     * response=201,\n     * description=\"Success: A Newly Created User\",\n     * @SWG\\Schema(ref=\"#/definitions/User\")\n     * ),\n     * @SWG\\Response(\n     * response=200,\n     * description=\"Success: operation Successfully\"\n     * ),\n     * @SWG\\Response(\n     * response=401,\n     * description=\"Refused: Unauthenticated\"\n     * ),\n    * @SWG\\Response(\n    * response=\"422\",\n    * description=\"Missing mandatory field\"\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public  function  register(Request  $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'email' => 'required|string|email|max:255|unique:users',\n            'name' => 'required',\n            'password'=> 'required'\n        ]);\n        if ($validator->fails()) {\n            return  response()->json($validator->errors(), 422);\n            }\n        $user = User::create([\n        'name' => $request->name,\n        'email' => $request->email,\n        'password' => bcrypt($request->password),\n        ]);\n        $token = auth()->login($user);\n        return  response()->json([\n            'access_token' => $token,\n            'token_type' => 'bearer',\n            'expires_in' => auth()->factory()->getTTL() * 60\n            ], 201);\n        }\n    /**\n    * Log in a user.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Post(\n    * path=\"/api/login\",\n    * tags={\"Users\"},\n    * summary=\"loggin an user\",\n    * @SWG\\Parameter(\n    * name=\"body\",\n    * in=\"body\",\n    * required=true,\n    * @SWG\\Schema(ref=\"#/definitions/User\"),\n    * description=\"Json format\",\n    * ),\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: operation Successfully\"\n    * ),\n    * @SWG\\Response(\n    * response=401,\n    * description=\"Refused: Unauthenticated\"\n    * ),\n    * @SWG\\Response(\n    * response=\"422\",\n    * description=\"Missing mandatory field\"\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public  function  login(Request  $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'email' => 'required|string|email|max:255',\n            'password'=> 'required'\n        ]);\n        if ($validator->fails()) {\n            return  response()->json($validator->errors(), 422);\n            }\n        $credentials = $request->only(['email', 'password']);\n        if (!$token = auth()->attempt($credentials)) {\n            return  response()->json(['error' => 'Invalid\n             Credentials'], 400);\n        }\n        $current_user = $request->email;\n            return  response()->json([\n            'access_token' => $token,\n            'token_type' => 'bearer',\n            'current_user' => $current_user,\n            'expires_in' => auth()->factory()->getTTL() * 60\n            ], 200);\n            }\n    /**\n    * Register a new user.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Post(\n    * path=\"/api/logout\",\n    * tags={\"Users\"},\n    * summary=\"logout an user\",\n    * @SWG\\Parameter(\n    * name=\"body\",\n    * in=\"body\",\n    * required=true,\n    * @SWG\\Schema(ref=\"#/definitions/User\"),\n    * description=\"Json format\",\n    * ),\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: operation Successfully\"\n    * ),\n    * @SWG\\Response(\n    * response=401,\n    * description=\"Refused: Unauthenticated\"\n    * ),\n    * @SWG\\Response(\n    * response=\"422\",\n    * description=\"Missing mandatory field\"\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * ),\n    * @SWG\\Response(\n    * response=\"405\",\n    * description=\"Invalid input\"\n    * ),\n    * security={\n    * { \"api_key\":{} }\n    * }\n    * ),\n    */\n    public  function  logout(Request  $request){\n        auth()->logout(true); // Force token to blacklist\n        return  response()->json(['success' => 'Logged out\n         Successfully.'], 200); }\n}\n```", "```php\n $token = auth()->login($user);\n        return  response()->json([\n                'access_token' => $token,\n                'token_type' => 'bearer',\n                'expires_in' => auth()->factory()->getTTL() * 60\n ], 201);\n```", "```php\n $current_user = $request->email;\n        return  response()->json([\n                'access_token' => $token,\n                'token_type' => 'bearer',\n                'current_user' => $current_user,\n                'expires_in' => auth()->factory()->getTTL() * 60\n ], 200);\n```", "```php\nauth()->logout(true); // Force token to blacklist\n    return  response()->json(['success' => 'Logged out\n     Successfully.'], 200);\n```", "```php\n <?php\n use  Illuminate\\Http\\Request;\n use  App\\Bike;\n use  App\\Http\\Resources\\BikesResource;\n\n /*\n |--------------------------------------------------------------------------\n | API Routes\n |--------------------------------------------------------------------------\n |\n | Here is where you can register API routes for your application. These\n | routes are loaded by the RouteServiceProvider within a group whic\n | is assigned the \"api\" middleware group. Enjoy building your API!\n |\n */\n\n // Register Routes\n Route::post('register', 'API\\AuthController@register');\n Route::post('login', 'API\\AuthController@login');\n Route::post('logout', 'API\\AuthController@logout');\n\n Route::apiResources([\n\n     'bikes' => 'API\\BikeController',\n\n     'builders' => 'API\\BuilderController',\n\n     'items' => 'API\\ItemController',\n\n     'bikes/{bike}/ratings' => 'API\\RatingController'\n\n ]);\n\nRoute::middleware('jwt.auth')->get('me', function(Request $request){\n    return auth()->user();\n});\n```", "```php\n /**\n * Protect update and delete methods, only for authenticated users.\n *\n * @return Unauthorized\n */\n public  function  __construct()\n {\n        $this->middleware('auth:api')->except(['index']);\n }\n```", "```php\nphp artisan make:resource BikesResource\n```", "```php\n<?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse App\\Builder;\nclass BikesResource extends JsonResource\n{\n    /**\n    * Transform the resource into an array.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return array\n    */\n    public function toArray($request)\n    {\n        return [\n            'id' => $this->id,\n            'make' => $this->make,\n            'model' => $this->model,\n            'year' => $this->year,\n            'mods' => $this->mods,\n            'picture' => $this->picture,\n            'garages' => $this->garages,\n            'items' => $this->items,\n            'builder' => $this->builder,\n            'user' => $this->user,\n            'ratings' => $this->ratings,\n            'average_rating' => $this->ratings->avg('rating'),\n            // Casting objects to string, to avoid receive create_at             and update_at as object\n            'created_at' => (string) $this->created_at,\n            'updated_at' => (string) $this->updated_at\n        ];\n    }\n}\n```", "```php\nphp artisan make:resource BuildersResource\n```", "```php\n<?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nclass BuildersResource extends JsonResource\n{\n    /**\n    * Transform the resource into an array.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return array\n    */\n    public function toArray($request)\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'description' => $this->description,\n            'location' => $this->location,\n            'bike' => $this->bike,\n            // Casting objects to string, to avoid receive create_at             and update_at as object\n            'created_at' => (string) $this->created_at,\n            'updated_at' => (string) $this->updated_at,\n        ];\n    }\n}\n```", "```php\nphp artisan make:resource ItemsResource\n```", "```php\n<?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nclass ItemsResource extends JsonResource\n{\n    /**\n    * Transform the resource into an array.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return array\n    */\n    public function toArray($request)\n    {\n        return [\n            'id' => $this->id,\n            'type' => $this->type,\n            'name' => $this->name,\n            'company' => $this->company,\n            'bike_id' => $this->bike_id,\n            // Casting objects to string, to avoid receive create_at             and update_at as object\n            'created_at' => (string) $this->created_at,\n            'updated_at' => (string) $this->updated_at\n        ];\n    }\n}\n```", "```php\nphp artisan make:resource ratingResource\n```", "```php\n<?php\nnamespace App\\Http\\Resources;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\nuse App\\Bike;\nclass RatingResource extends JsonResource\n{\n    /**\n    * Transform the resource into an array.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return array\n    */\n    public function toArray($request)\n    {\n        return [\n            'user_id' => $this->user_id,\n            'bike_id' => $this->bike_id,\n            'rating' => $this->rating,\n            'bike' => $this->bike,\n            'average_rating' => $this->bike->ratings->avg('rating'),\n            // Casting objects to string, to avoid receive \n```", "```php\n             create_at and update_at as object\n             'created_at' => (string) $this->created_at,\n             'updated_at' => (string) $this->updated_at\n         ];\n     }\n}\n```", "```php\n<?php\nnamespace App\\Http\\Controllers\\API;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Bike;\nuse Validator;\nuse App\\Http\\Resources\\BikesResource;\nclass BikeController extends Controller\n{\n    /**\n    * Protect update and delete methods, only for authenticated\n     users.\n    *\n    * @return Unauthorized\n    */\n    public function __construct()\n    {\n        $this->middleware('auth:api')->except(['index']);\n    }\n    /**\n    * Display a listing of the resource.\n    *\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Get(\n    * path=\"/api/bikes\",\n    * tags={\"Bikes\"},\n    * summary=\"List Bikes\",\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: List all Bikes\",\n    * @SWG\\Schema(ref=\"#/definitions/Bike\")\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * ),\n    * @SWG\\Response(\n    *          response=\"405\",\n    *          description=\"Invalid HTTP Method\"\n    * )\n    * ),\n    */\n    public function index()\n    {\n        $listBikes = Bike::all();\n        return $listBikes;\n        // Using Paginate method We explain this later in the book\n        // return BikesResource::collection(Bike::with('ratings')-\n        >paginate(10));\n    }\n```", "```php\n/**\n* Store a newly created resource in storage.\n*\n* @param \\Illuminate\\Http\\Request $request\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Post(\n* path=\"/api/bikes\",\n* tags={\"Bikes\"},\n* summary=\"Create Bike\",\n* @SWG\\Parameter(\n*          name=\"body\",\n*          in=\"body\",\n*          required=true,\n*          @SWG\\Schema(ref=\"#/definitions/Bike\"),\n*          description=\"Json format\",\n*      ),\n* @SWG\\Response(\n* response=201,\n* description=\"Success: A Newly Created Bike\",\n* @SWG\\Schema(ref=\"#/definitions/Bike\")\n```", "```php\n\n* ),\n* @SWG\\Response(\n* response=401,\n* description=\"Refused: Unauthenticated\"\n* ),\n* @SWG\\Response(\n* response=\"422\",\n* description=\"Missing mandatory field\"\n* ),\n* @SWG\\Response(\n* response=\"404\",\n* description=\"Not Found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * ),\n     * security={\n     *       { \"api_key\":{} }\n     *      }\n* ),\n*/\npublic function store(Request $request)\n{\n    $validator = Validator::make($request->all(), [\n        'make' => 'required',\n        'model' => 'required',\n        'year'=> 'required',\n        'mods'=> 'required',\n        'builder_id' => 'required'\n        ]);\n    if ($validator->fails()) {\n        return response()->json($validator->errors(), 422);\n    }\n    // Creating a record in a different way\n    $createBike = Bike::create([\n        'user_id' => $request->user()->id,\n        'make' => $request->make,\n        'model' => $request->model,\n        'year' => $request->year,\n        'mods' => $request->mods,\n        'picture' => $request->picture,\n    ]);\n    return new BikesResource($createBike);\n}\n```", "```php\n/**\n* Display the specified resource.\n*\n* @param int $id\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Get(\n* path=\"/api/bikes/{id}\",\n* tags={\"Bikes\"},\n* summary=\"Get Bike by Id\",\n* @SWG\\Parameter(\n* name=\"id\",\n* in=\"path\",\n* required=true,\n* type=\"integer\",\n* description=\"Display the specified bike by id.\",\n*      ),\n* @SWG\\Response(\n* response=200,\n* description=\"Success: Return the Bike\",\n* @SWG\\Schema(ref=\"#/definitions/Bike\")\n* ),\n* @SWG\\Response(\n* response=\"404\",\n* description=\"Not Found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * ),\n* security={\n*       { \"api_key\":{} }\n*   }\n* ),\n*/\npublic function show(Bike $bike)\n{\n    return new BikesResource($bike);\n}\n```", "```php\n/**\n* Update the specified resource in storage.\n*\n* @param \\Illuminate\\Http\\Request $request\n* @param int $id\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Put(\n* path=\"/api/bikes/{id}\",\n* tags={\"Bikes\"},* summary=\"Update Bike\",\n* @SWG\\Parameter(\n* name=\"id\",\n* in=\"path\",\n* required=true,\n* type=\"integer\",\n* description=\"Update the specified bike by id.\",\n*      ),\n* @SWG\\Parameter(\n*          name=\"body\",\n*          in=\"body\",\n*          required=true,\n*          @SWG\\Schema(ref=\"#/definitions/Bike\"),\n*          description=\"Json format\",\n*      ),\n* @SWG\\Response(\n* response=200,\n* description=\"Success: Return the Bike updated\",\n* @SWG\\Schema(ref=\"#/definitions/Bike\")\n* ),\n* @SWG\\Response(\n* response=\"422\",\n* description=\"Missing mandatory field\"\n* ),\n* @SWG\\Response(\n* response=\"404\",\n* description=\"Not Found\"\n* ),\n* @SWG\\Response(\n     *          response=\"403\",\n     *          description=\"Forbidden\"\n     * ),\n```", "```php\n\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * ),\n     * security={\n     *       { \"api_key\":{} }\n     *      }\n* ),\n*/\npublic function update(Request $request, Bike $bike)\n{\n    // check if currently authenticated user is the bike owner\n    if ($request->user()->id !== $bike->user_id) {\n        return response()->json(['error' => 'You can only edit your\n         own bike.'], 403);\n    }\n        $bike->update($request->only(['make', 'model', 'year',\n         'mods',     'picture']));\n    return new BikesResource($bike);\n}\n```", "```php\n/**\n* Remove the specified resource from storage.\n*\n* @param int $id\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Delete(\n* path=\"/api/bikes/{id}\",\n* tags={\"Bikes\"},\n* summary=\"Delete bike\",\n* description=\"Delete the specified bike by id\",\n* @SWG\\Parameter(\n* description=\"Bike id to delete\",\n* in=\"path\",\n* name=\"id\",\n* required=true,\n* type=\"integer\",\n* format=\"int64\"\n* ),\n* @SWG\\Response(\n* response=404,\n* description=\"Not found\"\n* ),\n* @SWG\\Response(\n* response=204,\n* description=\"Success: successful deleted\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * ),\n     * security={\n     *       { \"api_key\":{} }\n     *      }\n* )\n*/\npublic function destroy($id)\n{\n    $deleteBikeById = Bike::findOrFail($id)->delete();\n    return response()->json([], 204);\n    }\n}\n```", "```php\n<?php\nnamespace App\\Http\\Controllers\\API;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Builder;\nuse Validator;\nuse App\\Http\\Resources\\BuildersResource;\nclass BuilderController extends Controller\n{\n    /**\n    * Display a listing of the resource.\n    *\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Get(\n    * path=\"/api/builders\",\n    * tags={\"Builders\"},\n    * summary=\"List Builders\",\n    * @SWG\\Response(\n    * response=200,\n    * description=\"Success: List all Builders\",\n    * @SWG\\Schema(ref=\"#/definitions/Builder\")\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * )\n    * ),\n    */\n    public function index()\n    {\n        $listBuilder = Builder::all();\n        return $listBuilder;\n    }\n```", "```php\n/**\n* Store a newly created resource in storage.\n*\n* @param \\Illuminate\\Http\\Request $request\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Post(\n* path=\"/api/builders\",\n* tags={\"Builders\"},\n* summary=\"Create Builder\",\n* @SWG\\Parameter(\n*          name=\"body\",\n*          in=\"body\",\n*          required=true,\n*          @SWG\\Schema(ref=\"#/definitions/Builder\"),\n*          description=\"Json format\",\n*      ),\n* @SWG\\Response(\n* response=201,\n* description=\"Success: A Newly Created Builder\",\n* @SWG\\Schema(ref=\"#/definitions/Builder\")\n* ),\n* @SWG\\Response(\n* response=\"422\",\n* description=\"Missing mandatory field\"\n* ),\n* @SWG\\Response(\n* response=\"404\",\n* description=\"Not Found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * )\n* ),\n*/\npublic function store(Request $request)\n{\n    $validator = Validator::make($request->all(), [\n        'name' => 'required',\n        'description' => 'required',\n        'location'=> 'required'\n        ]);\n    if ($validator->fails()) {\n        return response()->json($validator->errors(), 422);\n    }\n    $createBuilder = Builder::create($request->all());\n        return $createBuilder;\n }\n```", "```php\n/**\n* Display the specified resource.\n*\n* @param int $id\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Get(\n* path=\"/api/builders/{id}\",\n* tags={\"Builders\"},\n* summary=\"Get Builder by Id\",\n* @SWG\\Parameter(\n* name=\"id\",\n* in=\"path\",\n* required=true,\n* type=\"integer\",\n* description=\"Display the specified Builder by id.\",\n*      ),\n* @SWG\\Response(\n* response=200,\n* description=\"Success: Return the Builder\",\n* @SWG\\Schema(ref=\"#/definitions/Builder\")\n* ),\n* @SWG\\Response(\n* response=\"404\",\n* description=\"Not Found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * )\n* ),\n*/\npublic function show(Builder $builder)\n{\n    // $showBuilderById = Builder::with('Bike')->findOrFail($id);\n    // return $showBuilderById;\n    return new BuildersResource($builder);\n}\n```", "```php\n/**\n* Update the specified resource in storage.\n*\n* @param \\Illuminate\\Http\\Request $request\n* @param int $id\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Put(\n* path=\"/api/builders/{id}\",\n* tags={\"Builders\"},\n* summary=\"Update Builder\",\n* @SWG\\Parameter(\n* name=\"id\",\n* in=\"path\",\n* required=true,\n* type=\"integer\",\n* description=\"Update the specified Builder by id.\",\n*      ),\n* @SWG\\Parameter(\n*          name=\"body\",\n*          in=\"body\",\n*          required=true,\n*          @SWG\\Schema(ref=\"#/definitions/Builder\"),\n*          description=\"Json format\",\n*      ),\n* @SWG\\Response(\n* response=200,\n* description=\"Success: Return the Builder updated\",\n* @SWG\\Schema(ref=\"#/definitions/Builder\")\n* ),\n* @SWG\\Response(\n* response=\"422\",\n* description=\"Missing mandatory field\"\n* ),\n* @SWG\\Response(\n* response=\"404\",\n* description=\"Not Found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * )\n* ),\n*/\npublic function update(Request $request, $id)\n{\n    $validator = Validator::make($request->all(), [\n        'name' => 'required',\n        'description' => 'required',\n        'location'=> 'required'\n        ]);\n    if ($validator->fails()) {\n        return response()->json($validator->errors(), 422);\n    }\n    $updateBuilderById = Builder::findOrFail($id);\n    $updateBuilderById->update($request->all());\n    return $updateBuilderById;\n}\n```", "```php\n/**\n* Remove the specified resource from storage.\n*\n* @param int $id\n* @return \\Illuminate\\Http\\Response\n*\n* @SWG\\Delete(\n* path=\"/api/builders/{id}\",\n* tags={\"Builders\"},\n* summary=\"Delete Builder\",\n* description=\"Delete the specified Builder by id\",\n* @SWG\\Parameter(\n* description=\"Builder id to delete\",\n* in=\"path\",\n* name=\"id\",\n* required=true,\n* type=\"integer\",\n* format=\"int64\"\n* ),\n* @SWG\\Response(\n* response=404,\n* description=\"Not found\"\n* ),\n* @SWG\\Response(\n     *          response=\"405\",\n     *          description=\"Invalid HTTP Method\"\n     * ),\n* @SWG\\Response(\n* response=204,\n* description=\"Success: successful deleted\"\n* ),\n* )\n*/\npublic function destroy($id)\n{\n    $deleteBikeById = Bike::find($id)->delete();\n    return response()->json([], 204);\n    }\n}\n```", "```php\n<?php\nnamespace App\\Http\\Controllers\\API;\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Bike;\nuse App\\Rating;\nuse App\\Http\\Resources\\RatingResource;\nclass RatingController extends Controller\n{\n    /**\n    * Protect update and delete methods, only for authenticated         users.\n    *\n    * @return Unauthorized\n    */\n    public function __construct()\n    {\n        $this->middleware('auth:api');\n    }\n    /**\n    * Store a newly created resource in storage.\n    *\n    * @param \\Illuminate\\Http\\Request $request\n    * @return \\Illuminate\\Http\\Response\n    *\n    * @SWG\\Post(\n    * path=\"/api/bikes/{bike_id}/ratings\",\n    * tags={\"Ratings\"},\n    * summary=\"rating a Bike\",\n    * @SWG\\Parameter(\n    * in=\"path\",\n    * name=\"id\",\n    * required=true,\n    * type=\"integer\",\n    * format=\"int64\",\n    *      description=\"Bike Id\"\n    *    ),\n    * @SWG\\Parameter(\n    *      name=\"body\",\n    *      in=\"body\",\n    *      required=true,\n    *      @SWG\\Schema(ref=\"#/definitions/Rating\"),\n    *      description=\"Json format\",\n    *     ),\n    * @SWG\\Response(\n    * response=201,\n    * description=\"Success: A Newly Created Rating\",\n    * @SWG\\Schema(ref=\"#/definitions/Rating\")\n    * ),\n    * @SWG\\Response(\n    * response=401,\n    * description=\"Refused: Unauthenticated\"\n    * ),\n    * @SWG\\Response(\n    * response=\"422\",\n    * description=\"Missing mandatory field\"\n    * ),\n    * @SWG\\Response(\n    * response=\"404\",\n    * description=\"Not Found\"\n    * ),\n    * @SWG\\Response(\n       *     response=\"405\",\n       *   description=\"Invalid HTTP Method\"\n       * ),\n    * security={\n    *     { \"api_key\":{} }\n    * }\n    * ),\n    */\n    public function store(Request $request, Bike $bike)\n    {\n        $rating = Rating::firstOrCreate(\n        [\n        'user_id' => $request->user()->id,\n        'bike_id' => $bike->id,\n        ],\n        ['rating' => $request->rating]\n        );\n        return new RatingResource($rating);\n    }\n}\n```"]