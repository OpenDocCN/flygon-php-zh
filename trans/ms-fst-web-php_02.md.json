["```php\n# rm /srv/www\n# ln -s /srv/fasterweb/chapter_2 /srv/www\n# cd /srv/www\n# wget -O blackfire-agent https://packages.blackfire.io/binaries/blackfire-agent/1.17.0/blackfire-agent-linux_static_amd64\n```", "```php\n# mv blackfire-agent /usr/local/bin/ \n# chmod +x /usr/local/bin/blackfire-agent \n```", "```php\n# mkdir -p /etc/blackfire \n# cp agent /etc/blackfire/ \n```", "```php\n[blackfire] \n; \n; setting: ca-cert \n; desc   : Sets the PEM encoded certificates \n; default: \nca-cert= \n\n; \n; setting: collector \n; desc   : Sets the URL of Blackfire's data collector \n; default: https://blackfire.io \ncollector=https://blackfire.io/ \n\n; \n; setting: log-file \n; desc   : Sets the path of the log file. Use stderr to log to stderr \n; default: stderr \nlog-file=stderr \n\n; \n; setting: log-level \n; desc   : log verbosity level (4: debug, 3: info, 2: warning, 1: error) \n; default: 1 \nlog-level=1 \n\n; \n; setting: server-id \n; desc   : Sets the server id used to authenticate with Blackfire API \n; default: \nserver-id= \n\n; \n; setting: server-token \n; desc   : Sets the server token used to authenticate with Blackfire \nAPI. It is unsafe to set this from the command line \n; default: \nserver-token= \n\n; \n; setting: socket \n; desc   : Sets the socket the agent should read traces from. Possible \nvalue can be a unix socket or a TCP address \n; default: unix:///var/run/blackfire/agent.sock on Linux, \nunix:///usr/local/var/run/blackfire-agent.sock on MacOSX, and \ntcp://127.0.0.1:8307 on Windows. \nsocket=unix:///var/run/blackfire/agent.sock \n\n; \n; setting: spec \n; desc   : Sets the path to the json specifications file \n; default: \nspec= \n```", "```php\n# mkdir -p /var/run/blackfire \n# touch /var/run/blackfire/agent.sock \n```", "```php\n# blackfire-agent -register \n```", "```php\n# blackfire-agent start & \n```", "```php\n# wget -O blackfire https://packages.blackfire.io/binaries/blackfire-agent/1.17.0/blackfire-cli-linux_static_amd64 \n```", "```php\n# mv blackfire /usr/local/bin/ \n# chmod +x /usr/local/bin/blackfire \n# blackfire config \n```", "```php\n# wget -O blackfire.so https://packages.blackfire.io/binaries/blackfire-php/1.20.0/blackfire-php-linux_amd64-php-71.so\n```", "```php\n# php -i | grep 'extension_dir' \n# mv blackfire.so $( php -i | grep extensions | awk '{print $3}' )\n```", "```php\n# sed -i 's/zend_extension=\\/usr\\/lib\\/php\\/extensions\\/no-debug-non-zts-20160303\\/xdebug.so/;zend_extension=\\/usr\\/lib\\/php\\/extensions\\/no-debug-non-zts-20160303\\/xdebug.so/' /etc/php.ini\n# sed -i 's/^xdebug/;xdebug/' /etc/php.ini\n# cat >>/etc/php.ini << 'EOF'\n\n[blackfire]\nextension=blackfire.so\n; On Windows use the following configuration:\n; extension=php_blackfire.dll\n\n; Sets the socket where the agent is listening.\n; Possible value can be a unix socket or a TCP address.\n; Defaults to unix:///var/run/blackfire/agent.sock on Linux,\n; unix:///usr/local/var/run/blackfire-agent.sock on MacOSX,\n; and to tcp://127.0.0.1:8307 on Windows.\n;blackfire.agent_socket = unix:///var/run/blackfire/agent.sock\n\nblackfire.agent_timeout = 0.25\n\n; Log verbosity level (4: debug, 3: info, 2: warning, 1: error)\n;blackfire.log_level = 1\n\n; Log file (STDERR by default)\n;blackfire.log_file = /tmp/blackfire.log\n\n;blackfire.server_id =\n\n;blackfire.server_token =\nEOF \n```", "```php\n# /etc/init.d/php-fpm restart \n```", "```php\n# blackfire curl http://localhost/index.php \n```", "```php\n<?php \n\nfunction getDiskUsage(string $directory) \n{ \n    $handle = popen(\"cd $directory && du -ch --exclude='./.*'\", 'r'); \n\n    $du = stream_get_contents($handle); \n\n    pclose($handle); \n\n    return $du; \n} \n\nfunction getDirList(string $directory, string &$du) \n{ \n    $result = getDiskUsage($directory); \n\n    $du = empty($du) \n        ? '<br />' . preg_replace('/\\n+/', '<br />', $result) \n        : $du; \n\n    $fileList = []; \n\n    $iterator = new RecursiveDirectoryIterator($directory, FilesystemIterator::SKIP_DOTS); \n\n    foreach($iterator as $entry) { \n\n        if (!$entry->isDir() && $entry->getFilename()[0] != '.') { \n            $fileList[$entry->getFilename()] = 'size is ' . $entry->getSize(); \n        } else { \n            if ($entry->isDir() && $entry->getFilename()[0] != '.') { \n                $fileList[$entry->getFilename()] = getDirList( \n                    $directory . DIRECTORY_SEPARATOR . $entry->getFilename(), \n                    $du \n                );\n }\n        } \n\n    } \n\n    return $fileList; \n} \n\n$du = ''; \n\n$baseDirectory = dirname(__FILE__); \n\n$fileList = getDirList($baseDirectory, $du); \n\necho '<html><head></head><body><p>'; \n\necho 'Disk Usage : ' . $du . '<br /><br /><br />'; \n\necho 'Directory Name : ' . $baseDirectory . '<br /><br />'; \n\necho 'File listing :'; \n\necho '</p><pre>'; \n\nprint_r($fileList); \n\necho '</pre></body></html>'; \n\n```", "```php\nfunction getDirList(string $directory, string &$du) \n{ \n    $result = getDiskUsage($directory); \n\n    $du = empty($du) \n        ? '<br />' . preg_replace('/\\n+/', '<br />', $result) \n        : $du;  \n[...]  \n```", "```php\nfunction getDirList(string $directory, string &$du) \n{ \n    $du = empty($du) \n        ? '<br />' . preg_replace('/\\n+/', '<br />', getDiskUsage($directory)) \n        : $du;\n\n[...]\n```", "```php\n<?php \n\nfunction getDiskUsage(string $directory) \n{ \n    $handle = popen(\"cd $directory && du -ch --exclude='./.*'\", 'r'); \n\n    $du = stream_get_contents($handle); \n\n    pclose($handle); \n\n    return $du; \n} \n\nfunction getDirList(string $directory, string &$du) \n{ \n    $du = empty($du) \n        ? '<br />' . preg_replace('/\\n+/', '<br />', getDiskUsage($directory)) \n        : $du; \n\n    $fileList = []; \n\n    $iterator = new RecursiveDirectoryIterator($directory, FilesystemIterator::SKIP_DOTS); \n\n    foreach($iterator as $entry) { \n\n        $fileName = $entry->getFilename(); \n\n        $dirFlag = $entry->isDir(); \n\n        if (!$dirFlag && $fileName[0] != '.') { \n            $fileList[$fileName] = 'size is ' . $entry->getSize(); \n        } else { \n            if ($dirFlag && $fileName[0] != '.') { \n                $fileList[$fileName] = getDirList( \n                    $directory . DIRECTORY_SEPARATOR . $fileName, \n                    $du \n                ); \n            } \n        } \n\n    } \n\n    return $fileList; \n} \n\n$du = ''; \n\n$baseDirectory = dirname(__FILE__); \n\n$fileList = getDirList($baseDirectory, $du); \n\necho '<html><head></head><body><p>'; \n\necho 'Disk Usage : ' . $du . '<br /><br /><br />'; \n\necho 'Directory Name : ' . $baseDirectory . '<br /><br />'; \n\necho 'File listing :'; \n\necho '</p><pre>'; \n\nprint_r($fileList); \n\necho '</pre></body></html>'; \n```", "```php\ntests: \n    \"Pages should be fast enough\": \n        path: \"/.*\" # run the assertions for all HTTP requests \n        assertions: \n            - \"main.wall_time < 10ms\" # wall clock time is less than 10ms \n```", "```php\n[blackfire] \n\nserver-id=BLACKFIRE_SERVER_ID \nserver-token=BLACKFIRE_SERVER_TOKEN \nclient-id=BLACKFIRE_CLIENT_ID \nclient-token=BLACKFIRE_CLIENT_TOKEN \nendpoint=https://blackfire.io/ \ncollector=https://blackfire.io/ \n```", "```php\n# gem install travis\n# travis encrypt-file /srv/www/.blackfire.travis.ini -r [your_Github_repository_name_here] \n```", "```php\nlanguage: php \n\nmatrix: \n    include: \n        - php: 5.6 \n        - php: 7.0 \n          env: BLACKFIRE=on \n\nsudo: false \n\ncache: \n    - $HOME/.composer/cache/files \n\nbefore_install: \n    - if [[ \"$BLACKFIRE\" = \"on\" ]]; then \n        openssl aes-256-cbc -K [ENCRYPT_KEY_HERE] -iv [ENCRYPT_IV_HERE] -in .blackfire.travis.ini.enc -out ~/.blackfire.ini -d \n        curl -L https://blackfire.io/api/v1/releases/agent/linux/amd64 | tar zxpf - \n        chmod 755 agent && ./agent --config=~/.blackfire.ini --socket=unix:///tmp/blackfire.sock & \n      fi \n\ninstall: \n    - travis_retry composer install \n\nbefore_script: \n    - phpenv config-rm xdebug.ini || true \n    - if [[ \"$BLACKFIRE\" = \"on\" ]]; then \n        curl -L https://blackfire.io/api/v1/releases/probe/php/linux/amd64/$(php -r \"echo PHP_MAJOR_VERSION . PHP_MINOR_VERSION;\")-zts | tar zxpf - \n        echo \"extension=$(pwd)/$(ls blackfire-*.so | tr -d '[[:space:]]')\" > ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/blackfire.ini \n        echo \"blackfire.agent_socket=unix:///tmp/blackfire.sock\" >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/blackfire.ini \n      fi \n\nscript: \n    - phpunit \n```", "```php\n# sed -i 's/#Include \\/etc\\/httpd\\/extra\\/httpd-info.conf/Include \\/etc\\/httpd\\/extra\\/httpd-info.conf/' /etc/httpd/httpd.conf \n# sed -i 's/Require ip 127/Require ip 172/' /etc/httpd/extra/httpd-info.conf \n# /etc/init.d/httpd restart \n```", "```php\n# docker run -d --name influxdb -p 8086:8086 andrewscaya/influxdb \n```", "```php\n# docker network inspect bridge \n```", "```php\n# docker run --rm andrewscaya/telegraf -sample-config > telegraf.conf \n```", "```php\n# docker run --net=container:influxdb -v ${PWD}/telegraf.conf:/etc/telegraf/telegraf.conf:ro andrewscaya/telegraf\n```", "```php\n# docker run -d --name grafana -p 3000:3000 andrewscaya/grafana\n```", "```php\n# siege -b -c 3000 -r 100 localhost/chap2pre.php \n```", "```php\n# siege -b -c 3000 -r 100 localhost/chap2post.php \n```"]