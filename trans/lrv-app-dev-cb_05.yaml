- en: Chapter 5. Using Controllers and Routes for URLs and APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用控制器和路由处理URL和API
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating a basic controller
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个基本控制器
- en: Creating a route using a closure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用闭包创建路由
- en: Creating a RESTful controller
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个RESTful控制器
- en: Using advanced routing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级路由
- en: Using a filter on the route
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在路由上使用过滤器
- en: Using route groups
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路由组
- en: Building a RESTful API with routes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路由构建RESTful API
- en: Using named routes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名路由
- en: Using a subdomain in your route
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的路由中使用子域
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'In this chapter, we''ll go through some ways to use Laravel''s routing system.
    There are two basic ways to route our application: either setting the routes in
    the `routes.php` file with closures or using controllers. We''ll see the power
    that each of these methods holds and show how they can be used in our application.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一些使用Laravel路由系统的方法。路由应用程序有两种基本方法：要么在`routes.php`文件中使用闭包设置路由，要么使用控制器。我们将看到每种方法的强大之处，并展示它们如何在我们的应用程序中使用。
- en: Creating a basic controller
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基本控制器
- en: '**Model-View-Controller** (**MVC**) patterns are very popular in PHP frameworks.
    In this recipe, we''ll create a simple controller that extends another base controller.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器**（**MVC**）模式在PHP框架中非常流行。在这个示例中，我们将创建一个简单的控制器，它扩展了另一个基本控制器。'
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start, we just need a standard Laravel installation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们只需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，按照以下步骤进行：
- en: 'In the `app/controllers` directory, create a file named `UsersController.php`
    and type the following code in to it:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/controllers`目录中，创建一个名为`UsersController.php`的文件，并输入以下代码：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, in the `routes.php` file, add the following lines:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`routes.php`文件中添加以下行：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Test the controller by going to `http://your-server/users` and `http://your-server/users/about`,
    where `your-server` is the URL to your app.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问`http://your-server/users`和`http://your-server/users/about`来测试控制器，其中`your-server`是您的应用程序的URL。
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In our User controller (and pretty much in any other controller that we create),
    we start by extending the base controller. If we look in the `BaseController.php`
    file, we see only one method, the `setupLayout()` method, which is used for our
    layout views. The base controller could also be used if there's some code that
    we want to run on every page of the site.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的用户控制器（以及我们创建的几乎所有其他控制器中），我们首先通过扩展基本控制器来开始。如果我们查看`BaseController.php`文件，我们只会看到一个方法，即`setupLayout()`方法，它用于我们的布局视图。如果有一些代码我们希望在站点的每个页面上运行，基本控制器也可以使用。
- en: Back in the User controller, we define two methods for our Index and About page,
    with each method prefixed by `action`. For our purposes, we're just returning
    a single string, but this would be where all of our controller logic would go
    and where we would set the view to be displayed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 回到用户控制器，在那里我们为我们的首页和关于页面定义了两个方法，每个方法都以`action`为前缀。对于我们的目的，我们只是返回一个字符串，但这将是我们所有控制器逻辑的地方，并且我们将设置要显示的视图。
- en: So that Laravel is able to parse the URL and determine which controller and
    methods to use, we need to register the routes in our `routes` file. Now, in our
    browser, when we go to `/users` (or `/users/index`), we'll be taken to our Index
    page, while `/users/about` will take us to our About page.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，Laravel就能解析URL并确定要使用哪个控制器和方法，我们需要在`routes`文件中注册路由。现在，在我们的浏览器中，当我们访问`/users`（或`/users/index`）时，我们将被带到我们的首页，而`/users/about`将带我们到我们的关于页面。
- en: Creating a route using a closure
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用闭包创建路由
- en: If we decide not to use an MVC pattern, we can create our routes by using a
    closure, or anonymous function.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定不使用MVC模式，我们可以通过使用闭包或匿名函数来创建我们的路由。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we just need a standard Laravel installation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们只需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，按照以下步骤进行：
- en: 'In the `app/routes.php` file, add a route as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/routes.php`文件中，添加以下路由：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open your browser and test the route by visiting `http://your-server/hello/world`,
    where `your-server` is the URL to your app.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，通过访问`http://your-server/hello/world`来测试路由，其中`your-server`是您的应用程序的URL。
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Routes in Laravel are considered RESTful, which means they respond to various
    different HTTP verbs. Most of the time, when simply viewing web pages, we use
    the `GET` verb, as in `Route::get`. Our first parameter is the URL that we're
    using for the route, and it can be pretty much any valid URL string. In our case,
    when a user goes to `hello/world`, it will use this route. After that is our closure,
    or anonymous function.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel中的路由被认为是RESTful的，这意味着它们响应不同的HTTP动词。大多数时候，当简单地查看网页时，我们使用`GET`动词，如`Route::get`。我们的第一个参数是我们用于路由的URL，它可以是几乎任何有效的URL字符串。在我们的情况下，当用户转到`hello/world`时，它将使用这个路由。之后是我们的闭包，或匿名函数。
- en: In the closure, we can pull in any data from our model, do whatever logic we
    want, and call the views we want to use. In our example case, we're just setting
    a couple of variables and returning their concatenated value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在闭包中，我们可以从我们的模型中提取任何数据，进行我们想要的任何逻辑，并调用我们想要使用的视图。在我们的示例中，我们只是设置了一些变量并返回它们连接的值。
- en: Creating a RESTful controller
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个RESTful控制器
- en: There may be a time when we want to have a RESTful web application, such as
    when building an API. To accomplish this, we need our routes to respond to various
    HTTP requests. The routes with closures are already set up this way, but in this
    recipe, we'll stay in the MVC pattern and create a controller that is RESTful.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有一天我们想要拥有一个RESTful的Web应用程序，比如构建一个API。为了实现这一点，我们需要我们的路由响应各种HTTP请求。闭包的路由已经以这种方式设置，但在这个示例中，我们将保持MVC模式，并创建一个RESTful的控制器。
- en: Getting ready
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation and the code from the
    *Creating a basic controller* recipe.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个标准的Laravel安装和*创建一个基本控制器*示例中的代码。
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，按照以下步骤进行：
- en: 'In the User controller, replace the code with the following code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户控制器中，用以下代码替换代码：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In `routes.php`, add the route to our controller:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，添加到我们的控制器的路由：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In your browser, go to `http://your-server/users` (where `your-server` is the
    URL of your web server) and click on the **Submit** button.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到`http://your-server/users`（其中`your-server`是您的Web服务器的URL），然后单击**提交**按钮。
- en: In the browser, go to `http://your-server/users/about`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到`http://your-server/users/about`。
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The two main differences between a RESTful and non-RESTful controller are renaming
    the methods to have the HTTP request they respond to as a prefix and registering
    our routes with `Route::controller()`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful和非RESTful控制器的两个主要区别是将方法重命名为它们响应的HTTP请求作为前缀，并使用`Route::controller()`注册我们的路由。
- en: Our `getIndex()` method is the default method when we go to `/users`, since
    most page views are `GET` requests. In this example, we're returning a very simple
    form that will post the input back to itself. However, since the form is using
    a `POST` request, it will trigger the `postIndex()` method, and that's where the
    form can be processed. In our example, we're just using the `dd()` helper of Laravel
    to display the submitted form input.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`getIndex()`方法是当我们转到`/users`时的默认方法，因为大多数页面视图都是`GET`请求。在这个例子中，我们返回一个非常简单的表单，该表单将把输入提交回自身。然而，由于表单使用了`POST`请求，它将触发`postIndex()`方法，这就是表单可以被处理的地方。在我们的示例中，我们只是使用Laravel的`dd()`助手来显示提交的表单输入。
- en: Using advanced routing
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高级路由
- en: When creating routes that require parameters, we may need to use more advanced
    features. Using Laravel and regular expressions, we can make sure that our routes
    only respond to certain URLs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建需要参数的路由时，我们可能需要使用更高级的功能。使用Laravel和正则表达式，我们可以确保我们的路由只响应特定的URL。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个标准的Laravel安装。
- en: How to do it…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'To complete this recipe, follow these steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤操作：
- en: 'In our `routes.php` file, add the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，添加以下代码：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Open a browser and test the route by typing something such as `http://your-server/tvshow/MASH/1981`
    (where `your-server` is the URL for your server) in the address bar.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，并通过在地址栏中输入`http://your-server/tvshow/MASH/1981`（其中`your-server`是您服务器的URL）来测试路由。
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We start by having our route respond to a `GET` request for `tvshow`. If we
    want to pass parameters to the route, we need to set up wildcards. We can use
    as many parameters as we'd like and name them whatever we'd like as long as we
    pass the same name to the function. For this recipe, we want to get a show title,
    and to make this parameter optional, we add the question mark at the end.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先让我们的路由响应`GET`请求的`tvshow`。如果我们想要向路由传递参数，我们需要设置通配符。只要我们将相同的名称传递给函数，我们可以使用任意多个参数并且可以随意命名它们。对于这个示例，我们想要获取一个节目标题，并且为了使这个参数可选，我们在末尾添加了问号。
- en: For our second parameter, we want a `year`. In this case, it has to be a four
    digit number. To use a regular expression, we chain the `where()` method to our
    route with the name of the parameter and the expression. In this example, we want
    only numbers, (`\d`), and there have to be four of them, (`{4}`). The question
    mark in the route's parameter makes the field optional.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第二个参数，我们需要一个`year`。在这种情况下，它必须是一个四位数。要使用正则表达式，我们需要将`where()`方法链接到我们的路由上，并使用参数的名称和表达式。在这个例子中，我们只想要数字（`\d`），并且必须有四个数字（`{4}`）。路由参数中的问号使字段变为可选。
- en: In our closure, we set variables for each wildcard using the same name we set.
    To make them optional, we set each variable default to `null`. Then we check to
    see if the parameters were set, and if so, return an appropriate message.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的闭包中，我们使用相同的名称设置每个通配符的变量。为了使它们可选，我们将每个变量默认设置为`null`。然后我们检查参数是否已设置，如果是，则返回适当的消息。
- en: Using a filter on the route
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在路由上使用过滤器
- en: A powerful feature of Laravel is adding filters that can run both before and
    after a request is made to our application. In this recipe, we'll explore these
    filters.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的一个强大功能是添加过滤器，可以在请求发送到我们的应用程序之前和之后运行。在这个示例中，我们将探讨这些过滤器。
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we just need a standard Laravel installation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们只需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤操作：
- en: 'In our `routes.php` file, add a route only accessible to admins with filters
    attached:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，添加一个只有管理员可以访问的路由，并附加过滤器：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add in the two filters in our `filters.php` file:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`filters.php`文件中添加两个过滤器：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a route where we can set the admin session:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个可以设置管理员会话的路由：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Test the route by going to `http://your-server/admin-only` (where `your-server`
    is the URL for your server) and notice the results. Then, go to `set-admin` and
    see those results.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://your-server/admin-only`（其中`your-server`是您服务器的URL）来测试路由，并注意结果。然后，转到`set-admin`并查看这些结果。
- en: Go to the `app/storage/logs` directory and view the logfiles.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`app/storage/logs`目录并查看日志文件。
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In our `admin-only` route, instead of just adding the closure, we add an array
    with the closure as the last parameter. For our purposes, we want to check that
    the `user_type` session is set to `admin` before accessing the route. We also
    want to log each time someone accesses the route, but only after the page is processed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`admin-only`路由中，我们不只是添加闭包，而是添加一个包含闭包的数组作为最后一个参数。对于我们的目的，我们希望在访问路由之前检查`user_type`会话是否设置为`admin`。我们还希望在页面处理后记录每次有人访问路由，但只有在页面处理后才记录。
- en: In our `before` filter, we do a simple check of a session, and if that session
    doesn't equal `admin`, we return a notice and stop the route from returning its
    message. If the session does equal `admin`, the route proceeds as normal.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`before`过滤器中，我们简单地检查一个会话，如果该会话不等于`admin`，我们返回一个通知并阻止路由返回其消息。如果会话等于`admin`，则路由会正常进行。
- en: After the route is accessed, we create a log of the visit along with the date
    the route was accessed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问路由之后，我们创建一个访问的日志以及访问路由的日期。
- en: At this point, if we went to `admin-only` in our browser, the `before` filter
    would kick in and display the error message. Then, if we went to our logs directory
    and looked at the log, it would show the time of the attempt, the name of the
    log message, and the response. For us, it would show **You are not an Admin. Go
    Away!**.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，如果我们在浏览器中去到`admin-only`，`before`过滤器会启动并显示错误消息。然后，如果我们去到我们的日志目录并查看日志，它会显示尝试的时间、日志消息的名称和响应。对于我们来说，它会显示**You
    are not an Admin. Go Away!**。
- en: To make the route accessible, we create another route that simply sets the session
    we want and redirect back to our `admin-only` page. If we visit `set-admin`, it
    should automatically direct us to `admin-only` and display the success page. Also,
    if we look in our logs, we'll see the line for our successful attempt.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使路由可访问，我们创建另一个路由，简单地设置我们想要的会话，然后重定向回我们的`admin-only`页面。如果我们访问`set-admin`，它应该自动将我们重定向到`admin-only`并显示成功页面。此外，如果我们查看我们的日志，我们会看到我们成功尝试的行。
- en: There's more...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This is a very rudimentary authentication method simply to show the usefulness
    of filters. For better authentication, use Laravel's built-in methods.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常基本的身份验证方法，只是为了展示过滤器的有用性。对于更好的身份验证，使用Laravel内置的方法。
- en: Using route groups
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由组
- en: When creating a web app, we may find a few routes that need the same URL prefix
    or filter. Using Laravel's route groups, we can easily apply these to multiple
    routes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Web应用程序时，我们可能会发现一些需要相同URL前缀或过滤器的路由。使用Laravel的路由组，我们可以轻松地将它们应用到多个路由。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we just need a standard installation of Laravel.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们只需要一个标准的Laravel安装。
- en: How to do it…
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'To complete this recipe, follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'In our `app/filters.php` file, create a filter to check for a user:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/filters.php`文件中，创建一个检查用户的过滤器：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `app/routes.php` file, create a route that can set our profile session:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/routes.php`文件中，创建一个可以设置我们的个人资料会话的路由：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In `routes.php`, create our route group:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，创建我们的路由组：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In our browser, we then go to `http://path/to/our/server/profile/user`, where
    we will get an error. If we then go to `http://path/to/our/server/set-profile`,
    it will redirect us and show the correct page.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的浏览器中，然后我们去到`http://path/to/our/server/profile/user`，我们会得到一个错误。如果我们然后去到`http://path/to/our/server/set-profile`，它会重定向我们并显示正确的页面。
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first thing we need to do is create a filter. This simple filter will check
    a session name, `profile`, to see if it equals `user`. If not, it won't let us
    proceed any further.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建一个过滤器。这个简单的过滤器将检查一个会话名称，`profile`，看看它是否等于`user`。如果不是，它就不会让我们继续下去。
- en: Back in our routes, we then create a route that will set the `profile` session
    for us and then redirect us to the route group. Setting the session would normally
    be done after logging in, but here we're just testing to make sure it works.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的路由中，然后创建一个将为我们设置`profile`会话然后重定向我们到路由组的路由。通常在登录后会设置会话，但这里我们只是测试以确保它有效。
- en: Finally, we create our route group. For this group, we want every route within
    it to run through the `checkUser` filter before allowing access. We also want
    these routes to have `profile/` come before them. We do this by adding them to
    the array just before we call the group's closure. Now, any route we create inside
    this group must pass the filter and will be accessible using the `profile` prefix.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建我们的路由组。对于这个组，我们希望在允许访问之前，组内的每个路由都要通过`checkUser`过滤器。我们还希望这些路由在它们之前有`profile/`。我们通过在调用组的闭包之前将它们添加到数组中来实现这一点。现在，我们在这个组内创建的任何路由都必须通过过滤器，并且可以使用`profile`前缀访问。
- en: Building a RESTful API with routes
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路由构建RESTful API
- en: A common need for a modern web application is having an API that third-parties
    can run queries against. Since Laravel is built with RESTful patterns as a focus,
    it's quite easy to build a full API with very little work.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web应用程序的一个常见需求是拥有一个第三方可以运行查询的API。由于Laravel是以RESTful模式为重点构建的，因此很容易用很少的工作来构建一个完整的API。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation with a properly configured
    MySQL database tied into our application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个标准的Laravel安装，并且正确配置了MySQL数据库，与我们的应用程序连接起来。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法…
- en: 'To complete this recipe, follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'Open the command line, go to the root directory of the Laravel installation,
    and create a migration for our table using the following:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行，转到Laravel安装的根目录，并使用以下命令为我们的表创建一个迁移：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `app/database/migrations` directory, find the file similar to `2012_12_01_222821_create_shows_table.php`
    and create the schema for our table as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/database/migrations`目录中，找到类似`2012_12_01_222821_create_shows_table.php`的文件，并按照以下方式创建我们表的模式：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Back in the command line, run the migration as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到命令行，按照以下方式运行迁移：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create another migration to add some test data:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个迁移以添加一些测试数据：
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `app/database/migrations` folder, open the `add_shows_data` file and
    add the query as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/database/migrations`文件夹中，打开`add_shows_data`文件，并添加以下查询：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the command line, run the migration as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，按照以下方式运行迁移：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `app/models` directory, create a file named `Show.php` and add the following
    code to it:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/models`目录中，创建一个名为`Show.php`的文件，并添加以下代码：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In `routes.php`, create a route to return a JSON of all the shows or a single
    show as follows:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，创建一个返回所有show或单个show的JSON的路由：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a route that will add in new shows as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个将添加新show的路由如下：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a route that will delete a record:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个将删除记录的路由：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a route to update a record:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个更新记录的路由：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Make a route to hold our add and edit `show form`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由来保存我们的添加和编辑`show form`：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Make a route to show a list so we can delete a show:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由来显示一个列表，以便我们可以删除一个show：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In our `app/views` folder, create a file named `show-form.php` and add the
    following code to it:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/views`文件夹中，创建一个名为`show-form.php`的文件，并添加以下代码：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, in `app/views`, create a file named `show-delete.php` and add the following
    code to it:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`app/views`中，创建一个名为`show-delete.php`的文件，并添加以下代码：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Test it out by going to the `show-form` and `show-delete` routes in the browser.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过浏览器访问`show-form`和`show-delete`路由来测试它。
- en: How it works...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Our first step is to create our tables with the data we want to use. Using artisan
    and migrations, we create a shows table and then add in some test data.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是使用artisan和migrations创建我们想要使用的数据表。我们创建一个shows表，然后添加一些测试数据。
- en: For our routes, we're going to respond to four different HTTP verbs, `GET`,
    `POST`, `PUT`, and `DELETE`, but all at the same URL, `show`. The `GET` request
    will serve two purposes. First, if no ID is passed in the URL, it will display
    the entire list from the database. Second, if there is an ID, it will display
    the single record. By returning the eloquent object directly, it will automatically
    take our object and display it as JSON.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的路由，我们将响应四种不同的HTTP动词，`GET`，`POST`，`PUT`和`DELETE`，但都在同一个URL，`show`上。`GET`请求将有两个目的。首先，如果URL中没有传入ID，它将显示来自数据库的整个列表。其次，如果有ID，它将显示单个记录。通过直接返回eloquent对象，它将自动将我们的对象显示为JSON。
- en: Our next route responds to the `POST` request and will add a new record in the
    database. It will then display the record that was saved as JSON.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个路由响应`POST`请求，并将在数据库中添加一个新记录。然后显示保存的记录为JSON。
- en: Then, we add a route that responds to the `DELETE` request. It takes the `id`
    parameter, deletes the record, and displays JSON that the deletion was successful.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加一个响应`DELETE`请求的路由。它获取`id`参数，删除记录，并显示JSON以确认删除成功。
- en: Lastly, we have a route responding to a `PUT` request with an `id` parameter.
    This route will load in the record for the passed in ID and then edit the values.
    If it updates correctly, it displays a JSON of the updated record.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个响应`PUT`请求和`id`参数的路由。该路由将加载传入ID的记录，然后编辑值。如果更新正确，它会显示更新后的记录的JSON。
- en: To show the API in action, we need to create a form to add and update the records.
    Our `show-form` route checks to see if an ID was passed in, and if so, it creates
    a form using the `PUT` method and loads the record's values into the fields. If
    no ID is set, we create a blank form using the `POST` method.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要展示API的运行情况，我们需要创建一个表单来添加和更新记录。我们的`show-form`路由检查是否传入了ID，如果是，则使用`PUT`方法创建一个表单，并将记录的值加载到字段中。如果没有设置ID，我们将使用`POST`方法创建一个空白表单。
- en: If we want to delete a record, our `show-delete` route will display a list of
    shows and a delete button next to each one. Those buttons are actually part of
    a form that uses the `DELETE` method.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要删除记录，我们的`show-delete`路由将显示一个节目列表，并在每个节目旁边显示一个删除按钮。这些按钮实际上是使用`DELETE`方法的表单的一部分。
- en: 'We could also test the routes using `curl` in the command line. For example,
    to get the full list, use the following line of code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用命令行中的`curl`来测试路由。例如，要获取完整列表，请使用以下代码行：
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To post to the API, use the following line of code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布到API，请使用以下代码行：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: There's more...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Keep in mind that this API example is very basic. To make it better, we would
    need to add in some validation whenever we add or update a record. It would also
    be a good idea to add in some kind of authentication so that the public wouldn't
    be able to alter our table and delete records.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个API示例非常基础。要使其更好，我们需要在添加或更新记录时添加一些验证。还可以考虑添加某种身份验证，以便公众无法更改我们的表格和删除记录。
- en: We could also use Laravel's resourceful controllers to accomplish something
    similar. More information about those can be found in the documentation at [http://laravel.com/docs/controllers#resource-controllers](http://laravel.com/docs/controllers#resource-controllers).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用Laravel的资源控制器来实现类似的功能。有关更多信息，请参阅文档[http://laravel.com/docs/controllers#resource-controllers](http://laravel.com/docs/controllers#resource-controllers)。
- en: Using named routes
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命名路由
- en: There may be times when we need to change our route's name. On a large site,
    this could cause a lot of problems if we have multiple links to an incorrect route.
    Laravel provides an easy-to-use way of assigning names to our routes, so we never
    have to worry if they change.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要更改路由的名称。在一个大型网站上，如果我们有多个链接指向错误的路由，这可能会引起很多问题。Laravel提供了一种简单易用的方式来为我们的路由分配名称，这样我们就不必担心它们是否会更改。
- en: Getting ready
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤操作：
- en: 'In our `routes.php` file, create a named route as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，创建一个命名路由如下：
- en: '[PRE29]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a route that performs a simple redirect to the named route:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个执行简单重定向到命名路由的路由：
- en: '[PRE30]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a route that displays a link to the named route:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个显示链接到命名路由的路由：
- en: '[PRE31]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the browser, visit `http://your-server/redirect` and `http://your-server/link`
    (where `your-server` is the URL for the server) and notice that they send us to
    the `main-route` route.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，访问`http://your-server/redirect`和`http://your-server/link`（其中`your-server`是服务器的URL），注意它们将我们发送到`main-route`路由。
- en: 'Now, rename the `main-route` route to `new-route`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`main-route`路由重命名为`new-route`：
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the browser, visit the **redirect** and **link** routes and see where they
    send us now.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，访问**redirect**和**link**路由，看看它们现在将我们发送到哪里。
- en: How it works...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: There may be times when your route will need to change; for example, if a client
    has a blog but wants the route "posts" to become "articles". If we have links
    to the "posts" route throughout our site, it would mean we need to find every
    file and make sure they're changed. By using a named route, we can rename the
    route to anything we want, and as long as all our links point to the name, everything
    will stay updated.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您的路由可能需要更改；例如，如果客户有一个博客，但希望路由“posts”变成“articles”。如果我们在整个网站上都有指向“posts”路由的链接，这意味着我们需要找到每个文件并确保它们已更改。通过使用命名路由，我们可以将路由重命名为任何我们想要的名称，只要我们所有的链接都指向该名称，一切都会保持更新。
- en: In our example, we have route `main-route` and have it named `named`. Now, if
    we want to link or redirect to the route, we can use `route()` pointing to the
    named route. Then, if we change the route to `new-route` and recheck those links,
    it will automatically go to the changed route.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们有路由`main-route`并将其命名为`named`。现在，如果我们想要链接或重定向到该路由，我们可以使用`route()`指向命名路由。然后，如果我们将路由更改为`new-route`并重新检查这些链接，它将自动转到更改后的路由。
- en: Using a subdomain in your route
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的路由中使用子域
- en: Many modern web applications offer customized content to their users, including
    giving them a custom subdomain where they can access their content. For example,
    instead of a user's profile page being `http://example.com/users/37`, we might
    want to offer `http://username.example.com`. By changing some DNS and Apache settings,
    we can easily provide the same functionality in Laravel.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代Web应用程序为其用户提供定制内容，包括为他们提供一个可以访问其内容的自定义子域。例如，用户的个人资料页面不是`http://example.com/users/37`，我们可能希望提供`http://username.example.com`。通过更改一些DNS和Apache设置，我们可以在Laravel中轻松提供相同的功能。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: For this recipe, we need access to our DNS settings and our server's Apache
    configurations. We'll also need a properly configured MySQL database and a standard
    Laravel installation. Throughout the recipe, we'll be using `example.com` as the
    domain name.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要访问我们的DNS设置和我们服务器的Apache配置。我们还需要一个正确配置的MySQL数据库和一个标准的Laravel安装。在整个配方中，我们将使用`example.com`作为域名。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，请按照以下步骤操作：
- en: In the DNS for our domain name, we need to add an "A" record using a wildcard
    for the subdomain, such as `*.example.com`, and then point it to our server's
    IP address.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们域名的DNS中，我们需要添加一个"A"记录，使用通配符为子域，例如`*.example.com`，然后将其指向我们服务器的IP地址。
- en: 'Open up Apache''s `httpd.conf` file and add a virtual host to it as follows:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Apache的`httpd.conf`文件，并添加一个虚拟主机，如下所示：
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the command line, go to our application route and create a migration for
    our `names` table:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，转到我们的应用程序路由并为我们的`names`表创建一个迁移：
- en: '[PRE34]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the `migrations` directory, open the `create_names_table` file and add our
    schema:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`migrations`目录中，打开`create_names_table`文件并添加我们的模式：
- en: '[PRE35]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Back in the command line, create another migration to add some test data:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到命令行，创建另一个迁移以添加一些测试数据：
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Open the `add_names_data` file in the `migrations` directory:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`migrations`目录中打开`add_names_data`文件：
- en: '[PRE37]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the command line, run the migration as follows:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，运行迁移如下：
- en: '[PRE38]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create a route to get information from the `names` table based on the subdomain:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由，根据子域从`names`表中获取信息：
- en: '[PRE39]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the browser, visit our domain with a relevant subdomain such as `http://ted.example.com`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，访问我们的域名，使用相关子域，例如`http://ted.example.com`。
- en: How it works...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To start off, we need to update our DNS and our server. In our DNS, we create
    a wildcard subdomain and create a virtual host in our Apache configuration. This
    makes sure that any subdomains used will go to our main application.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要更新我们的DNS和我们的服务器。在我们的DNS中，我们创建一个通配符子域，并在我们的Apache配置中创建一个虚拟主机。这样可以确保使用的任何子域都将转到我们的主要应用程序。
- en: For our default route, we use the `parse_url` function of PHP to get the domain
    name, explode it into an array, and use only the first element. We can then query
    the database using the subdomain and create a customized experience for the user.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的默认路由，我们使用PHP的`parse_url`函数来获取域名，将其分解为数组，并仅使用第一个元素。然后，我们可以使用子域查询数据库，并为用户创建定制体验。
- en: There's more...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'This recipe allows for a single route to process the subdomains, but if we
    would like to use more routes with a subdomain, we could use a route group similar
    to the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方允许一个单一的路由来处理子域，但如果我们想要使用更多带有子域的路由，我们可以使用类似以下的路由组：
- en: '[PRE40]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
