["```php\n    namespace Application\\Generic\\Hydrator;\n    class GetSet\n    {\n      // code\n    }\n    ```", "```php\n    public static function hydrate(array $array, $object)\n    {\n      $class = get_class($object);\n      $methodList = get_class_methods($class);\n      foreach ($methodList as $method) {\n        preg_match('/^(set)(.*?)$/i', $method, $matches);\n        $prefix = $matches[1] ?? '';\n        $key    = $matches[2] ?? '';\n        $key    = strtolower(substr($key, 0, 1)) . substr($key, 1);\n        if ($prefix == 'set' && !empty($array[$key])) {\n            $object->$method($array[$key]);\n        }\n      }\n      return $object;\n    }\n    ```", "```php\nnamespace Application\\Entity;\nclass Person\n{\n  protected $firstName  = '';\n  protected $lastName   = '';\n  protected $address    = '';\n  protected $city       = '';\n  protected $stateProv  = '';\n  protected $postalCode = '';\n  protected $country    = '';\n\n  public function getFirstName()\n  {\n    return $this->firstName;\n  }\n\n  public function setFirstName($firstName)\n  {\n    $this->firstName = $firstName;\n  }\n\n  // etc.\n}\n```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Entity\\Person;\nuse Application\\Generic\\Hydrator\\GetSet;\n```", "```php\n$a['firstName'] = 'Li\\'l Abner';\n$a['lastName']  = 'Yokum';\n$a['address']   = '1 Dirt Street';\n$a['city']      = 'Dogpatch';\n$a['stateProv'] = 'Kentucky';\n$a['postalCode']= '12345';\n$a['country']   = 'USA';\n```", "```php\n$b = GetSet::hydrate($a, new Person());\nvar_dump($b);\n```", "```php\n    namespace Application\\Generic\\Hydrator;\n    class GetSet\n    {\n      // code\n    }\n    ```", "```php\n    public static function extract($object)\n    {\n      $array = array();\n      $class = get_class($object);\n      $methodList = get_class_methods($class);\n      foreach ($methodList as $method) {\n        preg_match('/^(get)(.*?)$/i', $method, $matches);\n        $prefix = $matches[1] ?? '';\n        $key    = $matches[2] ?? '';\n        $key    = strtolower(substr($key, 0, 1)) . substr($key, 1);\n        if ($prefix == 'get') {\n          $array[$key] = $object->$method();\n        }\n      }\n      return $array;\n    }\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Entity\\Person;\nuse Application\\Generic\\Hydrator\\GetSet;\n```", "```php\n$obj = new Person();\n$obj->setFirstName('Li\\'lAbner');\n$obj->setLastName('Yokum');\n$obj->setAddress('1DirtStreet');\n$obj->setCity('Dogpatch');\n$obj->setStateProv('Kentucky');\n$obj->setPostalCode('12345');\n$obj->setCountry('USA');\n```", "```php\n$a = GetSet::extract($obj);\nvar_dump($a);\n```", "```php\n    namespace Application\\Generic\\Hydrator;\n    use InvalidArgumentException;\n    use Application\\Generic\\Hydrator\\Strategy\\ { \n    GetSet, PublicProps, Extending };\n    class Any\n    {\n      const STRATEGY_PUBLIC  = 'PublicProps';\n      const STRATEGY_GET_SET = 'GetSet';\n      const STRATEGY_EXTEND  = 'Extending';\n      protected $strategies;\n      public $chosen;\n    ```", "```php\n    public function __construct()\n    {\n      $this->strategies[self::STRATEGY_GET_SET] = new GetSet();\n      $this->strategies[self::STRATEGY_PUBLIC] = new PublicProps();\n      $this->strategies[self::STRATEGY_EXTEND] = new Extending();\n    }\n    ```", "```php\n    public function addStrategy($key, HydratorInterface $strategy)\n    {\n      $this->strategies[$key] = $strategy;\n    }\n    ```", "```php\n    public function hydrate(array $array, $object)\n    {\n      $strategy = $this->chooseStrategy($object);\n      $this->chosen = get_class($strategy);\n      return $strategy::hydrate($array, $object);\n    }\n\n    public function extract($object)\n    {\n      $strategy = $this->chooseStrategy($object);\n      $this->chosen = get_class($strategy);\n      return $strategy::extract($object);\n    }\n    ```", "```php\n    public function chooseStrategy($object)\n    {\n      $strategy = NULL;\n      $methodList = get_class_methods(get_class($object));\n      if (!empty($methodList) && is_array($methodList)) {\n          $getSet = FALSE;\n          foreach ($methodList as $method) {\n            if (preg_match('/^get|set.*$/i', $method)) {\n                $strategy = $this->strategies[self::STRATEGY_GET_SET];\n          break;\n        }\n      }\n    }\n    ```", "```php\n    if (!$strategy) {\n        $vars = get_class_vars(get_class($object));\n        if (!empty($vars) && count($vars)) {\n            $strategy = $this->strategies[self::STRATEGY_PUBLIC];\n        }\n    }\n    ```", "```php\n    if (!$strategy) {\n        $strategy = $this->strategies[self::STRATEGY_EXTEND];\n    }\n    return $strategy;\n    }\n    }\n    ```", "```php\n    namespace Application\\Generic\\Hydrator\\Strategy;\n    interface HydratorInterface\n    {\n      public static function hydrate(array $array, $object);\n      public static function extract($object);\n    }\n    ```", "```php\n    namespace Application\\Generic\\Hydrator\\Strategy;\n    class GetSet implements HydratorInterface\n    {\n\n      public static function hydrate(array $array, $object)\n      {\n        // defined in the recipe:\n        // \"Creating an Array to Object Hydrator\"\n      }\n\n      public static function extract($object)\n      {\n        // defined in the recipe:\n        // \"Building an Object to Array Hydrator\"\n      }\n    }\n    ```", "```php\n    namespace Application\\Generic\\Hydrator\\Strategy;\n    class PublicProps implements HydratorInterface\n    {\n      public static function hydrate(array $array, $object)\n      {\n        $propertyList= array_keys(\n          get_class_vars(get_class($object)));\n        foreach ($propertyList as $property) {\n          $object->$property = $array[$property] ?? NULL;\n        }\n        return $object;\n      }\n\n      public static function extract($object)\n      {\n        $array = array();\n        $propertyList = array_keys(\n          get_class_vars(get_class($object)));\n        foreach ($propertyList as $property) {\n          $array[$property] = $object->$property;\n        }\n        return $array;\n      }\n    }\n    ```", "```php\n    namespace Application\\Generic\\Hydrator\\Strategy;\n    class Extending implements HydratorInterface\n    {\n      const UNDEFINED_PREFIX = 'undefined';\n      const TEMP_PREFIX = 'TEMP_';\n      const ERROR_EVAL = 'ERROR: unable to evaluate object';\n      public static function hydrate(array $array, $object)\n      {\n        $className = get_class($object);\n        $components = explode('\\\\', $className);\n        $realClass  = array_pop($components);\n        $nameSpace  = implode('\\\\', $components);\n        $tempClass = $realClass . self::TEMP_SUFFIX;\n        $template = 'namespace ' \n          . $nameSpace . '{'\n          . 'class ' . $tempClass \n          . ' extends ' . $realClass . ' '\n    ```", "```php\n    . '{ '\n    . '  protected $values; '\n    . '  public function __construct($array) '\n    . '  { $this->values = $array; '\n    . '    foreach ($array as $key => $value) '\n    . '       $this->$key = $value; '\n    . '  } '\n    . '  public function getArrayCopy() '\n    . '  { return $this->values; } '\n    ```", "```php\n    . '  public function __get($key) '\n    . '  { return $this->values[$key] ?? NULL; } '\n    ```", "```php\n    . '  public function __call($method, $params) '\n    . '  { '\n    . '    preg_match(\"/^(get|set)(.*?)$/i\", '\n    . '        $method, $matches); '\n    . '    $prefix = $matches[1] ?? \"\"; '\n    . '    $key    = $matches[2] ?? \"\"; '\n    . '    $key    = strtolower(substr($key, 0, 1)) ' \n    . '              substr($key, 1); '\n    . '    if ($prefix == \"get\") { '\n    . '        return $this->values[$key] ?? NULL; '\n    . '     } else { '\n    . '        $this->values[$key] = $params[0]; '\n    . '     } '\n    . '  } '\n    . '} '\n    . '} // ends namespace ' . PHP_EOL\n    ```", "```php\n    . 'namespace { '\n    . 'function build($array) '\n    . '{ return new ' . $nameSpace . '\\\\' \n    .    $tempClass . '($array); } '\n    . '} // ends global namespace '\n    . PHP_EOL;\n    ```", "```php\n    try {\n        eval($template);\n    } catch (ParseError $e) {\n        error_log(__METHOD__ . ':' . $e->getMessage());\n        throw new Exception(self::ERROR_EVAL);\n    }\n    return \\build($array);\n    }\n    ```", "```php\n    public static function extract($object)\n    {\n      $array = array();\n      $class = get_class($object);\n      $methodList = get_class_methods($class);\n      foreach ($methodList as $method) {\n        preg_match('/^(get)(.*?)$/i', $method, $matches);\n        $prefix = $matches[1] ?? '';\n        $key    = $matches[2] ?? '';\n        $key    = strtolower(substr($key, 0, 1)) \n        . substr($key, 1);\n        if ($prefix == 'get') {\n            $array[$key] = $object->$method();\n        }\n      }\n      $propertyList= array_keys(get_class_vars($class));\n      foreach ($propertyList as $property) {\n        $array[$property] = $object->$property;\n      }\n      return $array;\n      }\n    }\n    ```", "```php\n<?php\nnamespace Application\\Entity;\nclass Person\n{\n  protected $firstName  = '';\n  protected $lastName   = '';\n  protected $address    = '';\n  protected $city       = '';\n  protected $stateProv  = '';\n  protected $postalCode = '';\n  protected $country    = '';\n\n    public function getFirstName()\n    {\n      return $this->firstName;\n    }\n\n    public function setFirstName($firstName)\n    {\n      $this->firstName = $firstName;\n    }\n\n  // be sure to define remaining getters and setters\n\n}\n\n<?php\nnamespace Application\\Entity;\nclass PublicPerson\n{\n  private $id = NULL;\n  public $firstName  = '';\n  public $lastName   = '';\n  public $address    = '';\n  public $city       = '';\n  public $stateProv  = '';\n  public $postalCode = '';\n  public $country    = '';\n}\n\n<?php\nnamespace Application\\Entity;\n\nclass ProtectedPerson\n{\n  private $id = NULL;\n  protected $firstName  = '';\n  protected $lastName   = '';\n  protected $address    = '';\n  protected $city       = '';\n  protected $stateProv  = '';\n  protected $postalCode = '';\n  protected $country    = '';\n}\n```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Entity\\ { Person, PublicPerson, ProtectedPerson };\nuse Application\\Generic\\Hydrator\\Any;\nuse Application\\Generic\\Hydrator\\Strategy\\ { GetSet, Extending, PublicProps };\n```", "```php\n$obj = new Person();\n$obj->setFirstName('Li\\'lAbner');\n$obj->setLastName('Yokum');\n$obj->setAddress('1 Dirt Street');\n$obj->setCity('Dogpatch');\n$obj->setStateProv('Kentucky');\n$obj->setPostalCode('12345');\n$obj->setCountry('USA');\n```", "```php\n$hydrator = new Any();\n$b = $hydrator->extract($obj);\necho \"\\nChosen Strategy: \" . $hydrator->chosen . \"\\n\";\nvar_dump($b);\n```", "```php\n$a = [\n  'firstName'  => 'Li\\'lAbner',\n  'lastName'   => 'Yokum',\n  'address'    => '1 Dirt Street',\n  'city'       => 'Dogpatch',\n  'stateProv'  => 'Kentucky',\n  'postalCode' => '12345',\n  'country'    => 'USA'\n];\n\n$p = $hydrator->hydrate($a, new PublicPerson());\necho \"\\nChosen Strategy: \" . $hydrator->chosen . \"\\n\";\nvar_dump($p);\n```", "```php\n$q = $hydrator->hydrate($a, new ProtectedPerson());\necho \"\\nChosen Strategy: \" . $hydrator->chosen . \"\\n\";\necho \"Name: {$q->getFirstName()} {$q->getLastName()}\\n\";\necho \"Name: {$q->firstName} {$q->lastName}\\n\";\nvar_dump($q);\n```", "```php\n    namespace Application\\Database\\Mapper;\n    use InvalidArgumentException;\n    class FieldConfig\n    {\n      const ERROR_SOURCE = \n        'ERROR: need to specify destTable and/or source';\n      const ERROR_DEST   = 'ERROR: need to specify either '\n        . 'both destTable and destCol or neither';\n    ```", "```php\n    public $key;\n    public $source;\n    public $destTable;\n    public $destCol;\n    public $default;\n    ```", "```php\n    public function __construct($source = NULL,\n                                $destTable = NULL,\n                                $destCol   = NULL,\n                                $default   = NULL)\n    {\n      // generate key from source + destTable + destCol\n      $this->key = $source . '.' . $destTable . '.' . $destCol;\n      $this->source = $source;\n      $this->destTable = $destTable;\n      $this->destCol = $destCol;\n      $this->default = $default;\n      if (($destTable && !$destCol) || \n          (!$destTable && $destCol)) {\n          throw new InvalidArgumentException(self::ERROR_DEST);\n      }\n      if (!$destTable && !$source) {\n          throw new InvalidArgumentException(\n            self::ERROR_SOURCE);\n      }\n    }\n    ```", "```php\n    public function getDefault()\n    {\n      if (is_callable($this->default)) {\n          return call_user_func($this->default, $row);\n      } else {\n          return $this->default;\n      }\n    }\n    ```", "```php\n    public function getKey()\n    {\n      return $this->key;\n    }\n\n    public function setKey($key)\n    {\n      $this->key = $key;\n    }\n\n    // etc.\n    ```", "```php\n    namespace Application\\Database\\Mapper;\n    class Mapping\n    {\n      protected $sourceTable;\n      protected $destTable;\n      protected $fields;\n      protected $sourceCols;\n      protected $destCols;\n\n      public function __construct(\n        $sourceTable, $destTable, $fields = NULL)\n      {\n        $this->sourceTable = $sourceTable;\n        $this->destTable = $destTable;\n        $this->fields = $fields;\n      }\n    ```", "```php\n    public function getSourceTable()\n    {\n      return $this->sourceTable;\n    }\n    public function setSourceTable($sourceTable)\n    {\n      $this->sourceTable = $sourceTable;\n    }\n    // etc.\n    ```", "```php\n    public function addField(FieldConfig $field)\n    {\n      $this->fields[$field->getKey()] = $field;\n      return $this;\n    }\n    ```", "```php\n    public function getSourceColumns()\n    {\n      if (!$this->sourceCols) {\n          $this->sourceCols = array();\n          foreach ($this->getFields() as $field) {\n            if (!empty($field->getSource())) {\n                $this->sourceCols[$field->getKey()] = \n                  $field->getSource();\n            }\n          }\n      }\n      return $this->sourceCols;\n    }\n    ```", "```php\n    public function getDestColumns($table)\n    {\n      if (empty($this->destCols[$table])) {\n          foreach ($this->getFields() as $field) {\n            if ($field->getDestTable()) {\n              if ($field->getDestTable() == $table) {\n                  $this->destCols[$table][$field->getKey()] = \n                    $field->getDestCol();\n              }\n            }\n          }\n      }\n      return $this->destCols[$table];\n    }\n    ```", "```php\n    public function mapData($sourceData, $destTable)\n    {\n      $dest = array();\n      foreach ($this->fields as $field) {\n        if ($field->getDestTable() == $destTable) {\n            $dest[$field->getDestCol()] = NULL;\n            $default = $field->getDefault($sourceData);\n            if ($default) {\n                $dest[$field->getDestCol()] = $default;\n            } else {\n                $dest[$field->getDestCol()] = \n                      $sourceData[$field->getSource()];\n            }\n        }\n      }\n      return $dest;\n    }\n    }\n    ```", "```php\n    public function getSourceSelect($where = NULL)\n    {\n      $sql = 'SELECT ' \n      . implode(',', $this->getSourceColumns()) . ' ';\n      $sql .= 'FROM ' . $this->getSourceTable() . ' ';\n      if ($where) {\n        $where = trim($where);\n        if (stripos($where, 'WHERE') !== FALSE) {\n            $sql .= $where;\n        } else {\n            $sql .= 'WHERE ' . $where;\n        }\n      }\n      return trim($sql);\n    }\n    ```", "```php\n    public function getDestInsert($table)\n    {\n      $sql = 'INSERT INTO ' . $table . ' ';\n      $sql .= '( ' \n      . implode(',', $this->getDestColumns($table)) \n      . ' ) ';\n      $sql .= ' VALUES ';\n      $sql .= '( :' \n      . implode(',:', $this->getDestColumns($table)) \n      . ' ) ';\n      return trim($sql);\n    }\n    ```", "```php\nCREATE TABLE `prospects_11` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `first_name` varchar(128) NOT NULL,\n  `last_name` varchar(128) NOT NULL,\n  `address` varchar(256) DEFAULT NULL,\n  `city` varchar(64) DEFAULT NULL,\n  `state_province` varchar(32) DEFAULT NULL,\n  `postal_code` char(16) NOT NULL,\n  `phone` varchar(16) NOT NULL,\n  `country` char(2) NOT NULL,\n  `email` varchar(250) NOT NULL,\n  `status` char(8) DEFAULT NULL,\n  `budget` decimal(10,2) DEFAULT NULL,\n  `last_updated` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `UNIQ_35730C06E7927C74` (`email`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```", "```php\nCREATE TABLE `customer_11` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(256) CHARACTER SET latin1 \n     COLLATE latin1_general_cs NOT NULL,\n  `balance` decimal(10,2) NOT NULL,\n  `email` varchar(250) NOT NULL,\n  `password` char(16) NOT NULL,\n  `status` int(10) unsigned NOT NULL DEFAULT '0',\n  `security_question` varchar(250) DEFAULT NULL,\n  `confirm_code` varchar(32) DEFAULT NULL,\n  `profile_id` int(11) DEFAULT NULL,\n  `level` char(3) NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `UNIQ_81398E09E7927C74` (`email`)\n) ENGINE=InnoDB AUTO_INCREMENT=80 DEFAULT CHARSET=utf8 COMMENT='Customers';\n\nCREATE TABLE `profile_11` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `address` varchar(256) NOT NULL,\n  `city` varchar(64) NOT NULL,\n  `state_province` varchar(32) NOT NULL,\n  `postal_code` varchar(10) NOT NULL,\n  `country` varchar(3) NOT NULL,\n  `phone` varchar(16) NOT NULL,\n  `photo` varchar(128) NOT NULL,\n  `dob` datetime NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=80 DEFAULT CHARSET=utf8 COMMENT='Customers';\n```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\ndefine('DEFAULT_PHOTO', 'person.gif');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Database\\Mapper\\ { FieldConfig, Mapping };\nuse Application\\Database\\Connection;\n$conn = new Connection(include __DIR__ . DB_CONFIG_FILE);\n```", "```php\n$conn->pdo->query('DELETE FROM customer_11');\n$conn->pdo->query('DELETE FROM profile_11');\n```", "```php\n$mapper = new Mapping('prospects_11', ['customer_11','profile_11']);\n```", "```php\n$mapper>addField(new FieldConfig('email','customer_11','email'))\n```", "```php\n->addField(new FieldConfig('first_name','customer_11','name',\n  function ($row) { return trim(($row['first_name'] ?? '') \n. ' ' .  ($row['last_name'] ?? ''));}))\n->addField(new FieldConfig('last_name'))\n```", "```php\n->addField(new FieldConfig('status','customer_11','status',\n  function ($row) { return $row['status'] ?? 'Unknown'; }))\n```", "```php\n->addField(new FieldConfig(NULL,'customer_11','level','BEG'))\n->addField(new FieldConfig(NULL,'customer_11','password',\n  function ($row) { return $row['phone']; }))\n```", "```php\n->addField(new FieldConfig('address','profile_11','address'))\n->addField(new FieldConfig('city','profile_11','city'))\n->addField(new FieldConfig('state_province','profile_11', \n'state_province', function ($row) { \n  return $row['state_province'] ?? 'Unknown'; }))\n->addField(new FieldConfig('postal_code','profile_11',\n'postal_code'))\n->addField(new FieldConfig('phone','profile_11','phone'))\n->addField(new FieldConfig('country','profile_11','country'))\n->addField(new FieldConfig(NULL,'profile_11','photo',\nDEFAULT_PHOTO))\n->addField(new FieldConfig(NULL,'profile_11','dob',\ndate('Y-m-d')));\n```", "```php\n$idCallback = function ($row) { return $row['id']; };\n$mapper->addField(new FieldConfig('id','customer_11','id',\n$idCallback))\n->addField(new FieldConfig(NULL,'customer_11','profile_id',\n$idCallback))\n->addField(new FieldConfig('id','profile_11','id',$idCallback));\n```", "```php\n$sourceSelect  = $mapper->getSourceSelect();\n$custInsert    = $mapper->getDestInsert('customer_11');\n$profileInsert = $mapper->getDestInsert('profile_11');\n```", "```php\n$sourceStmt  = $conn->pdo->prepare($sourceSelect);\n$custStmt    = $conn->pdo->prepare($custInsert);\n$profileStmt = $conn->pdo->prepare($profileInsert);\n```", "```php\n$sourceStmt->execute();\nwhile ($row = $sourceStmt->fetch(PDO::FETCH_ASSOC)) {\n  $custData = $mapper->mapData($row, 'customer_11');\n  $custStmt->execute($custData);\n  $profileData = $mapper->mapData($row, 'profile_11');\n  $profileStmt->execute($profileData);\n  echo \"Processing: {$custData['name']}\\n\";\n}\n```", "```php\n    CREATE TABLE `purchases` (\n      `id` int(11) NOT NULL AUTO_INCREMENT,\n      `transaction` varchar(8) NOT NULL,\n      `date` datetime NOT NULL,\n      `quantity` int(10) unsigned NOT NULL,\n      `sale_price` decimal(8,2) NOT NULL,\n      `customer_id` int(11) DEFAULT NULL,\n      `product_id` int(11) DEFAULT NULL,\n      PRIMARY KEY (`id`),\n      KEY `IDX_C3F3` (`customer_id`),\n      KEY `IDX_665A` (`product_id`),\n      CONSTRAINT `FK_665A` FOREIGN KEY (`product_id`) REFERENCES `products` (`id`),\n      CONSTRAINT `FK_C3F3` FOREIGN KEY (`customer_id`) REFERENCES `customer` (`id`)\n    );\n    ```", "```php\n    namespace Application\\Entity;\n\n    class Purchase extends Base\n    {\n\n      const TABLE_NAME = 'purchases';\n      protected $transaction = '';\n      protected $date = NULL;\n      protected $quantity = 0;\n      protected $salePrice = 0.0;\n      protected $customerId = 0;\n      protected $productId = 0;\n\n      protected $mapping = [\n        'id'            => 'id',\n        'transaction'   => 'transaction',\n        'date'          => 'date',\n        'quantity'      => 'quantity',\n        'sale_price'    => 'salePrice',\n        'customer_id'   => 'customerId',\n        'product_id'    => 'productId',\n      ];\n\n      public function getTransaction() : string\n      {\n        return $this->transaction;\n      }\n      public function setTransaction($transaction)\n      {\n        $this->transaction = $transaction;\n      }\n      // NOTE: other getters / setters are not shown here\n    }\n    ```", "```php\n    CREATE TABLE `products` (\n      `id` int(11) NOT NULL AUTO_INCREMENT,\n      `sku` varchar(16) DEFAULT NULL,\n      `title` varchar(255) NOT NULL,\n      `description` varchar(4096) DEFAULT NULL,\n      `price` decimal(10,2) NOT NULL,\n      `special` int(11) NOT NULL,\n      `link` varchar(128) NOT NULL,\n      PRIMARY KEY (`id`),\n      UNIQUE KEY `UNIQ_38C4` (`sku`)\n    );\n    ```", "```php\n    namespace Application\\Entity;\n\n    class Product extends Base\n    {\n\n      const TABLE_NAME = 'products';\n      protected $sku = '';\n      protected $title = '';\n      protected $description = '';\n      protected $price = 0.0;\n      protected $special = 0;\n      protected $link = '';\n\n      protected $mapping = [\n        'id'          => 'id',\n        'sku'         => 'sku',\n        'title'       => 'title',\n        'description' => 'description',\n        'price'       => 'price',\n        'special'     => 'special',\n        'link'        => 'link',\n      ];\n\n      public function getSku() : string\n      {\n        return $this->sku;\n      }\n      public function setSku($sku)\n      {\n        $this->sku = $sku;\n      }\n      // NOTE: other getters / setters are not shown here\n    }\n    ```", "```php\n    protected $purchases = array();\n    public function addPurchase($purchase)\n    {\n      $this->purchases[] = $purchase;\n    }\n    public function getPurchases()\n    {\n      return $this->purchases;\n    }\n    ```", "```php\n    protected $product = NULL;\n    public function getProduct()\n    {\n      return $this->product;\n    }\n    public function setProduct(Product $product)\n    {\n      $this->product = $product;\n    }\n    ```", "```php\n    namespace Application\\Database;\n    use PDO;\n    use PDOException;\n    use Application\\Entity\\Customer;\n    use Application\\Entity\\Product;\n    use Application\\Entity\\Purchase;\n    class CustomerOrmService_1 extends CustomerService\n    {\n      // add methods here\n    }\n    ```", "```php\n    protected function fetchPurchasesForCustomer(Customer $cust)\n    {\n      $sql = 'SELECT u.*,r.*,u.id AS purch_id '\n        . 'FROM purchases AS u '\n        . 'JOIN products AS r '\n        . 'ON r.id = u.product_id '\n        . 'WHERE u.customer_id = :id '\n        . 'ORDER BY u.date';\n      $stmt = $this->connection->pdo->prepare($sql);\n      $stmt->execute(['id' => $cust->getId()]);\n      while ($result = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        $product = Product::arrayToEntity($result, new Product());\n        $product->setId($result['product_id']);\n        $purch = Purchase::arrayToEntity($result, new Purchase());\n        $purch->setId($result['purch_id']);\n        $purch->setProduct($product);\n        $cust->addPurchase($purch);\n      }\n      return $cust;\n    }\n    ```", "```php\n    public function fetchByIdAndEmbedPurchases($id)\n    {\n      return $this->fetchPurchasesForCustomer(\n        $this->fetchById($id));\n    }\n    ```", "```php\n    public function setPurchases(Closure $purchaseLookup)\n    {\n      $this->purchases = $purchaseLookup;\n    }\n    ```", "```php\n    namespace Application\\Database;\n    use PDO;\n    use PDOException;\n    use Application\\Entity\\Customer;\n    use Application\\Entity\\Product;\n    use Application\\Entity\\Purchase;\n    class CustomerOrmService_2 extends CustomerService\n    {\n      // code\n    }\n    ```", "```php\n    public function fetchPurchaseById($purchId)\n    {\n      if (!$this->purchPreparedStmt) {\n          $sql = 'SELECT * FROM purchases WHERE id = :id';\n          $this->purchPreparedStmt = \n          $this->connection->pdo->prepare($sql);\n      }\n      $this->purchPreparedStmt->execute(['id' => $purchId]);\n      $result = $this->purchPreparedStmt->fetch(PDO::FETCH_ASSOC);\n      return Purchase::arrayToEntity($result, new Purchase());\n    }\n    ```", "```php\n    public function fetchProductById($prodId)\n    {\n      if (!isset($this->products[$prodId])) {\n          if (!$this->prodPreparedStmt) {\n              $sql = 'SELECT * FROM products WHERE id = :id';\n              $this->prodPreparedStmt = \n              $this->connection->pdo->prepare($sql);\n          }\n          $this->prodPreparedStmt->execute(['id' => $prodId]);\n          $result = $this->prodPreparedStmt\n          ->fetch(PDO::FETCH_ASSOC);\n          $this->products[$prodId] = \n            Product::arrayToEntity($result, new Product());\n      }\n      return $this->products[$prodId];\n    }\n    ```", "```php\n    public function fetchPurchasesForCustomer(Customer $cust)\n    {\n      $sql = 'SELECT id '\n        . 'FROM purchases AS u '\n        . 'WHERE u.customer_id = :id '\n        . 'ORDER BY u.date';\n      $stmt = $this->connection->pdo->prepare($sql);\n      $stmt->execute(['id' => $cust->getId()]);\n      while ($result = $stmt->fetch(PDO::FETCH_ASSOC)) {\n        $cust->addPurchaseLookup(\n        $result['id'],\n        function ($purchId, $service) { \n          $purchase = $service->fetchPurchaseById($purchId);\n          $product  = $service->fetchProductById(\n                      $purchase->getProductId());\n          $purchase->setProduct($product);\n          return $purchase; }\n        );\n      }\n      return $cust;\n    }\n    ```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Database\\Connection;\nuse Application\\Database\\CustomerOrmService_1;\n```", "```php\n$service = new CustomerOrmService_1(new Connection(include __DIR__ . DB_CONFIG_FILE));\n$id   = rand(1,79);\n$cust = $service->fetchByIdAndEmbedPurchases($id);\n```", "```php\n  <!-- Customer Info -->\n  <h1><?= $cust->getname() ?></h1>\n  <div class=\"row\">\n    <div class=\"left\">Balance</div><div class=\"right\">\n      <?= $cust->getBalance(); ?></div>\n  </div>\n    <!-- etc. -->\n```", "```php\n  <!-- Purchases Info -->\n  <table>\n  <?php foreach ($cust->getPurchases() as $purchase) : ?>\n  <tr>\n  <td><?= $purchase->getTransaction() ?></td>\n  <td><?= $purchase->getDate() ?></td>\n  <td><?= $purchase->getQuantity() ?></td>\n  <td><?= $purchase->getSalePrice() ?></td>\n  <td><?= $purchase->getProduct()->getTitle() ?></td>\n  </tr>\n  <?php endforeach; ?>\n</table>\n```", "```php\n<?php\ndefine('DB_CONFIG_FILE', '/../config/db.config.php');\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Database\\Connection;\nuse Application\\Database\\CustomerOrmService_2;\n```", "```php\n$service = new CustomerOrmService_2(new Connection(include __DIR__ . DB_CONFIG_FILE));\n$id   = rand(1,79);\n```", "```php\n$cust = $service->fetchById($id);\n$cust = $service->fetchPurchasesForCustomer($cust);\n```", "```php\n<table>\n  <?php foreach($cust->getPurchases() as $purchId => $function) : ?>\n  <tr>\n  <?php $purchase = $function($purchId, $service); ?>\n  <td><?= $purchase->getTransaction() ?></td>\n  <td><?= $purchase->getDate() ?></td>\n  <td><?= $purchase->getQuantity() ?></td>\n  <td><?= $purchase->getSalePrice() ?></td>\n  <td><?= $purchase->getProduct()->getTitle() ?></td>\n  </tr>\n  <?php endforeach; ?>\n</table>\n```", "```php\n    namespace Application\\PubSub;\n    use SplSubject;\n    use SplObserver;\n    class Publisher implements SplSubject\n    {\n      // code\n    }\n    ```", "```php\n    protected $name;\n    protected $data;\n    protected $linked;\n    protected $subscribers;\n    ```", "```php\n    public function __construct($name)\n    {\n      $this->name = $name;\n      $this->data = array();\n      $this->subscribers = array();\n      $this->linked = array();\n    }\n\n    public function __toString()\n    {\n      return $this->name;\n    }\n    ```", "```php\n    public function attach(SplObserver $subscriber)\n    {\n      $this->subscribers[$subscriber->getKey()] = $subscriber;\n      $this->linked[$subscriber->getKey()] = \n        $subscriber->getPriority();\n      arsort($this->linked);\n    }\n    ```", "```php\n    public function detach(SplObserver $subscriber)\n    {\n      unset($this->subscribers[$subscriber->getKey()]);\n      unset($this->linked[$subscriber->getKey()]);\n    }\n    ```", "```php\n    public function notify()\n    {\n      foreach ($this->linked as $key => $value)\n      {\n        $this->subscribers[$key]->update($this);\n      }\n    }\n    ```", "```php\n    public function getName()\n    {\n      return $this->name;\n    }\n\n    public function setName($name)\n    {\n      $this->name = $name;\n    }\n    ```", "```php\n    public function setDataByKey($key, $value)\n    {\n      $this->data[$key] = $value;\n    }\n    ```", "```php\n    namespace Application\\PubSub;\n    use SplSubject;\n    use SplObserver;\n    class Subscriber implements SplObserver\n    {\n      // code\n    }\n    ```", "```php\n    protected $key;\n    protected $name;\n    protected $priority;\n    protected $callback;\n    public function __construct(\n      string $name, callable $callback, $priority = 0)\n    {\n      $this->key = md5(date('YmdHis') . rand(0,9999));\n      $this->name = $name;\n      $this->callback = $callback;\n      $this->priority = $priority;\n    }\n    ```", "```php\n    public function update(SplSubject $publisher)\n    {\n      call_user_func($this->callback, $publisher);\n    }\n    ```", "```php\n    public function getKey()\n    {\n      return $this->key;\n    }\n\n    public function setKey($key)\n    {\n      $this->key = $key;\n    }\n\n    // other getters and setters not shown\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\PubSub\\ { Publisher, Subscriber };\n```", "```php\n$pub = new Publisher('test');\n$pub->setDataByKey('1', 'AAA');\n$pub->setDataByKey('2', 'BBB');\n$pub->setDataByKey('3', 'CCC');\n$pub->setDataByKey('4', 'DDD');\n```", "```php\n$sub1 = new Subscriber(\n  '1',\n  function ($pub) {\n    echo '1:' . $pub->getData()[1] . PHP_EOL;\n  },\n  10\n);\n$sub2 = new Subscriber(\n  '2',\n  function ($pub) {\n    echo '2:' . $pub->getData()[2] . PHP_EOL;\n  },\n  20\n);\n$sub3 = new Subscriber(\n  '3',\n  function ($pub) {\n    echo '3:' . $pub->getData()[3] . PHP_EOL;\n  },\n  99\n);\n```", "```php\n$pub->attach($sub2);\n$pub->attach($sub1);\n$pub->attach($sub3);\n$pub->notify();\n$pub->notify();\n```", "```php\n$sub4 = new Subscriber(\n  '4',\n  function ($pub) {\n    echo '4:' . $pub->getData()[4] . PHP_EOL;\n    if (!empty($pub->getData()[1]))\n      die('1 is set ... halting execution');\n  },\n  25\n);\n$pub->attach($sub4);\n$pub->notify();\n```"]