["```php\n**composer require sensio/framework-extra-bundle \ncomposer require symfony/psr-http-message-bridge \ncomposer require zendframework/zend-diactoros**\n\n```", "```php\n<?php \n\nnamespace AppBundle\\Controller; \n\nuse Psr\\Http\\Message\\ServerRequestInterface; \nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller; \nuse Zend\\Diactoros\\Response; \n\nclass DefaultController extends Controller \n{ \n    public function indexAction(ServerRequestInterface $request) \n    { \n        return new Response(); \n    } \n} \n```", "```php\n<?php \n\nclass BlogPost \n{ \n    private $status; \n    private $publicationDate; \n\n    public function setStatus(string $s) \n    { \n        $this->status = $s; \n    } \n\n    public function setPublicationDate(DateTime $d) \n    { \n        $this->publicationDate = $d; \n    } \n} \n```", "```php\n<?php \n\nclass BlogPost2 \n{ \n    private $status; \n    private $publicationDate; \n\n    public function publish(DateTime $d) \n    { \n        $this->status = 'published'; \n        $this->publicationDate = $d; \n    } \n} \n```", "```php\n<?php \n\n$date = $post->getPublicationDate(); \n\n// for any reason you modify the date \n$date->modify('+14 days'); \n\nvar_dump($post->getPublicationDate() == $date); \n// bool(true) \n\n$entityManager->persist($post); \n$entityManager->flush(); \n// nothing changes in the database :( \n```", "```php\n<?php \n\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\ParamConverter; \n\nclass PostController extends Controller \n{ \n    /** \n     * @Route(\"/blog/{id}\") \n     * @ParamConverter(\"post\", class=\"SensioBlogBundle:Post\") \n     */ \n    public function showAction(Post $post) \n    { \n        // do something here \n    } \n} \n```", "```php\n<?php \n\nuse Widmogrod\\Monad\\Maybe as m; \nuse Widmogrod\\Monad\\Collection; \n\nclass FunctionalEntityRepository extends EntityRepository \n{ \n    public function find($id, $lockMode = null, $lockVersion =  null) \n    { \n        return m\\maybeNull(parent::find($id, $lockMode,  $lockVersion)); \n    } \n\n    public function findOneBy(array $criteria, array $orderBy =  null) \n    { \n        return m\\maybeNull(parent::findOneBy($criteria,  $orderBy)); \n    } \n\n    public function findBy(array $criteria, array $orderBy = null,  $limit = null, $offset = null) \n    { \n        return Collection::of(parent::findBy($criteria, $orderBy,  $limit, $offset)); \n    } \n\n    public function findAll() \n    { \n        return Collection::of(parent::findAll()); \n    } \n} \n```", "```php\ndoctrine:   \n  orm:     \n    entity_managers:       \n      default_em:         \n        default_repository_class: MyBundly\\MyNamespace\\FunctionalEntityRepository \n```", "```php\n<?php \n\nuse Illuminate\\Database\\Eloquent\\Model; \n\nclass BlogPost extends Model \n{ \n    private $status; \n    private $publicationDate; \n\n    public function publish(DateTime $d) \n    { \n        $new = clone $this; \n\n        $new->status = 'published'; \n        $new->publicationDate = $d; \n        return $new; \n    } \n} \n```", "```php\n<?php \n\nuse Illuminate\\Database\\Eloquent\\Builder as BaseBuilder; \nuse Widmogrod\\Monad\\Maybe as m; \n\nclass FunctionalBuilder extends BaseBuilder \n{ \n    public function first($columns = array('*')) \n    { \n        return m\\maybeNull(parent::first($columns)); \n    } \n\n    public function firstOrFail($columns = array('*')) \n    { \n        return $this->first($columns)->orElse(function() { \n            throw (new ModelNotFoundException)- >setModel(get_class($this->model)); \n        }); \n    } \n\n    public function findOrFail($id, $columns = array('*')) \n    { \n        return $this->find($id, $columns)->orElse(function() { \n            throw (new ModelNotFoundException)- >setModel(get_class($this->model));         }); \n    } \n\n    public function pluck($column) \n    { \n        return $this->first([$column])->map(function($result) { \n            return $result->{$column}; \n        }); \n    } \n} \n```", "```php\n{ \n        return $this->find($id, $columns)->orElse(function() { \n            throw (new ModelNotFoundException)- >setModel(get_class($this->model)); \n        }); \n    } \n\n    public function pluck($column) \n    { \n        return $this->first([$column])->map(function($result) { \n            return $result->{$column}; \n        }); \n    } \n} \n```", "```php\n<?php \n\nnamespace App\\Http\\Controllers; \n\nuse App\\Users\\Repository as UserRepository; \n\nclass UserController extends Controller \n{ \n    protected $users; \n\n    public function __construct(UserRepository $users) \n    { \n        $this->users = $users; \n    } \n} \n```", "```php\n**composer require symfony/psr-http-message-bridge \ncomposer require zendframework/zend-diactoros**\n\n```", "```php\nfunction my_module_block_list_alter(&$blocks) { \n    global $language; \n\n    $blocks = new_blocks($blocks, $language); \n} \n```"]