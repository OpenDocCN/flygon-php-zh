["```php\n// dynamic typed (no specific type defined, directly assigning value)\n$name = \"Branko\"; // string\n$salary = 4200.00; // float\n$age = 33; // int\n\n// weak typed (variable value reassigned into different type)\n$salary = 4200.00; // float\n$salary = $salary + \"USD\"; // float\n$salary = $salary . \"USD\"; // string\n\n```", "```php\nfunction addTab($tab) {\n  if (is_array($tab)) {\n\n  } elseif (is_object($tab)) {\n\n  } elseif (is_string($tab)) {\n\n  } else {\n\n  } \n}\n\n```", "```php\ndeclare(strict_types=1);\n\nfunction register(string $email, int $age, bool $notify) {\n // body\n}\n\nregister('user@mail.com', '33', true);\n\n```", "```php\nFatal error: Uncaught TypeError: Argument 2 passed to register() must be of the type integer, string given, called in /test.php on line 11 and defined in /test.php:5 Stack trace: #0 /test.php(11): register('user@mail.co...', '33', true) #1 {main} thrown in /test.php on line 5.\n\n```", "```php\nfunction register(string $user, int $age) : bool {\n  // logic ...\n  return true;\n}\n\n```", "```php\nclass A {}\nclass B extends A {}\nclass C extends B {}\n\nfunction getInstance(string $type) : A {\n    if ($type == 'A') {\n       return new A();\n       } elseif ($type == 'B') {\n           return new B();\n       } else {\n           return new C();\n       }\n  }\n\ngetInstance('A'); #object(A)#1 (0) { }\ngetInstance('B'); #object(B)#1 (0) { }\ngetInstance('XYZ'); #object(C)#1 (0) { }\n\n```", "```php\n$obj = new class() {};\n$obj2 = new class($a, $b) {\n   private $a;\n   private $b;\n   public function __construct($a, $b) {\n     $this->a = $a;\n     $this->b = $b;\n   }\n};\n\n```", "```php\ninterface Salary {\n      public function pay();\n   }\n\n   trait Util {\n      public function format(float $number) {\n         return number_format($number, 2);\n      }\n   }\n\n   class User {\n      private $IBAN;\n      protected $salary;\n      public function __construct($IBAN, $salary) {\n         $this->IBAN = $IBAN;\n         $this->salary = $salary;\n      }\n\n      function salary() {\n       return new class($this->IBAN, $this->salary) implements Salary {\n         use Util;\n         private $_IBAN;\n         protected $_salary;\n\n         public function __construct($IBAN, $salary) {\n            $this->_IBAN = $IBAN;\n            $this->_salary = $salary;\n         }\n\n        public function pay() {\n           echo $this->_IBAN . ' ' . $this->format($this->_salary);\n        }\n     };\n   } \n }\n $user = new User('GB29NWBK60161331926819', 4500.00);\n $user->salary()->pay();\n\n```", "```php\nclass User {}\nclass Salary {}\n\nfunction gen() {\n  return new class() {};\n}\n\n$obj = new class() {};\n$obj2 = new class() {};\n$obj3 = new class() extends User {};\n$obj4 = new class() extends Salary {};\n$obj5 = gen();\n$obj6 = gen();\n\necho get_class($obj); // class@anonymous/var/www/index.php0x27fe03a\necho get_class($obj2); // class@anonymous/var/www/index.php0x27fe052\necho get_class($obj3); // class@anonymous/var/www/index.php0x27fe077\necho get_class($obj4); // class@anonymous/var/www/index.php0x27fe09e\necho get_class($obj5); // class@anonymous/var/www/index.php0x27fe04f\necho get_class($obj6); // class@anonymous/var/www/index.php0x27fe04f\n\nfor ($i=0; $i<=5; $i++) {\n  echo get_class(new class() {}); // 5 x   \n    class@anonymous/var/www/index.php0x27fe2d3\n}\n\n```", "```php\nfunction even() {\n   for ($i = 1; $i <= 10; $i++) {\n     if ($i % 2 == 0) {\n        yield $i;\n     }\n   }\n}\n\nfunction odd() {\n    for ($i = 1; $i <= 10; $i++) {\n       if ($i % 2 != 0) {\n          yield $i;\n       }\n    }\n}\n\nfunction mix() {\n   yield -1;\n   yield from odd();\n   yield 17;\n   yield from even();\n   yield 33;\n}\n\n// 2 4 6 8 1 0\nforeach (even() as $even) {\n  echo $even;\n}\n\n// 1 3 5 7 9\nforeach (odd() as $odd) {\n  echo $odd;\n}\n\n// -1 1 3 5 7 9 17 2 4 6 8 10 33\nforeach (mix() as $mix) {\n  echo $mix;\n}\n\n```", "```php\n$letters = (function () {\n  yield 'A';\n  yield 'B';\n  return 'C';\n})();\n\n// Outputs: A B\nforeach ($letters as $letter) {\n  echo $letter;\n}\n\n// Outputs: C\necho $letters->getReturn();\n\n```", "```php\n// #1\nif (isset($_GET['name']) && !empty($_GET['name'])) \n   {\n     $name = $_GET['name'];\n   } \nelse {\n     $name = 'N/A';\n     }\n\n// #2\nif (!empty($_GET['name'])) \n   {\n     $name = $_GET['name'];\n   } \nelse {\n       $name = 'N/A';\n     }\n\n// #3\n\n$name = ((isset($_GET['name']) && !empty($_GET['name']))) ? $_GET['name'] : 'N/A';\n\n// #4\n$name = (!empty($_GET['name'])) ? $_GET['name'] : 'N/A';\n\n```", "```php\n$name = $_GET['name'] ?? 'N/A';\n\n```", "```php\n(expr) <=> (expr)\n\n```", "```php\n$users = ['branko', 'ivana', 'luka', 'ivano'];\n\nusort($users, function ($a, $b) {\n  return ($a < $b) ? -1 : (($a > $b) ? 1 : 0);\n});\n\n```", "```php\n$users = ['branko', 'ivana', 'luka', 'ivano'];\n\nusort($users, function ($a, $b) {\n  return $a <=> $b;\n});\n\n```", "```php\n// The class constant - using 'const' keyword\nclass Rift {\n  const APP = [\n    'name' => 'Rift',\n    'edition' => 'Community',\n    'version' => '2.1.2',\n    'licence' => 'OSL'\n  ];\n}\n\n// The class constant - using 'const' keyword\ninterface IRift {\n  const APP = [\n    'name' => 'Rift',\n    'edition' => 'Community',\n    'version' => '2.1.2',\n    'licence' => 'OSL'\n  ];\n}\n\n// The constant - using 'define' construct\ndefine('APP', [\n  'name' => 'Rift',\n  'edition' => 'Community',\n  'version' => '2.1.2',\n  'licence' => 'OSL'\n]);\n\necho Rift::APP['version'];\necho IRift::APP['version'];\necho APP['version'];\n\n```", "```php\n/*** expression syntax ***/\n$$foo['bar']['baz']\n\n// PHP 5.x meaning\n${$foo['bar']['baz']}\n\n// PHP 7.x meaning\n($$foo)['bar']['baz']\n\n/*** expression syntax ***/\n$foo->$bar['baz']\n\n// PHP 5.x meaning\n$foo->{$bar['baz']}\n\n// PHP 7.x meaning\n($foo->$bar)['baz']\n\n/*** expression syntax ***/\n$foo->$bar['baz']()\n\n// PHP 5.x meaning\n$foo->{$bar['baz']}()\n\n// PHP 7.x meaning\n($foo->$bar)['baz']()\n\n/*** expression syntax ***/\nFoo::$bar['baz']()\n\n// PHP 5.x meaning\nFoo::{$bar['baz']}()\n\n// PHP 7.x meaning\n(Foo::$bar)['baz']()\n\n```", "```php\n$foo()['bar']();\n[$obj1, $obj2][0]->prop;\ngetStr(){0}\n$foo['bar']::$baz;\n$foo::$bar::$baz;\n$foo->bar()::baz()\n// Assuming extension that implements actual toLower behavior\n\"PHP\"->toLower();\n[$obj, 'method']();\n'Foo'::$bar;\n\n```", "```php\n<?php class Mailer {\n  private $transport;\n\n  public function __construct(Transport $transport)\n {  $this->transport = $transport;\n } } $transport = new stdClass();  try {\n  $mailer = new Mailer($transport); } catch (\\Exception  $e) {\n  echo 'Caught!'; } finally {\n  echo 'Cleanup!'; }\n\n```", "```php\nCatchable fatal error: Argument 1 passed to Mailer::__construct() must be an instance of Transport, instance of stdClass given, called in /index.php on line 18 and defined in /index.php on line 6.\n\n```", "```php\nset_error_handler(function ($errno, $errstr) {\n  throw new \\Exception($errstr, $errno);\n});\n\n```", "```php\n<?php   // Case 1 try {\n  $mailer = new Mailer($transport); } catch (\\Throwable $e) {\n  echo 'Caught!'; } finally {\n  echo 'Cleanup!'; }   // Case 2 try {\n  $mailer = new Mailer($transport); } catch (\\Error $e) {\n  echo 'Caught!'; } finally {\n  echo 'Cleanup!'; }\n\n```", "```php\nuse Magento\\Backend\\Block\\Widget\\Grid;\nuse Magento\\Backend\\Block\\Widget\\Grid\\Column;\nuse Magento\\Backend\\Block\\Widget\\Grid\\Extended;\n\n```", "```php\nuse Magento\\Backend\\Block\\Widget\\Grid;\nuse Magento\\Backend\\Block\\Widget\\Grid\\{\n  Column,\n  Extended\n};\n\n```", "```php\nuse Magento\\Backend\\Block\\Widget\\{\n  Grid\n  Grid\\Column,\n  Grid\\Extended\n};\n\n```", "```php\ntry {\n      // ...\n    } \ncatch (\\InvalidArgumentException $e) \n    {\n      // ...\n    } \ncatch (\\LengthException $e)\n    {\n      // ...\n    }\ncatch (Exception $e) \n   {\n     // ...\n   } \nfinally \n  {\n    // ...\n  }\n\n```", "```php\ntry {\n      // ...\n    } \ncatch (\\InvalidArgumentException | \\LengthException $e)\n   {\n     // ...\n   }  \ncatch (\\Exception $e) \n   {\n     // ...\n   }\n finally \n   {\n     // ...\n   }\n\n```", "```php\nclass Visibility \n {\n   // Constants without defined visibility\n   const THE_DEFAULT_PUBLIC_CONST = 'PHP';\n\n   // Constants with defined visibility\n   private const THE_PRIVATE_CONST = 'PHP';\n   protected const THE_PROTECTED_CONST = 'PHP';\n   public const THE_PUBLIC_CONST = 'PHP';\n }\n\n```", "```php\nfunction import(iterable $users) \n {\n   // ...\n }\n\nfunction import(iterable $users = null) \n {\n   // ...\n }\n\nfunction import(iterable $users = []) \n {\n   // ...\n }\n\n```", "```php\n function export(): iterable {\n   return [\n     'Johny',\n     'Tom',\n     'Matt'\n   ];\n }\n\n function mix(): iterable {\n   return [\n     'Welcome',\n      33,\n      4200.00\n   ];\n }\n\n function numbers(): iterable {\n    for ($i = 0; $i <= 5; $i++) {\n       yield $i;\n    }\n }\n\n```", "```php\nfunction welcome(?string $name) {\n   echo $name;\n}\n\nwelcome(); // invalid\nwelcome(null); // valid\n\n```", "```php\nfunction goodbye(?string $name = null)\n {\n   if (is_null($name)) \n     {\n       echo 'Goodbye!';\n     } \n   else\n     { \n       echo \"Goodbye $name!\";\n     }\n }\n\ngoodbye(); // valid\ngoodbye(null); // valid\ngoodbye('John'); // valid\n\n```", "```php\nfunction welcome($name): ?string \n  {\n    return null; // valid\n  }\n\nfunction welcome($name): ?string \n  {\n    return 'Welcome ' . $name; // valid\n  }\n\nfunction welcome($name): ?string \n {\n   return 33; // invalid\n }\n\n```", "```php\nfunction A(): void {\n   // valid\n}\n\nfunction B(): void {\n   return; // valid\n}\n\nfunction C(): void {\n   return null; // invalid\n}\n\nfunction D(): void {\n   return 1; // invalid\n}\n\n```"]