["```php\n// strtoupper :: string -> string \n// strlen :: string -> int \n```", "```php\n// implode :: string -> [string] -> string \n```", "```php\n// implode :: string -> ([string] -> string) \n```", "```php\n// number_format :: float -> (int -> (string -> (string -> string))) \n```", "```php\n// number_format :: float -> int -> string -> string -> string \n```", "```php\n// number_format :: float -> Optional int -> Optional string -> Optional string -> string \n```", "```php\n// printf :: string -> ...string -> int \n```", "```php\n// array_reduce :: [a] -> (b -> a -> b) -> Optional a -> b \n// array_map :: (a -> b) -> ...[a] -> [b] \n```", "```php\n// array_filter :: (a -> bool) -> [a] -> [a] \n```", "```php\n// filterM :: Monad m => (a -> m Bool) -> [a] -> m [a] \n```", "```php\n// some_function :: TypeA a TypeB b => a -> b -> string \n```", "```php\n// head :: [a] -> a \n// map :: (a -> b) -> [a] -> [b] \nhead(map(f, $x)) == f(head($x) \n```", "```php\n// filter :: (a -> Bool) -> [a] -> [a] \nmap(f, filter(compose(p, f), $x)) === filter(p, map(f, $x)) \n```", "```php\n<?php \n// traditional \nfunction safe_title(string $s) \n{ \n    return strtoupper(htmlspecialchars($s)); \n} \n\n// point-free \n$safe_title = compose('htmlspecialchars', 'strtoupper'); \n```", "```php\n-- traditional \nsum (x:xs) = x + sum xs \nsum [] = 0 \n\n-- using foldr \nsum xs = foldr (+) 0 xs \n\n-- point-free \nsum = foldr (+) 0 \n```", "```php\n// traditional \nfunction snakeCase(word) { \n    return word.toLowerCase().replace(/\\s+/ig, '_'); \n}; \n\n// point-free \nvar snakeCase = compose(replace(/\\s+/ig, '_'), toLowerCase); \n```", "```php\n<?php \nconst push = 'Widmogrod\\Functional\\push'; \n\nfunction push(array $array, array $values) \n{ \n    // [...] \n} \n```", "```php\n<?php const increment = 'increment'; \n\nfunction increment(int $i) { return $i + 1; } \n\n// using a 'callable' \narray_map('increment' [1, 2, 3, 4]); \n\n// using our const \narray_map(increment, [1, 2, 3, 4]); \n```", "```php\n<?php \nclass A { \n    public static function static_test() {} \n    public function test() {} \n} \n\n/** @var callable */ \nconst A_static = ['A', 'static_test']; \n```", "```php\n<?php \nfunction simple() { \n    return strtoupper('Hello!'); \n} \n```", "```php\n<?php \n\nfunction multiple_branches($name) { \n    if($name == 'Gilles') { \n        return strtoupper('Hi friend!'); \n    } \n    return strtoupper('Greetings'); \n} \n```", "```php\n<?php \nfunction not_a_tail_call($name) { \n    return strtoupper('Hello') + ' ' + $name; \n} \n\nfunction also_not_a_tail_call($a) { \n    return 2 * max($a, 10); \n} \n```", "```php\n<?php \nfunction fact($n) \n{ \n    return $n <= 1 ? 1 : $n * fact($n - 1); \n} \n```", "```php\nfact(4) \n4 * fact(3) \n4 * 3 * fact(2) \n4 * 3 * 2 * fact(1) \n4 * 3 * 2 * 1 \n-> 24 \n```", "```php\n<?php \nfunction fact2($n) \n{ \n    $fact = function($n, $acc) use (&$fact) { \n        return $n <= 1 ? $acc : $fact($n - 1, $n * $acc); \n    }; \n\n    return $fact($n, 1); \n} \n```", "```php\n<?php \n\nfunction fact3($n, $acc = 1) \n{ \n    return $n <= 1 ? $acc : fact3($n - 1, $n * $acc); \n} \n```", "```php\nfact(4) \nfact(3, 4 * 1) \nfact(2, 3 * 4) \nfact(1, 2 * 12) -> 24 \n```", "```php\n<?php \nfunction hanoi(int $disc, string $source, string $destination,  string $via) \n{ \n    if ($disc === 1) { \n        echo(\"Move a disc from the $source rod to the $destination  rod\\n\"); \n    } else { \n        // step 1 : move all discs but the first to the \"via\" rod \n        hanoi($disc - 1, $source, $via, $destination); \n        // step 2 : move the last disc to the destination \n        hanoi(1, $source, $destination, $via); \n        // step 3 : move the discs from the \"via\" rod to the  destination \n        hanoi($disc - 1, $via, $destination, $source); \n    } \n} \n```", "```php\n<?php \nuse Functional as f; \n\nclass Position \n{ \n    public $disc; \n    public $src; \n    public $dst; \n    public $via; \n\n    public function __construct($n, $s, $d, $v) \n    { \n        $this->disc = $n; \n        $this->src = $s; \n        $this->dst = $d; \n        $this->via = $v; \n    } \n} \n\nfunction hanoi(Position $pos, array $moves = []) \n{ \n    if ($pos->disc === 1) { \n        echo(\"Move a disc from the {$pos->src} rod to the {$pos- >dst} rod\\n\"); \n\n        if(count($moves) > 0) { \n            hanoi(f\\head($moves), f\\tail($moves)); \n        } \n    } else { \n        $pos1 = new Position($pos->disc - 1, $pos->src, $pos->via,  $pos->dst); \n        $pos2 = new Position(1, $pos->src, $pos->dst, $pos->via); \n        $pos3 = new Position($pos->disc - 1, $pos->via, $pos->dst,  $pos->src); \n\n        hanoi($pos1, array_merge([$pos2, $pos3], $moves)); \n    } \n} \nhanoi(new Position(3, 'left', 'right', 'middle')); \n```", "```php\n<?php \nclass Bounce \n{ \n    private $f; \n    private $args; \n\n    public function __construct(callable $f, ...$args) \n    { \n        $this->f = $f; \n        $this->args = $args; \n    } \n\n    public function __invoke() \n    { \n        return call_user_func_array($this->f, $this->args); \n    } \n} \n\nfunction trampoline(callable $f, ...$args) { \n    $return = call_user_func_array($f, $args); \n\n    while($return instanceof Bounce) { \n        $return = $return(); \n    } \n    return $return; \n} \n```", "```php\n<?php \n\nfunction fact4($n, $acc = 1) \n{ \n    return $n <= 1 ? $acc : new Bounce('fact4', $n - 1, $n *  $acc); \n} \n\necho trampoline('fact4', 5) \n// 120 \n```", "```php\n<?php \n\nfunction even($n) { \n    return $n == 0 ? 'yes' : odd($n - 1); \n} \n\nfunction odd($n) { \n    return $n == 0 ? 'no' : even($n - 1); \n} \n\necho even(10); \n// yes \n\necho odd(10); \n// no \n```", "```php\n**composer require functional-php/trampoline**\n\n```", "```php\n<?php \n\nuse FunctionalPHP\\Trampoline as t; \nuse FunctionalPHP\\Trampoline\\Trampoline; \n\nfunction factorial($n, $acc = 1) { \n    return $n <= 1 ? $acc : t\\bounce('factorial', $n - 1, $n * $acc); \n}; \n\necho t\\trampoline('factorial', 5); \n// 120 \n\necho Trampoline::factorial(5); \n// 120 \n\necho Trampoline::strtoupper('Hello!'); \n// HELLO! \n```", "```php\n<?php \n$fact = t\\trampoline_wrapper('factorial'); \n\necho $fact(5); \n// 120 \n```", "```php\n<?php \n\nuse FunctionalPHP\\Trampoline as t; \n\n$fact = T\\pool(function($n, $acc = 1) { \n    return $n <= 1 ? $acc : $this($n - 1, $n * $acc); \n}); \n\necho $fact(5); \n// 120 \n```", "```php\nfact :: (Integral a) => a -> a \nfact 0 = 1 \nfact n = n * fact (n-1) \n```", "```php\nfirst :: (a, b, c) -> a \nfirst (x, _, _) = x \n\nsecond :: (a, b, c) -> b \nsecond (_, y, _) = y \n\nthird :: (a, b, c) -> c \nthird (_, _, z) = z \n```", "```php\nhead :: [a] -> a \nhead [] = error \"empty list\" \nhead (x:_) = x \n\ntail :: [a] -> [a] \ntail [] = error \"empty list\" \ntail (_:xs) = xs \n\nsum :: (Num a) => [a] -> a \nsum [] = 0 \nsum (x:xs) = x + sum xs \n```", "```php\nfirstThree :: [a] -> (a, a, a) \nfirstThree (x:y:z:_) = (x, y, z) \nfirstThree _ = error \"need at least 3 elements\" \n```", "```php\nhead :: [a] -> a \nhead xs = case xs of []    -> error \"empty lists\" \n(x:_) -> x \n```", "```php\nfirstLetter :: String -> String \nfirstLetter \"\" = error \"empty string\" \nfirstLetter all@(x:_) = \"The first letter of \" ++ all ++ \" is \" ++ [x] \n```", "```php\nincrement :: Maybe Int -> Int \nincrement Nothing = 0 \nincrement (Just x) = x + 1 \n```", "```php\n**composer require functional-php/pattern-matching**\n\n```", "```php\n<?php \n\nuse FunctionalPHP\\PatternMatching as m; \n\n$users = [ \n    [ 'name' => 'Gilles', 'status' => 10 ], \n    [ 'name' => 'John', 'status' => 5 ], \n    [ 'name' => 'Ben', 'status' => 0], \n    [], \n    'some random string' \n]; \n\n$statuses = array_map(m\\match([ \n    '[_, 10]' => function() { return 'admin'; }, \n    '[_, 5]' => 'moderator', \n    '[_, _]' => 'normal user', \n    '_' => 'n/a', \n]), $users); \n\nprint_r($statuses); \n// Array ( \n//    [0] => Gilles - admin \n//    [1] => John - moderator \n//    [2] => Ben - normal user \n//    [3] => incomplete array \n//    [4] => n/a \n// ) \n```", "```php\n<?php \n\n$group_names = [ 10 => 'admin', 5 => 'moderator' ]; \n\n$statuses = array_map(m\\match([ \n    '[name, s]' => function($name, $s) use($group_names) { \n        return $name. ' - '. (isset($group_names[$s]) ? $group_names[$s] : 'normal user'); \n    }, \n    '[]' => 'incomplete array', \n    '_' => 'n/a',]), $users); \nprint_r($statuses); \n// Array ( \n//    [0] => admin \n//    [1] => moderator \n//    [2] => normal user \n//    [3] => incomplete array \n//    [4] => n/a \n// ) \n```", "```php\n$url = 'user/10'; \n\nfunction homepage() { return \"Hello!\"; } \nfunction user($id) { return \"user $id\"; } \nfunction add_user_to_group($group, $user) { return \"done.\"; } \n\n$result = m\\match([ \n    '[\"user\", id]' => 'user', \n    '[\"group\", group, \"add\", user]' => 'add_user_to_group', \n    '_' => 'homepage', \n], explode('/', $url)); \n\necho $result; \n// user 10 \n```", "```php\n<?php \n$data = [ \n  'Gilles', \n  ['Some street', '12345', 'Some City'], \n  'xxx xx-xx-xx', \n  ['admin', 'staff'], \n  ['username' => 'gilles', 'password' => '******'], \n  [12, 34, 53, 65, 78, 95, 102] \n]; \n\nprint_r(m\\extract('[name, _, phone, groups, [username, _],  posts@(first:_)]', $data)); \n// Array ( \n//    [name] => Gilles \n//    [phone] => xxx xx-xx-xx \n//    [groups] => Array ( [0] => admin [1] => staff ) \n//    [username] => gilles \n//    [posts] => Array ( ... ) \n//    [first] => 12 \n//) \n```", "```php\n<?php \n$fact = m\\func([ \n    '0' => 1, \n    'n' => function($n) use(&$fact) { \n        return $n * $fact($n - 1); \n    } \n]); \n```", "```php\nclass Eq a where \n    (==) :: a -> a -> Bool \n    (/=) :: a -> a -> Bool \n```", "```php\ninstance (Eq m) => Eq (Maybe m) where \n    Just x == Just y = x == y \n    Nothing == Nothing = True \n    _ == _ = False \n```", "```php\nPrelude> Just 2 == Just 2 \nTrue \nPrelude> Just 2 == Just 3 \nFalse \nPrelude> Just 2 == Nothing \nFalse \n```", "```php\n<?php \ninterface Comparable \n{ \n    /** \n     * @param Comparable $a the object to compare with \n     * @return int \n     *    0 if both object are equal \n     *    1 is $a is smaller \n     *    -1 otherwise \n     */ \n    public function compare(Comparable $a): int; \n} \n```"]