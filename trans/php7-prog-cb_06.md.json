["```php\n    namespace Application\\Form;\n\n    class Generic\n    {\n      // some code ...\n    }\n    ```", "```php\n    const ROW = 'row';\n    const FORM = 'form';\n    const INPUT = 'input';\n    const LABEL = 'label';\n    const ERRORS = 'errors';\n    const TYPE_FORM = 'form';\n    const TYPE_TEXT = 'text';\n    const TYPE_EMAIL = 'email';\n    const TYPE_RADIO = 'radio';\n    const TYPE_SUBMIT = 'submit';\n    const TYPE_SELECT = 'select';\n    const TYPE_PASSWORD = 'password';\n    const TYPE_CHECKBOX = 'checkbox';\n    const DEFAULT_TYPE = self::TYPE_TEXT;\n    const DEFAULT_WRAPPER = 'div';\n    ```", "```php\n    protected $name;\n    protected $type    = self::DEFAULT_TYPE;\n    protected $label   = '';\n    protected $errors  = array();\n    protected $wrappers;\n    protected $attributes;    // HTML form attributes\n    protected $pattern =  '<input type=\"%s\" name=\"%s\" %s>';\n\n    public function __construct($name, \n                    $type, \n                    $label = '',\n                    array $wrappers = array(), \n                    array $attributes = array(),\n                    array $errors = array())\n    {\n      $this->name = $name;\n      if ($type instanceof Generic) {\n          $this->type       = $type->getType();\n          $this->label      = $type->getLabelValue();\n          $this->errors     = $type->getErrorsArray();\n          $this->wrappers   = $type->getWrappers();\n          $this->attributes = $type->getAttributes();\n      } else {\n          $this->type       = $type ?? self::DEFAULT_TYPE;\n          $this->label      = $label;\n          $this->errors     = $errors;\n          $this->attributes = $attributes;\n          if ($wrappers) {\n              $this->wrappers = $wrappers;\n          } else {\n              $this->wrappers[self::INPUT]['type'] =\n                self::DEFAULT_WRAPPER;\n              $this->wrappers[self::LABEL]['type'] = \n                self::DEFAULT_WRAPPER;\n              $this->wrappers[self::ERRORS]['type'] = \n                self::DEFAULT_WRAPPER;\n        }\n      }\n      $this->attributes['id'] = $name;\n    }\n    ```", "```php\n    public function getWrapperPattern($type)\n    {\n      $pattern = '<' . $this->wrappers[$type]['type'];\n      foreach ($this->wrappers[$type] as $key => $value) {\n        if ($key != 'type') {\n          $pattern .= ' ' . $key . '=\"' . $value . '\"';\n        }\n      }\n      $pattern .= '>%s</' . $this->wrappers[$type]['type'] . '>';\n      return $pattern;\n    }\n    ```", "```php\n    public function getLabel()\n    {\n      return sprintf($this->getWrapperPattern(self::LABEL), \n                     $this->label);\n    }\n    ```", "```php\n    public function getAttribs()\n    {\n      foreach ($this->attributes as $key => $value) {\n        $key = strtolower($key);\n        if ($value) {\n          if ($key == 'value') {\n            if (is_array($value)) {\n                foreach ($value as $k => $i) \n                  $value[$k] = htmlspecialchars($i);\n            } else {\n                $value = htmlspecialchars($value);\n            }\n          } elseif ($key == 'href') {\n              $value = urlencode($value);\n          }\n          $attribs .= $key . '=\"' . $value . '\" ';\n        } else {\n            $attribs .= $key . ' ';\n        }\n      }\n      return trim($attribs);\n    }\n    ```", "```php\n    public function getInputOnly()\n    {\n      return sprintf($this->pattern, $this->type, $this->name, \n                     $this->getAttribs());\n    }\n\n    public function getInputWithWrapper()\n    {\n      return sprintf($this->getWrapperPattern(self::INPUT), \n                     $this->getInputOnly());\n    }\n    ```", "```php\n    public function getErrors()\n    {\n      if (!$this->errors || count($this->errors == 0)) return '';\n      $html = '';\n      $pattern = '<li>%s</li>';\n      $html .= '<ul>';\n      foreach ($this->errors as $error)\n      $html .= sprintf($pattern, $error);\n      $html .= '</ul>';\n      return sprintf($this->getWrapperPattern(self::ERRORS), $html);\n    }\n    ```", "```php\n    public function setSingleAttribute($key, $value)\n    {\n      $this->attributes[$key] = $value;\n    }\n    public function addSingleError($error)\n    {\n      $this->errors[] = $error;\n    }\n    ```", "```php\n    public function setPattern($pattern)\n    {\n      $this->pattern = $pattern;\n    }\n    public function setType($type)\n    {\n      $this->type = $type;\n    }\n    public function getType()\n    {\n      return $this->type;\n    }\n    public function addSingleError($error)\n    {\n      $this->errors[] = $error;\n    }\n    // define similar get and set methods\n    // for name, label, wrappers, errors and attributes\n    ```", "```php\n    public function getLabelValue()\n    {\n      return $this->label;\n    }\n    public function getErrorsArray()\n    {\n      return $this->errors;\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Form\\Generic;\n```", "```php\n$wrappers = [\n  Generic::INPUT => ['type' => 'td', 'class' => 'content'],\n  Generic::LABEL => ['type' => 'th', 'class' => 'label'],\n  Generic::ERRORS => ['type' => 'td', 'class' => 'error']\n];\n```", "```php\n$email = new Generic('email', Generic::TYPE_EMAIL, 'Email', $wrappers,\n                    ['id' => 'email',\n                     'maxLength' => 128,\n                     'title' => 'Enter address',\n                     'required' => '']);\n```", "```php\n$password = new Generic('password', $email);\n$password->setType(Generic::TYPE_PASSWORD);\n$password->setLabel('Password');\n$password->setAttributes(['id' => 'password',\n                          'title' => 'Enter your password',\n                          'required' => '']);\n```", "```php\n$submit = new Generic('submit', \n  Generic::TYPE_SUBMIT,\n  'Login',\n  $wrappers,\n  ['id' => 'submit','title' => 'Click to login','value' => 'Click Here']);\n```", "```php\n<div class=\"container\">\n  <!-- Login Form -->\n  <h1>Login</h1>\n  <form name=\"login\" method=\"post\">\n  <table id=\"login\" class=\"display\" \n    cellspacing=\"0\" width=\"100%\">\n    <tr><?= $email->render(); ?></tr>\n    <tr><?= $password->render(); ?></tr>\n    <tr><?= $submit->render(); ?></tr>\n    <tr>\n      <td colspan=2>\n        <br>\n        <?php var_dump($_POST); ?>\n      </td>\n    </tr>\n  </table>\n  </form>\n</div>\n```", "```php\n    **namespace Application\\Form\\Element;**\n    **use Application\\Form\\Generic;**\n    **class Radio extends Generic**\n    **{**\n     **// code**\n    **}**\n\n    ```", "```php\n    const DEFAULT_AFTER = TRUE;\n    const DEFAULT_SPACER = '&nbps;';\n    const DEFAULT_OPTION_KEY = 0;\n    const DEFAULT_OPTION_VALUE = 'Choose';\n\n    protected $after = self::DEFAULT_AFTER;\n    protected $spacer = self::DEFAULT_SPACER;\n    protected $options = array();\n    protected $selectedKey = DEFAULT_OPTION_KEY;\n    ```", "```php\n    public function setOptions(array $options, \n      $selectedKey = self::DEFAULT_OPTION_KEY, \n      $spacer = self::DEFAULT_SPACER,\n      $after  = TRUE)\n    {\n      $this->after = $after;\n      $this->spacer = $spacer;\n      $this->options = $options;\n      $this->selectedKey = $selectedKey;\n    }  \n    ```", "```php\n    public function getInputOnly()\n    {\n      $count  = 1;\n      $baseId = $this->attributes['id'];\n    ```", "```php\n    foreach ($this->options as $key => $value) {\n      $this->attributes['id'] = $baseId . $count++;\n      $this->attributes['value'] = $key;\n      if ($key == $this->selectedKey) {\n          $this->attributes['checked'] = '';\n      } elseif (isset($this->attributes['checked'])) {\n                unset($this->attributes['checked']);\n      }\n      if ($this->after) {\n          $html = parent::getInputOnly() . $value;\n      } else {\n          $html = $value . parent::getInputOnly();\n      }\n      $output .= $this->spacer . $html;\n      }\n      return $output;\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Form\\Generic;\nuse Application\\Form\\Element\\Radio;\n```", "```php\n$statusList = [\n  'U' => 'Unconfirmed',\n  'P' => 'Pending',\n  'T' => 'Temporary Approval',\n  'A' => 'Approved'\n];\n\n$status = new Radio('status', \n          Generic::TYPE_RADIO, \n          'Status',\n          $wrappers,\n          ['id' => 'status']);\n```", "```php\n$checked = $_GET['status'] ?? 'U';\n$status->setOptions($statusList, $checked, '<br>', TRUE);          \n```", "```php\n$submit = new Generic('submit', \n          Generic::TYPE_SUBMIT,\n          'Process',\n          $wrappers,\n          ['id' => 'submit','title' => \n          'Click to process','value' => 'Click Here']);\n```", "```php\n<form name=\"status\" method=\"get\">\n<table id=\"status\" class=\"display\" cellspacing=\"0\" width=\"100%\">\n  <tr><?= $status->render(); ?></tr>\n  <tr><?= $submit->render(); ?></tr>\n  <tr>\n    <td colspan=2>\n      <br>\n      <pre><?php var_dump($_GET); ?></pre>\n    </td>\n  </tr>\n</table>\n</form>\n```", "```php\n    namespace Application\\Form\\Element;\n\n    use Application\\Form\\Generic;\n\n    class Select extends Generic\n    {\n      // code\n    }\n    ```", "```php\n    const DEFAULT_OPTION_KEY = 0;\n    const DEFAULT_OPTION_VALUE = 'Choose';\n\n    protected $options;\n    protected $selectedKey = DEFAULT_OPTION_KEY;\n    ```", "```php\n    public function setOptions(array $options, $selectedKey = self::DEFAULT_OPTION_KEY)\n    {\n      $this->options = $options;\n      $this->selectedKey = $selectedKey;\n      if (isset($this->attributes['multiple'])) {\n        $this->name .= '[]';\n      } \n    }\n    ```", "```php\n    protected function getSelect()\n    {\n      $this->pattern = '<select name=\"%s\" %s> ' . PHP_EOL;\n      return sprintf($this->pattern, $this->name, \n      $this->getAttribs());\n    }\n    ```", "```php\n    protected function getOptions()\n    {\n      $output = '';\n      foreach ($this->options as $key => $value) {\n        if (is_array($this->selectedKey)) {\n            $selected = (in_array($key, $this->selectedKey)) \n            ? ' selected' : '';\n        } else {\n            $selected = ($key == $this->selectedKey) \n            ? ' selected' : '';\n        }\n            $output .= '<option value=\"' . $key . '\"' \n            . $selected  . '>' \n            . $value \n            . '</option>';\n      }\n      return $output;\n    }\n    ```", "```php\n    public function getInputOnly()\n    {\n      $output = $this->getSelect();\n      $output .= $this->getOptions();\n      $output .= '</' . $this->getType() . '>'; \n      return $output;\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Form\\Generic;\nuse Application\\Form\\Element\\Select;\n```", "```php\n$status1 = new Select('status1', \n           Generic::TYPE_SELECT, \n           'Status 1',\n           $wrappers,\n           ['id' => 'status1']);\n$status2 = new Select('status2', \n           Generic::TYPE_SELECT, \n           'Status 2',\n           $wrappers,\n           ['id' => 'status2', \n            'multiple' => '', \n            'size' => '4']);\n```", "```php\n$checked1 = $_GET['status1'] ?? 'U';\n$checked2 = $_GET['status2'] ?? ['U'];\n$status1->setOptions($statusList, $checked1);\n$status2->setOptions($statusList, $checked2);\n```", "```php\n<form name=\"status\" method=\"get\">\n<table id=\"status\" class=\"display\" cellspacing=\"0\" width=\"100%\">\n  <tr><?= $status1->render(); ?></tr>\n  <tr><?= $status2->render(); ?></tr>\n  <tr><?= $submit->render(); ?></tr>\n  <tr>\n    <td colspan=2>\n      <br>\n      <pre>\n        <?php var_dump($_GET); ?>\n      </pre>\n    </td>\n  </tr>\n</table>\n</form>\n```", "```php\n    namespace Application\\Form;\n\n    class Factory\n    {\n      protected $elements;\n      public function getElements()\n      {\n        return $this->elements;\n      }\n      // remaining code\n    }\n    ```", "```php\n    public static function generate(array $config)\n    {\n      $form = new self();\n      foreach ($config as $key => $p) {\n    ```", "```php\n      $p['errors'] = $p['errors'] ?? array();\n      $p['wrappers'] = $p['wrappers'] ?? array();\n      $p['attributes'] = $p['attributes'] ?? array();\n    ```", "```php\n      $form->elements[$key] = new $p['class']\n      (\n        $key, \n        $p['type'],\n        $p['label'],\n        $p['wrappers'],\n        $p['attributes'],\n        $p['errors']\n      );\n    ```", "```php\n        if (isset($p['options'])) {\n          list($a,$b,$c,$d) = $p['options'];\n          switch ($p['type']) {\n            case Generic::TYPE_RADIO    :\n            case Generic::TYPE_CHECKBOX :\n              $form->elements[$key]->setOptions($a,$b,$c,$d);\n              break;\n            case Generic::TYPE_SELECT   :\n              $form->elements[$key]->setOptions($a,$b);\n              break;\n            default                     :\n              $form->elements[$key]->setOptions($a,$b);\n              break;\n          }\n        }\n      }\n    ```", "```php\n      return $form;\n    } \n    ```", "```php\n    <form name=\"status\" method=\"get\">\n      <table id=\"status\" class=\"display\" cellspacing=\"0\" width=\"100%\">\n        <?php foreach ($form->getElements() as $element) : ?>\n          <?php echo $element->render(); ?>\n        <?php endforeach; ?>\n      </table>\n    </form>\n    ```", "```php\n    namespace Application\\Form\\Element;\n    class Form extends Generic\n    {\n      public function getInputOnly()\n      {\n        $this->pattern = '<form name=\"%s\" %s> ' . PHP_EOL;\n        return sprintf($this->pattern, $this->name, \n                       $this->getAttribs());\n      }\n      public function closeTag()\n      {\n        return '</' . $this->type . '>';\n      }\n    }\n    ```", "```php\n    protected function getWrapperPattern($wrapper)\n    {\n      $type = $wrapper['type'];\n      unset($wrapper['type']);\n      $pattern = '<' . $type;\n      foreach ($wrapper as $key => $value) {\n        $pattern .= ' ' . $key . '=\"' . $value . '\"';\n      }\n      $pattern .= '>%s</' . $type . '>';\n      return $pattern;\n    }\n    ```", "```php\n    public static function render($form, $formConfig)\n    {\n      $rowPattern = $form->getWrapperPattern(\n      $formConfig['row_wrapper']);\n      $contents   = '';\n      foreach ($form->getElements() as $element) {\n        $contents .= sprintf($rowPattern, $element->render());\n      }\n      $formTag = new Form($formConfig['name'], \n                      Generic::TYPE_FORM, \n                      '', \n                      array(), \n                      $formConfig['attributes']); \n\n      $formPattern = $form->getWrapperPattern(\n      $formConfig['form_wrapper']);\n      if (isset($formConfig['form_tag_inside_wrapper']) \n          && !$formConfig['form_tag_inside_wrapper']) {\n            $formPattern = '%s' . $formPattern . '%s';\n            return sprintf($formPattern, $formTag->getInputOnly(), \n            $contents, $formTag->closeTag());\n      } else {\n            return sprintf($formPattern, $formTag->getInputOnly() \n            . $contents . $formTag->closeTag());\n      }\n    }\n    ```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\nuse Application\\Form\\Generic;\nuse Application\\Form\\Factory;\n```", "```php\n$email    = $_POST['email']   ?? '';\n$checked0 = $_POST['status0'] ?? 'U';\n$checked1 = $_POST['status1'] ?? 'U';\n$checked2 = $_POST['status2'] ?? ['U'];\n$checked3 = $_POST['status3'] ?? ['U'];\n```", "```php\n$formConfig = [ \n  'name'         => 'status_form',\n  'attributes'   => ['id'=>'statusForm','method'=>'post', 'action'=>'chap_06_form_factory.php'],\n  'row_wrapper'  => ['type' => 'tr', 'class' => 'row'],\n  'form_wrapper' => ['type'=>'table','class'=>'table', 'id'=>'statusTable',\n                     'class'=>'display','cellspacing'=>'0'],\n                     'form_tag_inside_wrapper' => FALSE,\n];\n```", "```php\n$config = [\n  'email' => [  \n    'class'     => 'Application\\Form\\Generic',\n    'type'      => Generic::TYPE_EMAIL, \n    'label'     => 'Email', \n    'wrappers'  => $wrappers,\n    'attributes'=> ['id'=>'email','maxLength'=>128, 'title'=>'Enter address',\n                    'required'=>'','value'=>strip_tags($email)]\n  ],\n  'password' => [\n    'class'      => 'Application\\Form\\Generic',\n    'type'       => Generic::TYPE_PASSWORD,\n    'label'      => 'Password',\n    'wrappers'   => $wrappers,\n    'attributes' => ['id'=>'password',\n    'title'      => 'Enter your password',\n    'required'   => '']\n  ],\n  // etc.\n];\n```", "```php\n$form = Factory::generate($config);\n```", "```php\n<?= $form->render($form, $formConfig); ?>\n```", "```php\n    namespace Application\\Filter;\n\n    class Result\n    {\n\n      public $item;  // (mixed) filtered data | (bool) result of validation\n      public $messages = array();  // [(string) message, (string) message ]\n\n      public function __construct($item, $messages)\n      {\n        $this->item = $item;\n        if (is_array($messages)) {\n            $this->messages = $messages;\n        } else {\n            $this->messages = [$messages];\n        }\n      }\n    ```", "```php\n    public function mergeResults(Result $result)\n    {\n      $this->item = $result->item;\n      $this->mergeMessages($result);\n    }\n\n    public function mergeMessages(Result $result)\n    {\n      if (isset($result->messages) && is_array($result->messages)) {\n        $this->messages = array_merge($this->messages, $result->messages);\n      }\n    }\n    ```", "```php\n    public function mergeValidationResults(Result $result)\n    {\n      if ($this->item === TRUE) {\n        $this->item = (bool) $result->item;\n      }\n      $this->mergeMessages($result);\n      }\n\n    }\n    ```", "```php\n    namespace Application\\Filter;\n    interface CallbackInterface\n    {\n      public function __invoke ($item, $params) : Result;\n    }\n    ```", "```php\n    namespace Application\\Filter;\n    class Messages\n    {\n      const MESSAGE_UNKNOWN = 'Unknown';\n      public static $messages;\n      public static function setMessages(array $messages)\n      {\n        self::$messages = $messages;\n      }\n      public static function setMessage($key, $message)\n      {\n        self::$messages[$key] = $message;\n      }\n      public static function getMessage($key)\n      {\n        return self::$messages[$key] ?? self::MESSAGE_UNKNOWN;\n      }\n    }\n    ```", "```php\n    namespace Application\\Filter;\n    use UnexpectedValueException;\n    abstract class AbstractFilter\n    {\n      // code described in the next several bullets\n    ```", "```php\n    const BAD_CALLBACK = 'Must implement CallbackInterface';\n    const DEFAULT_SEPARATOR = '<br>' . PHP_EOL;\n    const MISSING_MESSAGE_KEY = 'item.missing';\n    const DEFAULT_MESSAGE_FORMAT = '%20s : %60s';\n    const DEFAULT_MISSING_MESSAGE = 'Item Missing';\n    ```", "```php\n    protected $separator;    // used for message display\n    protected $callbacks;\n    protected $assignments;\n    protected $missingMessage;\n    protected $results = array();\n    ```", "```php\n    public function __construct(array $callbacks, array $assignments, \n                                $separator = NULL, $message = NULL)\n    {\n      $this->setCallbacks($callbacks);\n      $this->setAssignments($assignments);\n      $this->setSeparator($separator ?? self::DEFAULT_SEPARATOR);\n      $this->setMissingMessage($message \n                               ?? self::DEFAULT_MISSING_MESSAGE);\n    }\n    ```", "```php\n    public function getCallbacks()\n    {\n      return $this->callbacks;\n    }\n\n    public function getOneCallback($key)\n    {\n      return $this->callbacks[$key] ?? NULL;\n    }\n\n    public function setCallbacks(array $callbacks)\n    {\n      foreach ($callbacks as $key => $item) {\n        $this->setOneCallback($key, $item);\n      }\n    }\n\n    public function setOneCallback($key, $item)\n    {\n      if ($item instanceof CallbackInterface) {\n          $this->callbacks[$key] = $item;\n      } else {\n          throw new UnexpectedValueException(self::BAD_CALLBACK);\n      }\n    }\n\n    public function removeOneCallback($key)\n    {\n      if (isset($this->callbacks[$key])) \n      unset($this->callbacks[$key]);\n    }\n    ```", "```php\n    public function getResults()\n    {\n      return $this->results;\n    }\n\n    public function getItemsAsArray()\n    {\n      $return = array();\n      if ($this->results) {\n        foreach ($this->results as $key => $item) \n        $return[$key] = $item->item;\n      }\n      return $return;\n    }\n    ```", "```php\n    public function getMessages()\n    {\n      if ($this->results) {\n          foreach ($this->results as $key => $item) \n          if ($item->messages) yield from $item->messages;\n      } else {\n          return array();\n      }\n    }\n\n    public function getMessageString($width = 80, $format = NULL)\n    {\n      if (!$format)\n      $format = self::DEFAULT_MESSAGE_FORMAT . $this->separator;\n      $output = '';\n      if ($this->results) {\n        foreach ($this->results as $key => $value) {\n          if ($value->messages) {\n            foreach ($value->messages as $message) {\n              $output .= sprintf(\n                $format, $key, trim($message));\n            }\n          }\n        }\n      }\n      return $output;\n    }\n    ```", "```php\n      public function setMissingMessage($message)\n      {\n        $this->missingMessage = $message;\n      }\n      public function setSeparator($separator)\n      {\n        $this->separator = $separator;\n      }\n      public function getSeparator()\n      {\n        return $this->separator;\n      }\n      public function getAssignments()\n      {\n        return $this->assignments;\n      }\n      public function setAssignments(array $assignments)\n      {\n        $this->assignments = $assignments;\n      }\n      // closing bracket for class AbstractFilter\n    }\n    ```", "```php\n    namespace Application\\Filter;\n    class Filter extends AbstractFilter\n    {\n      // code\n    }\n    ```", "```php\n    public function process(array $data)\n    {\n      if (!(isset($this->assignments) \n          && count($this->assignments))) {\n            return NULL;\n      }\n    ```", "```php\n    foreach ($data as $key => $value) {\n      $this->results[$key] = new Result($value, array());\n    }\n    ```", "```php\n    $toDo = $this->assignments;\n    if (isset($toDo['*'])) {\n      $this->processGlobalAssignment($toDo['*'], $data);\n      unset($toDo['*']);\n    }\n    ```", "```php\n    foreach ($toDo as $key => $assignment) {\n      $this->processAssignment($assignment, $key);\n    }\n    ```", "```php\n    protected function processGlobalAssignment($assignment, $data)\n    {\n      foreach ($assignment as $callback) {\n        if ($callback === NULL) continue;\n        foreach ($data as $k => $value) {\n          $result = $this->callbacks[$callback['key']]($this->results[$k]->item,\n          $callback['params']);\n          $this->results[$k]->mergeResults($result);\n        }\n      }\n    }\n    ```", "```php\n    $result = $this->callbacks[$callback['key']]($this ->results[$k]->item, $callback['params']);\n    ```", "```php\n      protected function processAssignment($assignment, $key)\n      {\n        foreach ($assignment as $callback) {\n          if ($callback === NULL) continue;\n          $result = $this->callbacks[$callback['key']]($this->results[$key]->item, \n                                     $callback['params']);\n          $this->results[$key]->mergeResults($result);\n        }\n      }\n    }  // closing brace for Application\\Filter\\Filter\n    ```", "```php\n<?php\nuse Application\\Filter\\Messages;\nMessages::setMessages(\n  [\n    'length_too_short' => 'Length must be at least %d',\n    'length_too_long'  => 'Length must be no more than %d',\n    'required'         => 'Please be sure to enter a value',\n    'alnum'            => 'Only letters and numbers allowed',\n    'float'            => 'Only numbers or decimal point',\n    'email'            => 'Invalid email address',\n    'in_array'         => 'Not found in the list',\n    'trim'             => 'Item was trimmed',\n    'strip_tags'       => 'Tags were removed from this item',\n    'filter_float'     => 'Converted to a decimal number',\n    'phone'            => 'Phone number is [+n] nnn-nnn-nnnn',\n    'test'             => 'TEST',\n    'filter_length'    => 'Reduced to specified length',\n  ]\n);\n```", "```php\n'callback_key' => new class () implements CallbackInterface \n{\n  public function __invoke($item, $params) : Result\n  {\n    $changed  = array();\n    $filtered = /* perform filtering operation on $item */\n    if ($filtered !== $item) $changed = Messages::$messages['callback_key'];\n    return new Result($filtered, $changed);\n  }\n}\n```", "```php\nuse Application\\Filter\\ { Result, Messages, CallbackInterface };\n$config = [ 'filters' => [\n  'trim' => new class () implements CallbackInterface \n  {\n    public function __invoke($item, $params) : Result\n    {\n      $changed  = array();\n      $filtered = trim($item);\n      if ($filtered !== $item) \n      $changed = Messages::$messages['trim'];\n      return new Result($filtered, $changed);\n    }\n  },\n  'strip_tags' => new class () \n  implements CallbackInterface \n  {\n    public function __invoke($item, $params) : Result\n    {\n      $changed  = array();\n      $filtered = strip_tags($item);\n      if ($filtered !== $item)     \n      $changed = Messages::$messages['strip_tags'];\n      return new Result($filtered, $changed);\n    }\n  },\n  // etc.\n]\n];\n```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\ninclude __DIR__ . '/chap_06_post_data_config_messages.php';\ninclude __DIR__ . '/chap_06_post_data_config_callbacks.php';\n```", "```php\n$assignments = [\n  '*'   => [ ['key' => 'trim', 'params' => []], \n          ['key' => 'strip_tags', 'params' => []] ],\n  'first_name'  => [ ['key' => 'length', \n   'params' => ['length' => 128]] ],\n  'last_name'  => [ ['key' => 'length', \n   'params' => ['length' => 128]] ],\n  'city'          => [ ['key' => 'length', \n   'params' => ['length' => 64]] ],\n  'budget'     => [ ['key' => 'filter_float', 'params' => []] ],\n];\n```", "```php\n$goodData = [\n  'first_name'      => 'Your Full',\n  'last_name'       => 'Name',\n  'address'         => '123 Main Street',\n  'city'            => 'San Francisco',\n  'state_province'  => 'California',\n  'postal_code'     => '94101',\n  'phone'           => '+1 415-555-1212',\n  'country'         => 'US',\n  'email'           => 'your@email.address.com',\n  'budget'          => '123.45',\n];\n$badData = [\n  'first_name'      => 'This+Name<script>bad tag</script>Valid!',\n  'last_name'       => 'ThisLastNameIsWayTooLongAbcdefghijklmnopqrstuvwxyz0123456789Abcdefghijklmnopqrstuvwxyz0123456789Abcdefghijklmnopqrstuvwxyz0123456789Abcdefghijklmnopqrstuvwxyz0123456789',\n  //'address'       => '',    // missing\n  'city'            => '  ThisCityNameIsTooLong012345678901234567890123456789012345678901234567890123456789  ',\n  //'state_province'=> '',    // missing\n  'postal_code'     => '!\"\u00a3$%^Non Alpha Chars',\n  'phone'           => ' 12345 ',\n  'country'         => 'XX',\n  'email'           => 'this.is@not@an.email',\n  'budget'          => 'XXX',\n];\n```", "```php\n$filter = new Application\\Filter\\Filter(\n$config['filters'], $assignments);\n$filter->setSeparator(PHP_EOL);\n  $filter->process($goodData);\necho $filter->getMessageString();\n  var_dump($filter->getItemsAsArray());\n\n$filter->process($badData);\necho $filter->getMessageString();\nvar_dump($filter->getItemsAsArray());\n```", "```php\n    use Application\\Filter\\ { Result, Messages, CallbackInterface };\n    $config = [\n      // validator callbacks\n      'validators' => [\n        'key' => new class () implements CallbackInterface \n        {\n          public function __invoke($item, $params) : Result\n          {\n            // validation logic goes here\n            return new Result($valid, $error);\n          }\n        },\n        // etc.\n    ```", "```php\n    namespace Application\\Filter;\n    class Validator extends AbstractFilter\n    {\n      // code\n    }\n    ```", "```php\n    public function process(array $data)\n    {\n      $valid = TRUE;\n      if (!(isset($this->assignments) \n          && count($this->assignments))) {\n            return $valid;\n      }\n    ```", "```php\n    foreach ($data as $key => $value) {\n      $this->results[$key] = new Result(TRUE, array());\n    }\n    ```", "```php\n    $toDo = $this->assignments;\n    if (isset($toDo['*'])) {\n      $this->processGlobalAssignment($toDo['*'], $data);\n      unset($toDo['*']);\n    }\n    ```", "```php\n    foreach ($toDo as $key => $assignment) {\n      if (!isset($data[$key])) {\n          $this->results[$key] = \n          new Result(FALSE, $this->missingMessage);\n      } else {\n          $this->processAssignment(\n            $assignment, $key, $data[$key]);\n      }\n      if (!$this->results[$key]->item) $valid = FALSE;\n      }\n      return $valid;\n    }\n    ```", "```php\n    protected function processGlobalAssignment($assignment, $data)\n    {\n      foreach ($assignment as $callback) {\n        if ($callback === NULL) continue;\n        foreach ($data as $k => $value) {\n          $result = $this->callbacks[$callback['key']]\n          ($value, $callback['params']);\n          $this->results[$k]->mergeValidationResults($result);\n        }\n      }\n    }\n    ```", "```php\n    protected function processAssignment($assignment, $key, $value)\n    {\n      foreach ($assignment as $callback) {\n        if ($callback === NULL) continue;\n            $result = $this->callbacks[$callback['key']]\n           ($value, $callback['params']);\n            $this->results[$key]->mergeValidationResults($result);\n        }\n      }\n    ```", "```php\n'validation_key' => new class () implements CallbackInterface \n{\n  public function __invoke($item, $params) : Result\n  {\n    $error = array();\n    $valid = /* perform validation operation on $item */\n    if (!$valid) \n    $error[] = Messages::$messages['validation_key'];\n    return new Result($valid, $error);\n  }\n}\n```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\ninclude __DIR__ . '/chap_06_post_data_config_messages.php';\ninclude __DIR__ . '/chap_06_post_data_config_callbacks.php';\n```", "```php\n$assignments = [\n  'first_name'       => [ ['key' => 'length',  \n  'params'   => ['min' => 1, 'max' => 128]], \n                ['key' => 'alnum',   \n  'params'   => ['allowWhiteSpace' => TRUE]],\n                ['key'   => 'required','params' => []] ],\n  'last_name'=> [ ['key' => 'length',  \n  'params'   => ['min'   => 1, 'max' => 128]],\n                ['key'   => 'alnum',   \n  'params'   => ['allowWhiteSpace' => TRUE]],\n                ['key'   => 'required','params' => []] ],\n  'address'       => [ ['key' => 'length',  \n  'params'        => ['max' => 256]] ],\n  'city'          => [ ['key' => 'length',  \n  'params'        => ['min' => 1, 'max' => 64]] ], \n  'state_province'=> [ ['key' => 'length',  \n  'params'        => ['min' => 1, 'max' => 32]] ], \n  'postal_code'   => [ ['key' => 'length',  \n  'params'        => ['min' => 1, 'max' => 16] ], \n                     ['key' => 'alnum',   \n  'params'        => ['allowWhiteSpace' => TRUE]],\n                     ['key' => 'required','params' => []] ],\n  'phone'         => [ ['key' => 'phone', 'params' => []] ],\n  'country'       => [ ['key' => 'in_array',\n  'params'        => $countries ], \n                     ['key' => 'required','params' => []] ],\n  'email'         => [ ['key' => 'email', 'params' => [] ],\n                     ['key' => 'length',  \n  'params'        => ['max' => 250] ], \n                     ['key' => 'required','params' => [] ] ],\n  'budget'        => [ ['key' => 'float', 'params' => []] ]\n];\n```", "```php\n$validator = new Application\\Filter\\Validator($config['validators'], $assignments);\n$validator->setSeparator(PHP_EOL);\n$validator->process($badData);\necho $validator->getMessageString(40, '%14s : %-26s' . PHP_EOL);\nvar_dump($validator->getItemsAsArray());\n$validator->process($goodData);\necho $validator->getMessageString(40, '%14s : %-26s' . PHP_EOL);\nvar_dump($validator->getItemsAsArray());\n```", "```php\n    const DATA_NOT_FOUND = 'Data not found. Run setData()';\n    const FILTER_NOT_FOUND = 'Filter not found. Run setFilter()';\n    const VALIDATOR_NOT_FOUND = 'Validator not found. Run setValidator()';\n\n    protected $filter;\n    protected $validator;\n    protected $data;\n\n    public function setFilter(Filter $filter)\n    {\n      $this->filter = $filter;\n    }\n\n    public function setValidator(Validator $validator)\n    {\n      $this->validator = $validator;\n    }\n\n    public function setData($data)\n    {\n      $this->data = $data;\n    }\n    ```", "```php\n    public function validate()\n    {\n      if (!$this->data)\n      throw new RuntimeException(self::DATA_NOT_FOUND);\n\n      if (!$this->validator)\n      throw new RuntimeException(self::VALIDATOR_NOT_FOUND);\n    ```", "```php\n    $valid = $this->validator->process($this->data);\n\n    foreach ($this->elements as $element) {\n      if (isset($this->validator->getResults()\n          [$element->getName()])) {\n            $element->setErrors($this->validator->getResults()\n            [$element->getName()]->messages);\n          }\n        }\n        return $valid;\n      }\n    ```", "```php\n    public function filter()\n    {\n      if (!$this->data)\n      throw new RuntimeException(self::DATA_NOT_FOUND);\n\n      if (!$this->filter)\n      throw new RuntimeException(self::FILTER_NOT_FOUND);\n    ```", "```php\n    $this->filter->process($this->data);\n    foreach ($this->filter->getResults() as $key => $result) {\n      if (isset($this->elements[$key])) {\n        $this->elements[$key]\n        ->setSingleAttribute('value', $result->item);\n        if (isset($result->messages) \n            && count($result->messages)) {\n          foreach ($result->messages as $message) {\n            $this->elements[$key]->addSingleError($message);\n          }\n        }\n      }      \n    }\n    }\n    ```", "```php\n<?php\nuse Application\\Form\\Generic;\n\ndefine('VALIDATE_SUCCESS', 'SUCCESS: form submitted ok!');\ndefine('VALIDATE_FAILURE', 'ERROR: validation errors detected');\n\n$wrappers = [\n  Generic::INPUT  => ['type' => 'td', 'class' => 'content'],\n  Generic::LABEL  => ['type' => 'th', 'class' => 'label'],\n  Generic::ERRORS => ['type' => 'td', 'class' => 'error']\n];\n\n$elements = [\n  'first_name' => [  \n     'class'     => 'Application\\Form\\Generic',\n     'type'      => Generic::TYPE_TEXT, \n     'label'     => 'First Name', \n     'wrappers'  => $wrappers,\n     'attributes'=> ['maxLength'=>128,'required'=>'']\n  ],\n  'last_name'   => [  \n    'class'     => 'Application\\Form\\Generic',\n    'type'      => Generic::TYPE_TEXT, \n    'label'     => 'Last Name', \n    'wrappers'  => $wrappers,\n    'attributes'=> ['maxLength'=>128,'required'=>'']\n  ],\n    // etc.\n];\n\n// overall form config\n$formConfig = [ \n  'name'       => 'prospectsForm',\n  'attributes' => [\n'method'=>'post',\n'action'=>'chap_06_tying_filters_to_form.php'\n],\n  'row_wrapper'  => ['type' => 'tr', 'class' => 'row'],\n  'form_wrapper' => [\n    'type'=>'table',\n    'class'=>'table',\n    'id'=>'prospectsTable',\n    'class'=>'display','cellspacing'=>'0'\n  ],\n  'form_tag_inside_wrapper' => FALSE,\n];\n\n$assignments = [\n  'first_name'    => [ ['key' => 'length',  \n  'params'        => ['min' => 1, 'max' => 128]], \n                     ['key' => 'alnum',   \n  'params'        => ['allowWhiteSpace' => TRUE]],\n                     ['key' => 'required','params' => []] ],\n  'last_name'     => [ ['key' => 'length',  \n  'params'        => ['min' => 1, 'max' => 128]],\n                     ['key' => 'alnum',   \n  'params'        => ['allowWhiteSpace' => TRUE]],\n                     ['key' => 'required','params' => []] ],\n  'address'       => [ ['key' => 'length',  \n  'params'        => ['max' => 256]] ],\n  'city'          => [ ['key' => 'length',  \n  'params'        => ['min' => 1, 'max' => 64]] ], \n  'state_province'=> [ ['key' => 'length',  \n  'params'        => ['min' => 1, 'max' => 32]] ], \n  'postal_code'   => [ ['key' => 'length',  \n  'params'        => ['min' => 1, 'max' => 16] ], \n                     ['key' => 'alnum',   \n  'params'        => ['allowWhiteSpace' => TRUE]],\n                     ['key' => 'required','params' => []] ],\n  'phone'         => [ ['key' => 'phone',   'params' => []] ],\n  'country'       => [ ['key' => 'in_array',\n  'params'        => $countries ], \n                     ['key' => 'required','params' => []] ],\n  'email'         => [ ['key' => 'email',   'params' => [] ],\n                     ['key' => 'length',  \n  'params'        => ['max' => 250] ], \n                     ['key' => 'required','params' => [] ] ],\n  'budget'        => [ ['key' => 'float',   'params' => []] ]\n];\n```", "```php\n<?php\nrequire __DIR__ . '/../Application/Autoload/Loader.php';\nApplication\\Autoload\\Loader::init(__DIR__ . '/..');\ninclude __DIR__ . '/chap_06_post_data_config_messages.php';\ninclude __DIR__ . '/chap_06_post_data_config_callbacks.php';\ninclude __DIR__ . '/chap_06_tying_filters_to_form_definitions.php';\n```", "```php\nuse Application\\Form\\Factory;\nuse Application\\Filter\\ { Validator, Filter };\n$form = Factory::generate($elements);\n$form->setFilter(new Filter($callbacks['filters'], $assignments['filters']));\n$form->setValidator(new Validator($callbacks['validators'], $assignments['validators']));\n```", "```php\n$message = '';\nif (isset($_POST['submit'])) {\n  $form->setData($_POST);\n  if ($form->validate()) {\n    $message = VALIDATE_SUCCESS;\n  } else {\n    $message = VALIDATE_FAILURE;\n  }\n  $form->filter();\n}\n?>\n```", "```php\n  <?= $form->render($form, $formConfig); ?>\n```"]