["```php\n$languages = [\"php\", \"python\", \"java\", \"c\", \"erlang\"];\n\nforeach ($languages as $ind => $language) {\n\n    $languages[$ind] = ucfirst($language);\n\n}\n\n```", "```php\n$languages = array_map('ucfirst', $languages);\n\n```", "```php\nfunction sum($a, $b, $c) {\n\n    return $a + $b + $c;\n\n}\n\n```", "```php\nfunction currySum($a) { \n\n    return function($b) use ($a) { \n\n        return function ($c) use ($a, $b) { \n\n            return $a + $b + $c; \n\n        }; \n\n    }; \n\n} \n\n$sum = currySum(10)(20)(30); \n\necho $sum;\n\n```", "```php\nfunction partial($funcName, ...$args) { \n\n    return function(...$innerArgs) use ($funcName, $args) { \n\n        $allArgs = array_merge($args, $innerArgs); \n\n        return call_user_func_array($funcName, $allArgs); \n\n    }; \n\n} \n\n$sum = partial(\"sum\", 10, 20); \n\n$sum = $sum(30); \n\necho $sum;\n\n```", "```php\ncomposer require Tarsana/functional\n\n```", "```php\nuse Tarsana\\Functional as F; \n\n```", "```php\nrequire __DIR__ . '/vendor/autoload.php'; \n\nuse Tarsana\\Functional as F; \n\n$add = F\\curry(function($x, $y, $z) { \n\n    return $x + $y + $z; \n\n}); \n\necho $add(1, 2, 4).\"\\n\"; \n\n$addFive = $add(5); \n\n$addSix = $addFive(6); \n\necho $addSix(2); \n\n```", "```php\n$reduce = F\\curry('array_reduce'); \n\n$sum = $reduce(F\\__(), F\\plus()); \n\necho $sum([1, 2, 3, 4, 5], 0);\n\n```", "```php\n$square = function($x) { return $x * $x; }; \n\n$addThenSquare = F\\pipe(F\\plus(), $square); \n\necho $addThenSquare(2, 3);\n\n```", "```php\nrequire __DIR__ . '/vendor/autoload.php'; \n\nuse Tarsana\\Functional as F; \n\n$stack = []; \n\n$push = F\\append(F\\__(), F\\__()); \n\n$top = F\\last(F\\__()); \n\n$pop = F\\init(F\\__()); \n\n$stack = $push(1, $stack); \n\n$stack = $push(2, $stack); \n\n$stack = $push(3, $stack); \n\necho \"Stack is \".F\\toString($stack).\"\\n\"; \n\n$item = $top($stack); \n\n$stack = $pop($stack); \n\necho \"Pop-ed item: \".$item.\"\\n\"; \n\necho \"Stack is \".F\\toString($stack).\"\\n\"; \n\n$stack = $push(4, $stack); \n\necho \"Stack is \".F\\toString($stack).\"\\n\"; \n\n```", "```php\nStack is [1, 2, 3]\n\nPop-ed item: 3\n\nStack is [1, 2]\n\nStack is [1, 2, 4]\n\n```", "```php\nrequire __DIR__ . '/vendor/autoload.php'; \n\nuse Tarsana\\Functional as F; \n\n$queue = []; \n\n$enqueue = F\\append(F\\__(), F\\__()); \n\n$head = F\\head(F\\__()); \n\n$dequeue = F\\tail(F\\__()); \n\n$queue = $enqueue(1, $queue); \n\n$queue = $enqueue(2, $queue); \n\n$queue = $enqueue(3, $queue); \n\necho \"Queue is \".F\\toString($queue).\"\\n\"; \n\n$item = $head($queue); \n\n$queue = $dequeue($queue); \n\necho \"Dequeue-ed item: \".$item.\"\\n\"; \n\necho \"Queue is \".F\\toString($queue).\"\\n\"; \n\n$queue = $enqueue(4, $queue); \n\necho \"Queue is \".F\\toString($queue).\"\\n\"; \n\n```", "```php\nQueue is [1, 2, 3]\n\nDequeue-ed item: 1\n\nQueue is [2, 3]\n\nQueue is [2, 3, 4]\n\n```", "```php\nfunction treeTraverse(array &$tree, int $index = 0,\n\nint $level = 0, &$outputStr = \"\") : ?bool {\n\n    if(isset($tree[$index])) {\n\n        $outputStr .= str_repeat(\"-\", $level); \n\n        $outputStr .= $tree[$index] . \"\\n\";\n\n        treeTraverse($tree, 2 * $index + 1, $level+1,$outputStr);      \n\n        treeTraverse($tree, 2 * ($index + 1), $level+1,$outputStr);\n\n    } else { \n\n        return false; \n\n    }\n\n return null; \n\n} \n\n        $nodes = []; \n\n        $nodes[] = \"Final\"; \n\n        $nodes[] = \"Semi Final 1\"; \n\n        $nodes[] = \"Semi Final 2\"; \n\n        $nodes[] = \"Quarter Final 1\"; \n\n        $nodes[] = \"Quarter Final 2\"; \n\n        $nodes[] = \"Quarter Final 3\"; \n\n        $nodes[] = \"Quarter Final 4\"; \n\n        $treeStr = \"\"; \n\n        treeTraverse($nodes,0,0,$treeStr); \n\n        echo $treeStr; \n\n```"]