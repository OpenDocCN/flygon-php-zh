["```php\n**php bin/console generate:bundle --namespace=Foggyline/SalesBundle**\n\n```", "```php\nnew Foggyline\\PaymentBundle\\FoggylineSalesBundle(),\n```", "```php\nfoggyline_payment:\n  resource: \"@FoggylineSalesBundle/Resources/config/routing.xml\"\n  prefix:   /\n```", "```php\n**php bin/console generate:doctrine:entity**\n\n```", "```php\n**php bin/console doctrine:schema:update --force**\n\n```", "```php\n**php bin/console generate:doctrine:entity**\n\n```", "```php\n/**\n * @ORM\\ManyToOne(targetEntity=\"Cart\", inversedBy=\"items\")\n * @ORM\\JoinColumn(name=\"cart_id\", referencedColumnName=\"id\")\n */\nprivate $cart;\n```", "```php\n/**\n * @ORM\\OneToMany(targetEntity=\"CartItem\", mappedBy=\"cart\")\n */\nprivate $items;\n\npublic function __construct() {\n  $this->items = new \\Doctrine\\Common\\Collections\\ArrayCollection();\n}\n```", "```php\n**php bin/console doctrine:schema:update --force**\n\n```", "```php\n**php bin/console generate:doctrine:entity**\n\n```", "```php\n**php bin/console doctrine:schema:update --force**\n\n```", "```php\n**php bin/console generate:doctrine:entity**\n\n```", "```php\n/**\n * @ORM\\ManyToOne(targetEntity=\"SalesOrder\", inversedBy=\"items\")\n * @ORM\\JoinColumn(name=\"sales_order_id\", referencedColumnName=\"id\")\n */\nprivate $salesOrder;\n\n/**\n * @ORM\\OneToOne(targetEntity=\"Foggyline\\CatalogBundle\\Entity\\Product\")\n * @ORM\\JoinColumn(name=\"product_id\", referencedColumnName=\"id\")\n */\nprivate $product;\n```", "```php\n/**\n * @ORM\\OneToMany(targetEntity=\"SalesOrderItem\", mappedBy=\"salesOrder\")\n */\nprivate $items;\n\npublic function __construct() {\n  $this->items = new \\Doctrine\\Common\\Collections\\ArrayCollection();\n}\n```", "```php\n**php bin/console doctrine:schema:update --force**\n\n```", "```php\n<service id=\"foggyline_sales.add_to_cart_url\" class=\"Foggyline\\SalesBundle\\Service\\AddToCartUrl\">\n  <argument type=\"service\" id=\"doctrine.orm.entity_manager\"/>\n  <argument type=\"service\" id=\"router\"/>\n</service>\n```", "```php\nnamespace Foggyline\\SalesBundle\\Service;\n\nclass AddToCartUrl\n{\n  private $em;\n  private $router;\n\n  public function __construct(\n    \\Doctrine\\ORM\\EntityManager $entityManager,\n    \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router\n  )\n  {\n    $this->em = $entityManager;\n    $this->router = $router;\n  }\n\n  public function getAddToCartUrl($productId)\n  {\n    return $this->router->generate('foggyline_sales_cart_add', array('id' => $productId));\n  }\n}\n```", "```php\n<route id=\"foggyline_sales_cart_add\" path=\"/cart/add/{id}\">\n  <default key=\"_controller\">FoggylineSalesBundle:Cart:add</default>\n</route>\n```", "```php\nnamespace Foggyline\\SalesBundle\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\n\nclass CartController extends Controller\n{\n  public function addAction($id)\n  {\n    if ($customer = $this->getUser()) {\n      $em = $this->getDoctrine()->getManager();\n      $now = new \\DateTime();\n\n      $product = $em->getRepository('FoggylineCatalogBundle:Product')->find($id);\n\n      // Grab the cart for current user\n      $cart = $em->getRepository('FoggylineSalesBundle:Cart')->findOneBy(array('customer' => $customer));\n\n      // If there is no cart, create one\n      if (!$cart) {\n        $cart = new \\Foggyline\\SalesBundle\\Entity\\Cart();\n        $cart->setCustomer($customer);\n        $cart->setCreatedAt($now);\n        $cart->setModifiedAt($now);\n      } else {\n        $cart->setModifiedAt($now);\n      }\n\n      $em->persist($cart);\n      $em->flush();\n\n      // Grab the possibly existing cart item\n      // But, lets find it directly\n      $cartItem = $em->getRepository('FoggylineSalesBundle:CartItem')->findOneBy(array('cart' => $cart, 'product' => $product));\n\n      if ($cartItem) {\n        // Cart item exists, update it\n        $cartItem->setQty($cartItem->getQty() + 1);\n        $cartItem->setModifiedAt($now);\n      } else {\n        // Cart item does not exist, add new one\n        $cartItem = new \\Foggyline\\SalesBundle\\Entity\\CartItem();\n        $cartItem->setCart($cart);\n        $cartItem->setProduct($product);\n        $cartItem->setQty(1);\n        $cartItem->setUnitPrice($product->getPrice());\n        $cartItem->setCreatedAt($now);\n        $cartItem->setModifiedAt($now);\n      }\n\n      $em->persist($cartItem);\n      $em->flush();\n\n      $this->addFlash('success', sprintf('%s successfully added to cart', $product->getTitle()));\n\n      return $this->redirectToRoute('foggyline_sales_cart');\n    } else {\n      $this->addFlash('warning', 'Only logged in users can add to cart.');\n      return $this->redirect('/');\n    }\n  }\n}\n```", "```php\nnamespace Foggyline\\SalesBundle\\DependencyInjection\\Compiler;\n\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Definition;\n\nclass OverrideServiceCompilerPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container)\n    {\n        // Override 'add_to_cart_url' service\n        $container->removeDefinition('add_to_cart_url');\n        $container->setDefinition('add_to_cart_url', $container->getDefinition('foggyline_sales.add_to_cart_url'));\n\n        // Override 'checkout_menu' service\n        // Override 'foggyline_customer.customer_orders' service\n        // Override 'bestsellers' service\n        // Pickup/parse 'shipment_method' services\n        // Pickup/parse 'payment_method' services\n    }\n}\n```", "```php\npublic function build(ContainerBuilder $container)\n{\n    parent::build($container);;\n    $container->addCompilerPass(new OverrideServiceCompilerPass());\n}\n```", "```php\n<service id=\"foggyline_sales.checkout_menu\" class=\"Foggyline\\SalesBundle\\Service\\CheckoutMenu\">\n<argument type=\"service\" id=\"doctrine.orm.entity_manager\"/>\n<argument type=\"service\" id=\"security.token_storage\"/>\n<argument type=\"service\" id=\"router\"/>\n</service>\n```", "```php\nnamespace Foggyline\\SalesBundle\\Service;\n\nclass CheckoutMenu\n{\n  private $em;\n  private $token;\n  private $router;\n\n  public function __construct(\n    \\Doctrine\\ORM\\EntityManager $entityManager,\n    $tokenStorage,\n    \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router\n  )\n  {\n    $this->em = $entityManager;\n    $this->token = $tokenStorage->getToken();\n    $this->router = $router;\n  }\n\n  public function getItems()\n  {\n    if ($this->token\n      && $this->token->getUser() instanceof \\Foggyline\\CustomerBundle\\Entity\\Customer\n    ) {\n      $customer = $this->token->getUser();\n\n      $cart = $this->em->getRepository('FoggylineSalesBundle:Cart')->findOneBy(array('customer' => $customer));\n\n      if ($cart) {\n        return array(\n          array('path' => $this->router->generate('foggyline_sales_cart'), 'label' =>sprintf('Cart (%s)', count($cart->getItems()))),\n          array('path' => $this->router->generate('foggyline_sales_checkout'), 'label' =>'Checkout'),\n        );\n      }\n    }\n\n    return array();\n  }\n}\n```", "```php\n<route id=\"foggyline_sales_cart\" path=\"/cart/\">\n  <default key=\"_controller\">FoggylineSalesBundle:Cart:index</default>\n</route>\n\n<route id=\"foggyline_sales_checkout\" path=\"/checkout/\">\n  <default key=\"_controller\">FoggylineSalesBundle:Checkout:index</default>\n</route>\n```", "```php\npublic function indexAction(Request $request)\n{\n}\n```", "```php\nnamespace Foggyline\\SalesBundle\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CountryType;\n\nclass CheckoutController extends Controller\n{\n  public function indexAction()\n  {\n  }\n}\n```", "```php\n$container->removeDefinition('checkout_menu');\n$container->setDefinition('checkout_menu', $container->getDefinition('foggyline_sales.checkout_menu'));\n```", "```php\n<service id=\"foggyline_sales.customer_orders\" class=\"Foggyline\\SalesBundle\\Service\\CustomerOrders\">\n  <argument type=\"service\" id=\"doctrine.orm.entity_manager\"/>\n  <argument type=\"service\" id=\"security.token_storage\"/>\n  <argument type=\"service\" id=\"router\"/>\n</service>\n```", "```php\nnamespace Foggyline\\SalesBundle\\Service;\n\nclass CustomerOrders\n{\n  private $em;\n  private $token;\n  private $router;\n\n  public function __construct(\n    \\Doctrine\\ORM\\EntityManager $entityManager,\n    $tokenStorage,\n    \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router\n  )\n  {\n    $this->em = $entityManager;\n    $this->token = $tokenStorage->getToken();\n    $this->router = $router;\n  }\n\n  public function getOrders()\n  {\n    $orders = array();\n\n    if ($this->token\n    && $this->token->getUser() instanceof \\Foggyline\\CustomerBundle\\Entity\\Customer\n    ) {\n      $salesOrders = $this->em->getRepository('FoggylineSalesBundle:SalesOrder')\n      ->findBy(array('customer' => $this->token->getUser()));\n\n      foreach ($salesOrders as $salesOrder) {\n        $orders[] = array(\n          'id' => $salesOrder->getId(),\n          'date' => $salesOrder->getCreatedAt()->format('d/m/Y H:i:s'),\n          'ship_to' => $salesOrder->getAddressFirstName() . '' . $salesOrder->getAddressLastName(),\n'         'order_total' => $salesOrder->getTotalPrice(),\n          'status' => $salesOrder->getStatus(),\n          'actions' => array(\n            array(\n              'label' =>'Cancel',\n              'path' => $this->router->generate('foggyline_sales_order_cancel', array('id' => $salesOrder->getId()))\n            ),\n            array(\n              'label' =>'Print',\n              'path' => $this->router->generate('foggyline_sales_order_print', array('id' => $salesOrder->getId()))\n            )\n          )\n        );\n      }\n    }\n    return $orders;\n  }\n}\n```", "```php\n<route id=\"foggyline_sales_order_cancel\"path=\"/order/cancel/{id}\">\n  <default key=\"_controller\">FoggylineSalesBundle:SalesOrder:cancel</default>\n</route>\n\n<route id=\"foggyline_sales_order_print\" path=\"/order/print/{id}\">\n  <default key=\"_controller\">FoggylineSalesBundle:SalesOrder:print</default>\n</route>\n```", "```php\n**php bin/console generate:doctrine:crud**\n\n```", "```php\nfoggyline_sales_sales_order:\n  resource: \"@FoggylineSalesBundle/Controller/SalesOrderController.php\"\n  type:     annotation\n```", "```php\npublic function cancelAction($id)\n{\n  if ($customer = $this->getUser()) {\n    $em = $this->getDoctrine()->getManager();\n    $salesOrder = $em->getRepository('FoggylineSalesBundle:SalesOrder')\n    ->findOneBy(array('customer' => $customer, 'id' => $id));\n\n    if ($salesOrder->getStatus() != \\Foggyline\\SalesBundle\\Entity\\SalesOrder::STATUS_COMPLETE) {\n      $salesOrder->setStatus(\\Foggyline\\SalesBundle\\Entity\\SalesOrder::STATUS_CANCELED);\n      $em->persist($salesOrder);\n      $em->flush();\n    }\n  }\n\n  return $this->redirectToRoute('customer_account');\n}\n\npublic function printAction($id)\n{\n  if ($customer = $this->getUser()) {\n    $em = $this->getDoctrine()->getManager();\n    $salesOrder = $em->getRepository('FoggylineSalesBundle:SalesOrder')\n    ->findOneBy(array('customer' => $customer, 'id' =>$id));\n\n    return $this->render('FoggylineSalesBundle:default:salesorder/print.html.twig', array(\n      'salesOrder' => $salesOrder,\n      'customer' => $customer\n    ));\n  }\n\n  return $this->redirectToRoute('customer_account');\n}\n```", "```php\n{% block body %}\n<h1>Printing Order #{{ salesOrder.id }}</h1>\n  {#<p>Just a dummy Twig dump of entire variable</p>#}\n  {{ dump(salesOrder) }}\n{% endblock %}\n```", "```php\n$container->removeDefinition('foggyline_customer.customer_orders');\n$container->setDefinition('foggyline_customer.customer_orders', $container->getDefinition('foggyline_sales.customer_orders'));\n```", "```php\n<service id=\"foggyline_sales.bestsellers\" class=\"Foggyline\\SalesBundle\\Service\\BestSellers\">\n  <argument type=\"service\" id=\"doctrine.orm.entity_manager\"/>\n  <argument type=\"service\" id=\"router\"/>\n</service>\n```", "```php\nnamespace Foggyline\\SalesBundle\\Service;\n\nclass BestSellers\n{\n  private $em;\n  private $router;\n\n  public function __construct(\n    \\Doctrine\\ORM\\EntityManager $entityManager,\n    \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router\n  )\n  {\n    $this->em = $entityManager;\n    $this->router = $router;\n  }\n\n  public function getItems()\n  {\n    $products = array();\n    $salesOrderItem = $this->em->getRepository('FoggylineSalesBundle:SalesOrderItem');\n    $_products = $salesOrderItem->getBestsellers();\n\n    foreach ($_products as $_product) {\n      $products[] = array(\n        'path' => $this->router->generate('product_show', array('id' => $_product->getId())),\n        'name' => $_product->getTitle(),\n        'img' => $_product->getImage(),\n        'price' => $_product->getPrice(),\n        'id' => $_product->getId(),\n      );\n    }\n    return $products;\n  }\n}\n```", "```php\npublic function getBestsellers()\n{\n  $products = array();\n\n  $query = $this->_em->createQuery('SELECT IDENTITY(t.product), SUM(t.qty) AS HIDDEN q\n  FROM Foggyline\\SalesBundle\\Entity\\SalesOrderItem t\n  GROUP BY t.product ORDER BY q DESC')\n  ->setMaxResults(5);\n\n  $_products = $query->getResult();\n\n  foreach ($_products as $_product) {\n    $products[] = $this->_em->getRepository('FoggylineCatalogBundle:Product')\n    ->find(current($_product));\n  }\n\n  return $products;\n}\n```", "```php\n$container->removeDefinition('bestsellers');\n$container->setDefinition('bestsellers', $container->getDefinition('foggyline_sales.bestsellers'));\n```", "```php\npublic function indexAction()\n{\n  if ($customer = $this->getUser()) {\n    $em = $this->getDoctrine()->getManager();\n\n    $cart = $em->getRepository('FoggylineSalesBundle:Cart')->findOneBy(array('customer' => $customer));\n    $items = $cart->getItems();\n    $total = null;\n\n    foreach ($items as $item) {\n      $total += floatval($item->getQty() * $item->getUnitPrice());\n    }\n\n    return $this->render('FoggylineSalesBundle:default:cart/index.html.twig', array(\n        'customer' => $customer,\n        'items' => $items,\n        'total' => $total,\n      ));\n  } else {\n    $this->addFlash('warning', 'Only logged in customers can access cart page.');\n    return $this->redirectToRoute('foggyline_customer_login');\n  }\n}\n```", "```php\n{% extends 'base.html.twig' %}\n{% block body %}\n<h1>Shopping Cart</h1>\n<div class=\"row\">\n  <div class=\"large-8 columns\">\n    <form action=\"{{ path('foggyline_sales_cart_update') }}\"method=\"post\">\n    <table>\n      <thead>\n        <tr>\n          <th>Item</th>\n          <th>Price</th>\n          <th>Qty</th>\n          <th>Subtotal</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for item in items %}\n        <tr>\n          <td>{{ item.product.title }}</td>\n          <td>{{ item.unitPrice }}</td>\n          <td><input name=\"item[{{ item.id }}]\" value=\"{{ item.qty }}\"/></td>\n          <td>{{ item.qty * item.unitPrice }}</td>\n        </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n    <button type=\"submit\" class=\"button\">Update Cart</button>\n  </form>\n</div>\n<div class=\"large-4 columns\">\n  <div>Order Total: {{ total }}</div>\n  <div><a href=\"{{ path('foggyline_sales_checkout') }}\"class=\"button\">Go to Checkout</a></div>\n  </div>\n</div>\n{% endblock %}\n```", "```php\n<route id=\"foggyline_sales_cart_update\" path=\"/cart/update\">\n  <default key=\"_controller\">FoggylineSalesBundle:Cart:update</default>\n</route>\n```", "```php\npublic function updateAction(Request $request)\n{\n  $items = $request->get('item');\n\n  $em = $this->getDoctrine()->getManager();\n  foreach ($items as $_id => $_qty) {\n    $cartItem = $em->getRepository('FoggylineSalesBundle:CartItem')->find($_id);\n    if (intval($_qty) > 0) {\n      $cartItem->setQty($_qty);\n      $em->persist($cartItem);\n    } else {\n      $em->remove($cartItem);\n    }\n  }\n  // Persist to database\n  $em->flush();\n\n  $this->addFlash('success', 'Cart updated.');\n\n  return $this->redirectToRoute('foggyline_sales_cart');\n}\n```", "```php\n$container->getDefinition('foggyline_sales.payment')\n  ->addArgument(\n  array_keys($container->findTaggedServiceIds('payment_method'))\n);\n```", "```php\n<service id=\"foggyline_sales.payment\" class=\"Foggyline\\SalesBundle\\Service\\Payment\">\n  <argument type=\"service\" id=\"service_container\"/>\n</service>\n```", "```php\nnamespace Foggyline\\SalesBundle\\Service;\n\nclass Payment\n{\n  private $container;\n  private $methods;\n\n  public function __construct($container, $methods)\n  {\n    $this->container = $container;\n    $this->methods = $methods;\n  }\n\n  public function getAvailableMethods()\n  {\n    $methods = array();\n\n    foreach ($this->methods as $_method) {\n      $methods[] = $this->container->get($_method);\n    }\n\n    return $methods;\n  }\n}\n```", "```php\n$container->getDefinition('foggyline_sales.shipment')\n  ->addArgument(\n  array_keys($container->findTaggedServiceIds('shipment_method'))\n);\n```", "```php\n<service id=\"foggyline_sales.shipment\"class=\"Foggyline\\SalesBundle\\Service\\Payment\">\n  <argument type=\"service\" id=\"service_container\"/>\n</service>\n```", "```php\nnamespace Foggyline\\SalesBundle\\Service;\n\nclass Shipment\n{\n  private $container;\n  private $methods;\n\n  public function __construct($container, $methods)\n  {\n    $this->container = $container;\n    $this->methods = $methods;\n  }\n\n  public function getAvailableMethods()\n  {\n    $methods = array();\n    foreach ($this->methods as $_method) {\n      $methods[] = $this->container->get($_method);\n    }\n\n    return $methods;\n  }\n}\n```", "```php\npublic function indexAction()\n{\n  if ($customer = $this->getUser()) {\n\n    $form = $this->getAddressForm();\n\n    $em = $this->getDoctrine()->getManager();\n    $cart = $em->getRepository('FoggylineSalesBundle:Cart')->findOneBy(array('customer' => $customer));\n    $items = $cart->getItems();\n    $total = null;\n\n    foreach ($items as $item) {\n      $total += floatval($item->getQty() * $item->getUnitPrice());\n    }\n\n    return $this->render('FoggylineSalesBundle:default:checkout/index.html.twig', array(\n      'customer' => $customer,\n      'items' => $items,\n      'cart_subtotal' => $total,\n      'shipping_address_form' => $form->createView(),\n      'shipping_methods' => $this->get('foggyline_sales.shipment')->getAvailableMethods()\n    ));\n  } else {\n    $this->addFlash('warning', 'Only logged in customers can access checkout page.');\n    return $this->redirectToRoute('foggyline_customer_login');\n  }\n}\nprivate function getAddressForm()\n{\n  return $this->createFormBuilder()\n  ->add('address_first_name', TextType::class)\n  ->add('address_last_name', TextType::class)\n  ->add('company', TextType::class)\n  ->add('address_telephone', TextType::class)\n  ->add('address_country', CountryType::class)\n  ->add('address_state', TextType::class)\n  ->add('address_city', TextType::class)\n  ->add('address_postcode', TextType::class)\n  ->add('address_street', TextType::class)\n  ->getForm();\n}\n```", "```php\n{% extends 'base.html.twig' %}\n{% block body %}\n<h1>Checkout</h1>\n\n<div class=\"row\">\n  <div class=\"large-8 columns\">\n    <form action=\"{{ path('foggyline_sales_checkout_payment') }}\" method=\"post\" id=\"shipping_form\">\n      <fieldset>\n        <legend>Shipping Address</legend>\n        {{ form_widget(shipping_address_form) }}\n      </fieldset>\n\n      <fieldset>\n        <legend>Shipping Methods</legend>\n        <ul>\n          {% for method in shipping_methods %}\n          {% set shipment = method.getInfo('street', 'city', 'country', 'postcode', 'amount', 'qty')['shipment'] %}\n          <li>\n            <label>{{ shipment.title }}</label>\n            <ul>\n              {% for delivery_option in shipment.delivery_options %}\n              <li>\n                <input type=\"radio\" name=\"shipment_method\"\n                  value=\"{{ shipment.code }}____{{ delivery_option.code }}____{{ delivery_option.price }}\"> {{ delivery_option.title }}\n                  ({{ delivery_option.price }})\n                <br>\n              </li>\n              {% endfor %}\n            </ul>\n          </li>\n          {% endfor %}\n        </ul>\n      </fieldset>\n    </form>\n  </div>\n  <div class=\"large-4 columns\">\n    {% include 'FoggylineSalesBundle:default:checkout/order_sumarry.html.twig' \n    %}\n    <div>Cart Subtotal: {{ cart_subtotal }}</div>\n    <div><a id=\"shipping_form_submit\" href=\"#\" class=\"button\">Next</a>\n    </div>\n  </div>\n</div>\n\n<script type=\"text/javascript\">\n  var form = document.getElementById('shipping_form');\n  document.getElementById('shipping_form_submit').addEventListener('click', function () {\n    form.submit();\n  });\n</script>\n{% endblock %}\n```", "```php\n<route id=\"foggyline_sales_checkout_payment\" path=\"/checkout/payment\">\n  <default key=\"_controller\">FoggylineSalesBundle:Checkout:payment</default>\n</route>\n```", "```php\npublic function paymentAction(Request $request)\n{\n  $addressForm = $this->getAddressForm();\n  $addressForm->handleRequest($request);\n\n  if ($addressForm->isSubmitted() && $addressForm->isValid() && $customer = $this->getUser()) {\n\n    $em = $this->getDoctrine()->getManager();\n    $cart = $em->getRepository('FoggylineSalesBundle:Cart')->findOneBy(array('customer' => $customer));\n    $items = $cart->getItems();\n    $cartSubtotal = null;\n\n    foreach ($items as $item) {\n      $cartSubtotal += floatval($item->getQty() * $item->getUnitPrice());\n    }\n\n    $shipmentMethod = $_POST['shipment_method'];\n    $shipmentMethod = explode('____', $shipmentMethod);\n    $shipmentMethodCode = $shipmentMethod[0];\n    $shipmentMethodDeliveryCode = $shipmentMethod[1];\n    $shipmentMethodDeliveryPrice = $shipmentMethod[2];\n\n    // Store relevant info into session\n    $checkoutInfo = $addressForm->getData();\n    $checkoutInfo['shipment_method'] = $shipmentMethodCode . '____' . $shipmentMethodDeliveryCode;\n    $checkoutInfo['shipment_price'] = $shipmentMethodDeliveryPrice;\n    $checkoutInfo['items_price'] = $cartSubtotal;\n    $checkoutInfo['total_price'] = $cartSubtotal + $shipmentMethodDeliveryPrice;\n    $this->get('session')->set('checkoutInfo', $checkoutInfo);\n\n    return $this->render('FoggylineSalesBundle:default:checkout/payment.html.twig', array(\n      'customer' => $customer,\n      'items' => $items,\n      'cart_subtotal' => $cartSubtotal,\n      'delivery_subtotal' => $shipmentMethodDeliveryPrice,\n      'delivery_label' =>'Delivery Label Here',\n      'order_total' => $cartSubtotal + $shipmentMethodDeliveryPrice,\n      'payment_methods' => $this->get('foggyline_sales.payment')->getAvailableMethods()\n    ));\n  } else {\n    $this->addFlash('warning', 'Only logged in customers can access checkout page.');\n    return $this->redirectToRoute('foggyline_customer_login');\n  }\n}\n```", "```php\n{% extends 'base.html.twig' %}\n{% block body %}\n<h1>Checkout</h1>\n<div class=\"row\">\n  <div class=\"large-8 columns\">\n    <form action=\"{{ path('foggyline_sales_checkout_process') }}\"method=\"post\" id=\"payment_form\">\n      <fieldset>\n        <legend>Payment Methods</legend>\n        <ul>\n          {% for method in payment_methods %}\n          {% set payment = method.getInfo()['payment'] %}\n          <li>\n            <input type=\"radio\" name=\"payment_method\"\n              value=\"{{ payment.code }}\"> {{ payment.title }}\n            {% if payment['form'] is defined %}\n            <div id=\"{{ payment.code }}_form\">\n              {{ form_widget(payment['form']) }}\n            </div>\n            {% endif %}\n          </li>\n          {% endfor %}\n        </ul>\n      </fieldset>\n    </form>\n  </div>\n  <div class=\"large-4 columns\">\n    {% include 'FoggylineSalesBundle:default:checkout/order_sumarry.html.twig' %}\n    <div>Cart Subtotal: {{ cart_subtotal }}</div>\n    <div>{{ delivery_label }}: {{ delivery_subtotal }}</div>\n    <div>Order Total: {{ order_total }}</div>\n    <div><a id=\"payment_form_submit\" href=\"#\" class=\"button\">Place Order</a>\n    </div>\n  </div>\n</div>\n<script type=\"text/javascript\">\n  var form = document.getElementById('payment_form');\n  document.getElementById('payment_form_submit').addEventListener('click', function () {\n    form.submit();\n  });\n</script>\n{% endblock %}\n```", "```php\n<route id=\"foggyline_sales_checkout_process\"path=\"/checkout/process\">\n  <default key=\"_controller\">FoggylineSalesBundle:Checkout:process</default>\n</route>\n```", "```php\npublic function processAction()\n{\n  if ($customer = $this->getUser()) {\n\n    $em = $this->getDoctrine()->getManager();\n    // Merge all the checkout info, for SalesOrder\n    $checkoutInfo = $this->get('session')->get('checkoutInfo');\n    $now = new \\DateTime();\n\n    // Create Sales Order\n    $salesOrder = new \\Foggyline\\SalesBundle\\Entity\\SalesOrder();\n    $salesOrder->setCustomer($customer);\n    $salesOrder->setItemsPrice($checkoutInfo['items_price']);\n    $salesOrder->setShipmentPrice\n      ($checkoutInfo['shipment_price']);\n    $salesOrder->setTotalPrice($checkoutInfo['total_price']);\n    $salesOrder->setPaymentMethod($_POST['payment_method']);\n    $salesOrder->setShipmentMethod($checkoutInfo['shipment_method']);\n    $salesOrder->setCreatedAt($now);\n    $salesOrder->setModifiedAt($now);\n    $salesOrder->setCustomerEmail($customer->getEmail());\n    $salesOrder->setCustomerFirstName($customer->getFirstName());\n    $salesOrder->setCustomerLastName($customer->getLastName());\n    $salesOrder->setAddressFirstName($checkoutInfo['address_first_name']);\n    $salesOrder->setAddressLastName($checkoutInfo['address_last_name']);\n    $salesOrder->setAddressCountry($checkoutInfo['address_country']);\n    $salesOrder->setAddressState($checkoutInfo['address_state']);\n    $salesOrder->setAddressCity($checkoutInfo['address_city']);\n    $salesOrder->setAddressPostcode($checkoutInfo['address_postcode']);\n    $salesOrder->setAddressStreet($checkoutInfo['address_street']);\n    $salesOrder->setAddressTelephone($checkoutInfo['address_telephone']);\n    $salesOrder->setStatus(\\Foggyline\\SalesBundle\\Entity\\SalesOrder::STATUS_PROCESSING);\n\n    $em->persist($salesOrder);\n    $em->flush();\n\n    // Foreach cart item, create order item, and delete cart item\n    $cart = $em->getRepository('FoggylineSalesBundle:Cart')->findOneBy(array('customer' => $customer));\n    $items = $cart->getItems();\n\n    foreach ($items as $item) {\n      $orderItem = new \\Foggyline\\SalesBundle\\Entity\\SalesOrderItem();\n\n      $orderItem->setSalesOrder($salesOrder);\n      $orderItem->setTitle($item->getProduct()->getTitle());\n      $orderItem->setQty($item->getQty());\n      $orderItem->setUnitPrice($item->getUnitPrice());\n      $orderItem->setTotalPrice($item->getQty() * $item->getUnitPrice());\n      $orderItem->setModifiedAt($now);\n      $orderItem->setCreatedAt($now);\n      $orderItem->setProduct($item->getProduct());\n\n      $em->persist($orderItem);\n      $em->remove($item);\n    }\n\n    $em->remove($cart);\n    $em->flush();\n\n    $this->get('session')->set('last_order', $salesOrder->getId());\n    return $this->redirectToRoute('foggyline_sales_checkout_success');\n  } else {\n    $this->addFlash('warning', 'Only logged in customers can access checkout page.');\n    return $this->redirectToRoute('foggyline_customer_login');\n  }\n}\n```", "```php\n<route id=\"foggyline_sales_checkout_success\" path=\"/checkout/success\">\n  <default key=\"_controller\">FoggylineSalesBundle:Checkout:success</default>\n</route>\n```", "```php\npublic function successAction()\n{\n\n  return $this->render('FoggylineSalesBundle:default:checkout/success.html.twig', array(\n    'last_order' => $this->get('session')->get('last_order')\n  ));\n}\n```", "```php\n{% extends 'base.html.twig' %}\n{% block body %}\n<h1>Checkout Success</h1>\n<div class=\"row\">\n  <p>Thank you for placing your order #{{ last_order }}.</p>\n  <p>You can see order details <a href=\"{{ path('customer_account') }}\">here</a>.</p>\n</div>\n{% endblock %}\n```", "```php\nnamespace AppBundle\\Controller;\n\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\n\nclass StoreManagerController extends Controller\n{\n  /**\n  * @Route(\"/store_manager\", name=\"store_manager\")\n  */\n  public function indexAction()\n  {\n    return $this->render('AppBundle:default:store_manager.html.twig');\n  }\n}\n```", "```php\n{% extends 'base.html.twig' %}\n{% block body %}\n<h1>Store Manager</h1>\n<div class=\"row\">\n  <div class=\"large-6 columns\">\n    <div class=\"stacked button-group\">\n      <a href=\"{{ path('category_new') }}\" class=\"button\">Add new Category</a>\n      <a href=\"{{ path('product_new') }}\" class=\"button\">Add new Product</a>\n      <a href=\"{{ path('customer_new') }}\" class=\"button\">Add new Customer</a>\n    </div>\n  </div>\n  <div class=\"large-6 columns\">\n    <div class=\"stacked button-group\">\n      <a href=\"{{ path('category_index') }}\" class=\"button\">List & Manage Categories</a>\n      <a href=\"{{ path('product_index') }}\" class=\"button\">List & Manage Products</a>\n      <a href=\"{{ path('customer_index') }}\" class=\"button\">List & Manage Customers</a>\n      <a href=\"{{ path('salesorder_index') }}\" class=\"button\">List & Manage Orders</a>\n    </div>\n  </div>\n</div>\n{% endblock %}\n```", "```php\n<directory>src/Foggyline/SalesBundle/Tests</directory>\n```", "```php\nnamespace Foggyline\\SalesBundle\\Test\\Service;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\n\nclass CustomerOrdersTest extends KernelTestCase\n{\n  private $container;\n\n  public function setUp()\n  {\n    static::bootKernel();\n    $this->container = static::$kernel->getContainer();\n  }\n\n  public function testGetOrders()\n  {\n    $firewall = 'foggyline_customer';\n\n    $em = $this->container->get('doctrine.orm.entity_manager');\n\n    $user = $em->getRepository('FoggylineCustomerBundle:Customer')->findOneByUsername\n      ('ajzele@gmail.com');\n    $token = new UsernamePasswordToken($user, null, $firewall, array('ROLE_USER'));\n\n    $tokenStorage = $this->container->get('security.token_storage');\n    $tokenStorage->setToken($token);\n\n    $orders = new \\Foggyline\\SalesBundle\\Service\\CustomerOrders(\n      $em,\n      $tokenStorage,\n      $this->container->get('router')\n    );\n\n    $this->assertNotEmpty($orders->getOrders());\n  }\n}\n```", "```php\nnamespace Foggyline\\SalesBundle\\Tests\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\nuse Symfony\\Component\\BrowserKit\\Cookie;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken;\n\nclass CartControllerTest extends WebTestCase\n{\n  private $client = null;\n\n  public function setUp()\n  {\n    $this->client = static::createClient();\n  }\n\n  public function testAddToCartAndAccessCheckout()\n  {\n    $this->logIn();\n\n    $crawler = $this->client->request('GET', '/');\n    $crawler = $this->client->click($crawler->selectLink('Add to Cart')->link());\n    $crawler = $this->client->followRedirect();\n\n    $this->assertTrue($this->client->getResponse()->isSuccessful());\n    $this->assertGreaterThan(0, $crawler->filter('html:contains(\"added to cart\")')->count());\n\n    $crawler = $this->client->request('GET', '/sales/cart/');\n    $crawler = $this->client->click($crawler->selectLink('Go to Checkout')->link());\n\n    $this->assertTrue($this->client->getResponse()->isSuccessful());\n    $this->assertGreaterThan(0, $crawler->filter('html:contains(\"Checkout\")')->count());\n  }\n\n  private function logIn()\n  {\n    $session = $this->client->getContainer()->get('session');\n    $firewall = 'foggyline_customer'; // firewall name\n    $em = $this->client->getContainer()->get('doctrine')->getManager();\n    $user = $em->getRepository('FoggylineCustomerBundle:Customer')->findOneByUsername('ajzele@gmail.com');\n\n    $token = new UsernamePasswordToken($user, null, $firewall, array('ROLE_USER'));\n    $session->set('_security_' . $firewall, serialize($token));\n    $session->save();\n\n    $cookie = new Cookie($session->getName(), $session->getId());\n    $this->client->getCookieJar()->set($cookie);\n  }\n}\n```"]