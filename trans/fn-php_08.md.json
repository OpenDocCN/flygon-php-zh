["```php\n<?php \n\nfunction greet() \n{ \n  $hour = (int) date('g'); \n\n  if ($hour >= 5 && $hour < 12) { \n    return \"Good morning!\"; \n  } elseif ($hour < 18) { \n    return \"Good afternoon!\"; \n  } elseif ($hour < 22) { \n    return \"Good evening!\"; \n  } \n  return \"Good night!\"; \n} \n```", "```php\n<?php \n\nfunction title(string $string): string \n{ \n  $stripped = strip_tags($string); \n  $trimmed = trim($stripped); \n  return capitalize($trimmed); \n} \n```", "```php\n**composer require steos/php-quickcheck -stability dev**\n\n```", "```php\n<?php \n\nuse QCheck\\Generator; \nuse QCheck\\Quick; \n\n$singleElement = Quick::check(1000, Generator::forAll( \n    [Generator::ints()], \n    function($i) { \n        return array_reverse([$i]) == [$i]; \n    } \n), ['echo' => true]); \n\n$inverse = Quick::check(1000, Generator::forAll( \n    [Generator::ints()->intoArrays()], \n    function($array) { \n        return array_reverse(array_reverse($array)) == $array; \n    } \n), ['echo' => true]); \n\n$merge = Quick::check(1000, Generator::forAll( \n    [Generator::ints()->intoArrays(), Generator::ints()- >intoArrays()], \n    function($x, $y) { \n        return \n            array_reverse(array_merge($x, $y)) == \n            array_merge(array_reverse($y), array_reverse($x)); \n    } \n), ['echo' => true]); \n```", "```php\narray(3) { \n  [\"result\"]=> bool(true) \n  [\"num_tests\"]=> int(1000) \n  [\"seed\"]=> int(1478161013564) \n} \n```", "```php\n<?php \n\n/** \n * @param string $s \n * @return bool \n */ \nfunction my_function($s) { \n    return is_string($s); \n} \n\nAnnotation::check('my_function'); \n```", "```php\n**composer require giorgiosironi/eris**\n\n```", "```php\n<?php \n\nuse Eris\\Generator; \n\nclass ArrayReverseTest extends \\PHPUnit_Framework_TestCase \n{ \n    use Eris\\TestTrait; \n\n    public function testSingleElement() \n    { \n        $this->forAll(Generator\\vector(1, Generator\\nat())) \n             ->then(function ($x) { \n                 $this->assertEquals($x, array_reverse($x)); \n             }); \n    } \n\n    public function testInverse() \n    { \n      $this->forAll(Generator\\seq(Generator\\nat())) \n           ->then(function ($x) { \n               $this->assertEquals($x,  array_reverse(array_reverse($x))); \n           }); \n    } \n\n    public function testMerge() \n    { \n      $this->forAll( \n               Generator\\seq(Generator\\nat()), \n               Generator\\seq(Generator\\nat()) \n           ) \n           ->then(function ($x, $y) { \n               $this->assertEquals( \n                   array_reverse(array_merge($x, $y)), \n                   array_merge(array_reverse($y),  array_reverse($x)) \n               ); \n           }); \n    } \n} \n```", "```php\n<?php \n\nclass StringAreNotNumbersTest extends \\PHPUnit_Framework_TestCase \n{ \n    use Eris\\TestTrait; \n\n    public function testStrings() \n    { \n        $this->limitTo(1000) \n             ->forAll(Generator\\string()) \n             ->then(function ($s) { \n        $this->assertFalse(is_numeric($s),\"'$s' is a numeric  value.\");}); \n    } \n} \n```", "```php\nPHPUnit 5.6.2 by Sebastian Bergmann and contributors. F 1 / 1 (100%) \nReproduce with: \nERIS_SEED=1478176692904359 vendor/bin/phpunit --filter  StringAreNotNumbersTest::testStrings \n\nTime: 42 ms, Memory: 4.00MB \n\nThere was 1 failure: \n\n1) StringAreNotNumbersTest::testStrings \n'9' is a numeric value. Failed asserting that true is false. ./src/test.php:55 \n./src/Quantifier/Evaluation.php:51 \n./src/Quantifier/ForAll.php:154 \n./src/Quantifier/ForAll.php:180 \n./src/test.php:57 \n\nFAILURES! Tests: 1, Assertions: 160, Failures: 1\\. \n```", "```php\n**ERIS_SEED=1478176692904359 vendor/bin/phpunit -filter StringAreNotNumbersTest::testStrings\".**\n\n```"]