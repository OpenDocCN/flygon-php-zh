- en: Chapter 7. Refactoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章。重构
- en: Throughout this book I have largely focused on using design patterns to address
    new code that you write; this is critical, it is vital that developers don't write
    the new legacy, improving your own code is vital before critiquing the code of
    others. Developers must first seek to understand how to code before they themselves
    may refactor code effectively.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我主要关注使用设计模式来解决你编写的新代码；这是至关重要的，开发人员在批评他人的代码之前，必须首先改进自己的代码。开发人员必须首先努力理解如何编写代码，然后才能有效地重构代码。
- en: 'This chapter shall be heavily based on *Refactoring: Improving the Design of
    Existing Code* by *Martin Fowler* et al alongside *Refactoring To Patterns* by
    *Joshua Kerievsky*. I would highly recommend reading these books if you are interested
    in learning more about this subject.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将主要基于Martin Fowler等人的《重构：改善既有代码的设计》以及Joshua Kerievsky的《重构到模式》。如果您对此主题感兴趣，我强烈推荐阅读这些书籍。
- en: What is refactoring?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是重构？
- en: A key theme in refactoring code is addressing issues within the internal structure
    of code while not altering the external behavior of the program being refactored.
    In some cases, this can mean introducing internal structure where it previously
    wasn't intentional or thought about before.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 重构代码的一个关键主题是解决代码内部结构的问题，同时不改变被重构程序的外部行为。在某些情况下，这可能意味着在先前没有意图或考虑的地方引入内部结构。
- en: Refactoring as a process improves the design of code after it is written. While
    design is a critical phase of the software engineering process, it is often disregarded
    (not least in PHP); in addition to this, maintaining the structure of code over
    the long-term requires a continued understanding of the design of software. If
    a developer takes up a project without understanding how it was originally designed,
    they may develop upon it in a very crude fashion.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 重构作为一个过程，在编写代码后改进代码的设计。虽然设计是软件工程过程中的关键阶段，但通常被忽视（尤其是在PHP中）；除此之外，长期维护代码结构需要对软件设计的持续理解。如果开发人员在不了解原始设计的情况下接手项目，他们可能会以非常粗糙的方式进行开发。
- en: 'In **Extreme Programming** (**XP**), a phrase known as *Refactor Mercilessly*
    is used, it is self-explanatory. In XP, refactoring is proposed as a mechanism
    to keep software design as simple as possible and to avoid needless complexity.
    As is stated in the rules of XP: *Make sure everything is expressed once and only
    once. In the end it takes less time to produce a system that is well groomed*.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在极限编程（XP）中，使用了一个被称为“无情重构”的短语，这是不言而喻的。在XP中，重构被提议作为保持软件设计尽可能简单并避免不必要复杂性的机制。正如XP的规则中所述：“确保一切只表达一次。最终，制作一个精心打理的系统需要更少的时间。”
- en: A key tenet of refactoring is finding the software design as if it is something
    to be discovered instead of being created upfront. When developing a system, we
    can use development as a mechanism of finding a good design solution. By using
    refactoring, we are able to ensure that a system stays good as systems are developed,
    thus we are able to keep technical debt down.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 重构的一个关键原则是将软件设计视为一种要发现而不是事先创建的东西。在开发系统时，我们可以使用开发作为找到良好设计解决方案的机制。通过使用重构，我们能够确保系统在开发过程中保持良好，从而我们能够降低技术债务。
- en: Refactoring isn't always possible, you may occasionally encounter *black-box*
    systems which you cannot alter, indeed you may even need to encapsulate a system
    in order to rewrite it. There are, however, many cases in which we can simply
    refactor code to improve the design.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 重构并非总是可能的，您可能偶尔会遇到无法更改的“黑盒”系统，甚至可能需要封装系统以进行重写。然而，有许多情况下，我们可以简单地重构代码以改进设计。
- en: Test, test, and test again
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试，测试，再测试
- en: There is no way around this, in order to refactor code, you need a solid set
    of tests. Refactoring code may well reduce the chances of introducing bugs, but
    changing the design of code introduces a significant amount of chances to introduce
    new bugs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 没有办法绕过这一点，为了重构代码，您需要一套可靠的测试。重构代码可能会减少引入错误的机会，但改变代码的设计会引入大量引入新错误的机会。
- en: Unintended side-effects will occur during refactoring, where classes are tightly
    coupled, you may well find making a minor change to one function leading to a
    negative side-effect in a completely separate class.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在重构过程中会出现意外的副作用，当类紧密耦合时，您可能会发现对一个函数进行微小更改会导致完全不同类中的负面副作用。
- en: Good refactoring effects require good tests. There is simply no way around this.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的重构效果需要良好的测试。这是无法绕过的。
- en: In addition to this, from a more political standpoint, some companies which
    have encountered the bad effects of repetitively bad refactoring efforts may become
    reluctant to refactor code; ensuring there are good tests in place allows the
    company to ensure a refactoring effort won't break functionality.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，从更政治的角度来看，一些公司遇到了重复糟糕的重构努力所带来的不良影响，可能会不愿意重构代码；确保有良好的测试可以确保重构不会破坏功能。
- en: In this chapter I will demonstrate refactoring efforts which should be accompanied
    with testing efforts using unit tests, in the next (and final) chapter of this
    book, I will discuss behavioral tests (for use in BDD). Unit tests are the best
    mechanism developers have for testing a given unit of code; unit tests complement
    code structure, prove methods do what they should, and test interaction between
    units of code; in this sense, they are the best form of testing at the disposal
    of a developer in a refactoring effort. Behavioral tests however are there to
    test the behavior of code, thus are useful in order to demonstrate an application
    can successfully complete a given form of behavior.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将展示重构工作，这应该伴随着使用单元测试的测试工作，而在本书的下一章（也是最后一章）中，我将讨论行为测试（用于BDD）。单元测试是开发人员测试给定代码单元的最佳机制；单元测试补充了代码结构，证明方法是否按照预期工作，并测试代码单元之间的交互；在这个意义上，它们是开发人员在重构工作中最好的测试形式。然而，行为测试是用来测试代码行为的，因此在演示应用程序能够成功完成给定形式的行为方面是有用的。
- en: Every seasoned developer will have memories of painful debugging tasks; sometimes
    long into the night. Let's think about how most developers work on a day-to-day
    basis. They don't code all the time, some of their time is spent around designing
    code while a considerable amount of time is spent debugging code they've already
    written. Having self-testing code can rapidly reduce this burden.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个经验丰富的开发人员都会记得痛苦的调试任务；有时候会持续到深夜。让我们想想大多数开发人员日常工作的方式。他们并不总是编写代码，他们的一些时间花在设计代码上，而相当多的时间花在调试他们已经编写的代码上。拥有自我测试的代码可以迅速减轻这种负担。
- en: Test-Driven Development centers around a methodology of writing a test before
    writing functionality, indeed the code should match the test.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发围绕着在编写功能之前编写测试的方法论，确实，代码应该与测试相匹配。
- en: When testing classes, be sure to test the `public` interface of the class; indeed,
    PHPUnit will not allow you to test `private` or `protected` methods under ordinary
    usage.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试类时，确保测试类的`public`接口；确实，PHPUnit不允许您在普通用法下测试`private`或`protected`方法。
- en: Code smells
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码异味
- en: '**Code smells** are essentially bits of bad practice that make your code needlessly
    harder to understand, bad code may be refactored away using the techniques expressed
    in this chapter. Code smells can usually violate somewhat fundamental software
    design principles and accordingly, can negatively impact design quality of the
    overall code.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码异味**本质上是一些不良实践，使您的代码变得不必要地难以理解，可以使用本章中介绍的技术来重构不良代码。代码异味通常违反了一些基本的软件设计原则，因此可能会对整体代码的设计质量产生负面影响。'
- en: 'Martin Fowler defined code smell by stating the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Martin Fowler通过以下方式定义了代码异味：
- en: '*"a code smell is a surface indication that usually corresponds to a deeper
    problem in the system".*'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“代码异味是通常对系统中更深层次问题的表面指示。”*'
- en: At the start of this book we discussed the term *technical debt*, in this sense,
    code smells can contribute to *technical debt* as a whole.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的开头，我们讨论了*技术债务*这个术语，在这个意义上，代码异味可以作为*技术债务*的一部分。
- en: Code smell may not necessarily constitute a bug, it won't stop the execution
    of a program, but it can aid the process of introducing bugs later on and make
    it harder to refactor code to an appropriate design.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 代码异味可能不一定构成错误，它不会阻止程序的执行，但它可以帮助在以后引入错误的过程中，并使代码重构到适当的设计变得更加困难。
- en: Let's cover some fundamental code smells that you may encounter when dealing
    with legacy PHP projects.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在处理传统PHP项目时可能遇到的一些基本代码异味。
- en: We will address some code smells and how to address them in quite simplistic
    ways, but now let us consider some slightly more significant, recurring patterns
    and how these can be addressed by applying design patterns in order to simplify
    the maintenance of code going forward.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论一些代码异味以及如何以相当简单的方式解决它们，但现在让我们考虑一些稍微重要的、重复出现的模式，以及如何通过应用设计模式来简化代码的维护。
- en: Here we will specifically talk about refactoring *to* patterns, in some cases,
    you may benefit from refactoring *from* patterns when it simplifies the design
    of the code. The recurring theme in this chapter surrounds how the design of code
    lives throughout the development life cycle of the code, it isn't merely discarded
    after an arbitrary design phase.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将具体讨论重构*到*模式，有些情况下，当简化代码设计时，您可能会从模式重构*到*模式。本章的重复主题围绕代码设计如何在代码的开发生命周期中存在，它不仅仅在任意设计阶段之后被丢弃。
- en: Patterns can be used to communicate intention, they can serve as the language
    between developers; this is why knowing and continuing to use a large body of
    patterns is vital throughout the career of a software engineer.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 模式可以用来传达意图，它们可以作为开发人员之间的语言；这就是为什么了解并继续使用大量模式在软件工程师的职业生涯中至关重要。
- en: Many more of these approaches are available in the book *Refactoring To Patterns*,
    here I have handpicked the ones most appropriate to PHP developers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在书籍*重构到模式*中还有更多这样的方法，我在这里挑选了对PHP开发人员最合适的方法。
- en: Long methods and duplicated code
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 长方法和重复的代码
- en: Duplicated code is a very common code smell. Developers will frequently copy
    and paste code instead of using an appropriate control structure for their application.
    If the same control structure is in more than one place, your code will benefit
    by merging the two structures into one.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 重复的代码是非常常见的代码异味。开发人员经常会复制和粘贴代码，而不是使用适当的控制结构来进行应用程序。如果相同的控制结构出现在多个地方，将两个结构合并成一个将使您的代码受益。
- en: If duplicated code is identical, you can use the extract method. So what is
    the extract method? In essence, the **extract method** is merely removing business
    logic that is vested in long functions into smaller functions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果重复的代码是相同的，你可以使用提取方法。那么什么是提取方法？实质上，**提取方法**只是将长函数中的业务逻辑提取到更小的函数中。
- en: Let's imagine a `dice` class, once the dice is rolled it will return a random
    number between 1 and 6 in Roman numerals.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个`dice`类，一旦掷骰子，它将以罗马数字返回1到6之间的随机数。
- en: 'The `Legacy` class can look like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`Legacy`类可以是这样的：'
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s extract the method to convert a random number into a Roman numeral and
    put it into a separate function:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们提取一个方法，将随机数转换为罗马数字，并将其放入一个单独的函数中：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are merely two changes we have made to the original code block, we have
    separated out that function which performs Roman numeral conversion and put it
    in a separate function. We have replaced that inline comment with a DocBlock for
    the function itself.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对原始代码块只进行了两个更改，我们将执行罗马数字转换的函数分离出来，并将其放入一个单独的函数中。我们用函数本身的DocBlock替换了内联注释。
- en: This approach can be used for duplication, if it exists in more than one place
    (and is identical), we simply call a single function instead of having the code
    duplicated across multiple places.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果重复存在于多个地方（且相同），则可以使用此方法进行复制，我们只需调用一个函数，而不是在多个地方重复代码。
- en: If the code is in unrelated classes, see where it logically fits (in either
    of the classes or a separate class) and extract it there.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码在不相关的类中，看看它在逻辑上适合哪里（在这两个类中的任何一个或一个单独的类中），并将其提取到那里。
- en: Earlier in this book, we have already discussed the need to keep functions small.
    This is absolutely vital for ensuring your code is readable in the long term.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前面，我们已经讨论了保持函数小的必要性。这对于确保您的代码在长期内可读性非常重要。
- en: I frequently see developers comment blocks of code within functions; instead,
    why not break out these methods into their own functions? Readable documentation
    may then be added through DocBlocks. Thus, the extract method we are using here
    to address duplicated code can have a much simpler use; breaking up long methods.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常看到开发人员在函数内部注释代码块；相反，为什么不将这些方法拆分为它们自己的函数？通过DocBlocks可以添加可读的文档。因此，我们在这里使用的提取方法可以更简单地使用；拆分长方法。
- en: Solutions to various business problems are far easier shared when dealing with
    smaller methods.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 处理较小的方法时，解决各种业务问题要容易得多。
- en: Large class
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大类
- en: Large classes often emerge as a violation of the Single Responsibility Principle.
    Does the class you are dealing with, at a given point in time, have only one reason
    to change? A class should only have responsibility over a single part of the functionality,
    furthermore, that class should entirely encapsulate that responsibility.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 大类经常违反单一职责原则。在特定时间点上，您正在处理的类是否只有一个更改的原因？一个类应该只对功能的一个部分负责，而且该类应该完全封装该责任。
- en: Dividing up the class into multiple classes by extracting methods which don't
    narrowly align to single responsibility is an easy and effective way to help mitigate
    this code smell.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提取不严格符合单一职责的方法将类分成多个类，这是一种简单而有效的方法，可以帮助减轻这种代码异味。
- en: Replacing complex logical statements and switch statements with polymorphism
    or the Strategy Pattern
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用多态性或策略模式替换复杂的逻辑语句和switch语句
- en: Switch statements (or endlessly large if statements, for that matter) can largely
    be removed by using polymorphic behavior; I have described polymorphism in the
    early chapters of this book and it provides a far more elegant way of dealing
    with computational problems than using switch statements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用多态行为，可以大大减少switch语句（或者说无休止的大型if语句）；我在本书的早期章节中已经描述了多态性，并且它提供了一种比使用switch语句更优雅地处理计算问题的方式。
- en: Suppose you were switching on a country code; US or GB, instead of switching
    in such a fashion, by using polymorphism you can run the same method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在根据国家代码进行切换；美国或英国，而不是以这种方式切换，通过使用多态性，您可以运行相同的方法。
- en: Where polymorphic behavior is not possible (for example, where there isn't a
    common interface), in some cases you may even benefit by replacing type code with
    strategy; effectively you are able to consolidate the multiple switch statements
    into merely injecting a class into the constructor of a client which will handle
    the relation to the individual classes itself.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在不可能进行多态行为的情况下（例如，没有共同的接口的情况下），在某些情况下，通过用策略替换类型代码甚至可能会受益；实际上，您可以将多个switch语句合并为仅将类注入到客户端的构造函数中，该类将处理与各个类的关系。
- en: 'For example; let''s suppose we have an Output interface, this interface is
    implemented by various other classes that contain a `load` method. This `load`
    method allows us to inject an array and we get back some data in the format we
    requested. These classes are incredibly crude implementations of that behavior:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如；假设我们有一个Output接口，这个接口由包含`load`方法的各种其他类实现。这个`load`方法允许我们注入一个数组，并且我们以所请求的格式获取一些数据。这些类是该行为的极其粗糙的实现：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At the time fo writing, PHP still deems the `xmlrpc_encode` function to be experimental,
    for this reason, I would advise against its use in production. It's just here
    purely for demonstration purposes (in order to keep the code short).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，PHP仍然认为`xmlrpc_encode`函数是实验性的，因此，我建议不要在生产中使用它。这里纯粹是为了演示目的（为了保持代码简洁）。
- en: 'An incredibly crude implementation with a `switch` statement could be as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个极其粗糙的实现，带有`switch`语句，可能如下所示：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But clearly we can do a lot by, instead, implementing a client that will allow
    us to inject an `Output` class into a `Client` and accordingly allow us to receive
    the output. Such a class may look like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但显然，我们可以通过实现一个允许我们将`Output`类注入到`Client`中的客户端来做很多事情，并相应地允许我们接收输出。这样的类可能是这样的：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can now utilize this client in a very simple fashion:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以非常简单地使用这个客户端：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Duplicating code following a single control structure
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在单一控制结构后复制代码
- en: I won't reiterate here how the Template design pattern works, but what I want
    to explain is that it can be used to help eliminate duplicate code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在这里重申模板设计模式的工作原理，但我想解释的是，它可以用来帮助消除重复的代码。
- en: The Template design pattern I demonstrated earlier in this book allowed us to
    effectively abstract away the structure of a program, we then just populated the
    methods specific to an implementation. This can help us reduce code duplication
    by avoiding repeating a single control structure over and over.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本书中展示的模板设计模式有效地将程序的结构抽象化，然后我们只是填充了特定于实现的方法。这可以帮助我们通过避免一遍又一遍地重复单个控制结构来减少代码重复。
- en: Long Parameter List and primitive obsession
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 长参数列表和原始类型过度使用
- en: Primitive obsession is where developers over-use primitive data types instead
    of using objects.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 原始类型过度使用是指开发人员过度使用原始数据类型而不是使用对象。
- en: PHP supports eight primitive types; this group can further be subdivided into
    scalar types, compound types, and special types.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: PHP支持八种原始类型；这组可以进一步细分为标量类型、复合类型和特殊类型。
- en: 'Scalar types are the data types which hold a single value. You can recognize
    them if you ask yourself "can this value be on a scale?" A number can be on a
    scale from *X* to *Y* and a Boolean could be on a scale from false to true. Here
    are some examples of scalar types:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 标量类型是保存单个值的数据类型。如果你问自己“这个值可以在一个范围内吗？”你可以识别它们。数字可以在*X*到*Y*的范围内，布尔值可以在false到true的范围内。以下是一些标量类型的例子：
- en: Boolean
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔
- en: Integer
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数
- en: Float
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数
- en: String
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: 'Compound types consist of a set of scalar values:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 复合类型由一组标量值组成：
- en: Array
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Object
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象
- en: 'Special types are as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊类型如下：
- en: Resource (references an external resource)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源（引用外部资源）
- en: 'NULL'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'NULL'
- en: 'Suppose we have a simple `Salary` calculator class, it takes an employee''s
    base salary, commission rate, and pension rate; after this data is sent, the `calculate`
    method can be used to input the amount of sales they have made to calculate their
    total salary:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个简单的`Salary`计算器类，它接受员工的基本工资、佣金率和养老金率；在发送了这些数据之后，可以使用`calculate`方法输入他们的销售额来计算他们的总工资：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note how long that constructor is. Yes, we could use the Builder pattern to
    create an object which we can then inject into the constructor, but in this case,
    we are able to specifically abstract away the complicated information. In this
    case, if we were to move the employee information to a separate class we could
    ensure better compliance with the Single Responsibility Principle.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意构造函数有多长。是的，我们可以使用生成器模式来创建一个对象，然后将其注入到构造函数中，但在这种情况下，我们能够特别地将复杂的信息抽象化。在这种情况下，如果我们将员工信息移到一个单独的类中，我们可以确保更好地遵守单一职责原则。
- en: 'The first step is to separate out the responsibilities of the class so that
    we can separate the responsibilities of the class:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是分离类的职责，以便我们可以分离类的职责：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'From this point, we can simplify the constructor of our `Salary` class so that
    it only needs to input the `Employee` object for us to be able to use the class:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点上，我们可以简化`Salary`类的构造函数，以便它只需要输入`Employee`对象，我们就能够使用该类：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Indecent exposure
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不当暴露
- en: 'Let''s suppose we have a `Human` class as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个`Human`类如下：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We are able to set the values as we please, with no validation and no unified
    way of getting information. What's so wrong with this? Well, in object orientation,
    the principle of encapsulation is vital; we hide data. In other words, our data
    should never be made visible without the owning object knowing it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以随心所欲地设置值，没有验证，也没有统一的获取信息的方式。这有什么问题吗？嗯，在面向对象编程中，封装的原则至关重要；我们隐藏数据。换句话说，我们的数据不应该在没有拥有对象知道的情况下被公开。
- en: 'Instead, we substitute all the `public` data variables with `private` ones.
    In addition to this we add appropriate methods to get and set the data:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们用`private`数据变量替换所有`public`数据变量。除此之外，我们还添加了适当的方法来获取和设置数据：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Be sure to ensure that setters and getters are logical and are not there merely
    because a class property exists. After this is complete you will need to go through
    your application and substitute any direct access to variables so that they go
    through the appropriate methods first.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 确保setter和getter是合乎逻辑的，不仅仅是因为类属性存在。完成后，您需要检查应用程序，并替换任何对变量的直接访问，以便它们首先通过适当的方法。
- en: This has, however, now exposed another code smell; feature envy.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这现在暴露了另一个代码异味；特征嫉妒。
- en: Feature envy
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征嫉妒
- en: Loosely, **feature envy** is where we don't get an object to do calculation
    of its own properties and instead offset that to another class.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 松散地说，**特征嫉妒**是指我们不让一个对象计算自己的属性，而是将其偏移到另一个类。
- en: 'So in the previous example we had our own `Salary` calculator class, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在前面的例子中，我们有我们自己的`Salary`计算器类，如下：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Instead let''s take a look at implementing this function into the `Employee`
    class itself, as a result we can also disregard the unnecessary getters and keep
    our properties rightfully internalized:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，让我们看看将这个函数实现到`Employee`类本身中，结果我们也可以忽略不必要的getter并将属性合理地内部化：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Inappropriate intimacy
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不当亲密关系
- en: 'This may frequently occur with inheritance; Martin Fowler elegantly puts it
    as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这在继承中经常发生；Martin Fowler优雅地表达如下：
- en: '*"Subclasses are always going to know more about their parents than their parents
    would like them to know."*'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “子类总是会比父类更了解他们的父类。”
- en: More generally; when a field is used more in another class than the class itself,
    we can use the move field method to create a field in a new class, then redirect
    users of that field to the new class.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地说；当一个字段在另一个类中的使用比在类本身中更多时，我们可以使用移动字段方法在新类中创建一个字段，然后将该字段的用户重定向到新类。
- en: We can combine this with the move method, whereby we place a function in the
    class that uses it most and remove it from the original class, if that isn't possible
    we can get away with simply referencing the function in the new class.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这与移动方法结合起来，将一个函数放在最常使用它的类中，并从原始类中删除它，如果这不可能，我们可以简单地在新类中引用该函数。
- en: Deeply nested statements
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深度嵌套的语句
- en: Nested if statements are messy and ugly. This causes spaghetti logic that is
    difficult to follow; instead use inline function calls.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套的if语句很混乱且丑陋。这会导致难以理解的意大利面逻辑；而是使用内联函数调用。
- en: Starting from the inner-most code block, seek to extract that code into its
    own function where it can live happily. In [Chapter 1](ch01.html "Chapter 1. Why
    "Good PHP Developer" Isnt an Oxymoron"), *Why "Good PHP Developer" Isn't an Oxymoron*
    we discussed how this can be achieved with an example, but if you're refactoring
    frequently you might want to consider investing in a tool which can help you with
    this.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从最内部的代码块开始，试图将该代码提取到自己的函数中，让它可以幸福地存在。在[第1章](ch01.html "第1章。为什么“优秀的PHP开发人员”不是一个矛盾")中，我们讨论了如何通过示例实现这一点，但如果您经常进行重构，您可能希望考虑投资一种可以帮助您的工具。
- en: 'Here''s a tip for the PHPStorm users among us: there is a lovely little option
    within the Refactor menu that can do this for you automatically. Simply highlight
    the code block you wish to extract, go to Refactor in the menu bar then click
    Extract>Method. A dialog will then pop up allowing you to configure how you want
    the refactoring to run:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个提示，对于我们中的PHPStorm用户：在重构菜单中有一个很好的小选项，可以自动为您执行此操作。只需高亮显示您希望提取的代码块，转到菜单栏中的重构，然后单击提取>方法。然后会弹出一个对话框，允许您配置如何进行重构：
- en: '![Deeply nested statements](graphics/image_07_001.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![深度嵌套语句](graphics/image_07_001.jpg)'
- en: Remove assignments to parameters
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除对参数的赋值
- en: 'Try to avoid setting a parameter in the body of a function:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量避免在函数体内设置参数：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This can be done correctly by setting an internal parameter instead:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过正确设置内部参数来实现：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: By doing such behavior we are able to easily identify and extract repetitive
    code going forward, in addition to this it allows easier code replacement when
    maintaining this code later.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样的行为，我们能够在前进时轻松识别和提取重复的代码，此外，它还可以在以后维护这段代码时更容易地替换代码。
- en: This is a simple tweak which allows us to identify what particular parameters
    in our code are doing.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的调整，允许我们识别代码中特定的参数在做什么。
- en: Comments
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: 'Comments aren''t a code smell per-se, in many cases, comments are hugely beneficial.
    As Martin Fowler states:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注释并不是一种代码气味，很多情况下，注释是非常有益的。正如Martin Fowler所说：
- en: '*"In our olfactory analogy, comments aren''t a bad smell; indeed they are a
    sweet smell."*'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在我们的嗅觉类比中，注释不是一种难闻的气味；事实上，它们是一种甜美的气味。”
- en: However, Fowler goes on to demonstrate how comments may be used as the deodorant
    to hide code smells. When you find yourself commenting code blocks within functions
    you can find a good opportunity to use the extract method.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Fowler继续演示了注释如何被用作遮盖代码气味的除臭剂。当你发现自己在函数内部注释代码块时，你可以找到一个很好的机会使用提取方法。
- en: If a comment is hiding a bad smell, refactor the smell away and you will soon
    find the original comment being superfluous. This isn't an excuse not to DocBlock
    your function or needlessly go on a hunt for code comments, but it is important
    to remember that specific comments may become useless when you refactor a design
    to be far more simplistic.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果注释隐藏了一种难闻的气味，重构掉这种气味，很快你就会发现原始注释变得多余了。这并不是不需要对函数进行DocBlock或不必要地寻找代码注释的借口，但重要的是要记住，当您重构设计变得更简单时，特定的注释可能变得无用。
- en: Encapsulating Composite with Builder
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用构建器封装组合
- en: As discussed earlier in this book, the Builder design pattern can work by us
    taking a long set of arguments and turning them into a single object which we
    can then throw into the constructor of another class.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本书前面讨论的那样，构建器设计模式可以通过我们将一长串参数转换为一个单一对象来工作，然后我们可以将其抛入另一个类的构造函数中。
- en: For example, we have a class called `APIBuilder`, this builder class can then
    itself be instantiated with the API key and secret of the API, but once it's instantiated
    as an object, we can simply pass the entire object into the constructor of another
    class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们有一个名为`APIBuilder`的类，这个构建器类可以用API的密钥和密钥本身来实例化，但一旦它被实例化为一个对象，我们就可以简单地将整个对象传递给另一个类的构造函数。
- en: So far, so good; but we can use this Builder pattern to encapsulate the Composite
    pattern. We effectively just create a Builder to create our items. By doing this
    we have greater control with a single class offering us an opportunity to navigate
    and alter the entire tree structure of the Composite family.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利；但我们可以使用这个构建器模式来封装组合模式。我们实际上只需创建一个构建器来创建我们的项目。通过这样做，我们可以更好地控制一个类，为我们提供了一个机会来导航和修改组合家族的整个树结构。
- en: Replacing hard-coded notifications with Observer
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用观察者替换硬编码的通知
- en: 'Hard-coded notifications are usually where two classes are tightly coupled
    together in order for one to be able to notify the other. Instead, by using the
    `SplObserver` and `SplSubject` interfaces, the Observer can update the subject
    using a far more pluggable. After implementing an `update` method in the Observer,
    the subject merely needs to implement the `Subject` interface:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 硬编码的通知通常是两个类紧密耦合在一起，以便一个能够通知另一个。相反，通过使用`SplObserver`和`SplSubject`接口，观察者可以使用更加可插拔的方式更新主题。在观察者中实现`update`方法后，主题只需要实现`Subject`接口：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The resulting architecture is a far more pluggable notification system which
    is not tightly coupled.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的架构是一个更加可插拔的通知系统，不再紧密耦合。
- en: Replacing one/many distinctions with Composite
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用组合替换一个/多个区别
- en: Where we have separate logic for handing individuals to groups, we can consolidate
    these using the Composite pattern. This is a pattern we have covered earlier this
    book; in order to consolidate to this pattern, a developer needs only alter their
    code so that one class can handle both forms of data.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有单独的逻辑来处理个体到组的情况时，我们可以使用组合模式来 consolide 这些情况。这是本书早些时候介绍过的一种模式；为了将其合并到这种模式中，开发人员只需要修改他们的代码，使一个类可以处理两种形式的数据。
- en: In order to achieve this, we must first ensure both the distinctions implement
    the same interface.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们必须首先确保这两个区别实现了相同的接口。
- en: 'When I initially demonstrated this pattern, I wrote about how this pattern
    can be used to address treating a single song and a playlist as one. Suppose our
    `Music` interface is purely the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当我最初演示这个模式时，我写了关于如何使用这个模式来处理将单个歌曲和播放列表视为一个的情况。假设我们的`Music`接口纯粹是以下内容：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The critical task is just ensuring that this interface is abided by for both
    the one and the many distinctions. Both your `Song` class and your `Playlist`
    class must implement the `Music` interface. This is fundamentally what allows
    us to treat both with the behavior.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 关键任务就是确保这个接口对于单个和多个区分都得到遵守。你的`Song`类和`Playlist`类都必须实现`Music`接口。这基本上是让我们能够对待它们的行为。
- en: Separate versions with Adapters
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用适配器分离版本
- en: I won't dwell on Adapters for long due to how thoroughly I covered them earlier
    in this book, but I just want you to consider that they can be used for supporting
    different versions of APIs.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在这本书中长篇大论地讨论适配器，因为我之前已经非常详细地介绍过它们，但我只是想让你考虑一下，它们可以用来支持不同版本的API。
- en: Be sure not to wrap code together in the same class for multiple API versions
    instead, you can abstract these differences from version-to-version to an Adapter.
    When using this approach, I would urge you to initially attempt to use an encapsulation
    approach rather than an inheritance-based approach as this will provide greater
    freedom going forward.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 确保不要将多个API版本的代码放在同一个类中，而是可以将这些版本之间的差异抽象到一个适配器中。在使用这种方法时，我建议你最初尝试使用封装方法，而不是基于继承的方法，因为这样可以为未来提供更大的自由度。
- en: What do I tell my manager?
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我应该告诉我的经理什么？
- en: Refactoring and then adding functionality can often be faster than simply adding
    the functionality while adding value to the existing code base. Many good managers,
    who properly understand software and how it is developed will understand this.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 重构然后添加功能往往比仅仅添加功能更快，同时也为现有代码库增加了价值。许多了解软件及其开发方式的优秀经理都会理解这一点。
- en: Of course there are managers who are clueless about what software actually is,
    they are often driven solely by deadlines and may be reluctant to learn more about
    their subject field. I am talking about the horror story developers I have mentioned
    earlier in this book. Sometimes, *Scrum Masters* are also guilty of this, due
    to the fact they may not be able to relate to the entire software development
    life cycle.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，有些经理对软件的实际情况一无所知，他们往往只受到最后期限的驱使，可能不愿意更多地了解自己的专业领域。我在本书中之前提到过的那些可怕的开发人员就是这样。有时，*Scrum
    Master*也会有这种情况，因为他们可能无法理解整个软件开发生命周期。
- en: 'As Martin Fowler himself put it:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Martin Fowler所说：
- en: '*"Of course, many people say they are driven by quality but are more driven
    by schedule. In these cases I give my more controversial advice: Don''t tell!"*'
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “当然，很多人说他们追求质量，但更多的是追求进度。在这些情况下，我给出了更具争议性的建议：不要说！”
- en: Managers who don't properly understand technical processes may be intent on
    delivering on the basis of how rapidly software can be produced; refactoring can
    prove to be the most rapid way of helping produce software. It provides an efficient
    and thorough way to get up to speed with a project and allows us to smooth the
    process of injecting in new functionality.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 不了解技术流程的经理可能会急于基于软件能够快速生产的基础上交付；重构可能是帮助生产软件最快速的方式。它提供了一种高效而彻底的方式来快速了解项目，并允许我们平稳地注入新功能的过程。
- en: We will discuss management and how projects can be effectively managed in the
    next chapter of this book.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的下一章讨论管理以及项目如何有效地进行管理。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've discussed some methods of refactoring code to ensure
    the design is always of a good quality. By refactoring code, we can gain a greater
    understanding of our code base and future-proof it for the additional functionality
    that we add to the software.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些重构代码的方法，以确保设计始终保持良好的质量。通过重构代码，我们可以更好地理解我们的代码库，并为我们添加到软件中的额外功能未来做好准备。
- en: Simplification and breaking down the problems you face are two of the best fundamental
    tools you can use when refactoring code.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 简化和分解你面临的问题是重构代码时可以使用的两个最基本的工具。
- en: If you are using a CI environment, having PHP Mess Detector (PHPMD) running
    on that environment can also help you code better.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用CI环境，让PHP Mess Detector（PHPMD）在该环境中运行也可以帮助你编写更好的代码。
- en: In the next chapter, I will discuss how we can use design patterns appropriately,
    starting off with a quick lesson on developing APIs in the context of a network.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将讨论如何适当地使用设计模式，首先快速介绍在网络环境中开发API的方法。
