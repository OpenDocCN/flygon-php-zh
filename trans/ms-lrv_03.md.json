["```php\n**/app/Commands**\n**/app/Events/**\n**/app/Handlers/**\n**/app/Handlers/Commands**\n**/app/Handlers/Events**\n**/app/HTTP/Controllers**\n\n```", "```php\nAs a hotel website user,\nI want to search for a room\nso that I can select from a list of results.\n```", "```php\nRoute::get('search', 'RoomController@search');\n```", "```php\n{\n  \"start_date\": \"2015-07-10\"\n  \"end_date\": \"2015-07-17\"\n  \"city\": \"London\"\n  \"country\": \"England\"\n}\n```", "```php\nhttp://websiteurl.com/search?query={%22start_date%22:%222015-07-10%22,%22end_date%22:%222015-07-17%22,%22city%22:%22London%22,%22country%22:%22England%22}\n```", "```php\n/**\n* Search for a room in an accommodation\n*/\npublic function search()\n{\n      json_decode(\\Request::input('query'));\n}\n```", "```php\n**Route::post('reserve-room', 'RoomController@store');**\n\n```", "```php\n**$ php artisan make:commandReserveRoomCommand -\u2013handler**\n\n```", "```php\n<?php namespace MyCompany\\Commands;\n\nuse MyCompany\\Commands\\Command;\nuse MyCompany\\User;\n\nclass ReserveRoomCommand extends Command {\n\n    public $user;\n    public $rooms;\n    public $start_date;\n    public $end_date;\n\n    /**\n    * Create a new command instance.\n    *\n    * @return void\n    */\n    public function __construct(User $user, $start_date, $end_date, $rooms)\n    {\n        $this->rooms = $rooms;\n        $this->user = $user;\n        $this->start_date = $start_date;\n        $this->end_date = $end_date;\n     }\n\n}\n```", "```php\n    public $user;\n    public $rooms;\n    public $start_date;\n    public $end_date;\n```", "```php\n        $this->rooms = $rooms;\n        $this->user = $user;\n        $this->start_date = $start_date;\n        $this->end_date = $end_date;\n```", "```php\n**$ phpartisan make:eventRoomWasReserved**\n\n```", "```php\n<?php namespace MyCompany\\Events;\n\nuse MyCompany\\Accommodation\\Reservation;\nuse MyCompany\\Events\\Event;\nuse MyCompany\\User;\n\nuse Illuminate\\Queue\\SerializesModels;\n\nclass RoomWasReserved extends Event {\n\n    use SerializesModels;\n\n    private $user;\n    private $reservation;\n\n    /**\n    * Create a new event instance.\n    *\n    * @return void\n    */\n    public function __construct(User $user, Reservation $reservation)\n    {\n        $this->user = $user;\n        $this->reservation = $reservation;\n    }\n}\n```", "```php\n**event(new RoomWasReserved($user, $reservation));**\n\n```", "```php\n<?phpnamespace MyCompany\\Handlers\\Commands;\n\nuse MyCompany\\Commands\\ReserveRoomCommand;\n\nuse Illuminate\\Queue\\InteractsWithQueue;\n\nclass ReserveRoomCommandHandler {\n\n    /**\n    * Create the command handler.\n    *\n    * @return void\n    */\n    public function __construct()\n    {\n        //\n    }\n\n    /**\n    * Handle the command.\n    *\n    * @paramReserveRoomCommand  $command\n    * @return void\n    */\n    public function handle(ReserveRoomCommand $command)\n    {\n\n        $reservationValidator = new \\MyCompany\\Accommodation\\ReservationValidator();\n\n        if ($reservationValidator->validate($command->start_date,$command->end_date,$command->rooms)) {\n              $reservation = \n                $reservationRepository->create(\n                ['date_start'=>$command->$command\u2192start_date,\n                'date_end'=>$command->end_date,\n                'rooms'=>$command->'rooms']);\n        }\n    $reservation = new \n      event(new RoomWasReserved($command->user,$reservation));\n    }\n}\n```", "```php\n**$ php artisan handler:eventRoomReservedEmail --event=RoomWasReserved**\n **<?php namespace MyCompany\\Handlers\\Events;**\n\n **use MyCompany\\Events\\RoomWasReserved;**\n\n **use Illuminate\\Queue\\InteractsWithQueue;**\n **use Illuminate\\Contracts\\Queue\\ShouldBeQueued;**\n\n **class RoomReservedEmail {**\n\n **/****\n *** Create the event handler.**\n *** @return void**\n ***/**\n **public function __construct()**\n **{**\n **}**\n\n **public function handle(RoomWasReserved $event)**\n **{**\n **//TODO: send email to $event->user**\n **//TODO: with details about $event->reservation;**\n **}**\n **}**\n\n```", "```php\nprotected $listen = [\n    'MyCompany\\Events\\RoomWasReserved' => [\n      'MyCompany\\Handlers\\Events\\RoomReservedEmail',\n      ],\n    ];\n```", "```php\n**$ php artisan handler:eventRoomReservedEmail --event=RoomWasReserved --queued**\n\n```", "```php\n **<?php namespace MyCompany\\Handlers\\Events;**\n\n **use MyCompany\\Events\\RoomWasReserved;**\n\n **use Illuminate\\Queue\\InteractsWithQueue;**\n **use Illuminate\\Contracts\\Queue\\ShouldBeQueued;**\n\n **class RoomReservedEvent implements ShouldBeQueued {**\n\n **use InteractsWithQueue;**\n\n **public function __construct()**\n **{**\n **//**\n **}**\n\n **use Illuminate\\Contracts\\Queue\\ShouldBeQueued;**\n\n```", "```php\nuse Illuminate\\Queue\\InteractsWithQueue;\n```", "```php\n**$ php artisan make:commandPlaceOnWaitingListCommand**\n**$ php artisan make:eventPlacedOnWaitinglist**\n\n```", "```php\npublic function store()\n    {\n    \u2026\n    \u2026\n        if ($roomAvailable) {\n            $this->dispatch(\n              new ReserveRoomCommand( $start_date, $end_date, $rooms)\n            );\n        } else {\n            $this->dispatch(\n              new PlaceOnWaitingListCommand($start_date, $end_date, $rooms)\n            );\n        }\n    \u2026\n```", "```php\n**$ php artisan make:commandReserveRoomCommand -\u2013handler --queued**\n\n```", "```php\n**Illuminate\\Contracts\\Queue\\ShouldBeQueued**\n\n```", "```php\n<?php namespace MyCompany\\Commands;\n\nuse MyCompany\\Commands\\Command;\n\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldBeQueued;\n\nclass MyCommand extends Command implements ShouldBeQueued {\n\n\tuse InteractsWithQueue, SerializesModels;\n\n\t/**\n\t * Create a new command instance.\n\t *\n\t * @return void\n\t */\n\tpublic function __construct()\n\t{\n\t\t//\n\t}\n\n}\n```", "```php\n**$ php artisan make:consoleManageWaitinglist**\n\n```", "```php\nprotected $commands = [\n    'MyCompany\\Console\\Commands\\Inspire',\n    'MyCompany\\Console\\Commands\\ManageWaitinglist',\n    ];\n```", "```php\n<?php namespace MyCompany\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass ManageWaitinglist extends Command {\n\n    /**\n    * The console command name.\n    *\n    * @var string\n    */\n    protected $name = 'command:name';\n\n    /**\n    * The console command description.\n    *\n    * @var string\n    */\n    protected $description = 'Command description.';\n\n    /**\n    * Create a new command instance.\n    *\n    * @return void\n    */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n    * Execute the console command.\n    *\n    * @return mixed\n    */\n    public function fire()\n    {\n        //\n    }\n\n    /**\n    * Get the console command arguments.\n    *\n    * @return array\n    */\n    protected function getArguments()\n    {\n        return [\n          ['example', InputArgument::REQUIRED, 'An example argument.'],\n        ];\n    }\n\n    /**\n    * Get the console command options.\n    *\n    * @return array\n    */\n    protected function getOptions()\n    {\n        return [\n          ['example', null, InputOption::VALUE_OPTIONAL, 'An example option.', null],\n        ];\n    }\n}\n```", "```php\nprotected $name = 'manage:waitinglist';\n```", "```php\n**$ php artisan manage:waitinglist**\n\n```", "```php\n **use DispatchesCommands;**\n\n **<?php namespace MyCompany\\Console\\Commands;**\n\n **use Illuminate\\Console\\Command;**\n **use Illuminate\\Foundation\\Bus\\DispatchesCommands;**\n **use Symfony\\Component\\Console\\Input\\InputOption;**\n **use Symfony\\Component\\Console\\Input\\InputArgument;**\n\n **class ManageWaitinglist extends Command {**\n\n **use DispatchesCommands;**\n\n **/****\n *** The console command name.**\n *** @var string**\n ***/**\n **protected $name = 'manage:waitinglist';**\n\n **/****\n *** The console command description.**\n *** @var string**\n ***/**\n **protected $description = 'Manage the accommodation waiting list.';**\n\n **/****\n *** Create a new command instance.**\n *****\n *** @return void**\n ***/**\n **public function __construct()**\n **{**\n **parent::__construct();**\n **}**\n\n **/****\n *** Execute the console command.**\n *** @return mixed**\n ***/**\n **public function fire()**\n **{**\n **// TODO: write business logic to manage waiting list**\n **if ($roomIsAvailableFor($user)) {**\n **$this->dispatch(new ReserveRoomCommand());**\n **}**\n **}**\n\n **/****\n *** Get the console command arguments.**\n *** @return array**\n ***/**\n **protected function getArguments()**\n **{**\n **return [];**\n **}**\n\n **/****\n *** Get the console command options.**\n *** @return array**\n ***/**\n **protected function getOptions()**\n **{**\n **return [];**\n **}**\n**}**\n\n```", "```php\n**$ php artisan schedule:run**\n\n```", "```php\nprotected function schedule(Schedule $schedule)\n    {\n        $schedule->command('inspire')\n             ->hourly();\n        $schedule->command('manage:waitinglist')\n            ->everyFiveMinutes();\n\n    }\n```", "```php\n**$ sudo crontab -e**\n\n```", "```php\n*** * * * * php /path/to/artisan schedule:run 1>> /dev/null 2>&1**\n\n```"]