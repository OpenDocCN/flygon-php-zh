- en: Chapter 4. Requirement Specification for a Modular Web Shop App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。模块化网店应用的需求规范
- en: Building a software application from the ground up requires diverse skills,
    as it involves more than just writing down a code. Writing down functional requirements
    and sketching out a wireframe are often among the first steps in the process,
    especially if we are working on a client project. These steps are usually done
    by someone other than the developer, as they require certain insight into client
    business case, user behavior, and the like. Being part of a larger development
    team means that we, as developers, usually get requirements, designs, and wireframes
    then start coding against them. Delivering projects by oneself, makes it tempting
    to skip these steps and get our hands started with code alone. More often than
    not, this is an unproductive approach. Laying down functional requirements and
    a few wireframes is a skill worth knowing and following, even if one is just a
    developer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始构建软件应用程序需要多种技能，因为它不仅涉及编写代码。写下功能要求和勾画线框图通常是过程中的第一步，尤其是在我们处理客户项目时。这些步骤通常由开发人员以外的人员完成，因为它们需要对客户业务案例、用户行为等方面有一定的了解。作为一个更大的开发团队的一部分，我们作为开发人员通常会得到需求、设计和线框图，然后开始编码。独自完成项目，很容易忽略这些步骤，直接开始编码。然而，这种做法往往是低效的。制定功能要求和一些线框图是值得知道和遵循的技能，即使只是一个开发人员。
- en: Later in this chapter, we will go over a high-level application requirement,
    alongside a rough wireframe.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后期，我们将讨论高级应用程序要求，以及一个粗略的线框图。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Defining application requirements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义应用程序要求
- en: Wireframing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线框图
- en: 'Defining technology stack:'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义技术栈：
- en: Symfony framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Symfony框架
- en: Foundation framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础框架
- en: Defining application requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义应用程序要求
- en: We need to build a simple, but responsive web shop application. In order to
    do so, we need to lay out some basic requirements. The types of requirements we
    are interested in at the moment are those that touch upon interactions between
    a user and a system. The two most common techniques to specify requirements in
    regards to user usage are use case and user story. The user stories are a less
    formal yet descriptive enough way to outline these requirements. Using user stories,
    we encapsulate the customer and store manager actions as mentioned here.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要构建一个简单但响应迅速的网店应用程序。为了做到这一点，我们需要列出一些基本要求。我们目前感兴趣的要求类型是那些涉及用户与系统之间互动的要求。在用户使用方面，最常见的两种规定要求的技术是用例和用户故事。用户故事是一种不太正式但足够描述要求的方式。使用用户故事，我们封装了客户和商店经理的行为，如下所述。
- en: 'A customer should be able to do the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 客户应该能够做到以下事情：
- en: Browse through static info pages (about us, customer service)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览静态信息页面（关于我们，客户服务）
- en: Reach out to the store owner via a contact form
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过联系表格联系店主
- en: Browse the shop categories
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览商店分类
- en: See product details (price, description)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看产品详情（价格，描述）
- en: See the product image with a large view (zoom)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看产品图片并放大查看（缩放）
- en: See items on sale
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看特价商品
- en: See best sellers
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看畅销产品
- en: Add the product to the shopping cart
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将产品添加到购物车
- en: Create a customer account
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建客户账户
- en: Update customer account info
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新客户账户信息
- en: Retrieve a lost password
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找回丢失的密码
- en: Check out
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结账
- en: See the total order cost
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看订单总成本
- en: Choose among several payment methods
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在几种付款方式中选择
- en: Choose among several shipment methods
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在几种运输方式中选择
- en: Get an email notification after an order has been placed
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下订单后收到电子邮件通知
- en: Check order status
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查订单状态
- en: Cancel an order
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消订单
- en: See order history
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看订单历史
- en: 'A store manager should be able to do the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 商店经理应该能够做到以下事情：
- en: 'Create a product (with the minimum following attributes: `title`, `price`,
    `sku`, `url-key`, `description`, `qty`, `category`, and `image`)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建产品（至少包括以下属性：`标题`，`价格`，`sku`，`url-key`，`描述`，`数量`，`类别`和`图片`）
- en: Upload a picture of the product
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传产品图片
- en: Update and delete a product
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新和删除产品
- en: 'Create a category (with the minimum following attributes: `title`, `url-key`,
    `description`, and `image`)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建分类（至少包括以下属性：`标题`，`url-key`，`描述`和`图片`）
- en: Upload a picture to a category
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传图片到分类
- en: Update and delete a category
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新和删除分类
- en: Be notified if a new sales order has been created
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在新的销售订单被创建时收到通知
- en: Be notified if a new sales order has been canceled
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在新的销售订单被取消时收到通知
- en: See existing sales orders by their statuses
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按其状态查看现有销售订单
- en: Update the status of the order
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新订单状态
- en: Disable a customer account
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用客户账户
- en: Delete a customer account
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除客户账户
- en: User stories are a convenient high-level way of writing down application requirements.
    Especially useful as an agile mode of development.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 用户故事是一种方便的高级方式来记录应用程序要求。作为敏捷开发的一种特别有用的方式。
- en: Wireframing
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线框图
- en: With user stories laid out, let's shift our focus to actual wireframing. For
    reasons we will get into later on, our wireframing efforts will be focused around
    the customer perspective.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有了用户故事，让我们把重点转向实际的线框图。出于我们稍后会讨论的原因，我们的线框图工作将集中在客户的角度。
- en: There are numerous wireframing tools out there, both free and commercial. Some
    commercial tools like [https://ninjamock.com](https://ninjamock.com), which we
    will use for our examples, still provide a free plan. This can be very handy for
    personal projects, as it saves us a lot of time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多线框工具，免费和商业化的都有。一些商业化的工具，比如[https://ninjamock.com](https://ninjamock.com)，我们将用于我们的示例，仍然提供免费计划。这对个人项目非常方便，因为它节省了我们很多时间。
- en: 'The starting point of every web application is its home page. The following
    wireframe illustrates our web shop app''s homepage:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网站应用程序的起点是它的主页。以下线框图说明了我们网店应用程序的主页：
- en: '![Wireframing](graphics/B05460_04_01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_01.jpg)'
- en: Here we can see a few sections determining the page structure. The header is
    comprised of a logo, category menu, and user menu. The requirements don't say
    anything about category structure, and we are building a simple web shop app,
    so we are going to stick to a flat category structure, without any sub-categories.
    The user menu will initially show **Register** and **Login** links, until the
    user is actually logged in, in which case the menu will change as shown in following
    wireframes. The content area is filled with best sellers and on sale items, each
    of which have an image, title, price, and **Add to Cart** button defined. The
    footer area contains links to mostly static content pages, and a **Contact Us**
    page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到一些部分确定页面结构。页眉由标志、类别菜单和用户菜单组成。要求没有提到类别结构的任何内容，我们正在构建一个简单的网店应用，因此我们将坚持扁平的类别结构，没有任何子类别。用户菜单最初将显示**注册**和**登录**链接，直到用户实际登录，此时菜单将如下线框图所示更改。内容区域填充有畅销商品和特价商品，每个商品都有图像、标题、价格和定义的**添加到购物车**按钮。页脚区域包含链接到大多是静态内容页面和**联系我们**页面。
- en: 'The following wireframe illustrates our web shop app''s category page:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下线框图展示了我们网店应用的分类页面：
- en: '![Wireframing](graphics/B05460_04_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_02.jpg)'
- en: The header and footer areas remain conceptually the same across the entire site.
    The content area has now changed to list products within any given category. Individual
    product areas are rendered in the same manner as it is on the home page. Category
    names and images are rendered above the product list. The width of a category
    image gives some hints as to what type of images we should be preparing and uploading
    onto our categories.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 页眉和页脚区域在整个网站中概念上保持不变。内容区域现在已更改为列出任何给定类别内的产品。单个产品区域的呈现方式与主页上的方式相同。类别名称和图像呈现在产品列表上方。类别图像的宽度给出了我们应该准备和上传到我们类别的图像类型的一些提示。
- en: 'The following wireframe illustrates our web shop app''s product page:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下线框图展示了我们网店应用的产品页面：
- en: '![Wireframing](graphics/B05460_04_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_03.jpg)'
- en: The content area here now changes to list individual product information. We
    can see a large image placeholder, title, sku, stock status, price, quantity field,
    **Add to Cart** button, and product description being rendered. The **IN STOCK**
    message is to be displayed when an item is available for purchase and **OUT OF
    STOCK** when an item is no longer available. This is to be related to the product
    quantity attribute. We also need to keep in mind the "See the product image with
    a big view (zoom)" requirement, where clicking on an image would zoom into it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的内容区域现在更改为列出单个产品信息。我们可以看到一个大的图像占位符、标题、sku、库存状态、价格、数量字段、**添加到购物车**按钮和产品描述。当商品可供购买时，将显示**有货**消息，当商品不再可用时将显示**缺货**。这与产品数量属性相关。我们还需要记住“查看具有大视图（放大）的产品图像”要求，点击图像将放大显示。
- en: 'The following wireframe illustrates our web shop app''s register page:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下线框图展示了我们网店应用的注册页面：
- en: '![Wireframing](graphics/B05460_04_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_04.jpg)'
- en: The content area here now changes to render a registration form. There are many
    ways that we can implement the registration system. More often than not, the minimal
    amount of information is asked on a registration screen, as we want to get the
    user in as quickly as possible. However, let's proceed as if we are trying to
    get more complete user information right here on the registration screen. We ask
    not just for an e-mail and password, but for entire address information as well.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的内容区域现在更改为呈现注册表单。我们可以以许多方式实现注册系统。通常情况下，在注册屏幕上询问的信息量最少，因为我们希望尽快让用户进入。然而，让我们假设我们正在尝试在注册屏幕上获取更完整的用户信息。我们不仅要求电子邮件和密码，还要求整个地址信息。
- en: 'The following wireframe illustrates our web shop app''s login page:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下线框图展示了我们网店应用的登录页面：
- en: '![Wireframing](graphics/B05460_04_05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_05.jpg)'
- en: The content area here now changes to render a customer login and forgotten password
    form. We provide the user with **Email** and **Password** fields in case of login,
    or just an **Email** field in case of a password reset action.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的内容区域现在更改为呈现客户登录和忘记密码表单。我们为用户提供**电子邮件**和**密码**字段以进行登录，或者在重置密码操作时只提供**电子邮件**字段。
- en: 'The following wireframe illustrates our web shop app''s customer account page:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下线框图展示了我们网店应用的客户账户页面：
- en: '![Wireframing](graphics/B05460_04_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_06.jpg)'
- en: The content area here now changes to render the customer account area, visible
    only to logged in customers. Here we see a screen with two main pieces of information.
    The customer information being one, and order history being the other. The customer
    can change their e-mail, password, and other address information from this screen.
    Furthermore, the customer can view, cancel, and print all of their previous orders.
    The **My Orders** table lists orders top to bottom, from newest to oldest. Though
    not specified by the user stories, the order cancelation should work only on pending
    orders. This is something that we will touch upon in more detail later on.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的内容区域现在更改为呈现仅对已登录客户可见的客户账户区域。在这里，我们看到了两个主要信息。一个是客户信息，另一个是订单历史。客户可以从此屏幕更改其电子邮件、密码和其他地址信息。此外，客户可以查看、取消和打印其以前的所有订单。**我的订单**表按从新到旧的顺序列出订单。尽管用户故事没有指定，但订单取消应仅适用于待处理订单。这是我们稍后将更详细地讨论的内容。
- en: This is also the first screen that shows the state of the user menu when the
    user is logged in. We can see a dropdown showing the user's full name, **My Account**,
    and **Sign Out** links. Right next to it, we have the **Cart (%s)** link, which
    is to list exact quantities in a cart.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是第一个显示用户菜单状态的屏幕，当用户登录时。我们可以看到一个下拉菜单显示用户的全名，**我的账户**和**退出**链接。紧挨着它，我们有**购物车（%s）**链接，用于列出购物车中的确切数量。
- en: 'The following wireframe illustrates our web shop app''s checkout cart page:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下线框图展示了我们网店应用的结账购物车页面：
- en: '![Wireframing](graphics/B05460_04_07.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_07.jpg)'
- en: The content area here now changes to render the cart in its current state. If
    the customer has added any products to the cart, they are to be listed here. Each
    item should list the product title, individual price, quantity added, and subtotal.
    The customer should be able to change quantities and press the **Update Cart**
    button to update the state of the cart. If `0` is provided as the quantity, clicking
    the **Update Cart** button will remove such an item from the cart. Cart quantities
    should at all time reflect the state of the header menu **Cart (%s)** link. The
    right-hand side of a screen shows a quick summary of current order total value,
    alongside a big, clear **Go to Checkout** button.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的内容区现在改变为呈现购物车的当前状态。如果客户已经向购物车中添加了任何商品，它们将在这里列出。每个商品应列出产品标题、单价、添加的数量和小计。客户应该能够更改数量并点击**更新购物车**按钮来更新购物车的状态。如果数量为`0`，点击**更新购物车**按钮将从购物车中移除该商品。购物车数量应始终反映页眉菜单中**购物车（%s）**链接的状态。屏幕右侧显示了当前订单总价的快速摘要，以及一个清晰的**去结账**按钮。
- en: 'The following wireframe illustrates our web shop app''s checkout cart shipping
    page:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下线框图展示了我们网店应用的结账购物车运输页面：
- en: '![Wireframing](graphics/B05460_04_08.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_08.jpg)'
- en: The content area here now changes to render the first step of a checkout process,
    the shipping information collection. This screen should not be accessible for
    non-logged in customers. The customer can provide us with their address details
    here, alongside a shipping method selection. The shipping method area lists several
    shipping methods. On the right hand side, the collapsible order summary section
    is shown, listing current items in the cart. Below it, we have the cart subtotal
    value and a big clear **Next** button. The **Next** button should trigger only
    when all of the required information is provided, in which case it should take
    us to payment information on the checkout cart payment page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的内容区现在改变为呈现结账流程的第一步，即收集运输信息。这个页面对未登录客户不可见。客户可以在这里提供他们的地址详细信息，以及选择运输方式。运输方式区列出了几种运输方式。在右侧，显示了可折叠的订单摘要部分，列出购物车中当前商品。在其下方，有购物车小计值和一个清晰的**下一步**按钮。只有在提供了所有必要信息时，**下一步**按钮才会触发，此时它应该将我们带到结账购物车付款页面上的付款信息。
- en: 'The following wireframe illustrates our web shop app''s checkout cart payment
    page:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下线框图展示了我们网店应用的结账购物车付款页面：
- en: '![Wireframing](graphics/B05460_04_09.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_09.jpg)'
- en: The content area here now changes to render the second step of a checkout process,
    the payment information collection. This screen should not be accessible for non-logged
    in customers. The customer is presented with a list of available payment methods.
    For the simplicity of the application, we will focus only on flat/fixed payments,
    nothing robust such as PayPal or Stripe. On the right-hand side of the screen,
    we can see a collapsible **Order summary** section, listing current items in the
    cart. Below it, we have the order totals section, individually listing **Cart
    Subtotal**, **Standard Delivery**, **Order Total**, and a big clear **Place Order**
    button. The **Place Order** button should trigger only when all of the required
    information is provided, in which case it should take us to the checkout success
    page.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的内容区现在改变为呈现结账流程的第二步，即收集付款信息。这个页面对未登录客户不可见。客户将看到可用付款方式的列表。为了简化应用程序，我们将只关注固定付款，不会使用像PayPal或Stripe这样复杂的付款方式。在屏幕右侧，我们可以看到一个可折叠的**订单摘要**部分，列出购物车中当前商品。在其下方，有订单总额部分，分别列出**购物车小计**、**标准运费**、**订单总额**和一个清晰的**下订单**按钮。只有在提供了所有必要信息时，**下订单**按钮才会触发，此时它应该将我们带到结账成功页面。
- en: 'The following wireframe illustrates our web shop app''s checkout success page:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下线框图展示了我们网店应用的结账成功页面：
- en: '![Wireframing](graphics/B05460_04_10.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_10.jpg)'
- en: The content area here now changes to output the checkout successful message.
    Clearly this page is only visible to logged in customers that just finished the
    checkout process. The order number is clickable and links to the **My Account**
    area, focusing on the exact order. By reaching this screen, both the customer
    and store manager should receive a notification email, as per the *Get email notification
    after order has been placed* and *Be notified if the new sales order has been
    created* requirements.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的内容区现在改变为输出结账成功的消息。显然，这个页面只对刚刚完成结账流程的已登录客户可见。订单号可点击并链接到**我的账户**区域，重点关注具体订单。到达这个页面时，客户和商店经理都应该收到通知邮件，根据*下订单后收到邮件通知*和*新销售订单创建后收到通知*的要求。
- en: With this, we conclude our customer facing wireframes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，我们结束了面向客户的线框图。
- en: 'In regards to store manager user story requirements, we will simply define
    a landing administration interface for now, as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 关于商店经理用户故事需求，我们现在将简单定义一个管理界面，如下截图所示：
- en: '![Wireframing](graphics/B05460_04_11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![线框图](graphics/B05460_04_11.jpg)'
- en: Using the framework later on, we will get a complete auto-generated CRUD interface
    for the multiple **Add New** and **List & Manage** links. The access to this interface
    and its links will be controlled by the framework's security component, since
    this user will not be a customer or any user in the database as such.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后使用框架，我们将获得一个完整的自动生成的CRUD界面，用于多个**添加新**和**列表和管理**链接。对这个界面和其链接的访问将由框架的安全组件控制，因为这个用户不会是客户或数据库中的任何用户。
- en: Furthermore, throughout the following chapters, we will split our application
    into several modules. In such a setup, each module will take ownership of individual
    functionalities, taking care of customer, catalog, checkout, and other requirements.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Symfony框架
- en: Defining a technology stack
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新记录
- en: Once the requirements and wireframes are set, we can focus our attention to
    the selection of a technology stack. In [Chapter 1](ch01.html "Chapter 1. Ecosystem
    Overview"), *Ecosystem Overview* we glossed over several of the most popular PHP
    frameworks, pointing out their strengths. Choosing the right one in this case,
    is more of a matter of preference, as application requirements for the most part
    can be easily met by be met any one of those frameworks. Our choice, however,
    falls to Symfony. Aside from PHP frameworks, we still need a CSS framework to
    deliver some structure, styling, and responsiveness within the browser on the
    client side. Since the focus of this book is on PHP technologies, let's just say
    we chose the Foundation CSS framework for that task.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在接下来的章节中，我们将把我们的应用程序分成几个模块。在这样的设置中，每个模块将负责各自的功能，处理客户、目录、结账和其他需求。
- en: The Symfony framework
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Symfony框架对我们的应用程序来说是一个不错的选择。它是一个企业级框架，已经存在多年，文档和支持非常完善。可以从官方网站[http://symfony.com](http://symfony.com)下载，如下所示：
- en: 'The Symfony framework makes a nice choice for our application. It is an enterprise
    level framework that has been around for years, and is extremely well documented
    and supported. It can be downloaded from the official [http://symfony.com](http://symfony.com)
    page as shown here:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑现有记录
- en: '![The Symfony framework](graphics/B05460_04_12.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Symfony框架](graphics/B05460_04_12.jpg)'
- en: 'The benefits of using Symfony as part of our technology stack are numerous.
    The framework provides robust and well documented:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将技术栈定义为
- en: Controllers
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器
- en: Routing
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由
- en: ORM (via Doctrine)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ORM（通过Doctrine）
- en: Forms
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单
- en: Validation
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证
- en: Security
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全
- en: 'These are essential features required by our application. The ORM in particular,
    plays a major role in rapid application development. Having to worry less about
    coding, every aspect of CRUD can boost the speed of development by a factor or
    two. The great thing about Symfony in this regard is that it allows for automatic
    generation of entities and CRUD actions around them by executing two simple commands
    such as the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们应用程序所需的基本功能。ORM特别在快速应用程序开发中起着重要作用。不用太担心编码，CRUD的每个方面都可以将开发速度提高一倍或两倍。Symfony在这方面的伟大之处在于，它允许通过执行两个简单的命令自动生成实体和围绕它们的CRUD操作：
- en: '[PRE0]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By doing so, Symfony generates entity models and necessary controllers that
    empower us to perform the following operations:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，Symfony生成实体模型和必要的控制器，使我们能够执行以下操作：
- en: List all records
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出所有记录
- en: Show one given record identified by its primary key
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示由其主键标识的给定记录
- en: Create a new record
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦需求和线框图确定，我们就可以将注意力集中在选择技术栈上。在[第1章](ch01.html "第1章 生态系统概述")中，*生态系统概述*，我们简要介绍了几种最流行的PHP框架，并指出了它们的优势。在这种情况下，选择合适的框架更多地是一种偏好，因为大部分应用需求可以很容易地满足任何一个框架。然而，我们的选择落在了Symfony上。除了PHP框架，我们仍然需要一个CSS框架，在客户端浏览器中提供一些结构、样式和响应能力。由于本书的重点是PHP技术，我们选择了Foundation
    CSS框架来完成这项任务。
- en: Edit an existing record
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Foundation框架
- en: Delete an existing record
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除现有记录
- en: Basically, we get a minimal store manager interface for free. This alone covers
    most of the CRUD related requirements set for the store manager role. We can then
    easily modify the generated templates to further integrate the remaining functionality.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们免费获得了一个最小的商店经理界面。这本身就涵盖了商店经理角色的大部分CRUD相关需求。然后，我们可以轻松修改生成的模板，进一步整合剩余的功能。
- en: On top of that, security components provide authentication and authorization
    that we can use to satisfy the customer and store manager logins. So a store manager
    will be a fixed, pre-created user attached to Symfony's firewall, the only one
    having access to CRUD controller actions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，安全组件提供了身份验证和授权，我们可以用来满足客户和商店经理的登录需求。因此，商店经理将是Symfony防火墙固定的、预先创建的用户，是唯一可以访问CRUD控制器操作的用户。
- en: Foundation framework
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础框架
- en: 'Backed by the company Zurb, the Foundation framework makes a great choice for
    a modern responsive web application. We might say it is an enterprise level framework,
    providing a collection of HTML, CSS, and JavaScript that we can build upon. It
    can be downloaded from the official [http://foundation.zurb.com](http://foundation.zurb.com
    ) page as shown here:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation框架由Zurb公司支持，是现代响应式Web应用程序的一个很好的选择。我们可以说它是一个企业级框架，提供了一套HTML、CSS和JavaScript，我们可以构建在其上。可以从官方网站[http://foundation.zurb.com](http://foundation.zurb.com)下载，如下所示：
- en: '![Foundation framework](graphics/B05460_04_13.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![Foundation框架](graphics/B05460_04_13.jpg)'
- en: 'Foundation comes in three flavors:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation有三种风格：
- en: Foundation for sites
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Foundation for sites
- en: Foundation for e-mail
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件基础
- en: Foundation for apps
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Foundation for apps
- en: We are interested in the sites version. Aside from general styling, Foundation
    for sites provides a great deal of controls, navigational elements, containers,
    media elements, and plugins. These will be particularly useful in our application,
    for things like header menus, category product listings, responsive cart tables,
    and so on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对网站版本感兴趣。除了一般的样式外，Foundation for sites还提供了大量的控件、导航元素、容器、媒体元素和插件。这些在我们的应用程序中将特别有用，比如标题菜单、类别产品列表、响应式购物车表格等。
- en: Foundation is built as a mobile-first framework, where we code for small screens
    first and larger screens then inherit those styles. Its default 12-column grid
    system enables us to create powerful multi-device layouts quickly and easily.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Foundation是一个以移动设备为先的框架，我们首先为小屏幕编码，然后大屏幕继承这些样式。它的默认12列网格系统使我们能够快速轻松地创建强大的多设备布局。
- en: We will use Foundation simply to provide structure, some basic styling, and
    responsiveness to our application, without writing a single line of CSS on our
    own. This alone should make our application visually pleasing enough to work with
    both on mobile and desktop screens, while still focusing the majority of our coding
    skills around backend things.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Foundation来提供结构、一些基本样式和响应性，而不需要自己编写一行CSS。这样就足以使我们的应用在移动和桌面屏幕上看起来足够美观，同时仍然将我们大部分的编码技能集中在后端事务上。
- en: Aside from providing robust functionality, the company behind Foundation also
    provides premium technical support. Though we will not need it as part of this
    book, these sorts of things establish confidence when choosing application frameworks.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供强大的功能外，Foundation背后的公司还提供优质的技术支持。虽然我们在本书中不需要它，但选择应用程序框架时，这些事情建立了信心。
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Creating web applications can be a tedious and time consuming task, web shops
    probably being one of the most robust and intensive type of application out there,
    as they encompass a great deal of features. There are many components involved
    in delivering the final product; from database, server side (PHP) code to client
    side (HTML, CSS, and JavaScript) code. In this chapter, we started off by defining
    some basic user stories which in turn defined high-level application requirements
    for our small web shop. Adding wireframes to the mix helped us to visualize the
    customer facing interface, while the store manager interface is to be provided
    out of the box by the framework.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Web应用程序可能是一项乏味且耗时的任务，Web商店可能是最健壮和最密集的应用程序类型之一，因为它们涵盖了大量的功能。在交付最终产品时涉及许多组件；从数据库、服务器端（PHP）代码到客户端（HTML、CSS和JavaScript）代码。在本章中，我们首先通过定义一些基本用户故事来定义我们小型网店的高级应用程序要求。将线框图加入其中有助于我们可视化客户界面，而商店管理界面将由框架提供。
- en: We further glossed over two of the most popular frameworks that support modular
    application design. We turned our attention to Symfony as server side technology
    and Foundation as a client side responsive framework.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进一步概述了支持模块化应用程序设计的两个最流行的框架。我们将注意力转向Symfony作为服务器端技术和Foundation作为客户端响应式框架。
- en: Moving forward, in the next chapter, we will take a more in-depth look into
    Symfony. As well as being a set of reusable components, Symfony is also one of
    the most robust and popular full-stack PHP frameworks. Therefore, it is an interesting
    choice for rapid web application development.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将更深入地了解Symfony。Symfony不仅是一组可重用的组件，还是最健壮和最流行的全栈PHP框架之一。因此，它是快速Web应用程序开发的一个有趣选择。
