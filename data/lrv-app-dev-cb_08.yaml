- en: Chapter 8. Using Ajax and jQuery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用Ajax和jQuery
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Getting data from another page
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从另一个页面获取数据
- en: Setting up a controller to return JSON data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置控制器以返回JSON数据
- en: Creating an Ajax search function
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Ajax搜索功能
- en: Creating and validating a user using Ajax
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ajax创建和验证用户
- en: Filtering data based on checkbox selection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据复选框选择过滤数据
- en: Making an Ajax newsletter sign-up box
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Ajax通讯快讯注册框
- en: Sending an e-mail using Laravel and jQuery
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Laravel和jQuery发送电子邮件
- en: Creating a sortable table using jQuery and Laravel
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery和Laravel创建可排序的表
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Many modern web applications rely on JavaScript to add dynamic user interactions.
    Using the jQuery library and Laravel's built-in functions, we can create these
    interactions with ease in our own application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代Web应用程序依赖于JavaScript来添加动态用户交互。使用jQuery库和Laravel的内置功能，我们可以在我们自己的应用程序中轻松创建这些交互。
- en: We'll begin by receiving data asynchronously from other pages and proceed to
    send data that can be saved in a database.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从其他页面异步接收数据，然后发送可以保存在数据库中的数据。
- en: Getting data from another page
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从另一个页面获取数据
- en: In our application, there may be times when we need to access some HTML from
    another page. Using Laravel and jQuery, we can accomplish this easily.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，可能会有时候我们需要从另一个页面访问一些HTML。使用Laravel和jQuery，我们可以轻松实现这一点。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we just need a standard Laravel installation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们只需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照给定的步骤进行操作：
- en: 'Open the `routes.php` file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`routes.php`文件：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the `views` directory, create a file named `tab1.php`:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`tab1.php`的文件：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the `views` directory, create a file named `tab2.php`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`tab2.php`的文件：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the `views` directory, create a file named `getting-data.php`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`getting-data.php`的文件：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: View the page at `http://{yourserver}/getting-data` and click on the links to
    load the content.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`http://{yourserver}/getting-data`页面查看页面，并单击链接以加载内容。
- en: How it works...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We start by setting up our routes. Our first route is going to display links,
    and when we click on them, content will be loaded into the page. Our next two
    routes will hold the actual content to display on the main page. To make sure
    that these pages can't be accessed directly, we use the `Request::ajax()` method
    to make sure that only Ajax requests are accepted. If someone tries to access
    the page directly, it will send them to an error page.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先设置我们的路由。我们的第一个路由将显示链接，当我们点击它们时，内容将加载到页面中。我们的下两个路由将保存要在主页面上显示的实际内容。为了确保这些页面不能直接访问，我们使用`Request::ajax()`方法来确保只接受Ajax请求。如果有人试图直接访问页面，它将把他们发送到错误页面。
- en: Our two view files will hold a couple of excerpts from books. Since this will
    be loaded into another page, we don't need the full HTML. Our main page, however,
    is a full HTML page. We begin by loading jQuery using the **Content Delivery Network**
    (**CDN**) from Google. Then, we have a list of the books we want to use. To make
    things a little easier, the ID of the link will correspond to the routes we created.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的两个视图文件将包含一些书籍摘录。由于这将加载到另一个页面中，我们不需要完整的HTML。然而，我们的主页面是一个完整的HTML页面。我们首先通过使用来自Google的**内容传送网络**（**CDN**）加载jQuery。然后，我们有一个我们想要使用的书籍列表。为了使事情变得更容易一些，链接的ID将对应于我们创建的路由。
- en: When someone clicks on the link, the script will use the ID and get the content
    from the route with the same name. The results will be loaded into our `container`
    div.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人点击链接时，脚本将使用ID并从具有相同名称的路由获取内容。结果将加载到我们的`container` div中。
- en: Setting up a controller to return JSON data
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置控制器以返回JSON数据
- en: When we access data using JavaScript, one of the easiest ways is to use JSON-formatted
    data. In Laravel, we can return JSON from one of our controllers to be used by
    our JavaScript on another page.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用JavaScript访问数据时，最简单的方法之一是使用JSON格式的数据。在Laravel中，我们可以从我们的控制器中返回JSON，以供我们在另一个页面上的JavaScript使用。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this recipe, follow the given steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，请按照给定的步骤进行操作：
- en: 'In the `controllers` directory, create a file named `BooksController.php`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controllers`目录中，创建一个名为`BooksController.php`的文件：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In `routes.php`, register the books controller
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，注册书籍控制器
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `views` directory, create a folder named `books`, and in that folder,
    create a file named `index.php`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`books`的文件夹，在该文件夹中创建一个名为`index.php`的文件：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We begin by creating a RESTful controller for our book list which extends our
    `BaseController` class. Our controller has two methods: one to display the list
    and one to return the formatted list. Our `getBooks()` method uses an array as
    our data source, and we use Laravel''s `Response::json()` method to automatically
    do the correct formatting for us.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为我们的书籍列表创建一个RESTful控制器，它扩展了我们的`BaseController`类。我们的控制器有两个方法：一个用于显示列表，一个用于返回格式化的列表。我们的`getBooks()`方法使用数组作为我们的数据源，并且我们使用Laravel的`Response::json()`方法来自动为我们执行正确的格式化。
- en: On our main page, we do a `get` request to the page in JavaScript, receive the
    JSON, and loop through the results. As we loop, we add the books to a JavaScript
    variable and then add the list to our `book-list` div.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主页面上，我们在JavaScript中对页面进行`get`请求，接收JSON，并循环遍历结果。当我们循环时，我们将书籍添加到JavaScript变量中，然后将列表添加到我们的`book-list`
    div中。
- en: There's more...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Our list could come from any data source. We could add in database functionality
    or even call an API. When we use the JSON response from Laravel, that value is
    correctly formatted with the correct headers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的列表可以来自任何数据源。我们可以添加数据库功能，甚至调用API。当我们使用Laravel的JSON响应时，该值将以正确的格式和正确的标头进行格式化。
- en: Creating an Ajax search function
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Ajax搜索功能
- en: If we want to search for information in our application, it might be useful
    to perform the search asynchronously. That way, the user won't have to be taken
    to a new page and have all the assets refreshed. Using Laravel and JavaScript,
    we can perform this search in a very simple manner.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在应用程序中搜索信息，异步执行搜索可能会很有用。这样，用户就不必转到新页面并刷新所有资产。使用Laravel和JavaScript，我们可以以非常简单的方式执行这个搜索。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a working installation of Laravel.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们需要一个正常安装的Laravel。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，请按照以下步骤进行：
- en: 'In the `controllers` directory, create a file named `SearchController.php`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controllers`目录中，创建一个名为`SearchController.php`的文件：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `routes.php` file, register the controller:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，注册控制器：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `views` directory, create a folder named `search`, and in that folder,
    create a file named `index.php`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`search`的文件夹，在该文件夹中，创建一个名为`index.php`的文件：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We first create a RESTful controller that holds two methods: one for our main
    page and one to process the search. On our main page, we have a single `text`
    field and a `submit` button. When the form is submitted, our JavaScript will post
    the form to our search page. If there are results, it will loop through them and
    display them in our `results` div.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个包含两种方法的RESTful控制器：一个用于我们的主页面，一个用于处理搜索。在我们的主页面上，我们有一个单一的`text`字段和一个`submit`按钮。当表单提交时，我们的JavaScript将把表单发布到我们的搜索页面。如果有结果，它将循环遍历它们，并在我们的`results`
    div中显示它们。
- en: For our `postSearch()` method, we use an array as our data source. When a search
    is posted, we then loop through the array to see if the string matches any of
    our titles. If so, the value is added to an array and that array is returned as
    a JSON.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`postSearch()`方法，我们使用一个数组作为我们的数据源。当进行搜索时，我们然后循环遍历数组，看看字符串是否与我们的标题匹配。如果是，该值将被添加到一个数组中，并将该数组作为JSON返回。
- en: Creating and validating a user using Ajax
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ajax创建和验证用户
- en: When a user comes to our application, we may want them to register or login
    without the need to navigate to another page. Using Ajax within Laravel, we can
    submit the user's form and run the validation asynchronously.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户来到我们的应用程序时，我们可能希望他们在不需要导航到另一个页面的情况下注册或登录。使用Laravel内的Ajax，我们可以提交用户的表单并异步运行验证。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we''ll need a working installation of Laravel as well as a
    properly configured MySQL database. We also need to add a user table to our database,
    which we can do with the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们需要一个正常安装的Laravel，以及一个正确配置的MySQL数据库。我们还需要向数据库添加一个用户表，可以使用以下代码完成：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，请按照给定的步骤进行：
- en: 'In the `controllers` directory, create a `UsersController.php` file:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controllers`目录中，创建一个名为`UsersController.php`的文件：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Register the controller in `routes.php:`
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中注册控制器：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `views` directory, create a folder named `users`, and in that folder,
    create a file named `index.php`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`users`的文件夹，在该文件夹中，创建一个名为`index.php`的文件：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To begin this recipe, we create our main page which will hold our user registration
    form. When the form is submitted, it will post to our `postRegister()` method
    and return any results to the `results` div.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个教程，我们创建一个主页面，用于容纳用户注册表单。当表单提交时，它将发布到我们的`postRegister()`方法，并将任何结果返回到`results`
    div。
- en: The `postRegister()` method begins by setting up the rules for our validation.
    In this case, we want to make sure both fields have a value, the e-mail must be
    valid, and the password must be at least 6 characters. If the validation fails,
    we send the error back as a JSON-encoded string and our main page will display
    the error. If everything is valid, we then save everything to the database and
    return a success message.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`postRegister()`方法首先设置我们验证的规则。在这种情况下，我们希望确保两个字段都有值，电子邮件必须有效，并且密码必须至少为6个字符。如果验证失败，我们将错误作为JSON编码的字符串发送回来，我们的主页面将显示错误。如果一切正常，我们将一切保存到数据库并返回成功消息。'
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If we don't want any other pages to post data to our method, we could add a
    `Request::ajax()` conditional. This would mean that only Ajax calls would be processed
    by our method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不希望任何其他页面向我们的方法发布数据，我们可以添加一个`Request::ajax()`条件。这意味着只有Ajax调用才会被我们的方法处理。
- en: Filtering data based on checkbox selection
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据复选框选择过滤数据
- en: When displaying data to a user, it could be convenient to allow them to filter
    the data. So we don't have to make the user click on submit and reload the page
    every time, we can do all the filtering using Ajax. For this recipe, we'll make
    a book list and allow the user to filter it based on the genre.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在向用户显示数据时，允许他们过滤数据可能会很方便。因此，我们不必让用户每次都点击提交并重新加载页面，我们可以使用Ajax来进行所有的过滤。对于这个教程，我们将制作一个书籍列表，并允许用户根据流派进行过滤。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we need a standard Laravel installation that''s configured
    to work with a database. We''ll need to set up a table to use by running this
    SQL statement:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们需要一个标准的Laravel安装，配置为与数据库一起工作。我们需要通过运行以下SQL语句来设置一个要使用的表：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it...
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，请按照以下步骤进行：
- en: 'In the `controllers` directory, create a new file named `BooksController.php`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`controllers`目录中，创建一个名为`BooksController.php`的新文件：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Register the `books` controller in the `routes.php` file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中注册`books`控制器：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `views` directory, create a new folder named `books`, and in that folder,
    create a file named `index.php`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`books`的新文件夹，在该文件夹中，创建一个名为`index.php`的文件：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `models` directory, create a file named `Book.php`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`models`目录中，创建一个名为`Book.php`的文件：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the browser, go to `http://{my-server}/books` and click on a few checkboxes
    to see the result.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到`http://{my-server}/books`，并点击一些复选框以查看结果。
- en: How it works...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: With our database set up, we begin with our main list page. This page has a
    number of checkboxes, with the value of each corresponding to a genre in our books
    table. When a box is checked, the form is submitted asynchronously to our `postBooks()`
    method. We use those results, loop through them, and display them in our `books`
    div.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据库设置好之后，我们从我们的主列表页面开始。这个页面有许多复选框，每个值对应于我们书籍表中的一个流派。当一个框被选中时，表单会异步提交到我们的`postBooks()`方法。我们使用这些结果，循环遍历它们，并在我们的`books`div中显示它们。
- en: Our `postBooks()` method begins by making sure a genre was actually submitted.
    If not, that means everything is unchecked and it will return all the books. If
    something is checked, we get everything from the database that matches the checked
    values. Since Laravel provides us with the raw returned data in JSON format, we
    then return the results, and in our index, the results are displayed correctly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`postBooks()`方法首先确保实际提交了一个流派。如果没有，这意味着一切都未被选中，它将返回所有的书籍。如果有选中的内容，我们从数据库中获取与选中值匹配的所有内容。由于Laravel以JSON格式提供了原始返回的数据，我们然后返回结果，在我们的索引中，结果被正确显示。
- en: Making an Ajax newsletter sign-up box
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Ajax新闻订阅框
- en: One way to have users added to our e-mail list is to have them sign-up through
    our website. In this recipe, we'll be using MailChimp's API and a modal window
    to show a sign-up form and have it sent through an Ajax call.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让用户加入我们的电子邮件列表的一种方法是让他们通过我们的网站进行注册。在这个教程中，我们将使用MailChimp的API和一个模态窗口来显示一个注册表单，并通过Ajax调用发送它。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a standard Laravel installation. We'll also be using
    the MailChimp API for the newsletter; a free account and API key can be created
    at [www.mailchimp.com](http://www.mailchimp.com).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们需要一个标准的Laravel安装。我们还将使用MailChimp API进行新闻订阅；可以在[www.mailchimp.com](http://www.mailchimp.com)创建免费帐户和API密钥。
- en: How to do it…
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，请按照给定的步骤进行操作：
- en: 'Open the `composer.json` file and update the `require` section to resemble
    the following code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`composer.json`文件，并更新`require`部分以类似以下代码：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the command-line window, where the artisan file is located, update Composer
    with the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行窗口中，位于artisan文件的位置，使用以下命令更新Composer：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `app/config` directory, create a file named `mailchimp.php`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中，创建一个名为`mailchimp.php`的文件：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the `views` directory, create a file named `signup.php`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`signup.php`的文件：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `routes.php` file, add the routes we need with the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，添加我们需要的路由，使用以下代码：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We start by installing the MailChimp package into our application using a composer
    version of the MailChimp SDK. We then need to create a configuration file to hold
    our API key and the list ID we want to use.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过使用MailChimp SDK的composer版本将MailChimp包安装到我们的应用程序中。然后我们需要创建一个配置文件来保存我们的API密钥和我们想要使用的列表ID。
- en: Our sign-up page will utilize jQuery and Bootstrap for our processing and display.
    Since we only want to display the form when the user wants to sign-up, we have
    a single button that, when clicked on, will display a modal window with our form.
    The form will take out first name, last name, and e-mail address.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的注册页面将利用jQuery和Bootstrap进行处理和显示。由于我们只想在用户想要注册时显示表单，我们有一个单独的按钮，当点击时，将显示一个带有我们表单的模态窗口。表单将包括名字、姓氏和电子邮件地址。
- en: When the sign-up form is submitted, we serialize the data and send it to our
    `signup-submit` route. Once we get a response, we hide the modal and display the
    results on our page.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当注册表单被提交时，我们序列化数据并将其发送到我们的`signup-submit`路由。一旦我们得到一个响应，我们隐藏模态窗口并在我们的页面上显示结果。
- en: In our `signup-submit` route, we attempt to subscribe the user with the information
    entered. If we get a response, we check if the response includes an error. If
    there is an error, we display that to the user, and if not, we show our success
    message.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`signup-submit`路由中，我们尝试使用输入的信息订阅用户。如果我们得到一个响应，我们检查响应是否包含错误。如果有错误，我们将其显示给用户，如果没有，我们显示成功消息。
- en: There's more...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Our `signup-submit` route isn't doing any validation on the form input. To include
    that, look at the an example in the *Creating and validating a user using Ajax*
    recipe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`signup-submit`路由没有对表单输入进行任何验证。要包括验证，请查看*使用Ajax创建和验证用户*教程中的示例。
- en: See also
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating and validating a user using Ajax* recipe
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Ajax创建和验证用户*教程'
- en: Sending an e-mail using Laravel and jQuery
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Laravel和jQuery发送电子邮件
- en: When creating a contact form, we may choose to let the user send the form asynchronously.
    Using Laravel and jQuery, we can have the form submitted without needing the user
    to go to a different page.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建联系表单时，我们可以选择让用户异步发送表单。使用Laravel和jQuery，我们可以在不需要用户转到不同页面的情况下提交表单。
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation and our mail client
    properly configured. We can update our mail configuration in the `app/config/mail.php`
    file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们需要一个标准的Laravel安装和正确配置我们的邮件客户端。我们可以在`app/config/mail.php`文件中更新我们的邮件配置。
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，请按照给定的步骤进行操作：
- en: 'In the `views` directory, create a file named `emailform.php` as shown in the
    following code:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`emailform.php`的文件，如下所示：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `views` folder, create our e-mail template view file named `ajaxemail.php`
    with the following code:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`文件夹中，创建我们的电子邮件模板视图文件，命名为`ajaxemail.php`，并使用以下代码：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `routes.php` file, create the routes as given in the following code
    snippet:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，根据以下代码片段创建路由：
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For this recipe, we need to have our e-mail client properly configured. We have
    many options to choose from, including PHP's `mail()` method, sendmail, and SMTP.
    We could even use a third-party e-mail service such as mailgun or postmark.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们需要正确配置我们的电子邮件客户端。我们有许多选择，包括PHP的`mail()`方法，sendmail和SMTP。我们甚至可以使用第三方电子邮件服务，如mailgun或postmark。
- en: 'Our e-mail form is a regular HTML form with four fields: the `to` and `from`
    e-mail addresses, the `subject` line, and the actual e-mail message. When the
    form is submitted, the fields are serialized and posted to our `email-send` route.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的电子邮件表单是一个常规的HTML表单，包括四个字段：`to`和`from`电子邮件地址，`subject`行和实际的电子邮件消息。当表单被提交时，字段被序列化并发布到我们的`email-send`路由。
- en: The `email-send` route first validates all of the posted input. If there are
    any validation errors, they are returned back as a string. If everything checks
    out, we send our values to the `Mail::send` method and then send it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`email-send`路由首先验证所有发布的输入。如果有任何验证错误，它们将作为字符串返回。如果一切正常，我们将发送我们的值到`Mail::send`方法，然后发送它。'
- en: Back in our `e-mail-form` route JavaScript, we check if `email-send` returned
    `FALSE`, and if so, we display an error. If not, we need to check if the response
    was a number or not. If it wasn't a number, that means there were validation errors
    and we display them. If it is a number, that means the e-mail was sent successfully,
    so we display a success message.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的`e-mail-form`路由JavaScript中，我们检查`email-send`是否返回了`FALSE`，如果是，则显示错误。如果不是，我们需要检查响应是否是一个数字。如果不是一个数字，那意味着有验证错误，我们将它们显示出来。如果是一个数字，那意味着电子邮件发送成功，所以我们显示一个成功消息。
- en: Creating a sortable table using jQuery and Laravel
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery和Laravel创建可排序的表格
- en: When handling large amounts of data, it can be helpful to display it in a table
    view. To manipulate the data, such as for sorting or searching, we can use the
    data tables JavaScript library. This way, we don't need to keep making database
    calls every time we want to change the view.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大量数据时，将其显示在表格视图中可能会有所帮助。为了操纵数据，例如排序或搜索，我们可以使用数据表JavaScript库。这样，我们就不需要每次想要更改视图时都进行数据库调用。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard installation of Laravel and a properly configured
    MySQL database.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个标准的Laravel安装和一个正确配置的MySQL数据库。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow the given steps to complete this recipe:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定的步骤完成这个示例：
- en: 'In our database, create a new table and add some example data using the following
    commands:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的数据库中，使用以下命令创建一个新表并添加一些示例数据：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `app/models` directory, create a file named `Bookprices.php` with the
    following code snippet:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/models`目录中，创建一个名为`Bookprices.php`的文件，并包含以下代码片段：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `routes.php` file, add our route as given in the following code:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，按照以下代码添加我们的路由：
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `views` directory, create a file named `table.php` with the following
    code:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`table.php`的文件，其中包含以下代码：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To start this recipe, we create a table to hold our book price data. We then
    insert the data into the table. Next, we create an `Eloquent` model so we can
    interact with the data. We then pass that data into our view.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个示例，我们创建一个表来保存我们的图书价格数据。然后，我们将数据插入表中。接下来，我们创建一个`Eloquent`模型，以便我们可以与数据交互。然后将该数据传递到我们的视图中。
- en: In our view, we load in jQuery and the `dataTables` plugin. Then, we create
    a table to hold our data and then loop through the data, putting each record into
    a new row. When we add the `dataTable` plugin to our table, it will automatically
    add sorting to our table for each of our columns.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的视图中，我们加载jQuery和`dataTables`插件。然后，我们创建一个表来保存我们的数据，然后循环遍历数据，将每条记录放入新行中。当我们将`dataTable`插件添加到我们的表中时，它将自动为每个列添加排序。
- en: There's more...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`Datatables` is a powerful jQuery plugin to manipulate tabular data. For much
    more information, view the documentation at [http://www.datatables.net](http://www.datatables.net).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`Datatables`是一个强大的jQuery插件，用于操纵表格数据。有关更多信息，请查看[http://www.datatables.net](http://www.datatables.net)上的文档。'
