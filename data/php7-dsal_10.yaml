- en: Understanding and Using Heaps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和使用堆
- en: A heap is a specialized data structure that is based on the tree abstract data
    type and used in many algorithms and data structures. A common data structure
    that can be built using a heap is the Priority Queue. Also, one of the most popular
    and efficient sorting algorithms that heap sort is based on is heap data structure.
    In this chapter, we are going to discuss a heap's properties, different variants
    of heaps, and heap operations. We will also discover the heap sort and will be
    implementing heap using SPL as we progress through the chapter. We are now going
    to explore the heap and its definition in the next section.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 堆是一种基于树抽象数据类型的专门数据结构，用于许多算法和数据结构。可以使用堆构建的常见数据结构是优先队列。而基于堆数据结构的最流行和高效的排序算法之一是堆排序。在本章中，我们将讨论堆的属性、不同的堆变体和堆操作。随着我们在本章的进展，我们还将使用SPL实现堆。我们现在将在下一节探讨堆及其定义。
- en: What is a heap?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是堆？
- en: 'By definition, a heap is a specialized tree data structure that supports a
    heap property. A heap property is defined in such a way that the root of a heap
    structure will be either smaller or larger than its child nodes. If the parent
    node is greater than the child nodes, then it is known as max-heap and if the
    parent node is smaller than the child nodes then it is known as min-heap. The
    following figure shows an example of max-heap:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，堆是一种支持堆属性的专门树数据结构。堆属性被定义为堆结构的根节点要么比其子节点小，要么比其子节点大。如果父节点大于子节点，则称为最大堆，如果父节点小于子节点，则称为最小堆。以下图显示了最大堆的示例：
- en: '![](Image00090.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00090.jpg)'
- en: If we look at the root node, the value **100** is greater than the two child
    nodes **19** and **36** . Similarly for **19** , the value is greater than **17**
    and **3** . It applies the same rule for **36** and **17** . As we can see from
    the tree structure, the tree is not completely sorted or ordered. But the important
    fact is we can always find the maximum or minimum at the root of the tree, which
    can be very efficient for many use cases.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看根节点，值**100**大于两个子节点**19**和**36**。同样对于**19**，该值大于**17**和**3**。对**36**和**17**也适用相同的规则。从树结构中可以看出，树并没有完全排序或有序。但重要的事实是我们总是可以在树的根部找到最大值或最小值，这对于许多用例来说非常高效。
- en: There are many variations of heap structure, such as binary heap, b-heap, Fibonacci
    heap, ternary heap, treap, weak heap, and so on. A Binary heap is one of the most
    popular for heap implementations. A binary heap is a complete binary tree where
    all inner levels of the tree are fully filled. The last level can be fully filled
    or partially filled. Since we are considering a binary heap, we can perform most
    of our operations in logarithmic time. In this book, we are going to focus on
    binary heap implementation and operations.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 堆结构有许多变体，如二叉堆、b-堆、斐波那契堆、三元堆、treap、弱堆等。二叉堆是堆实现中最流行的之一。二叉堆是一棵完全二叉树，其中树的所有内部级别都是完全填充的。最后一级可以完全填充或部分填充。由于我们考虑的是二叉堆，我们可以在对数时间内执行大多数操作。在本书中，我们将专注于二叉堆的实现和操作。
- en: Heap operations
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 堆操作
- en: 'As we have mentioned a few times that heap is a specialized tree data structure,
    we have to make sure that we first construct a heap from a given list of items.
    As heap has a strict heap property, we have to satisfy the heap property on each
    step. Here are some of the core operations for heap:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经多次提到的，堆是一种专门的树数据结构，我们必须确保首先从给定的项目列表构造一个堆。由于堆具有严格的堆属性，我们必须在每一步满足堆属性。以下是堆的一些核心操作：
- en: Create heap
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建堆
- en: Insert a new value
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入一个新值
- en: Extract minimum or maximum from heap
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从堆中提取最小值或最大值
- en: Remove a value
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除一个值
- en: Swapping
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交换
- en: Creating a heap from a given list of items or numbers requires us to ensure
    that both heap property and binary tree property are satisfied. Which means the
    parent node must be greater or less than the child nodes and that will be true
    for all nodes in the tree. Also the tree must be a complete binary tree all the
    time. While creating a heap, we start with one node and insert a new node to the
    heap.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的项目或数字列表创建堆需要我们确保满足堆属性和二叉树属性。这意味着父节点必须大于或小于子节点，并且对树中的所有节点都成立。而且树必须始终是一棵完全二叉树。在创建堆时，我们从一个节点开始，并将新节点插入堆中。
- en: 'The insert node operation has a defined set of steps. We cannot start from
    an arbitrary node. The steps for insert operation are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 插入节点操作有一组定义的步骤。我们不能从任意节点开始。插入操作的步骤如下：
- en: Insert the new node at the bottom of the heap.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在堆的底部插入新节点。
- en: Check the new node with parent value if they are in the right order. If they
    are in the right order, stop there.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查新节点与父节点值是否按正确顺序。如果它们按正确顺序，则停在那里。
- en: If they are not in the right order, swap them and move to the previous step
    to check the newly swapped node with its parent node. This step along with the
    previous one is known as sift up or up-heap, or bubble-up, or heapify-up, and
    so on.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它们不按正确顺序，交换它们并移动到上一步，检查新交换的节点与其父节点。这一步与前一步一起被称为sift up或up-heap，或bubble-up，或heapify-up等。
- en: 'The extract operation (minimum or maximum) takes out the root node from the
    heap. After this we have to do the following operations to ensure heap properties
    for the remaining heap:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 提取操作（最小或最大）从堆中取出根节点。之后，我们必须执行以下操作，以确保剩余堆的堆属性：
- en: Move the last node from the heap as the new root.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将堆中的最后一个节点移动为新根。
- en: Compare the new root node with the child nodes, if they are in the correct order,
    stop.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新根节点与子节点进行比较，如果它们按正确顺序，则停止。
- en: If not, swap the root node with the child node (minimum child for `MinHeap`
    , maximum child for `MaxHeap` ) and continue with the previous step. This step
    along with the previous one is known as sift down or down-heap, or bubble-down
    or heapify-down, and so on.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不是，则将根节点与子节点交换（对于`MinHeap`来说是最小子节点，对于`MaxHeap`来说是最大子节点），并继续进行上一步。这一步和前一步被称为筛选或下沉，或冒泡下沉，或堆化下沉等等。
- en: In heap, one of the important operations is swapping. In many cases, we have
    to swap two values from two nodes without impacting the tree's properties. Now
    we are going to implement a binary heap using PHP 7.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在堆中，交换是一个重要的操作。在许多情况下，我们必须交换两个节点的两个值，而不影响树的属性。现在我们将使用PHP 7实现二叉堆。
- en: Implementing a binary heap in PHP
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在PHP中实现二叉堆
- en: One of the most popular ways to implement a binary heap is using an array. Since
    heaps are complete binary trees, they can be easily implemented using an array.
    If we consider the root item to be at index 1, then the child items will be at
    index 2 and 3\. We can represent this as *i* for the root and *2*i* for the left
    child and *2*i +1* for the right child. Also, we are going to implement the mean
    heap as our example. So, let us get started with the class structure for the min-heap
    implementation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 实现二叉堆的最流行的方法之一是使用数组。由于堆是完全二叉树，因此可以很容易地使用数组实现。如果我们将根项目视为索引1，则子项目将位于索引2和3。我们可以将此表示为根为*i*，左子为*2*i*，右子为*2*i
    +1*。此外，我们将以我们的示例实现平均堆。因此，让我们从最小堆实现的类结构开始。
- en: 'First, we are going to start by creating a class for `MinHeap` , which will
    have two properties, one for storing the heap array and another count for the
    number of elements in the heap at any given moment. Here is the code for the class:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个`MinHeap`类，它将具有两个属性，一个用于存储堆数组，另一个用于任何给定时刻堆中元素的数量。以下是该类的代码：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If we look at the preceding code, we can see that we have initialized the heap
    array to have all 0 values from 0 index to `$size + 1` . Since we are considering
    putting the root at index 1, we are going to require an array with one extra space.
    Now we need a way to build a heap from a given array. As we have to satisfy heap
    property, we have to add one item to the heap and check if the heap property satisfies
    or not by using the C steps. Here is the code block for creating a heap by inserting
    one item at a time and also the `siftUp` process:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下前面的代码，我们可以看到我们已经将堆数组初始化为从0索引到`$size + 1`的所有0值。由于我们考虑将根放在索引1处，我们将需要一个带有额外空间的数组。现在我们需要一种方法来从给定数组构建堆。由于我们必须满足堆属性，我们必须向堆中添加一个项目，并使用C步骤检查堆属性是否满足。以下是通过一次插入一个项目来创建堆的代码块，以及`siftUp`过程：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First we use the `create` method to build a heap from an array. For each element
    in the array, we insert it to the heap using an `insert` method. In the `insert`
    method, we check if the current size of the heap is 0 or not. If the current size
    is 0, we add the first item to index 1 and setting the next counter at 2\. If
    the heap already has an item, we will store the new item in the last position
    and increment the counter. We also call the `siftUp()` method to make sure the
    newly inserted value satisfies the heap property.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`create`方法从数组构建堆。对于数组中的每个元素，我们使用`insert`方法将其插入堆中。在`insert`方法中，我们检查堆的当前大小是否为0。如果当前大小为0，则将第一个项目添加到索引1，并将下一个计数器设置为2。如果堆已经有一个项目，我们将新项目存储在最后一个位置并增加计数器。我们还调用`siftUp()`方法来确保新插入的值满足堆属性。
- en: 'Inside the `siftUp` method, we consider the last position and its parent position
    to compare. If the child value is less than the parent one, we swap them. We continue
    this until we reach the root node at the top. This method ensures that if the
    inserted value at the end is smallest, it will be sifted up in the tree. But if
    it is not, the tree will remain as it is. Though we have talked about swapping,
    we have not seen the implementation yet. Here is the implementation:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`siftUp`方法中，我们考虑最后一个位置及其父位置进行比较。如果子值小于父值，我们交换它们。我们继续这样做，直到达到顶部的根节点。这个方法确保了如果插入的值在最后是最小的，它将被筛选到树中。但如果不是，树将保持不变。虽然我们已经谈到了交换，但我们还没有看到实现。这里是实现：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since the root element has the minimum value in the heap (we are implementing
    min-heap). The `extract` method will return the minimum value of the current heap
    all the time:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于根元素在堆中具有最小值（我们正在实现最小堆）。`extract`方法将始终返回当前堆的最小值：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `extractMin` method returns the first index of the array and replaces it
    with the last item of the array. After that, it performs the siftDown check for
    the newly placed root so that it ensures the heap property. Since we are extracting
    the root value, we are replacing the last index value with 0, which we have used
    for initializing the heap array. Now we are going to write the `siftDown` method,
    which we are calling the `extract` method:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`extractMin`方法返回数组的第一个索引，并用数组的最后一个项目替换它。之后，它对新放置的根进行`siftDown`检查，以确保堆属性。由于我们正在提取根值，我们将最后一个索引值替换为0，这是我们用于初始化堆数组的值。现在我们将编写`extract`方法，我们称之为`siftDown`方法：'
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We consider that the item at index `$k` is the smallest value. Then we compare
    the smallest value with the left and right child. If there is smaller value available,
    we swap the smallest value with the root node and it continues until the tree
    satisfies the heap property. This function calls itself recursively every time
    swapping is required. Now we need one more method to display the current heap
    as a string. For that we can write a small method as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为索引`$k`处的项目是最小值。然后我们将最小值与左右子节点进行比较。如果有更小的值可用，我们将最小值与根节点交换，直到树满足堆属性。这个函数每次需要交换时都会递归调用自己。现在我们需要另一个方法来将当前堆显示为字符串。为此，我们可以编写一个小方法如下：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we pull all the pieces together now, we have a solid implementation for
    min-heap. Let us now run a test to see if our implementation satisfies the min-heap
    properties. Here is the code we can run to build the heap and also extract the
    minimum from the heap multiple times:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们把所有的部分放在一起，我们就有了一个坚实的最小堆实现。让我们现在运行一个测试，看看我们的实现是否满足最小堆的属性。这是我们可以运行的代码，来构建堆并多次从堆中提取最小值：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we run this code, the following output will be shown in the terminal:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这段代码，以下输出将显示在终端中：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As we can see from the preceding output, when we constructed the min-heap, the
    lowest value of `9` is in the root. Then we extracted the minimum value, we took
    `9` from the heap. The root was then taken by the next minimum value of `26` and
    then followed by `34` , `37` , `44` , and `65` . Every time we take the minimum
    out, the heap is reconstructed again for the minimum value. Since we have seen
    all applicable operations for a heap data structure, we are now going to analyze
    the complexity for different heap operations.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出中可以看到，当我们构建最小堆时，值为`9`的最小值在根中。然后我们提取了最小值，我们从堆中取出了`9`。然后根被下一个最小值`26`取代，然后是`34`，`37`，`44`和`65`。每次我们取出最小值时，堆都会重新构建以获取最小值。由于我们已经看到了堆数据结构的所有适用操作，现在我们将分析不同堆操作的复杂度。
- en: Analyzing the complexity of heap operations
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析堆操作的复杂度
- en: 'Since there are different variations for heap implementation, the complexity
    also varies in the different implementation. One of the key facts for the heap
    is the extract operation that will always take `O(1)` time to get the maximum
    or minimum from the heap. Since we have focused on binary heap implementation,
    we are going to see the analysis of binary heap operations:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于堆实现有不同的变体，复杂度在不同的实现中也会有所不同。堆的一个关键事实是提取操作总是需要`O(1)`的时间来从堆中获取最大或最小值。由于我们专注于二叉堆实现，我们将看到二叉堆操作的分析：
- en: '| **Operation** | **Complexity - average** | **Complexity - Worst** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **操作** | **复杂度 - 平均** | **复杂度 - 最坏** |'
- en: '| Search | `O(n)` | `O(n)` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 搜索 | `O(n)` | `O(n)` |'
- en: '| Insert | `O(1)` | `O(log n)` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 插入 | `O(1)` | `O(log n)` |'
- en: '| Delete | `O(log n)` | `O(log n)` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 删除 | `O(log n)` | `O(log n)` |'
- en: '| Extract | `O(1)` | `O(1)` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 提取 | `O(1)` | `O(1)` |'
- en: '| Space | `O(n)` | `O(n)` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 空间 | `O(n)` | `O(n)` |'
- en: Since the heap is not fully sorted, the search operation will take more than
    a regular binary search tree.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于堆不是完全排序的，搜索操作将比常规二叉搜索树需要更多时间。
- en: Using heaps as a priority queue
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用堆作为优先队列
- en: One of the main ways to use the heap data structure is to create a priority
    queue. As we have seen in [Chapter 4](text00098.html) , *Constructing Stacks and
    Queues* , priority queues are special queues where the FIFO behavior depends on
    the priority of the element rather than the way items are added to the queue.
    We have already seen the implementation using Linked list and SPL. Now we are
    going to explore the priority queue implementation using heap and especially max-heap.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用堆数据结构的主要方式之一是创建优先队列。正如我们在[第4章](text00098.html)中所见，*构建栈和队列*，优先队列是特殊的队列，其中FIFO行为取决于元素的优先级，而不是元素添加到队列的方式。我们已经看到了使用链表和SPL的实现。现在我们将探索使用堆和特别是最大堆实现优先队列。
- en: 'Now we are going to implement the priority queue using `MaxHeap` . Here, the
    maximum priority item is removed from the queue first. Our implementation will
    be similar to our last implementation of `MinHeap` with a little difference. Instead
    of starting the root at 1, we want to start it from 0\. So, the calculation of
    the left and right child changes as well. This will help us to understand both
    approaches of constructing a heap using an array. Here is the implementation for
    the `MaxHeap` class:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用`MaxHeap`来实现优先队列。在这里，最大优先级的项目首先从队列中移除。我们的实现将类似于我们上次实现的`MinHeap`，只是有一点不同。我们希望从0开始而不是从1开始。因此，左右子节点的计算也会发生变化。这将帮助我们理解使用数组构建堆的两种方法。这是`MaxHeap`类的实现：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s go through our implementation of the `MaxHeap` class. There are some
    minor differences in our `MaxHeap` implementation from our `MinHeap` implementation
    in the last section. The first difference is that we have an array of size *n*
    for `MaxHeap` , whereas we had an array of size *n+1* for `MinHeap` . That makes
    our insert operation for `MaxHeap` start inserting from index 0, whereas in `MinHeap`
    , we started from index 1\. The `siftUp` functionality only sifts a value to the
    top if the value of the newly inserted item is greater than the immediate parent
    value. Also, the `extractMax` method returns the first value of the array at index
    0, which is the maximum from the heap. Once we extract the maximum value, we need
    to get the maximum value from the remaining items and store it at index 0\. The
    `siftDown` function also operates to check if the left or right child value is
    bigger than the parent node value and we swap the values to store the maximum
    value at parent node. We continue to do this recursively to ensure the maximum
    value is stored in the root at the end of function calls. This `MaxHeap` implementation
    can be used as standalone heap implementation if we want. Since we are planning
    to implement the priority queue using a heap, we are going to add another class
    to extend the `MaxHeap` class to show the characteristics of a Priority Queue.
    Let us explore the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`MaxHeap`类的实现。我们的`MaxHeap`实现与上一节的`MinHeap`实现有一些细微的差异。第一个区别是，对于`MaxHeap`，我们有一个大小为*n*的数组，而对于`MinHeap`，我们有一个大小为*n+1*的数组。这使得我们对`MaxHeap`的插入操作从索引0开始插入，而在`MinHeap`中，我们从索引1开始。`siftUp`功能只有在新插入项的值大于即时父值时才将值移至顶部。此外，`extractMax`方法返回数组中索引0的第一个值，即堆中的最大值。一旦我们提取了最大值，我们需要从剩余项中获取最大值并将其存储在索引0处。`siftDown`函数还用于检查左侧或右侧子值是否大于父节点值，并交换值以将最大值存储在父节点处。我们继续递归地执行此操作，以确保在函数调用结束时将最大值存储在根中。如果需要，可以将此`MaxHeap`实现用作独立的堆实现。由于我们计划使用堆来实现优先级队列，因此我们将添加另一个类来扩展`MaxHeap`类，以展示优先级队列的特性。让我们探索以下代码：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here we are just extending the `MaxHeap` class and adding a wrapper for `enqueue`
    and `dequeue` operations using the `insert` and `extractMax` at stealth mode.
    Let us now run the `PriorityQ` code with the same numbers we did for `MinHeap`
    :'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是扩展了`MaxHeap`类，并添加了一个包装器，使用`insert`和`extractMax`进行`enqueue`和`dequeue`操作。现在让我们用与`MinHeap`相同的数字运行`PriorityQ`代码：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we can see from the preceding code, we are not constructing the heap directly
    from the array. We are using the priority queue class to enqueue each number in
    the queue. Also, the dequeue operation will get the top priority item from the
    queue. If we run this code from the command line, we will have the following output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中可以看出，我们并不是直接从数组构建堆。我们使用优先级队列类将每个数字入队。此外，出队操作将从队列中获取优先级最高的项。如果从命令行运行此代码，将会得到以下输出：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As we can see from the output, the `MaxHeap` implementation is helping us to
    get the maximum value item on each dequeue operation. This is one of the ways
    of implementing the priority queue. If we want, we can also sort the whole heap
    at one go and then use the sorted array as the priority queue. For that, we can
    implement a sorting function that is known as heap sort. It is one of the most
    efficient and used sorting mechanisms in computer programming. We are now going
    to explore that in the next section.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，`MaxHeap`实现帮助我们在每次出队操作时获取最大值项。这是实现优先级队列的一种方式。如果需要，我们还可以一次对整个堆进行排序，然后使用排序后的数组作为优先级队列。为此，我们可以实现一个称为堆排序的排序函数。这是计算机编程中最有效和最常用的排序机制之一。现在我们将在下一节中探索这一点。
- en: Using heap sort
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用堆排序
- en: 'Heap sort requires us to build a heap from a given list of elements and then
    continuously checks the heap property so that the whole heap remains sorted all
    the time. Unlike a regular heap where we stop checking the heap property once
    the newly inserted value satisfies the conditions, we continue to do so for the
    next elements during the heap sort implementation. The pseudocode of the heap
    sort looks like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 堆排序要求我们从给定的元素列表构建堆，然后不断检查堆属性，以使整个堆始终保持排序。与常规堆不同，常规堆在新插入值满足条件后停止检查堆属性，而在堆排序实现过程中，我们继续对下一个元素进行这样的操作。堆排序的伪代码如下：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The pseudocode shows that whenever we are trying to sort a list of elements,
    the start process depends on building the heap. Each time we add an item to the
    heap, we check if that satisfies heap properties through the `heapify` function.
    Once the heap is built, we check the heap properties of all elements. Let us now
    implement the heap sort based on the preceding pseudocode:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 伪代码表明，每当我们尝试对一系列元素进行排序时，起始过程取决于构建堆。每次向堆中添加一个项时，我们都会通过`heapify`函数检查是否满足堆属性。构建好堆后，我们会检查所有元素的堆属性。现在让我们根据前面的伪代码实现堆排序：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let us now use the `heapSort` function to sort an array. Since we are passing
    the argument as by reference, we are not returning anything from the function.
    The actual array will be sorted at the end of the operation:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`heapSort`函数对数组进行排序。由于我们传递的参数是按引用传递的，因此我们不会从函数中返回任何内容。实际数组将在操作结束时排序：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we run this code, it will have the following output in the command line:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行此代码，将在命令行中输出以下内容：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we want to change the sorting to descending order, we just need to change
    the comparison in the `heapify` function. If we consider time and space complexity
    for the `heapSort` algorithm, we will see that heap sort has the best complexity
    for a sorting algorithm:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要将排序改为降序，我们只需要在`heapify`函数中改变比较。如果我们考虑`heapSort`算法的时间和空间复杂度，我们会发现堆排序是排序算法中最好的复杂度：
- en: '| Best time complexity | `Ω(nlog(n))` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '|最佳时间复杂度|`Ω(nlog(n))`|'
- en: '| Worst time complexity | `O (nlog(n))` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|最坏时间复杂度|`O(nlog(n))`|'
- en: '| Average time complexity | `Θ(nlog(n))` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '|平均时间复杂度|`Θ(nlog(n))`|'
- en: '| Space Complexity (Worst case) | `O(1)` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 空间复杂度（最坏情况） | `O(1)` |'
- en: Compared to merge sort, heap sort has better space complexity. As a result,
    many developers prefer heap sort for sorting lists of items.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与归并排序相比，堆排序具有更好的空间复杂度。因此，许多开发人员更喜欢使用堆排序来对项目列表进行排序。
- en: Using SplHeap, SplMaxHeap, and SplMinHeap
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SplHeap、SplMaxHeap和SplMinHeap
- en: If we do not want to implement our own Heap implementations, we can use the
    built-in heap classes from the Standard PHP Library - SPL. SPL has three different
    implementations for the heap. One for generic Heap, which is `SplHeap` , for `MaxHeap`
    we have `SplMaxHeap` , and for `MinHeap` we have `SplMinHeap` . It is important
    to know that SPL classes are not considered as very performant while running on
    PHP 7\. So we are not going to explore in details about them here. We will just
    focus on a sample example here so that if we are using any other version than
    PHP 7, we can use those built-in classes. Let us try an example using `SplMaxHeap:`
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想实现自己的堆实现，我们可以使用标准PHP库（SPL）中的内置堆类。SPL有三种不同的堆实现。一种是用于通用堆的`SplHeap`，一种是用于`MaxHeap`的`SplMaxHeap`，还有一种是用于`MinHeap`的`SplMinHeap`。重要的是要知道，SPL类在PHP
    7上运行时并不被认为是非常高效的。因此，我们不会在这里详细探讨它们。我们只会专注于一个示例，以便如果我们使用的是PHP 7之外的其他版本，我们可以使用这些内置类。让我们尝试使用`SplMaxHeap`的一个示例：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Since we have used max-heap, we are expecting the output to be in descending
    order. Here is the output from the command line:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了最大堆，我们期望输出是按降序排列的。以下是从命令行输出的结果：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If we want to sort it the other way around, we can use `SplMinHeap` for that.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想以另一种方式进行排序，我们可以使用`SplMinHeap`。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about another efficient data structure, named
    heap. When we implement priority queues using a heap, they are considered maximally
    efficient implementations. We have also learned about another efficient sorting
    method named heap sort, which can be achieved through a heap data structure. Here,
    we are going to conclude our discussion regarding data structures for this book.
    In the remaining chapters, we are going to focus on advanced algorithms, built-in
    functions for algorithms, and data structures, along with functional data structures
    at the end. First, we are going to explore the world of dynamic programming in
    the next chapter.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了另一种高效的数据结构，名为堆。当我们使用堆来实现优先队列时，它们被认为是最大效率的实现。我们还学习了另一种高效的排序方法，名为堆排序，可以通过堆数据结构实现。在这里，我们将总结本书关于数据结构的讨论。在剩下的章节中，我们将专注于高级算法，算法的内置函数和数据结构，以及最后的函数式数据结构。首先，我们将在下一章中探索动态规划的世界。
