- en: Creating a RESTful API Using Laravel - Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Laravel创建RESTful API - 第1部分
- en: Before we get started, let's briefly introduce a software development standard
    called the RESTful API.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，让我们简要介绍一种称为RESTful API的软件开发标准。
- en: An **Application Programming Interface **(**API)** is a set of instructions,
    routines, and programming patterns used to access an internet-based application.
    This allows a computer or other application to understand the instructions in
    this application, interpret its data, and use it for integration with other platforms
    and software, generating new instructions that will be executed by this software
    or computers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序编程接口（API）是一组用于访问基于互联网的应用程序的指令、例程和编程模式。这允许计算机或其他应用程序理解此应用程序中的指令，解释其数据，并将其用于与其他平台和软件集成，生成将由此软件或计算机执行的新指令。
- en: In this way, we understand that the APIs allow interoperability between applications.
    In other words, this is communication between applications, in our case, the communication
    between the client-side and the server-side.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们了解到API允许应用程序之间的互操作性。换句话说，这是客户端和服务器端之间的通信。
- en: '**Representational State Transfer **(**REST**) is an abstraction of the web
    architecture. Briefly, REST consists of principles, rules, and constraints that,
    when followed, allow the creation of a project with well-defined interfaces.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 表述状态转移（REST）是Web架构的一种抽象。简而言之，REST由原则、规则和约束组成，遵循这些原则、规则和约束可以创建一个具有明确定义接口的项目。
- en: The features available in a RESTful service can be accessed or manipulated from
    a set of operations that are predefined by default. The operations make it possible
    to create (PUT), read (GET), change (POST), and delete (DELETE) resources, and
    are available from messages using the HTTP protocol.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful服务中可用的功能可以从一组默认预定义的操作中访问或操作。这些操作使得可以使用HTTP协议从消息中创建（PUT）、读取（GET）、更改（POST）和删除（DELETE）资源。
- en: Although Laravel is an– MVC framework, we can build RESTful apps that are extremely
    robust and scalable.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Laravel是一个MVC框架，但我们可以构建非常强大和可扩展的RESTful应用程序。
- en: 'In this chapter, you will learn how to build a RESTful API using the core elements
    of the Laravel framework, such as controllers, routes, and Eloquent **Object Relational
    Mapping** (**ORM**). Mainly, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用Laravel框架的核心元素构建RESTful API，例如控制器、路由和Eloquent对象关系映射（ORM）。主要，我们将涵盖以下主题：
- en: Preparing the application and understanding what we are building
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备应用程序并了解我们正在构建的内容
- en: An Eloquent ORM relationship
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eloquent ORM关系
- en: Controllers and routes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器和路由
- en: Preparing the application and understanding what we are building
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备应用程序并了解我们正在构建的内容
- en: Let's start this session using the application that we started to develop in
    the previous chapter. However, we will make some adjustments before continuing.
    First, we are going to add our code to the version control. In this way, we will
    not lose the progress we made in the previous chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用在上一章中开始开发的应用程序来开始本节课。但是，在继续之前，我们将进行一些调整。首先，我们将把我们的代码添加到版本控制中。这样，我们就不会丢失在上一章中所做的进展。
- en: 'Inside the `chapter-04` folder, create a new file called `.gitignore` and add
    the following code:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-04`文件夹中，创建一个名为`.gitignore`的新文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: See [https://help.github.com/articles/ignoring-files](https://help.github.com/articles/ignoring-files) for
    more information about ignoring files
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关忽略文件的更多信息，请参阅[https://help.github.com/articles/ignoring-files](https://help.github.com/articles/ignoring-files)
- en: If you find yourself ignoring temporary files generated by your text editor or
    operating system, you probably want to add a global ignore instead `git config
    --global core.excludesfile '~/.gitignore_global'`
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您发现自己正在忽略文本编辑器或操作系统生成的临时文件，您可能希望添加一个全局忽略，而不是`git config --global core.excludesfile
    '~/.gitignore_global'`
- en: Ignore the `storage` folder's due size
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽略`storage`文件夹的大小
- en: The previous code just added the `storage-db` folder to untracked files.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码只是将`storage-db`文件夹添加到未跟踪的文件中。
- en: 'Let''s add the changes to source control. Inside the Terminal window, type
    the following command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们把更改添加到源代码控制中。在终端窗口内，输入以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finally, let's add our first commit.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们添加我们的第一个提交。
- en: 'Inside the Terminal, type the following commands:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端内，输入以下命令：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Bravo! We have our code under Git source control.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的代码已经在Git源代码控制下了。
- en: Refactoring the application files
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构应用程序文件
- en: Now, it is time to change some files to adjust to `chapter-05`**:**
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更改一些文件以适应`chapter-05`了：
- en: Copy all the content of `chapter-04` and paste it into a new folder called `chapter-05`**.**
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`chapter-04`的所有内容，并将其粘贴到一个名为`chapter-05`的新文件夹中。
- en: 'Open the `docker-compose.yml` file and replace the code with the following
    lines:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`docker-compose.yml`文件，并用以下行替换代码：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that we changed `MYSQL_DATABASE` and `MYSQL_USER` and also changed the
    container names to fit the `chapter-05` title.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们更改了`MYSQL_DATABASE`和`MYSQL_USER`，还将容器名称更改为符合`chapter-05`标题。
- en: 'Edit the `project/.env` file with the new database information, as in the following
    code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新的数据库信息编辑`project/.env`文件，如下所示：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, delete the `storage-db` folder. Don't worry – we will create a new one
    with the `docker-compose` command later.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，删除`storage-db`文件夹。不用担心，我们稍后会使用`docker-compose`命令创建一个新的文件夹。
- en: It's time to commit our new changes, but this time we will do it another way.
    This time, we will use the Git Lens VS Code plugin.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候提交我们的新更改了，但这次我们将以另一种方式进行。这次，我们将使用Git Lens VS Code插件。
- en: Open VS Code. On the left-hand side bar, click on the third icon for source
    control.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VS Code。在左侧边栏中，单击源代码控制的第三个图标。
- en: Add the following message inside the message box at the top-left sidebar `Init
    chapter 05`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏的消息框中添加以下消息`Init chapter 05`。
- en: Press C*ommand* *+E**nter* on macOSX, or *Ctrl* *+* *Enter* on Windows, and
    click Yes.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在macOSX上按Command+Enter，或在Windows上按Ctrl+Enter，然后单击Yes。
- en: Well done. Now, we can start `chapter 05` with a new baseline of files.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好。现在，我们可以用新的文件基线开始`第05章`。
- en: What we are building
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们正在构建什么
- en: Now, let's talk a bit about the application we have been building since the
    beginning of this book.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们稍微谈谈自从本书开始以来我们一直在构建的应用程序。
- en: As we can see, we have already built a lot of things so far, but we still don't
    have a clear idea of what we are doing about the project. And this is the best
    way to learn and practice web application development.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，到目前为止我们已经构建了很多东西，但是我们仍然不清楚我们在项目中做了什么。这是学习和练习Web应用程序开发的最佳方式。
- en: Many times, when we are learning or doing something for the first time, we tend
    to pay close attention to the final project and, at this point, there is an anxiety
    to finish what we started to do and we cannot focus on the building process and
    details.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，当我们第一次学习或做某事时，我们倾向于密切关注最终项目，在这一点上，我们急于完成我们开始做的事情，无法专注于建设过程和细节。
- en: Here, we already have *40%* of our project ready. Then, we can reveal more details
    about what we are doing.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经有了*40%*的项目准备就绪。然后，我们可以透露更多关于我们正在做什么的细节。
- en: Remember, until now, we have prepared a highly scalable development environment
    using Docker, installed some very important tools that will help us in our development,
    and learned how to start a solid Laravel application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，到目前为止，我们已经使用Docker准备了一个高度可扩展的开发环境，在我们的开发中安装了一些非常重要的工具，并学会了如何启动一个稳固的Laravel应用程序。
- en: 'The application will be called Custom Bike Garage, a kind of Instagram/Twitter
    for lovers of custom motorcycle culture. At the end of the development, we will
    have a web application very similar to the following wire frames screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用将被称为Custom Bike Garage，这是一种针对自定义摩托车文化爱好者的Instagram/Twitter。在开发结束时，我们将拥有一个与以下线框截图非常相似的Web应用程序：
- en: '![](assets/afbdce08-53d1-432e-bdcf-a0edffdf6e20.png)Home page'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/afbdce08-53d1-432e-bdcf-a0edffdf6e20.png)主页'
- en: 'The previous screenshot is just a basic application home page, with navigation
    links and a call-to-action button:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图只是一个基本的应用程序主页，带有导航链接和一个呼吁行动的按钮：
- en: '![](assets/53677fd1-0c17-4b1e-b9b4-538c74d82a13.png)Bike list page'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/53677fd1-0c17-4b1e-b9b4-538c74d82a13.png)摩托车列表页面'
- en: The application's summary
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用摘要
- en: 'As we can see in the previous screenshot, our application has:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的截图中所看到的，我们的应用程序有：
- en: A home page, which we will call `home` page
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个主页，我们将称之为`主页`
- en: A page of motorcycles, which we will call a `bike-list` page
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个摩托车页面，我们将称之为`摩托车列表`页面
- en: A bike detail page, which we will call a `bike-details` page
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个摩托车详细页面，我们将称之为`摩托车详情`页面
- en: A builders page, which we will call a `builders-list` page
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个构建者页面，我们将称之为`构建者列表`页面
- en: A builder detail page, which we will call a `builder-details` page
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个构建者详细页面，我们将称之为`构建者详情`页面
- en: A register page, which we will call a `register-page` page
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个注册页面，我们将称之为`注册页面`
- en: A login page, which we will call a `login-page` page
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个登录页面，我们将称之为`登录页面`
- en: A rating page, where users can vote on bikes
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个评分页面，用户可以在摩托车上投票
- en: Imagine that we are building a custom bike application for an exhibition conference.
    Each conference has a name and customer level.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 想象我们正在为一场展览会构建一个自定义摩托车应用程序。每个会议都有一个名称和客户级别。
- en: Users can register, vote on the best bike, and insert their own bike. The conference
    shows some customized bikes by renowned bike builders, with many custom items
    for each bike.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以注册，对最好的摩托车进行投票，并插入他们自己的摩托车。会议展示了一些知名摩托车制造商定制的摩托车，每辆摩托车都有许多自定义项目。
- en: 'So, what we still need to do in order to complete the backend of the application
    is  as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了完成应用程序的后端，我们还需要做以下工作：
- en: Create models for `Builder`, `Item`, `Garage`, and `Rating`
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`Builder`、`Item`、`Garage`和`Rating`创建模型
- en: Create migration files for `Builder`, `Item`, `Garage`, and `Rating`
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`Builder`、`Item`、`Garage`和`Rating`创建迁移文件
- en: Seed the database
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 种子数据库
- en: Create controllers for `Bike`, `Builder`, `Item`, `Garage`, and `Rating`
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`Bike`、`Builder`、`Item`、`Garage`和`Rating`创建控制器
- en: Apply the relationship between models
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用模型之间的关系
- en: Use resources to represent relationships
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用资源表示关系
- en: Create a token-based authentication
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基于令牌的身份验证
- en: Creating models and migrations files
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型和迁移文件
- en: 'Let''s starting creating the builders model and migration file using the `-m` flag.
    Like we did previously in this book, we can create both files at the same time:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用`-m`标志创建`builders`模型和迁移文件。就像我们在本书中之前做的那样，我们可以同时创建这两个文件：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，键入以下命令：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Still on your Terminal window, type the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口上，键入以下命令：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Still on your Terminal window, type the following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口上，键入以下命令：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Still on your Terminal window, type the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口上，键入以下命令：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Steps 1* to *step 4* will produce the following new files in our application:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*到*步骤4*将在我们的应用程序中产生以下新文件：'
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note the `XXXX_XX_XX_XXXXXX` before the migration file name. It is a timestamp
    of when the file was created.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意迁移文件名之前的`XXXX_XX_XX_XXXXXX`。这是文件创建时的时间戳。
- en: 'At this point, we can see the previous six models on the VS Code left-hand
    side panel, as in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以在VS Code左侧面板上看到之前的六个模型，就像以下截图中一样：
- en: '![](assets/b155ca8e-c58d-4f7e-9d82-2d57457714ad.png)Left-hand side panel'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b155ca8e-c58d-4f7e-9d82-2d57457714ad.png)左侧面板'
- en: Note that we have already created the `Bike` model in [Chapter 4](81c1b0fb-3b75-44fa-8f1b-356c9e85c1ce.xhtml), *Building
    the Baseline Application, *and, by default, Laravel's created the `User` model
    for us.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经在[第4章](81c1b0fb-3b75-44fa-8f1b-356c9e85c1ce.xhtml)中创建了`Bike`模型，并且默认情况下，Laravel为我们创建了`User`模型。
- en: Now, as we did previously, let's commit the new files created and click the source
    control icon on the left-hand panel of VS Code.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，就像我们之前做的那样，让我们提交新创建的文件，并单击VS Code左侧面板上的`源控制图标`。
- en: Type the following text inside the message input field: `Added Models and Migration
    files`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在消息输入字段中键入以下文本：`添加模型和迁移文件`。
- en: Press *C**ommand* *+* *Enter* on macOSX, or *C**trl* *+* *Enter* on Windows,
    and click the Yes button.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在macOSX上按*C**ommand* *+* *Enter*，或在Windows上按*C**trl* *+* *Enter*，然后单击*Yes*按钮。
- en: Adding content to migration files
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向迁移文件添加内容
- en: 'Now, let''s create the content of our migration files. Remember that migration
    files are the simplest and fastest way to create our database schemes using Laravel:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们迁移文件的内容。请记住，迁移文件是使用Laravel创建数据库方案的最简单和最快的方法：
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_builders_table.php` and
    replace the content with the following code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/database/migrations/XXXX_XX_XX_XXXXXX_create_builders_table.php`并用以下代码替换内容：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_items_table.php` and
    replace the content with the following code:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/database/migrations/XXXX_XX_XX_XXXXXX_create_items_table.php`并用以下代码替换内容：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice the `$table->unsignedInteger('bike_id')` foreign key for the Bike table.
    Later in this chapter, we go deep into model relationships/associations, but for
    now let's focus on migration files.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意Bike表的`$table->unsignedInteger('bike_id')`外键。在本章的后面，我们将深入研究模型关系/关联，但现在让我们专注于迁移文件。
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_garages_table.php` and
    replace the content with the following code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/database/migrations/XXXX_XX_XX_XXXXXX_create_garages_table.php`并用以下代码替换内容：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we need another table, just to set up the relationship between `Bike` and `Garage`.
    We are using the `artisan` command to create a migration file, since, for this
    kind of relationship, we don't need a model. This table is also known as a pivot table.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要另一个表，只是为了建立`Bike`和`Garage`之间的关系。我们使用`artisan`命令创建迁移文件，因为对于这种关系，我们不需要模型。这个表也被称为`pivot`表。
- en: 'Open your Terminal window and type the following command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_bike_garage_table.php` and
    replace the content with the following code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/database/migrations/XXXX_XX_XX_XXXXXX_create_bike_garage_table.php`并用以下代码替换内容：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Remember that the bike migration file was created in the previous chapter.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，自行车迁移文件是在上一章中创建的。
- en: 'Open your Terminal window and type the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_ratings_table.php` and
    replace the content with the following code:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/database/migrations/XXXX_XX_XX_XXXXXX_create_ratings_table.php`并用以下代码替换内容：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Well, its time to understand a bit more about what we did in this session, so
    let's go to the next session and understand how `Eloquent` works.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在是时候更深入地了解我们在本节中所做的事情了，所以让我们进入下一节，了解`Eloquent`是如何工作的。
- en: Eloquent ORM relationship
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eloquent ORM关系
- en: Eloquent is the ORM that is behind Laravel's database queries. It's an abstraction
    of active record implementation.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent是Laravel数据库查询背后的ORM。它是活动记录实现的抽象。
- en: As we saw previously, each application model has a respective table in our database.
    With this, we can query, insert, delete, and update records.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前看到的，每个应用程序模型在我们的数据库中都有一个相应的表。有了这个，我们可以查询、插入、删除和更新记录。
- en: The Eloquent ORM uses the snake case plural name of the class, which will be
    used as the table name, unless another name is explicitly specified. For example,
    our `Bike` model class has its own table bikes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent ORM使用类的蛇形复数名称作为表名，除非另一个名称被明确指定。例如，我们的`Bike`模型类有自己的表`bikes`。
- en: 'The application models have the following tables:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序模型有以下表：
- en: '| Application Model | Database Table |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 应用程序模型 | 数据库表 |'
- en: '| --- | --- |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Bike.php` | bikes |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `Bike.php` | bikes |'
- en: '| `Builder.php` | builders |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `Builder.php` | builders |'
- en: '| `Garage.php` | garages |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `Garage.php` | garages |'
- en: '| `Item.php` | items |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `Item.php` | items |'
- en: '| `Rating.php` | ratings |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `Rating.php` | ratings |'
- en: '| `Builder.php` | builders |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `Builder.php` | builders |'
- en: '| `User.php` | users |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `User.php` | users |'
- en: Note that we keep the table convention name, but it is possible to use a custom
    table name. For the scope of this book, we will keep the table names  generated
    by Laravel.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们保留表约定名称，但也可以使用自定义表名。在本书的范围内，我们将保留Laravel生成的表名。
- en: You can read more about table names and model conventions in the official Laravel
    documentation at [https://laravel.com/docs/5.6/eloquent#defining-models](https://laravel.com/docs/5.6/eloquent#defining-models).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方Laravel文档的[https://laravel.com/docs/5.6/eloquent#defining-models](https://laravel.com/docs/5.6/eloquent#defining-models)上阅读更多关于表名和模型约定的信息。
- en: 'The Eloquent ORM supports the following relationships between models:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent ORM支持模型之间的以下关系：
- en: One-to-one
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一对一
- en: One-to-many
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一对多
- en: Belongs to (inverse = one-to-many)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属于（反向=一对多）
- en: Many-to-many
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多对多
- en: Has-many
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多个
- en: Polymorphic relations
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态关系
- en: Many-to-many polymorphic relations
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多对多多态关系
- en: We will see the first four relationships in detail; however, we can't cover
    all relationships in detail in our book. It is pretty simple to understand the
    relationships, also known as associations, in many frameworks as well.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍前四种关系；然而，我们无法在我们的书中详细介绍所有关系。在许多框架中，理解关系（也称为关联）是非常简单的。
- en: You can read more about relationships at [https://laravel.com/docs/5.6/eloquent-relationships](https://laravel.com/docs/5.6/eloquent-relationships).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://laravel.com/docs/5.6/eloquent-relationships](https://laravel.com/docs/5.6/eloquent-relationships)上阅读更多关于关系的信息。
- en: One-to-one relationship
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一对一关系
- en: Let's set up the one-to-one relationship between `Builder` and `Bike`. This
    means that a `Bike` will have just one `Builder`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们建立`Builder`和`Bike`之间的一对一关系。这意味着`Bike`将只有一个`Builder`。
- en: 'Open `project/app/Builder.php` and replace the content with the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Builder.php`并用以下代码替换内容：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that we added the Swagger documentation definition as we did in the previous
    chapter. The `bike()` function creates a one-to-one relationship. You can use
    any name on the relationship function, but we strongly recommend that you use
    the same model name, in our case, `Bike` model class.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们像在上一章中那样添加了Swagger文档定义。`bike()`函数创建了一对一关系。您可以在关系函数上使用任何名称，但我们强烈建议您使用相同的模型名称，在我们的案例中是`Bike`模型类。
- en: 'Now, let''s add the respective relationship to the `Bike` model. Open `project/app/Bike.php` and
    add the following code immediately after the protected fillable function:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为`Bike`模型添加相应的关系。打开`project/app/Bike.php`并在`protected fillable`函数之后立即添加以下代码：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice that `belongsTo` relation is a one-to-many inverse relationship.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`belongsTo`关系是一对多的反向关系。
- en: 'Open `project/app/Item.php` and replace the content with the following code:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Item.php`并用以下代码替换内容：
- en: '[PRE19]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: One-to-many relationship
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一对多关系
- en: The one-to-many relationship will be applied between `Bike` and `Items`, which
    means that one `bike` will have many custom `items`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一对多关系将应用于`Bike`和`Items`之间，这意味着一个`bike`将有许多自定义`items`。
- en: Still in the `project/app/Bike.app` file, let's add the one-to-many relationship
    between the `Item` and `Bike` models.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在`project/app/Bike.app`文件中，让我们在`Item`和`Bike`模型之间添加一对多关系。
- en: 'Add the following code immediately after the `builder()` function:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在`builder()`函数之后立即添加以下代码：
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Many-to-many relationship
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多对多关系
- en: For the many-to-many relationship, we will have many Bikes in many Garages by
    using the pivot table.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多对多关系，我们将通过枢轴表在许多Garages中有许多Bikes。
- en: In the many-to-many relationship, we need to respect some naming rules.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在多对多关系中，我们需要遵守一些命名规则。
- en: The name of the pivot table should consist of singular names of both tables,
    separated by underscore symbols, and these names should be arranged in alphabetical
    order.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 枢轴表的名称应由两个表的单数名称组成，用下划线符号分隔，并且这些名称应按字母顺序排列。
- en: By default, there should only be two pivot table fields and the foreign key
    to each of the tables, in our case, `bike_id` and `garage_id`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，应该只有两个枢轴表字段和每个表的外键，在我们的情况下是`bike_id`和`garage_id`。
- en: Still in the `project/app/Bike.app` file, let's add the many-to-many relationship
    between the Bike and Garage models.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在`project/app/Bike.app`文件中，让我们在`Bike`和`Garage`模型之间添加多对多关系。
- en: 'Add the following code immediately after the `items()` function:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在`items()`函数之后立即添加以下代码：
- en: '[PRE21]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Notice that in the previous code, we are creating the relationship of Bike and Garage in
    a third table, called the pivot table, which will hold the information relating
    to the relationship, as we explained previously.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的代码中，我们正在创建`Bike`和`Garage`之间的关系，这将在第三个表中，称为枢轴表中保存与关系相关的信息，正如我们之前解释的那样。
- en: 'Now, it is time to add the relationship between the user and the ratings with
    bikes. Add the following code immediately after the `garages()` function:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在用户和评分与自行车之间添加关系了。在`garages()`函数之后立即添加以下代码：
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'At this point, we will have the following relationships in the `Bike` model:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将在`Bike`模型中有以下关系：
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, let''s add the relationship in the `project/app/Garage.app` model. Replace
    its content with the following code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`project/app/Garage.app`模型中添加关系。用以下代码替换其内容：
- en: '[PRE24]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that we are using `belongsToMany()` and not `hasMany()`. `hasMany()` is
    used for one-to-many relationships.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用的是`belongsToMany()`而不是`hasMany()`。`hasMany()`用于一对多关系。
- en: 'Now, let''s add the relationship in the `project/app/User.app` model. Replace
    its content with the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`project/app/User.app`模型中添加关系。用以下代码替换其内容：
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the `project/app/Rating.app` model, and replace its content with the following
    code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`project/app/Rating.app`模型，并用以下代码替换其内容：
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now that we have our migration files and application models ready, we can create
    the seeds file to feed our database. But before we go further, let''s migrate
    our tables to our database. Inside your Terminal window, type the following command:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好迁移文件和应用程序模型，我们可以创建种子文件来填充我们的数据库。但在继续之前，让我们将表迁移到数据库中。在您的终端窗口中，输入以下命令：
- en: '[PRE27]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Well done! We have successfully migrated all our tables, and now our database
    is good to go.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们已成功迁移了所有表，现在我们的数据库已经准备就绪。
- en: 'If you have some issues when trying to use the `migrate` command, use the `refresh`parameter:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在尝试使用`migrate`命令时遇到问题，请使用`refresh`参数：
- en: '[PRE28]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Seeding our database
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填充我们的数据库
- en: Remember that, in the last chapter, we already created the Bike seed, so now
    we just need to create another three seeds, which are going to be `Builders`,
    `Items`, and `Garage`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在上一章中，我们已经创建了Bike种子，所以现在我们只需要创建另外三个种子，它们将是`Builders`，`Items`和`Garage`。
- en: 'Open your Terminal window and type the following command:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，输入以下命令：
- en: '[PRE29]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following code to the `app/database/seeds/BuildersTableSeeder.php`public
    function `run()`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`app/database/seeds/BuildersTableSeeder.php`的`run()`公共函数中：
- en: '[PRE30]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Still in your Terminal window, type the following command:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口中，输入以下命令：
- en: '[PRE31]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following code to `app/database/seeds/ItemsTableSeeder.php`:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`app/database/seeds/ItemsTableSeeder.php`中：
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In your Terminal window, type the following command:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端窗口中，输入以下命令：
- en: '[PRE33]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the following code to the `app/database/seeds/GaragesTableSeeder.php`, `run()` 
    public function:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`app/database/seeds/GaragesTableSeeder.php`的`run()`公共函数中：
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following code to the `app/database/seeds/UsersTableSeeder.php` folder''s
    public function, `run()`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`app/database/seeds/UsersTableSeeder.php`文件夹的公共函数`run()`中：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that we are using the same function as we did in the previous chapter to
    load the sample data. Now, it's time to create the JSON files.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用与上一章中相同的函数来加载示例数据。现在，是时候创建JSON文件了。
- en: 'Inside `project/database/data-sample/`, create a new file called `builders.json` and
    add the following code:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`project/database/data-sample/`中，创建一个名为`builders.json`的新文件，并添加以下代码：
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Inside `project/database/data-sample/`, create a new file called `items.json`and
    add the following code:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`project/database/data-sample/`中，创建一个名为`items.json`的新文件，并添加以下代码：
- en: '[PRE37]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, we need to create some more seeds so that we have all the database boilerplate
    for our app. Still in the Terminal window, type the following command:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一些更多的种子，这样我们的应用程序就有了所有数据库样板。在终端窗口中，输入以下命令：
- en: '[PRE38]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following code to the `app/database/seeds/BikesGaragesTableSeeder.php` public
    function, `run()`:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`app/database/seeds/BikesGaragesTableSeeder.php`的`run()`公共函数中：
- en: '[PRE39]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Notice that in the previous code, we just inserted the records manually using
    the Eloquent `insert()` method instead to create a JSON file for this task.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，在上面的代码中，我们只是使用Eloquent的`insert()`方法手动插入记录，而不是为此任务创建JSON文件。
- en: 'Now, open `project/database/data-sample/bikes.json` and replace the content
    with the following code:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`project/database/data-sample/bikes.json`，并用以下代码替换内容：
- en: '[PRE40]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the previous code, we added the `builder_id` and `user_id` to each bike record
    to make the association between a bike and its builder and the user and their
    bike. Remember that we created `project/database/data-sample/bikes.json` in the previous
    chapter.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们为每辆自行车记录添加了`builder_id`和`user_id`，以建立自行车与其构建者以及用户与其自行车之间的关联。请记住，我们在上一章中创建了`project/database/data-sample/bikes.json`。
- en: Note that we assigned bike `4` and `5` to `user_id` as `4` and `5`. Don't worry
    about this now, as later on in the book, you will understand why we did this now.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将自行车`4`和`5`分配给`user_id`为`4`和`5`。现在不要担心这个问题，因为在本书的后面，您将明白我们为什么现在这样做。
- en: Open `project/database/seeds/databaseSeeder.php` and uncomment the user's seeds.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/database/seeds/databaseSeeder.php`，取消注释用户的种子。
- en: 'Let''s use the `seed` command to fill our database. Type the following command
    in your Terminal window:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`seed`命令来填充我们的数据库。在您的终端窗口中输入以下命令：
- en: '[PRE41]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'After using the previous command, we will have the following output:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上一个命令后，我们将得到以下输出：
- en: '[PRE42]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This means that everything is correct for now.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着目前一切都是正确的。
- en: The `migrate:fresh` command will drop all tables from the database and then
    execute the `migrate` command with a fresh install.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`migrate:fresh`命令将从数据库中删除所有表，然后执行`migrate`命令进行全新安装。'
- en: Querying the database using Tinker
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Tinker查询数据库
- en: '**Tinker** is a command-line application that allows you to interact with your
    Laravel application, including the Eloquent ORM, jobs, events, and more. To get
    access to the Tinker console, run the `artisan tinker` command that we previously
    used to check the database connection in [Chapter 01](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml),
    *Understanding the Core Concepts of Laravel 5*.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**Tinker**是一个命令行应用程序，允许您与您的Laravel应用程序进行交互，包括Eloquent ORM、作业、事件等。要访问Tinker控制台，请运行`artisan
    tinker`命令，我们之前用来检查数据库连接的[第01章](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml)中的内容，*理解Laravel
    5的核心概念*。'
- en: 'Open your Terminal window and type the following command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，输入以下命令：
- en: '[PRE43]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Since we have not created any controllers or routes for our application yet,
    it's impossible to check our data using the browser to access the API endpoints.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有为我们的应用程序创建任何控制器或路由，所以无法使用浏览器访问API端点来检查我们的数据。
- en: However, using Tinker, it is possible to interact with our database and check
    whether everything went well with our migration files and database seed.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用Tinker，可以与我们的数据库进行交互，并检查我们的迁移文件和数据库种子是否一切顺利。
- en: Let's go to the builders table and make sure that everything is set up correctly.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们去`builders`表，确保一切都设置正确。
- en: 'Still on your Terminal and inside the Tinker console, type the following command:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端和Tinker控制台中，输入以下命令：
- en: '[PRE44]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The output on your Terminal will be a builders list that''s very similar to
    the following JSON structure:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您的终端上的输出将是一个非常类似于以下JSON结构的构建者列表：
- en: '[PRE45]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note that you omit all the records on the builders list, so do not become repetitive
    in your code blocks.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以省略构建者列表上的所有记录，因此在您的代码块中不要重复。
- en: 'Still on your Terminal and inside the Tinker console, type the following command:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端和Tinker控制台中，输入以下命令：
- en: '[PRE46]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Here, we have just one record with the id `3` inside the `find()` function,
    as we can see in the following output:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只有一个记录，id为`3`，在`find()`函数中，正如我们在以下输出中所看到的：
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now, let's see how we can get the same result from the previous command, but
    this time using the Where clause and the `Builder` model instance.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何从上一个命令中获得相同的结果，但这次使用`Where`子句和`Builder`模型实例。
- en: 'Still on your Terminal and inside the Tinker console, type the following command:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端和Tinker控制台中，输入以下命令：
- en: '[PRE48]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We will have the following output as a query result:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出作为查询结果：
- en: '[PRE49]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: But wait, you must be asking yourself, where is the bike data? Remember that
    we attribute a bike to a builder on our seed. Let's introduce the association
    query.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请等一下，您一定在问自己，自行车数据在哪里？请记住，我们在种子中将自行车归属于构建者。让我们介绍关联查询。
- en: 'So, imagine that we want to query all customized bikes. Still on your Terminal
    and inside the Tinker console, type the following command:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，假设我们想查询所有定制自行车。在您的终端和Tinker控制台中，输入以下命令：
- en: '[PRE50]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Note that the previous command will return the builder record with `id: 3` using
    the` find()` method and the `::with()` method association. This time, we can see
    the bike''s information, as shown in the following output:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上一个命令将使用`find()`方法和`::with()`方法关联返回id为`3`的构建者记录。这次，我们可以看到自行车的信息，如以下输出所示：
- en: '[PRE51]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Now, let's see how we can submit a query to get all model associations, this
    time using the Builder model instance.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何提交查询以获取所有模型关联，这次使用Builder模型实例。
- en: 'Still on your Terminal and inside the Tinker console, type the following command:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端和Tinker控制台中，输入以下命令：
- en: '[PRE52]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Note that we are using an array inside the `::with()` method to get items and builderassociations,
    as we can see in the following output:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在`::with()`方法中使用了一个数组来获取`items`和`builderassociations`，正如我们在以下输出中所看到的：
- en: '[PRE53]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Creating controllers and routes
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器和路由
- en: We are almost there, but we have a few steps left so that we can finish our
    API. Now, is time to create the API controller and API routes.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经快完成了，但还有一些步骤要走，这样我们才能完成我们的API。现在是时候创建API控制器和API路由了。
- en: With the newest version (5.6) from Laravel we have a new command available to
    do this task. This is the `--api` flag. Let's see how it works in practice.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在最新版本（5.6）的Laravel中，我们有一个新的可用于执行此任务的命令。这就是`--api`标志。让我们看看它在实践中是如何工作的。
- en: Creating and updating the controller function
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和更新控制器函数
- en: 'Open your Terminal window and type the following command:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端窗口，输入以下命令：
- en: '[PRE54]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Note that the `--api` flag creates four methods for us inside the `BuilderController`
    class:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`--api`标志在`BuilderController`类中为我们创建了四个方法：
- en: '`index()` = GET'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index()` = GET'
- en: '`store()` = POST'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`store()` = POST'
- en: '`show($id)` = GET'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show($id)` = GET'
- en: '`update(Request $request, $id)` = PUT'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update(Request $request, $id)` = PUT'
- en: '`destroy($id)` = POST'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`destroy($id)` = POST'
- en: Open `project/app/Http/Controllers/API/BuilderController.php` and add the `App\Builder` code
    right after the Controller import.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Http/Controllers/API/BuilderController.php`，并在控制器导入后添加`App\Builder`代码。
- en: 'Now, let''s add the content for each method. Open `project/app/Http/Controllers/API/BuilderController.php` and
    replace the content with the following code:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为每个方法添加内容。打开`project/app/Http/Controllers/API/BuilderController.php`，并用以下代码替换内容：
- en: '[PRE55]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, let''s add the code for the `store/create` method. Add the following code
    right after the `index()` function:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为`store/create`方法添加代码。在`index()`函数后添加以下代码：
- en: '[PRE56]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now, let''s add the code for the get by `id` method. Add the following code
    right after the `store()` function:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为按`id`获取方法添加代码。在`store()`函数后添加以下代码：
- en: '[PRE57]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Let''s add the code for the update method. Add the following code right after
    the `show()` function:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为更新方法添加代码。在`show()`函数后添加以下代码：
- en: '[PRE58]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now, let''s add the code for the delete method. Add the following code right
    after the `update()` function:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为删除方法添加代码。在`update()`函数后添加以下代码：
- en: '[PRE59]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note that in the `index()` function, we are using the `all()` method to list
    all Bikes and using the associated `::with()` method just on the `show($id)` function.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`index()`函数中，我们使用`all()`方法列出所有自行车，并且只在`show($id)`函数中使用关联的`::with()`方法。
- en: 'We have already added the Swagger definitions to the controller, but don''t
    worry: later in this chapter, we will discuss this in detail.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将Swagger定义添加到了控制器中，但不要担心：稍后在本章中，我们将详细讨论这个问题。
- en: The model association query to list bikes and show bike details, is a simple
    API decision. As you can see, we are returning the bike list without all associations
    and just returning the associations on the get bike by id. It doesn't make sense
    to return every association on every request, so on the Bike list, we just show
    the bike's details and when we click on details, we will see the complete information
    with all model association. So don't worry about this now, as later on in the
    [chapter 10,](59c19982-99f5-47d5-a4ed-82763ef9288d.xhtml) *Frontend views with
    Bootstrap 4 and NgBootstrap*, we will see how to do this.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 模型关联查询列出自行车并显示自行车详细信息，是一个简单的API决定。正如你所看到的，我们在返回自行车列表时没有返回所有关联，只在按id获取自行车时返回关联。在每个请求中返回每个关联都没有意义，所以在自行车列表中，我们只显示自行车的详细信息，当我们点击详细信息时，我们将看到所有模型关联的完整信息。所以现在不要担心这个，因为在[第10章](59c19982-99f5-47d5-a4ed-82763ef9288d.xhtml)
    *使用Bootstrap 4和NgBootstrap创建前端视图*中，我们将看到如何做到这一点。
- en: 'Open your Terminal window and type the following command:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端窗口，输入以下命令：
- en: '[PRE60]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Open `project/app/Http/Controllers/API/ItemController.php` and add the following
    code right after the Controller import: `use App\Item;`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`project/app/Http/Controllers/API/ItemController.php`，并在控制器导入后添加以下代码：`use
    App\Item;`。
- en: 'Now, let''s add the content for each method. Open `project/app/Http/Controllers/API/ItemController.php` and
    add the following code for each one:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为每个方法添加内容。打开`project/app/Http/Controllers/API/ItemController.php`，并为每个方法添加以下代码：
- en: '[PRE61]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Open your Terminal window and type the following command:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端窗口，输入以下命令：
- en: '[PRE62]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Open `project/app/Http/Controllers/API/BikeController.php` and add the following
    code right after the Controller import:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`project/app/Http/Controllers/API/BikeController.php`，并在控制器导入后添加以下代码：
- en: '[PRE63]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now, let''s add the content for each method. Open `project/app/Http/Controllers/API/BikeController.php` and
    add the following code for each one:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为每个方法添加内容。打开`project/app/Http/Controllers/API/BikeController.php`，并为每个方法添加以下代码：
- en: '[PRE64]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Open your Terminal window and type the following command:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的终端窗口，输入以下命令：
- en: '[PRE65]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Open `project/app/Http/Controllers/API/RatingController.php` and add the following
    code right after the Controller import:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Http/Controllers/API/RatingController.php`，并在控制器导入后添加以下代码：
- en: '[PRE66]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Now, let’s add the content for each method. Open `project/app/Http/Controllers/API/RatingController.php` and
    add the following code for each one:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为每个方法添加内容。打开`project/app/Http/Controllers/API/RatingController.php`，并为每个方法添加以下代码：
- en: '[PRE67]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: You should be finding some strange things in the rating controller code. Among
    them, we have some new error codes, `422`, `405`, and a security tag in the Swagger
    documentation, plus a new import called **r****ating resource**.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在评分控制器代码中发现一些奇怪的东西。其中，我们有一些新的错误代码，`422`，`405`，以及Swagger文档中的一个安全标签，还有一个叫做**rating
    resource**的新导入。
- en: This may sound strange, but do not panic; we'll look at this in detail in the
    following sections.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来奇怪，但不要惊慌；我们将在接下来的章节中详细讨论这个问题。
- en: Creating the API routes
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建API路由
- en: Now, it is time to create some API routes and check what we have built so far.
    We are using the new feature of `apiResource`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建一些API路由并检查我们到目前为止构建的内容了。我们正在使用`apiResource`的新功能。
- en: 'Open `project/routes/api.php` and add the following code:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`project/routes/api.php`，并添加以下代码：
- en: '[PRE68]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: At this moment, we already have the necessary code for our API, so we need to
    make some small adjustments and explain some more things.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经为我们的API添加了必要的代码，所以我们需要做一些小的调整并解释更多的东西。
- en: Generating Swagger UI documentation
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成Swagger UI文档
- en: As you can see from the previous examples, we have already added the documentation
    of our API through the Swagger definitions to our recently created controllers.
    This is the same code we used in the previous example. Let's generate the documentation
    on the Swagger UI.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 从先前的示例中可以看出，我们已经通过Swagger定义向我们最近创建的控制器添加了API的文档。这与我们在先前的示例中使用的代码相同。让我们在Swagger
    UI上生成文档。
- en: 'Open your Terminal window and type the following command:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，输入以下命令：
- en: '[PRE69]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: As you can note on the previous Swagger definitions on error messages, we have
    some new HTTP errors, such as `422`.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 根据先前的Swagger定义中的错误消息，您可以注意到我们有一些新的HTTP错误，比如`422`。
- en: This means that if the user tries to input some data with one or more missing
    required fields, our API must return an HTTP error code. This will be `422`. So,
    let's see how we can implement some validation and verify some common API HTTP
    codes.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果用户尝试输入一些数据，其中一个或多个必填字段缺失，我们的API必须返回一个HTTP错误代码。这将是`422`。因此，让我们看看如何实现一些验证并验证一些常见的API
    HTTP代码。
- en: Summary
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have come to the end of part one of our chapter, where we created a robust
    and scalable RESTful foundation for our API. We learned how to create controllers,
    routes, and how to deal with Eloquent relationships.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了本章的第一部分，我们为API创建了一个强大且可扩展的RESTful基础。我们学会了如何创建控制器、路由，以及如何处理Eloquent关系。
- en: We still have a lot of work ahead, as we need to deal with error messages, resources,
    and token-based authentication. In the next chapter, we will see how to accomplish
    this.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有很多工作要做，因为我们需要处理错误消息、资源和基于令牌的身份验证。在下一章中，我们将看到如何完成这些工作。
