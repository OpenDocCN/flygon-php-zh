- en: Chapter 1. Ajax Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Ajax库
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Designing simple navigation using jQuery
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery设计简单导航
- en: Creating tab navigation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建选项卡导航
- en: Designing components using Ext JS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ext JS设计组件
- en: Event handling in MochiKit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MochiKit中处理事件
- en: Building tab navigation using Dojo
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Dojo构建选项卡导航
- en: Building a chart application using YUI library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用YUI库构建图表应用程序
- en: Loading dynamic content using jQuery slider
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery滑块加载动态内容
- en: Creating an Ajax shopping cart using MooTools
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MooTools创建Ajax购物车
- en: Building an Ajax login form using prototype.js
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用prototype.js构建Ajax登录表单
- en: In this chapter, we will learn how to work with the most famous JavaScript libraries
    and frameworks with capabilities of Ajax functionality. These libraries were selected
    by our subjective opinion and we are not trying to say which library/framework
    is better or worse. Each of them has its advantages and disadvantages.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用最著名的JavaScript库和框架的Ajax功能。这些库是根据我们的主观意见选择的，我们并不试图说哪个库/框架更好或更差。它们每个都有其优点和缺点。
- en: Designing simple navigation using jQuery
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery设计简单导航
- en: '**jQuery** is a development framework that allows us to use JavaScript in our
    HTML document. Now we will build a simple navigation using the basic jQuery features.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery**是一个开发框架，允许我们在HTML文档中使用JavaScript。现在我们将使用基本的jQuery功能构建一个简单的导航。'
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Before we can begin, we need to include the latest jQuery library. We can download
    it from the download section at [www.jquery.com](http://www.jquery.com). We will
    save it in our JavaScript folder named `js`, in the root of our HTML document,
    for example, `cookbook`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要包含最新的jQuery库。我们可以从[www.jquery.com](http://www.jquery.com)的下载部分下载它。我们将把它保存在名为`js`的JavaScript文件夹中，放在我们HTML文档的根目录中，例如`cookbook`。
- en: All libraries mentioned in this book are also available in an online cache such
    as [http://code.google.com/apis/libraries/](http://code.google.com/apis/libraries).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中提到的所有库也可以在在线缓存中找到，例如[http://code.google.com/apis/libraries/](http://code.google.com/apis/libraries)。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can download the example code fles for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the fles e-mailed directly to you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.PacktPub.com](http://www.PacktPub.com)购买的所有Packt图书的帐户中下载示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)并注册，以便直接通过电子邮件接收文件。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Now, we can start coding our `task1.html` page. We'll place it in the `cookbook`
    folder.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始编写我们的`task1.html`页面。我们将把它放在`cookbook`文件夹中。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now, let's explain what we have done in the preceding code snippet. The main
    idea of our script is to find each hyperlink`<a>` in the document, prevent its
    default functionality, and display the hyperlink content in our `placeHolder`.
    From the beginning, we started with `doctype` and the main HTML layout. The body
    of the page contains a `navigation` and a `placeholder` element for the dynamic
    content.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们解释一下在前面的代码片段中做了什么。我们脚本的主要思想是在文档中找到每个超链接`<a>`，阻止其默认功能，并在我们的`placeHolder`中显示超链接内容。从一开始，我们从`doctype`和主HTML布局开始。页面的主体包含用于动态内容的`navigation`和`placeholder`元素。
- en: 'The most important part for jQuery functionality is to include our jQuery library.
    Let''s place it before the closing`<body>` tag. This will allow the HTML of a
    page to load first:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery功能最重要的部分是包含我们的jQuery库。让我们将它放在关闭`<body>`标签之前。这将允许页面的HTML首先加载：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After loading our HTML page and when the document is ready, we can define our
    JavaScripts scripts in the `$(document).ready()` function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载我们的HTML页面并且文档准备就绪后，我们可以在`$(document).ready()`函数中定义我们的JavaScript脚本：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This can be also shortened to `$():`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以缩短为`$():`
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The dollar sign `$()` represents an alias to the `jQuery()` factory function.
    Within this function we can use all the CSS selectors like ID, class, or exact
    tag names. For example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 美元符号`$()`代表对`jQuery()`工厂函数的别名。在这个函数中，我们可以使用所有的CSS选择器，如ID，类，或确切的标签名称。例如：
- en: '`$(''a''):` Selects all hyperlinks in our document'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$(''a''):`选择文档中的所有超链接'
- en: '`$(''#myID''):` Selects the element with this ID'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$(''#myID''):`选择具有此ID的元素'
- en: '`$(''.myID''):` Selects all elements with this class'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$(''.myID''):`选择具有此类的所有元素'
- en: 'In our case, we are selecting all hyperlinks in the `navigation <div>` and
    defining their own functionality with an event handler for `click` events:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们正在选择`navigation <div>`中的所有超链接，并为`click`事件定义它们自己的功能：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: And the last step of our example is creating the `title` VAR and HTML string,
    which goes to the `placeHolder:`
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们示例的最后一步是创建`title` VAR和HTML字符串，它将进入`placeHolder`：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There's more...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The preceding example was really simple. But there is a lot more that jQuery
    can offer to us. This includes special selectors, effects, DOM manipulation, or
    Ajax functionality.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子非常简单。但是jQuery还有很多功能可以提供给我们。这包括特殊选择器，效果，DOM操作或Ajax功能。
- en: 'We can specify our selectors more precisely. For example, we can specify which
    hyperlinks should be affected based on their `href` attributes:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更精确地指定我们的选择器。例如，我们可以根据它们的`href`属性指定应该受到影响的超链接：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'jQuery also covers all possible events (`click`, `blur, focus, dblclick`, and
    so on), visual effects (`hide`, `show, toggle, fadeIn, fadeOut`, and so on), or
    DOM manipulations (`appendTo`, `prependTo`, and so on). It has a full suite of
    AJAX capabilities, which are really easy to use, such as:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery还涵盖了所有可能的事件（`click`，`blur，focus，dblclick`等），视觉效果（`hide`，`show，toggle，fadeIn，fadeOut`等），或DOM操作（`appendTo`，`prependTo`等）。它具有完整的AJAX功能，非常容易使用，例如：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: But we will have a better look at more jQuery features in further tasks and
    chapters.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们将在进一步的任务和章节中更仔细地了解更多jQuery功能。
- en: See also
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 1](ch01.html "Chapter 1. Ajax Libraries"),*AJAX using jQuery*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。Ajax库"),*使用jQuery进行AJAX*'
- en: '[Chapter 2](ch02.html "Chapter 2. Basic Utilities"),*jQuery UI*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。基本实用工具"),*jQuery UI*'
- en: '[Chapter 3](ch03.html "Chapter 3. Useful Tools Using jQuery"),*Useful tools
    using jQuery Creating tab navigation*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。使用jQuery的有用工具"),*使用jQuery创建选项卡导航*'
- en: Creating tab navigation
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建选项卡导航
- en: '**jQuery UI** is built from the core interaction plugins of jQuery. As a high-level
    framework, it makes creating effects and animation easy for every developer. Now
    we will build a tab navigation using jQuery UI.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**jQuery UI**是由jQuery的核心交互插件构建的。作为一个高级框架，它使得对每个开发人员来说创建效果和动画变得容易。现在我们将使用jQuery
    UI构建一个选项卡导航。'
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: First of all, we need to include the jQuery library from [www.jquery.com](http://www.jquery.com),
    if we haven't done it in the preceding recipe. Then, we can download jQuery UI
    library from [www.jqueryui.com/download](http://www.jqueryui.com/download). On
    this page, we can download specific modules or the whole library. We can select
    the theme we like or create our own one with advanced theme settings. For now,
    we will select the whole library with the `ui-lightness` theme.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要从[www.jquery.com](http://www.jquery.com)包含jQuery库，如果我们在前面的步骤中还没有这样做。然后，我们可以从[www.jqueryui.com/download](http://www.jqueryui.com/download)下载jQuery
    UI库。在这个页面上，我们可以下载特定的模块或整个库。我们可以选择我们喜欢的主题，或者使用高级主题设置创建自己的主题。现在，我们将选择带有`ui-lightness`主题的整个库。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Now we are ready for coding. Let's start with the HTML part. This part will
    define a `navigation` element with three tabs and one accordion.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好编码了。让我们从HTML部分开始。这部分将定义一个带有三个选项卡和一个手风琴的`navigation`元素。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When the HTML is ready, we can continue with CSS and JavaScript CSS styles
    in the`<head>` tag, as shown in the following code:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当HTML准备好后，我们可以继续使用CSS和JavaScript CSS样式在`<head>`标签中，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will add JavaScript before closing the`<body>` tag:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<body>`标签关闭之前，我们将添加JavaScript：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Our result looks like the following:![How to do it...](graphics/3081_01_01.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的结果如下所示：![如何做...](graphics/3081_01_01.jpg)
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The downloaded jQuery UI contains the whole CSS content of the selected theme
    (jquery-ui.custom.css). All we need to do is to include it in the`<head>` tag:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下载的jQuery UI包含所选主题的整个CSS内容（jquery-ui.custom.css）。我们需要做的就是在`<head>`标签中包含它：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After CSS, we include jQuery and the jQuery UI library:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS之后，我们包括jQuery和jQuery UI库：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The JavaScript part is really simple:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript部分非常简单：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It is important to fit the required HTML structure. Each hyperlink is targeting
    the HTML content in selected`<div>` tags. To create a relation between them we
    will use `#id` in each hyperlink and the ID of the selected`<div>` tag (for example,
    `tabs-1)`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要适应所需的HTML结构。每个超链接都将目标HTML内容定位到选定的`<div>`标签中。为了在它们之间创建关系，我们将在每个超链接中使用`#id`，以及选定`<div>`标签的ID（例如，`tabs-1`）。
- en: There is an exception in the third tab, which loads the requested data via Ajax.
    In this case, we do not define any target area, as it will be created automatically.
    As you can see, using the Ajax in jQuery UI is really easy and comfortable.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三个选项卡中有一个例外，它通过Ajax加载所请求的数据。在这种情况下，我们不定义任何目标区域，因为它将自动创建。正如你所看到的，使用jQuery UI中的Ajax非常简单和舒适。
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'jQuery UI offers us a lot of options. We can use just a default functionality
    as was presented in the preceding code snippet or some additional functionality:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery UI为我们提供了很多选项。我们可以只使用前面代码片段中呈现的默认功能，也可以使用一些附加功能：
- en: '| Content via Ajax: | `$( "#navigation" ).tabs({ajaxOptions: {} })`; |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '|通过Ajax获取内容：| `$( "#navigation" ).tabs({ajaxOptions: {} })`; |'
- en: '| Open on mouseover: | `$( "#navigation" ).tabs({event: "mouseover"})`; |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '|鼠标悬停时打开：| `$( "#navigation" ).tabs({event: "mouseover"})`; |'
- en: '| Collapse content: | `$( "#navigation" ).tabs({collapsible: true})`; |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '|折叠内容：| `$( "#navigation" ).tabs({collapsible: true})`; |'
- en: '| Sortable: | `$( "navigation" ).tabs().find( ".ui-tabs-nav" ).sortable({ axis:
    "x" })`; |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|可排序的：| `$( "navigation" ).tabs().find( ".ui-tabs-nav" ).sortable({ axis: "x"
    })`; |'
- en: '| Cookie persistence: | `$( "#navigation" ).tabs({cookie: { expires: 1 }})`;
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '|Cookie持久性：| `$( "#navigation" ).tabs({cookie: { expires: 1 }})`; |'
- en: See also
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 3](ch03.html "Chapter 3. Useful Tools Using jQuery"),*Useful tools
    using jQuery Designing components*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。使用jQuery的有用工具"),*使用jQuery设计组件*'
- en: Designing components using Ext JS
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ext JS设计组件
- en: '**Ext JS** is a JavaScript framework that offers a lot of cross-browser user
    interface widgets. The core of Ext JS is build-on component design, which can
    be easily extended to meet our needs.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ext JS**是一个JavaScript框架，提供了许多跨浏览器用户界面小部件。Ext JS的核心是基于组件设计构建的，可以很容易地扩展以满足我们的需求。'
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We can download the latest version of Ext JS framework from [www.sencha.com](http://www.sencha.com),
    Ext JS section. Now, we are ready to build a classic Ext JS layout with two columns
    and one accordion. We can also prepare a simple HTML file `ajax/center-content.html`
    to test the Ajax functionality:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从[www.sencha.com](http://www.sencha.com)的Ext JS部分下载最新版本的Ext JS框架。现在，我们已经准备好使用两列和一个手风琴构建经典的Ext
    JS布局。我们还可以准备一个简单的HTML文件`ajax/center-content.html`来测试Ajax功能：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First of all, we will include mandatory files like CSS and Ext JS library files.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将包括像CSS和Ext JS库文件这样的强制性文件。
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will continue with the `onReady` function, which will run our script:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将继续使用`onReady`函数，它将运行我们的脚本：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Our layout with an accordion navigation is ready:![How to do it...](graphics/3081_01_02.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的带有手风琴导航的布局已经准备好了：![如何做...](graphics/3081_01_02.jpg)
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Ext JS is built for developers, to make their lives easier. As you can see
    in the source, we have built a layout with a simple JavaScript object. We have
    a "Viewport" with two items. One is positioned to the left (region: **West)**
    and the second to the right (region: **East)**. We don''t have to take care of
    the CSS in this case. Everything is handled directly by Ext JS through our variables
    like `width, margins, cmargins`, and so on. The `layout` property is really powerful.
    The inner layout on the **West** side is an accordion with the items **Navigation**
    and **Settings**. In the center column, we can see content loaded via Ajax, using
    the `autoLoad` method.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS是为开发人员构建的，以使他们的生活更轻松。正如您在源代码中所看到的，我们已经使用一个简单的JavaScript对象构建了一个布局。我们有一个“Viewport”和两个项目。一个位于左侧（区域：**West)**，第二个位于右侧（区域：**East)**。在这种情况下，我们不必关心CSS。一切都由Ext
    JS直接处理，通过我们的变量如`width, margins, cmargins`等。`layout`属性非常强大。**West**侧的内部布局是一个手风琴，其中包含**Navigation**和**Settings**。在中心列，我们可以看到通过Ajax加载的内容，使用`autoLoad`方法。
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The possible options for layout are: Absolute, Anchor, Card, Column, Fit, Table,
    Vbox, and Hbox.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 布局的可能选项包括：Absolute，Anchor，Card，Column，Fit，Table，Vbox和Hbox。
- en: Event handling in MochiKit
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MochiKit中的事件处理
- en: The next lightweight library in this chapter is **MochiKit**. In this task we
    will build a script for listing the `onkeydown` and `onkeypress` events. After
    each event we will display which key was pressed with its key code and key string.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的下一个轻量级库是**MochiKit**。在这个任务中，我们将构建一个用于列出`onkeydown`和`onkeypress`事件的脚本。在每个事件之后，我们将显示按下的键及其键代码和键字符串。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All mandatory files, documents, and demos are available on [www.mochikit.com](http://www.mochikit.com).
    We need to download the whole MochiKit library and save it in our `js` folder.
    Be careful, `MochiKit.js` is just the main file that includes all necessary sub-modules
    from MochiKit (such as, `base.js, signal.js, DOM.js`, and so on). The landing
    page for Ajax requests will be `ajax/actions.php:`
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所有必需的文件、文档和演示都可以在[www.mochikit.com](http://www.mochikit.com)上找到。我们需要下载整个MochiKit库并将其保存在我们的`js`文件夹中。请注意，`MochiKit.js`只是一个主文件，其中包含了来自MochiKit的所有必要子模块（如`base.js,
    signal.js, DOM.js`等）。Ajax请求的登陆页面将是`ajax/actions.php:`
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s start with HTML code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从HTML代码开始：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Include the MochiKit framework:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括MochiKit框架：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Define the JavaScript functionality:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义JavaScript功能：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Our result is:![How to do it...](graphics/3081_01_03.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的结果是：![How to do it...](graphics/3081_01_03.jpg)
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `connect()` function connects a signal (Mochikit.Signal API Reference) to
    a slot. In our case, we are connecting our document to the `onkeydown` and `onkeypress`
    handlers to call a `function(e)`. Parameter `e` represents our event object, when
    the `key()` object reference returns key code and string.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`connect()`函数将信号（Mochikit.Signal API参考）连接到插槽。在我们的情况下，我们将我们的文档连接到`onkeydown`和`onkeypress`处理程序以调用一个`function(e)`。参数`e`表示我们的事件对象，当`key()`对象引用返回键代码和字符串时。'
- en: '`replaceChildNodes(node[, childNode[,...]])` is a function of Mochikit.DOM
    API Reference, which removes all children from the given DOM element and then
    appends the given `childNode` to it.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`replaceChildNodes(node[, childNode[,...]])`是Mochikit.DOM API参考的一个函数，它从给定的DOM元素中删除所有子元素，然后将给定的`childNode`附加到其中。'
- en: After each `onkeydown` and `onkeypress` event we are sending an Ajax call using
    the `doSimpleXMLHttpRequest()` function. In our example, the request from our
    page looks like `ajax/actions.php?action=onkeydown&key=87`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个`onkeydown`和`onkeypress`事件之后，我们都会使用`doSimpleXMLHttpRequest()`函数发送一个Ajax调用。在我们的示例中，我们页面的请求看起来像`ajax/actions.php?action=onkeydown&key=87`。
- en: There's more...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Any object with connected slots can be disconnected by the `disconnect()` or
    `disconnectAll()` functions. In the case that we want to use `connect()` just
    once, we can use the `connectOnce()` function and this will disconnect the signal
    handler automatically once it has fired.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 任何具有连接插槽的对象都可以通过`disconnect()`或`disconnectAll()`函数断开连接。在我们想要仅使用`connect()`一次的情况下，我们可以使用`connectOnce()`函数，这将在信号处理程序触发后自动断开信号处理程序。
- en: MochiKit allows us to make the most of existing browser-generated events, but
    some of them are not natively supported by all browsers. MochiKit is able to synthesize
    these events, which include `onmouseenter, onmouseleave`, and `onmousewheel`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: MochiKit允许我们充分利用现有的浏览器生成的事件，但其中一些事件并不是所有浏览器都原生支持的。MochiKit能够合成这些事件，其中包括`onmouseenter,
    onmouseleave`和`onmousewheel`。
- en: Building a tab navigation using Dojo
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Dojo构建选项卡导航
- en: Now we will have a look at Dojo JavaScript Library. We will build a simple tab
    navigation using the basic functionality of the `Dojo Toolkit` (dojoToolKit).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将看一下Dojo JavaScript库。我们将使用`Dojo Toolkit`（dojoToolKit）的基本功能构建一个简单的选项卡导航。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need to include the Dojo Toolkit from websites such as Google CDN ([http://ajax.googleapis.com/ajax/libs/dojo/1.5/dojo/dojo.xd.js](http://ajax.googleapis.com/ajax/libs/dojo/1.5/dojo/dojo.xd.js)
    ) or AOL CDN ( [http://o.aolcdn.com/dojo/1.5/dojo/dojo.xd.js.](http://o.aolcdn.com/dojo/1.5/dojo/dojo.xd.js)
    )
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从Google CDN（[http://ajax.googleapis.com/ajax/libs/dojo/1.5/dojo/dojo.xd.js](http://ajax.googleapis.com/ajax/libs/dojo/1.5/dojo/dojo.xd.js)）或AOL
    CDN（[http://o.aolcdn.com/dojo/1.5/dojo/dojo.xd.js.](http://o.aolcdn.com/dojo/1.5/dojo/dojo.xd.js)）等网站上包含Dojo
    Toolkit。
- en: If you want to download the whole Dojo SDK you can find it at [www.dojotoolkit.org/download](http://www.dojotoolkit.org/download).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要下载整个Dojo SDK，您可以在[www.dojotoolkit.org/download](http://www.dojotoolkit.org/download)找到它。
- en: The landing page for Ajax requests will be `ajax/content1.html:`
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax请求的登陆页面将是`ajax/content1.html:`
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will include styles from the `claro` theme (included in `dojoToolKit)` in
    the`<head>` tag of our document:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在文档的`<head>`标签中包含来自`claro`主题（包含在`dojoToolKit`中）的样式：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We will define our HTML code in the body of our document:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在我们的文档的主体中定义我们的HTML代码：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When the HTML and CSS is ready, we will include `DojoToolkit` with required
    modules:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当HTML和CSS准备就绪时，我们将包含所需的模块`DojoToolkit`：
- en: '[PRE24]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Adding JavaScript functionality gives us the following:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加JavaScript功能给我们带来了以下结果：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When the preceding code snippet is ready and saved, our result will be a simple
    tab navigation with three tabs.![How to do it...](graphics/3081_01_04.jpg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当上述代码片段准备好并保存后，我们的结果将是一个带有三个选项卡的简单选项卡导航。![如何做...](graphics/3081_01_04.jpg)
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As you can see in the source, we are using the Dijit-Dojo UI component system.
    **Dijit** is included in Dojo SDK and includes UI components with four supported
    themes , `(nihilo soria, tundra,and claro)`. We can set which theme we want to
    use by selecting a class within our`<body>` tag. In the preceding example we have
    `class="claro`".
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在源代码中所看到的，我们正在使用Dijit-Dojo UI组件系统。**Dijit**包含在Dojo SDK中，并包括四种支持的主题的UI组件，`(nihilo
    soria, tundra,and claro)`。我们可以通过选择`<body>`标签中的一个类来设置我们想要使用的主题。在前面的例子中，我们有`class="claro"`。
- en: We need to provide the `djConfig` attribute with `parseOnLoad:true` when we
    include the `dojoToolKit` script. Without this, Dojo won't be able to find the
    page elements that should be converted to Dijit widgets.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们包含`dojoToolKit`脚本时，需要为`djConfig`属性提供`parseOnLoad:true`。如果没有这个，Dojo将无法找到应该转换为Dijit小部件的页面元素。
- en: When we want to use a specific widget, we need to call the required class for
    the widget (`dojo.require("dijit.layout.TabContainer")`) and provide its `dojoType`
    attribute (`dojoType="dijit.layout.TabContainer"`). As an example of using Ajax
    in Dojo, we use the `dojo.xhrGet()` function to get the content of `ajax/content1.html`
    each time we click on `showMe` div.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要使用特定的小部件时，我们需要调用小部件的所需类（`dojo.require("dijit.layout.TabContainer")`），并提供其`dojoType`属性（`dojoType="dijit.layout.TabContainer"`）。作为在Dojo中使用Ajax的示例，我们使用`dojo.xhrGet()`函数每次点击`showMe`
    div时获取`ajax/content1.html`的内容。
- en: Building a chart application using YUI library
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用YUI库构建图表应用程序
- en: In this task we will use a UI library developed by Yahoo! to build a chart.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将使用Yahoo!开发的UI库来构建一个图表。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The YUI library is available for download on Yahoo!'s developer website ([http://developer.yahoo.com/yui/3](http://developer.yahoo.com/yui/3)
    ). After we save it in our `js` folder, we are ready to start programming.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: YUI库可以在Yahoo!的开发者网站([http://developer.yahoo.com/yui/3](http://developer.yahoo.com/yui/3))上下载。将其保存在我们的`js`文件夹中后，我们就可以开始编程了。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We have to start by including the YUI library in the`<head>` tag of our document
    along with styles for the placeholder of our chart:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须首先在文档的`<head>`标签中包含YUI库以及我们图表的占位符的样式：
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will place our HTML in the`<body>` tag to mark where our chart will be placed:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把我们的HTML放在`<body>`标签中，以标记我们的图表将放置的位置：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Our JavaScript is as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的JavaScript如下：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The results after saving and opening our HTML document are as follows:![How
    to do it...](graphics/3081_01_05.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并打开我们的HTML文档后的结果如下：![如何做...](graphics/3081_01_05.jpg)
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: YUI Charts are defined in the `Chart` object. For the "document ready" function
    we will use the `(function(){...})()` syntax. We need to specify that we want
    to use `YUI() 'charts'`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: YUI图表是在`Chart`对象中定义的。对于“文档准备就绪”函数，我们将使用`(function(){...})()`语法。我们需要指定我们要使用`YUI()
    'charts'`。
- en: The main part is creating a `Y.Chart` object. We can define how this chart will
    be rendered, how our gridlines will look, where to display our chart, and which
    data to display. We will define axes with the `myAxes` object, which handles the
    legend on the sides. Our data are stored in the `myDataValues` object.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 主要部分是创建一个`Y.Chart`对象。我们可以定义这个图表的渲染方式，网格线的外观，图表的显示位置以及要显示的数据。我们将使用`myAxes`对象定义坐标轴，该对象处理侧边的图例。我们的数据存储在`myDataValues`对象中。
- en: There's more...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are many possibilities and ways to style our charts. We can split the
    chart to the smallest parts and set each property. For example, rotation of the
    label or margin:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多可能性和方法来设置我们的图表样式。我们可以将图表分割成最小的部分并设置每个属性。例如，标签的旋转或边距：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'YUI also covers an Ajax functionality. This is how a simple Ajax call will
    look:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: YUI还包括Ajax功能。一个简单的Ajax调用将如下所示：
- en: '[PRE30]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We created the `callAjax()` function, which is triggered by clicking on the
    `Call Ajax` hyperlink. The Ajax call is provided by `YAHOO.util.Connect.asyngRequest()`.
    We defined the HTTP method (GET), requested URL `ajax/content.html`, and `callback`
    functionality with the `success` method, which displays response text in the `'content'
    <div>`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`callAjax()`函数，当点击`Call Ajax`超链接时触发该函数。Ajax调用由`YAHOO.util.Connect.asyngRequest()`提供。我们定义了HTTP方法（GET），请求的URL`ajax/content.html`，以及`callback`功能与`success`方法，该方法在`'content'
    <div>`中显示响应文本。
- en: Loading dynamic content using jQuery slider
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery滑块加载动态内容
- en: In this task, we will learn how to load the content of the page dynamically
    using jQuery slider.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将学习如何使用jQuery滑块动态加载页面内容。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this task, we will use the jQuery UI library as well. We can either include
    the jQuery UI library from [http://jqueryui.com/download](http://jqueryui.com/download)
    or from some CDN. Then we will create a folder for our little project, let's say
    `packt1`. There will be more folders in our `packt1` folder; these are `ajax`
    folders for our HTML files loaded via Ajax, CSS for our styles, and `js` for our
    JavaScript libraries.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们也将使用jQuery UI库。我们可以从[http://jqueryui.com/download](http://jqueryui.com/download)下载jQuery
    UI库，也可以从一些CDN上下载。然后我们将为我们的小项目创建一个名为`packt1`的文件夹。在我们的`packt1`文件夹中将有更多的文件夹；这些是通过Ajax加载的HTML文件的`ajax`文件夹，用于我们的样式的CSS文件夹，以及用于我们的JavaScript库的`js`文件夹。
- en: 'The folder structure will look like the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹结构将如下所示：
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Since everything is set, we are ready to start.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都准备好了，我们可以开始了。
- en: We will start with basic HTML layout and content. This part already includes
    a link to our CSS given from the jQuery UI library. We can save it as `index.html:`
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从基本的HTML布局和内容开始。这部分已经包括了一个链接到我们的CSS，来自jQuery UI库。我们可以将其保存为`index.html:`
- en: '[PRE32]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now we will add JavaScript libraries and their functionality:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将添加JavaScript库及其功能：
- en: '[PRE33]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Our `index.html` page is ready and we can create files that are going be loaded
    in our page via Ajax.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`index.html`页面已经准备好了，我们可以创建要通过Ajax在我们的页面中加载的文件。
- en: The first page will be ajax/content1.html. This page will contain a slider with
    extra functionality, which will be described later.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 第一页将是ajax/content1.html。此页面将包含一个具有额外功能的滑块，稍后将进行描述。
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The second page will be `ajax/content2.html:`
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二页将是`ajax/content2.html:`
- en: '[PRE35]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'And the last file in our Ajax folder will be items.html:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Ajax文件夹中的最后一个文件将是items.html：
- en: '[PRE36]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now, as shown in the following screenshot, we have a multi-functional page with
    four tabs. Three of them are loaded via Ajax and one of them contains a slider.
    This slider has an extra functionality and every change loads a selected number
    of items.![How to do it...](graphics/3081_01_06.jpg)
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如下面的屏幕截图所示，我们有一个具有四个选项卡的多功能页面。其中三个通过Ajax加载，其中一个包含一个滑块。这个滑块有额外的功能，每次更改都会加载选定数量的商品。![如何做...](graphics/3081_01_06.jpg)
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: From the beginning, we started with a simple tab layout with four tabs, using
    the jQuery UI library. One of them (#tabs-1) was included directly in the `index.html`
    file. The jQuery UI library allows us to define `ajaxOptions`, so that we can
    load our content via Ajax. The navigation where we find the required content is
    preceeded by the `href` attribute of each hyperlink. If this target does not exist,
    the `error` method is triggered.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，我们使用jQuery UI库创建了一个简单的带有四个选项卡的选项卡布局。其中一个(#tabs-1)直接包含在`index.html`文件中。jQuery
    UI库允许我们定义`ajaxOptions`，以便我们可以通过Ajax加载我们的内容。我们在每个超链接的`href`属性之前找到所需内容的导航。如果此目标不存在，则会触发`error`方法。
- en: We wanted to have a functional slider on our second tab (named **Books)**. To
    make it work, we can't initialize it in the `$(document).ready()` function, because
    its HTML content hasn't been created yet. We will add slider initialization only
    when we need it in the `success` method.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在我们的第二个选项卡(名为**Books**)上有一个功能性的滑块。为了使其工作，我们不能在`$(document).ready()`函数中初始化它，因为它的HTML内容尚未创建。我们将仅在`success`方法中需要时添加滑块初始化。
- en: After each change of slider the `load()` function is triggered. This function
    loads the content of the given target via Ajax. In our case, we use a more specific
    selector with the exact ID of the object, which is displayed in our result box.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次滑块更改后，都会触发`load()`函数。此函数通过Ajax加载给定目标的内容。在我们的情况下，我们使用了一个更具体的选择器，具有对象的确切ID，该ID显示在我们的结果框中。
- en: There's more...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In this task we were using only the basic function `load()`, but jQuery offers
    more Ajax methods, as shown in the following table:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '在这项任务中，我们只使用了基本的`load()`函数，但jQuery提供了更多的Ajax方法，如下表所示:'
- en: '| `$.ajax` | Performs an Ajax request |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `$.ajax` | 执行Ajax请求 |'
- en: '| `jQuery.post()` | Loads data from the server using HTTP POST request |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `jQuery.post()` | 使用HTTP POST请求从服务器加载数据 |'
- en: '| `jQuery.get()` | Loads data from the server using HTTP GET request |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `jQuery.get()` | 使用HTTP GET请求从服务器加载数据 |'
- en: '| `jQuery.getJSON()` | Loads JSON data from the server using HTTP GET request
    |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `jQuery.getJSON()` | 使用HTTP GET请求从服务器加载JSON数据 |'
- en: '| `jQuery.getScript()` | Loads and executes a JavaScript file from the server
    using HTTP GET request |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `jQuery.getScript()` | 使用HTTP GET请求从服务器加载并执行JavaScript文件 |'
- en: See also
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Chapter 3](ch03.html "Chapter 3. Useful Tools Using jQuery"),*Useful tools
    using jQuery*'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章. 使用jQuery的有用工具"),*使用jQuery的有用工具*'
- en: Creating an Ajax shopping cart using MooTools
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MooTools创建Ajax购物车
- en: This task will show us how to use Ajax with MooTools JavaScript framework. We
    will build a shopping cart with a drag-and-drop functionality. After each UI interpretation
    to add a new item to the shopping cart, we will send an HTTP POST request to the
    server.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这项任务将向我们展示如何在MooTools JavaScript框架中使用Ajax。我们将构建一个带有拖放功能的购物车。在每次UI解释添加新商品到购物车后，我们将向服务器发送一个HTTP
    POST请求。
- en: Getting ready
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: '**MooTools** is available for download at [https://mootools.net/download](http://https://mootools.net/download)
    or in Google''s CDN. For communication between the server and client we will create
    a new file in our `ajax` folder, for example, `addItem.php:`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**MooTools**可在[https://mootools.net/download](http://https://mootools.net/download)或Google的CDN上下载。为了在服务器和客户端之间进行通信，我们将在我们的`ajax`文件夹中创建一个新文件，例如`addItem.php:`'
- en: '[PRE37]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: After creating this dummy PHP file, we are ready to proceed to the programming
    part of this task.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了这个虚拟的PHP文件后，我们准备继续进行此任务的编程部分。
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will begin, as we usually do, with HTML layout to include MooTools library:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将像通常一样从HTML布局开始，包括MooTools库：
- en: '[PRE38]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In this task we have to provide our own CSS styles:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这项任务中，我们必须提供自己的CSS样式：
- en: '[PRE39]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'When the look of our UI fits our expectations, we can start JavaScript:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们的UI外观符合我们的期望时，我们可以开始JavaScript：
- en: '[PRE40]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Once we save our code, our shopping cart is ready. The result is as follows:![How
    to do it...](graphics/3081_01_07.jpg)
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们保存了我们的代码，我们的购物车就准备好了。结果如下:![如何做...](graphics/3081_01_07.jpg)
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `$(document).ready` function is performed by binding a `domready` event
    to the `window` object. For each item, we are add a `mousedown` event, which contains
    the whole procedure of adding each item in the cart, using the `Drag` object and
    `clone()` function.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`$(document).ready`函数通过将`domready`事件绑定到`window`对象来执行。对于每个项目，我们都会添加一个`mousedown`事件，其中包含将每个项目添加到购物车中的整个过程，使用`Drag`对象和`clone()`函数。'
- en: To communicate with the server we use the `Request.HTML` method and send it
    with the `HTTP post` method with `post` variable `type`. If the variable `type`
    is equal to the string `shirt`, it means a new item was added to the cart and
    the information box result was updated to `'New Item was added successfully'`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与服务器通信，我们使用`Request.HTML`方法，并使用`HTTP post`方法发送它，带有`post`变量`type`。如果变量`type`等于字符串`shirt`，这意味着新商品已添加到购物车，并且信息框结果已更新为`'新商品已成功添加'`。
- en: There's more...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`Class Request` represents the main class, which deals with an `XMLHttpRequest:`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`Class Request`代表处理`XMLHttpRequest`的主要类:'
- en: '[PRE41]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'An example of the preceding template is as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '前述模板的示例如下:'
- en: '[PRE42]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the core of the MooTools library, the `Request` class was extended to `Request.HTML`
    and `Request.JSON`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在MooTools库的核心中，`Request`类被扩展为`Request.HTML`和`Request.JSON`。
- en: '`Request.HTML` is an extended `Request` class specially made for receiving
    HTML data:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`Request.HTML`是专门用于接收HTML数据的扩展`Request`类：'
- en: '[PRE43]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can use the `post` or `get` method:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`post`或`get`方法：
- en: '[PRE44]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As the most effective practice of communication between client and server, we
    can use `Request.JSON` to receive and transmit JavaScript objects in `JSON` format.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 作为客户端和服务器之间有效的通信实践，我们可以使用`Request.JSON`以`JSON`格式接收和传输JavaScript对象。
- en: '[PRE45]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Building an Ajax login form using prototype.js
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用prototype.js构建Ajax登录表单
- en: The last JavaScript framework in this chapter is `prototype.js`. In this task,
    we will make a simple login form with Ajax functionality. We will have a look
    at the most frequently used practices for `prototype.js` with Ajax.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中最后一个JavaScript框架是`prototype.js`。在这个任务中，我们将使用Ajax功能制作一个简单的登录表单。我们将看一下在Ajax中最常用的`prototype.js`实践。
- en: Getting ready
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We can download `prototype.js` from [http://www.prototypejs.org/download](http://www.prototypejs.org/download).
    Then, just save it in the `js` folder. To finish this task we will need to have
    the Apache Server running.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从[http://www.prototypejs.org/download](http://www.prototypejs.org/download)下载`prototype.js`。然后，只需将其保存在`js`文件夹中。要完成这个任务，我们需要让Apache服务器运行。
- en: How to do it...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: First, let's create our dummy `.php` file, `login.php:`
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建我们的虚拟`.php`文件，`login.php:`
- en: '[PRE46]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Then, we can continue with our HTML layout.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以继续进行HTML布局。
- en: '[PRE47]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'When the HTML is set, we will define our JavaScript:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当HTML设置好后，我们将定义我们的JavaScript：
- en: '[PRE48]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: How it works...
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see in the source, we `observe` a new `click` event on the button
    element with ID `submit`, which is the `submit` button in our login form. The
    `login()` function is triggered by the `click` event. The default behavior of
    the `submit` button was replaced by `Event.stop(event)`, and so triggering the
    HTTP request was disabled. An Ajax request was created instead. `Ajax.Request`
    is the basic class for using Ajax in `prototype.js`. We are using the `post` method
    with two parameters (username and password). If the request was successful and
    the response text from `login.php` was `proceed` we were successfully logged in.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在源代码中所看到的，我们在ID为`submit`的按钮元素上`observe`了一个新的`click`事件，这是我们登录表单中的`submit`按钮。`login()`函数由`click`事件触发。`submit`按钮的默认行为被`Event.stop(event)`替换，因此触发了HTTP请求的行为被禁用。而是创建了一个Ajax请求。`Ajax.Request`是在`prototype.js`中使用Ajax的基本类。我们使用了两个参数（用户名和密码）的`post`方法。如果请求成功，并且来自`login.php`的响应文本是`proceed`，那么我们成功登录了。
- en: There's more...
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: '`prototype.js` extends the `Ajax.Request` object to a few more, as discussed:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`prototype.js`将`Ajax.Request`对象扩展到了更多功能，如下所述：'
- en: 'Ajax.Updater:'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Ajax.Updater:'
- en: 'Ajax.Updater is an extension of the `Ajax.Request` object, which performs an
    Ajax request and updates the container, based on response text:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Ajax.Updater是`Ajax.Request`对象的扩展，它执行Ajax请求并根据响应文本更新容器：
- en: '[PRE49]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '**Ajax.PeriodicalUpdater:**'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ajax.PeriodicalUpdater:**'
- en: 'In the case that we need to update our content at regular intervals, we can
    use periodical updater:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们需要定期更新内容的情况下，我们可以使用周期性更新器：
- en: '[PRE50]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Frequency represents the periodicity (in number of seconds) of updating the
    content. In the preceding code snippet, our content will be updated every 3 seconds.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 频率表示更新内容的周期性（以秒为单位）。在上面的代码片段中，我们的内容将每3秒更新一次。
- en: '**Ajax.Responders:**'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ajax.Responders:**'
- en: '`Ajax.Responders` represents a repository of global listeners that monitor
    all Ajax activity on the page:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ajax.Responders`表示全局监听器的存储库，用于监视页面上的所有Ajax活动：'
- en: '[PRE51]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: With responders we can easily track how many Ajax requests are active on our
    page.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 使用responders，我们可以轻松跟踪页面上有多少个Ajax请求是活动的。
- en: '[PRE52]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
