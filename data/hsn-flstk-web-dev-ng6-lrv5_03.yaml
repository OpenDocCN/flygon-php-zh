- en: Understanding the Core Concepts of Angular 6
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Angular 6的核心概念
- en: The Angular framework has become one of the most popular tools, around the world
    for the development of frontend applications. In addition to being very versatile
    (and very different from other libraries, such as `React.js` or `Vue.js`, which
    serve only one purpose), Angular is a complete framework and, with the new updates
    for Angular 6, we now have more resources available for creating amazing and fast
    web applications. In addition, the team behind Angular proposes two major updates
    annually.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Angular框架已经成为全球最流行的前端应用程序开发工具之一。除了非常多功能（与其他库如`React.js`或`Vue.js`非常不同，这些库只用于一个目的），Angular是一个完整的框架，并且随着Angular
    6的新更新，我们现在有更多资源可用于创建令人惊叹和快速的Web应用程序。此外，Angular团队每年提出两次重大更新。
- en: Another strong point in favor of Angular is its inclusion of the Angular **command-line
    interface** (**CLI**) for creating web applications. This provides us with extra
    power; with a simple command in the Terminal, we can create our application's
    boilerplate code very quickly and easily. However, everything is not quite as
    sweet as we would like it to be, so we need to understand the basic concepts of
    Angular and know how to avoid some of the issues in our way. This is easily resolved
    by adopting a mental model of development, based on components and modules. In
    the following examples, we will carefully create the basic structure of a scalable
    and modular project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Angular的另一个优势是其包含用于创建Web应用程序的Angular **命令行界面**（**CLI**）。这为我们提供了额外的能力；通过终端中的一个简单命令，我们可以非常快速和轻松地创建应用程序的样板代码。然而，一切并不像我们希望的那样甜蜜，因此我们需要了解Angular的基本概念，并知道如何避免一些问题。这可以通过采用基于组件和模块的开发思维模型来轻松解决。在接下来的示例中，我们将仔细创建可扩展和模块化项目的基本结构。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Angular 6 – smaller, faster, and easier
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular 6 - 更小，更快，更容易
- en: Angular and the component method for developing modern web applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular和组件方法用于开发现代Web应用程序
- en: 'Installing the tools: Git, the Angular CLI, HTTP server, and VS Code plugins'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装工具：Git，Angular CLI，HTTP服务器和VS Code插件
- en: Creating a simple Angular app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的Angular应用程序
- en: Simple deployment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单部署
- en: Angular 6 – smaller, faster, and easier
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular 6 - 更小，更快，更容易
- en: 'The following features are not exclusively for version 6, but were included
    from version 5; we are just mentioning them here because they are powerful features
    for building modern web applications:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下功能不仅适用于版本6，而且从版本5开始就已包含；我们在这里提到它们是因为它们是构建现代Web应用程序的强大功能：
- en: '**Webpack**: You can now generate smaller modules by using the scope hosting
    technique.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Webpack**：您现在可以使用作用域托管技术生成更小的模块。'
- en: You can reduce bundle sizes for common use cases by using the RxJS 6 library
    for JavaScript.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过使用JavaScript的RxJS 6库减少常见用例的捆绑大小。
- en: The Angular CLI, allowing for commands such as `ng` update, can be used to update
    all dependencies.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular CLI允许使用命令，如`ng` update，来更新所有依赖项。
- en: You will have the option to start your application using Angular material design.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将有选择使用Angular Material Design启动应用程序。
- en: The `ng add` command supports creating progressive web applications or turning
    an existing one into a **Progressive Web Application** (**PWA**).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng add`命令支持创建渐进式Web应用程序或将现有应用程序转换为**渐进式Web应用程序**（**PWA**）。'
- en: You will have the opportunity to use Bazel to build your application's libraries
    and to share libraries with other teams.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将有机会使用Bazel构建应用程序的库，并与其他团队共享库。
- en: Angular makes it possible to package custom HTML/JavaScript elements for use
    in third-party applications.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Angular使得可以打包自定义HTML/JavaScript元素以供第三方应用程序使用。
- en: You can read more about Bazel at [https://bazel.build/](https://bazel.build/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://bazel.build/](https://bazel.build/)了解有关Bazel的更多信息。
- en: Of course, there are many other improvements and features in the Angular 6 release;
    note that this book was written on the Angular 6 beta 7 version, and the next
    chapters will have more news about the current Angular version.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Angular 6版本中还有许多其他改进和功能；请注意，本书是在Angular 6 beta 7版本上编写的，接下来的章节将有关于当前Angular版本的更多新闻。
- en: Angular and the component method for developing modern web applications
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular和组件方法用于开发现代Web应用程序
- en: Angular components are similar to web components; they are used to compose web
    pages, or even other components. There can be dozens of components in a web application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Angular组件类似于Web组件；它们用于组合网页，甚至其他组件。一个Web应用程序中可能有数十个组件。
- en: Components define views and templates, and they belong to a module within an
    application; every application has, at the very least, a root module, named by
    the Angular CLI as `AppModule.ts`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 组件定义视图和模板，并且它们属于应用程序中的一个模块；每个应用程序至少有一个根模块，由Angular CLI命名为`AppModule.ts`。
- en: 'The `app.module.ts` file contains all of the bootstrap code and configurations
    for an Angular application, as you can see in the following block of code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.module.ts`文件包含了Angular应用程序的所有引导代码和配置，如下面的代码块所示：'
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code is the most basic configuration of an Angular application;
    we import the `NgModule` from the Angular core library and use it as a decorator:
    `@NgModule`.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是Angular应用程序的最基本配置；我们从Angular核心库中导入`NgModule`并将其用作装饰器：`@NgModule`。
- en: Both components and services are simply classes, with decorators that mark their
    types and provide metadata that tells Angular how to use them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 组件和服务都只是类，带有标记其类型并提供元数据的装饰器，告诉Angular如何使用它们。
- en: You can read more about web components at [https://www.webcomponents.org/introduction](https://www.webcomponents.org/introduction).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.webcomponents.org/introduction](https://www.webcomponents.org/introduction)了解有关Web组件的更多信息。
- en: Angular's main building blocks
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular的主要构建模块
- en: 'Every application created using the Angular framework has five very important
    points that connect to each other and establish the basic architecture of the
    application:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Angular框架创建的每个应用程序都有五个非常重要的连接到彼此的点，并建立了应用程序的基本架构：
- en: '**Modules**: Using the decorator `@NgModule`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**：使用装饰器`@NgModule`'
- en: '**Services**: Using the decorator `@Injectable`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：使用装饰器`@Injectable`'
- en: '**Components**: Using the decorator `@component`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**：使用装饰器`@component`'
- en: '**Templates**: Views with `data-bind` and directives'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：带有`data-bind`和指令的视图'
- en: '**Routes**: Setting URL path to views'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**：将URL路径设置为视图'
- en: 'Let''s look at a simple blog page as an Angular application, built with components:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个简单的博客页面作为Angular应用程序来看待，使用组件构建：
- en: '![](assets/3c291f8a-fb7b-478f-a72b-9a6d2fa665d8.png)Angular components'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/3c291f8a-fb7b-478f-a72b-9a6d2fa665d8.png)Angular组件'
- en: The preceding diagram illustrates how components can be used to build a simple
    application.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前述图表说明了组件如何用于构建一个简单的应用程序。
- en: 'A comparison between the preceding diagram and the five basic concepts of an
    Angular application would look as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前述图表与Angular应用程序的五个基本概念的比较如下：
- en: 'One module: `blog.module.ts`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个模块：`blog.module.ts`
- en: 'A page component: `blog.component.ts`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个页面组件：`blog.component.ts`
- en: A route to the blog page
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 博客页面的路由
- en: A service to load the blog posts
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载博客文章的服务
- en: There are also some additional components, such as **Header**, **Post,** and
    **Pagination.**
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他组件，如**Header**，**Post**和**Pagination**。
- en: Note that the Header component belongs to the main module of the application
    (in this case, the `AppModule`), and the Post and Pagination components are part
    of the `BlogModule`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Header组件属于应用程序的主模块（在本例中为`AppModule`），而Post和Pagination组件属于`BlogModule`的一部分。
- en: As we move through this chapter, we will look more closely at the relationship
    between modules and components. Now, we will look at the life cycle of a component.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在本章中的深入，我们将更仔细地研究模块和组件之间的关系。现在，我们将看一下组件的生命周期。
- en: The component life cycle
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件生命周期
- en: 'In the life cycle of an Angular component, after instantiating, the component
    runs a definite path of execution from its beginning until its end. The most basic
    way to understand this is through observing the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular组件的生命周期中，在实例化后，组件从开始到结束都会运行一条明确的执行路径。最基本的理解方式是通过观察以下代码：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding example, you can see methods called `ngOnInit()` and `ngOnDestroy`;
    the names are very intuitive, and show us that we have a beginning and an end. The
    `ngOnInit()` method is implemented through its `OnInit` interface, and the same
    goes for the `ngOnDestroy()` method. As you saw in the previous chapter, the interfaces
    in TypeScript are very useful – it's not any different here.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，您可以看到名为`ngOnInit()`和`ngOnDestroy`的方法；这些名称非常直观，向我们展示了我们有一个开始和一个结束。`ngOnInit()`方法是通过其`OnInit`接口实现的，`ngOnDestroy()`方法也是如此。正如您在前一章中看到的，TypeScript中的接口非常有用
    - 这里也不例外。
- en: 'In the following diagram, we will look at the main interfaces that we can implement
    on a component. In the diagram, after the `Constructor()` method, there are eight
    interfaces (also known as hooks); each one is responsible for one thing, at a
    specific moment:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们将看一下我们可以在组件上实现的主要接口。在图中，在`Constructor()`方法之后，有八个接口（也称为钩子）；每个接口在特定时刻负责一件事：
- en: '![](assets/5a04ccae-f092-429e-a923-74071100d1c7.png)Angular component life
    cycleYou can learn more about each interface in the official Angular documentation
    at [https://angular.io/guide/lifecycle-hooks](https://angular.io/guide/lifecycle-hooks).
    [](https://angular.io/guide/lifecycle-hooks)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5a04ccae-f092-429e-a923-74071100d1c7.png)Angular组件生命周期您可以在官方的Angular文档中了解每个接口的更多信息[https://angular.io/guide/lifecycle-hooks](https://angular.io/guide/lifecycle-hooks)。'
- en: We will not describe the interfaces one by one in this chapter, so as not to
    overload you, but,  throughout the course of the book, we will use them in the
    application that we will build. Also, the preceding link includes detailed information
    about each interface and hook.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在本章逐一描述接口，以免给您带来过多负担，但在本书的过程中，我们将在我们构建的应用程序中使用它们。此外，上述链接包含了关于每个接口和钩子的详细信息。
- en: Installing the tools – Git, the Angular CLI, and VS Code plugins
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装工具 - Git，Angular CLI和VS Code插件
- en: From this chapter to the end of the book, we will adopt the VS Code text editor –
    it is free, lightweight, and very powerful for creating web applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章到本书的结束，我们将采用VS Code文本编辑器 - 它是免费的，轻量级的，非常适合创建Web应用程序。
- en: Also, it is very important to use a version control system for the source code;
    this will help us to track all of the changes in our code base.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于源代码使用版本控制系统非常重要；这将帮助我们跟踪代码库中的所有更改。
- en: Next, we will introduce Git source control.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍Git源代码控制。
- en: Installing Git
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Git
- en: As a simple and quick introduction to Git, we can describe it as follows.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对Git的简单快速介绍，我们可以描述如下。
- en: Git is a file version control system. By using it, we can develop projects to
    which many people can simultaneously contribute, editing and creating new files,
    allowing them to exist without the risk of their changes being overwritten.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个文件版本控制系统。通过使用它，我们可以开发项目，让许多人可以同时贡献，编辑和创建新文件，使它们可以存在而不会被覆盖。
- en: A very common case when using Git is to also use a service in the cloud (such
    as GitHub or Bitbucket), to store the code, so that we can share it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Git时非常常见的情况是同时在云中使用服务（如GitHub或Bitbucket）来存储代码，以便我们可以共享它。
- en: In addition, almost all open source projects (frameworks and libraries) are
    in GitHub today. So you can contribute by reporting bugs, or even sending codes
    and suggestions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，几乎所有的开源项目（框架和库）今天都在GitHub上。因此，您可以通过报告错误，甚至发送代码和建议来做出贡献。
- en: If you are a developer and do not yet have GitHub, you are late – this is the
    time to start using it. So, let's install Git.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是开发人员，但尚未拥有GitHub，那么您已经晚了 - 现在是开始使用它的时候。因此，让我们安装Git。
- en: Go to [https://git-scm.com/downloads](https://git-scm.com/downloads) and download
    and install Git for your platform.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 [https://git-scm.com/downloads](https://git-scm.com/downloads) 并下载并安装适用于您平台的Git。
- en: 'After installing, open your Terminal and type the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，打开您的终端并输入以下命令：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You must see the current version installed on your system.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须看到已安装在您系统上的当前版本。
- en: Also, the `git help` command is very useful, listing all of the commands available.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`git help`命令非常有用，列出所有可用的命令。
- en: You can read more about Git basics at [https://git-scm.com/book/en/v2/Getting-Started-Git-Basics](https://git-scm.com/book/en/v2/Getting-Started-Git-Basics).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://git-scm.com/book/en/v2/Getting-Started-Git-Basics](https://git-scm.com/book/en/v2/Getting-Started-Git-Basics) 上阅读有关Git基础知识的更多信息。
- en: Installing the Angular CLI
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Angular CLI
- en: In the world of frameworks, regardless of the language, we often find tools
    that can help us with day-to-day software development, especially when there are
    repetitive tasks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在框架的世界中，无论使用哪种语言，我们经常会发现可以帮助我们进行日常软件开发的工具，特别是在有重复任务时。
- en: The Angular CLI is a command-line interface for creating, developing, and maintaining
    Angular applications in a very productive way. It is an open source tool developed
    by the Angular team itself.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI是一个命令行界面，可以以非常高效的方式创建、开发和维护Angular应用程序。它是由Angular团队自己开发的开源工具。
- en: With the use of the Angular CLI, we are able to create the entire base structure
    of an Angular application, as well as the modules, components, directives, services,
    and more. It has its own server for development and helps us with the application
    build.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Angular CLI，我们能够创建整个Angular应用程序的基本结构，以及模块、组件、指令、服务等。它有自己的开发服务器，并帮助我们构建应用程序。
- en: 'Now, it''s time to install it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候安装它了：
- en: 'Open your Terminal and type the following command:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端并输入以下命令：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After the installation, you will see the following output in your Terminal:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您将在终端中看到以下输出：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The number of packages removed and updated and the Angular CLI version may be
    different. Don't worry.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 删除和更新的软件包数量以及Angular CLI版本可能会有所不同。不用担心。
- en: 'You can remove your old version of the Angular CLI and install the latest version
    with the following commands:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下命令删除旧版本的Angular CLI并安装最新版本：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you experience some `npm` issues when you try to update your Angular CLI
    version on a Windows machine, you can check [https://docs.npmjs.com/troubleshooting/try-the-latest-stable-version-of-npm#upgrading-on-windows](https://docs.npmjs.com/troubleshooting/try-the-latest-stable-version-of-npm#upgrading-on-windows) for
    information.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在尝试在Windows机器上更新Angular CLI版本时遇到一些`npm`问题，您可以查看 [https://docs.npmjs.com/troubleshooting/try-the-latest-stable-version-of-npm#upgrading-on-windows](https://docs.npmjs.com/troubleshooting/try-the-latest-stable-version-of-npm#upgrading-on-windows) 获取信息。
- en: Note that the preceding command will install the Angular CLI globally on your
    environment/machine. Frequently, when we develop using the Angular framework and
    the Angular CLI, we see warning messages about the differences between versions.
    This means that, even if you have installed the latest version of the Angular
    CLI in your environment, the Angular CLI will check the version used in the current
    project and compare it to the version installed on your machine, and will use
    the current project version.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述命令将在您的环境/机器上全局安装Angular CLI。通常，当我们使用Angular框架和Angular CLI进行开发时，我们会看到关于版本差异的警告消息。这意味着，即使您在您的环境中安装了最新版本的Angular
    CLI，Angular CLI也会检查当前项目中使用的版本，并将其与您的机器上安装的版本进行比较，并使用当前项目版本。
- en: This is very useful when you work on third-party projects and need to keep dependencies
    consistency between the globally Angular CLI installed on your machine and the
    local project version installed on `node_modules` project folder.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在第三方项目上工作并需要保持全局安装在您的机器上的Angular CLI与`node_modules`项目文件夹中安装的本地项目版本之间的依赖一致性时，这非常有用。
- en: 'Inside of your current Angular project, type the following commands:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您当前的Angular项目中，输入以下命令：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Like the other commands that we are using in our book, the Angular CLI has a
    command called `ng help`. With it, we can access a vast list of options.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们书中使用的其他命令一样，Angular CLI有一个名为`ng help`的命令。通过它，我们可以访问大量的选项。
- en: One of these commands is particularly useful when we are developing applications
    with Angular and need to consult something in the official documentation, without
    leaving the Terminal.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个命令在我们使用Angular开发应用程序并需要在官方文档中查询内容时特别有用，而无需离开终端。
- en: 'Go back to your Terminal and type the following command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您的终端并输入以下命令：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding command will open your default browser right at the `HttpClient`
    documentation API, using [https://angular.io/api?query=HttpClient](https://angular.io/api?query=HttpClient).
    So, you can combine the `ng doc` command with anything from the API that you want
    to search.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在您的默认浏览器中打开`HttpClient`文档API，使用 [https://angular.io/api?query=HttpClient](https://angular.io/api?query=HttpClient)。因此，您可以将`ng
    doc`命令与您想要搜索的API中的任何内容结合使用。
- en: We now have everything we need to start developing web applications using the
    Angular CLI, but, before we get deeper into building a sample application, we're
    going to update our toolkit with some very useful tools.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了开始使用Angular CLI开发Web应用程序所需的一切，但在深入构建示例应用程序之前，我们将使用一些非常有用的工具更新我们的工具包。
- en: Installing VS Code Angular plugins
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装VS Code Angular插件
- en: As mentioned in the previous chapters, the VS Code text editor is a fantastic
    IDE for developing web applications using JavaScript and TypeScript, and the same
    goes for Angular.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前几章所述，VS Code文本编辑器是使用JavaScript和TypeScript开发Web应用程序的绝佳IDE，Angular也是如此。
- en: In this section, we will look at some extensions (also called plugins) that
    can help us with our development.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一些扩展（也称为插件），这些扩展可以帮助我们进行开发。
- en: 'Let''s look at the package names and repository URLs:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看软件包名称和存储库URL：
- en: '**Angular Language Service**: [https://github.com/angular/vscode-ng-language-service](https://github.com/angular/vscode-ng-language-service). Provided
    by the official Angular team, this extension helps us with completions in template
    files and template strings, and diagnostics for templates and Angular annotations.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular Language Service**：[https://github.com/angular/vscode-ng-language-service](https://github.com/angular/vscode-ng-language-service)。由官方Angular团队提供，此扩展可帮助我们在模板文件和模板字符串中进行补全，并为模板和Angular注释提供诊断。'
- en: '**Angular v5 Snippets**: [https://github.com/johnpapa/vscode-angular-snippets](https://github.com/johnpapa/vscode-angular-snippets). The
    extension name is Angular v5; the GitHub project repository doesn''t specify a
    name. So, we can expect snippets for future versions of Angular from the plugin
    author. This is a powerful tool that can help us to create almost everything within
    an Angular application; you can see the complete list in the GitHub repository.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular v5 Snippets**：[https://github.com/johnpapa/vscode-angular-snippets](https://github.com/johnpapa/vscode-angular-snippets)。扩展名为Angular
    v5；GitHub项目存储库没有指定名称。因此，我们可以期望从插件作者那里获得未来版本的Angular的代码片段。这是一个强大的工具，可以帮助我们几乎在Angular应用程序中创建任何东西；您可以在GitHub存储库中看到完整的列表。'
- en: '**Angular Support**: [https://github.com/VismaLietuva/vscode-angular-support](https://github.com/VismaLietuva/vscode-angular-support).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Angular Support**：[https://github.com/VismaLietuva/vscode-angular-support](https://github.com/VismaLietuva/vscode-angular-support)。'
- en: 'Go to and peek definition from:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 转到并从中查看定义：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Last but not least, we recommend that you use the GitLens plugin. This extension
    is extremely important, because it helps us to visualize our code in the Git repository,
    while also providing integration with GitHub or Bitbucket.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们建议您使用GitLens插件。这个扩展非常重要，因为它帮助我们在Git存储库中可视化我们的代码，同时还提供与GitHub或Bitbucket的集成。
- en: '**GitLens**: [https://github.com/eamodio/vscode-gitlens](https://github.com/eamodio/vscode-gitlens).'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLens**：[https://github.com/eamodio/vscode-gitlens](https://github.com/eamodio/vscode-gitlens)。'
- en: Supercharge the Git capabilities built into Visual Studio Code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 增强内置于Visual Studio Code中的Git功能。
- en: – Gitlens
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: – Gitlens
- en: You can explore the navigation for repositories and file histories
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以探索存储库和文件历史记录的导航
- en: You can also explore commits and visualize comparisons between branches, tags,
    and commits
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以探索提交并可视化分支、标签和提交之间的比较
- en: There is an authorship code lens, showing the most recent commits and number
    of authors to the top of files and/or on code blocks
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个作者代码镜头，显示文件顶部和/或代码块上最近的提交和作者数量
- en: '**GitLens Plugin**: [https://gitlens.amod.io/](https://gitlens.amod.io/). This
    extension is extremely important, because it helps us to visualize our code in
    the Git repository, while also providing integration with GitHub or Bitbucket.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLens插件**：[https://gitlens.amod.io/](https://gitlens.amod.io/)。这个扩展非常重要，因为它帮助我们在Git存储库中可视化我们的代码，同时还提供与GitHub或Bitbucket的集成。'
- en: 'Also, it''s possible to install any extension through the IDE itself. To do
    that, follow these steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以通过IDE本身安装任何扩展。要做到这一点，请按照以下步骤操作：
- en: Open VS Code.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VS Code。
- en: 'Click on the last icon on the left-hand sidebar; you can see it in the following
    screenshot:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击左侧边栏上的最后一个图标；您可以在以下截图中看到它：
- en: '![](assets/f6a24014-3903-4bc6-a3e8-d1487d4bcfcb.png)VS Code extension installation'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f6a24014-3903-4bc6-a3e8-d1487d4bcfcb.png)VS Code扩展安装'
- en: Just type what you want to search for in the search input field, and click install.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在搜索输入字段中键入要搜索的内容，然后单击安装。
- en: We now have everything we need to start developing Angular applications. In
    the next section, we will look at how to create an Angular application using the
    Angular CLI.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经拥有了开始开发Angular应用程序所需的一切。在下一节中，我们将看看如何使用Angular CLI创建Angular应用程序。
- en: Creating a simple Angular application
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的Angular应用程序
- en: In this chapter, we will cover all of the main points for the development of
    web applications using the Angular framework and the Angular CLI. Now, it's time
    to get in touch with the code and develop an application from start to finish.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖使用Angular框架和Angular CLI开发Web应用程序的所有要点。现在，是时候接触代码并从头到尾开发一个应用程序了。
- en: 'In this example project, we will develop a simple frontend application to consume
    the data of an API and display it on the screen – something like a simple blog.
    Open your Terminal and type the following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例项目中，我们将开发一个简单的前端应用程序来消耗API的数据并在屏幕上显示它 - 类似于一个简单的博客。打开您的终端并键入以下命令：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that the  `--routing` flag is optional, but, since our next example will
    use routes, it is a good practice to start an application with that flag. After
    the Angular CLI has installed, you should see the following message on your Terminal:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`--routing`标志是可选的，但由于我们的下一个示例将使用路由，因此最好在启动应用程序时使用该标志。安装了Angular CLI后，您应该在终端上看到以下消息：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The structure of an Angular application
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Angular应用程序的结构
- en: Now that we have created our application, let's examine some important files.
    Although these files have already been set up and and are ready for use, we often
    need to add settings, and even other modules, in real-world applications.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的应用程序，让我们检查一些重要的文件。尽管这些文件已经设置好并准备好使用，但在现实世界的应用程序中，我们经常需要添加设置，甚至其他模块。
- en: 'Open the `chapter03` folder in VS Code; you will see the following screen in
    the VS Code explore tab:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在VS Code中打开`chapter03`文件夹；您将在VS Code资源管理器选项卡中看到以下屏幕：
- en: '![](assets/7bce726d-6e59-4e39-8e65-cd7d4d60e0bc.png)Angular project structure'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7bce726d-6e59-4e39-8e65-cd7d4d60e0bc.png)Angular项目结构'
- en: 'So, inside the `/src/app` folder, we have the five main blocks of an Angular
    application, except for the service (which we will see soon):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在`/src/app`文件夹中，除了服务（我们很快将看到）外，我们还有Angular应用程序的五个主要块：
- en: '| `app.routing.module.ts` | Route |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `app.routing.module.ts` | 路由 |'
- en: '| `app.component.css` | Style sheet |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `app.component.css` | 样式表 |'
- en: '| `app.component.html` | Template |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `app.component.html` | 模板 |'
- en: '| `app.component.spec.ts` | Test |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `app.component.spec.ts` | 测试 |'
- en: '| `app.component.ts` | @Component |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `app.component.ts` | @Component |'
- en: '| `app.module.ts` | @NgModule |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `app.module.ts` | @NgModule |'
- en: The package.json file
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: package.json文件
- en: 'The `package.json` file is very common in web applications that use Node.js
    modules. It is often found in frontend applications nowadays, in addition to server-side
    applications with Node.js. With the Angular framework, it is not different; this
    is one of the great advantages of the new version of Angular, since we can only
    import modules that are extremely necessary for the application, reducing the
    size and build time. Let''s look at the contents of the `package.json` file. We
    added some comments before each important section:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json`文件在使用Node.js模块的Web应用程序中非常常见。如今，它经常出现在前端应用程序中，除了使用Node.js的服务器端应用程序。对于Angular框架来说，它也不例外；这是新版本Angular的一个巨大优势，因为我们只能导入对应用程序非常必要的模块，从而减小了大小和构建时间。让我们看一下`package.json`文件的内容。我们在每个重要部分之前添加了一些注释：'
- en: '[PRE11]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This file is automatically changed when we install a new module. And, we often
    add some commands inside the tag scripts, as you will see in the next chapters. You
    can read more about the `package.json` file in the official npm documentation
    at [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们安装新模块时，此文件会自动更改。而且，我们经常在标签脚本内添加一些命令，正如您将在接下来的章节中看到的那样。您可以在官方npm文档的[https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)中阅读更多关于`package.json`文件的信息。
- en: Dotfiles – .editorconfig, .gitignore, and .angular-cli.json
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dotfiles - .editorconfig，.gitignore和.angular-cli.json
- en: 'Dotfiles are the configuration files that start with a dot; they are always
    in the background of the project, but they are very important. They are used to
    customize your system. The name dotfiles is derived from the configuration files
    in Unix-like systems. In an Angular project, we will see three of these files:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Dotfiles是以点开头的配置文件；它们始终在项目的后台，但它们非常重要。它们用于自定义您的系统。名称dotfiles源自类Unix系统中的配置文件。在Angular项目中，我们将看到其中三个文件：
- en: '`.editorconfig`: This file configures the text editor to use a particular style
    of code, so that the project is consistent, even though it is being edited by
    several people and in several types of text editors.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.editorconfig`：此文件配置文本编辑器以使用特定的代码样式，以便项目保持一致，即使它由多人和多种文本编辑器编辑。'
- en: '`.gitignore`: As the name suggests, it ignores determined folders and files,
    so that they are not tracked by source control. We often find `node_modules` and
    a `dist` folder that do not require version control, because they are generated
    every time we install the application or run build commands.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.gitignore`：顾名思义，它会忽略确定的文件夹和文件，以便它们不被源代码控制跟踪。我们经常发现`node_modules`和`dist`文件夹不需要版本控制，因为它们在每次安装应用程序或运行构建命令时都会生成。'
- en: '`.angular-cli.json`: Stores the project settings and is constantly used when
    executing build or server commands. There can be several Angular applications
    in a single project. Let''s look at some details and inspect `.angular-cli.json`:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.angular-cli.json`：存储项目设置，并在执行构建或服务器命令时经常使用。在单个项目中可能有几个Angular应用程序。让我们看一些细节并检查`.angular-cli.json`：'
- en: '[PRE12]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Environments
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境
- en: 'Inside of the `src/environments` folder, we find two configuration files. One
    is called `environment.prod.ts`, and the other is `environment.ts`. The Angular
    CLI will know what to use, depending on the command that we use; for example,
    consider the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/environments`文件夹中，我们找到两个配置文件。一个称为`environment.prod.ts`，另一个是`environment.ts`。Angular
    CLI将根据我们使用的命令来决定使用哪一个；例如，考虑以下命令：
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If we use it, then Angular will use the `environment.prod.ts` file, and, for
    the other commands, such as `ng serve`, it will use `environment.ts`. This is
    very useful, especially when we have a local API and one in `production`, using
    different paths.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用它，那么Angular将使用`environment.prod.ts`文件，对于其他命令，比如`ng serve`，它将使用`environment.ts`。这非常有用，特别是当我们有一个本地API和一个在`production`中时，使用不同的路径。
- en: 'Both files have almost the same code; see `environment.prod.ts`, as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 两个文件几乎具有相同的代码；请参阅`environment.prod.ts`，如下所示：
- en: '[PRE14]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `environment.ts` file is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`environment.ts`文件如下：'
- en: '[PRE15]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that the Boolean `true` (on production) and `false` (on development) is
    the only difference between the two files, at this first stage. It is clear that,
    in addition to the files that we mentioned, we have a lot of other files within
    an Angular application, and all of them are extremely important. But, for now,
    let's focus on these. Don't worry; throughout the course of the book, we will
    look at more of them in detail, during the development of our example application.
    For now, we are going to focus on creating the simple example that we are using
    in this chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这个第一阶段，`true`（在生产中）和`false`（在开发中）是这两个文件之间唯一的区别。显然，除了我们提到的文件之外，Angular应用程序中还有许多其他文件，它们都非常重要。但是，现在让我们专注于这些。别担心；在本书的过程中，我们将详细了解更多内容，在开发我们的示例应用程序时。现在，我们将专注于创建本章中使用的简单示例。
- en: Running the sample application
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行示例应用程序
- en: 'Now that we have started our project, we will run the built-in Angular CLI
    server to see how our application looks:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了我们的项目，我们将运行内置的Angular CLI服务器，以查看我们的应用程序的外观：
- en: Open VS Code in the project root to the `chapter03` folder.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录中打开VS Code到`chapter03`文件夹。
- en: For this example, we will use the integrated Terminal for the code; for this,
    click on the top menu in `view`, and then click `Integrated Terminal`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用集成终端进行编码；为此，请点击顶部菜单中的`view`，然后点击`Integrated Terminal`。
- en: 'Type the following command in the Terminal:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中键入以下命令：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You will see a message similar to the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到类似以下的消息：
- en: '[PRE17]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Behind the scenes, the Angular CLI will use the webpack module manager. Later
    in this book, you will see how to export and customize the webpack file.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在幕后，Angular CLI将使用webpack模块管理器。在本书的后面，您将看到如何导出和自定义webpack文件。
- en: Now, go to `http://localhost:4200` and check the result; you will see the welcome
    page from the boilerplate application that we created previously. You can find
    the code behind this page at `src/app/app.component.html` – it's our template.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到`http://localhost:4200`并检查结果；您将看到我们之前创建的样板应用程序的欢迎页面。您可以在`src/app/app.component.html`中找到这个页面的代码
    - 这是我们的模板。
- en: Now, it's time to add a new module to our application.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候向我们的应用程序添加一个新模块了。
- en: Adding a new module
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新模块
- en: 'In this example, we will, so that you can see how to build applications using
    the Angular CLI. Even in this very basic example, we will cover the following
    points:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将演示如何使用Angular CLI构建应用程序。即使在这个非常基本的例子中，我们也将涵盖以下几点：
- en: How to organize an Angular application
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何组织一个Angular应用程序
- en: Creating modules
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模块
- en: Creating services
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建服务
- en: Template data binding
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板数据绑定
- en: Running an application in production
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境中运行应用程序
- en: 'Now, let''s create a module that shows us a list of beers:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个显示啤酒列表的模块：
- en: 'Open VS Code, and, inside the integrated Terminal, type the following command:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VS Code，在集成终端内输入以下命令：
- en: '[PRE18]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Note that the command `ng g module` is a shortcut to `ng generate module <module-name>`,
    and this command just creates the module; we need to add routes, components, and
    templates, and also import the `beers` module in `app.modules.ts`, at the root
    of the `app` folder. The preceding command will generate the following structure
    and file content inside of our project: `src/app/beers/beers.module.ts`. The `beers.module.ts`
    contents are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，命令`ng g module`是`ng generate module <module-name>`的快捷方式，这个命令只是创建模块；我们需要添加路由、组件和模板，并且在`app`文件夹的根目录的`app.modules.ts`中导入`beers`模块。上述命令将在我们的项目中生成以下结构和文件内容：`src/app/beers/beers.module.ts`。`beers.module.ts`的内容如下：
- en: '[PRE19]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This is a pretty simple boilerplate code, but it is very useful. Now, we will
    add the missing pieces.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的样板代码，但非常有用。现在，我们将添加缺失的部分。
- en: 'Add the `beers` module to your `app` module; open `app.module.ts` and replace
    the code with the following lines:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`beers`模块添加到您的`app`模块；打开`app.module.ts`并用以下行替换代码：
- en: '[PRE20]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that we imported `BeersModule` and added it to the `imports` array.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们导入了`BeersModule`并将其添加到`imports`数组中。
- en: Adding a new component
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新组件
- en: Now, we need a component to show a list of beers, since we just created a module
    called `Beers`. Later, you will see how to use an API and an Angular service to
    load a list of beers; for now, we will focus on the creation of our component.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个组件来显示啤酒列表，因为我们刚刚创建了一个名为`Beers`的模块。稍后，您将看到如何使用API和Angular服务来加载啤酒列表；现在，我们将专注于创建我们的组件。
- en: 'Inside of the root folder, and with the integrated VS Code Terminal, type the
    following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在根文件夹内，并在集成的VS Code终端中，输入以下命令：
- en: '[PRE21]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding command will generate the following structure:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将生成以下结构：
- en: '![](assets/74c96c21-d187-4a2a-a86f-c67659f23185.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/74c96c21-d187-4a2a-a86f-c67659f23185.png)'
- en: The `BeersModule` and `Component` files have been created. We now have our module,
    template, and component file. Let's add a new route.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`BeersModule`和`Component`文件已经创建。现在我们有了我们的模块、模板和组件文件。让我们添加一个新的路由。'
- en: Adding a new route
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新路由
- en: 'As you saw previously, routes are part of every web application. Now, we will
    add a new route, so that we can access the content of our `beers` module. Open
    `src/app/app-routing.module.ts` and replace the code with the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如您之前所见，路由是每个Web应用程序的一部分。现在，我们将添加一个新的路由，以便我们可以访问我们的`beers`模块的内容。打开`src/app/app-routing.module.ts`并用以下代码替换：
- en: '[PRE22]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that we are just adding the new route to an existing route file (in this
    case, `app.routing.module.ts`), as this example is extremely simple. But, in larger
    applications, it is recommended that you create individual route files for each
    application module.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们只是将新路由添加到现有的路由文件中（在这种情况下是`app.routing.module.ts`），因为这个例子非常简单。但是，在更大的应用程序中，建议为每个应用程序模块创建单独的路由文件。
- en: Creating an Angular service
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Angular服务
- en: Angular services are used to handle data; it can be internal data (from one
    component to another) or something external, such as communicating with an API
    endpoint. Almost all frontend applications with JavaScript frameworks use this
    technique. In Angular, we call this a service, and we use some modules built into
    the Angular framework to complete the task: `HttpClient` and `HttpClientModule`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Angular服务用于处理数据；它可以是内部数据（从一个组件到另一个组件）或外部数据，比如与API端点通信。几乎所有使用JavaScript框架的前端应用程序都使用这种技术。在Angular中，我们称之为服务，并且我们使用一些内置在Angular框架中的模块来完成任务：`HttpClient`和`HttpClientModule`。
- en: 'Let''s look at how the Angular CLI can help us:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Angular CLI如何帮助我们：
- en: 'Open VS Code, and, inside the integrated Terminal, type the following command:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VS Code，在集成终端内输入以下命令：
- en: '[PRE23]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The previous command will generate two new files in the `beers` folder:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在`beers`文件夹中生成两个新文件：
- en: '`beers.service.spec.ts` and `beers.service.ts`.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`beers.service.spec.ts`和`beers.service.ts`。'
- en: 'Add the newly created `Service` as a dependency provider to `beers.module.ts`.
    Open `src/app/beers/beers.module.ts` and add the following lines:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的`Service`作为依赖提供者添加到`beers.module.ts`。打开`src/app/beers/beers.module.ts`并添加以下行：
- en: '[PRE24]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In VS Code, we have import module support, so, when you start to type the module''s
    name, you will see the following help screen:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在VS Code中，我们有导入模块支持，所以当您开始输入模块的名称时，您将看到以下帮助屏幕：
- en: '![](assets/b24600db-4493-450f-bf85-c957e8e13a5d.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b24600db-4493-450f-bf85-c957e8e13a5d.png)'
- en: 'The final `beers.module.ts` code will look as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`beers.module.ts`代码将如下所示：
- en: '[PRE25]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now, it's time to connect with an API using a service. To get as close to a
    real application as possible, we'll use a public API in this example. In the next
    steps, we will effectively create our service and add data binding to our template.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候使用服务连接到API了。为了尽可能接近真实应用程序，我们将在这个例子中使用一个公共API。在接下来的步骤中，我们将有效地创建我们的服务并将数据绑定到我们的模板上。
- en: 'For this example, we will use the free [https://punkapi.com/](https://punkapi.com/) API:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用免费的[https://punkapi.com/](https://punkapi.com/) API：
- en: 'Open `beers.service.ts` and replace the code with the following lines:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`beers.service.ts`，并用以下行替换代码：
- en: '[PRE26]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, we need to tell the component that we need to use this service to load
    the data and transmit it to our template.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要告诉组件我们需要使用这个服务来加载数据并将其传输到我们的模板中。
- en: 'Open `src/app/beers/beers.component.ts` and replace the code with the following:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/beers/beers.component.ts`，并用以下代码替换代码：
- en: '[PRE28]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Template data binding
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板数据绑定
- en: 'Now that we have a service that connects to an API endpoint and receives a
    JSON file, let''s make some small changes to our views, known as templates in
    the Angular world. The templates are the HTML files inside of the `module` folder:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个连接到API端点并接收JSON文件的服务，让我们对我们的视图进行一些小的更改，即Angular世界中称为模板的视图。模板是`module`文件夹中的HTML文件：
- en: Open `src/app/app.component.html` and remove all of the code before the `<router-outlet></route-outlet>`
    tags.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/app.component.html`，并删除`<router-outlet></route-outlet>`标签之前的所有代码。
- en: 'Open `src/app/beers/beers.component.html` and add the following code, right
    after the `beers` works paragraph:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/app/beers/beers.component.html`，并在`beers`工作段落之后添加以下代码：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Note that we are using the curly brace template tags (`{{}}`) and a `*ngFor`
    directive to display our data. Let''s look at some Angular data binding types:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用花括号模板标签(`{{}}`)和`*ngFor`指令来显示我们的数据。让我们看一些Angular数据绑定类型：
- en: '[PRE30]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we need to add some style to `beers.component.html`; open `src/app/beers/beers.component.css`
    and add the following code:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要为`beers.component.html`添加一些样式；打开`src/app/beers/beers.component.css`，并添加以下代码：
- en: '[PRE31]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We are now very close to completing our example application. The last step is
    to build our application and see the final result.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在非常接近完成我们的示例应用程序。最后一步是构建我们的应用程序并查看最终结果。
- en: Simple deployment
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单部署
- en: Now that we have everything ready, let's look at how to build our application.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了一切，让我们看看如何构建我们的应用程序。
- en: 'First, we will look at the application after the changes have been made:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在更改后查看应用程序：
- en: Open VS Code, click on view in the top menu bar, and click Integrated Terminal.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VS Code，单击顶部菜单栏中的视图，然后单击集成终端。
- en: 'Type the following command in your Terminal:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中输入以下命令：
- en: '[PRE32]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Open your default browser and go to `http://localhost.com:4200/beers`.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的默认浏览器，转到`http://localhost.com:4200/beers`。
- en: 'Congratulations; you should see the following screenshot:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜；您应该看到以下截图：
- en: '![](assets/186751db-e369-4760-ba47-2be0b5666ce0.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/186751db-e369-4760-ba47-2be0b5666ce0.png)'
- en: Note that we are running the command for development, using `ng serve` behind
    the  `npm start` command.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用`npm start`命令后面的`ng serve`命令进行开发。
- en: 'Now, let''s use the command to build the application, and check the results:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用命令构建应用程序，并检查结果：
- en: Go back to VS Code and type *Ctrl* *+* *C* to stop the server.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回VS Code，然后输入*Ctrl* *+* *C*停止服务器。
- en: 'Type the following command:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE33]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The preceding command will prepare the application for production; the Angular
    CLI will do all of the hard work for us. Now, we have a folder at the root of
    `chapter03`, as shown in the following screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将准备应用程序进行生产；Angular CLI将为我们完成所有繁重的工作。现在，我们在`chapter03`根目录下有一个文件夹，如下截图所示：
- en: '![](assets/65c85104-5ea9-44e6-981e-9ba6e4ebf8a7.png)The dist folder'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/65c85104-5ea9-44e6-981e-9ba6e4ebf8a7.png)dist文件夹'
- en: 'As you can see, all of our application is inside of this folder, as optimized
    as possible; however, to see the contents, we need a web server. In this example,
    we will use the `http-server` node package, a very useful Node.js module to make
    a particular directory on a simple web server. You can find more information about
    http-server at [https://www.npmjs.com/package/http-server](https://www.npmjs.com/package/http-server):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的整个应用程序都在这个文件夹中，尽可能地进行了优化；但是，要查看内容，我们需要一个Web服务器。在本例中，我们将使用`http-server`节点包，这是一个非常有用的Node.js模块，可以将特定目录放在简单的Web服务器上。您可以在[https://www.npmjs.com/package/http-server](https://www.npmjs.com/package/http-server)找到有关http-server的更多信息：
- en: 'Go back to VS Code and the integrated Terminal, and type the following command:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回VS Code和集成终端，输入以下命令：
- en: '[PRE34]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Still in the integrated Terminal, type the following command:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在集成终端中，输入以下命令：
- en: '[PRE35]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You will see the following message in your Terminal:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在终端中看到以下消息：
- en: '[PRE36]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This means that everything went well, and you can already access the contents
    of the `dist` folder in your browser.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着一切进行顺利，您现在可以在浏览器中访问`dist`文件夹的内容了。
- en: Open your default browser and go to `http://localhost.com:8080/beers`.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的默认浏览器，转到`http://localhost.com:8080/beers`。
- en: We're done; now, let's save everything that we did within the `chapter03` folder
    in our local repository, using some Git commands. This step is not required for
    the next chapters, but it is highly recommended.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了；现在，让我们使用一些Git命令将我们在本地存储库中`chapter03`文件夹中所做的一切保存起来。这一步对于接下来的章节并不是必需的，但强烈建议这样做。
- en: 'Open your Terminal in the `chapter03` folder and type the following command:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter03`文件夹中打开您的终端，并输入以下命令：
- en: '[PRE37]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'After the previous command, you will see the following output in your Terminal:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一个命令之后，您将在终端中看到以下输出：
- en: '[PRE38]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Well, we have reached the end of another chapter, and you should now understand
    how to create applications with Angular. In this chapter, we covered the main
    points that make Angular a powerful framework. You can download the code samples
    that we used in this chapter directly from GitHub, at [https://github.com/PacktPublishing](https://github.com/PacktPublishing).
    In the next chapter, we will go deep inside the backend API.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，我们已经到达了另一章的结尾，现在您应该了解如何使用Angular创建应用程序。在本章中，我们涵盖了使Angular成为强大框架的主要要点。您可以直接从GitHub下载我们在本章中使用的代码示例，网址为[https://github.com/PacktPublishing](https://github.com/PacktPublishing)。在下一章中，我们将深入了解后端API。
