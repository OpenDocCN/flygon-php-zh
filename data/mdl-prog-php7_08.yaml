- en: Chapter 8. Building the Customer Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。构建客户模块
- en: The customer module provides a basis for further sales functionality of our
    web shop. At the very basic level, it is responsible for register, login, management
    and display of relevant customer information. It is a requirement for the later
    sales module, that adds the actual sales capabilities to our web shop application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 客户模块为我们的网店提供了进一步销售功能的基础。在非常基本的层面上，它负责注册、登录、管理和显示相关客户信息。这是后续销售模块的要求，它为我们的网店应用程序添加了实际的销售功能。
- en: 'In this chapter we will be covering following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Requirements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求
- en: Dependencies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖关系
- en: Implementation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现
- en: Unit testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Functional testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: Requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求
- en: Following the high level application requirements, defined under [Chapter 4](ch04.html
    "Chapter 4. Requirement Specification for a Modular Web Shop App"), *Requirement
    Specification for Modular Web Shop App*, our module will have a single `Customer`
    entity defined.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[第4章](ch04.html "第4章。模块化网店应用的需求规范")中定义的高级应用程序要求，*模块化网店应用的需求规范*，我们的模块将定义一个名为`Customer`的实体。
- en: 'The `Customer` entity includes the following properties:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`Customer`实体包括以下属性：'
- en: '`id`: integer, auto-increment'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`: integer, auto-increment'
- en: '`email`: string, unique'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`: string, unique'
- en: '`username`: string, unique, needed for login system'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`username`: string, unique, needed for login system'
- en: '`password`: string'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`: string'
- en: '`first_name`: string'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`first_name`: string'
- en: '`last_name`: string'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_name`: string'
- en: '`company`: string'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`company`: string'
- en: '`phone_number`: string'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phone_number`: string'
- en: '`country`: string'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`country`: string'
- en: '`state`: string'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`: string'
- en: '`city`: string'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`city`: string'
- en: '`postcode`: string'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postcode`: string'
- en: '`street`: string'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`street`: string'
- en: Throughout this chapter, aside from just adding the `Customer` entity and its
    CRUD pages, we also need to address the creation of login, register, forgot your
    password pages, as well as override a core module service responsible for building
    a customer menu.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，除了添加`Customer`实体及其CRUD页面之外，我们还需要处理登录、注册、忘记密码页面的创建，以及覆盖一个负责构建客户菜单的核心模块服务。
- en: Dependencies
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖关系
- en: The module has no firm dependencies on any other module. While it does override
    a service defined in core module, the module itself is not dependent on it. Furthermore,
    some security config will need to be provided as part of the core application,
    as we will see later on.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块不依赖于任何其他模块。虽然它覆盖了核心模块中定义的一个服务，但模块本身并不依赖于它。此外，一些安全配置将作为核心应用程序的一部分提供，我们稍后会看到。
- en: Implementation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现
- en: 'We start of by creating a new module called `Foggyline\CustomerBundle`. We
    do so with the help of console, by running the command as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为`Foggyline\CustomerBundle`的新模块。我们可以通过控制台运行以下命令来实现：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The command triggers an interactive process asking us several questions along
    the way, as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令触发了一个交互式过程，在这个过程中会问我们一些问题，如下面的截图所示：
- en: '![Implementation](graphics/B05460_08_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![实现](graphics/B05460_08_01.jpg)'
- en: 'Once done, the following structure is generated for us:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们得到了以下结构：
- en: '![Implementation](graphics/B05460_08_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![实现](graphics/B05460_08_02.jpg)'
- en: 'If we now take a look at the `app/AppKernel.php` file, we would see the following
    line under the `registerBundles` method:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看`app/AppKernel.php`文件，我们会在`registerBundles`方法下看到以下行：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similarly, the `app/config/routing.yml` directory has the following route definition
    added to it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`app/config/routing.yml`目录中添加了以下路由定义：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here we need to change `prefix: /` into `prefix: /customer/`, so we don''t
    collide with core module routes. Leaving it as `prefix: /` would simply overrun
    our core `AppBundle` and output **Hello World!** from the `src/Foggyline/CustomerBundle/Resources/views/Default/index.html.twig`
    template to the browser at this point. We want to keep things nice and separated.
    What this means is that the module does not define `root` route for itself.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '在这里，我们需要将`prefix: /`更改为`prefix: /customer/`，这样我们就不会与核心模块的路由冲突。保持`prefix: /`不变将简单地覆盖我们的核心`AppBundle`，并从`src/Foggyline/CustomerBundle/Resources/views/Default/index.html.twig`模板向浏览器输出**Hello
    World!**。我们希望保持事情的清晰和分离。这意味着该模块不为自己定义`root`路由。'
- en: Creating a customer entity
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建客户实体
- en: 'Let''s go ahead and create a `Customer` entity. We do so by using the console,
    as shown here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个`Customer`实体。我们可以通过控制台来实现：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command triggers the interactive generator, where we need to provide entity
    properties. Once done, the generator creates the `Entity/Customer.php` and `Repository/CustomerRepository.php`
    files within the `src/Foggyline/CustomerBundle/` directory. After this, we need
    to update the database, so it pulls in the `Customer` entity, by running the following
    command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令触发了交互式生成器，我们需要提供实体属性。完成后，生成器将在`src/Foggyline/CustomerBundle/`目录中创建`Entity/Customer.php`和`Repository/CustomerRepository.php`文件。之后，我们需要更新数据库，以便通过运行以下命令引入`Customer`实体：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This results in a screen as shown in the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了一个屏幕，如下面的截图所示：
- en: '![Creating a customer entity](graphics/B05460_08_07.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![创建客户实体](graphics/B05460_08_07.jpg)'
- en: 'With entity in place, we are ready to generate its CRUD. We do so by using
    the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有了实体，我们就可以生成它的CRUD。我们可以通过以下命令来实现：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This results in an interactive output as shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了一个交互式输出，如下所示：
- en: '![Creating a customer entity](graphics/B05460_08_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![创建客户实体](graphics/B05460_08_03.jpg)'
- en: 'This results in the `src/Foggyline/CustomerBundle/Controller/CustomerController.php`
    directory being created. It also adds an entry to our `app/config/routing.yml`
    file as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了`src/Foggyline/CustomerBundle/Controller/CustomerController.php`目录的创建。它还在我们的`app/config/routing.yml`文件中添加了一个条目，如下所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Again, the view files were created under the `app/Resources/views/customer/`
    directory, which is not what we might expect. We want them under our module `src/Foggyline/CustomerBundle/Resources/views/Default/customer/`
    directory, so we need to copy them over. Additionally, we need to modify all of
    the `$this->render` calls within our `CustomerController` by appending the `FoggylineCustomerBundle:default:
    string` to each of the template path.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '同样，视图文件是在`app/Resources/views/customer/`目录下创建的，这不是我们所期望的。我们希望它们在我们的模块`src/Foggyline/CustomerBundle/Resources/views/Default/customer/`目录下，所以我们需要将它们复制过去。此外，我们需要修改`CustomerController`中的所有`$this->render`调用，通过在每个模板路径后附加`FoggylineCustomerBundle:default:
    string`来实现。'
- en: Modifying the security configuration
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改安全配置
- en: 'Before we proceed further with the actual changes within our module, let''s
    imagine our module requirements mandate a certain security configuration in order
    to make it work. These requirements state that we need to apply several changes
    to the `app/config/security.yml` file. We first edit the `providers` element by
    adding to it the following entry:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行模块内的实际更改之前，让我们想象一下我们的模块要求规定了某种安全配置以使其工作。这些要求规定我们需要对`app/config/security.yml`文件进行几处更改。我们首先编辑`providers`元素，添加以下条目：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This effectively defines our `Customer` class as a security provider, whereas
    the `username` element is the property storing user identity.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这有效地将我们的`Customer`类定义为安全提供者，而`username`元素是存储用户身份的属性。
- en: 'We then define the encoder type under the `encoders` element, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`encoders`元素下定义编码器类型，如下所示：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This tells Symfony to use the `bcrypt` algorithm with a value of `12` for algorithmic
    cost while encrypting our password. This way our passwords won't end up in clear
    text when saved in the database.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉Symfony在加密密码时使用`bcrypt`算法，算法成本为`12`。这样，我们的密码在保存到数据库中时就不会以明文形式出现。
- en: 'We then go ahead and define a new firewall entry under the firewalls element,
    as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续在`firewalls`元素下定义一个新的防火墙条目，如下所示：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'There is quite a lot going on here. Our firewall uses the `anonymous: ~` definition
    to denote that it does not really need a user to be logged in to see certain pages.
    By default, all Symfony users are authenticated as anonymous, as shown in the
    following screenshot, on the **Developer** toolbar:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '这里发生了很多事情。我们的防火墙使用`anonymous: ~`定义来表示它实际上不需要用户登录即可查看某些页面。默认情况下，所有Symfony用户都被验证为匿名用户，如下图所示，在**Developer**工具栏上：'
- en: '![Modifying the security configuration](graphics/B05460_08_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![修改安全配置](graphics/B05460_08_04.jpg)'
- en: The `form_login` definition takes three properties. The `login_path` and the
    `check_path` point to our custom route `foggyline_customer_login`. When the security
    system initiates the authentication process, it will redirect the user to the
    `foggyline_customer_login` route, where we will soon implement needed controller
    logic and view templates in order to handle the login form. Once logged in, the
    `default_target_path` determines where the user will be redirected to.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_login`定义有三个属性。`login_path`和`check_path`指向我们的自定义路由`foggyline_customer_login`。当安全系统启动认证过程时，它将重定向用户到`foggyline_customer_login`路由，我们将很快实现所需的控制器逻辑和视图模板，以处理登录表单。一旦登录，`default_target_path`确定用户将被重定向到哪里。'
- en: 'Finally, we reuse the Symfony anonymous user feature in order to exclude certain
    pages from being forbidden. We want our non-authenticated customer to be able
    to access login, register, and forgotten password pages. To make that possible,
    we add the following entries under the `access_control` element:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们重用Symfony匿名用户功能，以排除某些页面被禁止。我们希望我们的非认证客户能够访问登录、注册和忘记密码页面。为了实现这一点，我们在`access_control`元素下添加以下条目：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is worth noting that this approach to handling security between module and
    base application is by far the ideal one. This is merely one possible example
    of how we can achieve what is needed for this module to make it functional.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这种处理模块和基本应用程序之间安全性的方法远非理想。这只是一个可能的例子，说明了我们如何实现这个模块所需的功能。
- en: Extending the customer entity
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展客户实体
- en: 'With the preceding `security.yml` additions in place, we are now ready to actually
    start implementing the registration process. First we edit the `Customer` entity
    within the `src/Foggyline/CustomerBundle/Entity/` directory, by making it implement
    the `Symfony\Component\Security\Core\User\UserInterface`, `\Serializable`. This
    implies implementation of the following methods:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有了前面的`security.yml`添加，我们现在准备开始实际实现注册流程。首先，我们编辑`src/Foggyline/CustomerBundle/Entity/`目录中的`Customer`实体，使其实现`Symfony\Component\Security\Core\User\UserInterface`、`\Serializable`。这意味着需要实现以下方法：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Even though all of the passwords need to be hashed with salt, the `getSalt`
    function in this case is irrelevant since `bcrypt` does this internally. The `getRoles`
    function is the important bit. We can return one or more roles that individual
    customers will have. To make things simple, we will only assign one `ROLE_USER`
    role to each of our customers. But this can easily be made much more robust, so
    that the roles are stored in the database as well. The `eraseCredentials` function
    is merely a cleanup method, which we left blank.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有密码都需要使用盐进行哈希处理，但在这种情况下`getSalt`函数是无关紧要的，因为`bcrypt`在内部已经处理了这个问题。`getRoles`函数是重要的部分。我们可以返回一个或多个个体客户将拥有的角色。为了简化，我们将为每个客户分配一个`ROLE_USER`角色。但是这可以很容易地更加健壮，以便将角色存储在数据库中。`eraseCredentials`函数只是一个清理方法，我们将其留空。
- en: Since the user object is first unserialized, serialized, and saved to a session
    per each request, we implement the `\Serializable` interface. The actual implementation
    of serialize and unserialize can include only a fraction of customer properties,
    as we do not need to store everything in the session.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户对象首先被反序列化、序列化并保存到每个请求的会话中，我们实现了`\Serializable`接口。序列化和反序列化的实际实现可以只包括一小部分客户属性，因为我们不需要将所有东西都存储在会话中。
- en: Before we go ahead and start implementing the register, login, forgot your password,
    and other bits, let's go ahead and define the needed services we are going to
    use later on.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续并开始实现注册、登录、忘记密码和其他部分之前，让我们先定义我们稍后要使用的所需服务。
- en: Creating the orders service
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建订单服务
- en: 'We will create an `orders` service which will be used to fill in the data available
    under the **My Account** page. Later on, other modules can override this service
    and inject real customer orders. To define an `orders` service, we edit the `src/Foggyline/CustomerBundle/Resources/config/services.xml`
    file by adding the following under the `services` element:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`orders`服务，用于填充**我的账户**页面下可用的数据。稍后，其他模块可以覆盖此服务并注入真实的客户订单。要定义一个`orders`服务，我们通过在`src/Foggyline/CustomerBundle/Resources/config/services.xml`文件中在`services`元素下添加以下内容来进行编辑：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we go ahead and create the `src/Foggyline/CustomerBundle/Service/CustomerOrders.php`
    directory with content as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续创建`src/Foggyline/CustomerBundle/Service/CustomerOrders.php`目录，内容如下：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `getOrders` method simply returns some dummy data here. We can easily make
    it return an empty array. Ideally, we would want this to return a collection of
    certain types of element that conform to some specific interface.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`getOrders`方法在这里只是返回一些虚拟数据。我们可以很容易地使其返回一个空数组。理想情况下，我们希望它返回符合某些特定接口的某些类型元素的集合。'
- en: Creating the customer menu service
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建客户菜单服务
- en: 'In the previous module we defined a `customer` service that filled in the Customer
    menu with some dummy data. Now we will create an overriding service that fills
    the menu with actual customer data, depending on customer login status. To define
    a `customer menu` service, we edit the `src/Foggyline/CustomerBundle/Resources/config/services.xml`
    file by adding the following under the `services` element:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个模块中，我们定义了一个填充客户菜单的`customer`服务，并填充了一些虚拟数据。现在我们将创建一个覆盖服务，根据客户登录状态填充菜单的实际客户数据。要定义一个`customer
    menu`服务，我们通过在`src/Foggyline/CustomerBundle/Resources/config/services.xml`文件中在`services`元素下添加以下内容来进行编辑：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here we are injecting the `token_storage` and `router` objects into our service,
    as we will need them to construct the menu based on the login state of a customer.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`token_storage`和`router`对象注入到我们的服务中，因为我们需要它们根据客户的登录状态构建菜单。
- en: 'We then go ahead and create the `src/Foggyline/CustomerBundle/Service/Menu/CustomerMenu.php`
    directory with content as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续创建`src/Foggyline/CustomerBundle/Service/Menu/CustomerMenu.php`目录，内容如下：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here we see a menu being constructed based on user login state. This way a customer
    gets to see the **Logout** link when logged in, or **Login** when not logged in.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到一个基于用户登录状态构建菜单。这样，客户在登录时可以看到**注销**链接，未登录时可以看到**登录**链接。
- en: 'We then add the `src/Foggyline/CustomerBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    directory with content as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加`src/Foggyline/CustomerBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`目录，内容如下：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here we are doing the actual `customer_menu` service override. However, this
    won''t kick in until we edit the `src/Foggyline/CustomerBundle/FoggylineCustomerBundle.php`
    directory, by adding the `build` method to it as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在实际进行`customer_menu`服务覆盖。但是，这不会生效，直到我们通过添加以下内容来编辑`src/Foggyline/CustomerBundle/FoggylineCustomerBundle.php`目录的`build`方法：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `addCompilerPass` method call accepts the instance of our `OverrideServiceCompilerPass`,
    ensuring our service override will kick in.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`addCompilerPass`方法调用接受我们的`OverrideServiceCompilerPass`实例，确保我们的服务覆盖将生效。'
- en: Implementing the register process
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现注册流程
- en: 'To implement a register page, we first modify the `src/Foggyline/CustomerBundle/Controller/CustomerController.php`
    file as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现注册页面，我们首先修改`src/Foggyline/CustomerBundle/Controller/CustomerController.php`文件如下：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The register page uses a standard auto-generated Customer CRUD form, simply
    pointing it to the `src/Foggyline/CustomerBundle/Resources/views/Default/customer/register.html.twig`
    template file with content as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注册页面使用标准的自动生成的客户CRUD表单，只需将其指向`src/Foggyline/CustomerBundle/Resources/views/Default/customer/register.html.twig`模板文件，内容如下：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once these two files are in place, our register functionality should be working.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这两个文件就位，我们的注册功能应该就能正常工作了。
- en: Implementing the login process
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现登录流程
- en: 'We will implement the login page on its own `/customer/login` URL, thus we
    edit the `CustomerController.php` file by adding the `loginAction` function as
    follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在独立的`/customer/login` URL上实现登录页面，因此我们通过添加以下`loginAction`函数来编辑`CustomerController.php`文件：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here we are simply checking if the user already tried to login, and if it did
    we are passing that info to the template, along with the potential errors. We
    then edit the `src/Foggyline/CustomerBundle/Resources/views/Default/customer/login.html.twig`
    file with content as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是检查用户是否已经尝试登录，如果是，我们将将该信息传递给模板，以及潜在的错误。然后我们编辑`src/Foggyline/CustomerBundle/Resources/views/Default/customer/login.html.twig`文件，内容如下：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once logged in, the user will be redirected to the `/customer/account` page.
    We create this page by adding the `accountAction` method to the `CustomerController.php`
    file as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦登录，用户将被重定向到`/customer/account`页面。我们通过在`CustomerController.php`文件中添加`accountAction`方法来创建此页面，如下所示：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Using `$this->getUser()` we are checking if logged in user is set, and if so,
    passing its info to the template. We then edit the `src/Foggyline/CustomerBundle/Resources/views/Default/customer/account.html.twig`
    file with content as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`$this->getUser()`我们正在检查已登录用户是否已设置，如果是，则将其信息传递给模板。然后我们编辑`src/Foggyline/CustomerBundle/Resources/views/Default/customer/account.html.twig`文件，内容如下：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'With this we address the actual customer information section of the **My Account**
    page. In its current state, this page should render an Edit form as shown in the
    following screenshot, enabling us to edit all of our customer information:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们解决了**我的账户**页面的实际客户信息部分。在当前状态下，该页面应该呈现一个编辑表单，如下截图所示，使我们能够编辑所有客户信息：
- en: '![Implementing the login process](graphics/B05460_08_05.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![实现登录过程](graphics/B05460_08_05.jpg)'
- en: 'We then address the `<!-- customer_orders -->`, by replacing it with the following
    bits:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过以下方式替换`<!-- customer_orders -->`：
- en: '[PRE24]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This should now render the **My Orders** section of the **My Account** page
    as shown here:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该呈现**My Account**页面的**My Orders**部分，如下所示：
- en: '![Implementing the login process](graphics/B05460_08_06.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: 实现登录流程
- en: This is just dummy data coming from service defined in a `src/Foggyline/CustomerBundle/Resources/config/services.xml`.
    In a later chapter, when we get to the sales module, we will make sure it overrides
    the `foggyline_customer.customer_orders` service in order to insert real customer
    data here.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是来自`src/Foggyline/CustomerBundle/Resources/config/services.xml`中定义的服务的虚拟数据。在后面的章节中，当我们到达销售模块时，我们将确保它覆盖`foggyline_customer.customer_orders`服务，以便在这里插入真实的客户数据。
- en: Implementing the logout process
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现注销流程
- en: 'One of the changes we did to `security.yml` when defining our firewall, was
    configuring the logout path, which we pointed to `/customer/logout`. The implementation
    of that path is done within the `CustomerController.php` file as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义防火墙时，我们对`security.yml`所做的更改之一是配置注销路径，我们将其指向`/customer/logout`。该路径的实现在`CustomerController.php`文件中如下：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note, the `logoutAction` method is actually empty. There is no implementation
    as such. Implementation is not needed, as Symfony intercepts the request and processes
    the logout for us. We did, however, need to define this route as we referenced
    it from our `system.xml` file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`logoutAction`方法实际上是空的。没有实际的实现。不需要实现，因为Symfony拦截请求并为我们处理注销。但是，我们需要定义这个路由，因为我们在`system.xml`文件中引用了它。
- en: Managing forgotten passwords
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理忘记密码
- en: 'The forgotten password feature is going to be implemented as a separate page.
    We edit the `CustomerController.php` file by adding the `forgottenPasswordAction`
    function to it as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记密码功能将作为一个单独的页面实现。我们通过向`CustomerController.php`文件添加`forgottenPasswordAction`函数来编辑它，如下所示：
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here we merely check if the HTTP request is GET or POST, then either send an
    e-mail or load the template. For the sake of simplicity, we haven''t really implemented
    the actual e-mail sending. This is something that needs to be tackled outside
    of this book. The rendered template is pointing to the `src/Foggyline/CustomerBundle/Resources/views/Default/customer/
    forgotten_password.html.twig` file with content as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们仅检查HTTP请求是GET还是POST，然后发送电子邮件或加载模板。为了简单起见，我们实际上没有实现实际的电子邮件发送。这是需要在本书之外解决的问题。渲染的模板指向`src/Foggyline/CustomerBundle/Resources/views/Default/customer/forgotten_password.html.twig`文件，内容如下：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Unit testing
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Aside from the auto-generated `Customer` entity and its CRUD controller, there
    are only two custom service classes that we created as part of this module. Since
    we are not going after full code coverage, we will merely cover `CustomerOrders`
    and `CustomerMenu` service classes as part of the unit testing.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 除了自动生成的`Customer`实体及其CRUD控制器之外，我们创建了两个自定义服务类作为这个模块的一部分。由于我们不追求完整的代码覆盖率，我们将仅在单元测试中涵盖`CustomerOrders`和`CustomerMenu`服务类。
- en: 'We start off by adding the following line under the `testsuites` element of
    our `phpunit.xml.dist` file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`phpunit.xml.dist`文件的`testsuites`元素下添加以下行：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: With that in place, running the `phpunit` command from the root of our shop
    should pick up any test we have defined under the `src/Foggyline/CustomerBundle/Tests/`
    directory.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，从我们商店的根目录运行`phpunit`命令应该能够捕捉到我们在`src/Foggyline/CustomerBundle/Tests/`目录下定义的任何测试。
- en: 'Now let''s go ahead and create a test for our `CustomerOrders` service. We
    do so by creating a `src/Foggyline/CustomerBundle/Tests/Service/CustomerOrders.php`
    file with content as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续为我们的`CustomerOrders`服务创建一个测试。我们通过创建一个`src/Foggyline/CustomerBundle/Tests/Service/CustomerOrders.php`文件来实现：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here we have two tests in total, one instantiating the class through the service
    and the other directly. We are using the `setUp` method merely to set the `container`
    property which we then reuse in the `testGetItemsViaService` method.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们总共有两个测试，一个是通过服务实例化类，另一个是直接实例化。我们仅使用`setUp`方法来设置`container`属性，然后在`testGetItemsViaService`方法中重用它。
- en: 'Next, we create the `CustomerMenu` test within the directory as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在目录中创建`CustomerMenu`测试如下：
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, if we run the `phpunit` command, we should see our test being picked up
    and executed alongside other tests. We can even target these two tests specifically
    by executing a `phpunit` command with full class path, as shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行`phpunit`命令，我们应该能够看到我们的测试被捕捉并与其他测试一起执行。我们甚至可以通过执行带有完整类路径的`phpunit`命令来专门针对这两个测试，如下所示：
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Functional testing
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试
- en: The auto-generate CRUD tool generated the `CustomerControllerTest.php` file
    for us within the `src/Foggyline/CustomerBundle/Tests/Controller/` directory.
    In the previous chapter we showed how to pass an authentication parameter to `static::createClient`
    in order to make it simulate user logging. However, that is not the same login
    as our customers will be using. We are no longer using a basic HTTP authentication,
    rather a full blown login form.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成的CRUD工具在`src/Foggyline/CustomerBundle/Tests/Controller/`目录中为我们生成了`CustomerControllerTest.php`文件。在上一章中，我们展示了如何向`static::createClient`传递身份验证参数，以便模拟用户登录。然而，这不同于我们的客户将使用的登录。我们不再使用基本的HTTP身份验证，而是一个完整的登录表单。
- en: 'In order to address the login form testing, let''s go ahead and edit the `src/Foggyline/CustomerBundle/Tests/Controller/CustomerControllerTest.php`
    file as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决登录表单测试问题，让我们继续编辑`src/Foggyline/CustomerBundle/Tests/Controller/CustomerControllerTest.php`文件如下：
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here we first created the `logIn` method, whose purpose is to simulate the login,
    by setting up the proper token value into the session, and passing on that session
    ID to the client via a cookie. We then created the `testMyAccountAccess` method,
    which first calls the `logIn` method and then checks if the crawler was able to
    access the **My Account** page. The great thing about this approach is that we
    did not have to code in the user password, only its username.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先创建了“logIn”方法，其目的是通过将正确的令牌值设置到会话中，并通过cookie将该会话ID传递给客户端来模拟登录。然后我们创建了“testMyAccountAccess”方法，该方法首先调用“logIn”方法，然后检查爬虫是否能够访问“我的账户”页面。这种方法的好处在于，我们不必编写用户密码，只需编写用户名。
- en: 'Now, let''s go ahead and address the customer registration form, by adding
    the following to the `CustomerControllerTest`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续处理客户注册表单，通过向“CustomerControllerTest”添加以下内容：
- en: '[PRE33]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We have already seen a test similar to this one in the previous chapter. Here
    we are merely opening a customer/register page, then finding a button with **Register!**
    label, so we can fetch the entire form through it. We then set all of the required
    form data, and simulate the form submit. If successful, we observe for the redirect
    body and assert against value expected in it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经看到了类似于这个的测试。在这里，我们只是打开了一个客户/注册页面，然后找到一个带有“注册！”标签的按钮，以便我们可以通过它获取整个表单。然后我们设置所有必需的表单数据，并模拟表单提交。如果成功，我们观察重定向主体，并断言其中的预期值。
- en: Running the `phpunit` command now should successfully execute our tests.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行“phpunit”命令应该成功执行我们的测试。
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter we built a miniature but functional customer module.
    The module assumed a certain level of setup done on our `security.yml` file, which
    can be covered as part of module documentation if we were to redistribute it.
    These changes included defining our own custom firewall, with a custom security
    provider. The security provider pointed to our `customer` class, which in turn
    was built in a way that complies to the Symfony `UserInterface`. We then built
    a register, login, and forgot your password form. Though each comes with a minimal
    set of functionalities, we saw how simple it is to build a fully custom register
    and login system.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个微型但功能齐全的客户模块。该模块假定我们在“security.yml”文件上进行了一定程度的设置，如果我们要重新分发它，可以将其作为模块文档的一部分进行覆盖。这些更改包括定义我们自己的自定义防火墙和自定义安全提供程序。安全提供程序指向我们的“customer”类，而该类又是按照Symfony“UserInterface”构建的。然后我们构建了注册、登录和忘记密码表单。尽管每个表单都带有一组最小的功能，但我们看到构建完全自定义的注册和登录系统是多么简单。
- en: Furthermore, we applied some forward thinking, by using the specially defined
    service to set up the **My Orders** section under the **My Account** page. This
    is by far the ideal way of doing it, and it serves a purpose, as we will later
    override this service cleanly from the `sales` module.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们通过使用专门定义的服务在“我的账户”页面下设置“我的订单”部分，采取了一些前瞻性的做法。这绝对是理想的做法，它有其作用，因为我们稍后将从“销售”模块中清晰地覆盖此服务。
- en: Moving forward, in the next chapter, we will build a `payment` module.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将构建一个“支付”模块。
