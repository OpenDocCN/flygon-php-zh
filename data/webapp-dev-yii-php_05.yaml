- en: Chapter 5. Managing Issues
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。管理问题
- en: In the previous chapter, we delivered the basic functionality around the project
    entity. The project is at the foundation of the TrackStar application. However,
    projects by themselves are not terribly useful. Projects are the basic containers
    of the issues we want this application to manage. Since managing project issues
    is the main purpose of this application, we want to start adding in some basic
    issue-management functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们提供了围绕项目实体的基本功能。项目是TrackStar应用程序的基础。然而，单独的项目并不是非常有用。项目是我们希望这个应用程序管理的问题的基本容器。由于管理项目问题是这个应用程序的主要目的，我们希望开始添加一些基本的问题管理功能。
- en: Feature planning
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能规划
- en: We already have the ability to create and list projects, but there is no way
    to manage the issues related to the projects. At the end of this chapter, we want
    the application to expose all CRUD operations on the project issues or tasks.
    (We tend to use the terms *issue* and *task* interchangeably, but in our data
    model, a task will actually be just one type of issue.) We also want to restrict
    all the CRUD operations on the issues to be within the context of a specific project.
    That is, *issues* belong to *projects*. The user must have selected an existing
    project to work within, prior to being able to perform any CRUD operations on
    the project's issues.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了创建和列出项目的能力，但没有办法管理与项目相关的问题。在本章结束时，我们希望应用程序能够在项目问题或任务上公开所有CRUD操作。 （我们倾向于交替使用*问题*和*任务*这两个术语，但在我们的数据模型中，任务实际上只是问题的一种类型。）我们还希望限制对问题的所有CRUD操作都在特定项目的上下文中进行。也就是说，*问题*属于*项目*。用户必须在能够对项目的问题执行任何CRUD操作之前，选择了一个现有的项目来工作。
- en: 'In order to achieve the previously mentioned outlined goals, we need to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现前面提到的目标，我们需要：
- en: Design the database schema and build the objects to support project issues
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计数据库模式并构建支持项目问题的对象
- en: Create the Yii model classes that will allow the application to easily interact
    with the database table(s) we created
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Yii模型类，使应用程序能够轻松地与我们创建的数据库表进行交互
- en: 'Create the controller class that will house the functionality to allow us to:'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器类，其中将包含允许我们进行以下操作的功能：
- en: Create new issues
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新问题
- en: Retrieve a list of existing issues within a project from the database
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库中检索项目中现有问题的列表
- en: Update/edit existing issues
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新/编辑现有问题
- en: Delete existing issues
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除现有问题
- en: Create views to render user interfaces for these (above) actions
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为这些（上述）操作创建视图以渲染用户界面
- en: This list is plenty to get us going. Let's get started by making the necessary
    database changes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表足以让我们开始。让我们开始做必要的数据库更改。
- en: Designing the schema
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模式
- en: Back in [Chapter 3](ch03.html "Chapter 3. The TrackStar Application"), *The
    TrackStar Application*, we proposed some initial ideas about the *issue* entity.
    We proposed that it have a *name*, a *type*, an *owner*, a *requestor*, a *status*,
    and a *description*. We also mentioned when we created the `tbl_project` table
    that we would be adding basic audit history information to each table we create,
    to track the dates, times, and users who update the tables. However, types, owners,
    requestors, and statuses are themselves their own entities. To keep our model
    flexible and extensible, we'll model some of these separately. *Owners* and *requestors*
    are both users of the system and as such will be housed in a separate table called
    `tbl_user`. We have already introduced the idea of a *user* in the `tbl_project`
    table, as we added the columns `create_user_id` and `update_user_id` to track
    the identifier of the user who initially created the project, as well as the user
    who was responsible for last updating the project details. Even though we have
    not formally introduced that table yet, these fields are intended to be foreign
    keys to a `user` table. The `owner_id` and `requestor_id` column in the `tbl_issue`
    table will also be foreign keys that relate back to this `tbl_user` table.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[第3章](ch03.html“第3章。TrackStar应用程序”), *TrackStar应用程序*，我们提出了一些关于*问题*实体的初始想法。我们建议它有一个*名称*，一个*类型*，一个*所有者*，一个*请求者*，一个*状态*和一个*描述*。我们还提到当我们创建`tbl_project`表时，我们将向每个创建的表添加基本的审计历史信息，以跟踪更新表的日期、时间和用户。然而，类型、所有者、请求者和状态本身也是它们自己的实体。为了保持我们的模型灵活和可扩展，我们将分别对其中一些进行建模。*所有者*和*请求者*都是系统的用户，因此将被放在一个名为`tbl_user`的单独表中。我们已经在`tbl_project`表中介绍了*用户*的概念，因为我们添加了`create_user_id`和`update_user_id`列来跟踪最初创建项目的用户的标识符，以及负责最后更新项目详细信息的用户。尽管我们尚未正式介绍该表，但这些字段旨在成为`user`表的外键。`tbl_issue`表中的`owner_id`和`requestor_id`列也将是关联回这个`tbl_user`表的外键。
- en: We could model the type and status attributes in the same manner. However, until
    our requirements demand this extra complexity in the model, we can keep things
    simple. The `type` and `status` columns on the `tbl_issue` table will remain integer
    values that can be mapped to named types and statuses. However, rather than complicating
    our model by using separate tables, we will model these as basic class constant
    (`const`) values within the AR model class we create for the issue entity. Don't
    worry if all of this is a little fuzzy; it will make more sense in the coming
    sections.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以相同的方式对类型和状态属性进行建模。然而，直到我们的需求要求模型中的这种额外复杂性，我们可以保持简单。`tbl_issue`表上的`type`和`status`列将保持整数值，可以映射到命名类型和状态。然而，我们将这些建模为我们为问题实体创建的AR模型类中的基本类常量（`const`）值，而不是通过使用单独的表来使我们的模型复杂化。如果所有这些都有点模糊，不要担心；在接下来的章节中会更清晰。
- en: Defining some relationships
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一些关系
- en: Since we are introducing the `tbl_user` table, we need to go back and define
    the relationship between the users and projects. Back in [Chapter 3](ch03.html
    "Chapter 3. The TrackStar Application"), *The TrackStar Application*, we specified
    that users (we called them project members) would be associated with zero or more
    projects. We also mentioned that projects can also have many (one or more) users.
    Since projects can have many users and these users can be associated with many
    projects, we call this a **many-to-many** relationship between projects and users.
    The easiest way to model a many-to-many relationship in a relational database
    is to use an association table (also called an assignment table). So we need to
    add this table to our model as well.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们引入了`tbl_user`表，我们需要回去定义用户和项目之间的关系。在[第3章](ch03.html "第3章。TrackStar应用程序")中，*TrackStar应用程序*，我们指定用户（我们称之为项目成员）将与零个或多个项目关联。我们还提到项目也可以有许多（一个或多个）用户。由于项目可以有许多用户，并且这些用户可以与许多项目关联，我们将其称为项目和用户之间的**多对多**关系。在关系数据库中建模多对多关系的最简单方法是使用关联表（也称为分配表）。因此，我们还需要将这个表添加到我们的模型中。
- en: The following figure outlines a basic entity-relationship between the users,
    projects, and issues. Projects can have zero to many users. A user needs to be
    associated with at least one project but can be associated with many. Issues belong
    to one and only one project, while projects can have from zero to many issues.
    Finally an issue is assigned to (or requested by) one single user.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下图概述了用户、项目和问题之间的基本实体关系。项目可以有零到多个用户。用户需要与至少一个项目关联，但可以与多个项目关联。问题属于一个且仅属于一个项目，而项目可以有零到多个问题。最后，一个问题被分配给（或由）一个单一用户。
- en: '![Defining some relationships](graphics/8727_05_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![定义一些关系](graphics/8727_05_01.jpg)'
- en: Building objects and their relationships
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建对象及其关系
- en: We have to create three new tables, namely `tbl_issue`, `tbl_user`, and our
    association table `tbl_project_user_assignment` . You may recall that we introduced
    Yii database migrations in [Chapter 4](ch04.html "Chapter 4. Project CRUD"), *Project
    CRUD*. As we are now ready to make a change to our database structure, we'll use
    Yii migrations for this as to better manage the application of these changes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建三个新表，即`tbl_issue`、`tbl_user`和我们的关联表`tbl_project_user_assignment`。您可能还记得我们在[第4章](ch04.html
    "第4章。项目CRUD")介绍了Yii数据库迁移。由于我们现在准备对数据库结构进行更改，我们将使用Yii迁移来更好地管理这些更改的应用。
- en: 'Since we are adding these to our database all at the same time, we''ll do this
    in one migration. From the command line, change to the `protected/` directory
    and issue the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们要同时向数据库中添加这些内容，我们将在一个迁移中完成。从命令行，切换到`protected/`目录，并输入以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will result in a new migration file being added to the `protected/migrations/`
    directory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致一个新的迁移文件被添加到`protected/migrations/`目录中。
- en: 'Open up this newly created file and implement the safeUp() and safeDown() method
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 打开这个新创建的文件，并按照以下方式实现safeUp()和safeDown()方法：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we have implemented the `safeUp()` and `safeDown()` methods rather than
    the standard `up()` and `down()` methods. Doing this runs these statements in
    a database transaction with the intent that they are committed or rolled back
    as a single unit.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们实现了`safeUp()`和`safeDown()`方法，而不是标准的`up()`和`down()`方法。这样做可以在数据库事务中运行这些语句，以便它们作为单个单元被提交或回滚。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In fact, since we are using MySQL, these `create table` and `drop table` statements
    will not be run in a single transaction. Certain MySQL statements cause implicit
    commits and as such using the `safeUp()` and `safeDown()` methods in this case
    is not of much use. We will leave this in to help the user understand why Yii
    migrations offer the `safeUp()` and `safeDown()` methods. See [http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html](http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html)
    for more details about this.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，由于我们正在使用MySQL，这些`create table`和`drop table`语句不会在单个事务中运行。某些MySQL语句会导致隐式提交，因此在这种情况下使用`safeUp()`和`safeDown()`方法并没有太多用处。我们将保留这一点，以帮助用户了解为什么Yii迁移提供`safeUp()`和`safeDown()`方法。有关更多详细信息，请参见[http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html](http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html)。
- en: 'Now we can run the migration from the command line:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从命令行运行迁移：
- en: '![Building objects and their relationships](graphics/8727_05_17.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![构建对象及其关系](graphics/8727_05_17.jpg)'
- en: This migration has created our necessary database objects. Now we can turn our
    focus to creating our active record model classes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个迁移已经创建了我们需要的数据库对象。现在我们可以把注意力转向创建我们的活动记录模型类。
- en: Creating active record model classes
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建活动记录模型类
- en: Now that we have these tables created, we need to create the Yii model AR classes
    to allow us to easily interact with these tables within the application. We did
    this when creating the `Project` model class in the previous chapter, by using
    the Gii code generation tool. We'll remind you of the steps here, but spare you
    of all the screenshots. Please refer to [Chapter 4](ch04.html "Chapter 4. Project
    CRUD"), *Project CRUD* for the more detailed walkthrough of using the Gii tool
    to create an active record class.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了这些表，我们需要创建Yii模型AR类，以便我们可以在应用程序中轻松地与这些表交互。在上一章创建`Project`模型类时，我们使用了Gii代码生成工具。我们会在这里提醒您这些步骤，但不会给您所有的截图。请参考[第4章](ch04.html
    "第4章。项目CRUD")，*项目CRUD*，以获取使用Gii工具创建活动记录类的更详细步骤。
- en: Creating the Issue model class
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Issue模型类
- en: Navigate to the Gii tool via `http://localhost/trackstar/index.php?r=gii` and
    select the **Model Generator** link. Leave the table prefix as **tbl_**. Fill
    in the **Table Name** field as `tbl_issue`, which will autopopulate the **Model
    Class** field as **Issue**. Also ensure that the **Build Relations** checkbox
    is checked. This will ensure that our relationships are automatically created
    for us in our new model class.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`http://localhost/trackstar/index.php?r=gii`导航到Gii工具，然后选择**Model Generator**链接。将表前缀保留为**tbl_**。在**Table
    Name**字段中填写`tbl_issue`，这将自动填充**Model Class**字段为**Issue**。还要确保**Build Relations**复选框被选中。这将确保我们的关系在新的模型类中自动创建。
- en: Once the form is filled out, click on the **Preview** button to get a link to
    a pop up that will show you all of the code that is about to be generated. Then
    click on the **Generate** button to actually create the new `Issue.php` model
    class file in the `/protected/models/` directory.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 填写表单后，点击**Preview**按钮，获取一个弹出窗口的链接，显示即将生成的所有代码。然后点击**Generate**按钮，实际在`/protected/models/`目录中创建新的`Issue.php`模型类文件。
- en: Creating the User model class
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用户模型类
- en: This is probably becoming old-hat for you at this point, so we are going to
    leave the creation of the `User` AR class as an exercise for you. This particular
    class becomes much more important in the next chapter, when we dive into user
    authentication and authorization.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这在这一点上可能已经变得老生常谈了，所以我们将把`User` AR类的创建留给您作为一个练习。在下一章中，当我们深入研究用户认证和授权时，这个特定的类将变得更加重要。
- en: You may be asking, "What about the AR class for the `tbl_project_user_assignment`
    table?". Although one could create an AR class for this table, it is not necessary.
    The AR model provides an **Object Relational Mapping** (**ORM**) layer to our
    application to help us work much more easily with our domain objects. However,
    *ProjectUserAssignment* is not a domain object of our application. It is simply
    a construct in a relational database to help us model and manage the many-to-many
    relationship between the projects and users. Maintaining a separate AR class to
    handle the management of this table is extra complexity that we can avoid for
    the time being. We can manage the inserts, updates, and deletes on this table
    using Yii's DAO directly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问，“`tbl_project_user_assignment`表的AR类呢？”。虽然可以为这个表创建一个AR类，但这并不是必要的。AR模型为我们的应用程序提供了一个**对象关系映射**（**ORM**）层，帮助我们更轻松地处理领域对象。然而，*ProjectUserAssignment*不是我们应用程序的领域对象。它只是一个在关系数据库中的构造，帮助我们建模和管理项目和用户之间的多对多关系。为处理这个表的管理而维护一个单独的AR类是我们可以暂时避免的额外复杂性。我们可以直接使用Yii的DAO来管理这个表的插入、更新和删除。
- en: Creating the issue CRUD operations
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建问题的CRUD操作
- en: 'Now that we have our issue AR class in place, we can turn to building the necessary
    functionality to manage our project issues. We''ll again lean on the Gii code
    generation tool to help us create the basics of this functionality. We did this
    in detail for the projects in the previous chapter. I''ll remind of you of the
    basic steps for Issues here, once again:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了问题的AR类，我们可以开始构建必要的功能来管理我们的项目问题。我们将再次依靠Gii代码生成工具来帮助我们创建这些功能的基础。我们在上一章节详细介绍了项目的这一点。我将再次提醒您Issues的基本步骤：
- en: Navigate to the Gii generator menu at `http://localhost/trackstar/index.php?r=gii`,
    and select the **Crud Generator** link.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Gii生成器菜单`http://localhost/trackstar/index.php?r=gii`，然后选择**Crud Generator**链接。
- en: Fill out the form using **Issue** as the value for the **Model Class** field.
    This will autopopulate the **Controller ID** to also be **Issue**. The **Base
    Controller Class** and **Code Template** fields can remain their predefined default
    values.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Issue**作为**Model Class**字段的值填写表单。这将自动填充**Controller ID**为**Issue**。**Base
    Controller Class**和**Code Template**字段可以保留它们预定义的默认值。
- en: Click on the **Preview** button to get a list of all the files that the Gii
    tool is proposing to create. The following screenshot shows this list of files:![Creating
    the issue CRUD operations](graphics/8727_05_02.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Preview**按钮，获取Gii工具建议创建的所有文件列表。以下截屏显示了这些文件的列表：![Creating the issue CRUD
    operations](graphics/8727_05_02.jpg)
- en: You can click on each individual link to preview the code to be generated. Once
    satisfied, click on the **Generate** button to have all of these files created.
    You should receive the following message of success:![Creating the issue CRUD
    operations](graphics/8727_05_03.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以点击每个单独的链接预览要生成的代码。一旦满意，点击**Generate**按钮来创建所有这些文件。您应该收到以下成功消息：![Creating the
    issue CRUD operations](graphics/8727_05_03.jpg)
- en: Using the issue CRUD operations
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用问题CRUD操作
- en: 'Let''s try this out. Either click on the **try it now** link shown in the previous
    screenshot or simply navigate to `http://localhost/trackstar/index.php?r=issue`.
    You should be presented with something similar to what is shown in the following
    screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试。要么点击前面截屏中显示的**try it now**链接，要么直接导航到`http://localhost/trackstar/index.php?r=issue`。您应该看到类似于以下截屏的内容：
- en: '![Using the issue CRUD operations](graphics/8727_05_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: 使用问题CRUD操作
- en: Creating a new issue
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新问题
- en: 'Since we have not yet added any new issues, there are none to list. Let''s
    change that and create a new one. Click on the **Create Issue** link. (If this
    takes you to the login page, then log in using either `demo/demo` or `admin/admin`.
    You''ll properly be redirected after a successful login.) You should now see a
    new Issue-Input form similar to what is shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有添加任何新问题，所以没有要列出的问题。让我们改变这种情况，创建一个新问题。点击**Create Issue**链接。（如果这将您带到登录页面，请使用`demo/demo`或`admin/admin`登录。成功登录后，您将被正确重定向。）现在您应该看到一个类似于以下截屏的新问题输入表单：
- en: '![Creating a new issue](graphics/8727_05_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: 创建一个新问题
- en: When looking at this input form, we can see that it has an input field for every
    column in the database table, just as it is defined in the database table. However,
    as we know from when we designed our schema and built our tables, some of these
    fields are not direct input fields but rather represent relationships to other
    entities. For example, rather than having a **Type** freeform text-input field
    on this form, we should use a drop-down input form field that is populated with
    choices of the issue types that are allowed. A similar argument could be made
    for the **Status** field. The **Owner** and **Requester** fields should also be
    drop-downs, exposing choices of the names of the users who have been assigned
    to work on the project under which the issue resides. Also, since all issue management
    should be taking place within the context of a specific project, the **Project**
    field should not even be a part of this form at all. Lastly, the **Create Time**,
    **Create User**, **Update Time**, and **Update User** fields are all values that
    should be calculated and determined once the form is submitted, and should not
    be available for the user to directly manipulate.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当查看这个输入表单时，我们可以看到它在数据库表中的每一列都有一个输入字段，就像在数据库表中定义的那样。然而，正如我们从设计模式和建立表格时所知道的那样，其中一些字段不是直接的输入字段，而是代表与其他实体的关系。例如，与其在这个表单上有一个**类型**自由文本输入字段，我们应该使用一个下拉输入表单字段，其中填充了允许的问题类型的选择。类似的论点也适用于**状态**字段。**所有者**和**请求者**字段也应该是下拉菜单，显示被分配到处理问题所在项目的用户的名称选择。此外，由于所有问题管理都应该在特定项目的上下文中进行，**项目**字段根本不应该是这个表单的一部分。最后，**创建时间**、**创建用户**、**更新时间**和**更新用户**字段都是应该在表单提交后计算和确定的值，不应该供用户直接操作。
- en: It seems we have identified a number of corrections we would like to make on
    this initial input form. As we mentioned in the previous chapter, the autocreated,
    CRUD "scaffolding" code that is generated by the Gii tool is just a starting point.
    Rarely is it enough on its own to meet all the specific functionality needs of
    an application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们已经确定了一些我们想要在这个初始输入表单上做出的更正。正如我们在上一章中提到的，Gii工具生成的自动生成的CRUD“脚手架”代码只是一个起点。很少有情况下它本身就足以满足应用程序的所有特定功能需求。
- en: Adding drop-down fields
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加下拉字段
- en: We'll start with adding a drop-down for the issue types. Issues have just three
    types, namely *Bugs*, *Features*, and *Tasks*. What we would like to see when
    creating a new issue is a drop-down, input-type form field with these three choices.
    We will achieve this by having the `Issue` model class itself provide a list of
    its available types. Since we did not create a separate database table to hold
    our issue types, we'll add these as class constants directly to our `Issue` active
    record model class.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从为问题类型添加一个下拉菜单开始。问题只有三种类型，即*错误*、*功能*和*任务*。当创建一个新问题时，我们希望看到的是一个下拉式输入类型表单字段，其中包含这三个选择。我们将通过`Issue`模型类本身提供其可用类型的列表来实现这一点。由于我们没有创建一个单独的数据库表来保存我们的问题类型，我们将这些直接添加为`Issue`活动记录模型类的类常量。
- en: 'At the top of the `Issue` model class, add the following three constant definitions:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Issue`模型类的顶部添加以下三个常量定义：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now add a new method to this class, `Issue::getTypeOptions()`, which will return
    an array based on these defined constants:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在这个类中添加一个新的方法`Issue::getTypeOptions()`，它将根据这些定义的常量返回一个数组：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We now have a way to retrieve the available list of issue types, but we still
    don't have a drop-down field in the input form that displays these values that
    we can choose from. Let's add that now.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一种方法来检索可用的问题类型列表，但我们仍然没有一个下拉字段在输入表单中显示这些值，我们可以从中选择。让我们现在添加它。
- en: Adding the issue type drop-down
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加问题类型下拉
- en: 'Open up the file containing the new issue creation form `protected/views/issue/_form.php`
    and find the lines that correspond to the **Type** field on the form:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 打开包含新问题创建表单的文件`protected/views/issue/_form.php`，找到与表单上的**类型**字段对应的行：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'These lines need a little clarification. In order to understand this, we need
    to refer to some code towards the top of the `_form.php` file, which is given
    as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行需要一点澄清。为了理解这一点，我们需要参考`_form.php`文件顶部的一些代码，如下所示：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is defining the `$form` variable using the `CActiveForm` widget in Yii.
    **Widgets** are going to be covered in much more detail later. For now, we can
    understand this code by understanding `CActiveForm` better. `CActiveForm` can
    be thought of as a helper class that provides a set of methods to help us with
    creating forms that are associated with a data model class. In this case, it is
    being used to create an input form based on our `Issue` model class.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用Yii中的`CActiveForm`小部件定义`$form`变量。**小部件**将在以后更详细地介绍。现在，我们可以通过更好地理解`CActiveForm`来理解这段代码。`CActiveForm`可以被认为是一个帮助类，它提供了一组方法来帮助我们创建与数据模型类相关联的表单。在这种情况下，它被用来基于我们的`Issue`模型类创建一个输入表单。
- en: 'To fully understand the variables in our view file, let''s also review our
    controller code that is rendering the view file(s). As has been previously discussed,
    one way to pass data from the controller to the view is by explicitly declaring
    an array, the keys of which will be the names of the available variables in the
    view files. Since this is the create action for a new issue, the controller method
    rendering the form is `IssueController::actionCreate()`. This method is listed
    as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分理解视图文件中的变量，让我们也回顾一下渲染视图文件的控制器代码。正如之前讨论过的，从控制器传递数据到视图的一种方式是通过显式声明一个数组，其中的键将是视图文件中可用变量的名称。由于这是一个新问题的创建操作，渲染表单的控制器方法是`IssueController::actionCreate()`。该方法如下所示：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we see that when the view is being rendered, it is being passed an instance
    of the `Issue` model class, which will be available in the view as a variable
    called `$model`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到当视图被渲染时，它会传递一个`Issue`模型类的实例，这个实例将在视图中作为一个名为`$model`的变量可用。
- en: 'Now let''s go back to the code that is responsible for rendering the **Type**
    field on the form. The first line is:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到负责在表单上渲染**Type**字段的代码。第一行是：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This line is using the `CActiveForm::labelEx()` method to render an HTML label
    for the issue model attribute `type_id`. It takes in an instance of the model
    class and the corresponding model attribute for which we want a label generated.
    The model class `Issue:: attributeLabels()` method will be used to determine the
    label. If we take a peek at that method listed below, we see that the attribute
    `type_id` is mapped to a label of `''Type''`, which is exactly what we see rendered
    as the label to this form field:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '这一行使用`CActiveForm::labelEx()`方法为问题模型属性`type_id`渲染HTML标签。它接受模型类的实例和我们想要生成标签的相应模型属性。模型类`Issue::
    attributeLabels()`方法将被用于确定标签。如果我们查看下面列出的方法，我们会看到属性`type_id`被映射为标签`''Type''`，这正是我们在表单字段中看到的标签。'
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using the `labelEx()` method is also what is responsible for our little red
    asterisks next to our required fields. The `labelEx()` method will add an additional
    `CSS` class name (`CHtml::requiredCss`, which defaults to '`required`') and asterisk
    (using `CHtml::afterRequiredLabel`, which defaults to `' <span class="required">*</span>'`)
    when the attribute is required.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`labelEx()`方法也是我们的必填字段旁边出现小红星号的原因。当属性是必填时，`labelEx()`方法将添加一个额外的`CSS`类名（`CHtml::requiredCss`，默认为`'required'`）和星号（使用`CHtml::afterRequiredLabel`，默认为`'
    <span class="required">*</span>'`）。
- en: The next line, `<?php echo $form->textField($model,'type_id'); ?>`, uses the
    `CActiveForm::textField()` method to render a text-input field for our `Issue`
    model attribute `type_id`. Any of the validation rules defined for `type_id` in
    the model class `Issue::rules()` method will be applied as form validation rules
    to this input form.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的一行，`<?php echo $form->textField($model,'type_id'); ?>`，使用`CActiveForm::textField()`方法为我们的`Issue`模型属性`type_id`渲染文本输入字段。在模型类`Issue::rules()`方法中定义的任何验证规则都将被应用为此输入表单的表单验证规则。
- en: Finally the line `<?php echo $form->error($model,'type_id'); ?>` uses the `CActiveForm::error()`
    method to render any validation errors associated with the `type_id` attribute
    upon submission.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行`<?php echo $form->error($model,'type_id'); ?>`使用`CActiveForm::error()`方法在提交时渲染与`type_id`属性相关的任何验证错误。
- en: 'You can try out this validation with the type field. The `type_id` column is
    defined as an integer type in our MySQL schema definition, and because of this,
    Gii generated a validation rule in the `Issue::rules()` method to enforce this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试使用类型字段进行验证。在我们的MySQL模式定义中，`type_id`列被定义为整数类型，因此，Gii在`Issue::rules()`方法中生成了一个验证规则来强制执行这一点。
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So if we attempt to submit a string value in our **Type** form field, we will
    receive an inline error right under the field, as depicted in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们尝试在**Type**表单字段中提交字符串值，我们将在字段下方立即收到内联错误，如下面的屏幕截图所示：
- en: '![Adding the issue type drop-down](graphics/8727_05_06.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![添加问题类型下拉菜单](graphics/8727_05_06.jpg)'
- en: 'Now that we understand better exactly what we have, we are in a better position
    to change it. What we need to do is change this field from a free form, text-input
    field, to a drop-down entry type. It probably comes as little surprise that the
    `CActiveForm` class has a `dropDownList()` method that will generate a drop-down
    list for a model attribute. Let''s replace the line that calls `$form->textField`
    (in the file `/protected/views/issue/_form.php`) with the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更好地理解了我们所拥有的东西，我们更有能力对其进行更改。我们需要做的是将这个字段从自由格式的文本输入字段更改为下拉式输入类型。也许不足为奇的是，`CActiveForm`类有一个`dropDownList()`方法，可以为模型属性生成一个下拉列表。让我们用以下内容替换调用`$form->textField`的行（在文件`/protected/views/issue/_form.php`中）：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This still takes the earlier model as the first argument and the model attribute
    as the second one. The third argument specifies the list of drop-down choices.
    This should be an array of `value=>display` pairs. We already created our `getTypeOptions()`
    method in the `Issue.php` model class to return an array of this format, so we
    can use it directly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这仍然将早期的模型作为第一个参数，将模型属性作为第二个参数。第三个参数指定下拉选择列表。这应该是一个`value=>display`对的数组。我们已经在`Issue.php`模型类中创建了我们的`getTypeOptions()`方法来返回这种格式的数组，所以我们可以直接使用它。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It should be noted that Yii framework base classes make use of the PHP `_get`
    "magic" function. This allows us, in our child classes, to write methods such
    as `getTypeOptions()` and reference those methods as class properties, using the
    syntax `->typeOptions`. So we could have also used the equivalent syntax when
    requesting our issue type options array `$model->typeOptions`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，Yii框架基类使用了PHP `_get` "魔术"函数。这允许我们在子类中编写诸如`getTypeOptions()`之类的方法，并使用`->typeOptions`语法将这些方法作为类属性引用。因此，当请求问题类型选项数组`$model->typeOptions`时，我们也可以使用等效的语法。
- en: 'Save your work and look again at our issue input form. You should see a nice
    drop-down menu of Issue-type choices in place of the freeform text field, as displayed
    in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的工作，再次查看我们的问题输入表单。您应该看到一个漂亮的问题类型选择下拉菜单，取代了自由格式文本字段，如下面的屏幕截图所示：
- en: '![Adding the issue type drop-down](graphics/8727_05_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![添加问题类型下拉菜单](graphics/8727_05_07.jpg)'
- en: 'Adding the status dropdown: do it yourself'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加状态下拉菜单：自己动手
- en: 'We are going to take the same approach for the issue status. As mentioned back
    in [Chapter 3](ch03.html "Chapter 3. The TrackStar Application"), *The TrackStar
    application*, when we introduced the application, issues can be in one of the
    following three statuses:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用相同的方法处理问题状态。正如在[第3章](ch03.html "第3章。TrackStar应用程序")中提到的*TrackStar应用程序*，当我们介绍应用程序时，问题可以处于以下三种状态之一：
- en: Not yet started
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尚未开始
- en: Started
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始
- en: Finished
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成
- en: We'll create three class constants in our `Issue` model class for the status
    values. Then we'll create a new method, `Issue::getStatusOptions()`, to return
    an array of our available issue statuses. And finally, we'll alter the `_form.php`
    file to render a drop-down of status options rather than a freeform text-input
    field for the status.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`Issue`模型类中创建三个类常量来表示状态值。然后我们将创建一个新方法，`Issue::getStatusOptions()`，来返回一个可用的问题状态数组。最后，我们将修改`_form.php`文件，以渲染状态选项的下拉菜单，而不是状态的自由格式文本输入字段。
- en: 'We are going to leave the implementation of the status drop-down to you. You
    can follow the same approach that we took for the types. After you make this change,
    the form should look similar to what is shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把状态下拉菜单的实现留给你。你可以按照我们为类型所采取的方法来操作。在你做出这些改变后，表单应该看起来和下面的截图类似：
- en: '![Adding the status dropdown: do it yourself](graphics/8727_05_08.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![添加状态下拉菜单：自己动手做](graphics/8727_05_08.jpg)'
- en: 'We should also note that as we change these from freeform text-entry fields
    to drop-down fields, it is good practice to also add a range validation to our
    `rules()` method to ensure that the submitted value falls within the range of
    the values allowed by the drop-down. In the previous chapter, we saw a list of
    all the validators that the Yii framework provides. The `CRangeValidator` attribute,
    which uses an alias of *in*, is a good choice to use for defining this validation
    rule. So we could define such a rule as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该注意，当我们把这些从自由格式文本输入字段改为下拉菜单字段时，最好也在我们的`rules()`方法中添加一个范围验证，以确保提交的值在下拉菜单允许的值范围内。在上一章中，我们看到了Yii框架提供的所有验证器列表。`CRangeValidator`属性，使用别名*in*，是定义这个验证规则的一个很好的选择。因此，我们可以定义这样一个规则：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And then we add a method to return an array of our allowed numerical type values:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加一个方法来返回我们允许的数值类型值的数组：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Similarly do this for our `status_id`. We'll also leave this as an exercise
    for you to implement.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的方法也用于我们的`status_id`。我们也将把这个留给你来实现。
- en: Fixing the owner and requester fields
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复所有者和请求者字段
- en: Another problem we notice with the issue creation form is that the owner and
    requester fields are also freeform text-input fields. However, we know that these
    are integer values in the issue table that hold foreign key identifiers to the
    `id` column of the `tbl_user` table. So we also need to add drop-down fields for
    these fields. We won't take the exact same approach we did for the type and status
    attributes, as the issue owners and requesters need to be taken from the `tbl_user`
    table. Also, since not every user in the system will be associated with the project
    under which the issue resides, these issues cannot be used as drop-downs populated
    with the data taken from the entire `tbl_user` table. We need to restrict the
    list to just those users that are associated with this project.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在问题创建表单中注意到的另一个问题是，所有者和请求者字段也是自由格式的文本输入字段。然而，我们知道这些在问题表中是整数值，它们保存了对`tbl_user`表的`id`列的外键标识符。因此，我们还需要为这些字段添加下拉菜单。我们不会采取和类型和状态属性相同的方法，因为问题的所有者和请求者需要从`tbl_user`表中获取。而且，由于系统中并非每个用户都与问题所在的项目相关联，这些问题不能用从整个`tbl_user`表中获取的数据填充下拉菜单。我们需要将列表限制为仅包括与该项目相关联的用户。
- en: This brings up another thing we need to address. As mentioned in the *Feature
    planning* section at the beginning of this chapter, we need to manage our issues
    within the context of a specific project. That is, a specific project should be
    chosen before you are able to create a new issue. Currently, our application does
    not enforce this workflow.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这也带来了另一件我们需要解决的事情。正如本章开头的*功能规划*部分所提到的，我们需要在特定项目的上下文中管理我们的问题。也就是说，在创建新问题之前，应该选择一个特定的项目。目前，我们的应用程序没有强制执行这个工作流程。
- en: Let's address these changes one by one. First, we will alter the application
    to enforce a valid project to be identified prior to using any functionality to
    manage the issues associated with that project. Once a project is chosen, we'll
    make sure that both our owner and requester drop-down choices are restricted to
    only the users that are associated with that project.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一解决这些变化。首先，我们将修改应用程序，以强制在使用与该项目相关的任何功能来管理相关问题之前，必须确定一个有效的项目。一旦选择了一个项目，我们将确保我们的所有者和请求者下拉选择仅限于与该项目相关联的用户。
- en: Enforcing a project context
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制项目上下文
- en: We want to ensure that a valid project context is present before we allow access
    to managing the issues. To do this, we are going to implement what is called a
    filter. A **filter** in Yii is a bit of code that is configured to be executed
    either before or after a controller action is executed. One common example is
    if we want to ensure that a user is logged in prior to executing a controller
    action method. We could write a simple access filter that would check this requirement
    before the action is executed. Another example is if we want to perform some extra
    logging or other auditing logic after an action has been executed. We could write
    a simple audit filter to provide this post-action processing.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在允许访问管理问题之前，我们希望确保存在一个有效的项目上下文。为了做到这一点，我们将实现一个叫做过滤器的东西。在Yii中，**过滤器**是一段配置为在控制器动作执行之前或之后执行的代码。一个常见的例子是，如果我们想要确保用户在执行控制器动作方法之前已经登录，我们可以编写一个简单的访问过滤器来检查这个要求。另一个例子是，如果我们想在动作执行后执行一些额外的日志记录或其他审计逻辑，我们可以编写一个简单的审计过滤器来提供这种动作后处理。
- en: In this case, we want to ensure that a valid project has been chosen prior to
    creating a new issue. So we'll add a project filter to our `IssueController` class
    to accomplish this.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们希望确保在创建新问题之前已经选择了一个有效的项目。因此，我们将在我们的`IssueController`类中添加一个项目过滤器来实现这一点。
- en: Defining filters
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义过滤器
- en: 'A filter can be defined either as a controller class method or it can be a
    separate class. When using the simple-method approach, the method name must begin
    with the word *filter* and have a specific signature. For example, if we were
    going to create a filter method called *someMethodName*, our full filter method
    would look like:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器可以被定义为控制器类方法，也可以是一个单独的类。使用简单方法的方法时，方法名必须以 *filter* 开头，并具有特定的签名。例如，如果我们要创建一个名为
    *someMethodName* 的过滤器方法，我们的完整过滤器方法将如下所示：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The other approach is to write a separate class to perform the filter logic.
    When using the separate-class approach, the class must extend `CFilter` and then
    override at least one of the `preFilter()` or `postFilter()` methods depending
    on whether the logic should be executed before the action is invoked, or after.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是编写一个单独的类来执行过滤逻辑。使用单独类的方法时，该类必须扩展 `CFilter`，然后根据逻辑应该在操作调用之前还是之后，重写至少一个
    `preFilter()` 或 `postFilter()` 方法。
- en: Adding a filter
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个过滤器
- en: So, let's add a filter to our `IssueController` class to handle the checking
    for a valid project. We'll take the class-method approach.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们向我们的 `IssueController` 类添加一个过滤器，以处理对有效项目的检查。我们将采用类方法的方法。
- en: 'Open up `protected/controllers/IssueController.php` and add the following method
    at the bottom of the class:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `protected/controllers/IssueController.php` 并在类的底部添加以下方法：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Okay, we now have a filter defined. However it does not do much yet. It simply
    executes `$filterChain->run()`, which continues the filtering process and allows
    the execution of the action methods that are being filtered by this method. This
    brings up another point. How do we define which action methods should use this
    filter?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在已经定义了一个过滤器。但是它还没有做太多事情。它只是执行 `$filterChain->run()`，这会继续过滤过程并允许被该方法过滤的操作方法的执行。这带来了另一个问题。我们如何定义哪些操作方法应该使用这个过滤器？
- en: Specifying the filtered actions
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定被过滤的操作
- en: The Yii framework base class for our controller classes is `CController`. It
    has a `filters()` method that needs to be overridden in order to specify the actions
    on which the filters need to be applied. In fact, this method has already been
    overridden in our `IssueController.php` class. This was done for us when we used
    the Gii tool to autogenerate this class. It already added a simple *accessControl*
    filter, which is defined in the `CController` base class, to handle some basic
    authorization to ensure that the user has sufficient permission to perform certain
    actions. If you are not already logged in and click on the **Create Issue** link,
    you will be directed to the login page for authentication before being allowed
    to create a new issue. The access control filter is responsible for this. We'll
    be covering it in more detail when we focus on user authentication and authorization
    in the next chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制器类的 Yii 框架基类是 `CController`。它有一个需要被重写以指定需要应用过滤器的操作的 `filters()` 方法。实际上，这个方法已经在我们的
    `IssueController.php` 类中被重写。当我们使用 Gii 工具自动生成这个类时，它已经为我们完成了。它已经添加了一个简单的 *accessControl*
    过滤器，该过滤器在 `CController` 基类中定义，用于处理一些基本授权，以确保用户有足够的权限执行某些操作。如果您尚未登录并单击 **创建问题**
    链接，您将被引导到登录页面进行身份验证，然后才能创建新问题。访问控制过滤器负责此操作。在下一章节中，当我们专注于用户身份验证和授权时，我们将更详细地介绍它。
- en: 'For now, we just need to add our new filter to this configuration array. To
    specify that our new filter should be applied to the create action, alter the
    `IssueController::filters()` method by adding the highlighted code, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只需要将我们的新过滤器添加到这个配置数组中。要指定我们的新过滤器应该应用于创建操作，通过添加下面的代码来修改 `IssueController::filters()`
    方法：
- en: '[PRE15]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `filters()` method should return an array of filter configurations. The
    previous code returns a configuration that specifies that the `projectContext`
    filter, which is defined as a method within the class, should be applied to the
    `actionCreate()` method. The configuration syntax allows for the "+" and "-" symbols
    to be used to specify whether a filter should or should not be applied. For example,
    if we decided that we wanted this filter to be applied to all the actions except
    the `actionUpdate()` and `actionView()` action methods, we could specify:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`filters()` 方法应该返回一个过滤器配置的数组。之前的代码返回了一个配置，指定了应该将定义为类内方法的 `projectContext` 过滤器应用于
    `actionCreate()` 方法。配置语法允许使用 "+" 和 "-" 符号来指定是否应该应用过滤器。例如，如果我们决定希望该过滤器应用于除 `actionUpdate()`
    和 `actionView()` 之外的所有操作，我们可以指定：'
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You should not specify both the plus and the minus operators at the same time.
    Only one should be needed for any given filter configuration. The plus operator
    says "Only apply the filter to the following actions". The minus operator says
    "Apply the filter to ALL actions *except* the following". If neither the "+" nor
    the "-" is in the configuration, the filter will be applied to all the actions.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您不应该同时指定加号和减号运算符。对于任何给定的过滤器配置，只需要一个。加号运算符表示“仅将过滤器应用于以下操作”。减号运算符表示“将过滤器应用于除以下操作之外的所有操作”。如果配置中既没有“+”也没有“-”，则该过滤器将应用于所有操作。
- en: At the moment, we'll keep this restricted to just the create action. So as defined
    previously with the `+ create` configuration, our filter method will be called
    when any user attempts to create a new issue.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将这个限制在只有创建操作。因此，如之前定义的 `+ create` 配置，我们的过滤器方法将在任何用户尝试创建新问题时被调用。
- en: Adding filter logic
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加过滤逻辑
- en: Okay, so now we have a filter defined and we have configured it to be called
    upon every attempted `actionCreate()` method call within the issue controller
    class. However, it still does not perform the necessary logic. Since we want to
    ensure the project context before the action is attempted, we need to put the
    logic in the filter method before the call to `$filterChain->run()`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经定义了一个过滤器，并且已经配置它在尝试的 `actionCreate()` 方法调用时被调用。但是，它仍然没有执行必要的逻辑。由于我们希望在尝试操作之前确保项目上下文，我们需要在调用
    `$filterChain->run()` 之前将逻辑放在过滤器方法中。
- en: 'We''ll add a project property to the controller class itself. We''ll then use
    a querystring parameter in our URLs to indicate the project identifier. Our preaction
    filter will check to see if the existing project attribute is null; if so, it
    will use the querystring parameter to attempt to select the project based on the
    primary key identifier. If successful, the action will execute; if it fails, an
    exception will be thrown. Here is the relevant code needed to perform all of this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在控制器类本身中添加一个项目属性。然后，我们将在我们的URL中使用一个查询字符串参数来指示项目标识符。我们的预操作过滤器将检查现有的项目属性是否为空；如果是，它将使用查询字符串参数来尝试根据主键标识符选择项目。如果成功，操作将执行；如果失败，将抛出异常。以下是执行所有这些操作所需的相关代码：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With this in place, if you now attempt to create a new issue by clicking on
    the **Create Issue** link from the issue listing page at this URL `http://localhost/trackstar/index.php?r=issue`,
    you should see an "Error 403" error message, also displaying the error text we
    specified previously.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，如果您现在尝试通过在问题列表页面上的**创建问题**链接上点击来创建一个新问题，您应该会看到一个“错误403”错误消息，同时显示我们之前指定的错误文本。
- en: This is good. It shows that we have properly implemented the code to prevent
    a new issue from being created when no project has been identified. The quickest
    way to get past this error is to simply add a `pid` querystring parameter to the
    URL used for creating new issues. Let's do that so we can supply the filter with
    a valid project identifier and proceed to the form to create a new issue.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好。它表明我们已经正确实现了防止在没有识别到项目时创建新问题的代码。要快速解决这个错误，只需简单地在用于创建新问题的URL中添加一个`pid`查询字符串参数。让我们这样做，这样我们就可以为过滤器提供一个有效的项目标识符，并继续到创建新问题的表单。
- en: Adding the project ID
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加项目ID
- en: Back in [Chapter 4](ch04.html "Chapter 4. Project CRUD"), *Project CRUD*, we
    added several new projects to the application as we were testing and implementing
    the CRUD operations on projects. So it is likely that you still have a valid project
    in your development database. If not, simply use the application to create a new
    project again. Once complete, take note of the *project ID* created, as we need
    to add this ID to the new issue URL.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 回到[第4章](ch04.html "第4章。项目CRUD")*项目CRUD*，在测试和实施项目的CRUD操作时，我们向应用程序添加了几个新项目。因此，您可能仍然在开发数据库中拥有一个有效的项目。如果没有，只需使用应用程序再次创建一个新项目。完成后，请注意所创建的*项目ID*，因为我们需要将此ID添加到新问题的URL中。
- en: 'The link we need to alter is in the view file for the issue listing page `/protected/views/issue/index.php`.
    Towards the top of that file, you will see where the link is defined for creating
    a new issue in our menu items. This is specified in the following highlighted
    code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改的链接位于问题列表页面的视图文件`/protected/views/issue/index.php`中。在该文件的顶部，您会看到我们的菜单项中定义了创建新问题的链接的位置。这在以下突出显示的代码中指定：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To add a querystring parameter to this link, we simply append a *name=>value*
    pair in the defined array for the `url` parameter. The code we added for the filter
    is expecting the querystring parameter to be `pid` (for project id). Also, since
    we are using the first (project id = 1) project for this example, we will alter
    the **Create Issue** link as such:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要向这个链接添加一个查询字符串参数，我们只需在`url`参数的定义数组中追加一个*name=>value*对。我们为过滤器添加的代码期望查询字符串参数是`pid`（项目ID）。另外，由于我们在这个例子中使用的是第一个（项目ID
    = 1）项目，我们将修改**创建问题**链接如下：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now when you view the issue listing page, you will see that the **Create Issue**
    hyperlink opens a URL with a querystring parameter appended at the end:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当您查看问题列表页面时，您会看到**创建问题**超链接打开了一个在末尾附加了查询字符串参数的URL：
- en: '`http://localhost/trackstar/index.php?r=issue/create&pid=1`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/trackstar/index.php?r=issue/create&pid=1`'
- en: This querystring parameter allows the filter to properly set the project context.
    So this time when you click on the link, rather than getting the 403 error page,
    the form to create a new issue will be displayed.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询字符串参数允许过滤器正确设置项目上下文。所以这一次当您点击链接时，不会再出现403错误页面，而是会显示创建新问题的表单。
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more details on using filters in Yii, see [http://www.yiiframework.com/doc/guide/1.1/en/basics.controller#filter](http://www.yiiframework.com/doc/guide/1.1/en/basics.controller#filter).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在Yii中使用过滤器的更多详细信息，请参阅[http://www.yiiframework.com/doc/guide/1.1/en/basics.controller#filter](http://www.yiiframework.com/doc/guide/1.1/en/basics.controller#filter)。
- en: Altering the project details page
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改项目详细信息页面
- en: Adding the *project id* to the URL for the **Create New Issue** link was a good
    first step to ensure that our filter was working as expected. However, we have
    now hardcoded the link to always associate a new issue with the project ID = 1\.
    This of course is not what we want. What we want to do is have the menu option
    for creating a new issue be a part of the project details page. In this way, once
    you have chosen a project from the project listing page, the specific project
    context will be known, and we can dynamically append that project ID to the create
    new issue link. Let's make that change.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目ID添加到“创建新问题”链接的URL是确保我们的过滤器按预期工作的一个很好的第一步。然而，我们现在已经将链接硬编码为始终将新问题与项目ID = 1关联起来。这当然不是我们想要的。我们想要做的是让创建新问题的菜单选项成为项目详细信息页面的一部分。这样，一旦您从项目列表页面选择了一个项目，特定的项目上下文将被知晓，我们可以动态地将项目ID附加到创建新问题的链接上。让我们做出这个改变。
- en: 'Open up the project details view file `/protected/views/project/view.php`.
    At the top of this file, you will notice the menu items contained within the `$this->menu`
    array. We need to add another link to create a new issue to the end of this list
    of defined menu links:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 打开项目详细信息视图文件`/protected/views/project/view.php`。在这个文件的顶部，您会注意到包含在`$this->menu`数组中的菜单项。我们需要在已定义的菜单链接列表的末尾添加另一个链接以创建新问题：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What we have done is moved the menu option to create a new issue for the page
    that lists the details for a specific project. We used a link similar to the one
    before, but this time we had to specify the full *controllerID/actionID* pair
    (`issue/create`). Also, rather than hardcoding the project ID to be 1, we have
    used the `$model` variable within the view file, which is the AR class for the
    specific project. In this way, regardless of the project we choose, this variable
    will always reflect the correct project `id` attribute for that project.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的是将菜单选项移动到列出特定项目详细信息的页面上创建新问题。我们使用了类似于之前的链接，但这次我们必须指定完整的*controllerID/actionID*对（`issue/create`）。而不是将项目ID硬编码为1，我们在视图文件中使用了`$model`变量，这是特定项目的AR类。通过这种方式，无论我们选择哪个项目，这个变量都将始终反映该项目的正确项目`id`属性。
- en: With this in place, we can also remove the other link where we hardcoded the
    project ID to be `1` in the `protected/views/issue/index.php` view file.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，我们还可以删除另一个链接，我们在`protected/views/issue/index.php`视图文件中将项目ID硬编码为`1`。
- en: 'Now that we have the project context properly set when creating a new issue,
    we can remove the project field as a user input form field. Open up the view file
    for the new issue form `/protected/views/issue/_form.php`. Remove the following
    lines that are associated with the project input field:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在创建新问题时已经正确设置了项目上下文，我们可以将项目字段作为用户输入表单字段删除。打开新问题表单的视图文件`/protected/views/issue/_form.php`。删除与项目输入字段相关的以下行：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'However, as the `project_id` attribute will not be submitted with the form,
    we will need to set the `project_id` parameter based on the one set from the filter
    we just implemented. Since we know the associated project ID already, let''s explicitly
    set the `Issue::project_id` to the value of the `id` property of the project instance
    created by our previously implemented filter. So alter the `IssueController::actionCreate()`
    method as the following highlighted code suggests:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于`project_id`属性不会随表单一起提交，我们需要根据我们刚刚实现的过滤器设置的值来设置`project_id`参数。由于我们已经知道关联的项目ID，让我们明确地将`Issue::project_id`设置为我们先前实现的过滤器创建的项目实例的`id`属性的值。因此，根据以下突出显示的代码修改`IssueController::actionCreate()`方法：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now when we submit the form back, the `project_id` attribute for the issue active
    record instance will be correctly set. Even though we don't have our owner and
    requestor dropdowns set yet, we can submit the form and a new issue will be created
    with the proper project ID set.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们提交表单时，问题活动记录实例的`project_id`属性将被正确设置。即使我们还没有设置我们的所有者和请求者下拉框，我们也可以提交表单，新问题将被创建并正确设置项目ID。
- en: Returning back to the owner and requester dropdowns
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回到所有者和请求者下拉框
- en: 'Finally, we can turn back to what we were setting out to do, which is to change
    the owner and requester fields to be the drop-down choices of the valid members
    of that project. In order to properly do this, we need to associate some users
    with a project. Since user management is the focus of the upcoming chapters, we
    will do this manually by adding the association directly to the database via direct
    SQL. Let''s add two test users using the following SQL:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以回到我们原来要做的事情，即将所有者和请求者字段更改为该项目的有效成员的下拉选择。为了正确地做到这一点，我们需要将一些用户与项目关联起来。由于用户管理是即将到来的章节的重点，我们将通过直接使用直接SQL将这些关联手动添加到数据库中来完成这一点。让我们使用以下SQL添加两个测试用户：
- en: '[PRE23]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'We are using the one-way `MD5` hashing algorithm here because of its ease of
    use and because it is widely available with the 5.x versions of MySQL and PHP.
    However, it is now known that `MD5` is "broken" as a one-way hashing algorithm
    with regard to security, and it is not suggested that you use this hashing algorithm
    in a production environment. Please consider using *Bcrypt* for your real production
    applications. Here are some URLs providing more information on *Bcrypt*:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用单向`MD5`哈希算法，因为它易于使用，并且在MySQL和PHP的5.x版本中广泛可用。然而，现在已经知道`MD5`作为单向哈希算法在安全方面是“破碎的”，不建议在生产环境中使用这个哈希算法。请考虑在您的真实生产应用程序中使用*Bcrypt*。以下是一些提供有关*Bcrypt*更多信息的网址：
- en: '[http://en.wikipedia.org/wiki/Bcrypt](http://en.wikipedia.org/wiki/Bcrypt)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Bcrypt](http://en.wikipedia.org/wiki/Bcrypt)'
- en: '[http://php.net/manual/en/function.crypt.php](http://php.net/manual/en/function.crypt.php)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://php.net/manual/en/function.crypt.php](http://php.net/manual/en/function.crypt.php)'
- en: '[http://www.openwall.com/phpass/](http://www.openwall.com/phpass/)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.openwall.com/phpass/](http://www.openwall.com/phpass/)'
- en: 'When you run this on the `trackstar` database, it will create two new users
    in our system with the IDs 1 and 2\. Let''s also manually assign these two users
    to project #1 with the following SQL:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在`trackstar`数据库上运行时，它将在我们的系统中创建两个具有ID 1和2的新用户。让我们也手动将这两个用户分配给项目#1，使用以下SQL：
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After running the previous SQL statements, we have two valid members assigned
    to project #1.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行前面的SQL语句之后，我们已经将两个有效成员分配给项目#1。
- en: 'One of the wonderful features of relational Active Record within Yii is the
    ability to access the valid members of a project that an issue belongs to, directly
    from the issue `$model` instance itself. When we used the Gii tool to initially
    create our issue model class, we ensured that the **Build Relations** checkbox
    was ticked. This instructed Gii to look at the underlying database and define
    the relevant relationships. This can be seen in the `relations()` method within
    `/protected/models/Issue.php`. Since we created this class after adding the appropriate
    relationships to the database, the method should look something like the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Yii中关系型Active Record的一个很棒的特性是能够直接从问题`$model`实例中访问问题所属项目的有效成员。当我们使用Gii工具最初创建我们的问题模型类时，我们确保选中了**构建关系**复选框。这指示Gii查看底层数据库并定义相关的关系。这可以在`/protected/models/Issue.php`中的`relations()`方法中看到。由于我们在添加适当的关系到数据库后创建了这个类，该方法应该看起来像以下内容：
- en: '[PRE25]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `//NOTE` comment from the previous code snippet suggests that you may have
    slightly different, or want slightly different, class attribute names and encourages
    you to adjust them as needed. This array configuration defines properties on the
    model instance that are themselves other AR instances. With these relations in
    place, we can access the related AR instances incredibly easily. For example,
    say we want to access the project to which an issue is associated. We can do so
    using the following syntax:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码片段中的`//NOTE`注释表明您可能具有略有不同的类属性名称，或者希望略有不同，并鼓励您根据需要进行调整。这个数组配置定义了模型实例上的属性，这些属性本身是其他AR实例。有了这些关系，我们可以非常容易地访问相关的AR实例。例如，假设我们想要访问与问题相关联的项目。我们可以使用以下语法来实现：
- en: '[PRE26]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Since we created our `Project` model class prior to having other tables and
    relationships defined in our database, there are no relations defined yet. However
    now that we have some relationships defined, we need to add these to the `Project::relations()`
    method. Open up the project AR class `/protected/models/Project.php` and replace
    the entire `relations()` method with the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在数据库中定义其他表和关系之前创建了我们的`Project`模型类，因此尚未定义关系。但是现在我们已经定义了一些关系，我们需要将这些添加到`Project::relations()`方法中。打开项目AR类`/protected/models/Project.php`，并用以下内容替换整个`relations()`方法：
- en: '[PRE27]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With these in place, we can easily access all of the issues and/or users associated
    with a project with incredibly easy syntax. For example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们可以很容易地使用非常简单的语法访问与项目相关的所有问题和/或用户。例如：
- en: '[PRE28]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Normally we would have to write complicated SQL join statements to access such
    related data. Using relational AR in Yii saves us from this complexity and tedium.
    We can now access these relationships in a very elegant and concise, object-oriented
    manner that is very easy to read and understand.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我们需要编写复杂的SQL连接语句来访问这样的相关数据。在Yii中使用关系AR可以避免这种复杂性和单调性。我们现在可以以非常优雅和简洁的面向对象方式访问这些关系，这样非常容易阅读和理解。
- en: Generating the data to populate the dropdowns
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成用于填充下拉框的数据
- en: We'll follow a similar approach as we did for the status and type drop-down
    data in order to implement a valid user dropdown. We'll add a `getUserOptions()`
    method to our `Project` model class.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用与状态和类型下拉数据相似的方法来实现有效的用户下拉。我们将在我们的`Project`模型类中添加一个`getUserOptions()`方法。
- en: 'Open up the file `/protected/models/Project.php` and add the following method
    to the bottom of the class:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件`/protected/models/Project.php`，并在类的底部添加以下方法：
- en: '[PRE29]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here we are using Yii's `CHtml` helper class to help us create an array of `id=>username`
    pairs from each user associated with the project. Remember that the `users` property
    (defined in the `relations()` method) in the project class mapped to an array
    of user AR instances. The `CHtml::listData()` method can take in this list and
    produce a valid array in a suitable format for `CActiveForm::dropDownList()`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用Yii的`CHtml`辅助类来帮助我们从与项目相关的每个用户创建一个`id=>username`对的数组。记住，在项目类中`relations()`方法中定义的`users`属性映射到用户AR实例的数组。`CHtml::listData()`方法可以接受这个列表，并产生一个适合`CActiveForm::dropDownList()`的有效数组格式。
- en: 'Now that we have our `getUserOptions()` method returning the data we need,
    we should implement the dropdown to display that returned data. We have already
    used a filter to set the associated project ID from the `$_GET` request, and we
    used this value to set the `project_id` attribute on the new issue instance at
    the beginning of the `IssueController::actionCreate()` method. So now, through
    the lovely power of Yii''s relational AR features, we can easily populate our
    dropdown of users using the associated `Project` model. Here are the changes we
    need to make in the issue form:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`getUserOptions()`方法返回我们需要的数据，我们应该实现下拉框以显示返回的数据。我们已经使用过滤器从`$_GET`请求中设置了关联的项目ID，并且我们在`IssueController::actionCreate()`方法的开头使用了这个值来设置新问题实例的`project_id`属性。所以现在，通过Yii关系AR功能的美妙力量，我们可以轻松地使用关联的`Project`模型来填充我们的用户下拉框。以下是我们在问题表单中需要做的更改：
- en: 'Open up the view file containing the input form elements `/protected/views/issue/_form.php`,
    and find the two text-input field form element definitions for `owner_id` and
    `requester_id` and replace it with the following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 打开包含输入表单元素的视图文件`/protected/views/issue/_form.php`，找到`owner_id`和`requester_id`的两个文本输入字段表单元素定义，并用以下代码替换它：
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now if we view our issue creation form again, we see two nicely populated drop-down
    fields for the **Owner** and **Requester**:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次查看我们的问题创建表单，我们会看到**所有者**和**请求者**两个下拉框字段已经很好地填充了。
- en: '![Generating the data to populate the dropdowns](graphics/8727_05_09.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![生成用于填充下拉框的数据](graphics/8727_05_09.jpg)'
- en: Making one last change
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进行最后一次更改
- en: Since we already have the create issue form view file open, let's quickly make
    one last change. The creation time and user as well as the last updated time and
    user fields that we have on every table for basic history and auditing purposes
    should not be exposed to the user. Later we will alter the application logic to
    automatically populate these fields upon inserts and updates. For now, let's just
    remove them as inputs on the form.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经打开了创建问题表单视图文件，让我们快速进行最后一次更改。我们在每个表上都有用于基本历史和审计目的的创建时间和用户以及最后更新时间和用户字段，不应该暴露给用户。稍后我们将更改应用程序逻辑，以在插入和更新时自动填充这些字段。现在，让我们只是将它们从表单中移除。
- en: 'Just completely remove the following lines from `/protected/views/issue/_form.php`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 从`/protected/views/issue/_form.php`中完全删除以下行：
- en: '[PRE31]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following screenshot shows what our new issue creation form now looks like
    with all of these changes:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的新问题创建表单经过所有这些更改后的样子：
- en: '![Making one last change](graphics/8727_05_10.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![进行最后一次更改](graphics/8727_05_10.jpg)'
- en: The rest of the CRUD
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRUD的其余部分
- en: The goal of this chapter is to implement all the CRUD operations for Issues.
    We have finalized the creation functionality, but we still need to complete the
    read, update, and delete of issues. Luckily, most of the foundation has already
    been laid by using the Gii CRUD generation functionality. However, since we want
    to manage all the issues within the context of a project, we need to make some
    adjustments to how we access this functionality.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是实现问题的所有CRUD操作。我们已经完成了创建功能，但我们仍需要完成问题的读取、更新和删除。幸运的是，通过使用Gii CRUD生成功能，大部分基础已经搭好了。但是，由于我们希望在项目的上下文中管理所有问题，我们需要对访问这些功能的方式进行一些调整。
- en: Listing the issues
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出问题
- en: Even though there is the `actionIndex()` method in the `IssueController` class
    that displays a list of all the issues in the database, we don't have a need for
    this functionality as it is currently coded. Rather than a separate, standalone
    page that lists all the issues in the database, we want to only list the issues
    that are associated with a specific project. So we'll alter the application to
    display the listing of the issues as part of the project details page. Since we
    are taking advantage of the relational AR model in Yii, it will be a snap to make
    this change.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`IssueController`类中有`actionIndex()`方法，用于显示数据库中所有问题的列表，但我们目前编写的功能并不需要这个功能。我们不想要一个单独的独立页面列出数据库中的所有问题，而是只想列出与特定项目相关联的问题。因此，我们将修改应用程序，以在项目详细信息页面上显示问题列表。由于我们正在利用Yii中的关联AR模型，所以对于这个改变来说将会非常容易。
- en: Altering the project controller
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改项目控制器
- en: First let's alter the `actionView()` method in the `ProjectController` class.
    Since we want to display a list of the issues associated with a specific project,
    we can do this on the same page as the project details page. The method `actionView()`
    is the method that displays the project details.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们修改`ProjectController`类中的`actionView()`方法。因为我们想在同一个页面上显示与特定项目相关联的问题列表，我们可以在项目详细信息页面上做到这一点。`actionView()`方法是显示项目详细信息的方法。
- en: 'Alter that method to be:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 将该方法修改为：
- en: '[PRE32]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here we are using the `CActiveDataProvider` framework class to provide data
    using `CActiveRecord` objects. It will use the associated AR model class to retrieve
    data from the database in a manner that can be used very easily with a great,
    built-in, framework-listing component called `CListView`. We'll use this component
    to display a list of our issues in the view file. We have used the criteria property
    to specify the condition that it should only retrieve the issues associated with
    the project being displayed. We also used the pagination property to limit the
    issue list to just one issue per page. We set this very low so we can quickly
    demonstrate the paging features by just adding another issue. We'll demonstrate
    this soon.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`CActiveDataProvider`框架类来使用`CActiveRecord`对象提供数据。它将使用关联的AR模型类以一种非常容易与内置的框架列表组件`CListView`一起使用的方式从数据库中检索数据。我们将使用这个组件在视图文件中显示我们的问题列表。我们使用了criteria属性来指定条件，它应该只检索与正在显示的项目相关联的问题。我们还使用了pagination属性来限制问题列表每页只显示一个问题。我们将这个值设置得很低，这样我们只需添加另一个问题就可以快速演示分页功能。我们很快会演示这一点。
- en: The last thing we did was add this data provider to the array defined in the
    call to `render()`, to make it available to the view file in a `$issueDataProvider`
    variable.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做的最后一件事是将这个数据提供程序添加到`render()`调用中定义的数组中，以便在视图文件中以`$issueDataProvider`变量的形式提供给它。
- en: Altering the project view file
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改项目视图文件
- en: 'As we just mentioned, we''ll use a framework component called `CListView` to
    display our list of issues on the project details page. Open up `/protected/views/project/view.php`
    and add this to the bottom of that file:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才提到的，我们将使用一个名为`CListView`的框架组件在项目详细信息页面上显示我们的问题列表。打开`/protected/views/project/view.php`并将以下内容添加到文件的底部：
- en: '[PRE33]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here we are setting the `dataProvider` property of `CListView` to be our issue
    data provider that we created above. And then we are configuring it to use the
    `protected/views/issue/_view.php` file as a template for rendering each item in
    the data provider. This file was already created for us by the Gii tool when we
    generated our CRUD for the issues. We are making use of it here to display the
    issues on the project details page.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`CListView`的`dataProvider`属性设置为我们上面创建的问题数据提供程序。然后我们配置它使用`protected/views/issue/_view.php`文件作为渲染数据提供程序中每个项目的模板。当我们为问题生成CRUD时，Gii工具已经为我们创建了这个文件。我们在这里使用它来显示项目详细信息页面上的问题。
- en: Note
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You may recall from way back in [Chapter 1](ch01.html "Chapter 1. Meet Yii"),
    *Meet Yii*, that **Zii** is the official extension library that is packaged with
    the Yii framework. These extensions are developed and maintained by the core Yii
    framework team. You can read more about Zii here: [http://www.yiiframework.com/doc/guide/1.1/en/extension.use#zii-extensions](http://www.yiiframework.com/doc/guide/1.1/en/extension.use#zii-extensions)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得在[第1章](ch01.html "第1章。认识Yii")*认识Yii*中，**Zii**是Yii框架附带的官方扩展库。这些扩展是由核心Yii框架团队开发和维护的。您可以在这里阅读更多关于Zii的信息：[http://www.yiiframework.com/doc/guide/1.1/en/extension.use#zii-extensions](http://www.yiiframework.com/doc/guide/1.1/en/extension.use#zii-extensions)
- en: 'We need to also make a couple of changes to the `/protected/views/issue/_view.php`
    file that we specified as a layout template for each issue. Alter the entire contents
    of that file to be the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对我们指定为每个问题的布局模板的`/protected/views/issue/_view.php`文件进行一些更改。将该文件的整个内容修改为以下内容：
- en: '[PRE34]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now if we save and view our results by looking at the project details page
    for project number 1 (`http://localhost/trackstar/index.php?r=project/view&id=1`),
    and assuming you have created at least one example issue under that project (if
    not, just use the **Create Issue** link from this page to create one), we should
    see what is displayed in the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们保存并查看我们的结果，查看项目编号1的项目详细信息页面（`http://localhost/trackstar/index.php?r=project/view&id=1`），并假设您已经在该项目下创建了至少一个示例问题（如果没有，请在此页面使用**创建问题**链接创建一个），我们应该看到以下截图中显示的内容：
- en: '![Altering the project view file](graphics/8727_05_11.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![修改项目视图文件](graphics/8727_05_11.jpg)'
- en: 'Since we set the pagination property of our data provider very low (remember
    we set it to just 1), we can add one more issue to demonstrate the built-in paging
    functionality. Adding one more issue changes the display of the issues to have
    links that allow us to go from page to page within our project issues'' listing,
    as depicted in the following screenshot:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将数据提供程序的分页属性设置得非常低（记住我们只设置为1），我们可以添加一个问题来演示内置的分页功能。添加一个问题会改变问题的显示，使我们能够在项目问题列表中从一页到另一页，如下截图所示：
- en: '![Altering the project view file](graphics/8727_05_12.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![修改项目视图文件](graphics/8727_05_12.jpg)'
- en: Final tweaks
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的微调
- en: We now have a list of our issues associated with a project and are displaying
    them on the project details page. We also have the ability to view the details
    of an issue (that is Read them) as well as links to Update and Delete issues.
    So our basic CRUD operations are in place.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了与项目相关联的问题列表，并在项目详细信息页面上显示它们。我们还可以查看问题的详细信息（即阅读它们），以及更新和删除问题的链接。因此，我们的基本CRUD操作已经就位。
- en: However, there are still a few items that need to be addressed before we can
    complete this section of our application. One thing we will notice is that the
    issues display list is showing numeric ID numbers for the **Type**, **Status**,
    **Owner**, and **Requester** fields. We should change this so that the text values
    for those are displayed instead. Also, since the issues are under a specific project
    already, it is a bit redundant to have the project ID displayed as part of the
    issue list data. So we can remove that. Finally, we need to address some of the
    navigational links that are displayed on the various other issue-related forms
    to ensure that we are always returning to this project details page as the starting
    place for all of our issue management.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在完成应用程序的这一部分之前，还有一些问题需要解决。我们会注意到问题显示列表显示了**类型**，**状态**，**所有者**和**请求者**字段的数字ID号。我们应该更改这样，以便显示这些字段的文本值。此外，由于问题已经属于特定项目，将项目ID显示为问题列表数据的一部分有点多余。因此，我们可以删除它。最后，我们需要解决一些导航链接，这些链接显示在各种其他与问题相关的表单上，以确保我们始终返回到此项目详细信息页面，作为我们所有问题管理的起始位置。
- en: We'll tackle these one at a time.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐一解决这些问题。
- en: Getting the status and type text to display
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取状态和类型文本以显示
- en: Previously we added public methods to the `Issue` AR class, to retrieve the
    status and type options to populate the dropdowns on the issue creation form.
    We need to add similar methods on this AR class to return the text for a specific
    status or type ID.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，我们在`Issue` AR类中添加了公共方法，以检索状态和类型选项，以填充问题创建表单上的下拉菜单。我们需要在这个AR类上添加类似的方法，以返回特定状态或类型ID的文本。
- en: 'Add the following two, new public methods to the `Issue` model class (`/protected/models/Issue.php`)
    to retrieve the status and type text for the current issue:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Issue`模型类(`/protected/models/Issue.php`)中添加以下两个新的公共方法，以检索当前问题的状态和类型文本：
- en: '[PRE35]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: These return the status text value ("Not Yet Started", "Started", or "Finished")
    and type text value ("Bug", "Feature", or "Task") for the `Issue` instance.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法返回状态文本值（"尚未开始"，"已开始"或"已完成"）和类型文本值（"错误"，"功能"或"任务"）的`Issue`实例。
- en: Adding the text display to the form
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向表单添加文本显示
- en: Now that we have our two new public methods that will return the valid status
    and type text for our listing to display, we need to make use of them. Alter the
    following lines of code in `/protected/views/issue/_view.php`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两个新的公共方法，它们将返回我们列表显示的有效状态和类型文本，我们需要利用它们。更改`/protected/views/issue/_view.php`中的以下代码行。
- en: 'Change this `<?php echo CHtml::encode($data->type_id); ?>` to this:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个`<?php echo CHtml::encode($data->type_id); ?>`更改为这个：
- en: '[PRE36]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'And this `<?php echo CHtml::encode($data->status_id); ?>` to this:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个`<?php echo CHtml::encode($data->status_id); ?>`更改为这个：
- en: '[PRE37]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'After these changes, our issues listing page for **Project #1**, `http://localhost/trackstar/index.php?r=issue&pid=1`,
    no longer displays integer values for our issue type and status fields. It now
    looks like what is displayed in the following screenshot:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这些更改，我们**项目＃1**的问题列表页面，`http://localhost/trackstar/index.php?r=issue&pid=1`，不再显示我们问题类型和状态字段的整数值。现在看起来像以下截图中显示的样子：
- en: '![Adding the text display to the form](graphics/8727_05_13.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![向表单添加文本显示](graphics/8727_05_13.jpg)'
- en: Since we are using the same view file to display our issues listing on our project
    details page, these changes are reflected there as well.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用相同的视图文件在项目详细信息页面上显示我们的问题列表，这些更改也会反映在那里。
- en: Changing the issue detail view
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改问题详细视图
- en: 'We also need to make a few other changes to the details view of the issue.
    Currently if we view the issue details, it is displayed as in the following screenshot:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要对问题的详细视图进行一些其他更改。当前，如果查看问题详细信息，它显示如下截图所示：
- en: '![Changing the issue detail view](graphics/8727_05_14.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![更改问题详细视图](graphics/8727_05_14.jpg)'
- en: 'This is using a view file we have not yet altered. It is still displaying the
    project ID, which we don''t need to display, as well as the **Type** and **Status**
    as integer values rather than their associated text values. Opening up the view
    file used to render this display, `/protected/views/issue/view.php`, we notice
    that it is using the Zii extension widget `CDetailView`, which we have not seen
    before. This is similar to the `CListView` widget used to display the listing,
    but is used to display the details of a single data model instance rather than
    for displaying a list view of many. The following is the relevant code from this
    file showing the use of this widget:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用我们尚未更改的视图文件。它仍然显示项目ID，我们不需要显示，以及**类型**和**状态**作为整数值，而不是它们关联的文本值。打开用于呈现此显示的视图文件`/protected/views/issue/view.php`，我们注意到它使用了我们以前没有见过的Zii扩展小部件`CDetailView`。这类似于用于显示列表的`CListView`小部件，但用于显示单个数据模型实例的详细信息，而不是用于显示许多列表视图。以下是显示此小部件使用的相关代码：
- en: '[PRE38]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here we are setting the data model of the `CDetailView` widget to be the `Issue`
    model class instance (that is the specific instance we want to display the details
    of), and then setting a list of attributes of the model instance to be displayed
    in the rendered detail view. An attribute can be specified as a string in the
    format of `Name:Type:Label`, of which both `Type` and `Label` are optional, or
    as an array itself. In this case just the name of the attributes are specified.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`CDetailView`小部件的数据模型设置为`Issue`模型类的实例（即我们要显示详细信息的特定实例），然后设置要在渲染的详细视图中显示的模型实例的属性列表。属性可以被指定为`Name:Type:Label`格式的字符串，其中`Type`和`Label`都是可选的，或者作为数组本身。在这种情况下，只指定属性的名称。
- en: If we specify an attribute as an array, we can customize the display further
    by declaring a value element. We will take this approach in order to specify the
    model class methods `Issue::getTypeText()` and `Issue::getStatusText()` to be
    used to get the text values for the **Type** and **Status** fields respectively.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将属性指定为数组，我们可以通过声明值元素来进一步自定义显示。我们将采取这种方法，以指定模型类方法`Issue::getTypeText()`和`Issue::getStatusText()`用于获取**类型**和**状态**字段的文本值。
- en: 'Let''s change this use of `CDetailView` to use the following configuration:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`CDetailView`的使用更改为以下配置：
- en: '[PRE39]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Here we have removed a few attributes from being displayed at all, namely the
    `project_id`, `create_time`, `update_time`, `create_user_id`, and `update_user_id`
    attributes. We will handle the population and display of some of these later,
    but for now we can just remove them from the detail display.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经删除了一些属性的显示，即`project_id`，`create_time`，`update_time`，`create_user_id`和`update_user_id`属性。我们稍后会处理一些这些属性的填充和显示，但现在我们可以将它们从详细显示中删除。
- en: 'We also changed the declaration of the `type_id` and `status_id` attributes
    to use an array specification so that we could use the value element. We have
    specified that the corresponding `Issue::getTypeText()` and `Issue::getStatusText()`
    methods be used for getting the values of these attributes. With these changes
    in place, viewing the issue details page shows the following:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还改变了`type_id`和`status_id`属性的声明，以使用数组规范，以便我们可以使用值元素。我们已经指定了相应的`Issue::getTypeText()`和`Issue::getStatusText()`方法用于获取这些属性的值。有了这些改变，查看问题详细页面显示如下：
- en: '![Changing the issue detail view](graphics/8727_05_15.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![更改问题详细视图](graphics/8727_05_15.jpg)'
- en: Okay, we are getting much closer to what we want, but there are still a couple
    of changes we need to make.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们离我们想要的更近了，但还有一些改变我们需要做。
- en: Displaying owner and requester names
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示所有者和请求者的名称
- en: Things are looking better, but we still see integer identifiers being displayed
    for the **Owner** and **Requester** rather than the actual usernames. We'll take
    a similar approach to what we did for the type and status text displays. We'll
    add two new public methods on the `Issue` model class to return the names of these
    two properties.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 事情看起来更好了，但我们仍然看到整数标识符被显示为**所有者**和**请求者**，而不是实际的用户名。我们将采取类似的方法来处理类型和状态文本显示。我们将在`Issue`模型类上添加两个新的公共方法，以返回这两个属性的名称。
- en: Using relational AR
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用关联AR
- en: Since our issues and users are represented as separate database tables and related
    through a foreign key relationship, we can access the `owner` and `requester`
    username directly from `$model` in the view file. Utilizing the power of Yii's
    relational AR model features, displaying the username attribute of the related
    `User` model class instance is a snap.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的问题和用户分别表示为单独的数据库表，并通过外键关系相关联，我们可以直接从视图文件中的`$model`中访问`owner`和`requester`用户名。利用Yii的关联AR模型功能，显示相关`User`模型类实例的用户名属性非常简单。
- en: 'As we have mentioned, the model class `Issue::relations()` method is where
    the relationships are defined. If we take a peek at this method, we see the following:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所提到的，模型类`Issue::relations()`方法是定义关系的地方。如果我们来看一下这个方法，我们会看到以下内容：
- en: '[PRE40]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The highlighted code is what is most relevant for our needs. There are both
    `owner` and `requester` attributes defined as relations to the `User` model class.
    These definitions specify that the values of these attributes are `User` model
    class instances. The `owner_id` and `requester_id` parameters specify the unique
    primary key of their respective `User` class instances. So we can access these
    just as we do our other attributes of the `Issue` model class.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 突出显示的代码是我们需求最相关的。`owner`和`requester`属性都被定义为与`User`模型类的关系。这些定义指定这些属性的值是`User`模型类的实例。`owner_id`和`requester_id`参数指定了它们各自`User`类实例的唯一主键。因此，我们可以像访问`Issue`模型类的其他属性一样访问这些属性。
- en: 'To display the username of the owner and requester `User` class instances,
    we once again change our `CDetailView` configuration to the following:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示所有者和请求者`User`类实例的用户名，我们再次将`CDetailView`配置更改为以下内容：
- en: '[PRE41]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'After making these changes, our issues detail listing is starting to look pretty
    good. The following screenshot shows the progress we made so far:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 做出这些改变后，我们的问题详细列表开始看起来相当不错。以下截图显示了我们迄今为止取得的进展：
- en: '![Using relational AR](graphics/8727_05_16.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![使用关联AR](graphics/8727_05_16.jpg)'
- en: Making some final navigation tweaks
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做一些最终的导航调整
- en: We are very close to completing the functionality that we set out to implement
    within this chapter. The only thing left to do is to clean up our navigation just
    a little. You may have noticed that there are still some options available that
    allow the user to navigate to an entire listing of issues, or to create a new
    issue, outside of a project context. For the purposes of our TrackStar application,
    everything we do with issues should be within the context of a specific project.
    Earlier we enforced this project context for creating a new issue, which is a
    good start, but we still need to make a few changes.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们非常接近完成本章中设定要实现的功能。唯一剩下的事情就是稍微清理一下我们的导航。您可能已经注意到，仍然有一些选项可供用户在项目上下文之外导航到整个问题列表，或者创建一个新问题。对于我们的TrackStar应用程序，我们对问题的所有操作都应该在特定项目的上下文中进行。我们之前已经强制要求在创建新问题时使用项目上下文，这是一个很好的开始，但我们仍然需要做一些改变。
- en: One thing that we will notice is that the application still allows the user
    to navigate to a listing of all issues, across all projects. For example, on an
    issue detail page, such as `http://localhost/trackstar/index.php?r=issue/view&id=1`,
    we see that in the right-hand column menu navigation there are the links **List
    Issue** and **Manage Issue**, corresponding to `http://localhost/trackstar/index.php?r=issue/index`
    and `http://localhost/trackstar/index.php?r=issue/admin` respectively (remember
    that to access the admin page, you have to be logged in as `admin/admin`). These
    still display all the issues across all the projects. So we need to limit this
    list to a specific project.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会注意到的一件事是，应用程序仍然允许用户导航到跨所有项目的所有问题列表。例如，在问题详情页面，如`http://localhost/trackstar/index.php?r=issue/view&id=1`，我们看到右侧菜单导航中有**问题列表**和**管理问题**的链接，分别对应`http://localhost/trackstar/index.php?r=issue/index`和`http://localhost/trackstar/index.php?r=issue/admin`（请记住，要访问管理页面，您必须以`admin/admin`身份登录）。这些链接仍然显示所有项目的所有问题。因此，我们需要将此列表限制为特定项目。
- en: Since these links originate from the issue details page and that specific issue
    has an associated project, we can first alter the links to be passed in a specific
    project ID, and then use that project ID as the criteria to limit our issue's
    query in both the `IssueController::actionIndex()` and `IssueController::actionAdmin()`
    methods.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些链接源自问题详情页面，并且特定问题有关联的项目，我们可以首先修改链接以传递特定项目ID，然后将该项目ID作为限制问题查询的条件，分别在`IssueController::actionIndex()`和`IssueController::actionAdmin()`方法中使用。
- en: 'First let''s alter the links. Open up the `/protected/views/issue/view.php`
    file and locate the array of menu items towards the top of the file. Change the
    menu configuration to be:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们修改链接。打开`/protected/views/issue/view.php`文件，找到文件顶部的菜单项数组。将菜单配置更改为：
- en: '[PRE42]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The changes made are highlighted. We have added a new querystring parameter
    to the **Create Issue** link, as well as to the issue listing page and the issue
    admin listing page. We already knew that we had to make this change for the create
    link, since we have previously implemented a filter to enforce that a valid project
    context be made available prior to creating a new issue. We won't have to make
    any further changes relative to this link. But for the index and admin links,
    we will need to alter their corresponding action methods to make use of this new
    querystring variable.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 所做的更改已经突出显示。我们已经在**创建问题**链接以及问题列表页面和问题管理列表页面中添加了一个新的查询字符串参数。我们已经知道我们必须对创建链接进行此更改，因为我们先前实施了一个过滤器，以强制在创建新问题之前提供有效的项目上下文。相对于此链接，我们不需要进行进一步的更改。但是对于索引和管理链接，我们需要修改它们对应的操作方法以使用这个新的查询字符串变量。
- en: 'Since we have already configured a filter to load the associated project using
    the querysting variable, let''s take advantage of this. We''ll add to the filter
    configuration so that our filter method is called prior to both the `IssueController::actionIndex()`
    and `IssueController::actionAdmin()` methods being executed. Change the `IssueController::filters()`
    method as such:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经配置了一个过滤器来使用查询字符串变量加载关联的项目，让我们利用这一点。我们将添加到过滤器配置中，以便在执行`IssueController::actionIndex()`和`IssueController::actionAdmin()`方法之前调用我们的过滤器方法。将`IssueController::filters()`方法更改为：
- en: '[PRE43]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'With this in place, the associated project will be loaded and available for
    use. Let''s use it in our `IssueController::actionIndex()` method. Alter that
    method to be:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个设置，关联的项目将被加载并可供使用。让我们在`IssueController::actionIndex()`方法中使用它。修改该方法为：
- en: '[PRE44]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here, as we have done before, we are simply adding a condition to the creation
    of the model data provider to only retrieve the issues associated with the project.
    This will limit the list of issues to just the ones under the project.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，与以前一样，我们只是在创建模型数据提供程序的条件中添加了一个条件，以仅检索与项目相关的问题。这将限制问题列表仅显示项目下的问题。
- en: We need to make the same change to the admin listing page. However, this view
    file `/protected/views/issue/admin.php` is using the results of the model class
    `Issue::search()` method to provide the listing of the issues. So we actually
    need to make two changes to enforce the project context with this listing.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对管理列表页面进行相同的更改。但是，这个视图文件`/protected/views/issue/admin.php`正在使用模型类`Issue::search()`方法的结果来提供问题列表。因此，我们实际上需要对这个列表强制执行项目上下文进行两次更改。
- en: 'First we need to alter the `IssueController::actionAdmin()` method to set the
    correct `project_id` attribute on the model instance it is sending to the view.
    The following highlighted code shows this necessary change:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要修改`IssueController::actionAdmin()`方法，以在将模型实例发送到视图时设置正确的`project_id`属性。以下突出显示的代码显示了这个必要的更改：
- en: '[PRE45]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then we need to add to our criteria in the `Issue::search()` model class method.
    The following highlighted code identifies the change that we need to make to this
    method:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要在`Issue::search()`模型类方法中添加到我们的条件。以下突出显示的代码标识了我们需要对这个方法进行的更改：
- en: '[PRE46]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Here, we have removed the `$criteria->compare()` call using `project_id` with
    the direct `$criteria->condition()` that the `project_id` value be exactly equal
    to our project context. With these changes in place, the issues listed on the
    admin page are now restricted to be only those that are associated with the specific
    project.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`$criteria->condition()`直接移除了`$criteria->compare()`调用，该调用使用`project_id`的值必须完全等于我们的项目上下文。有了这些变化，管理页面上列出的问题现在被限制为仅与特定项目相关联的问题。
- en: Note
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are several places throughout the view files under `/protected/views/issues/`
    that contain links that require a `pid` querystring to be added in order to work
    properly. We leave it as an exercise to the reader to make the appropriate changes
    following the same approach as provided in these examples. As we proceed with
    our application development, we'll assume that all the links to create a new issue
    or to display a list of issues are properly formatted to contain the appropriate
    `pid` querystring parameter.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/protected/views/issues/`下的视图文件中有几个地方包含需要添加`pid`查询字符串才能正常工作的链接。我们将其留给读者根据这些示例提供的相同方法进行适当的更改。随着我们应用程序的开发，我们将假设所有创建新问题或显示问题列表的链接都已正确格式化，以包含适当的`pid`查询字符串参数。
- en: Summary
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We were able to cover a lot of different topics in this chapter. Based on the
    relationship between *issues*, *projects*, and *users* within our application,
    the implementation of our issue-management functionality was significantly more
    complicated than our project entity management that we worked on in the previous
    chapter. Fortunately, Yii was able to come to our rescue many times to help alleviate
    the pain of having to write all of the code needed to address this complexity.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了许多不同的主题。根据我们应用程序中*问题*、*项目*和*用户*之间的关系，我们在本章中实现问题管理功能的复杂性明显比我们在上一章中处理的项目实体管理要复杂得多。幸运的是，Yii能够多次帮助我们减轻编写所有需要解决这种复杂性的代码的痛苦。
- en: We leaned on our good friend Gii for Active Record model creation as well as
    for the initial implementation of all basic CRUD operations against the issue
    entity. We again used Yii migrations to help facilitate our needed database schema
    changes to support our issue functionality. We got to use relational Active Record
    in Yii, and saw how easy it is to retrieve related database information using
    this feature. We introduced controller filters as a means to tap into the request
    life cycle and implement business logic before and/or after controller action
    methods. And we demonstrated how to use dropdowns in our Yii forms.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们依靠我们的好朋友Gii来创建Active Record模型，以及对问题实体进行所有基本CRUD操作的初始实现。我们再次使用Yii迁移来帮助实现我们需要的数据库架构更改，以支持我们的问题功能。我们使用了Yii中的关联Active
    Record，并看到使用这一特性轻松检索相关的数据库信息。我们引入了控制器过滤器作为一种手段，以在控制器动作方法之前和/或之后实现业务逻辑并进入请求生命周期。我们演示了如何在Yii表单中使用下拉菜单。
- en: We have made a lot of progress on our basic application thus far, and have done
    so without having to write a lot of code. The Yii framework itself has done most
    of the heavy lifting. We now have a working application that allows us to manage
    projects and also manage the issues within those projects. This is the heart of
    what our application is trying to achieve. We should feel proud of the accomplishments
    thus far.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在基本应用程序上取得了很大进展，而且在不必编写大量代码的情况下完成了这一切。Yii框架本身已经完成了大部分繁重的工作。我们现在有一个可以管理项目并管理项目中问题的工作应用程序。这是我们的应用程序试图实现的核心。到目前为止，我们应该为取得的成就感到自豪。
- en: However, we still have a long way to go before this application is truly ready
    for production use. A major missing piece is all of the needed functionality around
    user management. In the next two chapters, we will be diving into user authentication
    and authorization. We'll start by showing how Yii user authentication works, and
    start authenticating our users against the usernames and passwords stored in the
    database.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这个应用程序真正准备投入生产使用之前，我们还有很长的路要走。一个主要缺失的部分是围绕用户管理的所有必需功能。在接下来的两章中，我们将深入研究用户认证和授权。我们将首先展示Yii用户认证的工作原理，并开始对我们的用户进行认证，以验证他们的用户名和密码是否存储在数据库中。
