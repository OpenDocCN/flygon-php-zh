- en: PHP7, To Code It Better
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP7，编写更好的代码
- en: PHP7 came with many new features and changes. However, none of them were specifically
    for REST or web services. In fact, REST does not have any direct relation with
    language constructs. This is because REST is an architecture, while a language
    is there to provide constructs for implementation. So, does that mean PHP7 has
    some construct or feature which can make this implementation better? Yes and no.
    It depends on what we mean by implementation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PHP7带来了许多新功能和变化。然而，它们中没有一个是专门针对REST或Web服务的。事实上，REST与语言结构没有直接关系。这是因为REST是一种架构，而语言是为了提供实现而存在的构造。那么，这是否意味着PHP7有一些构造或功能可以使这种实现更好？是和否。这取决于我们对实现的理解。
- en: If we mean just getting a request and returning a response then No, there is
    no such specific feature. But, any RESTful Web Service is related to an entity,
    and an entity can have its own logic. So to provide RESTful Web Service for that
    entity, we need to write that logic as well. For this purpose, we will need to
    write more PHP code than just getting a request and returning a response. So to
    keep the code simple and clean, yes, PHP7 offers us many things.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的意思只是获取一个请求并返回一个响应，那么不，没有这样的特定功能。但是，任何RESTful Web服务都与一个实体相关联，而一个实体可以有自己的逻辑。因此，为了为该实体提供RESTful
    Web服务，我们还需要编写该逻辑。为此，我们需要编写更多的PHP代码，而不仅仅是获取请求并返回响应。因此，为了保持代码简单和清晰，是的，PHP7为我们提供了许多东西。
- en: 'I assume that you have the basic knowledge of PHP, as knowing PHP basics is
    a prerequisite of this book. So, we will not be looking at PHP5\. In this chapter,
    we will be looking at many of the PHP7 features and changes, are either very important
    to know or we will be using in our code. We are directly going into these features.
    We are not going in to the details of installing or upgrading to PHP7 because
    there are dozens of tutorials available for that on the internet. Here is a list
    of features and changes we are going to discuss:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你已经掌握了PHP的基础知识，因为了解PHP基础知识是本书的先决条件。因此，我们不会看PHP5。在本章中，我们将看一下许多PHP7的功能和变化，这些功能和变化要么非常重要，要么我们将在我们的代码中使用。我们将直接进入这些功能。我们不会详细介绍安装或升级到PHP7，因为互联网上有数十个教程可供参考。以下是我们将讨论的功能和变化的列表：
- en: Scalar type declaration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量类型声明
- en: Return type declaration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回类型声明
- en: Null coalescing operator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空合并运算符
- en: Spaceship operator
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 太空船运算符
- en: Group use statement
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组使用语句
- en: Generator-related new features
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与生成器相关的新功能
- en: Generator return expression
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器返回表达式
- en: Generator delegation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器委托
- en: Anonymous classes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名类
- en: '`Closure::call()` function'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Closure::call()`函数'
- en: Errors and exceptions
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误和异常
- en: PHP7.1 features
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP7.1功能
- en: Nullable types
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可空类型
- en: Symmetric array destructuring
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对称数组解构
- en: Support for keys in `list()`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list()`中支持键'
- en: Multi-catch exception handling
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多捕获异常处理
- en: Scalar type declaration
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标量类型声明
- en: In PHP7, we can now declare the type of parameters being passed to a function.
    They could be only user defined classes in previous versions, but now they can
    be scalar types as well. By scalar type, we mean basic primitive types, such as
    `int`, `string`, and `float`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP7中，我们现在可以声明传递给函数的参数的类型。在以前的版本中，它们只能是用户定义的类，但现在它们也可以是标量类型。通过标量类型，我们指的是基本的原始类型，比如`int`、`string`和`float`。
- en: 'Previously, to validate an argument passed to a function, we needed to use
    some sort of `if-else`. So, we used to do something like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，要验证传递给函数的参数，我们需要使用某种`if-else`。因此，我们过去会这样做：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we used `if` to make sure that the type of the variables `$num1` and `$num2`
    is `int`, otherwise we are throwing an exception. If you are a PHP developer from
    the earlier days who likes to write as little code as possible, then chances are
    that you were not even checking the type of parameter. However, if you do not
    check the parameter type then this can result in a runtime error. So to avoid
    this, one should check the parameter type and that is what PHP7 has made easier.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`if`来确保变量`$num1`和`$num2`的类型是`int`，否则我们会抛出异常。如果你是一个喜欢尽可能少写代码的早期PHP开发人员，那么你甚至可能根本不检查参数的类型。然而，如果你不检查参数类型，这可能导致运行时错误。因此，为了避免这种情况，应该检查参数类型，这就是PHP7所做的事情。
- en: 'This is how we validate parameter type now in PHP7:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们现在在PHP7中验证参数类型的方式：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see now, we simply type hint as `int` and we do not need to validate
    each parameter separately. If an argument will not be an integer, it should throw
    an exception. However, you can see that it didn't show `TypeError` when `2` was
    passed as a string and instead it did an implicit conversion and assumed it as
    `int 2`. It did so because, by default, the PHP code was running in coercive mode.
    If strict mode is enabled, writing `"2"` instead of 2 will cause `TypeError` instead
    of the implicit conversion. To enable a strict mode, we need to use the `declare`
    function at the start of the PHP code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你现在所看到的，我们只需将`int`作为类型提示，而不需要单独验证每个参数。如果参数不是整数，它应该抛出异常。然而，你可以看到，当`2`作为字符串传递时，它并没有显示`TypeError`，而是进行了隐式转换，并将其视为`int
    2`。这是因为，默认情况下，PHP代码是在强制模式下运行的。如果启用了严格模式，写`"2"`而不是2将导致`TypeError`而不是隐式转换。要启用严格模式，我们需要在PHP代码的开头使用`declare`函数。
- en: 'This is how we can do this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以这样做的方式：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Return type declaration
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回类型声明
- en: Just like parameter type, there is also a return type; it is also optional but
    it is a safe practice to specify the return type.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 就像参数类型一样，还有一个返回类型；它也是可选的，但指定返回类型是一种安全的做法。
- en: 'This is how we can declare a return type:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以声明返回类型的方式：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see in the case of `2.5` and `4`, it should be `6.5`, but as we
    have specified `int` as a return type, it is performing implicit type conversion.
    To avoid this and to obtain an error instead of an implicit conversion, we can
    simply enable a strict type, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在`2.5`和`4`的情况下所看到的，它应该是`6.5`，但由于我们指定了`int`作为返回类型，它执行了隐式类型转换。为了避免这种情况，以及获得隐式转换而不是错误，我们可以简单地启用严格类型，如下所示：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Null coalescing operator
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空合并运算符
- en: 'The `Null` coalescing operator (`??`) is a syntactical sugar, but a very important
    one. Previously in PHP5 when we were having some variable which could be undefined,
    we used the `ternary` operator as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`Null`合并操作符(`??`)是一种语法糖，但非常重要。在PHP5中，当我们有一些可能未定义的变量时，我们使用三元运算符如下：'
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'However, now in PHP7, we can simply write:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，现在在PHP7中，我们可以简单地写：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Although this is just a syntactical sugar, it can save time and make code cleaner.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这只是一种语法糖，但它可以节省时间，使代码更清晰。
- en: Spaceship operator
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 太空船操作符
- en: 'The spaceship operator is also a shortcut for comparison and is very useful
    in user defined sorting functions. I am not going into detail about this, as it
    is already explained enough in its documentation: [http://php.net/manual/en/migration70.new-features.php#migration70.new-features.spaceship-op](http://php.net/manual/en/migration70.new-features.php#migration70.new-features.spaceship-op).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 太空船操作符也是比较的快捷方式，在用户定义的排序函数中非常有用。我不会详细介绍这个，因为它在文档中已经有足够的解释：[http://php.net/manual/en/migration70.new-features.php#migration70.new-features.spaceship-op](http://php.net/manual/en/migration70.new-features.php#migration70.new-features.spaceship-op)。
- en: Group use declarations
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合使用声明
- en: 'Classes, functions, and constants, which are in the same namespace, can be
    now imported in a single `use` statement. Previously, multiple `use` statements
    were required for that. Here is an example to understand it better:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以在单个`use`语句中导入相同命名空间中的类、函数和常量。以前需要多个`use`语句。以下是一个例子，以便更好地理解它：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see from this example, how convenient the group use statement is,
    it is clearly visible. Curly braces with comma separated values are used to group
    values such as `{classA, classB, classC as C}`, resulting in the grouped `use`
    statement, instead of separately using the `use` statement for all these three
    classes, three times.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子中可以看出，组合使用语句有多么方便，这是显而易见的。使用大括号和逗号分隔的值来组合值，比如`{classA, classB, classC as
    C}`，这样就可以得到组合的`use`语句，而不是分别为这三个类使用`use`语句，每个类使用三次。
- en: Generator-related features
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与生成器相关的功能
- en: Although generators came in PHP5.5, most PHP developers don't use them and most
    probably do not know about generators. So, let's first discuss generators.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管生成器在PHP5.5中出现，但大多数PHP开发人员不使用它们，很可能也不了解生成器。因此，让我们首先讨论生成器。
- en: What are generators?
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器是什么？
- en: 'As stated in the PHP manual:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如PHP手册所述：
- en: Generators provide an easy way to implement simple iterators without the overhead
    or complexity of implementing a class that implements the iterator interface.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器提供了一种简单的方法来实现简单的迭代器，而不需要实现实现迭代器接口的类的开销或复杂性。
- en: 'OK, here is a more detailed and easy-to-understand definition from the same
    source, [php.net](http://php.net):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里有一个更详细和易于理解的定义，来自同一来源，[php.net](http://php.net)：
- en: A generator allows you to write code that uses foreach to iterate over a set
    of data without needing to build an array in memory, which may cause you to exceed
    a memory limit, or require a considerable amount of processing time to generate.
    Instead, you can write a generator function, which is the same as a normal function,
    except that instead of returning once, a generator can yield as many times as
    it needs to in order to provide the values to be iterated over.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器允许您编写使用foreach来迭代一组数据的代码，而无需在内存中构建数组，这可能会导致超出内存限制，或需要大量的处理时间来生成。相反，您可以编写一个生成器函数，它与普通函数相同，只是它不是一次返回，而是生成器可以yield多次，以便提供要迭代的值。
- en: For example, you can simply write a function returning a lot of different numbers
    or values. But, the problem is that if a lot of different values means millions
    of values, then making and returning an array with those values is not efficient,
    because it will consume a lot of memory. So in that case, using `generator` makes
    more sense.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以简单地编写一个返回许多不同数字或值的函数。但问题是，如果许多不同的值意味着数百万个值，那么制作并返回一个包含这些值的数组是不高效的，因为它将消耗大量内存。因此，在这种情况下，使用`generator`更有意义。
- en: 'To understand, see this example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解，请参阅此示例：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, there is a `yield` statement in code. It is just like the return
    statement but in generator, `yield` does not return all the values at once. It
    only returns a value every time yield executes, and yield is called only when
    the `generator` function is called. Also, every time yield executes, it resumes
    the code execution from where it was stopped the last time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，代码中有一个`yield`语句。它就像return语句一样，但在生成器中，`yield`不会一次返回所有的值。它只会在每次yield执行时返回一个值，并且只有在调用`generator`函数时才会调用yield。此外，每次yield执行时，它都会从上次停止的地方恢复代码执行。
- en: Now we have an understanding of generators, so let's look into the PHP7 features
    related to generators.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了生成器，让我们看看与生成器相关的PHP7功能。
- en: Generator return expression
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器返回表达式
- en: 'As we have seen earlier, on calling a generator function, it returns a value
    that is being returned by the yield expression. Before PHP7, it didn''t have the
    `return` keyword returning a value. But since PHP7.0, it is possible to use the
    return expression as well. Here, I have used an example from the PHP documentation,
    as it explains it very well:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，在调用生成器函数时，它返回的是由yield表达式返回的值。在PHP7之前，它没有`return`关键字返回一个值。但自PHP7.0以来，也可以使用return表达式。在这里，我使用了PHP文档中的一个例子，因为它解释得很好：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It will give the output as:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它将输出为：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So it clearly shows that calling a generator function in `foreach` will not
    return the `return` statement. Instead, it will just return at every yield. To
    get the `return Value`, this syntax: `$gen->getReturn()` can be used.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它清楚地显示，在`foreach`中调用生成器函数不会返回`return`语句。相反，它只会在每次yield时返回。要获取`return Value`，可以使用这个语法：`$gen->getReturn()`。
- en: Generator delegation
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成器委托
- en: 'As functions can call each other, similarly a generator can also delegate to
    another generator. Here is how a generator delegates:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以互相调用，同样，生成器也可以委托给另一个生成器。以下是生成器的委托方式：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, `gen2()` is another generator being called in `gen()`, so a third yield
    in `gen()`, that is `yield from gen2();`, will transfer control to `gen2()`. So
    with that, it will start using yield from `gen2()`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`gen2()`是在`gen()`中调用的另一个生成器，因此在`gen()`中的第三个yield，即`yield from gen2();`，将控制转移到`gen2()`。因此，它将开始使用`gen2()`的yield。
- en: Note that `yield from` is only usable with arrays, traversable, or generators.
    Using another function (not generator) in `yield from` will result in a fatal
    error.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`yield from`只能与数组、可遍历对象或生成器一起使用。在`yield from`中使用另一个函数（而不是生成器）将导致致命错误。
- en: You can just consider it to be similar to how we can call a function in another
    function.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将其视为在另一个函数中调用函数的方式。
- en: Anonymous classes
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 匿名类
- en: 'Just like anonymous functions, now there are anonymous classes in PHP. Note
    that if an object is required, then most probably we need some specific type of
    object and not just a random one, for example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像匿名函数一样，现在PHP中也有匿名类。请注意，如果需要对象，则很可能我们需要某种特定类型的对象，而不仅仅是随机的，例如：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that a specific type of object was required in the `useApp()` function,
    and this type `App` couldn't be defined if it wasn't a class. So, where and why
    would we use an anonymous class with some specific functionality in it? We may
    need it in case we need to pass a class implementing some specific interface or
    extending some parent class, but only want to have this class used in one place.
    In that case, we can use an anonymous class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在`useApp()`函数中需要一个特定类型的对象，并且如果它不是一个类，那么这个类型`App`就无法定义。那么我们在哪里以及为什么要使用一个具有特定功能的匿名类？我们可能需要它，以防我们需要传递一个实现某个特定接口或扩展某个父类的类，但只想在一个地方使用这个类。在这种情况下，我们可以使用匿名类。
- en: 'Here is the same example given in the PHP7 documentation so that it will be
    easy for you to follow up:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PHP7文档中给出的相同示例，这样您就可以更容易地跟进：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, although an anonymous class object is passed here in `$app->setLogger()`,
    it could be a named class object as well. So, an anonymous class object can be
    replaced by a named class object. However, it is better to use an anonymous class
    object when we don't want to use the object of the same class again.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，尽管在`$app->setLogger()`中传递了一个匿名类对象，但它也可以是一个命名类对象。因此，匿名类对象可以被命名类对象替换。但是，当我们不想再次使用同一类的对象时，最好使用匿名类对象。
- en: Closure::call()
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Closure::call()
- en: Binding an object scope with a closure is an efficient way to use a closure
    with different objects. At the same time, it is also a simple way to use different
    closures having different behaviors for an object in different places. This is
    because it binds the object scope with a closure at runtime without inheritance,
    composition, and so on.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象范围与闭包绑定是使用不同对象的闭包的有效方法。同时，它也是在不同位置为对象使用具有不同行为的不同闭包的简单方法。这是因为它在运行时绑定了对象范围与闭包，而不需要继承、组合等。
- en: 'However, previously we didn''t have the `Closure::call()` method; we had something
    like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，以前我们没有`Closure::call()`方法；我们有类似于这样的东西：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'But now with `Closure::call()`, the same code can be written as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在有了`Closure::call()`，可以将相同的代码编写如下：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Both code snippets perform the same action. However, PHP7+ code is shorthand.
    In case you need to pass some parameter to closure functions, you can pass it
    after objects as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个代码片段执行相同的操作。但是，PHP7+代码是简写的。如果需要将一些参数传递给闭包函数，可以在对象之后传递它们，如下所示：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Errors and exceptions
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误和异常
- en: In PHP7, most errors are now reported as error exceptions. Only a few fatal
    errors halt script execution; otherwise, if you are carrying out error or exception
    handling, it will not halt the script. This is because now the `Errors` class
    implements a `Throwable` interface just like the `Exception` class, which also
    implements `Throwable`. So now, in most cases, fatal errors can be avoided through
    exception handling.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP7中，大多数错误现在被报告为错误异常。只有少数致命错误会停止脚本执行；否则，如果进行错误或异常处理，它不会停止脚本。这是因为现在`Errors`类实现了`Throwable`接口，就像`Exception`类一样，它也实现了`Throwable`。因此，现在在大多数情况下，通过异常处理可以避免致命错误。
- en: 'Here are some sub-classes of the error class:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是错误类的一些子类：
- en: '`TypeError`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TypeError`'
- en: '`ParseError`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ParseError`'
- en: '`ArithmeticError`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ArithmeticError`'
- en: '`DivisionByZeroError`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DivisionByZeroError`'
- en: '`AssertionError`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AssertionError`'
- en: 'This is how you can simply catch an error and handle it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您可以简单捕获错误并处理它的方式：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, `$error->getMessage()` is a method that is actually returning this message
    as a string. In our preceding example, the message will be similar to this: `Call
    to undefined function fn()`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`$error->getMessage()`是一个实际返回此消息作为字符串的方法。在我们之前的示例中，消息将类似于：`Call to undefined
    function fn()`.
- en: 'This is not the only method you can use. Here is a list of methods that are
    defined in the `Throwable` interface; you can use them accordingly during error/exception
    handling. After all, the `Exception` and `Error` classes both implement the same
    `Throwable` interface:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是您可以使用的唯一方法。以下是在`Throwable`接口中定义的方法列表；您可以在错误/异常处理期间相应地使用它们。毕竟，`Exception`和`Error`类都实现了相同的`Throwable`接口：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: PHP7.1
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP7.1
- en: Till now, the preceding features that we discussed were PHP7.0 related. However,
    the recent version of PHP7 is PHP7.1, so it is worth discussing the important
    features of PHP7.1 as well, at least the features which we will use, or features
    that are worth knowing and using somewhere in our work.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论的前面的功能都是与PHP7.0相关的。然而，PHP7的最新版本是PHP7.1，因此讨论PHP7.1的重要功能也是值得的，至少是我们将在工作中使用的功能，或者是值得知道并在某个地方使用的功能。
- en: 'In order to run the following code, you need to have PHP7.1 installed so, to
    do this, you can use the following commands:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行以下代码，您需要安装PHP7.1，因此，您可以使用以下命令：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Remember that this is not an official upgrade path. The PPA is well-known, and
    is relatively safe to use.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这不是官方的升级路径。PPA是众所周知的，并且相对安全。
- en: Nullable types
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可空类型
- en: If we are type hinting data types of parameters or return types of function,
    then it is important that there should be a way to pass or return the `NULL` data
    type instead of type mentioning as parameter or return type.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对参数的数据类型或函数的返回类型进行类型提示，那么重要的是应该有一种方法来传递或返回`NULL`数据类型，而不是作为参数或返回类型进行类型提示。
- en: There can be different scenarios when we may need this, but always what we need
    to do is place a `?` before the data type. Let's say we want to type hint `string`;
    if we want to make it nullable, that is to allow `NULL` as well, we will just
    type hint it as the `?` string.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有不同的情况需要这样做，但我们总是需要在数据类型之前放置一个`?`。假设我们想要对`string`进行类型提示；如果我们想要使其可为空，也就是允许`NULL`，我们只需将其类型提示为`?`
    string。
- en: 'For example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Symmetric array destructuring
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对称数组解构
- en: 'It is not a big feature, but it is handy shorthand for `list()`. So it can
    be quickly seen in the following example:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个重大的功能，但它是`list()`的方便缩写。因此，可以在以下示例中快速看到：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Support for keys in list()
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对`list()`中的键的支持
- en: As you can see in the previous example, `list()` works with an array and assigns
    to variables in the same order. However, as per PHP7.1, `list()` now supports
    keys. As `[]` is shorthand for `list()`, `[]` also supports keys.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的例子中所看到的，`list()`与数组一起工作，并按相同的顺序分配给变量。但是，根据PHP7.1，`list()`现在支持键。由于`[]`是`list()`的缩写，`[]`也支持键。
- en: 'Here is an example for the preceding description:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述描述的一个示例：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, the ID `$firstId` will have `7` and `$firstName` will have `Haafiz` after
    the preceding code execution, no matter if either `list()` style is used or `[]`
    style is used.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，ID`$firstId`在前面的代码执行后将具有`7`，而`$firstName`将具有`Haafiz`，无论是使用`list()`样式还是`[]`样式。
- en: Multi-catch exception handling
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多异常捕获处理
- en: 'This one is an interesting feature in PHP7.1\. It was previously possible but
    was performed in multiple steps. Now, instead of just catching one exception at
    a time and handling that, there is a multi-catch exception handling facility available.
    The syntax can be seen here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PHP7.1中一个有趣的功能。以前是可能的，但是需要多个步骤来执行。现在，不仅仅是捕获一个异常并处理它，还可以使用多异常捕获处理功能。语法可以在这里看到：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can see here, there is a pipe sign separating these two exceptions. So,
    this pipe sign `|` separates multiple exceptions. Here there are just two exceptions
    in the example, but there can be more than that.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这里所看到的，有一个管道符号分隔这两个异常。因此，这个管道符号`|`分隔多个异常。在这个例子中只有两个异常，但可能会有更多。
- en: More resources
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多资源
- en: 'We discussed new features of PHP7 and PHP 7.1 (recent version of PHP7) that
    we either found very important to discuss or which we are going to use in the
    rest of the book. However, we didn''t discuss PHP7 features completely. You can
    find the PHP7 features list on [php.net](http://php.net): [http://php.net/manual/en/migration70.new-features.php](http://php.net/manual/en/migration70.new-features.php).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了PHP7和PHP 7.1（PHP7的最新版本）的新功能，这些功能我们要么认为很重要要讨论，要么我们将在本书的其余部分中使用。但是，我们没有完全讨论PHP7的功能。您可以在[php.net](http://php.net)上找到PHP7功能列表：[http://php.net/manual/en/migration70.new-features.php](http://php.net/manual/en/migration70.new-features.php)。
- en: 'Here, you can find all the new features of PHP 7.1: [http://php.net/manual/en/migration71.new-features.php](http://php.net/manual/en/migration71.new-features.php).'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以找到PHP 7.1的所有新功能：[http://php.net/manual/en/migration71.new-features.php](http://php.net/manual/en/migration71.new-features.php)。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed important PHP7 features. Also, we covered new
    PHP7.1 features. This chapter covers the fundamentals which will be used in the
    rest of this book. Note that using PHP7 features is not necessary, but it helps
    us to write simplified code efficiently.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了重要的PHP7功能。此外，我们还介绍了新的PHP7.1功能。本章涵盖了本书其余部分将使用的基础知识。请注意，使用PHP7功能并不是必需的，但它可以帮助我们高效地编写简化的代码。
- en: In the next chapter, we will start creating a RESTful API in PHP as we discussed
    in [Chapter 1](42e167df-3aca-4f21-8d1d-c39d5865ab39.xhtml), *RESTful Web Services,
    Introduction and Motivation*, while utilizing some of the PHP7 features.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始在PHP中创建一个RESTful API，就像我们在[第1章](42e167df-3aca-4f21-8d1d-c39d5865ab39.xhtml)中讨论的那样，*RESTful
    Web Services, Introduction and Motivation*，同时利用一些PHP7的功能。
