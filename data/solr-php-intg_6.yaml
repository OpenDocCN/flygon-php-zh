- en: Chapter 6. Debug and Stats Component
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。调试和统计组件
- en: 'Debug and stats are two components in Solarium used to get more information
    about the index statistics and how queries are executed and results returned.
    In this chapter we will explore both the components and go in depth on how to
    retrieve the index statistics using the stats component. We will also look at
    how Solr calculates relevance scores and how we can use PHP to get and display
    the query explanation returned by Solr. We will explore:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试和统计是Solarium中用于获取有关索引统计信息以及查询执行和结果返回方式的两个组件。在本章中，我们将探讨这两个组件，并深入介绍如何使用stats组件检索索引统计信息。我们还将看看Solr如何计算相关性分数，以及如何使用PHP获取和显示Solr返回的查询解释。我们将探讨：
- en: How Solr does relevance ranking
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solr如何进行相关性排名
- en: Executing a debug through PHP code
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过PHP代码执行调试
- en: Running a debug on Solr interface
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Solr界面上运行调试
- en: Displaying the output of debug query
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示调试查询的输出
- en: Display query result statistics using the stats component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用stats组件显示查询结果统计信息
- en: You could say why should I go into the theory about these components? What will
    this help me achieve? The benefit of using the debug component is to understand
    and analyze how the search result was ranked. Why did a certain document come
    on the top and why did another document come at the end? Further if you want to
    alter the ranking to suit the way you want results to be displayed, you have to
    boost certain fields and again debug and analyze how the query is performing after
    applying the boosts. In a single line, the debug component helps us in analyzing
    and modifying the ranking to suit our requirements. The stats component is mostly
    used for displaying index statistics—something that can be used to show the complexity
    of the index being handled.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问为什么我要深入研究这些组件的理论？这会帮助我实现什么？使用调试组件的好处在于理解和分析搜索结果的排名方式。为什么某个文档排在前面，另一个文档排在最后？此外，如果您想要修改排名以适应您希望结果显示的方式，您必须提升某些字段，并再次调试和分析应用提升后查询的执行情况。简而言之，调试组件帮助我们分析和修改排名以满足我们的需求。统计组件主要用于显示索引统计信息，这可以用来展示正在处理的索引的复杂性。
- en: Solr relevance ranking
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Solr相关性排名
- en: When a query is passed to Solr, it is converted to an appropriate query string
    that is then executed by Solr. For each document in the result, Solr calculates
    the relevance score according to which the document is sorted. By default higher
    scoring documents are given priority in the result.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当查询传递给Solr时，它会转换为适当的查询字符串，然后由Solr执行。对于结果中的每个文档，Solr根据文档的相关性得分进行排序。默认情况下，得分较高的文档在结果中优先考虑。
- en: 'The Solr relevancy algorithm is known as the **tf-idf model** where **tf**
    stands for **term frequency** and **idf** stands for **inverse document frequency**.
    The meaning of the parameters used in relevance calculation so we can interpret
    the output of debug query are explained as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Solr相关性算法被称为**tf-idf模型**，其中**tf**代表**术语频率**，**idf**代表**逆文档频率**。解释调试查询输出所使用的相关性计算参数的含义如下：
- en: '**tf**: The term frequency is the frequency with which a term appears in a
    document. Higher term frequency results in a high document score.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tf**：术语频率是术语在文档中出现的频率。更高的术语频率会导致更高的文档得分。'
- en: '**idf**: The inverse document frequency is the inverse of the number of documents
    in which the term appears. It indicates the rarity of the term across all documents
    in the index. Documents having a rare term are scored higher.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**idf**：逆文档频率是术语出现在的文档数量的倒数。它表示索引中所有文档中术语的稀有程度。具有稀有术语的文档得分较高。'
- en: '**coord**: It is the coordination factor that says how many query terms were
    found in a document. A document with more query terms will have higher score.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**coord**：这是协调因子，表示文档中找到了多少查询术语。具有更多查询术语的文档将得到更高的分数。'
- en: '**queryNorm**: It is a normalizing factor used to make the scores across queries
    comparable. Since all documents are multiplied by the same queryNorm, it does
    not affect the document ranking.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**queryNorm**：这是一个用于使跨查询的得分可比较的归一化因子。由于所有文档都乘以相同的queryNorm，它不会影响文档排名。'
- en: '**fieldNorm**: Field normalization penalizes fields with a large number of
    terms. If a field contains more terms than the other, its score is lower than
    the other.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fieldNorm**：字段规范化惩罚具有大量术语的字段。如果一个字段包含的术语比其他字段多，那么它的得分就低于其他字段。'
- en: We have seen query time boosts earlier. The purpose of debugging a query is
    to see how relevance is being calculated and use our knowledge of query time boosts
    to tune the output as per our requirement.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经看到了查询时间提升。调试查询的目的是查看如何计算相关性，并利用我们对查询时间提升的了解来根据我们的需求调整输出。
- en: Executing debug through PHP code
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过PHP代码执行调试
- en: To enable debugging of our Solr query using PHP, we need to get the debug component
    from our query.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PHP启用对Solr查询的调试，我们需要从我们的查询中获取调试组件。
- en: 'In addition to getting debug information of the default query, we can call
    the `explainOther()` function to get a score of certain documents that match the
    query specified in `explainOther()` function with respect to the main query as
    shown in the following query:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了获取默认查询的调试信息外，我们还可以调用`explainOther()`函数来获取与主查询相关的指定查询的某些文档的分数，如下面的查询所示：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding piece of code, we are searching for all books and boosting
    books by author `martin` by `2`. In addition to this we are getting the debug
    information for books by author `king`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码片段中，我们正在搜索所有的书籍，并通过`2`来提升作者`martin`的书籍。除此之外，我们还获取了作者`king`的书籍的调试信息。
- en: 'After running the query, we need to get the debug component from the `ResultSet`.
    We then use it to get the query string, parsed query string, the query parser
    and information about the debug other query as shown in the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行查询后，我们需要从`ResultSet`中获取调试组件。然后我们使用它来获取查询字符串、解析的查询字符串、查询解析器以及调试其他查询的信息，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need to iterate over the debug result-set and for each document we need
    to get the total score value, the match and the score calculation description.
    We can also get into the details of the debug information and obtain the value,
    match, and calculation description for each term in the query with respect to
    the document as shown in the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要遍历调试结果集，对于每个文档，我们需要获取总得分值，匹配和得分计算描述。我们还可以深入了解调试信息，并获取查询中每个术语相对于文档的值，匹配和计算描述，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To obtain the debug information for the other query we need to call the `getExplainOther()`
    function and follow the same process as above. In addition to the scoring information,
    we also get the time taken for each phase of query execution. This can be obtained
    by using the `getTiming()` function as below.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取其他查询的调试信息，我们需要调用`getExplainOther()`函数并按照上述相同的过程进行。除了得分信息之外，我们还可以获得每个查询执行阶段所花费的时间。可以使用以下`getTiming()`函数来获得。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To obtain the time spent in each phase of the query, we need to iterate over
    the output of the `getPhases()` function and get the phase name related data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取查询的每个阶段花费的时间，我们需要遍历`getPhases()`函数的输出并获取与阶段名称相关的数据。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Running debug on Solr interface
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Solr界面上运行调试
- en: The parameters appended to the Solr query URL in our example are `debugQuery=true`,
    `explainOther=author:king`, and `debug.explain.structured=true`. Let us check
    the Solr output for a debug query by visiting the URL `http://localhost:8080/solr/collection1/select/?omitHeader=true&debugQuery=true&fl=id,name,author,series_t,score,price&start=0&q=cat:book+OR+author:martin^2&rows=5`
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们示例中附加到Solr查询URL的参数是`debugQuery=true`，`explainOther=author:king`和`debug.explain.structured=true`。让我们通过访问URL`http://localhost:8080/solr/collection1/select/?omitHeader=true&debugQuery=true&fl=id,name,author,series_t,score,price&start=0&q=cat:book+OR+author:martin^2&rows=5`来检查调试查询的Solr输出
- en: 'The following is a screenshot of the output of the previous query:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上一个查询的输出截图：
- en: '![Running debug on Solr interface](graphics/4920_06_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![在Solr界面上运行调试](graphics/4920_06_01.jpg)'
- en: We can see the debug component after the results component in Solr query results
    interface. It contains the raw query and parsed query. The explain element in
    the debug component contains the score and the calculations that were done to
    achieve the score
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Solr查询结果界面中的结果组件之后看到调试组件。它包含原始查询和解析查询。调试组件中的解释元素包含得分和为实现得分而进行的计算
- en: Since debugging a Solr query is required to tune the relevance, it makes more
    sense to use the Solr interface to see the debug output. PHP interface to the
    debug component can be used to create an interactive user interface where field
    level boosts are taken from the user and used to calculate and display the relevance.
    Such an interface can be used to see how changes in boost affect the relevance
    score and tune the same.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于调试Solr查询需要调整相关性，因此更有意义的是使用Solr界面查看调试输出。可以使用PHP接口来创建交互式用户界面，其中字段级别的增强来自用户并用于计算和显示相关性。这样的界面可以用于查看增强如何影响相关性得分并调整相同。
- en: The stats component
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 统计组件
- en: The stats component can be used to return simple statistics for indexed numeric
    fields in the document set returned by a Solr query. Let us get the statistics
    for prices of all books in our index. We will also facet on `price` and availability
    (`inStock`) and see the output.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 统计组件可用于返回Solr查询返回的文档集中索引的数值字段的简单统计信息。让我们获取索引中所有书的价格的统计信息。我们还将在`price`和可用性(`inStock`)上进行facet，并查看输出。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is advisable to use a templating engine instead of writing HTML code inside
    PHP.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 建议使用模板引擎而不是在PHP中编写HTML代码。
- en: 'Create the query to fetch all books and set the number of rows to `0` as we
    are not interested in the results but only the statistics, which will be fetched
    as a separate component as given in the following query:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建查询以获取所有书籍，并将行数设置为`0`，因为我们对结果不感兴趣，只对统计信息感兴趣，这将作为单独的组件获取，如下面的查询所示：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Get the stats component and create statistics for field `price` and create facets
    on `price` and `inStock` fields.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 获取统计组件并为字段`price`创建统计信息，并在`price`和`inStock`字段上创建facet。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Execute the query and fetch the stats component from the result-set as given
    in the following query:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 执行查询并从结果集中获取统计组件，如下面的查询所示：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Loop through the fields we have fetched in our stats component earlier. Get
    all statistics for each field as shown in the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 循环遍历我们之前在统计组件中获取的字段。获取每个字段的所有统计信息，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Get the facets for each field in the statistics result-set and fetch the statistics
    for each element in the facet results as shown in the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 获取统计结果集中每个字段的facet，并获取facet结果中每个元素的统计信息，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of our script can be seen in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们脚本的输出如下截图所示：
- en: '![The stats component](graphics/4920_06_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![统计组件](graphics/4920_06_02.jpg)'
- en: 'On checking Solr logs we can see the query being executed as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查Solr日志时，我们可以看到执行的查询如下：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To enable statistics, we have to pass `stats=true` along with `stats.field`
    and faceting parameters. We can see the same statistics output on Solr using the
    URL `http://localhost:8080/solr/collection1/select/?omitHeader=true&rows=0&stats.field=price&stats=true&q=cat:book&f.price.stats.facet=price&f.price.stats.facet=inStock`
    as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 启用统计信息，我们必须传递`stats=true`以及`stats.field`和faceting参数。我们可以在Solr上使用以下URL`http://localhost:8080/solr/collection1/select/?omitHeader=true&rows=0&stats.field=price&stats=true&q=cat:book&f.price.stats.facet=price&f.price.stats.facet=inStock`看到相同的统计输出，如下面的截图所示：
- en: '![The stats component](graphics/4920_06_03.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![统计组件](graphics/4920_06_03.jpg)'
- en: In the preceding screenshot we can see the statistics for **price** and statistics
    facets for **price** and **inStock**. Out of our complete stock of books, the
    minimum price is **3.06** and the maximum price is **30.5**. The sum of all prices
    is **246.76** and the mean is **8.225**. We can see similar information for each
    element in our facet output.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张截图中，我们可以看到**价格**的统计数据以及**价格**和**库存**的统计分面。在我们完整的图书库存中，最低价格为**3.06**，最高价格为**30.5**。所有价格的总和为**246.76**，平均值为**8.225**。我们可以看到我们的分面输出中每个元素的类似信息。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter gave us some insight into our index and into how results are ranked.
    We saw the parameters used to calculate the relevance score and how to extract
    the calculation from Solr using PHP. We discussed the use of the debug query.
    We saw how to extract statistics of numeric fields for a query from our index
    and how to display the information using PHP. The information retrieved from these
    modules is used to analyze and improve the Solr search results. Statistics can
    also be used for reporting purposes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本章让我们对我们的索引有了一些了解，以及结果如何排名。我们看到了用于计算相关性得分的参数，以及如何使用PHP从Solr中提取计算。我们讨论了调试查询的用途。我们看到了如何从我们的索引中提取数值字段的查询统计信息，并如何使用PHP显示这些信息。从这些模块中检索到的信息用于分析和改进Solr搜索结果。统计数据也可以用于报告目的。
- en: In the next chapter we will explore how to build spell suggestions using the
    Solr and PHP. We will also build an auto complete feature to suggest query options
    during a search.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用Solr和PHP构建拼写建议。我们还将构建自动完成功能，以在搜索过程中建议查询选项。
