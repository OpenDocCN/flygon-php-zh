- en: Chapter 5. Handling Rowsets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。处理行集
- en: Real life dynamic, data-driven web applications are very different from each
    other, as their complexity is dictated by the purposes that they serve. However,
    almost all of them have some common characteristics. One of these characteristics
    is the ability to paginate long result lists for ease of use and faster page loading
    times.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现实生活中的动态数据驱动的Web应用程序彼此非常不同，因为它们的复杂性由它们服务的目的决定。然而，几乎所有这些应用程序都具有一些共同的特征。其中之一是对长结果列表进行分页以方便使用和更快的页面加载时间。
- en: Correct pagination requires the calculation of the number of total rows returned
    from the database, the page size (which is a configurable option), and the number
    of current page. Based on this data, it is easy to calculate the starting offset
    into the result set to display only a subset of rows.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的分页需要计算从数据库返回的总行数、页面大小（可配置选项）和当前页面的数量。根据这些数据，很容易计算结果集的起始偏移量，以仅显示一部分行。
- en: 'In this chapter, we will examine:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究：
- en: How to retrieve the number of rows in the result sets returned by PDO
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何检索PDO返回的结果集中的行数
- en: How to fetch results starting at a specified row number
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从指定的行号开始获取结果
- en: Retrieving the Number of Rows in a Result Set
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索结果集中的行数
- en: 'As we have already discussed in [Chapter 2](ch02.html "Chapter 2. Using PHP
    Data Objects: First Steps"), the `PDOStatement::rowCount()` method does not return
    the correct number of rows in a query. (It returns zero for both MySQL and SQLite.)
    The reason for such behavior is that the database management systems do not actually
    know this number until the last row of the query has been returned. The reason
    for the `mysql_num_rows()` function (and similar functions for other databases)
    returns the row count is that it preloads the whole result set into memory when
    you issue the query.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](ch02.html "第2章。使用PHP数据对象：第一步")中已经讨论的，`PDOStatement::rowCount()`方法不会返回查询中的正确行数。（对于MySQL和SQLite都返回零。）这种行为的原因是数据库管理系统实际上直到返回查询的最后一行才知道这个数字。`mysql_num_rows()`函数（以及其他数据库的类似函数）返回行数的原因是，当您发出查询时，它会将整个结果集预加载到内存中。
- en: While it may seem convenient, this behavior is not recommended. If the query
    returns 20 rows, then the script can afford the memory usage. But what if the
    query returns several hundred thousands rows? They will all be kept in memory
    so that, on high traffic sites, the server may run out of resources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种行为可能看起来很方便，但并不推荐。如果查询返回20行，那么脚本可以承受内存使用。但是如果查询返回数十万行呢？它们都将保留在内存中，因此在高流量站点上，服务器可能会耗尽资源。
- en: The only logical measure (and the only option available with PDO) is to instruct
    the database to count the number of rows itself. No matter how complicated the
    query is, it can be rewritten to use the SQL `COUNT()` function to return just
    the number of rows that will satisfy the main query.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的逻辑措施（也是PDO可用的唯一选项）是指示数据库自己计算行数。无论查询有多复杂，都可以重写以使用SQL的`COUNT()`函数，仅返回满足主查询的行数。
- en: Let's take a look at the queries used in our application. (We will only examine
    the queries that return multiple rows.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下我们应用程序中使用的查询。（我们只会检查返回多行的查询。）
- en: 'In `books.php` we have a query that joins two tables to present the list of
    books along with their authors :'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`books.php`中，我们有一个查询，它连接两个表以呈现书籍列表以及它们的作者：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To get the number of rows that this query returns we should rewrite it to look
    like the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取此查询返回的行数，我们应该将其重写为以下内容：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that we don't need the `ORDER BY` clause here as the order does not really
    matter for the count of rows.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里不需要`ORDER BY`子句，因为顺序对行数并不重要。
- en: 'In `authors.php` we simply select all the authors ordered by their last name
    and then their first name:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`authors.php`中，我们只是按照他们的姓和名的顺序选择所有作者：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This simply rewrites to the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这简单地重写为以下内容：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Another query that returns multiple rows is in `author.php`—it retrieves all
    the books written by a particular author:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个返回多行的查询在`author.php`中——它检索特定作者撰写的所有书籍：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This translates to the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这翻译为以下内容：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, we rewrote all these queries in a similar way—by replacing
    the list of columns with `COUNT(*)` and trimming the `ORDER BY` clause. With this
    in mind, we can create a function that will accept a string containing the SQL
    to be executed and return the number of rows that the query will return. This
    function will have to perform these simple transformations:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们以类似的方式重写了所有这些查询——通过用`COUNT(*)`替换列的列表并修剪`ORDER BY`子句。有了这个想法，我们可以创建一个函数，它将接受一个包含要执行的SQL的字符串，并返回查询将返回的行数。这个函数将必须执行这些简单的转换：
- en: Replace everything between `SELECT` and `FROM` with `COUNT(*)` in the passed
    string.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在传递的字符串中，用`COUNT(*)`替换`SELECT`和`FROM`之间的所有内容。
- en: Remove `ORDER BY` and all the text after it.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除`ORDER BY`及其后的所有文本。
- en: 'The best way to achieve this transformation is to use regular expressions.
    As in previous chapters, we will use the PCRE extension. We will put the function
    into `common.inc.php` as we will call it from various places:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这种转换的最佳方法是使用正则表达式。与前几章一样，我们将使用PCRE扩展。我们将把该函数放入`common.inc.php`中，因为我们将从各个地方调用它：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s run over the function to see what it does:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一下这个函数，看看它做了什么：
- en: It imports the PDO connection object (`$conn`) into the local function scope.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将PDO连接对象（`$conn`）导入到本地函数范围内。
- en: It trims the possible spaces from the beginning and the end of the SQL query.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它修剪了SQL查询开头和结尾的可能空格。
- en: Two calls to `preg_replace()` do the main task of transforming the query.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两次对`preg_replace()`的调用完成了转换查询的主要任务。
- en: Note how we use the pattern modifiers—the *s* modifier instructs PCRE to match
    newline characters with the dot, and the *D* modifier forces the $ to match the
    end of the whole string (not just before the first newline). We use these modifiers
    to make sure that the function will work properly with multiline queries.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何使用模式修饰符——*s*修饰符指示PCRE用点匹配换行符，*D*修饰符强制$匹配整个字符串的结尾（不仅仅是在第一个换行符之前）。我们使用这些修饰符来确保函数能够正确处理多行查询。
- en: We will now modify the three scripts to display the number of rows in each table
    that they return. Let's start with `books.php:`
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将修改这三个脚本，以显示它们返回的每个表中的行数。让我们从`books.php`开始：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, the modifications are pretty straightforward—we use the `$sql`
    variable to hold the query and pass it to both the `getRowCount()` function and
    the `$conn->query()` method. We also display a message above the table, which
    tells us how many books there are in the database.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，修改非常简单——我们使用`$sql`变量来保存查询，并将其传递给`getRowCount()`函数和`$conn->query()`方法。我们还在表格上方显示一条消息，告诉我们数据库中有多少本书。
- en: 'Now if you refresh the `books.php` page, you will see the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你刷新`books.php`页面，你会看到以下内容：
- en: '![Retrieving the Number of Rows in a Result Set](graphics/2660_05_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![检索结果集中的行数](graphics/2660_05_01.jpg)'
- en: 'The changes to `authors.php` are similar:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`authors.php`的更改类似：'
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `authors.php` now should display the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`authors.php`现在应该显示以下内容：'
- en: '![Retrieving the Number of Rows in a Result Set](graphics/2660_05_02.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![检索结果集中的行数](graphics/2660_05_02.jpg)'
- en: 'Finally, `author.php` will look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`author.php`将如下所示：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output should look like this. (I scrolled the page down a bit to save space):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示。（我把页面向下滚动了一点以节省空间）：
- en: '![Retrieving the Number of Rows in a Result Set](graphics/2660_05_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![检索结果集中的行数](graphics/2660_05_03.jpg)'
- en: You should switch between MySQL and SQLite in `common.inc.php` to make sure
    both databases work.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在`common.inc.php`中在MySQL和SQLite之间切换，以确保两个数据库都能工作。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This approach may work for many cases, but is not suitable for all queries.
    One such example is a query that uses a `GROUP BY` clause. If you rewrite such
    query with the `getRowCount()` function you will get incorrect results as the
    grouping will be applied and the query will return several rows. (The number of
    rows will be equal to the number of distinct values in the column you are grouping
    by.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可能适用于许多情况，但并不适用于所有查询。一个这样的例子是使用`GROUP BY`子句的查询。如果你用`getRowCount()`函数重写这样的查询，你将得到不正确的结果，因为分组将被应用，查询将返回多行。（行数将等于你正在分组的列中不同值的数量。）
- en: Limiting the Number of Rows Returned
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制返回的行数
- en: 'Now, when we know how to count the rows in the results set, let''s see how
    we can fetch first N rows only. Here we have two options:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道如何计算结果集中的行数，让我们看看如何只获取前N行。这里我们有两个选项：
- en: We can use database-specific features in the SQL query itself.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在SQL查询中使用特定于数据库的功能。
- en: We can process the result set ourselves and stop after the required number of
    rows has been fetched.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以自己处理结果集，并在获取所需数量的行后停止。
- en: Using Database-Specific SQL
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用特定于数据库的SQL
- en: 'If you have been working mainly with MySQL, then you will be familiar with
    the `LIMIT x,y` clause. For example, if we want to fetch the first five authors
    sorted by last name, the following query could be issued:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你主要使用MySQL，那么你会熟悉`LIMIT x,y`子句。例如，如果我们想按姓氏排序获取前五位作者，可以发出以下查询：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The same thing could be done with the following query:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的事情也可以用以下查询完成：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first query will work for MySQL and SQLite, while the second will work for
    PostgreSQL as well. However, databases like Oracle or MS SQL Server don't use
    such syntax, so these queries will fail for them.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个查询适用于MySQL和SQLite，而第二个查询也适用于PostgreSQL。然而，像Oracle或MS SQL Server这样的数据库不使用这样的语法，所以这些查询对它们来说将失败。
- en: Processing the Top N Rows Only
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅处理前N行
- en: 'As you can see, database-specific SQL does not allow us to solve the task of
    performing pagination in the database-independent way. However, we can issue the
    query as we would for all the rows, without the `LIMIT....OFFSET` clause. After
    each row has been fetched, we can increase the counter variable, so that we break
    the loop when we have processed the required amount of rows. The following code
    snippet could serve this purpose:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，特定于数据库的SQL不允许我们以数据库无关的方式解决执行分页的任务。然而，我们可以像对待所有行一样发出查询，而不使用`LIMIT....OFFSET`子句。在获取每一行后，我们可以增加计数器变量，这样当我们处理了所需数量的行时，我们就可以中断循环。以下代码片段可以实现这一目的：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note the loop condition—it checks whether the counter variable is less than
    or equal to 5\. (Of course, you can put any number there), as well as it verifies
    that there still are rows to fetch, as it is important that we break the loop
    if there are no more rows. (For example, if the table has only 3 rows and we want
    to show 5 of them we should break after the last row, not after the counter reaches
    5.) Note that using database-specific SQL would take care of such a situation
    for us.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意循环条件——它检查计数器变量是否小于或等于5。（当然，你可以在那里放任何数字），以及它验证是否还有行要获取，因为重要的是如果没有更多行要获取，我们就中断循环。（例如，如果表只有3行，我们想显示其中的5行，我们应该在最后一行后中断，而不是在计数器达到5后中断。）请注意，使用特定于数据库的SQL将为我们处理这样的情况。
- en: Another important thing is the call to `PDOStatement::closeCursor()` (as on
    the second last line in the previous code snippet). It is necessary to tell the
    database that we don't want more rows. If we don't do this, the subsequent queries
    issued on the same PDO object will cause exceptions, because database management
    systems cannot process a new query while they are still sending the rows from
    the previous query. This is why we had to call this method in `author.php`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的事情是调用`PDOStatement::closeCursor()`（如前一个代码片段中倒数第二行）。有必要告诉数据库我们不需要更多的行。如果我们不这样做，那么在同一个PDO对象上发出的后续查询将引发异常，因为数据库管理系统无法在仍在发送上一个查询的行时处理新查询。这就是为什么我们在`author.php`中必须调用这个方法。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At present (for PHP version 5.2.1), it may be necessary to unset the statement
    object by assigning it to null (as in `author.php`, line 17). On the other hand,
    at least one CVS snapshot released around April 1, 2007 didn't require closing
    the cursor at all. However, it is still good practice to call `PDOStatement::closeCursor()`
    after you have finished with the cursor.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 目前（对于PHP版本5.2.1），可能需要将语句对象取消分配为null（如`author.php`，第17行）。另一方面，至少在2007年4月1日左右发布的一个CVS快照根本不需要关闭游标。但是，在完成游标后调用`PDOStatement::closeCursor()`仍然是一个好习惯。
- en: Starting at an Arbitrary Offset
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从任意偏移开始
- en: 'Now that we know how to process a specified number of rows, we can use the
    same technique to skip a certain number of rows. Suppose that we want to show
    authors from 6th to 10th (as though we are showing page 2 when the page size allows
    for 5 authors per page):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何处理指定数量的行，我们可以使用相同的技术来跳过一定数量的行。假设我们想显示第6到第10位作者（就像我们在每页允许每页5位作者时显示第2页）：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, the first loop is used to skip the necessary starting row and the second
    loop displays the requested subset of rows.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，第一个循环用于跳过必要的起始行，第二个循环显示请求的行的子集。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This approach may work well for small tables, but its performance is not good.
    You should always use database-specific SQL to return the subset of the resulting
    rows. If you need database independence, you should examine the underlying database
    software and issue a query specific to the database. The reason for this is that
    the database can perform certain optimizations on the query, use less memory so
    that less data will be exchanged between the server and the client.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法对小表可能效果很好，但性能不佳。您应该始终使用特定于数据库的SQL来返回结果行的子集。如果您需要数据库独立性，应该检查底层数据库软件并发出特定于数据库的查询。原因是数据库可以对查询执行某些优化，使用更少的内存，从而在服务器和客户端之间交换的数据量更少。
- en: Unfortunately, PDO does not provide database-independent ways to effectively
    fetch subsets of the resulting rows as PDO is a connection abstraction, not a
    database abstraction, tool. If you need to write portable code, you should explore
    tools such as MDB2.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，PDO没有提供数据库独立的方法来有效地获取结果行的子集，因为PDO是连接抽象，而不是数据库抽象工具。如果您需要编写可移植的代码，应该探索MDB2等工具。
- en: 'This approach may seem more complicated than using the `PDOStatement::fetchAll()`
    method. Indeed, we could rewrite the previous code as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可能比使用`PDOStatement::fetchAll()`方法更复杂。事实上，我们可以将上一个代码重写如下：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Although this code is much shorter, it has a major drawback: It instructs PDO
    to return all rows from the table and then take a portion of them. With our approach,
    the unnecessary rows are discarded and the loop instructs the database to stop
    sending rows as soon as enough rows have been returned. However, the database
    has to send us the rows preceding the current page in both cases.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这段代码要短得多，但它有一个主要缺点：它指示PDO返回表中的所有行，然后取其中的一部分。使用我们的方法，不必要的行将被丢弃，并且循环指示数据库在返回足够的行后停止发送行。但是，在这两种情况下，数据库都必须向我们发送当前页面之前的行。
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to work with unbuffered queries and to get
    the row count for a result set. We have also looked at an application where database-specific
    SQL could not be avoided, as this would require a workaround that might be unsuitable.
    However, this chapter should be helpful for someone who is developing a complex
    web application that uses databases.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到如何处理无缓冲查询并获取结果集的行数。我们还看了一个应用程序，其中无法避免使用特定于数据库的SQL，因为这将需要一个可能不合适的解决方法。但是，这一章对于开发使用数据库的复杂Web应用程序的人应该是有帮助的。
- en: In the next chapter, we will discuss the advanced features of PDO, including
    persistent connections and other driver-specific options. We will also discuss
    transactions and examine some more methods of the `PDO` and `PDOStatement` classes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论PDO的高级功能，包括持久连接和其他特定于驱动程序的选项。我们还将讨论事务并检查`PDO`和`PDOStatement`类的更多方法。
