- en: Building a Web Service with Laravel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Laravel构建网络服务
- en: In the last chapter, we got the Homestead development environment up and running,
    and began serving the main Vuebnb project. In this chapter, we will create a simple
    web service that will make Vuebnb's room listing data ready for display in the
    frontend.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经启动并运行了Homestead开发环境，并开始为主要的Vuebnb项目提供服务。在本章中，我们将创建一个简单的网络服务，使Vuebnb的房间列表数据可以在前端显示。
- en: 'Topics covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题：
- en: Using Laravel to create a web service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Laravel创建网络服务
- en: Writing database migrations and seed files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写数据库迁移和种子文件
- en: Creating API endpoints to make data publicly accessible
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建API端点以使数据公开访问
- en: Serving images from Laravel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Laravel提供图像
- en: Vuebnb room listings
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vuebnb房间列表
- en: In [Chapter 2](b381aa06-e15c-4cb9-9b8b-4b9421ed73db.xhtml), *Prototyping Vuebnb,
    Your First Vue.js Project*, we built a prototype of the listing page of the frontend
    app. Soon we'll be removing the hardcoded data on this page and turning it into
    a template that can display any room listing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](b381aa06-e15c-4cb9-9b8b-4b9421ed73db.xhtml)中，*Vuebnb原型设计，您的第一个Vue.js项目*，我们构建了前端应用程序的列表页面原型。很快，我们将删除此页面上的硬编码数据，并将其转换为可以显示任何房间列表的模板。
- en: We won't be adding functionality for a user to create their own room listing
    in this book. Instead, we'll use a package of mock data comprising 30 different
    listings, each with their own unique titles, descriptions, and images. We will
    seed the database with these listings and configure Laravel to serve them to the
    frontend as required.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们不会为用户创建他们自己的房间列表添加功能。相反，我们将使用包含30个不同列表的模拟数据包，每个列表都有自己独特的标题、描述和图像。我们将使用这些列表填充数据库，并配置Laravel根据需要将它们提供给前端。
- en: Web service
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络服务
- en: A **web service** is an application that runs on a server and allows a client
    (such as a browser) to remotely write/retrieve data to/from the server over HTTP.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络服务**是在服务器上运行的应用程序，允许客户端（如浏览器）通过HTTP远程写入/检索数据到/从服务器。'
- en: 'The interface of a web service will be one or more API endpoints, sometimes
    protected with authentication, that will return data in an XML or JSON payload:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务的接口将是一个或多个API端点，有时会受到身份验证的保护，它们将以XML或JSON有效负载返回数据：
- en: '![](assets/4f1dd567-4848-4363-aeab-85ec53a9ac04.png)Figure 4.1\. Vuebnb web
    service'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4f1dd567-4848-4363-aeab-85ec53a9ac04.png)图4.1。Vuebnb网络服务'
- en: 'Web services are a speciality of Laravel, so it won''t be hard to create one
    for Vuebnb. We''ll use routes for our API endpoints and represent the listings
    with Eloquent models that Laravel will seamlessly synchronize with the database:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务是Laravel的特长，因此为Vuebnb创建一个网络服务不难。我们将使用路由来表示我们的API端点，并使用Laravel无缝同步与数据库的Eloquent模型来表示列表：
- en: '![](assets/a0baa328-978a-4528-abc3-8ee6465f45a1.png)Figure 4.2\. Web service
    architecture'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a0baa328-978a-4528-abc3-8ee6465f45a1.png)图4.2。网络服务架构'
- en: Laravel also has inbuilt features to add API architectures such as REST, though
    we won't need this for our simple use case.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel还具有内置功能，可以添加REST等API架构，尽管我们不需要这个简单的用例。
- en: Mock data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟数据
- en: The mock listing data is in the file `database/data.json`. This file includes
    a JSON-encoded array of 30 objects, with each object representing a different
    listing. Having built the listing page prototype, you'll no doubt recognize a
    lot of the same properties on these objects, including the title, address, and
    description.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟列表数据在文件`database/data.json`中。该文件包括一个JSON编码的数组，其中包含30个对象，每个对象代表一个不同的列表。在构建了列表页面原型之后，您无疑会认出这些对象上的许多相同属性，包括标题、地址和描述。
- en: '`database/data.json`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`database/data.json`：'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each mock listing includes several images of the room as well. Images aren't
    really part of a web service, but they will be stored in a public folder in our
    app to be served as needed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模拟列表还包括房间的几张图片。图像并不真正属于网络服务的一部分，但它们将存储在我们应用程序的公共文件夹中，以便根据需要提供服务。
- en: The image files are not in the project code, but are in the code base we downloaded
    from GitHub. We'll copy them into our project folder later in the chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图像文件不在项目代码中，而是在我们从GitHub下载的代码库中。我们将在本章后期将它们复制到我们的项目文件夹中。
- en: Database
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库
- en: Our web service will require a database table for storing the mock listing data.
    To set this up we'll need to create a schema and migration. We'll then create
    a seeder that will load and parse our mock data file and insert it into the database,
    ready for use in the app.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网络服务将需要一个用于存储模拟列表数据的数据库表。为此，我们需要创建一个模式和迁移。然后，我们将创建一个seeder，它将加载和解析我们的模拟数据文件，并将其插入数据库，以便在应用程序中使用。
- en: Migration
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移
- en: A `migration`is a special class that contains a set of actions to run against
    the database, such as creating or modifying a database table. Migrations ensure
    your database gets set up identically every time you create a new instance of
    your app, for example, installing in production or on a teammate's machine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`迁移`是一个特殊的类，其中包含针对数据库运行的一组操作，例如创建或修改数据库表。迁移确保每次创建应用程序的新实例时，例如在生产环境中安装或在团队成员的机器上安装时，您的数据库都会被相同地设置。'
- en: 'To create a new migration, use the `make:migration` Artisan CLI command. The
    argument of the command should be a snake-cased description of what the migration
    will do:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新的迁移，请使用`make:migration` Artisan CLI命令。命令的参数应该是迁移将要执行的操作的蛇形描述。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You'll now see your new migration in the `database/migrations` directory. You'll
    notice the filename has a prefixed timestamp, such as `2017_06_20_133317_create_listings_table.php`.
    The timestamp allows Laravel to determine the proper order of the migrations,
    in case it needs to run more than one at a time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将在`database/migrations`目录中看到新的迁移。您会注意到文件名具有前缀时间戳，例如`2017_06_20_133317_create_listings_table.php`。时间戳允许Laravel确定迁移的正确顺序，以防需要同时运行多个迁移。
- en: Your new migration declares a class that extends `Migration`. It overrides two
    methods: `up`, which is used to add new tables, columns, or indexes to your database;
    and `down`, which is used to delete them. We'll implement these methods shortly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您的新迁移声明了一个扩展了`Migration`的类。它覆盖了两个方法：`up`用于向数据库添加新表、列或索引；`down`用于删除它们。我们很快将实现这些方法。
- en: '`2017_06_20_133317_create_listings_table.php`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`2017_06_20_133317_create_listings_table.php`：'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Schema
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式
- en: A **schema **is a blueprint for the structure of a database. For a relational
    database such as MySQL, the schema will organize data into tables and columns.
    In Laravel, schemas are declared by using the `Schema` facade's `create` method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**模式**是数据库结构的蓝图。对于诸如MySQL之类的关系数据库，模式将数据组织成表和列。在Laravel中，可以使用`Schema`外观的`create`方法声明模式。'
- en: We'll now make a schema for a table to hold Vuebnb listings. The columns of
    the table will match the structure of our mock listing data. Note that we set
    a default `false` value for the amenities and allow the prices to have a `NULL`
    value. All other columns require a value.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将为一个表创建一个模式，用于保存Vuebnb列表。表的列将与我们的模拟列表数据的结构相匹配。请注意，我们为设施设置了默认的`false`值，并允许价格有一个`NULL`值。所有其他列都需要一个值。
- en: The schema will go inside our migration's `up` method. We'll also fill out the `down` with
    a call to `Schema::drop`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 模式将放在我们迁移的`up`方法中。我们还将填写`down`，调用`Schema::drop`。
- en: '`2017_06_20_133317_create_listings_table.php`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`2017_06_20_133317_create_listings_table.php`：'
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A **facade **is an object-oriented design pattern for creating a static proxy
    to an underlying class in the service container. The facade is not meant to provide
    any new functionality; its only purpose is to provide a more memorable and easily
    readable way of performing a common action. Think of it as an object-oriented
    helper function.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**外观**是一种面向对象的设计模式，用于在服务容器中创建对底层类的静态代理。外观不是为了提供任何新功能；它的唯一目的是提供一种更易记和易读的方式来执行常见操作。将其视为面向对象的辅助函数。'
- en: Execution
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行
- en: 'Now that we''ve set up our new migration, let''s run it with this Artisan command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了新的迁移，让我们使用这个Artisan命令来运行它：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see an output like this in the Terminal:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在终端中看到类似以下的输出：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To confirm the migration worked, let's use Tinker to show the new table structure.
    If you've never used Tinker, it's a REPL tool that allows you to interact with
    a Laravel app on the command line. When you enter a command into Tinker it will
    be evaluated as if it were a line in your app code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认迁移是否成功，让我们使用Tinker来显示新表的结构。如果您从未使用过Tinker，它是一个REPL工具，允许您在命令行上与Laravel应用程序进行交互。当您在Tinker中输入命令时，它将被评估为您的应用程序代码中的一行。
- en: 'Firstly, open the Tinker shell:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开Tinker shell：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now enter a PHP statement for evaluation. Let''s use the `DB` facade''s `select` method
    to run an SQL `DESCRIBE` query to show the table structure:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入一个PHP语句进行评估。让我们使用`DB`外观的`select`方法来运行一个SQL`DESCRIBE`查询，以显示表结构：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The output is quite verbose so I won't reproduce it here, but you should see
    an object with all your table details, confirming the migration worked.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 输出非常冗长，所以我不会在这里重复，但您应该看到一个包含所有表细节的对象，确认迁移已经成功。
- en: Seeding mock listings
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 种子模拟列表
- en: 'Now that we have a database table for our listings, let''s seed it with the
    mock data. To do so we''re going to have to do the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了列表的数据库表，让我们用模拟数据填充它。为此，我们需要做以下事情：
- en: Load the `database/data.json` file
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`database/data.json`文件
- en: Parse the file
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析文件
- en: Insert the data into the listings table
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据插入列表表中
- en: Creating a seeder
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个seeder
- en: 'Laravel includes a seeder class that we can extend called `Seeder`. Use this
    Artisan command to implement it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel包括一个我们可以扩展的seeder类，称为`Seeder`。使用此Artisan命令来实现它：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When we run the seeder, any code in the `run` method is executed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行seeder时，`run`方法中的任何代码都会被执行。
- en: '`database/ListingsTableSeeder.php`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`database/ListingsTableSeeder.php`：'
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Loading the mock data
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载模拟数据
- en: Laravel provides a `File` facade that allows us to open files from disk as simply
    as `File::get($path)`. To get the full path to our mock data file we can use the `base_path()` helper
    function, which returns the path to the root of our application directory as a
    string.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel提供了一个`File`外观，允许我们简单地从磁盘打开文件，如`File::get($path)`。要获取模拟数据文件的完整路径，我们可以使用`base_path()`辅助函数，它将应用程序目录的根路径作为字符串返回。
- en: It's then trivial to convert this JSON file to a PHP array using the built-in `json_decode` method.
    Once the data is an array, it can be directly inserted into the database given
    that the column names of the table are the same as the array keys.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以使用内置的`json_decode`方法将此JSON文件转换为PHP数组。一旦数据是一个数组，只要表的列名与数组键相同，就可以直接将数据插入数据库。
- en: '`database/ListingsTableSeeder.php`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`database/ListingsTableSeeder.php`：'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Inserting the data
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入数据
- en: In order to insert the data, we'll use the `DB` facade again. This time we'll
    call the `table` method, which returns an instance of `Builder`. The `Builder` class
    is a fluent query builder that allows us to query the database by chaining constraints,
    for example, `DB::table(...)->where(...)->join(...)` and so on. Let's use the `insert` method
    of the builder, which accepts an array of column names and values.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了插入数据，我们将再次使用`DB`外观。这次我们将调用`table`方法，它返回一个`Builder`的实例。`Builder`类是一个流畅的查询构建器，允许我们通过链接约束来查询数据库，例如`DB::table(...)->where(...)->join(...)`等。让我们使用构建器的`insert`方法，它接受一个列名和值的数组。
- en: '`database/seeds/ListingsTableSeeder.php`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`database/seeds/ListingsTableSeeder.php`：'
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Executing the seeder
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行seeder
- en: To execute the seeder we must call it from the `DatabaseSeeder.php`file, which
    is in the same directory.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行seeder，我们必须从相同目录中的`DatabaseSeeder.php`文件中调用它。
- en: '`database/seeds/DatabaseSeeder.php`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`database/seeds/DatabaseSeeder.php`：'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With that done, we can use the Artisan CLI to execute the seeder:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以使用Artisan CLI来执行seeder：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see the following output in your Terminal:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在终端中看到以下输出：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We''ll again use Tinker to check our work. There are 30 listings in the mock
    data, so to confirm the seed was successful, let''s check for 30 rows in the database:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次使用Tinker来检查我们的工作。模拟数据中有30个列表，所以为了确认种子成功，让我们检查数据库中是否有30行：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, let''s inspect the first row of the table just to be sure its content
    is what we expect:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们检查表的第一行，以确保其内容符合我们的预期：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is the output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If yours looks like that you're ready to move on!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的看起来像这样，那么你已经准备好继续了！
- en: Listing model
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表模型
- en: We've now successfully created a database table for our listings and seeded
    it with mock listing data. How do we access this data now from the Laravel app?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功为我们的列表创建了一个数据库表，并用模拟列表数据进行了种子。现在我们如何从Laravel应用程序中访问这些数据呢？
- en: We saw how the `DB` facade lets us execute queries on our database directly.
    But Laravel provides a more powerful way to access data via the **Eloquent ORM**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`DB`外观让我们直接在数据库上执行查询。但是Laravel提供了一种更强大的方式通过**Eloquent ORM**访问数据。
- en: Eloquent ORM
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eloquent ORM
- en: '**Object-Relational Mapping** (**ORM**) is a technique for converting data
    between incompatible systems in object-oriented programming languages. Relational
    databases such as MySQL can only store scalar values such as integers and strings,
    organized within tables. We want to make use of rich objects in our app, though,
    so we need a means of robust conversion.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象关系映射**（**ORM**）是一种在面向对象编程语言中在不兼容的系统之间转换数据的技术。MySQL等关系数据库只能存储整数和字符串等标量值，这些值组织在表中。但是我们希望在我们的应用程序中使用丰富的对象，因此我们需要一种强大的转换方式。'
- en: Eloquent is the ORM implementation used in Laravel. It uses the **active record** design
    pattern, where a model is tied to a single database table, and an instance of
    the model is tied to a single row.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent是Laravel中使用的ORM实现。它使用**活动记录**设计模式，其中一个模型与一个数据库表绑定，模型的一个实例与一行绑定。
- en: 'To create a model in Laravel using Eloquent ORM, simply extend the `Illuminate\Database\Eloquent\Model` class using
    Artisan:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Laravel中使用Eloquent ORM创建模型，只需使用Artisan扩展`Illuminate\Database\Eloquent\Model`类：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This generates a new file.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个新文件。
- en: '`app/Listing.php`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/Listing.php`：'
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How do we tell the ORM what table to map to, and what columns to include? By
    default, the `Model` class uses the class name (`Listing`) in lowercase (`listing`)
    as the table name to use. And, by default, it uses all the fields from the table.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何告诉ORM要映射到哪个表，以及要包含哪些列？默认情况下，`Model`类使用类名（`Listing`）的小写形式（`listing`）作为要使用的表名。并且默认情况下，它使用表中的所有字段。
- en: 'Now, any time we want to load our listings we can use code such as this, anywhere
    in our app:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当我们想要加载我们的列表时，我们可以在我们的应用程序的任何地方使用这样的代码：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Casting
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换
- en: The data types in a MySQL database don't completely match up to those in PHP.
    For example, how does an ORM know if a database value of 0 is meant to be the
    number 0, or the Boolean value of `false`?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL数据库中的数据类型与PHP中的数据类型并不完全匹配。例如，ORM如何知道数据库值0是表示数字0还是布尔值`false`？
- en: An Eloquent model can be given a `$casts` property to declare the data type
    of any specific attribute. `$casts` is an array of key/values where the key is
    the name of the attribute being cast, and the value is the data type we want to
    cast to.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent模型可以使用`$casts`属性声明任何特定属性的数据类型。`$casts`是一个键/值数组，其中键是要转换的属性的名称，值是我们要转换为的数据类型。
- en: For the listings table, we will cast the amenities attributes as Booleans.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列表表，我们将把设施属性转换为布尔值。
- en: '`app/Listing.php`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/Listing.php`：'
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now these attributes will have the correct type, making our model more robust:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些属性将具有正确的类型，使我们的模型更加健壮：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Public interface
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共接口
- en: The final piece of our web service is the public interface that will allow a
    client app to request the listing data. Since the Vuebnb listing page is designed
    to display one listing at a time, we'll at least need an endpoint to retrieve
    a single listing.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Web服务的最后一部分是公共接口，允许客户端应用程序请求列表数据。由于Vuebnb列表页面设计为一次显示一个列表，所以我们至少需要一个端点来检索单个列表。
- en: Let's now create a route that will match any incoming GET requests to the URI `/api/listing/{listing}` where `{listing}` is
    an ID. We'll put this in the `routes/api.php` file, where routes are automatically
    given the `/api/` prefix and have middleware optimized for use in a web service
    by default.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个路由，将匹配任何传入的GET请求到URI`/api/listing/{listing}`，其中`{listing}`是一个ID。我们将把这个路由放在`routes/api.php`文件中，路由会自动添加`/api/`前缀，并且默认情况下具有用于Web服务的中间件优化。
- en: We'll use a `closure` function to handle the route. The function will have a `$listing` argument, which
    we'll type hint as an instance of the `Listing` class, that is, our model. Laravel's
    service container will resolve this as an instance with the ID matching `{listing}`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`closure`函数来处理路由。该函数将有一个`$listing`参数，我们将其类型提示为`Listing`类的实例，也就是我们的模型。Laravel的服务容器将解析此实例，其ID与`{listing}`匹配。
- en: We can then encode the model as JSON and return it as a response.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将模型编码为JSON并将其作为响应返回。
- en: '`routes/api.php`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`routes/api.php`：'
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can test this works by using the `curl` command from the Terminal:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用终端上的`curl`命令来测试这个功能是否有效：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The response will be the listing with ID 1:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 响应将是ID为1的列表：
- en: '![](assets/9e447b42-228b-44ff-b6dc-a8e5d91f02bc.png)Figure 4.3\. JSON response
    from Vuebnb web service'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9e447b42-228b-44ff-b6dc-a8e5d91f02bc.png)图4.3。Vuebnb Web服务的JSON响应'
- en: Controller
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: 'We''ll be adding more routes to retrieve the listing data as the project progresses.
    It''s a best practice to use a `controller` class for this functionality to keep
    a separation of concerns. Let''s create one with Artisan CLI:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 随着项目的进展，我们将添加更多的路由来检索列表数据。最佳实践是使用`controller`类来实现这个功能，以保持关注点的分离。让我们使用Artisan
    CLI创建一个：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We'll then move the functionality from the route into a new method, `get_listing_api`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将从路由中的功能移动到一个新的方法`get_listing_api`。
- en: '`app/Http/Controllers/ListingController.php`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/Http/Controllers/ListingController.php`：'
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: For the `Route::get` method we can pass a string as the second argument instead
    of a `closure` function. The string should be in the form `[controller]@[method]`, for
    example, `ListingController@get_listing_web`. Laravel will correctly resolve this
    at runtime.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`Route::get`方法，我们可以将字符串作为第二个参数传递，而不是`closure`函数。字符串应该是`[controller]@[method]`的形式，例如`ListingController@get_listing_web`。Laravel将在运行时正确解析这个。
- en: '`routes/api.php`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`routes/api.php`：'
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Images
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像
- en: As stated at the beginning of the chapter, each mock listing comes with several
    images of the room. These images are not in the project code and must be copied
    from a parallel directory in the code base called `images`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在本章开头所述，每个模拟列表都附带了房间的几张图片。这些图片不在项目代码中，必须从代码库中名为`images`的平行目录中复制。
- en: 'Copy the contents of this directory into the `public/images` folder:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 将此目录的内容复制到`public/images`文件夹中：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once you''ve copied these files, `public/images` will have 30 sub-folders,
    one for each mock listing. Each of these folders will contain exactly four main
    images and a thumbnail image:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您复制了这些文件，`public/images`将有30个子文件夹，每个模拟列表一个。每个文件夹将包含四张主要图片和一个缩略图图片：
- en: '![](assets/1321f4d1-eb59-49c2-b034-d5766ad72788.png)Figure 4.4\. Image files
    in the public folder'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1321f4d1-eb59-49c2-b034-d5766ad72788.png)图4.4。公共文件夹中的图像文件'
- en: Accessing images
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问图像
- en: Files in the `public`directory can be directly requested by appending their
    relative path to the site URL. For example, the default CSS file, `public/css/app.css`, can
    be requested at `http://vuebnb.test/css/app.css`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`public`目录中的文件可以通过将它们的相对路径附加到站点URL直接请求。例如，默认的CSS文件`public/css/app.css`可以在`http://vuebnb.test/css/app.css`请求。'
- en: The advantage of using the `public` folder, and the reason we've put our images
    there, is to avoid having to create any logic for accessing them. A frontend app
    can then directly call the images in an `img` tag.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`public`文件夹的优势，以及我们将图像放在那里的原因，是避免创建任何访问它们的逻辑。然后前端应用程序可以直接在`img`标签中调用图像。
- en: You may think it's inefficient for our web server to serve images like this,
    and you'd be right. Later in the book, we'll serve the images from a CDN when
    in production mode.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能认为我们的网络服务器以这种方式提供图像是低效的，您是对的。在本书的后面，当处于生产模式时，我们将从CDN提供图像。
- en: 'Let''s try to open one of the mock listing images in our browser to test this
    thesis: `http://vuebnb.test/images/1/Image_1.jpg`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在浏览器中打开一个模拟列表图片来测试这个论点：`http://vuebnb.test/images/1/Image_1.jpg`：
- en: '![](assets/18bb9373-46c0-4abe-bf95-b1f3b1139b7e.png)Figure 4.5\. Mock listing
    image displayed in browser'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/18bb9373-46c0-4abe-bf95-b1f3b1139b7e.png)图4.5。在浏览器中显示的模拟列表图像'
- en: Image links
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图片链接
- en: 'The payload for each listing in the web service should include links to these
    new images so a client app knows where to find them. Let''s add the image paths
    to our listing API payload so it looks like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Web服务的每个列表的负载应该包括指向这些新图像的链接，这样客户端应用程序就知道在哪里找到它们。让我们将图像路径添加到我们的列表API负载中，使其看起来像这样：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The thumbnail image won't be used until later in the project.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 缩略图图像直到项目后期才会被使用。
- en: To implement this, we'll use our model's `toArray` method to make an array representation
    of the model. We'll then easily be able to add new fields. Each mock listing has
    exactly four images, numbered 1 to 4, so we can use a `for` loop and the `asset` helper
    to generate fully-qualified URLs to files in the public folder.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将使用我们模型的`toArray`方法来创建模型的数组表示。然后我们将能够轻松地添加新字段。每个模拟列表都有四张图片，编号为1到4，所以我们可以使用`for`循环和`asset`助手来生成公共文件夹中文件的完全合格的URL。
- en: We finish by creating an instance of the `Response` class by calling the `response` helper.
    We use the `json`; method and pass in our array of fields, returning the result.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过调用`response`助手创建`Response`类的实例。我们使用`json`方法并传入我们的字段数组，返回结果。
- en: '`app/Http/Controllers/ListingController.php`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/Http/Controllers/ListingController.php`：'
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `/api/listing/{listing}` endpoint is now ready for consumption by a client
    app.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`/api/listing/{listing}`端点现在已准备好供客户端应用程序使用。'
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built a web service with Laravel to make the Vuebnb listing
    data publicly accessible.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Laravel构建了一个Web服务，使Vuebnb列表数据可以公开访问。
- en: This involved setting up a database table using a migration and schema, then
    seeding the database with mock listing data. We then created a public interface
    for the web service using routes. This returned the mock data as a JSON payload,
    including links to our mock images.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及使用迁移和模式设置数据库表，然后使用路由向数据库中填充模拟列表数据。然后我们创建了一个公共接口，用于返回模拟数据作为JSON负载，包括指向我们模拟图像的链接。
- en: In the next chapter, we'll introduce Webpack and the Laravel Mix build tool
    to set up a full-stack development environment. We'll migrate the Vuebnb prototype
    into the project, and refactor it to fit the new workflow.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Webpack和Laravel Mix构建工具，以建立一个全栈开发环境。我们将把Vuebnb原型迁移到项目中，并对其进行重构以适应新的工作流程。
