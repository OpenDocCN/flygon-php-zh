- en: Chapter 9. Adding Bells and Whistles to your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。为您的应用程序添加花里胡哨的功能
- en: We've added a lot of solid functionality to our application. However, there
    are a few missing features that some people might consider*"nice* to have" and
    are important to us so that our application has a nice user experience.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们为我们的应用程序添加了许多实用功能。但是，还有一些缺少的功能，有些人可能认为是“很好有”的，并且对我们来说很重要，以便我们的应用程序具有良好的用户体验。
- en: 'In this chapter, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Add jQuery to the project and use it to simplify the delete buttons
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将jQuery添加到项目中并使用它简化删除按钮
- en: Add basic pagination to user posts by using CouchDB views and jQuery
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用CouchDB视图和jQuery为用户帖子添加基本分页
- en: Add profile images for all of our users using Gravatar's web service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用Gravatar的Web服务为我们所有的用户添加个人资料图片
- en: These features are fun, little additions, and they will also open your eyes
    to what's possible when you combine other libraries with CouchDB and PHP.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能是有趣的小添加，它们也会让您看到当您将其他库与CouchDB和PHP结合使用时可能发生的事情。
- en: Adding jQuery to our project
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将jQuery添加到我们的项目中
- en: Even though this book is primarily about writing applications in PHP, JavaScript
    has turned into an almost essential tool in a developer's tool belt when building
    great applications. We've already used JavaScript in our CouchDB views but, in
    this chapter, we'll use JavaScript for its most common use case－improving our
    user experience. In order for us to write simpler JavaScript, we're going to use
    a popular library called **jQuery**. If you haven't used jQuery before, you are
    going to be pleasantly surprised at how much it simplifies both common and complex
    operations in JavaScript.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这本书主要是关于在PHP中编写应用程序，但是在构建优秀的应用程序时，JavaScript已经成为开发人员工具包中几乎必不可少的工具。我们已经在CouchDB视图中使用了JavaScript，但是在本章中，我们将使用JavaScript进行其最常见的用例-改善用户体验。为了使我们能够编写更简单的JavaScript，我们将使用一个名为**jQuery**的流行库。如果您以前没有使用过jQuery，您会惊喜地发现它在简化JavaScript中的常见和复杂操作方面有多么简化。
- en: Installing jQuery
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装jQuery
- en: Luckily, jQuery is incredibly simple to get into any project. We could download
    it from [http://www.jquery.com](http://www.jquery.com), but, because we want to
    focus on speed, we can actually use it without installing anything into our repository.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，将jQuery添加到任何项目中都非常简单。我们可以从[http://www.jquery.com](http://www.jquery.com)下载它，但是，因为我们想要专注于速度，我们实际上可以在不将任何内容安装到我们的存储库中的情况下使用它。
- en: Time for action — adding jQuery to our project
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-将jQuery添加到我们的项目中
- en: Because of the influx of people using jQuery, Google has set up a content delivery
    network that serves up the jQuery library for us without anything being required
    in our project. Let's tell our `layout.php` file where to find jQuery.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用jQuery的人数激增，谷歌建立了一个内容传递网络，为我们提供jQuery库，而无需在我们的项目中需要任何东西。让我们告诉我们的`layout.php`文件在哪里找到jQuery。
- en: 'Open the `layout.php` file, and add the following code right before the end
    of the `body` section:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`layout.php`文件，并在`body`部分的末尾之前添加以下代码：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What just happened?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just added one line of code before the end of our `body` tag in the `layout.php`
    file. That's all it took to use jQuery with our project! You may be wondering
    why we decided to put our jQuery library all the way at the bottom of our file.
    The simplest explanation is that as a browser loads code, it does so one line
    at a time. By putting JavaScript at the bottom of the page, it allows the other
    elements, such as CSS and HTML markup, to load faster, giving the user the impression
    that things are loading fast.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是在`layout.php`文件的`body`标记的末尾之前添加了一行代码。这就是使用jQuery与我们的项目所需的全部！您可能想知道为什么我们决定将我们的jQuery库放在文件的底部。最简单的解释是，当浏览器加载代码时，它会逐行加载。通过将JavaScript放在页面底部，它可以更快地加载其他元素，例如CSS和HTML标记，从而给用户一种快速加载的印象。
- en: Time for action — creating master.js and connecting Boostrap's JavaScript files
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-创建master.js并连接Boostrap的JavaScript文件
- en: As our application grows, we'll want to be able to add our JavaScript into external
    files. Let's create a file called `master.js` that will hold all of our application's
    JavaScript and then connect Bootstrap's JavaScript files that we downloaded in
    [Chapter 6](ch06.html "Chapter 6. Modeling Users"), *Modeling Users.*
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的应用程序的增长，我们希望能够将我们的JavaScript添加到外部文件中。让我们创建一个名为`master.js`的文件，它将保存我们应用程序的所有JavaScript，然后连接我们在[第6章](ch06.html
    "第6章。建模用户")中下载的Bootstrap的JavaScript文件，*建模用户*。
- en: Create a new file called `master.js` in the `public/js` folder.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`public/js`文件夹中创建一个名为`master.js`的新文件。
- en: 'Open the `layout.php` file, and add the following code right before the end
    of the `body` section:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`layout.php`文件，并在`body`部分的末尾之前添加以下代码：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What just happened?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a blank file called `master.js`, which is where all of our application's
    JavaScript will be live. Next, we adjusted our `layout.php` file again, allowing
    us to include the `boostrap.min.js` file that we downloaded in [Chapter 6](ch06.html
    "Chapter 6. Modeling Users"), as well as our newly created `master.js` file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`master.js`的空文件，这是我们应用程序的所有JavaScript将存储的地方。接下来，我们再次调整了我们的`layout.php`文件，允许我们包括我们在[第6章](ch06.html
    "第6章。建模用户")中下载的`boostrap.min.js`文件，以及我们新创建的`master.js`文件。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When it comes to writing JavaScript, the order in which you load files is important.
    As we write jQuery later in this chapter, it will be important for our browser
    to load the jQuery file first, so it knows what jQuery is and how the syntax works.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写JavaScript时，加载文件的顺序很重要。在本章后面编写jQuery时，对于我们的浏览器首先加载jQuery文件很重要，这样它就知道jQuery是什么以及语法是如何工作的。
- en: Using jQuery to improve our site
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery改进我们的网站
- en: Now that we have jQuery, let's jump right into using it to improve our site
    a little bit. There are a lot of different ways in which you can write the jQuery
    and JavaScript code, but we're going to stick to the absolute basics in this book
    and try to keep it simple.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了jQuery，让我们立即使用它来稍微改进我们的网站。您可以以许多不同的方式编写jQuery和JavaScript代码，但是在本书中，我们将坚持绝对基础知识，并尽量保持简单。
- en: Fixing our delete post action to actually use HTTP delete
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复我们的删除帖子操作以实际使用HTTP删除
- en: 'One of the things you might have noticed early in the last chapter is that
    when we coded the deletion of posts from the user''s profile, we actually used
    the `GET HTTP` method instead of the `DELETE` method. This is because it''s difficult
    to trigger a `DELETE` route without using JavaScript. So, in the following section,
    we''re going to improve the deletion process in order for it to work as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经在上一章的早期注意到的一件事是，当我们从用户的个人资料中编写帖子删除时，我们实际上使用了`GET HTTP`方法而不是`DELETE`方法。这是因为很难触发`DELETE`路由而不使用JavaScript。因此，在接下来的部分中，我们将改进删除过程，使其按照以下方式工作：
- en: A user clicks on **Delete** on a post.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户点击帖子上的“删除”。
- en: A `DELETE AJAX` request is made from jQuery to our application.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从jQuery到我们的应用程序发出了一个`DELETE AJAX`请求。
- en: Our application will delete the post document and report back to jQuery that
    everything went as expected.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的应用程序将删除帖子文档，并向jQuery报告一切都如预期般进行。
- en: The post will fade from the view without our user needing to refresh the page.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 帖子将从视图中淡出，而无需用户刷新页面。
- en: This will be a nice improvement to our user profile, because we won't require
    our page to reload each time an action is performed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是对我们用户资料的一个很好的改进，因为我们不需要每次执行操作时重新加载页面。
- en: Time for action — improving our user experience by using AJAX to delete posts
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-通过使用AJAX删除帖子来改善我们的用户体验
- en: Let's get our feet wet with a bit of jQuery by adding some code to our `master.js`
    file that will allow us to delete posts using JavaScript. Don't be overwhelmed
    if the syntax of jQuery isn't familiar to you at first; stick with it, and I think
    you'll be incredibly pleased with the results.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向我们的`master.js`文件添加一些代码，使我们能够使用JavaScript删除帖子，来初步了解一下jQuery。如果jQuery的语法一开始对您不太熟悉，请不要感到不知所措；坚持下去，我相信您会对结果感到非常满意。
- en: 'Open `public/js/master.js`, and make sure the jQuery code will run when the
    page is finished loading by adding a `$(document).ready` event to our file. This
    piece of code means that any JavaScript code inside of this function will be run
    once the page has finished loading:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`public/js/master.js`，确保jQuery代码在页面加载完成后运行，通过在我们的文件中添加`$(document).ready`事件。这段代码意味着一旦页面加载完成，此函数内的任何JavaScript代码都将运行：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s add an event that binds the `click` event to any button that has
    the `delete` class in our HTML. All of the code inside the brackets of `function(event)`
    will be run each time one of our delete post buttons is clicked:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个事件，将`click`事件绑定到我们HTML中具有`delete`类的任何按钮。`function(event)`括号内的所有代码将在每次点击我们的删除帖子按钮时运行：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s prevent the link from taking us to a new page, as it normally does,
    with a piece of code called `event.preventDefault()`. Then, let''s save the `href`
    attribute of the clicked link into a variable called `location`, so that we can
    use it in our AJAX call:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们阻止链接像通常情况下那样将我们带到新页面，使用一个叫做`event.preventDefault()`的代码。然后，让我们将点击链接的`href`属性保存到一个叫做`location`的变量中，这样我们就可以在我们的AJAX调用中使用它：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, let''s create a basic AJAX request that will call our application
    and delete the post for us:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们创建一个基本的AJAX请求，将调用我们的应用程序并为我们删除帖子：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What just happened?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We just learned how to make an AJAX request with JavaScript in just a few lines
    of code. We started by wrapping our code in a `$(document).ready` function that
    is run once the page has completely loaded. We then added a function that captures
    the click of any of our `delete post` links in our application. Finally, the most
    complex part of the script is our AJAX call. Let''s talk through this a bit so
    that it makes sense. jQuery has a function called `$.ajax` that has a variety
    of options (which are all viewable here: [http://api.jquery.com/jQuery.ajax/)](http://api.jquery.com/jQuery.ajax/)).
    Let''s walk through each of the options that I''ve used in the piece of code given
    previously and make sure you know what they mean.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学会了如何在几行代码中使用JavaScript进行AJAX请求。我们首先将我们的代码包装在一个`$(document).ready`函数中，该函数在页面完全加载后运行。然后，我们添加了一个捕获我们应用程序中任何`删除帖子`链接点击的函数。最后，脚本中最复杂的部分是我们的AJAX调用。让我们通过一点来讨论一下，以便它有意义。jQuery有一个名为`$.ajax`的函数，它有各种选项（所有选项都可以在这里查看：[http://api.jquery.com/jQuery.ajax/)](http://api.jquery.com/jQuery.ajax/)）。让我们逐个讨论我之前给出的代码片段中使用的每个选项，并确保您知道它们的含义。
- en: '`type: ''DELETE''` means that we want to use the `DELETE HTTP` method for our
    request.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type: ''DELETE''`表示我们要使用`DELETE HTTP`方法进行请求。'
- en: '`url: location` means that we are going to use the `href` attribute of the
    clicked link for our request. This will make sure the correct post is deleted.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url: location`表示我们将使用点击链接的`href`属性进行请求。这将确保正确的帖子被删除。'
- en: '`context: $(this)` is the object that will be used for all AJAX callbacks.
    So, in this example, all the code that is inside the `success` option of this
    call will use the clicked link as the context for all calls.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context: $(this)`是将用于所有AJAX回调的对象。因此，在此示例中，此调用的`success`选项中的所有代码将使用点击链接作为所有调用的上下文。'
- en: '`success: function()is` called whenever our AJAX request is complete. We placed
    the following code inside this function: `$(this).parent().parent().fadeOut()`;.
    This means that we''re going to look two HTML levels up from the clicked link.
    This means that we''re going to look for`<div class="post-item row">` of the post,
    and we''re going to fade it out of view.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`success: function()`在我们的AJAX请求完成时调用。我们将以下代码放在此函数中：`$(this).parent().parent().fadeOut()`；这意味着我们将从点击链接的两个HTML级别向上查找。这意味着我们将查找帖子的`<div
    class="post-item row">`，然后将其淡出视图。'
- en: '`error: function (request, status, error)` is run whenever an error occurs
    in your code. Right now, we''re just displaying an alert box, which is not the
    most elegant approach, especially since we aren''t supplying the user with details
    of what happened. This will work for us for now, but if you want some bonus points,
    play a bit with this function and see if you can make it a bit more graceful.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error: function (request, status, error)`在您的代码中发生错误时运行。现在，我们只是显示一个警报框，这不是最优雅的方法，特别是因为我们没有提供发生了什么的细节给用户。这暂时对我们有效，但如果您想要一些额外的分数，可以尝试一下这个函数，看看是否可以使它更加优雅。'
- en: Awesome! We just added some code that will really improve the user's experience.
    As your application grows, and you add more features to it, make sure to keep
    jQuery's `AJAX` method in mind, which will definitely make things easier.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们刚刚添加了一些代码，这将真正改善用户的体验。随着您的应用程序的增长，并且您为其添加更多功能，请确保牢记jQuery的`AJAX`方法，这肯定会让事情变得更容易。
- en: Updating our route to use the DELETE HTTP method
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新我们的路由以使用DELETE HTTP方法
- en: Now that we are correctly using `DELETE` as our `HTTP` method through our AJAX
    call, we need to update our routes, so our code knows how to handle the route.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正确地使用`DELETE`作为我们的AJAX调用的`HTTP`方法，我们需要更新我们的路由，这样我们的代码就知道如何处理路由了。
- en: 'Open `index.php`, and look for the `post/delete/:id/:rev` route that we created
    in the previous chapter:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`，查找我们在上一章中创建的`post/delete/:id/:rev`路由：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s change the route to use a `delete` method by changing `get` to `delete`.
    Then, remove the `success` variable and the redirection code, because we''ll no
    longer need them:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过将`get`更改为`delete`来更改路由以使用`delete`方法。然后，删除`success`变量和重定向代码，因为我们将不再需要它们：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's test it out!
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 让我们来测试一下！
- en: While testing this feature, make sure to stop and appreciate all of the technologies
    that are working together in unison to solve a somewhat complex problem.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试这个功能时，确保停下来欣赏所有技术的协同工作，以解决一个相当复杂的问题。
- en: Go to `http://localhost/verge/login`, and log in to the application as `johndoe`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost/verge/login`，并以`johndoe`的身份登录应用程序。
- en: Click on **My Profile**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“我的个人资料”。
- en: Click on `(Delete)` next to one of your posts.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击您的帖子旁边的“(删除)”。
- en: The deleted posts will fade out of view, and the other posts will bump up on
    the page.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除的帖子将从视图中消失，其他帖子将在页面上升。
- en: Adding simple pagination using jQuery
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery添加简单的分页
- en: As our application grows, posts will start to fill up the profile of a user.
    What happens if our application becomes successful, and people start using it?
    Hundreds of posts will be printed to the profile view each time the page loads.
    Something like this could absolutely cripple your application as it starts to
    grow.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的应用程序的增长，帖子将开始填满用户的个人资料。如果我们的应用程序变得成功，并且人们开始使用它，会发生什么？每次加载页面时，将打印数百个帖子到个人资料视图中。这样的情况绝对会使您的应用程序陷入瘫痪。
- en: 'With that in mind, we''re going to create some pagination on our profile pages.
    Our simple pagination system will work as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们将在我们的个人资料页面上创建一些分页。我们的简单分页系统将按以下方式工作：
- en: By default, we'll show 10 posts on a page. When a user wants to see more, they'll
    click on a **Load More** link.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，我们将在页面上显示10个帖子。当用户想要查看更多时，他们将单击“加载更多”链接。
- en: When the **Show More** link is clicked, jQuery will figure out how many items
    to skip and tell Bones which documents to retrieve.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当单击“显示更多”链接时，jQuery将找出要跳过多少项，并告诉Bones要检索哪些文档。
- en: Bones will use Sag to call CouchDB and get more posts through the `posts_by_user`
    view.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bones将使用Sag调用CouchDB，并通过`posts_by_user`视图获取更多帖子。
- en: Bones will load the results into a partial view that contains our HTML layout
    for how posts need to be formatted. This HTML will be returned to jQuery to display
    on our page.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bones将结果加载到包含我们帖子需要格式化的HTML布局的部分视图中。这个HTML将返回给jQuery在我们的页面上显示。
- en: There's quite a bit going on there, but this type of feature is a common occurrence
    in most applications. So, let's jump in and see if we can piece this all together.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多事情要做，但这种功能在大多数应用程序中都很常见。所以，让我们跳进去，看看我们是否能把这一切都拼凑起来。
- en: Time for action — taking posts out of profile.php and putting them in their
    own partial view
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动-将帖子从profile.php中取出并放入它们自己的部分视图
- en: The code for listing posts sits directly inside the `profile.php` page, which
    was fine up until now. However, in a moment, we'll want to be able to display
    posts via `callback` from Javascript, which on if we're not careful, could mean
    duplicate code or inconsistent layout. Let's safeguard ourselves against that
    by moving our code into a partial view that we can reuse easily.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 列出帖子的代码直接位于`profile.php`页面内，这在目前为止都还好。然而，在某一时刻，我们将希望能够通过`Javascript`回调显示帖子，如果我们不小心，这可能意味着重复的代码或不一致的布局。让我们通过将我们的代码移动到一个可以轻松重用的部分视图中来保护自己。
- en: Create a new file called `_posts.php` in views/user.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在views/user中创建一个名为`_posts.php`的新文件。
- en: 'Copy and paste the `foreach` code that lists out posts from `views/user/profile.php`,
    and paste it into our new file `_posts.php`. The end result of `_posts.php` should
    as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制并粘贴从`views/user/profile.php`列出帖子的`foreach`代码，并将其粘贴到我们的新文件`_posts.php`中。`_posts.php`的最终结果应该如下所示：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, let's remove the same `foreach` statement from `views/user/profile.php`,
    and replace it with an `include` call to the newly created `_posts` file. Then
    let's add a `span` inside our list's `h2` element so that we can easily access
    it via jQuery.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们从`views/user/profile.php`中删除相同的`foreach`语句，并将其替换为对新创建的`_posts`文件的`include`调用。然后让我们在我们的列表的`h2`元素内添加一个`span`，这样我们就可以很容易地通过jQuery访问它。
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: What just happened?
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We took all of the code that listed the posts out of `profile.php` and moved
    it into a new partial called `_posts.php`. We began the filename with an underscore
    for no other reason than for us to tell that it's different than normal views
    when we are looking through our source code. By partial view, I meant that it's
    meant to be loaded into another page, by itself, it would probably serve no purpose.
    On the surface, our application will function exactly the same as it did before
    we moved our code to a partial view.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`profile.php`中列出的所有帖子的代码移到了一个名为`_posts.php`的新部分中。我们在文件名前加上下划线，没有其他原因，只是为了让我们在查看源代码时知道它与普通视图不同。所谓的部分视图，是指它是要加载到另一个页面中的，单独存在时可能没有任何作用。在表面上，我们的应用程序将与我们将代码移动到部分视图之前完全相同。
- en: We then altered our code in `profile.php`, so that it would make it easier to
    work with using jQuery. We added a `span` element with an ID of `post_count` inside
    of our `h2` element. This `span` element just contains the number of total posts.
    We'll use this soon to tell us if we've loaded all of the posts we needed into
    our list. We then wrapped our list of posts with a `div` with the ID `post_list`.
    We're going to use this identifier to append new posts to the list from our pagination
    control.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们修改了`profile.php`中的代码，以便使用jQuery更容易。我们在`h2`元素内添加了一个ID为`post_count`的`span`元素。这个`span`元素只包含总帖子数。我们很快就会用到它，以便告诉我们是否已经将我们需要的所有帖子加载到我们的列表中。然后我们用ID为`post_list`的`div`包装了我们的帖子列表。我们将使用这个标识符来从我们的分页控件中将新帖子追加到列表中。
- en: Adding backend support for pagination
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为分页添加后端支持
- en: We don't need another function for pagination. Let's just improve the `Post`
    class's `get_posts_by_user` function. All we need to do is add the `skip` and
    `limit` options, which we will then pass to the `posts_by_user` view in CouchDB.
    Passing `skip` to this view will enable us to skip a certain number of records
    in the results that it sends us, and `limit` will allow us to only show a certain
    number of posts at a time. By combining these two variables, we will have support
    for pagination!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要另一个用于分页的函数。让我们只是改进`Post`类的`get_posts_by_user`函数。我们只需要添加`skip`和`limit`选项，然后将它们传递给CouchDB中的`posts_by_user`视图。将`skip`传递给此视图将使我们能够跳过结果中的某些记录，而`limit`将允许我们一次只显示一定数量的帖子。通过结合这两个变量，我们将支持分页！
- en: Time for action — adjusting our get_posts_by_user function to skip and limit
    posts
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——调整我们的get_posts_by_user函数以跳过和限制帖子
- en: Now that we know what to do, let's jump right into editing our `classes/post.php`
    file and adjusting our `get_posts_by_user` function so that we can add `$skip`
    and `$limit` as arguments.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道该怎么做，让我们立即进入编辑`classes/post.php`文件，并调整我们的`get_posts_by_user`函数，以便我们可以将`$skip`和`$limit`作为参数添加进去。
- en: Open the `Post` class by opening the file called `classes/post.php`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开名为`classes/post.php`的文件来打开`Post`类。
- en: Find our `get_posts_by_user` function, and add `$skip` with a default value
    of `0` and `$limit` with a default value of `10`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到我们的`get_posts_by_user`函数，并添加带有默认值`0`的`$skip`和带有默认值`10`的`$limit`。
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Update our `get` call to Sag so that it passes the value of `$skip` and `$limit`
    into the query.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新我们对Sag的`get`调用，以便将`$skip`和`$limit`的值传递给查询。
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have updated our function to include `skip` and `limit`, let''s
    create a new route in `index.php` that''s similar to the `user/:username` route
    but takes in a route variable of `skip` to drive the pagination. In this route,
    we''re just going to return `_posts` partially, instead of the whole layout:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经更新了我们的函数以包括`skip`和`limit`，让我们在`index.php`中创建一个类似于`user/:username`路由的新路由，但是接受`skip`的路由变量来驱动分页。在这个路由中，我们将返回部分`_posts`，而不是整个布局：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What just happened?
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just added additional `$skip` and `$limit` options to the `get_posts_by_user`
    function. We also set things up so that our current calls will function without
    changing anything, as we set default values for each variable. Our existing call
    in the user profile will now also show the first 10 posts.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚为`get_posts_by_user`函数添加了额外的`$skip`和`$limit`选项。我们还设置了当前调用，使其在不更改任何内容的情况下也能正常运行，因为我们为每个变量设置了默认值。我们现有的用户资料中的调用现在也将显示前10篇文章。
- en: We then created a new route called `/user/:username/:skip`, where `skip` is
    the number of items we want to skip when querying. Everything else in this function
    is exactly the same as in the `/user/:username` route, except for the fact that
    we are returning the results into our partial and with a layout of `false`, so
    there's no layout wrapper. We're doing this so that jQuery can call this route,
    and it will simply return the list of posts it needs to add to the end of the
    list on the page.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建了一个名为`/user/:username/:skip`的新路由，其中`skip`是我们在查询时要跳过的项目数。这个函数中的其他所有内容与`/user/:username`路由中的内容完全相同，只是我们将结果返回到我们的部分中，并且布局为`false`，因此没有布局包装。我们这样做是为了让jQuery可以调用这个路由，它将简单地返回需要添加到页面末尾的帖子列表。
- en: Let's test it out!
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们来测试一下！
- en: Let's make sure that our `/user/:username/:skip` route works as expected by
    playing around with it directly through the browser.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过直接通过浏览器玩弄它来确保我们的`/user/:username/:skip`路由按预期工作。
- en: Go to `http://localhost/verge/user/johndoe/0` (or any user that has a decent
    number of posts).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`http://localhost/verge/user/johndoe/0`（或任何有相当数量帖子的用户）。
- en: Your browser will return a big list of posts using `views/user/_posts.php` as
    a template. Notice that it's showing us 10 total posts, starting with the most
    recent post.![Let's test it out!](graphics/3586_09_015.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的浏览器将使用`views/user/_posts.php`作为模板返回一个大的帖子列表。请注意，它显示了10篇总帖子，从最近的帖子开始。[让我们来测试一下！](graphics/3586_09_015.jpg)
- en: 'Now, let''s try to skip the first 10 posts (as our pager will eventually do)
    and retrieve the next 10 posts by going to: `http://localhost/verge/user/johndoe/10`![Let''s
    test it out!](graphics/3586_09_020.jpg)'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试跳过前10篇文章（就像我们的分页器最终会做的那样），并通过访问`http://localhost/verge/user/johndoe/10`来检索接下来的10篇文章！[让我们来测试一下！](graphics/3586_09_020.jpg)
- en: Our code hopefully worked great. I only had 12 posts on this account, so this
    view skipped the first 10 posts and showed the last two.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的代码希望能够很好地工作。我在这个帐户上只有12篇帖子，所以这个视图跳过了前10篇帖子，显示了最后两篇。
- en: This all functioned exactly as we were expecting, but there's a little bit of
    clean-up to be done in our code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都按我们的预期进行，但是我们的代码还有一些清理工作要做。
- en: Time for action — refactoring our code so it's not redundant
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-重构我们的代码，使其不冗余
- en: Although our code works just fine, you might have noticed that we have near
    identical code `in /user/:username` and `/user/:username/:skip`. We can cut down
    on code bloat by moving all of the redundant code into a function and calling
    it from each route. Let's do this so we can stay in the habit of keeping our code
    clean.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的代码运行良好，但您可能已经注意到我们在`/user/:username`和`/user/:username/:skip`中有几乎相同的代码。我们可以通过将所有冗余代码移动到一个函数中并从每个路由中调用它来减少代码膨胀。让我们这样做，以便保持我们的代码整洁的习惯。
- en: Open `index.php`, and create a function called `get_user_profile` that takes
    `$app` as a parameter, and place it above `/user/:username` route.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`，并创建一个名为`get_user_profile`的函数，它以`$app`作为参数，并将其放在`/user/:username`路由的上方。
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Copy the code from `/user/:username/:skip` into this function. But, this time,
    instead of just `passing $app->request('skip')`, let's check if it exists. If
    it exists, let's pass it to the `get_posts_by_user` function. If it doesn't exist,
    we'll just pass it `0`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`/user/:username/:skip`中的代码复制到此函数中。但是，这一次，我们不仅仅`传递$app->request('skip')`，让我们检查它是否存在。如果存在，让我们将其传递给`get_posts_by_user`函数。如果不存在，我们将只传递`0`。
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, let's clean up both of our profile functions so that both of them just
    call the `get_user_profile` function.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们清理我们的两个profile函数，使它们都只调用`get_user_profile`函数。
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: What just happened?
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just simplified our user profile routes by moving most of the logic into
    a new function called `get_user_profile`. The only piece of functionality that
    was different between the two routes was the `request` variable `skip`. So, we
    put a shorthand `if` statement in the call to the function `Posts::get_posts_by_user`
    that would pass the `skip` request variable if it existed; but if it didn't, we
    would just pass it `0`. Adding this little piece of functionality allowed us to
    use the same code for the two different routes. Finally, we plugged our brand
    new function into our routes, and were ready to bask in the simplicity of the
    code. Everything will still work the same as it did before, but it's much easier
    to read and will be easier for us to update in the future.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将大部分逻辑移动到一个名为`get_user_profile`的新函数中，简化了用户配置文件路由。两个路由之间唯一不同的功能是`request`变量`skip`。因此，我们在对`Posts::get_posts_by_user`函数的调用中放置了一个快捷的`if`语句，如果存在`skip`请求变量，就会传递`skip`请求变量；但如果不存在，我们将只传递`0`。添加这个小功能片段使我们能够在两个不同的路由中使用相同的代码。最后，我们将全新的函数插入到我们的路由中，并准备享受代码的简洁。一切仍然与以前一样工作，但现在更容易阅读，并且将来更新也更容易。
- en: Refactoring and consistently cleaning up code is an important process to follow
    as you develop; you'll thank yourself for doing this later!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 重构和持续清理代码是开发过程中要遵循的重要流程；以后你会为自己做这些而感激的！
- en: Time for action — adding frontend support for pagination
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-为分页添加前端支持
- en: We almost have complete support for pagination. All we need to do now is add
    a little bit of HTML and JavaScript to our project, and we'll have a nice experience.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎已经完全支持分页。现在我们只需要向我们的项目添加一点HTML和JavaScript，我们就会有一个很好的体验。
- en: Let's start by adding a line of CSS into our `master.css` file, so that our
    **Load More** button will look pretty.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从`master.css`文件中添加一行CSS，这样我们的**加载更多**按钮看起来会很漂亮。
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that we have the CSS in place, let's add the HTML for our **Load More**
    button at the bottom of the `post` list inside our `profile.php` view.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了CSS，让我们在`profile.php`视图中的`post`列表底部添加我们的**加载更多**按钮的HTML。
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, let's open `master.js`, and create a function inside the closing brackets
    of the `$(document).ready` function. This function will target the `click` event
    of the any element with the ID of `more_posts`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们打开`master.js`，并在`$(document).ready`函数的闭合括号内创建一个函数。这个函数将针对ID为`more_posts`的任何元素的`click`事件。
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In order for us to call the `/user/:username/:skip` route, we will need to use
    a JavaScript function called `window.location.pathname` to grab the current URL
    of the page. Then, we'll append the number of post items at the end of the string
    so that we skip the number of posts that are currently displayed on the page.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了调用`/user/:username/:skip`路由，我们需要使用一个名为`window.location.pathname`的JavaScript函数来获取页面的当前URL。然后，我们将在字符串的末尾添加帖子项目的数量，以便跳过当前页面上显示的帖子数量。
- en: '[PRE19]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now that we have the location, let's fill in the rest of the AJAX call. This
    time, we'll use the `GET HTTP` method and use the list of posts with the ID of
    `post_list` as our context, which will allow us to reference it in the `success`
    event. Then, let's just add a generic `error` event to let the user know something
    went wrong, if an error occurs.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了位置，让我们填写剩下的AJAX调用。这一次，我们将使用`GET HTTP`方法，并使用ID为`post_list`的帖子列表作为我们的上下文，这将允许我们在`success`事件中引用它。然后，让我们只添加一个通用的`error`事件，以便在发生错误时通知用户发生了错误。
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Finally, let's fill in our `success` function with some code that appends the
    HTML returned from our AJAX call to the end of the `post_list div`. Then, we'll
    check to see if there are any other posts to load. If there are no more posts
    to load, we'll hide the **Load More** button. To get the number of posts, we're
    going to look at the `span` we created with `post_count` as an ID, and convert
    it to an integer with `parseInt:`
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们用一些代码填充我们的`success`函数，将从我们的AJAX调用返回的HTML附加到`post_list div`的末尾。然后，我们将检查是否有其他帖子要加载。如果没有更多帖子要加载，我们将隐藏**加载更多**按钮。为了获取帖子数量，我们将查看我们使用`post_count`作为ID创建的`span`，并使用`parseInt`将其转换为整数。
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What just happened?
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: In this section, we finished our pagination! We started by creating a quick
    CSS rule for our **Load More** link so that it looks a bit friendlier and added
    the HTML needed for it to appear on the profile page. We wrapped up the pagination
    by calling an AJAX function to the URL of the current user's profile and appended
    the number of posts that currently exist in `#post_list div`. By passing this
    number to our route, we're telling our route to pass the number along and to ignore
    all of those items, as we already have them displayed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们完成了分页！我们首先创建了一个快速的CSS规则，用于我们的**加载更多**链接，使其看起来更友好，并添加了在个人资料页面上出现所需的HTML。我们通过调用一个AJAX函数到当前用户个人资料的URL，并将当前存在的帖子数量附加到`#post_list
    div`中来完成分页。通过将这个数字传递给我们的路由，我们告诉我们的路由将这个数字传递并忽略所有这些项目，因为我们已经显示了它们。
- en: Next, we added a `success` function to return the HTML from our route using
    the layout of the `_posts` partial. This HTML will be appended at the end of the
    `#post_list div`. Finally, we checked to see if there were any more items to load
    by comparing the size of the `#post_list` against the number of posts our `reduce`
    function returned to the top of our profile in the `#post_count span`. If the
    two values are equal, it means that no more posts can be loaded, and we are safe
    to hide the **Load More** link.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加了一个`success`函数，使用`_posts`部分的布局返回我们路由的HTML。这个HTML将被附加到`#post_list div`的末尾。最后，我们检查了是否有更多的项目要加载，通过比较`#post_list`的大小与我们的`reduce`函数返回到我们个人资料顶部的帖子数量`#post_count
    span`。如果这两个值相等，这意味着没有更多的帖子可以加载，我们可以安全地隐藏**加载更多**链接。
- en: Time for action — fixing our delete post function to work with pagination
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-修复我们的删除帖子功能以适应分页
- en: When we added the pagination, we also broke the ability to delete posts that
    are loaded via AJAX. This is because we are using the `bind` event handler to
    tie the `click` event to our links, which only happens on page load. So, we'll
    need to account for the links loaded via AJAX. Thankfully, we can do that using
    jQuery's `live` event handler.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们添加分页时，我们还破坏了通过AJAX加载的帖子的删除功能。这是因为我们使用`bind`事件处理程序将`click`事件绑定到我们的链接，这只会在页面加载时发生。因此，我们需要考虑通过AJAX加载的链接。幸运的是，我们可以使用jQuery的`live`事件处理程序来做到这一点。
- en: Open `master.js`, and change the `delete` post code to use `live` instead of
    `bind:`
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`master.js`，并将`delete`帖子代码更改为使用`live`而不是`bind`：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you start deleting a bunch of items in the post list, it currently doesn''t
    change the number of posts tied to a user account using JavaScript. While we are
    here, let''s alter the `success` function so that it also updates the number of
    posts at the top of our post list:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您开始删除帖子列表中的一堆项目，它目前不会使用JavaScript更改与用户帐户相关联的帖子数量。在这里，让我们修改`success`函数，以便它还更新我们帖子列表顶部的帖子数量：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: What just happened?
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just updated our delete button to use the `live` event handler instead of
    the `bind` event handler. By using `live`, jQuery allows us to define a selector
    and applies a rule to all current and future items that match that selector. Then,
    we made our `#post_count` element dynamic so that each time a post is deleted,
    the post count changes accordingly.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚更新了我们的删除按钮，使用`live`事件处理程序而不是`bind`事件处理程序。通过使用`live`，jQuery允许我们定义一个选择器，并将规则应用于所有当前和将来匹配该选择器的项目。然后，我们使我们的`#post_count`元素动态化，以便每次删除帖子时，帖子计数相应地更改。
- en: Testing our complete pagination system
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试我们完整的分页系统
- en: Our pagination is finally wrapped up. Let's go back and test everything to make
    sure that the pagination works as expected.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的分页最终完成了。让我们回去测试一切，确保分页按预期工作。
- en: Go to `http://localhost/verge/login`, and log in to the application as `johndoe`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost/verge/login`，并以`johndoe`的身份登录应用程序。
- en: Click on **My Profile**.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**我的个人资料**。
- en: Scroll to the bottom of the page, and click on **Load More**. The next 10 posts
    will be returned to you.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到页面底部，点击**加载更多**。接下来的10篇帖子将返回给你。
- en: If you have less than 20 posts in your account, the **Load More** button will
    disappear from the page, showing you that you have loaded all of the posts in
    your account.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的帐户中帖子少于20篇，**加载更多**按钮将从页面中消失，向您显示您已经加载了所有帖子。
- en: Try and click on the last post in the list that was loaded through AJAX, and
    it will disappear, just as it should!
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试点击通过AJAX加载的列表中的最后一篇帖子，它将消失，就像应该的那样！
- en: Amazing! Our pagination system works just as we wanted; we're able to delete
    posts, and our post count updates each time we delete a post.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的分页系统正如我们所希望的那样工作；我们能够删除帖子，我们的帖子计数每次删除帖子时都会更新。
- en: Using Gravatars
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Gravatars
- en: 'At this point, our profiles look a bit boring with just a bunch of text, because
    we don''t have support for uploading images into our system. We''re going to avoid
    this topic in this book for the sake of time, but also for our users'' benefit.
    There is a decent amount of friction in getting users to upload a new profile
    image each time they join a service. Instead, there is a service that can make
    our lives a bit easier: **Gravatar** ([http://www.gravatar.com](http://www.gravatar.com)).
    Gravatar is a web service that allows users to upload a profile image to one single
    location. From there, other applications can grab the profile image, using the
    user''s e-mail address as the identifier of the image.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们的个人资料看起来有点无聊，只有一堆文本，因为我们没有支持将图像上传到我们的系统中。出于时间考虑，我们将在本书中避免这个话题，也是为了我们用户的利益。让用户每次加入服务时都上传新的个人资料图像存在相当大的摩擦。相反，有一个服务可以让我们的生活变得更轻松：**Gravatar**（[http://www.gravatar.com](http://www.gravatar.com)）。Gravatar是一个网络服务，允许用户将个人资料图像上传到一个单一位置。从那里，其他应用程序可以使用用户的电子邮件地址作为图像的标识符来获取个人资料图像。
- en: Time for action — adding Gravatars to our application
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-向我们的应用程序添加Gravatars
- en: Adding support for Gravatars through our user class is as easy as adding a few
    lines of code. After that, we'll add the `gravatar` function all over our application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们的用户类添加对Gravatars的支持就像添加几行代码一样简单。之后，我们将在我们的应用程序中添加`gravatar`函数。
- en: Open `user/profile.php` and a `public` function called `gravatar` that accepts
    a parameter called size; we'll give it a default value of `50`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`user/profile.php`，并添加一个名为`gravatar`的`public`函数，它接受一个名为size的参数；我们将给它一个默认值`50`。
- en: '[PRE24]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In order to get the users' Gravatar, we just need to create an `md5` hash of
    a user's e-mail address, which will serve as the `gravatar_id`. We'll then set
    the size using our `$size` variable, and append all of that to Gravatar's web
    service URL.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了获取用户的Gravatar，我们只需要创建用户电子邮件地址的`md5`哈希，这将作为`gravatar_id`。然后，我们使用我们的`$size`变量设置大小，并将所有这些附加到Gravatar的网络服务URL。
- en: '[PRE25]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That's it! We now have Gravatar support in our application. We just need to
    start adding it anywhere we want to see a profile image. Let's start by adding
    a large Gravatar into the **User Information** section at the top of the `views/user/profile.php`
    file.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样！我们现在在我们的应用程序中有了Gravatar支持。我们只需要在任何我们想要看到个人资料图片的地方开始添加它。让我们首先在`views/user/profile.php`文件的**用户信息**部分顶部添加一个大的Gravatar。
- en: '[PRE26]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Next, let's update the listing of posts in the `views/user/_posts.php` file,
    so we can nicely display our Gravatars.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们更新`views/user/_posts.php`文件中的帖子列表，这样我们就可以很好地显示我们的Gravatars。
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: What just happened?
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We added a function into our `User` class called `gravatar` that accepts a parameter
    of `$size` with a default value of 50\. From there, we made an `md5` hash of the
    object's e-mail address and `$size` and tacked it on to the end of Gravatar's
    web service. The result is a link to a nice and easy to display Gravatar image.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的`User`类中添加了一个名为`gravatar`的函数，它接受一个名为`$size`的参数，默认值为50。从那里，我们对对象的电子邮件地址和`$size`进行了`md5`哈希，并将其附加到Gravatar的网络服务的末尾。结果是一个链接到一个漂亮且易于显示的Gravatar图像。
- en: With our Gravatar system in place, we added it into our `views/user/profile.php`
    and `views/user/_posts.php` pages.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的Gravatar系统，我们将它添加到了`views/user/profile.php`和`views/user/_posts.php`页面中。
- en: Testing our Gravatars
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试我们的Gravatars
- en: Our Gravatars should be up and running on our profile page. If the user does
    not have an image tied to their e-mail address, a simple holding image will be
    shown.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Gravatars应该在我们的个人资料页面上运行。如果用户的电子邮件地址没有关联的图像，将显示一个简单的占位图像。
- en: Go to `http://localhost/user/johndoe`, and you will see Gravatar's placeholder
    on each post and in the **User Information** section.![Testing our Gravatars](graphics/3586_09_025.jpg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost/user/johndoe`，你会在每篇帖子和**用户信息**部分看到Gravatar的占位符。![测试我们的Gravatars](graphics/3586_09_025.jpg)
- en: Now, let's associate a Gravatar with your e-mail by going to [http://www. gravatar.com](http://www.%20gravatar.com)
    and clicking on **Sign up.**![Testing our Gravatars](graphics/3586_09_030.jpg)
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过访问[http://www.gravatar.com](http://www.%20gravatar.com)并点击**注册**来将Gravatar与你的电子邮件关联起来。![测试我们的Gravatars](graphics/3586_09_030.jpg)
- en: Type in your e-mail, and click on **Signup**. You'll receive a verification
    e-mail to your address, so go check it and click on the activation link.![Testing
    our Gravatars](graphics/3586_09_035.jpg)
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的电子邮件，然后点击**注册**。你将收到一封验证邮件到你的地址，所以去检查一下，然后点击激活链接。![测试我们的Gravatars](graphics/3586_09_035.jpg)
- en: Next, you will be taken to a page that shows your current account and images
    tied to your account. You will not have anything tied to your account yet, so
    click on **Add one by clicking here!.**![Testing our Gravatars](graphics/3586_09_040.jpg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将被带到一个页面，显示你当前的账户和与你的账户关联的图像。你还没有任何与你的账户关联的东西，所以点击**点击这里添加一个！**![测试我们的Gravatars](graphics/3586_09_040.jpg)
- en: After you have uploaded the image to the account and added any e-mail addresses
    you want to use, you can go back to the profile associated with your e-mail address
    (for me it's `http://localhost/user/tim`), and you will see a Gravatar in place!![Testing
    our Gravatars](graphics/3586_09_045.jpg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你上传了图像到账户并添加了你想要使用的任何电子邮件地址之后，你可以回到与你的电子邮件地址关联的个人资料（对我来说是`http://localhost/user/tim`），你将看到一个Gravatar！![测试我们的Gravatars](graphics/3586_09_045.jpg)
- en: Adding everything to Git
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容添加到Git
- en: I hope that in the course of this chapter, you've been committing your code
    to Git; if you haven't, this is your reminder. Make sure to do it early and often!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望在本章的过程中，你已经将你的代码提交到了Git；如果你还没有，这是提醒你。确保及早并经常这样做！
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope you enjoyed this chapter! While none of these features were "mission-critical"
    features for our application to work, these are the kinds of features that your
    users will request as your application grows.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这一章！虽然这些功能对我们的应用程序的工作并不是“使命关键”的功能，但随着应用程序的发展，这些是用户会要求的功能。
- en: Specifically, we learned how to install jQuery and use it to aid in the creation
    of some basic JavaScript and we used it to make the deletion of posts and pagination
    a bit cleaner. Next, we added Gravatar images to the profile and list of posts
    to make our profiles much more interesting to look at.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们学会了如何安装jQuery并使用它来帮助创建一些基本的JavaScript，并用它来使帖子的删除和分页更加清晰。接下来，我们添加了Gravatar图像到个人资料和帖子列表中，使我们的个人资料更加有趣。
- en: That's it! Our application is ready for prime time. In the next chapter, we're
    going to secure the final pieces of our application and deploy everything so that
    the world can see what you've built.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们的应用程序已经准备好投入使用。在下一章中，我们将保护应用程序的最后部分并部署所有内容，这样世界就可以看到你所建立的东西。
