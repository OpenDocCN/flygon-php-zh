- en: Chapter 9. Using Security and Sessions Effectively
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。有效使用安全和会话
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Encrypting and decrypting data
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密和解密数据
- en: Hashing passwords and other data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希密码和其他数据
- en: Using CSRF tokens and filters in forms
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单中使用CSRF令牌和过滤器
- en: Using advanced validation in forms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单中使用高级验证
- en: Building a shopping cart
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建购物车
- en: Using Redis to save sessions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Redis保存会话
- en: Using basic sessions and cookies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本会话和cookies
- en: Creating a secure API server
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建安全的API服务器
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Security is one of the most important things we need to consider when building
    web applications, especially if we're dealing with sensitive user information.
    Laravel provides many ways for us to keep our application secure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安全是我们在构建Web应用程序时需要考虑的最重要的事情之一，特别是如果我们处理敏感的用户信息。Laravel为我们提供了许多方法来保护我们的应用程序安全。
- en: In this chapter, we'll look at various ways to mask sensitive data, how to secure
    our forms from cross-site attacks, and how to secure an API. We'll also see how
    we can use sessions for building a shopping cart and using Redis to store session
    data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看掩盖敏感数据的各种方法，如何保护我们的表单免受跨站点攻击，以及如何保护API。我们还将看到如何使用会话来构建购物车，并使用Redis存储会话数据。
- en: Encrypting and decrypting data
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密和解密数据
- en: When writing applications that deal with sensitive data, we may often want to
    encrypt any data that we store in our database. Laravel provides us with a solution
    to do just that.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写处理敏感数据的应用程序时，我们经常希望加密我们存储在数据库中的任何数据。Laravel为我们提供了解决这个问题的解决方案。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard installation of Laravel, as well as a properly
    set-up and configured MySQL database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个标准的Laravel安装，以及一个正确设置和配置的MySQL数据库。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This is how we''ll complete the recipe using the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将使用以下步骤完成该配方的方法：
- en: In the `app/config` directory, open the `app.php` file and make sure the `key`
    is empty
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中，打开`app.php`文件，并确保`key`为空
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the command line, go to the root of the application and generate a new key
    using the following command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，转到应用程序的根目录，并使用以下命令生成一个新的密钥：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a table in the database to hold our sensitive information using this
    following command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在数据库中创建一个表来保存我们的敏感信息：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In our `app/models` directory, create a file named as `Account.php` by entering
    the following code:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/models`目录中，通过输入以下代码创建一个名为`Account.php`的文件：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In our `routes.php` file, create the routes to view and submit information
    by adding the following code:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，通过添加以下代码创建查看和提交信息的路由：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In our `views` directory, create a file named as `accounts.php`
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`views`目录中，创建一个名为`accounts.php`的文件
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We begin by removing the default key that comes with Laravel. Then, we use the
    `artisan` command to generate a new key for us and it's automatically saved in
    the correct file. The `artisan` command creates a fairly strong key, so we don't
    have to worry about coming up with one on our own.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先移除Laravel默认的密钥。然后，我们使用`artisan`命令为我们生成一个新的密钥，并且它会自动保存在正确的文件中。`artisan`命令创建了一个相当强大的密钥，所以我们不必担心自己想出一个密钥。
- en: After you have created a key for an application, make sure it doesn't get changed,
    as that will break your application if you've already used some encryption.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在为应用程序创建密钥之后，请确保不要更改它，因为如果您已经使用了一些加密，那么更改密钥将会破坏您的应用程序。
- en: Then we set up a database table that will hold our sensitive data. In this example,
    we'll be storing business names along with some of their financial data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们设置一个数据库表，用来保存我们的敏感数据。在这个例子中，我们将存储企业名称以及一些财务数据。
- en: Our next step is to set up our model, using the `Eloquent` model. To make things
    a little easier, we'll use the getters and setters in the model, so that whenever
    a value is set in our `Account` model, it will automatically get encrypted using
    the Laravel `Crypt::encrypt` class. Also, to get the information back out of the
    database, our model will automatically decrypt it for us.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是设置我们的模型，使用`Eloquent`模型。为了让事情变得更容易一些，我们将在模型中使用getter和setter，这样每当在我们的`Account`模型中设置一个值时，它都会自动使用Laravel的`Crypt::encrypt`类进行加密。此外，为了从数据库中获取信息，我们的模型将自动为我们解密它。
- en: Next, we create a couple of routes. The first route will show a form to add
    in information, as well as display anything already saved in the database. The
    next route simply takes the form input and saves it to a new row in our accounts
    table. After adding the information, we'll be redirected back to the account list
    and form page and the new data will be displayed at the bottom of the page.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了一些路由。第一个路由将显示一个表单来添加信息，并显示数据库中已经保存的任何内容。下一个路由只是获取表单输入，并将其保存到我们的账户表中的新行中。添加信息后，我们将被重定向回账户列表和表单页面，并且新数据将显示在页面底部。
- en: However, if we look at the database itself, the information we're storing is
    unreadable text. This way, if someone happens to hack into our database, they
    won't get much information.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们查看数据库本身，我们存储的信息是不可读的文本。这样，如果有人成功入侵我们的数据库，他们也得不到太多信息。
- en: Hashing passwords and other data
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希密码和其他数据
- en: It's common practice to hash a user's password when we store it in a database.
    This helps prevent anyone who gets unauthorized access to the database from seeing
    people's passwords. However, we may also want to hide our user's e-mail address
    or other information, so no one will be able to access them as well. We can use
    Laravel's **Hash** to do this easily.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将用户的密码存储在数据库中时，对密码进行哈希处理是常见的做法。这有助于防止任何未经授权访问数据库的人看到用户的密码。然而，我们可能还希望隐藏用户的电子邮件地址或其他信息，以便没有人能够访问它们。我们可以使用Laravel的**Hash**来轻松实现这一点。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard installation of Laravel, as well as a properly
    set-up and configured MySQL database.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个标准的Laravel安装，以及一个正确设置和配置的MySQL数据库。
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: Here are the steps for this recipe…
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此配方的步骤…
- en: 'Set up the database table by using the following commands:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令设置数据库表：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `views` directory, create a file named as `register.php` with the help
    of the following code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，使用以下代码创建一个名为`register.php`的文件：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In our `routes.php` file, create our routes by adding the following code:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，通过添加以下代码创建我们的路由：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To start this recipe, we first set up a basic users table to hold a username,
    e-mail address, and password. In this example, the username is the only thing
    that will need to be in regular text.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个示例，我们首先设置一个基本的用户表，用于保存用户名、电子邮件地址和密码。在这个示例中，用户名是唯一需要以常规文本形式存在的内容。
- en: In our view, we'll create two forms—one for registering, and one for logging
    in. Just to show the raw data from the database, we'll also display a list of
    all the users, as well as the way their e-mail and password will look in the table.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的视图中，我们将创建两个表单——一个用于注册，一个用于登录。为了显示来自数据库的原始数据，我们还将显示所有用户的列表，以及他们的电子邮件和密码在表中的样子。
- en: When we submit the registration form, the information is posted to our register
    route and put into an array. For the e-mail and password, we use Laravel's `Hash::make()`
    function to hash it. We then insert the array into our register table and redirect
    back to the form and list page.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们提交注册表单时，信息将被发布到我们的注册路由并放入一个数组中。对于电子邮件和密码，我们使用Laravel的`Hash::make()`函数进行哈希处理。然后，我们将数组插入到我们的注册表中，并重定向回表单和列表页面。
- en: After redirecting, we'll see the new row added, our e-mail and password hashed,
    and an unrecognizable string. Interestingly, with the way hashing works, we could
    add two rows using the exact same data, and the hashes would be totally different.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 重定向后，我们将看到新添加的行，我们的电子邮件和密码已经被哈希处理，并且是一个无法识别的字符串。有趣的是，通过哈希处理的方式，我们可以使用完全相同的数据添加两行，哈希值将完全不同。
- en: Next, we can try to log in using the username, e-mail, and password. That route
    will grab a row from our table that corresponds with the username, then run Laravel's
    `Hash::check()` function on the input values and the database results. If it passes,
    it returns `TRUE` and we can proceed to our application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以尝试使用用户名、电子邮件和密码登录。该路由将从与用户名对应的表中抓取一行，然后对输入值和数据库结果运行Laravel的`Hash::check()`函数。如果通过，它将返回`TRUE`，我们可以继续进行应用程序。
- en: There's more...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To use this recipe in a production environment, we'd need some validation on
    the input. We might also want to utilize the **Eloquent ORM** to make hashing
    a little easier.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要在生产环境中使用此示例，我们需要对输入进行一些验证。我们可能还希望利用**Eloquent ORM**来使哈希处理变得更容易一些。
- en: 'If we don''t need to hide our users'' emails, we could also use Laravel''s
    built in `Auth::attempt()` method. More information about that can be found on
    the Laravel website: [http://laravel.com/docs/security#authenticating-users](http://laravel.com/docs/security#authenticating-users)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不需要隐藏用户的电子邮件，我们也可以使用Laravel内置的`Auth::attempt()`方法。关于此方法的更多信息可以在Laravel网站上找到：[http://laravel.com/docs/security#authenticating-users](http://laravel.com/docs/security#authenticating-users)
- en: Using CSRF tokens and filters in forms
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表单中使用CSRF令牌和过滤器
- en: Web forms are notorious for hackers trying to access a website or user's information.
    To make our forms a little more secure, we can use a **Cross-Site Request Forgery**
    (**CSRF**) strategy that's built into Laravel. This will stop form submissions
    from outside the user's session.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 网络表单以黑客试图访问网站或用户信息而臭名昭著。为了使我们的表单更安全，我们可以使用内置在Laravel中的**跨站请求伪造**（**CSRF**）策略。这将阻止来自用户会话外部的表单提交。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard installation of Laravel.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to complete this recipe:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完成此示例的步骤：
- en: 'In the `routes.php` file, create routes to hold and process the form by the
    code given below:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，通过以下代码创建用于保存和处理表单的路由：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `filters.php` file, make sure the `filter` for the `csrf` token is present
    as given in the following code:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`filters.php`文件中，确保`csrf`令牌的`filter`存在，如下所示：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In our `views` directory, create a file named as `cross-site.php`, and add
    two forms for testing as given in the following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`views`目录中，创建一个名为`cross-site.php`的文件，并按以下代码添加两个测试表单：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the browser, go to `http://{your-server}/cross-site` (where `{your-server}`
    is the name of the server we're working on), and then submit each form to see
    the results.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到`http://{your-server}/cross-site`（其中`{your-server}`是我们正在使用的服务器的名称），然后提交每个表单以查看结果。
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our first step is to create the route for our CSRF form. In the form, all we
    need to do is add the `Form::token()` function; this will insert a hidden field
    with the name `_token`, and the value of our user session ID. For the route where
    the form is submitted, we add the `csrf` before filter to our route. If the request
    is determined to be forged, the page will return with a server error.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是为我们的CSRF表单创建路由。在表单中，我们只需要添加`Form::token()`函数；这将插入一个隐藏字段，名称为`_token`，值为用户会话ID。对于提交表单的路由，我们在路由中添加`csrf`前过滤器。如果请求被确定为伪造，页面将返回服务器错误。
- en: Our next form is an example of what would happen if a request was trying to
    be forged. For this form, instead of the `Form::token()` function, we manually
    add the hidden field and add some random value. Then when we submit the form,
    the page will display a fail message with a `TokenMismatchException` error.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个表单是一个示例，展示了如果请求试图被伪造会发生什么。对于这个表单，我们手动添加隐藏字段并添加一些随机值，而不是使用`Form::token()`函数。然后当我们提交表单时，页面将显示一个失败消息，并显示`TokenMismatchException`错误。
- en: There's more...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Laravel will also generate a `csrf` token automatically when you use the `Form::open()`
    function, so you don't need to add it manually.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`Form::open()`函数时，Laravel还会自动生成一个`csrf`令牌，因此您不需要手动添加它。
- en: Using advanced validation in forms
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表单中使用高级验证
- en: There might be times when we need to validate our forms for something that's
    not part of the framework. This recipe will show you how to build a custom validation
    rule and apply it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要验证表单中不属于框架的内容。这个配方将向您展示如何构建自定义验证规则并应用它。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard installation of Laravel.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to complete this recipe:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完成这个配方的步骤：
- en: 'In the `views` directory, create a file named `valid.php` to hold our form
    using the following code:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`valid.php`的文件，使用以下代码来保存我们的表单：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `routes.php` file, create our routes with the following code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，使用以下代码创建我们的路由：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Also in the `routes.php` file, create our custom validation as given in the
    following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在`routes.php`文件中，按照以下代码创建我们的自定义验证：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To begin, we create the form in our view. We ask for a valid e-mail and exactly
    three of the checkboxes to be checked. Since there's no Laravel validation method
    for exactly three checkboxes, we need to create a custom validation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在视图中创建表单。我们要求一个有效的电子邮件和确切地三个复选框被选中。由于没有确切地三个复选框的Laravel验证方法，我们需要创建一个自定义验证。
- en: Our custom validation takes the input array and does a simple count. If it comes
    up to three, it returns `TRUE`. If not, it returns `FALSE` and fails the validation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的自定义验证接受输入数组并进行简单计数。如果计数达到三个，它返回`TRUE`。如果不是，则返回`FALSE`并且验证失败。
- en: Back in our form processing route, all we then need to do is add the name of
    the custom validator we created to our validation rules. If we want to set a custom
    message, we can add that as well.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的表单处理路由，我们只需要将我们创建的自定义验证器的名称添加到我们的验证规则中。如果我们想设置自定义消息，也可以添加。
- en: There's more...
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The additional validators for this recipe are in the `routes.php` file for simplicity.
    If we were to have multiple custom validators, it might be a better idea to put
    them in their own validator files. To do this, we should create a file named `validator.php`
    in our `app` directory and add in any code we want. Then, open up the `global.php`
    file in the `app/start` directory and, at the very end of the file, add the `require
    app_path().'/validator.php'` function. This will load all of our validators automatically.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方的额外验证器在`routes.php`文件中，为了简单起见。如果我们有多个自定义验证器，将它们放在自己的验证器文件中可能是一个更好的主意。为此，我们应该在`app`目录中创建一个名为`validator.php`的文件，并添加任何我们想要的代码。然后，打开`app/start`目录中的`global.php`文件，在文件的最后添加`require
    app_path().'/validator.php'`函数。这将自动加载所有的验证器。
- en: Building a shopping cart
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个购物车
- en: E-commerce is a huge business on the web. An integral part of most e-commerce
    sites is the use of a shopping cart system. This recipe will walk through how
    to use Laravel sessions to store items for sales and build a shopping cart.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 电子商务在网络上是一个巨大的业务。大多数电子商务网站的一个重要部分是使用购物车系统。这个配方将介绍如何使用Laravel会话来存储销售商品并构建购物车。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard installation of Laravel, as well as a properly
    set up and configured MySQL database.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个标准的Laravel安装，以及一个正确设置和配置的MySQL数据库。
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these given steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，按照以下给定的步骤进行操作：
- en: 'In our database, create a table and add some data with this SQL code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的数据库中，使用以下SQL代码创建一个表并添加一些数据：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `routes.php` file, create the routes for our cart with the following
    code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，使用以下代码为我们的购物车创建路由：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `views` directory, create a file named `items.php` with the following
    code:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，使用以下代码创建一个名为`items.php`的文件：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `views` directory, create a file named `item-detail.php` by the given
    code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，按照给定的代码创建一个名为`item-detail.php`的文件：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the `views` directory, create a file named `cart.php` with the following
    code:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`cart.php`的文件，使用以下代码：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, we can go in our browser to `http://{your-server}/items` to view the list
    of items from our database, links to their detail pages, and an option to add
    them to a cart. When added to the cart, they will show at the bottom of the page.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在浏览器中输入`http://{your-server}/items`来查看来自我们数据库的项目列表，链接到它们的详细页面，并有一个选项将它们添加到购物车。添加到购物车后，它们将显示在页面底部。
- en: How it works...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To begin this recipe, we need to set up a database table that will hold items
    that we want to add to the cart. We'll also add in a few test items, so we have
    some data to work with.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个配方，我们需要设置一个将保存我们想要添加到购物车的项目的数据库表。我们还将添加一些测试项目，这样我们就有一些数据可以使用。
- en: In our first route, we get all of the existing items in our table and display
    them. We're also nesting in a cart view that will show the items we already added.
    In that nested view, we also send in our cart session, so the list can populate.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个路由中，我们获取表中所有现有的项目并显示它们。我们还嵌套了一个购物车视图，将显示我们已经添加的项目。在嵌套视图中，我们还发送我们的购物车会话，以便列表可以填充。
- en: Our next route does something similar but it accepts only one item and displays
    the full information.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个路由做了类似的事情，但它只接受一个项目并显示完整信息。
- en: The next route actually adds the items. First, we get the item from the database
    based on its ID. Then we save the existing cart session to a variable, so we can
    manipulate it. We add the item to the array, using php's `uniqid()` function as
    our key. Then we put the `cart` array back into the `Session` and redirect it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个路由实际上添加了项目。首先，我们根据其ID从数据库中获取项目。然后我们将现有的购物车会话保存到一个变量中，以便我们可以操作它。我们使用php的`uniqid()`函数作为键将项目添加到数组中。然后我们将`cart`数组放回`Session`并将其重定向。
- en: If we want to remove an item, we first make a way to get the item's ID and remove
    it from the `cart` array. The other way is to just delete all the session and
    start over.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要删除一个项目，首先我们要找到获取项目的ID并从`cart`数组中删除它。另一种方法是只删除所有会话并重新开始。
- en: In our view, we'll also notice that we are only allowing the `cart` list to
    show if there actually is anything in the cart.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的视图中，我们还会注意到，只有在购物车中实际有东西的情况下，才允许显示`cart`列表。
- en: There's more...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe can easily be extended to be more full-featured. For example, instead
    of adding a new record if we click on the same item multiple times, we could store
    a total number along with each item. That way, we could add a form field asking
    for the quantity next to the item.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方可以很容易地扩展为更全面的功能。例如，如果我们多次点击同一项，可以存储每个项目的总数，而不是添加新记录。这样，我们可以在项目旁边添加一个要求数量的表单字段。
- en: Using Redis to save sessions
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Redis保存会话
- en: Redis is a popular key/value data store and is quite fast. Laravel includes
    Redis support, and makes it easy to interact with the Redis data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Redis是一种流行的键/值数据存储，速度相当快。Laravel包括对Redis的支持，并且可以轻松地与Redis数据交互。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need to have a Redis server properly configured and running.
    More information on that can be found at [http://redis.io/](http://redis.io/).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个正确配置和运行的Redis服务器。关于这方面的更多信息可以在[http://redis.io/](http://redis.io/)找到。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to complete this recipe:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成这个配方：
- en: 'In our `routes.php` file, create the routes as given in the following code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，按照以下代码创建路由：
- en: '[PRE20]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `views` directory, create a file named `redis-login.php` with the following
    code:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`redis-login.php`的文件，其中包含以下代码：
- en: '[PRE21]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, we can open our browser and go to `http://{your-server}/redis-login` and
    fill in the form. After submitting, we will display the information from Redis.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以打开浏览器，转到`http://{your-server}/redis-login`，并填写表单。提交后，我们将显示来自Redis的信息。
- en: How it works...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Our first step is to create a simple form that we will use to input data to
    Redis. In our `redis-login` route, we use a view that will ask for a name and
    e-mail address and, when submitted, will post to the `redis-login` route.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是创建一个简单的表单，用于将数据输入到Redis中。在我们的`redis-login`路由中，我们使用一个视图，该视图将要求输入姓名和电子邮件地址，并在提交时将发布到`redis-login`路由。
- en: After posting, we create a new Redis instance using the `Redis::connection()`
    function, which will use the default settings found in our `app/config/database.php`
    file. To store the information in Redis, we're using a hash and setting the data
    using the `hset()` function. Our Redis instance can use any command that Redis
    accepts, so we could easily choose between functions such as `set()` or `sadd()`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 发布后，我们使用`Redis::connection()`函数创建一个新的Redis实例，该函数将使用我们的`app/config/database.php`文件中找到的默认设置。为了将信息存储在Redis中，我们使用一个哈希并使用`hset()`函数设置数据。我们的Redis实例可以使用Redis接受的任何命令，因此我们可以很容易地在`set()`或`sadd()`等函数之间进行选择。
- en: Once the data is in Redis, we redirect to a route that will display the data.
    For that, we just need to call the `hget()` function with the key and the field
    we added.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据在Redis中，我们重定向到一个将显示数据的路由。为此，我们只需要使用键和我们添加的字段调用`hget()`函数。
- en: Using basic sessions and cookies
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基本会话和cookie
- en: There will be times when we want to pass data from one page of our app to another
    page without needing to store the information in a database. To accomplish this,
    we can use the various `Session` and `Cookie` methods that Laravel provides us.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们希望在应用程序的一个页面和另一个页面之间传递数据，而不需要将信息存储在数据库中。为了实现这一点，我们可以使用Laravel提供的各种`Session`和`Cookie`方法。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个标准的Laravel安装。
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this recipe, follow the given steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，按照给定的步骤：
- en: 'In the `views` folder, create a file named `session-one.php` with the following
    code:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`文件夹中，创建一个名为`session-one.php`的文件，其中包含以下代码：
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `routes.php` file, create our routes as given in the following code:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，按照以下代码创建我们的路由：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To begin, we create a simple form that we will use to submit information to
    the sessions and cookies. After posting the values, we take the `email` field
    and add it to a regular session. The `name` field will be added to a flash session
    and the `city` will be added to a cookie. Also, we'll set the cookie to expire
    after 30 minutes. Once they're all set, we redirect to our second page, and make
    sure we pass the cookie to the return value.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个简单的表单，用于提交信息到会话和cookie。在提交值之后，我们取`email`字段并将其添加到常规会话中。`name`字段将被添加到闪存会话中，`city`将被添加到cookie中。此外，我们将设置cookie在30分钟后过期。一旦它们都设置好了，我们重定向到我们的第二个页面，并确保将cookie传递给返回值。
- en: Our second page simply takes the values we set and displays them to verify that
    they were set correctly. At this point, once the request is complete, our flash
    session, the name, should no longer be available.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个页面只是获取我们设置的值，并显示它们以验证它们是否被正确设置。此时，一旦请求完成，我们的闪存会话，即名称，应该不再可用。
- en: When we click on through to our third page, we add in some checks to make sure
    the sessions and cookies still exist, using the `has()` method on both. Our `email`
    and `city` should still display, but the `name` session should not. We then remove
    the `email` session using the `forget()` method. When we reload the page, we'll
    notice that the only thing that is still displayed is the `city` cookie.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击到第三个页面时，我们添加了一些检查，以确保会话和cookie仍然存在，使用`has()`方法。我们的`email`和`city`应该仍然显示，但`name`会话不应该。然后我们使用`forget()`方法删除`email`会话。当我们重新加载页面时，我们会注意到唯一仍然显示的是`city`
    cookie。
- en: There's more...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Flash data is only available on the next request we make, and then it is removed.
    However, if we'd like to keep our flash data, we can use the `Session::reflash()`
    command and it will send the data to our next request as well. If we have multiple
    flash data, we can also choose specific sessions to keep for the next request
    using the `Session::keep(array('your-session-key', 'your-other-session'))` function.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 闪存数据仅在我们进行的下一个请求中可用，然后被删除。但是，如果我们想保留我们的闪存数据，我们可以使用`Session::reflash()`命令，它也会将数据发送到我们的下一个请求。如果我们有多个闪存数据，我们还可以使用`Session::keep(array('your-session-key',
    'your-other-session'))`函数选择保留特定会话以供下一个请求使用。
- en: Creating a secure API server
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建安全的API服务器
- en: In this recipe, we'll create a simple API to display some information from our
    database. To control who has access to the data, we allow users to create keys
    and use that key in their API request.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将创建一个简单的API来显示来自我们数据库的一些信息。为了控制谁可以访问数据，我们允许用户创建密钥并在其API请求中使用该密钥。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard installation of Laravel and a configured
    MySQL database.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们需要一个标准的Laravel安装和一个配置好的MySQL数据库。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To complete this recipe, we''ll follow these given steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个食谱，我们将按照以下给定的步骤进行：
- en: 'In our database, create a table to hold the API keys as given in the following
    code:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的数据库中，创建一个表来保存API密钥，如下面的代码所示：
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the database, create a table for some example data to access as shown in
    the following code:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库中，创建一个表以访问一些示例数据，如下面的代码所示：
- en: '[PRE25]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the `models` directory, create a file named as `Api.php`
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`models`目录中，创建一个名为`Api.php`的文件
- en: '[PRE26]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the `models` directory, create a file named as `Show.php`
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`models`目录中，创建一个名为`Show.php`的文件
- en: '[PRE27]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the `views` directory, create a file named `api-key.php`
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`api-key.php`的文件
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the `routes.php` file, create the routes to allow for the `api-key` registration
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，创建路由以允许`api-key`注册
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `routes.php`, create the routes for accessing the `api` by the following
    code:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，通过以下代码创建访问`api`的路由：
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: To test it out, in the browser, go to `http://{your-server}/api-key` (where
    `{your-server}` is the name of the development server) and fill in the form. On
    the next page, copy the key that was generated. Then, go to `http://{your-server}/api/{your-copied-key}/shows`
    and a list of shows should appear in the `json` format.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试它，在浏览器中，转到`http://{your-server}/api-key`（其中`{your-server}`是开发服务器的名称），并填写表单。在下一页中，复制生成的密钥。然后，转到`http://{your-server}/api/{your-copied-key}/shows`，应该以`json`格式显示节目列表。
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We begin by setting up our tables and models. Our API table will be used to
    check for the key and the `show` table will be the test data we will use the key
    to access.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先设置我们的表和模型。我们的API表将用于检查密钥，`show`表将是我们将使用密钥访问的测试数据。
- en: Our next task is to create a way to generate keys for our application. In this
    example, we'll only take a name value. After submitting, we create a random, 16-character
    string that will be the user's key. We then save the information to the table
    and display the key to the user.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个任务是创建一种为我们的应用程序生成密钥的方法。在这个例子中，我们只会接受一个名称值。提交后，我们创建一个随机的16个字符的字符串，这将是用户的密钥。然后，我们将信息保存到表中，并将密钥显示给用户。
- en: To use this key, we create two routes to display the information. The first
    route uses the `{api_key}` wildcard in the URL, and passes that value to our function.
    We then query the database for that key and make sure the status is still active.
    This way, if we decide to revoke a user's key, we can set the status to false
    and they won't be able to use the API. If they don't exist or the status is false,
    we respond with the HTTP code of 401, to show that they aren't authorized. Otherwise,
    we return the Eloquent object that will allow us to display the records in the
    `json` format.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此密钥，我们创建两个路由来显示信息。第一个路由在URL中使用`{api_key}`通配符，并将该值传递给我们的函数。然后，我们查询该密钥的数据库，并确保状态仍然是活动的。这样，如果我们决定撤销用户的密钥，我们可以将状态设置为false，他们将无法使用API。如果它们不存在或状态为false，则以401的HTTP代码响应，以显示他们未经授权。否则，我们返回Eloquent对象，这将允许我们以`json`格式显示记录。
- en: Our second route will display the records of a single show. For that URL, we
    use the `{api_key}`wildcard for the key and the `{show_id}` wildcard for the ID
    of the show. We pass those to the functions, and then check the key as before.
    If the key is valid, we make sure a show with that ID exists, and use the Eloquent
    object again to display only the show with the given ID in the `json` format.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个路由将显示单个节目的记录。对于该URL，我们使用`{api_key}`通配符作为密钥，使用`{show_id}`通配符作为节目的ID。我们将这些传递给函数，然后像以前一样检查密钥。如果密钥有效，我们确保具有该ID的节目存在，并再次使用Eloquent对象以`json`格式仅显示具有给定ID的节目。
- en: There's more...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We also have the option of using a Laravel filter, if we'd rather have the api
    keys posted instead. To do that, we'd create a new filter in the `filters.php`
    file
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以选择使用Laravel过滤器，如果我们宁愿使用API密钥发布。为此，我们将在`filters.php`文件中创建一个新的过滤器
- en: '[PRE31]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And then, for our `shows` routes, we respond to a post request and add the
    `before` filter as shown in the following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于我们的`shows`路由，我们响应一个post请求，并添加`before`过滤器，如下面的代码所示：
- en: '[PRE32]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
