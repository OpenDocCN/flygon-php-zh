- en: Prominent OOP Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 突出的面向对象编程特性
- en: The term **object-oriented** (**OO**) has been around since the 70s, when it
    was coined by computer scientist, Alan Kay. The term stood for a programming paradigm
    based on the concept of objects. At that time, Simula was the first language to
    exhibit OO features, such as objects, classes, inheritance, subtyping, and so
    on. Standardized as Simula 67 in 1977, it became an inspiration for later languages.
    One such inspired language is Smalltalk, created as a product of research led
    by Alan Kay at Xerox. Compared to Simula, Smalltalk greatly improved the overall
    OO concept. Over time, Smalltalk became one of the most influential OO programming
    language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “面向对象”（OO）这个术语自70年代以来就存在，当时由计算机科学家Alan Kay创造。该术语代表了基于对象概念的编程范式。当时，Simula是第一种展示面向对象特性的语言，如对象、类、继承、子类型等。1977年标准化为Simula
    67后，它成为后来语言的灵感来源。其中一种受到启发的语言是Smalltalk，由Xerox的Alan Kay领导的研究团队创建。与Simula相比，Smalltalk极大地改进了整体的面向对象概念。随着时间的推移，Smalltalk成为了最有影响力的面向对象编程语言之一。
- en: While there is much more to be said about these early days, the takeaway is
    that OOP was born out of specific need. Where Simula used static objects for modeling
    real-world entities, Smalltalk used dynamic objects that could be created, changed,
    or deleted as the foundation for computation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些早期日子还有很多值得说的地方，但重点是面向对象编程是出于特定的需求而诞生的。Simula使用静态对象来对建模现实世界的实体，而Smalltalk使用动态对象作为计算的基础，可以创建、更改或删除。
- en: The MVC pattern, one of the most common object-oriented software design patterns, was
    introduced in Smalltalk.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: MVC模式，是最常见的面向对象软件设计模式之一，是在Smalltalk中引入的。
- en: The ease of mapping physical entities into objects described by classes certainly
    influenced the overall popularity of the OO paradigm among developers. However,
    objects are not just about mapped out instances of various properties, they are
    also about messages and responsibilities. While we may embrace OOP based on the
    first premise, we certainly start to appreciate the latter one, as the key to
    making big and scalable systems lies in the ease of object communication.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将物理实体映射为类描述的对象的便利性显然影响了开发人员对面向对象范式的整体流行度。然而，对象不仅仅是关于各种属性的映射实例，它们还涉及消息和责任。虽然我们可能基于第一个前提接受面向对象编程，但我们肯定开始欣赏后者，因为构建大型和可扩展系统的关键在于对象通信的便利性。
- en: 'The PHP language embodies several paradigms, most notably: imperative, functional,
    object oriented, procedural, and reflective. Whereas, the OOP support in PHP hasn''t
    fully kicked off until the PHP 5 release. The latest versions of PHP 7 brought
    forth some minor yet noteworthy improvements to what is now considered a stable
    and mature PHP OOP model.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: PHP语言包含多种范式，最为突出的是：命令式、函数式、面向对象、过程式和反射。然而，PHP中的面向对象支持直到PHP 5发布之前才完全启动。PHP 7的最新版本带来了一些微小但值得注意的改进，现在被认为是一个稳定和成熟的PHP面向对象模型。
- en: 'In this chapter, we will explore some prominent features of object-oriented
    PHP:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨PHP面向对象的一些突出特性：
- en: Object inheritance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象继承
- en: Objects and references
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象和引用
- en: Object iteration
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象迭代
- en: Object comparison
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象比较
- en: Traits
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特征
- en: Reflection
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射
- en: Object inheritance
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象继承
- en: The OOP paradigm places objects at the heart of application design, where objects
    can be looked at as units that contain various properties and methods. Interaction
    between these properties and methods defines the internal state of an object.
    Every object is built from a blueprint called a class. There is no such thing
    as an object without the class, at least not in a class-based OOP.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象范式将对象置于应用程序设计的核心，其中对象可以被视为包含各种属性和方法的单元。这些属性和方法之间的交互定义了对象的内部状态。每个对象都是从称为类的蓝图构建的。在基于类的面向对象编程中，没有类的对象，至少不是一个对象。
- en: We differentiate class-based OOP (PHP, Java, C#, ...) and prototype-based OOP
    (ECMAScript / JavaScript, Lua, ...). In class-based OOP, objects are created from
    classes; in prototype-based OOP, objects are created from other objects.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们区分基于类的面向对象编程（PHP、Java、C#，...）和基于原型的面向对象编程（ECMAScript / JavaScript、Lua，...）。在基于类的面向对象编程中，对象是从类创建的；在基于原型的面向对象编程中，对象是从其他对象创建的。
- en: 'The process of building or creating new objects is called **instantiation**.
    In PHP, like many other languages, we use the `new` keyword to instantiate an object
    from a given class. Let''s take a look at the following example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 构建或创建新对象的过程称为实例化。在PHP中，与许多其他语言一样，我们使用`new`关键字从给定的类实例化一个对象。让我们看看以下示例：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we are defining two simple classes, `JsonOutput` and `SerializedOutput`.
    We say simple merely because they have a single property and two methods. These
    two classes are nearly identical--they only differ in a single line of code within
    the `render()` method. One class converts the given content into JSON, while the
    other converts it to a serialized string. Right after our class declarations,
    we define a dummy $users array that we then feed to the instances of the `JsonOutput`
    and `SerializedOutput` classes, that is, the `$json` and `$ser` objects.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了两个简单的类，`JsonOutput`和`SerializedOutput`。我们之所以说简单，仅仅是因为它们有一个属性和两个方法。这两个类几乎是相同的——它们只在`render()`方法中的一行代码上有所不同。一个类将给定的内容转换为JSON，而另一个类将其转换为序列化字符串。在我们的类声明之后，我们定义了一个虚拟的$users数组，然后将其提供给`JsonOutput`和`SerializedOutput`类的实例，即`$json`和`$ser`对象。
- en: While this is far from an ideal class design, it serves as a nice introduction
    into inheritance.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这远非理想的类设计，但它作为继承的一个很好的介绍。
- en: allows classes and, therefore, objects to inherit properties and methods of
    another class. Terms such as *s*uperclass, base class, or parent class are used
    to flag the class used as a basis for inheritance. Terms such as subclass, derived
    class, or child class are used to flag the inheriting class.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 允许类和因此对象继承另一个类的属性和方法。术语如超类、基类或父类用于标记用作继承基础的类。术语如子类、派生类或子类用于标记继承类。
- en: 'The PHP `extends` keyword is used to enable inheritance. Inheritance has its
    limits. We can only extend from a single class at a time as PHP does not support multiple inheritance.
    However, having a chain of inheritance is perfectly valid:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的`extends`关键字用于启用继承。继承有其限制。我们一次只能从一个类扩展，因为PHP不支持多重继承。但是，具有继承链是完全有效的：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `C` class shown in the valid example will end up inheriting all the allowed
    properties and methods of classes `B` and `A`. When we say allowed, we refer to
    the property and method visibility, that is, access modifiers:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在有效示例中显示的`C`类最终将继承类`B`和`A`的所有允许的属性和方法。当我们说允许时，我们指的是属性和方法的可见性，即访问修饰符：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the object context, the access modifiers behave as per the preceding example, which
    is pretty much as we would expect them to. The object would exhibit the same behavior,
    whether it was an instance of class `A` or class `B`. Let''s observe the behavior
    of access modifiers on the inner workings of the child class:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象上下文中，访问修饰符的行为与前面的示例一样，这基本上是我们所期望的。无论它是类`A`的实例还是类`B`的实例，对象都会表现出相同的行为。让我们观察子类内部工作中访问修饰符的行为：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see that the `public` and `protected` members (property or method) can
    be accessed from child classes, whereas private members cannot--they are only
    accessible from the class that defines them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，`public`和`protected`成员（属性或方法）可以从子类中访问，而私有成员则不行——它们只能从定义它们的类中访问。
- en: 'The `extends` keyword is also applicable to interfaces:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`extends`关键字也适用于接口：'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Being able to inherit the class and interface properties and methods makes for
    a powerful overall object inheritance mechanism.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 能够继承类和接口的属性和方法构成了一个强大的整体对象继承机制。
- en: 'Knowing these simple inheritance rules, let''s see how we can rewrite our `JsonOutput`
    and the `SerializedOutput` classes into a more convenient form using inheritance:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些简单的继承规则，让我们看看如何使用继承将我们的`JsonOutput`和`SerializedOutput`类重写为更方便的形式：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We started off by defining an `Output` class with the content nearly identical
    to the previous `JsonOutput` and `SerializedOutput` classes, merely changing its
    `render()` method to simply return content as-is. We then rewrote the `JsonOutput`
    and `SerializedOutput` classes in such a way that they both extend the `Output`
    class. In this setup, an `Output` class becomes a parent class, whereas `JsonOutput`
    and `SerializedOutput` become child classes. The child classes redefine the `render()`
    method, thus overriding the parent class implementation. The `$this` keyword has
    access to all of the public and protected modifiers, which makes it easy to access
    the `$content` property.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义了一个`Output`类，其内容几乎与之前的`JsonOutput`和`SerializedOutput`类相同，只是将其`render()`方法更改为简单地返回内容。然后，我们以这样的方式重写了`JsonOutput`和`SerializedOutput`类，它们都扩展了`Output`类。在这种设置中，`Output`类成为父类，而`JsonOutput`和`SerializedOutput`成为子类。子类重新定义了`render()`方法，从而覆盖了父类的实现。`$this`关键字可以访问所有的公共和受保护的修饰符，这使得访问`$content`属性变得容易。
- en: While inheritance might be a quick and powerful way to structure our code into
    convenient chains of parent/child relationships, one should avoid the danger of
    misusing or overusing it. This can be especially tricky with larger systems where
    we might end up spending more time tackling a large class hierarchy than actually
    maintaining the sub-system interfaces. Therefore, we should use it carefully.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然继承可能是将代码结构化为方便的父/子关系链的快速而强大的方法，但应避免滥用或过度使用。在更大的系统中，这可能特别棘手，我们可能会花更多的时间来处理大型类层次结构，而不是实际维护子系统接口。因此，我们应该谨慎使用它。
- en: Objects and references
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象和引用
- en: 'There are two ways to pass arguments within the code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中有两种传递参数的方式：
- en: '**By reference**: This is where both the caller and callee use the same variable
    for argument.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按引用传递**：这是调用者和被调用者都使用相同的变量作为参数。'
- en: '**By value**: This is where both the caller and callee have their own copy
    of the variable for argument. If the callee decides to change the value of the
    passed argument, the caller would not notice it.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按值传递**：这是调用者和被调用者都有自己的变量副本作为参数。如果被调用者决定更改传递参数的值，调用者将不会注意到它。'
- en: 'by value is the default PHP behavior, as shown in the following example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 按值传递是默认的PHP行为，如下例所示：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Looking at the internals of the `hello()` method, we can see it is resetting
    the `$msg` argument value to another string value wrapped in HTML tags. The default
    PHP passed by the value behavior prevents this change to propagate outside the
    scope of a method. Using the `&` operator just before the argument name in the
    function definition, we can force the passed by reference behavior:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`hello()`方法的内部，我们可以看到它将`$msg`参数值重置为另一个字符串值，该值包含在HTML标记中。默认的PHP按值传递行为阻止了这种变化在方法范围之外传播。在函数定义中的参数名称之前使用`&`运算符，我们可以强制进行引用传递行为：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Being able to do something does not necessarily mean we should. The passing
    by reference behavior should be used with caution, only if there's a really good
    reason to do it. The preceding example clearly shows the side-effect of the internal
    `hello()` method to a simple scalar type value within the outside scope. Object
    instance methods, or even plain functions, should not have these types of side-effect
    to the outside scope.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 能够做某事并不一定意味着我们应该这样做。应谨慎使用引用传递行为，只有在真正有很好的理由时才应该这样做。前面的例子清楚地显示了内部`hello()`方法对外部范围内的简单标量类型值的副作用。对象实例方法，甚至纯函数，不应该对外部范围产生这种类型的副作用。
- en: Several PHP functions, such as `sort()`, use the `&` operator to force the pass
    by reference behavior on a given array argument.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一些PHP函数，如`sort()`，使用`&`运算符来强制对给定数组参数进行引用传递行为。
- en: 'With all being said, where do objects fit in? Objects in PHP lean towards the passed
    by reference behavior. When an object is passed as an argument, it is still being
    passed as a value, but the value being passed is not the object itself, it is
    the object identifier. Therefore, the act of passing the object as an argument
    feels more like it is being passed by reference:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，对象在哪里适用呢？PHP中的对象倾向于传递引用行为。当对象作为参数传递时，它仍然被传递为值，但被传递的值不是对象本身，而是对象标识符。因此，将对象作为参数传递的行为更像是通过引用传递：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since objects are bigger structures than scalar values, passing by reference
    greatly minimizes the memory and CPU footprint.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于对象比标量值更大，通过引用传递大大减少了内存和CPU占用。
- en: Object iteration
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象迭代
- en: The PHP arrays are the most frequent collection structure used in PHP. We can
    squeeze pretty much anything into an array, ranging from scalar values to objects.
    Iterating through elements of such a structure is trivially easy using the `foreach`
    statement. However, arrays are not the only iterable types, as objects themselves
    are iterable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: PHP数组是PHP中最常用的集合结构。我们几乎可以将任何东西都放入数组中，从标量值到对象。使用`foreach`语句轻松遍历这种结构的元素。然而，数组并不是唯一可迭代的类型，对象本身也是可迭代的。
- en: 'Let''s take a look at the following array-based example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下面的基于数组的例子：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now let''s take a look at the following object-based example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看下面的基于对象的例子：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Executed on the console, both of these examples would yield an identical output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台上执行这两个例子，将得到相同的输出：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By default, iteration works only with public properties, excluding any private or
    protected properties from the list.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，迭代仅适用于公共属性，不包括列表中的任何私有或受保护属性。
- en: PHP provides an `Iterator` interface, making it possible to specify what values
    we want to make available for iterating.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: PHP提供了一个`Iterator`接口，使我们能够指定要使其可迭代的值。
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following example demonstrates a simple `Iterator` interface implementation:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了一个简单的`Iterator`接口实现：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With this implementation, we are now seemingly able to iterate over the User
    class private and protected properties. Although, this is not really the case.
    What's happening is that, through the constructor, the class is filling the `$info` parameter
    with the data of all other properties we wish to iterate. The interface mandated
    methods then ensure that our class plays nicely with the `foreach` construct.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种实现，我们似乎现在能够迭代User类的私有和受保护属性。尽管如此，实际情况并非如此。发生的是，通过构造函数，类正在用我们希望迭代的所有其他属性的数据填充`$info`参数。然后，接口规定的方法确保我们的类与`foreach`结构良好地配合。
- en: Object iteration is a neat, though often overlooked, feature of PHP when it
    comes to everyday development.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对象迭代是PHP在日常开发中经常被忽视的一个很好的特性。
- en: Object comparison
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象比较
- en: 'The PHP language provides several comparison operators that allow us to compare two
    different values, resulting in either `true` or `false`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: PHP语言提供了几个比较运算符，允许我们比较两个不同的值，结果要么是`true`，要么是`false`：
- en: '`==`: equal'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`==`: 等于'
- en: '`===`: identical'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`===`: 相同'
- en: '`!=`: not equal'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!=`: 不等于'
- en: '`<>`: not equal'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<>`: 不等于'
- en: '`!==`: not identical'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`!==`: 不相同'
- en: '`<`: less than'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<`: 小于'
- en: '`>`: greater than'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>`: 大于'
- en: '`<=`: less than or equal to'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<=`: 小于或等于'
- en: '`>=`: greater than or equal to'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`>=`: 大于或等于'
- en: While all of these operators are equally important, let's take a closer look
    at the behavior of the equal (`==`) and identical (`===`) operators in the context
    of objects.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然所有这些运算符同样重要，让我们更仔细地看看在对象的上下文中相等（`==`）和相同（`===`）运算符的行为。
- en: 'Let''s take a look at the following example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下面的例子：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we have a simple `User` class with two properties set to some default
    values. We then have two different instances of the same class, `$user` and `$employee`. Given
    that both objects have the same properties, with the same values, the equal (`==`)
    operator returns `true`. The identical (`===`) operator, on the other hand, returns
    false. Even though objects are of the same class, and have the same properties
    and values in those properties, an identical operator sees them as different.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个简单的`User`类，其中有两个属性设置为一些默认值。然后我们有同一个类的两个不同实例，`$user`和`$employee`。鉴于这两个对象都具有相同的属性，并且具有相同的值，相等（`==`）运算符返回`true`。另一方面，相同（`===`）运算符返回false。尽管对象是同一个类的，且在这些属性中具有相同的属性和值，但相同运算符将它们视为不同。
- en: 'Let''s take a look at the following example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下面的例子：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The identical (`===`) operator considers two objects to be identical only if
    they refer to the same instance of the same class. The same operator behavior
    applies to the counterpart operators, that is, the not equal (`<>` or `!=`)  and
    not identical (`!==`) operators.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 相同（`===`）运算符只有当两个对象引用同一个类的同一个实例时才认为它们是相同的。相同的运算符行为也适用于对应的运算符，即不等（`<>`或`!=`）和不相同（`!==`）运算符。
- en: 'Aside from objects, the identical operator is applicable to any other type:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 除了对象，相同运算符也适用于任何其他类型：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Looking at the preceding example clearly reveals the importance of an identical
    operator. The  `2 == "2ABC"` expression evaluating to true is something that boggles the
    mind. We might even think of it as a bug in the PHP language itself. While relying
    on PHP automatic type conversion is mostly fine, there are times where unexpected
    bugs can squeeze in and disrupt our application logic. The use of the identical
    operator reaffirms the comparison, assuring that we consider not just the value
    but the type as well.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的例子中可以清楚地看出相同运算符的重要性。`2 == "2ABC"`表达式的计算结果为true，这让人感到困惑。我们甚至可能认为这是PHP语言本身的一个bug。虽然依赖PHP的自动类型转换大多数情况下都没问题，但有时会出现意外的bug，影响我们的应用逻辑。使用相同运算符可以重新确认比较，确保我们考虑的不仅是值，还有类型。
- en: Traits
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征
- en: We mentioned previously that PHP is a single inheritance language. We cannot
    use the `extends` keyword to extend multiple classes in PHP. This very feature
    is actually a rare commodity only a handful of programming languages support,
    such as C++. For better or worse, multiple inheritance allows some interesting
    tinkering with our code structures.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到PHP是一种单继承语言。在PHP中，我们不能使用`extends`关键字来扩展多个类。这个特性实际上是一种罕见的商品，只有少数编程语言支持，比如C++。无论好坏，多重继承允许我们对代码结构进行一些有趣的调整。
- en: 'The PHP Traits provide a mechanism by which we can achieve these structures,
    either in the context of code reuse or the grouping of functionality. The `trait` keyword
    is used to declare a Trait, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: PHP Traits提供了一种机制，通过它我们可以在代码重用或功能分组的上下文中实现这些结构。使用`trait`关键字声明Trait，如下所示：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The body of a Trait can be pretty much anything we would put in a class. While
    they resemble classes, we cannot instantiate a Trait itself. We can only use the
    Trait from another class. To do so, we employ the `use` keyword within the class
    body, as shown in the following example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Trait的主体可以是我们在类中放置的任何东西。虽然它们类似于类，但我们不能实例化Trait本身。我们只能从另一个类中使用Trait。为此，我们在类主体中使用`use`关键字，如下例所示：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To better understand how Traits can be helpful, let''s take a look at the following
    example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Trait如何有助于，让我们看看以下示例：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding example demonstrates the use of trait in a code reuse context,
    where two different shipping classes, `Ups` and `Dhl`, use the same trait. The
    trait itself wraps a nice little `formatPrice()` helper method that formats the
    given price to two decimal fields.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子演示了在代码重用上下文中使用trait的情况，其中两个不同的运输类`Ups`和`Dhl`使用相同的trait。trait本身包装了一个很好的`formatPrice()`辅助方法，用于将给定的价格格式化为两个小数位。
- en: 'Like classes, traits have access to `$this`, 1 which means we could easily rewrite
    the previous `formatPrice()` method of the `Formatter` trait as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 与类一样，traits可以访问`$this`，这意味着我们可以轻松地将`Formatter` trait的先前`formatPrice()`方法重写如下：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This, however, severely limits our trait use, as its `formatPrice()` method
    now expects a `$price` member, which some of the classes using the `Formatter`
    trait might not have.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这严重限制了我们对trait的使用，因为它的`formatPrice()`方法现在期望有一个`$price`成员，而一些使用`Formatter`
    trait的类可能没有。
- en: 'Let''s take a look at another example where we use traits in a grouping of
    functionality context:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子，在这个例子中，我们在功能分组的上下文中使用traits：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What we did here was nothing more than cut and paste our class code into two
    different traits. We grouped all of the methods related to possible order actions
    into a single `SalesOrderActions` trait, and all methods related to order customer
    into the `SalesOrderCustomer` trait. This brings us back to the possible-does-not-necessarily-mean-preferable
    philosophy.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的不过是将我们的类代码剪切并粘贴到两个不同的traits中。我们将所有与可能的订单操作相关的方法分组到一个`SalesOrderActions`
    trait中，将所有与订单客户相关的方法分组到`SalesOrderCustomer` trait中。这让我们回到了可能并不一定是可取的哲学。
- en: 'Using multiple traits can sometimes lead to conflicts, where the same method
    name can be found in more than one trait. We can use the `insteadof` and `as`
    keywords to mitigate these types of conflicts, as shown in the following example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个traits有时可能会导致冲突，即在多个trait中可以找到相同的方法名。我们可以使用`insteadof`和`as`关键字来缓解这些类型的冲突，如下例所示：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `as` keyword can also be used in conjunction with the `public`, `protected`,
    or `private` keywords in order to change the method visibility:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`as`关键字也可以与`public`、`protected`或`private`关键字一起使用，以更改方法的可见性：'
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To make things even more interesting, traits can be further composed of other
    traits, even supporting the `abstract` and `static` members, as shown in the following
    example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣的是，traits可以进一步由其他traits组成，甚至支持`abstract`和`static`成员，如下例所示：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Aside from being non-instantiatable, traits share many features with classes.
    While they provide us with the tooling for some interesting code structuring, they
    also make it easy to violate the single responsibility principle. The overall
    impression of trait usage is often that of extending regular classes, which makes
    it hard to find the right use case. We can use them to describe characteristics
    that are common to many, but not essential. For example, jet engines are not essential
    on every airplane, but a lot of airplanes have them, whereas others might have
    propellers.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 除了不能实例化外，traits与类共享许多特性。虽然它们为我们提供了一些有趣的代码结构工具，但它们也很容易违反单一责任原则。对trait使用的整体印象通常是扩展常规类，这使得很难找到正确的用例。我们可以使用它们来描述许多但不是必要的特征。例如，喷气发动机并非每架飞机都必需，但很多飞机都有它们，而其他飞机可能有螺旋桨。
- en: Reflection
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反射
- en: Reflection is a highly important concept every developer should be wary about.
    It denotes the ability of a program to inspect itself during runtime, thus allowing
    easy reverse-engineering of classes, interfaces, functions, methods, and extensions.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 反射是每个开发人员都应该警惕的一个非常重要的概念。它表示程序在运行时检查自身的能力，从而允许轻松地反向工程类、接口、函数、方法和扩展。
- en: 'We can get a quick taste of the PHP reflection capabilities right from the
    console. The PHP CLI supports several reflection-based commands:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从控制台快速了解PHP反射的能力。PHP CLI支持几个基于反射的命令：
- en: '`--rf <*function name*>`: This shows information about a function'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--rf <*function name*>`：显示有关函数的信息'
- en: '`--rc <*class name*>`: This shows information about a class'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--rc <*class name*>`：显示有关类的信息'
- en: '`--re <*extension name*>`: This shows information about an extension'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--re <*extension name*>`：显示有关扩展的信息'
- en: '`--rz <*extension name*>`: This shows information about the Zend extension'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--rz <*extension name*>`：显示有关Zend扩展的信息'
- en: '`--ri <*extension name*>`: This shows the configuration for an extension'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--ri <*extension name*>`：显示扩展的配置'
- en: 'The following output demonstrates the result of the `php --rf str_replace`
    command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出演示了`php --rf str_replace`命令的结果：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The output reflects on the `str_replace()` function, which is a standard PHP
    function. It clearly describes the total number of parameters, along with their
    name and required or optional assignment.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 输出反映了`str_replace()`函数，这是一个标准的PHP函数。它清楚地描述了参数的总数，以及它们的名称和必需或可选的分配。
- en: 'The real power of reflection, the one developers get to utilize, comes from
    the reflection API. Let''s take a look at the following example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 反射的真正力量，开发人员可以利用的力量，来自反射API。让我们看看以下例子：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We started off  by defining a `User` class with three properties, each of a
    different visibility. We then instantiated an object of the `User` class and tried
    changing the value of all three properties. Normally, members that are defined
    as `protected` or `private` cannot be accessed outside of an object. Trying to
    access them either in read or write mode would throw a Cannot access... error.
    This is what we would consider a normal behavior.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义了一个`User`类，其中包含三个不同可见性的属性。然后我们实例化了一个`User`类的对象，并尝试更改所有三个属性的值。通常，定义为`protected`或`private`的成员不能在对象外部访问。尝试以读取或写入模式访问它们会抛出一个无法访问的错误。这是我们认为的正常行为。
- en: 'Using the PHP reflection API, we can circumvent this normal behavior, making
    it possible to access private and protected members. The reflection API itself
    provides several classes for us to use:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PHP反射API，我们可以绕过这种正常行为，从而可以访问私有和受保护的成员。反射API本身为我们提供了几个可用的类：
- en: Reflection
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射
- en: ReflectionClass
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionClass
- en: ReflectionZendExtension
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionZendExtension
- en: ReflectionExtension
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionExtension
- en: ReflectionFunction
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionFunction
- en: ReflectionFunctionAbstract
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionFunctionAbstract
- en: ReflectionMethod
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionMethod
- en: ReflectionObject
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionObject
- en: ReflectionParameter
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionParameter
- en: ReflectionProperty
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionProperty
- en: ReflectionType
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionType
- en: ReflectionGenerator
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionGenerator
- en: Reflector (interface)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reflector（接口）
- en: ReflectionException (exception)
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReflectionException（异常）
- en: 'Each of these classes expose a diverse set of functionality, allowing us to
    tinker with internals of other classes, interfaces, functions, methods, and extensions.
    Assuming our goal is to change the values of `protected` and `private` properties
    from the previous example, we could use `ReflectionClass` and `ReflectionProperty`,
    as per the following example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类中的每一个都公开了各种功能，使我们能够玩弄其他类、接口、函数、方法和扩展的内部。假设我们的目标是从前面的例子中更改`protected`和`private`属性的值，我们可以使用`ReflectionClass`和`ReflectionProperty`，如下例所示：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We started off by instantiating an object of a `User` class, as we did in the
    previous example. We then created an instance of `ReflectionClass`, passing its
    constructor the name of the `User` class. The newly created `$reflector` instance
    allows us to fetch a list of all `User` class properties through its `getProperties()`
    method. Looping through properties, one by one, we kick off the real magic of
    reflection API. Each property (`$prop`) is an instance of the `ReflectionProperty`
    class. Two of the `ReflectionProperty` methods, `setAccessible()` and `setValue()`,
    provide just the right functionality for us to reach our goal. Using these methods,
    we are able to set the value of otherwise inaccessible object properties.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先实例化了一个`User`类的对象，就像在前面的例子中一样。然后我们创建了一个`ReflectionClass`的实例，将`User`类的名称传递给它的构造函数。新创建的`$reflector`实例允许我们通过其`getProperties()`方法获取`User`类的所有属性列表。逐个循环遍历属性，我们启动了反射API的真正魔力。每个属性（`$prop`）都是`ReflectionProperty`类的一个实例。`ReflectionProperty`类的两个方法，`setAccessible()`和`setValue()`，为我们提供了恰到好处的功能，使我们能够达到我们的目标。使用这些方法，我们能够设置原本无法访问的对象属性的值。
- en: 'Another simple, yet interesting reflection example is that of doc comment extraction:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个简单但有趣的反射示例是文档注释提取：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: With merely two lines of code, we were able to reflect upon a `Calc` class and
    extract the doc comment from its `sum()` method. While the practical use of the
    reflection API might not be obvious at first, it is capabilities such as these
    that empower us with building powerful and dynamic libraries and platforms.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 仅用两行代码，我们就能够反映`Calc`类并从其`sum()`方法中提取文档注释。虽然反射API的实际用途可能一开始并不明显，但正是这些功能使我们能够构建强大而动态的库和平台。
- en: The phpDocumentor tool uses the PHP reflection features to automatically generate
    documentation from the source code. The popular Magento v2.x eCommerce platform
    extensively uses the PHP reflection features to automatically instantiate objects
    that are type-hinted as `__construct()` arguments.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: phpDocumentor工具使用PHP反射功能自动生成源代码的文档。流行的Magento v2.x电子商务平台广泛使用PHP反射功能自动实例化被`__construct()`参数类型提示的对象。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we took a look into some of the most basic, yet lesser
    known features of PHP OOP that sometimes do not get enough attention in our day-to-day
    development. Nowadays, most of the mainstream work is focused around working with
    frameworks and platforms, which tend to abstract some of these concepts from us. Understanding
    the inner workings of objects is crucial to successfully developing and debugging
    a larger system. The reflection API provides a great deal of power when it comes
    to manipulating objects. Combined with the power of magic methods, which we mentioned
    in [Chapter 4](d96bd098-e569-4ac7-ba7e-47ad24e3bbfb.xhtml), *Magic Behind Magic
    Methods*, the PHP OOP model seems quite feature-rich.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一些PHP面向对象编程中最基本但不太为人知的特性，这些特性有时在我们日常开发中并没有得到足够的关注。如今，大多数主流工作都集中在使用框架和平台，这些框架和平台往往会将一些概念抽象化。了解对象的内部工作对于成功开发和调试更大型的系统至关重要。反射API在操作对象时提供了很大的力量。结合我们在[第4章](d96bd098-e569-4ac7-ba7e-47ad24e3bbfb.xhtml)中提到的魔术方法的力量，*魔术方法背后的魔术*，PHP面向对象模型似乎相当丰富多彩。
- en: Moving forward, we will assume that we have a working application in place and
    focus on optimizing it for high performance.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将假设我们已经有一个可用的应用程序，并专注于优化其性能。
