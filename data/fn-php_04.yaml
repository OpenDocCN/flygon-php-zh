- en: Chapter 4. Composing Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。组合函数
- en: In previous chapters, we talked a lot about building blocks and small pure functions.
    But so far, we haven't even hinted at how those can be used to build something
    bigger. What good is a building block if you cannot use it? The answer partly
    lies in function composition.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们谈了很多关于构建模块和小纯函数。 但到目前为止，我们甚至没有暗示这些如何用来构建更大的东西。 如果你不能使用构建模块，那么构建模块有什么用呢？
    答案部分地在于函数组合。
- en: Although this chapter completes the previous one, this technique is such an
    integral and important part of any functional program that it warranted its own
    chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这一章完成了前一章，但这种技术是任何函数式程序的一个不可或缺的重要部分，因此它值得有自己的一章。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Function composition
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数组合
- en: Partial application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分应用
- en: Currying
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 柯里化
- en: Parameter order importance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数顺序的重要性
- en: Real-life application of those concepts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些概念的现实应用
- en: Composing functions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数组合
- en: As is often the case in functional programming, the concept of function composition
    is borrowed from mathematics. If you have two functions, `f` and `g`, you can
    create a third function by composing them. The usual notation in mathematics is
    *(f   g)(x)*, which is equivalent to calling them one after the other as *f(g(x))*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在函数式编程中经常发生的那样，函数组合的概念是从数学中借来的。 如果您有两个函数`f`和`g`，您可以通过组合它们来创建第三个函数。 数学中的通常表示法是*(f
    g)(x)*，这相当于依次调用它们*f(g(x))*。
- en: 'You can compose any two given functions very easily with PHP, using a wrapper
    function. Say you want to display a title in all caps and only safe HTML characters:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用一个包装函数非常容易地组合任何两个给定的函数与PHP。 比如说，您想以大写字母显示标题，并且只保留安全的HTML字符：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also avoid the temporary variable altogether:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以完全避免临时变量：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This works well when you want to compose only a few functions. But creating
    a lot of those wrapper functions can become really cumbersome. What if you could
    simply use `$safe_title = strtoupper htmlspecialchars` line of code? Sadly, this
    operator does not exist in PHP, but the `functional-php` library we presented
    earlier contains a `compose` function which does exactly that:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您只想组合几个函数时，这样做效果很好。 但是创建很多这样的包装函数可能会变得非常繁琐。 如果您能简单地使用`$safe_title = strtoupper
    htmlspecialchars`这行代码会怎么样呢？ 遗憾的是，PHP中不存在这样的运算符，但我们之前介绍的`functional-php`库包含一个`compose`函数，它正是这样做的：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The gain may not seem that important, but let''s compare using such an approach
    in a bit more context:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 收益可能看起来并不重要，但让我们在更多的上下文中比较一下使用这种方法：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Personally, I find the second approach a lot easier to read and understand.
    And it gets better, as you can pass more than two functions to the `compose` function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我发现第二种方法更容易阅读和理解。 而且它变得更好了，因为您可以将两个以上的函数传递给`compose`函数：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: One thing that can be misleading is the order of application of the functions.
    The mathematical notation `f ∘ g` first applies `g` and then the result is passed
    to `f`. However, the `compose` function from `functional-php`library applies the
    functions in the order they are passed in the `compose('first', 'second', 'third')`
    parameters.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能会误导的事情是函数应用的顺序。 数学表示法`f ∘ g`首先应用`g`，然后将结果传递给`f`。 然而，`functional-php`库中的`compose`函数按照它们在`compose('first',
    'second', 'third')`参数中传递的顺序应用函数。
- en: This might be easier to understand depending on your personal preferences, but
    beware when you use another library, as the order of application might be reversed.
    Always make sure you've read the documentation carefully.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能更容易理解，取决于您的个人偏好，但是当您使用另一个库时要小心，因为应用的顺序可能会被颠倒。 一定要确保您已经仔细阅读了文档。
- en: Partial application
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分应用
- en: You might want to set some parameters of a function but leave some of them unassigned
    for later. For example, we might want to create a function that returns an excerpt
    of a blog post.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想设置函数的一些参数，但将其中一些参数留到以后再分配。 例如，我们可能想创建一个返回博客文章摘录的函数。
- en: The dedicated term for setting such a value is **bind a parameter** or **bind
    an argument**. The process itself is called **partial application** and the new
    function is set to be partially applied.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 设置这样一个值的专用术语是**绑定参数**或**绑定参数**。 过程本身称为**部分应用**，新函数被设置为部分应用。
- en: 'The naive way to do this is by wrapping the function in a new one:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的天真方式是将函数包装在一个新函数中：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As with composition, always creating new functions can quickly become cumbersome.
    But once again, the `functional-php` library has us covered. You can decide to
    bind parameters either from the left, the right, or in any particular location
    in the function signature, using respectively the `partial_left`, `partial_right`,
    or `partial_any` function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与组合一样，总是创建新函数可能会很快变得繁琐。 但再一次，`functional-php`库为我们提供了帮助。 您可以决定从左侧、右侧或函数签名中的任何特定位置绑定参数，分别使用`partial_left`、`partial_right`或`partial_any`函数。
- en: Why three functions? Mostly for performance reasons, as the left and right versions
    will perform a lot faster because the parameters will be replaced once and for
    all, whereas the last one will use placeholders evaluated upon each call to the
    new function.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么有三个函数？ 主要是出于性能原因，因为左侧和右侧版本的性能会更快，因为参数将被一次性替换，而最后一个将使用在每次调用新函数时计算的占位符。
- en: In the last example, the placeholder is defined using the function `...` which
    is the ellipsis unicode character. If you don't have an easy way to type it on
    your computer, you can also use the `placeholder` function from the `Functional`
    namespace which is an alias.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，占位符是使用函数`...`定义的，它是省略号Unicode字符。 如果您的计算机没有简便的方法输入它，您也可以使用`Functional`命名空间中的`placeholder`函数，它是一个别名。
- en: Currying
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 柯里化
- en: '**Currying** is often used as a synonym for partial application. Although both
    concepts allow us to bind some parameters of a function, the core ideas are a
    bit different.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**柯里化**经常被用作部分应用的同义词。 尽管这两个概念都允许我们绑定函数的一些参数，但核心思想有些不同。'
- en: 'The idea behind currying is to transform a function, taking multiple arguments
    into a sequence of functions taking one argument. As this might be a bit hard
    to grasp, let''s try to curry `substr` function. The result is called a **curryied
    function**:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 柯里化的思想是将接受多个参数的函数转换为接受一个参数的函数序列。由于这可能有点难以理解，让我们尝试对`substr`函数进行柯里化。结果被称为**柯里化函数**：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, each call returns a new function that takes the next parameter.
    This illustrates the principal difference with partial application. When you call
    a partially applied function, you will obtain a result. But, when you call a curryied
    function, you will get a new function until you pass the last parameter. Also,
    you can only bind the arguments in order starting from the left.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，每次调用都会返回一个接受下一个参数的新函数。这说明了与部分应用的主要区别。当你调用部分应用的函数时，你会得到一个结果。但是，当你调用柯里化函数时，你会得到一个新的函数，直到传递最后一个参数。此外，你只能按顺序从左边开始绑定参数。
- en: 'If the call chain seems overly lengthy, you can greatly simplify it starting
    from PHP 7\. This is because the RFC *Uniform variable syntax* was implemented
    (see [https://wiki.php.net/rfc/uniform_variable_syntax](https://wiki.php.net/rfc/uniform_variable_syntax)
    for details):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调用链看起来过长，你可以从PHP 7开始大大简化它。这是因为RFC *统一变量语法*已经实现（详见[https://wiki.php.net/rfc/uniform_variable_syntax](https://wiki.php.net/rfc/uniform_variable_syntax)）：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The advantages of currying might not seem evident when presented like this.
    But, as soon as you start working with higher-order functions such as `map` or
    `reduce` function, the idea becomes really powerful.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 柯里化的优势可能在这样的情况下并不明显。但是，一旦你开始使用高阶函数，比如`map`或`reduce`函数，这个想法就变得非常强大了。
- en: 'You might remember the `pluck` function from the `functional-php` library.
    The idea is to retrieve a given property from a collection of objects. If the
    `pluck` function was implemented as a curryied function, it could be used in a
    variety of ways:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得`functional-php`库中的`pluck`函数。这个想法是从对象集合中检索给定的属性。如果`pluck`函数被实现为柯里化函数，它可以以多种方式使用：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We could get a value from any kind of object or array easily:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地从任何类型的对象或数组中获取值：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We could extract a property from a collection of objects, as does the version
    from the `functional-php` library:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从对象集合中提取属性，就像`functional-php`库中的版本一样：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As our implementation returns `false` when nothing is found, we could use it
    to filter arrays that contain a certain value:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的实现在找不到内容时返回`false`，我们可以用它来过滤包含特定值的数组：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We could combine multiple use cases to get the names of all the members:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以组合多个用例来获取所有成员的名称：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Without currying, we would have needed to either write a wrapper around a more
    traditional `pluck` function, or create three specialized functions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有柯里化，我们要么需要编写一个更传统的`pluck`函数的包装器，要么创建三个专门的函数。
- en: 'Let''s go a step further and combine multiple curryied functions. First, we
    will need to create a wrapper function around the `array_map` and `preg_replace`
    functions:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再进一步，结合多个柯里化函数。首先，我们需要创建一个包装函数，包装`array_map`和`preg_replace`函数：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can use those to create multiple new functions, for example, a function
    that replaces all spaces in a string with underscores or all vowels with a star:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这些来创建多个新函数，例如，一个将字符串中所有空格替换为下划线或所有元音字母替换为星号的函数：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Currying functions in PHP
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在PHP中进行柯里化函数
- en: I hope you are now convinced of the power of currying. If not, I hope the examples
    to follow will do it for you. In the meantime, you are probably thinking it is
    really cumbersome to write a new utility function around existing ones to create
    a new curryied version, and you would be right.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你现在已经相信了柯里化的力量。如果没有，我希望接下来的例子能说服你。与此同时，你可能会认为围绕现有函数编写新的实用程序函数来创建新的柯里化版本真的很麻烦，你是对的。
- en: In languages such as Haskell, all functions are curryied by default. Sadly,
    this is not the case in PHP, but the process is easy and repetitive enough that
    we can write a helper function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Haskell等语言中，所有函数默认都是柯里化的。不幸的是，PHP中并非如此，但这个过程足够简单和重复，我们可以编写一个辅助函数。
- en: 'Due to the possibility of having optional parameters in PHP, we will first
    create a function `curry_n` that takes the number of parameters you want to curry.
    This way, you will also be able to decide if you want to curry all parameters,
    or only some of them. It can also be used for functions that have a variable number
    of parameters:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于PHP中可能有可选参数的可能性，我们首先要创建一个名为`curry_n`的函数，该函数接受你想要柯里化的参数数量。这样，你也可以决定是否要对所有参数进行柯里化，还是只对其中一些进行柯里化。它也可以用于具有可变参数数量的函数：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The idea is to use an inner helper function, taking the already passed values
    as parameters, and then creating a closure with those. When called, the closure
    will decide, based on the actual number of values, whether we can call the original
    function, or whether we need to create a new function using our helper.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是使用一个内部辅助函数，将已传递的值作为参数，然后使用这些创建一个闭包。当调用时，闭包将根据实际值的数量决定我们是否可以调用原始函数，或者我们是否需要使用我们的辅助函数创建一个新函数。
- en: Be aware that if you give a parameter count higher than the real count, all
    extraneous parameters will be passed along to the original function but will probably
    be ignored. Also, giving a smaller count will result in the last step expecting
    more than just one parameter to correctly complete.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果你给出的参数计数高于实际计数，所有多余的参数将被传递到原始函数，但可能会被忽略。此外，给出较小的计数将导致最后一步期望更多的参数才能正确完成。
- en: 'We can now create our second function that will determine the number of parameters
    using `reflection` variable:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建第二个函数，使用`reflection`变量来确定参数的数量：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, there is no easy way to determine the number of parameters a
    function is expecting. We also had to add a parameter to determine whether we
    should consider all parameters, including those with a default value, or only
    the mandatory ones.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，没有简单的方法来确定函数期望的参数数量。我们还必须添加一个参数来确定我们是否应该考虑所有参数，包括具有默认值的参数，还是只考虑必填参数。
- en: You might have noticed that we don't create functions that take strictly one
    parameter; instead, we used the `func_get_args` function to get all passed parameters.
    This allows the use of currying functions more naturally and is also on a par
    with what is done in functional languages. Our definition of currying is now more
    along the lines of *A function that returns a new function until it receives all
    its arguments*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们并没有创建严格只接受一个参数的函数；相反，我们使用了`func_get_args`函数来获取所有传递的参数。这使得使用柯里化函数更加自然，并且与函数式语言中所做的事情相当。我们对柯里化的定义现在更接近于*一个函数，直到接收到所有参数才返回一个新函数*。
- en: The examples in the remainder of the book will assume that this curry function
    is available and ready to use.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本书其余部分的示例将假定此柯里化函数可用并准备好使用。
- en: At the time of writing, there is an open pull request on the `functional-php`
    library to incorporate this function.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`functional-php`库上有一个待处理的拉取请求，以合并此函数。
- en: Parameter order matters a lot!
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数顺序非常重要！
- en: 'As you might remember from the first chapter, `array_map` and `array_filter`
    functions have their parameters in different orders. For sure, it makes them a
    bit more difficult to use, as you are more prone to getting it wrong, but it is
    not the only issue this poses. To illustrate why parameter order matters, let''s
    create curryied versions of both of them:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能还记得第一章所述，`array_map`和`array_filter`函数的参数顺序不同。当然，这使它们更难使用，因为你更容易出错，但这并不是唯一的问题。为了说明参数顺序的重要性，让我们创建这两个函数的柯里化版本：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We are using `curry_n` functions for two different reasons here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用`curry_n`函数有两个不同的原因：
- en: The `array_map` function accepts a variable number of arrays, so we enforce
    the value to 2 to be on the safe side
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`array_map`函数接受可变数量的数组，因此我们强制将值设为2以确保安全'
- en: The `array_filter` function has a third parameter named `$flag` for which the
    optional value is fine
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`array_filter`函数有一个名为`$flag`的第三个参数，其可选值是可以接受的'
- en: 'Remember the order parameters of our newly curryied functions? The `$map` parameter
    will take the callback first, and the `$filters` parameter expects the collection
    first. Let''s try to create a new useful function knowing this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们新的柯里化函数的参数顺序吗？`$map`参数将首先获取回调函数，而`$filters`参数期望首先获取集合。让我们尝试创建一个新的有用函数，了解这一点：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Our mapping examples are really basic but serve some purpose, whereas our filtering
    examples are just static data. I bet you can find some way to use `$trim` and
    `$hash` parameters, but what are the chances you will need a list of odd numbers
    or vowels ready to be filtered?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的映射示例确实非常基础，但有一定用途，而我们的过滤示例只是静态数据。我敢打赌，你可以找到一些方法来使用`$trim`和`$hash`参数，但你需要一个奇数或元音字母的列表来进行过滤的可能性有多大呢？
- en: Another example can be taken from a bit earlier in this chapter-remember our
    curryied example of `substr` function?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本章稍早前的另一个例子可以从这里得到-还记得我们对`substr`函数的柯里化示例吗？
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: I can guarantee you it would be a lot more useful if we could first define the
    start and length to create. For example, a `$take5fromStart` function; instead
    of having this awkward `$substrOnLoremIpsum` parameters, we simply called the
    `$f` parameter in the example.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以向你保证，如果我们首先定义开始和长度来创建，那将会更有用。例如，一个`$take5fromStart`函数；而不是拥有这些尴尬的`$substrOnLoremIpsum`参数，我们只需在示例中调用`$f`参数。
- en: The important thing here is that the data you want to work upon, your "subject",
    must come last because it greatly increases reuse of your curryied functions and
    lets you use them as parameters to other higher-order functions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里重要的是，你想要操作的数据，也就是你的“主题”，必须放在最后，因为这大大增加了对柯里化函数的重用，并且让你可以将它们作为其他高阶函数的参数使用。
- en: As in the last example, let's say we want to create a function that takes the
    first two letters of all elements of a collection. We will try to do it with a
    set of two functions, where the arguments are in different orders.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 就像上一个例子一样，假设我们想要创建一个函数，该函数获取集合中所有元素的前两个字母。我们将尝试使用一组两个函数来实现，其中参数的顺序不同。
- en: The implementation of the function is left as an exercise, as it does not really
    matter to drive the point home.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的实现留作练习，因为这并不重要。
- en: 'In example one, the subject is the first argument:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，主语是第一个参数：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The parameter order forces us to create wrapper functions. In fact, it doesn't
    even matter that the functions are curryied because we cannot use this fact.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 参数顺序迫使我们创建包装函数。事实上，即使函数是柯里化的，也无关紧要，因为我们无法利用这一点。
- en: 'In example two, the subject is at the end:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个例子中，主语位于最后：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As a matter of fact, a well-chosen order also helps a lot with function composition,
    as we will see in the following section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，精心选择的顺序也对函数组合有很大帮助，正如我们将在下一节中看到的那样。
- en: 'As a final note on the subject and to be completely fair, the version using
    functions with backward parameters could have been written using the `partial_right`
    function from the `functional-php` library, and you could use the `partial_any`
    function for functions with more parameters in strange orders. But even so, the
    solution is not as simple as the one with the arguments in the right order:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于主题的说明，为了公平起见，使用参数顺序相反的函数版本可以使用`functional-php`库中的`partial_right`函数编写，并且您可以使用`partial_any`函数来处理参数顺序奇怪的函数。但即便如此，解决方案也不像参数顺序正确的解决方案那样简单：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Using composition to solve real issues
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用组合来解决真正的问题
- en: 'As an example, let''s say that your boss comes in and wants you to produce
    a new report with the phone numbers of all users that have registered in the last
    30 days. We assume that we have the following class representing our users. Obviously,
    a real class will store and return real data, but let us just define our API:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设你的老板走进来，希望你制作一个新报告，其中包含过去30天内注册的所有用户的电话号码。我们假设有以下类来表示我们的用户。显然，一个真正的类将存储和返回真实数据，但让我们只定义我们的API：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Without any knowledge of functional programming, you might write something
    like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有任何函数式编程知识的人来说，你可能会写出这样的代码：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A first look at our function tells us that it is not pure, as the limit is
    computed inside the function, thus subsequent calls could result in a different
    user list. We could also leverage the `map` and `filter` functions:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的函数的第一眼看告诉我们它不是纯的，因为限制是在函数内部计算的，因此后续调用可能导致不同的用户列表。我们还可以利用`map`和`filter`函数：
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Depending on your preferences, the code might now be a bit easier to read,
    or not at all, but at least we have a pure function and our concerns are a bit
    more separated. We can, however, do better. Firstly, the `functional-php` library
    has a function that allows us to create a helper calling a method on an object:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的喜好，现在代码可能会更容易阅读一些，或者完全不容易，但至少我们有了一个纯函数，我们的关注点也更加分离。然而，我们可以做得更好。首先，`functional-php`库有一个函数，允许我们创建一个调用对象方法的辅助函数：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'It is a bit better, but if we accept having to create some new helper functions,
    we can improve the solution even more. Also, those helper functions are new building
    blocks we will be able to reuse:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这样会好一些，但如果我们接受需要创建一些新的辅助函数，我们甚至可以进一步改进解决方案。此外，这些辅助函数是我们将能够重用的新构建块：
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If we have curryied versions of `filter` and `map` functions, we can even create
    a function that only takes a date and returns a new function that can be further
    composed and reused:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有`filter`和`map`函数的柯里化版本，甚至可以创建一个只接受日期并返回一个新函数的函数，这个新函数可以进一步组合和重用：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As a good reminder about the necessity of having a good parameter order, since
    the `map` function from the `functional-php` library has the same signature as
    the original one from PHP, we had to curry it manually.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个关于拥有良好参数顺序的必要性的良好提醒，由于`functional-php`库中的`map`函数具有与PHP原始函数相同的签名，我们不得不手动进行柯里化。
- en: 'Our resulting function is a tad longer than the original imperative one, but,
    in my opinion, it is easier to read. You can easily follow what is happening:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的结果函数比原始的命令式函数稍长一些，但在我看来，它更容易阅读。你可以轻松地跟踪发生了什么：
- en: 'Filter the data using:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下方式过滤数据：
- en: The registration date
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册日期
- en: From this, you get the timestamp.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从中，你可以得到时间戳。
- en: Check whether it's greater than the given limit.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查它是否大于给定的限制。
- en: Map the `phone` method on the result.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在结果上映射`phone`方法。
- en: 'I totally agree if you find that the name `partial_method` is not ideal and
    that the presence of the calls to the `compose` function somehow makes it a bit
    difficult on the eyes. As a matter of fact, in a hypothetical language with a
    `compose` operator, auto-currying, and some syntactic sugar to defer a call to
    a method, this could look like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得`partial_method`这个名字不太理想，并且调用`compose`函数的存在在某种程度上让人有点难以理解，我完全同意。事实上，在一个具有`compose`运算符、自动柯里化和一些语法糖来推迟对方法的调用的假设语言中，它可能看起来像这样：
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now that we have our function, your boss walks right back in your office with
    new requirements. In fact, he only wants the three most recent registrations from
    the last 30 days. Easy, let''s just compose our new function with some more building
    blocks:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了我们的函数，你的老板又走进你的办公室，提出了新的要求。实际上，他只想要过去30天内最近的三次注册。很简单，让我们只是用一些更多的构建块来组合我们的新函数：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In order to take a certain number of items from the beginning of an array, we
    need to create a `take` function around `array_slice` function. We also need a
    function to compare values, which we can do simply because `DateTime` function
    overloads the comparison operators.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从数组的开头获取一定数量的项目，我们需要在`array_slice`函数周围创建一个`take`函数。我们还需要一个比较值的函数，这很简单，因为`DateTime`函数重载了比较运算符。
- en: Again, the `functional-php` library gets argument order wrong for `sort` function,
    so we need to partially apply instead of curry. And the `compare_on` function
    creates a comparator given a comparison function and a "reducer" which is called
    on each item being compared. In our case, we want to compare the registration
    date, so we reuse our different method application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`functional-php`库对`sort`函数的参数顺序搞错了，所以我们需要部分应用而不是柯里化。而`compare_on`函数创建了一个比较器，给定一个比较函数和一个“reducer”，它在比较每个项目时被调用。在我们的情况下，我们想要比较注册日期，所以我们重用了我们的不同方法应用。
- en: We need to perform the sorting operation before filtering because our `getPhonesFromDate`
    method returns only the phone numbers as the name suggests. Our resulting function
    is itself a curryied composition of other functions, thus allowing easy reuse.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在过滤之前执行排序操作，因为我们的`getPhonesFromDate`方法只返回电话号码，正如其名称所示。我们的结果函数本身是其他函数的柯里化组合，因此可以轻松重用。
- en: I hope this small example has finished convincing you of the power of using
    small functions as building blocks and composing them to solve issues. If that
    is not the case, maybe one of the more advanced techniques we'll see in the following
    chapters will do it for you.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这个小例子已经说服你使用小函数作为构建块并将它们组合起来解决问题的力量。如果不是这样，也许我们将在接下来的章节中看到的更高级的技术之一会说服你。
- en: As a final note, as you perhaps gathered from the examples, PHP is sadly missing
    a lot of utility functions to make the life of a functional programmer easy. Also,
    even the `functional-php` library, which is widely used, gets some parameter orders
    wrong and is missing some important pieces of code, such as currying.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点，也许你从例子中已经知道，PHP遗憾地缺少了很多实用函数，以便让函数式编程者的生活变得更容易。而且，即使是广泛使用的`functional-php`库，也会出现一些参数顺序错误，并且缺少一些重要的代码，比如柯里化。
- en: By combining multiple libraries, we could have a better coverage of the required
    features, but it would also add a lot of useless code and some mismatched function
    names that wouldn't really make your life easier.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合多个库，我们可以更好地覆盖所需的功能，但这也会增加大量无用的代码和一些不匹配的函数名称，这并不会让你的生活变得更轻松。
- en: What I can recommend is to keep a file with all the little gems you create along
    the way and soon you will have your own compilation of helpers that really suits
    your need and coding style. This advice might go against best practices concerning
    reusable packages with a large community around them, but until someone creates
    the right library, it helps a lot. And who knows, you might be the one who has
    enough energy to create the missing pearl in the functional PHP ecosystem.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以建议的是保留一个文件，记录你在学习过程中创造的所有小技巧，很快你就会拥有自己的助手编译，真正适合你的需求和编码风格。这个建议可能违反了围绕着大型社区的可重用包的最佳实践，但在有人创建正确的库之前，它会有很大帮助。谁知道，也许你就是有足够精力创建功能PHP生态系统中缺失的珍珠的人。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter revolved around function composition, which is a really powerful
    idea once you get used to it. By using small building blocks, you can create complex
    processes while keeping the readability and maintainability offered by short functions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本章围绕函数组合展开，一旦你习惯了它，这是一个非常强大的想法。通过使用小的构建模块，你可以创建复杂的过程，同时保持短函数提供的可读性和可维护性。
- en: We also talked about the partial application and the most powerful concept of
    currying, which allow us to easily create more specialized versions of existing
    functions and rewrite our code to be more readable.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还谈到了部分应用和柯里化的最强大概念，它们使我们能够轻松地创建现有函数的更专业化版本，并重写我们的代码以使其更易读。
- en: We tackled argument order, a topic which is often brushed off but is really
    important as soon as you want to use higher-order functions. The combination of
    currying and a correct parameter succession allowed us to reduce the need for
    boilerplate code and wrapper functions, a process sometimes referred to as eta-reduction.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了参数顺序，这是一个经常被忽视但非常重要的话题，一旦你想使用高阶函数时就会变得重要。柯里化和正确的参数顺序的结合使我们能够减少样板代码和包装函数的需求，这个过程有时被称为eta-reduction。
- en: Finally, with all the aforementioned tools, we tried to demonstrate solutions
    to some issues and problems that you could encounter in your day-to-day programming
    to help you write better code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过前面提到的所有工具，我们试图演示一些你在日常编程中可能遇到的问题和难题的解决方案，以帮助你写出更好的代码。
