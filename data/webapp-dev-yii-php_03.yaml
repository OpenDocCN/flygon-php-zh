- en: Chapter 3. The TrackStar Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。TrackStar应用程序
- en: We could continue to keep adding to our simple "Hello, World!" application to
    provide examples of Yii's features, but that won't really help to understand the
    framework in the context of a real-world application. In order to do that, we
    need to build towards something that will more closely resemble the types of applications
    web developers actually have to build. That is exactly what we are going to be
    doing throughout the rest of this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续不断向我们简单的“Hello, World!”应用程序添加Yii的功能示例，但这并不会真正帮助理解框架在真实应用程序的上下文中。为了做到这一点，我们需要朝着更接近Web开发人员实际需要构建的应用程序类型的方向发展。这正是我们将在本书的其余部分中要做的事情。
- en: 'In this chapter, we will introduce the project task-tracking application called
    **TrackStar**. There are many other project management and issue-tracking applications
    out there in the world, and the basic functionality of ours will not be any different
    from many of these. So why build it, you ask? It turns out that this type of user-based
    application has many features that are common to many web applications. This will
    allow us to achieve two primary goals:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍名为TrackStar的项目任务跟踪应用程序。世界上有许多其他项目管理和问题跟踪应用程序，我们的基本功能与许多这些应用程序并无不同。那么，为什么要构建它呢？事实证明，这种基于用户的应用程序具有许多对许多Web应用程序都是常见的功能。这将使我们能够实现两个主要目标：
- en: Showcase Yii's incredible utility and feature set as we build useful functionality
    and conquer real-world web application challenges
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示Yii作为我们构建有用功能和征服真实世界Web应用程序挑战的不可思议的实用性和功能集
- en: Provide real-world examples and approaches that will immediately be applicable
    to your next web application project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供现实世界的示例和方法，这些方法将立即适用于您的下一个Web应用程序项目
- en: Introducing TrackStar
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍TrackStar
- en: TrackStar is a **software development life cycle** (**SDLC**) issue-management
    application. Its main goal is to help keep track of the many issues that arise
    throughout the course of building software applications. It is a user-based application
    that allows the creation of user accounts and grants access to the application
    features once a user has been authenticated and authorized. It allows a user to
    add and manage projects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: TrackStar是一个软件开发生命周期（SDLC）问题管理应用程序。它的主要目标是帮助跟踪在构建软件应用程序过程中出现的许多问题。它是一个基于用户的应用程序，允许创建用户帐户并在用户经过身份验证和授权后访问应用程序功能。它允许用户添加和管理项目。
- en: Projects can have users associated with them (typically the team members working
    on the project) as well as issues. The project issues will be things such as development
    tasks and application bugs. The issues can be assigned to members of the project
    and will have a status such as *not yet started*, *started*, and *finished*. In
    this way, the tracking tool can give an accurate depiction of the projects with
    regard to what has been accomplished, what is currently in progress, and what
    is yet to be started.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 项目可以与其关联的用户（通常是项目上工作的团队成员）以及问题相关联。项目问题将是开发任务和应用程序错误等事物。问题可以分配给项目的成员，并且将具有*尚未开始*，*已开始*和*已完成*等状态。通过这种方式，跟踪工具可以准确描述项目的情况，包括已完成的工作，当前正在进行的工作以及尚未开始的工作。
- en: Creating user stories
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户故事
- en: Simple user stories are a great way to identify the necessary feature functionality
    of an application. User stories, in their simplest form, state what a user can
    do with a piece of software. They should start simple, and grow in complexity
    as you dive into more and more of the details around each feature. Our goal here
    is to start with just enough complexity to allow us to get started. If necessary,
    we'll add more detail later.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的用户故事是识别应用程序必要功能功能的好方法。用户故事以最简单的形式陈述用户可以使用软件做什么。它们应该从简单开始，并随着您深入了解每个功能周围的细节而变得更加复杂。我们的目标是从足够的复杂性开始，以便我们可以开始。如果有必要，我们将稍后添加更多细节。
- en: We briefly touched on the three main entities that play a large role in this
    application, namely *users*, *projects*, and *issues*. These are our primary domain
    objects and are extremely important items in this application. So let's start
    with them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要介绍了在这个应用程序中扮演重要角色的三个主要实体，即*用户*，*项目*和*问题*。这些是我们的主要领域对象，在这个应用程序中非常重要。所以让我们从它们开始。
- en: Users
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户
- en: 'TrackStar is a user-based web application. At a high level, the user can be
    in one of two user states:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: TrackStar是一个基于用户的Web应用程序。在高层次上，用户可以处于两种用户状态中的一种。
- en: Anonymous
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匿名
- en: Authenticated
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过身份验证
- en: An **anonymous** user is any user of the application that has not been authenticated
    through the login process. Anonymous users will only have access to register for
    a new account or login. All other functionality will be restricted to authenticated
    users.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名用户是应用程序的任何未经过登录过程认证的用户。匿名用户只能访问注册新帐户或登录。所有其他功能将受限于经过身份验证的用户。
- en: An **authenticated** user is any user that has provided valid authentication
    credentials through the login process. In other words, authenticated users are
    users that have logged in. Authenticated users will have access to the main feature
    functionality of the application, such as creating and managing projects, and
    project issues.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 经过身份验证的用户是通过登录过程提供有效身份验证凭据的用户。换句话说，经过身份验证的用户是已登录的用户。经过身份验证的用户将可以访问应用程序的主要功能功能，如创建和管理项目以及项目问题。
- en: Projects
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目
- en: Managing the project is the primary purpose of the TrackStar application. A
    project represents a general, high-level goal to be achieved by one or more users
    of the application. The project is typically broken down into more granular tasks,
    or issues, that represent the smaller steps that need to be taken to achieve the
    overall goal.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 管理项目是TrackStar应用程序的主要目的。项目代表一个由应用程序的一个或多个用户实现的一般高层目标。项目通常被分解为更细粒度的任务或问题，这些任务或问题代表需要采取的更小步骤以实现整体目标。
- en: As an example, let's take what we are going to be doing throughout this book,
    that is, building a project and issue-tracking management application. Unfortunately,
    we can't use our yet-to-be-created application as a tool to help us track its
    own development, but if we could, we might create a project named "Build The TrackStar
    Project/Issue Management Tool". This project would be broken down into more granular
    project issues, for example, "Create the login screen", "Design database schema
    for issues", and so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，让我们以本书中将要做的事情为例，即构建一个项目和问题跟踪管理应用程序。不幸的是，我们无法使用尚未创建的应用程序来帮助我们跟踪其自身的开发，但如果可以的话，我们可能会创建一个名为“构建
    TrackStar 项目/问题管理工具”的项目。该项目将被细分为更详细的项目问题，例如“创建登录界面”，“为问题设计数据库模式”等等。
- en: Authenticated users can create new projects. The creator of the project within
    an account will have a special role within that project called the **project owner**.
    Project owners have the ability to edit and delete these projects as well as add
    new members to the project. Other users associated with the project, besides the
    project owner, are referred to simply as **project members**. Project members
    will have the ability to add new issues as well as edit existing ones.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 经过身份验证的用户可以创建新项目。账户内项目的创建者将在该项目中拥有称为**项目所有者**的特殊角色。项目所有者有权编辑和删除这些项目，以及向项目添加新成员。除项目所有者之外与项目相关的其他用户简称为**项目成员**。项目成员将有添加新问题以及编辑现有问题的权限。
- en: Issues
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: 'Project issues will be classified into one of three categories:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 项目问题将被分类为三个类别之一：
- en: '**Features**: Items that represent real features to be added to the application.
    For example, implementation of the login functionality.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特性**：代表要添加到应用程序中的实际功能的项目。例如，登录功能的实施。'
- en: '**Tasks**: Items that represent work that needs to be done, but are not an
    actual feature of the software. For example, setting up the build and integration
    server.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：代表需要完成的工作，但不是软件的实际功能。例如，设置构建和集成服务器。'
- en: '**Bugs**: Items that represent application behaviors that are not working as
    expected. For example, the account registration form does not validate the format
    of an input e-mail address.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：代表应用程序行为不如预期工作的项目。例如，账户注册表格未验证输入电子邮件地址的格式。'
- en: 'And issues can be in one of the following three status states:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 问题可以处于以下三种状态之一：
- en: Not yet started
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尚未开始
- en: Started
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已开始
- en: Finished
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已完成
- en: Project members can add new issues to a project as well as edit and delete them.
    They can assign issues to themselves or other project members.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 项目成员可以向项目添加新问题，以及编辑和删除它们。他们可以将问题分配给自己或其他项目成员。
- en: For now, this is enough information on these three main entities to allow us
    to move forward. We could go into a lot more detail about "what exactly does account
    registration entail?" or "how exactly does one add a new task to a project?",
    but we have outlined enough specifications to begin on these basic features. We'll
    nail down the more granular details as we proceed with the implementation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，这些三个主要实体的信息足够让我们继续前进。我们可以详细了解“账户注册具体包括什么？”或者“如何向项目添加新任务？”但我们已经概述了足够的规格以开始这些基本功能。随着实施的进行，我们将确定更详细的细节。
- en: However before we start, we should jot down some basic navigation and application
    workflow. This will help everyone to better understand the general layout and
    flow of the application we are building.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们开始之前，我们应该记下一些基本的导航和应用程序工作流程。这将帮助每个人更好地理解我们正在构建的应用程序的一般布局和流程。
- en: Navigation and page flow
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航和页面流程
- en: It is always good to outline the main pages within an application and see how
    they fit together. This will help us quickly identify some needed Yii controllers,
    actions, and views, as well as help to set everyone's expectations on what we'll
    be building towards at the onset of our development.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 总是很好地概述应用程序中的主要页面，并查看它们如何配合。这将帮助我们快速确定一些需要的 Yii 控制器、操作和视图，以及帮助设定每个人对我们在开发初期将要构建的期望。
- en: 'The following diagram shows the basic application flow, from logging in through
    to the project details listing:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了基本的应用程序流程，从登录到项目详情列表：
- en: '![Navigation and page flow](graphics/8727_03_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![导航和页面流程](graphics/8727_03_01.jpg)'
- en: When a user first comes to the application, they must log in and authenticate
    themselves prior to proceeding to any functionality. Once successfully logged
    in, they will be presented with a list of their current projects along with the
    ability to create a new project. Choosing a specific project will take them to
    the project details page. The project details page will present a list of the
    issues by type. There will also be the ability to add a new issue as well as edit
    any of the listed issues.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户首次进入应用程序时，他们必须先登录并进行身份验证，然后才能继续使用任何功能。成功登录后，他们将看到他们当前项目的列表，以及创建新项目的功能。选择特定项目将带他们进入项目详情页面。项目详情页面将展示按类型列出的问题列表。还可以添加新问题，以及编辑列出的任何问题。
- en: This is all pretty basic functionality, but the figure gives us a little more
    information on how the application is stitched together and allows us to start
    identifying our needed models, views, and controllers better. It also allows something
    visual to be shared with others so that everyone involved has the same *picture*
    of what we are working towards. In my experience, almost everyone prefers pictures
    over written specifications when first thinking through a new application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这都是非常基本的功能，但这个图表为我们提供了关于应用程序如何组合在一起的更多信息，并且让我们更好地开始确定我们需要的模型、视图和控制器。它还允许与他人分享一些可视化的东西，以便每个参与者对我们正在努力实现的目标有相同的*理解*。根据我的经验，几乎每个人在首次思考新应用程序时都更喜欢图片而不是书面规格。
- en: Data relationships
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据关系
- en: 'We still need to think a little more about the data we will be working with
    as we begin to build toward these specifications. If we pick out all the main
    nouns from our system, we may end up with a pretty good list of domain objects
    and, by extension of using active record, the data we want to model. Our previously
    outlined user stories identify the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在开始朝着这些规格构建之前，仍然需要更多地考虑我们将要处理的数据。如果我们从系统中挑选出所有的主要名词，我们可能会得到一个相当不错的领域对象列表，通过使用活动记录，我们想要建模的数据也会得到延伸。我们之前概述的用户故事确定了以下内容：
- en: A User
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用户
- en: A Project
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个项目
- en: An Issue
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个问题
- en: 'Based on this and the other details provided in the user stories and application
    workflow diagram, a first attempt at the necessary data model is shown in the
    following diagram:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这一点以及用户故事和应用程序工作流程图中提供的其他细节，我们在以下图表中展示了对必要数据模型的第一次尝试：
- en: '![Data relationships](graphics/8727_03_02.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![数据关系](graphics/8727_03_02.jpg)'
- en: This is a very basic object model that outlines our primary data entities, their
    respective attributes, and some of the relationships between them. The 1..* and
    0..* on either side of the line between the project and user objects represents
    that there is a many-to-many relationship between them. A user can be associated
    with zero or more projects, and a project has one or more users. Similarly, we
    have represented the fact that a project can have 0 or more issues associated
    with it, whereas an issue belongs to just one specific project. Also, a user can
    be the owner of (or requestor of) many issues, but an issue just has one owner
    (also just one requestor).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常基本的对象模型，概述了我们的主要数据实体、它们各自的属性以及它们之间的一些关系。在项目和用户对象之间的线的两侧的1..*和0..*表示它们之间存在多对多的关系。一个用户可以与零个或多个项目相关联，一个项目可以有一个或多个用户。同样地，我们表示了一个项目可以有零个或多个与之相关的问题，而一个问题只属于一个特定的项目。此外，一个用户可以是许多问题的所有者（或请求者），但一个问题只有一个所有者（也只有一个请求者）。
- en: We have kept the attributes as simple as possible at this stage. A user is going
    to need a username and a password in order to get past the login screen. The project
    has only a name attribute.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们尽可能地保持属性的简单。用户需要用户名和密码才能通过登录界面。项目只有一个名称属性。
- en: An issue has the most associated information based on what we currently know
    about them. As discussed briefly in the previously defined user stories, issues
    will have a type attribute to distinguish the general category (bug, feature,
    or task). They will also have a status attribute to indicate the progress of the
    issue being worked on. There will be a logged in user who initially creates the
    issue; this is the requestor. And once a user in the system has been assigned
    to work on the issue, they will be the owner of the issue. We have also defined
    the description attribute to allow for some descriptive text of the issue to be
    entered.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们目前所知的信息，问题具有最多的相关信息。正如在之前定义的用户故事中简要讨论的，问题将具有一个类型属性，用于区分一般类别（错误、功能或任务）。它们还将具有一个状态属性，用于指示正在处理的问题的进展。将有一个已登录的用户最初创建问题；这是请求者。一旦系统中的用户被分配来处理问题，他们将成为问题的所有者。我们还定义了描述属性，以允许输入问题的一些描述性文本。
- en: Note that we have not been explicitly talking about schemas or databases yet.
    The fact is that until we think through what is really needed from a data perspective,
    we won't know the right tool to use to house this data. Would flat files on the
    filesystem work just as well as a relational database? Do we need to persist data
    at all?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还没有明确讨论模式或数据库。事实上，直到我们仔细考虑从数据角度真正需要什么，我们才会知道用来存储这些数据的正确工具。文件系统上的平面文件是否和关系数据库一样有效？我们是否需要持久化数据？
- en: The answers to these questions are not always necessary at this early planning
    stage. It is better to focus more on the features we want and the type of data
    needed to support these features. We can turn to the explicit technology implementation
    details after we have had a chance to discuss these ideas with other project stakeholders,
    to ensure we are on the right track. Other project stakeholders include anyone
    and everyone involved in this development project. This can include the client,
    if you are building an application for someone else, as well as other development
    team members, product/project managers, and so on. It is always a good idea to
    get some feedback from "the team" to help validate the approach and any assumptions
    being made.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个早期规划阶段，这些问题的答案并不总是必要的。更好的是，更专注于我们想要的功能以及支持这些功能所需的数据类型。在与其他项目利益相关者讨论这些想法之后，我们可以转向明确的技术实施细节，以确保我们走在正确的道路上。其他项目利益相关者包括所有参与这个开发项目的人。这可能包括客户，如果你为别人构建应用程序，以及其他开发团队成员、产品/项目经理等等。从“团队”中获得一些反馈来帮助验证方法和所做的任何假设总是一个好主意。
- en: In our case, there is really no one else involved in this development effort.
    So, we can quickly draw some conclusions to answer our data-related questions
    and move forward with our application development.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，确实没有其他人参与这个开发工作。因此，我们可以快速得出一些结论来回答我们与数据相关的问题，并继续我们的应用程序开发。
- en: Since this is a web-based application, and given the nature of the information
    we need to store, retrieve, and manipulate, we can conclude that it would be best
    to persist the data in this application. Also, based on the relationships that
    exist between the types of data we want to capture and manage, a good approach
    to storing this data would be in a relational database. Based on its ease of use,
    excellent price point, its general popularity among PHP application developers,
    and its compatibility with the Yii framework, we will be using MySQL as the specific
    database server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个基于Web的应用程序，并且考虑到我们需要存储、检索和操作的信息的性质，我们可以得出结论，最好将数据持久化在这个应用程序中。此外，基于我们想要捕获和管理的数据类型之间存在的关系，存储这些数据的一个良好方法是使用关系数据库。基于其易用性、优秀的价格点、在PHP应用程序开发人员中的普遍受欢迎程度以及与Yii框架的兼容性，我们将使用MySQL作为特定的数据库服务器。
- en: Now that we know enough about what we are going to start building and how we
    are going to start building it, let's get started.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了我们将要开始构建的内容以及我们将如何开始构建它的足够信息，让我们开始吧。
- en: Creating the new application
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新应用程序
- en: 'First things first, let''s get the initial Yii web application created. We
    have already seen how easy this is to accomplish in [Chapter 2](ch02.html "Chapter 2. Getting
    Started"), *Getting Started*. As we did there, we will assume the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们先创建初始的Yii Web应用程序。我们已经在[第2章](ch02.html "第2章。入门")中看到了这是多么容易实现，*入门*。就像我们在那里所做的那样，我们将假设以下内容：
- en: '`YiiRoot` is the directory where you have installed Yii'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YiiRoot`是您安装Yii的目录'
- en: '`WebRoot` is configured as the document root of your web server (that is, to
    where `http://localhost/` resolves)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebRoot`被配置为您的Web服务器的文档根目录（即`http://localhost/`解析到的位置）'
- en: 'So from the command line, change to your `WebRoot` directory and execute the
    following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从命令行，切换到您的`WebRoot`目录并执行以下操作：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This provides us with our skeleton directory structure and our out-of-the-box
    working application. You should be able to view the home page of this new application
    by navigating to `http://localhost/trackstar/index.php?r=site/index`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们提供了我们的骨架目录结构和开箱即用的工作应用程序。您应该能够通过导航到`http://localhost/trackstar/index.php?r=site/index`来查看这个新应用程序的主页。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Because our default controller is SiteController and the default action within
    that controller is `actionIndex()`, we could also navigate to the same page without
    specifying the route.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们的默认控制器是SiteController，该控制器中的默认操作是`actionIndex()`，所以我们也可以在不指定路由的情况下导航到相同的页面。
- en: Connecting to the database
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: 'Now that we have our skeleton application up and running, let''s work on getting
    it properly connected to a database. In fact, the skeleton application was autoconfigured
    to use a database. A by-product of using the `yiic` tool is that our new application
    is configured to use a SQLite database. If you take a peek in the main application
    configuration file, located at `protected/config/main.php`, you will see the following
    declaration about halfway down:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的骨架应用程序已经运行起来了，让我们开始着手正确地连接到数据库。事实上，骨架应用程序已自动配置为使用数据库。使用`yiic`工具的副产品是，我们的新应用程序配置为使用SQLite数据库。如果您在`protected/config/main.php`中的主应用程序配置文件中查看，您将在文件的中间位置看到以下声明：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And you can also verify the existence of `protected/data/testdrive.db`, which
    is the SQLite database it is configured to use.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以验证`protected/data/testdrive.db`的存在，这是配置要使用的SQLite数据库。
- en: Since we have already made the decision to use MySQL, we'll need to make some
    configuration changes. However, before we change the configuration to use a MySQL
    database server, let's briefly talk about Yii and databases more generally.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经决定使用MySQL，我们需要进行一些配置更改。但是，在我们改变配置以使用MySQL数据库服务器之前，让我们简要讨论一下Yii和数据库更一般的情况。
- en: Yii and databases
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yii和数据库
- en: Yii provides great support for database programming. Yii's **Data Access Objects**
    (**DAO**) are built on top of the **PHP D** **ata Objects** (**PDO**) extension
    ([http://php.net/pdo](http://php.net/pdo)). This is a database abstraction layer
    that enables the application to interact with the database through a database-independent
    interface. All the supported **database management systems** (**DBMS**) are encapsulated
    behind a single uniform interface. In this way, the code can remain database independent
    and the applications developed using Yii DAO can easily be switched to use a different
    DBMS without the need for modification.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Yii为数据库编程提供了很好的支持。 Yii的**数据访问对象**（**DAO**）是建立在**PHP数据对象**（**PDO**）扩展（[http://php.net/pdo](http://php.net/pdo)）之上的。这是一个数据库抽象层，使应用程序能够通过一个与数据库无关的接口与数据库交互。所有支持的**数据库管理系统**（**DBMS**）都封装在一个统一的接口后面。这样，代码可以保持与数据库无关，使用Yii
    DAO开发的应用程序可以轻松地切换到使用不同的DBMS，而无需进行修改。
- en: 'To establish a connection with a supported DBMS, you can simply create a new
    `CDbConnection` instance:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要与支持的DBMS建立连接，您可以简单地创建一个新的`CDbConnection`实例：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here the format of the `$dsn` variable depends on the specific PDO database
    driver being used. Some common formats include:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`$dsn`变量的格式取决于所使用的特定PDO数据库驱动程序。一些常见的格式包括：
- en: 'SQLite: `sqlite:/path/to/dbfile`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite：`sqlite:/path/to/dbfile`
- en: 'MySQL: `mysql:host=localhost;dbname=testdb`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL：`mysql:host=localhost;dbname=testdb`
- en: 'PostgreSQL: `pgsql:host=localhost;port=5432;dbname=testdb`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL：`pgsql:host=localhost;port=5432;dbname=testdb`
- en: 'SQL Server: `mssql:host=localhost;dbname=testdb`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server：`mssql:host=localhost;dbname=testdb`
- en: 'Oracle: `oci:dbname=//localhost:1521/testdb`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle：`oci:dbname=//localhost:1521/testdb`
- en: '`CDbConnection` also extends from `CApplicationComponent`, which allows it
    to be configured as an application component. This means that we can add it to
    the components property of the application, and customize the class and property
    values in the main configuration file. This is our preferred approach, which we
    will detail next.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`CDbConnection`还继承自`CApplicationComponent`，这使它可以被配置为应用程序组件。这意味着我们可以将其添加到应用程序的components属性中，并在主配置文件中自定义类和属性值。这是我们首选的方法，接下来我们将详细介绍。'
- en: Adding a db connection as an application component
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将db连接添加为应用程序组件
- en: Let's take a quick step back. When we created the initial application, we specified
    the application type to be a web application. Remember we specified `webapp` on
    the command line. Doing so specified that the application singleton class that
    is created upon each request be of the type `CWebApplication`. This Yii application
    singleton is the execution context within which all request processing is run.
    Its main task is to resolve the user request and route it to an appropriate controller
    for further processing. This was represented as the Yii Application Router back
    in the diagrams used in [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*,
    when we covered the request routing. It also serves as the central place for keeping
    application-level configuration values.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速回顾一下。当我们创建初始应用程序时，我们指定了应用程序类型为Web应用程序。记住我们在命令行上指定了`webapp`。这样做指定了每个请求创建的应用程序单例类的类型为`CWebApplication`。这个Yii应用程序单例是所有请求处理运行的执行上下文。它的主要任务是解析用户请求并将其路由到适当的控制器进行进一步处理。这在[第1章](ch01.html
    "Chapter 1. Meet Yii")中使用的图表中表示为Yii应用程序路由器，*Meet Yii*，当我们介绍请求路由时。它还作为保存应用程序级配置值的中心位置。
- en: To customize our application configuration, we normally provide a configuration
    file to initialize its property values when the application instance is being
    created. The main application configuration file is located in `/protected/config/main.php`.
    This is a PHP file containing an array of key-value pairs. Each key represents
    the name of a property of the application instance, and each value is the corresponding
    property's initial value. If you open up this file, you will see that several
    settings have already been configured for us.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要自定义我们的应用程序配置，通常我们会提供一个配置文件来初始化应用程序实例创建时的属性值。主应用程序配置文件位于`/protected/config/main.php`。这是一个包含键值对数组的PHP文件。每个键代表应用程序实例的属性名称，每个值是相应属性的初始值。如果您打开这个文件，您会看到已经为我们配置了几个设置。
- en: Adding an application component to the configuration is easy. Open up the file
    (`/protected/config/main.php`) and locate the components property.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 向配置中添加应用程序组件很容易。打开文件（`/protected/config/main.php`）并找到组件属性。
- en: 'We can see that there are entries already specifying a `log` and `user` application
    component. These will be covered in the subsequent chapters. We can also see (and
    as we noted previously) that there is a `db` component there as well, configured
    to use a SQLite connection to a SQLite database located at `protected/data/testdrive.db`.
    There is also a commented out section that defines this `db` component to use
    a MySQL database. All we need to do is remove the SQLite `db` component definition,
    uncomment the section that defines the MySQL component, and then make the appropriate
    changes to match your database name, username, and password so the connection
    can be made. The following code shows this change:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到已经有条目指定了`log`和`user`应用程序组件。这些将在后续章节中介绍。我们还可以看到（正如我们之前注意到的），还有一个`db`组件，配置为使用SQLite连接到位于`protected/data/testdrive.db`的SQLite数据库。还有一个被注释掉的部分，定义了这个`db`组件使用MySQL数据库。我们所需要做的就是删除SQLite
    `db`组件定义，取消注释定义MySQL组件的部分，然后进行相应的更改以匹配您的数据库名称、用户名和密码，以便进行连接。以下代码显示了这个更改：
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This assumes that a MySQL database has been created called `trackstar` and is
    available to connect using the localhost. Depending on your environment, you may
    need to specify the localhost IP of `127.0.0.1` rather than `localhost`. One of
    the great benefits of making this an application component is that now, anywhere
    throughout our application, we can reference the database connection simply as
    a property of the main Yii application `Yii::app()->db`. Similarly, we can use
    this as a reference for any of the other components defined in the `config` file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设已经创建了一个名为`trackstar`的MySQL数据库，并且可以使用localhost连接。根据您的环境，您可能需要指定`127.0.0.1`而不是`localhost`作为localhost的IP。将其作为应用程序组件的一个巨大好处是，现在在我们的应用程序的任何地方，我们可以简单地将数据库连接引用为主Yii应用程序`Yii::app()->db`的属性。同样，我们可以将其用作`config`文件中定义的任何其他组件的引用。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `charset` property when set to `'utf8'` sets the character set used for
    the database connection. This property is only used for MySQL and PostgreSQL databases.
    It will default to null, which means that it will use the default charset. We
    are setting it here to ensure proper `utf8` unicode character support for our
    PHP application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当`charset`属性设置为`'utf8'`时，它设置了数据库连接使用的字符集。这个属性只用于MySQL和PostgreSQL数据库。它将默认为null，这意味着它将使用默认字符集。我们在这里设置它是为了确保我们的PHP应用程序正确支持`utf8`
    unicode字符。
- en: The `emulatePrepare => true` configuration sets a PDO attribute (PDO::ATTR_EMULATE_PREPARES)
    to `true`, which is recommended if you are using PHP 5.1.3 or higher. This was
    added to PHP 5.1.3, and when used, causes the PDO native query parser to be used
    rather than the native prepared statements APIs in the MySQL client. The native
    prepared statements in the MySQL client cannot take advantage of the query cache,
    and as such have been known to result in poor performance. The PDO native query
    parser can use the query cache, and so it is recommended to use this option if
    available (PHP 5.1.3 or higher).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`emulatePrepare => true`配置将PDO属性（PDO::ATTR_EMULATE_PREPARES）设置为`true`，如果您使用的是PHP
    5.1.3或更高版本，则建议这样做。这是在PHP 5.1.3中添加的，当使用时，会导致使用PDO本机查询解析器而不是MySQL客户端中的本机准备语句API。MySQL客户端中的本机准备语句无法利用查询缓存，因此已知会导致性能不佳。PDO本机查询解析器可以使用查询缓存，因此建议在可用时使用此选项（PHP
    5.1.3或更高版本）。'
- en: So, we have specified a MySQL database called `trackstar` as well as the username
    and password needed to connect to this database. We did not show you how to create
    such a database in MySQL. We assume you understand how to set up a MySQL database
    and how to use it. Please refer to your specific database documentation if you
    are unsure of how to create a new database, called `trackstar`, and configure
    a username and password for connectivity.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已指定了一个名为`trackstar`的MySQL数据库，以及连接到该数据库所需的用户名和密码。我们没有向您展示如何在MySQL中创建这样的数据库。我们假设您了解如何设置MySQL数据库以及如何使用它。如果您不确定如何创建名为`trackstar`的新数据库，并为连接配置用户名和密码，请参考您特定的数据库文档。
- en: Testing the database connection
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试数据库连接
- en: Before we move on, we should ensure that our database connection is actually
    working. There are a few ways we could do this. We'll look at two approaches.
    In the first approach, we'll use the `yiic` command-line tool to start an interactive
    shell for our application and ensure that there are no errors when we attempt
    to reference the application `db` component. Then we'll provide a second approach
    that will introduce us to unit testing in Yii with PHPUnit.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们应该确保我们的数据库连接实际上是有效的。我们可以通过几种方式来做到这一点。我们将看两种方法。在第一种方法中，我们将使用`yiic`命令行工具启动应用程序的交互式shell，并确保在尝试引用应用程序`db`组件时没有错误。然后我们将提供第二种方法，介绍Yii中使用PHPUnit进行单元测试。
- en: Using the interactive shell
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用交互式shell
- en: We'll start off with a simple test using the Yii interactive shell. As you recall,
    we used the `webapp` command along with the `yiic` command-line utility to create
    our new application. Another command to use with this utility is `shell`. This
    allows you to run PHP commands within the context of the Yii application, directly
    from the command line.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使用Yii交互式shell开始进行简单测试。您可能还记得，我们使用`webapp`命令以及`yiic`命令行实用程序来创建我们的新应用程序。与此实用程序一起使用的另一个命令是`shell`。这允许您直接从命令行在Yii应用程序的上下文中运行PHP命令。
- en: To start the shell, navigate to the root directory of the application, that
    is the directory that contains the `index.php` entry script `Webroot/trackstar/`.
    Then run the `yiic` utility, passing in `shell` as the command (refer to the following
    screenshot).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动shell，请导航到应用程序的根目录，即包含`index.php`入口脚本`Webroot/trackstar/`的目录。然后运行`yiic`实用程序，将`shell`作为命令传递（参考以下截图）。
- en: '![Using the interactive shell](graphics/8727_03_03.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![使用交互式shell](graphics/8727_03_03.jpg)'
- en: This starts the shell and allows you to enter the commands directly after the
    **>>** prompt.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动shell，并允许您在**>>**提示之后直接输入命令。
- en: 'What we want to do to test our connection is ensure that our database connection
    application component is accessible. We can simply `echo` out the connection string
    and verify that it returns what we set it to in our configuration. So from the
    shell prompt type the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是测试我们的连接，确保我们的数据库连接应用程序组件是可访问的。我们可以简单地`echo`出连接字符串，并验证它是否返回我们在配置中设置的内容。因此，从shell提示符中输入以下内容：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It should echo something similar to the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该回显类似于以下内容：
- en: '**mysql:host=localhost;dbname=trackstar**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**mysql:host=localhost;dbname=trackstar**'
- en: This demonstrates that the `db` application component is configured correctly
    and available for use in our application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明`db`应用程序组件已正确配置并可供我们的应用程序使用。
- en: Automated testing – unit and functional tests
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化测试-单元和功能测试
- en: Gathering feedback is of fundamental importance to application development;
    feedback from the users of the application and other project stakeholders, feedback
    from the development team members, and feedback directly from the software itself.
    Developing software in a manner that will allow it to tell you when something
    is broken can turn the fear associated with integrating and deploying applications
    into boredom. The method by which you can empower your software with this feedback
    mechanism is writing automated unit and functional tests, and then executing them
    repeatedly and often.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 收集反馈对应用程序开发至关重要；来自应用程序用户和其他项目利益相关者的反馈，来自开发团队成员的反馈，以及来自软件本身的直接反馈。以一种允许软件在出现故障时告诉您的方式开发软件，可以将与集成和部署应用程序相关的恐惧转化为无聊。您可以赋予软件这种反馈机制的方法是编写自动化单元和功能测试，然后重复并经常执行它们。
- en: Unit and functional testing
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元和功能测试
- en: Unit tests are written to provide the developer with verification that the code
    is doing the right things. Functional tests are written to provide the developer,
    as well as other project stakeholders, with verification that the application
    as a whole is doing things the right way.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是为了向开发人员提供代码是否正确执行的验证。功能测试是为了向开发人员以及其他项目利益相关者提供应用程序是否以正确方式执行的验证。
- en: Unit tests
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit tests are the tests that focus on the smallest units within a software
    application. In an object-oriented application, such as a Yii web application,
    the smallest units are the public methods that make up the interfaces to the classes.
    Unit tests should focus on one single class and not require other classes or objects
    to run it. Their purpose is to validate that a single unit of code is working
    as expected.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是专注于软件应用程序中最小单元的测试。在面向对象的应用程序中，比如Yii web应用程序，最小的单元是构成类接口的公共方法。单元测试应该专注于一个单一的类，不需要其他类或对象来运行。它们的目的是验证单元代码是否按预期工作。
- en: Functional tests
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 功能测试
- en: Functional tests focus on testing the end-to-end feature functionality of the
    application. These tests exist at a higher level than the unit tests and typically
    require multiple classes or objects to run. Their purpose is to validate that
    a given feature of the application is working as expected.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试专注于测试应用程序的端到端功能功能。这些测试存在于比单元测试更高的级别，并且通常需要多个类或对象来运行。它们的目的是验证应用程序的特定功能是否按预期工作。
- en: Benefits of testing
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试的好处
- en: There are many benefits to writing unit and functional tests. For one, they
    are a great way to provide documentation. Unit tests can quickly tell the exact
    story of why a block of code exists. Similarly, the functional tests document
    what features are implemented within an application. If you stay diligent in writing
    these tests, then the documentation continues to evolve naturally as the application
    evolves.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试和功能测试有许多好处。首先，它们是提供文档的好方法。单元测试可以快速告诉代码块存在的确切原因。同样，功能测试记录了应用程序中实现的功能。如果您坚持编写这些测试，那么随着应用程序的发展，文档将自然而然地不断发展。
- en: They are also invaluable as a feedback mechanism to constantly reassure the
    developer and other project stakeholders that the code and application is working
    as expected. You run your tests every time you make changes to the code and get
    immediate feedback on whether or not something that you altered inadvertently
    changed the expected behavior of the system. You can then address these issues
    immediately. This really increases the confidence that developers have with the
    application and translates to less bugs and more successful projects.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还是一种宝贵的反馈机制，不断向开发人员和其他项目利益相关者保证代码和应用程序按预期工作。每次对代码进行更改时都运行测试，并立即获得反馈，告诉您是否无意中更改了系统的预期行为。然后您可以立即解决这些问题。这确实增加了开发人员对应用程序的信心，并转化为更少的错误和更成功的项目。
- en: This immediate feedback also helps to facilitate change and improve the design
    of the code. A developer is more likely to make improvements to existing code,
    if a suite of tests are in place to immediately provide feedback as to whether
    the changes made altered the application behavior. The confidence provided by
    a suite of unit and functional tests allows developers to write better software,
    release more stable applications, and ship quality products.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这种即时反馈也有助于促进变革和改进代码的设计。如果一套测试能够立即提供反馈，告诉开发人员所做的更改是否改变了应用程序的行为，开发人员更有可能对现有代码进行改进。单元测试和功能测试套件提供的信心使开发人员能够编写更好的软件，发布更稳定的应用程序，并交付高质量的产品。
- en: Testing in Yii
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Yii中的测试
- en: As of version 1.1, Yii is tightly integrated with the PHPUnit ([http://www.phpunit.de/](http://www.phpunit.de/))
    and Selenium Remote Control ([http://seleniumhq.org/projects/remote-control/](http://seleniumhq.org/projects/remote-control/))
    testing frameworks. You may certainly test Yii PHP code with any of the testing
    frameworks available. However, the tight integration of Yii with the two previously
    mentioned frameworks makes things even easier. And making things easy is one of
    our primary goals here.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.1版本开始，Yii与PHPUnit ([http://www.phpunit.de/](http://www.phpunit.de/))和Selenium
    Remote Control ([http://seleniumhq.org/projects/remote-control/](http://seleniumhq.org/projects/remote-control/))测试框架紧密集成。您可以使用任何可用的测试框架测试Yii
    PHP代码。但是，Yii与前述两个框架的紧密集成使事情变得更加容易。使事情变得容易是我们的主要目标之一。
- en: 'When we used the `yiic webapp` console command to create our new web application,
    we noticed that many files and directories were automatically created for us.
    The ones among these that are relevant to writing and executing automated tests
    are the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`yiic webapp`控制台命令创建新的Web应用程序时，我们注意到许多文件和目录会自动为我们创建。其中与编写和执行自动化测试相关的是以下内容：
- en: '| File/directory | Contains/stores |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 文件/目录 | 包含/存储 |'
- en: '| --- | --- |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `trackstar/` | Contains all the files listed in the file/directory column
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `trackstar/` | 包含文件/目录列出的所有文件 |'
- en: '| `protected/` | Protected application files |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `protected/` | 受保护的应用程序文件 |'
- en: '| `tests/` | Tests for the application |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `tests/` | 应用程序的测试 |'
- en: '| `fixtures/` | Database fixtures |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `fixtures/` | 数据库固定装置 |'
- en: '| `functional/` | Functional tests |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `functional/` | 功能测试 |'
- en: '| `unit/` | Unit tests |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `unit/` | 单元测试 |'
- en: '| `report/` | Coverage reports |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `report/` | 覆盖率报告 |'
- en: '| `bootstrap.php` | The script executed at the very beginning of the tests
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `bootstrap.php` | 在测试开始时执行的脚本 |'
- en: '| `phpunit.xml` | The PHPUnit configuration file |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `phpunit.xml` | PHPUnit配置文件 |'
- en: '| `WebTestCase.php` | The base class for web-based functional tests |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `WebTestCase.php` | 用于基于Web的功能测试的基类 |'
- en: You can place your test files into three main directories, namely `fixtures`,
    `functional`, and `unit`. The `report` directory is used to store the generated
    code coverage reports.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将测试文件放入三个主要目录，即`fixtures`、`functional`和`unit`。`report`目录用于存储生成的代码覆盖率报告。
- en: Note
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The PHP extension, XDebug, must be installed in order to generate reports. For
    details on this installation, see [http://xdebug.org/docs/install](http://xdebug.org/docs/install).
    This extension is not required for the following example.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 必须安装PHP扩展XDebug才能生成报告。有关此安装的详细信息，请参阅[http://xdebug.org/docs/install](http://xdebug.org/docs/install)。此示例不需要此扩展。
- en: Unit tests
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: A unit test in Yii is written as a PHP class that extends from the framework
    class `CTestCase`. The conventions prescribe it to be named `AbcTest`, where `Abc`
    is replaced by the name of the class being tested. For example, if we were to
    test the `MessageController` class in our "Hello, World!" application from [Chapter
    2](ch02.html "Chapter 2. Getting Started"), *Getting Started*, we would name the
    test class `MessageControllerTest`. This class is saved in a file called `MessageControllerTest.php`
    under the directory `protected/tests/unit/`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中，单元测试是以扩展自框架类`CTestCase`的PHP类编写的。约定规定它的名称应为`AbcTest`，其中`Abc`被要测试的类的名称替换。例如，如果我们要测试[第2章](ch02.html
    "第2章. 入门")中的“Hello, World!”应用程序中的`MessageController`类，我们将命名测试类为`MessageControllerTest`。这个类保存在`protected/tests/unit/`目录下的名为`MessageControllerTest.php`的文件中。
- en: The test class primarily has a set of test methods named `testXyz`, where `Xyz`
    is often the same as the method name for which you are writing the test.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 测试类主要有一组名为`testXyz`的测试方法，其中`Xyz`通常与您编写测试的方法名称相同。
- en: Continuing with the `MessageController` example, if we were testing our `actionHelloworld()`
    method, we would name the corresponding test method `testActionHelloworld()` in
    our `MessageControllerTest` class.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 继续使用`MessageController`示例，如果我们正在测试`actionHelloworld()`方法，我们将在`MessageControllerTest`类中命名相应的测试方法为`testActionHelloworld()`。
- en: Installing PHPUnit
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装PHPUnit
- en: As of version 1.1, Yii is tightly integrated with the PHPUnit ([http://www.phpunit.de/](http://www.phpunit.de/))
    testing framework.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.1版本开始，Yii与PHPUnit（[http://www.phpunit.de/](http://www.phpunit.de/)）测试框架紧密集成。
- en: 'In order to follow through with this example, you will need to install PHPUnit.
    This should be done using the Pear Installer. (For more information on Pear, see
    [http://pear.php.net/](http://pear.php.net/).) Please visit the following URL
    for more information on how to install PHPUnit based on your environment configuration:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随这个示例，您需要安装PHPUnit。这应该使用Pear Installer完成。（有关Pear的更多信息，请参阅[http://pear.php.net/](http://pear.php.net/)。）请访问以下网址，了解如何根据您的环境配置安装PHPUnit的更多信息：
- en: '[https://github.com/sebastianbergmann/phpunit/](https://github.com/sebastianbergmann/phpunit/)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/sebastianbergmann/phpunit/](https://github.com/sebastianbergmann/phpunit/)'
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'It is certainly beyond the scope of this book to specifically cover PHPUnit''s
    testing features. It is recommended that you take some time to go through the
    documentation to get a feel for the jargon and for writing basic unit tests: [https://github.com/sebastianbergmann/phpunit/](https://github.com/sebastianbergmann/phpunit/)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的范围当然不包括具体介绍PHPUnit的测试功能。建议您花些时间阅读文档，了解术语和编写基本单元测试的感觉：[https://github.com/sebastianbergmann/phpunit/](https://github.com/sebastianbergmann/phpunit/)
- en: Testing the connection
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试连接
- en: 'Assuming you have successfully installed PHPUnit, we can add a test for our
    database connection under `protected/tests/unit/`. Let''s create a simple database
    connectivity test file under this directory called `DbTest.php`. Add this new
    file with the following contents:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已成功安装了PHPUnit，我们可以在`protected/tests/unit/`下为我们的数据库连接添加一个测试。让我们在这个目录下创建一个名为`DbTest.php`的简单数据库连接性测试文件。添加以下内容的新文件：
- en: '[PRE5]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here we have added a fairly trivial test. The `assertTrue()` method, which
    is a part of PHPUnit, is an assertion that will pass if the argument passed to
    it is `true`, and it will fail if it is `false`. In this case, it is testing if
    `true` is `true`. So this test will certainly pass. We are doing this to make
    sure that our new application is working as expected, for testing with PHPUnit.
    Navigate to the tests folder and execute this new test:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个相当琐碎的测试。`assertTrue()`方法是PHPUnit的一部分，它是一个断言，如果传递给它的参数为`true`，则会通过，如果为`false`，则会失败。在这种情况下，它正在测试`true`是否为`true`。因此，这个测试肯定会通过。我们这样做是为了确保我们的新应用程序按预期工作，用于PHPUnit测试。转到tests文件夹并执行这个新测试：
- en: '[PRE6]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If for some reason this test failed on your system, you may need to change `protected/tests/bootstrap.php`
    so that the variable `$yiit` properly points to your `/YiiRoot/yiit.php` file.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因此测试在您的系统上失败，您可能需要更改`protected/tests/bootstrap.php`，以便变量`$yiit`正确指向您的`/YiiRoot/yiit.php`文件。
- en: Confident that our testing framework is working as expected within our newly
    created TrackStar application, we can use this to write a test for the `db` connection.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 确信我们的测试框架在新创建的TrackStar应用程序中按预期工作，我们可以使用它来为`db`连接编写测试。
- en: 'Change the `assertEquals(true)` statement in the `testConnection()` test method
    to:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将`testConnection()`测试方法中的`assertEquals(true)`语句更改为：
- en: '[PRE7]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And rerun the test:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重新运行测试：
- en: '[PRE8]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you recall, since we configured our database connection as an application
    component named `db`, `Yii::app()->db` should return an instance of the `CDbConnection`
    class. If the application failed to establish a database connection, this test
    would return an error. Since the test still passes, we can move forward with the
    confidence that the database connection is set up properly.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所记得的，由于我们将数据库连接配置为名为`db`的应用程序组件，`Yii::app()->db`应返回`CDbConnection`类的实例。如果应用程序未能建立数据库连接，此测试将返回错误。由于测试仍然通过，我们可以放心地继续，确保数据库连接已正确设置。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced the task-tracking application, TrackStar, which we will
    be developing throughout the rest of this book. We talked about what the application
    is and what it does, and provided some high-level requirements for the application
    in the form of informal user stories. We then identified some of the main domain
    objects we will need to create, as well as worked through some of the data we
    will need to be able to house and manage.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了任务跟踪应用程序TrackStar，我们将在本书的其余部分中开发。我们讨论了应用程序是什么以及它的功能，并以非正式用户故事的形式提供了一些高级需求。然后，我们确定了一些需要创建的主要领域对象，以及解决一些需要存储和管理的数据。
- en: We then took our first step towards building our TrackStar application. We created
    a new application with all of the working functionality that comes "for free"
    from the autogenerated code. We also configured our application to be connected
    to a MySQL database and demonstrated two approaches to test that connection. One
    approach demonstrated Yii's integration with PHPUnit and how to write automated
    tests for your Yii application.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们迈出了构建TrackStar应用程序的第一步。我们创建了一个新的应用程序，其中包含从自动生成的代码中“免费”获得的所有工作功能。我们还配置了我们的应用程序连接到MySQL数据库，并演示了测试该连接的两种方法。一种方法演示了Yii与PHPUnit的集成以及如何为Yii应用程序编写自动化测试。
- en: In the next chapter, we will get to finally sink our teeth into more sophisticated
    features. We will begin to do some actual coding as we implement the needed functionality
    to manage our project entities within the application.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将最终开始深入研究更复杂的功能。我们将开始进行一些实际的编码，以实现在应用程序中管理项目实体所需的功能。
