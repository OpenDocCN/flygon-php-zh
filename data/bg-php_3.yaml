- en: Chapter 3. Functions and Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。函数和类
- en: In the previous chapter, we saw how to declare and define an array and covered
    multiple types of arrays such as the indexed array, associative arrays, and so
    on. We also saw the various operations that can be performed on an array.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了如何声明和定义数组，并涵盖了多种类型的数组，如索引数组、关联数组等。我们还看到了可以对数组执行的各种操作。
- en: In this chapter, we will identify how to define and call functions. We will
    also learn how to create classes, and how to use the classes and functions together.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解如何定义和调用函数。我们还将学习如何创建类，以及如何将类和函数一起使用。
- en: Functions are blocks of code that are packaged into reusable code. A function
    is a piece of code that returns a value by doing some processing, taking one or
    more outputs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是打包成可重复使用代码的代码块。函数是一段代码，通过进行一些处理，获取一个或多个输出来返回一个值。
- en: A class is a blueprint for an object. Classes form the structure of data and
    the actions that utilize the information to create objects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 类是对象的蓝图。类形成数据的结构和利用信息创建对象的操作。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Define and call functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和调用函数
- en: Define classes and create instances of the class using the `new` keyword
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义类并使用`new`关键字创建类的实例
- en: Implement and call `public` and `static` class functions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和调用`public`和`static`类函数
- en: Functions
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: Functions are like a machine with a fix defined logic. On one end, it takes
    a parameter, processes it, and returns a value based on the input and function
    definition.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 函数就像一个具有固定定义逻辑的机器。在一端，它接受一个参数，对其进行处理，并根据输入和函数定义返回一个值。
- en: 'Functions are used to reuse a particular block of code again and again instead
    of defining it when needed all the time:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 函数用于重复使用特定的代码块，而不是在需要时一直定义它：
- en: '![Functions](graphics/3_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![函数](graphics/3_01.jpg)'
- en: 'To define a function, we use the keyword `function,` followed by the name that
    we want to give the function; and, within curly brackets, we define the operation
    of the function. For example, if we want to create a function to print out, "Hello
    World," we write the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义函数，我们使用关键字`function`，后跟我们要给函数的名称；在花括号内，我们定义函数的操作。例如，如果我们想创建一个打印“Hello World”的函数，我们写如下：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we were to write this function in a new file and run it, it wouldn't display
    anything, and that's because we haven't called the function; we have only defined
    it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将这个函数写在一个新文件中并运行它，它不会显示任何内容，这是因为我们还没有调用函数；我们只是定义了它。
- en: 'To call the function, we add the following line of code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用函数，我们添加以下代码行：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When creating functions, you sometimes need to have additional parameters passed
    to your function; this can be done when defining your new function.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建函数时，有时需要将附加参数传递给您的函数；这可以在定义新函数时完成。
- en: 'Let''s modify the previous example to accept a `name` parameter:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改前面的示例以接受一个`name`参数：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To pass the name, we define a variable within the parentheses following the
    function name.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递名称，我们在函数名后面的括号内定义一个变量。
- en: 'Now, when we call the function, we can pass whatever value we want through
    that variable, and it will be printed out:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们调用函数时，我们可以通过该变量传递任何值，并且它将被打印出来。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Sometimes, when we create a function, we know that there will be cases where
    we won't pass a value. In those cases, we will want a default value to be passed
    automatically.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当我们创建一个函数时，我们知道会有一些情况下我们不会传递一个值。在这些情况下，我们希望自动传递一个默认值。
- en: 'To set a default value, you should assign it to the specified variable when
    you set it, as shown here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置默认值，您应该在设置变量时将其分配给指定的变量，如下所示：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Functions can be used not only to print messages to the screen but also to
    return a value back, which can be stored in a variable or used in another function.
    For example, if you create an addition function, you might want to return the
    sum:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 函数不仅可以用于将消息打印到屏幕上，还可以返回一个值，该值可以存储在变量中或用于另一个函数。例如，如果您创建一个加法函数，您可能希望返回总和：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have a function that can return a value, let''s see how to use
    it to store a value:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个可以返回值的函数，让我们看看如何使用它来存储一个值：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In your program, you may sometimes need to dynamically call a function with
    efficiency. PHP gives you a helpful tool to do just that - `call_user_func_array`.
    The `call_user_func_array` function allows you to call a function by passing its
    name as the first parameter, and provide arguments as an array through the second
    parameter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的程序中，您有时可能需要以高效的方式动态调用函数。PHP为您提供了一个有用的工具来做到这一点-`call_user_func_array`。`call_user_func_array`函数允许您通过将其名称作为第一个参数传递来调用函数，并通过第二个参数以数组的形式提供参数。
- en: Creating a Simple Function
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个简单的函数
- en: 'In this section, we are going to create a simple function that will calculate
    the discount of a given percentage. To do this, follow these steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个简单的函数，用于计算给定百分比的折扣。要做到这一点，请按照以下步骤进行：
- en: Open your code editor and create a new file, `function.php`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的代码编辑器并创建一个新文件，`function.php`。
- en: 'Within the new file, create your open and close php tags:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中，创建您的打开和关闭php标记：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we are going to create two new variables: `$sweaterPrice` and `$precentOff.
    T`hey will store the original price of the product, as well as the percent off:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建两个新变量：`$sweaterPrice`和`$precentOff`。它们将存储产品的原始价格以及折扣百分比。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we have our variables, we can define our function. Our function is
    simple; it accepts a price and discount percentage. Inside of the function, we
    multiply the price by the discount percentage and return the product:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了变量，我们可以定义我们的函数。我们的函数很简单；它接受一个价格和折扣百分比。在函数内部，我们将价格乘以折扣百分比并返回乘积。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we can go ahead and print our message about the discount to our users,
    using our newly created function:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以继续向我们的用户打印关于折扣的消息，使用我们新创建的函数：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that you have an understanding of functions, you should be comfortable with
    developing reusable code and applying them. In the next section, we will learn
    about classes. Classes will give us a better understanding of structuring code
    and properties into a neat package.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了函数，应该可以轻松地开发可重用的代码并应用它们。在下一节中，我们将学习有关类的知识。类将使我们更好地理解如何将代码和属性结构化为一个整洁的包。
- en: Classes
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类
- en: In this section, you are going to learn about classes. Classes fall into a type
    of programming called object-oriented programming, which simply means organizing
    your code into what is known as an object. Objects allow you to create a base
    package that has its own variables and methods, exclusive to the object.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习有关类的知识。类属于一种称为面向对象编程的编程类型，简单地意味着将代码组织成所谓的对象。对象允许您创建一个具有自己变量和方法的基本包，专属于该对象。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Think of a class as a blueprint for an object. There is only one class, but
    you can have many instantiations. This can be compared to the blueprint for a
    house. Many new homes can be built from the same blueprint.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 把类想象成一个对象的蓝图。只有一个类，但可以有许多实例。这可以与房子的蓝图相比。许多新房子可以根据相同的蓝图建造。
- en: 'Let''s suppose that we want to create a class that holds our student''s information.
    We would define it as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想创建一个保存学生信息的类。我们可以定义如下：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is the basic student class, in its simplest form. We start by using the
    keyword class, followed by the name of our class, which, in this case, is `Student`.
    Next, we create a code block with open and close parentheses. Within the open
    and close parenthesis, we add the contents of our class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基本的学生类，以其最简单的形式。我们首先使用关键字`class`，然后是我们类的名称，这种情况下是`Student`。接下来，我们创建一个带有开放和关闭括号的代码块。在开放和关闭括号内，我们添加我们类的内容。
- en: 'This leads to the next section for classes: member variables. We worked with
    variables in [Chapter 1](ch01.html "Chapter 1. Getting Started with PHP"), *Getting
    Started with PHP*, of this book. As a refresher, variables act as a container
    that allows you to store data temporarily. Member variables have the same function,
    but are scoped within the boundaries of a given class or class instance.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了类的下一部分：成员变量。我们在本书的[第1章](ch01.html "第1章. PHP入门")中使用变量。作为一个复习，变量充当一个容器，允许您暂时存储数据。成员变量具有相同的功能，但其作用范围仅限于给定类或类实例的边界内。
- en: 'We will extend our `Student` class to store the student''s `name`, `age`, and
    `major`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展我们的`Student`类来存储学生的`姓名`、`年龄`和`专业`：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You should notice the `public` keyword that we use when defining our variables.
    This is important, as it tells the program how the data can be accessed. The `public`
    keyword simply states that you can access this data directly.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意到我们在定义变量时使用的`public`关键字。这很重要，因为它告诉程序如何访问数据。`public`关键字简单地表示您可以直接访问这些数据。
- en: 'Now that we have our class ready, we can create a new instance of the class
    and assign it to a variable that we can use to interact with the class''s properties:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的类已经准备好了，我们可以创建一个类的新实例，并将其赋给一个变量，我们可以用这个变量来与类的属性进行交互：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, we create a new instance of the student class by using the
    `new` keyword and assign it to a variable that we call `Michael`. Then, using
    the arrow syntax, we can access the public values to set the name, age, and major.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用`new`关键字创建了一个学生类的新实例，并将其赋给一个我们称之为`Michael`的变量。然后，使用箭头语法，我们可以访问公共值来设置姓名、年龄和专业。
- en: 'With classes, we sometimes have cases where we want to instantiate a new instance
    of a class with values. We can do this with a function called a constructor:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候我们想要用值实例化一个类的新实例。我们可以使用一个称为构造函数的函数来实现这一点：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This function is the default function that is called when you use the `new`
    keyword to instantiate a new class. For passing values, we would define the values
    within the construct function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数是使用`new`关键字实例化一个新类时调用的默认函数。要传递值，我们将在构造函数中定义这些值。
- en: 'For example, if we want to set the student''s info, we do the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想设置学生的信息，我们可以这样做：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we can provide the student''s info:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以提供学生的信息：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Along with the `public` variables, you can also define `private` variables.
    The `private` keyword makes variables accessible only by methods themselves. This
    means that the only time that you can access those types of variables is through
    the `constructor`, `getter` functions, and `setter` functions, which gives us
    a great insight into class functions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`public`变量，您还可以定义`private`变量。`private`关键字使变量只能由方法本身访问。这意味着您只能通过`constructor`、`getter`函数和`setter`函数访问这些类型的变量，这让我们对类函数有了很好的了解。
- en: 'Class functions allow you to create local functionality for a class to `set`,
    `get`, and mutate the data held within the class itself. For example, if we take
    our previous class definition and replace the `public` variables with `private`
    variables, it will look as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 类函数允许您为类创建本地功能，以`set`、`get`和改变类本身中保存的数据。例如，如果我们采用先前的类定义，并用`private`变量替换`public`变量，它将如下所示：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'What if we want to change these values, or to put these values somewhere else
    in the program? We define functions, of course:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要更改这些值，或者将这些值放在程序的其他位置，我们当然要定义函数：
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 3.php` file in the code files
    folder.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 3.php`文件。
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Keep in mind that using `set` and `get` in the name of the function isn't required;
    you can use whatever name you want to - something that allows you to easily remember
    what each function does. As you can see in the code example, you can update the
    `private` values using the respective `set` functions, and retrieve those values
    using the respective `get` functions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在函数的名称中使用`set`和`get`并不是必需的；您可以使用任何您想要的名称 - 一些可以让您轻松记住每个函数的作用。正如您在代码示例中所看到的，您可以使用相应的`set`函数更新`private`值，并使用相应的`get`函数检索这些值。
- en: 'For example, suppose that Michael changed his major:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设Michael改变了他的专业：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we want to see what his major is, we can use the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想知道他的专业是什么，我们可以使用以下代码：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Classes are a very powerful tool when it comes to any type of programming, mainly
    due to the idea of inheritance. Inheritance allows you to create a `base` class
    that defines general functions and variables and will be used by all of the children
    of the class.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 类是任何类型的编程中非常强大的工具，主要是由于继承的概念。继承允许您创建一个定义一般函数和变量的`base`类，并将被类的所有子类使用。
- en: 'For a simple example, let''s define an `Animal` class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 举个简单的例子，让我们定义一个`Animal`类：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This base class has a variable that holds the animal name and the sound that
    the animal makes. Additionally, it has a `public` function, `speak`, that will
    print the sound that the animal makes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基类有一个变量，保存动物的名称和动物发出的声音。此外，它有一个`public`函数，`speak`，将打印动物发出的声音。
- en: We can extend different types of animals from the `base` class.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从`base`类中扩展不同类型的动物。
- en: 'Let''s suppose that we want to define a `Dog` class:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想定义一个`Dog`类：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We simply change the value of the name and sound variables, and we have our
    `dog` class:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需更改名称和声音变量的值，就可以得到我们的`dog`类：
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When developing child classes, one thing to keep in mind is that you can extend
    the base constructor by doing the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发子类时，要记住的一件事是，您可以通过以下方式扩展基类构造函数：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Another useful section, when it comes to classes, are `static` functions. Static
    functions don''t require that an instance of a class is created in order to be
    used. This comes in handy when you build a class to house utility functions. To
    create a `static` function, you simply use the `static` keyword:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的部分，当涉及到类时，是`static`函数。静态函数不需要创建类的实例就可以使用。当您构建一个包含实用函数的类时，这将非常方便。要创建一个`static`函数，您只需使用`static`关键字：
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the preceding example, we create a static about function that will give
    a little description of the class, when called. You can use this function as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们创建了一个静态的about函数，当调用时会给出类的简短描述。您可以按照以下方式使用此函数：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Activity: Calculate the Monthly Pay of an Employee'
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：计算员工的月工资
- en: You have been assigned to calculate the monthly pay of an employee. The salary
    should be calculated and displayed on the screen.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您被指派计算员工的月工资。工资应该被计算并显示在屏幕上。
- en: The aim of this activity is for you to learn how to calculate the discount from
    a given percentage.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的目的是让您学会如何从给定的百分比中计算折扣。
- en: 'Follow these steps to perform this activity:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行此活动：
- en: Open your code editor and create a new file, `class.php`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的代码编辑器并创建一个新文件，`class.php`。
- en: 'Within the new file, create your open and close `php` tags:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件中，创建您的`php`标签：
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, define a base employee class:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义一个基本的员工类：
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 3.php` file in the code files
    folder.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 3.php`文件。
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'From this base class, we can go ahead and create an `employee` class that extends
    the base class. In this extended class, we will add an additional function, which
    will calculate the monthly pay of an employee:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这个基类中，我们可以继续创建一个扩展基类的`employee`类。在这个扩展类中，我们将添加一个额外的函数，用于计算员工的月工资：
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 3.php` file in the code files
    folder.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 3.php`文件。
- en: '[PRE29]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Lastly, we will use the new class to print the monthly pay:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将使用新类来打印月工资：
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 3.php` file in the code files
    folder.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 3.php`文件。
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about functions and classes. We covered how to define
    and call functions. We also covered how to define classes and use classes and
    functions together. As we begin to build larger and more complex projects, functions
    and classes will help us to create highly organized code and maintain best practices.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了函数和类。我们讲解了如何定义和调用函数。我们还讲解了如何定义类并将类和函数一起使用。随着我们开始构建更大更复杂的项目，函数和类将帮助我们创建高度组织的代码并保持最佳实践。
- en: In the next chapter, we will cover data operations like input and output data,
    catching and handling errors using error handling, and we will also cover the
    basics of MySQL.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将涵盖数据操作，如输入和输出数据，使用错误处理捕获和处理错误，我们还将介绍MySQL的基础知识。
