- en: Chapter 5. Replace global With Dependency Injection
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。用依赖注入替换全局变量
- en: At this point, all of our classes and functions have been consolidated to a
    central location, and all related `include` statements have been removed. We would
    prefer to start writing tests for our classes, but it is very likely that we have
    a lot of `global` variables embedded in them. These can cause a lot of trouble
    via action at a distance where modifying a `global` in one place changes its value
    in another place. The next step, then, is to remove all uses of the `global` keyword
    from our classes, and inject the necessary dependencies instead.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的类和函数都已经整合到一个中心位置，并且所有相关的`include`语句都已经被移除。我们更希望开始为我们的类编写测试，但很可能我们的类中有很多嵌入的`global`变量。这些可能会导致很多麻烦，因为在一个地方修改`global`会改变另一个地方的值。接下来的步骤是从我们的类中移除所有`global`关键字的使用，而是注入必要的依赖关系。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**What Is Dependency Injection?**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是依赖注入？**'
- en: Dependency injection means that we push our dependencies into a class from the
    outside, instead of pulling them into a class while inside the class. (U sing
    `global` pulls a variable into the current scope from the global scope, so it
    is the opposite of injection.) Dependency injection turns out to be very straightforward
    as a concept, but is sometimes difficult to adhere to as a discipline.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入意味着我们从外部将我们的依赖关系推入一个类，而不是在类内部将它们拉入一个类。（使用`global`从全局范围将变量拉入当前范围，因此它与注入相反。）依赖注入实际上是一个非常简单的概念，但有时很难作为一种纪律坚持。
- en: Global Dependencies
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局依赖
- en: 'To start with a naive example, let''s say an `Example` class needs a database
    connection. Here we create the connection inside a class method:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以一个天真的例子开始，假设一个`Example`类需要一个数据库连接。在这里，我们在一个类方法中创建连接：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We are creating the `Db` dependency inside the method that needs it. There
    are several problems with this. Some of them are:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在需要它的方法中创建了`Db`依赖。这样做有几个问题。其中一些是：
- en: Every time we call this method, we create a new database connection, which may
    strain our resources.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次调用这个方法时，我们都会创建一个新的数据库连接，这可能会耗尽我们的资源。
- en: If we ever need to change the connection parameters, we need to modify them
    in every place we create a connection.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们需要更改连接参数，我们需要在每个创建连接的地方进行修改。
- en: It is difficult to see from the outside of this class what its dependencies
    are.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很难从这个类的外部看出它的依赖关系是什么。
- en: 'After writing code like this, many developers discover the `global` keyword,
    and realize they can create the connection once in a setup file, then pull it
    in from the global scope:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 写完这样的代码后，许多开发人员发现了`global`关键字，并意识到他们可以在设置文件中创建一次连接，然后从全局范围中拉入它：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Even though we are still pulling in the dependency, this technique solves the
    problem of multiple database connections using up limited resources, since the
    same database connection is reused across the codebase. The technique also makes
    it possible to change our connection parameters in a single location, the `setup.php`
    file, instead of several locations. However, one problem remains, and one is added:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们仍然拉入依赖，这种技术解决了多个数据库连接使用有限资源的问题，因为相同的数据库连接在整个代码库中被重复使用。这种技术还使得我们可以在一个地方，即`setup.php`文件中，更改我们的连接参数，而不是在几个地方。然而，仍然存在一个问题，并且增加了一个问题：
- en: We still cannot see from the outside of the class what its dependencies are.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们仍然无法从类的外部看出它的依赖关系。
- en: If the `$db` variable is ever changed by any of the calling code, that change
    is reflected throughout the codebase, leading to debugging trouble.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`$db`变量被调用代码中的任何地方更改，那么这个更改将在整个代码库中反映出来，导致调试麻烦。
- en: The last point is a killer. If a method ever sets `$db = 'busted';` then the
    `$db` value is now a string, and not a database connection object, throughout
    the entire codebase. Likewise, if the `$db` object is modified, then it is modified
    for the entire codebase. This can lead to very difficult debugging sessions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点是致命的。如果一个方法将`$db = 'busted';`，那么`$db`的值现在是一个字符串，而不是整个代码库中的数据库连接对象。同样，如果`$db`对象被修改，那么它将在整个代码库中被修改。这可能导致非常困难的调试会话。
- en: The replacement process
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换过程
- en: 'Thus, we want to remove all `global` calls from the codebase to make it easier
    to troubleshoot, and to reveal the dependencies in our classes. Here is the general
    process we will use to replace `global` calls with dependency injection:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们希望从代码库中移除所有的`global`调用，以便更容易进行故障排除，并揭示我们类的依赖关系。以下是我们将使用的一般过程来用依赖注入替换`global`调用：
- en: Find a `global` variable in one of our classes.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的类中找到一个`global`变量。
- en: Move all `global` variables in that class to the constructor and retain their
    values as properties, and use the properties instead of the globals.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该类中的所有`global`变量移到构造函数中，并将它们的值保留为属性，并使用属性而不是全局变量。
- en: Spot check that the class still works.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 抽查类是否仍然有效。
- en: Convert the `global` calls in the constructor to constructor parameters.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构造函数中的`global`调用转换为构造函数参数。
- en: Convert all instantiations of the class to pass the dependencies.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将类的所有实例化转换为传递依赖关系。
- en: Spot check, commit, push, and notify QA.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 抽查，提交，推送，并通知QA。
- en: Repeat with the next `global` call in our class files, until none remain.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复处理我们类文件中的下一个`global`调用，直到没有剩余。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this process, we work *one class at a time* and not *one variable at a time*.
    The former is much less time-consuming and more unit-oriented than the latter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们*一次处理一个类*而不是*一次处理一个变量*。前者比后者耗时少，更注重单元。
- en: Find a global variable
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到一个全局变量
- en: This is easy with a project-wide search function. We search for `global` within
    the central class directory location, and get back a list of class files with
    that keyword in them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易通过项目范围的搜索功能实现。我们在中心类目录位置搜索`global`，然后得到一个包含该关键字的类文件列表。
- en: Convert global variables to properties
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将全局变量转换为属性
- en: 'Let''s say that our search revealed an `Example` class with code something
    like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的搜索发现了一个名为`Example`的类，其代码如下：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We now move the global variable to a property that gets set in the constructor,
    and convert the `fetch()` method to use the property:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将全局变量移动到在构造函数中设置的属性，并将“fetch（）”方法转换为使用该属性：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If there are multiple `global` calls inside the same class, we should convert
    all of them to properties in that class. We want to work *one class at a time*
    as this makes later parts of this process easier.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在同一个类中有多个“全局”调用，我们应该将它们全部转换为该类中的属性。我们希望*一次只处理一个类*，因为这样可以使后续过程更容易进行。
- en: Spot check the class
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽查类
- en: Now that we have converted `global` calls to properties in this one class, we
    need to test the application to make sure it still works. However, since there
    is no formal testing system in place yet, we pseudo-test or spot check by browsing
    to or otherwise invoking files that use the modified class.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将“全局”调用转换为此一个类中的属性，我们需要测试应用程序以确保它仍然可以正常工作。然而，由于尚未建立正式的测试系统，我们通过浏览或调用使用修改后的类的文件来进行伪测试或抽查。
- en: If we like, we can make an interim commit here once we are sure the application
    still works. We will not push to the central repository or notify QA just yet;
    all we want is a point to which we can roll back if later changes need to be undone.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果愿意，我们可以在确定应用程序仍然正常工作后进行临时提交。我们暂时不会推送到中央仓库或通知QA；我们只是想要一个可以回滚的点，以便在以后需要撤销更改时使用。
- en: Convert global properties to constructor parameters
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将全局属性转换为构造函数参数
- en: 'Once we ascertain that the class works with the properties in place, we need
    to convert the `global` calls in the constructor to use passed parameters instead.
    Given our `Example` class above, the converted version might look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定类在属性放置的情况下可以正常工作，我们需要将构造函数中的“全局”调用转换为使用传递的参数。鉴于我们上面的“示例”类，转换后的版本可能如下所示：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: All we have done here is remove the `global` call, and added a constructor parameter.
    We need to do this for every `global` in the constructor.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的只是移除“全局”调用，并添加构造函数参数。我们需要对构造函数中的每个“全局”都这样做。
- en: Since the `global` is for a particular class of object, we typehint the parameter
    to that class (in this case `Db`). If possible, we should typehint to an interface
    instead, so if the `Db` object implements a *DbInterface*, we should typehint
    to *DbInterface*. This will help with testing and later refactoring. We may also
    typehint to `array` or `callable` as appropriate. Not all `global` calls are for
    typed values, so not all parameters will need typehints (e.g., when the parameter
    is expected to be a string).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于“全局”是针对特定类的对象，我们将参数类型提示为该类（在本例中为“Db”）。如果可能的话，我们应该将参数类型提示为接口，因此如果“Db”对象实现了*DbInterface*，我们应该将类型提示为*DbInterface*。这将有助于测试和以后的重构。我们也可以根据需要将参数类型提示为“array”或“callable”。并非所有的“全局”调用都是针对有类型的值，因此并非所有的参数都需要类型提示（例如，当预期参数是字符串时）。
- en: Convert instantiations to use parameters
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将实例化转换为使用参数
- en: After converting `global` variables to constructor parameters, we will find
    that every instantiation of the class throughout the legacy application is now
    broken. This is because the constructor signature has changed. With that in mind,
    we now need to search *the entire codebase* (not just the classes) for instantiations
    of the class, and change the instantiations to the new signature.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在将“全局”变量转换为构造函数参数后，我们会发现遗留应用程序中类的每个实例化现在都已经失效。这是因为构造函数签名已经改变。考虑到这一点，我们现在需要搜索*整个代码库*（不仅仅是类）以查找类的实例化，并将实例化更改为新的签名。
- en: 'To search for instantiations, we use our project-wide search facility to find
    uses of the `new` keyword with our class name using a regular expression:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了搜索实例化，我们使用项目范围的搜索工具，使用正则表达式查找使用我们类名的“new”关键字：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The expression searches for the `new` keyword, followed by at least one character
    of whitespace, followed by a terminating non-word character (such as a parenthesis,
    space, or semicolon).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 该表达式搜索“new”关键字，后面至少有一个空白字符，然后是终止的非单词字符（例如括号、空格或分号）。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Formatting Issues**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**格式问题**'
- en: Legacy codebases are notorious for having messed-up formatting, which means
    this expression is imperfect in some situations. The expression as given here
    may not find instantiations where, for example, the `new` keyword is on one line,
    and the class name is the very next thing but is on the next line, not the same
    line.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留代码库以格式混乱而闻名，这意味着在某些情况下，这个表达式并不完美。这里给出的表达式可能无法找到实例化，例如，当“new”关键字在一行上，类名紧随其后，但在下一行而不是同一行上时。
- en: '**Class Aliases With use**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用use的类别名**'
- en: 'In PHP 5.3 and later, classes may be aliased to another class name with a use
    statement, like so:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 5.3及更高版本中，类可以使用use语句别名为另一个类名，如下所示：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this case, we need to do two searches: one for use `\s+Example\s+as` to
    discover the various aliases, and a second search for the new keyword with the
    alias.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要进行两次搜索：一次使用`\s+Example\s+as`来发现各种别名，另一次搜索新的关键字和别名。
- en: 'As we discover instantiations of the class in the codebase, we modify them
    to pass the parameters as needed. If, for example, a page script looks like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在代码库中发现类的实例化时，我们修改它们以根据需要传递参数。例如，如果一个页面脚本看起来像这样：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We need to add the parameter to the instantiation:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将参数添加到实例化中：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The new instantiations need to match the new constructor signature, so if the
    constructor takes more than one parameter, we need to pass all of the parameters.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 新的实例化需要与新的构造函数签名匹配，因此如果构造函数需要多个参数，我们需要传递所有参数。
- en: Spot check, Commit, Push, Notify QA
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽查，提交，推送，通知QA
- en: We have reached the end of the conversion process for this class. We need to
    spot check the converted instantiations now, but (as always) this is not an automated
    process, so we need to run or otherwise invoke the files with the changed code.
    If there are problems, go back and fix them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了这个类的转换过程。现在我们需要抽查转换后的实例化，但是（一如既往）这不是一个自动化的过程，因此我们需要运行或以其他方式调用具有更改代码的文件。如果出现问题，就返回并修复它们。
- en: Once we have done so, and are sure there are no errors, we can commit the changed
    code, push it to our central repository, and notify QA that it needs to run its
    test suite over the legacy application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们这样做了，并确保没有错误，我们可以提交更改后的代码，将其推送到我们的中央存储库，并通知QA需要对传统应用程序运行其测试套件。
- en: Do ... While
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做...直到
- en: That is the process to convert a single class from using `global` calls to using
    dependency injection. Go back through the class files and find the next class
    with a `global` call and begin the process again. Continue to do so until there
    are no more `global` calls in the classes.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将单个类从使用`global`调用转换为使用依赖注入的过程。回到类文件，找到下一个具有`global`调用的类，并重新开始该过程。继续这样做，直到类中没有更多的`global`调用为止。
- en: Common Questions
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: What if we find a global in a static method?
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我们在静态方法中找到全局变量怎么办？
- en: 'Sometimes we will find that a static class method uses a `global` variable
    like so:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们会发现静态类方法使用`global`变量，如下所示：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is a problem because there is no constructor to which we can move the `global`
    variable as a property. There are two options here.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个问题，因为没有构造函数可以将`global`变量移动为属性。这里有两个选择。
- en: 'The first option is to pass all the needed globals as parameters on the static
    method itself, thereby changing the signature of the method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选择是在静态方法本身上将所有需要的全局变量作为参数传递，从而改变方法的签名：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We would then search the codebase for all uses of `Foo::doSomething(` and pass
    the `$bar` value each time. For that reason, I suggest adding the new parameters
    to the *beginning* of the signature, rather than to the end, because it makes
    search-and-replace much easier. For example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在整个代码库中搜索`Foo::doSomething(`的所有用法，并每次传递`$bar`值。因此，我建议将新参数添加到*签名的*开头，而不是结尾，因为这样做可以更轻松地进行搜索和替换。例如：
- en: 'Search for:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Replace with:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 替换为：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The second option is to change the class so that it must be instantiated, and
    make all the methods instance methods. The class, after conversion, might look
    like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选择是更改类，使其必须被实例化，并使所有方法成为实例方法。转换后，类可能看起来像这样：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After that, we would need to:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们需要：
- en: Search the codebase for all `Foo::` static calls;
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索所有`Foo::`静态调用的代码库；
- en: Create instances of `Foo` with its `$bar` dependency (e.g., `$foo = new Foo($bar);`)
    before those static calls are made, and
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行静态调用之前创建`Foo`的实例及其`$bar`依赖项（例如，`$foo = new Foo($bar);`），并
- en: Replace calls of `Foo::doSomething()` with `$foo->doSomething()`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用`$foo->doSomething()`替换`Foo::doSomething()`的调用。
- en: Is there an alternative conversion process?
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是否有替代的转换过程？
- en: The process described above is a class-by-class process, where we first move
    the globals in a single class to the constructor, then change from global properties
    to instance properties in that class, and finally change instantiations of that
    class.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述描述的过程是一个逐个类的过程，我们首先将单个类中的全局变量移动到构造函数中，然后在该类中将全局属性更改为实例属性，最后更改该类的实例化。
- en: 'Alternatively, we might choose a modified process:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以选择一个修改过的过程：
- en: Change all global variables to properties in all classes, then test/commit/push/QA.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有全局变量更改为所有类中的属性，然后进行测试/提交/推送/QA。
- en: Change all global properties to constructor parameters *in all classes*, and
    change instantiations *of all classes*, then test/commit/push/QA.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有类中的全局属性更改为构造函数参数，并更改*所有类*的实例化，然后进行测试/提交/推送/QA。
- en: 'This may be a reasonable alternative for smaller codebases, but it comes with
    some problems, such as:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是较小代码库的一个合理替代方案，但它也带来了一些问题，比如：
- en: The search for `global` calls becomes a little more difficult while converting
    globals to properties, because we will see the `global` keyword in both the converted
    and unconverted classes.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将全局变量转换为属性时，搜索`global`调用变得更加困难，因为我们将在转换和未转换的类中看到`global`关键字。
- en: The commits for each major step will be much larger and harder to read.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个主要步骤的提交将更大，更难阅读。
- en: For these reasons and others, I think it's better to stay with the process as
    described. It works with large and small codebases, and keeps incremental changes
    in smaller easier-to-read portions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些原因和其他原因，我认为最好按照描述的过程进行。它适用于大型和小型代码库，并将增量更改保持在更小、更易阅读的部分中。
- en: What about class names in variables?
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量中的类名呢？
- en: 'Sometimes we will find that classes are instantiated based on variable values.
    For example, this creates an object based on the value of the `$class` variable:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们会发现类是基于变量值实例化的。例如，这将根据`$class`变量的值创建一个对象：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If `$type` is `Blog`, then the `$record` object will be of the class `Blog_Record`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`$type`是`Blog`，那么`$record`对象将是`Blog_Record`类的对象。
- en: This kind of thing is very difficult to discover when searching for class instantiations
    to convert to using constructor parameters. I'm afraid I have no good advice for
    automatically finding these kinds of instantiations. The best we can do is to
    search for `new\s+\$` without any class name, and modify the calls individually
    by hand.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当搜索要转换为使用构造函数参数的类实例化时，这种情况很难发现。很抱歉，我没有自动找到这些类型实例化的好建议。我们能做的最好的事情就是搜索`new\s+\$`而没有任何类名，并逐个手动修改调用。
- en: What about superglobals?
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超级全局变量呢？
- en: Superglobals represent a challenging special case when removing global variables.
    They are automatically global within every scope, so they carry all the drawbacks
    of globals. We won't find them with a search for the `global` keyword (although
    we can search for them by name). Because they truly are global, we need to remove
    them from our classes just as much as we need to remove the `global` keyword.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 超级全局变量在删除全局变量时代表一个具有挑战性的特殊情况。它们在每个范围内都是自动全局的，因此它们具有全局变量的所有缺点。我们不会通过搜索`global`关键字找到它们（尽管我们可以按名称搜索它们）。因为它们确实是全局的，所以我们需要从我们的类中删除它们，就像我们需要删除`global`关键字一样。
- en: We could pass a copy of each superglobal into the class when we need it. In
    cases where we need only one this might be fine, but frequently we need two or
    three or more superglobals. In addition, passing a copy of `$_SESSION` will not
    work as expected; PHP uses the actual superglobal of `$_SESSION` for writing session
    data, so changes to the copy will not be honored.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要时，我们可以将每个超全局变量的副本传递给类。在只需要一个的情况下，这可能没问题，但通常我们需要两个或三个或更多的超全局变量。此外，传递`$_SESSION`的副本将不会按预期工作；PHP使用实际的`$_SESSION`超全局变量来写入会话数据，因此对副本的更改将不会被接受。
- en: As a solution, we can use a `Request` data structure class. The `Request` encapsulates
    a copy of each of the non-`$_SESSION` superglobals. At the same time, the `Request`
    maintains a reference to `$_SESSION` so that changes to the object property are
    honored by the real `$_SESSION` superglobal.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决方案，我们可以使用一个`Request`数据结构类。`Request`封装了每个非`$_SESSION`超全局变量的副本。同时，`Request`保持对`$_SESSION`的引用，以便对象属性的更改被真正的`$_SESSION`超全局变量所接受。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `Request` is not an HTTP request object per se. It is merely a
    representation of the request environment for PHP, including server, environment,
    and session values, many of which are not found in HTTP messages.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Request`并不是一个HTTP请求对象本身。它只是PHP请求环境的表示，包括服务器、环境和会话值，其中许多在HTTP消息中找不到。
- en: 'For example, say we have a class that uses `$_POST`, `$_SERVER`, and `$_SESSION`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个类使用`$_POST`、`$_SERVER`和`$_SESSION`：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To replace these calls, we first create a shared `Request` object in our setup
    code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了替换这些调用，我们首先在设置代码中创建一个共享的`Request`对象。
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can then decouple from the superglobals by injecting that shared `Request`
    object in to any class that needs it, and use the `Request` properties instead
    of the superglobals:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过将共享的`Request`对象注入到任何需要它的类中，从超全局变量中解耦，并使用`Request`属性代替超全局变量。
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If it is important to maintain changes to the superglobal values across scopes,
    be sure to use the same `Request` object throughout the application. Modifications
    to the values in one `Request` object will not be reflected in a different `Request`
    object, except for `$session` values (because they are all references to `$_SESSION`).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在不同范围内保持对超全局值的更改很重要，请确保在整个应用程序中使用相同的`Request`对象。对一个`Request`对象中的值的修改不会反映在不同的`Request`对象中，除了`$session`值（因为它们都是对`$_SESSION`的引用）。
- en: What about $GLOBALS?
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么`$GLOBALS`呢？
- en: 'There is one more superglobal that PHP provides: `$GLOBALS`. Using this superglobal
    inside our classes and methods should be treated as a use of the `global` keyword.
    For example, `$GLOBALS[''foo'']` is the equivalent of `global $foo`. We should
    remove it from our classes in just the same way as we do with uses of `global`.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: PHP还提供了一个超全局变量`$GLOBALS`。在我们的类和方法中使用这个超全局变量应该被视为使用`global`关键字。例如，`$GLOBALS['foo']`等同于`global
    $foo`。我们应该像处理`global`一样从我们的类中移除它。
- en: Review and next steps
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: At this point, we have removed all `global` calls in our classes, as well as
    all uses of superglobals. This is another big improvement in the quality of our
    codebase. We know that variables can be modified locally and not affect other
    parts of the codebase.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经从我们的类中移除了所有的`global`调用，以及所有对超全局变量的使用。这是我们代码质量的又一个重大改进。我们知道变量可以在本地修改，而不影响代码库的其他部分。
- en: However, our classes may still have hidden dependencies in them. In order to
    make our classes more testable, we need to discover and reveal those dependencies.
    That is the subject of the next chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们的类可能仍然在其中有隐藏的依赖关系。为了使我们的类更具可测试性，我们需要发现并揭示这些依赖关系。这是下一章的主题。
