- en: Chapter 1. Introduction to CouchDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。CouchDB简介
- en: Welcome to CouchDB and PHP Web Development Beginner's Guide. In this book, we
    will learn the ins and outs of building a simple but powerful website using CouchDB
    and PHP. For you to understand why we do certain things in CouchDB, it's first
    important for you to understand the history of NoSQL databases and learn CouchDB's
    place in database history.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 欢迎来到CouchDB和PHP Web开发初学者指南。在这本书中，我们将学习使用CouchDB和PHP构建一个简单但功能强大的网站的方方面面。为了让你理解为什么我们在CouchDB中做某些事情，你首先需要了解NoSQL数据库的历史，并了解CouchDB在数据库历史中的地位是非常重要的。
- en: 'In this chapter we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Go over a brief history of databases and their place in technology
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简要介绍数据库的历史及其在技术中的地位
- en: Talk about how databases evolved into the concept of NoSQL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谈论数据库是如何演变成NoSQL概念的
- en: Define NoSQL databases by understanding different classifications of NoSQL databases,
    the CAP theorem and its avoidance of the ACID model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过理解NoSQL数据库的不同分类、CAP定理及其避免ACID模型来定义NoSQL数据库
- en: Look at the history of CouchDB and its main contributors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看CouchDB的历史及其主要贡献者
- en: Talk about what makes CouchDB special
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谈论CouchDB的特殊之处
- en: Let's start by looking at the evolution of databases and how NoSQL arrived on
    the scene.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看数据库的演变以及NoSQL是如何出现的。
- en: The NoSQL database evolution
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NoSQL数据库的演变
- en: In the early 1960s, the term **database** was introduced to the world as a simple
    layer that would serve as the backbone behind information systems. The simple
    concept of separating applications from data was new and exciting, and it opened
    up possibilities for applications to become more robust. At this point, databases
    existed first as tape-based devices, but soon became more usable as system direct-access
    storage on disks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪60年代初，术语“数据库”被引入世界，作为信息系统背后的一个简单层。将应用程序与数据分离的简单概念是新颖而令人兴奋的，它为应用程序提供了更加强大的可能性。在这一点上，数据库首先存在于基于磁带的设备上，但很快就变得更加可用，作为系统直接访问磁盘上的存储。
- en: In 1970, Edgar Codd proposed a more efficient way of storing data — the relational
    model. This model would also use SQL to allow the applications to find the data
    stored within its tables. This relational model is nearly identical to what we
    know as traditional relational databases today. While this model was widely accepted,
    it wasn't until the mid 1980s that there was hardware that could actually make
    effective use of it. By 1990, hardware finally caught up, and the relational model
    became the dominant method for storing data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在1970年，埃德加·科德提出了一种更有效的存储数据的方式——关系模型。这个模型也将使用SQL来允许应用程序找到其表中存储的数据。这个关系模型几乎与我们今天所知的传统关系数据库相同。虽然这个模型被广泛接受，但直到1980年代中期才有硬件能够有效地使用它。到了1990年，硬件终于赶上了，关系模型成为了存储数据的主要方法。
- en: Just as in any area of technology, competition arose with **Relational Database
    Management Systems (RDBMS)** . Some examples of popular RDMBS systems are Oracle,
    Microsoft SQL Server, MySQL, and PostgreSQL.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在任何技术领域一样，与关系数据库管理系统（RDBMS）竞争出现了。一些流行的RDMBS系统的例子包括Oracle、Microsoft SQL Server、MySQL和PostgreSQL。
- en: As we moved past the year 2000, applications began to produce incredible amounts
    of data through more complex applications. Social networks entered the scene.
    Companies wanted to make sense of the vast amounts of data that were available.
    This shift brought up some serious concerns about the datastructure, scalability,
    and availability of data that the relational model didn't seem to handle. With
    the uncertainty of how to manage this large amount of ever-changing data, the
    term NoSQL emerged.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们走过2000年，应用程序开始通过更复杂的应用程序产生大量的数据。社交网络进入了舞台。公司希望理解可用的大量数据。这种转变引发了关于关系模型似乎无法处理的数据结构、可扩展性和数据可用性的严重关切。面对如何管理这么大量不断变化的数据的不确定性，NoSQL这个术语出现了。
- en: The term **NoSQL** isn't short for "no SQL;" it actually stands for "not only
    SQL". NoSQL databases are a group of persistent solutions, which do not follow
    the relational model and do not use SQL for querying. On top of that, NoSQL wasn't
    introduced to replace relational databases. It was introduced to complement relational
    databases where they fell short.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 术语“NoSQL”并不是“不使用SQL”的缩写；它实际上代表“不仅仅是SQL”。NoSQL数据库是一组持久性解决方案，不遵循关系模型，也不使用SQL进行查询。除此之外，NoSQL并不是为了取代关系数据库而引入的，而是为了补充关系数据库的不足之处。
- en: What makes NoSQL different
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么使NoSQL不同
- en: Besides the fact that NoSQL databases do not use SQL to query data, there are
    a few key characteristics of NoSQL databases. In order to understand these characteristics,
    we'll need to cover a lot of terminology and definitions. It's not important that
    you memorize or remember everything here, but it's important for you to know exactly
    what makes up a NoSQL database.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了NoSQL数据库不使用SQL来查询数据之外，还有一些关键特征。为了理解这些特征，我们需要涵盖大量的术语和定义。重要的不是你要记住或记住这里的一切，而是你要知道究竟是什么构成了NoSQL数据库。
- en: The first thing that makes NoSQL databases different is their data structure.
    There are a variety of different ways in which NoSQL databases are classified.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使NoSQL数据库与众不同的第一件事是它们的数据结构。有多种不同的方式可以对NoSQL数据库进行分类。
- en: Classification of NoSQL databases
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: NoSQL数据库的分类
- en: 'NoSQL databases (for the most part) fit into four main data structures:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库（在大多数情况下）可以分为四种主要的数据结构：
- en: '**Key-value stores:** They save data with a unique key and a value. Their simplicity
    allow them to be incredibly fast and scale to enormous sizes.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键值存储：它们使用唯一的键和值保存数据。它们的简单性使它们能够非常快速地扩展到巨大的规模。
- en: '**Column stores:** They are similar to relational databases, but instead of
    storing records, they store all of the values for a column together in a stream.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列存储：它们类似于关系数据库，但是不是存储记录，而是将一列中的所有值一起存储在流中。
- en: '**Document stores:** They save data without it being structured in a schema,
    with buckets of key-value pairs inside a self-contained object. This datastructure
    is reminiscent of an associative array in PHP. This is where CouchDB lands on
    the playing field. We''ll go much deeper into this topic in [Chapter 3](ch03.html
    "Chapter 3. Getting Started with CouchDB and Futon"), *Getting Started with CouchDB
    and Futon.*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档存储：** 它们保存数据而无需在模式中进行结构化，其中包含自包含对象内的键值对桶。这种数据结构让人想起PHP中的关联数组。这就是CouchDB所在的领域。我们将在[第3章](ch03.html
    "第3章。开始使用CouchDB和Futon")中深入探讨这个主题，*开始使用CouchDB和Futon*。'
- en: '**Graph databases:** They store data in a flexible graph model that contains
    a node for each object. Nodes have properties and relationships to other nodes.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图数据库：** 它们以灵活的图模型存储数据，其中包含每个对象的节点。节点具有属性和与其他节点的关系。'
- en: 'We won''t go too deeply into examples of each of these types of databases,
    but it''s important to look at the different options that are out there. By looking
    at databases at this level, it''s relatively easy for us to see (in general) how
    the data will scale to size and complexity, by looking at the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入讨论每种数据库的示例，但重要的是要看看现有的不同选项。通过在这个层面上查看数据库，我们可以相对容易地看到（一般来说）数据将如何按规模和复杂性进行扩展，通过查看以下屏幕截图：
- en: '![Classification of NoSQL databases](graphics/3586_01_005.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![NoSQL数据库的分类](graphics/3586_01_005.jpg)'
- en: If you look at this diagram, you'll see that I've placed a **Typical Relational
    Database** with a crude performance line. This performance line gives you a simple
    idea of how a database might scale in size and complexity. How is it possible
    that NoSQL databases perform so much better in regards to high size and complexity
    of data?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下这个图表，你会看到我放置��一个**典型的关系数据库**和一个粗糙的性能线。这条性能线给出了一个简单的想法，即数据库可能如何按规模和复杂性进行扩展。NoSQL数据库在数据规模和复杂性方面表现得如此出色是如何可能的呢？
- en: For the most part, NoSQL databases are scalable because they rely on distributed
    systems and ignore the ACID model. Let's talk through what we gain and what we
    give up through a distributed system, and then define the ACID model.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，NoSQL数据库是可扩展的，因为它们依赖于分布式系统并忽略了ACID模型。让我们通过分布式系统讨论我们获得了什么，以及我们放弃了什么，然后定义ACID模型。
- en: When talking about any distributed system (not just storage or databases), there
    is a concept that defines the limitations of what you can do. This is known as
    the CAP theorem.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到任何分布式系统（不仅仅是存储或数据库），都有一个概念定义了你可以做什么的限制。这就是所谓的CAP定理。
- en: CAP theorem
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CAP定理
- en: '*Eric Brewer* introduced the CAP theorem in the year 2000\. It states that
    in any distributed environment, it is impossible for it to provide three guarantees.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*Eric Brewer*在2000年引入了CAP定理。它指出在任何分布式环境中，不可能提供三个保证。'
- en: '**Consistency:** All the servers in the system will have the same data. So,
    anyone using the system will get the latest data, regardless of which node they
    talk to in the distributed system.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性：** 系统中的所有服务器将具有相同的数据。因此，无论用户与分布式系统中的哪个节点交谈，他们都将获得最新的数据。'
- en: '**Availability:** All of the servers will always return data.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性：** 所有服务器将始终返回数据。'
- en: '**Partition-tolerance:** The system continues to operate as a whole, even if
    an individual server fails or cannot be reached.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区容错性：** 即使单个服务器失败或无法访问，系统仍将作为一个整体运行。'
- en: By looking at these choices, you can tell that it would definitely be ideal
    to have all three of these things guaranteed, but it's theoretically impossible.
    In the real world, each NoSQL database picks two of the three options, and usually
    develops some kind of process to mitigate the impact of the third, unhandled property.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过观察这些选择，你可以知道肯定希望这三个东西都能得到保证，但从理论上讲是不可能的。在现实世界中，每个NoSQL数据库选择了三个选项中的两个，并通常开发了某种过程来减轻第三个未处理属性的影响。
- en: 'We''ll talk about which approach CouchDB takes shortly, but there is still
    a bit to learn about another concept that NoSQL databases avoid: ACID.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快会谈论CouchDB采取的方法，但还有一些关于NoSQL数据库避免的另一个概念要学习：ACID。
- en: ACID
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ACID
- en: '**ACID** is a set of properties that apply to database transactions, which
    are the core of traditional relational databases. While transactions are incredibly
    powerful, they are also one of the things that make reading and writing quite
    a bit slower in relational databases.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**ACID**是适用于数据库事务的一组属性，这些事务是传统关系数据库的核心。虽然事务非常强大，但它们也是使关系数据库的读写变得相当慢的因素之一。'
- en: 'ACID is made up of four main properties:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ACID由四个主要属性组成：
- en: '**Atomicity:** This is an all or nothing approach to dealing with data. Everything
    in the transaction must happen successfully, or none of the changes are committed.
    This is a key property whenever money or currency is handled in a system, and
    requires a system of checks and balances.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子性：** 这是一种处理数据的全盘或无。事务中的所有内容必须成功发生，否则所有更改都不会被提交。这是在系统中处理货币或货币时的关键属性，并需要一套检查和平衡系统。'
- en: '**Consistency:** Data will only be accepted if it passes all of the validation
    in place on the database, such as triggers, data types, and constraints.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性：** 数据只有在通过数据库上的所有验证（如触发器、数据类型和约束）后才会被接受。'
- en: '**Isolation:** Transactions will not affect other transactions that are occurring,
    and other users won''t see partial results of a transaction in progress.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离性：** 事务不会影响正在发生的其他事务，其他用户也不会看到正在进行的事务的部分结果。'
- en: '**Durability:** Once the data is saved, it is safe against errors, crashes,
    and other software malfunctions.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久性：** 一旦数据保存，它就会在错误、崩溃和其他软件故障中得到保护。'
- en: Again, as you read through the definition of ACID, you are probably thinking
    to yourself, "These are all must haves!" That may be the case, but keep in mind
    that most NoSQL databases do not fully employ ACID, because it's near impossible
    to have all of these restrictions and still have blazing fast writes to data.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读ACID的定义时，你可能会想：“这些都是必须的！”也许是这样，但请记住，大多数NoSQL数据库并没有完全采用ACID，因为要同时具备所有这些限制并且仍然能够对数据进行快速写入几乎是不可能的。
- en: So what does all of that mean?
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么所有这些意味着什么呢？
- en: I've given you a lot of definitions now, but let's try to wrap it together into
    a few simple lists. Let's talk through the advantages and disadvantages of NoSQL
    databases, when to use, and when to avoid NoSQL databases.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在给了你很多定义，但让我们试着把它们整合成几个简单的列表。让我们讨论一下NoSQL数据库的优缺点，何时使用，何时避免使用NoSQL数据库。
- en: Advantages of NoSQL databases
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: NoSQL数据库的优势
- en: 'With the introduction of NoSQL databases, there are lot of advantages:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 随着NoSQL数据库的引入，有很多优势：
- en: You can do things that simply weren't possible with the processing and query
    power of traditional relational databases.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以做一些传统关系数据库的处理和查询能力无法做到的事情。
- en: Your data is scalable and flexible, allowing it to scale to size and complexity
    faster, right out of the box.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的数据是可扩展和灵活的，可以更快地适应规模和复杂性，直接开箱即用。
- en: There are new data models to consider. You don't have to force your data into
    a relational model if it doesn't make sense.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有新的数据模型需要考虑。如果没有意义，你不必强迫你的数据适应关系模型。
- en: Writing data is blazing fast.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入数据非常快。
- en: As you can see, there are some clear advantages of NoSQL databases, but as I
    mentioned before, there are still some negatives that we need to consider.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，NoSQL数据库有一些明显的优势，但正如我之前提到的，仍然有一些需要考虑的负面影响。
- en: Negatives of NoSQL databases
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: NoSQL数据库的负面影响
- en: 'However, along with the good, there''s also some bad:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，除了好处，也存在一些坏处：
- en: There are no common standards; each database does things just a little bit differently
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有通用标准；每个数据库都有一点点不同的做法
- en: Querying data does not involve the familiar SQL model to find records
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询数据不涉及熟悉的SQL模型来查找记录
- en: NoSQL databases are still relatively immature and constantly evolving
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NoSQL数据库仍然相对不成熟且不断发展
- en: There are new data models to consider; sometimes it can be confusing to make
    your data fit
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有新的数据模型需要考虑；有时让你的数据适应可能会令人困惑
- en: Because a NoSQL database avoids the ACID model, there is no guarantee that all
    of your data will be successfully written
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为NoSQL数据库避免了ACID模型，所以不能保证所有数据都能成功写入。
- en: Some of those negatives may be pretty easy for you to stomach, except for NoSQL's
    avoidance of the ACID model.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些负面影响可能对你来说很容易接受，除了NoSQL避免ACID模型这一点。
- en: When you should use NoSQL databases
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你应该使用NoSQL数据库的情况
- en: 'Now that we have a good take on the advantages and disadvantages, let''s talk
    about some great use cases for using NoSQL databases:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对优缺点有了很好的了解，让我们谈谈使用NoSQL数据库的一些绝佳用例：
- en: Applications that have a lot of writing
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有大量写入的应用程序
- en: Applications where the schema and structure of the data might change
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据的模式和结构可能会发生变化的应用
- en: Large amount of unstructured or semi-structured data
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量的非结构化或半结构化数据
- en: Traditional relational databases feel restricting, and you want to try something
    new.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传统的关系数据库感觉限制很多，你想尝试一些新的东西。
- en: That list isn't exclusive, but there are no clear definitions on when you can
    use NoSQL databases. Really, you can use them for just about every project.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表并不是排他性的，但在何时可以使用NoSQL数据库上并没有明确的定义。实际上，你可以在几乎每个项目中使用它们。
- en: When you should avoid NoSQL databases
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你应该避免使用NoSQL数据库的情况
- en: There are, however, some pretty clear areas that you should avoid when storing
    data in NoSQL.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些明显的领域，你在其中存储数据时应该避免使用NoSQL。
- en: Anything involving money or transactions. What happens if one record doesn't
    save correctly because of NoSQL avoidance of the ACID model or the data isn't
    100 percent available because of the distributed system?
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何涉及金钱或交易的事情。如果由于NoSQL避免ACID模型或分布式系统的数据不是100%可用，会发生什么？
- en: Business critical data or line of business applications, where missing one row
    of data could mean huge problems.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务关键数据或业务应用程序，如果丢失一行数据可能会导致巨大问题。
- en: Heavily-structured data requiring functionality in a relational database.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要在关系数据库中实现功能的高度结构化数据。
- en: For all of these use cases, you should really focus on using relational databases
    that will make sure that your data is safe and sound. Of course, you can always
    include NoSQL databases where it makes sense.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有这些用例，你应该真正专注于使用关系数据库，以确保你的数据安全可靠。当然，在有意义的情况下，你也可以包含NoSQL数据库。
- en: When choosing a database, it's important to remember that "There is no silver
    bullet." This phrase is used a lot when talking about technology, and it means
    that there is no one technology that will solve all of your problems without having
    any side effects or negative consequences. So choose wisely!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择数据库时，重要的是要记住“没有银弹”。这个短语在谈论技术时经常被使用，它意味着没有一种技术可以解决所有问题而没有任何副作用或负面后果。所以要明智选择！
- en: Introduction to CouchDB
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CouchDB简介
- en: For this book and for a variety of my own projects and startups, I chose CouchDB.
    Let's take a historical look at CouchDB, then quickly touch on its approach to
    the CAP theorem, and its strengths and weaknesses.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书和我的一些项目和创业公司，我选择了CouchDB。让我们来历史性地看一下CouchDB，然后快速触及它对CAP定理的处理方式，以及它的优势和劣势。
- en: The history of CouchDB
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CouchDB的历史
- en: In April 2005, *Damien Katz* posted a blog entry about a new database engine
    he was working on, later to be called CouchDB, which is an acronym for **Cluster
    Of Unreliable Commodity Hardware**. Katz, a former Lotus Notes developer at IBM,
    was attempting to create a fault-tolerant document database in C++, but soon after,
    shifted to the **Erlang OTP** platform. As months went by, CouchDB started to
    evolve under the self-funding of Damien Katz, and in February 2008, it was introduced
    to the Apache Incubator project. Finally, in November 2008, it graduated as a
    top-level project.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 2005年4月，*Damien Katz*发布了一篇关于他正在开发的新数据库引擎的博客文章，后来被称为CouchDB，这是**Cluster Of Unreliable
    Commodity Hardware**的缩写。Katz是IBM的前Lotus Notes开发人员，试图在C++中创建一个容错的文档数据库，但很快转向**Erlang
    OTP**平台。随着时间的推移，CouchDB在Damien Katz的自我资助下开始发展，并于2008年2月被引入Apache孵化器项目。最后，2008年11月，它毕业为一个顶级项目。
- en: Damien's team, **CouchOne**, merged with the Membase team in 2011 to form a
    new company called **Couchbase**. This company was formed to merge **CouchDB**
    and **Membase** into a new product, and increase the documentation and visibility
    for the product.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Damien的团队**CouchOne**在2011年与Membase团队合并，组成了一个名为**Couchbase**的新公司。这家公司成立的目的是将**CouchDB**和**Membase**合并成一个新产品，并增加产品的文档和可见性。
- en: In early 2012, Couchbase announced that it would be shifting focus from facilitating
    CouchDB and moving to create Couchbase Server 2.0\. This new database takes a
    different approach to the database, which meant that it would not be contributing
    to the CouchDB community anymore. This news was met with some distress in the
    CouchDB community until Cloudant stepped in.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年初，Couchbase宣布将把重点从促进CouchDB转移到创建Couchbase Server 2.0。这个新的数据库采用了与数据库不同的方法，这意味着它将不再为CouchDB社区做出贡献。这一消息在CouchDB社区引起了一些不安，直到Cloudant介入。
- en: '**Cloudant**, the chief CouchDB hosting company and creator of BigCouch, a
    fault tolerant and horizontally scalable clustering frameworking built for CouchDB,
    announced that they would merge their changes back to CouchDB, and take on the
    role of continuing development of CouchDB.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cloudant**，CouchDB的主要托管公司和BigCouch的创建者，BigCouch是为CouchDB构建的容错和水平可扩展的集群框架，宣布他们将把他们的更改合并回CouchDB，并承担继续开发CouchDB的角色。'
- en: In early 2012, at the time of writing, CouchDB's most major release was 1.1.1
    in March 31, 2011\. But CouchDB 1.2 is looking to be released just around the
    corner!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年初，在撰写本文时，CouchDB的最重要的版本是2011年3月31日的1.1.1版。但CouchDB 1.2即将发布！
- en: Defining CouchDB
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义CouchDB
- en: 'According to [http://couchdb.apache.org/](http://couchdb.apache.org/), CouchDB
    can be defined as:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[http://couchdb.apache.org/](http://couchdb.apache.org/)，CouchDB可以被定义为：
- en: A document database server, accessible via a RESTful JSON API
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个通过RESTful JSON API访问的文档数据库服务器
- en: Ad-hoc and schema-free with a flat address space
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自由式和无模式，具有平面地址空间
- en: Distributed, featuring robust, incremental replication with bi-directional conflict
    detection and management
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式，具有强大的增量复制和双向冲突检测和管理
- en: Query-able and index-able, featuring a table oriented reporting engine that
    uses JavaScript as a query language.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可查询和可索引，具有使用JavaScript作为查询语言的面向表的报告引擎。
- en: You might be able to read between the lines, but CouchDB chose availability
    and partial-tolerance from the CAP theorem, and focuses on eventual consistency
    using replication.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能能够在行间读出，但CouchDB从CAP定理中选择了可用性和部分容忍，并专注于使用复制实现最终一致性。
- en: We could go really deep into what each of these bullet points mean, because
    it will take the rest of the book until we've touched on them in depth. In each
    chapter, we'll begin to build on top of our CouchDB knowledge until we have a
    fully operational application in the wild.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以深入探讨每个这些要点的含义，因为在我们深入讨论它们之前，这将占据本书的剩余部分。在每一章中，我们将开始建立在我们对CouchDB的知识之上，直到我们拥有一个完全运行的应用程序。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope you enjoyed this chapter and are ready to take a deep dive into really
    learning the ins and outs of CouchDB. Let's recap everything we learned in this
    chapter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这一章，并准备深入学习CouchDB的方方面面。让我们回顾一下这一章学到的一切。
- en: We talked about the history of databases and the emergence of NoSQL databases
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们谈到了数据库的历史和NoSQL数据库的出现
- en: We defined the advantages and disadvantages of using NoSQL
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了使用NoSQL的优缺点
- en: We looked at the definition and history of CouchDB
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们看了CouchDB的定义和历史
- en: That's it for the history lesson. Fire up your computer. In the next chapter,
    we'll set everything up to develop web applications with CouchDB and PHP, and
    make sure that it's all set up correctly.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 历史课就讲到这里。打开你的电脑。在下一章中，我们将设置好一切，用CouchDB和PHP开发Web应用程序，并确保一切设置正确。
