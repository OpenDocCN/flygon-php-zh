- en: Chapter 1.  Create a User Profile System and use the Null Coalesce Operator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。创建用户配置文件系统并使用空合并运算符
- en: To begin this chapter, let's check out the new **null coalesce** in PHP 7\.
    We'll also learn how to build a simple profiles page with listed users that you
    can click on, and create a simple CRUD-like system which will enable us to register
    new users to the system and delete users for banning purposes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始这一章，让我们来看看PHP 7中的新**空合并**。我们还将学习如何构建一个简单的配置文件页面，其中列出了可以单击的用户，并创建一个简单的类似CRUD的系统，这将使我们能够注册新用户到系统中，并删除用户以进行封禁。
- en: We'll learn to use the PHP 7 null coalesce operator so that we can show data
    if there is any, or just display a simple message if there isn't any.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习使用PHP 7空合并运算符，以便我们可以在有数据时显示数据，或者如果没有数据，只显示一个简单的消息。
- en: Let's create a simple `UserProfile` class. The ability to create classes has
    been available since PHP 5.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的`UserProfile`类。自PHP 5以来，创建类的能力就已经可用了。
- en: 'A class in PHP starts with the word `class`, and the name of the class:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: PHP中的一个类以`class`开头，后面是类的名称：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We've made the table private and added a `private` variable, where we define
    which table it will be related to.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将表格设为私有，并添加了一个`private`变量，我们在其中定义它将与哪个表相关联。
- en: 'Let''s add two functions, also known as a method, inside the class to simply
    fetch the data from the database:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加两个函数，也称为类中的方法，来简单地从数据库中获取数据：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The null coalesce operator
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空合并运算符
- en: We can use PHP 7's null coalesce operator to allow us to check whether our results
    contain anything, or return a defined text which we can check on the views, this
    will be responsible for displaying any data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用PHP 7的空合并运算符来允许我们检查我们的结果是否包含任何内容，或者返回一个我们可以在视图上检查的定义文本，这将负责显示任何数据。
- en: 'Let''s put this in a file which will contain all the define statements, and
    call it:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把这个放在一个文件中，其中包含所有的定义语句，并称之为：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On the client side, we'll need to come up with a template to show the list of
    user profiles.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端，我们需要设计一个模板来显示用户配置文件的列表。
- en: Let's create a basic HTML block to show that each profile can be a `div` element
    with several list item elements to output each table.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个基本的HTML块，以显示每个配置文件可以是一个`div`元素，其中包含几个列表项元素来输出每个表。
- en: 'In the following function, we need to make sure that all values have been filled
    in with at least the name and the age. Then we simply return the entire string
    when the function is called:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的函数中，我们需要确保所有的值都至少填写了姓名和年龄。然后当函数被调用时，我们只需返回整个字符串：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Separation of Concerns
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关注点分离
- en: In a proper MVC architecture, we need to separate the view from the models that
    get our data, and the controllers will be responsible for handling business logic.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个适当的MVC架构中，我们需要将视图与获取数据的模型分开，控制器将负责处理业务逻辑。
- en: In our simple app, we will skip the controller layer since we just want to display
    the user profiles in one public facing page. The preceding function is also known
    as the template render part in an MVC architecture.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的简单应用程序中，我们将跳过控制器层，因为我们只想在一个公共页面中显示用户配置文件。前面的函数也被称为MVC架构中的模板渲染部分。
- en: While there are frameworks available for PHP that use the MVC architecture out
    of the box, for now we can stick to what we have and make it work.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有一些可用于PHP的框架可以直接使用MVC架构，但现在我们可以坚持我们已经拥有的东西并使其工作。
- en: PHP frameworks can benefit a lot from the null coalesce operator. In some codes
    that I've worked with, we used to use the ternary operator a lot, but still had
    to add more checks to ensure a value was not falsy.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: PHP框架可以从空合并运算符中受益很多。在我曾经使用的一些代码中，我们经常使用三元运算符，但仍然需要添加更多的检查来确保值不是虚假的。
- en: Furthermore, the ternary operator can get confusing, and takes some getting
    used to. The other alternative is to use the `isSet` function. However, due to
    the nature of the `isSet` function, some falsy values will be interpreted by PHP
    as being a set.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，三元运算符可能会令人困惑，并需要一些时间来适应。另一种选择是使用`isSet`函数。然而，由于`isSet`函数的性质，一些虚假的值将被PHP解释为已设置。
- en: Creating views
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: Now that we have our model complete, a template render function, we just need
    to create the view with which we can look at each profile.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的模型已经完成，有一个模板渲染函数，我们只需要创建一个视图，通过它我们可以查看每个配置文件。
- en: 'Our view will be put inside a `foreach` block, and we''ll use the template
    we wrote to render the right values:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的视图将放在一个`foreach`块中，并且我们将使用我们编写的模板来渲染正确的值：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's put the code above into `index.php` .
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把上面的代码放到`index.php`中。
- en: While we may install the Apache server, configure it to run PHP, install new
    virtual hosts and the other necessary features, and put our PHP code into an Apache
    folder, this will take time. So, for the purposes of testing this out, we can
    just run PHP's server for development.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以安装Apache服务器，配置它来运行PHP，安装新的虚拟主机和其他必要的功能，并将我们的PHP代码放入Apache文件夹中，但这需要时间。因此，为了测试这一点，我们可以只运行PHP的服务器进行开发。
- en: 'To run the built-in PHP server (read more at [http://php.net/manual/en/features.commandline.webserver.php](http://php.net/manual/en/features.commandline.webserver.php)
    ) we will use the folder we are running, inside a terminal:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行内置的PHP服务器（在[http://php.net/manual/en/features.commandline.webserver.php](http://php.net/manual/en/features.commandline.webserver.php)上阅读更多信息），我们将使用我们正在运行的文件夹，在终端内：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we open up our browser, we should see nothing yet, **No results found**.
    This means we need to populate our database.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开浏览器，我们应该还看不到任何东西，**没有找到结果**。这意味着我们需要填充我们的数据库。
- en: If you have an error with your database connection, be sure to replace the correct
    database credentials we supplied into each of the `mysql_connect` calls that we
    made.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的数据库连接出现错误，请确保将我们提供的正确数据库凭据替换到我们所做的每个`mysql_connect`调用中。
- en: 'To supply data to our database, we can create a simple SQL script like this:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了向我们的数据库提供数据，我们可以创建一个简单的SQL脚本，就像这样：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s save it in a file such as `insert_profiles.sql`. In the same directory
    as the SQL file, log on to the MySQL client by using the following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们把它保存在一个名为`insert_profiles.sql`的文件中。在与SQL文件相同的目录中，通过以下命令登录MySQL客户端：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then type use <name of database>:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后输入使用<数据库名称>：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Import the script by running the source command:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行source命令导入脚本：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now our user profiles page should show the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的用户资料页面应该显示如下：
- en: '![Creating views](graphics/image_01_001.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![创建视图](graphics/image_01_001.jpg)'
- en: Create a profile input form
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建个人资料输入表单
- en: Now let's create the HTML form for users to enter their profile data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为用户创建HTML表单来输入他们的个人资料。
- en: Our profiles app would be no use if we didn't have a simple way for a user to
    enter their user profile details.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有一个简单的方法让用户输入他们的用户资料细节，我们的个人资料应用就没有用处。
- en: 'We''ll create the profile input form like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建个人资料输入表单如下：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this profile post, we'll need to create a PHP script to take care of anything
    the user posts. It will create an SQL statement from the input values and output
    whether or not they were inserted.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个个人资料帖子中，我们需要创建一个PHP脚本来处理用户发布的任何内容。它将从输入值创建一个SQL语句，并输出它们是否被插入。
- en: 'We can use the null coalesce operator again to verify that the user has inputted
    all values and left nothing undefined or null:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再次使用空合并运算符来验证用户是否输入了所有值，并且没有留下未定义或空的值：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This prevents us from accumulating errors while inserting data into our database.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以防止我们在向数据库插入数据时累积错误。
- en: 'First, let''s create a variable to hold each of the inputs in one array:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个变量来保存每个输入的数组：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding code is a new PHP 5.4+ way to write arrays. In PHP 5.4+, it is
    no longer necessary to put an actual `array()`; the author personally likes the
    new syntax better.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码是一种新的PHP 5.4+写数组的方式。在PHP 5.4+中，不再需要使用实际的`array()`；作者个人更喜欢新的语法。
- en: 'We should create a new method in our `UserProfile` class to accept these values:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在我们的`UserProfile`类中创建一个新的方法来接受这些值：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Instead of creating a parameter in our function to hold each argument as we
    did with our profile template render function, we can simply use an array to hold
    our values.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的个人资料模板渲染函数一样，我们不需要在函数中创建一个参数来保存每个参数，我们可以简单地使用一个数组来保存我们的值。
- en: This way, if a new field needs to be inserted into our database, we can just
    add another field to the SQL `insert` statement.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果需要向我们的数据库插入一个新字段，我们只需在SQL `insert`语句中添加另一个字段。
- en: While we are at it, let's create the edit profile section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 趁热打铁，让我们创建编辑个人资料部分。
- en: For now, we'll assume that whoever is using this edit profile is the administrator
    of the site.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们假设使用此编辑个人资料的人是网站的管理员。
- en: 'We''ll need to create a page where, provided the `$_GET[''id'']` has been set,
    that the user that we will be fetching from the database and displaying on the
    form. Here is how that code will look like:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个页面，假设`$_GET['id']`已经设置，那么我们将从数据库中获取用户并在表单上显示。代码如下：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice that we're using what is known as the shortcut `echo` statement in the
    form. It makes our code simpler and easier to read. Since we're using PHP 7, this
    feature should come out of the box.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在表单中使用了所谓的快捷`echo`语句。这使我们的代码更简单，更易读。由于我们使用的是PHP 7，这个功能应该是开箱即用的。
- en: Once someone submits the form, it goes into our `$_POST` variable and we'll
    create a new `Update` function in our `UserProfile` class.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有人提交表单，它就会进入我们的`$_POST`变量，我们将在我们的`UserProfile`类中创建一个新的`Update`函数。
- en: Admin system
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理员系统
- en: 'Let''s finish off by creating a simple *grid* for an admin dashboard portal
    that will be used with our user profiles database. Our requirement for this is
    simple: we can just set up a table-based layout that displays each user profile
    in rows.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们创建一个简单的*网格*，用于与我们的用户资料数据库一起使用的管理员仪表板门户。我们对此的要求很简单：我们只需设置一个基于表格的布局，以行显示每个用户资料。
- en: 'From the grid, we will add the links to be able to edit the profile, or delete
    it, if we want to. The code to display a table in our HTML view would look like
    this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从网格中，我们将添加链接以便能够编辑个人资料，或者删除它，如果我们想要的话。在我们的HTML视图中显示表格的代码如下：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There''s one thing that we haven''t yet created: A `delete_profile.php` page.
    The view and edit pages have been discussed already.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件事我们还没有创建：`delete_profile.php`页面。查看和编辑页面已经讨论过了。
- en: 'Here''s how the `delete_profile.php` page would look:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete_profile.php`页面将如下所示：'
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Of course, since we might have a lot of user profiles in our database, we have
    to create a simple pagination. In any pagination system, you just need to figure
    out the total number of rows and how many rows you want displayed per page. We
    can create a function that will be able to return a URL that contains the page
    number and how many to view per page.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于我们的数据库中可能有很多用户资料，我们必须创建一个简单的分页。在任何分页系统中，你只需要找出总行数和每页要显示的行数。我们可以创建一个函数，它将能够返回一个包含页码和每页要查看的数量的URL。
- en: 'From our queries database, we first create a new function for us to select
    only up to the total number of items in our database:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们的查询数据库中，我们首先创建一个新的函数，让我们只选择数据库中的总项目数：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For our pagination, we can create a simple `paginate` function which accepts
    the `base_url` of the page where we have pagination, the rows per page - also
    known as the number of records we want each page to have - and the total number
    of records found:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的分页，我们可以创建一个简单的`paginate`函数，它接受页面的`base_url`，每页的行数（也称为每页要显示的记录数），以及找到的记录的总数：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This function will help display the above page links in a table:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将帮助在表格中显示上面的页面链接：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice that we're following the principle that there should rarely be any `echo`
    statements inside a function. This is because we want to make sure that other
    users of these functions are not confused when they debug some mysterious output
    on their page.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们遵循的原则是函数内部应该很少有`echo`语句。这是因为我们希望确保这些函数的其他用户在调试页面上出现神秘输出时不会感到困惑。
- en: By requiring the programmer to echo out whatever the functions return, it becomes
    easier to debug our program. Also, we're following the Separation of Concerns,
    our code doesn't output the display, it just formats the display.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过要求程序员回显函数返回的内容，可以更容易地调试我们的程序。此外，我们遵循关注点分离，我们的代码不输出显示，它只是格式化显示。
- en: So any future programmer can just update the function's internal code and return
    something else. It also makes our function reusable; imagine that in the future
    someone uses our function, this way, they won't have to double check that there's
    some misplaced `echo` statement within our functions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，任何未来的程序员都可以更新函数的内部代码并返回其他内容。这也使我们的函数可重用；想象一下，将来有人使用我们的函数，这样，他们就不必再次检查我们的函数中是否有一些错放的`echo`语句。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**A note on alternative short tags**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于替代短标签的说明**'
- en: 'As you know, another way to `echo` is to use the `<?=` tag. You can use it
    like so: `<?="helloworld"?>`.These are known as short tags. In PHP 7, alternative
    PHP tags have been removed. The RFC states that `<%`, `<%=`, `%>` and `<script
    language=php>` have been deprecated. The RFC at [https://wiki.php.net/rfc/remove_alternative_php_tags](https://wiki.php.net/rfc/remove_alternative_php_tags)
    says that the RFC does not remove short opening tags (`<?`) or short opening tags
    with `echo` (`<?=`).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，另一种`echo`的方法是使用`<?= `标签。你可以这样使用：`<?="helloworld"?>`。这些被称为短标签。在PHP 7中，替代PHP标签已被移除。RFC声明`<%`、`<%=`、`%>`和`<script
    language=php>`已被弃用。RFC在[https://wiki.php.net/rfc/remove_alternative_php_tags](https://wiki.php.net/rfc/remove_alternative_php_tags)中表示，RFC并未移除短开标签（`<?`）或带有`echo`的短开标签（`<?=
    `）。
- en: 'Since we have laid out the groundwork of creating paginate links, we now just
    have to invoke our functions. The following script is all that is needed to create
    a paginated page using the preceding function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经铺好了创建分页链接的基础，现在我们只需要调用我们的函数。以下脚本就是使用前面的函数创建分页页面所需的全部内容：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The HTML output of our page links in `listprofiles.php` will look something
    like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们页面链接的HTML输出在`listprofiles.php`中会看起来像这样：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As you can see, we have a lot of use cases for the null coalesce.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们对null合并有很多用例。
- en: We learned how to make a simple user profile system, and how to use PHP 7's
    null coalesce feature when fetching data from the database, which returns null
    if there are no records. We also learned that the null coalesce operator is similar
    to a ternary operator, except this returns null by default if there is no data.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何创建一个简单的用户配置文件系统，以及如何在从数据库获取数据时使用PHP 7的null合并功能，如果没有记录，则返回null。我们还了解到，null合并运算符类似于三元运算符，只是如果没有数据，默认返回null。
- en: In the next chapter, we'll have more use cases for other PHP 7 features, especially
    when creating the database abstraction layer for use in our projects.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将有更多用例来使用其他PHP 7功能，特别是在为我们的项目创建数据库抽象层时。
