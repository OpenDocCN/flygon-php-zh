- en: '*Chapter 3*: Taking Advantage of Error-Handling Enhancements'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第3章*：利用错误处理增强功能'
- en: If you've been a PHP developer for any length of time, you will have noticed
    that as the language continues to mature, more safeguards are put into place that
    ultimately enforce good coding practices. Along these lines, one of the key improvements
    in PHP 8 is its advanced error-handling capabilities. In this chapter, you will
    learn which `Notices` have been upgraded to `Warnings`, and which `Warnings` have
    been upgraded to `Errors`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是PHP开发人员，您会注意到随着语言不断成熟，越来越多的保障措施被制定出来，最终强制执行良好的编码实践。在这方面，PHP 8的一个关键改进是其先进的错误处理能力。在本章中，您将了解哪些`Notices`已升级为`Warnings`，哪些`Warnings`已升级为`Errors`。
- en: This chapter gives you an excellent understanding of the background and intent
    of the security enhancements, allowing you to better control the use of your code.
    In addition, it's critical to be aware of error conditions that formerly only
    generated `Warnings` but now also generate `Errors`, in order to take measures
    to prevent your applications from failing following an upgrade to PHP 8.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章让您对安全增强的背景和意图有了很好的理解，从而使您更好地控制代码的使用。此外，了解以前只生成`Warnings`但现在也生成`Errors`的错误条件，以采取措施防止在升级到PHP
    8后应用程序失败，也是至关重要的。
- en: 'The following topics are covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Understanding PHP 8 error handling
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解PHP 8错误处理
- en: Dealing with warnings that are now errors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理现在是错误的警告
- en: Understanding notices promoted to warnings
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解提升为警告的通知
- en: Handling the `@` error control operator
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理`@`错误控制运算符
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To examine and run the code examples provided in this chapter, the minimum
    recommended hardware is listed here:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查和运行本章提供的代码示例，以下是最低推荐的硬件要求：
- en: x86_64 based desktop PC or laptop
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于x86_64桌面PC或笔记本电脑
- en: 1 **gigabyte** (**GB**) free disk space
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 **千兆字节**（**GB**）的可用磁盘空间
- en: 4 GB of **random-access memory** (**RAM**)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 4 GB的**随机存取存储器**（**RAM**）
- en: 500 **kilobits per second** (**Kbps**) or faster internet connection
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 500 **千比特每秒**（**Kbps**）或更快的互联网连接
- en: 'In addition, you will need to install the following software:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还需要安装以下软件：
- en: Docker
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Docker Compose
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Compose
- en: Please refer to the *Technical requirements* section of [*Chapter 1*](B16992_01_Final_JC_ePub.xhtml#_idTextAnchor013),
    *Introducing New PHP 8 OOP Features,* for more information on Docker and Docker
    Compose installation, as well as how to build the Docker container used to demonstrate
    the code explained in this book. Throughout this book, we refer to the directory
    in which you restored the sample code for this book as `/repo`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Docker和Docker Compose安装的更多信息，请参阅[*第1章*](B16992_01_Final_JC_ePub.xhtml#_idTextAnchor013)的*技术要求*部分，介绍新的PHP
    8 OOP功能，以及如何构建用于演示本书中所解释的代码的Docker容器。在本书中，我们将恢复本书示例代码的目录称为`/repo`。
- en: 'The source code for this chapter is located here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码位于此处：
- en: '[https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices](https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices](https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices)'
- en: We can now begin our discussion by examining new PHP 8 operators.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过检查新的PHP 8运算符来开始我们的讨论。
- en: Understanding PHP 8 error handling
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解PHP 8错误处理
- en: Historically, many PHP error conditions were assigned an error level far below
    their actual severity. This gave developers a false sense of security as seeing
    *only* a `Notice` led them to believe that their code was not deficient. Many
    situations only formerly generated a `Notice` or a `Warning` when in fact their
    seriousness merited greater attention.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，许多PHP错误条件被分配了远低于其实际严重性的错误级别。这给开发人员一种错误的安全感，因为他们只看到一个`Notice`，就认为他们的代码没有问题。许多情况以前只生成`Notice`或`Warning`，而实际上它们的严重性值得更多的关注。
- en: In this section, we look at a number of error-handling enhancements in PHP 8
    that continue with the overall trend of enforcing good coding practices. The discussion
    in this chapter will help you to re-examine your code, with an eye toward greater
    efficiency and fewer maintenance issues down the road.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看PHP 8中一些错误处理的增强功能，这些功能继续执行强制执行良好编码实践的总体趋势。本章的讨论将帮助您重新审视您的代码，以便更高效地进行编码，并减少未来的维护问题。
- en: In the next several subsections, we have a look at changes to certain `Notice`
    and `Warning` error conditions that could have an impact on your code. Let's first
    have a look at changes in how PHP 8 handles undefined variables.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个小节中，我们将看看对某些可能影响您的代码的`Notice`和`Warning`错误条件的更改。让我们首先看看PHP 8如何处理未定义变量的更改。
- en: Undefined variable handling
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未定义变量处理
- en: 'One notorious feature of PHP is how it treats **undefined variables**. Have
    a look at this simple block of code. Note that the `$a` and `$b` variables have
    not been defined:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的一个臭名昭著的特性是它如何处理**未定义的变量**。看一下这个简单的代码块。请注意，`$a`和`$b`变量没有被定义：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running under PHP 7, here''s the output:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7下运行，这是输出：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see from the output, PHP 7 emits a `Notice`, letting us know we
    are using variables that have not been defined. If we run exactly the same code
    using PHP 8, you can quickly see that what was previously a `Notice` has been
    promoted to a `Warning`, as illustrated here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，PHP 7发出了一个`Notice`，让我们知道我们正在使用未定义的变量。如果我们使用PHP 8运行完全相同的代码，您可以快速看到以前的`Notice`已经提升为`Warning`，如下所示：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The reasoning behind this error-level promotion in PHP 8 is that the use of
    undefined variables, thought by many developers to be a harmless practice, is
    actually **quite dangerous**! *Why?*, you might ask. The answer is that PHP silently,
    without your explicit direction, assigns a value of `NULL` to any undefined variable.
    Effectively, your program is relying upon a default behavior of PHP that could
    change in future upgrades to the language.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 8 中错误级别提升背后的推理是，许多开发人员认为使用未定义变量是一种无害的做法，实际上却是非常危险的！ 你可能会问为什么？答案是，PHP 在没有明确指示的情况下，会将任何未定义的变量赋值为
    `NULL`。 实际上，您的程序依赖于 PHP 的默认行为，这在将来的语言升级中可能会发生变化。
- en: We cover other error-level promotions in the next few sections of this chapter.
    Please note, however, that situations where `Notices` are promoted to `Warnings`
    *will not affect the functioning of your code*. It might serve to bring more potential
    problems to your attention, however, and if so, serves the purpose of producing
    better code. Unlike undefined variables, undefined constants' errors have now
    been even further promoted, as you'll see in the next subsection.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的接下来几节中介绍其他错误级别的提升。 但是，请注意，将 `Notices` 提升为 `Warnings` 的情况 *不会影响代码的功能*。
    但是，它可能会引起更多潜在问题的注意，如果是这样，它就达到了产生更好代码的目的。 与未定义变量不同，未定义常量的错误现在已经进一步提升，您将在下一小节中看到。
- en: Undefined constant handling
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未定义常量处理
- en: 'The treatment of **undefined constants** has changed when running under PHP
    8\. However, in this case, what was previously a `Warning` is now an `Error` in
    PHP 8\. Have a look at this innocuous-looking block of code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 8 中运行时，**未定义常量**的处理方式已经发生了变化。 但是，在这种情况下，以前是 `Warning` 的现在在 PHP 8 中是 `Error`。
    看看这个看似无害的代码块：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first line echoes a `PHP_OS` **pre-defined constant** that identifies the
    operating system. In PHP 7, a `Notice` is generated; however, the last line of
    output is `Program Continues ...`, as shown here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行回显了一个标识操作系统的 `PHP_OS` **预定义常量**。 在 PHP 7 中，会生成一个 `Notice`；然而，输出的最后一行是 `Program
    Continues ...`，如下所示：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The same code now produces a *fatal error* when running in PHP 8, as shown
    here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的代码现在在 PHP 8 中运行时会产生*致命错误*，如下所示：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Accordingly, any bad code you have lying around that fails to first define any
    constants before use will crash and burn in PHP 8! A good habit is to assign a
    default value to all variables at the start of your application code. If you plan
    to use constants, it's also a good idea to define them as soon as possible, preferably
    in one place.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在 PHP 8 中，任何未在使用之前首先定义任何常量的糟糕代码都将崩溃和燃烧！一个好习惯是在应用程序代码的开头为所有变量分配默认值。 如果您计划使用常量，最好尽早定义它们，最好在一个地方。
- en: Important note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: One idea is to define all constants in an *included file*. If this is the case,
    be sure that any program script using such constants has loaded the file containing
    the constant definition.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个想法是在一个*包含的文件*中定义所有常量。 如果是这种情况，请确保使用这些常量的任何程序脚本已加载包含常量定义的文件。
- en: Tip
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best practice**: Assign default values to all variables at the beginning
    of your program code before use. Be sure to define any custom constants before
    they are used. If this is the case, be sure that any program script using such
    constants has loaded the file containing the constant definition.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：在程序代码使用之前，为所有变量分配默认值。 确保在使用之前定义任何自定义常量。 如果是这种情况，请确保使用这些常量的任何程序脚本已加载包含常量定义的文件。'
- en: Error-level defaults
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误级别默认值
- en: 'It''s useful to note that the error-level defaults assigned to the `php.ini`
    file `error_reporting` directive have been updated in PHP 8\. In PHP 7, the default
    `error_reporting` level was as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在 PHP 8 中，`php.ini` 文件 `error_reporting` 指令分配的错误级别默认值已经更新。 在 PHP 7 中，默认的
    `error_reporting` 级别如下：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In PHP 8, the new level is much simpler, as you can see here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PHP 8 中，新级别要简单得多，您可以在这里看到：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It's also worth noting that the `php.ini` file setting `display_startup_errors`
    is now enabled by default. This might be an issue for production servers, as your
    website might start to unintentionally reveal error information upon PHP startup.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`php.ini` 文件设置 `display_startup_errors` 现在默认启用。 这可能会成为生产服务器的问题，因为您的网站可能会在
    PHP 启动时意外地显示错误信息。
- en: The key takeaway from this section is that in the past, PHP has allowed you
    to *get away with* certain bad practices by only issuing `Notices` or `Warnings`.
    As you've learned in this section, however, the danger in not addressing the issues
    behind the `Warning` or `Notice` generation lies in the actions PHP silently takes
    on your behalf. Not relying upon PHP to make decisions on your behalf leads to
    fewer hidden logic errors. Following good coding practices, such as that of assigning
    defaults to all variables before they are used, helps you to avoid such errors.
    Let's now have a closer look at error situations where `Warnings` have been promoted
    to `Errors` in PHP 8.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的关键要点是，过去，PHP 允许您通过只发出 `Notices` 或 `Warnings` 来逃脱某些不良实践。 但是，正如您在本节中所学到的，不解决
    `Warning` 或 `Notice` 生成背后的问题的危险在于 PHP 在您的代表上悄悄采取的行动。 不依赖 PHP 代表您做决定会减少隐藏的逻辑错误。
    遵循良好的编码实践，例如在使用之前为所有变量分配默认值，有助于避免此类错误。 现在让我们更仔细地看看在 PHP 8 中将 `Warnings` 提升为 `Errors`
    的错误情况。
- en: Dealing with warnings that are now errors
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理现在是错误的警告
- en: 'In this section, we look at upgraded PHP 8 error handling pertaining to objects,
    arrays, and strings. We also examine situations where, in the past, PHP issued
    a `Warning` but where PHP 8 now throws an `Error`. It is critical that you become
    aware of any of the potential error situations addressed in this section. The
    reason is simple: if you fail to address the situations described in this section,
    when your server is upgraded to PHP 8 your code will break.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究升级的PHP 8错误处理，涉及对象、数组和字符串。我们还将研究过去PHP发出“警告”的情况，而在PHP 8中现在会抛出“错误”。你必须意识到本节中描述的任何潜在错误情况。原因很简单：如果你没有解决本节描述的情况，当你的服务器升级到PHP
    8时，你的代码将会出错。
- en: Developers are often pressed for time. It could be that there's a massive queue
    of new features or other changes that must be made. In other cases, resources
    have been pulled away to other projects, meaning fewer developers are available
    to perform maintenance. `Warnings` are often ignored because the application continues
    to run, so many developers simply turn off the error display and hope for the
    best.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员经常时间紧迫。可能有一大堆新功能或其他必须进行的更改。在其他情况下，资源已经被调走到其他项目，意味着可用于维护的开发人员更少。由于应用程序继续运行，很多开发人员经常忽略“警告”，所以他们只是关闭错误显示，希望一切顺利。
- en: Over the years, mountains upon mountains of badly written code have accumulated.
    Unfortunately, the PHP community is now paying the price, in the form of mysterious
    runtime errors that take hours to track down. By promoting to `Error` certain
    dangerous practices previously raising only a `Warning`, bad coding practices
    quickly become apparent in PHP 8 as `Errors` are fatal and cause the application
    to stop running.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，堆积如山的糟糕代码已经积累起来。不幸的是，PHP社区现在正在付出代价，以神秘的运行时错误的形式，需要花费数小时来追踪。通过将之前只引发“警告”的某些危险做法提升为“错误”，在PHP
    8中很快就能显现出糟糕的编码实践，因为“错误”是致命的，会导致应用程序停止运行。
- en: Let's start by examining error promotion in object error handling.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从对象错误处理中的错误提升开始。
- en: Important note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As a general rule, in PHP 8, `Warnings` are promoted to `Errors` when an attempt
    is made to *write* data. On the other hand, for the same general circumstance
    (for example, attempting to read/write properties of non-existent objects), a
    `Notice` is promoted to a `Warning` in PHP 8 when an attempt is made to *read*
    data. The overall rationale is that write attempts could result in loss or corruption
    of data, whereas read attempts do not.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，在PHP 8中，当尝试*写入*数据时，“警告”会升级为“错误”。另一方面，对于相同的一般情况（例如，尝试读/写不存在对象的属性），在PHP 8中，当尝试*读取*数据时，“通知”会升级为“警告”。总体上的理由是，写入尝试可能导致数据的丢失或损坏，而读取尝试则不会。
- en: Promoted warnings in object error handling
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象错误处理中的警告提升
- en: 'Here is a brief summation of `Warnings` that are now `Errors` pertaining to
    the treatment of objects. PHP 8 will throw an `Error` if you attempt to do the
    following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是现在被视为对象处理的“警告”现在变成了“错误”的简要总结。如果你尝试做以下操作，PHP 8会抛出一个“错误”：
- en: Increment/decrement a property of a non-object
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加/减少非对象的属性
- en: Modify a property of a non-object
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改非对象的属性
- en: Assign a value to a property of a non-object
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给非对象的属性赋值
- en: Create a default object from an empty value
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从空值创建默认对象
- en: 'Let''s have a look at a simple example. In the following code snippet, a value
    is assigned to a non-existent object, `$a`. This value is then incremented:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个简单的例子。在下面的代码片段中，一个值被赋给了一个不存在的对象`$a`。然后对这个值进行了递增：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the PHP 7 output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PHP 7的输出：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, in PHP 7 a `stdClass()` instance is silently created and a
    `Warning` is issued, but the operation is allowed to continue. If we run the same
    code under PHP 8, notice here the difference in output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在PHP 7中，一个`stdClass()`实例被默默创建，并发出一个“警告”，但操作是允许继续的。如果我们在PHP 8下运行相同的代码，注意这里输出的差异：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The good news is in PHP 8 the `Error` is **thrown**, which means we could easily
    catch it by implementing a `try()/catch()` block. As an example, here''s how the
    code shown previously might be rewritten:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是在PHP 8中，会抛出一个“错误”，这意味着我们可以通过实现一个`try()/catch()`块轻松地捕获它。例如，这里是之前显示的代码可能如何重写的示例：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, any problems with the three lines are now wrapped safely inside
    a `try()/catch()` block, meaning that recovery is possible. We now turn our attention
    to array error-handling enhancements.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这三行中的任何问题现在都安全地包裹在一个`try()/catch()`块中，这意味着可以进行恢复。我们现在将注意力转向数组错误处理的增强。
- en: Promoted warnings in array handling
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组处理中的警告提升
- en: A number of bad practices regarding arrays, allowed in PHP 7 and earlier versions,
    now throw an `Error`. As discussed in the previous subsection, PHP 8 array error-handling
    changes serve to give you a more forceful response to the error situations we
    describe here. The ultimate goal of these enhancements is to nudge developers
    toward good coding practices.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数组的一些不良实践，在PHP 7及更早版本中是允许的，现在会抛出一个“错误”。正如前一小节所讨论的，PHP 8数组错误处理的变化旨在对我们描述的错误情况给出更有力的响应。这些增强的最终目标是推动开发人员朝着良好的编码实践方向发展。
- en: 'Here is brief list of array-handling warnings promoted to errors:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是数组处理中的警告提升为错误的简要列表：
- en: Cannot add an element to the array as the next element is already occupied
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法将元素添加到数组中，因为下一个元素已经被占用
- en: Cannot unset the offset in a non-array variable
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法取消非数组变量中的偏移量
- en: Only `array` and `Traversable` types can be unpacked
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有`array`和`Traversable`类型可以被解包
- en: Illegal offset types
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非法偏移类型
- en: Let's now examine each of the error conditions on this list, one by one.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们逐一检查这个列表中的每个错误条件。
- en: Next element already occupied
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下一个元素已经被占用
- en: 'In order to illustrate one possible scenario where the next array element cannot
    be assigned as it''s already occupied, have a look at this simple code example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明一个可能的情况，即下一个数组元素无法被分配，因为它已经被占用，请看这个简单的代码示例：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Assume that, for some reason, an assignment is made to an array element whose
    numeric key is the largest-sized integer possible (represented by the `PHP_INT_MAX`
    pre-defined constant). If we subsequently attempt to assign a value to the next
    element, we have a problem!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 假设由于某种原因，对一个数组元素进行赋值，其数字键是可能的最大大小的整数（由`PHP_INT_MAX`预定义常量表示）。如果随后尝试给下一个元素赋值，就会出现问题！
- en: 'Here is the result of running this block of code in PHP 7:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7中运行此代码块的结果如下：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In PHP 8, however, the `Warning` has been promoted to an `Error`, with this
    output as a result:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在PHP 8中，`Warning`已经升级为`Error`，导致了这样的输出：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, we turn our attention to the use of offsets in non-array variables.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将注意力转向在非数组变量中使用偏移量的情况。
- en: Offsets in non-array variables
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非数组变量中的偏移量
- en: Treating a non-array variable as an array can produce unexpected results, with
    the exception of certain object classes that implement a `Traversable` (`ArrayObject`
    or `ArrayIterator` as examples). A case in point is using array-style offsets
    on a string.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将非数组变量视为数组可能会产生意外结果，但某些实现了`Traversable`（例如`ArrayObject`或`ArrayIterator`）的对象类除外。一个例子是在字符串上使用类似数组的偏移量。
- en: 'Accessing string characters using array syntax can be useful in some cases.
    One example is checking to see if a **Uniform Resource Locator** (**URL**) ends
    with a trailing comma or slash. In the following code example, we check to see
    if a URL ends with a trailing slash. If so, we chop it off using `substr()`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数组语法访问字符串字符在某些情况下可能很有用。一个例子是检查**统一资源定位符**（**URL**）是否以逗号或斜杠结尾。在下面的代码示例中，我们检查URL是否以斜杠结尾。如果是的话，我们使用`substr()`将其截断：
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the example shown previously, the `$url[-1]` array syntax gives you access
    to the last character in the string.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前显示的示例中，`$url[-1]`数组语法使您可以访问字符串中的最后一个字符。
- en: Tip
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You could also use the new PHP 8 `str_ends_with()` function to do the same thing!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用新的PHP 8 `str_ends_with()`函数来执行相同的操作！
- en: However, strings are definitely **not** arrays and should not be treated as
    such. In order to avoid bad code potentially leading to unexpected results, minor
    abuse of the ability to reference string characters using array syntax has been
    curtailed in PHP 8.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，字符串绝对**不是**数组，也不应该被视为数组。为了避免糟糕的代码可能导致意外结果，PHP 8中已经限制了使用数组语法引用字符串字符的滥用。
- en: 'In the following code example, we attempt to use `unset()` on a string:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，我们尝试在字符串上使用`unset()`：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code example will actually generate a fatal error in both PHP
    7 and 8\. Likewise, do not use a non-array (or non-`Traversable` object) as an
    argument to a `foreach()` loop. In the example shown next, a string is supplied
    as an argument to `foreach()`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码示例实际上会在PHP 7和8中生成致命错误。同样，不要将非数组（或非`Traversable`对象）用作`foreach()`循环的参数。在接下来显示的示例中，将字符串作为`foreach()`的参数：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In PHP 7 and earlier versions, a `Warning` is generated but the code continues.
    Here is the output when running in PHP 7.1:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7和早期版本中，会生成一个`Warning`，但代码会继续执行。在PHP 7.1中运行时的输出如下：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Interestingly, PHP 8 also allows the code to continue, but the `Warning` message
    is slightly more detailed, as shown here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，PHP 8也允许代码继续执行，但`Warning`消息略有详细，如下所示：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, we have a look at situations where in the past you could get away with
    unpacking non-array/non-`Traversable` types.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看过去可以使用非数组/非`Traversable`类型进行展开的情况。
- en: Array unpacking
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组展开
- en: 'After seeing this sub-section title, you may well ask: *what is array unpacking?*
    Much like the concept of de-referencing, **unpacking** an array is simply a term
    for extracting values from an array into discrete variables. As an example, consider
    the following simple code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 看到这个小节标题后，您可能会问：*什么是数组展开？* 就像解引用的概念一样，**展开**数组只是一个从数组中提取值到离散变量的术语。例如，考虑以下简单的代码：
- en: 'We start the example by defining a simple function that adds two numbers, as
    follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先定义一个简单的函数，用于将两个数字相加，如下所示：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For the sake of the following illustration, assume that the data is in the
    form of an array of number pairs, each to be added:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了说明，假设数据以数字对的形式存在数组中，每个数字对都要相加：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In a loop, we use the variadics operator (`...`) to unpack the array pairs
    in the call to the `add()` function, as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环中，我们使用可变操作符（`...`）来展开对`add()`函数的调用中的数组对，如下所示：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The example just shown demonstrates how a developer can force unpacking by
    using the variadics operator. However, many PHP array functions perform an unpacking
    operation internally. Consider the following example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 刚才展示的示例演示了开发人员如何使用可变操作符来强制展开。然而，许多PHP数组函数在内部执行展开操作。考虑以下示例：
- en: 'First, we define an array whose elements comprise letters of the alphabet.
    If we echo the return value of `array_pop()` we see the letter `Z` as output,
    as illustrated in the following code snippet:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们定义一个由字母组成的数组。如果我们输出`array_pop()`的返回值，我们会看到输出的是字母`Z`，如下面的代码片段所示：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can achieve the same result using `implode()` to flatten the array into
    a string, and use string de-referencing to return the last letter, as illustrated
    in the following code snippet:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`implode()`将数组展平为字符串来实现相同的结果，并使用字符串解引用来返回最后一个字母，如下面的代码片段所示：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'However, if we attempt to use `array_pop()` on a string as shown here, in PHP
    7 and earlier versions we get a `Warning`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，如果我们尝试在字符串上使用`array_pop()`，就像这里所示，在PHP 7和早期版本中我们会得到一个`Warning`：
- en: '`echo array_pop($alpha);`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo array_pop($alpha);`'
- en: 'Here is the output when running under PHP 7.1:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PHP 7.1下运行时的输出如下：
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And here is the output from the same code file but when running under PHP 8:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是在相同的代码文件下在PHP 8下运行时的输出：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As we have mentioned, here is yet another example of where a situation formerly
    resulting in a `Warning` now results in `TypeError` in PHP 8\. However, both sets
    of output also illustrate the fact that although you can de-reference a string
    as you would an array, strings cannot be unpacked in the same manner as arrays.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，这里是另一个例子，以前会导致`Warning`的情况现在在PHP 8中导致`TypeError`。然而，这两组输出也说明了，尽管你可以像操作数组一样对字符串进行解引用，但字符串不能以与数组相同的方式进行解包。
- en: Next, we examine illegal offset types.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来检查非法偏移类型。
- en: Illegal offset types
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非法偏移类型
- en: 'According to the PHP documentation ([https://www.php.net/manual/en/language.types.array.php](https://www.php.net/manual/en/language.types.array.php)),
    an array is an ordered list of key/value pairs. The array keys, also called **indices**
    or **offsets**, can be one of two data types: `integer` or `string`. If an array
    consists only of `integer` keys, it is often referred to as a **numeric array**.
    An **associative array**, on the other hand, is a term used where `string` indices
    are used. An **illegal offset** would be where the array key is of a data type
    other than `integer` or `string`.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 根据PHP文档（[https://www.php.net/manual/en/language.types.array.php](https://www.php.net/manual/en/language.types.array.php)），数组是键/值对的有序列表。数组键，也称为**索引**或**偏移**，可以是两种数据类型之一：`integer`或`string`。如果一个数组只包含`integer`键，通常被称为**数字数组**。另一方面，**关联数组**是一个术语，用于使用`string`索引。**非法偏移**是指数组键的数据类型不是`integer`或`string`的情况。
- en: Important note
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Interestingly, the following code snippet does not generate a `Warning` or
    an `Error`: `$x = (float) 22/7; $arr[$x] = ''Value of Pi'';`. The value of `$x`
    is first converted to an `integer`, truncating any decimal component, before the
    array assignment is made.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，以下代码片段不会生成`Warning`或`Error`：`$x = (float) 22/7; $arr[$x] = 'Value of Pi';`。在进行数组赋值之前，变量`$x`的值首先被转换为`integer`，截断任何小数部分。
- en: 'As an example, have a look at this code fragment. Note that the index key for
    the last array element is an object:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，看看这段代码片段。请注意，最后一个数组元素的索引键是一个对象：
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output running under PHP 7 produces the `var_dump()` output with a `Warning`,
    as illustrated here:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7下运行的输出产生了`Warning`的`var_dump()`输出，如下所示：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In PHP 8, however, `var_dump()` is never executed as a `TypeError` is thrown,
    as shown here:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在PHP 8中，`var_dump()`永远不会被执行，因为会抛出`TypeError`，如下所示：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The same principle regarding illegal array offsets is present when using `unset()`,
    as illustrated in this code example:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`unset()`时，与非法数组偏移相同的原则存在，如下面的代码示例所示：
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The stricter control of array index keys is also seen when using illegal offsets
    in `empty()` or `isset()`, as shown in this code fragment:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`empty()`或`isset()`中的非法偏移时，对数组索引键的更严格控制也可以看到，如下面的代码片段所示：
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In both of the previous code examples, in PHP 7 and earlier the code example
    completes with a `Warning`, whereas in PHP 8 an `Error` is thrown. Unless the
    `Error` is caught, the code example will not complete.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的两个代码示例中，在PHP 7及更早版本中，代码示例完成时会产生一个`Warning`，而在PHP 8中会抛出一个`Error`。除非捕获到这个`Error`，否则代码示例将无法完成。
- en: Tip
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best practice**: When initializing an array, be sure that the array index
    data type is either an `integer` or a `string`.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：在初始化数组时，确保数组索引数据类型是`integer`或`string`。'
- en: Next, we have a look at error promotions in string handling.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看一下字符串处理中的错误提升。
- en: Promoted warnings in string handling
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串处理中的提升警告
- en: 'The same discussion about promoted warnings pertaining to objects and arrays
    also applies to PHP 8 string error handling. In this subsection, we examine two
    string-handling `Warnings` promoted to `Errors`, outlined here:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 关于对象和数组的提升警告也适用于PHP 8字符串错误处理。在这一小节中，我们将检查两个字符串处理`Warning`提升为`Errors`，如下所示：
- en: Offset not contained in the string
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偏移不包含在字符串中
- en: Empty string offset
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空字符串偏移
- en: Let's start by examining offsets not contained in a string.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们首先检查不包含在字符串中的偏移。
- en: Offset not contained in the string.
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 偏移不包含在字符串中。
- en: 'As an example of the first situation, have a look at the following code sample.
    Here, we start with a string assigned all letters of the alphabet. We then use
    `strpos()` to return the position of the letter `Z`, starting at offset `0`. On
    the next line, we do the same thing; however, the offset of `27` is off the end
    of the string:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一种情况的例子，看看下面的代码示例。在这里，我们首先将一个字符串分配给包含所有字母的字符串。然后，我们使用`strpos()`返回字母`Z`的位置，从偏移`0`开始。在下一行，我们做同样的事情；然而，偏移`27`超出了字符串的末尾：
- en: '[PRE32]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In PHP 7, as expected, an output of `Z` is returned, with a `Warning` from
    `strpos()` and a `Notice` that an offset cast (more on that in the next section)
    occurred. Here is the PHP 7 output:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7中，如预期的那样，返回了`Z`的输出，`strpos()`产生了一个`Warning`，并且产生了一个`Notice`，说明进行了偏移转换（关于这一点，我们将在下一节中详细介绍）。以下是PHP
    7的输出：
- en: '[PRE33]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In PHP 8, however, a fatal `ValueError` is thrown, as seen here:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在PHP 8中，会抛出致命的`ValueError`，如下所示：
- en: '[PRE34]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The key point we need to convey in this situation is that allowing such bad
    coding to remain was marginally acceptable in the past. Following a PHP 8 upgrade,
    however, as you can clearly see from the output, your code will fail. Now, let's
    have a look at empty string offsets.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下我们需要传达的关键点是，以前允许这种糟糕的编码保留在一定程度上是可以接受的。然而，在进行PHP 8升级后，正如你可以清楚地从输出中看到的那样，你的代码将失败。现在，让我们来看一下空字符串偏移。
- en: Empty string offset error handling
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空字符串偏移错误处理
- en: 'Believe it or not, in versions of PHP prior to PHP 7, developers were allowed
    to remove characters from a string by assigning an empty value to the target offset.
    As an example, have a look at this block of code:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，在PHP 7之前的版本中，开发人员可以通过将空值赋给目标偏移来从字符串中删除字符。例如，看看这段代码：
- en: '[PRE35]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The intent of this code example is to remove the letter `F` from the string
    represented by `$str`. Amazingly, in PHP 5.6, you can see from this screenshot
    that the attempt is entirely successful:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码示例的目的是从由`$str`表示的字符串中删除字母`F`。令人惊讶的是，在PHP 5.6中，你可以从这个截图中看到，尝试是完全成功的：
- en: '![Figure 3.1 – PHP 5.6 output showing successful character removal'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.1 - PHP 5.6输出显示成功删除字符'
- en: '](image/Figure_3.1_B16992.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_3.1_B16992.jpg)'
- en: Figure 3.1 – PHP 5.6 output showing successful character removal
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 - PHP 5.6输出显示成功删除字符
- en: Please note that the virtual environments we use to demonstrate code in this
    book allow access to both PHP 7.1 and PHP 8\. In order to properly demonstrate
    how PHP 5 behaved, we mounted a PHP 5.6 Docker image and took a screenshot of
    the result.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们用来演示本书中的代码的虚拟环境允许访问PHP 7.1和PHP 8。为了正确展示PHP 5的行为，我们挂载了一个PHP 5.6的Docker镜像，并对结果进行了截图。
- en: 'In PHP 7, however, this practice is prohibited and a `Warning` is issued, as
    seen here:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在PHP 7中，这种做法是被禁止的，并且会发出一个`Warning`，如下所示：
- en: '[PRE36]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As you can see from the preceding output, the script is allowed to execute;
    however, the attempt to remove the letter `F` is unsuccessful. In PHP 8, as we
    have discussed, the `Warning` is promoted to an `Error` and the entire script
    aborts, as shown here:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从前面的输出中所看到的，脚本被允许执行；然而，尝试删除字母`F`是不成功的。在PHP 8中，正如我们所讨论的，`Warning`被提升为`Error`，整个脚本中止，如下所示：
- en: '[PRE37]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We next examine situations where former `Notices` are promoted to `Warnings`
    in PHP 8.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将研究在PHP 8中，以前的`Notices`被提升为`Warnings`的情况。
- en: Understanding notices promoted to warnings
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解被提升为警告的通知
- en: There are a number of situations that are considered less critical to the stability
    of the PHP engine during runtime that were underrated in versions of PHP prior
    to PHP 7\. Unfortunately, it was customary for new (or perhaps lazy!) PHP developers
    to simply ignore `Notices` in their rush to get their code into production.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多情况被认为对PHP引擎在运行时的稳定性不太重要，在PHP 7之前的版本中被低估了。不幸的是，新的（或者可能是懒惰的！）PHP开发人员通常会忽略`Notices`，以便匆忙将他们的代码投入生产。
- en: PHP standards have dramatically tightened over the years, leading the PHP core
    team to upgrade certain error conditions from `Notice` to `Warning`. Neither error
    reporting level will cause the code to stop working. However, it is felt by the
    PHP core team that the *Notice-to-Warning* promotion will make bad programming
    practices keenly visible. `Warnings` are much less likely to be ignored, ultimately
    leading to better code.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，PHP标准已经大大收紧，这导致PHP核心团队将某些错误条件从`Notice`升级为`Warning`。任何错误报告级别都不会导致代码停止工作。然而，PHP核心团队认为*Notice-to-Warning*的提升将使糟糕的编程实践变得更加明显。`Warnings`不太可能被忽视，最终会导致更好的代码。
- en: 'Here is a brief list of error conditions leading to a `Notice` being issued
    in earlier versions of PHP, where the same condition now generates a `Warning`
    in PHP 8:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在早期版本的PHP中发出`Notice`的一些错误条件的简要列表，在PHP 8中，相同的条件现在会生成一个`Warning`：
- en: Non-existent object property access attempts
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试访问不存在的对象属性
- en: Non-existent static property access attempts
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试访问不存在的静态属性
- en: Attempt to access an array element using a non-existent key
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用一个不存在的键来访问数组元素
- en: Misusing a resource as an array offset
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误地将资源用作数组偏移
- en: Ambiguous string offset cast
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模棱两可的字符串偏移转换
- en: Non-existent or uninitialized string offset
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不存在或未初始化的字符串偏移
- en: Let's first have a look at `Notice` promotions in cases involving objects.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们来看一下涉及对象的`Notice`促销活动。
- en: Non-existent object property access handling
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不存在的对象属性访问处理
- en: In earlier versions of PHP, a `Notice` was issued when attempting to access
    non-existent properties. The only exception is when it's a custom class where
    you defined the magic `__get()` and/or `__set()` methods.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的PHP版本中，尝试访问不存在的属性时会发出一个`Notice`。唯一的例外是当它是一个自定义类，你在那里定义了魔术`__get()`和/或`__set()`方法。
- en: 'In the following code example, we define a `Test` class with two properties,
    one being marked `static`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，我们定义了一个带有两个属性的`Test`类，其中一个被标记为`static`：
- en: '[PRE38]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We then attempt to `echo` existing and non-existent properties, as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们尝试`echo`存在和不存在的属性，如下所示：
- en: '[PRE39]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Unsurprisingly, the output in PHP 7 returns a `Notice` when the non-existent
    property `echo` attempt is made, as shown here:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，在PHP 7中，当尝试访问不存在的属性`echo`时，会返回一个`Notice`，如下所示：
- en: '[PRE40]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The same code file, in PHP 8, now returns a `Warning`, as seen here:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的代码文件，在PHP 8中，现在返回一个`Warning`，如下所示：
- en: '[PRE41]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Important note
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The `Test::$does_not_exist` error message does not mean we attempted static
    access. It simply means that a `$does_not_exist` property is associated with a
    `Test` class.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test::$does_not_exist`错误消息并不意味着我们尝试了静态访问。它只是意味着`Test`类关联了一个`$does_not_exist`属性。'
- en: 'We now add lines of code attempting to access a non-existent static property,
    as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们添加了尝试访问不存在的静态属性的代码行，如下所示：
- en: '[PRE42]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Interestingly, both PHP 7 and PHP 8 now issue a fatal error, as seen here:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，PHP 7和PHP 8现在都会发出致命错误，如下所示：
- en: '[PRE43]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Anytime a block of code that previously issued a `Warning` now issues an `Error`
    is cause for concern. If possible, scan your code for static references to static
    class properties and make sure they are defined. Otherwise, after a PHP 8 upgrade,
    your code will fail.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 任何以前发出`Warning`的代码块现在发出`Error`都是值得关注的。如果可能的话，扫描你的代码，查找对静态类属性的静态引用，并确保它们被定义。否则，在PHP
    8升级后，你的代码将失败。
- en: Let's now have a look at non-existent offset handling.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下不存在的偏移处理。
- en: Non-existent offset handling
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不存在的偏移处理
- en: As mentioned in the previous section, in general, `Notices` have been promoted
    to `Warnings` where data is read, whereas `Warnings` have been promoted to `Errors`
    where data is written (and could conceivably result in *lost* data). The handling
    of non-existent offsets follows this logic.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，一般来说，在读取数据的地方，`Notices`已经被提升为`Warnings`，而在写入数据的地方，`Warnings`已经被提升为`Errors`（并且可能导致*丢失*数据）。不存在的偏移处理遵循这个逻辑。
- en: 'In the following example, an array key is drawn from a string. In both cases,
    the offset doesn''t exist:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，一个数组键是从一个字符串中提取出来的。在这两种情况下，偏移量都不存在：
- en: '[PRE44]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In PHP 7, the result is a `Notice`, as seen here:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7中，结果是一个`Notice`，如下所示：
- en: '[PRE45]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In PHP 8, the result is a `Warning`, as shown here:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 8中，结果是一个`Warning`，如下所示：
- en: '[PRE46]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This example further illustrates the general rationale behind PHP 8 error handling
    enhancements: if your code *writes* data to a non-existent offset, what was previously
    a `Warning` is an `Error` in PHP 8\. The preceding output shows where an attempt
    made to *read* data from a non-existent offset in PHP 8, a `Warning` is now issued.
    The next `Notice` promotion to examine deals with misuse of resource IDs.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子进一步说明了PHP 8错误处理增强的一般原理：如果你的代码*写入*数据到一个不存在的偏移，以前是一个`警告`在PHP 8中是一个`错误`。前面的输出显示了在PHP
    8中尝试*读取*不存在偏移的数据时，现在会发出一个`警告`。下一个要检查的`通知`提升涉及滥用资源ID。
- en: Misusing resource IDs as array offsets
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滥用资源ID作为数组偏移
- en: 'A **resource** is generated when creating a connection to a service external
    to your application code. A classic example of this data type would be a file
    handle. In the following code example, we open a file handle (thus creating `resource`)
    to a `gettysburg.txt` file:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建到应用程序代码外部的服务的连接时，会生成一个**资源**。这种数据类型的一个典型例子是文件句柄。在下面的代码示例中，我们打开了一个文件句柄（从而创建了`资源`）到一个`gettysburg.txt`文件：
- en: '[PRE47]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Note that we echo the `resource` directly in the last line. This reveals the
    resource ID number. If we now try to use the resource ID as an array offset, however,
    PHP 7 generates a `Notice`, as shown here:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在最后一行直接输出了`资源`。这显示了资源ID号。然而，如果我们现在尝试使用资源ID作为数组偏移，PHP 7会生成一个`通知`，如下所示：
- en: '[PRE48]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'PHP 8, as expected, generates a `Warning`, as shown here:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，PHP 8生成了一个`警告`，如下所示：
- en: '[PRE49]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note that in PHP 8, many functions that formerly produced a `resource` now produce
    an object instead. This topic is covered in [*Chapter 7*](B16992_07_Final_JC_ePub.xhtml#_idTextAnchor162)*,
    Avoiding Traps When Using PHP 8 Extensions*.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在PHP 8中，许多以前生成`资源`的函数现在生成对象。这个主题在[*第7章*](B16992_07_Final_JC_ePub.xhtml#_idTextAnchor162)*，避免在使用PHP
    8扩展时陷阱*中有所涉及。
- en: Tip
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best practice**: Do not use resource IDs as array offsets!'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：不要使用资源ID作为数组偏移！'
- en: We now turn our attention to string-related `Notices` promoted to `Warnings`
    in the case of ambiguous string offsets.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将注意力转向与模糊的字符串偏移相关的`通知`在模糊的字符串偏移的情况下提升为`警告`。
- en: Ambiguous string offset cast
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模糊的字符串偏移转换
- en: Turning our attention to string handling, we once again revisit the idea of
    identifying a single character in a string using array syntax. An **ambiguous
    string offset cast** might occur if PHP has to perform an internal type cast in
    order to evaluate a string offset, but where in that type-cast is not clear.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 将注意力转向字符串处理，我们再次回顾使用数组语法在字符串中识别单个字符的想法。如果PHP必须执行内部类型转换以评估字符串偏移，但在这种类型转换中并不清楚，就可能发生**模糊的字符串偏移转换**。
- en: 'In this very simple example, we define a string that contains all the letters
    of the alphabet. We then define an array of keys with these values: `NULL`; a
    Boolean, `TRUE`; and a float, `22/7` (the approximate value of *Pi*). We then
    loop through the keys and attempt to use the key as a string offset, as illustrated
    here:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个非常简单的例子中，我们定义了一个包含字母表中所有字母的字符串。然后我们用这些值定义了一个键的数组：`NULL`；一个布尔值，`TRUE`；和一个浮点数，`22/7`（*Pi*的近似值）。然后我们循环遍历这些键，并尝试将键用作字符串偏移，如下所示：
- en: '[PRE50]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'As you might have anticipated, the output running in PHP 7 produces the output
    `A`, `B`, and `D`, along with a series of `Notices`, shown here:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能预料的那样，在PHP 7中运行的输出产生了输出`A`，`B`和`D`，以及一系列的`通知`，如下所示：
- en: '[PRE51]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'PHP 8 consistently produces the same results, but here, a `Warning` has taken
    the place of the `Notice`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 8始终产生相同的结果，但在这里，一个`警告`取代了`通知`：
- en: '[PRE52]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Let's now have a look at non-existent offset handling.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看不存在偏移的处理。
- en: Uninitialized or non-existent string offsets
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未初始化或不存在的字符串偏移
- en: 'This type of error is designed to trap access to strings using offsets, where
    the offset is out of bounds. Here''s a very simple code example that illustrates
    this situation:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的错误旨在捕获使用偏移访问字符串的情况，其中偏移超出了边界。下面是一个非常简单的代码示例，说明了这种情况：
- en: '[PRE53]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Running this code in PHP 7 results in a `Notice`. Here''s the output from PHP
    7:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7中运行这段代码会产生一个`通知`。以下是PHP 7的输出：
- en: '[PRE54]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Predictably, the output from PHP 8 produces a `Warning`, as seen here:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 可以预见的是，PHP 8的输出产生了一个`警告`，如下所示：
- en: '[PRE55]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: All of the examples in this section confirm the general trend in PHP 8 toward
    enforcing best coding practices.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的所有示例都证实了PHP 8朝着强制执行最佳编码实践的一般趋势。
- en: Tip
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'For more information on promoted `Notices` and `Warnings`, have a look at this
    article: [https://wiki.php.net/rfc/engine_warnings](https://wiki.php.net/rfc/engine_warnings).'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 有关推广的“通知”和“警告”的更多信息，请查看这篇文章：[https://wiki.php.net/rfc/engine_warnings](https://wiki.php.net/rfc/engine_warnings)。
- en: Now, we turn our attention to the (infamous) `@` warning suppressor.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将注意力转向（臭名昭著的）`@`警告抑制器。
- en: Handling the @ error control operator
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理@错误控制运算符
- en: For years and years, many PHP developers have used the `@` **error control operator**
    to mask errors. This was especially true when using unreliable PHP libraries with
    badly written code. Unfortunately, the net effect of this usage only serves to
    propagate bad code!
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，许多PHP开发人员一直使用`@`**错误控制运算符**来掩盖错误。当使用编写不良的PHP库时，这一点尤为真实。不幸的是，这种用法的净效果只会传播糟糕的代码！
- en: 'Many PHP developers are exercising *wishful thinking*, believing that when
    they use the `@` operator to prevent errors from being displayed, this makes it
    *seem* as if the problem has magically gone away! Trust me when I say this: *it
    hasn''t!* In this section, we first examine traditional use of the `@` operator,
    after which we examine `@` operator changes in PHP 8.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 许多PHP开发人员都在进行“一厢情愿的思考”，他们认为当他们使用`@`运算符来阻止错误显示时，问题似乎神奇地消失了！相信我，当我说这个时候：*并没有！*在这一部分，我们首先研究了`@`运算符的传统用法，之后我们研究了PHP
    8中的`@`运算符的变化。
- en: Tip
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'For more information on traditional `@` operator syntax and usage, have a look
    at this documentation reference page: [https://www.php.net/manual/en/language.operators.errorcontrol.php](https://www.php.net/manual/en/language.operators.errorcontrol.php).'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 有关传统`@`操作符的语法和用法的更多信息，请参阅此文档参考页面：[https://www.php.net/manual/en/language.operators.errorcontrol.php](https://www.php.net/manual/en/language.operators.errorcontrol.php)。
- en: '@ operator usage'
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@操作符用法'
- en: Before presenting a code example, once again it's extremely important to emphasize
    that we are **not** promoting the usage of this mechanism! On the contrary—you
    should avoid this usage in every case. If an error message appears, the best solution
    is to *fix the error*, not to silence it!
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在呈现代码示例之前，再次强调非常重要的一点是我们**不**推广使用这种机制！相反，你应该在任何情况下避免使用它。如果出现错误消息，最好的解决方案是*修复错误*，而不是将其消音！
- en: 'In the following code example, two functions are defined. The `bad()` function
    deliberately triggers an error. The `worse()` function includes a file in which
    there is a parse error. Note that when the functions are called, the `@` symbol
    precedes the function name, causing the error output to be suppressed:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，定义了两个函数。`bad()`函数故意触发错误。`worse()`函数包含一个文件，其中存在解析错误。请注意，当调用这些函数时，`@`符号在函数名之前，导致错误输出被抑制：
- en: '[PRE56]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In PHP 7, there''s simply no output at all, as shown here:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7中，根本没有输出，如下所示：
- en: '[PRE57]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'What''s interesting to note is that the program is actually not allowed to
    continue in PHP 7: we never saw the `Last Line` output. This is because, although
    masked, a fatal error was nonetheless generated, causing the program to fail.
    In PHP 8, however, the fatal error is not masked, as seen here:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，在PHP 7中程序实际上是不允许继续执行的：我们从未看到`Last Line`的输出。这是因为，尽管被掩盖了，但仍然生成了一个致命错误，导致程序失败。然而，在PHP
    8中，致命错误没有被掩盖，如下所示：
- en: '[PRE58]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Let's now have a look at another difference in PHP 8 regarding the `@` operator.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下PHP 8中关于`@`操作符的另一个不同之处。
- en: '@ operator and error_reporting()'
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '@操作符和error_reporting()'
- en: The `error_reporting()` function is normally used to override the `error_reporting`
    directive set in the `php.ini` file. Another use of this function, however, is
    to return the latest error code. However, an odd exception was present in versions
    of PHP prior to PHP 8, in that `error_reporting()` returned a value of `0` if
    the `@` operator was used.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`error_reporting()`函数通常用于覆盖`php.ini`文件中设置的`error_reporting`指令。然而，这个函数的另一个用途是返回最新的错误代码。然而，在PHP
    8之前的版本中存在一个奇怪的例外，即如果使用了`@`操作符，`error_reporting()`返回值为`0`。'
- en: 'In the following code example, we define an error handler that reports on the
    received error number and string when it''s invoked. In addition, we also display
    the value returned by `error_reporting()`:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，我们定义了一个错误处理程序，当它被调用时报告接收到的错误编号和字符串。此外，我们还显示了`error_reporting()`返回的值：
- en: '[PRE59]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'As before, we define a `bad()` function that deliberately triggers an error,
    and then call the function using the `@` operator, as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，我们定义了一个`bad()`函数，故意触发错误，然后使用`@`操作符调用该函数，如下所示：
- en: '[PRE60]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In PHP 7, you''ll note that `error_reporting()` returns `0`, thus causing `IF
    statement works!` to appear in the output, as illustrated here:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 7中，你会注意到`error_reporting()`返回`0`，因此导致`IF statement works!`出现在输出中，如下所示：
- en: '[PRE61]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Running in PHP 8, on the other hand, `error_reporting()` returns the value
    of the last error—in this case, `4437`. Also, of course, the `if()` expression
    fails, causing no additional output. Here is the result of the same code running
    in PHP 8:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在PHP 8中运行，`error_reporting()`返回最后一个错误的值——在这种情况下是`4437`。当然，`if()`表达式失败，导致没有额外的输出。以下是在PHP
    8中运行相同代码的结果：
- en: '[PRE62]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This concludes consideration of the differences in `@` operator usage in PHP
    8.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了对PHP 8中`@`操作符用法的考虑。
- en: Tip
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '**Best practice**: Do not use the `@` error control operator! The intent of
    the `@` operator is to suppress the display of an error message, but you need
    to consider why this error message is appearing in the first place. By using the
    `@` operator, you are only avoiding providing a solution to a problem!'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**最佳实践**：不要使用`@`错误控制操作符！`@`操作符的目的是抑制错误消息的显示，但你需要考虑为什么这个错误消息首先出现。通过使用`@`操作符，你只是避免提供问题的解决方案！'
- en: Summary
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you received an overview of major changes in error handling
    in PHP 8\. You were also given examples of situations where error conditions might
    arise, and now have an idea of how to properly manage errors in PHP 8\. You now
    have a solid path toward refactoring code that under PHP 8 now produces errors.
    If your code could potentially lead to any of the conditions described where former
    `Warnings` are now `Errors`, you risk having your code break.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了PHP 8中错误处理的重大变化概述。你还看到了可能出现错误条件的情况示例，并且现在知道如何正确地管理PHP 8中的错误。你现在有了一个坚实的路径，可以重构在PHP
    8下现在产生错误的代码。如果你的代码可能导致任何前述的条件，其中以前的“警告”现在是“错误”，你就有可能使你的代码崩溃。
- en: In a like manner, although the second set of error conditions described only
    produced `Notices` in the past, these same conditions now cause a `Warning`. The
    new set of `Warnings` gives you a chance to adjust faulty code and prevent having
    your application devolve into a seriously unstable condition.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，虽然过去描述的第二组错误条件只会产生“通知”，但现在这些相同的条件会引发“警告”。新的一组“警告”给了你一个机会来调整错误的代码，防止你的应用程序陷入严重的不稳定状态。
- en: Finally, you learned how use of the `@` operator is strongly discouraged. In
    PHP 8, this syntax will no longer mask fatal errors. In the next chapter, you
    will learn how to create C-language structures and make direct calls to C-language
    functions in PHP 8.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学会了强烈不推荐使用`@`操作符。在PHP 8中，这种语法将不再掩盖致命错误。在下一章中，你将学习如何在PHP 8中创建C语言结构并直接调用C语言函数。
