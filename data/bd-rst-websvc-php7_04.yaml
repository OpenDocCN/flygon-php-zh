- en: Reviewing Design Flaws and Security Threats
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查设计缺陷和安全威胁
- en: 'In this chapter, we will review our work, the endpoints we implemented, and
    will look into two different aspects in which our current work can be improved
    and should be improved. We will also look at:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾我们的工作，我们实现的端点，并将探讨我们当前工作可以改进和应该改进的两个不同方面。我们还将看到：
- en: Our code structure and design flaws
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的代码结构和设计缺陷
- en: Security threats and how we can mitigate them
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全威胁以及我们如何减轻它们
- en: Then, we will look at ways to move forward to implement a RESTful API with the
    improvements discussed in the preceding two sections.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将探讨如何继续实现一个RESTful API，并对前两节讨论的改进进行深入研究。
- en: Finding problems in the current code
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 找出当前代码中的问题
- en: Till now, we have written our blog post's endpoint-related code, and I left
    you to do the same with the comment-related endpoints. If you haven't done that,
    then I insist that you do that first, or at least try to do so because without
    practice, it doesn't last for much time, so keep practicing at least when some
    code examples are provided or there are some tasks to do.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经编写了与博客文章端点相关的代码，并且我让你自己来处理评论相关的端点。如果你还没有做到这一点，那么我坚持你首先这样做，或者至少尝试这样做，因为没有实践，知识不会持续很长时间，所以至少在提供一些代码示例或有一些任务要做时保持练习。
- en: Anyway, as we have written code to implement RESTful web service endpoints in
    the last chapter, we are going to dig into that and identify what is missing and
    what types of improvements are required.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，在上一章中，我们已经编写了实现RESTful Web服务端点的代码，我们将深入研究并确定缺少什么以及需要哪些改进。
- en: Structural and design flaws
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构和设计缺陷
- en: Right now in our code, there are some flaws that we can identify very clearly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在我们的代码中，有一些明显的缺陷我们可以确定。
- en: Missing query builder layer
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺少查询构建器层
- en: Although we are using PDO, we still always need to write a query and need to
    carry out many low level things such as being aware of SQL injection (due to which
    we have to use the prepare statement, then bind values), to perform database-related
    operations. We should use some sort of query builder layer, which can make queries
    for us. So once we have that layer, we don't need to write SQL queries again and
    again.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们使用PDO，但我们仍然需要编写查询并需要执行许多低级操作，比如意识到SQL注入（因此我们必须使用准备语句，然后绑定值）来执行与数据库相关的操作。我们应该使用某种查询构建器层，它可以为我们生成查询。因此，一旦我们有了这个层，我们就不需要一遍又一遍地编写SQL查询。
- en: Although PDO makes it easy to swap one database connection with another, still
    there are some SQL queries which will need to be changed for different databases.
    In fact, it is not only good for changing the DBMS but also, having a sort of
    query builder is time saving because using query builder, we are not always dealing
    with strings to build queries as with query builder we can also use arrays or
    associative arrays to build queries.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管PDO使得很容易将一个数据库连接换成另一个，但仍然有一些SQL查询需要针对不同的数据库进行更改。事实上，不仅对于更改DBMS有好处，而且，拥有一种查询构建器也是节省时间的，因为使用查询构建器，我们不总是处理字符串来构建查询，而是可以使用数组或关联数组来构建查询。
- en: Incomplete router
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不完整的路由器
- en: 'The router we implemented is just routing different files, such as `/posts`
    which was being served through `posts.php`. Our router did not specify which function
    of `posts.php` will serve that request. We were specifying this from inside `posts.php`,
    based on the URL pattern. Just to remind you, here is that conditional portion
    of `posts.php`:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现的路由器只是路由不同的文件，比如`/posts`是通过`posts.php`来提供的。我们的路由器没有指定`posts.php`的哪个函数将处理该请求。我们是根据URL模式从`posts.php`内部指定的。提醒一下，这是`posts.php`中的条件部分：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Doing that isn''t difficult. We can simply put such conditions in `router.php`
    and call an appropriate function in `posts.php`. However, if you remember our
    `routes.php` file, it was a very simple file having key value pairs. Putting that
    here again for your ease:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不难。我们可以简单地在`router.php`中设置这样的条件，并在`posts.php`中调用适当的函数。然而，如果你还记得我们的`routes.php`文件，它是一个非常简单的文件，包含键值对。为了方便起见，我再次放在这里：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, we are not specifying the Request method anywhere in `routes.php`,
    so we will need to specify that in `routes.php` as well. Other than that, we will
    also need to use a regular expression in `routes.php` instead of a plain URL.
    Doing this is easy in `routes.php`, but the actual place where we will need to
    add implementation will be `core/router.php`. It can be done, but we will not
    do that. We don't make components such as routers from scratch, because it is
    not something that is being done for the first time in the world. So how do we
    do it? We can use a router from open source components or packages which are already
    available. Later on, we will see how we can reuse already present open source
    packages or components.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们没有在`routes.php`中指定请求方法，所以我们也需要在`routes.php`中指定。除此之外，我们还需要在`routes.php`中使用正则表达式而不是普通的URL。在`routes.php`中做到这一点很容易，但我们需要添加实现的实际位置将是`core/router.php`。这是可以做到的，但我们不会这样做。我们不会从头开始制作诸如路由器之类的组件，因为这不是世界上第一次做的事情。那我们该怎么办呢？我们可以使用已经可用的开源组件或包中的路由器。稍后，我们将看到如何重用已经存在的开源包或组件。
- en: Usage of OOP
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程的使用
- en: We should use an object-oriented paradigm as it is not only good to make code
    better and cleaner, but it also makes development faster with the passage of time
    because clean code reduces the friction in our way to code for more features or
    to modify code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该使用面向对象的范式，因为这不仅有助于使代码更好、更清晰，而且随着时间的推移，它还可以使开发更快，因为干净的代码减少了我们编写更多功能或修改代码的摩擦。
- en: Separate Configurations from Implementation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将配置与实现分开
- en: Configurations should be better. It is good that we have a `config` file which
    has database connection information, but there are many other things which should
    be in configurations, for example, whether to show errors or not should be controlled
    through the `config` file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 配置应该更好。我们有一个包含数据库连接信息的`config`文件，这很好，但还有许多其他东西应该在配置中，例如，是否显示错误应该通过`config`文件来控制。
- en: So the rule of thumb is that we should separate configurations from implementations.
    This is important so that we can always change configurations without being worried
    about the implementation of code responsible for logic and so on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，经验法则是我们应该将配置与实现分开。这很重要，这样我们就可以随时更改配置，而不必担心与逻辑等代码实现相关的问题。
- en: Should write tests
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应该写测试
- en: No matter if you are writing a RESTful web service or making a website, writing
    test cases is always important. For that purpose, code must also be testable.
    So tests (unit tests) not only test the code against requirements, but also check
    if the code is flexible enough and loosely coupled. Tightly coupled code can not
    be that much testable as compared to loosely coupled code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是编写RESTful Web服务还是制作网站，编写测试用例都是非常重要的。为此，代码也必须是可测试的。因此，测试（单元测试）不仅测试代码是否符合要求，还检查代码是否足够灵活和松散耦合。与松散耦合的代码相比，紧密耦合的代码不能那么容易地进行测试。
- en: Writing test cases in code also makes code cleaner and more agile, which can
    be modified easily. In the case of a web service, API tests are also convenient.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中编写测试用例也使代码更清晰、更灵活，可以轻松修改。在Web服务的情况下，API测试也很方便。
- en: Input validation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入验证
- en: As stated in the last chapter, we didn't validate data coming from input sources
    although we avoided SQL injection as we were using the PDO `prepare()` and `bindValue()`
    methods. It was because we only wrote code in the last chapter to understand and
    learn. Otherwise, not having input validation is not only inconvenient but also
    insecure for applications.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如上一章所述，尽管我们使用PDO的`prepare()`和`bindValue()`方法避免了SQL注入，但我们并没有验证来自输入源的数据。这是因为我们在上一章只是为了理解和学习而编写代码。否则，没有输入验证不仅不方便，而且对应用程序也不安全。
- en: To apply validation, we can either use manual checks or write a validator where
    we can simply pass input parameters and check against particular rules. This type
    of validator is very convenient, but writing a good validator also takes time,
    so it is better to use an already present open source validator. As you can see,
    we tried to write a router and then found issues. These issues could be fixed,
    but we would need to write more code and writing more code takes time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用验证，我们可以使用手动检查，或者编写一个验证器，我们可以简单地传递输入参数并根据特定规则进行检查。这种类型的验证器非常方便，但编写一个好的验证器也需要时间，因此最好使用已经存在的开源验证器。正如您所看到的，我们试图编写一个路由器，然后发现了问题。这些问题可以解决，但我们需要编写更多的代码，编写更多的代码需要时间。
- en: In later chapters, we will see how we can use someone else's written validator,
    and we will use that to make RESTful web service endpoints. We are not only trying
    to save or time to write code but we are trying to avoid to have more code, whose
    maintenance will become our responsibility.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，我们将看到如何使用别人编写的验证器，并将其用于创建RESTful Web服务端点。我们不仅试图节省编写代码的时间，而且还试图避免有更多的代码，其维护将成为我们的责任。
- en: Handling 404 and other errors
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理404和其他错误
- en: Right now, we haven't handled 404 if there is a wrong URL or ID for a blog post
    or comment so we will need to deal with that, not only by sending the not found
    error, but also by sending the HTTP status code as 404\. So for different responses,
    we will need to send different HTTP status codes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果博客文章或评论的URL或ID错误，我们还没有处理404，所以我们需要处理这个问题，不仅发送未找到的错误，还要发送HTTP状态码404。因此，对于不同的响应，我们需要发送不同的HTTP状态码。
- en: Meta information missing
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元信息缺失
- en: Right now, there is no record count, no pagination is there. All records are
    being shown there. So if there will be lot of records, let's say a few million
    records, then returning all records will not make sense. In that case, we should
    apply pagination and there should be a proper place in response where meta information
    should be shown.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，没有记录计数，也没有分页。所有记录都显示出来了。所以如果有很多记录，比如说几百万条记录，那么返回所有记录就没有意义了。在这种情况下，我们应该应用分页，并且在响应中应该有一个适当的位置显示元信息。
- en: DB fields abstraction
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库字段抽象
- en: Right now, all data coming from the database is being shown to the user as it
    is. What if field names will change and the client side developer is using that
    DB field? It will start giving an error at the client side as well.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，从数据库中获取的所有数据都原样显示给用户。如果字段名称发生变化，客户端开发人员正在使用该数据库字段会怎么样？这也会在客户端出现错误。
- en: If you remember, one of the important constraints of REST is abstraction between
    what the server returns to the client and how a server actually stores data. So,
    we need to keep this abstraction. In upcoming chapters, we will see how we can
    keep that abstraction.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您记得的话，REST的一个重要约束是服务器返回给客户端的内容与服务器实际存储数据的方式之间的抽象。因此，我们需要保持这种抽象。在接下来的章节中，我们将看到如何保持这种抽象。
- en: Security
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全性
- en: As you can see, we haven't applied any type of security at all. In fact, we
    haven't made all endpoints login protected. But, it isn't possible in the real
    world to not have a login or authentication. So, we will need to make some endpoints
    login protected.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们根本没有应用任何类型的安全性。事实上，我们还没有使所有端点都受到登录保护。但是，在现实世界中，不可能没有登录或身份验证。因此，我们需要使一些端点受到登录保护。
- en: In this chapter, we are only going to see how we can implement security for
    our endpoints, but we will not implement that yet and will implement it in later
    chapters. Right now we are looking at how we will make some resources login protected,
    because based on that, we will be able to identify other security risks as well.
    So in the next section of this chapter, we are going to see how authentication
    will work.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只会看到如何为我们的端点实现安全性，但我们还不会实现，将在后面的章节中实现。现在我们正在研究如何使一些资源受到登录保护，因为基于此，我们将能够识别其他安全风险。因此，在本章的下一节中，我们将看到身份验证的工作原理。
- en: Securing API endpoints
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护API端点
- en: First, we need to understand how authentication and login works. The first time
    client side application sends login credentials (that is mostly email address
    and password). On the basis of those credentials, the server-side login endpoint
    makes the user's login and returns a token against that authenticated user. That
    token is stored on the client side. On every request, the client side has that
    token either in a request body or in a request header. It can be more clearly
    seen in the following diagram.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要了解身份验证和登录的工作原理。客户端应用程序首次发送登录凭据（通常是电子邮件地址和密码）。基于这些凭据，服务器端的登录端点进行用户登录并返回针对经过身份验证的用户的令牌。该令牌存储在客户端。在每个请求中，客户端都会在请求体或请求头中携带该令牌。可以在以下图表中更清楚地看到。
- en: 'The first client will hit the login endpoint on the server with the login credentials:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，客户端将使用登录凭据访问服务器上的登录端点：
- en: '![](assets/4c7cf776-46b5-4f69-9ee1-e0d5b2b5d8c1.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4c7cf776-46b5-4f69-9ee1-e0d5b2b5d8c1.png)'
- en: 'Once the client gets the token, the client will store it for later use. Then
    with every request, the client will send the same token so that the server can
    consider the client as authenticated:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端获得令牌后，将其存储以备后用。然后，每次请求时，客户端都会发送相同的令牌，以便服务器可以将客户端视为经过身份验证的：
- en: '![](assets/6e2fc7a8-9cce-4453-b4f5-a143317c9d10.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6e2fc7a8-9cce-4453-b4f5-a143317c9d10.png)'
- en: When a server will find the client authenticated, it will return data based
    on the authenticated user.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器发现客户端经过身份验证时，它将返回基于经过身份验证的用户的数据。
- en: If there is no token sent with a request where only authenticated user is allowed
    then server should return 401 HTTP status code that is unauthenticated or unauthorized.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求中没有发送令牌，而只允许经过身份验证的用户，则服务器应返回401 HTTP状态码，表示未经身份验证或未经授权。
- en: 'For example, consider **POST** endpoints. There are endpoints such as create
    post, modify post, and delete post; these need to be protected, so there should
    be an **Auth middleware** protecting these endpoints, while other endpoints such
    as show post and list posts and some other **GET**-based endpoints shouldn''t
    be login protected, so **Auth middleware** should be there for protected endpoints.
    It is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑**POST**端点。有一些端点，如创建帖子、修改帖子和删除帖子；这些需要受到保护，因此应该有**Auth中间件**来保护这些端点，而其他一些**GET**端点，如显示帖子和列出帖子等端点不需要登录保护，因此应该有**Auth中间件**来保护受保护的端点。具体如下：
- en: '![](assets/9f27415b-6938-483e-ad41-e743cec4b566.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f27415b-6938-483e-ad41-e743cec4b566.png)'
- en: As you can see in this diagram, the server will respond based on the provided
    authentication token and **Auth middleware** is just there to resolve a user from
    the authentication token. However, if **Auth middleware** will not able to resolve
    a user from the authentication token, it will simply return a 401 unauthorized
    error.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在此图表中所看到的，服务器将根据提供的身份验证令牌做出响应，**Auth中间件**只是为了从身份验证令牌中解析用户。但是，如果**Auth中间件**无法从身份验证令牌中解析用户，它将简单地返回401未经授权的错误。
- en: What is Auth middleware?
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是身份验证中间件？
- en: Auth middleware will be nothing more than a piece of code that will validate
    an authentication token and will try to resolve the user against that authentication
    token. It will be just a piece of code that will be attached to some endpoints
    in the routes or place from where the data for the endpoint is being returned.
    In any case, it will execute before the actual code for the endpoint and will
    validate and resolve the user from the `auth` token in Request.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Auth中间件将不过是一小段代码，用于验证身份验证令牌，并尝试解析该身份验证令牌的用户。它只是一小段代码，将附加到路由中的某些端点或返回端点数据的位置。在任何情况下，它都会在端点的实际代码之前执行，并验证并解析来自请求的`auth`令牌的用户。
- en: In [Chapter 6](2c7fef92-d01a-4eef-8b1a-22a4adefc658.xhtml), *Illuminating RESTful
    Web Services with Lumen*, we will look into middleware and in [Chapter 7](f5b89fd4-5e88-40e7-aadd-760f2e64a2ec.xhtml),
    *Improving RESTful Web Services*, we will write code for authentication middleware.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](2c7fef92-d01a-4eef-8b1a-22a4adefc658.xhtml)中，*用Lumen照亮RESTful Web服务*，我们将研究中间件，在[第7章](f5b89fd4-5e88-40e7-aadd-760f2e64a2ec.xhtml)中，*改进RESTful
    Web服务*，我们将编写身份验证中间件的代码。
- en: Common security threats in RESTful web services
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful Web服务中的常见安全威胁
- en: Since we have looked at problems in our current code and how we will be implementing
    security in some of our endpoints and use authentication middleware, now it is
    the time to see what the common security threats that we need to consider while
    building RESTful web services are.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了当前代码中的问题以及我们将如何在一些端点中实现安全性并使用身份验证中间件，现在是时候看看在构建RESTful Web服务时需要考虑的常见安全威胁了。
- en: Use of HTTPS
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HTTPS
- en: HTTPS is HTTP with SSL. As our data is being transferred over the internet,
    we need to make our connection secure; for that reason, we should use HTTPS. The
    purpose of HTTPS is to make sure that the server is who it claims to be and that
    data is transferred between the client and server with a secure connection in
    an encrypted form.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPS是带有SSL的HTTP。由于我们的数据正在互联网上传输，我们需要确保我们的连接是安全的；因此，我们应该使用HTTPS。HTTPS的目的是确保服务器是其所声称的，并且数据以加密形式在客户端和服务器之间的安全连接中传输。
- en: If you don't want to buy an SSL certificate as it is costly for you, then you
    can simply go for [https://letsencrypt.org/.](https://letsencrypt.org/) Let's
    Encrypt is a free certificate authority. So, you can use it without paying for
    an SSL certificate.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想购买SSL证书，因为对您来说成本太高，那么您可以简单地选择[https://letsencrypt.org/.](https://letsencrypt.org/)
    Let's Encrypt是一个免费的证书颁发机构。因此，您可以在不支付SSL证书费用的情况下使用它。
- en: Securing an API key/token
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护API密钥/令牌
- en: 'As our sessions will be based on a token, we need to secure that authentication
    token. There are different things that need to be done for that:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的会话将基于令牌，因此我们需要保护认证令牌。有一些需要做的不同的事情：
- en: Not passing an access token in the URL.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要在URL中传递访问令牌。
- en: Access token expiration.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问令牌过期。
- en: Not passing an access token in the URL
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要在URL中传递访问令牌
- en: The API key or token or whatever sensitive information needs to be sent to the
    server, should not be passed in the URL as this can be captured in web server
    logs. So, it must be passed in the POST body or Request Headers.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 应该将需要发送到服务器的API密钥、令牌或其他敏感信息传递到POST主体或请求头中，而不是在URL中传递，因为这样可以被Web服务器日志捕获。
- en: Access token expiration
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问令牌过期
- en: An access token should be expired in two cases. First, it should be expired
    on logout. Second, the access token should expire after a fixed amount of time,
    and this duration shouldn't be long. The reason for expiring a token is that it
    is safer to have an access token valid for less time. If we have many access tokens
    which are not in use, then there are more chances that those tokens can be misused.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 访问令牌应该在两种情况下过期。首先，注销时应该过期。其次，访问令牌应该在固定的时间后过期，且这段时间不应该太长。令牌过期的原因是，让访问令牌的有效时间更短更安全。如果我们有许多未使用的访问令牌，那么这些令牌被滥用的可能性就更大。
- en: The expiration period can be around two hours or less. Although it depends on
    how you want to implement it, a shorter expiration period is more secure. Expiration
    does not mean that the user will need to log in again, instead there will be a
    token refresh endpoint. That will be hit with the last expired token against a
    particular user to get a new token. Please note that last token should be usable
    for refresh token endpoint till a limited time, after that last token shouldn't
    be usable to refresh token. Otherwise, what's the point in expiring a token. Remember
    that there are trade offs between both ways. Refresh token on every request is
    more secure but cause more overhead for server. So it is always up to you that
    which way you prefer in your scenario.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 过期时间大约为两个小时或更短。虽然这取决于您想要如何实现，但较短的过期时间更安全。过期并不意味着用户需要重新登录，而是会有一个令牌刷新端点。将使用最后一个过期的令牌针对特定用户来获取新的令牌。请注意，最后一个令牌应该在有限的时间内可用于刷新令牌端点，之后最后一个令牌不应该可用于刷新令牌。否则，令牌过期有何意义。请记住，两种方式之间存在权衡。每次请求都刷新令牌更安全，但会给服务器带来更多开销。因此，您可以根据自己的情况选择哪种方式。
- en: The other way to expire a token is not to expire it by time, but by refreshing
    a token on every request. For example, if a request is sent with one token, the
    server will validate that token, refresh the token, and send a new token in response.
    So the old token will not be usable. The token will be refreshed on every request.
    It can be done in both ways; it is up to you how you prefer it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 过期令牌的另一种方法是不通过时间来过期，而是在每次请求时刷新令牌。例如，如果使用一个令牌发送请求，服务器将验证该令牌，刷新令牌，并在响应中发送一个新的令牌。因此，旧令牌将不可用。令牌将在每次请求时刷新。可以用两种方式来实现；这取决于您如何偏好。
- en: Limited scope access token
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有限范围的访问令牌
- en: It is also a good idea to limit the scope of the access token to avoid problems
    if some one unauthorized has got the token. Also, if a service is being provided
    to a client-side application that is not specific to some user or access, then
    it should still have some sort of API key, by which we can identify who is asking
    for information. So, if there is a suspicious attempt to access an API endpoint
    with some API key, we can simply revoke the specific API key, so it will be no
    longer valid for future requests. It is only possible if there are multiple API
    keys having the limit access level.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 限制访问令牌的范围也是一个好主意，以避免未经授权的人获得令牌时出现问题。此外，如果向客户端应用程序提供的服务不针对特定用户或访问权限，那么它仍应该具有某种API密钥，以便我们可以确定谁在请求信息。因此，如果有可疑的尝试使用某个API密钥访问API端点，我们可以简单地撤销特定的API密钥，这样它将不再对未来的请求有效。只有当有多个API密钥具有有限的访问级别时才可能实现这一点。
- en: Public and private endpoints
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共和私有端点
- en: Just like public web pages, we can have public endpoints for RESTful web services
    as well. All endpoints that are available to the user before authentication are
    not public. Sometimes, we make endpoints which are open to use before login, or
    without login, but they are only intended to be accessible through our application.
    Those endpoints are not public, so we do not want those endpoints to be accessible
    through other applications. For that purpose, we will be using some sort of API
    key, as discussed earlier.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像公共网页一样，我们也可以为RESTful网络服务设置公共端点。在身份验证之前对用户可用的所有端点都不是公共的。有时，我们创建的端点在登录之前或者无需登录即可使用，但它们只能通过我们的应用程序访问。这些端点不是公共的，因此我们不希望其他应用程序可以访问这些端点。为此，我们将使用一些API密钥，如前面讨论的那样。
- en: We can use an `oauth2`-based access token. A big advantage of using an `oauth2`
    access token is that if we are making different applications to access similar
    endpoints, then we can have different access tokens for different applications.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用基于`oauth2`的访问令牌。使用`oauth2`访问令牌的一个重要优势是，如果我们正在创建不同的应用程序来访问相似的端点，那么我们可以为不同的应用程序使用不同的访问令牌。
- en: '**Example:** We can have an online book store API exposed as a RESTful web
    service, and we can have two applications:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**我们可以将在线书店API公开为RESTful网络服务，并且我们可以有两个应用程序：'
- en: Book selling `app.` For customers.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图书销售`app`。给顾客。
- en: Book selecting `app.` For teachers.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图书选择`app.`给老师。
- en: Now through a customer's `app.`, users can browse different books and add to
    cart and buy. While in the teachers `app.`, users can browse and select different
    books to forward to a person who will buy books later. These two different apps.
    will have some endpoints in common and some endpoints different to each other.
    But, we don't want any endpoint to be publicly available to everyone. So, we can
    have two different access levels and will make two different mobile `apps.` having
    two different API keys, each having different access levels. When a user logs
    in, we will return an access token with limited access. Different tokens can have
    different access levels based on the user role.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过客户端的应用程序，用户可以浏览不同的书籍，加入购物车并购买。而在教师的应用程序中，用户可以浏览和选择不同的书籍，以便稍后购买书籍的人。这两个不同的应用程序将有一些共同的端点和一些不同的端点。但是，我们不希望任何端点对每个人都是公开的。因此，我们可以有两个不同的访问级别，并制作两个不同的移动应用程序，每个应用程序都有不同的API密钥，每个应用程序都有不同的访问级别。当用户登录时，我们将返回一个具有有限访问权限的访问令牌。不同的令牌可以根据用户角色具有不同的访问级别。
- en: Let's say in the teacher `app.`, there can be some teachers who can only select
    books while some other teachers, let's say the **HOD** (**Head of Department**)
    can also buy books. So after login, both of these users can have a different access
    token translating into a different access level. This access level will be on
    the basis of the access token which will be translated into a user who is logged
    in, and we will get a role from the user on the basis of which we will decide
    the access level.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在教师的应用程序中，有些教师只能选择书籍，而另一些教师，比如**HOD**（系主任）也可以购买书籍。因此，在登录后，这两个用户可以具有不同的访问令牌，转换为不同的访问级别。这个访问级别将基于访问令牌，将被转换为已登录的用户，并且我们将根据用户的角色决定访问级别。
- en: Public API endpoints
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共API端点
- en: So even before login, these endpoints were private. What if we have some API
    endpoints that are public, such as a weather forecast giving forecast data to
    everyone. It is better to still have an API key to track who is getting data to
    the server, but what if this is not the case and we are just giving data without
    any API keys? Does that mean that we are giving that data publicly, so we don't
    need to worry about anything? Actually, no.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使在登录之前，这些端点也是私有的。如果我们有一些公共的API端点，比如天气预报向每个人提供预报数据。最好还是有一个API密钥来跟踪谁在向服务器获取数据，但如果不是这种情况，我们只是在没有任何API密钥的情况下提供数据呢？这是否意味着我们是公开提供这些数据，所以我们不需要担心任何事情？实际上，不是。
- en: If a client is passing any information to the server, then it is better to have
    TLS that should be used to encrypt data. Other than that, we also can't allow
    anyone to keep hitting an endpoint; to make usage fair, we need to apply throttling,
    which means an API endpoint can be hit only a limited number of times in a specific
    period of time from one client.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端向服务器传递任何信息，最好使用TLS来加密数据。除此之外，我们也不能允许任何人不断地命中一个端点；为了公平使用，我们需要应用节流，这意味着API端点只能在特定时间段内被一个客户端命中有限次数。
- en: Insecure direct object reference
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不安全的直接对象引用
- en: 'Insecure direct object reference refers to getting or providing sensitive information
    based on data coming from Request. This is not a problem in only RESTful web services
    but also in websites. To understand that, let''s consider an example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 不安全的直接对象引用是指根据来自请求的数据获取或提供敏感信息。这不仅是RESTful Web服务的问题，也是网站的问题。为了理解这一点，让我们举个例子：
- en: 'Let''s say we are going to change a user''s first name or billing address.
    It is better to refer it to an endpoint such as: `PATCH /api/users/me?fist_name=Ali
    (having token in header)`, rather than `PATCH /api/users/2?fist_name=Ali (having
    token in header)`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要更改用户的名字或账单地址。最好是将其引用到一个端点，比如：“PATCH /api/users/me?fist_name=Ali（在标头中具有令牌）”，而不是“PATCH
    /api/users/2?fist_name=Ali（在标头中具有令牌）”。
- en: To let a user modify his/her own data, it will have a token in the header by
    which a server will make sure that this user can modify a record. But, which record?
    In the endpoint with `me`, it will just get a user based on the token and will
    modify its `first_name`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让用户修改自己的数据，它将在标头中具有一个令牌，服务器将确保该用户可以修改记录。但是，哪条记录？在具有“我”的端点中，它将根据令牌获取用户，并修改其“first_name”。
- en: While in the second case, we have the user's `id=2`, so the user can be fetched
    or updated based on the user `id=2`, which is not secure as the user can pass
    any user ID in the URL. So, the problem is not this type of URL, the problem is
    getting or updating the record based on the reference directly from user input
    or the request from a client. No matter what user ID is provided, if we intend
    to modify a logged in user's first name, then it should get or update the user
    based on token and not the user ID in the URL.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种情况下，我们有用户的“id=2”，因此可以根据用户“id=2”获取或更新用户，这是不安全的，因为用户可以在URL中传递任何用户ID。因此，问题不在于这种类型的URL，问题在于根据用户输入或客户端请求直接获取或更新记录。无论提供什么用户ID，如果我们打算修改已登录用户的名字，那么它应该根据令牌获取或更新用户，而不是URL中的用户ID。
- en: Restricting allowable verbs
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制允许的动词
- en: We need to restrict allowable verbs. For example if a web service endpoint is
    only for read purpose and not for modification, then on the URL, `/api/post/3`,
    we should only allow `GET method/verb` but shouldn't allow `PATCH. PUT`, `DELETE`,
    or `POST`. If someone hits `/api/post/3` with `PATCH`, `PUT`, `DELETE`, or `POST`,
    it shouldn't serve it, instead it should return an "405 Method Not Allowed" error.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要限制允许的动词。例如，如果Web服务端点仅用于读取目的而不用于修改，则在URL“/api/post/3”上，我们应该只允许“GET方法/动词”，而不应该允许“PATCH、PUT”、“DELETE”或“POST”。如果有人使用“PATCH”、“PUT”、“DELETE”或“POST”命中“/api/post/3”，它不应该提供服务，而应该返回“405方法不允许”错误。
- en: However, if their client has an access token and based on that, the user is
    only allowed to use the `GET` method (although there are other methods available)
    and not other methods, and the client with that user hits the same URL with other
    methods, then there should be an "403 Forbidden" error, because there are methods
    allowed but just not to the current user based on its role or permissions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果他们的客户端有访问令牌，并且基于此，用户只被允许使用“GET”方法（尽管还有其他方法可用），而不是其他方法，那么具有该用户的客户端使用其他方法访问相同的URL，那么应该出现“403禁止”错误，因为虽然有允许的方法，但基于其角色或权限，当前用户只是不被允许使用。
- en: Input validation
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入验证
- en: It seems that input validation is probably not very related to technology, but
    it is very important to validate input because it is not only beneficial to have
    clean data in a database, but it is also useful to protect against different threats
    such as XSS and SQL injection.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎输入验证可能与技术无关，但验证输入非常重要，因为在数据库中拥有干净的数据不仅有益，而且还有助于防范诸如XSS和SQL注入等不同威胁。
- en: Actually, XSS prevention and different input validation is an important part
    of input validation, while SQL injection is mainly prevented while entering data
    in a database. Another type of threat which needs to be prevented is CSRF, but
    that will already be prevented by the API key or authentication token usage. However,
    a separate CSRF token can also be used.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，XSS预防和不同的输入验证是输入验证的重要部分，而SQL注入主要是在向数据库输入数据时防止的。另一种需要防范的威胁是CSRF，但这将通过API密钥或身份验证令牌的使用已经得到防范。然而，也可以使用单独的CSRF令牌。
- en: Available reusable code
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可重用的代码
- en: We haven't discussed each and every security threat, but we used some things
    which needed to be taken care of to avoid security-related problems. We have discussed
    how we should secure our endpoints and how to implement authentication for RESTful
    web services. We also discussed flaws in our current code that we wrote in the
    previous chapter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有讨论每一个安全威胁，但我们使用了一些需要注意的东西，以避免与安全相关的问题。我们已经讨论了如何保护我们的端点以及如何为RESTful Web服务实施身份验证。我们还讨论了我们在上一章中编写的当前代码中的缺陷。
- en: However, we haven't written code to make our code better and more secure. We
    can do this, but we should understand that there is already a lot of stuff to
    utilize instead of doing everything from scratch. So instead of writing everything
    in plain PHP by ourselves, we will use available code. It is not only to save
    time but also to use something that is available in the community and is time
    tested by the community.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们还没有编写代码来使我们的代码更好、更安全。我们可以做到这一点，但我们应该明白，已经有很多东西可以利用，而不是从头开始做一切。因此，我们将使用可用的代码，而不是自己用纯PHP编写一切。这不仅是为了节省时间，而且是为了使用社区中可用的东西，经过社区的时间测试。
- en: So if we have made up our minds to use a third-party code snippet, package,
    or class, then we should understand that in PHP there is not one group of developers
    writing code in one framework. There are lots of PHP classes available as individual
    classes. Some are written for some frameworks. Some are written for Open Source
    CMS such as WordPress. There are also some packages available in **PEAR** (**PHP
    Extension and Application Repository**). So code available in one place may not
    be useful or compatible with other code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们已经决定使用第三方代码片段、包或类，那么我们应该明白，在PHP中没有一个开发人员组在一个框架中编写代码。有许多PHP类作为独立类可用。有些是为某些框架编写的。有些是为WordPress等开源CMS编写的。还有一些包可在PEAR（PHP扩展和应用程序存储库）中找到。因此，一个地方可用的代码可能对其他代码无用或不兼容。
- en: In fact, just loading different code snippets together could also be a problem,
    especially when there are a lot of dependencies.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，加载不同的代码片段在一起也可能是一个问题，特别是当有很多依赖关系时。
- en: So, here comes the revolution in the PHP community. It isn't a framework or
    CMS or open source class or extension. It is a dependency manager for PHP, known
    as Composer. We can install Composer packages in a standard way and Composer has
    been a standard for most of PHP's popular frameworks. We will not talk more about
    Composer here because Composer is the topic of the next chapter, so we will talk
    about it in detail as we will be using Composer a lot for package installations,
    dependency management, auto-loading, and more. Not only in this book but if you
    are going to make any proper application in PHP, you will need a composer. So
    the reusable code that we will use will be mostly through Composer packages.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，PHP社区迎来了革命。这不是一个框架、CMS或开源类或扩展，而是PHP的依赖管理器，称为Composer。我们可以以标准方式安装Composer包，Composer已成为大多数PHP流行框架的标准。我们在这里不会更多地讨论Composer，因为Composer是下一章的主题，所以我们将详细讨论它，因为我们将大量使用Composer进行包安装、依赖管理、自动加载等。不仅在本书中，而且如果您要在PHP中制作任何适当的应用程序，您都需要一个composer。因此，我们将主要通过Composer包使用可重用的代码。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We already have discussed problems and missing parts in our current code and
    security threats, and we have discussed how we will implement authentication.
    We also discussed that we will use reusable components or code to save our time
    and effort. Also, because the code will be written by ourselves, we will be responsible
    for its maintenance and testing, so using open source stuff which is not only
    available but in many cases is tested, as well as maintained by the community,
    makes more sense. For that purpose, we will be mostly using Composer as it has
    become a standard tool for packaging and using reusable packages in PHP.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了当前代码中的问题和缺失部分以及安全威胁，并讨论了我们将如何实施身份验证。我们还讨论了我们将使用可重用组件或代码来节省时间和精力。此外，因为代码将由我们自己编写，我们将负责其维护和测试，因此使用开源的东西，这些东西不仅可用，而且在许多情况下经过测试，以及由社区维护，更有意义。出于这个目的，我们将主要使用Composer，因为它已成为PHP中打包和使用可重用包的标准工具。
- en: In the next chapter, you will learn more about Composer. What it is, how it
    works, and how we can use it for different purposes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解更多关于Composer的信息。它是什么，它是如何工作的，以及我们如何将其用于不同的目的。
- en: We have talked about security threats in this chapter, but we have not covered
    them in lots of detail because we only had one chapter to discuss them. But, web
    application and RESTful Web service security is a wide topic. There is a lot more
    to learn about it. I would recommend you to go and check [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)
    as a starting point. There is a lot of stuff you will learn from there and you
    will learn from a different perspective.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经讨论了安全威胁，但我们并没有详细地涵盖它们，因为我们只有一个章节来讨论。但是，Web应用程序和RESTful Web服务的安全性是一个广泛的话题。关于这个话题还有很多东西需要学习。我建议你去查看[https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)作为一个起点。那里有很多东西可以学到，你也会从不同的角度学到东西。
