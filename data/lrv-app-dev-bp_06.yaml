- en: Chapter 6. Creating a Photo Gallery System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 创建照片库系统
- en: 'In this chapter, we''ll code a simple photo gallery system with Laravel. We''ll
    also cover Laravel''s built-in file validation, file upload, and the **hasMany**
    database relation mechanism. We will use the `validation` class to validate the
    data and files. Also, we''ll cover the file class for processing files. The following
    topics are covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Laravel编写一个简单的照片库系统。我们还将涵盖Laravel内置的文件验证、文件上传和**hasMany**数据库关系机制。我们将使用`validation`类来验证数据和文件。此外，我们还将涵盖用于处理文件的文件类。本章涵盖以下主题：
- en: Creating an Album model
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建相册模型
- en: Creating an Image model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建图像模型
- en: Creating an album
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建相册
- en: Creating a photo upload form
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建照片上传表单
- en: Moving photos between albums
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在相册之间移动照片
- en: Creating a table and migrating albums
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建相册表并迁移
- en: 'We assume that you''ve already defined the database credentials in the `database.php`
    file located at `app/config/`. To build a photo gallery system, we need a database
    that has two tables: `albums` and `images`. To create a new database, simply run
    the following SQL command:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你已经在`app/config/`目录下的`database.php`文件中定义了数据库凭据。要构建一个照片库系统，我们需要一个包含两个表`albums`和`images`的数据库。要创建一个新数据库，只需运行以下SQL命令：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After successfully creating the database for the application, we will first
    need to create the `albums` table and install it in the database. To do this,
    open up your terminal, navigate through your project folder, and run the following
    command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建应用程序的数据库后，我们首先需要创建`albums`表并将其安装到数据库中。为此，请打开终端，导航到项目文件夹，运行以下命令：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding command will generate a migration file under `app/database/migrations`
    to generate a new MySQL table, named `posts`, in our `laravel_photogallery` database.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在`app/database/migrations`下生成一个迁移文件，用于在我们的`laravel_photogallery`数据库中生成一个名为`posts`的新MySQL表。
- en: 'To define our table columns, we need to edit the migration file. After editing,
    the file should have the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义我们的表列，我们需要编辑迁移文件。编辑后，文件应该包含以下代码：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After saving the file, we need to use a simple artisan command again to execute
    migrations:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，我们需要再次使用简单的artisan命令来执行迁移：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If no error has occurred, please check the `laravel_photogallery` database for
    the `albums` table and its columns.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有发生错误，请检查`laravel_photogallery`数据库的`albums`表及其列。
- en: 'Let''s examine the columns in the following list:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查以下列表中的列：
- en: '`id`: This column is used for storing the ID of the album'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：此列用于存储相册的ID'
- en: '`name`: This column is used for storing the name of the album'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：此列用于存储相册的名称'
- en: '`description`: This column is used for storing the description of the album'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：此列用于存储相册的描述'
- en: '`cover_image`: This column is for storing the cover image of the album'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cover_image`：此列用于存储相册的封面图像'
- en: We've successfully created our `albums` table, so we need to code our **Album**
    model.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功创建了`albums`表，现在需要编写我们的**Album**模型。
- en: Creating an Album model
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建相册模型
- en: As you know, for anything related to database operations on Laravel, using models
    is the best practice. We will benefit from using the Eloquent ORM.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，对于Laravel上的任何与数据库操作相关的事情，使用模型是最佳实践。我们将受益于使用Eloquent ORM。
- en: 'Save the following code as `Album.php` in the `app/models/` directory:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码保存为`Album.php`，放在`app/models/`目录中：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We have set the database table name using the `protected $table` variable; we've
    also set the editable columns using the `protected $fillable` variable, which
    we've already seen and used in previous chapters. The variables that are defined
    in the model are enough for using Laravel's Eloquent ORM. We'll cover the `public
    Photos ()` function in the *Assigning a photo to an album* section of this chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`protected $table`变量设置了数据库表名；我们还使用了`protected $fillable`变量设置了可编辑的列，这是我们在之前章节中已经见过和使用过的。模型中定义的变量足以使用Laravel的Eloquent
    ORM。我们将在本章的*将照片分配给相册*部分中介绍`public Photos()`函数。
- en: Our **Album** model is ready; now we need an **Image** model and a database
    to assign photos to albums. Let's create them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的**Album**模型已准备好；现在我们需要一个**Image**模型和一个分配照片到相册的数据库。让我们创建它们。
- en: Creating the images database with the migrating class
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用迁移类创建图像数据库
- en: 'To create our migration file for images, open up your terminal, navigate through
    your project folder, and run the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要为图像创建我们的迁移文件，打开终端，导航到项目文件夹，运行以下命令：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you know, the command will generate a migration file in `app/database/migrations`.
    Let''s edit the migration file; the final code should be as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，该命令将在`app/database/migrations`中生成一个迁移文件。让我们编辑迁移文件；最终代码应该如下所示：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After editing the migration file, run the following migrate command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑迁移文件后，运行以下迁移命令：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you know, the command creates the `images` table and its columns. If no error
    has occurred, check the `laravel_photogallery` database for the `users` table
    and the columns.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，该命令创建了`images`表及其列。如果没有发生错误，请检查`laravel_photogallery`数据库的`users`表及其列。
- en: 'Let''s examine the columns in the following list:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查以下列表中的列：
- en: '`id`: This column is used for storing the id of the image'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：此列用于存储图像的ID'
- en: '`album_id`: This column is used for storing the id of the image''s album'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`album_id`：此列用于存储图像所属相册的ID'
- en: '`description`: This column is used for storing the description of the image'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：此列用于存储图像的描述'
- en: '`image`: This column is used for storing the path of the image'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`：此列用于存储图像的路径'
- en: We need to explain one more thing for this migration file. As you can see in
    the migration code, there is a `foreign` key. We use the `foreign` key when we
    need to link two tables. We have an `albums` table and each album will have images.
    If the album is deleted from the database, you want all its images to be deleted
    as well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要解释一下这个迁移文件的另一件事。如你在迁移代码中所见，有一个`foreign`键。当我们需要链接两个表时，我们使用`foreign`键。我们有一个`albums`表，每个相册都会有图像。如果从数据库中删除相册，你也希望删除其所有图像。
- en: Creating an Image model
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Image模型
- en: 'We''ve already created the `images` table. So, as you know, we need a model
    to operate database tables on Laravel. To create that, save the following code
    as Image.php in the `app/models/` directory:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了`images`表。所以，你知道，我们需要一个模型来在Laravel上操作数据库表。为了创建它，将以下代码保存为Image.php在`app/models/`目录中：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Our **Image** model is ready; now we need a controller to create the albums
    on our database. Let's create that.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的**Image**模型已经准备好了；现在我们需要一个控制器来在我们的数据库上创建相册。让我们来创建它。
- en: Creating an album
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建相册
- en: As you know from the previous chapters in this book, Laravel has a great RESTful
    controller mechanism. We'll continue to use that to keep the code simple and short
    during development. In the next chapters, we'll cover another great controller/routing
    method named **Resource Controllers**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从本书的前几章中所了解的，Laravel拥有一个很棒的RESTful控制器机制。我们将继续使用它来在开发过程中保持代码简单和简洁。在接下来的章节中，我们将介绍另一种很棒的控制器/路由方法，名为**资源控制器**。
- en: 'To list, create, and delete an album, we need some functions in our controller.
    To create them, save the following code as `AlbumsController.php` in the `app/controllers/`
    directory:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了列出、创建和删除相册，我们需要在我们的控制器中添加一些函数。为了创建它们，将以下代码保存为`AlbumsController.php`在`app/controllers/`目录中：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `postCreate()` function first validates the posted data of the form. We'll
    cover validation next. If the data is validated successfully, we will rename the
    cover image and upload it with a new filename, because the code overwrites files
    which have the same name.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`postCreate()`函数首先验证表单提交的数据。我们将在下一节中介绍验证。如果数据验证成功，我们将重命名封面图像并使用新文件名上传它，因为代码会覆盖具有相同名称的文件。'
- en: 'The `getDelete()` function is deleting the album along with assigned images
    (which are stored in an `images` table) from the database. Please remember the
    following migration file code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`getDelete()`函数正在从数据库中删除相册以及分配的图像（存储在`images`表中）。请记住以下迁移文件代码：'
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Before creating our templates, we need to define the routes. So, open up the
    `routes.php` file in the `app` folder and replace the code with the following
    one:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的模板之前，我们需要定义路由。因此，打开`app`文件夹中的`routes.php`文件，并用以下代码替换它：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we need some template files to show, create, and list the albums. First,
    we should create the index template. To create that, save the following code as
    `index.blade.php` in the `app/views/` directory:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一些模板文件来显示、创建和列出相册。首先，我们应该创建索引模板。为了创建它，将以下代码保存为`index.blade.php`在`app/views/`目录中：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Adding a template for creating albums
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为创建相册添加模板
- en: 'As you can see in the following code, we prefer to use Twitter''s bootstrap
    **CSS** framework. This framework allows you to rapidly create useful, responsive,
    and multi-browser supported interfaces. Next, we need to create a template for
    creating albums. To create that, save the following code as `createalbum.blade.php`
    in the `app/views/` directory:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在以下代码中所看到的，我们更喜欢使用Twitter的bootstrap **CSS**框架。这个框架允许你快速创建有用、响应式和多浏览器支持的界面。接下来，我们需要为创建相册创建一个模板。为了创建它，将以下代码保存为`createalbum.blade.php`在`app/views/`目录中：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The template creates a basic upload form and shows the validation errors which
    are passed from the controller side. We need just one more template file to list
    the album images. So, to create it, save the following code as `album.blade.php`
    in the `app/views/` directory:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 该模板创建了一个基本的上传表单，并显示了从控制器端传递的验证错误。我们只需要再创建一个模板文件来列出相册图像。因此，为了创建它，将以下代码保存为`album.blade.php`在`app/views/`目录中：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As you may remember, we have used the `hasMany()` Eloquent method on our model
    side. On the controller side, we use the function as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能记得的，我们在模型端使用了`hasMany()` Eloquent方法。在控制器端，我们使用以下函数：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The code fetches the whole image data in an array that belongs to the album.
    Because of that, we use the `foreach` loop in the following template:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码在数组中获取了属于相册的整个图像数据。因此，我们在以下模板中使用`foreach`循环：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating a photo upload form
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个照片上传表单
- en: 'Now we need to create a photo upload form. We''ll upload the photos and assign
    them to the albums. Let''s first set the routes; open the `routes.php` file in
    the `app` folder and add the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个照片上传表单。我们将上传照片并将它们分配到相册中。让我们首先设置路由；打开`app`文件夹中的`routes.php`文件，并添加以下代码：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We need a template for the photo upload form. To create that, save the following
    code as `addimage.blade.php` in the `app/views/` directory:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个照片上传表单的模板。为了创建它，将以下代码保存为`addimage.blade.php`在`app/views/`目录中：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Before creating the template, we need to code our controller. So, save the
    following code as `ImageController.php` in the `app/controllers/` directory:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建模板之前，我们需要编写我们的控制器。因此，将以下代码保存为`ImageController.php`在`app/controllers/`目录中：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The controller has three functions; the first one is the `getForm()` function.
    This function basically shows our photo upload form. The second one validates
    and inserts the data into the database. We'll explain the validating and inserting
    functions in the next section. The third one is the `getDelete()` function. This
    function basically deletes the image records from the database.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器有三个函数；第一个是`getForm()`函数。这个函数基本上显示了我们的照片上传表单。第二个函数验证并将数据插入数据库。我们将在下一节中解释验证和插入函数。第三个是`getDelete()`函数。这个函数基本上从数据库中删除图像记录。
- en: Validating the photo
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证照片
- en: 'Laravel has a powerful validation library, which has been mentioned in this
    book many times. We validate the data in controllers as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel拥有强大的验证库，在本书中已经多次提到。我们在控制器中验证数据如下：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s examine the code. We defined some rules in `array`. We have two validation
    rules in the `rules` array. The first rule is as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下代码。我们在`array`中定义了一些规则。在`rules`数组中有两个验证规则。第一个规则如下：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding rule means that the `album_id` field is required (must be posted
    in the form), it must be a numeric value, and must exist in the `id` column of
    the `albums` table as we want to assign images to `albums`. The second rule is
    as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的规则意味着`album_id`字段是必需的（必须在表单中发布），必须是数值，并且必须存在于`albums`表的`id`列中，因为我们想要将图片分配给`albums`。第二条规则如下：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding rule means that the `image` field is required (must be posted
    in the form) and its content must be an image. Then we check the posted form data
    using the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的规则意味着`image`字段是必需的（必须在表单中发布），其内容必须是图片。然后我们使用以下代码检查发布的表单数据：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The validation function needs two variables. The first one is the data that
    we need to validate. In this case, we set that using the `Input::all()` method,
    which means we need to validate the posted form data. The second one is the `rules`
    variable. The `rules` variable must be set as an array as shown in the following
    code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 验证函数需要两个变量。第一个是我们需要验证的数据。在这种情况下，我们使用`Input::all()`方法进行设置，这意味着我们需要验证发布的表单数据。第二个是`rules`变量。`rules`变量必须设置为一个数组，如下所示：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Laravel's validation class comes with many predefined rules. You can see the
    updated list of all available validation rules at [http://laravel.com/docs/validation#available-validation-rules](http://laravel.com/docs/validation#available-validation-rules).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的验证类带有许多预定义规则。您可以在[http://laravel.com/docs/validation#available-validation-rules](http://laravel.com/docs/validation#available-validation-rules)上看到所有可用验证规则的更新列表。
- en: 'Sometimes, we need to validate only specific MIME types, such as `JPEG, BMP,
    ORG, and PNG`. You can easily set the validation rule for this kind of validation
    as shown in the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要验证特定的MIME类型，例如`JPEG、BMP、ORG和PNG`。您可以轻松地设置此类验证的验证规则，如下所示：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then we check the validation process using the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用以下代码检查验证过程：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If validation fails, we redirect the browser to the image upload form. Then,
    we show the rules in the template file using the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证失败，我们将浏览器重定向到图片上传表单。然后，我们使用以下代码在模板文件中显示规则：
- en: '[PRE27]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Assigning a photo to an album
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将照片分配给相册
- en: 'The `postAdd( )` function is used for processing the request to create a new
    image record in the database. We get the author''s ID using the following previously
    mentioned method:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`postAdd()`函数用于处理请求，在数据库中创建新的图片记录。我们使用以下先前提到的方法获取作者的ID：'
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Using the following method, we assign the current user with the blog post.
    We have a new method in the query as shown in the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下方法，我们将当前用户与博客文章进行关联。我们在查询中有一个新的方法，如下所示：
- en: '[PRE29]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We''ve defined a `public Photos ()` function in our Album model using the following
    code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在相册模型中定义了一个`public Photos()`函数，使用以下代码：
- en: '[PRE30]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `hasMany()` method is an Eloquent function for creating relations between
    tables. Basically, the function has one `required` variable and one optional variable.
    The first variable (`required`) is for defining the target model. The second,
    which is the optional variable, is for defining the source column of the current
    model's table. In this case, we store the albums' IDs in the `album_id` column
    in the `images` table. Because of that, we need to define the second variable
    as `album_id` in the function. The second parameter is only required if your ID
    doesn't follow the convention. Using this method, we can pass our albums' information
    and assigned images' data to the template at the same time.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`hasMany()`方法是一个用于创建表之间关系的Eloquent函数。基本上，该函数有一个`required`变量和一个可选变量。第一个变量（`required`）用于定义目标模型。第二个可选变量用于定义当前模型表的源列。在这种情况下，我们将相册的ID存储在`images`表的`album_id`列中。因此，我们需要在函数中将第二个变量定义为`album_id`。如果您的ID不遵循约定，则第二个参数是必需的。使用这种方法，我们可以同时将相册信息和分配的图片数据传递给模板。'
- en: 'As you can remember from [Chapter 4](ch04.html "Chapter 4. Building a Personal
    Blog"), *Building a Personal Blog*, we can list the relational data in the `foreach`
    loop. Let''s have a quick look at the image-listing section of code in our template
    file, which is located in `app/views/ album.blade.php`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[第4章](ch04.html "第4章。构建个人博客")*构建个人博客*中所记得的，我们可以在`foreach`循环中列出关系数据。让我们快速查看一下我们模板文件中的图像列表部分的代码，该文件位于`app/views/album.blade.php`中：
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Moving photos between albums
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在相册之间移动照片
- en: 'Moving photos between albums is a great feature for managing the album''s images.
    Many photo gallery systems come with this feature. So, we can code it easily with
    Laravel. We need a form and controller function for adding this feature to our
    photo gallery system. Let''s code the controller function first. Open the `ImagesController.php`
    file which is located in `app/controllers/` and add the following code in it:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在相册之间移动照片是管理相册图像的一个很好的功能。许多相册系统都具有此功能。因此，我们可以使用Laravel轻松编写它。我们需要一个表单和控制器函数来将此功能添加到我们的相册系统中。让我们首先编写控制器函数。打开位于`app/controllers/`中的`ImagesController.php`文件，并在其中添加以下代码：
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'As you can see in the preceding code, we use the `Validation` class again.
    Let''s examine the rules. The first rule is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的代码中所看到的，我们再次使用`Validation`类。让我们检查规则。第一个规则如下：
- en: '[PRE33]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The preceding rule means that the `new_album` field is `required` (must be
    posted in the form), must be a numeric value, and exist in the `id` column of
    the `albums` table. We want to assign images to albums, so the images must exist.
    The second rule is as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的规则意味着`new_album`字段是`required`（必须在表单中发布），必须是数值，并且存在于`albums`表的`id`列中。我们想要将图片分配给相册，所以图片必须存在。第二条规则如下：
- en: '[PRE34]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding rule means that the `photo` field is `required` (must be posted
    in the form), must be a numeric value, and exist in the `id` column of the `images`
    table.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的规则意味着`photo`字段是`required`（必须在表单中发布），必须是数值，并且存在于`images`表的`id`列中。
- en: 'After successful validation, we update the `album_id` column of the `photos`
    field and redirect the browser to show the new album of photos using the following
    code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 成功验证后，我们会更新`photos`字段的`album_id`列，并使用以下代码将浏览器重定向到显示新相册照片的页面：
- en: '[PRE35]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The final code of the `Images` controller should be as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`Images`控制器的最终代码应如下所示：'
- en: '[PRE36]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Our controller is ready, so we need to set up the updated form''s route in
    `app/routes.php`. Open the file and add the following code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制器已经准备好了，所以我们需要在`app/routes.php`中设置更新后的表单路由。打开文件并添加以下代码：
- en: '[PRE37]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The final code located in `app/routes.php` should look as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`app/routes.php`中的最终代码应如下所示：'
- en: '[PRE38]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Creating an update form
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建更新表单
- en: 'Now we need to create our update form in our template file. Open the template
    file which is located in `app/views/ album.blade.php` and change the `foreach`
    loop as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在模板文件中创建更新表单。打开位于`app/views/album.blade.php`中的模板文件，并将`foreach`循环更改如下：
- en: '[PRE39]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've created a simple photo gallery system with Laravel's
    built-in functions and the Eloquent database driver. We've learned how to validate
    the data, and about the powerful data relation method in Eloquent named hasMany.
    In the next chapters, we'll learn to work with more complex tables, and relational
    data and relation types.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Laravel的内置函数和Eloquent数据库驱动创建了一个简单的相册系统。我们学会了如何验证数据，以及Eloquent中强大的数据关联方法hasMany。在接下来的章节中，我们将学习如何处理更复杂的表格和关联数据以及关联类型。
