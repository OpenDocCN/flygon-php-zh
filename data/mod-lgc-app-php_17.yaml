- en: Chapter 17. Conclusion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第17章。结论
- en: Let us think back on our progress.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下我们的进展。
- en: We started out with a spaghetti mess of a legacy application. The entire application
    was based in the document root, and users browsed directly to page scripts. It
    used an include-oriented architecture, where merely including a file caused logic
    to be executed. Global variables were scattered everywhere, which made debugging
    difficult to impossible. There were no tests of any sort, much less unit tests,
    so every change raised the possibility of breaking something else. There was no
    clear separation of model, view, and controller layers. SQL statements were embedded
    throughout our code, and domain logic was mixed in with presentation and action
    logic.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始时是一个混乱的遗留应用程序。整个应用程序都基于文档根目录，并且用户直接浏览到页面脚本。它使用了一个包含导向的架构，仅仅包含一个文件就会导致逻辑被执行。全局变量随处可见，这使得调试变得困难甚至不可能。没有任何测试，更不用说单元测试，所以每次更改都可能导致其他地方出现问题。模型、视图和控制器层没有明确的分离。SQL语句嵌入在我们的代码中，领域逻辑与展示和行为逻辑混在一起。
- en: Now, after a great deal of effort, dedication, and commitment, we have modernized
    our legacy application. The document root consists only of public resources and
    a front controller. All the page scripts have been distilled into separate model,
    view, and controller layers. These layers are represented by a well-structured
    series of classes, each with its own set of unit tests. The application objects
    are built inside a dependency injection container, keeping their operation separate
    from their creation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在经过大量的努力、奉献和承诺之后，我们已经现代化了我们的遗留应用程序。文档根目录只包含公共资源和一个前端控制器。所有页面脚本都被分解成单独的模型、视图和控制器层。这些层由一系列良好结构的类表示，每个类都有自己的一套单元测试。应用程序对象是在依赖注入容器内构建的，使它们的操作与它们的创建分开。
- en: What could possibly be left to do?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 还有什么可以做的吗？
- en: Opportunities for improvement
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进机会
- en: Even though we have modernized our application, it is still not perfect. Frankly,
    it will *never* be perfect (whatever that may happen to mean). There will always
    be some opportunity to improve it. Indeed, the modernization process itself has
    revealed many opportunities for us.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们已经现代化了我们的应用程序，它仍然不完美。坦率地说，它将永远不会完美（无论这意味着什么）。总会有一些机会来改进它。事实上，现代化过程本身已经为我们揭示了许多机会。
- en: The data source layer is composed of a series of Gateways. While they serve
    our purpose nicely for now, it may be better to restructure these as Data Mappers
    that interact more cleanly with our domain objects.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据源层由一系列网关组成。虽然它们现在很好地满足了我们的目的，但将这些重组为与我们的领域对象更清晰地交互的数据映射器可能更好。
- en: The domain layer is built on top of Transaction Scripts. These, too, are fine
    in their own way, but as we work with them, we may realize that they are insufficient
    for our needs. They combine too many aspects of our domain logic into monolithic
    classes and methods. We will probably want to begin to tease out the different
    aspects of our domain logic into a Domain Model and wrap it with a series of Service
    Layers.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域层建立在事务脚本之上。这些也都有它们自己的好处，但在使用它们时，我们可能会意识到它们对我们的需求来说是不够的。它们将我们的领域逻辑的太多方面结合到了单块的类和方法中。我们可能会希望开始将我们的领域逻辑的不同方面分离出来，形成一个领域模型，并用一系列服务层来包装它。
- en: The presentation layer is still relatively monolithic in nature. We may want
    to convert our view files to a Two Step View system. That will give us a unified
    layout across the entire application, provide a reusable series of "partial" templates,
    and help us reduce each view file to its central core.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示层仍然相对来说是单块的。我们可能希望将我们的视图文件转换为一个两步视图系统。这将为我们提供一个统一的布局，提供一系列可重用的“部分”模板，并帮助我们将每个视图文件减少到其核心部分。
- en: Our controllers may be handling several unrelated actions as an artifact of
    the legacy architecture. We may wish to reorganize them into more sensible groups
    for quicker understanding. Indeed, each controller may be doing too much work
    (i.e., a fat controller instead of a skinny one) that could better be handled
    by helper classes or a Service Layer.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的控制器可能作为遗留架构的产物处理了几个不相关的操作。我们可能希望重新组织它们，以便更快地理解。事实上，每个控制器可能做的工作太多了（即一个臃肿的控制器而不是一个精简的控制器），这些工作可能更好地由辅助类或服务层来处理。
- en: 'The response system combines the concerns of content building with HTTP response
    building. We may wish to refactor the entire response-sending process to two or
    more separate layers: one that deals with the body of the response and one that
    deals with the response headers. Indeed, we may wish to represent the response
    as a Data Transfer Object that describes our intentions, but leaves the actual
    response building-and-sending to a separate handler.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应系统将内容构建与HTTP响应构建的问题结合在一起。我们可能希望重构整个响应发送过程为两个或更多个单独的层：一个处理响应主体，一个处理响应头。事实上，我们可能希望将响应表示为数据传输对象，描述我们的意图，但将实际的响应构建和发送交给一个单独的处理程序。
- en: The routing system is definitely transitional. We probably still depend on query
    parameters in the URL to pass client request information into the application,
    instead of using "pretty URLs" where the parameters are represented as parts of
    the path information. The routes themselves merely describe the class to be invoked,
    and do not carry as much information as they should about the action that the
    application should be executing. We will want to replace this basic router with
    a more powerful one.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由系统肯定是过渡性的。我们可能仍然依赖URL中的查询参数将客户端请求信息传递到应用程序中，而不是使用“美化的URL”，其中参数被表示为路径信息的一部分。路由本身仅描述要调用的类，并没有携带应用程序应执行的动作的太多信息。我们将希望用更强大的路由器替换这个基本的路由器。
- en: The front controller is acting as our dispatcher, instead of handing off route
    dispatch to a separate object. We may wish to separate the task of discovering
    the route information from the task of dispatching that route.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端控制器充当我们的调度器，而不是将路由分发交给一个单独的对象。我们可能希望将发现路由信息的任务与分发该路由的任务分开。
- en: Finally, our dependency injection container is very "manual" in nature. We may
    wish to find a container system that automates some of the more basic aspects
    of object creation, allowing us to concentrate on the more complex aspects of
    service definition.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们的依赖注入容器在本质上是非常“手动”的。我们可能希望找到一个能自动化一些对象创建的基本方面的容器系统，这样我们就可以集中精力解决服务定义的更复杂方面。
- en: In other words, we have the problems of a modern codebase, not a legacy one.
    We have traded the low-quality problems of a spaghetti mess for the "high-quality"
    problems of an autoloaded, dependency-injected, unit-tested, layer-separated,
    front-controlled codebase.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们面临的是现代代码库的问题，而不是遗留代码库的问题。我们已经将一个混乱的低质量问题换成了一个自动加载、依赖注入、单元测试、层分离、前端控制的高质量问题。
- en: Because we have modernized our codebase, we can address these problems in a
    completely different way than we did under a legacy regime. We can bring the tools
    of Refactoring to bear against the code. Now that we have better separation of
    concerns, we can make small changes in limited sections of the code to improve
    the quality of that code. Each change can be tested for regressions via our unit
    test suite.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经现代化了我们的代码库，我们可以以完全不同的方式解决这些问题，而不是在遗留体系下所做的。我们可以利用重构工具来改进代码。现在我们有了更好的关注点分离，我们可以在代码的有限部分进行小的改变，以提高代码的质量。每个改变都可以通过我们的单元测试套件进行回归测试。
- en: Each new feature that we add can be plugged into our new application architecture
    using the techniques we have acquired while modernizing it. No longer do we toss
    in a new page script copied-and-modified from some previous one. Instead, we add
    a unit-tested controller class and route to it through the front controller. New
    functionality in our domain logic is added as a unit-tested class or method in
    the domain layer. Changes and additions to presentation can be tested separately
    from our models and controllers via our view layer.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加的每个新功能都可以使用我们在现代化过程中获得的技术插入到我们的新应用程序架构中。我们不再随意地从以前的页面脚本中复制和修改一个新页面。相反，我们添加了一个经过单元测试的控制器类，并通过前端控制器路由到它。我们领域逻辑中的新功能是作为领域层中的经过单元测试的类或方法添加的。对呈现的更改和添加可以通过我们的视图层与我们的模型和控制器分开进行测试。
- en: Conversion to Framework
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换到框架
- en: There is also the possibility of converting our application over to the latest,
    hottest framework. Although switching to a public framework is a little bit like
    an application rewrite, it should be much easier now that we have a well-separated
    series of application layers. We should be able to determine which parts would
    be ported over to a public framework, and which are merely incidental to the operation
    of our particular architecture.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还有将我们的应用程序转换到最新、最热门的框架的可能性。虽然切换到一个公共框架有点像应用程序重写，但现在应该更容易，因为我们有一系列良好分离的应用程序层。我们应该能够确定哪些部分将被移植到公共框架，哪些只是我们特定架构运作的附属部分。
- en: I advise neither for nor against this approach. I will only point out that,
    in the course of modernizing our legacy application, we have essentially built
    our own custom-tailored framework. We have done so with what is probably a more
    disciplined and rigorous approach than most public frameworks in PHP land. While
    we gain the community that goes along with a public framework, we also gain the
    baggage of the framework developers themselves. These and other tradeoffs are
    beyond my ability to judge on your behalf; you will have to decide for yourself
    if the benefits outweigh the costs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我不建议支持或反对这种方法。我只会指出，在现代化我们的遗留应用程序的过程中，我们实际上建立了我们自己定制的框架。我们所做的可能比PHP领域中大多数公共框架更加纪律严明和严格。虽然我们获得了与公共框架一起的社区，但我们也获得了框架开发者自己的包袱。这些以及其他权衡是我无法代表你来判断的；你必须自己决定利益是否超过成本。
- en: Review and next steps
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: Regardless of how we proceed from here, there can be no doubt that the improvement
    of the *application* has led to an improvement in our quality of life and in our
    professional approach. The time we have invested in the code has paid off not
    only in terms of our employment, where we now spend less time feeling frustrated
    and demoralized, and more time feeling competent and productive. It has paid off
    in terms of our skills, our knowledge, and our experience regarding application
    architecture, patterns, and practices.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们从这里如何继续，毫无疑问，*应用程序*的改进已经导致了我们生活质量和专业方法的改进。我们在代码上投入的时间不仅在我们的就业方面得到了回报，我们现在花费更少的时间感到沮丧和泄气，更多的时间感到能干和富有成效。它在我们的技能、知识和应用架构、模式和实践方面也得到了回报。
- en: Our goals now are to continue improving our code, to continue improving ourselves,
    and to help others to improve as well. We need to share our knowledge. In doing
    so, we will reduce the amount of suffering in the world that comes from having
    to deal with legacy applications. As more people learn to apply what we have learned
    here, we can ourselves go on to bigger and better and more interesting issues
    in our professional lives.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的目标是继续改进我们的代码，继续改进自己，并帮助其他人也改进。我们需要分享我们的知识。通过这样做，我们将减少世界上因不得不处理遗留应用程序而产生的痛苦。当更多的人学会应用我们在这里学到的东西时，我们自己也可以继续处理更大、更好、更有趣的专业问题。
- en: So go forth and spread the good news to your colleagues, compatriots, and co-workers,
    that they need not suffer with legacy applications if they do not want to. They,
    can also modernize their codebases, and improve their own lives in doing so.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以继续向你的同事、同胞和同事们传播这个好消息，他们不必因为不想要遗留应用程序而受苦。他们也可以现代化他们的代码库，并在这样做的过程中改善自己的生活。
