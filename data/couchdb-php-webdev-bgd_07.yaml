- en: Chapter 7. User Profiles and Modeling Posts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。用户个人资料和帖子建模
- en: With the base of our application created, we have allowed users to sign up and
    log in to our application. This is a huge part of any application, but we are
    still missing the creation of content that we can connect to the user accounts.
    We'll go through all of it in this chapter!
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 随着我们的应用程序的基础创建，我们允许用户注册并登录到我们的应用程序。这是任何应用程序的重要部分，但我们仍然缺少可以连接到用户帐户的内容的创建。我们将在本章中详细介绍所有内容！
- en: 'In this chapter we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Create a user profile to publicly display a user's information
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用户个人资料，以公开显示用户的信息
- en: Clean up the profile using Bootstrap
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bootstrap清理个人资料
- en: Handle all kinds of exceptions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理各种异常
- en: Discuss modeling of posts and relationships in CouchDB
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论在CouchDB中对帖子和关系的建模
- en: Create a form to create posts from the logged-in user's profile
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个表单，从已登录用户的个人资料中创建帖子
- en: With our road mapped out for us, let's move on to talk about the user profile!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有了我们的路线图，让我们继续讨论用户个人资料！
- en: User profile
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户个人资料
- en: The main attraction of any social network is a user's profile; the user profile
    usually displays the basic information of a user and shows any content that they
    have created.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 任何社交网络的主要吸引力是用户的个人资料；用户个人资料通常显示用户的基本信息，并显示他们创建的任何内容。
- en: 'By the end of this section, our user profiles will work as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节结束时，我们的用户个人资料将按以下方式工作：
- en: If a visitor goes to `http://localhost/verge/user/johndoe`, our routing system
    will match it with the route `/user/:username`
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果访问者转到`http://localhost/verge/user/johndoe`，我们的路由系统将将其与路由`/user/:username`匹配
- en: The `index.php` file will take `johndoe` as the value for `username`, and pass
    it to the `User` class in an attempt to find the user document with a matching
    ID
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.php`文件将`johndoe`作为`username`的值，并将其传递给`User`类，尝试查找具有匹配ID的用户文档'
- en: If `johndoe` is found, `index.php` will display a profile with the information
    for `johndoe`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找到`johndoe`，`index.php`将显示一个带有`johndoe`信息的个人资料
- en: If `johndoe` is not found, the visitor will see a `404` error, meaning that
    the user with that username does not exist
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果找不到`johndoe`，访问者将看到一个`404`错误，这意味着该用户名的用户不存在
- en: Finding a user with routes
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用路由查找用户
- en: In order to find users, we'll first need to create a function that will take
    the username as a parameter and return a user object if it is a valid one.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到用户，我们首先需要创建一个函数，该函数将以用户名作为参数，并在有效时返回一个用户对象。
- en: Time for action — getting single user documents
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-获取单个用户文档
- en: As you might remember, in [Chapter 3](ch03.html "Chapter 3. Getting Started
    with CouchDB and Futon"), *Getting Started with CouchDB and Futon*, we were able
    to retrieve a document from CouchDB just by passing the ID of the document we
    wanted. We are going to do the same thing this time to find a user's information
    using Sag. One important thing to note is that we'll have to make sure that when
    we look for users using their ID, we need to prepend it with the `org.couchdb.user:`
    namespace.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得，在[第3章](ch03.html "第3章。使用CouchDB和Futon入门")中，*使用CouchDB和Futon入门*，我们能够通过传递所需文档的ID来从CouchDB中检索文档。这一次，我们将使用Sag来找到用户的信息。需要注意的一点是，当我们使用ID查找用户时，我们需要确保在查找用户时，需要使用`org.couchdb.user:`命名空间进行前置。
- en: Let's start by opening `classes/user.php` and scrolling to the bottom.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从打开`classes/user.php`并滚动到底部开始。
- en: Add a `public static` function called `get_by_username()`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`get_by_username()`的`public static`函数。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In order to find a user by ID, we need to allow our function to accept the parameter
    `$username`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了通过ID查找用户，我们需要允许我们的函数接受参数`$username`。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, let's set the database to instantiate Bones and a proxy Sag. Remember,
    we're dealing with the `_users` database, so we'll need to log in with the `admin`
    privileges.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们设置数据库来实例化Bones和代理Sag。记住，我们正在处理`_users`数据库，所以我们需要以`admin`权限登录。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we can connect to the `_users` database, let's issue a `get` call through
    Sag that will return a user by adding `org.couchdb.user:` to the passed username.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以连接到`_users`数据库，让我们通过Sag发出一个`get`调用，通过添加`org.couchdb.user:`来返回一个用户的传递用户名。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What just happened?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We created a `public static` function called `get_by_username` that allows us
    to pass in `$username`. To actually get the document, we need to use our `ADMIN_USER`
    and `ADMIN_PASSWORD` constants to access the `_users` database. In order for us
    to return a user object, we needed to create a new user object called `$user`.
    We then used Sag's `get` call to identify the document by ID and return it as
    a `stdClass` object called `$document`. We then grabbed the values from the `document`
    variable and passed them into the corresponding values on the `$user` object.
    Finally, we returned the user document to wherever the function was called from.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`get_by_username`的`public static`函数，允许我们传入`$username`。要实际获取文档，我们需要使用我们的`ADMIN_USER`和`ADMIN_PASSWORD`常量来访问`_users`数据库。为了返回一个用户对象，我们需要创建一个名为`$user`的新用户对象。然后我们使用Sag的`get`调用通过ID标识文档并将其作为名为`$document`的`stdClass`对象返回。然后我们从`document`变量中获取值，并将它们传递到`$user`对象上的相应值。最后，我们将用户文档返回到调用函数的地方。
- en: Now that we have a function to handle the finding of a user by the username,
    let's create a route in `index.php` that will pass a username to this function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个处理按用户名查找用户的函数，让我们在`index.php`中创建一个路由，将用户名传递给这个函数。
- en: Time for action — creating a route for user profiles
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-为用户个档案创建路由
- en: We are going to create a route so that people can see a profile by going to
    a unique URL. This will be the first time that we'll really utilize our routing
    system's ability to handle route variables.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个路由，以便人们可以通过转到唯一的URL来查看个人资料。这将是我们真正利用我们的路由系统处理路由变量的能力的第一次。
- en: 'Open `index.php`, and create a `get` route for a user profile by entering the
    following code:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`，并创建一个用户个人资料的`get`路由，输入以下代码：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s use the route variable `:username` to tell us the username that we want
    to find; we''ll pass this to the `get_by_username` function we created in the
    `User` class. Finally, we''ll pass the returned `user` object to the view in the
    `user` variable:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用路由变量`:username`告诉我们要查找的用户名；我们将把这个变量传递给我们在`User`类中创建的`get_by_username`函数。最后，我们将返回的`user`对象传递给视图中的`user`变量：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Lastly, we'll render the `user/profile.php` view, which we will create shortly.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将呈现`user/profile.php`视图，我们很快就会创建。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What just happened?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We did a lot in just four lines of code! First, we defined the user profile
    route by using `route /user/:username`. Next, we created a piece of code that
    passes `:username` from the `route` variable to the `get_by_username` function
    in our `user` class. The `get_by_username` function will return an object containing
    the information of a user, and we sent that to our view using `$app->set('user')`.
    Finally, we rendered the user profile.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在短短的四行代码中做了很多事情！首先，我们通过使用`route /user/:username`定义了用户配置文件路由。接下来，我们创建了一段代码，将`route`变量中的`:username`传递给我们`user`类中的`get_by_username`函数。`get_by_username`函数将返回一个包含用户信息的对象，并且我们使用`$app->set('user')`将其发送到我们的视图中。最后，我们呈现了用户配置文件。
- en: Let's go on to create the user profile so that we can see our hard work in action!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建用户配置文件，这样我们就可以看到我们的辛勤工作在发挥作用！
- en: Time for action — creating the user profile
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——创建用户配置文件
- en: We're going to clean up the `user` view a few times in this chapter. But, let's
    start by just dumping out all of the user document content into our view.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将多次清理`user`视图。但是，让我们首先将所有用户文档内容都转储到我们的视图中。
- en: Create a view called `user/profile.php` inside the `views` directory in our
    `working` folder.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`working`文件夹中的`views`目录中创建一个名为`user/profile.php`的视图。
- en: 'Make a simple header for the profile with the following HTML:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为配置文件创建一个简单的标题，使用以下HTML：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Since we don''t have much of a design yet, let''s just use `var_dump` to show
    all of the contents of the `User` document:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们还没有设计，让我们只使用`var_dump`来显示`User`文档的所有内容：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What just happened?
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just created a very basic user profile with a header to tell us that this
    page is the user profile. Then, we used `var_dump` to display all of the contents
    of the `user` object. `var_dump` is a general PHP function that outputs structured
    information about a variable or object and is very useful when you just want to
    make sure that things are working properly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个非常基本的用户配置文件，其中包含一个标题，告诉我们这个页面是用户配置文件。然后，我们使用`var_dump`来显示`user`对象的所有内容。`var_dump`是一个通用的PHP函数，用于输出关于变量或对象的结构化信息，在你只想确保事情正常运行时非常有用。
- en: Testing it out
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试一下
- en: Now that we have a simple user profile setup, let's see how it turned out.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个简单的用户配置文件设置，让我们看看它的效果如何。
- en: Open your browser, and go to `http://localhost/verge/user/johndoe`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器，然后转到`http://localhost/verge/user/johndoe`。
- en: Your browser will show you the following:![Testing it out](graphics/3586_07_005.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的浏览器将显示以下内容：![测试](graphics/3586_07_005.jpg)
- en: Not too shabby, but of course we'll need to clean up the format of this data
    shortly. But, for now, let's make sure to commit our changes to Git.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还不错，但当然我们需要很快清理一下这些数据的格式。但是，现在让我们确保将我们的更改提交到Git。
- en: Adding your changes to Git
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将你的更改添加到Git。
- en: In this section, we started to create a user profile and output a user's information
    directly from CouchDB. Let's add all of our changes to Git, so that we can track
    our progress.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们开始创建用户配置文件，并直接从CouchDB输出用户信息。让我们将所有更改添加到Git，以便跟踪我们的进度。
- en: Open Terminal.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: Type the following command to change directories to our working directory.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以更改目录到我们的工作目录。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We only added one file, `views/user/profile.php`, so let's tell Git to add this
    file to source control.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们只添加了一个文件`views/user/profile.php`，所以让我们告诉Git将这个文件添加到源代码控制中。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Give `Git` a description of what we've done since our last commit.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给`Git`一个描述，说明自上次提交以来我们做了什么。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Fixing some problems
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复一些问题
- en: You may have already noticed that we ignored a potential issue with our user
    profiles, we aren't gracefully handling what happens when a user profile isn't
    found.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们忽略了一个潜在的问题，即当找不到用户配置文件时我们没有优雅地处理发生了什么。
- en: 'For example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: 'If you were to go to `http://localhost/verge/user/someone`, your browser would
    display this very unfriendly error message:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问`http://localhost/verge/user/someone`，你的浏览器会显示这个非常不友好的错误消息：
- en: '![Fixing some problems](graphics/3586_07_010.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![修复一些问题](graphics/3586_07_010.jpg)'
- en: Finding errors
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找错误
- en: In [Chapter 6](ch06.html "Chapter 6. Modeling Users"), we used the `tail` command
    through Terminal to look at Apache's error logs. We're going to do the same thing
    again. Let's take a look at the log from Apache and see if we can figure out what
    went wrong.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。建模用户")中，我们通过终端使用`tail`命令查看Apache的错误日志。我们将再次做同样的事情。让我们看看Apache的日志，看看我们能否弄清楚出了什么问题。
- en: Time for action — examining Apache's log
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——检查Apache的日志
- en: In [Chapter 6](ch06.html "Chapter 6. Modeling Users"), we tried to locate our
    Apache log first. By default, it is saved at `/private/var/log/apache2/error_log`.
    If in the previous chapter you found it was located somewhere else, you can find
    its location again by typing `grep ErrorLog /etc/apache2/httpd.conf`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章。建模用户")中，我们首先尝试定位我们的Apache日志。默认情况下，它保存在`/private/var/log/apache2/error_log`。如果在上一章中发现它位于其他位置，你可以通过在终端中输入`grep
    ErrorLog /etc/apache2/httpd.conf`来再次找到它的位置。
- en: Let's find out what the problem was.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们找出问题出在哪里。
- en: Open Terminal.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Retrieve the last few lines of the log by running the following command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令检索日志的最后几行：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The log will show you a bunch of things, but the most important message is this
    one, that says `PHP Fatal error`. Yours might be slightly different, but the overall
    message is the same.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志会显示很多东西，但最重要的消息是这个，说`PHP致命错误`。你的消息可能略有不同，但总体消息是一样的。
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What just happened?
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We used a `tail` command to return the last few lines of the Apache log. If
    you look closely at the log, you''ll see the `CouchDB error`. To be more specific,
    the error is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`tail`命令来返回Apache日志的最后几行。如果你仔细看日志，你会看到`CouchDB error`。更具体地说，错误如下：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This message means that CouchDB isn't happy with what we are doing, and Sag
    is throwing an error in the form of a `SagCouchException`. In order for us to
    appropriately handle `SagCouchException`, we need to add some code to our call
    to Sag.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个消息意味着CouchDB对我们的操作不满意，Sag以`SagCouchException`的形式抛出了一个错误。为了适当地处理`SagCouchException`，我们需要在对Sag的调用中添加一些代码。
- en: In the previous chapter, we fixed an error by checking for the status code and
    matching it with a resolution. We can keep doing this, but eventually errors are
    going to occur that we're not aware of. From here on out, when an unhandled exception
    occurs, we want to display a friendly error message so that we can debug it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过检查状态代码并将其与分辨率进行匹配来修复了一个错误。我们可以继续这样做，但最终会发生我们不知道的错误。从现在开始，当发生未处理的异常时，我们希望显示友好的错误消息，以便我们可以调试它。
- en: In the next section, we will use Bones to help us show an exception page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将使用Bones来帮助我们显示一个异常页面。
- en: Handling 500 errors
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理500错误
- en: What we're really looking to solve here is how we want to handle 500 errors
    in our application. **500 errors** refer to the HTTP status code `500`, which
    is an*"Internal* Server Error". Generally, this means that something happened,
    and we didn't handle it properly.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想解决的是如何处理应用程序中的500错误。**500错误**指的是HTTP状态代码`500`，即*"内部服务器错误"。通常，这意味着发生了某些事情，我们没有正确处理。
- en: Time for action — handling 500 errors with Bones
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 使用Bones处理500错误
- en: Let's start by creating a simple view that will display errors to us.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个简单的视图，用于向我们显示错误。
- en: Let's start by creating a new folder called `error` inside our `views` directory.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先在我们的`views`目录内创建一个名为`error`的新文件夹。
- en: Create a new view called `500.php`, and place it into the `errors` folder (views/error/500.php).
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`500.php`的新视图，并将其放入`errors`文件夹中（views/error/500.php）。
- en: 'Add the following code to the `500.php` output information on the exception:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`500.php`中添加以下代码以输出异常信息：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Add a function called `error500` in `lib/bones.php` that will allow us to display
    500 errors easily around our application.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`lib/bones.php`中添加一个名为`error500`的函数，以便我们可以在我们的应用程序中轻松地显示500错误。
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What just happened?
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We created a new folder in our `views` directory called `error`, which will
    house all of the error views that we'll use in our application. We then created
    a new view called `500.php` to display our exceptions in a nice and friendly way.
    Exceptions are a built-in class that Sag extends upon, using the `SagCouchException`
    class. With this, it's easy for us to talk directly to this exception class in
    our view. This `Exception` class has a lot of properties. But, in this application,
    we are just going to display the code, message, and the exception, represented
    in a string format. Lastly, we created a function in Bones to allow us to pass
    the exception in, so that we can display it in the view. In this function, we
    passed the exception to the `error/500` view, and then used `exit`, which tells
    PHP to stop doing anything else in our application. This stops our application
    from doing anything else because a problem occurred.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`views`目录中创建了一个名为`error`的新文件夹，其中包含了我们在应用程序中使用的所有错误视图。然后我们创建了一个名为`500.php`的新视图，以友好的方式显示我们的异常。异常是Sag扩展的内置类，使用`SagCouchException`类。有了这个，我们可以很容易地直接与我们的视图中的这个异常类交谈。这个`Exception`类有很多属性。但是，在这个应用程序中，我们只会显示代码、消息和以字符串格式表示的异常。最后，我们创建了一个函数在Bones中，允许我们传递异常进去，以便我们可以在视图中显示它。在这个函数中，我们将异常传递给`error/500`视图，然后使用`exit`，告诉PHP停止在我们的应用程序中做任何其他事情。这样做是因为发生了问题，我们的应用程序停止做任何其他事情。
- en: Time for action — handling exceptions
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 处理异常
- en: Now that we can handle exceptions, let's add some code to the `get_by_username`
    function, so that we can take a deeper look at our problem.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以处理异常了，让我们在`get_by_username`函数中添加一些代码，以便我们可以更深入地查看我们的问题。
- en: Let's open `classes/user.php`, and add a `try...catch` statement around our
    Sag call to make sure that we can handle any errors that occur.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开`classes/user.php`，并在我们的Sag调用周围添加一个`try...catch`语句，以确保我们可以处理任何发生的错误。
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now that we are catching errors, let's add in our `error500` function.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们正在捕获错误，让我们在`error500`函数中添加。
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: While we are in `classes/user.php`, let's catch a few more possible exceptions.
    Let's start with the `public` function signup.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在`classes/user.php`中时，让我们捕获一些可能的异常。让我们从`public`函数注册开始。
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Next, let's add to the `catch` statement in our public function login.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们在我们的公共函数登录中添加到`catch`语句。
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What just happened?
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: Now that we can gracefully handle exceptions, we went through our `User` class
    and added the ability to throw a `500` error when something unexpected occurred.
    On calls where we are already expecting certain problems, we can use an `if...else`
    statement to trigger a `500` error if something unexpected happens.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以优雅地处理异常了，我们通过我们的`User`类，并在发生意外情况时添加了抛出`500`错误的能力。在我们已经预期到某些问题的调用中，如果发生了意外情况，我们可以使用`if...else`语句触发`500`错误。
- en: Testing our exception handler
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试我们的异常处理程序
- en: Let's try again to see if we can get to the bottom of the exception.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再试一次，看看我们是否能找到异常的根源。
- en: Go to `http://localhost/verge/user/someone`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost/verge/user/someone`。
- en: You will now see a much friendlier error page, which tells us the code, message,
    and the full error that you would see in the error logs.![Testing our exception
    handler](graphics/3586_07_015.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你会看到一个更友好的错误页面，告诉我们代码、消息和完整的错误，你会在错误日志中看到。![测试我们的异常处理程序](graphics/3586_07_015.jpg)
- en: It is much easier for us to figure out what's going on from this. While we are
    in the process of debugging our application, this page will be of great use to
    us to track down what errors are occurring.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说，从中弄清楚发生了什么是更容易的。在我们调试应用程序的过程中，这个页面对我们来说将非常有用，以跟踪发生了什么错误。
- en: By looking at this piece of code, we can tell that CouchDB is throwing us a
    `404` error. We might expect that this error would occur because we're looking
    for a user document that doesn't exist. Let's dig further into what a `404` error
    is and how we can handle it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看这段代码，我们可以知道CouchDB正在抛出一个`404`错误。我们可能期望这个错误会发生，因为我们正在寻找一个不存在的用户文档。让我们进一步了解一下`404`错误是什么，以及我们如何处理它。
- en: Showing 404 errors
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示404错误
- en: A `404` error refers to the HTTP status code `404`, meaning "Not Found". A `404`
    error usually occurs when you try to access something that doesn't exist, such
    as going to an incorrect URL. In our case, we are receiving a `404` error because
    we are trying to find a CouchDB document that doesn't exist.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`404`错误指的是HTTP状态码`404`，意思是“未找到”。`404`错误通常发生在您尝试访问不存在的内容时，比如访问错误的URL。在我们的情况下，我们收到`404`错误是因为我们试图查找一个不存在的CouchDB文档。'
- en: 404 if user isn't found
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果找不到用户，则显示404
- en: '`404` errors are a special kind of errors that we''ll see in different places
    around our application. Let''s create another error page that we can use whenever
    `404` errors occur.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`404`错误是一种特殊的错误，我们会在应用程序的不同位置看到。让我们创建另一个错误页面，以便在发生`404`错误时使用。'
- en: 'Time for action : handling 404 errors with Bones'
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动：使用Bones处理404错误
- en: Let's create a view for `404` errors that we can use around our application.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为应用程序中的`404`错误创建一个视图。
- en: Start by creating a new view in our `views/error/` directory called `404.php`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在我们的`views/error/`目录中创建一个名为`404.php`的新视图。
- en: Let's add some very basic code to `404.php` that will inform the visitor that
    our application couldn't find the requested page.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`404.php`中添加一些非常基本的代码，以通知访问者我们的应用程序找不到请求的页面。
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In order for us to render this view, let's add another function called `error404`
    into our `lib/bones.php` file. This function will nicely display `404` errors
    for us.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了呈现这个视图，让我们在`lib/bones.php`文件中添加另一个名为`error404`的函数。这个函数将为我们很好地显示`404`错误。
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: What just happened?
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We created a simple view, called `404.php`, that we can show any time a `404`
    error occurs in our application. We then created a simple function called `error404`
    in `lib/bones.php` that renders `error/404.php` and terminates the current script
    so no further actions occur.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的视图，名为`404.php`，我们可以在应用程序中任何时候显示`404`错误。然后我们在`lib/bones.php`中创建了一个名为`error404`的简单函数，它呈现`error/404.php`并终止当前脚本，以便不会发生进一步的操作。
- en: Showing 404 errors for unknown users
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为未知用户显示404错误
- en: Now that we have our `404` error handler, let's display it when the `404` error
    occurs in the `get_by_username` function inside of `classes/user.php`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`404`错误处理程序，让我们在`classes/user.php`的`get_by_username`函数中发生`404`错误时显示它。
- en: 'Open `classes/user.php`, and alter the `get_by_username` function to match
    the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`classes/user.php`，并修改`get_by_username`函数以匹配以下内容：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Hooking up 404 all around the site
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在整个站点上挂接404
- en: The interesting thing about `404` errors is that they can happen any time a
    visitor passes a route that Bones doesn't understand. So, let's add code right
    into Bones that will handle this for us.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`404`错误的有趣之处在于，它们可以在访问者通过Bones不理解的路由时发生。因此，让我们在Bones中添加代码来处理这个问题。'
- en: Time for action — handling 404 errors with Bones
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取行动-使用Bones处理404错误
- en: Let's add some simple code around `lib/bones.php` and `index.php` that will
    allow us to handle `404` errors.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`lib/bones.php`和`index.php`周围添加一些简单的代码，以便处理`404`错误。
- en: Open `lib/bones.php`, and a create a function inside the `Bones` class called
    `resolve` that we can call at the end of our routes and determine if a route was
    ever found.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`lib/bones.php`，在`Bones`类内部创建一个名为`resolve`的函数，我们可以在路由的末尾调用它，并确定是否找到了路由。
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Go to the top of `lib/bones.php`, and create a function called `resolve` outside
    the `Bones` class (such as `get, post, put`, or `delete)` that we can call outside
    anywhere.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`lib/bones.php`的顶部，并创建一个名为`resolve`的函数，放在`Bones`类之外（例如`get, post, put`或`delete`），我们可以在任何地方调用它。
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: All that's left for us to do is add a line of code at the very bottom of `index.php`
    that can be called if no routes are found. As you add more routes, make sure that
    `resolve()` is always at the end of the file.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要做的最后一件事就是在`index.php`的最底部添加一行代码，如果没有找到路由，就可以调用它。随着添加更多的路由，确保`resolve()`始终位于文件的末尾。
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: What just happened?
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We created a function called `resolve` that is executed at the bottom of our
    `index.php` file after all of our routes. This function serves as a*"clean* up"
    function that will be executed if no routes match up. If no routes match, resolve
    will display a `404` error to the visitor and terminate the current script.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`resolve`的函数，在我们的`index.php`文件的底部执行，它会在所有路由之后执行。这个函数作为一个“清理”函数，如果没有匹配的路由，它将向访问者显示一个`404`错误并终止当前脚本。
- en: Testing it out
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试一下
- en: Now that we're gracefully handling `404` errors, let's test it out and see what
    happens.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们优雅地处理了`404`错误，让我们测试一下，看看会发生什么。
- en: Open your browser, and go to `http://localhost/verge/user/anybody`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，转到`http://localhost/verge/user/anybody`。
- en: Your browser will show you the following:![Testing it out](graphics/3586_07_017.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的浏览器将显示以下内容：![测试一下](graphics/3586_07_017.jpg)
- en: Great! Our `User` class is forwarding us a `404` error because of the code we
    added in the `get_by_username` function.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 太好了！我们的`User`类正在转发给我们一个`404`错误，因为我们在`get_by_username`函数中添加了代码。
- en: Next, let's check that our `index.php` will forward us a `404` error if it can't
    find the requested route.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们检查一下我们的`index.php`，看看如果找不到请求的路由，它是否会转发给我们一个`404`错误。
- en: Open your browser to `http://localhost/verge/somecrazyurl`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，转到`http://localhost/verge/somecrazyurl`。
- en: Your browser will display the following:![Testing it out](graphics/3586_07_018.jpg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的浏览器将显示以下内容：![测试一下](graphics/3586_07_018.jpg)
- en: Perfect! Our `404` error handler is working exactly like we need it to. If we
    ever need to use it again, all we need to do is call `error404` in our `Bones`
    class, and we're all set!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！我们的`404`错误处理程序正是我们需要的。如果我们将来需要再次使用它，我们只需要在我们的`Bones`类中调用`error404`，然后一切都设置好了！
- en: Giving users a link to their profile
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给用户一个链接到他们的个人资料
- en: In most social networks, once you are logged in, you are shown a link to see
    the currently logged in users' profiles. Let's open `view/layout.php` and add
    a `My Profile` link to our navigation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数社交网络中，一旦您登录，就会显示一个链接，以查看当前登录用户的个人资料。让我们打开`view/layout.php`，并在导航中添加一个`My
    Profile`链接。
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Creating a better profile with Bootstrap
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bootstrap创建更好的个人资料
- en: It's starting to bug me that our profile isn't all that nicely put together,
    and we're going to need to add to this more later in the chapter. Let's prepare
    our user profile so that we can nicely show a user's information and posts.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的个人资料并不是很好地组合在一起，这开始让我感到困扰，我们需要在本章后面再添加更多内容。让我们准备好我们的用户个人资料，以便我们可以很好地显示用户的信息和帖子。
- en: Time for action — checking whether a user is currently logged in
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-检查用户当前是否已登录
- en: We'll need to be able to figure out if the profile a user is looking at is their
    own. So, let's add a variable to our view that tells us if that is the case.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要能够弄清楚用户正在查看的个人资料是否是他们自己的。所以，让我们在我们的视图中添加一个变量，告诉我们是否是这种情况。
- en: Open `index.php`, and add a variable called `is_current_user` that will determine
    if the profile that you are viewing is equal to the currently logged-in user.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`，并添加一个名为`is_current_user`的变量，用于确定您正在查看的个人资料是否等于当前登录用户。
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Let's change the code in the header of `views/user/profile.php` so that we can
    output the user's full name as well as `This is you!`, if it's the current user's
    profile.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更改`views/user/profile.php`头部的代码，这样我们就可以输出用户的全名以及`This is you!`，如果这是当前用户的个人资料。
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: What just happened?
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used a shorthand operation called `ternary`. A `ternary` operation is short
    hand for an `if-else` statement. In this case, we are saying that if the username
    passed from the route is equal to that of the currently logged-in user, then return
    `true`, otherwise return `false`. Then, we go into our profile and display `This
    is you!` if the `is_current_user` variable is set to `true`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个称为`ternary`的简写操作。`ternary`操作是`if-else`语句的简写形式。在这种情况下，我们说如果从路由传递的用户名等于当前登录用户的用户名，则返回`true`，否则返回`false`。然后，我们进入我们的个人资料，并且如果`is_current_user`变量设置为`true`，则显示`This
    is you!`。
- en: Cleaning up the profile's design
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清理个人资料的设计
- en: Again, Bootstrap will come to the rescue by allowing us to clean up our profile
    with limited code.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，Bootstrap将通过允许我们用有限的代码清理我们的个人资料来拯救我们。
- en: 'Let''s start by splitting our row `div` into two columns with the following
    code:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过以下代码将我们的行`div`分成两列：
- en: '[PRE31]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Let's output the user's information into the left column by adding more list
    items into the unordered list.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将更多的列表项添加到无序列表中，将用户的信息输出到左列。
- en: '[PRE32]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Let's check out our new profile
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 让我们来看看我们的新个人资料
- en: With that, our new and improved profile has come to life! Let's check it out.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们的新的改进的个人资料已经出现了！让我们来看看。
- en: Open your browser to the URL of the `johndoe` user by going to `http://localhost/verge/user/johndoe`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://localhost/verge/user/johndoe`，在浏览器中打开`johndoe`用户的URL。
- en: Your browser will show you a nicely remodeled user profile.![Let's check out
    our new profile](graphics/3586_07_019.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的浏览器将显示一个精心改造的用户个人资料。![让我们来看看我们的新个人资料](graphics/3586_07_019.jpg)
- en: Now, let's check to make sure our `$is_current_user` variable is working correctly
    too. To do that, log in with `johndoe` as the username, and go to `http://localhost/verge/user/johndoe`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查一下我们的`$is_current_user`变量是否正常工作。为了做到这一点，请使用`johndoe`作为用户名登录，并转到`http://localhost/verge/user/johndoe`。
- en: Your browser will show you the user profile, along with a nice message telling
    you that this is your profile.![Let's check out our new profile](graphics/3586_07_020.jpg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的浏览器将显示用户个人资料，以及一个友好的消息告诉您这是您的个人资料。![让我们来看看我们的新个人资料](graphics/3586_07_020.jpg)
- en: Awesome! Our profile is really starting to come together. This is a big landmark
    in our application. So, let's make sure we commit our changes to Git.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的个人资料真的开始变得完整起来了。这是我们应用程序的一个重要里程碑。所以，让我们确保将我们的更改提交到Git。
- en: Adding your changes to Git
  id: totrans-182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将您的更改添加到Git
- en: In this section, we added support to cleanly handle exceptions and also spruced
    up the user profile. Let's add all of our changes to Git so that we can track
    our progress.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们添加了支持清晰处理异常的功能，并且还改进了用户个人资料。让我们把所有的更改都添加到Git中，这样我们就可以跟踪我们的进展。
- en: Open Terminal.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Type the following command to change directories to our `working` directory:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '输入以下命令以更改目录到我们的`working`目录： '
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We added a few files in this section. So, let's add them all into source control.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这一部分添加了一些文件。所以，让我们把它们都加入到源代码控制中。
- en: '[PRE34]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Give Git a description of what we've done since our last commit.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给Git一个描述，说明自上次提交以来我们做了什么。
- en: '[PRE35]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Posts
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帖子
- en: We have a placeholder for posts on our profile. But, let's get into filling
    it in with some real content. We are going to do this by allowing users to post
    small pieces of content and by having them tied to the user account.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在个人资料中有一个帖子的占位符。但是，让我们开始填充一些真实内容。我们将允许用户发布小段内容，并将它们与用户帐户关联起来。
- en: Modeling Posts
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建模帖子
- en: Let's talk through what needs to happen in order for us to save posts to CouchDB
    and relate them to a user. Before we get into how to do this with CouchDB, let's
    try to bring it into perspective by looking at how we would do it with MySQL.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下我们需要做什么才能将帖子保存到CouchDB并与用户关联起来。在我们使用CouchDB进行此操作之前，让我们尝试通过查看如何在MySQL中进行操作来加深理解。
- en: How to model posts in MySQL
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在MySQL中建模帖子
- en: 'If we were modeling this relationship for MySQL (or another RDBMS), it might
    look similar to the following screenshot:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要为MySQL（或其他RDBMS）建模这种关系，它可能看起来类似于以下截图：
- en: '![How to model posts in MySQL](graphics/3586_07_023.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![如何在MySQL中建模帖子](graphics/3586_07_023.jpg)'
- en: In a nutshell, this diagram shows a `posts` table that has a foreign key `user_id`
    that references the `id` of the users table. This one-to-many relationship is
    a common occurrence in most applications and, in this case, means that one user
    can have many posts.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这个图表显示了一个“posts”表，它有一个外键“user_id”，引用了用户表的“id”。这种一对多的关系在大多数应用程序中都很常见，在这种情况下，意味着一个用户可以有多个帖子。
- en: Now that we've looked at a familiar diagram, let's look at the same relationship
    as it pertains to CouchDB.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看过一个熟悉的图表，让我们再看看与CouchDB相关的相同关系。
- en: How to model posts in CouchDB
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何在CouchDB中建模帖子
- en: Surprisingly enough, CouchDB handles relationships in a very similar fashion.
    You might be thinking to yourself, Wait a minute, I thought you said it wasn't
    a relational database. Keep in mind that no matter what database you are using,
    chances are there will be commonalities with how they handle relationships. Let's
    look at how CouchDB would illustrate the same data and model.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，CouchDB以非常相似的方式处理关系。你可能会想，等一下，我以为你说它不是关系数据库。请记住，无论你使用什么数据库，它们处理关系的方式都可能有共同之处。让我们看看CouchDB如何说明相同的数据和模型。
- en: '![How to model posts in CouchDB](graphics/3586_07_025.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![如何在CouchDB中建模帖子](graphics/3586_07_025.jpg)'
- en: This is pretty similar, right? The biggest difference, as always, is that in
    the relational database, the data is stored in set rows and columns, while in
    CouchDB, they are stored in self-contained documents with a schema-less set of
    keys and values. Regardless of which way you look at the data, the relationship
    remains the same, that is, a post is connected to a user by way of a reference
    to that user's ID.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这很相似，对吧？最大的区别始终是，在关系数据库中，数据存储在固定的行和列中，而在CouchDB中，它们存储在自包含的文档中，具有无模式的键和值集。无论你如何查看数据，关系都是相同的，即，通过对用户ID的引用，帖子与用户相连接。
- en: Just to make sure we're on the same page, let's walk through each of the fields
    in the `post` documents and make sure we understand what they are.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们在同一页面上，让我们逐个浏览“post”文档中的每个字段，并确保我们理解它们是什么。
- en: '`_id` is the unique identifier of the document.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “_id”是文档的唯一标识符。
- en: '`_rev` is the revision identifier of the document. We touched on revisions
    in Chapter 3, if you''d like to revisit this concept.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “_rev”是文档的修订标识符。我们在第3章中提到过修订，如果你想重新了解这个概念。
- en: '`type` tells us what kind of document we are looking at. In this case, every
    `post` document will be equal to `post`.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “type”告诉我们我们正在查看什么类型的文档。在这种情况下，每个“post”文档都将等于“post”。
- en: '`date_created` is the timestamp of when the document was created.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “date_created”是文档创建时的时间戳。
- en: '`content` contains any text that we want to have inside our posts.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “content”包含我们想要放在帖子中的任何文本。
- en: '`user` contains the username of the user that created the post and refers back
    to the `_users` document. Interestingly enough, we do not need to put `org.couchdb.user`
    in this field, because CouchDB is actually going to look at the username.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “user”包含创建帖子的用户的用户名，并引用回“_users”文档。有趣的是，我们不需要在这个字段中放入“org.couchdb.user”，因为CouchDB实际上会查看用户名。
- en: 'Now that we''ve defined the values that we need to save to CouchDB, we are
    ready to model it in a new class: `Post`.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了需要保存到CouchDB的值，我们准备在一个新类“Post”中对其进行建模。
- en: Have a go hero — setting up the Post class
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 试试看-设置帖子类
- en: Creating the `Post` class will be very similar to our `User` class. If you feel
    confident enough, try creating the basic class by yourself.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 创建“Post”类将与我们的“User”类非常相似。如果你感到足够自信，请尝试自己创建基本类。
- en: 'Here''s what you need to do:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的是：
- en: Create a new class called `post.php` that extends the `Base` class.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“post.php”的新类，它扩展了“Base”类。
- en: Create variables for each of the required fields defined earlier.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为之前定义的每个必需字段创建变量。
- en: Add a `construct` function to define the type of the document.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个“construct”函数来定义文档的类型。
- en: When you are done, continue reading on the next page, and make sure your work
    matches up with mine.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，继续阅读下一页，并确保你的工作与我的匹配。
- en: Let's check to see how everything turned out.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下一切的结果。
- en: 'You should have created a new file called `post.php` and placed it in the `classes`
    directory in our `working` folder. The contents of `post.php` should look similar
    to the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经创建了一个名为“post.php”的新文件，并将其放在我们“working”文件夹中的“classes”目录中。post.php的内容应该类似于以下内容：
- en: '[PRE36]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: That's all we need to handle post documents in PHP. Now that we have the class
    built, let's move on to creating posts.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在PHP中处理帖子文档所需要的一切。现在我们已经建立了这个类，让我们继续创建帖子。
- en: Creating posts
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建帖子
- en: Creating posts is going to be a piece of cake for us now. All we need to do
    is add a few lines of code, and it'll be sitting in the database.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对我们来说，创建帖子将是小菜一碟。我们只需要添加几行代码，它就会出现在数据库中。
- en: Time for action — making a function to handle Post creation
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-制作处理帖子创建的函数
- en: Let's create a public function called `create` that will handle the creation
    of posts for our application.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为“create”的公共函数，它将处理我们应用程序的帖子创建。
- en: Open `classes/post.php`, and scroll to the bottom. Here, we'll create a new
    public function called `create`.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“classes/post.php”，并滚动到底部。在这里，我们将创建一个名为“create”的新公共函数。
- en: '[PRE37]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Let's start by getting a new instance of Bones, and then setting the variables
    of the current `post` object.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先获得一个新的Bones实例，然后设置当前“post”对象的变量。
- en: '[PRE38]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Finally, let's put the document to CouchDB, using Sag.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用Sag将文档放入CouchDB。
- en: '[PRE39]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Let's wrap the call to CouchDB with a `try...catch` statement, and inside of
    the `catch` statement, let's bounce it to a `500` error as we've done before.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用一个“try...catch”语句包装对CouchDB的调用，在“catch”语句中，让我们像以前一样将其弹到“500”错误。
- en: '[PRE40]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: What just happened?
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just made a function called `create` that enables us to create a new `Post`
    document. We started by instantiating an object of Bones, so that we can use Sag.
    Next, we used Sag to grab a `UUID` for us to use as the ID of our `post`. Then,
    we used `date('r')` to output the date into a `RFC 2822` format (which is what
    CouchDB and JavaScript like) and saved it to the post's `date_created` variable.
    Then, we set the user of the post to the current user's username.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个名为`create`的函数，使我们能够创建一个新的`Post`文档。我们首先实例化了一个Bones对象，以便我们可以使用Sag。接下来，我们使用Sag为我们获取了一个`UUID`作为我们的`post`的ID。然后，我们使用`date('r')`将日期输出为`RFC
    2822`格式（这是CouchDB和JavaScript所喜欢的格式），并将其保存到帖子的`date_created`变量中。然后，我们将帖子的用户设置为当前用户的用户名。
- en: With all of the fields set, we used Sag's `put` command to save the post document
    to CouchDB. Finally, to make sure we didn't run into any errors, we wrapped the
    `put` command in a `try...catch` statement. In the `catch` segment, we passed
    the user on to Bones' `error500` function if something went wrong. That's it!
    We can now create posts in our application. All we have left is to make a form
    in our user profile.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置了所有字段后，我们使用Sag的`put`命令将帖子文档保存到CouchDB。最后，为了确保我们没有遇到任何错误，我们将`put`命令包装在一个`try...catch`语句中。在`catch`部分中，如果出现问题，我们将用户传递给Bones的`error500`函数。就是这样！我们现在可以在我们的应用程序中创建帖子。我们唯一剩下的就是在用户个人资料中创建一个表单。
- en: Time for action — making a form to enable Post creation
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动-创建一个表单来启用帖子创建
- en: Let's code the form for post creation right into our user's profile page. This
    form will only show up if the logged-in user is looking at their own profile.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接在用户的个人资料页面中编写用于创建帖子的表单。只有当已登录用户查看自己的个人资料时，该表单才会显示出来。
- en: Open `user/profile.php`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`user/profile.php`。
- en: Let's first check to see if the profile the user is looking at is their own.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先检查用户正在查看的个人资料是否是他们自己的。
- en: '[PRE41]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Next, let's add a form that will allow the currently logged-in user to make
    posts.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一个表单，允许当前登录的用户发布帖子。
- en: '[PRE42]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: What just happened?
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used the `$is_current_user` variable to determine if the user viewing the
    profile is equal to the currently logged-in user. Next, we created a form that
    posts to the `post` route (which we'll create next). In the form, we've put a
    `textarea` with `id` of `content` and a `submit` button to actually post the form.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`$is_current_user`变量来确定查看个人资料的用户是否等于当前登录的用户。接下来，我们创建了一个表单，该表单提交到`post`路由（接下来我们将创建）。在表单中，我们放置了一个`id`为`content`的`textarea`和一个`submit`按钮来实际提交表单。
- en: Now that we have everything all ready to go, let's finish off the `post` creation
    by creating a route called `post` in our `index.php` file to handle the `post`
    route.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好一切，让我们通过在`index.php`文件中创建一个名为`post`的路由来完成`post`的创建。
- en: Time for action — creating a route and handling the creation of the Post
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始行动-创建一个路由并处理帖子的创建
- en: In order to actually create a post, we'll need to create a route and handle
    the form input.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际创建一个帖子，我们需要创建一个路由并处理表单输入。
- en: Open `index.php`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`index.php`。
- en: Create a basic `post` route, and call it `post`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个基本的`post`路由，并将其命名为`post`。
- en: '[PRE43]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Inside our `post` route, let's accept the value of the passed value `content`
    and use the `create` function on our `Post` class to actually create the post.
    Once the post is created, we'll redirect the user back to their profile.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`post`路由中，让我们接受传递的值`content`并在我们的`Post`类上使用`create`函数来实际创建帖子。帖子创建完成后，我们将用户重定向回他们的个人资料页面。
- en: '[PRE44]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We've done quite a bit to make sure that the user is authenticated when creating
    a post, but let's triple check that the user is authenticated here. If it turns
    out that they aren't authenticated, our application will forward them to the user
    login page with an error message.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经做了很多工作，以确保用户在创建帖子时经过身份验证，但让我们再三检查用户是否在这里经过了身份验证。如果他们没有经过身份验证，我们的应用程序将将他们转发到用户登录页面，并显示错误消息。
- en: '[PRE45]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: What just happened?
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: In this section, we made a `post` route for the route `post` (sorry, that's
    a confusing sentence to decipher). Inside the `post` route, we instantiated a
    `Post` object, and set it's instance's variable `content` equal to the content
    `textarea` from the posted form. Next, we created the `post` by calling the public
    `create` function. After the post was saved, we redirected the user back to his/her
    own profile. Lastly, we added functionality around the whole `route` that checked
    to make sure the user was logged in. If they aren't, we'll bounce them to the
    login page and ask them to log in to perform this action.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们为`post`路由创建了一个`post`路由（抱歉，这是一个令人困惑的句子）。在`post`路由内部，我们实例化了一个`Post`对象，并将其实例变量`content`设置为来自提交表单的`textarea`的内容。接下来，我们通过调用公共的`create`函数创建了`post`。帖子保存后，我们将用户重定向回他/她自己的个人资料。最后，我们在整个`route`周围添加了功能，以确保用户已登录。如果他们没有登录，我们将把他们弹到登录页面，并要求他们登录以执行此操作。
- en: Test it out
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试一下
- en: Now that we've programmed everything we need to create a post, let's go through
    it step by step to test it.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了创建帖子所需的一切，让我们一步一步地测试一下。
- en: Start by logging in as `johndoe` and going to his profile by opening your browser
    to `http://localhost/verge/user/johndoe`.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先以`johndoe`的身份登录，并通过在浏览器中打开`http://localhost/verge/user/johndoe`来转到他的个人资料。
- en: Your browser will show you a user profile just as we've seen before, but this
    time you'll see the `post` form.![Test it out](graphics/3586_07_027.jpg)
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的浏览器将显示一个用户个人资料，就像我们以前看到的那样，但这次您将看到`post`表单。![测试一下](graphics/3586_07_027.jpg)
- en: Type some content into the text area. I typed `I don't like peanut butter`,
    but you can make it say whatever you want.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本区域中输入一些内容。我输入了`我不喜欢花生酱`，但您可以随意更改。
- en: When you are done, click on the **Submit** button.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，点击**提交**按钮。
- en: You've been forwarded back to the user profile of `johndoe`, but you can't see
    any posts yet. So, let's log into Futon to make sure the post was created.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已被转发回`johndoe`的用户个人资料，但您还看不到任何帖子。因此，让我们登录Futon，确保帖子已创建。
- en: Go to the `verge` database in Futon by going to `http://localhost:5984/_utils/database.html?verge`.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://localhost:5984/_utils/database.html?verge`，在Futon中转到`verge`数据库。
- en: Sweet! There's a document here; let's open it up and look at the contents.![Test
    it out](graphics/3586_07_030.jpg)
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太棒了！这里有一个文档；让我们打开它并查看内容。![测试一下](graphics/3586_07_030.jpg)
- en: This worked out perfectly! When a user is logged in, they can create a post
    by going to their profile and submitting the **Create a new post** form.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这个完美解决了！当用户登录时，他们可以通过转到他们的个人资料并提交**创建新帖子**表单来创建帖子。
- en: Adding your changes to Git
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将您的更改添加到Git
- en: In this section, we added a function to create posts based upon our `Post` model.
    We then added a form to the user profile so that users can actually create posts.
    Let's add all of our changes to Git so that we can track our progress.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们添加了一个基于我们的`Post`模型来创建帖子的函数。然后我们在用户个人资料中添加了一个表单，这样用户就可以真正地创建帖子。让我们把所有的更改都添加到Git中，这样我们就可以跟踪我们的进展。
- en: Open Terminal.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Type the following command to change directories to our `working` directory:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以更改目录到我们的`working`目录：
- en: '[PRE46]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We added the `classes/post.php` file, so let''s add that file into source control:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们添加了`classes/post.php`文件，所以让我们把那个文件加入到源代码控制中：
- en: '[PRE47]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Give `Git` a description of what we''ve done since our last commit:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给`Git`一个描述，说明自上次提交以来我们做了什么：
- en: '[PRE48]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: I know I said that I wouldn't remind you again, but I'm only human. Let's push
    these changes up to GitHub.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我知道我说过我不会再提醒你了，但我也只是个人。让我们把这些更改推送到GitHub上去。
- en: '[PRE49]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Wrapping up
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Believe it or not, this is all the code we're going to write in this chapter.
    Put away your protest signs that say, "We haven't even queried the users' posts
    yet!" The reason we are stopping here is that CouchDB has a really interesting
    way of listing and handling documents. In order to get into that discussion, we'll
    need to define how to use **Design Documents** for views and validation. Luckily,
    that's exactly what we'll cover in the next chapter!
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，这就是我们在本章中要写的所有代码。收起你的抗议标语，上面写着“我们甚至还没有查询用户的帖子！”我们停在这里的原因是CouchDB有一种非常有趣的方式来列出和处理文档。为了讨论这个问题，我们需要定义如何使用**设计文档**来进行视图和验证。幸运的是，这正是我们将在下一章中涵盖的内容！
- en: In the meantime, let's quickly recap what we accomplished in this chapter.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，让我们快速回顾一下我们在本章中取得的成就。
- en: Summary
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the creation of a user profile to display a user's
    information, how to handle exceptions gracefully and display to users the `500`
    and `404` error pages, how to model Posts in CouchDB, and finally, the creation
    of a form to create posts for the logged-in user.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了创建用户个人资料来显示用户信息，如何优雅地处理异常并向用户显示`500`和`404`错误页面，如何在CouchDB中对帖子进行建模，以及最后，创建一个为已登录用户创建帖子的表单。
- en: As I said, in the next chapter, we're going to touch on some pretty cool concepts
    that CouchDB brings to the table. It's probably the most complicated chapter in
    this book, but it'll be a lot of fun.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所说，在下一章中，我们将涉及一些CouchDB带来的非常酷的概念。这可能是本书中最复杂的一章，但会非常有趣。
