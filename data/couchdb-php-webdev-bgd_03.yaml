- en: Chapter 3. Getting Started with CouchDB and Futon
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。开始使用CouchDB和Futon
- en: In the previous chapter, we set up our development environment, and I'm sure
    that you are chomping at the bit to find out what CouchDB can do for us. On that
    note, we're going to spend this entire chapter digging into CouchDB.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在上一章中，我们设置了开发环境，我相信你迫不及待地想知道CouchDB对我们有什么作用。在这一点上，我们将花费整整一章的时间来深入了解CouchDB。
- en: 'Specifically, we will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将：
- en: Dive into what CouchDB means and learn how it looks in the databases and documents
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解CouchDB的含义，学习它在数据库和文档中的样子
- en: Learn how we'll interact with CouchDB through its RESTful JSON API
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习我们将如何通过其RESTful JSON API与CouchDB交互
- en: 'Use CouchDB''s built in administrative console: Futon'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CouchDB内置的管理控制台：Futon
- en: Learn how to add security to your CouchDB databases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何向CouchDB数据库添加安全性
- en: What is CouchDB?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是CouchDB？
- en: 'The first sentence of CouchDB''s definition (as defined by [http://couchdb.apache.org/)](http://couchdb.apache.org/))
    is as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB的定义（由[http://couchdb.apache.org/)](http://couchdb.apache.org/)定义）的第一句是：
- en: CouchDB is a document database server, accessible through the RESTful JSON API.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CouchDB是一个文档数据库服务器，可通过RESTful JSON API访问。
- en: Let's dissect this sentence to fully understand what it means. Let's start with
    the term **database server**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解剖这个句子，充分理解它的含义。让我们从术语**数据库服务器**开始。
- en: Database server
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库服务器
- en: 'CouchDB employs a document-oriented database management system that serves
    a flat collection of documents with no schema, grouping, or hierarchy. This is
    a concept that **NoSQL** has introduced, and is a big departure from relational
    databases (such as MySQL), where you would expect to see tables, relationships,
    and foreign keys. Every developer has experienced a project where they have had
    to force a relational database schema into a project that really didn''t require
    the rigidity of tables and complex relationships. This is where CouchDB does things
    differently; it stores all of the data in a self-contained object with no set
    schema. The following diagram will help to illustrate this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB采用了面向文档的数据库管理系统，提供了一组没有模式、分组或层次结构的文档。这是**NoSQL**引入的概念，与关系数据库（如MySQL）有很大的不同，您会期望在那里看到表、关系和外键。每个开发人员都经历过一个项目，他们不得不将关系数据库模式强加到一个真正不需要表和复杂关系的项目中。这就是CouchDB与众不同的地方；它将所有数据存储在一个自包含的对象中，没有固定的模式。下面的图表将有助于说明这一点：
- en: '![Database server](graphics/3586_03_005.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![数据库服务器](graphics/3586_03_005.jpg)'
- en: In the previous example, we might want to facilitate the ability for many users
    to belong to one-to-many groups. In order to handle this functionality in a relational
    database (such as MySQL), we would create a users table, a groups table, and a
    link table, called `users_groups`, that allow you to map many users to many groups.
    This practice is common to most web applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们可能希望方便许多用户属于一对多的组。为了在关系数据库（如MySQL）中处理这个功能，我们需要创建一个用户表、一个组表，以及一个名为`users_groups`的链接表，允许您将许多用户映射到许多组。这种做法对大多数Web应用程序都很常见。
- en: Now look at the CouchDB documents. There are no tables or link tables, just
    documents. These documents contain all of the data pertaining to a single object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看CouchDB文档。这里没有表或链接表，只有文档。这些文档包含与单个对象相关的所有数据。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This diagram is very simplified. If we wanted to create more logic around the
    groups in CouchDB, we would have had to create **group** documents, with a simple
    relationship between the user documents and group documents. We'll touch on how
    to handle this type of relationship as we get deeper into the book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表非常简化。如果我们想在CouchDB中创建更多关于组的逻辑，我们将不得不创建**组**文档，并在用户文档和组文档之间建立简单的关系。随着我们深入学习，我们将介绍如何处理这种类型的关系。
- en: We saw the term **document** quite a bit in this section. So let's dig further
    into what documents are and how CouchDB uses them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们经常看到术语**文档**。所以让我们进一步了解文档是什么，以及CouchDB如何使用它们。
- en: Documents
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档
- en: To illustrate how you might use documents, first imagine that you are physically
    filling out the paper form of a job application. This form has information about
    you, your address, and past addresses. It also has information about many of your
    past jobs, education, certifications, and much more. A document would save all
    of this data exactly in the way you would see it in the physical form - all in
    one place, without any unnecessary complexity.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明你可能如何使用文档，首先想象一下你在填写工作申请表的纸质表格。这个表格包含关于你、你的地址和过去地址的信息。它还包含关于你过去的工作、教育、证书等许多信息。一个文档会将所有这些数据保存下来，就像你在纸质表格上看到的那样
    - 所有信息都在一个地方，没有任何不必要的复杂性。
- en: In CouchDB, documents are stored as JSON objects that contain key and value
    pairs. Each document has reserved fields for metadata such as `id, revision`,
    and `deleted`. Besides the reserved fields, documents are 100 percent schema-less,
    meaning that each document can be formatted and treated independently with as
    many different variations as you might need.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在CouchDB中，文档被存储为包含键值对的JSON对象。每个文档都有保留字段用于元数据，如`id, revision`和`deleted`。除了保留字段，文档是100%无模式的，这意味着每个文档可以根据需要格式化和独立处理，有许多不同的变化。
- en: Example of a CouchDB document
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CouchDB文档的示例
- en: 'Let''s take a look at an example of what a CouchDB document might look like
    for a blog post:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个CouchDB文档可能是什么样子的例子：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中购买的所有Packt图书下载示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，文件将直接通过电子邮件发送给您。
- en: JSON format
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON格式
- en: The first thing you might notice is the strange markup of the document, which
    is **JavaScript Object Notation (JSON)**. JSON is a lightweight data-interchange
    format based on JavaScript syntax and is extremely portable. CouchDB uses JSON
    for all communication with it, so you'll get very familiar with it through the
    course of this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到的第一件事是文档的奇怪标记，这是 **JavaScript 对象表示法（JSON）**。JSON 是一种基于 JavaScript 语法的轻量级数据交换格式，非常便携。CouchDB
    使用 JSON 进行与其所有通信，因此在阅读本书的过程中，您将对其非常熟悉。
- en: Key-value storage
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 键值存储
- en: The next thing that you might notice is that there is a lot of information in
    this document. There are key-value pairs that are simple to understand, such as
    `"title", "author`", and `"body`", but you'll also notice that `"tags`" is an
    array of strings. CouchDB lets you embed as much information as you want directly
    into a document. This is a concept that might be new to relational database users
    who are used to normalized and structured databases.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可能注意到这个文档中有很多信息。有一些简单易懂的键值对，比如 `"title", "author"` 和 `"body"`，但您还会注意到 `"tags"`
    是一个字符串数组。CouchDB 允许您直接将尽可能多的信息嵌入到文档中。这对于习惯于规范化和结构化数据库的关系数据库用户来说可能是一个新概念。
- en: Reserved fields
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保留字段
- en: 'We mentioned reserved fields earlier on. Let''s look at the two reserved fields
    that you saw in the previous example document: `_id` and `_rev`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到了保留字段。让我们来看看您在前面的示例文档中看到的两个保留字段：`_id` 和 `_rev`。
- en: '`_id` is the unique identifier of the document. This means that `_id` is mandatory,
    and no two documents can have the same value. If you don''t define an `_id` on
    creation of a document, CouchDB will choose a unique one for you.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`_id` 是文档的唯一标识符。这意味着 `_id` 是必需的，没有两个文档可以具有相同的值。如果在创建文档时没有定义 `_id`，CouchDB 将为您选择一个唯一的值。'
- en: '`_rev` is the revision version of the document and is the field that helps
    drive CouchDB''s version control system. Each time you save a document, the revision
    number is required so that CouchDB knows which version of the document is the
    newest. This is required because CouchDB does not use a locking mechanism, meaning
    that if two people are updating a document at the same time, then the first one
    to save his/her changes first, wins. One of the unique things about CouchDB''s
    revision system is that each time a document is saved, the original document is
    not overwritten, and a new document is created with the new data, while CouchDB
    stores a backup of the previous documents in its original form in an archive.
    Old revisions remain available until the database is compacted, or some cleanup
    action occurs.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`_rev` 是文档的修订版本，是帮助驱动 CouchDB 版本控制系统的字段。每次保存文档时，都需要修订号，以便 CouchDB 知道哪个版本的文档是最新的。这是必需的，因为
    CouchDB 不使用锁定机制，这意味着如果两个人同时更新文档，那么先保存更改的人获胜。CouchDB 修订系统的一个独特之处在于，每次保存文档时，原始文档不会被覆盖，而是创建一个新的带有新数据的文档，同时
    CouchDB 以其原始形式存储先前文档的备份。旧的修订版本保持可用，直到数据库被压缩或发生某些清理操作。'
- en: The last piece of the definition sentence is the RESTful JSON API. So, let's
    cover that next.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 定义句子的最后一部分是 RESTful JSON API。接下来让我们来介绍它。
- en: RESTful JSON API
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RESTful JSON API
- en: In order to understand REST, let's first define **HyperText Transfer Protocol
    (HTTP)** . HTTP is the underlying protocol of the Internet that defines how messages
    are formatted and transmitted and how services should respond when using a variety
    of methods. These methods consist of four main verbs, such as `GET, PUT, POST`,
    and `DELETE`. In order to fully understand how HTTP methods function, let's first
    define REST.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 REST，让我们首先定义 **超文本传输协议（HTTP）**。HTTP 是互联网的基础协议，它定义了消息的格式和传输方式，以及在使用各种方法时服务应该如何响应。这些方法包括
    `GET, PUT, POST` 和 `DELETE` 等四个主要动词。为了充分理解 HTTP 方法的功能，让我们首先定义 REST。
- en: '**Representation State Transfer (REST)** is a stateless protocol that accesses
    addressable resources through HTTP methods. **Stateless** means that each request
    contains all of the information necessary to completely understand and use the
    data in the request, and **addressable resources** means that you can access the
    object via a URL.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**表述状态转移（REST）** 是一种通过 HTTP 方法访问可寻址资源的无状态协议。**无状态** 意味着每个请求包含了完全理解和使用请求中的数据所需的所有信息，**可寻址资源**
    意味着您可以通过 URL 访问对象。'
- en: 'That might not mean a lot in itself, but, by putting all of these ideas together,
    it becomes a powerful concept. Let''s illustrate the power of REST by looking
    at two examples:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这本身可能并不意味着太多，但是将所有这些想法结合在一起，它就成为了一个强大的概念。让我们通过两个例子来说明 REST 的强大之处：
- en: '| Resource | GET | PUT | POST | DELETE |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 资源 | 获取 | 放置 | 发布 | 删除 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `http://localhost/collection` | **Read** a list of all of the items inside
    of `collection` | **Update** the collection with another `collection` | **Create**
    a new `collection` | **Delete** the `collection` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `http://localhost/collection` | **读取** `collection` 中所有项目的列表 | **更新** 另一个
    `collection` | **创建** 一个新的 `collection` | **删除** `collection` |'
- en: '| `http://localhost/collection/abc123` | **Read** the details of the `abc123`
    item inside of `collection` | **Update** the details of `abc123` inside of `collection`
    | **Create** a new object `abc123` inside of a `collection` | **Delete** `abc123`
    from `collection` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `http://localhost/collection/abc123` | **读取** `collection` 中 `abc123` 项目的详细信息
    | **更新** `collection` 中 `abc123` 的详细信息 | **创建** `collection` 中的新对象 `abc123` |
    **从 `collection` 中删除** `abc123` |'
- en: By looking at the table, you can see that each resource is in the form of a
    URL. The first resource is `collection`, and the second resource is `abc123`,
    which lives inside of `collection`. Each of these resources responds differently
    when you pass different methods to them. This is the beauty of REST and HTTP working
    together.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看表格，您可以看到每个资源都以 URL 的形式存在。第一个资源是 `collection`，第二个资源是 `abc123`，它位于 `collection`
    中。当您对这些资源传递不同的方法时，每个资源会有不同的响应。这就是 REST 和 HTTP 共同工作的美妙之处。
- en: 'Notice the bold words I used in the table: **Read, Update, Create**, and **Delete**.
    These words are actually, in themselves, another concept, and it, of course, has
    its own term; **CRUD**. The unflattering term CRUD stands for Create, Read, Update,
    and Delete and is a concept that REST uses to define what happens to a defined
    resource when an HTTP method is combined with a resource in the form of a URL.
    So, if you were to boil all of this down, you would come to the following diagram:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我在表中使用的粗体字：**读取，更新，创建**和**删除**。这些词实际上是另一个概念，当然，它有自己的术语；**CRUD**。这个不太动听的术语CRUD代表创建、读取、更新和删除，是REST用来定义当HTTP方法与URL形式的资源结合时发生的情况的概念。因此，如果您要将所有这些都归纳起来，您将得到以下图表：
- en: '![RESTful JSON APIRESTexamples](graphics/3586_03_010.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![RESTful JSON APIRESTexamples](graphics/3586_03_010.jpg)'
- en: 'This diagram means:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表的含义是：
- en: In order to **CREATE** a resource, you can use either the **POST** or **PUT**
    method
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了**创建**一个资源，您可以使用**POST**或**PUT**方法
- en: In order **READ** a resource, you need to use the **GET** method
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了**读取**一个资源，您需要使用**GET**方法
- en: In order to **UPDATE** a resource, you need to use the **PUT** method
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了**更新**一个资源，您需要使用**PUT**方法
- en: In order to **DELETE** a resource, you need to use the **DELETE** method
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了**删除**一个资源，您需要使用**DELETE**方法
- en: As you can see, this concept of CRUD makes it really clear to find out what
    method you need to use when you want to perform a specific action.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，CRUD的这个概念使得清楚地找出您在执行特定操作时需要使用的方法。
- en: Now that we've looked at what REST means, let's move onto the term **API**,
    which means **Application Programming Interface**. While there are a lot of different
    use cases and concepts of APIs, an API is what we'll use to programmatically interact
    with CouchDB.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了REST的含义，让我们继续学习术语**API**，它代表**应用程序编程接口**。虽然有很多不同的用例和API的概念，但API是我们将用来与CouchDB进行编程交互的工具。
- en: 'Now that we have defined all of the terms, the RESTful JSON API could be defined
    as follows: we have the ability to interact with CouchDB by issuing an HTTP request
    to the CouchDB API with a defined resource, HTTP method, and any additional data.
    Combining all of these things means that we are using REST. After CouchDB processes
    our REST request, it will return with a JSON-formatted response with the result
    of the request.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了所有术语，RESTful JSON API可以定义如下：我们可以通过向CouchDB API发出HTTP请求并定义资源、HTTP方法和任何额外数据来与CouchDB进行交互。结合所有这些意味着我们正在使用REST。在CouchDB处理我们的REST请求后，它将返回一个JSON格式的响应，其中包含请求的结果。
- en: All of this background knowledge will start to make sense as we play with CouchDB's
    RESTful JSON API, by going through each of the HTTP methods, one at a time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们逐个浏览每个HTTP方法时，所有这些背景知识将开始变得有意义，因为我们将使用CouchDB的RESTful JSON API进行操作。
- en: We will use `curl` (which we learned to use in the previous chapter) to explore
    each of the HTTP methods by issuing raw HTTP requests.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`curl`（我们在上一章中学习使用的）通过发出原始HTTP请求来探索每个HTTP方法。
- en: Time for action — getting a list of all databases in CouchDB
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作——获取CouchDB中所有数据库的列表
- en: 'You''ve seen a `GET` request earlier in this book when we used the `curl` statement:
    `curl http://localhost:5984`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前面，当我们使用`curl`语句：`curl http://localhost:5984`时，您已经看到了一个`GET`请求。
- en: This time, let's issue a `GET` request to access CouchDB and get a list of all
    of the databases on the server.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，让我们发出一个`GET`请求来访问CouchDB并获取服务器上所有数据库的列表。
- en: Run the following command in **Terminal:**
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**终端**中运行以下命令：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Terminal** will respond with the following:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会返回以下内容：'
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What just happened?
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: 'We used **Terminal** to trigger a `GET` request to CouchDB''s RESTful JSON
    API. We used one of the options: `-X`, of `curl`, to define the HTTP method. In
    this instance, we used `GET. GET` is the default method, so technically you could
    omit `-X` if you wanted to. Once CouchDB processes the request, it sends back
    a list of the databases that are in the CouchDB server. Currently, there is only
    the `_users` database, which is a default database that CouchDB uses to authenticate
    users.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**终端**触发了一个`GET`请求到CouchDB的RESTful JSON API。我们使用了`curl`的一个选项：`-X`，来定义HTTP方法。在这种情况下，我们使用了`GET`。`GET`是默认方法，所以在技术上，如果您愿意，您可以省略`-X`。一旦CouchDB处理了请求，它会返回一个包含CouchDB服务器中所有数据库列表的响应。目前，只有`_users`数据库，这是CouchDB用于验证用户的默认数据库。
- en: Time for action — creating new databases in CouchDB
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行操作——在CouchDB中创建新的数据库
- en: In this exercise, we'll issue a `PUT` request, which will create a new database
    in CouchDB.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将发出一个`PUT`请求，这将在CouchDB中创建一个新的数据库。
- en: Create a new database by running the following command in **Terminal:**
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**终端**中运行以下命令创建一个新的数据库：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Terminal** will respond with the following:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会返回以下内容：'
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Try creating another database with the same name by running the following command
    in **Terminal:**
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用**终端**中的以下命令创建另一个同名数据库：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Terminal** will respond with the following:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会返回以下内容：'
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Okay, that didn't work. So let's to try to create a database with a different
    name by running the following command in **Terminal:**
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好吧，那没用。所以让我们尝试通过在**终端**中运行以下命令创建一个不同名称的数据库：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Terminal** will respond with the following:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会返回以下内容：'
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's check the details of the `test-db` database quickly and see more detailed
    information about it. To do that, run the following command in **Terminal:**
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速检查`test-db`数据库的详细信息，并查看更多关于它的详细信息。为此，请在**终端**中运行以下命令：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Terminal** will respond with something similar to this (I re-formatted mine
    for readability):'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会返回类似于以下内容（我重新格式化了我的内容以便阅读）：'
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What just happened?
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We just used **Terminal** to trigger a `PUT` method to the created databases
    through CouchDB's RESTful JSON API, by passing `test-db` as the name of the database
    that we wanted to create at the end of the CouchDB root URL. When the database
    was successfully created, we received a message that everything went okay.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用**终端**来触发了一个`PUT`方法，通过CouchDB的RESTful JSON API来创建数据库，将`test-db`作为我们想要在CouchDB根URL的末尾创建的数据库的名称。当数据库成功创建时，我们收到了一条一切正常的消息。
- en: Next, we created a `PUT` request to create another database with the same name
    `test-db`. Because there can't be more than one database with the same name, we
    received an error message.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们发出了一个`PUT`请求来创建另一个同名`test-db`数据库。因为不能有多个同名数据库，我们收到了一个错误消息。
- en: We then used a `PUT` request to create a new database again, named `another-db`.
    When the database was successfully created, we received a message that everything
    went okay.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用`PUT`请求再次创建一个新的数据库，名为`another-db`。当数据库成功创建时，我们收到了一条一切正常的消息。
- en: Finally, we issued a `GET` request to our `test-db` database to find out more
    information on the database. It's not important to know exactly what each of these
    statistics mean, but it's a useful way to get an overview of a database.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们向我们的`test-db`数据库发出了一个`GET`请求，以了解更多关于数据库的信息。知道每个统计数据的确切含义并不重要，但这是一个了解数据库概况的有用方式。
- en: It's worth noting that the URL that was called in the final `GET` request was
    the same URL we called when we first created the database. The only difference
    is that we changed the HTTP method from `PUT` to `GET`. This is REST in action!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在最后的`GET`请求中调用的URL与我们创建数据库时调用的URL相同。唯一的区别是我们将HTTP方法从`PUT`改为了`GET`。这就是REST的工作原理！
- en: Time for action — deleting a database In CouchDB
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——删除数据库在CouchDB
- en: In this exercise, we'll call a `DELETE` request to delete the `another-db` database.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将调用`DELETE`请求来删除`another-db`数据库。
- en: Delete `another-db` by running the following command in **Terminal:**
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**终端**中运行以下命令删除`another-db`：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Terminal** will respond with the following:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会回复以下内容：'
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What just happened?
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used **Terminal** to trigger a `DELETE` method to CouchDB's RESTful JSON
    API. We passed the name of the database that we wanted to delete, `another-db`,
    at the end of the root URL. When the database was successfully deleted, we received
    a message that everything went okay.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**终端**来触发CouchDB的RESTful JSON API的`DELETE`方法。我们在根URL的末尾传递了我们想要删除的数据库的名称`another-db`。当数据库成功删除时，我们收到了一条一切正常的消息。
- en: Time for action — creating a CouchDB document
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——创建CouchDB文档
- en: In this exercise, we'll create a document by initiating a `POST` call. You'll
    notice that our `curl` statement will start to get a bit more complex.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将通过发起`POST`调用来创建一个文档。你会注意到我们的`curl`语句将开始变得有点复杂。
- en: Create a document in the `test-db` database by running the following command
    in **Terminal:**
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**终端**中运行以下命令在`test-db`数据库中创建一个文档：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Terminal** will respond with something similar to the following:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会回复类似以下的内容：'
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s retrieve the newly created document from CouchDB. Start by copying the
    ID you were returned at the last response of the **Terminal** to your clipboard;
    mine is `39b1fe3cdcc7e7006694df91fb002082`, but yours will be different. Then
    run this command in **Terminal**, pasting your ID at the end of the URL:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从CouchDB中检索新创建的文档。首先复制你在**终端**最后一次响应中收到的ID到你的剪贴板；我的是`39b1fe3cdcc7e7006694df91fb002082`，但你的可能不同。然后在**终端**中运行这个命令，将你的ID粘贴到URL的末尾：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Terminal** will respond with something similar to the following:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会回复类似以下的内容：'
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: What just happened?
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: We used **Terminal** to trigger a `POST` call to CouchDB's RESTful JSON API.
    This time, our `curl` statement gained some more options that we haven't used
    before. The `-H` option enables us to set the header of the HTTP request for `POST`
    methods. We need to set the `content-type` to JSON so that CouchDB's RESTful API
    knows what format is coming in. We also used a new option, `-d` option, which
    stands for data. The data option allows us to pass data in the form of a string
    along with our `curl` statement.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**终端**来触发CouchDB的RESTful JSON API的`POST`调用。这一次，我们的`curl`语句增加了一些以前没有使用过的选项。`-H`选项使我们能够设置`POST`方法的HTTP请求头。我们需要将`content-type`设置为JSON，以便CouchDB的RESTful
    API知道传入的格式是什么。我们还使用了一个新选项，`-d`选项，代表数据。数据选项允许我们在字符串形式与我们的`curl`语句一起传递数据。
- en: After creating our document, we retrieved it to **Terminal** by submitting a
    `GET` request to `http://localhost:5984/test-db/41198fc6e20d867525a8faeb7a000015`.
    In response, we received a JSON object containing all of the document's data.
    At the end of this request, we did something a little different. We added `python
    mjson.tool`, which is a built-in component from Python that enables us to nicely
    format our JSON responses, so that we can make more sense of them. This will come
    in handy as we start looking at more complex documents.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完我们的文档后，我们通过向`http://localhost:5984/test-db/41198fc6e20d867525a8faeb7a000015`提交`GET`请求来在**终端**中检索它。作为响应，我们收到了一个包含所有文档数据的JSON对象。在这个请求的最后，我们做了一些不同的事情。我们添加了`python
    mjson.tool`，这是Python的内置组件，它使我们能够很好地格式化我们的JSON响应，以便我们能更好地理解它们。当我们开始查看更复杂的文档时，这将会很有用。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'I didn''t mention that you needed Python installed earlier in the book because
    this is a *nice to have* feature. If you receive an error because you are missing
    Python, you can either install it by going here: [http://python.org/download/](http://python.org/download/).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前没有提到你需要在书中早些时候安装Python，因为这是一个很好有的功能。如果你因为缺少Python而收到错误，你可以通过这里安装它：[http://python.org/download/](http://python.org/download/)。
- en: I know that this has been a bit tiresome, but `curl` will be the main method
    that our PHP code will use to talk to CouchDB, so it's important that we're familiar
    with how it works. Luckily, there is an easier way to access and manage your data
    through a tool named **Futon**.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这有点烦人，但`curl`将是我们的PHP代码与CouchDB交流的主要方法，因此熟悉它的工作原理非常重要。幸运的是，有一种更容易的方法可以通过名为**Futon**的工具来访问和管理您的数据。
- en: Futon
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Futon
- en: CouchDB comes with a built-in web-based administration console called Futon.
    Futon allows you to manage databases, users, and documents in a simple interface.
    The best part of Futon is that it's already installed and ready to go, since it
    comes packed with CouchDB.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: CouchDB自带一个名为Futon的内置基于Web的管理控制台。Futon允许您在一个简单的界面中管理数据库、用户和文档。Futon最好的部分是它已经安装并准备就绪，因为它已经与CouchDB捆绑在一起。
- en: 'Let''s check it out:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看：
- en: Open your browser.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器。
- en: Go to `http://localhost:5984/_utils/`.![Futon](graphics/3586_03_015.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:5984/_utils/`。![Futon](graphics/3586_03_015.jpg)
- en: This is Futon's **Overview** page. On this page, you can see all of the databases
    in the CouchDB installation and the ability to create new ones. You should see
    the database `test-db` that we created in the previous steps, and you can also
    see the `_users` database that is in the CouchDB installation by default.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Futon的**概述**页面。在此页面上，您可以看到CouchDB安装中的所有数据库以及创建新数据库的功能。您应该看到我们在之前步骤中创建的数据库`test-db`，还可以看到CouchDB默认安装的`_users`数据库。
- en: If you look to the right-side of the window, you'll see **Tools**. We will use
    this when we cover *Replicator* later in the book.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看窗口右侧，您会看到**工具**。我们将在本书后面介绍*复制器*时使用它。
- en: Let's dig further into our database `test-db` by clicking on the link for `test-db`
    in the database list on the **Overview** page.![Futon](graphics/3586_03_020.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**概述**页面上数据库列表中`test-db`的链接，深入了解我们的数据库`test-db`。![Futon](graphics/3586_03_020.jpg)
- en: The page you see is the database detail. In this page, you can see a list of
    all of the documents that are in our database along with some actions that you
    can perform on the selected database such as **New Document, Security, Compact
    & Cleanup..., Delete Database, Search,** and so on. It's worth noting that Futon
    is just a helper, and all of these functions are available through `curl` as well.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您看到的页面是数据库详细信息。在此页面上，您可以看到我们数据库中的所有文档列表，以及一些可以在所选数据库上执行的操作，例如**新文档、安全性、压缩和清理...、删除数据库、搜索**等。值得注意的是，Futon只是一个辅助工具，所有这些功能也可以通过`curl`来实现。
- en: Let's dig deeper into Futon by clicking on on a document, and you'll be forwarded
    to the document detail.![Futon](graphics/3586_03_025.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过点击文档来深入了解Futon，您将被转到文档详细信息页面。![Futon](graphics/3586_03_025.jpg)
- en: This data should look familiar! All of our keys are listed on the left, and
    the values are listed on the right.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据应该看起来很熟悉！我们所有的键都列在左边，值都列在右边。
- en: Time for action — updating a document in Futon
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在Futon中更新文档
- en: Using Futon, you can easily update the values of this document. Let's go through
    a quick example.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Futon，您可以轻松更新此文档的值。让我们通过一个快速示例来看看。
- en: Make sure you have the document open in your browser.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您在浏览器中打开了文档。
- en: Note the value of `_rev` in your document.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意文档中“_rev”的值。
- en: 'Double-click the value of the **location** field: **Seattle, WA**, and change
    it to **New York, NY**.'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击**位置**字段的值：“西雅图，华盛顿州”，将其更改为“纽约州纽约市”。
- en: Click on **Save Document** at the top of the page.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面顶部的**保存文档**。
- en: Check to make sure that the value of `_rev` in your document has changed, and
    that **New York, NY** is now the value of location.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查一下您文档中“_rev”的值是否已更改，以及“纽约州纽约市”现在是否是位置的值。
- en: What just happened?
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: You just used Futon to change the value of a field in our document and then
    saved changes to update the document. When the document refreshed, you should
    have noticed that the `_rev` field has changed, and your change to the field was
    updated.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚使用Futon更改了文档中字段的值，然后保存更改以更新文档。当文档刷新时，您应该已经注意到“_rev”字段已更改，并且您对字段的更改已更新。
- en: You may have also noticed that **Previous Version** looks like it's clickable
    now. Click on it and see what happens. Futon displays the old version of the document
    with **Seattle, WA** in the location, as opposed to the new value of **New York,
    NY**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能也注意到“上一个版本”现在看起来是可点击的。点击它，看看会发生什么。Futon显示了文档的旧版本，其中位置是“华盛顿州西雅图”，而不是新值“纽约州纽约市”。
- en: You will now see CouchDB's revisions in full effect. If you want to, you can
    cycle through all of the versions of the document using the **Previous Version**
    and **Next Version** links.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您将看到CouchDB的修订版本生效。如果您愿意，可以使用“上一个版本”和“下一个版本”链接循环浏览文档的所有版本。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'There are two important things we need to note about CouchDB''s revision system:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有两件关于CouchDB的修订系统需要注意的重要事项：
- en: You cannot update an old version of a document; if you try to save an old version
    of a document, CouchDB will return a document update conflict error. This is because
    the only real version of the document is the most current one.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您无法更新文档的旧版本；如果您尝试保存文档的旧版本，CouchDB将返回文档更新冲突错误。这是因为文档的唯一真实版本是最新版本。
- en: Your revision history is only temporary. If your database kept a record of every
    single change, it would start to really get bloated. So, CouchDB has a feature
    called **Compaction** that will get rid of any of the old revisions.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您的修订历史仅是临时的。如果您的数据库记录了每一次更改，它将开始变得臃肿。因此，CouchDB有一个名为**压缩**的功能，可以清除任何旧的修订版本。
- en: Time for action — creating a document in Futon
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间——在Futon中创建文档
- en: We've gone through the updating of existing documents. Let's create a document
    from scratch in Futon.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了更新现有文档。让我们在Futon中从头开始创建一个文档。
- en: Go to the database overview by clicking on the database name, `test-db`, in
    the header.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击页眉中的数据库名称“test-db”转到数据库概述。
- en: Click on **New Document**.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新文档”。
- en: A blank document is created and ready for us to put in new fields. Notice that
    the `_id` is already set for us (but we can change it if we want).
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个空白文档已经创建好，准备让我们放入新的字段。请注意，`_id`已经为我们设置好了（但如果我们愿意，我们可以更改它）。
- en: Click on **Add Field** to create a new field, and call it `location`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加字段**创建一个新字段，并称其为`location`。
- en: Double-click on the value right next to the label that says **null**, and enter
    in your current location.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击标签旁边的值，该标签显示为**null**，然后输入您当前的位置。
- en: Click on **Add Field** to create a new field, and call it `name`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加字段**创建一个新字段，并称其为`name`。
- en: Double-click on the value right next to the label that says `null`, and enter
    in your name.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击标签旁边的值，该标签显示为`null`，然后输入您的名字。
- en: Click on **Save Document** at the top of the page.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面顶部的**保存文档**。
- en: The document has been saved. Notice that it now has a `_rev` value set.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文档已保存。请注意，现在它有一个`_rev`值。
- en: What just happened?
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: You just used Futon to create a document from scratch. When the document was
    first created, CouchDB created a unique ID for you to set it as the value of the
    `_id` field. Next, you added the `name` field and inputted your name as its value.
    Finally, you saved it to create a new document. We've talked about how documents
    can have completely different fields, but this is the first time we've actually
    done it!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚使用Futon从头开始创建了一个文档。当文档第一次创建时，CouchDB为您创建了一个唯一的ID，以便您将其设置为`_id`字段的值。接下来，您添加了`name`字段，并输入了您的名字作为其值。最后，您保存它以创建一个新文档。我们已经讨论过文档可以有完全不同的字段，但这是我们实际做到的第一次！
- en: Security
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全
- en: Up to this point, we've created, read, updated, and deleted documents and databases,
    and we've done all of this without any type of security. When you don't have any
    administrators on your CouchDB instance, it's called **Admin Party**, and that
    simply means that CouchDB will process any request from anybody for anything.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建、读取、更新和删除了文档和数据库，而且所有这些都没有任何安全性。当您的CouchDB实例上没有任何管理员时，称为**管理员派对**，这意味着CouchDB将处理来自任何人的任何请求。
- en: Time for action — taking CouchDB out of Admin Party
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-将CouchDB从管理员派对中带出来
- en: Having CouchDB unsecure isn't bad when you are programming locally, but it can
    be catastrophic if you accidentally have an unsecure database on a publicly accessible
    server. Let's briefly add security now to make sure you know how to do it in the
    future.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在本地编程时，CouchDB不安全并不是什么坏事，但如果您在公开可访问的服务器上意外地有一个不安全的数据库，那可能是灾难性的。现在让我们简要地添加安全性，以确保您知道将来如何做。
- en: 'Open Futon to the **Overview**, and look at the bottom right corner. You''ll
    see text that says:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Futon到**概述**，并查看右下角。您会看到文字说：
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Click on the **Fix this** link.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**修复此问题**链接。
- en: A new window will pop up, prompting you **Create Server Admin**.![Time for action
    — taking CouchDB out of Admin Party](graphics/3586_03_030.jpg)
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个新窗口将弹出，提示您**创建服务器管理员**。![行动时间-将CouchDB从管理员派对中带出来](graphics/3586_03_030.jpg)
- en: Enter in a username and password that you want to use for your administrator
    account, and click on **Create**.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您想要用于管理员帐户的用户名和密码，然后点击**创建**。
- en: What just happened?
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: You just used Futon to add a server admin to your CouchDB installation. The
    **Create Server Admin** pop up said that once a server admin was added, you would
    be able to create and destroy databases, and perform other administrative functions.
    All other users (including anonymous users) can still read and write to the databases.
    With that in mind, we'll want to add some security onto the database as well.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚使用Futon向CouchDB安装添加了一个服务器管理员。**创建服务器管理员**弹出窗口说，一旦添加了服务器管理员，您将能够创建和销毁数据库，并执行其他管理功能。所有其他用户（包括匿名用户）仍然可以读取和写入数据库。考虑到这一点，我们也希望在数据库上添加一些安全性。
- en: Time for action — anonymously accessing the _users database
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-匿名访问用户数据库
- en: Let's go through a quick exercise of calling a `curl` statement to the `_users`
    database to see why it's important to secure our data.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速练习一下调用一个`curl`语句到`_users`数据库，看看为什么安全我们的数据很重要。
- en: Open **Terminal**.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: Run the following command, replacing `your_username` with the username of the
    server admin that you just created.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，将`your_username`替换为您刚刚创建的服务器管理员的用户名。
- en: '[PRE18]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Terminal** will respond with something similar to:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会回复类似于：'
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: What just happened?
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: You used **Terminal** to create a `curl` request to read the document containing
    your server admin's data. The passwords in the database are encrypted, but it's
    possible that someone could still unencrypt the password or use the usernames
    of the users against them. With that in mind, let's secure the database so that
    only administrators can access this database.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用**终端**创建了一个`curl`请求来读取包含服务器管理员数据的文档。数据库中的密码是加密的，但有可能有人仍然可以解密密码或使用用户的用户名对他们进行攻击。考虑到这一点，让我们保护数据库，只有管理员才能访问这个数据库。
- en: Time for action — securing the _users database
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间-保护用户数据库
- en: Let's secure the `_users` database so that only server admins can read, write,
    and edit the other users within the system.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保护`_users`数据库，以便只有服务器管理员可以读取、写入和编辑系统中的其他用户。
- en: Open Futon to the **Overview**.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Futon到**概述**。
- en: Click on the `_users` database.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`_users`数据库。
- en: Click on **Security** at the top of the screen.![Time for action — securing
    the _users database](graphics/3586_03_035.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕顶部的**安全**。![行动时间-保护用户数据库](graphics/3586_03_035.jpg)
- en: Change the values of **Roles** for both **Admins** and **Readers** to `["admins"]`,
    so it looks as follows:![Time for action — securing the _users database](graphics/3586_03_040.jpg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改**管理员**和**读者**的**角色**的值为`["admins"]`，使其如下所示：![行动时间-保护用户数据库](graphics/3586_03_040.jpg)
- en: What just happened?
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: You just changed the roles of **Admins** and **Readers** for the `_users` database
    to `["admins"]`, so that only admins could read or alter the design documents
    and readers' list. We made the format of the roles `["admins"]` because it accepts
    roles in the form of an array.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚将`_users`数据库的**管理员**和**读者**角色更改为`["admins"]`，这样只有管理员才能读取或更改设计文档和读者列表。我们将角色的格式设置为`["admins"]`，因为它接受数组形式的角色。
- en: Time for action — checking to make sure the database is secure
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 检查数据库是否安全
- en: 'Your `_users` database should be secure, so that only admins can read or alter
    the structure of the database. Let''s quickly test this:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`_users`数据库应该是安全的，这样只有管理员才能读取或更改数据库的结构。让我们快速测试一下：
- en: Open **Terminal**.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: 'Try to read the user document again by running the following command. Again,
    replace `your_username` with the username of the service admin that you just created:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令再次尝试读取用户文档。再次用服务管理员的用户名替换`your_username`：
- en: '[PRE20]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Terminal** will respond with the following:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会返回以下内容：'
- en: '[PRE21]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What just happened?
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: With the CouchDB instance out of Admin Party mode, the authentication module
    stepped in to make sure that anonymous users couldn't read the database.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 通过关闭CouchDB实例的管理员模式，认证模块开始起作用，以确保匿名用户无法读取数据库。
- en: Note
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We'll add more security to the databases down the road, but this is one of the
    simplest ways to add security to a database.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以后进一步增强数据库的安全性，但这是向数据库添加安全性的最简单方法之一。
- en: If you were to play around with the command line again, you would be restricted
    by doing anything with the `_users` database, but you would also notice that the
    `test-db` database is operating just as it was before, perfect! That's exactly
    what we wanted. You might be asking how do I access the `_users` database through
    the command line, now that security is enabled? You have to show that you are
    an admin by passing your credentials to the RESTful JSON API.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您再次尝试在命令行上玩耍，您将受到对`_users`数据库的限制，但您还会注意到`test-db`数据库的操作方式与之前一样，非常好！这正是我们想要的。您可能会问，既然启用了安全性，我如何通过命令行访问`_users`数据库？您必须通过将您的凭据传递给RESTful
    JSON API来证明您是管理员。
- en: Time for action — accessing a database with security enabled
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 访问启用了安全性的数据库
- en: Let's quickly try to access a database that has security enabled by passing
    the username and password with our request.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试快速访问一个启用了安全性的数据库，通过在请求中传递用户名和密码。
- en: Open **Terminal**.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**终端**。
- en: View all of the documents saved in the `_users` database by running the following
    command. Replace `username` and `password` with your admin's username and password.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令查看在`_users`数据库中保存的所有文档。用您的管理员用户名和密码替换`username`和`password`。
- en: '[PRE22]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Terminal** will respond with the same data that you saw before you added
    the authentication.'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**将会返回您在添加认证之前看到的相同数据。'
- en: '[PRE23]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: What just happened?
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: You just issued a `GET` request to the `_users` database and used the username
    and password of the server admin that we created earlier to authenticate us. Once
    authenticated, we were able to access the data normally. If you want to perform
    any action on a secure database, you just need to prepend `username:password@`
    before the URL of the resource you would like to work with.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚向`_users`数据库发出了一个`GET`请求，并使用了我们之前创建的服务器管理员的用户名和密码进行了身份验证。一旦经过身份验证，我们就能够正常访问数据。如果您想在安全数据库上执行任何操作，只需在要处理的资源的URL之前添加`username:password@`即可。
- en: Pop quiz
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 突发测验
- en: What is the first sentence of CouchDB's definition according to[http://couchdb.apache.org/](http://couchdb.apache.org/)?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据[http://couchdb.apache.org/](http://couchdb.apache.org/)，CouchDB的定义的第一句是什么？
- en: What are the four verbs used by HTTP, and how does each match up to CRUD?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP使用的四个动词是什么，每个动词与CRUD的匹配是什么？
- en: What is the URL to access Futon?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Futon的URL是什么？
- en: What does the term Admin Party mean to CouchDB, and how do you take CouchDB
    out of this mode?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对CouchDB来说，“管理员模式”是什么意思，以及如何将CouchDB退出这种模式？
- en: How would you authenticate a user for a secure database through the command
    line?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何通过命令行对安全数据库进行用户认证？
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We learned a lot about CouchDB in this chapter. Let's quickly review
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学到了很多关于CouchDB。让我们快速回顾一下
- en: We defined CouchDB by looking at databases, documents, and the RESTful JSON
    API
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过查看数据库、文档和RESTful JSON API来定义CouchDB
- en: We compared CouchDB to a traditional relational database such as MySQL
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将CouchDB与传统的关系型数据库（如MySQL）进行了比较
- en: We interacted with CouchDB's RESTful JSON API, using `curl` statements
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`curl`语句与CouchDB的RESTful JSON API进行交互
- en: We created and altered documents by using Futon
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用Futon创建和更改文档
- en: We learned how to add security to a database and tested its effectiveness
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们学会了如何向数据库添加安全性并测试其有效性
- en: Get ready! In the next chapter, we are going to start building the PHP framework
    that will be the platform on which we will develop in the rest of the book.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了！在下一章中，我们将开始构建PHP框架，这将是我们在本书的其余部分中开发的平台。
