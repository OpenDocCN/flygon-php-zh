- en: Chapter 1. Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。介绍
- en: '**PHP Data Objects**, (**PDO**) is a PHP5 extension that defines a lightweight
    DBMS connection abstraction library (sometimes called data access abstraction
    library). The need for a tool like PDO was dictated by the great number of database
    systems supported by PHP. Each of these database systems required a separate extension
    that defined its own API for performing the same tasks, starting from establishing
    a connection to advanced features such as preparing statements and error handling.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**PHP数据对象**（**PDO**）是一个PHP5扩展，定义了一个轻量级的数据库连接抽象库（有时称为数据访问抽象库）。对于像PDO这样的工具的需求是由PHP支持的大量数据库系统所决定的。这些数据库系统中的每一个都需要一个单独的扩展，为执行相同的任务定义自己的API，从建立连接到准备语句和错误处理等高级功能。'
- en: The fact that these APIs were not unified made transition between underlying
    databases painful, often resulting in the rewriting of many lines of code, which
    in turn, led to new programming errors that required time to track, debug and
    correct. On the other hand, the absence of a unified library, like JDBC for Java,
    was putting PHP behind the big players in the programming languages world. Now
    that such library exists, PHP is regaining its position and is a platform of choice
    for millions of programmers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些API不统一的事实使得在底层数据库之间的转换痛苦，通常导致许多代码行的重写，进而导致需要时间来跟踪、调试和纠正新的编程错误。另一方面，缺乏像Java的JDBC那样的统一库，使得PHP在编程语言世界中落后于大型玩家。现在有了这样的库，PHP正在重新夺回其地位，并成为数百万程序员的首选平台。
- en: It should be noted, however, that there exist several libraries written in PHP,
    that serve the same purpose as PDO. The most popular are the ADOdb library and
    the PEAR DB package. The key difference between them and PDO is speed. PDO is
    a PHP extension written in a compiled language (C/C++), while the PHP libraries
    are written in an interpreted language. Also, once PDO is enabled, it does not
    require you to include source files in your scripts and redistribute them with
    your application. This makes installing your applications easier, as the end user
    does not need to take care of third-party software.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，值得注意的是，存在一些用PHP编写的库，用于与PDO具有相同的目的。最流行的是ADOdb库和PEAR DB包。它们与PDO之间的关键区别在于速度。PDO是用编译语言（C/C++）编写的PHP扩展，而PHP库是用解释语言编写的。此外，一旦启用PDO，它就不需要您在脚本中包含源文件并将其与应用程序一起重新分发。这使得安装您的应用程序更容易，因为最终用户不需要关心第三方软件。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Here, we are neither comparing these libraries with PDO nor advocating the use
    of PDO over such libraries. We are just showing the advantages and disadvantages
    of this extension. For example, the PEAR package, MDB2, has richer functionality
    of an advanced database abstraction library, which PDO does not.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们既不比较这些库与PDO，也不主张使用PDO取代这些库。我们只是展示这个扩展的优缺点。例如，PEAR包MDB2具有更丰富的功能，是一个高级的数据库抽象库，而PDO没有。
- en: PDO being a PECL extension, itself relies on database-specific drivers and on
    other PECL extensions. These drivers must also be installed in order to use PDO
    (you only need the drivers for the databases you are using). Since the description
    of installation of PDO and database-specific drivers is beyond the scope of this
    book, you can refer to PHP manual at [www.php.net/pdo](http://www.php.net/pdo)
    for technical information regarding installation and upgrade issues.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: PDO作为一个PECL扩展，本身依赖于特定于数据库的驱动程序和其他PECL扩展。这些驱动程序也必须安装才能使用PDO（您只需要用于您正在使用的数据库的驱动程序）。由于安装PDO和特定于数据库的驱动程序的描述超出了本书的范围，您可以参考PHP手册[www.php.net/pdo](http://www.php.net/pdo)获取有关安装和升级问题的技术信息。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PECL is PHP Extension Community Library, a repository of PHP extensions written
    in C. These extensions offer functionality that would be impossible to implement
    in PHP, as well as some extensions that exist for performance reasons as the C
    code is much faster than PHP. The home page of PECL is at [http://pecl.php.net](http://pecl.php.net)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: PECL是PHP扩展社区库，一个用C语言编写的PHP扩展库。这些扩展提供了在PHP中无法实现的功能，以及一些出于性能原因存在的扩展，因为C代码比PHP快得多。PECL的主页位于[http://pecl.php.net](http://pecl.php.net)
- en: Using PDO
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PDO
- en: As it has been noted in the previous section, PDO is a connection, or data access
    abstraction library. This means that PDO defines a unified interface for creating
    and maintaining database connections, issuing queries, quoting parameters, traversing
    result sets, dealing with prepared statements, and error handling.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一节中所指出的，PDO是一个连接或数据访问抽象库。这意味着PDO定义了一个统一的接口，用于创建和维护数据库连接，发出查询，引用参数，遍历结果集，处理准备好的语句和错误处理。
- en: We will give a quick overview of these topics here and look at them in greater
    detail in the following chapters.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里简要概述这些主题，并在接下来的章节中更详细地讨论它们。
- en: Connecting to the Database
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: 'Let''s consider the well-known MySQL connection scenario:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下著名的MySQL连接场景：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we establish a connection and then select the default database for the
    connection. (We ignore the issue of possible errors.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们建立一个连接，然后选择连接的默认数据库。（我们忽略可能出现的错误。）
- en: 'In SQLite, for example, we would write something like the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在SQLite中，我们会写出以下内容：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here again we ignore errors (we will cover more on this later). For completeness,
    let''s see how we would connect to a PostgreSQL:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们再次忽略错误（稍后我们将更多地涵盖这一点）。为了完整起见，让我们看看如何连接到PostgreSQL：
- en: pg_connect("host=$host dbname=$db user=$user password=$password");
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: pg_connect("host=$host dbname=$db user=$user password=$password");
- en: As you can see, all three databases require quite different ways of opening
    a connection. While this is not a problem now, but if you always use the same
    database management system in case you need to migrate, you will have to rewrite
    your scripts.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，所有三个数据库都需要完全不同的方式来打开连接。虽然现在这不是问题，但如果您总是使用相同的数据库管理系统，以防需要迁移，您将不得不重写您的脚本。
- en: 'Now, let''s see what PDO has to offer. As PDO is fully object-oriented, we
    will be dealing with **connection objects**, and further interaction with the
    database will involve calling various methods of these objects. The examples above
    implied the need for something analogous to these connection objects—calls to
    `mysql_connect` or `pg_connect` return link identifiers and PHP variables of a
    special type: **resource**. However, we didn''t use connection objects then since
    these two database APIs don''t require us to explicitly use them if we only have
    one connection in our scripts. However, SQLite always requires a link identifier.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看PDO提供了什么。由于PDO是完全面向对象的，我们将处理**连接对象**，与数据库的进一步交互将涉及调用这些对象的各种方法。上面的示例暗示了需要类似于这些连接对象的东西——调用`mysql_connect`或`pg_connect`返回链接标识符和特殊类型的PHP变量：**resource**。然而，我们当时没有使用连接对象，因为这两个数据库API不要求我们在脚本中只有一个连接时显式使用它们。然而，SQLite始终需要一个链接标识符。
- en: With PDO, we will always have to explicitly use the connection object, since
    there is no other way of calling its methods. (Those unfamiliar with object-oriented
    programming should refer to Appendix A).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PDO，我们将始终必须显式使用连接对象，因为没有其他调用其方法的方式。（不熟悉面向对象编程的人应参考附录A）。
- en: 'Each of the three above connections could be established in the following manner:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上述三个连接可以以以下方式建立：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the only part that is changing here is the first argument passed
    to the PDO constructor. For SQLite, which does not utilize username and password,
    the second and third arguments can be skipped.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这里唯一变化的部分是传递给PDO构造函数的第一个参数。对于SQLite，不使用用户名和密码，第二和第三个参数可以省略。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: SQLite is not a database server, but it is an embedded SQL database library
    that operates on local files. More information about SQLite can be found at [www.sqlite.org](http://www.sqlite.org)
    and more information about using SQLite with PHP can be found at [www.php.net/sqlite](http://www.php.net/sqlite).
    Information about using SQLite with PDO can be obtained from [www.php.net/manual/en/ref.pdo-sqlite.php](http://www.php.net/manual/en/ref.pdo-sqlite.php)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite不是一个数据库服务器，而是一个嵌入式SQL数据库库，它在本地文件上运行。有关SQLite的更多信息可以在[www.sqlite.org](http://www.sqlite.org)找到，有关使用SQLite与PHP的更多信息可以在[www.php.net/sqlite](http://www.php.net/sqlite)找到。有关使用PDO与SQLite的信息可以从[www.php.net/manual/en/ref.pdo-sqlite.php](http://www.php.net/manual/en/ref.pdo-sqlite.php)获取。
- en: Connection Strings
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接字符串
- en: As you have seen in previous example, PDO uses the so-called **connection strings**
    (or Data Source Names, abbreviated to DSN) that allow the PDO constructor to select
    proper driver and pass subsequent method calls to it. These connection strings
    or DSNs are different for every database management system and are the only things
    that you will have to change.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的示例中看到的，PDO使用所谓的**连接字符串**（或数据源名称，缩写为DSN），允许PDO构造函数选择适当的驱动程序并将后续方法调用传递给它。这些连接字符串或DSN对于每个数据库管理系统都是不同的，是你唯一需要更改的东西。
- en: If you are designing a big application that will be able to work with different
    databases, then this connection string (together with a connection username and
    a password) can be defined in a configuration file and later used in the following
    manner (assuming your configuration file is similar to `php.ini)`
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在设计一个能够与不同数据库一起工作的大型应用程序，那么这个连接字符串（连同连接用户名和密码）可以在配置文件中定义，并以后以以下方式使用（假设你的配置文件类似于`php.ini`）。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Your configuration file might then look like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你的配置文件可能如下所示：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will cover connection strings in more detail in [Chapter 2](ch02.html "Chapter 2. Using
    PHP Data Objects: First Steps"); here we gave a quick example so that you can
    see how easy it is to connect to different database systems with PDO.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第2章](ch02.html "第2章。使用PHP数据对象：第一步")中更详细地介绍连接字符串；在这里，我们给出了一个快速示例，以便你可以看到使用PDO连接到不同数据库系统有多么容易。
- en: Issuing SQL Queries, Quoting Parameters, and Handling Result Sets
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发出SQL查询、引用参数和处理结果集
- en: PDO would not be worth a whole book, if it didn't go beyond the single interface
    for creating database connections. The PDO object introduced in the previous example
    has all the methods needed to uniformly execute queries regardless of the database
    used.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果PDO没有超越创建数据库连接的单一接口，那么它就不值得写一本书。在前面的示例中介绍的PDO对象具有统一执行查询所需的所有方法，而不管使用的是哪种数据库。
- en: 'Let''s consider a simple query that would select all the car `make` attributes
    from an imaginary database employed at a used car lot. The query is as simple
    as the following SQL command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个简单的查询，它将从一个虚构的二手车停车场所使用的数据库中选择所有汽车的`make`属性。查询就像下面的SQL命令一样简单：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Previously, we would have had to call different functions, depending on the
    database:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，我们必须调用不同的函数，这取决于数据库：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that we are using PDO, we can do the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用PDO，可以这样做：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, doing things the PDO way is not too different from traditional
    methods of issuing queries. Also, here it should be underlined, that a call to
    `$conn->query()` is returning another object of class `PDOStatement`, unlike the
    calls to `mysql_query(), sqlite_query()`, and `pg_query()`, which return PHP variables
    of the **resource** type.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，用PDO的方式并不太不同于发出查询的传统方法。此外，这里应该强调的是，对`$conn->query()`的调用返回`PDOStatement`类的另一个对象，而不像对`mysql_query()`、`sqlite_query()`和`pg_query()`的调用，它们返回PHP变量的**resource**类型。
- en: 'Now, let''s make our simplistic SQL query a bit more complicated so that it
    selects the total value of all Fords on sale in our imaginary car lot. The query
    would then look something like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将我们简单的SQL查询变得更加复杂，以便它选择我们想象中汽车停车场上所有福特车的总价值。查询看起来会像这样：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To make our example even more interesting, let''s assume that the name of the
    car manufacturer is held in a variable ($make) so that we must quote it, before
    passing it to the database. Our non-PDO queries would now look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的示例更加有趣，让我们假设汽车制造商的名称保存在一个变量（$make）中，这样我们必须在传递给数据库之前对其进行引用。我们的非PDO查询现在看起来像这样：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The PDO class defines a single method for quoting strings so that they can
    be used safely in queries. We will discuss security issues such as SQL injection,
    in [Chapter 3](ch03.html "Chapter 3. Error Handling"). This method does a neat
    thing; it will automatically add quotes around the value if necessary:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: PDO类定义了一个用于引用字符串的方法，以便它们可以安全地用于查询。我们将在[第3章](ch03.html "第3章。错误处理")中讨论诸如SQL注入之类的安全问题。这个方法做了一个很好的事情；如果有必要，它会自动在值周围添加引号：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Again, you can see that PDO allows you to use the same pattern as you would
    have used before, but the names of all the methods are unified.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您可以看到PDO允许您使用与以前相同的模式，但所有方法的名称都是统一的。
- en: 'Now that we have issued our query, we will want to see its results. As the
    query in the last example will always return just one row, we will want more rows.
    Again, the three databases will require us to call different functions on the
    `$q` variable that was returned from one of the three calls to `mysql_query(),
    sqlite_query()`, or `pg_query()`. So our code for getting all the cars will look
    similar to this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经发出了查询，我们将想要查看其结果。由于上一个示例中的查询总是只返回一行，我们将想要更多行。同样，这三个数据库将要求我们在从`mysql_query(),
    sqlite_query()`或`pg_query()`中返回的`$q`变量上调用不同的函数。因此，我们获取所有汽车的代码将类似于这样：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, the idea is the same, but we have to use different function
    names. Also, note that SQLite requires an extra parameter if we want to get the
    rows in the same way as with MySQL and PostgreSQL (of course, this could be omitted,
    but then the returned rows would contain both column name indexed and numerically
    indexed elements.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，想法是一样的，但我们必须使用不同的函数名。另外，需要注意的是，如果我们想以与MySQL和PostgreSQL相同的方式获取行，SQLite需要一个额外的参数（当然，这可以省略，但返回的行将包含列名索引和数字索引的元素。）
- en: 'As you may already have guessed, things are pretty straightforward when it
    comes to PDO: We don''t care what the underlying database is, and the methods
    for fetching rows are the same across all databases. So, the above code could
    be rewritten for PDO in the following way:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经猜到的那样，当涉及到PDO时，事情变得非常简单：我们不关心底层数据库是什么，获取行的方法在所有数据库中都是相同的。因此，上面的代码可以以以下方式重写为PDO：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Nothing is different from what happens before. One thing to note here is that
    we explicitly specified the `PDO::FETCH_ASSOC` fetch style constant here, since
    PDO''s default behavior is to fetch the result rows as arrays indexed both by
    column name and number. (This behavior is similar to `mysql_fetch_array(), sqlite_fetch_array()`
    without the second parameter, or `pg_fetch_array().)` We will discuss the fetch
    styles that PDO has to offer in [Chapter 2](ch02.html "Chapter 2. Using PHP Data
    Objects: First Steps").'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 之前发生的事情与以往无异。这里需要注意的一点是，我们在这里明确指定了`PDO::FETCH_ASSOC`的获取样式常量，因为PDO的默认行为是将结果行作为数组索引，既按列名又按数字索引。（这种行为类似于`mysql_fetch_array(),
    sqlite_fetch_array()`没有第二个参数，或者`pg_fetch_array()`。）我们将在[第2章](ch02.html "第2章。使用PHP数据对象：第一步")中讨论PDO提供的获取样式。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The last example was not intended to be used to render HTML pages as it used
    the newline character to separate lines of output. To use it in a real webpage,
    you will have to change `echo $r['make'], "\n"`; to `echo $r['make'], "<br>\n"`;
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个示例并不是用于呈现HTML页面，因为它使用换行符来分隔输出行。要在真实的网页中使用它，您需要将`echo $r['make'], "\n"`;更改为`echo
    $r['make'], "<br>\n"`;
- en: Error Handling
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误处理
- en: Of course, the above examples didn't provide for any error checking, so they
    are not very useful for real-life applications.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，上面的示例没有提供任何错误检查，因此对于实际应用程序来说并不是非常有用。
- en: When working with a database, we should check for errors when opening the connection
    to the database, when selecting the database and after issuing every query. Most
    web applications, however, just need to display an error message when something
    goes wrong (without going into error detail, which could reveal some sensitive
    information). However, when debugging an error, you (as the developer) would need
    the most detailed error information possible so that you can debug the error in
    the shortest possible time.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在与数据库一起工作时，我们应该在打开数据库连接时，选择数据库时以及发出每个查询后检查错误。然而，大多数Web应用程序只需要在出现问题时显示错误消息（而不需要详细的错误信息，这可能会泄露一些敏感信息）。但是，在调试错误时，您（作为开发人员）需要尽可能详细的错误信息，以便您可以在最短的时间内调试错误。
- en: 'One simplistic scenario would be to abort the script and present the error
    message (although this is something you probably would not want to do). Depending
    on the database, our code might look like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的情景是中止脚本并呈现错误消息（尽管这可能不是你想要做的）。根据数据库的不同，我们的代码可能如下所示：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, error handling is starting to get a bit different for SQLite
    compared to MySQL and PostgreSQL. (Note the call to `sqlite_error_string (sqlite_last_error($dbh)).)`
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，与MySQL和PostgreSQL相比，对于SQLite来说，错误处理开始有点不同。（请注意调用`sqlite_error_string (sqlite_last_error($dbh)).)`)
- en: 'Before we take a look at how to implement the same error handling strategy
    with PDO, we should note that this will be only one of the three possible error
    handling strategies in PDO. We will cover them in detail later in this book. Here
    we will just use the simplest one:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们看如何使用PDO实现相同的错误处理策略之前，我们应该注意，这将是PDO中三种可能的错误处理策略之一。我们将在本书的后面详细介绍它们。在这里，我们将只使用最简单的一个：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This example shows that PDO will force us to use a slightly different error
    handling scheme from the traditional one. We wrapped the call to the PDO constructor
    in a *try* … *catch* block. (Those who are new to PHP5's object-oriented features
    should refer to Appendix A.) This is because while PDO can be instructed not to
    use exceptions, (in fact, it is PDO's default behavior not to use exceptions),
    however, you cannot avoid exceptions here. If the call to the constructor fails,
    an exception will always be thrown.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子表明，PDO会强制我们使用与传统错误处理方案略有不同的方案。我们将对PDO构造函数的调用包装在*try* … *catch*块中。（那些对PHP5的面向对象特性不熟悉的人应该参考附录A。）这是因为虽然PDO可以被指示不使用异常（事实上，PDO的默认行为是不使用异常），但是在这里你无法避免异常。如果构造函数调用失败，异常将总是被抛出。
- en: 'It is a very good idea to catch that exception because, by default, PHP will
    abort the script execution and will display an error message like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获这个异常是一个非常好的主意，因为默认情况下，PHP会中止脚本执行，并显示这样的错误消息：
- en: '**Fatal error: Uncaught exception ''PDOException'' with message ''SQLSTATE[28000]
    [1045] Access denied for user ''bosss''@''localhost'' (using password: YES)''
    in /var/www/html/pdo.php5:3 Stack trace: #0 c:\www\hosts\localhost\pdo.php5(3):
    PDO->__construct(''mysql:host=loca...'', ''bosss'', ''password'', Array) #1 {main}
    thrown in /var/www/html/pdo.php5 on line 3**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**致命错误：未捕获的异常''PDOException''，消息为''SQLSTATE[28000] [1045] 用户''bosss''@''localhost''被拒绝访问（使用密码：YES）''，位于/var/www/html/pdo.php5:3
    堆栈跟踪：#0 c:\www\hosts\localhost\pdo.php5(3)：PDO->__construct(''mysql:host=loca...'',
    ''bosss'', ''password'', Array) #1 {main} 在/var/www/html/pdo.php5的第3行抛出**'
- en: 'We made this exception by supplying the wrong username, *bosss*, in the call
    to the PDO constructor. As you can see from this output, it contains some details
    that we would not like others to see: Things like file names and script paths,
    the type of database being used, and most importantly, usernames and passwords.
    Suppose that this exception had happened when we had supplied the right username
    and something had gone wrong with the database server. Then the screen output
    would have contained the real username and password.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在对PDO构造函数的调用中提供错误的用户名*bosss*来制造了这个异常。正如你从这个输出中看到的，它包含了一些我们不希望其他人看到的细节：像文件名和脚本路径，正在使用的数据库类型，最重要的是用户名和密码。假设这个异常发生在我们提供了正确的用户名并且数据库服务器出了问题的情况下。那么屏幕输出将包含真实的用户名和密码。
- en: 'If we catch the exception properly, the error output might look like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正确捕获异常，错误输出可能会像这样：
- en: '**SQLSTATE[28000] [1045] Access denied for user ''bosss''@''localhost'' (using
    password: YES)**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQLSTATE[28000] [1045] 用户''bosss''@''localhost''被拒绝访问（使用密码：YES）**'
- en: 'This error message contains much less sensitive information. (In fact, this
    output is very similar to the error output that would be produced by one of our
    non-PDO examples.) But we will again warn you that the best policy is just show
    some neutral error message like: "Sorry, the service is temporarily unavailable.
    Please try again later." Of course, you should also log all errors so that you
    can find out later whether anything bad has happened.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误消息包含了更少的敏感信息。（事实上，这个输出与我们的非PDO示例中产生的错误输出非常相似。）但我们再次警告您，最好的策略是只显示一些中立的错误消息，比如：“抱歉，服务暂时不可用。请稍后再试。”当然，您还应该记录所有错误，以便以后找出是否发生了任何不好的事情。
- en: '**Prepared Statements**'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**预处理语句**'
- en: This is a rather advanced topic, but you should become familiar with it. If
    you are a user of PHP with MySQL or SQLite, then you probably didn't even hear
    of prepared statements, since PHP's MySQL and SQLite extensions don't offer this
    functionality. PostgreSQL users might have already used `pg_prepare()` and `pg_execute()`
    in tandem. MySQLi (the *improved* MySQL extension) also offers the prepared statements
    functionality, but in a somewhat awkward way (despite the possible object-oriented
    style).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当高级的话题，但你应该熟悉它。如果你是一个使用PHP与MySQL或SQLite的用户，那么你可能甚至没有听说过预处理语句，因为PHP的MySQL和SQLite扩展不提供这个功能。PostgreSQL用户可能已经使用了`pg_prepare()`和`pg_execute()`。MySQLi（改进的MySQL扩展）也提供了预处理语句功能，但方式有些别扭（尽管可能是面向对象的风格）。
- en: For those who are not familiar with **prepared statements**, we will now give
    a short explanation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不熟悉**预处理语句**的人，我们现在将给出一个简短的解释。
- en: 'When developing database-driven, interactive dynamic applications, you will
    sooner or later need to take user input (which may originate from a form) and
    pass it as a part of a query to a database. For example, given our cars'' database,
    you might design a feature that will output a list of cars made between any two
    years. If you allow the user to enter these years in a form, the code will look
    something like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发基于数据库的交互式动态应用程序时，您迟早会需要接受用户输入（可能来自表单），并将其作为查询的一部分传递给数据库。例如，给定我们的汽车数据库，您可能设计一个功能，将输出在任意两年之间制造的汽车列表。如果允许用户在表单中输入这些年份，代码将看起来像这样：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this simple example the query depends on two variables, which are part of
    the resulting SQL. A corresponding prepared statement in PDO would look something
    like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的例子中，查询依赖于两个变量，这些变量是结果SQL的一部分。在PDO中，相应的预处理语句看起来像这样：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see, we replaced the `$sy` and `$ey` variables with placeholders
    in the query body. We can now manipulate this query to create the prepared statement
    and execute it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们在查询体中用占位符替换了`$sy`和`$ey`变量。现在我们可以操作这个查询来创建预处理语句并执行它：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These three lines of code tells us that the prepared statements are objects
    (with class `PDOStatement)`. They are created using calls to `PDO::prepare()`
    method that accepts an SQL statement with placeholders as its parameters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这三行代码告诉我们，预处理语句是对象（具有类`PDOStatement`）。它们是使用调用`PDO::prepare()`方法创建的，该方法接受带有占位符的SQL语句作为其参数。
- en: The prepared statements then have to be *executed* in order to obtain the query
    results by calling the `PDOStatement::execute()` method. As the example shows,
    we call this method with an array that holds the values for the placeholders.
    Note how the order of the variables in that array matches the order of the placeholders
    in the `$sql` variable. Obviously, the number of elements in the array must be
    the same as the number of placeholders in the query.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后必须*执行*准备好的语句，以通过调用`PDOStatement::execute()`方法获取查询结果。正如示例所示，我们使用一个包含占位符值的数组来调用这个方法。请注意，该数组中变量的顺序与`$sql`变量中占位符的顺序相匹配。显然，数组中的元素数量必须与查询中占位符的数量相同。
- en: 'You have probably noticed that we are not saving the result of the call to
    the `PDOStatement::execute()` method in any variable. This is because the statement
    object itself is used to access the query results, so that we can complete our
    example to look like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们没有将对`PDOStatement::execute()`方法的调用结果保存在任何变量中。这是因为语句对象本身用于访问查询结果，这样我们就可以将我们的示例完善成这样：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As this complete example shows, we call the `PDOStatement::fetch()` method until
    it returns a false value, at which point the loop quits—just like we did in previous
    examples when discussing result sets traversal.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这个完整的示例所示，我们调用`PDOStatement::fetch()`方法，直到它返回false值为止，此时循环退出——就像我们在讨论结果集遍历时的先前示例中所做的那样。
- en: 'Of course, the replacement of question mark placeholders with actual values
    is not the only thing that prepared statements can do. Their power lies in the
    possibility of being executed as many times as needed. This means that we can
    call the `PDOStatement::execute()` method as many times as we want, and every
    time we can supply different values for the placeholders. For example, we can
    do this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，用实际值替换问号占位符并不是准备好的语句唯一能做的事情。它们的强大之处在于可以根据需要执行多次。这意味着我们可以调用`PDOStatement::execute()`方法多次，每次都可以为占位符提供不同的值。例如，我们可以这样做：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Prepared statements tend to execute faster than calls to `PDO::query()` methods,
    since the database drivers optimize them only once, in a call to `PDO::prepare()`
    methods. Another advantage of using prepared statements is that you don't have
    to quote the parameters passed in a call to `PDOStatement::execute()`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好的语句执行起来比调用`PDO::query()`方法要快，因为数据库驱动程序只会在调用`PDO::prepare()`方法时对它们进行优化一次。使用准备好的语句的另一个优点是，您不必引用在调用`PDOStatement::execute()`时传递的参数。
- en: 'In our example we used an explicit cast of the request parameters into integer
    variables, but we could also have done the following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将请求参数显式转换为整数变量，但我们也可以这样做：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The prepared statement here will take care of the proper quoting made before
    executing the query.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的准备好的语句将负责在执行查询之前进行适当的引用。
- en: And just to finish the introduction of the prepared statements here, probably
    the best feature about them is that PDO emulates them for every supported database.
    This means you can use prepared statements with any databases; even if they don’t
    know what they are.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的一点是，PDO为每个支持的数据库模拟了准备好的语句。这意味着您可以在任何数据库中使用准备好的语句；即使它们不知道这是什么。
- en: Appropriate Understanding of PDO
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对PDO的适当理解
- en: 'Our introduction would not be complete if we didn''t mention that. PDO is a
    database connection abstraction library, and as such, cannot ensure that your
    code will work for each and every database that it supports. This will only happen
    if your SQL code is portable. For example, MySQL extends the SQL syntax with this
    form of insert:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不提到这一点，我们的介绍就不完整了。PDO是一个数据库连接抽象库，因此不能保证您的代码对其支持的每个数据库都有效。只有当您的SQL代码是可移植的时，才会发生这种情况。例如，MySQL使用以下形式的插入扩展了SQL语法：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This kind of SQL code is not portable, as other databases do not understand
    this way of doing inserts. To ensure that your inserts work across databases,
    you should replace the above code with :'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这种SQL代码是不可移植的，因为其他数据库不理解这种插入方式。为了确保您的插入在各个数据库中都能正常工作，您应该用以下代码替换上面的代码：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This is just one example of incompatibilities that may arise when you use PDO.
    It is only by making your database schema and SQL portable that can ensure you
    that your code will be compatible with other databases. However, ensuring this
    portability is beyond this text.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是使用PDO时可能出现的不兼容性的一个例子。只有通过使数据库架构和SQL可移植，才能确保您的代码与其他数据库兼容。然而，确保这种可移植性超出了本文的范围。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This introductory chapter showed you the basics of using PDO when developing
    dynamic, database-driven applications with the PHP5 language. Also we looked at
    how PDO can be effectively used to eliminate the differences between different
    traditional database access APIs and to produce a clearer and more portable code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个介绍性的章节向您展示了在使用PHP5语言开发动态、数据库驱动应用程序时使用PDO的基础知识。我们还看到了PDO如何有效地消除了不同传统数据库访问API之间的差异，并产生了更清晰、更可移植的代码。
- en: In the subsequent chapters, we will be looking at each of the features discussed
    in this chapter in a greater detail so that you fully master the PHP Data Objects
    extension.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将更详细地讨论本章讨论的每个功能，以便您完全掌握PHP数据对象扩展。
