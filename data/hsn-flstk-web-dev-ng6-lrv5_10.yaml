- en: Frontend Views with Bootstrap 4 and NgBootstrap
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bootstrap 4和NgBootstrap的前端视图
- en: In this chapter, we will look at how to include a Bootstrap framework inside
    a running Angular application using the new `add` feature from the Angular CLI.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何使用Angular CLI的新`add`功能在运行的Angular应用程序中包含Bootstrap框架。
- en: The Bootstrap framework is one of the most important UI frameworks, and, with
    Angular directives/components, we can have all the power of Bootstrap inside our
    Angular application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap框架是最重要的UI框架之一，结合Angular指令/组件，我们可以在Angular应用程序中拥有Bootstrap的全部功能。
- en: We will also look at how to connect our Angular services with components and
    how to using the backend API to put it all together. Finally, we will learn how
    to configure **Cross-Origin Resource Sharing** (**CORS**) on our backend API and
    how to use it with our Angular client-side application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看看如何将我们的Angular服务与组件连接起来，以及如何使用后端API将它们整合在一起。最后，我们将学习如何在后端API上配置**跨源资源共享**（**CORS**）以及如何在我们的Angular客户端应用程序中使用它。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing the Bootstrap CSS framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Bootstrap CSS框架
- en: Writing Angular templates with Bootstrap
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bootstrap编写Angular模板
- en: How to set up CORS on the Laravel backend
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Laravel后端设置CORS
- en: Connecting Angular services with application components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Angular服务与应用程序组件连接起来
- en: Dealing with Angular pipes, forms, and validation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理Angular管道、表单和验证
- en: Preparing the baseline code
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备基线代码
- en: 'Now, we need to prepare our baseline code, which is a process that''s very
    similar to what we performed in the previous chapter. Let''s follow these steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要准备我们的基线代码，这个过程与我们在上一章中执行的非常相似。让我们按照以下步骤进行：
- en: Copy all the content from the `chapter-9` folder.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`chapter-9`文件夹中的所有内容。
- en: Rename the folder `chapter-10`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名`chapter-10`文件夹。
- en: Delete the `storage-db` folder.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`storage-db`文件夹。
- en: 'Now, let''s make some changes to the `docker-compose.yml` file so that we can
    fit in a new database and server containers. Open `docker-compose.yml` and replace
    its content with the following code:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们对`docker-compose.yml`文件进行一些更改，以便我们可以适应新的数据库和服务器容器。打开`docker-compose.yml`并用以下代码替换其内容：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that we changed the container names, database, and MySQL user:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们更改了容器名称、数据库和MySQL用户：
- en: '`container_name: chapter-10-mysql`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-10-mysql`'
- en: '`container_name: chapter-10-webserver`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-10-webserver`'
- en: '``container_name: chapter-10-php-fpm``'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '``container_name: chapter-10-php-fpm``'
- en: '`MYSQL_DATABASE=chapter-10`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_DATABASE=chapter-10`'
- en: '`MYSQL_USER=chapter-10`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_USER=chapter-10`'
- en: 'Update the `.env` file with the connection string:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用连接字符串更新`.env`文件：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the changes we made to Git source control. Open your Terminal window and
    type the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们所做的更改添加到Git源代码控制中。打开您的终端窗口，输入以下命令：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s start our Docker containers with the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令启动我们的Docker容器：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installing the Bootstrap CSS framework
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Bootstrap CSS框架
- en: 'In this section, we will once again use the newest feature that''s available
    in Angular CLI 6: the `add` command. Using this, we will add Bootstrap 4 to our
    application:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将再次使用Angular CLI 6中可用的最新功能：`add`命令。使用这个命令，我们将向我们的应用程序添加Bootstrap 4：
- en: 'Inside the `Client` folder of `chapter-10`, open your Terminal window and type
    the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-10`的`Client`文件夹中，打开您的终端窗口并输入以下命令：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous command will create and update the following files:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一个命令将创建并更新以下文件：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `package.json` file, we will add the following dependencies:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`文件中，我们将添加以下依赖项：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `src/app/app.module.ts` file, we will add the following lines:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/app/app.module.ts`文件中，我们将添加以下行：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `angular.json` file, we will add the following lines:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`angular.json`文件中，我们将添加以下行：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we can see all the power of the Angular CLI in action, because all of
    these changes were performed automatically.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到Angular CLI的全部功能，因为所有这些更改都是自动完成的。
- en: However, we can see that the `bootstrap.css` file is used in a way that leaves
    the application frozen, making it difficult to customize the application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们可以看到`bootstrap.css`文件的使用方式使应用程序冻结，使其难以定制。
- en: In the next section, we will look at a different way of using Bootstrap for
    more flexibility.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一种更灵活使用Bootstrap的方法。
- en: Removing the Bootstrap CSS import
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移除Bootstrap CSS导入
- en: First, we are going to remove the CSS compiled from Bootstrap that was injected
    into our `angular.json` file with the installation command of `NgBootstrap`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将删除通过`NgBootstrap`安装命令注入到我们的`angular.json`文件中的从Bootstrap编译的CSS。
- en: 'Open the `angular.json` file and remove the `input` tag. Only keep the `styles`
    tag, as shown in the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`angular.json`文件并删除`input`标签。只保留`styles`标签，如下所示：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding Bootstrap SCSS imports
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Bootstrap SCSS导入
- en: 'Now, we will use the files installed in the `node_modules` folder as imports
    from our main style sheet, which is stored in `./Client/src/style.scss`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用`node_modules`文件夹中安装的文件作为我们主样式表`./Client/src/style.scss`的导入：
- en: 'Open `./Client/src/style.scss` and add the following code at the top of the
    file:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/style.scss`并在文件顶部添加以下代码：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that we keep the Bootstrap comments at the top of the file just to have
    the Bootstrap version documented in an easy-to-find place.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们保留了文件顶部的Bootstrap注释，只是为了在易于找到的地方记录Bootstrap版本。
- en: If you want, you can copy the content of the `node_modules/bootstrap/scss/bootstrap.scss`
    file and just adjust the import paths to `../node_modules/bootstrap/scss`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以复制`node_modules/bootstrap/scss/bootstrap.scss`文件的内容，并只需调整导入路径为`../node_modules/bootstrap/scss`。
- en: Now, our application is compiling the SCSS code directly from the `bootstrap/scss`
    folder.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的应用程序直接从`bootstrap/scss`文件夹编译SCSS代码。
- en: 'Here are some advantages of doing this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的一些优势包括：
- en: We can choose which SCSS modules we will import, depending on what components
    our application uses.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以根据应用程序使用的组件选择要导入的SCSS模块。
- en: We reduce SCSS code that will not be used.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们减少将不会使用的SCSS代码。
- en: We can easily overwrite the Bootstrap variables.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以轻松地覆盖Bootstrap变量。
- en: Overriding Bootstrap variables
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖Bootstrap变量
- en: 'In this step, we will see how we can overwrite the `Boostrap` variables in
    our application:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将看到如何在我们的应用程序中覆盖`Boostrap`变量：
- en: Create a new folder called `scss` at the root of the `Client` folder.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Client`文件夹的根目录下创建一个名为`scss`的新文件夹。
- en: Inside the `./Client/scss` folder, add a new folder called `bootstrap`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/scss`文件夹中，添加一个名为`bootstrap`的新文件夹。
- en: Inside `./Client/scss/bootstrap`, add a new file called `_variable.scss`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/scss/bootstrap`中，添加一个名为`_variable.scss`的新文件。
- en: Copy the content from `node_modules/bootstrap/scss/_variables.scss` and paste
    it into `./Client/scss/bootstrap/_variables.scss`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`node_modules/bootstrap/scss/_variables.scss`中复制内容，并粘贴到`./Client/scss/bootstrap/_variables.scss`中。
- en: Pretty simple; congratulations! We are ready to override Bootstrap variables.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单；恭喜！我们已经准备好覆盖Bootstrap变量。
- en: The last step is to import the new `_variables.scss` file into our main `style.scss`
    file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将新的`_variables.scss`文件导入到我们的主要`style.scss`文件中。
- en: 'Open the `./Client/style.scss` file and replace the line `@import "../node_modules/bootstrap/scss/_variables.scss"` with
    the following:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/style.scss`文件，并用以下内容替换行`@import "../node_modules/bootstrap/scss/_variables.scss"`：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We also have the option of placing this variable file, using only the variables
    that we will overwrite, without using the key word `Default`. In this way, the
    file gets much shorter, since we will not be able to overwrite all the variables
    in a small project like this. Let's see how we can do that.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个选项，即只使用我们将要覆盖的变量，而不使用关键字`Default`放置这个变量文件。这样，文件会变得更短，因为我们不会覆盖这样一个小项目中的所有变量。让我们看看我们如何做到这一点。
- en: 'Let''s imagine that we just want to overwrite the `border-radius` of all components
    and also remove the `box-shadow`. We can only use these variables, so our `_variables.scss`
    file will have the following appearance:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们只想覆盖所有组件的`border-radius`并删除`box-shadow`。我们只能使用这些变量，因此我们的`_variables.scss`文件将如下所示：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For these changes to take effect, we need to make a small adjustment to `./Client/style.scss`
    and add the new variable file before the Bootstrap  `variables` file, as shown
    in the following code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这些更改生效，我们需要对`./Client/style.scss`进行一些小调整，并在Bootstrap`variables`文件之前添加新的变量文件，如下所示：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Writing Angular templates with Bootstrap
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Bootstrap编写Angular模板
- en: At this moment in time, our application can already be visualized with the use
    of Bootstrap CSS, which is what we did in the last section. Recall that, in the
    previous chapters, we already added the HTML markup to some of our templates.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此刻，我们的应用程序已经可以使用Bootstrap CSS进行可视化，这是我们在上一节中所做的。回想一下，在之前的章节中，我们已经向一些模板中添加了HTML标记。
- en: 'All of them already contain the Bootstrap classes, and we can already visualize
    what we have so far in a browser window. Let''s check this out:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都已经包含了Bootstrap类，我们已经可以在浏览器窗口中可视化到目前为止的内容。让我们来看看：
- en: 'Open your Terminal window inside the `./Client` folder and type the following
    command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client`文件夹中打开您的终端窗口，并键入以下命令：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Open your default browser and go to `http://localhost:4200/`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的默认浏览器，转到`http://localhost:4200/`。
- en: 'You will see the following result:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下结果：
- en: '![](assets/1bbae730-312d-4937-8aae-5934f803713c.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1bbae730-312d-4937-8aae-5934f803713c.png)'
- en: Wow! Now, we have a web application. You will notice that we already have an
    application that works perfectly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！现在，我们有了一个Web应用。您会注意到我们已经有一个完美运行的应用程序。
- en: 'Let''s click on the `bikes` link and see what we have so far:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击`bikes`链接，看看我们到目前为止有什么：
- en: Feel free to browse the rest of the application and check the other pages.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 随意浏览应用程序的其余部分并检查其他页面。
- en: However, all we have at this stage is placeholders, so this is the time to learn
    how to apply the Angular template syntax in our templates.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们目前只有占位符，所以现在是学习如何在我们的模板中应用Angular模板语法的时候了。
- en: Adding template bindings to the navigation component
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向导航组件添加模板绑定
- en: 'Now, let''s make some changes in our templates so that we can use the Angular
    syntax:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在模板中做一些更改，以便我们可以使用Angular语法：
- en: 'Open `./Client/src/app/layout/nav/nav.component.html` and replace its content
    with the following code:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/layout/nav/nav.component.html`，并用以下代码替换其内容：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that, in the previous code, we are using the `ngbDropdown` component and
    also using `auth.isAuthenticated()` to determine if the user is logged in or not.
    Also note that we included the logout link inside the dropdown.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的代码中，我们使用了`ngbDropdown`组件，并且还使用`auth.isAuthenticated()`来确定用户是否已登录。还要注意，我们在下拉菜单中包含了注销链接。
- en: Now, let's adjust the templates for login and registration.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们调整登录和注册的模板。
- en: Adding template bindings to the login page
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向登录页面添加模板绑定
- en: 'In [Chapter 7](95b439ca-ab08-401c-8e99-0ca9054244d4.xhtml)*,* *Progressive
    Web Applications with Angular-cli*, we already added the HTML markup for all of
    the app''s views/templates, however, we need to add the Angular bindings and models
    to templates so that everything works correctly:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](95b439ca-ab08-401c-8e99-0ca9054244d4.xhtml)*，* *使用Angular-cli创建渐进式Web应用*中，我们已经为应用的所有视图/模板添加了HTML标记，但是，我们需要向模板添加Angular绑定和模型，以便一切都能正常工作：
- en: Open `./Client/src/app/auth/login/login.component.html`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/auth/login/login.component.html`。
- en: 'Add the following bind function to tag:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下绑定函数添加到标签中：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, we will add the `ngModel` to the email and password input, while we're
    still in `./Client/src/app/auth/login/login.component.html`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在`./Client/src/app/auth/login/login.component.html`中为电子邮件和密码输入添加`ngModel`。
- en: 'Add the following code to the `email` input:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`email`输入中：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following code to the `password` input:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`password`输入中：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding template bindings to the register page
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向注册页面添加模板绑定
- en: 'Now, let''s repeat the same operation on the registration page template:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在注册页面模板上重复相同的操作：
- en: Open `./Client/src/app/auth/register/register.component.html`.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/auth/register/register.component.html`。
- en: 'Add the following bind function to tag:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下绑定函数添加到标签中：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note the use of `formGroup` attribute. It is part of the Angular reactive forms,
    but don't worry about this now; later in the book, we will discuss template-driven
    forms and reactive forms.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`formGroup`属性的使用。它是Angular响应式表单的一部分，但现在不用担心这个；在本书的后面，我们将讨论模板驱动表单和响应式表单。
- en: Now, we will add `formControlName` to the `name`, `email`, and `password` inputs,
    while still in `./Client/src/app/auth/register/register.component.html`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`./Client/src/app/auth/register/register.component.html`中，我们将为`name`、`email`和`password`输入添加`formControlName`。
- en: 'Add the following code to the `name` input:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`name`输入：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following code to the `email` input:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`email`输入：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following code to the `password` input:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`password`输入：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Adding template bindings to the bike-detail page
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向bike-detail页面添加模板绑定
- en: 'Now, let''s make some adjustments to the `bike-detail` page template:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`bike-detail`页面模板进行一些调整：
- en: Open `./Client/src/app/bikes/bike-detail/bike-detail.component.html`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/bikes/bike-detail/bike-detail.component.html`。
- en: 'Replace its content with the following code:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换其内容：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that we are using the `*ngIf` directive to hide our bike until the bike
    object is available. We are also using the click bind function `(click)="onVote('1')"`
    to vote on the bike, and we're using `*ngFor="let item of bike?.items"` to list
    the bike items.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用`*ngIf`指令来隐藏我们的自行车，直到自行车对象可用为止。我们还使用点击绑定函数`(click)="onVote('1')"`对自行车进行投票，我们使用`*ngFor="let
    item of bike?.items"`来列出自行车项目。
- en: 'We are also using the `ngb-tab`, `ngb-tabset` directive from `NgBootstrap`to
    create two views on this page: one to show the bike''s details, and another to
    show the edit form so that we can edit the bike''s details. Note that we are using
    a function called `checkBikeOwner()` to make a simple check to see if the user
    that''s logged in is the bike''s owner. Otherwise, we hide that tab.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用了来自`NgBootstrap`的`ngb-tab`、`ngb-tabset`指令在此页面上创建两个视图：一个用于显示自行车的详细信息，另一个用于显示编辑表单，以便我们可以编辑自行车的详细信息。请注意，我们使用了一个名为`checkBikeOwner()`的函数来进行简单的检查，以查看登录的用户是否是自行车的所有者。否则，我们会隐藏该选项卡。
- en: The `(?)` symbol is called the safe navigation operator.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`(?)`符号被称为安全导航运算符。'
- en: 'The expected result is what we have in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 预期结果是我们在下面的截图中看到的：
- en: '![](assets/c38958b9-0c49-4084-881e-9209111afbe3.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c38958b9-0c49-4084-881e-9209111afbe3.png)'
- en: Don't worry about the form for now, as we will look at it in detail at the end
    of this chapter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不用担心表单，因为我们将在本章末尾详细讨论它。
- en: Adding template bindings to the bike-list page
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向bike-list页面添加模板绑定
- en: 'Well, now it is time to create the `bike-list` template bindings:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在是时候创建`bike-list`模板绑定了：
- en: Open `./Client/src/app/bikes/bike-list/bike-list.component.html`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/bikes/bike-list/bike-list.component.html`。
- en: 'Replace its content with the following code:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换其内容：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that we are using the `ngbDropdown`, `ngbDropdownToggle`, and `ngbDropdownMenu`
    components, and that we are also using `*ngFor="let bike of bikes"` to list all
    bikes from the `bikes Array` and `*ngIf` to show and hide a loading message.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用`ngbDropdown`、`ngbDropdownToggle`和`ngbDropdownMenu`组件，并且我们还使用`*ngFor="let
    bike of bikes"`来列出`bikes数组`中的所有自行车，并使用`*ngIf`来显示和隐藏加载消息。
- en: Now, we can see the power of Angular. With a few changes, our static templates
    are ready to come to life and interact with our backend. But we still need to
    write the logic of the components to put everything together.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到Angular的强大之处。通过一些更改，我们的静态模板已经准备好与后端进行交互。但我们仍然需要编写组件的逻辑来将所有内容整合在一起。
- en: Before we do that, let's adjust the builder templates.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这样做之前，让我们调整构建者模板。
- en: Adding template bindings to the builder-detail page
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向builder-detail页面添加模板绑定
- en: 'Let''s add the `builder-detail` pages:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加`builder-detail`页面：
- en: Open `./Client/src/app/builders/builder-detail/builder-detail.component.html`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/builders/builder-detail/builder-detail.component.html`。
- en: 'Replace its content with the following code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换其内容：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the builders templates, we are using the same technique that we used in the
    previous templates.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建者模板中，我们使用了与之前模板相同的技术。
- en: Adding template bindings to the builder-list page
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向builder-list页面添加模板绑定
- en: 'Now, it is time to add the `builder-list` template:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候添加`builder-list`模板了：
- en: Open `./Client/src/app/builders/builder-list/builder-list.component.html`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/builders/builder-list/builder-list.component.html`。
- en: 'Replace its content with the following code:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下代码替换其内容：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, we have enough code for our templates to render the contents of our backend.
    For this, we just need to make some minor adjustments to the backend and write
    the logic in our components.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有足够的代码让我们的模板呈现后端的内容。为此，我们只需要对后端进行一些微小的调整，并在组件中编写逻辑。
- en: Setting up CORS on a Laravel backend
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Laravel后端设置CORS
- en: Before proceeding with the necessary changes in our backend, let's talk about
    a very important and also very common subject in today's modern web applications,
    known as CORS.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的后端进行必要的更改之前，让我们谈谈今天现代Web应用中非常重要且非常常见的一个主题，即CORS。
- en: When we use `XMLHttpRequest` or the `Fetch API` to get data from a given server,
    this call is usually performed from another application, and from somewhere else.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`XMLHttpRequest`或`Fetch API`从给定服务器获取数据时，这个调用通常是从另一个应用程序和其他地方执行的。
- en: For security reasons, browsers restrict cross-origin HTTP requests.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全原因，浏览器限制跨源HTTP请求。
- en: 'A simple example to understand how CORS works is this: imagine that a frontend
    application running in a particular domain, for example, `http://mysimpledomain.com`,
    sends a request to another application in another domain called `http://myanothersimpledomain.com`.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 理解CORS工作原理的一个简单例子是：想象一个在特定域中运行的前端应用，例如`http://mysimpledomain.com`，向另一个域中的另一个应用`http://myanothersimpledomain.com`发送请求。
- en: CORS is a mechanism that uses additional HTTP headers to tell a browser to let
    a web application run at one origin, `http://mysimpledomain.com`, and have permissions
    to access selected resources from a server at a different origin, `http://myanothersimpledomain`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: CORS是一种机制，它使用额外的HTTP头来告诉浏览器允许一个Web应用程序在一个起源`http://mysimpledomain.com`上运行，并且有权限从不同起源的服务器`http://myanothersimpledomain`访问选定的资源。
- en: You can read more about CORS at [https://www.w3.org/TR/cors/](https://www.w3.org/TR/cors/).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.w3.org/TR/cors/](https://www.w3.org/TR/cors/)上阅读有关CORS的更多信息。
- en: Setting up Laravel CORS
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Laravel CORS
- en: 'Laravel has excellent support for using CORS in its applications. Let''s see
    how we can configure it using a library called `barryvdh/laravel-cors`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel在其应用程序中使用CORS具有出色的支持。让我们看看如何使用一个名为`barryvdh/laravel-cors`的库来配置它：
- en: Open your Terminal window inside the `chapter-10` folder.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-10`文件夹中打开您的终端窗口。
- en: 'Type the following command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, inside the `php-fpm` container, type the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`php-fpm`容器中，输入以下命令：
- en: '[PRE28]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This step is very important. If you forget this command, it is very likely that
    you will find an error, or you may be at risk of using your local composer version
    to execute the following command.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步非常重要。如果您忘记了这个命令，很可能会出现错误，或者您可能会冒着使用本地composer版本来执行以下命令的风险。
- en: 'Inside the container''s bash, type the following command:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在容器的bash中，输入以下命令：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Thanks to the newest version of Laravel (5.6), our new library is already ready
    for use. Let's just make one more little change.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 由于最新版本的Laravel（5.6），我们的新库已经准备好使用。让我们只做一个小小的改变。
- en: 'Open the `./Server/app/Http/Kernel.php` file and add the following code to
    the `middlewareGroup` API:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Server/app/Http/Kernel.php`文件并将以下代码添加到`middlewareGroup` API中：
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'It is very important to note that we added `\Barryvdh\Cors\HandleCors :: class` to
    the first line of dependencies in the API tag. This is very important because
    we avoid getting errors with status code 0 on our frontend application.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '非常重要的一点是，我们在API标签的依赖项的第一行中添加了`\Barryvdh\Cors\HandleCors :: class`。这非常重要，因为我们避免在前端应用程序上获得状态码0的错误。'
- en: We are ready to go!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了！
- en: Connecting Angular services with application components
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Angular服务与应用程序组件连接起来
- en: Now, we will connect all of the Angular services and templates that we have
    created during this book. For this, we will create the logic and the functions
    that we will use inside our components.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将连接我们在本书中创建的所有Angular服务和模板。为此，我们将创建我们将在组件中使用的逻辑和函数。
- en: Before we begin, let's set the endpoint of our API as a variable in the Angular
    environment file.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，让我们将API的端点设置为Angular环境文件中的一个变量。
- en: Adding environment configuration
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加环境配置
- en: As the name says, this file is used to set up environment variables in our application.
    The best part about it is that Angular comes with a dev and prod environment that's
    configured by default and is very simple to use. We can also set a variety of
    variables.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，此文件用于在我们的应用程序中设置环境变量。最好的部分是，Angular默认配置了一个dev和prod环境，并且非常简单易用。我们还可以设置各种变量。
- en: In this example, we are setting the backend URL using the development file.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们正在使用开发文件来设置后端URL。
- en: 'Open the `./Client/src/environments/environment.ts` file and add the following
    URL:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/environments/environment.ts`文件并添加以下URL：
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, we have another file called `environment.prod.ts` inside the
    `environments` folder.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`environments`文件夹中还有一个名为`environment.prod.ts`的文件。
- en: Do not worry about this file for now, as we will only use it later in the book.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不要担心这个文件，因为我们将在书中稍后使用它。
- en: Creating the navigation methods
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建导航方法
- en: 'Now, it is time to create the navigation behavior inside `nav.component.ts`,
    so let''s see how we can do that:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在`nav.component.ts`中创建导航行为了，让我们看看我们可以如何做到这一点：
- en: 'Open `./Client/src/layout/nav/nav.component.ts` and add the following imports,
    right after the core import:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/layout/nav/nav.component.ts`并在核心导入之后添加以下导入：
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Still on `./Client/src/layout/nav/nav.component.ts`, let''s create the `constructor()`
    function:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`./Client/src/layout/nav/nav.component.ts`中，让我们创建`constructor()`函数：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here, we are using the built-in Angular service called `Title` to update the
    title tag of the page when navigating between the templates. Remember that our
    application is a SPA and we do not want to keep the same title in all pages.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用内置的Angular服务`Title`来在导航模板之间更新页面的标题标签。请记住，我们的应用程序是一个SPA，我们不希望在所有页面上保持相同的标题。
- en: In addition, we will use the authentication service to show the name of the
    user that is logged in to the application, and we will also use the logout function
    of this service to log the user out. So, let's create this function.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用身份验证服务来显示已登录到应用程序的用户的名称，并且我们还将使用此服务的注销功能来注销用户。因此，让我们创建这个函数。
- en: 'Add the following code right after the deconstructor function:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在析构函数之后添加以下代码：
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, inside the `ngOnInit()` function, add the following code:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`ngOnInit()`函数中，添加以下代码：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The last step is to add the `logout()` function, right after the `ngOnInit()` function.
    Add the following code:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是在`ngOnInit()`函数之后添加`logout()`函数。添加以下代码：
- en: '[PRE36]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, we have our application''s navigation ready to use. The expected result
    is shown in the following screenshot:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的应用程序导航已经准备好使用。预期结果如下截图所示：
- en: '![](assets/8b9295c5-18ee-42c2-9f66-9c64e5451a9e.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8b9295c5-18ee-42c2-9f66-9c64e5451a9e.png)'
- en: Navigation view
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 导航视图
- en: Creating the bike-detail methods
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建bike-detail方法
- en: 'Let''s create the `bike-detail` component:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`bike-detail`组件：
- en: 'Open `./Client/src/pages/bikes/bike-detail/bike-detail.component.ts` and add
    the following imports, right after the core import:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/pages/bikes/bike-detail/bike-detail.component.ts`并在核心导入之后添加以下导入：
- en: '[PRE37]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the following properties after the `BikeDetailComponent` class declaration:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BikeDetailComponent`类声明后添加以下属性：
- en: '[PRE38]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note that we are using the `Bike` model as the type of our `bike` property and
    creating a simple array to hold our builders.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用`Bike`模型作为我们的`bike`属性的类型，并创建一个简单的数组来保存我们的构建者。
- en: Note that, in a real-world web application, it is good practice to get a list
    of builders from the server to avoid becoming hard coded inside the component.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在真实的网络应用程序中，最好从服务器获取构建者列表，以避免在组件内部变得硬编码。
- en: 'Still on `./Client/src/pages/bikes/bike-detail/bike-detail.component.ts`, let''s
    create the `constructor()` function:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/src/pages/bikes/bike-detail/bike-detail.component.ts`中，让我们创建`constructor()`函数：
- en: '[PRE39]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We will use `ActivatedRoute` to get the bike ID later in this section.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ActivatedRoute`来在本节后面获取自行车ID。
- en: 'Inside the `ngOnInit()` function, add the following code:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit()`函数中，添加以下代码：
- en: '[PRE40]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, let's create the `getBikeDetail()` function.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`getBikeDetail()`函数。
- en: 'Add the following code right after the `ngOnInit()` function:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit()`函数之后添加以下代码：
- en: '[PRE41]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, let''s add the `onVote()` function. Add the following code right after
    the `getBikeDetail()` function:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加`onVote()`函数。在`getBikeDetail()`函数之后添加以下代码：
- en: '[PRE42]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, we will create a function that checks if the logged-in user has already
    voted on the chosen bike. Remember that `RatingController.php` is using the `firstOrCreate`
    method:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个函数，检查已登录用户是否已经对所选自行车进行了投票。请记住，`RatingController.php`正在使用`firstOrCreate`方法：
- en: '[PRE43]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We will only register the first vote. Thus, we need to show the user a simple
    message as feedback from the `Vote` function.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只会注册第一次投票。因此，我们需要向用户显示一个简单的消息作为`Vote`函数的反馈。
- en: 'Add the following code right after the `onVote()` function:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`onVote()`函数之后添加以下代码：
- en: '[PRE44]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following method uses a submit function to update the `bike` record. Add
    the following code right after the `checkUserVote()` function:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下方法使用提交函数来更新`bike`记录。在`checkUserVote()`函数之后添加以下代码：
- en: '[PRE45]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note that, in this step, we are using the `updateBike` method from `bikeService`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此步骤中，我们正在使用`bikeService`的`updateBike`方法。
- en: 'The last method is a simple function to check the bike owner. Remember that
    the user can only edit their own bike. Add the following code right after the
    `onSubmit()` function:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个方法是一个简单的函数，用于检查自行车所有者。请记住，用户只能编辑自己的自行车。在`onSubmit()`函数之后添加以下代码：
- en: '[PRE46]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In this code, we are using the `authService` to get the `User.id`, which we
    are comparing with `bike.user.id`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们使用`authService`来获取`User.id`，然后与`bike.user.id`进行比较。
- en: 'The expected result for this page when we access the `http://localhost:4200/bikes/3` URL
    will be similar to the following screenshot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问`http://localhost:4200/bikes/3` URL时，此页面的预期结果将类似于以下屏幕截图：
- en: '![](assets/c22e87ff-c17c-4e1e-98f0-3022a69dec71.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c22e87ff-c17c-4e1e-98f0-3022a69dec71.png)'
- en: Bike detail screen
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 自行车详细信息屏幕
- en: Note that we can see the Edit button on this bike because our application seed
    already filled the database with some sample information.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以在此自行车上看到编辑按钮，因为我们的应用程序种子已经用一些示例信息填充了数据库。
- en: 'So, if we click on the Edit bike button, we will see something similar to the
    following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们点击`编辑自行车`按钮，我们将看到类似于以下的东西：
- en: '![](assets/fc0b5edf-fba8-4ec2-aa1e-08dfa1cd5192.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fc0b5edf-fba8-4ec2-aa1e-08dfa1cd5192.png)'
- en: Edit bike form
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑自行车表单
- en: Creating the bike-list methods
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自行车列表方法
- en: 'Let''s create the `bike-list` component:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`bike-list`组件：
- en: 'Open `./Client/src/pages/bikes/bike-list/bike-list.component.ts` and add the
    following imports, right after the core import:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/pages/bikes/bike-list/bike-list.component.ts`并在核心导入之后添加以下导入：
- en: '[PRE47]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the following properties after the `bike-list.component` class declaration:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bike-list.component`类声明之后添加以下属性：
- en: '[PRE48]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Still on `./Client/src/pages/bikes/bike-list/bike-list.component.ts`**, **let''s
    create the `constructor()` function:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/src/pages/bikes/bike-list/bike-list.component.ts`中，让我们创建`constructor()`函数：
- en: '[PRE49]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Inside the `ngOnInit()` function, add the following code:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit()`函数中，添加以下代码：
- en: '[PRE50]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now, let's create the `this.getBikes()` function.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`this.getBikes()`函数。
- en: 'Add the following code right after the `ngOnInit()` function:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit()`函数之后添加以下代码：
- en: '[PRE51]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note that, in this code, we are using two functions to deal with success and
    error responses. It is possible to write everything inside the `subscribe()` function,
    but a better organization technique is to separate them.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此代码中，我们使用两个函数来处理成功和错误响应。可以将所有内容写在`subscribe()`函数内，但更好的组织技术是将它们分开。
- en: 'Add the following code, right after the `getBikes()` function:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getBikes()`函数之后添加以下代码：
- en: '[PRE52]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Here, on the protected `handleError` methods, we are just using the `console.log()`
    to show errors.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在受保护的`handleError`方法中，我们只是使用`console.log()`来显示错误。
- en: 'The expected result for this page when we access the `http://localhost:4200/bikes` URL
    will be similar to the following screenshot:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问`http://localhost:4200/bikes` URL时，此页面的预期结果将类似于以下屏幕截图：
- en: '![](assets/00dc1a31-cc36-47fc-9898-07c50840d2e5.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/00dc1a31-cc36-47fc-9898-07c50840d2e5.png)'
- en: Bikes list pages
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 自行车列表页面
- en: Creating the builder-detail methods
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建builder-detail方法
- en: 'Now, it is time to create the `builder-detail` component. Let''s see how:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建`builder-detail`组件了。让我们看看：
- en: 'Open `./Client/src/pages/builders/builder-detail/builder-detail.component.ts`
    and add the following imports, right after the core import:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/pages/builders/builder-detail/builder-detail.component.ts`并在核心导入之后添加以下导入：
- en: '[PRE53]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add the following properties after the `builder-detail.component` class declaration:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`builder-detail.component`类声明之后添加以下属性：
- en: '[PRE54]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Still on `./Client/src/pages/builders/builder-detail/builder-detail.component.ts`,
    let''s create the `constructor()` function:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/src/pages/builders/builder-detail/builder-detail.component.ts`中，让我们创建`constructor()`函数：
- en: '[PRE55]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Inside the `ngOnInit()` function, add the following code:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit()`函数中，添加以下代码：
- en: '[PRE56]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now, let's create the `this.getBuilderDetail()` function.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`this.getBuilderDetail()`函数。
- en: 'Add the following code right after the `ngOnInit()` function:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit()`函数之后添加以下代码：
- en: '[PRE57]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The expected result for this page when we access the `http://localhost:4200/builders/4` URL
    will be similar to the following screenshot:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问`http://localhost:4200/builders/4`URL时，此页面的预期结果将类似于以下屏幕截图：
- en: '![](assets/bc81c670-a648-45f3-a5da-292174dcbe32.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc81c670-a648-45f3-a5da-292174dcbe32.png)'
- en: Builders detail page
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 建筑师详细页面
- en: Creating the builder-list methods
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`builder-list`方法
- en: 'Now, let''s create the `builder-list` methods to list all builders:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`builder-list`方法来列出所有建筑师：
- en: 'Open `./Client/src/pages/builders/builder-list/builder-list.component.ts` and
    add the following imports, right after the core import:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/pages/builders/builder-list/builder-list.component.ts`并在核心导入后添加以下导入：
- en: '[PRE58]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Add the following properties after the `BuilderListComponent` class declaration:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BuilderListComponent`类声明后添加以下属性：
- en: '[PRE59]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Still on `./Client/src/pages/builders/builder-list/builder-list.component.ts`,
    let''s create the `constructor()` function:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`./Client/src/pages/builders/builder-list/builder-list.component.ts`中，让我们创建`constructor()`函数：
- en: '[PRE60]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Inside the `ngOnInit()` function, add the following code:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit()`函数内添加以下代码：
- en: '[PRE61]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Add the following code right after the `ngOnInit()` function:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ngOnInit()`函数后面添加以下代码：
- en: '[PRE62]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note that, in this code we are using two functions to deal with success and
    error responses. It is possible to write everything inside the `subscribe()` function,
    but a better organization technique would be to separate them.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此代码中，我们使用两个函数来处理成功和错误响应。可以将所有内容写在`subscribe()`函数内，但更好的组织技术是将它们分开。
- en: 'Add the following code, right after the `getBuilders()` function:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`getBuilders()`函数后面添加以下代码：
- en: '[PRE63]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Finally, we have all the components ready to go.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经准备好所有组件。
- en: 'The expected result for this page when we access the `http://localhost:4200/builders` URL
    will be similar to the following screenshot:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们访问`http://localhost:4200/builders`URL时，此页面的预期结果将类似于以下屏幕截图：
- en: '![](assets/43dcaa69-1ad8-44b6-83b1-96a5a4d47b52.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/43dcaa69-1ad8-44b6-83b1-96a5a4d47b52.png)'
- en: Builders list page
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 建筑师列表页面
- en: Dealing with Angular pipes, forms, and validation
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Angular管道、表单和验证
- en: 'In this section, we will see how to create a simple search component inside
    the bike list page using the new pipe feature. We will also look at how to create
    Angular forms in two ways: with template-driven forms, and with reactive forms.
    Finally, we will show you how to use form validation with Bootstrap CSS.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何在自行车列表页面内创建一个简单的搜索组件，使用新的管道功能。我们还将看看如何以两种方式创建Angular表单：使用模板驱动表单和响应式表单。最后，我们将向您展示如何在Bootstrap
    CSS中使用表单验证。
- en: Creating a pipe filter
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建管道过滤器
- en: Pipes in Angular are a simple way to filter and transform data, very similar
    to the old AngularJS filter.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，管道是一种简单的过滤和转换数据的方式，与旧的AngularJS过滤器非常相似。
- en: We have some default pipes in Angular (`DatePipe`, `UpperCasePipe`, `LowerCasePipe`,
    `CurrencyPipe`, and `PercentPipe`), and we can also create our own pipes.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，我们有一些默认的管道（`DatePipe`、`UpperCasePipe`、`LowerCasePipe`、`CurrencyPipe`和`PercentPipe`），我们也可以创建自己的管道。
- en: 'To create a custom pipe, we can use the Angular CLI to generate the scaffolding
    for us. Let''s see how it works:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义管道，我们可以使用Angular CLI为我们生成脚手架。让我们看看它是如何工作的：
- en: 'Open your Terminal window, and, inside `./Client/src/app`, type the following
    command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，并在`./Client/src/app`内输入以下命令：
- en: '[PRE64]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: As always, Angular CLI takes care of creating the file and the appropriate imports.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，Angular CLI会负责创建文件和适当的导入。
- en: 'Open `./Client/src/app/pages/bikes/_pipes/bike-search.pipe.ts` and add the
    following code inside the `BikeSearchPipe` class:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/_pipes/bike-search.pipe.ts`并在`BikeSearchPipe`类内添加以下代码：
- en: '[PRE65]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The previous `transform` function receive two parameters: the list and the
    search string from the input field on the search box from the bike list page.
    So, let''s see how we can use them inside the `bike-list` template.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的`transform`函数接收两个参数：来自自行车列表页面搜索框的输入字段的列表和搜索字符串。因此，让我们看看如何在`bike-list`模板内使用它们。
- en: 'Open `./Client/src/app/pages/bikes/bike-list/bike-list.component.ts` and add
    the following properties inside the search input field:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/bike-list/bike-list.component.ts`并在搜索输入字段内添加以下属性：
- en: '[PRE66]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Now that we already have the search model, let's add the pipe filter on our
    `*ngFor` loop.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了搜索模型，让我们在`*ngFor`循环上添加管道过滤器。
- en: 'Add the following code inside the `*ngFor` property:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`*ngFor`属性内添加以下代码：
- en: '[PRE67]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'So, when we type the bike model into the search input, we will see the following
    screenshot:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们在搜索输入框中输入自行车型号时，我们将看到以下屏幕截图：
- en: '![](assets/0ab1fae1-2b66-4c09-8f9d-e306e199c530.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0ab1fae1-2b66-4c09-8f9d-e306e199c530.png)'
- en: Search field working
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索字段工作
- en: Now, let's see how we can implement the Angular forms.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何实现Angular表单。
- en: Intoducing Angular forms
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Angular表单
- en: As we all know, forms are an essential part of any modern web application for
    logging in a a user in to the app, adding products, and sending comments to a
    blog. Some forms are very simple, but other forms could have an array of fields,
    and even many steps and pages with tons of input fields.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，表单是任何现代Web应用程序的重要组成部分，用于登录用户到应用程序，添加产品，并向博客发送评论。有些表单非常简单，但其他表单可能有一系列字段，甚至有许多步骤和页面，带有大量输入字段。
- en: 'With Angular, we can implement two types of forms:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在Angular中，我们可以实现两种类型的表单：
- en: Template-driven forms
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板驱动表单
- en: Reactive forms or model-driven forms
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式表单或模型驱动表单
- en: Both are equally powerful and belong to the `@angular/forms` library. They are
    based on the same form control classes. However, they have different philosophies,
    programming styles, and techniques, and the validation is different too. In the
    next section, we will see the uniqueness of each technique.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 两者同样强大，并属于`@angular/forms`库。它们基于相同的表单控件类。然而，它们有不同的哲学、编程风格和技术，验证也不同。在下一节中，我们将看到每种技术的独特之处。
- en: Understanding Angular template-driven forms
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Angular模板驱动表单
- en: Template-driven forms, as we explained previously, are very similar to AngularJS
    forms and make use of directives such as `ngModel` and perhaps `required`, `minlength`,
    `maxlength`, and many others. When we are using these form directives, we are
    letting the template do the work behind the scenes.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前解释的，模板驱动表单非常类似于AngularJS表单，并使用诸如`ngModel`和可能`required`、`minlength`、`maxlength`等指令。当我们使用这些表单指令时，我们让模板在幕后完成工作。
- en: Reviewing the login form template and component
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查登录表单模板和组件
- en: 'A very good example to understand template-driven forms is the login form.
    Let''s see `login.component.html` and `login.component.ts`:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子来理解模板驱动表单是登录表单。让我们看一下`login.component.html`和`login.component.ts`：
- en: 'Open `./Client/src/app/pages/auth/login/login.component.html` and review the
    template input tags:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/login/login.component.html`并审查模板输入标签：
- en: '[PRE68]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Note that we are using the two-way data binding syntax for `ngModel = [(ngModel)]`.
    This means that we can set the initial data from the login component class, but
    we can also update it.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用`ngModel = [(ngModel)]`的双向数据绑定语法。这意味着我们可以从登录组件类设置初始数据，但也可以更新它。
- en: 'Remember, Angular''s `ngModel` can be used in three different ways:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Angular的`ngModel`可以以三种不同的方式使用：
- en: '`ngModel`: No binding or value is assigned, and depends on the name attribute'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ngModel`：没有绑定或赋值，并且依赖于name属性'
- en: '`[ngModel]`: One-way data binding syntax'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[ngModel]`：单向数据绑定语法'
- en: '`[(ngModel)]`: Two-way data binding syntax'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[(ngModel)]`：双向数据绑定语法'
- en: 'For the submit button event, we are just using the `(ngSubmit)="onSubmit(loginForm)"
    #loginForm="ngForm"` directive, passing in the `loginForm`.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '对于提交按钮事件，我们只是使用了`(ngSubmit)="onSubmit(loginForm)" #loginForm="ngForm"`指令，传递`loginForm`。'
- en: Now that our `login.component.ts` is intact, the only thing we need is the `onSubmit`
    function.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的`login.component.ts`完整了，我们唯一需要的是`onSubmit`函数。
- en: 'Now, let''s edit the `login.component.ts` by replacing its code with the following:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过用以下代码替换`login.component.ts`来编辑它：
- en: '[PRE69]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Note that we are passing `loginForm` to the `onSubmit(loginForm)` function and
    using the `authService` to send the data to the endpoint.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将`loginForm`传递给`onSubmit(loginForm)`函数，并使用`authService`将数据发送到端点。
- en: Understanding Angular reactive/model-driven forms
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Angular响应式/模型驱动表单
- en: One of the differences between reactive/model-driven forms and template-driven
    forms is the use of directives such as `ngModel`.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式/模型驱动表单和模板驱动表单之间的一个区别是使用诸如`ngModel`之类的指令。
- en: The principle behind this is that we transfer the directives responsibly to
    the `component.ts` code using the forms API. This has much more power and is extremely
    productive for work, keeping all the logic in the same place, as we will see shortly.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这背后的原则是，我们使用表单API将指令负责地传递到`component.ts`代码中。这具有更大的能力，对于工作来说非常高效，将所有逻辑保留在同一个地方，我们很快就会看到。
- en: Reviewing the register form template and component
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查注册表单模板和组件
- en: 'A very good example to understand model-driven forms is the registerform. Let''s
    look at `register.component.html` and `register.component.ts`:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子来理解模型驱动表单是注册表单。让我们看一下`register.component.html`和`register.component.ts`：
- en: 'Open `./Client/src/app/pages/auth/register/register.component.html` and review
    the template input tags:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/register/register.component.html`并审查模板输入标签：
- en: '[PRE70]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: It is almost the same notation we used on template-driven forms, but a little
    more clean. Here, we don't need the `name` attribute.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎是我们在模板驱动表单中使用的相同符号，但更清晰一些。在这里，我们不需要`name`属性。
- en: For the submit button event, we are just using the `[formGroup]="registerForm"
    (ngSubmit)="onSubmit()"` attribute and the bind function.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 对于提交按钮事件，我们只是使用了`[formGroup]="registerForm" (ngSubmit)="onSubmit()"`属性和绑定函数。
- en: 'Now, let''s create the `register.component.ts`. Replace its code with the following:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建`register.component.ts`。用以下代码替换它的代码：
- en: '[PRE71]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Note that, in this code, we are dealing with error messages on the submit function.
    In the following examples, we will look at how to implement form validation on
    both forms, but for now, let's review some important points.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这段代码中，我们正在处理提交函数上的错误消息。在接下来的示例中，我们将看看如何在两种表单上实现表单验证，但现在让我们回顾一些重要的要点。
- en: Open `./Client/src/app/pages/auth/register/register.component.ts`; let's review
    the `registerComponent` class.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/register/register.component.ts`；让我们回顾`registerComponent`类。
- en: 'The first difference we can note is the imports of the `FormBuilder`, `FormGroup`,
    and `Validators` at the top of file:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到的第一个区别是文件顶部的`FormBuilder`、`FormGroup`和`Validators`的导入：
- en: '[PRE72]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'We also need to import the `ReactiveFormsModule` inside `auth.module.ts`:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`auth.module.ts`内导入`ReactiveFormsModule`：
- en: '[PRE73]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'We can create the form using the `FormBuilder` API inside the `createForm()`
    function:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`FormBuilder` API在`createForm()`函数内创建表单：
- en: '[PRE74]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Here, we are using `Validators` to add form validation directly from the `component.ts`
    code. Brilliant, right?
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`Validators`直接从`component.ts`代码中添加表单验证。很棒，对吧？
- en: 'Remember that the `fb` variables hold the `FormBuilder` that we placed inside
    our constructor: private `fb:FormBuilder`. We also set `registerForm` as `FormGroup`
    inside `RegisterClass.`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`fb`变量保存了我们放在构造函数中的`FormBuilder`：private `fb:FormBuilder`。我们还将`registerForm`设置为`RegisterClass`内的`FormGroup`。
- en: Adding frontend form validation
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加前端表单验证
- en: As we know today, it is a good practice to show constant feedback to the end
    user when we talk about user experience, so it is a good practice to validate
    your forms before sending them to the backend.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们今天所知道的，当谈到用户体验时，向最终用户显示持续的反馈是一个很好的做法，因此在将表单发送到后端之前验证表单是一个很好的做法。
- en: In this section, we will look at how to add form validation to both the login
    and register forms.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看看如何向登录和注册表单添加表单验证。
- en: Dealing with form validation on template-driven forms
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理模板驱动表单上的表单验证
- en: 'Open `./Client/src/app/pages/auth/login/login.component.html` and replace the
    form tag with the following code:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/login/login.component.html`并用以下代码替换表单标记：
- en: '[PRE75]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Let's review the previous code.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下之前的代码。
- en: 'Note that we are using the `[ngClass]` that''s built into the Angular directive
    to apply an error class to the `div` form group if the form is invalid:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用内置在Angular指令中的`[ngClass]`将错误类应用于`div`表单组，如果表单无效：
- en: '[PRE76]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'To show the error message, we will create two new divs right after the input
    fields:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示错误消息，我们将在输入字段后创建两个新的div：
- en: '[PRE77]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: With the help of `ngIf` and the form states (dirty, touched), we can see each
    error if the input field matches this condition.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 借助`ngIf`和表单状态（脏、触摸），我们可以看到每个错误，如果输入字段符合此条件。
- en: 'The next rule is that the following `div` shows backend errors that may occur:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个规则是，以下`div`显示可能发生的后端错误：
- en: '[PRE78]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Finally, validation is set on the Submit button using the `[disabled]` directive:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`[disabled]`指令在提交按钮上设置验证：
- en: '[PRE79]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The final result of our form in action will be something like the following:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们表单的最终结果将类似于以下内容：
- en: '![](assets/df2d3413-38bb-4bba-a188-f946432f8bb4.png)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/df2d3413-38bb-4bba-a188-f946432f8bb4.png)'
- en: Login form validation
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 登录表单验证
- en: Dealing with form validation on model-driven forms
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理基于模型的表单验证
- en: 'Open `./Client/src/app/pages/auth/register/register.component.html` and replace
    the form tag with the following code:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/register/register.component.html`并用以下代码替换表单标签：
- en: '[PRE80]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Let's review the previous code.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下之前的代码。
- en: 'Note that we are using the `[ngClass]` that''s built into Angular to apply
    an `error` class to the `div` form group if the form is invalid:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用内置在Angular中的`[ngClass]`将`error`类应用于`div`表单组，如果表单无效：
- en: '[PRE81]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Here, you can note that we are using the `registerForm.get()` method to make
    the input field a little different from the login form.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以注意到我们正在使用`registerForm.get()`方法，使输入字段与登录表单有所不同。
- en: 'To show the error message, we will create three new `div` right after the input
    fields:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示错误消息，我们将在输入字段后创建三个新的`div`：
- en: '[PRE82]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The next rule is that the following `div` is used to show backend errors that
    may happen:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个规则是，以下`div`用于显示可能发生的后端错误：
- en: '[PRE83]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Finally, the validation is set on the Submit button using the `[disabled]`directive:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`[disabled]`指令在提交按钮上设置验证：
- en: '[PRE84]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The final result of our form in action will look something similar to the following:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们表单的最终结果将类似于以下内容：
- en: '![](assets/2f67b8b7-9c41-4218-a4b7-5991f3bcfd9f.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2f67b8b7-9c41-4218-a4b7-5991f3bcfd9f.png)'
- en: Register form validation
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表单验证
- en: 'In the next screenshot, we can see the backend errors from where we tried to
    insert an email address that''s already in use:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，我们可以看到后端错误，这是我们尝试插入一个已经在使用中的电子邮件地址的地方：
- en: '![](assets/ea9e5c96-3cbc-456e-8a02-48134be9257c.png)Backend error message'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/ea9e5c96-3cbc-456e-8a02-48134be9257c.png)后端错误消息'
- en: Summary
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have finished one more chapter, and our sample application has all the key
    points of a modern web application. We learned how to install, customize, and
    extend a Bootstrap CSS framework, and learned how to use `NgBootstrap` components.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了另一个章节，我们的示例应用程序具有现代Web应用程序的所有关键要点。我们学会了如何安装、定制和扩展Bootstrap CSS框架，并学会了如何使用`NgBootstrap`组件。
- en: We also understood how components and services can be set up together, form
    validation, and many other very useful techniques.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解了如何设置组件和服务，表单验证以及许多其他非常有用的技术。
- en: In the next chapter, we will see how to set up linters for SCSS and TS files
    and how to deploy using Docker images.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何为SCSS和TS文件设置linter，以及如何使用Docker镜像进行部署。
