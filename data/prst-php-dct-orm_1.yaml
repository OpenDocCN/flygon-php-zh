- en: Chapter 1. Getting Started with Doctrine 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。开始使用Doctrine 2
- en: 'The Doctrine project is a collection of libraries providing utilities to ease
    data persistence in PHP applications. It makes it possible to create complex model
    layers in no time that will be compatible with popular DBMS, including SQLite,
    MySQL, and PostgreSQL. To discover and understand Doctrine, we will create a small
    blog from scratch throughout this book that will mainly use the following Doctrine
    components:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine项目是一组库，提供了在PHP应用程序中轻松实现数据持久性的实用程序。它使得可以在很短的时间内创建与流行的DBMS兼容的复杂模型层，包括SQLite、MySQL和PostgreSQL。为了发现和理解Doctrine，我们将在本书中从头开始创建一个小型博客，主要使用以下Doctrine组件：
- en: '**Common** provides utilities that are not in the PHP standard library including
    a class autoloader, an annotations parser, collections structures, and a cache
    system.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Common**提供了PHP标准库中没有的实用程序，包括类自动加载器、注解解析器、集合结构和缓存系统。'
- en: '**Database Abstraction Layer** (**DBAL**) exposes a unique interface to access
    popular DBMS. Its API is similar to PDO (and PDO is used when possible). The DBAL
    component is also able to execute the same SQL query on different DBMS by internally
    rewriting the query to use specific constructs and emulate missing features.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库抽象层**（**DBAL**）公开了一个独特的接口，用于访问流行的DBMS。其API类似于PDO（在可能的情况下使用PDO）。DBAL组件还能够通过内部重写查询来使用特定构造和模拟缺失功能，在不同的DBMS上执行相同的SQL查询。'
- en: '**Object Relational Mapper** (**ORM**) allows accessing and managing relational
    database tables and rows through an object-oriented API. Thanks to it, we will
    directly manipulate PHP objects, and it will transparently generate SQL queries
    to populate, persist, update, and delete them. It is built on top of DBAL and
    will be the main topic of this book.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象关系映射器**（**ORM**）允许通过面向对象的API访问和管理关系数据库表和行。借助它，我们将直接操作PHP对象，并且它将透明地生成SQL查询来填充、持久化、更新和删除它们。它是建立在DBAL之上的，并且将是本书的主要主题。'
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on PHP Data Objects and the data-access abstraction layer
    provided by PHP, refer to the following link: [http://php.net/manual/en/book.pdo.php](http://php.net/manual/en/book.pdo.php)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有关PHP数据对象和PHP提供的数据访问抽象层的更多信息，请参考以下链接：[http://php.net/manual/en/book.pdo.php](http://php.net/manual/en/book.pdo.php)
- en: 'To learn Doctrine, we will build together a tiny blog engine with advanced
    features such as the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习Doctrine，我们将一起构建一个具有以下高级功能的微型博客引擎：
- en: Posts list, creation, editing, and deletion
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帖子列表、创建、编辑和删除
- en: Comments
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评论
- en: Tag filtering
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签过滤
- en: Profiles for author of posts and comments
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帖子和评论作者的配置文件
- en: Statistics
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统计
- en: Data fixtures
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据夹具
- en: 'The following is a screenshot of the blog:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是博客的屏幕截图：
- en: '![Getting Started with Doctrine 2](graphics/4104OS_01_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用Doctrine 2](graphics/4104OS_01_01.jpg)'
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Understanding concepts behind Doctrine
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Doctrine背后的概念
- en: Creating the project's structure
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目的结构
- en: Installing Composer
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Composer
- en: Installing Doctrine ORM, DBAL, and Common through Compose
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Compose安装Doctrine ORM、DBAL和Common
- en: Bootstrapping the app
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引导应用程序
- en: Using Doctrine's Entity Manager
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Doctrine的实体管理器
- en: Configuring Doctrine command-line tools
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Doctrine命令行工具
- en: Prerequisites
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: To follow this tutorial, we need a proper CLI installation of PHP 5.4 or superior.
    We will also use the `curl` command to download the Composer archive and the SQLite
    3 client.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本教程，我们需要正确安装PHP 5.4或更高版本的CLI。我们还将使用`curl`命令来下载Composer存档和SQLite 3客户端。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For further information about PHP CLI, curl, and SQLite, refer to the following
    links: [http://www.php.net/manual/en/features.commandline.php, http://curl.haxx.se](http://www.php.net/manual/en/features.commandline.php,
    http://curl.haxx.se), and [http://www.sqlite.org](http://www.sqlite.org)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关PHP CLI、curl和SQLite的更多信息，请参考以下链接：[http://www.php.net/manual/en/features.commandline.php,
    http://curl.haxx.se](http://www.php.net/manual/en/features.commandline.php, http://curl.haxx.se)和[http://www.sqlite.org](http://www.sqlite.org)
- en: In the examples, we will use the PHP built-in web server and SQLite as DBMS.
    Doctrine is a pure PHP library. It is compatible with any web server supporting
    PHP, but is not limited to Apache and Nginx. Of course, it can also be used in
    applications that are not intended to run on web servers, such as command-line
    tools. On the database side, SQLite, MySQL, PostgreSQL, Oracle, and Microsoft
    SQL Server are officially supported.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们将使用PHP内置的Web服务器和SQLite作为DBMS。Doctrine是一个纯PHP库。它与支持PHP的任何Web服务器兼容，但不限于Apache和Nginx。当然，它也可以用于不打算在Web服务器上运行的应用程序，例如命令行工具。在数据库方面，官方支持SQLite、MySQL、PostgreSQL、Oracle和Microsoft
    SQL Server。
- en: Thanks to the DBAL component, our blog should work fine with all these DBMS.
    It has been tested with SQLite and MySQL.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于DBAL组件，我们的博客应该可以在所有这些DBMS上正常工作。它已经在SQLite和MySQL上进行了测试。
- en: The Doctrine project also provides **Object Document Mappers** (**ODM**) for
    NoSQL databases including MongoDB, CouchDB, PHPCR, and OrientDB. These topics
    are not covered in this book.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine项目还为NoSQL数据库（包括MongoDB、CouchDB、PHPCR和OrientDB）提供了**对象文档映射器**（**ODM**）。这些主题不在本书中涵盖。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Do not hesitate to consult the Doctrine documentation specified in the following
    link while reading this book: [http://www.doctrine-project.org](http://www.doctrine-project.org)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本书时，请随时查阅以下链接中指定的Doctrine文档：[http://www.doctrine-project.org](http://www.doctrine-project.org)
- en: Understanding the concepts behind Doctrine
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Doctrine背后的概念
- en: Doctrine ORM implements **Data Mapper** and **Unit of Work** design patterns.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine ORM实现了**数据映射器**和**工作单元**设计模式。
- en: 'The Data Mapper is a layer designed to synchronize data stored in database
    with their related objects of the domain layer. In other words, it does the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 数据映射器是一个设计用来同步数据库中存储的数据与其领域层相关对象的层。换句话说，它执行以下操作：
- en: Inserts and updates rows in the database from data held by object properties
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从对象属性中插入和更新数据库中的行
- en: Deletes rows in the database when related entities are marked for deletion
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当相关实体标记为删除时，删除数据库中的行
- en: '**Hydrates** in-memory objects with data retrieved from the database'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用从数据库检索的数据来**水合**内存中的对象
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about the Data Mapper and Unit of Work design patterns,
    you can refer to the following links: [http://martinfowler.com/eaaCatalog/dataMapper.html](http://martinfowler.com/eaaCatalog/dataMapper.html)
    and [http://martinfowler.com/eaaCatalog/unitOfWork.html](http://martinfowler.com/eaaCatalog/unitOfWork.html)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有关数据映射器和工作单元设计模式的更多信息，您可以参考以下链接：[http://martinfowler.com/eaaCatalog/dataMapper.html](http://martinfowler.com/eaaCatalog/dataMapper.html)和[http://martinfowler.com/eaaCatalog/unitOfWork.html](http://martinfowler.com/eaaCatalog/unitOfWork.html)
- en: In the Doctrine terminology, a Data Mapper is called an **Entity Manager**.
    Entities are plain old PHP objects of the domain layer.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Doctrine术语中，数据映射器称为**实体管理器**。实体是领域层的普通旧PHP对象。
- en: Thanks to the Entity Manager, they don't have to be aware that they will be
    stored in a database. In fact, they don't need to be aware of the existence of
    the Entity Manager itself. This design pattern allows reusing entity classes regardless
    of the persistence system.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于实体管理器，它们不必知道它们将存储在数据库中。实际上，他们不需要知道实体管理器本身的存在。这种设计模式允许重用实体类，而不受持久性系统的影响。
- en: For performance and data consistency, the Entity Manager does not sync entities
    with the database each time they are modified. The Unit of Work design pattern
    is used to keep the states of objects managed by the Data Mapper. Database synchronization
    happens only when requested by a call to the `flush()` method of the Entity Manager
    and is done in a transaction (if something goes wrong while synchronizing entities
    to the database, the database will be rolled back to its state prior to the synchronization
    attempt).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 出于性能和数据一致性的考虑，实体管理器不会在每次修改实体时将实体与数据库同步。工作单元设计模式用于保持数据映射器管理的对象的状态。只有在通过调用实体管理器的`flush()`方法请求时，数据库同步才会发生，并且在事务中进行（如果在将实体同步到数据库时出现问题，则数据库将回滚到同步尝试之前的状态）。
- en: 'Imagine an entity with a public `$name` property. Imagine the following code
    being executed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个具有公共`$name`属性的实体。想象执行以下代码：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Thanks to the implementation of the Unit of Work design pattern, only one SQL
    query similar to the following will be issued by Doctrine:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于工作单元设计模式的实现，Doctrine只会发出类似以下的一个SQL查询：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The query is similar because, for performance reasons, Doctrine uses prepared
    statements.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 出于性能原因，Doctrine使用预处理语句，因此查询是相似的。
- en: We will finish the theory part with a short overview of the Entity Manager methods
    and their related entity states.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以简要概述实体管理器方法及其相关实体状态来完成理论部分。
- en: 'The following is an extract of a class diagram representing an entity and its
    Entity Manager:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是表示实体及其实体管理器的类图的摘录：
- en: '![Understanding the concepts behind Doctrine](graphics/4104OS_01_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![理解Doctrine背后的概念](graphics/4104OS_01_02.jpg)'
- en: The `find()` method **hydrates** and returns an entity of the type **passed**
    in the first parameter having the second parameter as an **identifier**. Data
    is retrieved from the database through a `SELECT` query. The state of this returned
    entity is **managed**. It means that when the `flush()` method is called, changes
    made to it will be synced to the database. The `find()` method is a convenience
    method that internally uses an **entity repository** to retrieve data from the
    database and hydrate the entity. The state of the managed entities can be changed
    to **detached** by calling the `detach()` method. Modifications made to the detached
    entity will not be synced to the database (even when the `flush()` method is called)
    until its state is set back to **managed** with a call to the `merge()` method.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find()`方法**水合**并返回第一个参数中**传递**的类型的实体，其第二个参数作为**标识符**。数据通过`SELECT`查询从数据库中检索。返回实体的状态为**受控**。这意味着在调用`flush()`方法时，对其进行的更改将同步到数据库。`find()`方法是一个方便的方法，它在内部使用**实体存储库**从数据库中检索数据并水合实体。受控实体的状态可以通过调用`detach()`方法更改为**分离**。对分离实体所做的修改将不会同步到数据库（即使调用`flush()`方法时也是如此），直到通过调用`merge()`方法将其状态设置回**受控**为止。'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The start of [Chapter 3](ch03.html "Chapter 3. Associations"), *Associations*,
    will be dedicated to entity repositories.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。关联")*关联*的开始将专门用于实体存储库。'
- en: The `persist()` method tells Doctrine to set the state of the entity passed
    in parameter as managed. This is only useful for entities that have not been synced
    at least one time to the database (the default state of a newly created object
    is **new**) because entities hydrated from existing data automatically have the
    managed state.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`persist()`方法告诉Doctrine将传递的实体状态设置为受控。这仅对尚未至少一次同步到数据库的实体有用（新创建对象的默认状态为**new**），因为从现有数据中水合的实体自动具有受控状态。'
- en: The `remove()` method sets the state of the passed in entity to **removed**.
    Data related to this entity will be effectively removed from the database with
    a `DELETE` SQL query the next time the `flush()` method is called.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove()`方法将传入实体的状态设置为**已删除**。与此实体相关的数据将在下次调用`flush()`方法时通过`DELETE` SQL查询有效地从数据库中删除。'
- en: The `flush()` method syncs data of entities with **managed** and **removed**
    states to the database. Doctrine will issue `INSERT`, `UPDATE`, and `DELETE` SQL
    queries for the sync. Before that call, all changes are only in-memory and are
    never synchronized to the database.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flush()`方法将实体的数据与**受控**和**已删除**状态同步到数据库。Doctrine将为同步发出`INSERT`，`UPDATE`和`DELETE`
    SQL查询。在调用该方法之前，所有更改都仅在内存中，并且从未同步到数据库。'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Doctrine's Entity Manager has a lot of other useful methods documented on the
    Doctrine website, [http://www.doctrine-project.org/api/orm/2.4/class-Doctrine.ORM.EntityManager.html](http://www.doctrine-project.org/api/orm/2.4/class-Doctrine.ORM.EntityManager.html).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine的实体管理器有很多其他有用的方法，这些方法在Doctrine网站上有文档，[http://www.doctrine-project.org/api/orm/2.4/class-Doctrine.ORM.EntityManager.html](http://www.doctrine-project.org/api/orm/2.4/class-Doctrine.ORM.EntityManager.html)。
- en: This is abstract for now, but we will understand better how the Entity Manager
    works with numerous examples throughout the book.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 目前这是抽象的，但是我们将通过本书中的许多示例更好地理解实体管理器的工作原理。
- en: Creating a project structure
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目结构
- en: 'The following is the folder structure of our app:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们应用程序的文件夹结构：
- en: '`blog/`: App root created earlier'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`blog/`：之前创建的应用根目录'
- en: '`bin/`: Specific command line tools of our blog app'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin/`：我们博客应用程序的特定命令行工具'
- en: '`config/`: Configuration files of our app'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config/`：我们应用程序的配置文件'
- en: '`data/`: The SQLite database will be stored here'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data/`：SQLite数据库将存储在这里'
- en: '`src/`: All PHP classes we write will be here'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/`：我们编写的所有PHP类将在这里'
- en: '`vendor/`: This is where **Composer** (see the following section) stores all
    downloaded dependencies including the source code of Doctrine'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor/`：这是**Composer**（见下一节）存储所有已下载依赖项的地方，包括Doctrine的源代码'
- en: '`bin/`: This is a command-line tool provided by dependencies installed with
    Composer'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin/`：这是由Composer安装的依赖项提供的命令行工具'
- en: '`web/`: This is the public directory that contains PHP pages and assets such
    as images, CSS, and JavaScript files'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web/`：这是包含PHP页面和资产（如图像、CSS和JavaScript文件）的公共目录'
- en: We must create all these directories except the `vendor/` one that will be automatically
    generated later.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须创建所有这些目录，除了`vendor/`，它将在以后自动生成。
- en: Installing Composer
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Composer
- en: As with most modern PHP libraries, Doctrine is available through Composer, a
    powerful dependency manager. A PEAR channel is also available.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数现代PHP库一样，Doctrine可以通过Composer获得，这是一个强大的依赖管理器。还有一个PEAR频道可用。
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on Composer and Pear packages, please refer to the respective
    links as follows: [http://getcomposer.org](http://getcomposer.org) and [http://pear.doctrine-project.org](http://pear.doctrine-project.org)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Composer和Pear软件包的更多信息，请参考以下链接：[http://getcomposer.org](http://getcomposer.org)
    和 [http://pear.doctrine-project.org](http://pear.doctrine-project.org)
- en: 'The following steps should be performed to install Composer:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Composer应执行以下步骤：
- en: The first step to install Doctrine ORM is to grab a copy of the latest Composer
    version.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Doctrine ORM的第一步是获取最新版本的Composer。
- en: 'Open your preferred terminal, go to the `blog/` directory (the root of our
    project), and type the following command to install Composer:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您喜欢的终端，转到`blog/`目录（我们项目的根目录），并输入以下命令来安装Composer：
- en: '[PRE2]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A new file called `composer.phar` has been downloaded in the directory. This
    is a self-contained archive of Composer.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`composer.phar`的新文件已经在目录中下载。这是Composer的一个自包含存档。
- en: 'Now type the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在输入以下命令：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If everything is OK, all available commands are listed. Your Composer installation
    is up and running!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，将列出所有可用的命令。您的Composer安装已经准备就绪！
- en: Installing Doctrine
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Doctrine
- en: 'The following steps should be performed to install Doctrine:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Doctrine应执行以下步骤：
- en: 'To install Doctrine, we need to create a file called `composer.json` in our
    new `blog` directory. It lists dependencies of our project as shown in the following
    code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装Doctrine，我们需要在新的`blog`目录中创建一个名为`composer.json`的文件。它列出了我们项目的依赖项，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This standard JSON file will be parsed by Composer to download and install all
    dependencies specified. Once installed, Composer will load all classes of these
    libraries automatically.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Composer将解析这个标准的JSON文件，以下载和安装所有指定的依赖项。一旦安装完成，Composer将自动加载这些库的所有类。
- en: The `name`, `type`, and `description` attributes are optional but it's a good
    practice to always fill them. They provide general information about the project
    we are working on.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`、`type`和`description`属性是可选的，但最好总是填写它们。它们提供了关于我们正在开发的项目的一般信息。'
- en: The more interesting part of this `composer.json` file is the `require` field.
    In order to get it installed by Composer, all libraries used by our app must be
    listed here. A lot of PHP libraries are available on **Packagist**, the default
    Composer package repository. Of course, it's the case of Doctrine projects.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`composer.json`文件更有趣的部分是`require`字段。为了让Composer安装它，我们应用程序使用的所有库都必须在这里列出。许多PHP库都可以在**Packagist**上找到，这是默认的Composer包存储库。当然，Doctrine项目也是如此。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on Packagist, go through the following link: [https://packagist.org/](https://packagist.org/)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Packagist的更多信息，请访问以下链接：[https://packagist.org/](https://packagist.org/)
- en: We indicate that we need the latest minor release of the 2.4 branch of Doctrine
    ORM. You can set a major or minor version here, and even more complicated things.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定需要Doctrine ORM 2.4分支的最新次要版本。您可以在这里设置主要或次要版本，甚至更复杂的东西。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information on a package version, you can refer to the following link:
    [http://getcomposer.org/doc/01-basic-usage.md#package-versions](http://getcomposer.org/doc/01-basic-usage.md#package-versions)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有关软件包版本的更多信息，请参考以下链接：[http://getcomposer.org/doc/01-basic-usage.md#package-versions](http://getcomposer.org/doc/01-basic-usage.md#package-versions)
- en: The `autoload` field is here to tell Composer to automatically load classes
    of our app. We will put our specific code in a directory called `src/`. Our files
    and classes will follow the `PSR-0` namespacing and file-naming standard.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoload`字段在这里告诉Composer自动加载我们应用程序的类。我们将把我们的特定代码放在一个名为`src/`的目录中。我们的文件和类将遵循`PSR-0`命名空间和文件命名标准。'
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PHP Specification Requests are attempts to improve interoperability of PHP applications
    and libraries. They are available at [http://www.php-fig.org/](http://www.php-fig.org/).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: PHP规范请求是为了改进PHP应用程序和库的互操作性而尝试的。它们可以在[http://www.php-fig.org/](http://www.php-fig.org/)找到。
- en: 'It''s time to use Composer to install the ORM. Run the following command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是使用Composer来安装ORM的时候了。运行以下命令：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: New files appear in the `vendor/` directory. Doctrine ORM has been installed,
    and Composer was smart enough to get all its dependencies, including Doctrine
    DBAL and Doctrine Common.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`vendor/`目录中出现了新文件。Doctrine ORM已经安装，Composer足够智能，可以获取所有它的依赖，包括Doctrine DBAL和Doctrine
    Common。'
- en: A `composer.lock` file has also been created. It contains exact versions of
    installed libraries. This is useful for deploying applications. Thanks to this
    file, when running the `install` command, Composer will be able to retrieve the
    same versions that have been used in the development.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 还创建了一个`composer.lock`文件。它包含已安装库的确切版本。这对于部署应用程序很有用。有了这个文件，运行`install`命令时，Composer将能够检索与开发中使用的相同版本。
- en: Doctrine is now properly installed. Easy, isn't it?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine现在已经正确安装。很容易，不是吗？
- en: 'To update libraries when there are new releases in the 2.4 branch, we just
    need to type the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在2.4分支中有新版本发布时更新库，我们只需要输入以下命令：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Bootstrapping the app
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导应用程序
- en: 'The following steps need to be performed for bootstrapping the app:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 需要执行以下步骤来引导应用程序：
- en: 'Create a new file called `config/config.php` that will contain configuration
    parameters of our app as shown in the following code:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`config/config.php`的新文件，其中包含我们应用程序的配置参数，如下所示：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The Doctrine configuration parameters are stored in the `$dbParams` array. We
    will use a SQLite Database called `blog.db` stored in the `data/` directory. If
    you want to use MySQL or any other DBMS, it's here that you will configure the
    driver to use, the database name, and the access credentials.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine的配置参数存储在`$dbParams`数组中。我们将使用一个名为`blog.db`的SQLite数据库，存储在`data/`目录中。如果你想使用MySQL或任何其他DBMS，你将在这里配置要使用的驱动程序、数据库名称和访问凭据。
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following is a sample configuration to use MySQL instead of SQLite:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用MySQL而不是SQLite的示例配置：
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Config keys are self-explanatory.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 配置键是不言自明的。
- en: If the `$dev` variable is `true`, some optimizations will be disabled to ease
    debugging. Disabling the `dev` mode allows Doctrine to put a lot of data such
    as metadata in powerful caches to increase overall performances of the app.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`$dev`变量为`true`，一些优化将被禁用以便于调试。禁用`dev`模式允许Doctrine将大量数据（如元数据）放入强大的缓存中，以提高应用程序的整体性能。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It requires cache driver installation and extra configuration, which is available
    at [http://docs.doctrine-project.org/en/latest/reference/caching.html](http://docs.doctrine-project.org/en/latest/reference/caching.html).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要缓存驱动程序的安装和额外的配置，可在[http://docs.doctrine-project.org/en/latest/reference/caching.html](http://docs.doctrine-project.org/en/latest/reference/caching.html)找到。
- en: 'Next, we need a way to bootstrap our app. Create a file called `bootstrap.php`
    in the `src/` directory. This file will load everything we need as given in the
    following code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要一种方法来引导我们的应用程序。在`src/`目录中创建一个名为`bootstrap.php`的文件。这个文件将加载我们需要的一切，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first line requires the Composer autoloader. It allows you to automatically
    load the Doctrine's classes, the project's classes (that will be in the `src/`
    directory), and any class of a library installed with Composer.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行需要Composer自动加载程序。它允许您自动加载Doctrine的类、项目的类（将在`src/`目录中），以及使用Composer安装的任何库的类。
- en: The second line imports the configuration file of the app. The project structure
    is created and the initialization process of the app is done. We are ready to
    start using Doctrine.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行导入了应用程序的配置文件。项目结构已创建，应用程序的初始化过程已完成。我们准备开始使用Doctrine。
- en: Using Doctrine's Entity Manager
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Doctrine的实体管理器
- en: The principle of an ORM is to manage data stored in a relational database through
    an object-oriented API. We learned about its underlying concepts earlier in this
    chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: ORM的原则是通过面向对象的API管理存储在关系数据库中的数据。我们在本章的前面已经了解了它的基本概念。
- en: Each entity class is mapped to the related database table. Properties of the
    entity class are mapped to the table's columns.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 每个实体类都映射到相关的数据库表。实体类的属性映射到表的列。
- en: So, the rows of a database table are represented in the PHP app by a collection
    of entities.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，数据库表的行在PHP应用程序中由一组实体表示。
- en: Doctrine ORM is able to retrieve data from the database and to populate entities
    with them. This process is called hydration.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine ORM能够从数据库中检索数据并用它们填充实体。这个过程称为水合。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Instead of entities, Doctrine can populate PHP arrays in different manners
    (with the object graph, with a rectangular result set, and so on). It is also
    possible to create custom hydrators by referring to the following link: [http://docs.doctrine-project.org/en/latest/reference/dql-doctrine-query-language.html#hydration-modes](http://docs.doctrine-project.org/en/latest/reference/dql-doctrine-query-language.html#hydration-modes)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine可以以不同的方式填充PHP数组（使用对象图、使用矩形结果集等）。还可以通过参考以下链接创建自定义水合器：[http://docs.doctrine-project.org/en/latest/reference/dql-doctrine-query-language.html#hydration-modes](http://docs.doctrine-project.org/en/latest/reference/dql-doctrine-query-language.html#hydration-modes)
- en: 'As we have learned with the Data Mapper design pattern, it also does the inverse
    job: it persists data held by entities to database.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在数据映射器设计模式中学到的，它也做了相反的工作：将实体持有的数据持久化到数据库中。
- en: We will play a lot with entities later.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以后会大量使用实体。
- en: 'Doctrine comes with the following files to map entities to tables:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine附带以下文件来将实体映射到表：
- en: Annotations in comment blocks that embed directly in the entities
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释块中的注解直接嵌入实体
- en: XML configuration files
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XML配置文件
- en: YAML configuration files
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML配置文件
- en: Plain PHP files
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯PHP文件
- en: Annotations are fairly recent in the PHP world (they are popular in Java) but
    they are already widely used by Doctrine and Symfony communities. The advantages
    of this method are great readability and maintenance facility because mapping
    information is next to the PHP code. Putting mapping information directly in the
    code can also be a drawback in some contexts, especially for big projects that
    use several persistence systems.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注释在PHP世界中是相当新的（它们在Java中很受欢迎），但它们已经被Doctrine和Symfony社区广泛使用。这种方法的优势在于代码旁边的映射信息，使得代码易读且易于维护。但是，在某些情况下，直接将映射信息放入代码中也可能是一个缺点，特别是对于使用多个持久性系统的大型项目。
- en: We will use the annotation method in this book, but other methods are described
    in the Doctrine documentation. We will return to them in [Chapter 2](ch02.html
    "Chapter 2. Entities and Mapping Information"), *Entities and Mapping Information*.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用注释方法，但Doctrine文档中还描述了其他方法。我们将在[第2章](ch02.html "第2章。实体和映射信息")中返回它们，*实体和映射信息*。
- en: In the next chapter, [Chapter 2](ch02.html "Chapter 2. Entities and Mapping
    Information"), *Entities and Mapping Information*, we will discover that Doctrine
    is smart enough to use mapping information to automatically create the related
    database schema.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[第2章](ch02.html "第2章。实体和映射信息")中，*实体和映射信息*，我们将发现Doctrine足够智能，可以使用映射信息自动创建相关的数据库模式。
- en: For now, we will focus on retrieving an Entity Manager. As entities are retrieved,
    persisted, updated, and removed through it, this is the entry point of Doctrine
    ORM.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专注于检索实体管理器。因为实体是通过它检索、持久化、更新和删除的，这是Doctrine ORM的入口点。
- en: 'Edit the `src/bootstrap.php` file to retrieve a Doctrine''s Entity Manager.
    Add the following code at the end of this file:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`src/bootstrap.php`文件以检索Doctrine的实体管理器。在文件末尾添加以下代码：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)购买的所有Packt图书的帐户中下载示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)注册并直接通过电子邮件接收文件。
- en: The `$entitiesPath` property contains the list of paths to directories storing
    entity classes. We already mentioned that our app will follow the `PSR-0` namespacing
    convention. The `\Blog` folder will be the root namespace and entity classes will
    be in the `\Blog\Entity` folder.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`$entitiesPath`属性包含存储实体类的目录路径列表。我们已经提到我们的应用程序将遵循`PSR-0`命名空间约定。`\Blog`文件夹将是根命名空间，实体类将在`\Blog\Entity`文件夹中。'
- en: A Doctrine configuration is created to use annotations for mapping information
    and to be able to locate the blog's entities that we'll create.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个Doctrine配置，用于使用注释进行映射信息，并能够定位我们将创建的博客实体。
- en: A new `EntityManager` is created and configured to use our database and Doctrine
    settings.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并配置了一个新的`EntityManager`，以使用我们的数据库和Doctrine设置。
- en: For simplicity, we create a unique Entity Manager that will be used across the
    application. For real-world apps, you should take a look at the Dependency Injection
    design pattern.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，我们创建了一个在整个应用程序中将被使用的唯一实体管理器。对于真实世界的应用程序，您应该查看依赖注入设计模式。
- en: Note
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Find more on Dependency Injection pattern at the following link: [http://en.wikipedia.org/wiki/Dependency_injection](http://en.wikipedia.org/wiki/Dependency_injection)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下链接找到有关依赖注入模式的更多信息：[http://en.wikipedia.org/wiki/Dependency_injection](http://en.wikipedia.org/wiki/Dependency_injection)
- en: Configuring Doctrine command-line tools
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Doctrine命令行工具
- en: The Doctrine library is bundled with some useful command line tools. They provide
    many helpful features, including, but not limited to the ability to create database
    schema from entity mappings.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Doctrine库捆绑了一些有用的命令行工具。它们提供了许多有用的功能，包括但不限于根据实体映射创建数据库模式的能力。
- en: Composer has installed Doctrine's command line tools in the `vendor/bin/` directory.
    But before being able to use them, a bit of configuration must be done. Command
    line tools internally use an Entity Manager. We need to tell them how to retrieve
    it.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Composer已经在`vendor/bin/`目录中安装了Doctrine的命令行工具。但是，在能够使用它们之前，必须进行一些配置。命令行工具内部使用实体管理器。我们需要告诉它们如何检索它。
- en: 'Here, we just need to create one more file called `cli-config.php` in the `config/`
    directory as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只需要在`config/`目录中创建一个名为`cli-config.php`的文件，如下所示：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Thanks to the Doctrine's conventions, the file will be automatically detected
    and used by the Doctrine CLI.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Doctrine的约定，该文件将被自动检测并被Doctrine CLI使用。
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Command line tools will look for a file called `cli-config.php` in the current
    directory and in the `config/` directory.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行工具将在当前目录和`config/`目录中查找名为`cli-config.php`的文件。
- en: This file just gets a new Entity Manager using the utility class we've created
    earlier and configures the Doctrine CLI to use it.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件只是使用我们之前创建的实用类获取一个新的实体管理器，并配置Doctrine CLI以使用它。
- en: 'Type the following command to get a list of available Doctrine commands:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 键入以下命令以获取可用的Doctrine命令列表：
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discovered the fundamentals of Doctrine. We now know what
    entities and Entity Managers are, we have installed Doctrine with the Composer
    dependency manager, we created the skeleton of our blog app, and we managed to
    get the command line tools up and running.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Doctrine的基础知识。我们现在知道了实体和实体管理器是什么，我们已经使用Composer依赖管理器安装了Doctrine，创建了博客应用程序的框架，并成功运行了命令行工具。
- en: In the next chapter, we will create our first entity class, discover a lot of
    annotations to map it to the database, generate the database schema, and start
    dealing with entities. By the end of the next chapter, the post system of our
    blog will be working!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建我们的第一个实体类，发现许多注解来将其映射到数据库，生成数据库架构，并开始处理实体。到下一章结束时，我们博客的发布系统将会运作！
