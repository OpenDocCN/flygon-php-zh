- en: Chapter 5. Building a News Aggregation Website
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。构建新闻聚合网站
- en: 'During this chapter, we will create a news aggregation site. We will parse
    multiple feeds, categorize them, activate/deactivate them for our website, and
    display them on our website using PHP''s SimpleXML extension. The following topics
    will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个新闻聚合网站。我们将解析多个源，对它们进行分类，为我们的网站激活/停用它们，并使用PHP的SimpleXML扩展在我们的网站上显示它们。本章将涵盖以下主题：
- en: Creating the database and migrating the feeds table
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据库并迁移feeds表
- en: Creating a feeds model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建feeds模型
- en: Creating our form
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的表单
- en: Validating and processing the form
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证和处理表单
- en: Extending the core classes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展核心类
- en: Reading and parsing an external feed
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取和解析外部源
- en: Creating the database and migrating the feeds table
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据库并迁移feeds表
- en: After successfully installing Laravel 4 and defining database credentials from
    `app/config/database.php`, create a database called `feeds`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 成功安装Laravel 4并从`app/config/database.php`定义数据库凭据后，创建一个名为`feeds`的数据库。
- en: 'After creating the database, open your terminal, navigate to your project folder,
    and run this command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据库后，打开终端，进入项目文件夹，并运行此命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command will generate a new database migration named `feeds` for us. Now
    navigate to `app/database/migrations`, open the migration file just created by
    the preceding command, and change its contents as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将为我们生成一个名为`feeds`的新数据库迁移。现在导航到`app/database/migrations`，打开刚刚由前面的命令创建的迁移文件，并将其内容更改如下：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have a `title` column to show titles on the website, which is more user-friendly.
    Also, we set a key named `active` because we want to enable/disable feeds; we
    set it with the new `enum()` method of Laravel, which is featured with Laravel
    4\. We also set a `category` column that is also set with the `enum()` method
    to group feeds.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个`title`列用于在网站上显示标题，这更加用户友好。此外，我们设置了一个名为`active`的键，因为我们想要启用/禁用源；我们使用Laravel
    4提供的新`enum()`方法进行设置。我们还设置了一个`category`列，也使用`enum()`方法进行分组源的设置。
- en: 'After saving the file, run the following command to execute migration:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，运行以下命令执行迁移：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If no error occurs, you are ready for the next step of the project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误发生，您已经准备好进行项目的下一步了。
- en: Creating a feeds model
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建feeds模型
- en: As you know, for anything related to database operations on Laravel, using models
    is the best practice. We will benefit from the Eloquent ORM.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，对于Laravel上的任何与数据库操作相关的事情，使用模型是最佳实践。我们将受益于Eloquent ORM。
- en: 'Save this file as `feeds.php` under `app/models/`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将此文件保存为`feeds.php`，放在`app/models/`下：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We set the table name and the fillable columns with values. Now that our model
    is ready, we can proceed to the next step, and start creating our controller,
    along with the form.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置表名和可填充列的值。现在我们的模型已经准备好，我们可以继续下一步，开始创建我们的控制器和表单。
- en: Creating our form
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的表单
- en: Now we should create a form to save records to the database and specify its
    properties.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该创建一个表单来保存记录到数据库并指定其属性。
- en: 'First, open your terminal and enter the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开终端并输入以下命令：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command will generate a `FeedsController.php` file for you with some blank
    methods in the `app/controllers` folder.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将为您在`app/controllers`文件夹中生成一个`FeedsController.php`文件，并带有一些空白方法。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default methods in the controller that are auto-filled by the `artisan`
    commands are not RESTful.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由`artisan`命令自动填充的控制器中的默认方法不是RESTful的。
- en: 'Now, open `app/routes.php` and add the following lines:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`app/routes.php`并添加以下行：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Instead of defining all actions one by one, we can define all actions declared
    on a controller with a line of code. If your method names are usable as get or
    post actions directly, using the `controller()` method can save you a large amount
    of time. The first parameter sets the URI for the controller and the second parameter
    defines which class in the `controllers` folder will be accessed and defined.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一行代码定义控制器上声明的所有操作，而不是逐个定义所有操作。如果您的方法名称可以直接用作get或post操作，使用`controller()`方法可以节省大量时间。第一个参数设置控制器的URI，第二个参数定义`controllers`文件夹中将被访问和定义的类。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Controllers that are set in this manner are automatically RESTful.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式设置的控制器自动是RESTful的。
- en: 'Now, let''s create the form''s method. Add these lines of code into your controller
    file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建表单的方法。将以下代码添加到您的控制器文件中：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The process is quite simple here; we named the method as `getCreate()` because
    we want our `create` method to be RESTful. We simply loaded a view file, which
    we will be generating in the next step directly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的过程非常简单；我们将方法命名为`getCreate()`，因为我们希望我们的`create`方法是RESTful的。我们只是加载了一个视图文件，我们将在下一步直接生成它。
- en: 'Now let''s create our view file. Save this file as `create_feed.blade.php`
    under `app/views/`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的视图文件。将此文件保存为`create_feed.blade.php`，放在`app/views/`下：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code will produce a simple form, shown as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将生成一个简单的表单，如下所示：
- en: '![Creating our form](graphics/2111OS_05_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的表单](graphics/2111OS_05_01.jpg)'
- en: Validating and processing the form
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证和处理表单
- en: In this section, we will validate the submitted form and ensure that the fields
    are valid and the required fields are filled. Then we will save the data to the
    database.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将验证提交的表单，并确保字段有效且必填字段已填写。然后我们将数据保存到数据库中。
- en: 'First, we need to define the form validation rules. We prefer adding validation
    rules to the related model, so the rules become reusable, and this prevents the
    code from becoming bloated. To do this, add the following code in `feeds.php`
    located at `app/models/` (the model that we generated earlier in this chapter),
    inside the class definition before the last `}`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要定义表单验证规则。我们更喜欢将验证规则添加到相关模型中，这样规则就可以重复使用，这可以防止代码变得臃肿。为此，在本章前面生成的`feeds.php`中的`app/models/`（我们生成的模型）中，类定义的最后一个`}`之前添加以下代码：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We set the variable as `public`, so it can be used outside the model's file
    itself, and we set it to `static`, so we can directly access the variable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将变量设置为`public`，这样它可以在模型文件之外使用，并将其设置为`static`，这样我们可以直接访问这个变量。
- en: We want the feed to be a URL, and we want to check whether it's an active URL
    or not using the `active_url` validation rule, which depends on PHP's `chkdnsrr()`
    method.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望feed是一个URL，并且我们希望使用`active_url`验证规则来检查它是否是一个活动的URL，这取决于PHP的`chkdnsrr()`方法。
- en: Our active field can only get two values, `1` or `0`. Since we set it with integers,
    we can use the `between` rule of Laravel's form validation and check whether the
    number is between `1` and `0`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的active字段只能获得两个值，`1`或`0`。由于我们将其设置为整数，我们可以使用Laravel的表单验证规则`between`来检查数字是否在`1`和`0`之间。
- en: Our category field also has the `enum` type, and its value should only be `News`,
    `Sports`, or `Technology`. To check the exact values with Laravel, you can use
    the validation rule `in`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的category字段也具有`enum`类型，其值应该只是`News`、`Sports`或`Technology`。要使用Laravel检查确切的值，你可以使用验证规则`in`。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Not all server configurations support the `chkdnsrr()` method, so make sure
    it's installed on your side, else you may depend on only validating it if the
    URL is formatted correctly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的服务器配置都支持`chkdnsrr()`方法，所以确保它在你这边已安装，否则你可能只依赖于验证URL是否格式正确。
- en: 'Now we need a controller post method to process the form. Add the following
    method to `app/controllers/FeedsController.php` before the last `}`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要一个控制器的post方法来处理表单。在最后一个`}`之前，将以下方法添加到`app/controllers/FeedsController.php`中：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let's dig into the code one by one. First, we made a form validation and called
    our validation rules from the model that we've generated via `Feeds::$form_rules`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一深入代码。首先，我们进行了表单验证，并从我们通过`Feeds::$form_rules`生成的模型中调用了我们的验证规则。
- en: After that, we created an `if()` statement and divided the code into two parts
    with it. If the form validation fails, we return to the form with old inputs using
    the `withInput()` special method, and add a flash data message field using the
    method `with()`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们创建了一个`if()`语句，并用它将代码分成两部分。如果表单验证失败，我们将使用`withInput()`特殊方法返回到表单，并使用`with()`方法添加一个flash数据消息字段。
- en: If the form validation passes, we try to add a new column to the database with
    Eloquent's `create()` method, and we return to the form with a success or error
    message depending on what the `create` method returns.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果表单验证通过，我们尝试使用Eloquent的`create()`方法向数据库添加新列，并根据`create`方法返回的结果返回到表单，显示成功或错误消息。
- en: Now, we need to make a new view for the index page, which will show the last
    five entries of all the feeds. But before that, we need a function to parse the
    Atom feeds. For this, we will be extending the build in the `Str` class of Laravel.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为索引页面创建一个新的视图，它将显示所有feed的最后五个条目。但在此之前，我们需要一个函数来解析Atom feeds。为此，我们将扩展Laravel的内置`Str`类。
- en: Extending the core classes
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展核心类
- en: Laravel has many built-in methods that make our life easier. But as in all bundled
    packages, the bundle itself may not satisfy any of its users as it is introduced.
    So, you may want to use your own methods along with the bundled ones. You can
    always create new classes, but what if half of what you want to achieve is already
    built-in? For example, you want to add a form element, but there is already a
    `Form` class bundled. In this case, you may want to extend the current class(es)
    with your own methods instead of creating new ones to keep the code tidy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel有许多内置的方法，使我们的生活更轻松。但是，就像所有捆绑包一样，捆绑包本身可能不会满足任何用户，因为它是被引入的。因此，你可能希望使用自己的方法以及捆绑的方法。你总是可以创建新的类，但是如果你想要实现的一半已经内置了呢？例如，你想添加一个表单元素，但已经有一个`Form`类捆绑了。在这种情况下，你可能希望扩展当前的类，而不是创建新的类来保持代码整洁。
- en: In this section, we will be extending the `Str` class with the method called
    `parse_atom()`, which we will code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用名为`parse_atom()`的方法来扩展`Str`类，我们将编写这个方法。
- en: First, you must find where the class file is. We will be extending the `Str`
    class, which is under `vendor/laravel/framework/src/Illuminate/Support`. Note
    that you can also find this class under the aliases key in `app/config/app.php`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你必须找到类文件所在的位置。我们将扩展`Str`类，它位于`vendor/laravel/framework/src/Illuminate/Support`下。请注意，你也可以在`app/config/app.php`的aliases键中找到这个类。
- en: Now create a new folder called `lib` under `app/folder`. This folder will hold
    our class extensions. Because the `Str` class is grouped under the folder `Support`,
    it is suggested that you create a new folder named `Support` under `lib` too.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在`app/folder`下创建一个名为`lib`的新文件夹。这个文件夹将保存我们的类扩展。因为`Str`类被分组到`Support`文件夹下，建议你也在`lib`下创建一个名为`Support`的新文件夹。
- en: 'Now create a new file named `Str.php` under `app/lib/Support`, which you''ve
    just created:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在`app/lib/Support`下创建一个名为`Str.php`的新文件，你刚刚创建的：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We gave a namespace to it so we can access it easily. Instead of using it like
    `\app\lib\Support\Str::trim()` (which you can), you can directly use it like `Str::trim()`.
    The rest of the code explains how to extend the library. We have provided the
    class name starting from the `Illuminate` path to access the `Str` class directly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给它命名空间，这样我们就可以轻松地访问它。你可以直接使用`Str::trim()`，而不是像`\app\lib\Support\Str::trim()`那样使用它（你可以）。其余的代码解释了如何扩展库。我们提供了从`Illuminate`路径开始的类名，以直接访问`Str`类。
- en: 'Now open your `app.php` file located at `app/config/`; comment out the following
    line:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开位于`app/config/`下的`app.php`文件；注释掉以下行：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, add the following line:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加以下行：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This way, we switched the autoloaded `Str` class with our class, which is already
    extending the original.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们用我们的类替换了自动加载的`Str`类，而我们的类已经扩展了原始类。
- en: 'Now to make it identifiable on autoruns, open your `composer.json` file and
    add these lines into autoload''s `classmap` object:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为了在autoruns上进行标识，打开你的`composer.json`文件，并将这些行添加到autoload的`classmap`对象中：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, run the following command in the terminal:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在终端中运行以下命令：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will look for dependencies and recompile common classes. If everything
    goes smoothly, you will now have an extended `Str` class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将寻找依赖项并重新编译常见类。如果一切顺利，你现在将拥有一个扩展的`Str`类。
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Folder and class names are case-sensitive, even on Windows servers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 文件夹和类名在Windows服务器上也是区分大小写的。
- en: Reading and parsing an external feed
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取和解析外部反馈
- en: 'We have the feed URLs and the titles on our server all categorized. Now all
    we have to do is to parse them and show them to the end user. There are some steps
    to follow for this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在服务器上已经对反馈的URL和标题进行了分类。现在我们要做的就是解析它们并展示给最终用户。这需要遵循一些步骤：
- en: 'First, we need a method to parse external Atom feeds. Open your `Str.php` file
    located at `app/lib/Support/` and add this method into the class:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要一个方法来解析外部Atom反馈。打开位于`app/lib/Support/`下的`Str.php`文件，并将此方法添加到类中：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: First, we load the XML feed on the method using SimpleXML's built-in method,
    `simplexml_load_file()`. If no results are found or the feed contains errors,
    we return an empty array. In SimpleXML, all objects and their child objects are
    exactly like XML tags. So if there is a `<channel>` tag, there will be an object
    named `channel`, and if there are `<item>` tags inside `<channel>`, there will
    be an object named `item` beneath each `channel` object. So if you want to access
    the first item inside the channel, you can access it as `$xml->channel->item[0]`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用SimpleXML的内置方法`simplexml_load_file()`在方法中加载XML反馈。如果没有找到结果或者反馈包含错误，我们就返回一个空数组。在SimpleXML中，所有对象及其子对象都与XML标签完全一样。所以如果有一个`<channel>`标签，就会有一个名为`channel`的对象，如果在`<channel>`内有`<item>`标签，那么在每个`channel`对象下面就会有一个名为`item`的对象。所以如果你想访问通道内的第一项，你可以这样访问：`$xml->channel->item[0]`。
- en: 'Now we need a view to show the contents. First, open your `routes.php` under
    `app` and delete the `get` route that is present by default:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要一个视图来显示内容。首先打开`app`下的`routes.php`，并删除默认存在的`get`路由：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now open `FeedsController.php` located at `app/controller/` and paste this
    code:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`FeedsController.php`，位于`app/controller/`下，并粘贴以下代码：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the controller, we got the feeds' URLs one by one, and then loaded a view
    and set them one by one as separated variables for each of the categories.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中，我们逐个获取反馈的URL，然后加载一个视图，并将它们逐个设置为每个类别的单独变量。
- en: 'Now we need to loop each feed category and show its contents. Save the following
    code in a file called `index.blade.php` under `app/views/`:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要循环每个反馈类别并显示其内容。将以下代码保存在名为`index.blade.php`的文件中，放在`app/views/`下：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We wrote the same code for each of the categories thrice. Also, between the
    `head` tags, a bit of styling is done, so the page will look prettier for the
    end user.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为每个类别写了相同的代码三次。此外，在`head`标签之间进行了一些样式处理，以便页面对最终用户看起来更漂亮。
- en: We have divided each category's section with an `<hr>` tag. All three parts
    are working with the same mechanics of each other, except for the source variables
    and grouping.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用`<hr>`标签分隔了每个类别的部分。所有三个部分的工作机制都相同，除了源变量和分组。
- en: We first checked whether records exist for each category (the results from the
    database, since we may not have added any news feeds yet). If there are results,
    they are looped through each record using the `@foreach()` method of Blade template
    engine.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检查每个类别是否存在记录（来自数据库的结果，因为我们可能还没有添加任何新闻源）。如果有结果，就使用Blade模板引擎的`@foreach()`方法循环遍历每条记录。
- en: For each record, we first show the feed's friendly name (which we defined before
    while saving them) and parse the feed with the `parse_feed()` method we've just
    created .
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每条记录，我们首先显示反馈的友好名称（我们在保存时定义的），并使用我们刚刚创建的`parse_feed()`方法解析反馈。
- en: After we parse each feed, we look to see whether any records are found; if so,
    we loop them all again. To keep the tidiness of our feed reader, we trimmed all
    HTML tags with PHP's `strip_tags()` function and limited them to a maximum of
    250 characters using the `limit()` method of Laravel's `Str` class (which we have
    extended).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在解析每个反馈后，我们查看是否找到了任何记录；如果找到了，我们再次循环它们。为了保持我们反馈阅读器的整洁，我们使用PHP的`strip_tags()`函数去除了所有HTML标签，并使用Laravel的`Str`类的`limit()`方法将它们限制在最多250个字符。
- en: Individual feeds' items also have their own title, date, and source link, so
    we have displayed them as well on the feed. To prevent the link from breaking
    our interface, we limited the text, to be written between anchor tags, to 35 characters.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 各个反馈项也有自己的标题、日期和源链接，所以我们也在反馈上显示了它们。为了防止链接破坏我们的界面，我们将文本限制在35个字符之间写在锚标签之间。
- en: 'After all of the edits, you should get an output like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有编辑完成后，你应该得到如下输出：
- en: '![Reading and parsing an external feed](graphics/2111OS_05_02.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![读取和解析外部反馈](graphics/2111OS_05_02.jpg)'
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've created a simple feeds reader using Laravel's built-in
    functions and PHP's `SimpleXML` class. We've learned how to extend core libraries,
    write our own methods, and use them in production. We also learned how to filter
    results while querying the database and how to create records. Finally, we learned
    how to work with strings, limit them, and clean them up. In the next chapter,
    we will be creating a photo gallery system. We will ensure that the uploaded files
    are photos. We will also group the photos into albums, and will relate albums
    and photos with Laravel's built-in relation methods.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Laravel的内置函数和PHP的`SimpleXML`类创建了一个简单的反馈阅读器。我们学会了如何扩展核心库，编写自己的方法，并在生产中使用它们。我们还学会了在查询数据库时如何过滤结果以及如何创建记录。最后，我们学会了如何处理字符串，限制它们，并清理它们。在下一章中，我们将创建一个照片库系统。我们将确保上传的文件是照片。我们还将把照片分组到相册中，并使用Laravel的内置关联方法关联相册和照片。
