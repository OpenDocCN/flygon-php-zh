- en: Chapter 1. Installing and Integrating Solr and PHP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 安装和集成Solr和PHP
- en: Are you a PHP programmer? Do you feel the need to incorporate search in your
    applications? Are you aware of Apache Solr? Do you feel it is a very tedious job
    to integrate Solr into your PHP applications? This book will make the integration
    easy for you. We will be looking at an end-to-end integration of Apache Solr with
    PHP. We will start with Solr installation. We will look at how Solr can be integrated
    with PHP. We will then explore the features provided by Solr through PHP code.
    After going through the book, you should be able to integrate almost all features
    provided by Solr into your PHP applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您是PHP程序员吗？您是否感到有必要在您的应用程序中整合搜索？您是否知道Apache Solr？您是否觉得将Solr整合到您的PHP应用程序中是一项非常繁琐的工作？本书将为您简化整合过程。我们将全面整合Apache
    Solr与PHP。我们将从Solr安装开始。我们将看看如何将Solr与PHP集成。然后，我们将通过PHP代码探索Solr提供的功能。阅读本书后，您应该能够将Solr提供的几乎所有功能整合到您的PHP应用程序中。
- en: 'This chapter will help us in installing Apache Solr in two major environments:
    Windows and Linux. We will also go ahead and explore installation of Solr as part
    of Apache Tomcat Server. We will discuss the options available for talking to
    Solr via PHP and also learn how to set up the Solarium library for Solr PHP integration.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助我们在两个主要环境中安装Apache Solr：Windows和Linux。我们还将继续探索将Solr作为Apache Tomcat服务器的一部分进行安装。我们将讨论通过PHP与Solr通信的可用选项，并学习如何为Solr
    PHP集成设置Solarium库。
- en: 'We will be covering the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is Solr?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Solr？
- en: Downloading and installing Solr on Windows and Linux
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows和Linux上下载和安装Solr
- en: Configuring Tomcat to run Solr.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Tomcat以运行Solr。
- en: Executing ping queries on Solr using PHP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP在Solr上执行ping查询
- en: Discussing different libraries for Solr PHP integration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论Solr PHP集成的不同库
- en: Installing Solarium on Windows and Linux
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows和Linux上安装Solarium
- en: Connecting PHP to Solr using Solarium
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Solarium将PHP连接到Solr
- en: Running ping queries using PHP and Solarium
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP和Solarium运行ping查询
- en: Checking Solr logs
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查Solr日志
- en: Solr
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Solr
- en: You are PHP programmers and you build websites such as a job site, an e-commerce
    website, a content website, or others. You need to provide a search box for searching
    either jobs or products or other content in your website. How do you go about
    it? Do you do a "like" search in your database or probably use the full-text search
    available in MySQL—if you are using MySQL. Would you prefer to use some other
    platform that does the search for you and also provides you a huge set of features
    to tune the search as per your requirements?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您是PHP程序员，您构建网站，如招聘网站、电子商务网站、内容网站或其他网站。您需要为网站提供一个搜索框，用于搜索工作、产品或网站中的其他内容。您会如何处理？您是否在数据库中进行“like”搜索，或者可能使用MySQL中提供的全文搜索——如果您使用的是MySQL。您是否愿意使用其他平台来为您进行搜索，并为您提供一系列功能，以根据您的要求调整搜索？
- en: Solr is an open source Java application providing an interface to the full-text
    search library known as Lucene. Both Solr and Lucene are a part of the Apache
    Lucene project. Apache Solr uses Apache Lucene as its core for search. Apache
    Lucene is an open source search API built in Java. In addition to full-text search,
    Solr also provides a huge set of features such as hit highlighting and faceted
    search.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Solr是一个开源的Java应用程序，提供了一个名为Lucene的全文搜索库的接口。Solr和Lucene都是Apache Lucene项目的一部分。Apache
    Solr使用Apache Lucene作为其搜索的核心。Apache Lucene是一个用Java构建的开源搜索API。除了全文搜索，Solr还提供了一系列功能，如命中高亮和分面搜索。
- en: Installing Solr
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Solr
- en: Solr requires the presence of Java on your system. To check the presence of
    Java on your system, run `java –version` in Linux console or Windows command prompt.
    If the version of Java is greater than 1.6 then we are ready to go. It is preferable
    to use the official Java Runtime Environment rather than the one provided by OpenJDK.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Solr需要您的系统上安装有Java。要检查系统上是否安装了Java，请在Linux控制台或Windows命令提示符中运行`java –version`。如果Java的版本大于1.6，则我们已经准备就绪。最好使用官方的Java运行环境，而不是OpenJDK提供的运行环境。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let us download the latest Solr. For this book we are using Solr Version 4.3.1,
    which can be downloaded from the following link:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们下载最新的Solr。对于本书，我们使用的是Solr版本4.3.1，可以从以下链接下载：
- en: '[http://lucene.apache.org/solr/downloads.html](http://lucene.apache.org/solr/downloads.html)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://lucene.apache.org/solr/downloads.html](http://lucene.apache.org/solr/downloads.html)'
- en: 'To install Solr on Windows or Linux simply unzip or extract the `solr-4.3.1.zip`
    file into a folder. The installation process for Windows and Linux is as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows或Linux上安装Solr只需将`solr-4.3.1.zip`文件解压缩到一个文件夹中。Windows和Linux的安装过程如下：
- en: 'For installation on Windows, simply right-click on the zip file and extract
    it into the `C:\solr-4.3.1` folder. To start Solr, go to the Windows command prompt
    **Start** | **Run**. In the **Run** window, type `cmd`. On the Windows command
    prompt type the following:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows的安装，只需右键单击zip文件并将其解压缩到`C:\solr-4.3.1`文件夹中。要启动Solr，请转到Windows命令提示符**开始**
    | **运行**。在**运行**窗口中，键入`cmd`。在Windows命令提示符中键入以下内容：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For installation on Linux, simply extract the zip file in your home folder.
    Follow these commands to extract and run Solr using your console:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux的安装，只需在您的主文件夹中解压缩zip文件。按照以下命令在控制台中提取和运行Solr：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we start Solr with the `java –jar start.jar` option, Solr runs on the
    port 8983\. It uses a built-in web server known as jetty. To see Solr working,
    simply point your browser to the following address:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`java –jar start.jar`选项启动Solr时，Solr运行在端口8983上。它使用一个名为jetty的内置Web服务器。要查看Solr的工作情况，只需将浏览器指向以下地址：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will be able to see the following interface. This means that Solr is running
    fine. The following screenshot shows the **Solr Admin** interface:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您将能够看到以下界面。这意味着Solr运行正常。以下屏幕截图显示了**Solr管理**界面：
- en: '![Installing Solr](graphics/4920OS_01_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![安装Solr](graphics/4920OS_01_01.jpg)'
- en: Configuring Tomcat to run Solr
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Tomcat以运行Solr
- en: The web server jetty used by default Solr is meant for development purposes
    only. For production environment, we would want Solr to run as a part of a more
    convenient setup involving a more reliable web server. Solr can be configured
    to run on any J2EE container such as IBM Websphere or JBoss or any other server.
    Apache Tomcat is the most commonly used server. Let us see how to set up Solr
    as a part of Apache Tomcat web server. We have Apache Tomcat installed on our
    Windows or Linux environment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下Solr使用的web服务器jetty仅用于开发目的。对于生产环境，我们希望Solr作为更方便的设置的一部分运行，涉及更可靠的web服务器。Solr可以配置为在任何J2EE容器上运行，例如IBM
    Websphere或JBoss或任何其他服务器。Apache Tomcat是最常用的服务器。让我们看看如何将Solr设置为Apache Tomcat web服务器的一部分。我们在Windows或Linux环境中安装了Apache
    Tomcat。
- en: To run Solr as a part of Apache Tomcat web server, you need to create a context
    for `/solr` in the configuration. The following `solr.xml` file needs to be put
    at the appropriate location in Windows and Linux inside the Tomcat configuration
    folder at `<tomcat_home>/conf/Catalina/localhost`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Solr作为Apache Tomcat web服务器的一部分运行，您需要在配置中为`/solr`创建一个上下文。需要将以下`solr.xml`文件放在Windows和Linux中适当的位置，放在Tomcat配置文件夹`<tomcat_home>/conf/Catalina/localhost`中。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Change `docBase` to `<solr_path>/example/webapps/solr.war` and the value attribute
    in `Environment` to `<solr_path>/example/solr`. The environment named `solr/home`
    tells Tomcat the location where Solr configuration files are to be found. In addition
    to this, let us change the configuration of Solr in the `<solr_path>/example/solr/solr.xml`
    file. Search for `hostPort` and change it to match Tomcat's port `8080`. Similarly
    search for `hostContext` and change it to `solr`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将`docBase`更改为`<solr_path>/example/webapps/solr.war`，并将`Environment`中的value属性更改为`<solr_path>/example/solr`。名为`solr/home`的环境告诉Tomcat可以找到Solr配置文件的位置。除此之外，让我们更改`<solr_path>/example/solr/solr.xml`文件中Solr的配置。搜索`hostPort`并将其更改为匹配Tomcat的端口`8080`。同样搜索`hostContext`并将其更更改为`solr`。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Windows users, use `\` instead of `/` in your configuration XML files for path
    variables. Do not change the `/` in `solr/home`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户在配置XML文件中的路径变量中使用`\`而不是`/`。不要更改`solr/home`中的`/`。
- en: 'Restart your Tomcat server and you should be able to go to the following URL
    to see Solr working along with Tomcat:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动Tomcat服务器，您应该能够转到以下URL以查看Solr与Tomcat一起工作：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you see an error "404 not found" on the preceding URL, it may be because
    of some libraries of Solr that Tomcat is not able to find. You can check the exact
    error in Tomcat error logs in the `<tomcat_home>/logs/catalina.out` folder. To
    resolve the missing library issue, copy all JAR files from the `<solr_home>/example/lib/ext
    to <tomcat_home>/lib` folder.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在上述URL上看到错误“404未找到”，可能是因为Tomcat无法找到Solr的某些库。您可以在`<tomcat_home>/logs/catalina.out`文件夹中的Tomcat错误日志中检查确切的错误。要解决缺少库的问题，请将所有JAR文件从`<solr_home>/example/lib/ext`复制到`<tomcat_home>/lib`文件夹。
- en: You can also enable advanced logging in your Tomcat logs by copying the `log4j.properties`
    file from the `<solr_home>/example/resources` folder to your `<tomcat_home>/lib`
    folder.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将`<solr_home>/example/resources`文件夹中的`log4j.properties`文件复制到`<tomcat_home>/lib`文件夹中来在Tomcat日志中启用高级日志记录。
- en: Executing a ping query on Solr using PHP
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP在Solr上执行ping查询
- en: 'Ping queries are used in Solr to monitor the health of the Solr server. Let
    us first see how the ping query works on the **Solr Admin** web interface:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Solr中使用ping查询来监视Solr服务器的健康状况。让我们首先看看在**Solr Admin** web界面上ping查询是如何工作的：
- en: Open up the browser and go to the URL for Solr.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到Solr的URL。
- en: Select **collection1** from the dropdown on the left-hand side panel.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧面板的下拉菜单中选择**collection1**。
- en: Click on **Ping** and you will see the ping time in milliseconds appear next
    to the ping's link. Our ping is working fine.![Executing a ping query on Solr
    using PHP](graphics/4920OS_01_02.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**Ping**，您将看到以毫秒为单位的ping时间出现在ping链接旁边。我们的ping正常工作。![使用PHP在Solr上执行ping查询](graphics/4920OS_01_02.jpg)
- en: 'Let us check the version of PHP installed. We need Version 5.3.2 and above.
    To check the version, run `php –v` on the Windows or Linux command line as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查已安装的PHP版本。我们需要版本5.3.2及以上。要检查版本，请在Windows或Linux命令行上运行`php -v`，如下所示：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To get ping working from our PHP code, we will need a utility called cURL.
    For Linux environments, we need to install the `curl`, `libcurl`, and `php5-curl`
    packages. On Ubuntu distribution of Linux it can be installed using the following
    command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要使我们的PHP代码中的ping正常工作，我们将需要一个名为cURL的实用程序。对于Linux环境，我们需要安装`curl`，`libcurl`和`php5-curl`软件包。在Linux的Ubuntu发行版上，可以使用以下命令进行安装：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For enabling cURL on windows, we need to edit the `php.ini` file in our PHP
    installation. Search for the extensions directory setting and change it to where
    `php_curl.dll` is located. Also, uncomment the line which loads `php_curl.dll`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上启用cURL，我们需要编辑PHP安装中的`php.ini`文件。搜索扩展目录设置并将其更改为`php_curl.dll`所在的位置。还要取消注释加载`php_curl.dll`的行：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The following URL is the URL that is being called for executing the ping query.
    On going to this URL, we can see the response that contains the response header
    and the status, which is OK.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下URL是用于执行ping查询的URL。访问此URL，我们可以看到包含响应头和状态（OK）的响应。
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can see that the response is in XML. To convert the response to JSON, simply
    add `wt=json` to the earlier URL:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到响应是XML格式的。要将响应转换为JSON，只需在先前的URL中添加`wt=json`：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Linux users can check the response of a curl call using the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Linux用户可以使用以下命令检查curl调用的响应：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A direct call to Solr via PHP requires us to call the ping with a JSON response
    URL via cURL and decode the JSON response to show the result. Here is a piece
    of code to do the same. This code can be executed using the PHP command line:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过PHP直接调用Solr需要我们通过cURL调用带有JSON响应的ping，并解码JSON响应以显示结果。以下是执行相同操作的一段代码。可以使用PHP命令行执行此代码：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On executing the preceding code via command line, we will get the output as
    follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命令行执行上述代码，我们将得到以下输出：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.PacktPub.com](http://www.PacktPub.com)账户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)并注册以直接通过电子邮件接收文件。
- en: Libraries available for PHP-Solr integration
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用于PHP-Solr集成的库
- en: 'Every call to Solr for executing any task is eventually a URL which needs particular
    parameters depending on what we need to get done. So, adding documents to Solr,
    deleting documents from Solr, and searching of documents can all be done by building
    URLs with parameters for their respective commands. We can call these URLs using
    PHP and cURL and interpret the response in JSON. However, instead of remembering
    every command to be sent in the URL, we can use a library to create the Solr URL
    and interpret the response. Some of the libraries available are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对Solr执行任何任务的每次调用最终都是一个URL，具体参数取决于我们需要完成的任务。因此，向Solr添加文档，从Solr中删除文档以及搜索文档都可以通过构建具有其各自命令参数的URL来完成。我们可以使用PHP和cURL调用这些URL并以JSON格式解释响应。但是，我们可以使用库来创建Solr
    URL并解释响应，而不是记住要在URL中发送的每个命令。以下是一些可用的库：
- en: Solr-PHP-client
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solr-PHP-client
- en: Apache Solr-PHP extension
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Solr-PHP扩展
- en: Solarium
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solarium
- en: 'Solr-PHP-client can be obtained from the following location:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Solr-PHP-client可以从以下位置获得：
- en: '[https://code.google.com/p/solr-php-client/](https://code.google.com/p/solr-php-client/)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://code.google.com/p/solr-php-client/](https://code.google.com/p/solr-php-client/)'
- en: It can be seen that the latest release for this library was in November 2009\.
    There have been no developments on this library since 2009\. This is a very basic
    client and does not support a lot of features that are now available in Solr.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到，该库的最新发布日期是2009年11月。自2009年以来，该库没有任何发展。这是一个非常基本的客户端，不支持Solr中现有的许多功能。
- en: 'Apache SolrPhp extension can be obtained from the following location:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Apache SolrPhp扩展可以从以下位置获得：
- en: '[http://pecl.php.net/package/solr](http://pecl.php.net/package/solr)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://pecl.php.net/package/solr](http://pecl.php.net/package/solr)'
- en: 'The latest release for this library was in November 2011\. This is a comparatively
    better library. And is also the library suggested for integrating with Solr on
    [www.php.net](http://www.php.net). It is intended to be very fast and lightweight
    compared to others. The complete API of the library can be obtained from following
    location:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该库的最新发布日期是2011年11月。这是一个相对更好的库。并且也是与[www.php.net](http://www.php.net)集成Solr建议的库。它旨在比其他库更快速和轻量级。该库的完整API可以从以下位置获得：
- en: '[http://php.net/manual/en/book.solr.php](http://php.net/manual/en/book.solr.php)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://php.net/manual/en/book.solr.php](http://php.net/manual/en/book.solr.php)'
- en: Solarium is the latest library for Solr PHP integration. It is open source and
    is continuously updated. It is fully object oriented and provides features almost
    as soon as they are made available in Solr. It is fully flexible where you can
    add a functionality that you feel is missing. Also custom parameters can be used
    to achieve almost any task. On the downside, the library is somewhat heavy as
    it has many files. Solarium replicates the concepts of Solr to some extent. And
    it is being actively developed. We will install Solarium and explore the comprehensive
    list of features of Solr via PHP code using the Solarium library.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Solarium是Solr PHP集成的最新库。它是开源的，并且不断更新。它是完全面向对象的，并且几乎在Solr中提供功能。它是完全灵活的，您可以添加您认为缺少的功能。还可以使用自定义参数来实现几乎任何任务。不过，该库有许多文件，因此有些沉重。Solarium在某种程度上复制了Solr的概念。并且正在积极开发中。我们将安装Solarium并使用Solarium库通过PHP代码探索Solr的全面功能列表。
- en: Installing Solarium
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Solarium
- en: Solarium can be downloaded and used directly or it can be installed using a
    package manager for PHP called Composer. If we download the Solarium library directly,
    we will have to get other dependencies for installation. Composer, on the other
    hand, manages all dependencies by itself. Let us have a quick look at installing
    Composer on both Windows and Linux environments.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Solarium可以直接下载和使用，也可以使用名为Composer的PHP包管理器进行安装。如果我们直接下载Solarium库，我们将不得不获取其他安装所需的依赖项。另一方面，Composer可以自行管理所有依赖项。让我们快速看一下在Windows和Linux环境中安装Composer。
- en: 'For Linux, the following commands will help in installation of Composer:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux，以下命令将有助于安装Composer：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'These command downloads the Composer installer PHP script and passes the output
    to the PHP program for interpretation and execution. During execution, the PHP
    script downloads the Composer code into a single executable PHP program `composer.phar`
    (PHP Archive). We are renaming the `composer.phar` executable to Composer for
    ease of use purposes. On Linux, Composer can be installed at a user level or at
    a global level. To install Composer at user level, simply add it to your environment
    path using the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令下载Composer安装程序PHP脚本，并将输出传递给PHP程序进行解释和执行。在执行过程中，PHP脚本将Composer代码下载到单个可执行的PHP程序`composer.phar`（PHP存档）中。出于方便使用的目的，我们将`composer.phar`可执行文件重命名为Composer。在Linux上，Composer可以安装在用户级别或全局级别。要在用户级别安装Composer，只需使用以下命令将其添加到您的环境路径中：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To install Composer on a global level simply move it to the system path suchas
    `/usr/bin` or `/usr/local/bin`. To check if Composer has been installed successfully,
    simply run Composer on your console and check the various options provided by
    Composer.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要在全局级别安装Composer，只需将其移动到系统路径，例如`/usr/bin`或`/usr/local/bin`。要检查Composer是否已成功安装，只需在控制台上运行Composer并检查Composer提供的各种选项。
- en: '![Installing Solarium](graphics/4920OS_01_03.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![安装Solarium](graphics/4920OS_01_03.jpg)'
- en: 'Windows user can download `composer-setup.exe` from the following link:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户可以从以下链接下载`composer-setup.exe`：
- en: '[http://getcomposer.org/Composer-Setup.exe](http://getcomposer.org/Composer-Setup.exe)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://getcomposer.org/Composer-Setup.exe](http://getcomposer.org/Composer-Setup.exe)'
- en: Double-click on the executable and follow instructions to install Composer.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 双击可执行文件，并按照说明安装Composer。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will need to install a web server—mostly Apache and configure it to enable
    the execution of PHP scripts on it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装一个Web服务器——主要是Apache，并配置它以在上面执行PHP脚本。
- en: Alternatively, we can use the built-in web server in PHP 5.4\. This server can
    be started by going to the directory where all HTML and PHP files are and by using
    the `php –S localhost:8000` command to start the PHP development server on port
    `8000` on our local machine.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用PHP 5.4中内置的Web服务器。可以通过转到所有HTML和PHP文件所在的目录，并使用`php –S localhost:8000`命令在本地机器上的端口`8000`上启动PHP开发服务器来启动此服务器。
- en: Once Composer is in place, installing Solarium is pretty easy. Let us install
    Solarium on both Linux and Windows machine.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Composer就位，安装Solarium就非常容易。让我们在Linux和Windows机器上都安装Solarium。
- en: For Linux machines, open the console and navigate to the Apache `documentRoot`
    folder. This is the folder where all our PHP code and web applications will reside.
    In most cases, it is `/var/www` or it can be changed to any folder by changing
    the configuration of the web server. Create a separate folder where you want your
    applications to reside and also create a `composer.json` file inside this folder
    specifying the version of Solarium that needs to be installed.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux机器，打开控制台并导航到Apache `documentRoot`文件夹。这是我们所有PHP代码和Web应用程序将驻留的文件夹。在大多数情况下，它是`/var/www`，或者可以通过更改Web服务器的配置来更改为任何文件夹。创建一个单独的文件夹，您希望您的应用程序驻留在其中，并在此文件夹内创建一个`composer.json`文件，指定要安装的Solarium版本。
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now install Solarium by running the `composer install` command. Composer automatically
    downloads and installs Solarium and its related dependencies such as symfony event
    dispatcher. This can be seen in the output of Composer.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过运行`composer install`命令来安装Solarium。Composer会自动下载和安装Solarium及其相关依赖项，如symfony事件分发器。这可以在Composer的输出中看到。
- en: '![Installing Solarium](graphics/4920OS_01_04.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![安装Solarium](graphics/4920OS_01_04.jpg)'
- en: For installation on Windows, open up your command prompt and navigate to the
    Apache `documentRoot` folder. Create a new folder inside `documentRoot` and run
    `composer install` inside the folder.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows的安装，打开命令提示符并导航到Apache `documentRoot`文件夹。在`documentRoot`文件夹内创建一个新文件夹，并在文件夹内运行`composer
    install`。
- en: We can see that during installation, `symfony event dispatcher` and `solarium
    library` are downloaded in a separate folder named `vendor`. Let us check the
    contents of the `vendor` folder. It consists of a file called `autoload.php` and
    three folders namely `composer`, `symfony`, and `solarium`. The `autoload.php`
    file contains the code to load Solarium library in our PHP code. Other folders
    are self explanatory. The `solarium` folders is the library and the `symfony`
    folder contains a dependency known as event dispatcher, which is being used by
    Solarium. The `composer` folder contains files which help in loading all the required
    libraries in PHP.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到在安装过程中，`symfony event dispatcher`和`solarium library`被下载到一个名为`vendor`的单独文件夹中。让我们检查`vendor`文件夹的内容。它包括一个名为`autoload.php`的文件和三个文件夹，分别是`composer`、`symfony`和`solarium`。`autoload.php`文件包含了在我们的PHP代码中加载Solarium库的代码。其他文件夹都是不言自明的。`solarium`文件夹是库，`symfony`文件夹包含一个名为事件分发器的依赖项，这是Solarium正在使用的。`composer`文件夹包含帮助在PHP中加载所有所需库的文件。
- en: Executing ping queries on Solr using PHP and Solarium library
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP和Solarium库在Solr上执行ping查询
- en: For using the Solarium library, we need to load the Solarium library in our
    PHP code. Let us see how to execute the same ping query that we fired earlier
    using PHP and Solarium.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Solarium库，我们需要在我们的PHP代码中加载Solarium库。让我们看看如何使用PHP和Solarium执行与之前发出的相同的ping查询。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We have installed Solarium inside the `code` folder in our Apache `documentroot`.
    Apache `documentRoot` points to `~/htdocs` (inside our home folder).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在Apache `documentroot`的`code`文件夹内安装了Solarium。Apache `documentRoot`指向`~/htdocs`（在我们的主文件夹内）。
- en: 'First include the Solarium library in our code using the following line of
    code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在我们的代码中包含Solarium库，使用以下代码行：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a Solarium configuration array that defines how to connect to Solr.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个Solarium配置数组，定义如何连接到Solr。
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Solarium has the concept of endpoints. An **endpoint** is basically a collection
    of settings that can be used to connect to a Solr server and a core. For each
    query that we execute via Solarium, we can specify an endpoint using which we
    want to execute the query. If no endpoint is specified, the query is executed
    using the first endpoint, which is the default endpoint. The benefit of using
    endpoints is that we need to create a single Solarium client instance irrespective
    of the number of servers or cores we use.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Solarium有端点的概念。**端点**基本上是一组设置，可用于连接到Solr服务器和核心。对于我们通过Solarium执行的每个查询，我们可以指定一个端点，使用该端点执行查询。如果未指定端点，则使用第一个端点执行查询，即默认端点。使用端点的好处是，我们需要创建一个Solarium客户端实例，而不管我们使用的服务器或核心数量如何。
- en: Create the Solarium client with the configuration we created earlier. And call
    the `createPing()` function to create the ping query.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们之前创建的配置创建Solarium客户端。并调用`createPing()`函数创建ping查询。
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally execute the ping query and get the result using the following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 最后执行ping查询并使用以下命令获取结果：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It can be seen that the result is an array. But we can also call the `getStatus()`
    function to get the ping''s status. We can execute the code using PHP command
    line or call the following URL to see the result:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 可以看到结果是一个数组。但是我们也可以调用`getStatus()`函数来获取ping的状态。我们可以使用PHP命令行执行代码，或者调用以下URL来查看结果：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: More about endpoints
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多关于端点的信息
- en: 'Solarium provides us with the flexibility of adding multiple Solr servers as
    endpoints and using a single Solarium client to fire query on any Solr server.
    To add another endpoint to our Solarium configuration for Solr running on another
    port `8983` on our `localhost` and to use it to execute our query, we will use
    the following code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Solarium为我们提供了在多个Solr服务器上添加多个端点并使用单个Solarium客户端在任何Solr服务器上执行查询的灵活性。要为运行在`localhost`上的另一个端口`8983`上的Solr添加另一个端点，并使用它来执行我们的查询，我们将使用以下代码：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The Solarium client provides functionality of adding and removing endpoints
    using the `addEndpoint(array $endpointConfig)` and `removeEndpoint(string $endpointName)`
    functions. To modify an endpoint during runtime, we can call `getEndpoint(String
    $endPointName)` to get the endpoint and the use functions such as `setHost(String
    $host)`, `setPort(int $port)`, `setPath(String $path)`, and `setCore(String $core)`
    to change the endpoint settings. Additional settings provided for endpoints are:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Solarium客户端提供了使用`addEndpoint(array $endpointConfig)`和`removeEndpoint(string
    $endpointName)`函数添加和删除端点的功能。要在运行时修改端点，我们可以调用`getEndpoint(String $endPointName)`来获取端点，然后使用`setHost(String
    $host)`、`setPort(int $port)`、`setPath(String $path)`和`setCore(String $core)`等函数来更改端点设置。端点提供的其他设置有：
- en: The `setTimeout(int $timeout)` setting is used for specifying a timeout for
    a Solr connection
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setTimeout(int $timeout)`设置用于指定Solr连接的超时时间'
- en: The `setAuthentication(string $username, string $password)` setting is used
    for providing authentication if your Solr or Tomcat requires HTTP authentication
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setAuthentication(string $username, string $password)`设置用于在Solr或Tomcat需要HTTP身份验证时提供身份验证'
- en: The `setDefaultEndpoint(string $endpoint)` setting can be used to set the default
    endpoint for a Solarium client
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setDefaultEndpoint(string $endpoint)`设置可用于为Solarium客户端设置默认端点'
- en: Checking Solr query logs
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查Solr查询日志
- en: 'We have now been able to execute a ping query on Solr using the Solarium library.
    To see how this works, open up Tomcat logs. It can be found at `<tomcat_path>/logs/solr.log`
    or `<tomcat_path>/logs/catalina.out`. On Linux, we can do a tail of the log to
    see fresh entries as they appear:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经能够使用Solarium库在Solr上执行ping查询。要了解这是如何工作的，请打开Tomcat日志。它可以在`<tomcat_path>/logs/solr.log`或`<tomcat_path>/logs/catalina.out`中找到。在Linux上，我们可以对日志进行tail操作，以查看新条目的出现：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'On running the cURL-based PHP code that we wrote earlier, we can see the following
    hits in the log:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 运行我们之前编写的基于cURL的PHP代码后，我们可以在日志中看到以下命中：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: On running the Solarium-based code, we get similar output but with an additional
    parameter `omitHeader=true`. This parameter causes the response header to be ignored
    in the output.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 运行基于Solarium的代码后，我们得到了类似的输出，但是还有一个额外的参数`omitHeader=true`。这个参数会导致忽略输出中的响应头。
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: So eventually, Solarium also creates a Solr URL and makes a cURL call to Solr
    to fetch the results. How does Solarium know which Solr server to hit? This information
    is provided in the endpoint settings in the `$config` parameter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，Solarium也会创建一个Solr URL并向Solr发出cURL调用以获取结果。Solarium如何知道要访问哪个Solr服务器？这些信息是在`$config`参数中的端点设置中提供的。
- en: Solarium adapters
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Solarium适配器
- en: 'What about systems that do not have cURL installed? Solarium comes with a concept
    of **adapters**. Adapters define the way in which PHP will communicate with the
    Solr server. The default adapter is cURL, which we used earlier. But in the absence
    of cURL, the adapter can be switched to HTTP. **CurlAdapter** is dependent on
    the curl utility, which needs to be installed or enabled separately. **HttpAdapter**
    on the other hand uses the `file_get_contents()` PHP function to get a Solr response.
    This uses more memory and is not recommended when the numbers of queries on Solr
    are very large. Let us see the code to switch adapter in Solarium:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 那些没有安装cURL的系统怎么办？Solarium具有**适配器**的概念。适配器定义了PHP与Solr服务器通信的方式。默认适配器是cURL，我们之前使用过。但是在没有cURL的情况下，适配器可以切换到HTTP。**CurlAdapter**依赖于curl实用程序，需要单独安装或启用。另一方面，**HttpAdapter**使用`file_get_contents()`
    PHP函数来获取Solr响应。这会使用更多的内存，在Solr上的查询数量很大时不建议使用。让我们看看在Solarium中切换适配器的代码：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: We can call `getAdapter()` to check the current adapter. There are other adapters
    available—the **ZendHttp** adapter that is used with Zend Framework. There is
    a **PeclHttp** adapter, which uses the `pecl_http` package to make HTTP calls
    to Solr. The HTTP, Curl, and Pecl adapter support authentication, which can be
    used by the `setAuthentication()` function discussed earlier. **CurlAdapter**
    also supports the usage proxy. You can also create a custom adapter using the
    adapter interface if required.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调用`getAdapter()`来检查当前的适配器。还有其他可用的适配器——**ZendHttp**适配器与Zend Framework一起使用。还有一个**PeclHttp**适配器，它使用`pecl_http`包来向Solr发出HTTP调用。HTTP、Curl和Pecl适配器支持身份验证，可以通过之前讨论的`setAuthentication()`函数来使用。**CurlAdapter**还支持使用代理。如果需要，您还可以使用适配器接口创建自定义适配器。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have successfully installed Solr as a part of Apache Tomcat server. We saw
    how to communicate with Solr using PHP and cURL but without using a library. We
    discussed a few libraries and concluded that Solarium is feature rich and an actively
    developed and maintained library. We were able to install Solarium and were able
    to communicate with Solr using PHP and Solarium library. We were able to see actual
    queries being executed on Solr in the Solr logs. We explored some features of
    the Solarium client library such as endpoints and adapters.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地将Solr安装为Apache Tomcat服务器的一部分。我们看到了如何使用PHP和cURL与Solr通信，但没有使用库。我们讨论了一些库，并得出结论，Solarium功能丰富，是一个积极开发和维护的库。我们能够安装Solarium并能够使用PHP和Solarium库与Solr通信。我们能够在Solr日志中看到实际的查询被执行。我们探索了Solarium客户端库的一些功能，如端点和适配器。
- en: In the next chapter we will see how to use the Solarium library for inserting,
    updating, and deleting documents in Solr using our PHP code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用Solarium库来使用我们的PHP代码向Solr插入、更新和删除文档。
