- en: Chapter 15. Remove Repeated Logic in Page Scripts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。删除页面脚本中的重复逻辑
- en: As things are now, the logic in our page scripts is highly repetitive. They
    all look very similar. Each one loads a setup script, instantiates a series of
    dependencies for a page controller, invokes that controller, and sends the response.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的页面脚本中的逻辑非常重复。它们看起来都非常相似。每个页面加载一个设置脚本，为页面控制器实例化一系列依赖项，调用该控制器，并发送响应。
- en: Our front controller gives us a place where we can execute the common elements
    of each page script and remove that repetition. Once the repetition has been removed,
    we can begin to eliminate the page scripts themselves.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的前端控制器为我们提供了一个地方，可以执行每个页面脚本的通用元素并消除重复。一旦重复被移除，我们就可以开始消除页面脚本本身。
- en: Repeated logic
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重复的逻辑
- en: 'In essence, each of our page scripts follows this organizational flow:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，我们的每个页面脚本都遵循这个组织流程：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Because we have been diligent about always using the same variable name for
    our controller object (`$controller`), always using the same method name for invoking
    it (`__invoke()`), and always using the same variable name for the response (`$response`),
    we can see that the only part of each page script that is different is the central
    section. That central block builds the controller object. Everything before and
    after is identical.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们一直都很勤奋地使用相同的变量名来表示我们的控制器对象（`$controller`），始终使用相同的方法名来调用它（`__invoke()`），并且始终使用相同的变量名来表示响应（`$response`），我们可以看到每个页面脚本唯一不同的部分是中心部分。中心块构建了控制器对象。之前和之后的一切都是相同的。
- en: Further, because we have a front controller to handle all incoming requests,
    we now have a place to put the common before and after logic of every page script.
    That is what we will do here.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，因为我们有一个前端控制器来处理所有传入的请求，现在我们有一个地方可以放置每个页面脚本的通用前后逻辑。这就是我们要做的。
- en: The Removal Process
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移除过程
- en: 'In general, the removal process is as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，移除过程如下：
- en: Modify the front controller to add setup, controller invocation, and response
    sending.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改前端控制器以添加设置、控制器调用和响应发送。
- en: Modify each page script to remove the setup, controller invocation, and response
    sending.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改每个页面脚本以删除设置、控制器调用和响应发送。
- en: Spot check, commit, push, and notify QA.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查，提交，推送，并通知QA。
- en: Modify the Front controller
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改前端控制器
- en: 'First, we modify the front controller logic to perform the logic common to
    every page script. We change it from the code listed in the previous chapter to
    something more like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们修改前端控制器逻辑，执行每个页面脚本通用的逻辑。我们将其从上一章中列出的代码更改为以下内容：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have replaced the line that requires the `Router` class file with a line
    that requires the setup script. (Way back in the chapter on autoloading, we put
    the autoloader into our setup script, so it should be autoloading the `Router`
    class for us now.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经用一个需要`Router`类文件的行替换了一个需要设置脚本的行。（在自动加载的章节中，我们将自动加载器放入了我们的设置脚本中，所以现在它应该为我们自动加载`Router`类。）
- en: We have also added two lines after requiring the file `$route` to the page script.
    These invoke the controller and set the response. We use the common variable names
    for the controller and response objects in this shared logic. (If you chose something
    other than `$controller` and `$response` in the page scripts, replace those in
    the above script. Similarly, if you used a common controller method other than
    `__invoke()`, replace that as well.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在页面脚本中需要`$route`文件后添加了两行。这些行调用了控制器并设置了响应。我们在这个共享逻辑中使用了控制器和响应对象的通用变量名。（如果你在页面脚本中选择了除`$controller`和`$response`之外的其他变量名，也请在上面的脚本中替换它们。同样，如果你使用了除`__invoke()`之外的通用控制器方法，请也替换它。）
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the setup work is going to be specific to our legacy application.
    As long as the setup work is the same for every page script (which it should be
    at this point) placing the common setup work here will be just fine.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，设置工作将是特定于我们的旧应用程序。只要每个页面脚本的设置工作都是相同的（在这一点上应该是这样），将通用设置工作放在这里就可以了。
- en: Remove Logic from Page Scripts
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从页面脚本中删除逻辑
- en: Now that we have added setup, controller invocation, and response-sending work
    to the front controller, we can remove that same work from each page script. Doing
    so should be as easy as doing a project-wide search in the `pages/` directory
    and deleting the found lines.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将设置、控制器调用和响应发送工作添加到前端控制器中，我们可以从每个页面脚本中删除相同的工作。这样做应该就像在`pages/`目录中进行项目范围的搜索并删除找到的行一样简单。
- en: 'Finding the setup lines probably requires a regular expression, since the relative
    location of the setup scripts may result in lines that use relative directory
    traversals. The following regular expression will find `includes/setup.php`, `../includes/setup.php`,
    `dirname(__DIR__)` . `/includes/setup.php`, and so on:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 找到设置行可能需要使用正则表达式，因为设置脚本的相对位置可能导致使用相对目录遍历的行。以下正则表达式将找到`includes/setup.php`，`../includes/setup.php`，`dirname(__DIR__)`
    . `/includes/setup.php`等：
- en: 'Search for setup:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索设置：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: However, finding the controller invocation and response-sending lines should
    not require a regular expression, since they should be identical in every page
    script.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，找到控制器调用和响应发送行不应该需要使用正则表达式，因为它们在每个页面脚本中应该是相同的。
- en: Search for controller invocation …
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索控制器调用…
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Search for response sending …
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索响应发送…
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In each case, delete the found line. It is no longer needed now that the logic
    has been moved to the front controller.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，删除找到的行。现在这些逻辑已经移动到前端控制器中，不再需要。
- en: Spot Check, Commit, Push, Notify QA
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查，提交，推送，并通知QA
- en: Once the repeated page script logic has been removed in favor of the same logic
    placed in the front controller, we can spot check the application. We do so by
    running our characterization tests if they exist, or by browsing to or otherwise
    invoking each page in the application if they do not.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦重复的页面脚本逻辑被移除，我们可以通过运行特性测试或浏览或以其他方式调用应用程序中的每个页面来检查应用程序。
- en: After we are sure that the application still works properly, we commit our new
    code and push it to the common repository. Then we notify QA that we have new
    work for them to review.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在确保应用程序仍然正常工作之后，我们提交新代码并将其推送到公共存储库。然后我们通知质量保证部门，我们有新的工作需要他们审查。
- en: Common Questions
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: What if the Setup Work Is Inconsistent?
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果设置工作不一致会怎么样？
- en: In the examples throughout this book, we have shown only a single script doing
    the setup work for each page script. Some legacy applications may use more than
    one setup script. As long as the setup work is identical across each page script,
    even if it is composed of more than one script, then we can move all the setup
    work to the front controller.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的示例中，我们只展示了一个脚本为每个页面脚本做设置工作。一些传统应用程序可能使用多个设置脚本。只要设置工作在每个页面脚本中是相同的，即使它由多个脚本组成，我们也可以将所有设置工作移动到前端控制器中。
- en: However, if the setup work is not identical across each page script, we have
    a problem to deal with. If the page scripts do not enjoy an identical setup process
    at this point, we should do what we can to address that before continuing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果设置工作在每个页面脚本中不一致，我们就有问题要处理。如果在这一点上，页面脚本的设置过程不相同，我们应该在继续之前尽力解决这个问题。
- en: It is imperative that we make the setup work identical in all page scripts.
    This may mean including all the different setup work from all page scripts in
    the front controller, even if some scripts don't need all that setup work. We
    can remedy this overlap the next chapter if necessary.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有页面脚本中使设置工作相同是至关重要的。这可能意味着在前端控制器中包含所有页面脚本的不同设置工作，即使有些脚本不需要所有这些设置工作。如果必要，我们可以在下一章解决这种重叠。
- en: If we cannot enforce an identical single-stage setup process, we may have to
    pursue a dual or two-stage setup process. First, we consolidate common setup work
    into the front controller and remove it from the page scripts. Extraneous, special-case,
    or page-specific setup work can remain with the page script as a degenerate but
    necessary part of the dependency creation work.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们无法强制执行相同的单阶段设置过程，我们可能需要进行双阶段或两阶段设置过程。首先，我们将常见的设置工作合并到前端控制器中，并将其从页面脚本中删除。多余的、特殊情况或特定页面的设置工作可以作为依赖项创建工作的退化但必要的部分留在页面脚本中。
- en: What if we used inconsistent naming?
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果我们使用了不一致的命名？
- en: In previous chapters, this book emphasizes the importance of consistent naming.
    This chapter is the point at which that consistency pays off.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，本书强调了一致命名的重要性。这一章是一致性得到回报的时刻。
- en: If we discover we have been inconsistent in our naming of the controller object
    variable and/or the controller method name, all is not lost. We will not be able
    to do a one-pass search-and-replace, but we can still work through each page script
    manually and change the names to be consistent. Then the newly consistent names
    can be used by the front controller.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们发现在控制器对象变量和/或控制器方法名称的命名上不一致，也不是没有办法。我们可能无法进行一次性搜索和替换，但我们仍然可以手动处理每个页面脚本，并将名称更改为一致。然后前端控制器可以使用新的一致名称。
- en: Review and next steps
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查和下一步
- en: With this step, we have reduced our page scripts to a bare core of logic. All
    they do now is set up dependencies for, and then create, a controller object.
    The front controller does everything before that, and everything after.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一步，我们将页面脚本减少到了一个基本的逻辑核心。现在它们所做的就是为控制器对象设置依赖项，然后创建控制器对象。前端控制器在此之前和之后都做了一切。
- en: As it happens, even this logic can be extracted from the page scripts. An object
    called a dependency injection container can receive the object creation logic
    as series of closures, one closure per page script. The container can handle the
    object creation for us and we can remove the page scripts entirely.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，即使这个逻辑也可以从页面脚本中提取出来。一个称为依赖注入容器的对象可以接收对象创建逻辑作为一系列闭包，每个页面脚本一个闭包。容器可以为我们处理对象创建，我们可以完全删除页面脚本。
- en: Thus, our final refactoring will extract all object creation logic to a dependency
    injection container. We will also modify our front controller to instantiate controller
    objects instead of requiring page scripts. In doing so, we will have removed all
    of our page scripts and our application will have a fully modernized architecture.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们最终的重构将把所有对象创建逻辑提取到一个依赖注入容器中。我们还将修改我们的前端控制器，实例化控制器对象，而不是要求页面脚本。这样做，我们将删除所有页面脚本，我们的应用程序将拥有一个完全现代化的架构。
