- en: Chapter 2. Automating Tests – Migrating and Seeding Your Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。自动化测试-迁移和种子数据库
- en: So far, we have created some base models and the general outline of the database.
    Now, we need to create database migrations and seeding. Traditionally, database
    "dump" files have been used as a way to pass around both the schema, which is
    the structure of the tables, and the data, which would be the initial or predefined
    records, such as default values; unchanging lists, such as cities or countries;
    and users such as "admin". These dump files that contain SQL can be committed
    to source code control. This is not always the best way to maintain the integrity
    of the database; since every time a developer adds records or modifies the database,
    all of the developers in the team would need to drop and recreate the database
    or add or delete the data, tables, rows, columns, or indexes manually. Migrations
    allow the database to live in the form of code, actually residing inside the Laravel
    project, as well as to be versioned within source code control.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一些基本模型和数据库的概要。现在，我们需要创建数据库迁移和种子。传统上，数据库“dump”文件被用作传递表结构和数据的方式，包括初始或预定义记录，如默认值；不变的列表，如城市或国家；以及用户，如“admin”。这些包含SQL的转储文件可以提交到源代码控制。这并不总是维护数据库完整性的最佳方式；因为每当开发人员添加记录或修改数据库时，团队中的所有开发人员都需要手动添加或删除数据、表、行、列或索引，或者删除并重新创建数据库。迁移允许数据库以代码形式存在，实际上驻留在Laravel项目内，并在源代码控制中进行版本控制。
- en: Migrations are run from the command line and can also be automated to automatically
    create the database, whenever required if it doesn't already exist, or drop and
    recreate the tables and populate the tables if they already exist. Migrations
    have existed for a while in Laravel, so their presence in Laravel 5 is not surprising.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移是从命令行运行的，也可以自动化，以在需要时自动创建数据库（如果不存在），或删除并重新创建表并填充表（如果已存在）。迁移在Laravel中已经存在一段时间，因此它们在Laravel
    5中的存在并不令人惊讶。
- en: Using Laravel's migration feature
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Laravel的迁移功能
- en: 'The first step is to run the `artisan` command:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是运行`artisan`命令：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create a table named `migration`, which has two columns: `migration`,
    which is a varchar 255 in MySQL, and `batch`, which is an integer. This table
    will be used by Laravel to keep track of which migrations have been run. In other
    words, it maintains a history of all of the operations that have been performed.
    The following is a list of the main operations:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`migration`的表，其中包含两列：`migration`是MySQL中的varchar 255，`batch`是整数。这个表将被Laravel用来跟踪已运行的迁移。换句话说，它维护了所有已执行操作的历史记录。以下是主要操作的列表：
- en: '`install`: As mentioned earlier, this operation installs'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`：如前所述，此操作安装'
- en: '`refresh`: This operation resets and reruns all of the migrations'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refresh`：此操作重置并重新运行所有迁移'
- en: '`reset`: This operation rolls back all of migrations'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reset`：此操作回滚所有迁移'
- en: '`rollback`: This operation is a type of "undo", and simply rolls back the last
    operation'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rollback`：此操作是一种“撤消”类型，只是回滚上一个操作'
- en: '`status`: This operation produces a table-like output of the migrations and
    states whether or not they have been run'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`：此操作生成迁移的类似表格的输出，并指出它们是否已运行'
- en: An example of migration
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迁移示例
- en: Laravel 5 contains two migrations in the `/database/migrations` directory.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5在`/database/migrations`目录中包含两个迁移。
- en: The first migration creates the `users` table.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个迁移创建了`users`表。
- en: 'The second one creates the `password_resets` table, which, as you may have
    guessed, is used to recover lost passwords. Unless specified, the migrations operate
    on the database that is configured in the `/config/database.php` configuration
    file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个创建`password_resets`表，正如你可能已经猜到的，用于恢复丢失的密码。除非指定，迁移操作的是在`/config/database.php`配置文件中配置的数据库：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Migrations extend the `Migration` class and use the `Blueprint` class.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移扩展了`Migration`类并使用`Blueprint`类。
- en: 'There are two methods: `up` and `down`, which are used when the `migrate` commands
    and the `rollback` commands are used, respectively. The `Schema::create()` method
    is called with the table name as the first parameter and a function callback as
    the second parameter, which accepts an instance of a `Blueprint` object as a parameter.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法：`up`和`down`，分别在使用`migrate`命令和`rollback`命令时使用。`Schema::create()`方法以表名作为第一个参数调用，并以函数回调作为第二个参数，接受`Blueprint`对象的实例作为参数。
- en: Creating the table
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建表
- en: The `$table` object has a few methods that perform tasks such as creating indexes,
    setting up auto-increment fields, stating which type of fields should be created,
    and passing the name of the field as a parameter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`$table`对象有一些方法，执行任务，如创建索引，设置自增字段，指定应创建的字段类型，并将字段名称作为参数传递。'
- en: The first command is used to create an auto-increment field `id`, which will
    be the primary key of the table. Then, string fields, such as `name`, `email`,
    and `password` are created. Note that the unique method is chained to the `create`
    statement for the `email` field, stating that the `email` field will be used as
    the login name/user ID, as this is a common practice in most modern web applications.
    The `rememberToken` is used to allow the user to remain authenticated per each
    session. This token gets reset on each login and logout, protecting the user from
    a potentially malicious hijacking attempt.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令用于创建自增字段`id`，这将是表的主键。然后，创建字符串字段，如`name`、`email`和`password`。请注意，`unique`方法链接到`email`字段的`create`语句，说明`email`字段将用作登录名/用户ID，这是大多数现代Web应用程序的常见做法。`rememberToken`用于允许用户在每个会话中保持身份验证。此令牌在每次登录和注销时重置，保护用户免受潜在的恶意劫持尝试。
- en: The Laravel migration magic
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel迁移魔法
- en: Laravel migrations are also capable of creating timestamp fields that are used
    to automatically store creation and update information for each model through
    its table row.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 迁移还能够创建时间戳字段，用于自动存储每个模型的创建和更新信息。
- en: $table->timestamps();
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: $table->timestamps();
- en: 'The following line of code tells the migration to automatically create two
    columns in the table, namely `created_at` and `updated_at`, which is automatically
    used by Laravel''s Eloquent **Object-relational mapping** (**ORM**) to allow the
    application to know when the object was created and when it was updated:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码告诉迁移自动在表中创建两列，即 `created_at` 和 `updated_at`，这是 Laravel 的 Eloquent **对象关系映射**
    (**ORM**) 自动使用的，以便应用程序知道对象何时创建和何时更新：
- en: '`$table->timestamps()`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`$table->timestamps()`'
- en: 'In the following example, the fields are updated as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，字段更新如下：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another great Laravel feature is the soft delete field. This provides a type
    of **recycle bin** to allow the data to be optionally restored at a later time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很棒的 Laravel 功能是软删除字段。这提供了一种**回收站**，允许数据在以后可选地恢复。
- en: 'This feature simply adds another column to the table to allow soft deleting
    of the data. The code to be added to the migration looks like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能简单地向表中添加了另一列，以允许软删除数据。要添加到迁移中的代码如下所示：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This adds a column to the `database, deleted_at,` which will either have `null`
    as its value or a timestamp to indicate when the record was deleted. This builds
    a recycle bin feature right into your database application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 `数据库, deleted_at,` 中添加了一列，它的值可以是 `null`，也可以是一个时间戳，表示记录被删除的时间。这在您的数据库应用程序中构建了一个回收站功能。
- en: 'Run the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The migration is initiated and the tables are created. The **migration** table
    now appears, as shown in the following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移已启动并创建了表。现在出现了**迁移**表，如下截图所示：
- en: '![$table->timestamps();](graphics/B04559_02_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![$table->timestamps();](graphics/B04559_02_01.jpg)'
- en: 'The structure of the `users` table is shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`users` 表的结构如下截图所示：'
- en: '![$table->timestamps();](graphics/B04559_02_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![$table->timestamps();](graphics/B04559_02_02.jpg)'
- en: 'To rollback the migration, run the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要回滚迁移，请运行以下命令：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `rollback` command uses the migration table to determine which actions to
    rollback. In this case, the `migrations` table, after it has been run, is now
    empty.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`rollback` 命令使用迁移表来确定要回滚的操作。在这种情况下，运行后的 `migrations` 表现在是空的。'
- en: From schema to migration
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从模式到迁移
- en: A common situation that occurs during the development process is that a schema
    is created, and then, we need to create a migration from that schema. At the time
    of writing, there is no official tool to do this in the Laravel core, but there
    are several packages available.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中经常发生的一种情况是创建了一个模式，然后我们需要从该模式创建一个迁移。在撰写本文时，Laravel 核心中没有官方工具可以做到这一点，但有几个可用的包。
- en: One such package is the `migrations-generator` package.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个这样的包是 `migrations-generator` 包。
- en: 'First, add the following line to the `require-dev` section of the `composer.json`
    file to require the `migrations-generator` dependency in the `composer.json` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 `composer.json` 文件的 `require-dev` 部分中添加以下行，以在 `composer.json` 文件中要求 `migrations-generator`
    依赖项：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It is also necessary to add the following text to the `composer.json` file
    at the root level:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要在根级别的 `composer.json` 文件中添加以下文本：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Composer's require-dev command
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Composer 的 require-dev 命令
- en: The `require-dev` command, as opposed to `require`, is a mechanism of a composer
    that allows certain packages that are needed only in the development phase. Most
    testing tools and migration tools will only be used in the local development machine,
    QA machine, and/or in a continuous integration environment, but not in the production
    environment. This mechanism keeps your production installation free of unnecessary
    packages.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`require-dev` 命令与 `require` 相反，是 composer 的一种机制，允许只在开发阶段需要的某些包。大多数测试工具和迁移工具只会在本地开发机器、QA
    机器和/或持续集成环境中使用，而不会在生产环境中使用。这种机制可以使您的生产安装不受不必要的包的影响。'
- en: Laravel's providers array
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Laravel 的提供者数组
- en: Laravel's `providers` array in the `config/app.php` file lists the providers
    that are available to Laravel at all times.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 的 `providers` 数组在 `config/app.php` 文件中列出了 Laravel 随时可用的提供者。
- en: 'We will add both the `way generator` and the `Xethron migration` service providers:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加 `way generator` 和 `Xethron migration` 服务提供者：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The composer update command
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: composer update 命令
- en: The `composer update` command is a simple, yet powerful way to make sure that
    everything that needs to be in place is actually working and free of errors. After
    running this command, we're now ready to run the migrations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`composer update` 命令是一种简单而强大的方式，确保一切都在适当的位置，并且没有错误。运行此命令后，我们现在准备运行迁移。'
- en: Generating the migrations
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成迁移
- en: 'Simply type the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只需输入以下命令：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `artisan` command will display a list of all of the possible commands. The
    `migrate:generate` command should be included on the list of valid commands. If
    this command is not on the list, then something is not configured correctly.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`artisan` 命令将显示所有可能的命令列表。`migrate:generate` 命令应该包含在有效命令列表中。如果此命令不在列表中，则说明某些配置不正确。'
- en: 'Once you confirm that the `migrate:generate` command exists in the list, simply
    run the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 确认 `migrate:generate` 命令存在于列表中后，只需运行以下命令：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will start the process.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动该过程。
- en: In this example, we have used the MySQL database. By entering `Y` when prompted,
    the process will begin and the output should show one migration file created for
    each table in the database.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了 MySQL 数据库。在提示时输入 `Y`，进程将开始，输出应该显示为数据库中的每个表创建了一个迁移文件。
- en: 'This is how your command prompt should appear at the end:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您的命令提示符在最后应该显示的样子：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Migration anatomy
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移解剖
- en: 'Consider an example of one of the lines in the migration file; we can see that
    the table object is used in a chain of methods. The following line of the migration
    file sets up the state attributes in the location eloquent attribute in the `locations`
    table:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑迁移文件中的一行的示例；我们可以看到表对象在一系列方法中使用。迁移文件的以下行设置了位置优雅属性中的状态属性在`locations`表中：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: List tables
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出表
- en: Often, it is necessary to create or import a list of finite items that usually
    remain constant, such as cities, states, countries, and similar items. Let's call
    these list tables or lookup tables. In these tables, the ID should usually be
    positive. These lists may grow, but they usually will not have any data that is
    deleted or updated. The `smallInteger` type is used to keep the table small and
    also represent a value that belongs to a finite list, something that will not
    grow naturally. The next method, `unsigned`, states that the limit will be 65535\.
    This value should be enough to represent most of the states, provinces, or similar
    types of geographical regions where a hotel could be located. The last method
    in the chain adds an index to the database column. This is essential in list tables
    like these, which are used in the `select` statements or in the `read` statements.
    The `Read` statements will be discussed in [Chapter 9](ch09.html "Chapter 9. Scaling
    Laravel"), *Scaling Laravel*. It is important to use unsigned, as it doubles the
    positive limit, which otherwise would be 32767\. Using the index, we can speed
    up the look up time and access a cached version of the data in the table.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通常需要创建或导入通常保持不变的有限项目列表，例如城市、州、国家和类似项目。让我们称这些列表表或查找表。在这些表中，ID通常应为正数。这些列表可能会增长，但通常不会删除或更新任何数据。`smallInteger`类型用于保持表的小型，并且表示属于有限列表的值，这些值不会自然增长。下一个方法`unsigned`表示限制将为65535。这个值应该足以表示大多数州、省或类似类型的地理区域，酒店可能位于其中。链中的最后一个方法向数据库列添加索引。这在这样的列表表中是必不可少的，这些列表表用于`select`语句或`read`语句中。`Read`语句将在[第9章](ch09.html
    "第9章。扩展Laravel")*扩展Laravel*中讨论。使用unsigned很重要，因为它将正限制加倍，否则将是32767。使用索引，我们可以加快查找时间并访问表中数据的缓存版本。
- en: The softDelete and timestamp properties
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软删除和时间戳属性
- en: 'Regarding `softDeletes` and `timestamps` for list tables, it depends. If the
    table is not very large, it shouldn''t be too harmful to keep track of any updates,
    inserts, or deletions if they do happen; however, if the list consists of countries,
    where changes occur infrequently and are very small, it would be prudent to omit
    `softDeletes` and `timestamps`. So, the entire table will probably fit into the
    memory and will be very fast. To omit timestamps, it''s necessary to add the following
    line of code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 关于列表表的`softDeletes`和`timestamps`，这取决于。如果表不是很大，跟踪更新、插入或删除不会太有害；但是，如果列表包含国家，其中更改不经常发生且非常小，最好省略`softDeletes`和`timestamps`。因此，整个表可能适合内存，并且速度非常快。要省略时间戳，需要添加以下代码行：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating seeds
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建种子
- en: 'To create our database seeder, we will modify the `DatabaseSeeder` class that
    extends `Seeder`. The name of the file is `database/seeds/DatabaseSeeder.php`.
    The contents of the file will be as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的数据库seeder，我们将修改扩展`Seeder`的`DatabaseSeeder`类。文件的名称是`database/seeds/DatabaseSeeder.php`。文件的内容将如下所示：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The seeder file sets up the very basic possible scenario. For initial testing,
    we don't need to even add every country, state, city, and location possible to
    the database; we simply need to add the essential information to create various
    scenarios. To create a new reservation; for example, we will create an instance
    of each of the user, country, state, city, location, and accommodation models,
    and then create two rooms, which are added to an array of rooms.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: seeder文件设置了可能的最基本的场景。对于初始测试，我们不需要将每个国家、州、城市和可能的位置都添加到数据库中；我们只需要添加必要的信息来创建各种场景。例如，要创建一个新的预订；我们将创建每个用户、国家、州、城市、位置和住宿模型的实例，然后创建两个房间，这些房间将添加到房间数组中。
- en: 'Let''s create a repository for the reservation that will implement a very simple
    repository interface:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为预订创建一个实现非常简单的存储库接口的存储库：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now let''s create `ReservationRepository`, which implements `RepositoryInterface`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建`ReservationRepository`，它实现`RepositoryInterface`：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we will create the method that is needed to create the reservation and
    also to populate the pivot table, `reservation_room`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建所需的方法来创建预订，并填充`reservation_room`的中间表：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `array_except()` Laravel helper is used to return the `attributes` array,
    except for the `$rooms` array, which will be used for the `sync()` function.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`array_except()` Laravel助手用于返回`attributes`数组，除了`$rooms`数组之外，该数组将用于`sync()`函数。'
- en: 'Here, we set each attribute of the model to the attributes that are set in
    the method. We will need to add the method that will establish the many-to-many
    relationship between the reservations and rooms:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将模型的每个属性设置为方法中设置的属性。我们需要添加将建立预订和房间之间多对多关系的方法：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this case, we need to add `withTimestamps()` to the relationship so that
    the timestamps will be updated, indicating when the relationship was saved in
    the `reservation_room` pivot table.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要向关系添加`withTimestamps()`，以便时间戳将被更新，指示关系何时保存在`reservation_room`中。
- en: Database testing with PHPUnit
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHPUnit进行数据库测试
- en: 'PHPUnit is well integrated with Laravel 5 as it was with Laravel 4, so it is
    rather easy to set up the testing environment. A good method for testing would
    be to use the SQLite database and to set it up to reside in the memory, but you
    need to modify the `config/database.php` file, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: PHPUnit与Laravel 5集成良好，就像与Laravel 4一样，因此设置测试环境相当容易。测试的一个好方法是使用SQLite数据库，并将其设置为驻留在内存中，但是您需要修改`config/database.php`文件，如下所示：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we need to modify the `phpunit.xml` file to set a `DB_DRIVER` environment
    variable:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要修改`phpunit.xml`文件以设置`DB_DRIVER`环境变量：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we need to modify the following line in the `config/database.php` file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要修改`config/database.php`文件中的以下行：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We modify the preceding line to match with the following line:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改前面的行以匹配以下行：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, we will set up PHPUnit to run our migrations on the in-memory `sqlite`
    database.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将设置PHPUnit在内存中的`sqlite`数据库上运行我们的迁移。
- en: 'In the `tests` directory, there are two classes: a `TestCase` class that extends
    the `LaravelTestCase` class and an `ExampleTest` class that extends the `TestCase`
    class.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tests`目录中，有两个类：一个`TestCase`类，继承了`LaravelTestCase`类，和一个`ExampleTest`类，继承了`TestCase`类。
- en: 'We need to add two methods to `TestCase` to perform the migrations, run the
    seeder, and then revert the database back to its original state:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向`TestCase`添加两个方法来执行迁移，运行seeder，然后将数据库恢复到其原始状态：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we will create a PHPUnit test to verify that the data is being saved correctly
    in the database. We need to modify `tests/ExampleTest.php` to the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个PHPUnit测试来验证数据是否正确保存在数据库中。我们需要将`tests/ExampleTest.php`修改为以下代码：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Running PHPUnit
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行PHPUnit
- en: 'To start PHPUnit, simply type the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动PHPUnit，只需输入以下命令：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The tests will be run. Since the `create` method of the `Reservation` class
    returns a reservation, we may use the `assertInstanceOf` method of PHPUnit to
    determine whether or not a reservation was created in the database. We can add
    any other assertions to make sure that the values saved are exactly what we intended.
    For example, we can assert that the start date is equal to `''2015-10-01''` and
    the size of the `room` array is equal to `two`. Together with the `testBasicExample()`
    method, we can ensure that a `GET` request to `"/"` returns a `200`. The PHPUnit
    results will look like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 测试将会运行。由于`Reservation`类的`create`方法返回一个预订，我们可以使用PHPUnit的`assertInstanceOf`方法来确定数据库中是否创建了预订。我们可以添加任何其他断言来确保保存的值正是我们想要的。例如，我们可以断言开始日期等于`'2015-10-01'`，`room`数组的大小等于`two`。与`testBasicExample()`方法一起，我们可以确保对`"/"`的`GET`请求返回`200`。PHPUnit的结果将如下所示：
- en: '![Running PHPUnit](graphics/B04559_02_03.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: 运行PHPUnit
- en: 'Notice that there were two dots to represent the tests. **OK** means that nothing
    failed, and we are told again that there were two tests and four assertions; one
    assertion in the example and the other three, which we have added to our `testReserveRoomExample`
    test. Had we tested that there were three rooms instead of two, PHPUnit would
    have produced the following output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有两个点表示测试。**OK**表示没有失败，我们再次被告知有两个测试和四个断言；一个是在示例中的断言，另外三个是我们添加到`testReserveRoomExample`测试中的。如果我们测试了三个房间而不是两个，PHPUnit将产生以下输出：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Notice that instead of the second dot, we have an `F` for failure, and instead
    of `OK`, we''re told that there was `1` failure. PHPUnit then lists which tests
    failed, and nicely tells us the line that I deliberately modified to be incorrect,
    as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们有一个`F`表示失败，而不是第二个点，而不是`OK`，我们被告知有`1`个失败。然后PHPUnit列出了哪些测试失败，并很好地告诉我们我故意修改为不正确的行。
- en: '[PRE27]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The preceding line is indeed incorrect:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行确实是不正确的：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Remember that `2` is the value of the count `($reservationResult->rooms)`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`2`是`($reservationResult->rooms)`的计数值。
- en: Functional testing with Behat
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Behat进行功能测试
- en: While phpspec follows the BDD by specification and is useful for specification
    and design in isolation, its complimentary tool Behat is used for integration
    and functional tests. Since phpspec suggests to mock everything, database queries
    wouldn't actually be executed, as the database is outside the context of that
    method. Behat is a great tool to perform behavioral testing on a certain feature.
    While phpspec is already included among Laravel 5's dependencies, Behat will be
    installed as an external module.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然phpspec遵循BDD的规范，并且在隔离中很有用于规范和设计，但它的补充工具Behat用于集成和功能测试。由于phpspec建议对所有内容进行模拟，数据库查询实际上不会被执行，因为数据库在该方法的上下文之外。Behat是一个在某个功能上执行行为测试的好工具。虽然phpspec已经包含在Laravel
    5的依赖项中，但Behat将作为外部模块安装。
- en: 'The following command should be run to install and make Behat work with Laravel
    5:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 应该运行以下命令来安装并使Behat与Laravel 5一起工作：
- en: '[PRE29]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: After running the composer update, Behat's functionality is added to Laravel.
    Next, a `behat.yaml` file should be added to the root of the Laravel project to
    specify which extensions are to be used.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 运行composer update后，Behat的功能将添加到Laravel中。接下来，应在Laravel项目的根目录中添加一个`behat.yaml`文件，以指定要使用哪些扩展。
- en: 'Next, run the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will create a `features` directory with a `bootstrap` directory inside
    it. A `FeaturesContext` class will also be created. Everything inside bootstrap
    will be run every time `behat` is run. This is useful to automatically run migrations
    and seeding.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个`features`目录，里面有一个`bootstrap`目录。还将创建一个`FeaturesContext`类。`bootstrap`中的所有内容都将在每次运行`behat`时运行。这对于自动运行迁移和填充是有用的。
- en: 'The `features/bootstrap/FeaturesContext.php` file looks like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`features/bootstrap/FeaturesContext.php`文件如下：'
- en: '[PRE31]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, the `FeatureContext` class needs to extend the `MinkContext` class, so
    the class definition line will need to be modified as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`FeatureContext`类需要扩展`MinkContext`类，因此类定义行需要修改如下：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, the `prepare` and `cleanup` methods will be added to the class in order
    to perform the migrations. We will add the `@BeforeSuite` and `@AfterSuite` annotations
    to tell Behat to perform the migration and seeding before each suite and migrate
    to rollback in order to restore the database to its original state after each
    suite. Using annotations in the doc-block will be discussed in [Chapter 6](ch06.html
    "Chapter 6. Taming Complexity with Annotations"), *Taming Complexity with Annotations*.
    Our class now is structured as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将在类中添加`prepare`和`cleanup`方法以执行迁移。我们将添加`@BeforeSuite`和`@AfterSuite`注释，告诉Behat在每个套件之前执行迁移和种子，并在每个套件之后回滚以将数据库恢复到其原始状态。将在文档块中使用注释将在[第6章](ch06.html
    "第6章。使用注释驯服复杂性")中讨论，*使用注释驯服复杂性*。我们的类现在结构如下：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, a feature file needs to be created. Create `reservation.feature` in the
    room directory:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，需要创建一个功能文件。在room目录中创建`reservation.feature`：
- en: '[PRE34]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'When `behat` is run as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行`behat`如下时：
- en: '[PRE35]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following output is produced:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 产生以下输出：
- en: '[PRE36]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Behat, as did phpspec, skillfully produces the output, showing you the methods
    that need to be created. Notice that camel case is used instead of snake case.
    This code should be copied in to the `FeatureContext` class. Notice that, by default,
    an exception is thrown.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Behat，就像phpspec一样，熟练地生成输出，向您显示需要创建的方法。请注意，此处使用驼峰命名法而不是蛇形命名法。此代码应复制到`FeatureContext`类中。请注意，默认情况下会抛出异常。
- en: 'Here, the RESTful API will be called, so the guzzle HTTP package will need
    to be added to the project:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，将调用RESTful API，因此需要将guzzle HTTP包添加到项目中：
- en: '[PRE37]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Next, add an attribute to the class to hold the `guzzle` object. We will add
    a `POST` request to a RESTful resource controller to create a reservation and
    expect a 201 code. Notice that the return code is a string and needs to be casted
    to an integer. Next, a `get` is performed to return all of the reservations.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，向类添加一个属性来保存`guzzle`对象。我们将向RESTful资源控制器添加一个`POST`请求来创建预订，并期望获得201代码。请注意，返回代码是一个字符串，需要转换为整数。接下来，执行`get`以返回所有预订。
- en: 'There should only be one reservation created, since the migration and seeding
    run every time:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 应该只创建一个预订，因为迁移和种子每次运行时都会运行：
- en: '[PRE38]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, to create `ReservationController`, use artisan from the command line:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用命令行中的artisan来创建`ReservationController`：
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here are the contents of the reservation controller:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是预订控制器的内容：
- en: '[PRE40]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Lastly, add `ReservationController` to the `routes.php` file, which is located
    in `app/Http/routes.php`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将`ReservationController`添加到`routes.php`文件中，该文件位于`app/Http/routes.php`中：
- en: '[PRE41]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, when `behat` is run, the result is as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当运行`behat`时，结果如下：
- en: '[PRE42]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Configuring Laravel to create migration files from the existing schemas is also
    a useful framework for non-greenfield projects. By running both the migrations
    and seeding in the testing environment, each test can benefit from a completely
    clean version of the database, and the initial data that allows it to have "just
    enough" in the database to minimally verify that the software performs as it needs
    to. When legacy code needs to be ported to Laravel, PHPUnit can be used to test
    any existing functions. Behat provides a behavioral-based alternative, which can
    skillfully perform end-to-end testing.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 配置Laravel以从现有模式创建迁移文件也是非全新项目的一个有用框架。通过在测试环境中运行迁移和种子，每个测试都可以从数据库的完全干净版本中受益，并且可以通过初始数据最小地验证软件的执行是否符合需要。当需要将遗留代码移植到Laravel时，PHPUnit可以用于测试任何现有功能。Behat提供了一种基于行为的替代方案，可以熟练地执行端到端测试。
- en: We designed our classes using phpspec in an isolated environment, concentrating
    only on the business rules and client's requests while mocking things, such as
    the actual entities, such as rooms. We then verified that the actual queries were
    executed and saved in the database correctly by the use of a functional testing
    testing tool, PHPUnit. Finally, we used Behat to perform end-to-end testing.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用phpspec在一个独立的环境中设计了我们的类，只专注于业务规则和客户端的请求，同时模拟诸如实际实体（如房间）之类的事物。然后，我们通过使用功能测试工具PHPUnit验证了实际查询是否正确执行并保存在数据库中。最后，我们使用Behat执行端到端测试。
- en: In the next chapter, we'll see the creation of a RESTful API, the basic CRUD
    operations (create, read, update, and delete), and discuss some best practices.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到RESTful API的创建，基本的CRUD操作（创建，读取，更新和删除），并讨论一些最佳实践。
