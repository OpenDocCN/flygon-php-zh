- en: Chapter 7. Authentication and User Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。身份验证和用户管理
- en: In the previous chapter, we have gained a better understanding of the role the
    `database` class plays in the project, which is used every time the developer
    interacts with the database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们更好地理解了`数据库`类在项目中的作用，这在开发人员与数据库交互时使用。
- en: The only library that we used is called Whoops, which will show errors in a
    readable format. We also gained experience building default states, including
    `baseController` and `baseMethod`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的唯一库叫做Whoops，它将以可读格式显示错误。我们还获得了构建默认状态的经验，包括`baseController`和`baseMethod`。
- en: In this chapter, we will be focusing on the security aspect of the project,
    that is, authentication. We will be building login forms which interact with the
    database to verify the identity of the users. Finally, we will cover how to set
    up a password recovery mechanism in our application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于项目的安全方面，即身份验证。我们将构建登录表单，该表单与数据库交互以验证用户的身份。最后，我们将介绍如何在我们的应用程序中设置密码恢复机制。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Build the default views for their application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为他们的应用程序构建默认视图
- en: Build a password management and reset system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建密码管理和重置系统
- en: Build the CRUD for a module within the system application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为系统应用程序中的模块构建CRUD
- en: Setting Up Paths and Inclusion of Bootstrap
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置路径和包含Bootstrap
- en: In this section, we will continue to build features on top of the framework.
    The core framework system files are in place. This setup is used to build useful
    features on top of this.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将继续在框架的基础上构建功能。核心框架系统文件已经就位。这个设置用于在此基础上构建有用的功能。
- en: We will build the authentication system and complete the application build.
    Authentication is required to prevent access to unauthorized users. This ensures
    only the users with a valid username and password can log in to our application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建身份验证系统并完成应用程序构建。身份验证是必需的，以防止未经授权的用户访问。这确保只有具有有效用户名和密码的用户才能登录到我们的应用程序中。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In this chapter, we will be covering authentication. Please note that the login
    username and password for all the examples used in this lesson is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖身份验证。请注意，本课程中使用的所有示例的登录用户名和密码如下：
- en: 'Username: `demo`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名：`演示`
- en: 'Password: `demo`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 密码：`演示`
- en: Setting up the Paths and Creating the Absolute Paths to the Files Directory
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置路径和创建文件目录的绝对路径
- en: Relative paths are paths that are relative to the current folder path, for example,
    .`/css` points to a relative path one folder up and into a `css` folder.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 相对路径是相对于当前文件夹路径的路径，例如，`./css`指向一个相对路径，向上一个文件夹并进入`css`文件夹。
- en: Absolute paths are the full path to a file or folder, such as `/user/projects/mvc/css.`
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对路径是文件或文件夹的完整路径，例如`/user/projects/mvc/css`。
- en: This is important as this will allow files to be included using an absolute
    path anywhere in the framework system. This is an adaption to existing code in
    the system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点很重要，因为这将允许在框架系统的任何地方使用绝对路径包含文件。这是对系统中现有代码的调整。
- en: 'For example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This becomes:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这变成了：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This builds on the current concept and allows views to be organized into subfolders.
    Without this adaptation, it will not be possible to organize anything into subfolders
    and it will interfere with keeping a tidy organization of code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这在当前概念的基础上构建，并允许视图组织到子文件夹中。没有这种适应，将无法将任何内容组织到子文件夹中，并且会干扰代码的整洁组织。
- en: It is possible to continue building the system without these changes, but it
    is always a good idea to make sure code is tidy and organized.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 没有这些更改也可以继续构建系统，但确保代码整洁有序总是一个好主意。
- en: Creating Layout Files
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建布局文件
- en: Layout files are required so that any error can be displayed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 布局文件是必需的，以便显示任何错误。
- en: In addition, layout files are required for the `header`, `footer`, and `navigation`.
    Once created, these file will provide elements that should be brought in across
    the application. This will include global elements.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`页眉`、`页脚`和`导航`需要布局文件。创建后，这些文件将提供应该在整个应用程序中引入的元素。这将包括全局元素。
- en: '![Creating Layout Files](graphics/7_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![创建布局文件](graphics/7_01.jpg)'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Errors are for validation, and this is to be covered in a further subsection
    and not to be confused with parse errors or similar from the errors seen previously.
    The errors these steps are concerned with are errors related to form validation
    where a user inputs the incorrect information into form fields.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 错误用于验证，这将在进一步的子部分中进行介绍，不要与先前看到的错误中的解析错误或类似错误混淆。这些步骤涉及的错误与表单验证相关的错误，其中用户将不正确的信息输入到表单字段中。
- en: Inclusion of Bootstrap
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包含Bootstrap
- en: Bootstrap is a HTML, CSS, and JavaScript library, and will be included for the
    purpose of this chapter to give a basic level of styling. It is useful for a developer
    as it can help them prototype and visualize how their application will look before
    the designer adds the design elements to an application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap是一个HTML、CSS和JavaScript库，将在本章中包含，以提供基本的样式。对开发人员很有用，因为它可以帮助他们在设计师添加设计元素到应用程序之前，原型和可视化他们的应用程序将如何看起来。
- en: In this project, Bootstrap will be included in the header as a **content delivery
    network** (**CDN**). A CDN takes resources that are very commonly found on the
    web and caches them to help boost performance.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，Bootstrap将作为**内容传送网络**（**CDN**）包含在页眉中。CDN获取在网络上非常常见的资源并对其进行缓存，以帮助提高性能。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This can be easily confused with bootstrapping a framework.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这很容易与引导框架混淆。
- en: Bootstrap, the HTML, CSS, and JavaScript library, and the concept of bootstrapping
    are two different things that share a similar name.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap，HTML、CSS和JavaScript库以及引导概念是两个不同的东西，它们有相似的名称。
- en: 'You can find more information on Bootstrap by visiting the following link:
    [https://getbootstrap.com/](https://getbootstrap.com/).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问以下链接找到有关Bootstrap的更多信息：[https://getbootstrap.com/](https://getbootstrap.com/)。
- en: Inclusion of Bootstrap and HTML Markup
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入Bootstrap和HTML标记
- en: 'The purpose of the section is to implement the general styling that we have
    implemented which shows the inclusion of bootstrap and the HTML markup:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该部分的目的是实现我们已经实现的通用样式，显示了引入bootstrap和HTML标记：
- en: '![Inclusion of Bootstrap and HTML Markup](graphics/7_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![引入Bootstrap和HTML标记](graphics/7_02.jpg)'
- en: 'An issue that has not yet been addressed in paths. So far, we''ve been using
    relative paths for including files such as views in `system/View.php.` Let''s
    fix that:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尚未解决的问题是路径。到目前为止，我们一直在使用相对路径来包括`system/View.php`中的视图文件。让我们解决这个问题：
- en: 'Open `webroot/index.php` and add these lines after line 9:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`webroot/index.php`，并在第9行后添加以下行：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'These are constants that can be called anywhere in the framework. The first
    line defines a directory separator, for example, `/` or a `\` depending on the
    machine:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是可以在框架中的任何地方调用的常量。第一行定义了目录分隔符，例如`/`或`\`，具体取决于机器：
- en: '`APPDIR` – points to the `app` folder'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`APPDIR` – 指向`app`文件夹'
- en: '`SYSTEMDIR` – points to the `system` folder'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SYSTEMDIR` – 指向`system`文件夹'
- en: '`PUBLICDIR` – points to the `webroot` folder'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUBLICDIR` – 指向`webroot`文件夹'
- en: '`ROOTDIR` – points to the `root` project path'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ROOTDIR` – 指向`root`项目路径'
- en: Each one creates an absolute path to its endpoint.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每个都创建到其终点的绝对路径。
- en: 'Now, let''s fix the `View` class. Open `system/View.php,` and on line 24, replace:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们修复`View`类。打开`system/View.php`，在第24行，替换：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This allows for views to include other views from parent or child folders with
    no issues.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许视图从父文件夹或子文件夹中包含其他视图，而不会出现问题。
- en: 'Next, create a folder called `layouts` inside `app/views.` Create the following
    files inside `app/views/layouts`:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`app/views`文件夹内创建一个名为`layouts`的文件夹。在`app/views/layouts`内创建以下文件：
- en: '`errors.php`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`errors.php`'
- en: '`footer.php`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`footer.php`'
- en: '`header.php`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`header.php`'
- en: '`nav.php`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nav.php`'
- en: '`errors.php`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`errors.php`'
- en: 'Open `errors.php` and enter the following code:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`errors.php`并输入以下代码：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This includes a Session helper, which we will create shortly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括一个Session助手，我们将很快创建。
- en: The first `if` statement checks whether `$errors` exists, and if so, exit the
    loop and display an alert. The classes are `Bootstrap` classes (we will have this
    in `header.php`).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`if`语句检查`$errors`是否存在，如果存在，则退出循环并显示警报。这些类是`Bootstrap`类（我们将在`header.php`中有这些）。
- en: The next `if` statement checks for the existence of a session called `success,`
    and if it exists, displays its contents. This is used to provide feedback to the
    user.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的`if`语句检查是否存在名为`success`的会话，并且如果存在，则显示其内容。这用于向用户提供反馈。
- en: 'Open `header.php` and enter the following code:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`header.php`并输入以下代码：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This sets the HTML document and optionally uses a `$title,` should it exist.
    Also include Bootstrap CDN CSS and JavaScript, as well as jQuery and a custom
    style.css file located in `webroot/css/style.css` – create this file.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置HTML文档，并在必要时使用`$title`，如果存在的话。还包括Bootstrap CDN CSS和JavaScript，以及jQuery和位于`webroot/css/style.css`的自定义style.css文件
    - 创建此文件。
- en: 'Now, open `footer.php` and close the container `div` and the `body` and `html` tags:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`footer.php`，关闭容器`div`和`body`和`html`标签：
- en: Note
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, open `nav.php` and enter the following code:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`nav.php`并输入以下代码：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is a navigation component for Bootstrap. This is a clean way to bring in
    a responsive menu for our admin pages. Note the two-page links which are Admin
    and Users. We will also provide a logout link.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Bootstrap的导航组件。这是一种为我们的管理页面引入响应式菜单的干净方式。注意两个页面链接，分别是管理和用户。我们还将提供一个注销链接。
- en: 'Now, open `app/views/404.php` and include the layout files:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`app/views/404.php`并包含布局文件：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This brings in the header and shows the page content, and ends with the footer
    included.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引入页眉并显示页面内容，并以包括页脚结束。
- en: Don't include the `nav` here. The 404 can be shown even when the user is not
    logged in.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 不要在这里包括`nav`。即使用户未登录，也可以显示404。
- en: This makes a very clean way of organizing common layouts into your views so
    that when you need to change a global element, the layout views are where they
    were stored.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以以非常干净的方式将常见的布局组织到视图中，这样当您需要更改全局元素时，布局视图就是它们存储的地方。
- en: 'Open the framework in the browser if it''s not already running. Run the following
    command from Terminal when on the root:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果框架尚未运行，请在浏览器中打开框架。在根目录时，从终端运行以下命令：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You won''t notice anything different, but you will be redirected to a page
    that does not exist: `http://localhost:8000/example`.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您不会注意到任何不同，但您将被重定向到一个不存在的页面：`http://localhost:8000/example`。
- en: 'You''ll see a 404 page that includes the header and footer layouts. Look at
    the page source code – right-click and click on ''`view page source`''. You should
    see the following output:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个包含页眉和页脚布局的404页面。查看页面源代码 - 右键单击并单击“查看页面源代码”。您应该看到以下输出：
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These layouts will become more visible as we go further into this chapter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们进入本章的深入，这些布局将变得更加明显。
- en: In this section, we have covered how to set up file paths correctly. We covered
    how to set up Bootstrap properly, and we finally set up views for errors and global
    elements like header, footer, navigation, and errors.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经介绍了如何正确设置文件路径。我们介绍了如何正确设置Bootstrap，并最终为错误和页眉、页脚、导航和错误设置了视图。
- en: In the next section, we will cover how to add security to our application and
    setting up a password recovery.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍如何向我们的应用程序添加安全性并设置密码恢复。
- en: Adding Security to the Project
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向项目添加安全性
- en: In this section, we will be continuing to build features on top of the framework.
    The core framework system files are in place.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将继续在框架之上构建功能。核心框架系统文件已经就位。
- en: The objective of this section is to build features that will add security to
    the project. We will be covering various aspects that we need to maintain good
    security in the application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是构建功能，以增强项目的安全性。我们将涵盖需要在应用程序中保持良好安全性的各个方面。
- en: Helpers
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帮助程序
- en: In this subsection, we will be covering `helpers.`
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将涵盖`helpers`。
- en: We will be creating a `URL` `helper` and a `session` `helper` as well. These
    will be useful to authentication and indeed any other aspects of the system, but
    are not directly related to it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`URL` `helper`和一个`session` `helper`。这对身份验证以及系统的任何其他方面都很有用，但并不直接相关。
- en: The session helper is a `wrapper` for PHP sessions including a variety of methods
    useful to developers when dealing with sessions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 会话助手是PHP会话的“包装器”，包括对开发人员有用的各种方法，用于处理会话。
- en: A `URL` `helper` is very similar in the sense that it is a useful method for
    dealing with URLs. However, in this book, it is much shorter and restricted to
    only a single method.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`URL` `helper`在某种意义上与`session`类似，它是处理URL的有用方法。但是，在本书中，它要短得多，只限于单个方法。'
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A `session` is a way to store temporary data, like if a user is logged in or
    not.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`session`是一种存储临时数据的方法，比如用户是否已登录。'
- en: Authentication
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证
- en: Now, we will be building the authentication functionality. Authentication is
    a way to allow only people with the right credentials to access restricted sections.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将构建身份验证功能。身份验证是一种只允许具有正确凭据的人访问受限部分的方法。
- en: 'This will involve creating a database table and a Model:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将涉及创建一个数据库表和一个模型：
- en: Creating a user's table in the database
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库中创建用户表
- en: Create a user Model in app models
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在app模型中创建一个用户模型
- en: Add insert, update delete methods
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加插入、更新、删除方法
- en: Then, we will create an admin Controller and import URL and `session` helpers
    as well as the `user` Model.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个管理员控制器，并导入URL和`session`帮助程序以及`user`模型。
- en: Lastly, we will create the associated views.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将创建相关的视图。
- en: Dashboard
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仪表板
- en: The project will need a dashboard; this is like a home page for a project that
    requires a login and normally includes links to frequently visited content for
    the project. In this project, we just need to make sure that the dashboard has
    a file that exists so that it can be directed to it. You will be creating the
    dashboard view and including the layout file as well as header, footer, navigation,
    and errors. You will be adding HTML for the page structure.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 项目将需要一个仪表板；这就像一个需要登录的项目的主页，通常包括指向项目经常访问内容的链接。在这个项目中，我们只需要确保仪表板有一个存在的文件，以便可以将其定向到它。您将创建仪表板视图，并包括布局文件以及页眉、页脚、导航和错误。您将为页面结构添加HTML。
- en: Login
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 登录
- en: The creation of the login pages also makes up part of this section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 创建登录页面也是本节的一部分。
- en: In the login view, you will create a login form and also include the layout
    files.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在登录视图中，您将创建一个登录表单，并包括布局文件。
- en: 'Then, they will create a login method to handle the login process:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，他们将创建一个登录方法来处理登录过程：
- en: Part of the process is hashing the password using password hash and bcrypt
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部分过程是使用密码哈希和bcrypt对密码进行哈希处理
- en: Use the Get data method designed to return data
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用设计用于返回数据的Get data方法
- en: As well as creating views and the login method, we will create the `logout`
    method and also modify the config so that the home page, by default, will be the
    admin dashboard
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了创建视图和登录方法，我们还将创建`logout`方法，并修改配置，以便默认情况下主页将是管理员仪表板
- en: Password Hashing
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密码哈希
- en: Password hashing uses bcrypt, the strongest algorithm available. Currently,
    the average computer would take 12 years to crack a password hash.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 密码哈希使用bcrypt，这是目前最强大的算法。目前，一台普通计算机需要12年才能破解一个密码哈希。
- en: Part of the process is validating the data, checking if the username and passwords
    match what is stored in the database.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 部分过程是验证数据，检查用户名和密码是否与数据库中存储的内容匹配。
- en: Password hashing is creating a string from your password intended to be a one-way
    hash, and no user should be able to determine the original content of the hash.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 密码哈希是从您的密码创建一个单向哈希的字符串，没有用户应该能够确定哈希的原始内容。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Password hashing is not to be confused with encryption. The difference is that
    in password hashing, you can decrypt the hashed password to its original state.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 密码哈希不应与加密混淆。区别在于，在密码哈希中，您可以将哈希密码解密为其原始状态。
- en: Implementing Validation in PHP
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在PHP中实现验证
- en: In this section, we'll look at getting the following outcome.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到以下结果。
- en: '![Implementing Validation in PHP](graphics/7_03.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![在PHP中实现验证](graphics/7_03.jpg)'
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This section shows how to implement validation in PHP, although it will not
    work correctly yet as we are yet to create and supply the data source that forms
    the knowledge of the system.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了如何在PHP中实现验证，尽管它目前无法正常工作，因为我们尚未创建和提供构成系统知识的数据源。
- en: To resolve this as part of the section, we will be manually creating a user.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个部分，我们将手动创建一个用户。
- en: 'Follow these steps to implement validation in PHP:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在PHP中实现验证：
- en: '**Creating Helpers:**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建帮助程序：**'
- en: 'Before we can start building the authentication, we need two new helpers. In
    `app/Helpers,` create a new file called `Url.php` and enter:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们开始构建身份验证之前，我们需要两个新的帮助程序。在`app/Helpers`中创建一个名为`Url.php`的新文件，并输入：
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This provides a single method called redirect that defaults to / when no parameters
    are passed. This is an easy way to redirect to another page of our application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一个名为redirect的单一方法，默认情况下为/，当没有传递参数时。这是重定向到我们应用程序的另一个页面的简单方法。
- en: 'To use the class after it''s been included into a page, use: `Url::redirect(''url/to/redirect/to'')`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在将类包含到页面后，使用：`Url::redirect('url/to/redirect/to')`
- en: 'To redirect to the home page, use:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要重定向到主页，请使用：
- en: '`Url::redirect()`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`Url::redirect()`'
- en: Next, we need a way of using a session. Sessions are a way PHP can track data
    from page to page, which is perfect for our needs, such as being able to detect
    is a user is logged in or not by reading the session data.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一种使用会话的方法。会话是PHP跟踪页面数据的一种方式，这非常适合我们的需求，例如能够通过读取会话数据来检测用户是否已登录。
- en: We could use normal $_SESSION calls, but since we're using OOP, let's take advantage
    of that and build a session helper.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用普通的$_SESSION调用，但由于我们正在使用OOP，让我们利用它来构建一个会话助手。
- en: Create a file called `Session.php` inside `app/Helpers`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/Helpers`中创建一个名为`Session.php`的文件。
- en: 'First, set the namespace and class definition:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，设置命名空间和类定义：
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The first method needed is to determine if a session has started. If it does
    update the `sessionStarted` parameter, it will set it to `false. This` will tell
    the `init` method to turn on sessions:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 需要的第一个方法是确定会话是否已启动。如果更新了`sessionStarted`参数，它将将其设置为`false。这`将告诉`init`方法打开会话：
- en: '[PRE13]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Next, create a method called `set` which accepts two parameters, `$key` and
    `$value.` This is used to add a `$key` to a session and set the `$value` to the
    `$key:`
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`set`的方法，接受两个参数`$key`和`$value`。这用于向会话添加一个`$key`并将`$value`设置为`$key`：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, create a method called `pull` with one parameter. This will extract the
    `key` from the session and return it after removing it from the session, which
    is useful for one-time messages:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`pull`的方法，带有一个参数。这将从会话中提取`key`并在从会话中删除它后返回它，这对于一次性消息非常有用：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, create a get method. This will return a session from the provided key:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个get方法。这将从提供的键返回一个会话：
- en: '[PRE16]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Sometimes, you want to see the contents of the session. Create a method called
    `display` that returns the `$_SESSION` object:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您希望查看会话的内容。创建一个名为`display`的方法，返回`$_SESSION`对象：
- en: '[PRE17]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The last method is used to destroy the session key when the `$key` is provided,
    otherwise the entire session will be destroyed:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个方法用于在提供`$key`时销毁会话密钥，否则将销毁整个会话：
- en: '[PRE18]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The full class looks like this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的类如下所示：
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we need to set sessions automatically when the application runs. We do
    this by adding `Session::init()` inside `app/Config.php`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在应用程序运行时自动设置会话。我们通过在`app/Config.php`中添加`Session::init()`来实现这一点：
- en: Note
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This makes use of a `Use` Statement and includes a call to the `session's` `helper`
    class. Highlighting these OOP features may be beneficial at this stage.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了一个`Use`语句，并包括对`session's` `helper`类的调用。在这个阶段突出显示这些OOP特性可能是有益的。
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE20]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Building Authentication:**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建身份验证：**'
- en: We are now ready to start building the admin Controller and users Model, which
    will be the entry point for users to log in.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备开始构建admin Controller和users Model，这将是用户登录的入口点。
- en: 'Create a new table in your database called users:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库中创建一个名为users的新表：
- en: '[PRE21]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The ID is the `primary` key and will be set to auto increment, meaning each
    record will have a unique ID.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ID是`primary`键，并将设置为自动递增，这意味着每个记录都将有一个唯一的ID。
- en: The `reset`_token will only be used when a reset password procedure is needed.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`reset`_token仅在需要重置密码过程时使用。'
- en: Let's start with the Model. Create a file called `User.php` inside `app\Models`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从Model开始。在`app/Models`中创建一个名为`User.php`的文件。
- en: Set the namespace and import the base Model and set the class definition.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置命名空间并导入基本Model并设置类定义。
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will be coming back to this model as we go along to add necessary methods
    as required.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 随着需要，我们将回到这个模型中添加必要的方法。
- en: 'Add methods for inserting, updating, and deleting records:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加用于插入、更新和删除记录的方法：
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE22]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Creation of Admin Controller:**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建Admin Controller：**'
- en: Now, create a new file in `app/Controllers` called `Admin.php`.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`app/Controllers`中创建一个名为`Admin.php`的新文件。
- en: This will be the entry point for logging in and out of the admin dashboard.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是登录和退出admin仪表板的入口点。
- en: Set the namespace and import the `baseController` and the `Session` and `URL`
    `helpers` as well as the `User` Model.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置命名空间并导入`baseController`和`Session`和`URL` `helpers`以及`User` Model。
- en: Set the class definition and create a property called `$user.` Then, in the
    `__construct` method, initialize the `User` Model by calling `new User().`
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置类定义并创建一个名为`$user`的属性。然后，在`__construct`方法中，通过调用`new User()`来初始化`User` Model。
- en: Note
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This means to access any methods of the User Model, `$this->user` can be used.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着可以使用`$this->user`来访问User Model的任何方法。
- en: The next method is `index()`. This will load the dashboard view as long as the
    user is logged in.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个方法是`index()`。只要用户已登录，它就会加载仪表板视图。
- en: 'To ensure that the user is logged in, an `if` statement is run to check for
    the existence of a session key called `logged_jn,` which is set only after logging
    in. If the user is not logged in, then redirect them to the `login` method:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保用户已登录，会运行一个`if`语句来检查名为`logged_jn`的会话密钥是否存在，该密钥仅在登录后设置。如果用户未登录，则将其重定向到`login`方法：
- en: Note
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE23]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If the user is logged in, then the `admin/index` view will be loaded. Create
    the view `app/views/admin/index.php` and the entry:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户已登录，则将加载`admin/index`视图。创建视图`app/views/admin/index.php`和入口：
- en: '[PRE24]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, we need to create a `login` view. Create a folder called `auth` inside
    `app/views/admin` and create `login.php.`
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个`login`视图。在`app/views/admin`中创建一个名为`auth`的文件夹，并创建`login.php`。
- en: First, include the `header` layout and then create a `div` with a caller of
    `wrapper` and `well`. The `well` class is a bootstrap class which gives a grey
    square styling. The `wrapper` class will be used to position the `div`.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，包含`header`布局，然后创建一个调用`wrapper`和`well`的`div`。`well`类是一个Bootstrap类，它提供了灰色方形样式。`wrapper`类将用于定位`div`。
- en: Next, include the `errors` layout to catch any errors or messages.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，包含`errors`布局以捕获任何错误或消息。
- en: Now, we'll create a form that will have a method of `post` to POST its contents
    to an `ACTION URL,` in this case, `/admin/login`.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个表单，该表单的方法为`post`，以将其内容发布到`ACTION URL`，在本例中为`/admin/login`。
- en: Then, create two inputs for the `username` and `password.` Make sure the input
    type for password is set to `password`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为`username`和`password`创建两个输入。确保密码的输入类型设置为`password`。
- en: Note
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Setting the input type to `password` stops the password from being displayed
    on the screen.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 将输入类型设置为`password`可以阻止密码在屏幕上显示。
- en: When the form is submitted, the named attributes of the inputs is how PHP will
    know what the data is.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，输入的命名属性是PHP如何知道数据是什么的。
- en: A submit button is also required to submit the form. A good practice is to offer
    a reset option if the user cannot remember their login details. We will create
    a link that points the user to `/admin/reset`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要一个提交按钮来提交表单。一个好的做法是在用户无法记住他们的登录详细信息时提供重置选项。我们将创建一个指向`/admin/reset`的链接。
- en: 'Finally, close the form and include the footer layout:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，关闭表单并包含页脚布局：
- en: Note
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE25]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, go back to the admin Controller and create a `login` method:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到admin控制器并创建一个`login`方法：
- en: Note
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Put in a check that redirects the user if they are logged in. They should not
    be able to see the login page when they are already logged in.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个检查，如果用户已登录，则重定向用户。当他们已经登录时，他们不应该能够看到登录页面。
- en: Inside the `login` method, create an empty `$errors` array and set the page
    `$title` and `load` a view calling `admin/auth/login,` passing the `$title` and
    `$errors` variables by using a `compact` function.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`login`方法中，创建一个空的`$errors`数组，并设置页面的`$title`和`load`一个调用`admin/auth/login`的视图，通过使用`compact`函数传递`$title`和`$errors`变量。
- en: Note
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`compact()` makes it possible to use variables by simply entering their names
    without the `$:`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`compact()`使得可以通过简单输入它们的名称而使用变量，而不需要`$`：'
- en: '[PRE26]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This loads the `login` view and, upon pressing submit, won''t actually do anything.
    We''ll need to check for the form being submitted, but before doing that, we will
    need to add two methods to the `user` Model:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载`login`视图，并在按下提交时实际上不会执行任何操作。我们需要检查表单是否已提交，但在这之前，我们需要向`user`模型添加两个方法：
- en: '[PRE27]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`get_hash($username)` will select the `password` from the `users` table, where
    the `username` matches the one provided.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_hash($username)`将从`users`表中选择`password`，其中`username`与提供的用户名匹配。'
- en: Setting `username = :username` creates a placeholder. Then, ['`:username' =>
    $username`] will use that placeholder so it knows what the value is going to be.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`username = :username`创建一个占位符。然后，['`:username' => $username`]将使用该占位符，以便知道值将是什么。
- en: Then, check whether `$data[0]->password` is set and return it. Otherwise, return
    `null`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，检查`$data[0]->password`是否设置并返回它。否则，返回`null`。
- en: 'Do the same thing again for `get_data(),` only this time, return an array of
    data rather than a single column:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`get_data()`，做同样的事情，只是这次返回的是一个数据数组，而不是单个列：
- en: '[PRE28]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, inside our `login` method, we can check whether the form has been submitted
    by checking if the `$_POST` array contains an object called `submit.`
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在我们的`login`方法中，我们可以通过检查`$_POST`数组是否包含名为`submit`的对象来检查表单是否已提交。
- en: Then, collect the form data and store them on local variables. Using `htmlspecialchars()`
    is a security measure, since it stops script tags from being able to be executed
    and renders them as plaintext.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，收集表单数据并将其存储在本地变量中。使用`htmlspecialchars()`是一种安全措施，因为它可以阻止脚本标记能够被执行，并将它们呈现为纯文本。
- en: Note
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Next, an `if` statement is run that calls `password_verify(),` which is a built-in
    function which returns `true` or `false`. The first parameter is the user-provided
    `$password,` and the second is the hashed password returned from the database
    by calling `$this->user->get_hash($username)`. As long as `password_verify` equals
    to `false,` the login check has failed.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行一个`if`语句，调用`password_verify()`，这是一个内置函数，返回`true`或`false`。第一个参数是用户提供的`$password`，第二个是通过调用`$this->user->get_hash($username)`从数据库返回的哈希密码。只要`password_verify`等于`false`，登录检查就失败了。
- en: Set an `$errors` variable to contain an `errors` message. Next, count the `$errors`
    and if it equals to `0,` this means there are no errors so get the user data from
    `$this->user->get_data($username).` Then, use the session helper to create a session
    key called `logged_in` with a value of `true,` and another session key with the
    user ID as its value.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个`$errors`变量来包含一个`errors`消息。接下来，计算`$errors`，如果等于`0`，这意味着没有错误，所以从`$this->user->get_data($username)`获取用户数据。然后，使用会话助手创建一个名为`logged_in`的会话键，其值为`true`，以及另一个以用户ID作为其值的会话键。
- en: 'Finally, redirect the user to the admin `index` page:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将用户重定向到admin `index`页面：
- en: '[PRE29]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The full method looks like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的方法看起来像这样：
- en: '[PRE30]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run the framework if it''s not already running:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果框架尚未运行，请运行框架：
- en: '[PRE31]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Go to `http://localhost:8000/admin/login.`
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:8000/admin/login`。
- en: Note
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will see a login page. Pressing login will show an error message of '`Wrong
    username or password`' no matter what you enter, as there are currently no users
    in the database.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个登录页面。按下登录将显示一个错误消息“`用户名或密码错误`”，无论您输入什么，因为目前数据库中没有用户。
- en: 'Let''s create our login. We need a hashed password to store in the database.
    To create one in the `login` method, enter:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建我们的登录。我们需要一个哈希密码来存储在数据库中。要在`login`方法中创建一个哈希密码，请输入：
- en: '[PRE32]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The first parameter is the `password` you want, in this case, `demo.` The second
    parameter is the type of `PASSWORD` function to use. Using the default `PASSWORD_
    BCRYPT` means PHP will use the strongest version possible.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是您想要的`密码`，在本例中是`demo`。第二个参数是要使用的`PASSWORD`函数的类型。使用默认的`PASSWORD_ BCRYPT`意味着PHP将使用可能的最强版本。
- en: 'When you refresh the page, you will see a hash like the following:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您刷新页面时，您将看到以下类似的哈希：
- en: '[PRE33]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Copy this and insert a new record into the database client and leave the ID
    column blank. That will populate itself.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制这个并将一个新记录插入到数据库客户端中，并将ID列留空。它将自动填充。
- en: Create a `username and email` and paste them into the `hash. F`or the password,
    enter a valid `datetime` for the `created at` section, such as 2017-12-04 23:04:00.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`用户名和电子邮件`，并将它们粘贴到`hash. F`中，对于密码，输入一个有效的`datetime`，例如2017-12-04 23:04:00。
- en: Save the record. Now, you will be able to set up the login.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存记录。现在，您将能够设置登录。
- en: Upon logging in, you'll be redirected to `/admin.`
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，您将被重定向到`/admin`。
- en: Note
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to comment out or remove `echo password_hash('demo', PASSWORD_BCRYPT),`
    otherwise the hash will always be displayed.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 记得注释掉或删除`echo password_hash('demo', PASSWORD_BCRYPT),`，否则哈希将始终显示。
- en: While we're at it, let's go ahead and add in the ability to log out. Logging
    out is a case of destroying the logged-in and `user_id` sessions. In the `Admin`
    Controller, create a new method called `logout`.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 趁热打铁，让我们继续添加注销的功能。注销是销毁已登录和`user_id`会话的情况。在`Admin` Controller中，创建一个名为`logout`的新方法。
- en: 'Inside the method, destroy the session `object` and then redirect to the `login`
    page:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在方法内部，销毁会话`object`，然后重定向到`login`页面：
- en: '[PRE34]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, go back to the application and click `logout` in the upper-right corner.
    You will be logged out and taken back to the `login` page.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回应用程序并点击右上角的`logout`。您将被注销并带回`login`页面。
- en: Now, log back in. If you click on the `Admin` link, you will be taken to the
    default page. In this case, it would be better to load the admin as soon as you
    load the application. We can do this by setting the `Admin` Controller to be the
    default `app/Config.php.`
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，重新登录。如果您点击`Admin`链接，您将被带到默认页面。在这种情况下，最好在加载应用程序时立即加载管理员。我们可以通过将`Admin` Controller设置为默认`app/Config.php`来实现这一点。
- en: 'Find the following:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 找到以下内容：
- en: '[PRE35]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Replace it with:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE36]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now, if you click on `Admin` (after reloading the page), you'll see the admin
    dashboard.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您点击`Admin`（重新加载页面后），您将看到管理员仪表板。
- en: Note
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There was once a time where certain standards for password hashing were considered
    to be the highest level of internet security. But, like most technology, it is
    inevitably made available, and this weakens the effectiveness of its predecessors.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有一段时间，某些密码哈希标准被认为是互联网安全的最高级别。但是，像大多数技术一样，它不可避免地变得可用，这削弱了其前身的有效性。
- en: Note
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Avoid the following hashing systems at all costs as they are not secure:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 尽一切可能避免以下哈希系统，因为它们不安全：
- en: MD5
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MD5
- en: Shar 1
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shar 1
- en: Shar 2 56
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shar 2 56
- en: These password hashing functions are weak, and computers are now so powerful
    that it would take just seconds to break them.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这些密码哈希函数很弱，计算机现在如此强大，只需几秒钟就能破解它们。
- en: It is advisable to comb through code when a developer is scoping out a new project
    to check for security flaws like the use of these.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员在规划新项目时，建议仔细检查代码，以查找诸如使用这些代码的安全漏洞。
- en: In this section, we learned about the authentication process. We have seen how
    to make a login process. We have learned the process of password hashing. Now,
    we have experience in building, configuring, and routing functionality to a framework.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了认证过程。我们已经了解了如何进行登录过程。我们已经学习了密码哈希的过程。现在，我们已经有了构建、配置和路由功能到框架的经验。
- en: In the next section, we will cover the concept of password recovery wherein
    we will set up a functionality to reset the password in our application.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍密码恢复的概念，在其中我们将设置在我们的应用程序中重置密码的功能。
- en: Password Recovery
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密码恢复
- en: 'This section is all about setting up the ability to reset the password. Password
    resets are very crucial because there might be a case where users forget their
    passwords. We will now build a password recovery process, similar to the following
    image:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 本节是关于设置重置密码的能力。密码重置非常重要，因为可能会出现用户忘记密码的情况。我们现在将构建一个类似以下图片的密码恢复过程：
- en: '![Password Recovery](graphics/7_04.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![密码恢复](graphics/7_04.jpg)'
- en: Generic password recovery example found on the web
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在网上找到的通用密码恢复示例
- en: We will create a method called reset in the admin Controller. This process loads
    up a view where the users will enter their email address to request an email.
    When this is processed, this will validate to make sure that the email address
    is valid and actually exists on the system.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在admin Controller中创建一个名为reset的方法。该过程会加载一个视图，用户将在其中输入他们的电子邮件地址以请求一封电子邮件。当这个过程被处理时，它将验证电子邮件地址是否有效，并且实际上存在于系统中。
- en: This will check against the email, ensuring that it is in the right format,
    and will check that the email address provided exists in the database table named
    users.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这将检查电子邮件，确保它的格式正确，并检查提供的电子邮件地址是否存在于名为users的数据库表中。
- en: Introduction to a Third-Party Dependency PHP Mailer
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍第三方依赖PHP Mailer
- en: '![Introduction to a Third-Party Dependency PHP Mailer](graphics/7_05.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![介绍第三方依赖PHP Mailer](graphics/7_05.jpg)'
- en: 'Image from PHP Mailer: https://github.com/PHPMailer'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: PHP Mailer的图片：https://github.com/PHPMailer
- en: We are going to add a third-party dependency by including PHP Mailer for sending
    out emails.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过包含PHP Mailer来添加第三方依赖，用于发送电子邮件。
- en: 'PHP Mailer works like this:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: PHP Mailer的工作原理如下：
- en: Provided that the validation had passed, we will then use PHP Mailer to send
    an email with a token. The token will later be received over email and entered
    into a hidden field as part of a form, fulfilling a requirement for the validation
    process.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只要验证通过，我们将使用PHP Mailer发送带有令牌的电子邮件。令牌稍后将通过电子邮件接收，并作为表单的一部分输入到隐藏字段中，满足验证过程的要求。
- en: Note
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A token is simply a random string of letters and numbers. The idea is to generate
    something unique for that user to identify that the request is coming from them.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌只是一串随机的字母和数字。其想法是为该用户生成一个唯一的东西，以识别该请求来自他们。
- en: The next part of the process is to send an email to the user, and when the user
    clicks on this, create a method to process that request. This involves creating
    a change password method that accepts the token provided by the email, which then
    displays the view with the form inside it.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流程的下一部分是向用户发送电子邮件，当用户点击时，创建一个处理该请求的方法。这涉及创建一个接受电子邮件提供的令牌的更改密码方法，然后在其中显示包含表单的视图。
- en: Next, in the view, the token is resent in a hidden field. Additionally, users
    can enter a new password and confirm this password. When submitted, the Controller
    will process the data and validate it. This involves ensuring the token matches
    the user account and that the password is long enough and that both passwords
    match.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在视图中，令牌在一个隐藏字段中重新发送。此外，用户可以输入新密码并确认此密码。提交后，控制器将处理数据并验证数据。这涉及确保令牌与用户帐户匹配，并且密码足够长且两个密码匹配。
- en: After creating this, when the update is put into practice, the users will be
    able to log in to the admin system automatically without having to re-enter their
    password.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建后，当更新投入实践时，用户将能够自动登录到管理系统，而无需重新输入密码。
- en: This saves users having to log in once they have reset their password. Technically,
    this is a user experience design update, although you can see here that UX changes
    are not just restricted to the designer realm.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以节省用户在重置密码后无需登录。从技术上讲，这是用户体验设计的更新，尽管您可以在这里看到UX更改不仅仅局限于设计师领域。
- en: Note
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PHP Mailer checks that the format is correct. In the case of an email, this
    will be expecting that the @ symbol is present. This is just one example of a
    validation check. PHP has methods built in so that it can determine that the correct
    format is a valid format.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: PHP Mailer检查格式是否正确。在电子邮件的情况下，这将期望@符号存在。这只是一个验证检查的例子。PHP内置了方法，以便它可以确定正确的格式是有效的格式。
- en: Building a Password Reset Mechanism for Our Application
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的应用程序构建密码重置机制
- en: 'To complete the authentication system, we need the ability to reset the password
    should we forget what it is. Here are the steps to do so:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成认证系统，我们需要能够重置密码，以防忘记密码。以下是这样做的步骤：
- en: Create a new method called `reset` in the `Admin` Controller.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Admin`控制器中创建一个名为`reset`的新方法。
- en: Again, check if the user is logged in and if they are, redirect them back to
    the admin.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次检查用户是否已登录，如果是，则将其重定向回管理界面。
- en: Set up an `errors` array and set the page title before loading a view called
    `reset:`
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在加载名为`reset:`的视图之前，设置一个`errors`数组并设置页面标题。
- en: '[PRE37]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now create a view called `reset.php` in `app/views/admin/auth` and enter:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`app/views/admin/auth`中创建一个名为`reset.php`的视图并输入：
- en: '[PRE38]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The form will post to the same `url /admin/reset`. The only data we're collecting
    is the email address. The email address will be used to verify that the user exists
    before proceeding.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 表单将发布到相同的`url /admin/reset`。我们收集的唯一数据是电子邮件地址。电子邮件地址将用于在继续之前验证用户是否存在。
- en: Now, go back to the reset method on the `Admin` Controller.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到`Admin`控制器上的重置方法。
- en: 'First, check if the form has been submitted with an `isset` and pass in the
    submit button name:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，检查表单是否已使用`isset`提交，并传递提交按钮名称：
- en: '[PRE39]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next, make sure that the email address is `isset,` otherwise default to `null.`
    Check that the email address is in the correct format:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，确保电子邮件地址已`isset`，否则默认为`null`。检查电子邮件地址是否处于正确的格式中：
- en: '[PRE40]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Lastly, check if the email address belongs to an existing user. To do this,
    create a new method in the user Model called `get_user_email($email)`:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，检查电子邮件地址是否属于现有用户。为此，在用户模型中创建一个名为`get_user_email($email)`的新方法：
- en: Note
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This will return the email address if it exists, otherwise `null` will be returned.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在，这将返回电子邮件地址，否则将返回`null`。
- en: '[PRE41]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the preceding Controller, we have:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的控制器中，我们有：
- en: '[PRE42]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This checks that the email address provided in the form does not match with
    the database, in which case a new error is created.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 检查表单中提供的电子邮件地址是否与数据库中的不匹配，如果是，则创建一个新错误。
- en: 'After the validation check, there are no errors:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在验证检查之后，没有错误：
- en: '[PRE43]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Save the file; the method so far looks like this:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件；到目前为止，该方法看起来像这样：
- en: Note
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE44]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: At this point, among other things, an email needs to be sent.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，除其他事项外，需要发送电子邮件。
- en: Note
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A best practice is to not use PHP's built-in `mail(` `)` function and to use
    a library such as `phpmailer` ( [https://github.com/PHPMailer/](https://github.com/PHPMailer/)
    instead.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳做法是不使用PHP的内置`mail（）`函数，而是使用诸如`phpmailer`（[https://github.com/PHPMailer/](https://github.com/PHPMailer/)）之类的库。
- en: 'Open `composer.json` and `phpmailer` in the require list:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`composer.json`和`phpmailer`在要求列表中：
- en: '[PRE45]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Save the file and type `composer update` in Terminal. This will pull in `phpmailer,`
    making it available to our application.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并在终端中键入`composer update`。这将拉取`phpmailer`，使其可用于我们的应用程序。
- en: 'At the top of the `Admin` Controller, import `phpmailer`:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Admin`控制器的顶部，导入`phpmailer`：
- en: '[PRE46]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Next, go to the `reset` method inside the following `if` statement. This is
    where we''ll resume:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到以下`if`语句内的`reset`方法。这是我们将恢复的地方：
- en: '[PRE47]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now, we need to make a random token. For this, use `md5,` `uniqid,` and `rand`
    to make a random token.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要生成一个随机令牌。为此，使用`md5`，`uniqid`和`rand`来生成一个随机令牌。
- en: Then, set up a `data` and `where` array. The `$data` will specify the `reset_token`
    to have a value of `$token,` and the `$where` will be the email address. Pass
    them to the `update()` method of the user Model to update the user.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，设置一个`data`和`where`数组。`$data`将指定`reset_token`的值为`$token`，而`$where`将是电子邮件地址。将它们传递给用户模型的`update()`方法以更新用户。
- en: 'This will store the `$token` against the users record in the database:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在数据库中存储`$token`与用户记录：
- en: '[PRE48]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Now, we set up the email to be sent by creating a new instance of `phpmailer`,
    and then setting who the email will come from. Change this as desired.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们通过创建`phpmailer`的新实例来设置要发送的电子邮件，然后设置电子邮件的发送者。根据需要更改这一点。
- en: 'Pass the `$email` address that this is going to be sent to and set the mode
    to HTML by passing true to isHTML():'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传递`$email`地址，这将被发送到，并通过将true传递给isHTML()来设置HTML模式：
- en: '[PRE49]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Set the subject and the email body. We provide two bodies: a HTML one and a
    plaintext one. The plain text one is used in case the user''s email client cannot
    render HTML.'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置主题和电子邮件正文。我们提供两种正文：HTML和纯文本。纯文本用于用户的电子邮件客户端无法呈现HTML的情况。
- en: Create a link that points to `admin/change/password_token` when using `localhost:`
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个指向`admin/change/password_token`的链接，当使用`localhost:`时
- en: Note
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's important to remember the URL `http://localhost:8000` will only work for
    your machine.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住`http://localhost:8000`的URL只适用于您的计算机。
- en: '[PRE50]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, everything is set up. Send the email:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一切都设置好了。发送电子邮件：
- en: '[PRE51]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create a session to inform the user and redirect the admin/reset:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个会话来通知用户并重定向管理员/重置：
- en: '[PRE52]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The completed method looks like this:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的方法看起来像这样：
- en: Note
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE53]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'When the user clicks on the link in the email, we need to handle the request.
    To do this, create another method called `change_password` that accepts a parameter
    called `$token`:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击电子邮件中的链接时，我们需要处理请求。为此，创建另一个名为`change_password`的方法，接受一个名为`$token`的参数：
- en: Note
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This method takes the `$token,` passes it to a method in the `users` Model called
    `get_user_reset_token($token),` and returns the user object. If the token does
    not match the database, then null is returned.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法获取`$token`，将其传递给`users`模型中的一个方法`get_user_reset_token($token)`，并返回用户对象。如果令牌与数据库不匹配，则返回null。
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE54]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The method looks like this:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法看起来像这样：
- en: Note
  id: totrans-359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE55]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `render` method passed the `$title`, `$token,` and `$errors` to the view.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`render`方法将`$title`，`$token`和`$errors`传递给视图。'
- en: Another view is needed. Create a view called `change_password.php` in `app/views/admin/auth:`
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要另一个视图。在`app/views/admin/auth`中创建一个名为`change_password.php`的视图：
- en: Note
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE56]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Note
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The form has a hidden input called `$token.` Its value is the `$token` passed
    from the Controller, and this will be used to verify the request.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 表单有一个名为`$token`的隐藏输入。它的值是从控制器传递的`$token`，这将用于验证请求。
- en: 'There''s also two inputs: a `password` and `confirm password.` These are used
    to collect the desired password.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两个输入：`密码`和`确认密码`。这些用于收集所需的密码。
- en: When the form is submitted and the form data is collected, a method called to
    `get_user_reset_token($token)` is made again to verify that the provided token
    is valid.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 当提交表单并收集表单数据时，再次调用`get_user_reset_token($token)`方法来验证提供的令牌是否有效。
- en: Also, the passwords must match and be more than three characters in length.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，密码必须匹配并且长度必须超过三个字符。
- en: 'If there is no error, then update the user''s record in the database by passing
    to `$this->user->update` an array to clear out the `reset_token.` Hash the password
    using `password_hash(),` where the ID matches the user object and the token matches
    the provided token:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有错误，则通过将数组传递给`$this->user->update`来更新数据库中用户的记录以清除`reset_token`。使用`password_hash()`对密码进行哈希处理，其中ID与用户对象匹配，令牌与提供的令牌匹配：
- en: Note
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE57]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: After the update, log the user in and redirect them to the admin dashboard.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新后，记录用户并将其重定向到管理员仪表板。
- en: 'The full method looks like this:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的方法看起来像这样：
- en: Note
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE58]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This concludes the authentication sections. We can now log in, log out, and
    reset the password, should we forget it.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了认证部分。现在我们可以登录、登出，并在忘记密码时重置密码。
- en: We have now come to the end of this section. Here, we learned how to build a
    password reset system and also gained further experience in using third-party
    tools.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经到达了本节的结束。在这里，我们学会了如何构建密码重置系统，并进一步学习了使用第三方工具的经验。
- en: In the next section, we will see how to add CRUD functionality for user management.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何为用户管理添加CRUD功能。
- en: Building CRUD for User Management
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为用户管理构建CRUD
- en: CRUD
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRUD
- en: The `users` section allows for the creation and management of users of the application
    built on top of the framework.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`users`部分允许创建和管理应用程序的用户。'
- en: 'We will create the CRUD to enable:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建CRUD以启用：
- en: Creation of users
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户
- en: Display of existing users
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示现有用户
- en: Update of existing users
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新现有用户
- en: Deletion of unwanted users
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除不需要的用户
- en: In this section, we will be creating the different methods in the users Controller.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建用户控制器中的不同方法。
- en: We will also be creating more methods in the users Model for the new queries
    that will be required to retrieve all users or to retrieve a specific user.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在用户模型中创建更多方法，以便检索所有用户或检索特定用户所需的新查询。
- en: 'The process will be as follows:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程将如下进行：
- en: Part of this process is to create a `construct` method, which allows us to secure
    all methods from unauthorized users. This means that to be able to access any
    method within the section, you must be logged in first. The `index` method lists
    all the users with options to edit and delete the user.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个过程的一部分是创建一个`construct`方法，它允许我们保护所有未经授权的用户的方法。这意味着要能够访问部分内的任何方法，您必须首先登录。`index`方法列出所有用户，并提供编辑和删除用户的选项。
- en: On delete, a confirmation will be presented first.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在删除时，首先会出现确认。
- en: The next step is to create an `add` view. In this view, there will be the form
    for the users of the application to create their record of a new user for the
    application. On submission of the form, the data will be collected and the validation
    process will start.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个`add`视图。在这个视图中，将有一个表单，供应用程序的用户创建他们的应用程序的新用户记录。在提交表单时，将收集数据并开始验证过程。
- en: This will check that the data that is submitted is appropriate for its purpose
    and likely to be what is expected.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将检查提交的数据是否适合其目的，并且可能是预期的数据。
- en: For example, there will be a check making sure that the username is more than
    three characters in length and does not already exist in the database.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将检查用户名是否超过三个字符的长度，并且在数据库中不存在。
- en: Note
  id: totrans-401
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This process is the same for the email, and in the case of the email, it is
    making sure it is valid and does not exist already.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程对于电子邮件也是一样的，在电子邮件的情况下，要确保它是有效的并且不存在。
- en: After the validation is passed, the user is created and a success message is
    recorded and visible to the user. The application user is then redirected to the
    users view.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在验证通过后，用户将被创建，并且成功消息将被记录并显示给用户。应用程序用户然后被重定向到用户视图。
- en: We will then create an `update` method and `view,` which is much like the method
    and view for creating a user. The key difference is that the form is pre-populated
    with the user's details upon being loaded onto the page, and when the form is
    submitted, that particular user is updated rather than a new record being created.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将创建一个`update`方法和`view`，这与创建用户的方法和视图非常相似。关键区别在于，表单在加载到页面上时会预先填充用户的详细信息，当表单提交时，会更新特定的用户而不是创建新记录。
- en: The final method to be made is the `delete` method, which checks that the ID
    of the user is numeric and is not the same as the ID for the logged-in user so
    that they cannot delete themselves.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后要创建的方法是`delete`方法，它检查用户的ID是否为数字，并且不与已登录用户的ID相同，以防止他们删除自己。
- en: Note
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This is a case of the developer underestimating what a user might do. It is
    surprising what a user may do intentionally or unintentionally, and cases where
    they may delete themselves is easily done if the application takes no steps to
    prevent this.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 这是开发人员低估用户可能会做的事情。令人惊讶的是，用户可能有意或无意地做的事情，以及如果应用程序不采取措施来防止这种情况，他们可能会删除自己。
- en: After the record is deleted, a success message is created, and the user is redirected
    back to the user's page.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在记录被删除后，会创建一个成功消息，并将用户重定向回用户页面。
- en: Building CRUD for User Management
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建用户管理的CRUD
- en: 'In this section, we''ll look at having the following output displayed on our
    screen:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看到以下输出显示在我们的屏幕上：
- en: '![Building CRUD for User Management](graphics/7_06.jpg)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![构建用户管理的CRUD](graphics/7_06.jpg)'
- en: Note
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When reading a user, know that in this table it is possible to control what
    is displayed. Not all information about that user needs to be displayed.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取用户时，要知道在这个表中可以控制显示什么。并不是所有关于该用户的信息都需要显示出来。
- en: In this section, we will build our users section to `Create,` `Read,` `Update,`
    and `Delete` users.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将构建我们的用户部分来`创建`，`读取`，`更新`和`删除`用户。
- en: 'Follow these steps to build CRUD for user management:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤构建用户管理的CRUD：
- en: First, we need a few more queries. Open `app/Models/User.php.`
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要更多的查询。打开`app/Models/User.php.`
- en: 'Create the following methods:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下方法：
- en: Note
  id: totrans-418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE59]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Now, create a `Users` Controller in `app/Controllers.` Create `Users.php.`
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`app/Controllers`中创建一个`Users`控制器。创建`Users.php.`
- en: 'Set the namespace and import the helpers and `User` Model:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置命名空间并导入帮助程序和`User`模型：
- en: '[PRE60]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Next, create a class property called `$user` and a `__construct` method. Then,
    check if the user is logged in, and if not, redirect them to the login page.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`$user`的类属性和一个`__construct`方法。然后，检查用户是否已登录，如果没有，将其重定向到登录页面。
- en: 'Create a new user instance:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的用户实例：
- en: '[PRE61]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Note
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Doing this check in a construct means all the methods of this class will be
    protected from unauthorized users.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造函数中进行这个检查意味着这个类的所有方法都将受到未经授权用户的保护。
- en: '[PRE62]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Next, create an `index` method. This will call `get_users()` and load a view
    and pass in the users object:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个`index`方法。这将调用`get_users()`并加载一个视图并传入用户对象：
- en: '[PRE63]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: For the view, create `app/views/admin/users/index.php.`
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了视图，创建`app/views/admin/users/index.php.`
- en: 'Include the layout files and create a table to display a list of users:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括布局文件并创建一个表格来显示用户列表：
- en: '[PRE64]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Loop through all the user records. As a security measure, when printing data
    from a database, we''ll make use of `htmlentities().` This converts all tags into
    their HTML counterparts, meaning if any code had been injected into the database,
    it would simply be printed as text, making it useless:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 循环遍历所有用户记录。作为安全措施，当从数据库中打印数据时，我们将使用`htmlentities()`。这将把所有标签转换为它们的HTML对应项，这意味着如果任何代码被注入到数据库中，它将简单地被打印为文本，使其无用。
- en: Note
  id: totrans-436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE65]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Inside the loop, we have two action links for editing and deleting. Note that
    the user's ID is being passed to the end of the `href` value. This is to pass
    the ID to the URL.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环内部，我们有两个用于编辑和删除的操作链接。请注意，用户的ID被传递到`href`值的末尾。这是为了将ID传递到URL中。
- en: Also, we have an `Add User` button that points to `/users/add.` Let's create
    this. In your `Users` Controller, create a new method called `add():`
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们有一个指向`/users/add`的`添加用户`按钮。让我们创建这个。在你的`Users`控制器中，创建一个名为`add()`的新方法：
- en: '[PRE66]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Now, create a view in `app/views/admin/users` called `add.php.`
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`app/views/admin/users`中创建一个名为`add.php`的视图。
- en: Include the layout files and set the page title. Next, create a form with a
    method set to `post`.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括布局文件并设置页面标题。接下来，创建一个方法设置为`post`的表单。
- en: You need four inputs for `username`, `email`, `password,` and `confirm password`.
    Make sure each input has a name.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要`username`、`email`、`password`和`confirm password`四个输入。确保每个输入都有一个名称。
- en: Note
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Sticky forms is useful in the event of errors.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 粘性表单在出现错误时非常有用。
- en: Sticky forms are forms that retain their data in the event of an error. The
    inputs will still show the values entered into them.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 粘性表单是在出现错误时保留其数据的表单。输入仍将显示其中输入的值。
- en: 'To implement sticky forms on the username and email, use a ternary:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在用户名和电子邮件上实现粘性表单，使用三元运算符：
- en: '[PRE67]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This says if the `$_POST[''username'']` is set, then print it, otherwise print
    an empty string:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示如果`$_POST['username']`已设置，则打印它，否则打印空字符串：
- en: Note
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE68]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: When submitted, the form data will be posted to `/users/add`. This needs handling
    in the `add` method of the `Users` Controller.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交后，表单数据将被发布到`/users/add`。这需要在`Users`控制器的`add`方法中处理。
- en: 'Check for the form submission:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查表单提交：
- en: '[PRE69]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Next, collect the form data:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，收集表单数据：
- en: '[PRE70]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Then, start the validation process.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，开始验证过程。
- en: 'Check that the `username` is more than 3 characters in length:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`username`的长度是否超过3个字符：
- en: '[PRE71]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Next, check if the `$username` exists already in the database by passing `$username`
    to a `get_user_username($username)` method on the Model. If the results are the
    same as `$username,` then it already exists, so create an error:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过将`$username`传递给Model上的`get_user_username($username)`方法来检查`$username`是否已经存在于数据库中。如果结果与`$username`相同，则它已经存在，因此创建一个错误：
- en: '[PRE72]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: For email validation, check that the email is in a valid format by using `filter_var`
    and `FILTER_VALIDATE_EMAIL.` If this does not return true, create an error.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于电子邮件验证，请使用`filter_var`和`FILTER_VALIDATE_EMAIL`检查电子邮件格式是否有效。如果这不返回true，则创建一个错误。
- en: 'Like with the `username,` check if the `$email` exists in the database already:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像`username`一样，检查`$email`是否已经存在于数据库中：
- en: '[PRE73]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'For the passwords, check that `$password` matches `$password_confirm` or creates
    an error. Otherwise, check that the password is more than 3 characters in length:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于密码，检查`$password`是否与`$password_confirm`匹配或创建错误。否则，检查密码的长度是否超过3个字符：
- en: '[PRE74]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: If there are no errors, carry on and set a `$data array` containing the data
    to be inserted into the database.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有错误，继续并设置一个包含要插入数据库的数据的`$data`数组。
- en: Note
  id: totrans-470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note the password using a `password_hash()` function. This is using PHP's built-in
    password function that, by default, will use `bcrypt,` which at the time of writing
    is the most secure hashing technique.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用`password_hash()`函数来存储密码。这是使用PHP内置的密码函数，默认情况下将使用`bcrypt`，这是编写时最安全的哈希技术。
- en: 'Create the user by calling `$this->insert($data)` and set a message before
    redirecting back to /users:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`$this->insert($data)`创建用户并在重定向回/users之前设置消息：
- en: '[PRE75]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The full method looks like this:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的方法如下所示：
- en: Note
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE76]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: To edit users, the URL structure is `/users/edit/1.` The number at the end is
    the ID of the user.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要编辑用户，URL结构是`/users/edit/1`。末尾的数字是用户的ID。
- en: Create a method called `edit($id)` that accepts a parameter called `$id.`
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`edit($id)`的方法，接受一个名为`$id`的参数。
- en: First, check that `$id` is a number, otherwise redirect back to `/users`.
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，检查`$id`是否为数字，否则重定向回`/users`。
- en: Get the user's data by calling `$this>user->get_user($id)` and pass in the ID
    to the `users` Model method. This will return a `user` object or `null` if the
    record is not found.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`$this>user->get_user($id)`获取用户数据，并将ID传递给`users`模型方法。这将返回一个用户对象或`null`（如果未找到记录）。
- en: If the `$user` is equal to `null,` redirect to a `404` page. Otherwise, set
    up an `$errors` array, `$title,` and load the view, passing in user, errors, and
    title to `compact():`
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`$user`等于`null`，则重定向到`404`页面。否则，设置一个`$errors`数组，`$title`，并加载视图，将用户、错误和标题传递给`compact()`：
- en: '[PRE77]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Now, create a view in `app/views/admin/users` called `edit.php`:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`app/views/admin/users`中创建一个名为`edit.php`的视图：
- en: Note
  id: totrans-485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This is almost identical to the `add.php` view. The main difference is in the
    username and email inputs. They are pre-populated with the user object:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与`add.php`视图相同。主要区别在于用户名和电子邮件输入。它们将使用用户对象进行预填充：
- en: <input class="form-control" id="username" type="text" name="username" value="<?=$user->username;?>"
    required />
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: <input class="form-control" id="username" type="text" name="username" value="<?=$user->username;?>"
    required />
- en: The `<?=$user->username;?>` is the user object in action using `->` after `$user.`
    You specify what column you want out of it.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '`<?=$user->username;?>`是使用`$user`后的`->`操作的用户对象。您可以指定要从中获取的列。'
- en: 'It''s important that you do not pre-populate the password fields; they should
    only be filled in when the user wants to change the password. As such, put a message
    to inform the user that they should enter the password only if they want to change
    their existing password:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是不要预先填充密码字段；只有在用户想要更改密码时才应填写。因此，放置一条消息通知用户，只有在他们想要更改现有密码时才应输入密码：
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE78]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Note
  id: totrans-492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When this is submitted, the `edit($id)` method will process the request.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 提交后，`edit($id)`方法将处理请求。
- en: Just like the `add()` method, check for the form submission, collect the form
    data, and perfect the form validation.
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像`add()`方法一样，检查表单提交，收集表单数据，并完善表单验证。
- en: 'This time, we won''t check if the username or email exists in the database,
    only that they are provided and are valid:'
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，我们不会检查用户名或电子邮件是否已经存在于数据库中，只会检查它们是否已提供并且有效：
- en: Note
  id: totrans-496
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE79]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Next, check that there are no errors:'
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查是否有错误：
- en: '[PRE80]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Set the `$data` array to update the user''s record. This time, only the username
    and email are provided:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`$data`数组设置为更新用户记录。这次，只提供了用户名和电子邮件：
- en: '[PRE81]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'If the password has been updated, then add the password to the `$data` array:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果密码已更新，则将密码添加到`$data`数组中：
- en: '[PRE82]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The where statement says where the ID matches `$id`. Run the `update()` and
    set a message and redirect to the users page:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`where`语句表示ID与`$id`匹配。运行`update()`并设置消息并重定向到用户页面：'
- en: '[PRE83]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The full `update` method looks like this:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`update`方法如下：
- en: Note
  id: totrans-508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 7.php` file in the code files folder.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 7.php`文件。
- en: '[PRE84]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The last step to complete the users Controller is adding the ability to delete
    users.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成用户控制器的最后一步是添加删除用户的功能。
- en: Like the edit, the URL structure will pass in an `$id` as part of the URL in
    the format of `/users/delete/2.`
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与编辑一样，URL结构将在URL的格式中传递一个`$id`，如`/users/delete/2`。
- en: Create a method called `delete($id).`
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`delete($id)`的方法。
- en: Check if the `$id` is numeric and check if the `$id` matches the session `$_SESSION['user_id'],`
    otherwise kill the page. You don't want to allow a user to delete their own record.
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`$id`是否为数字，并检查`$id`是否与会话`$_SESSION['user_id']`匹配，否则终止页面。您不希望允许用户删除自己的记录。
- en: Next, get the user by calling `$this->user->get_user($id)` and check if the
    `$user` object is not equal to `null.` Otherwise, redirect to a `404` page.
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过调用`$this->user->get_user($id)`来获取用户，并检查`$user`对象是否不等于`null`。否则，重定向到`404`页面。
- en: Next, create a `$where` array that says where the `$id` matches the ID in the
    database. Note we do not use a `$data` array. In this case, we only pass a `$where`.
    This is because you cannot select columns, only a row, so the `$data` would be
    pointless.
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个`$where`数组，指出`$id`与数据库中的ID匹配。请注意，我们不使用`$data`数组。在这种情况下，我们只传递一个`$where`。这是因为您不能选择列，只能选择行，所以`$data`将是无意义的。
- en: Lastly, set a message and redirect back to `/users:`
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，设置消息并重定向回`/users`：
- en: '[PRE85]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Now, run the application:'
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行应用程序：
- en: '[PRE86]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Go to `http://localhost:8000/users,` click on `Add User`, `and` fill in the
    form.
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到`http://localhost:8000/users`，点击`Add User`，然后填写表单。
- en: First, if you try to submit the form without any data, you will see the HTML
    client validation that comes from putting a required attribute on the inputs.
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，如果您尝试在没有任何数据的情况下提交表单，您将看到来自在输入上放置了一个必填属性的HTML客户端验证。
- en: Try filling in a user with the same username as one you've already created,
    and you'll see the server validation rules up and running.
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试填写与您已经创建的用户名相同的用户，您将看到服务器验证规则正在运行。
- en: Finally, fill in the form completely with new user details and you will be redirected
    to `/users` and see the new user, along with a confirmation message.
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，完整填写表单与新用户详细信息，您将被重定向到`/users`，并看到新用户，以及确认消息。
- en: Click on `Edit` next to the user you want to edit. You will then be presented
    with the edit form with the username and email filled in. Pressing submit will
    take you back to the users page.
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击要编辑的用户旁边的`Edit`。然后，您将看到带有用户名和电子邮件填写的编辑表单。点击提交将带您返回到用户页面。
- en: Pressing `delete` will delete the user right away (providing the user is not
    you) with no confirmation. Let's fix that!
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`delete`将立即删除用户（如果用户不是您），而无需确认。让我们修复这个问题！
- en: Our requirement states that when the user presses `delete`, a confirmation window
    should be displayed. If OK is clicked, then the delete URL will be called, and
    if cancel is clicked, nothing will happen.
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的要求规定，当用户按下`delete`时，应显示确认窗口。如果点击确定，将调用删除URL，如果点击取消，则不会发生任何事情。
- en: 'Open `app/views/admin/users/index.php` and place this JavaScript before the
    `footer.php` code block:'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/views/admin/users/index.php`，并在`footer.php`代码块之前放置此JavaScript：
- en: '[PRE87]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: This defines a JavaScript function which accepts an ID and a `username.` When
    the `confirm()` passes a `window.location.href,` it will run, redirecting the
    page to the delete URL before passing in the ID `var` to the end of the URL.
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这定义了一个JavaScript函数，它接受一个ID和一个`username`。当`confirm()`通过`window.location.href`时，它将运行，将页面重定向到删除URL，然后将ID
    `var`传递到URL的末尾。
- en: 'In the loop where you see the delete link:'
  id: totrans-531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您看到删除链接的循环中：
- en: '[PRE88]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Replace it with:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 替换为：
- en: '[PRE89]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: This calls `javascript:del(),` which triggers the confirmation popup and passes
    in the user's `ID` and `username`.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 这调用`javascript:del()`，触发确认弹出窗口并传递用户的`ID`和`username`。
- en: Save the file and run the page. When you click on delete, you will now see a
    confirmation prompt. Clicking OK will allow the delete to go ahead, while pressing
    cancel will stop the redirect from running.
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并运行页面。当您点击删除时，现在将看到一个确认提示。点击确定将允许删除继续进行，而点击取消将阻止重定向运行。
- en: Optional Activity
  id: totrans-537
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可选活动
- en: Add additional fields about a user, perhaps their address, age, hobbies, eye
    color, or anything of your, choosing.
  id: totrans-538
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加关于用户的其他字段，也许是他们的地址，年龄，爱好，眼睛颜色，或者你选择的任何内容。
- en: Ensure these are processed in the `Method` and `Controller` and ensure that
    the database table is ready to accept them.
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保这些在`Method`和`Controller`中进行处理，并确保数据库表准备好接受它们。
- en: Ensure that these are included in the view.
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保这些包含在视图中。
- en: In the `index` view, the student can select information of their choosing to
    help identify the user in the table.
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index`视图中，学生可以选择他们选择的信息来帮助在表中识别用户。
- en: Summary
  id: totrans-542
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this lesson, we have completed building functionality onto the framework,
    which allows for the management of users. We have performed the inclusion of Bootstrap
    to give some basic-level styling to our application. We have also implemented
    a password recovery mechanism in our application.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们已经完成了对框架的功能进行构建，允许对用户进行管理。我们已经执行了引入Bootstrap，为我们的应用程序提供了一些基本级别的样式。我们还在应用程序中实现了密码恢复机制。
- en: This completes the most basic requirements of the contacts application. However,
    all of this involves the ability to log in to an area containing the application,
    which is restricted without the correct username and password credentials. This
    is, at the moment, just an empty dashboard page. With everything in place, we
    can now move on to building the application to store the user's contacts.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了联系人应用程序的最基本要求。然而，所有这些都涉及到登录到一个包含应用程序的区域，如果没有正确的用户名和密码凭据，是受限制的。目前，这只是一个空的仪表板页面。一切就绪后，我们现在可以继续构建应用程序来存储用户的联系人。
- en: In the next chapter, we will look at how to build a contacts management system
    on top of our current application which will include creating, reading, updating,
    deleting, and using a contact in the contacts application.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何在当前应用程序的基础上构建一个联系人管理系统，其中将包括在联系人应用程序中创建、阅读、更新、删除和使用联系人。
