- en: Chapter 11. Deploying and Integrating Third-party Services into Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。将第三方服务部署和集成到您的应用程序中
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating a queue and using Artisan to run it
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建队列并使用Artisan运行它
- en: Deploying a Laravel app to Pagoda Box
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Laravel应用程序部署到Pagoda Box
- en: Using the Stripe payment gateway with Laravel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Laravel中使用Stripe支付网关
- en: Doing a GeoIP lookup and setting custom routing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行GeoIP查找并设置自定义路由
- en: Gathering e-mail addresses and using them with a third-party e-mail service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集电子邮件地址并与第三方电子邮件服务一起使用
- en: Storing and retrieving cloud content from Amazon S3
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Amazon S3存储和检索云内容
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Web applications will often rely on third-party services to help our applications
    run. Using Composer and Laravel, we can integrate existing code that will allow
    us to interact with these services. In this chapter, we'll see how to deploy our
    app to Pagoda Box, use Stripe payments, do GeoIP lookups, use a third-party e-mail
    service, and store the content to the cloud.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序通常会依赖第三方服务来帮助我们的应用程序运行。使用Composer和Laravel，我们可以集成现有的代码，以便与这些服务进行交互。在本章中，我们将看到如何将我们的应用程序部署到Pagoda
    Box，使用Stripe支付，进行GeoIP查找，使用第三方电子邮件服务，并将内容存储到云中。
- en: Creating a queue and using Artisan to run it
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建队列并使用Artisan运行它
- en: There may be times when our app is required to do a lot of work behind the scenes
    to accomplish a task. Instead of making a user wait until the tasks are complete,
    we can add them to a queue and do the processing later. There are many queue systems
    available but Laravel has a few that are very easy to implement. In this recipe,
    we'll be using IronMQ.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们的应用程序需要在后台执行大量工作来完成任务。我们可以将它们添加到队列中，并稍后进行处理，而不是让用户等待任务完成。有许多队列系统可用，但Laravel有一些非常容易实现的。在本示例中，我们将使用IronMQ。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a working installation of Laravel 4, as well as
    API credentials for IronMQ. A free account can be created at [http://www.iron.io/](http://www.iron.io/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此示例，我们将需要一个安装良好的Laravel 4，以及IronMQ的API凭据。可以在[http://www.iron.io/](http://www.iron.io/)创建免费帐户。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此示例，请按照给定的步骤进行操作：
- en: In the `app/config` directory, open the `queue.php` file, set the default value
    to `iron` and fill in the credentials from IronMQ.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中，打开`queue.php`文件，将默认值设置为`iron`，并填写来自IronMQ的凭据。
- en: 'Open Laravel''s `composer.json` file and update the required section so it
    looks resembles the following snippet:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Laravel的`composer.json`文件并更新所需部分，使其类似于以下代码片段：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the command line window, update the composer file with the following command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行窗口中，使用以下命令更新composer文件：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After everything is installed, open the `routes.php` file and create a route
    that hits the queue:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，打开`routes.php`文件并创建一个命中队列的路由：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file in the `app/models` directory with the name `Spaceship.php` as
    shown in the following code:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/models`目录中创建一个名为`Spaceship.php`的文件，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In your browser, go to `http://{your-url}}/public/queueships`, and refresh a
    couple of times.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到`http://{your-url}}/public/queueships`，然后刷新几次。
- en: Check in the IronMQ window that new messages were added.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IronMQ窗口中检查是否添加了新消息。
- en: 'Open up the command line window and run the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行窗口并运行以下命令：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After a few moments, look inside the folder `app/storage/logs` and find the
    file with today's date in the name. It will have a print out of the array we added
    to the queue.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几分钟后，查看`app/storage/logs`文件夹，并找到带有今天日期的文件。它将打印出我们添加到队列中的数组。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We begin by making sure to use IronMQ as our default queue driver, in the `config`
    file. If we wanted to use another queue system, we could set that here. Then we
    install the IronMQ package into our application, using composer. This will add
    all the files we need, as well as any dependencies that Iron needs to work.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要确保在`config`文件中将IronMQ作为我们的默认队列驱动程序。如果我们想要使用另一个队列系统，可以在这里设置。然后，我们使用composer将IronMQ包安装到我们的应用程序中。这将添加我们需要的所有文件，以及Iron需要工作的任何依赖项。
- en: At this point, Laravel is already set up to use whatever queue system we choose,
    so we can begin using it. We first create an array of data in our route. This
    could just as easily be form input, so some other data we'd like to wait to process.
    We then use the `Queue::push()` method, set the class that should be used (`Spaceship`),
    and then pass in the data to send to that class.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，Laravel已经设置好了使用我们选择的任何队列系统，因此我们可以开始使用它。我们首先在我们的路由中创建一个数据数组。这可以很容易地成为表单输入，因此我们希望等待处理的其他一些数据。然后，我们使用`Queue::push()`方法，设置应该使用的类（`Spaceship`），然后传递数据到该类。
- en: If we now go to this route and then check the IronMQ queue, we'll see that there's
    one job waiting to be processed. Our next task is to create a class to process
    the queue. For that, we create a model named `Spaceship`. We need to create a
    `fire()` method to parse our data from the queue. Here, we could save the information
    to a database or do some other heavy processing. For now, we'll just send the
    data to a log file. At the end of the `fire()` method, we make sure to delete
    the job.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在转到这个路由，然后检查IronMQ队列，我们会看到有一个作业正在等待处理。我们的下一个任务是创建一个类来处理队列。为此，我们创建一个名为`Spaceship`的模型。我们需要创建一个`fire()`方法来解析我们从队列中获取的数据。在这里，我们可以将信息保存到数据库或进行其他一些繁重的处理。现在，我们只是将数据发送到日志文件。在`fire()`方法的末尾，我们确保删除作业。
- en: If we go to our `queueships` route and refresh a few times, we'll see multiple
    jobs in our queue, but we haven't processed them yet. Therefore, in the command
    line, we run artisan's `queue:listen` command, and this will start processing
    our queues. Pretty soon, we can go into our logs directory, and see the information
    that was sent from the queue.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们转到我们的`queueships`路由并刷新几次，我们会看到我们的队列中有多个作业，但我们还没有处理它们。因此，在命令行中，我们运行artisan的`queue:listen`命令，这将开始处理我们的队列。很快，我们可以进入我们的日志目录，看到从队列中发送的信息。
- en: There's more...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are many reasons we might want a queue. Most often it's for things such
    as processing images or doing heavy data parsing. It's also useful to queue any
    e-mails we want to send from the site, and Laravel has a special way to do that
    using the `Mail::queue()` command.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能需要队列的原因有很多。最常见的是处理图像或进行大量数据解析等。将我们想要从网站发送的任何电子邮件排队也很有用，而Laravel有一种特殊的方法可以使用`Mail::queue()`命令来实现。
- en: Deploying a Laravel app to Pagoda Box
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Laravel应用程序部署到Pagoda Box
- en: Pagoda Box is a popular cloud hosting service that makes creating a web app
    very easy. With pre-made boxes for Laravel, we can create our own site in the
    cloud.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Pagoda Box是一个流行的云托管服务，可以很容易地创建Web应用程序。有了Laravel的预制框，我们可以在云中创建自己的网站。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have a free account with Pagoda Box, which is available
    at [https://dashboard.pagodabox.com/account/register](https://dashboard.pagodabox.com/account/register).
    After signing up, we'll also need to have an SSH key added to our account. More
    information about the SSH keys can be found at [http://help.pagodabox.com/customer/portal/articles/202068](http://help.pagodabox.com/customer/portal/articles/202068).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成此操作，我们需要在Pagoda Box拥有一个免费帐户，可以在[https://dashboard.pagodabox.com/account/register](https://dashboard.pagodabox.com/account/register)上获得。注册后，我们还需要在我们的帐户中添加一个SSH密钥。有关SSH密钥的更多信息，请访问[http://help.pagodabox.com/customer/portal/articles/202068](http://help.pagodabox.com/customer/portal/articles/202068)。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow the steps given:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此操作，请按照给定的步骤进行：
- en: After logging in to Pagodabox, click on the **New Application** tab as shown
    in the following screenshot:![How to do it...](graphics/2827OS_11_01.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录Pagodabox后，点击**新应用程序**选项卡，如下面的屏幕截图所示：![如何做...](graphics/2827OS_11_01.jpg)
- en: Make sure **Quickstart** is selected, then scroll down to find the laravel-4
    quickstart. The click on the **Free** button as shown in the following screenshot:![How
    to do it...](graphics/2827OS_11_02.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选择**Quickstart**，然后向下滚动找到laravel-4 quickstart。然后点击**免费**按钮，如下面的屏幕截图所示：![如何做...](graphics/2827OS_11_02.jpg)
- en: On the next page, click on the **Launch** button as shown in the following screenshot:![How
    to do it...](graphics/2827OS_11_03.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页中，点击**启动**按钮，如下面的屏幕截图所示：![如何做...](graphics/2827OS_11_03.jpg)
- en: Wait for a few minutes while everything gets installed.![How to do it...](graphics/2827OS_11_04.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几分钟，直到所有内容都安装完成。![如何做...](graphics/2827OS_11_04.jpg)
- en: Once it's finished, click on the blue **Manage Your App** button as shown in
    the following screenshot:![How to do it...](graphics/2827OS_11_05.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，点击蓝色的**管理您的应用**按钮，如下面的屏幕截图所示：![如何做...](graphics/2827OS_11_05.jpg)
- en: Copy the git clone URL as shown in the following screenshot:![How to do it...](graphics/2827OS_11_06.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制git clone URL，如下面的屏幕截图所示：![如何做...](graphics/2827OS_11_06.jpg)
- en: 'In the command line window, go to the root of your server and run the git clone
    command. In our case, it would be:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行窗口中，转到服务器的根目录并运行git clone命令。在我们的情况下，它将是：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After everything downloads, open the `app/routes.php` file and add a route
    so we can test it out as given in the following code:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载所有内容后，打开`app/routes.php`文件并添加一个路由，以便我们可以根据以下代码进行测试：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the command line window, commit the following changes and send it back to
    the Pagoda Box
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行窗口中，提交以下更改并将其发送回Pagoda Box
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After Pagoda Box has finished the changes, go to the new route to see if it
    works. In our case, it will be [http://erratic-eladia.gopagoda.com/cool](http://erratic-eladia.gopagoda.com/cool).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pagoda Box完成更改后，转到新路由查看是否有效。在我们的情况下，它将是[http://erratic-eladia.gopagoda.com/cool](http://erratic-eladia.gopagoda.com/cool)。
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: If we want to host our app and make sure it's scalable, we might want to look
    at a cloud hosting service. This will let us increase its performance if we happen
    to get an influx of traffic, and lower it when the traffic dies down. An excellent
    host that works well with PHP and Laravel is Pagoda Box. Pagoda Box also has a
    very nice free option that will allow us to test it out and create a full app
    without needing to pay.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要托管我们的应用程序并确保它是可扩展的，我们可能需要考虑使用云托管服务。这将使我们能够在出现大量流量时提高其性能，并在流量减少时降低性能。一个与PHP和Laravel兼容的优秀主机是Pagoda
    Box。Pagoda Box还有一个非常好的免费选项，可以让我们测试并创建一个完整的应用程序而无需付费。
- en: To begin with, in the Pagoda Box dashboard, we create a new application and
    choose a Quickstart package we want to use. In the list is a handy Laravel 4 installation;
    if we choose it, everything will be installed for us, including all the dependencies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在Pagoda Box仪表板中，我们创建一个新应用程序并选择我们想要使用的Quickstart包。列表中有一个方便的Laravel 4安装；如果我们选择它，所有依赖项都将被安装。
- en: After everything is set up, we can copy the git clone code and download the
    files to our local server. Once it's downloaded, we can do any updates and commit
    them. After pushing it back to Pagoda Box, our updated code will automatically
    be deployed and we will see the changes on the live site.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，我们可以复制git clone代码并将文件下载到本地服务器。下载后，我们可以进行任何更新并提交。将其推送回Pagoda Box后，我们的更新代码将自动部署，并且我们将在实时站点上看到更改。
- en: There's more...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'There are other cloud hosting providers that work well with Laravel. They tend
    to all have free options so we can try them out. Some other hosts are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他与Laravel兼容的云托管提供商。它们通常都有免费选项，因此我们可以尝试它们。其他一些主机如下：
- en: Engine Yard [https://www.engineyard.com/](https://www.engineyard.com/)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Engine Yard [https://www.engineyard.com/](https://www.engineyard.com/)
- en: Digital Ocean [https://www.digitalocean.com/](https://www.digitalocean.com/)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Digital Ocean [https://www.digitalocean.com/](https://www.digitalocean.com/)
- en: Heroku (there's hidden PHP support) [https://www.heroku.com/](https://www.heroku.com/)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku（有隐藏的PHP支持）[https://www.heroku.com/](https://www.heroku.com/)
- en: Using the Stripe payment gateway with Laravel
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Stripe支付网关与Laravel
- en: E-commerce sites are a consistent staple in web development. In the past, things
    such as credit card processing have been difficult and the learning curve very
    steep. With Laravel and the Stripe service, offering credit card transactions
    is much easier.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 电子商务网站是网站开发中的一个持续的重点。过去，诸如信用卡处理之类的事情一直很困难，学习曲线非常陡峭。使用Laravel和Stripe服务，提供信用卡交易变得更容易。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a working installation of Laravel 4 and the proper
    credentials for Stripe. A free account with Stripe can be created at [https://stripe.com/](https://stripe.com/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们需要一个正常安装的Laravel 4和Stripe的正确凭据。可以在[https://stripe.com/](https://stripe.com/)创建一个免费的Stripe账户。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个食谱，请按照以下步骤进行：
- en: 'Open the app''s `composer.json` file and update the `require` section to resemble
    the following snippet:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开应用的`composer.json`文件，并更新`require`部分以类似以下代码片段的方式进行更新：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the command line window, run the composer update with the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行窗口中，使用以下命令运行composer update：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `app/config` directory, create a new file named `stripe.php` with the
    following code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中，创建一个名为`stripe.php`的新文件，使用以下代码：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `routes.php` file, add a `Route` to the payment form as shown in the
    following code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，添加一个`Route`到付款表单，如下所示的代码：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `app/views` folder, create a file named `pay.blade.php` for our form
    using the following snippet:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views`文件夹中，使用以下代码片段创建一个名为`pay.blade.php`的文件，用于我们的表单：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Back in the `routes.php`, create a `Route` to accept the form post, and charge
    the card as given in the following code:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`routes.php`，创建一个`Route`来接受表单提交，并按照以下代码对卡进行收费：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We start with adding the Stripe package to our composer files and updating it.
    This will install the Stripe code, as well as any dependencies if it requires.
    Then we need to create a configuration file to hold our API key. Here we could
    create another directory that's the same as our environment variable, and add
    that file there. So, if we have a development and a production server, we could
    have a Stripe `config` file in the `app/config/development` directory that holds
    our test API key, and then in the `app/config/production` directory a file to
    hold our live API key.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将Stripe包添加到我们的composer文件中并进行更新。这将安装Stripe代码，以及如果需要的话任何依赖项。然后我们需要创建一个配置文件来保存我们的API密钥。在这里，我们可以创建另一个与我们的环境变量相同的目录，并将文件添加到那里。因此，如果我们有一个开发和一个生产服务器，我们可以在`app/config/development`目录中有一个Stripe
    `config`文件，其中保存我们的测试API密钥，然后在`app/config/production`目录中有一个文件来保存我们的生产API密钥。
- en: Next, we need a form for the user to enter their credit card information. We
    create a `pay` route that displays our `pay` view. In that view, we'll use the
    Blade template for creating the form. The minimum that Stripe requires is the
    card number and the expiration date, though there might be times we need to capture
    the card's CVV code or the user's address.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个表单，让用户输入他们的信用卡信息。我们创建一个`pay`路由来显示我们的`pay`视图。在该视图中，我们将使用Blade模板来创建表单。Stripe所需的最少信息是卡号和到期日，尽管有时我们可能需要获取卡的CVV码或用户的地址。
- en: After that form is posted, we create an instance of Stripe with the API key.
    Then we add the credit card information to an array. Finally, we send the amount
    (in cents), the card array, and the currency to Stripe for processing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单提交后，我们使用API密钥创建一个Stripe实例。然后我们将信用卡信息添加到一个数组中。最后，我们将金额（以美分为单位）、卡数组和货币发送到Stripe进行处理。
- en: The data returned from Stripe could then be added to a database, or otherwise
    tracked.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以将从Stripe返回的数据添加到数据库中，或者进行其他跟踪。
- en: There's more...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Stripe offers many, easy-to-use methods for managing credit card transactions,
    or even things such as subscriptions. For more information, be sure to check out
    the documentation available on: [https://stripe.com/docs](https://stripe.com/docs)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Stripe提供了许多易于使用的方法来管理信用卡交易，甚至订阅等事项。有关更多信息，请务必查看[https://stripe.com/docs](https://stripe.com/docs)上提供的文档。
- en: Doing a GeoIP lookup and setting custom routing
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行GeoIP查找和设置自定义路由
- en: There might be times when our app needs to give people different pages depending
    on which country they're in. Using Laravel and MaxMind's GeoIP data, we can lookup
    a person's country, based on their IP address, and then redirect them to the page
    we need.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们的应用程序在某些时候需要根据用户所在的国家/地区提供不同的页面。使用Laravel和MaxMind的GeoIP数据，我们可以根据用户的IP地址查找其所在的国家/地区，然后将其重定向到我们需要的页面。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll just need a working Laravel 4 installation.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们只需要一个正常的Laravel 4安装。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个食谱，请按照以下步骤进行：
- en: 'Open the `composer.json` file and update the `require` section, so it looks
    like the following snippet:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`composer.json`文件并更新`require`部分，使其看起来像以下代码片段：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the command line window, run the composer update with the following command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行窗口中，使用以下命令运行composer update：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Go to [http://dev.maxmind.com/geoip/legacy/geolite/](http://dev.maxmind.com/geoip/legacy/geolite/)
    and download the latest **GeoLite Country** database. Unzip it and put the `GeoIP.dat`
    file in the root of our app.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[http://dev.maxmind.com/geoip/legacy/geolite/](http://dev.maxmind.com/geoip/legacy/geolite/)并下载最新的**GeoLite
    Country**数据库。解压缩并将`GeoIP.dat`文件放在我们应用的根目录中。
- en: 'In the `app/config` directory, create a file named `geoip.php` with the following
    code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中，创建一个名为`geoip.php`的文件，使用以下代码：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `app/filters.php` file and add a filter for our `geoip` file with
    the following code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/filters.php`文件，并添加一个用于我们的`geoip`文件的过滤器，使用以下代码：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In our `routes.php` file, create a route to apply the filter to and a route
    to accept the country code, as shown in the following code:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，创建一个路由来应用过滤器，并创建一个接受国家代码的路由，如下所示的代码：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We begin this recipe by installing the `geoip` library, by adding it to our
    `composer.json` file and updating. Once it's downloaded, we can then download
    MaxMind's free `geoip` data file and add it to our app. In our case, we'll put
    the file in the root of our app. Then, we need to create a `config` file that
    will hold the location of the `geoip` data file.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过将其添加到我们的`composer.json`文件并进行更新来安装`geoip`库。一旦下载完成，我们就可以下载MaxMind的免费`geoip`数据文件并将其添加到我们的应用程序中。在我们的情况下，我们将文件放在我们的应用程序的根目录中。然后，我们需要创建一个`config`文件，用于保存`geoip`数据文件的位置。
- en: Next, we want to check the user's IP address and redirect them to a country
    specific page. For this, we'll use Laravel's before filter. It starts by setting
    the `$ip` variable. If we manually pass in an IP address, that's what it will
    use; otherwise, we run the `Request::getClientIp()` method to try and determine
    it. Once we have the IP address, we run it through the `geoip` function to get
    the country code for the IP address. We then redirect the user to the route with
    the country code as a parameter.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想要检查用户的IP地址并将他们重定向到特定国家的页面。为此，我们将使用Laravel的before过滤器。它从设置`$ip`变量开始。如果我们手动传递一个IP地址，那就是它将使用的；否则，我们运行`Request::getClientIp()`方法来尝试确定它。一旦我们有了IP地址，我们就通过`geoip`函数运行它来获取IP地址的国家代码。然后我们将用户重定向到带有国家代码作为参数的路由。
- en: Then we create a route to add the filter to. In our case, we'll pass an IP address
    manually to the filter, but if it wasn't there it would attempt to use the user's
    address. Our next route takes the country code as a parameter. At this point,
    we could offer custom content based on the country or even automatically set which
    language file to use.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个路由来添加过滤器。在我们的情况下，我们将手动传递一个IP地址给过滤器，但如果没有，它将尝试使用用户的地址。我们的下一个路由将以国家代码作为参数。在这一点上，我们可以根据国家提供自定义内容，甚至自动设置要使用的语言文件。
- en: Gathering e-mail addresses and using them with a third-party e-mail service
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集电子邮件地址并与第三方电子邮件服务一起使用
- en: E-mail lists and newsletters are still a popular and efficient way to communicate
    with large groups of people. In this recipe, we'll use Laravel and the free MailChimp
    service to set up an easy way to gather e-mail subscriptions.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件列表和通讯简报仍然是与大量人群沟通的一种流行和高效的方式。在这个步骤中，我们将使用Laravel和免费的MailChimp服务来建立一个收集电子邮件订阅的简单方式。
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need a working Laravel 4 installation, as well as a free
    account with [http://mailchimp.com/](http://mailchimp.com/) and generated API
    keys in Mailchimp's account section. We'll also need to create at least one list
    in Mailchimp.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们将需要一个可用的Laravel 4安装，以及在Mailchimp帐户部分生成的[http://mailchimp.com/](http://mailchimp.com/)免费帐户和API密钥。我们还需要在Mailchimp中创建至少一个列表。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤操作：
- en: In the `app` directory, create a new directory named `libraries`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app`目录中，创建一个名为`libraries`的新目录。
- en: Download Mailchimp's API library from [http://apidocs.mailchimp.com/api/downloads/#php](http://apidocs.mailchimp.com/api/downloads/#php),
    then unzip it and place the file `MCAPI.class.php` in the new `libraries` folder.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://apidocs.mailchimp.com/api/downloads/#php](http://apidocs.mailchimp.com/api/downloads/#php)下载Mailchimp的API库，然后解压缩并将文件`MCAPI.class.php`放入新的`libraries`文件夹中。
- en: 'Open Laravel''s `composer.json` file and add the libraries directory to the
    `autoload` section. That section should resemble the following snippet:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Laravel的`composer.json`文件，并将libraries目录添加到`autoload`部分。该部分应该类似于以下代码片段：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Open the command line window, and run the composer''s `dump-autoload` command,
    as shown in the following command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行窗口，并运行composer的`dump-autoload`命令，如下所示：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `app/config` directory, create a file named `mailchimp.php` with the
    following code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中，创建一个名为`mailchimp.php`的文件，并使用以下代码：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To get all of our Mailchimp lists, and see their IDs, open the `routes.php`
    file and add a new route as shown in the following code:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取我们的Mailchimp列表，并查看它们的ID，请打开`routes.php`文件并添加一个新的路由，如下所示：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In `routes.php` file, create a route to show the `subscribe` form using the
    following code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，使用以下代码创建一个路由来显示`subscribe`表单：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In `app/views` directory, create a file named `subscribe.blade.php` as given
    in the following snippet:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views`目录中，创建一个名为`subscribe.blade.php`的文件，如下所示：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the `routes.php` file, create a route to accept and process the form submission
    as given in the following code:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，创建一个路由来接受和处理表单提交，如下所示：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To begin this recipe, we'll need to add Mailchimp's PHP library. Since we won't
    be using a composer, we need to set up a directory to hold any of our non-composer
    libraries. So we create a `libraries` directory in the `app` folder, and add Mailchimp
    there.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个步骤，我们需要添加Mailchimp的PHP库。由于我们不会使用composer，我们需要设置一个目录来保存我们的非composer库。因此，我们在`app`文件夹中创建一个`libraries`目录，并在其中添加Mailchimp。
- en: To let Laravel know that we want to `autoload` anything in the new directory,
    we need to update the `composer.json` file. We then add the directory location
    to the `Classmap` section. Then we need to run composer's `dump-autoload` command
    to recreate our `autload` files, and have it added in our new directory.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Laravel知道我们想要在新目录中`autoload`任何内容，我们需要更新`composer.json`文件。然后我们将目录位置添加到`Classmap`部分。然后我们需要运行composer的`dump-autoload`命令来重新创建我们的`autload`文件，并将其添加到我们的新目录中。
- en: We then need to create a new `config` file to hold our Mailchimp credentials
    and the ID of the list we want to use. We can get the `list` ID from the Mailchimp
    dashboard, or we can use the `lists` route to display them all.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要创建一个新的`config`文件来保存我们的Mailchimp凭据和我们想要使用的列表的ID。我们可以从Mailchimp仪表板获取`list`
    ID，或者我们可以使用`lists`路由来显示它们。
- en: To capture the user's e-mail, we create a route and view to hold our form. This
    form could also be in a pop-up, modal, or part of a larger page. We ask for their
    name and e-mail, and then have it posted to Mailchimp.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了捕获用户的电子邮件，我们创建一个路由和视图来保存我们的表单。这个表单也可以是一个弹出窗口、模态框或更大页面的一部分。我们要求他们的姓名和电子邮件，然后将其发布到Mailchimp。
- en: In our `post` route, we just need to instantiate the Mailchimp class, create
    an array to hold the name, and send everything to the `listSubscribe()` method.
    Finally, we check for any errors from Mailchimp and show a success message.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`post`路由中，我们只需要实例化Mailchimp类，创建一个数组来保存名称，并将所有内容发送到`listSubscribe()`方法。最后，我们检查来自Mailchimp的任何错误并显示成功消息。
- en: There's more...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Mailchimp offers a very extensive API that allows us to easily manage our e-mail
    lists. To see everything they offer, check out the online documentation at: [http://apidocs.mailchimp.com/](http://apidocs.mailchimp.com/)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Mailchimp提供了一个非常广泛的API，允许我们轻松管理我们的电子邮件列表。要查看他们提供的所有内容，请查看在线文档：[http://apidocs.mailchimp.com/](http://apidocs.mailchimp.com/)
- en: Storing and retrieving cloud content from Amazon S3
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从亚马逊S3存储和检索云内容
- en: Using a service such as Amazon's S3 to store our files will allow us to leverage
    their servers' speed and reliability. To utilize the service, we can easily implement
    a Laravel package to handle our uploads to Amazon.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像亚马逊的S3这样的服务来存储我们的文件将使我们能够利用他们服务器的速度和可靠性。要使用该服务，我们可以轻松地实现一个Laravel包来处理我们上传到亚马逊的文件。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we''ll need a working Laravel 4 installation. We''ll also
    need a free Amazon AWS account, which can be registered at: [http://aws.amazon.com/s3/](http://aws.amazon.com/s3/)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们需要一个可用的Laravel 4安装。我们还需要一个免费的亚马逊AWS账户，可以在以下网址注册：[http://aws.amazon.com/s3/](http://aws.amazon.com/s3/)
- en: After registering, we need to get our **Access Key ID** and **Secret ID** from
    the **Security Credentials** page. Also, in the S3 management console, we'll need
    to have at least one bucket created. For this recipe, we'll call the bucket named
    as `laravelcookbook`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，我们需要从“安全凭据”页面获取我们的**访问密钥ID**和**秘密ID**。此外，在S3管理控制台中，我们需要至少创建一个存储桶。对于这个食谱，我们将把存储桶命名为`laravelcookbook`。
- en: How to do it…
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'To complete this recipe, follow the given steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个食谱，按照给定的步骤进行：
- en: 'Open Laravel''s `composer.json` file and add the Amazon SDK package. The require
    section should resemble the following snippet:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Laravel的`composer.json`文件并添加亚马逊SDK包。要求部分应该类似于以下片段：
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open the command line window, and install the package using the Composer package,
    as given in the following code:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令行窗口，并使用Composer包安装包，如下所示：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After everything is installed, in the `app/config` directory, create a file
    named as `aws.php` shown in the following code:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，在`app/config`目录中，创建一个名为`aws.php`的文件，如下所示：
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `app/config` directory, open the `app.php` file. At the end of the `providers`
    array, add the AWS provider as given in the following code:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/config`目录中，打开`app.php`文件。在`providers`数组的末尾，按照以下代码添加AWS提供程序：
- en: '[PRE29]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Also in the `app.php` file, in the aliases array, add the following alias:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还在`app.php`文件中，在别名数组中，添加以下别名：
- en: '[PRE30]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In our `routes.php` files, test that everything is working by creating a route
    to list our `buckets` with the following code:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，通过创建一个列出我们的`buckets`的路由来测试一切是否正常，如下所示：
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: To test the buckets, go to `http://{your-server}/buckets`, and it should display
    a list of all of the buckets we've set up.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试存储桶，请转到`http://{your-server}/buckets`，它应该显示我们设置的所有存储桶的列表。
- en: 'Now let''s create a form for a user to upload an image. We begin with a route
    to hold the form as given in the following code:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建一个用户上传图像的表单。我们首先创建一个包含表单的路由，如下所示：
- en: '[PRE32]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the `app/views` folder, create a file named as `cloud.blade.php` with the
    following code:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views`文件夹中，创建一个名为`cloud.blade.php`的文件，其中包含以下代码：
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Back in the `routes.php` file, create a route to process the file and upload
    it to S3 as shown in the following code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`routes.php`文件，在下面的代码中创建一个路由来处理文件并将其上传到S3：
- en: '[PRE34]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We begin the recipe by installing Amazon's AWS SDK. Thankfully, Amazon released
    a composer package specifically designed for Laravel 4, so we just add that to
    our `composer.json` file and update.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过安装亚马逊的AWS SDK来开始这个食谱。幸运的是，亚马逊发布了一个专门为Laravel 4设计的composer包，所以我们只需将其添加到我们的`composer.json`文件中并进行更新。
- en: After everything is installed, we need to create a configuration file and add
    in our Amazon credentials. We can also add in the `region` (such as `Aws\Common\Enum\Region::US_WEST_2`)
    but, if we leave it blank, it will use the `US Standard` region. Then we update
    our `app.php` configuration, including the AWS `ServiceProvider` and the `Facade`
    that Amazon provided.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们需要创建一个配置文件并添加我们的亚马逊凭据。我们还可以添加`region`（例如`Aws\Common\Enum\Region::US_WEST_2`），但是，如果我们将其留空，它将使用`US
    Standard`区域。然后我们更新我们的`app.php`配置，包括亚马逊提供的AWS `ServiceProvider`和`Facade`。
- en: If we already have buckets in our S3, we can create a route to list those buckets.
    It begins by creating a new S3 instance and simply calling the `listBuckets()`
    method. We then loop through the array of `Buckets` and show their name.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经在S3中有存储桶，我们可以创建一个路由来列出这些存储桶。它通过创建一个新的S3实例并简单调用`listBuckets()`方法开始。然后我们循环遍历`Buckets`数组并显示它们的名称。
- en: Our next goal is to create a form where a user can add an image. We create the
    `cloud` route that displays the `cloud` view. Our view is a simple Blade template
    form with a single `file` field. That form will then be posted to `cloud`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个目标是创建一个表单，用户可以在其中添加图像。我们创建一个名为`cloud`的路由，显示`cloud`视图。我们的视图是一个简单的Blade模板表单，只有一个`file`字段。然后该表单将被提交到`cloud`。
- en: In our `cloud` post route, we begin by retrieving the image using the `Input::file()`
    method. Next, we create a new name for our image by adding the date to the beginning
    of the file's name. Then we get the path of the uploaded image, so we know which
    file to send to S3.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`cloud` post路由中，我们首先使用`Input::file()`方法检索图像。接下来，我们通过在文件名的开头添加日期来为我们的图像创建一个新名称。然后我们获取上传图像的路径，这样我们就知道要发送到S3的文件是哪个。
- en: Next, we create an S3 instance. We also need an array to hold the values to
    send to S3\. `Bucket` is simply the name of the S3 bucket we want to use, `Key`
    is the name we want to give to the file, `SourceFile` is the location of the file
    we want to send over, and then `ACL` are the permissions we want to give to the
    file. In our case, we set `ACL` to `public-read,` which allows the image to be
    displayed to anyone.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个S3实例。我们还需要一个数组来保存要发送到S3的值。`Bucket`只是我们想要使用的S3存储桶的名称，`Key`是我们想要给文件的名称，`SourceFile`是我们想要发送的文件的位置，然后`ACL`是我们想要给文件的权限。在我们的情况下，我们将`ACL`设置为`public-read`，这允许任何人查看图像。
- en: Our final step is to call the `putObject()` method which should send everything
    to our S3 bucket. If it's successful, we then redirect the user to view the uploaded
    file.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是调用`putObject()`方法，这应该将所有内容发送到我们的S3存储桶。如果成功，我们将重定向用户查看已上传的文件。
- en: There's more...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In our example, the user is forced to wait until the image is uploaded to Amazon
    before continuing. This would be an excellent case to use a queue to process everything.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，用户被迫等待图像上传到亚马逊之前才能继续。这将是一个使用队列处理一切的绝佳案例。
- en: See also
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a queue and using Artisan to run it* recipe
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建队列并使用Artisan运行它*的配方'
