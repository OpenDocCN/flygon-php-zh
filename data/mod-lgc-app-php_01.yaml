- en: Chapter 1. Legacy Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 传统应用程序
- en: In its simplest definition, a legacy application is any application that you,
    as a developer, inherit from someone else. It was written before you arrived,
    and you had little or no decision-making authority in how it was built.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最简单的定义中，传统应用程序是指您作为开发人员从其他人那里继承的任何应用程序。它是在您到达之前编写的，您在构建过程中几乎没有或根本没有决策权。
- en: However, there is a lot more weight to the word legacy among developers. It
    carries with it connotations of poorly organized, difficult to maintain and improve,
    hard to understand, untested or untestable, and a series of similar negatives.
    The application works as a product in that it provides revenue, but as a program,
    it is brittle and sensitive to change.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在开发人员中，“传统”这个词有更多的含义。它带有组织不良、难以维护和改进、难以理解、未经测试或无法测试等负面含义。该应用程序作为产品提供收入，但作为程序，它是脆弱的，对变化敏感。
- en: 'Because this is a book specifically about PHP-based legacy applications, I
    am going to offer some PHP-specific characteristics that I have seen in the field.
    For our purposes, a legacy application in PHP is one that matches two or more
    of the following descriptions:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一本专门讨论基于PHP的传统应用程序的书，我将提供一些我在实践中看到的PHP特定特征。对于我们的目的，在PHP中的传统应用程序是指符合以下两个或更多描述的应用程序：
- en: It uses page scripts placed directly in the document root of the web server.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用直接放置在Web服务器文档根目录中的页面脚本。
- en: It has special index files in some directories to prevent access to those directories.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在某些目录中有特殊的索引文件，以防止访问这些目录。
- en: It has special logic at the top of some files to `die()` or `exit()` if a certain
    value is not set.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在一些文件的顶部有特殊的逻辑，如果某个值未设置，则会使用`die()`或`exit()`。
- en: Its architecture is include-oriented instead of class-oriented or object-oriented.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的架构是基于包含而不是基于类或对象的。
- en: It has relatively few classes.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的类相对较少。
- en: Any class structure that exists is disorganized, disjointed, and otherwise inconsistent.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在的任何类结构都是杂乱的、不连贯的，或者是不一致的。
- en: It relies more heavily on functions than on class methods.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它更多地依赖于函数而不是类方法。
- en: Its page scripts, classes, and functions combine the concerns of model, view,
    and controller into the same scope.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的页面脚本、类和函数将模型、视图和控制器的关注点合并到同一个范围内。
- en: It shows evidence of one or more incomplete attempts at a rewrite, sometimes
    as a failed framework integration.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它显示出一次或多次未完成的重写尝试的证据，有时作为失败的框架集成。
- en: It has no automated test suite for the developers to run.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有为开发人员运行的自动化测试套件。
- en: These characteristics are probably familiar to anyone who has had to deal with
    a very old PHP application. They describe what I call a typical PHP application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特征对于任何曾经处理过非常古老的PHP应用程序的人来说可能很熟悉。它们描述了我所说的典型PHP应用程序。
- en: The typical PHP application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 典型PHP应用程序
- en: Most PHP developers are not formally trained as programmers, or are almost entirely
    self-taught. They often come to the language from other, usually non-technical,
    professions. Somehow or another, they are tasked with the duty of creating webpages
    because they are seen as the most technically-savvy person in their organization.
    Since PHP is such a forgiving language and grants a lot of power without a lot
    of discipline, it is very easy to produce working web pages and even applications
    without a lot of training.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数PHP开发人员并没有接受过正式的编程培训，或者几乎完全是自学的。他们通常是从其他非技术专业转入这门语言。不知何故，他们被赋予了创建网页的任务，因为他们被视为组织中最懂技术的人。由于PHP是一种宽容的语言，并且在没有太多纪律的情况下赋予了很多权力，因此很容易在没有太多培训的情况下制作工作的网页甚至应用程序。
- en: These and other factors strongly influence the underlying foundation of the
    typical PHP application. They are usually not written in a popular full-stack
    framework or even a micro-framework. Instead, they are often a series of page
    scripts, placed directly in the web server document root, to which clients can
    browse directly. Any functionality that needs to be reused has been collected
    into a series of `include` files. There are `include` files for common configurations
    and settings, headers and footers, common forms and content, function definitions,
    navigation, and so on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些和其他因素强烈影响了典型PHP应用程序的基础。它们通常不是用流行的全栈框架甚至微框架编写的。相反，它们通常是一系列页面脚本，直接放置在Web服务器文档根目录中，客户端可以直接浏览。需要重复使用的任何功能都已经被收集到一系列“包含”文件中。有用于常见配置和设置、页眉和页脚、常见表单和内容、函数定义、导航等的“包含”文件。
- en: This reliance on `include` files in the typical PHP application is what makes
    me call them include-oriented architectures. The legacy application uses `include`
    calls everywhere to couple the pieces of the program into a single whole. This
    is in contrast to a class-oriented architecture, where even if the application
    does not adhere to good object-oriented programming principles, at least the behaviors
    are bundled into classes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 典型PHP应用程序中对“包含”文件的依赖是我称之为基于包含的架构的原因。传统应用程序在程序的各个部分之间使用“包含”调用来将它们耦合成一个整体。这与面向类的架构形成对比，即使应用程序不遵循良好的面向对象编程原则，至少行为被捆绑到类中。
- en: File Structure
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件结构
- en: 'The typical include-oriented PHP application generally looks something like
    this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的基于包含的PHP应用程序通常看起来像这样：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The structure shown is a simplified example. There are many possible variations.
    In some legacy applications, I have seen literally hundreds of main-level page
    scripts and dozens of subdirectories with their own unique hierarchies for additional
    pages. The key is that the legacy application is usually in the document root,
    has page scripts that users browse to directly, and uses `include` files to manage
    most program behavior instead of classes and objects.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所示的结构是一个简化的示例。有许多可能的变化。在一些传统应用程序中，我曾看到成百上千的主要页面脚本和数十个子目录，这些子目录有它们自己独特的层次结构用于额外的页面。关键是传统应用程序通常位于文档根目录中，具有用户可以直接浏览的页面脚本，并且使用“包含”文件来管理大部分程序行为，而不是类和对象。
- en: Page Scripts
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面脚本
- en: Legacy applications will use individual page scripts as the access point for
    public behavior. Each page script is responsible for setting up the global environment,
    performing the requested logic, and then delivering output to the client.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 传统应用程序将使用单独的页面脚本作为公共行为的访问点。每个页面脚本负责设置全局环境，执行请求的逻辑，然后将输出传递给客户端。
- en: '[Appendix A](apa.xhtml "Appendix A. Typical Legacy Page Script"), *Typical
    Legacy Page Script* contains a sanitized, anonymized version of a typical legacy
    page script from a real application. I have taken the liberty of making the indentation
    consistent (originally, the indents were somewhat random) and wrapping it at 60
    characters so it fits better on e-reader screens. Go take a look at it now, but
    be careful. I won''t be held liable if you go blind or experience post-traumatic
    stress as a result! As we examine it, we find all manner of issues that make maintenance
    and improvement difficult:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 附录A，*典型的传统页面脚本*包含了一个真实应用程序中典型传统页面脚本的经过消毒、匿名化的版本。我已经自作主张使缩进保持一致（原本，缩进有些随机），并将其包装在60个字符中，以便更好地适应电子阅读器屏幕。现在去看看它，但要小心。如果你变瞎了或者因此经历了创伤后应激障碍，我不会对此负责！当我们检查它时，我们发现了许多使维护和改进变得困难的问题：
- en: The `include` statements to execute setup and presentation logic
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include`语句执行设置和呈现逻辑'
- en: inline function definitions
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联函数定义
- en: global variables
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局变量
- en: model, view, and controller logic all combined in a single script
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型、视图和控制器逻辑都集成在一个单独的脚本中
- en: trusting user input
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信任用户输入
- en: possible SQL injection vulnerabilities
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能的SQL注入漏洞
- en: possible cross-site scripting vulnerabilities
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能的跨站脚本漏洞
- en: unquoted array keys generating notices
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未引用的数组键生成通知
- en: The `if` blocks not wrapped in braces (adding a line in the block later will
    not actually be part of the block)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未用大括号包裹的`if`块（稍后在块中添加一行实际上不会成为块的一部分）
- en: copy-and-paste repetition
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制和粘贴重复
- en: The [Appendix A](apa.xhtml "Appendix A. Typical Legacy Page Script"), *Typical
    Legacy Page Script* example is relatively tame as far as legacy page scripts go.
    I have seen other scripts where JavaScript and CSS code have been mixed in, along
    with remote-file inclusions and all sorts of security flaws. It is also only (`!`)
    about 400 lines long. I have seen page scripts that are thousands of lines long
    which generate several different page variations, all wrapped into a single `switch`
    statement with a dozen or more `case` conditions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 附录A，*典型的传统页面脚本*示例相对来说比传统页面脚本要温和一些。我见过其他脚本，其中混合了JavaScript和CSS代码，还有远程文件包含和各种安全漏洞。它也只有（！）大约400行长。我见过数千行长的页面脚本，生成了几种不同的页面变体，都包含在一个单独的`switch`语句中，有十几个`case`条件。
- en: Rewrite or Refactor?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重写还是重构？
- en: Many developers, when presented with a typical PHP application, are able to
    live with it for only so long before they want to scrap it and rewrite it from
    scratch. Nuke it from orbit; it's the only way to be sure! is the rallying cry
    of these enthusiastic and energetic programmers. Other developers, their enthusiasm
    drained by their death march experience, feel cautious and wary at such a suggestion.
    They are fully aware that the codebase is bad, but the devil (or in our case,
    code) they know is better than the devil they don't.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发人员在面对典型的PHP应用程序时，只能忍受一段时间，然后就想要放弃并从头开始重写。从轨道上摧毁它；这是这些热情洋溢、充满活力的程序员的呐喊口号。其他开发人员，由于他们的死亡行军经历而失去了热情，对这样的建议感到谨慎和警惕。他们完全意识到代码库很糟糕，但他们所知道的魔鬼（或在我们的情况下，代码）总比他们不知道的魔鬼好。
- en: The Pros and Cons of Rewriting
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重写的利弊
- en: A complete rewrite is a very tempting idea. Developers championing a rewrite
    feel like they will be able to do all the right things the first time through.
    They will be able to write unit tests, enforce best practices, separate concerns
    according to modern pattern definitions, and use the latest framework or even
    write their own framework (since they know best what their own needs are). Because
    the existing application can serve as a reference implementation, they feel confident
    that there will be little or no trial-and-error work in rewriting the application.
    The needed behaviors already exist; all the developers need to do is copy them
    to the new system. The behaviors that are difficult or impossible to implement
    in the existing system can be added on from the start as part of the rewrite.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完全重写是一个非常诱人的想法。主张重写的开发人员觉得他们将能够第一次就做对所有正确的事情。他们将能够编写单元测试，强制执行最佳实践，根据现代模式定义分离关注点，并使用最新的框架，甚至编写自己的框架（因为他们最了解自己的需求）。因为现有应用程序可以作为参考实现，他们确信在重写应用程序时几乎不需要试错。所需的行为已经存在；所有开发人员需要做的就是将它们复制到新系统中。在现有系统中难以实现的行为可以作为重写的一部分从一开始就添加进去。
- en: 'As tempting as a rewrite sounds, it is fraught with many dangers. Joel Spolsky
    had this to say regarding the old Netscape Navigator web browser rewrite in 2000:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管重写听起来很诱人，但它充满了许多危险。Joel Spolsky在2000年关于旧版网景导航器网络浏览器重写的评论如下：
- en: '|   | *Netscape made the single worst strategic mistake that any software company
    can make by deciding to rewrite their code from scratch. Lou Montulli, one of
    the 5 programming superstars who did the original version of Navigator, emailed
    me to say, I agree completely, it''s one of the major reasons I resigned from
    Netscape. This one decision cost Netscape 3 years. That''s three years in which
    the company couldn''t add new features, couldn''t respond to the competitive threads
    from Internet Explorer, and had to sit on their hands while Microsoft completely
    ate their lunch.* |   |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| | *网景公司犯了软件公司可能犯的最严重的战略错误，决定从头开始重写他们的代码。路易·蒙图利是网景导航器原始版本的五位编程超级巨星之一，他给我发电子邮件说，我完全同意，这是我从网景辞职的主要原因之一。这个决定让网景损失了3年时间。这是三年时间，公司无法添加新功能，无法应对来自Internet
    Explorer的竞争威胁，不得不坐视微软完全吞掉他们的市场份额。* | |'
- en: '|   | --*Joel Spolsky, Netscape Goes Bonkers* |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| --*乔尔·斯波尔斯基，《网景疯了》* |'
- en: Netscape went out of business as a result.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 网景因此破产了。
- en: 'Josh Kerr relates a similar story regarding TextMate:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 乔什·科尔讲述了一个类似的故事，涉及TextMate：
- en: '|   | *Macromates, an indie company who had a very successful text editor called
    Textmate, decided to rewrite the code base for Textmate 2\. It took them 6 years
    to get a beta release out the door which is an eternity in today''s time and they
    lost a lot of market share. When they did release a beta, it was too late and
    6 months later they folded the project and pushed it on to Github as an open source
    project.* |   |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| *Macromates是一家成功的文本编辑器Textmate的独立公司，决定重写Textmate 2的代码基础。他们花了6年时间才发布了一个测试版，这在当今的时间里是一个漫长的时间，他们失去了很多市场份额。当他们发布测试版时，已经太迟了，6个月后他们放弃了这个项目，并将其推到Github上作为一个开源项目。*
    |   |'
- en: '|   | --*Josh Kerr, TextMate 2 And Why You Shouldn''t Rewrite Your Code* |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --*乔什·科尔，《TextMate 2和为什么不应该重写你的代码》* |'
- en: 'Fred Brooks calls the urge to do a complete rewrite the second-system effect.
    He wrote about this in 1975:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 弗雷德·布鲁克斯称对进行完全重写的冲动为第二系统效应。他在1975年写道：
- en: '|   | *The second is the most dangerous system a man ever designs. ... The
    general tendency is to over-design the second system, using all the ideas and
    frills that were cautiously sidetracked on the first one. ... The second-system
    effect has ... a tendency to refine techniques whose very existence has been made
    obsolete by changes in basic system assumptions. ... How does the project manager
    avoid the second-system effect? By insisting on a senior architect who has at
    least two systems under his belt.* |   |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| *第二个是人类设计的最危险的系统。…一般的倾向是过度设计第二个系统，使用在第一个系统上小心翼翼地搁置的所有想法和装饰。…第二系统效应…倾向于完善那些由于基本系统假设的变化而已经过时的技术。…项目经理如何避免第二系统效应？坚持要求至少有两个系统经验的高级架构师。*
    |   |'
- en: '|   | --*Fred Brooks, The Mythical Man-Month*, pp. 53-58. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --*弗雷德·布鲁克斯，《神话般的程序员月工作》，第53-58页。* |'
- en: Developers were the same forty years ago as they are today. I expect them to
    be the same over the next forty years as well; human beings remain human beings.
    Overconfidence, insufficient pessimism, ignorance of history, and the desire to
    be one's own customer all lead developers easily into rationalizations that this
    time will be different when they attempt a rewrite.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员在四十年前和今天是一样的。我期待他们在未来四十年也是一样的；人类始终是人类。过度自信、不够悲观、对历史的无知以及成为自己的客户的愿望都会让开发人员很容易地产生理性化，认为这一次会有所不同，当他们尝试重写时。
- en: Why Don't Rewrites Work?
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么重写不起作用？
- en: 'There are lots of reasons why a rewrite rarely works, but I will concentrate
    on only one general reason here: the intersection of resources, knowledge, communication,
    and productivity. (Be sure to read *The Mythical Man-Month* (pp. 13-26) for a
    great description of the problems associated with thinking of resources and scheduling
    as interchangeable elements.)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重写很少成功的原因有很多，但我只会集中在一个一般原因上：资源、知识、沟通和生产力的交集。（一定要阅读《神话般的程序员月工作》（第13-26页），了解与将资源和计划安排视为可互换元素相关的问题的出色描述。）
- en: As with all things, we have only limited resources to bring to bear against
    the rewrite project. There are only a certain number of developers in the organization.
    These are the developers who will have to do *both* maintenance on the existing
    program *and* write the completely new version of the program. Any developers
    working on the one project will not be able to work on the other.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有事物一样，我们只有有限的资源来对抗重写项目。组织中只有一定数量的开发人员。这些开发人员将不得不*同时*对现有程序进行维护*和*编写程序的全新版本。任何参与一个项目的开发人员将无法参与另一个项目。
- en: The Context-switching problem
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上下文切换问题
- en: One idea is to have the existing developers spend part of their time on the
    old application and part of their time on the new one. However, moving a developer
    between the two projects will not be an even split of productivity. Because of
    the cognitive load of context-switching, the developer will be less than half
    as productive on each.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一个想法是让现有的开发人员在旧应用程序和新应用程序上花一部分时间。然而，将开发人员在两个项目之间移动不会带来生产力的均衡分配。由于上下文切换的认知负荷，开发人员在每个项目上的生产力将不到一半。
- en: The Knowledge problem
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 知识问题
- en: To avoid the productivity losses from switching developers between maintenance
    and the rewrite, the organization may try to hire more developers. Some can then
    be dedicated to the old project and others to the new project. Unfortunately,
    this approach reveals what F. A. Hayek calls the knowledge problem. Originally
    applied to the realm of economics, the knowledge problem applies equally as well
    to programming.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在维护和重写之间切换开发人员带来的生产力损失，组织可能会尝试雇佣更多的开发人员。然后一些人可以专门负责旧项目，另一些人可以专门负责新项目。不幸的是，这种方法揭示了F·A·哈耶克所说的知识问题。最初应用于经济领域，知识问题同样适用于编程。
- en: 'If we put the new developers on the rewrite project, they won''t know enough
    about the existing system, the existing problems, the business goals, and perhaps
    not even the best practices for doing the rewrite to be effective. They will have
    to be trained on these things, most likely by the existing developers. This means
    the existing developers, who have been relegated to maintaining the existing program,
    will have to spend a lot of time communicating knowledge to the new hires. The
    amount of time involved is non-trivial, and the communication of this knowledge
    will have to continue until the new developers are as well-versed as the existing
    developers. This means that the linear increase in resources results in a less-than-linear
    increase in productivity: a 100% increase in the number of programmers will result
    in a less than 50% increase in output, sometimes much less (cf. *The Miserable
    Mathematics of the Man-Month* – [http://paul-m-jones.com/archives/1591](http://paul-m-jones.com/archives/1591)).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们让新开发人员参与重写项目，他们将不了解现有系统、现有问题、业务目标，甚至可能不了解进行重写的最佳实践。他们将需要在这些方面接受培训，很可能是由现有的开发人员进行培训。这意味着已经被指定维护现有程序的现有开发人员将不得不花费大量时间向新员工传授知识。所涉及的时间量是非常可观的，这种知识的传递将不得不持续，直到新开发人员和现有开发人员一样熟练。这意味着资源的线性增加导致生产力的不成比例增加：程序员数量增加100%将导致产出不到50%的增加，有时甚至更少。
- en: Alternatively, we could put the existing developers on the rewrite project,
    and the new hires on maintenance of the existing program. This too reveals a knowledge
    problem because the new developers are completely unfamiliar with the system.
    Where will they get the knowledge they need to do their work? From the existing
    developers, of course, who will still need to spend valuable time communicating
    their knowledge to the new hires. Once again, we see that the linear increase
    in developers leads to a less-than-linear increase in productivity.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以让现有的开发人员参与重写项目，让新员工负责维护现有程序。这也暴露了一个知识问题，因为新开发人员完全不熟悉该系统。他们将从哪里获取他们需要做工作的知识？当然是从现有的开发人员那里，他们仍然需要花费宝贵的时间向新员工传授知识。我们再次看到，开发人员的线性增加导致生产力的不成比例增加。
- en: The Schedule Problem
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时间表问题
- en: To deal with the knowledge problem and the related communication costs, some
    may feel the best way to handle the project would be to dedicate all the existing
    developers on the rewrite, and delay maintenance and upgrades on the existing
    system until the rewrite is done. This is a great temptation because the developers
    will be all too eager to salve their own pains and become their own customers
    - becoming excited about what features they want to have and what fixes they want
    to make. These desires will lead them to overestimate their own ability to perform
    a full rewrite and underestimate the amount of time needed to complete it. The
    managers, for their part, will accept the optimism of the developers, perhaps
    adding some buffer in the schedule for good measure.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决知识问题和相关的沟通成本，有些人可能会觉得处理项目的最佳方式是将所有现有的开发人员都专门用于重写，并延迟对现有系统的维护和升级，直到重写完成。这是一个很大的诱惑，因为开发人员会急于解决自己的问题，并成为自己的客户-对他们想要拥有的功能和他们想要进行的修复感到兴奋。这些愿望会导致他们高估自己进行全面重写的能力，低估完成所需的时间。而管理者则会接受开发人员的乐观态度，可能会在时间表中添加一些缓冲以确保安全。
- en: The overconfidence and optimism of the developers will morph into frustration
    and pain when they realize the task is actually much greater and more overwhelming
    than they first thought. The rewrite will go on much longer than anticipated,
    not by a little, but by an order of magnitude or more. For the duration of the
    rewrite, the existing program will languish - buggy and missing features - disappointing
    existing customers and failing to attract new ones. The rewrite project will,
    at the end, become a panicked death march to get it done at all costs, and the
    result will be a codebase that is just as bad as the first one, only in different
    ways. It will be merely a copy of the first system, because schedule pressures
    will have dictated that new features be delayed until after an initial release
    is achieved.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发人员意识到任务实际上比他们最初想象的要大得多和更加压倒性时，他们的过度自信和乐观主义将变成沮丧和痛苦。重写将比预期的时间长得多，不是一点点，而是一个数量级或更多。在重写期间，现有程序将被搁置-存在错误和缺少功能-令现有客户失望，无法吸引新客户。重写项目最终将成为一场惊慌的死亡行军，不惜一切代价完成，结果将是一个与第一个一样糟糕的代码库，只是以不同的方式。它只是第一个系统的复制品，因为时间表的压力将决定新功能要延迟到初始发布之后。
- en: Iterative Refactoring
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代重构
- en: Given the risks associated with a complete rewrite, I recommend refactoring
    instead. Refactoring means that the *quality* of the program is improved in small
    steps, without changing the *functionality* of the program. A single, relatively
    small change is introduced across the entire system. The system is then tested
    to make sure it still works properly, and finally, the system is put into production.
    A second small change builds on the previous one, and so on. Over a period of
    time, the system becomes markedly easier to maintain and improve.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到完全重写所带来的风险，我建议进行重构。重构意味着通过小步骤改进程序的*质量*，而不改变程序的*功能*。整个系统引入了一个相对较小的变化。然后测试系统以确保它仍然正常工作，最后将系统投入生产。第二个小变化建立在前一个变化的基础上，依此类推。随着时间的推移，系统变得更容易维护和改进。
- en: A refactoring approach is decidedly less appealing than a complete rewrite.
    It defies the core sensibilities of most developers. The developers have to continue
    working with the system as it is, warts and all, for long periods of time. They
    do not get to switch over to the latest, hottest framework. They do not get to
    become their own customers and indulge their desires to do things right the first
    time. Being a longer-term strategy, the refactoring approach does not appeal to
    a culture that values rapid development of new applications over patching existing
    ones. Developers usually prefer to start their own new projects, not maintain
    older projects developed by others.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 重构方法显然不如完全重写吸引人。它违背了大多数开发人员的核心感知。开发人员必须继续长时间地使用系统，无论其中存在什么问题。他们不能立刻切换到最新、最热门的框架。他们不能成为自己的客户，并满足第一次就把事情做对的愿望。作为一种长期策略，重构方法并不吸引那些更看重快速开发新应用而不是修补现有应用的文化。开发人员通常更喜欢开始自己的新项目，而不是维护他人开发的旧项目。
- en: However, as a risk-reducing strategy, using an iterative refactoring approach
    is undeniably superior to a rewrite. The individual refactorings themselves are
    small compared to any similar portion of a rewrite project. They can be applied
    in much shorter periods of time than a comparable feature would be in a rewrite,
    and they leave the existing codebase in a working state at the end of each iteration.
    At no point does the existing application stop operating or progressing. The iterative
    refactorings can be integrated into a larger process with scheduling that allows
    for cycles of bug fixes, feature additions, and refactorings to improve the next
    cycle.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，作为一种降低风险的策略，使用迭代的重构方法无疑优于重写。与重写项目中的任何类似部分相比，单个重构本身要小得多。它们可以在比重写更短的时间内应用，并且在每次迭代结束时都会使现有代码库保持工作状态。现有应用程序从未停止运行或进展。迭代的重构可以集成到一个更大的过程中，其中安排允许进行错误修复、功能添加和重构以改进下一个周期。
- en: 'Finally, the goal of any single refactoring step is not perfection. The goal
    in each step is merely improvement. We are not trying to realize an impossible
    goal over a long period of time. We are taking small steps toward easily-visualized
    goals that can be accomplished in short timeframes. Each small refactoring win
    will both improve morale and drive enthusiasm for the next refactoring step. Over
    time, these many small wins accumulate into a single big win: a fully-modernized
    codebase that has never stopped generating revenue for the business.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，任何单个重构步骤的目标不是完美，而是改进。我们并不试图在长时间内实现一个不可能的目标。我们正在朝着可以在短时间内实现的易于可视化的目标迈出小步。每个小的重构胜利都将提高士气，并激发对下一个重构步骤的热情。随着时间的推移，这些许多小胜利积累成一个大胜利：一个永远不停地为企业创造收入的现代化代码库。
- en: Legacy Frameworks
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遗留框架
- en: Until now, we have been discussing legacy applications as page-based, include-oriented
    systems. However, there is also a large base of legacy code out there using public
    frameworks.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在讨论基于页面、包含导向系统的遗留应用程序。然而，还有大量基于公共框架的遗留代码。
- en: Framework-based Legacy Applications
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于框架的遗留应用程序
- en: Each different public framework in PHP land is its own unique hell. Applications
    written in *CakePHP* ([http://cakephp.org/](http://cakephp.org/)) suffer from
    different legacy issues than those written in CodeIgniter, Solar, Symfony 1, Zend
    Framework 1, and so on. Each of these different frameworks, and their varying
    work-alikes, encourage different kinds of tight-coupling in applications. Thus,
    the specific steps needed to refactor applications built using one of these frameworks
    are very different from the steps needed for a different framework.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: PHP领域中的每个不同的公共框架都有其独特的问题。使用*CakePHP*（[http://cakephp.org/](http://cakephp.org/)）编写的应用程序遇到的遗留问题与使用CodeIgniter、Solar、Symfony
    1、Zend Framework 1等编写的应用程序遇到的问题不同。每个不同的框架及其各种变体都鼓励应用程序中不同类型的紧耦合。因此，需要重构使用其中一个框架构建的应用程序的具体步骤与需要为另一个框架进行重构的步骤非常不同。
- en: As such, various parts of this book may be useful as a guide to refactoring
    different parts of a legacy application based on a public framework, but as a
    whole, the book is not targeted at refactoring applications based on these public
    frameworks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本书的各个部分可能作为指导遗留应用程序不同部分的重构的指南，但整体上，本书并不针对基于这些公共框架的应用程序进行重构。
- en: In-house, private, or otherwise non-public frameworks under the direct control
    of their own architects within the organization likely to benefit from the refactorings
    included in this book.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 内部、私有或其他非公开框架由组织内部的架构师直接控制，很可能会受益于本书中包含的重构。
- en: Refactoring to a Framework
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重构到框架
- en: I sometimes hear about how developers wisely wish to avoid a complete rewrite
    and instead want to refactor or migrate to a public framework. This sounds like
    the best of both worlds, combining an iterative approach with the developers'
    desire to use the hottest new technology.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我有时听说开发人员明智地希望避免完全重写，而是希望重构或迁移到公共框架。这听起来像是两全其美，结合了迭代方法和开发人员使用最新技术的愿望。
- en: My experience with legacy PHP applications has been that they are almost as
    resistant to framework integration as they are to unit testing. If the application
    was already in a state where its logic could be ported to a framework, there would
    be little need to port it in the first place.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我对遗留PHP应用程序的经验是，它们对框架集成的抵抗几乎和对单元测试一样强烈。如果应用程序已经处于可以将其逻辑移植到框架的状态，那么首先移植它的必要性就很小。
- en: However, by the time we have completed the refactorings in this book, the application
    is very likely to be in a state that will be much more amenable to a public framework
    migration. Whether the developers will still want to do so is another matter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们完成本书中的重构时，应用很可能会处于一个更适合进行公共框架迁移的状态。开发人员是否仍然愿意这样做是另一回事。
- en: Review and next steps
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: At this point, we have realized that a rewrite, while appealing, is a dangerous
    approach. An iterative refactoring approach sounds a lot more like actual work,
    but has the benefit of being achievable and realistic.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们意识到重写虽然吸引人，但是是一种危险的方法。迭代的重构方法听起来更像是实际工作，但它的好处是可以实现和现实的。
- en: The next step is to prepare ourselves for the refactoring approach by getting
    some prerequisites out of the way. After that, we will proceed toward modernizing
    our legacy application in a series of relatively small steps, one step per chapter
    with each step broken down into an easy-to-follow process with answers to common
    questions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是通过解决一些先决条件来为重构方法做好准备。之后，我们将通过一系列相对较小的步骤来现代化我们的遗留应用程序，每章一步，每一步都分解成易于遵循的过程，并提供常见问题的答案。
- en: Let's get started!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
