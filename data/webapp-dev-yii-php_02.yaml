- en: Chapter 2. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 入门
- en: The real pleasures and benefits of Yii are quickly revealed simply by using
    it. In this chapter, we will see how the concepts introduced in the previous chapter
    are manifested in an example Yii application. In the spirit of Yii's philosophy
    of convention over configuration, we will follow a standard convention and begin
    by writing a "Hello, World!" program in Yii.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地使用Yii，我们很快就能发现Yii的真正乐趣和好处。在本章中，我们将看到在一个示例Yii应用程序中，前一章介绍的概念是如何体现的。遵循Yii的约定优于配置的理念，我们将按照标准约定开始编写一个Yii中的“Hello,
    World!”程序。
- en: 'In this chapter we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Yii framework installation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yii框架安装
- en: Creating a new application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的应用程序
- en: Creating controllers and views
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建控制器和视图
- en: Adding dynamic content to view files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向视图文件添加动态内容
- en: Yii request routing and linking pages together
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yii请求路由和链接页面
- en: Our first step is to install the framework. Let's do that now.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是安装框架。现在让我们来做吧。
- en: Installing Yii
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Yii
- en: Prior to installing Yii, you must configure your application development environment
    as a web server capable of supporting PHP 5.1.0 or above. Yii has been thoroughly
    tested with the Apache HTTP server on Windows and Linux operating systems. It
    may also run on other web servers and platforms that support PHP 5\. We assume
    that the reader has previously engaged in PHP development, and has access to or
    otherwise has knowledge of how to set up such an environment. We will leave the
    installation of a web server and PHP itself, as an exercise to the reader.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Yii之前，您必须将应用程序开发环境配置为支持PHP 5.1.0或更高版本的Web服务器。Yii已经在Windows和Linux操作系统上的Apache
    HTTP服务器上进行了彻底测试。它也可以在支持PHP 5的其他Web服务器和平台上运行。我们假设读者以前已经参与过PHP开发，并且可以访问或者知道如何设置这样的环境。我们将把Web服务器和PHP本身的安装留给读者自己去练习。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some popular installation packages includ
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些流行的安装包包括
- en: '[http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.apachefriends.org/en/xampp.html](http://www.apachefriends.org/en/xampp.html)'
- en: '[http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html) (`mac
    only`)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.mamp.info/en/index.html](http://www.mamp.info/en/index.html) (`仅适用于mac`)'
- en: 'The basic Yii installation is almost trivial. There are really only two necessary
    steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的Yii安装几乎是微不足道的。实际上只有两个必要的步骤：
- en: Download the Yii framework from [http://www.yiiframework.com/download/](http://www.yiiframework.com/download/).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.yiiframework.com/download/](http://www.yiiframework.com/download/)下载Yii框架。
- en: Unpack the downloaded file to a web-accessible directory. There are several
    versions of Yii to choose from when downloading the framework. We will be using
    version 1.1.12 for the purpose of this book, which is the latest stable version
    as of the time of writing. Though most of the example code should work with any
    1.1.x version of Yii, there may be some subtle differences if you are using a
    different version. Please attempt to use 1.1.12 if you are following along with
    the examples.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的文件解压到可通过Web访问的目录。在下载框架时，可以选择几个版本的Yii。在本书的目的中，我们将使用1.1.12版本，这是写作时的最新稳定版本。虽然大多数示例代码应该适用于任何1.1.x版本的Yii，但如果您使用不同版本可能会有一些细微差异。如果您正在跟随示例，请尝试使用1.1.12版本。
- en: 'After you have downloaded the framework files and unpacked them in a web-accessible
    directory, list the contents. You should see the following high-level directories
    and files:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载了框架文件并将其解压到可通过Web访问的目录后，列出其内容。您应该看到以下高级目录和文件：
- en: '`CHANGELOG`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CHANGELOG`'
- en: '`LICENSE`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE`'
- en: '`README`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README`'
- en: '`UPGRADE`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UPGRADE`'
- en: '`demos/`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`demos/`'
- en: '`framework/`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`framework/`'
- en: '`requirements/`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements/`'
- en: 'Now that we have our framework unpacked in a web-accessible directory, it is
    advised that you verify that your server satisfies all of the requirements of
    using Yii, to ensure that the installation was a success. Luckily, doing so is
    very easy. Yii comes with a simple requirements checking tool. To use the tool
    and have it verify the requirements for your installation, simply point your browser
    to the `index.php` entry script under the `requirements/` directory that came
    with the downloaded files. For example, assuming that the name of the directory
    containing all of the framework files is simply called `yii`, the URL to access
    the requirements checker might look like:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在可通过Web访问的目录中解压了我们的框架，建议您验证服务器是否满足使用Yii的所有要求，以确保安装成功。幸运的是，这样做非常容易。Yii带有一个简单的要求检查工具。要使用该工具并让其验证您的安装要求，只需将浏览器指向所下载文件中的`requirements/`目录下的`index.php`入口脚本。例如，假设包含所有框架文件的目录的名称只是叫做`yii`，那么访问要求检查器的URL可能如下所示：
- en: '`http://localhost/yii/requirements/index.php`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/yii/requirements/index.php`'
- en: 'The following screenshot shows the results that we see for our configuration:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了我们配置的结果：
- en: '![Installing Yii](graphics/8727_02_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![安装Yii](graphics/8727_02_02.jpg)'
- en: 'Using the requirements checker is not, in itself, a requirement for installation.
    But it is certainly recommended to ensure proper installation. As you can see,
    not all of our results under the details section received a **Passed** status,
    as some display a **Warning** result. Of course, your configuration will most
    likely be slightly different from ours, and consequently your results may be slightly
    different as well. That is okay. It is not necessary that all of the checks under
    the **Details** section pass, but it is necessary to receive the following message
    under the **Conclusion** section: **Your server configuration satisfies the minimum
    requirements by Yii**.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用要求检查器本身并不是安装的要求。但建议使用它来确保正确安装。正如您所看到的，我们在详细部分的结果并非全部都是**通过**状态，有些显示**警告**结果。当然，您的配置很可能与我们的略有不同，因此您的结果也可能略有不同。这没关系。并不是所有**详细**部分的检查都必须通过，但是必须在**结论**部分收到以下消息：**您的服务器配置满足Yii的最低要求**。
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The Yii framework files do not need to be, and it is recommended they not be,
    placed in a publicly accessible web directory. We did this here simply to quickly
    take advantage of the requirements checker in our browser. A Yii application has
    a one entry script, which is usually the only file that needs to be placed in
    the webroot (by webroot, we mean the directory containing the `index.php` entry
    script). Other PHP scripts, including all of the Yii framework files, should be
    protected from outside user access to avoid security issues. Simply reference
    the directory containing the Yii framework files in the entry script and place
    these files outside of the webroot.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Yii框架文件不需要被放置在公开访问的web目录中，建议不要这样做。我们在这里这样做只是为了快速利用浏览器中的要求检查器。Yii应用程序有一个入口脚本，通常是唯一需要放置在web根目录中的文件（web根目录指的是包含`index.php`入口脚本的目录）。其他PHP脚本，包括所有的Yii框架文件，应该受到保护，以避免安全问题。只需在入口脚本中引用包含Yii框架文件的目录，并将这些文件放在web根目录之外。
- en: Installing a database
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装数据库
- en: 'Throughout this book, we will be using a database to support many of our examples
    and the application that we will be writing. In order to properly follow along
    with this book, it is recommended you install a database server. Though you can
    use any database that is supported by PHP with Yii, if you want to use some of
    the built-in database abstraction layers and tools within Yii, as we will be using,
    you will need to use one that is supported by the framework. As of version 1.1
    those are:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用数据库来支持许多示例和我们将要编写的应用程序。为了正确地跟随本书，建议你安装一个数据库服务器。虽然你可以使用Yii支持的任何数据库，如果你想使用Yii内置的数据库抽象层和工具，就像我们将要使用的那样，你需要使用框架支持的数据库。截至1.1版本，支持的数据库有：
- en: MySQL 4.1 or later
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL 4.1或更高版本
- en: PostgresSQL 7.3 or later
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgresSQL 7.3或更高版本
- en: SQLite 2 and 3
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite 2和3
- en: Microsoft SQL Server 2000 or later
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft SQL Server 2000或更高版本
- en: Oracle
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oracle
- en: Tip
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: While you may follow along with all of the examples in this book by using any
    of the supported database servers, we will be using MySQL (5.1 to be more specific)
    as our database server throughout all the examples. It is recommended that you
    also use MySQL, version 5 or greater, to ensure that the examples provided work
    without having to make adjustments. We won't need a database for our simple "Hello,
    World!" application seen in this chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以使用任何受支持的数据库服务器来跟随本书中的所有示例，但我们将在所有示例中使用MySQL（具体来说是5.1）作为我们的数据库服务器。建议你也使用MySQL，版本为5或更高，以确保所提供的示例可以正常工作而无需进行调整。在本章中，我们的简单的“Hello,
    World!”应用程序不需要数据库。
- en: Now that we have installed the framework and have verified that we have met
    the minimum requirements, let's move on to creating a brand new Yii web application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了框架并验证了我们已满足最低要求，让我们继续创建一个全新的Yii web应用程序。
- en: Creating a new application
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新应用程序
- en: To create a new application, we are going to use a little powerhouse of a tool
    that comes packaged with the framework, called *yiic*. This is a command-line
    tool that you can use to quickly bootstrap a brand new Yii application. It is
    not mandatory to use this tool, but it saves time and guarantees that a proper
    directory and file structure is in place for the application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个新的应用程序，我们将使用一个随框架捆绑的强大工具，称为*yiic*。这是一个命令行工具，你可以用它快速引导一个全新的Yii应用程序。使用这个工具并不是强制的，但它可以节省时间，并保证应用程序有一个正确的目录和文件结构。
- en: 'To use this tool, open up your command line, and navigate to a place in your
    filesystem where you will want to create your application''s directory structure.
    For the purpose of this demo application, we will assume the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个工具，打开你的命令行，并导航到你的文件系统中你想要创建应用程序目录结构的地方。为了这个演示应用程序的目的，我们假设以下情况：
- en: '`YiiRoot` is the name of the directory where you have installed the Yii framework
    files'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`YiiRoot`是你安装Yii框架文件的目录的名称'
- en: '`WebRoot` is configured as a document root of your web server'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WebRoot`被配置为你的web服务器的文档根目录'
- en: 'From your command line, change to your `WebRoot` directory and execute the
    `yiic` command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行中，切换到你的`WebRoot`目录并执行`yiic`命令：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `yiic` command may not work for you as expected, especially if you are attempting
    to use it in a Windows environment. The `yiic` file is an executable that runs
    using your command-line version of PHP. It invokes the `yiic.php` script. You
    may need to fully qualify by using `php` in front, as in `$ php yiic` or `$ php
    yiic.php`. You may also need to specify the PHP executable to be used, such as
    `C:\PHP5\php.exe yiic.php`. There is also the `yiic.bat` file, which executes
    the `yiic.php` file, that may be more suitable for Windows users. You may need
    to ensure that your PHP executable location is accessible in your `%PATH%` variable.
    Please try these variations to find a suitable solution for your computer configuration.
    I will continue to simply refer to this command as `yiic`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`yiic`命令可能不会按预期工作，特别是如果你尝试在Windows环境中使用它。`yiic`文件是一个可执行文件，使用你的命令行版本的PHP来运行。它调用`yiic.php`脚本。你可能需要在前面使用`php`来完全限定，如`$
    php yiic`或`$ php yiic.php`。你可能还需要指定要使用的PHP可执行文件，比如`C:\PHP5\php.exe yiic.php`。还有`yiic.bat`文件，它执行`yiic.php`文件，可能更适合Windows用户。你可能需要确保你的PHP可执行文件位置在你的`%PATH%`变量中是可访问的。请尝试这些变化，找到适合你计算机配置的解决方案。我将继续简单地称这个命令为`yiic`。'
- en: The `yiic webapp` command is used to create a brand new Yii web application.
    It takes just a single argument to specify either the absolute or relative path
    to the directory in which the application should be created. The result is the
    generation of all the necessary directories and files that are used to provide
    a skeleton of the default Yii web application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`yiic webapp`命令用于创建一个全新的Yii web应用程序。它只需要一个参数来指定应用程序应该被创建的目录的绝对或相对路径。结果是生成所有必要的目录和文件，用于提供默认Yii
    web应用程序的框架。'
- en: 'Let''s list the contents of our new application to see what was created for
    us:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出我们的新应用程序的内容，看看为我们创建了什么：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following is a description of these high-level items that were automatically
    created:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些高级项目的描述，这些项目是自动创建的：
- en: '`index.php`: Web application entry script file'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.php`: Web应用程序入口脚本文件'
- en: '`index-test.php`: Entry script file for loading a test configuration'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index-test.php`: 用于加载测试配置的入口脚本文件'
- en: '`assets/`: Contains published resource files'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assets/`: 包含发布的资源文件'
- en: '`css/`: Contains CSS files'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css/`: 包含CSS文件'
- en: '`images/`: Contains image files'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images/`: 包含图像文件'
- en: '`themes/`: Contains application themes'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`themes/`: 包含应用程序主题'
- en: '`protected/`: Contains protected (non-public) application files'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protected/`: 包含受保护的（非公开的）应用程序文件'
- en: With the execution of one simple command from the command line, we have created
    all the directory structure and files needed to immediately take advantage of
    Yii's sensible default configuration. All of these directories and files, along
    with the subdirectories and files that they contain, can look a little daunting
    at first glance. However, we can ignore most of them as we are getting started.
    What is important to note is that all of these directories and files are actually
    a working web application. The `yiic` command has populated the application with
    enough code to establish a simple home page, a typical contact-us page to provide
    an example of a web form, and a login page to demonstrate basic authorization
    and authentication in Yii. If your web server supports the GD2 graphics library
    extension, you will also see a CAPTCHA widget on the contact-us form, and the
    application will have the corresponding validation for this form field.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一条简单的命令行命令的执行，我们已经创建了所有所需的目录结构和文件，以立即利用Yii的合理默认配置。这些目录和文件，以及它们包含的子目录和文件，乍一看可能有点令人生畏。然而，我们在开始时可以忽略大部分内容。重要的是要注意，所有这些目录和文件实际上都是一个工作的Web应用程序。`yiic`命令已经填充了应用程序足够的代码，以建立一个简单的首页，一个典型的联系我们页面，以提供一个Web表单的示例，以及一个登录页面，以演示Yii中的基本授权和认证。如果您的Web服务器支持GD2图形库扩展，您还将在联系我们表单上看到一个CAPTCHA小部件，并且应用程序将对该表单字段进行相应的验证。
- en: 'As long as your web server is running, you should be able to open up your browser
    and navigate to `http://localhost/helloworld/index.php`. Here you will be presented
    with a **My Web Application** home page along with the friendly greeting **Welcome
    To My Web Application**, followed by some helpful next steps information. The
    following screenshot shows this example home page:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您的Web服务器正在运行，您就应该能够打开浏览器并导航到`http://localhost/helloworld/index.php`。在这里，您将看到一个**我的Web应用程序**首页，以及友好的问候语**欢迎来到我的Web应用程序**，接着是一些有用的下一步信息。以下截图显示了这个示例首页：
- en: '![Creating a new application](graphics/8727_02_01.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个新应用程序](graphics/8727_02_01.jpg)'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You will need to ensure that both the `assets/` and `protected/runtime/` directories
    are writable by your web server process, otherwise you may see an error rather
    than the working application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保`assets/`和`protected/runtime/`目录对您的Web服务器进程是可写的，否则您可能会看到一个错误而不是工作应用程序。
- en: You'll notice that there is a working application navigation bar along the top
    of the page. From left to right there is **Home**, **About**, **Contact**, and
    **Login**. Click around and explore. Clicking on the **About** link provides a
    simple example of a static page. The **Contact** link will take you to the contact
    us form that was mentioned before, along with the CAPTCHA input field in the form.
    (Again, you will only see the CAPTCHA field if you have the `gd` graphics extension
    as part of your PHP configuration.)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到页面顶部有一个可用的应用程序导航栏。从左到右依次是**主页**、**关于**、**联系**和**登录**。点击并探索。点击**关于**链接提供了一个静态页面的简单示例。**联系**链接将带您到之前提到的联系我们表单，以及表单中的CAPTCHA输入字段。（再次强调，只有在您的PHP配置中有`gd`图形扩展时，您才会看到CAPTCHA字段。）
- en: The **Login** link will take you to a page displaying a login form. This is
    working code with form validations, as well as username and password credential
    validation and authentication. Using either *demo/demo* or *admin/admin* as the
    username/password combination will get you logged onto the site. Try it out! You
    can try a login that will fail (any combination other than demo/demo or admin/admin)
    and see the error validation messages get displayed. After successfully logging
    in, the **Login** link in the header changes to a **Logout** link (username),
    where the username is either demo or admin depending on the username that you
    used to log in. It is amazing that so much has been accomplished without having
    to do any coding.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**登录**链接将带您到显示登录表单的页面。这是一个带有表单验证的工作代码，以及用户名和密码的验证和认证。使用*demo/demo*或*admin/admin*作为用户名/密码组合将使您登录到网站。试试看！您可以尝试一个将失败的登录（除了demo/demo或admin/admin之外的任何组合），并查看错误验证消息的显示。成功登录后，页眉中的**登录**链接将更改为**注销**链接（用户名），其中用户名是demo或admin，具体取决于您用于登录的用户名。令人惊讶的是，所有这些都可以在不编写任何代码的情况下完成。'
- en: '"Hello, World!"'
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '"你好，世界！"'
- en: All of this generated code will start to make more sense once we walk through
    a simple example. To try out this new system, let's build that "Hello, World!"
    program we promised at the start of this chapter. A "Hello, World!" program in
    Yii will be a simple web page application that sends this very important message
    to our browser.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们通过一个简单的示例走过，所有这些生成的代码将开始变得更加清晰。为了尝试这个新系统，让我们构建在本章开头承诺的“你好，世界！”程序。在Yii中，“你好，世界！”程序将是一个向我们的浏览器发送这条非常重要消息的简单Web页面应用程序。
- en: As discussed in [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*, Yii
    is a Model-View-Controller framework. A typical Yii web application takes in an
    incoming request from a user, processes information in that request in order to
    create a controller, and then calls an action within that controller. The controller
    can then invoke a particular view to render and return a response to the user.
    If dealing with data, the controller may also interact with a model to handle
    all the **CRUD** (**Create, Read, Update, Delete**) operations on that data. In
    our simple "Hello, World!" application, all we will require is the code for a
    controller and a view. We are not dealing with any data, so a model will not be
    needed. Let's begin our example by creating our controller.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如在[第1章](ch01.html "第1章. 遇见Yii")中讨论的那样，*遇见Yii*，Yii是一个模型-视图-控制器框架。一个典型的Yii web应用程序接收用户的传入请求，处理该请求中的信息以创建一个控制器，然后调用该控制器中的一个动作。控制器可以调用特定的视图来渲染并返回响应给用户。如果涉及数据，控制器还可以与模型交互，处理数据的所有**CRUD**（**创建，读取，更新，删除**）操作。在我们简单的“你好，世界！”应用程序中，我们只需要控制器和视图的代码。我们不涉及任何数据，因此不需要模型。让我们通过创建我们的控制器来开始我们的示例。
- en: Creating the controller
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Previously, we used the `yiic` `webapp` command to help us generate a new Yii
    web application. To create a new controller for our "Hello, World!" application,
    we'll use another utility tool provided by Yii. This tool is called Gii. **Gii**
    is a highly customizable and extensible, web-based, code-generating platform.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，我们使用`yiic` `webapp`命令来帮助我们生成一个新的Yii web应用程序。为了为我们的“你好，世界！”应用程序创建一个新的控制器，我们将使用Yii提供的另一个实用工具。这个工具叫做Gii。**Gii**是一个高度可定制和可扩展的基于Web的代码生成平台。
- en: Configuring Gii
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Gii
- en: 'Before we can use Gii, we have to configure it within our application. We do
    this in our main application configuration file located at `protected/config/main.php`.
    To configure Gii, open up this file and uncomment the `gii` module. Our autogenerated
    code already added the `gii` configuration, but it is commented out. So all we
    need to do is uncomment and then also add our own password, as shown in the following
    snippet:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Gii之前，我们必须在应用程序中对其进行配置。我们在位于`protected/config/main.php`的主应用程序配置文件中进行配置。要配置Gii，打开此文件并取消注释`gii`模块。我们的自动生成的代码已经添加了`gii`配置，但它被注释掉了。因此，我们只需要取消注释，然后还要添加我们自己的密码，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once uncommented, Gii is configured as an application module. We will cover
    Yii *modules* in detail, later in the book. The important thing at this point
    is to make sure this is added to the configuration file and that you provide your
    password. With this in place, navigate to the tool via `http://localhost/helloworld/index.php?r=gii`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 取消注释后，Gii被配置为一个应用程序模块。我们将在本书后面详细介绍Yii *模块*。此时的重要事情是确保将其添加到配置文件中，并提供您的密码。有了这个配置，通过`http://localhost/helloworld/index.php?r=gii`导航到工具。
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Actually, you can specify the password value as `false` then the module will
    not require a password. Since the ipFilters property is specified to only allow
    access to the localhost machine, it is safe to set the password to `false` for
    you local development environment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您可以将密码值指定为`false`，然后模块将不需要密码。由于ipFilters属性被指定为仅允许访问本地主机，因此在本地开发环境中将密码设置为`false`是安全的。
- en: 'Okay, after a successful entry of your password (unless you specified that
    a password should not be used), you are presented with the menu page listing Gii''s
    main features:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，在成功输入密码后（除非您指定不使用密码），您将看到列出Gii主要功能的菜单页面：
- en: '![Configuring Gii](graphics/8727_02_03_new.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![配置Gii](graphics/8727_02_03_new.jpg)'
- en: Gii has several code generation options listed in the left-hand side menu. We
    want to create a new controller, so click on the **Controller Generator** menu
    item.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Gii在左侧菜单中列出了几个代码生成选项。我们想要创建一个新的控制器，所以点击**控制器生成器**菜单项。
- en: 'Doing so will bring us to a form that allows us to fill out the relevant details
    to create a new Yii controller class. In the following screenshot, we have already
    filled out the **Controller ID** value to be `message`, and we have added an **Action
    ID** value that we are calling `hello`. The following screenshot also reflects
    that we have clicked on the **Preview** button. This is showing us all of the
    files that will be generated along with our controller class:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做将带我们到一个表单，允许我们填写相关细节以创建一个新的Yii控制器类。在下面的屏幕截图中，我们已经填写了**控制器ID**值为`message`，并且我们添加了一个我们称之为`hello`的**Action
    ID**值。下面的屏幕截图还反映了我们已经点击了**预览**按钮。这显示了将与我们的控制器类一起生成的所有文件：
- en: '![Configuring Gii](graphics/8727_02_04.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![配置Gii](graphics/8727_02_04.jpg)'
- en: We can see that in addition to our `MessageController` class, Gii is also going
    to create a view file for each of the Action IDs that we specified. You may recall
    from [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*, that if `message`
    is the **Controller ID**, our corresponding class file is named `MessageController`.
    Similarly if we provide an **Action ID** value of `hello`, we would expect there
    to be a method name in the controller called `actionHello`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，除了我们的`MessageController`类之外，Gii还将为我们指定的每个Action ID创建一个视图文件。您可能还记得[第1章](ch01.html
    "第1章. 遇见Yii")中提到的，如果`message`是**控制器ID**，我们对应的类文件名为`MessageController`。同样，如果我们提供了`hello`的**Action
    ID**值，我们期望在控制器中有一个名为`actionHello`的方法。
- en: You can also click on the links provided in the **Preview** option to see the
    code that will be generated for each file. Go ahead and check them out. Once you
    are happy with what is going to be generated, go ahead and click on the **Generate**
    button. You should receive a message telling you that the controller was successfully
    created, with a link to try it now. If instead you received an error message,
    make sure that the `controllers`/ and `views`/ directories are writable by your
    web server process.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以单击**预览**选项中提供的链接，以查看将为每个文件生成的代码。继续并查看它们。一旦您对即将生成的内容感到满意，请点击**生成**按钮。您应该收到一条消息，告诉您控制器已成功创建，并附有立即尝试的链接。如果您收到错误消息，请确保`controllers/`和`views/`目录对您的Web服务器进程是可写的。
- en: 'Clicking on the **try it now** link will actually take us to a *404 page not
    found* error page. The reason for this is that we did not specify the default
    actionID `index` when we created our new controller. We decided to call ours `hello`
    instead. All we need to do in order to make the request route to our `actionHello()`
    method is to add the actionID to the URL. This is shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**立即尝试**链接实际上会将我们带到一个*404页面未找到*错误页面。原因是我们在创建新控制器时没有指定默认的actionID `index`。我们决定将我们的称为`hello`。为了使请求路由到我们的`actionHello()`方法，我们只需要将actionID添加到URL中。如下截图所示：
- en: '![Configuring Gii](graphics/8727_02_05.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![配置Gii](graphics/8727_02_05.jpg)'
- en: Now we have it displaying the result of calling the `MessageController::actionHello()`
    method.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它显示了调用`MessageController::actionHello()`方法的结果。
- en: 'This is great. With a little help from Gii, we have generated a new controller
    PHP file called `MessageController.php`, and it was placed properly under the
    default controllers'' directory `protected/controllers/`. The generated `MessageController`
    class extends an application base class `Controller` located at `protected/components/Controller.php`,
    and this class in turn extends the base framework class `CController`. Since we
    specified the actionID `hello`, a simple action was also created within `MessageController`
    called `actionHello()`. Gii also assumed that this action, like most actions defined
    by a controller, will need to render a view. So it added the code to this method
    to render a view file by the same name, `hello.php`, and placed it in the default
    directory `protected/views/message/` for view files associated with this controller.
    Here is the uncommented part of the code that was generated for the `MessageController`
    class:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒。在Gii的帮助下，我们生成了一个名为`MessageController.php`的新控制器PHP文件，并将其正确放置在默认控制器目录`protected/controllers/`下。生成的`MessageController`类扩展了一个名为`Controller`的应用基类，位于`protected/components/Controller.php`中，而这个类又扩展了基础框架类`CController`。由于我们指定了actionID
    `hello`，因此在`MessageController`中还创建了一个名为`actionHello()`的简单操作。Gii还假定，像大多数由控制器定义的操作一样，此操作将需要呈现一个视图。因此，它添加了呈现同名视图文件`hello.php`的代码到此方法中，并将其放置在默认目录`protected/views/message/`中，用于与此控制器相关的视图文件。以下是为`MessageController`类生成的未注释部分代码：
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we can see, since we did not specify 'index' as one of the actionIDs when
    creating this controller with Gii, there is no `actionIndex()` method. As was
    discussed in [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*, by convention,
    a request that specifies a message as the controllerID, but does not specify an
    action, will be routed to the `actionIndex()` method for further processing. This
    is why we initially saw the 404 error, because the request was not specifying
    an actionID.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，由于我们在使用Gii创建此控制器时没有指定'index'作为actionID之一，因此没有`actionIndex()`方法。正如在[第1章](ch01.html
    "第1章. 遇见Yii")中讨论的那样，按照约定，指定控制器ID为消息，但未指定操作的请求将被路由到`actionIndex()`方法进行进一步处理。这就是为什么我们最初看到404错误的原因，因为请求没有指定actionID。
- en: 'Let''s take a second and fix this. As we have mentioned, Yii favors convention
    over configuration and has sensible defaults for almost everything. At the same
    time, almost everything is also configurable, and the default action for a controller
    is no exception. With a simple, single line at the top of our `MessageController`,
    we can define our `actionHello()` method as the default action. Add the following
    line to the top of the `MessageController` class:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来修复这个问题。正如我们所提到的，Yii更青睐于约定而不是配置，并且几乎所有内容都有合理的默认值。同时，几乎所有内容也是可配置的，默认控制器操作也不例外。通过在我们的`MessageController`顶部添加一行简单的代码，我们可以将`actionHello()`方法定义为默认操作。在`MessageController`类的顶部添加以下行：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.PacktPub.com](http://www.PacktPub.com)购买的所有Packt图书的帐户中下载示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)注册并直接通过电子邮件接收文件。
- en: Try it out by navigating to `http://localhost/helloworld/index.php?r=message`.
    You should still see the `hello action` page being displayed and no longer see
    the error page.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过导航到`http://localhost/helloworld/index.php?r=message`来测试。您应该仍然看到显示“hello
    action”页面，不再看到错误页面。
- en: One final step
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后一步
- en: 'To turn this into a "Hello, World!" application, all we need to do is customize
    our `hello.php` view to display "Hello, World!". Doing so is simple. Edit the
    file `protected/views/message/hello.php` so that it contains just the following
    code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其转换为“Hello, World!”应用程序，我们只需要自定义我们的`hello.php`视图以显示“Hello, World!”。这样做很简单。编辑文件`protected/views/message/hello.php`，使其只包含以下代码：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Save it, and view it again in your browser: `http://localhost/helloworld/index.php?r=message`.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 保存它，并在浏览器中再次查看：`http://localhost/helloworld/index.php?r=message`。
- en: 'It now displays our introductory greeting, as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它显示了我们的介绍性问候，如下截图所示：
- en: '![One final step](graphics/8727_02_06.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![最后一步](graphics/8727_02_06.jpg)'
- en: We have our simple application working with stunningly minimal code. All we
    have added is one line of HTML to our `hello.php` view file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的简单应用程序只需极少的代码就可以运行。我们只需在`hello.php`视图文件中添加了一行HTML。
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may be wondering where/how all of the other HTML is being generated. Our
    basic `hello.php` view file only contains a single line with an `<h1>` tag. When
    we call `render()` in our controller, there is also a layout view file being applied.
    No need to worry too much about this now, as we will be covering layouts in greater
    detail later. But if curious, you can take a look at the `protected/views/layouts/`
    directory to see the layout files that have been defined and to help shine a little
    light on where the rest of the HTML is defined.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道所有其他HTML是如何/在哪里生成的。我们基本的`hello.php`视图文件只包含一个带有`<h1>`标签的单行。当我们在控制器中调用`render()`时，也会应用布局视图文件。现在不需要太担心这一点，因为我们将在以后更详细地介绍布局。但是如果您感兴趣，您可以查看`protected/views/layouts/`目录，看看已经定义的布局文件，并帮助您了解其他HTML的定义位置。
- en: Reviewing our request routing
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查我们的请求路由
- en: 'Let''s review how Yii analyzes our request within the context of this example
    application:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下Yii如何在这个示例应用程序的上下文中分析我们的请求：
- en: Navigate to the "Hello, World!" page by pointing your browser at the URL `http://localhost/helloworld/index.php?r=message`
    (or you can use the equivalent URL `http://localhost/helloworld/index.php?r=message/hello`).
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将浏览器指向URL `http://localhost/helloworld/index.php?r=message`（或者您可以使用等效的URL
    `http://localhost/helloworld/index.php?r=message/hello`）来导航到“Hello, World!”页面。
- en: Yii analyzes the URL. The **r** (route) querystring variable indicates that
    the controllerID is `message`. This tells Yii to route the request to the message
    controller class, which it finds in `protected/controllers/MessageController.php`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Yii分析URL。**r**（路由）查询字符串变量表示controllerID是`message`。这告诉Yii将请求路由到message控制器类，它在`protected/controllers/MessageController.php`中找到。
- en: Yii also discovers that the actionID specified is `hello`. (Or if no actionID
    is specified, it routes to the controller's default action.) So the action method
    `actionHello()` is invoked within the `MessageController`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Yii还发现指定的actionID是`hello`。（或者如果没有指定actionID，它会路由到控制器的默认动作。）因此，在`MessageController`中调用`actionHello()`方法。
- en: The `actionHello()` method renders the `hello.php` view file located at `protected/views/message/hello.php`.
    And we altered this view file to simply display our introductory greeting, which
    is then returned to the browser.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`actionHello()`方法呈现位于`protected/views/message/hello.php`的`hello.php`视图文件。我们修改了这个视图文件，只是简单地显示我们的问候语，然后返回给浏览器。'
- en: This all came together with very little effort. By following Yii's default conventions,
    the entire application request routing has been seamlessly stitched together for
    us. Of course, Yii gives us every opportunity to override this default workflow
    if needed, but the more you stick with the conventions, the less time you will
    spend in tweaking configuration code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是非常轻松地组合在一起的。通过遵循Yii的默认约定，整个应用程序请求路由已经无缝地为我们拼接在一起。当然，Yii给了我们每一个机会来覆盖这个默认的工作流程，但是你越是遵循约定，你就会花费越少的时间在调整配置代码上。
- en: Adding dynamic content
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加动态内容
- en: The simplest way to add dynamic content to our view template is to embed PHP
    code into the template itself. View files are rendered by our simple application
    to result in HTML, and any basic text in these files is passed through without
    being changed. However, any content between `<?php` and `?>` is interpreted and
    executed as PHP code. This is a typical way that PHP code is embedded within HTML
    files and is probably familiar to you.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 向我们的视图模板添加动态内容的最简单方法是将PHP代码嵌入到模板本身中。视图文件由我们的简单应用程序呈现为HTML，这些文件中的任何基本文本都会被传递而不会被更改。但是，任何在`<?php`和`?>`之间的内容都会被解释和执行为PHP代码。这是PHP代码嵌入HTML文件的典型方式，可能对您来说很熟悉。
- en: Adding the date and time
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加日期和时间
- en: 'To spice up our page with dynamic content, let''s display the date and time:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给我们的页面增添动态内容，让我们显示日期和时间：
- en: 'Open up the hello view again and add the following line below the greeting
    text:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开hello视图，并在问候文本下面添加以下行：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Save and view: `http://localhost/helloworld/index.php?r=message/hello`.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存和查看：`http://localhost/helloworld/index.php?r=message/hello`。
- en: Presto! We have added dynamic content to our application. With each page refresh,
    we can see the displayed content changing.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！我们已经在我们的应用程序中添加了动态内容。每次刷新页面，我们都可以看到显示的内容在变化。
- en: Admittedly this is not terribly exciting, but it does show you how to embed
    simple PHP code into our view templates.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，这并不是非常令人兴奋，但它确实向您展示了如何将简单的PHP代码嵌入到我们的视图模板中。
- en: A different approach for adding the date and time
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加日期和时间的另一种方法
- en: Although this approach of embedding PHP code directly into the view file does
    allow for any PHP code of any amount or complexity, it is strongly recommended
    that these statements do not alter data models and remain simple, display-oriented
    statements. This will help keep our business logic separate from our presentation
    code, which is part of the benefit of using the MVC architecture.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种直接将PHP代码嵌入视图文件的方法允许任意数量或复杂度的PHP代码，但强烈建议这些语句不要改变数据模型，并保持简单、面向显示的语句。这将有助于将我们的业务逻辑与我们的呈现代码分开，这是使用MVC架构的好处之一。
- en: Moving the data creation to the controller
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数据创建移到控制器
- en: Let's move the logic that creates the time back to the controller and have the
    view do nothing more than display the time. We'll move the determination of the
    time into our `actionHello()` method within the controller and set the value in
    an instance variable called `$time`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将创建时间的逻辑移回到控制器，并且让视图什么都不做，只是显示时间。我们将时间的确定放到控制器中的`actionHello()`方法中，并在一个名为`$time`的实例变量中设置值。
- en: 'First let''s alter the controller action. Currently our action in our `MessageController`,
    `actionHello()`, simply makes a call to render our hello view by executing the
    following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们修改控制器动作。目前我们在`MessageController`中的动作`actionHello()`，只是通过执行以下代码来调用渲染我们的hello视图：
- en: '[PRE7]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before we render the view, let''s add the call to determine the time and then
    store it in a local variable called `$theTime`. Let''s then alter our call to
    `render()` by adding a second parameter, which includes this variable:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们渲染视图之前，让我们添加调用来确定时间，然后将其存储在一个名为`$theTime`的局部变量中。然后我们通过添加第二个参数来修改我们对`render()`的调用，其中包括这个变量：
- en: '[PRE8]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When calling `render()` with a second parameter containing array data, it will
    extract the values of the array into PHP variables and make those variables available
    to the view script. The keys in the array will be the names of the variables made
    available to our view file. So in this example, our array key '`time`', whose
    value is `$theTime`, will be extracted into a variable named `$time`, which will
    be made available in the view. This is one way to pass data from the controller
    to the view.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`render()`并带有包含数组数据的第二个参数时，它将把数组的值提取到PHP变量中，并使这些变量可用于视图脚本。数组中的键将是可用于我们视图文件的变量的名称。因此，在这个例子中，我们的数组键'`time`'，其值是`$theTime`，将被提取到一个名为`$time`的变量中，并在视图中可用。这是一种从控制器传递数据到视图的方法。
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This assumes you are using the default view renderer with Yii. As has been mentioned
    many times previously, Yii allows you to customize nearly everything, and you
    can specify different view rendering implementations if you so desire. Other view
    renders may not behave in exactly the same way.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设您正在使用Yii的默认视图渲染器。正如之前多次提到的，Yii允许您自定义几乎所有内容，如果您愿意，您可以指定不同的视图渲染实现。其他视图渲染可能不会以完全相同的方式行事。
- en: 'Now let''s alter the view to use this `$time` variable rather than calling
    the date function itself:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们修改视图，使用这个`$time`变量而不是直接调用日期函数本身：
- en: 'Open up the HelloWorld view file again, and replace the line that we previously
    added to echo the time with the following:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开HelloWorld视图文件，并用以下内容替换我们之前添加的用于输出时间的行：
- en: '[PRE9]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Save and view the results again: `http://localhost/helloworld/index.php?r=message/hello`'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次保存并查看结果：`http://localhost/helloworld/index.php?r=message/hello`
- en: Once again we see the time displaying just as before, so the end result is no
    different with the two approaches.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次看到时间显示与之前完全相同，因此两种方法的最终结果没有任何不同。
- en: We have demonstrated the two approaches to adding PHP-generated content to the
    view template files. The first approach puts the data creation logic directly
    into the view file itself. The second approach houses this logic in the controller
    class, and feeds the information to the view file by using variables. The end
    result is the same; the time is displayed in our rendered HTML, but the second
    approach takes a small step forward in keeping the data acquisition and manipulation,
    that is business-logic, separate from our presentation code. This separation is
    exactly what a Model-View-Controller architecture strives to provide, and Yii's
    explicit directory structure and sensible defaults make this a snap to implement.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经演示了向视图模板文件添加PHP生成内容的两种方法。第一种方法将数据创建逻辑直接放入视图文件本身。第二种方法将这个逻辑放在控制器类中，并通过使用变量将信息传递给视图文件。最终结果是相同的；时间显示在我们渲染的HTML中，但第二种方法在保持数据获取和处理（即业务逻辑）与我们的呈现代码分离方面迈出了一小步。这种分离正是模型-视图-控制器架构努力提供的，Yii的显式目录结构和合理的默认值使其易于实现。
- en: Have you been paying attention?
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你有在关注吗？
- en: It was mentioned in [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*,
    that the view and controller are indeed very close cousins. So much so that `$this`
    within a view file refers to the `Controller` class that rendered the view.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. 相遇Yii")中提到过，视图和控制器确实是非常相似的。在视图文件中，`$this`指的是渲染视图的`Controller`类。
- en: In the previous example, we explicitly fed the time to the view file from the
    controller by using the second argument in the render method. This second argument
    explicitly sets the variables that are immediately available to the view file.
    But there is another approach you can try out for yourself.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们通过在render方法中使用第二个参数，明确地从控制器向视图文件提供了时间。这第二个参数明确地设置了立即可用于视图文件的变量。但是还有另一种方法可以尝试一下。
- en: Alter the previous example by defining a public class property on `MessageController`,
    rather than a locally scoped variable whose value is the current date time. Then
    display the time in the view file by accessing this class property via `$this`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`MessageController`上定义一个公共类属性，而不是一个局部作用域的变量，其值是当前日期时间，来修改前面的例子。然后通过`$this`访问这个类属性，在视图文件中显示时间。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The downloadable codebase has the solution to this "do-it-yourself" exercise
    included.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 可下载的代码库中包含了这个“自己动手”的练习的解决方案。
- en: Linking pages together
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接页面
- en: Typical web applications have more than one page within them for users to experience,
    and our simple application should be no exception. Let's add another page that
    displays a response from the World, "Goodbye, Yii developer!", and link to this
    page from our "Hello, World!" page, and vice versa.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的Web应用程序中有多个页面供用户体验，我们简单的应用程序也不例外。让我们添加另一个页面，显示来自世界的响应，“再见，Yii开发者！”并从我们的“Hello,
    World!”页面链接到这个页面，反之亦然。
- en: Normally, each rendered HTML page within a Yii web application will correspond
    to a separate view (though this does not always have to be the case). So we will
    create a new view and use a separate action method to render this view. When adding
    a new page like this, we also need to consider whether or not to use a separate
    controller. Since our Hello and Goodbye pages are related and very similar, there
    is no compelling reason to delegate the application logic to a separate controller
    class at the moment.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在Yii web应用程序中，每个渲染的HTML页面都对应一个单独的视图（尽管这并不总是必须的）。因此，我们将创建一个新视图，并使用一个单独的操作方法来渲染这个视图。在添加新页面时，我们还需要考虑是否使用单独的控制器。由于我们的Hello和Goodbye页面是相关的并且非常相似，目前没有必要将应用程序逻辑委托给单独的控制器类。
- en: Linking to a new page
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接到新页面
- en: Let's have the URL for our new page be of the form `http://localhost/helloworld/index.php?r=message/goodbye`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们的新页面的URL形式为`http://localhost/helloworld/index.php?r=message/goodbye`。
- en: 'Sticking with Yii conventions, this decision defines the name of our action
    method, which we need in the controller, as well as the name of our view. So open
    up `MessageController` and add an `actionGoodbye()` method just below our `actionHello()`
    action:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循Yii的约定，这个决定定义了我们的操作方法的名称，我们需要在控制器中使用，以及我们的视图的名称。因此，打开`MessageController`并在我们的`actionHello()`操作的下面添加一个`actionGoodbye()`方法：
- en: '[PRE10]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we have to create our view file in the `/protected/views/message/` directory.
    This should be called `goodbye.php` as it should be the same as the actionID that
    we chose.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`/protected/views/message/`目录中创建我们的视图文件。这应该被称为`goodbye.php`，因为它应该与我们选择的actionID相同。
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please keep in mind that this is just a recommended convention. The view does
    not, by any means, have to have the same name as the action. The view file name
    just has to match the first argument of `render()`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这只是一个推荐的约定。视图不一定必须与操作具有相同的名称。视图文件名只需与`render()`的第一个参数匹配即可。
- en: 'Create an empty file in that directory, and add the single line:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在该目录中创建一个空文件，并添加一行：
- en: '[PRE11]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Saving and viewing `http://localhost/helloworld/index.php?r=message/goodbye`
    again will display the goodbye message.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 再次保存和查看`http://localhost/helloworld/index.php?r=message/goodbye`将显示再见消息。
- en: 'Now we need to add the links to connect the two pages. To add a link on the
    Hello screen to the Goodbye page, we could add an `<a>` tag directly to the `hello.php`
    view file and hardcode the URL structure as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要添加链接来连接这两个页面。要在Hello页面上添加到Goodbye页面的链接，我们可以直接在`hello.php`视图文件中添加`<a>`标签，并硬编码URL结构如下：
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: And this would work, but it tightly couples the view code implementation to
    a specific URL structure, which might change at some point. If the URL structure
    were to change, these links would become invalid.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做可以，但它将视图代码实现紧密耦合到特定的URL结构，这可能在某个时候发生变化。如果URL结构发生变化，这些链接将变得无效。
- en: Note
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Remember in [Chapter 1](ch01.html "Chapter 1. Meet Yii"), *Meet Yii*, when
    we went through the blog posting application example? We used URLs that were of
    a different, more SEO-friendly format than the Yii default format, namely:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得在[第1章](ch01.html "第1章. 遇见Yii") *遇见Yii*中，我们通过博客发布应用程序示例吗？我们使用的URL格式与Yii默认格式不同，更符合SEO，即：
- en: '`http://yourhostname/controllerID/actionID`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://yourhostname/controllerID/actionID`'
- en: It is a simple matter of configuring a Yii Web application to use this "path"
    format, as opposed to the querystring format we are using in this example. Being
    able to easily change the URL format can be important to web applications. As
    long as we avoid hardcoding them throughout our application, changing them will
    remain a simple matter of altering the application configuration file.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 将Yii Web应用程序配置为使用这种“路径”格式而不是我们在此示例中使用的查询字符串格式是一件简单的事情。能够轻松更改URL格式对Web应用程序非常重要。只要我们避免在整个应用程序中硬编码它们，更改它们将保持简单，只需更改应用程序配置文件即可。
- en: Getting a little help from Yii CHtml
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Yii CHtml获得一点帮助
- en: 'Luckily, Yii comes to the rescue here. Yii comes with myriad helper methods
    that can be used in view templates. These methods exist in the static HTML helper
    framework class `CHtml`. In this case, we want to employ the helper method "link"
    that takes in a *controllerID/actionID* pair and creates the appropriate hyperlink
    for you, based on how the URL structure is configured for the application. Since
    all these helper methods are static, we can call them directly without the need
    to create an explicit instance of the `CHtml` class. Using this link helper, we
    can add a link in our `hello.php` view just below where we echoed the time, as
    follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Yii在这里提供了帮助。Yii带有许多可以在视图模板中使用的辅助方法。这些方法存在于静态HTML辅助框架类`CHtml`中。在这种情况下，我们想要使用的是“link”辅助方法，它接受一个*controllerID/actionID*对，并根据应用程序配置的URL结构为您创建适当的超链接。由于所有这些辅助方法都是静态的，我们可以直接调用它们，而无需创建`CHtml`类的显式实例。使用这个链接助手，我们可以在我们的`hello.php`视图中在我们输出时间的下面添加一个链接，如下所示：
- en: '[PRE13]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Save and view the "Hello, World!" page: `http://localhost/helloworld/index.php?r=message/hello`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并查看“Hello, World!”页面：`http://localhost/helloworld/index.php?r=message/hello`
- en: You should see the hyperlink, and clicking on it should take you to the goodbye
    page. The first parameter in the call to the `link` method is the text that will
    be displayed in the hyperlink. The second parameter is an array that holds the
    value for our *controllerID*/*actionID* pair.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到超链接，并单击它应该将您带到再见页面。调用`link`方法的第一个参数是将显示在超链接中的文本。第二个参数是一个包含我们的*controllerID*/*actionID*对值的数组。
- en: 'We can follow the same approach to place a reciprocal link in our Goodbye view:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采用相同的方法在我们的Goodbye视图中放置一个相互链接：
- en: '[PRE14]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save and view the goodbye page:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并查看再见页面：
- en: '`http://localhost/helloworld/index.php?r=message/goodbye`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost/helloworld/index.php?r=message/goodbye`'
- en: You should now see an active link back to the "Hello, World!" page, from the
    goodbye page.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该看到从再见页面返回到“Hello, World!”页面的活动链接。
- en: So we now know a couple of ways to link web pages together in our simple application.
    One approach added an HTML `<a>` tag directly to the view file and hardcoded the
    URL structure. The other, preferred approach, made use of Yii's `CHtml` helper
    class to help construct the URLs based on the *controllerID* */actionID* pairs,
    so that the resulting format will always conform to the application configuration.
    In this way, we can easily alter the URL format throughout the application, without
    having to go back and change every view file that happens to have internal links.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们现在知道了在我们的简单应用程序中链接网页的几种方法。一种方法是直接在视图文件中添加HTML `<a>`标签，并硬编码URL结构。另一种更常用的方法是利用Yii的`CHtml`辅助类来帮助构建基于*controllerID*
    */actionID*对的URL，以便结果格式始终符合应用程序配置。通过这种方式，我们可以轻松地在整个应用程序中更改URL格式，而无需返回更改每个视图文件，这些文件恰好具有内部链接。
- en: Our simple "Hello, World!" application really reaps the benefits of Yii's convention
    over configuration philosophy. By applying certain default behavior and following
    the recommended conventions, the building of this simple application and our entire
    request routing process just fell together in a very easy and convenient way.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简单的“Hello, World!”应用程序真正受益于Yii的约定优于配置的理念。通过应用某些默认行为并遵循推荐的约定，这个简单应用程序的构建和整个请求路由过程都以非常简单和方便的方式完成了。
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we constructed an extremely simple application in order to
    cover many topics. First we installed the framework. We then used the `yiic` console
    command to bootstrap the creation of a new Yii application. We then introduced
    an incredibly powerful code generation tool called Gii. We used this to create
    a new controller within our simple application.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个极其简单的应用程序，以涵盖许多主题。首先我们安装了框架。然后我们使用`yiic`控制台命令来引导创建一个新的Yii应用程序。然后我们介绍了一个非常强大的代码生成工具叫做Gii。我们使用它在我们的简单应用程序中创建了一个新的控制器。
- en: Once our application was in place, we could see first hand how Yii handles the
    request and routing to controllers and actions. We then moved on to creating and
    displaying very simple dynamic content. And finally, we looked at how to link
    the pages in a Yii application together.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的应用程序就位，我们就可以亲自看到Yii如何处理请求和路由到控制器和动作。然后，我们继续创建和显示非常简单的动态内容。最后，我们看了一下如何在Yii应用程序中链接页面。
- en: While this incredibly simple application has provided concrete examples to help
    us better understand the use of the Yii framework, it is far too simplistic to
    demonstrate Yii's ability to ease the building of our real-world applications.
    In order to demonstrate this, we need to build a real-world web application. We
    are going to do just that. In the next chapter, we will introduce you to the project
    task and issue tracking application that we will be building throughout the remainder
    of this book.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个非常简单的应用程序为我们提供了具体的例子，帮助我们更好地理解Yii框架的使用，但它过于简单，无法展示Yii在简化实际应用程序构建方面的能力。为了证明这一点，我们需要构建一个真实的Web应用程序。我们将会这样做。在下一章中，我们将向您介绍项目任务和问题跟踪应用程序，我们将在本书的其余部分中构建该应用程序。
