- en: Chapter 6. Building the Core Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。构建核心模块
- en: Up until now we have familiarized ourselves with the latest changes in PHP 7,
    design patterns, design principles, and popular PHP frameworks. We also took a
    more detailed look into Symfony as our framework of choice moving forward. We
    have now finally reached a point where we can start building our modular application.
    Building modular applications with Symfony is done via the bundles mechanism.
    Terminology-wise, from this point on, we will consider bundle and module to be
    the same thing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经熟悉了PHP 7的最新变化，设计模式，设计原则和流行的PHP框架。我们还更详细地了解了Symfony作为我们未来的框架选择。现在我们终于达到了一个可以开始构建我们的模块化应用程序的地步。使用Symfony构建模块化应用程序是通过bundles机制完成的。从术语上讲，从这一点开始，我们将考虑bundle和模块是相同的东西。
- en: 'In this chapter we will be covering the following topics with respect to the
    core module:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下与核心模块相关的主题：
- en: Requirements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求
- en: Dependencies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖关系
- en: Implementation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施
- en: Unit testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Functional testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: Requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求
- en: 'Looking back in [Chapter 4](ch04.html "Chapter 4. Requirement Specification
    for a Modular Web Shop App"), *Requirement Specification for Modular Web Shop
    App*, and the wireframes presented there, we can outline some of the requirements
    this module will have. The core module is going to be used to set general, application-wide
    features, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾[第4章](ch04.html "第4章。模块化网络商店应用的需求规范"), *模块化网络商店应用的需求规范*，以及那里提出的线框图，我们可以概述这个模块将具有的一些要求。核心模块将用于设置通用的、应用程序范围的功能，如下：
- en: Include Foundation CSS for sites to the project
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Foundation CSS for sites包含到项目中
- en: Build a home page
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建主页
- en: Build other static pages
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建其他静态页面
- en: Build a Contact Us page
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个联系我们页面
- en: Setup a basic firewall, where admin users can manage all the auto-generated
    CRUD from other modules later on
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基本防火墙，其中管理员用户可以管理稍后其他模块生成的CRUD
- en: Dependencies
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖关系
- en: The core module on its own does not have any specific dependencies on other
    modules that we are going to write as part of this book, or any other third-party
    module outside of standard Symfony installation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 核心模块本身并不依赖于我们将作为本书一部分编写的其他模块，或者Symfony标准安装之外的任何第三方模块。
- en: Implementation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施
- en: 'We start by creating an entirely new Symfony project, running the following
    console command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个全新的Symfony项目，运行以下控制台命令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This creates a new `shop` directory with all of the required files needed to
    run our application in the browser. Among these files and directories is the `src/AppBundle`
    directory, which is actually our core module. Before we can run our application
    in the browser, we need to map the newly created `shop` directory to a hostname,
    let''s say `shop.app`, so we can access it in the browser via `http://shop.app`
    URL. Once this is done, if we open `http://shop.app`, we should see **Welcome
    to Symfony 3.1.0** screen as shown here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的`shop`目录，其中包含在浏览器中运行我们的应用程序所需的所有文件。在这些文件和目录中，有一个`src/AppBundle`目录，实际上就是我们的核心模块。在我们可以在浏览器中运行应用程序之前，我们需要将新创建的`shop`目录映射到一个主机名，比如说`shop.app`，这样我们就可以通过`http://shop.app`
    URL在浏览器中访问它。完成这一步后，如果我们打开`http://shop.app`，我们应该看到**欢迎来到Symfony 3.1.0**的屏幕，如下所示：
- en: '![Implementation](graphics/B05460_06_05.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![实现](graphics/B05460_06_05.jpg)'
- en: Though we have no need for the database just yet, other modules we will develop
    later on will assume database connection, so it's worth setting it up right from
    the start. We do so by configuring `app/config/parameters.yml` with proper database
    connection parameters.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们目前还没有数据库的需求，但我们稍后将开发的其他模块将假定数据库连接，因此从一开始就进行设置是值得的。我们通过配置`app/config/parameters.yml`文件来配置正确的数据库连接参数。
- en: 'We then download Foundation for Sites from [http://foundation.zurb.com/sites.html](http://foundation.zurb.com/sites.html).
    Once downloaded, we need to unpack it and copy over the `/js` and `/css` directories
    into the `Symfony /web` directory as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们从[http://foundation.zurb.com/sites.html](http://foundation.zurb.com/sites.html)下载Foundation
    for Sites。下载完成后，我们需要解压并将`/js`和`/css`目录复制到`Symfony /web`目录中，如下面的屏幕截图所示：
- en: '![Implementation](graphics/B05460_06_06.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![实现](graphics/B05460_06_06.jpg)'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is worth noting that this is a simplified setup of Foundation that we are
    using with our module, where we simply use CSS and JavaScript files without setting
    up anything relating to Sass.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们在模块中使用的Foundation是一个简化的设置，我们只是使用CSS和JavaScript文件，而没有设置任何与Sass相关的内容。
- en: 'With Foundation CSS and JavaScript files in place, we edit the `app/Resources/views/base.html.twig`
    file as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Foundation CSS和JavaScript文件就位后，我们编辑`app/Resources/views/base.html.twig`文件如下：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we are setting the entire head and before body end areas, with all the
    necessary CSS and JavaScript loading. The Twigs `asset` tag helps us with building
    URL paths, where we simply pass on the URL path itself and it builds a complete
    URL for us. In regard to the actual body of the page, there are several things
    to consider here. How are we going to build category, customer, and checkout menus?
    At this point we do not have any of these modules, and neither do we want to make
    them mandatory for our core module. So how do we solve the challenge of accounting
    for something that is not there yet?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们设置整个头部和body结束区域，以及所有必要的CSS和JavaScript加载。Twig的`asset`标签帮助我们构建URL路径，我们只需传递URL路径本身，它就会为我们构建一个完整的URL。关于页面的实际内容，这里有几件事情需要考虑。我们将如何构建类别、客户和结账菜单？在这一点上，我们还没有这些模块，我们也不想让它们成为核心模块的必需品。那么我们如何解决还不存在的东西的挑战呢？
- en: What we can do for category, customer, and checkout menus is to define global
    Twig variables for each of those menu items that will then be used to render the
    menu. These variables will be filed via proper services. Since the core bundle
    is not aware of future catalog, customer, and checkout modules, we will initially
    create a few dummy services and hook them to global Twig variables. Later on,
    when we develop catalog, customer, and checkout modules, those modules will override
    the appropriate services, thus providing the right values for into menus.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于类别、客户和结账菜单，我们可以为每个菜单项定义全局Twig变量，然后用这些变量来渲染菜单。这些变量将通过适当的服务进行填充。由于核心包不知道未来的目录、客户和结账模块，我们将首先创建一些虚拟服务，并将它们连接到全局Twig变量。稍后，当我们开发目录、客户和结账模块时，这些模块将覆盖适当的服务，从而为菜单提供正确的值。
- en: This approach might not fit ideally with the notion of modular application,
    but it will suffice for our needs, as we are not hard-coding any dependencies
    as such.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可能不完全符合模块化应用程序的概念，但对我们的需求来说已经足够了，因为我们并没有硬编码任何依赖关系。
- en: 'We start off by adding the following entry into the `app/config/config.yml`
    file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`app/config/config.yml`文件中添加以下条目：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `category_menu_items`, `customer_menu_items`, `checkout_menu_items`, `products_bestsellers`,
    and `products_onsale` variables become global Twig variables that we can use in
    any Twig template as shown in the following example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`category_menu_items`、`customer_menu_items`、`checkout_menu_items`、`products_bestsellers`和`products_onsale`变量成为全局Twig变量，我们可以在任何Twig模板中使用，如下例所示：'
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `@` character in the Twig global variable `config` is used to denote a
    beginning of the service name. This is the service that will provide a value object
    for our Twig variable. Next, we go ahead and create the actual `category_menu`,
    `customer_menu`, `checkout_menu`, `bestsellers`, and `onsale` services by modifying
    `app/config/services.yml` as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Twig全局变量`config`中的`@`字符用于表示服务名称的开始。这是将为我们的Twig变量提供值对象的服务。接下来，我们继续修改`app/config/services.yml`，创建`category_menu`、`customer_menu`、`checkout_menu`、`bestsellers`和`onsale`服务：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Furthermore, we create each of the listed service classes under the `src/AppBundle/Service/Menu/`
    directory. We start with the `src/AppBundle/Service/Menu/Bestsellers.php` file
    with the following content:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们在`src/AppBundle/Service/Menu/`目录下创建列出的每个服务类。我们首先从`src/AppBundle/Service/Menu/Bestsellers.php`文件开始，内容如下：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We then add the `src/AppBundle/Service/Menu/Category.php` file with content
    as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加`src/AppBundle/Service/Menu/Category.php`文件，内容如下：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Following this, we add the `src/AppBundle/Service/Menu/Checkout.php` file with
    content as shown here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加`src/AppBundle/Service/Menu/Checkout.php`文件，内容如下所示：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once this is done, we will go on and add the following content to the `src/AppBundle/Service/Menu/Customer.php`
    file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们将继续向`src/AppBundle/Service/Menu/Customer.php`文件添加以下内容：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We then add the `src/AppBundle/Service/Menu/OnSale.php` file with the following
    content:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加`src/AppBundle/Service/Menu/OnSale.php`文件，内容如下：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have now defined five global Twig variables that will be used to build our
    application menus. Even though variables are now hooked to a dummy service that
    returns nothing more than a dummy array, we have effectively decoupled menu items
    into other soon-to-be built modules. When we get to building our category, customer,
    and checkout modules later on, we will simply write a service override and properly
    fill the menu items array with real items. This would be the ideal situation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经定义了五个全局Twig变量，将用于构建我们的应用程序菜单。尽管变量现在连接到一个返回的虚拟数组的虚拟服务，但我们已经有效地将菜单项解耦到其他即将构建的模块中。当我们稍后开始构建我们的目录、客户和结账模块时，我们只需编写一个服务覆盖，并使用真实的项目填充菜单项数组。这将是理想的情况。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ideally we would want our services to return data as per a certain interface,
    to make sure whoever overrides it or extends it does so by interface. Since we
    are trying to keep our application at a minimum, we will proceed with simple arrays.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望我们的服务按照某种接口返回数据，以确保谁覆盖或扩展它都是通过接口来实现的。由于我们试图保持我们的应用程序最小化，我们将继续使用简单的数组。
- en: 'We can now go back to our `app/Resources/views/base.html.twig` file and replace
    `<!-- TOP-MENU -->` from the preceding code with the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以回到我们的`app/Resources/views/base.html.twig`文件，用以下内容替换前面代码中的`<!-- TOP-MENU
    -->`：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can then replace `<!-- SYSTEM-WIDE-MESSAGES -->` with the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们用以下内容替换`<!-- SYSTEM-WIDE-MESSAGES -->`：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We replace `<!-- PER-PAGE-BODY -->` with the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用以下内容替换`<!-- PER-PAGE-BODY -->`：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We replace `<!-- FOOTER -->` with the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用以下内容替换`<!-- FOOTER -->`：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can go ahead and edit the `src/AppBundle/Controller/DefaultController.php`
    file and add the following code to it:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续编辑`src/AppBundle/Controller/DefaultController.php`文件，并添加以下代码：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'All of the used template files (`about.html.twig`, `customer-service.html.twig`,
    `orders-returns.html.twig`, `privacy-cookie.html.twig`) residing within the `src/AppBundle/Resources/views/default`
    directory can be similarly defined as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`src/AppBundle/Resources/views/default`目录中的所有使用的模板文件（`about.html.twig`、`customer-service.html.twig`、`orders-returns.html.twig`、`privacy-cookie.html.twig`）可以类似地定义如下：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here we are merely wrapping header and content into the `div` elements with
    the `row` class, just to give it some structure. The result should be pages similar
    to those shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是将标题和内容包装到带有`row`类的`div`元素中，以便给它一些结构。结果应该是类似于这里显示的页面：
- en: '![Implementation](graphics/B05460_06_04.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![实现](graphics/B05460_06_04.jpg)'
- en: 'The **Contact Us** page requires a different approach as it will contain a
    form. To build a form we use Symfony''s `Form` component by adding the following
    to the `src/AppBundle/Controller/DefaultController.php` file:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**联系我们**页面需要不同的方法，因为它将包含一个表单。为了构建一个表单，我们使用Symfony的`Form`组件，通过向`src/AppBundle/Controller/DefaultController.php`文件添加以下内容：'
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here we started off by building a form via form builder. The `add` methods accept
    both field definitions and field constraints upon which validation can be based.
    We then added a check for the HTTP POST method, in case of which we feed the form
    with request parameters and run validation against it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过表单构建器构建了一个表单。`add`方法接受字段定义和字段约束，验证可以基于它们进行。然后我们添加了对HTTP POST方法的检查，如果是这种情况，我们将使用请求参数填充表单并对其进行验证。
- en: 'With the `contactAction` method in place, we still need a template file to
    actually render the form. We do so by adding the `src/AppBundle/Resources/views/default/contact.html.twig`
    file with content that follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`contactAction`方法，我们仍然需要一个模板文件来实际渲染表单。我们通过添加`src/AppBundle/Resources/views/default/contact.html.twig`文件并添加以下内容来实现：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Based on these few tags, Twig handles the form rendering for us. The resulting
    browser output is a page as shown in the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些标签，Twig为我们处理了表单渲染。结果的浏览器输出如下所示：
- en: '![Implementation](graphics/B05460_06_03.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![实现](graphics/B05460_06_03.jpg)'
- en: 'We are almost there with getting all of our pages ready. One thing is missing,
    though, the body area of our home page. Unlike other pages with static content,
    this one is actually dynamic, as it lists bestsellers and products on sale. This
    data is expected to come from other modules, which are not available yet. Still,
    this does not mean we cannot prepare dummy placeholders for them. Let''s go ahead
    and edit the `app/Resources/views/default/index.html.twig` file as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎已经准备好所有的页面了。但是还有一件事缺失，就是我们主页的正文区域。与其他具有静态内容的页面不同，这个页面实际上是动态的，因为它列出了畅销书和特价商品。这些数据预计来自其他模块，目前还不可用。但是，这并不意味着我们不能为它们准备虚拟占位符。让我们继续编辑`app/Resources/views/default/index.html.twig`文件如下：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now we need to replace `<!-- products_bestsellers -->` with the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要用以下内容替换`<!-- products_bestsellers -->`：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now we need to replace `<!-- products_onsale -->`with the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要用以下内容替换`<!-- products_onsale -->`：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The [http://dummyimage.com](http://dummyimage.com) enables us to create a placeholder
    images for our app.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://dummyimage.com](http://dummyimage.com)使我们能够为我们的应用程序创建占位图像。'
- en: 'At this point we should be seeing the home page as shown here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该看到如下所示的主页：
- en: '![Implementation](graphics/B05460_06_02.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![实现](graphics/B05460_06_02.jpg)'
- en: Configuring application-wide security
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置应用程序范围的安全性
- en: 'What we are trying to achieve as part of our applicationwide security is to
    set some basic protection against future customers or any other user being able
    to access and use future auto-generated CRUD controllers. We do so by modifying
    the `app/config/security.yml` file. There are several components to the `security.yml`
    file we need to address: Firewalls, access control, providers, and encoders. If
    we observe the auto-generated CRUD from the previous test app, it becomes clear
    that we need to protect the following from customer access:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用程序范围安全的一部分，我们试图设置一些基本保护，防止未来的客户或任何其他用户能够访问和使用未来自动生成的CRUD控制器。我们通过修改`app/config/security.yml`文件来实现这一点。`security.yml`文件有几个组件需要处理：防火墙、访问控制、提供程序和编码器。如果我们观察先前测试应用程序中自动生成的CRUD，就会清楚地看到我们需要保护以下内容，以防止客户访问：
- en: '`GET|POST /new`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET|POST /new`'
- en: '`GET|POST /{id}/edit`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET|POST /{id}/edit`'
- en: '`DELETE /{id}`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE /{id}`'
- en: In another words, everything that has `/new` and `/edit` in the URL, and everything
    that is of `DELETE` method, needs to be protected from the customer. With that
    in mind, we will use Symfony security features to create an in-memory user of
    role `ROLE_ADMIN`. We will then create an access control list that allows only
    `ROLE_ADMIN` to access the resources we just mentioned, and a firewall that triggers
    an HTTP basic authentication login form when we try to access these resources.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，所有在URL中包含`/new`和`/edit`，以及所有使用`DELETE`方法的内容，都需要受到客户的保护。考虑到这一点，我们将使用Symfony安全功能创建一个具有`ROLE_ADMIN`角色的内存用户。然后，我们将创建一个访问控制列表，只允许`ROLE_ADMIN`访问我们刚刚提到的资源，并创建一个防火墙，当我们尝试访问这些资源时触发HTTP基本身份验证登录表单。
- en: 'Using an in-memory provider means hard-coding users in our `security.yml` file.
    For purposes of our application, we will do so for the admin type of users. The
    actual password, however, does not need to be hard-coded. Assuming we will use
    `1L6lllW9zXg0` for the password, let''s jump to the console and type in the following
    command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内存提供程序意味着在我们的`security.yml`文件中硬编码用户。对于我们应用程序的目的，我们将为管理员类型的用户这样做。然而，实际密码不需要硬编码。假设我们将使用`1L6lllW9zXg0`作为密码，让我们跳转到控制台并输入以下命令：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will produce an output as follows.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出。
- en: '![Configuring application-wide security](graphics/B05460_06_01.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![配置应用程序范围的安全性](graphics/B05460_06_01.jpg)'
- en: 'We can now edit `security.yml` by adding an in-memory provider and copy-paste
    the generated encoded password into it, as shown here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过添加内存提供程序并将生成的编码密码复制粘贴到其中来编辑`security.yml`，如下所示：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here we defined a user `john` of role `ROLE_ADMIN` with an encoded `1L6lllW9zXg0`
    password.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个具有`ROLE_ADMIN`角色和编码`1L6lllW9zXg0`密码的用户`john`。
- en: 'Once we have the providers in place, we can go ahead and add encoders to our
    `security.yml` file. Otherwise Symfony would not know what to make of the current
    password assigned to `john` user:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了提供程序，我们就可以继续在`security.yml`文件中添加编码器。否则Symfony将不知道如何处理分配给`john`用户的当前密码：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then we add the firewall as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们添加防火墙如下：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `guard_new_edit` and `guard_delete` names are freely given names to our
    two application firewalls. The `guard_new_edit` firewall will be intercepting
    all GET and POST requests to any route containing the `/new` or `/edit` string
    in its URL. The `guard_delete` firewall will be intercepting any HTTP `DELETE`
    method on any URL. Once these firewalls kick in, they will show an HTTP basic
    authentication form, and only allow access if the user is logged in.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`guard_new_edit`和`guard_delete`是我们两个应用程序防火墙的自由名称。`guard_new_edit`防火墙将拦截包含`/new`或`/edit`字符串的任何路由的所有GET和POST请求。`guard_delete`防火墙将拦截任何URL上的任何HTTP
    `DELETE`方法。一旦这些防火墙启动，它们将显示一个HTTP基本身份验证表单，并且只有在用户登录后才允许访问。'
- en: 'Then we add the access control list as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们按以下方式添加访问控制列表：
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With these entries in place, an one who tries to access any URL with any of
    the patterns defined under `access_control` will be presented with the browser
    login as shown here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些条目，任何试图访问任何URL的人，只要符合`access_control`下定义的任何模式，都将看到浏览器登录，如下所示：
- en: '![Configuring application-wide security](graphics/B05460_06_07.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![配置应用程序范围的安全性](graphics/B05460_06_07.jpg)'
- en: The only user that can login is `john` with the password `1L6lllW9zXg0`. Once
    authenticated, the user can access all the CRUD links. This should be enough for
    our simple application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一可以登录的用户是`john`，密码是`1L6lllW9zXg0`。一旦认证，用户可以访问所有的CRUD链接。这对于我们简单的应用程序应该足够了。
- en: Unit testing
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Our current module has no specific classes other than the controller class and
    the dummy service class. Therefore, we won't bother ourselves with unit tests
    here.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的模块除了控制器类和虚拟服务类之外没有特定的类。因此，我们不会在这里费心进行单元测试。
- en: Functional testing
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试
- en: 'Before we start writing our functional tests, we need to edit the `phpunit.xml.dist`
    file by adding our bundle `Tests` directory to the `testsuite` paths, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写功能测试之前，我们需要通过将我们的bundle `Tests`目录添加到`testsuite`路径中来编辑`phpunit.xml.dist`文件，如下所示：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Our functional tests will cover only one controller, since we have no other.
    We start off by creating a `src/AppBundle/Tests/Controller/DefaultControllerTest.php`
    file with content as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的功能测试将只覆盖一个控制器，因为我们没有其他控制器。我们首先创建一个`src/AppBundle/Tests/Controller/DefaultControllerTest.php`文件，内容如下：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The next step is to test each and every one of our controller actions. At the
    very least we should test if the page content is being outputted properly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是测试我们的每一个控制器动作。至少我们应该测试页面内容是否被正确输出。
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To get an auto-complete in our IDE we can download the `PHPUnitphar` file from
    the official site here [https://phpunit.de](https://phpunit.de). Once downloaded,
    we can simply add it to the root of our project, so that IDE, like **PHPStorm**,
    picks it up. This makes it easy to follow up on all those `$this->assert` method
    calls and their parameters.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的IDE中获得自动完成，我们可以从官方网站[https://phpunit.de](https://phpunit.de)下载`PHPUnitphar`文件。下载后，我们可以简单地将其添加到项目的根目录，这样IDE（如**PHPStorm**）就可以识别它。这样就可以轻松地跟踪所有`$this->assert`方法调用及其参数。
- en: The first thing we want to test is our home page. We do so by adding the following
    to the body of the `DefaultControllerTest` class.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要测试的第一件事是我们的主页。我们通过向`DefaultControllerTest`类的主体添加以下内容来实现这一点。
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here we are checking several things at once. We are checking with the page loads
    OK, with HTTP 200 status. Then we are grabbing the left and right menu and counting
    their the items to see if they have any. If all of the individual checks pass,
    the `testHomepage` test is considered to have passed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们一次检查了几件事。我们检查页面是否正常加载，HTTP 200状态。然后我们抓取左右菜单并计算它们的项目数，以查看它们是否有任何项目。如果所有单独的检查都通过了，`testHomepage`测试就被认为是通过的。
- en: 'We further test all of the static pages by adding the following to the `DefaultControllerTest`
    class:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过向`DefaultControllerTest`类添加以下内容来进一步测试所有静态页面：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here we are running the same `assertEquals` and `assertContains` functions for
    all of our pages. We are merely trying to confirm that each page is loaded with
    HTTP 200, and that the proper value is returned for the page title, that is to
    say, the `h1` element.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们对所有页面运行相同的`assertEquals`和`assertContains`函数。我们只是试图确认每个页面是否以HTTP 200加载，并且页面标题的正确值是否返回，也就是`h1`元素。
- en: 'Finally, we address the form submission test which we perform by adding the
    following into the `DefaultControllerTest` class:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要在`DefaultControllerTest`类中添加以下内容来处理表单提交测试：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here we are grabbing the form element through its **Reach Out!** submit button.
    Once the form is fetched, we trigger the `submit` method on the client passing
    it the instance from element. It is worth noting that the actual form validation
    is not being tested here. Even so, the submitted form should result in an HTTP
    200 status.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过其**Reach Out!**提交按钮抓取表单元素。一旦获取表单，我们就在客户端上触发`submit`方法，将元素实例传递给它。值得注意的是，这里并没有测试实际的表单验证。即使如此，提交的表单应该会导致HTTP
    200状态。
- en: These tests are conclusive. We can write them to be much more robust if we wanted
    to, as there are numerous elements we can test against.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这些测试是有说服力的。如果我们愿意，我们可以编写更加健壮的测试，因为有许多元素可以进行测试。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we have built our first module, or bundle in Symfony terminology.
    The module itself is not really loosely coupled, as it relies on some of the things
    within the `app` directory, such as the `app/Resources/views/base.html.twig` layout
    template. We can get away with this when it comes to core modules, as they are
    merely a foundation we are setting up for rest of the modules.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了我们的第一个模块，或者在Symfony术语中称为bundle。该模块本身并不是真正松散耦合的，因为它依赖于`app`目录中的一些内容，比如`app/Resources/views/base.html.twig`布局模板。当涉及核心模块时，我们可以这样做，因为它们只是我们为其余模块设置的基础。
- en: Moving forward, in the next chapter, we will build a catalog module. This will
    be the basis of our web shop application.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将构建一个目录模块。这将是我们网店应用程序的基础。
