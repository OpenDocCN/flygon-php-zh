- en: Chapter 11. Designing a Functional Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。设计一个函数式应用程序
- en: Creating a whole application respecting the precepts of functional programming
    might seem like an impossible task. How can you write any meaningful software
    if you cannot have any side-effects? In order to perform any kind of computation,
    you will need at least some inputs and display results.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个完全遵守函数式编程原则的应用程序可能看起来像是一个不可能的任务。如果不能有任何副作用，你怎么能编写任何有意义的软件呢？为了执行任何计算，你至少需要一些输入和显示结果。
- en: Functional languages have various mechanisms to circumvent those limitations.
    We will quickly present some of them so that you can have a better idea about
    how an application can be written in a purely functional way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式语言有各种机制来规避这些限制。我们将快速介绍其中一些，这样你就可以更好地了解如何以纯函数式的方式编写应用程序。
- en: We will then learn more in depth about a paradigm called **Functional Reactive
    Programming** (**FRP**), as a way to design an application having a user interface.
    We will lay the foundation for using this technique in PHP to see if it is possible
    to use it to write a complete application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将更深入地学习一种称为**函数式响应式编程**（**FRP**）的范式，作为设计具有用户界面的应用程序的一种方式。我们将奠定在PHP中使用这种技术的基础，看看是否可能用它来编写一个完整的应用程序。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Writing a complete application in a purely functional language
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在纯函数式语言中编写一个完整的应用程序
- en: Functional Reactive Programming
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数式响应式编程
- en: Designing a PHP application using FRP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FRP设计PHP应用程序
- en: Architecture of a purely functional application
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纯函数式应用程序的架构
- en: Applications are like functions. If you have an application without any input,
    its outcome will always be the same. You have the possibility of modifying some
    values in the source code and recompiling your software to change its result,
    but this is contrary to the main reason we write applications in the first place.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序就像函数。如果你有一个没有任何输入的应用程序，它的结果将始终相同。你可以修改源代码中的一些值并重新编译软件以改变其结果，但这与我们编写应用程序的主要原因相悖。
- en: 'This is why you need a way to feed data to an application in order for it to
    perform any kind of meaningful computation. Those inputs can be of multiple types:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么你需要一种方法来向应用程序提供数据，以便它执行任何有意义的计算。这些输入可以是多种类型的：
- en: Command-line parameters
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行参数
- en: File content
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件内容
- en: Database content
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库内容
- en: Fields in a graphical interface
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形界面中的字段
- en: Third-party services
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方服务
- en: Network request
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络请求
- en: Out of all those, only the first one could be considered as not breaking the
    referential transparency of our whole application. If you consider your application
    as one big function, feeding data on the command line could be considered as its
    parameters, thus keeping everything pure. All other kinds of input are de facto
    impure, since two subsequent retrievals of the data could lead to different values.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些中，只有第一个可以被认为不会破坏我们整个应用程序的引用透明性。如果你将你的应用程序视为一个大函数，通过命令行输入数据可以被视为其参数，因此保持一切都是纯粹的。所有其他类型的输入都是事实上不纯的，因为对数据的两次连续检索可能导致不同的值。
- en: The canonical Haskell way to solve this issue is to use the **IO monad**. Instead
    of performing its operations immediately, the IO monad stores all steps in a queue.
    If you name this IO operation `main`, Haskell will know it has to run it when
    the compiled program is executed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的Haskell的标准方法是使用**IO单子**。IO单子不会立即执行其操作，而是将所有步骤存储在队列中。如果你将这个IO操作命名为`main`，Haskell将知道在执行编译后的程序时必须运行它。
- en: Obviously, the application itself is not pure anymore if you perform any kind
    of IO operation inside the monad. However, the code itself can be written in a
    referentially transparent way. It's the Haskell runtime that will perform all
    impure operations when the IO monad is run and will then pass the various obtained
    values around. Using this trick, you can write pure functional code with all the
    benefits it brings and still perform IO operations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果在单子内部执行任何IO操作，应用程序本身就不再是纯的了。然而，代码本身可以以引用透明的方式编写。当IO单子运行时，Haskell运行时将执行所有不纯操作，然后传递各种获得的值。利用这个技巧，你可以用所有它带来的好处编写纯函数式代码，并执行IO操作。
- en: 'This approach is usable in Haskell because you can use monad transformers to
    combine multiple monads. The do notation also helps a lot by writing code encapsulated
    in the IO monad without all the overhead associated with it. For example, here
    is a small program reading lines in the Terminal and printing them with the words
    in reverse order:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在Haskell中是可用的，因为你可以使用单子变换器来组合多个单子。do表示法也通过在IO单子中编写封装的代码而不带有与之相关的所有开销来帮助很多。例如，这里是一个在终端中读取行并以相反顺序打印单词的小程序：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It reads mostly like any imperative source code performing the same task. PHP
    lacks the syntactic sugar and there exists no implementation of monad transformers,
    so it is quite hard to do this. This is why we make compromises as discussed in
    the previous chapter, or we need some other approach, as we will see in the following
    section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它读起来大多像执行相同任务的任何命令式源代码。PHP缺乏语法糖，也没有单子变换器的实现，所以这样做相当困难。这就是为什么我们要做出妥协，正如前一章所讨论的，或者我们需要一些其他方法，正如我们将在下一节中看到的那样。
- en: The idea at play can be generalized. Any impure function can be split into two
    functions, one pure and one encapsulating the side causes and side effects. This
    is exactly what we were referring to in the previous chapter when we stated that
    most impure functions should be contained in the MVC application's controller.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所涉及的想法可以被概括。任何不纯的函数都可以分解为两个函数，一个是纯的，一个是封装了副作用和影响的。这正是我们在前一章中所指的，当我们说大多数不纯的函数应该包含在MVC应用程序的控制器中时。
- en: 'If you have an impure function `f` taking `A` as a parameter and returning
    `B`, you can create the following two functions:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个以`A`为参数并返回`B`的不纯函数`f`，你可以创建以下两个函数：
- en: A pure function `g`, which takes `A` and returns `D` parameter. The parameter `D` is
    being a description of the IO operations that need to be performed.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个纯函数`g`，它接受`A`并返回`D`参数。参数`D`是对需要执行的IO操作的描述。
- en: An impure function `h` taking `D` and performing the described operations like
    an interpreter would do.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个不纯的函数`h`接受`D`并执行描述的操作，就像一个解释器会做的那样。
- en: If we take the example of a Haskell application, the Haskell runtime itself
    would be our impure `h` function. If our source were to return an instance of
    the IO monad, as our example on just above is doing, it would be used as the `D`
    parameter and the side-effects would be interpreted.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们以Haskell应用程序为例，Haskell运行时本身将是我们不纯的`h`函数。如果我们的源代码返回IO单子的一个实例，就像我们上面的例子所做的那样，它将被用作`D`参数，并且副作用将被解释。
- en: If you are writing a web application using the **Symfony** framework, we could
    consider the framework as the the impure `h` function and the `D` parameter would
    be the result of executing your controller for example. Another possibility would
    be to add our custom impure wrapper around our functional code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用**Symfony**框架编写Web应用程序，我们可以将框架视为不纯的`h`函数，`D`参数将是执行你的控制器的结果。另一种可能性是在我们的函数代码周围添加自定义的不纯包装器。
- en: The main idea is to reduce the number of functions like `h` to the minimum.
    Haskell forces you to have only one such function and it's even hidden inside
    the runtime. If you are using PHP, it's up to you to enforce this rule as effectively as
    possible.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是将诸如`h`之类的函数数量减少到最低。Haskell强制你只能有一个这样的函数，甚至隐藏在运行时内部。如果你在使用PHP，那么你需要尽可能有效地强制执行这个规则。
- en: 'This concept of having a description of the computations and an interpreter
    to perform them is central to a lot of the more advanced techniques in the functional
    world. It is also quite important in computer programming as a whole. If we take
    a bit of distance, we can see the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有计算的描述和一个解释器来执行它们的概念是函数世界中许多更高级技术的核心。它在整个计算机编程中也非常重要。如果我们稍微远离一点，我们可以看到以下情况：
- en: The description is like an Abstract Syntax Tree (**AST**)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述就像一个抽象语法树（**AST**）
- en: The interpreter takes the AST and runs it
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释器接受AST并运行它
- en: This is how most modern compilers work, first they parse the source code to
    transform it in an AST and then interpret it to create the binary file. You will
    also find the same pattern again and again in most complex applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是大多数现代编译器的工作方式，首先它们解析源代码将其转换为AST，然后解释它以创建二进制文件。在大多数复杂应用程序中，你也会一次又一次地发现相同的模式。
- en: An advanced construct using this structure is the *free monad*. This monad is
    currently a hot topic in the functional world and its usage is growing fast. We
    are missing quite a bit of theory to approach the topic here, but if you are interested
    you will surely find a lot of information on the Internet, for example, [http://underscore.io/blog/posts/2015/04/14/free-monads-are-simple.html](http://underscore.io/blog/posts/2015/04/14/free-monads-are-simple.html).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种结构的一个高级构造是*free monad*。这个单子目前在函数世界中是一个热门话题，它的使用正在迅速增长。我们在这里缺少了相当多的理论来接近这个话题，但如果你感兴趣，你肯定会在互联网上找到很多信息，例如，[http://underscore.io/blog/posts/2015/04/14/free-monads-are-simple.html](http://underscore.io/blog/posts/2015/04/14/free-monads-are-simple.html)。
- en: However, this pattern is problematic when you accept user interaction during
    the lifecycle of the application. Since the main idea is to delay the execution
    of effective computations by describing them instead, you cannot perform part
    of the computation to display a user interface and then react to user input. This
    is one of the issues that FRP tries to solve.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你在应用程序的生命周期中接受用户交互时，这种模式是有问题的。由于主要思想是通过描述来延迟执行有效的计算，你不能执行部分计算来显示用户界面，然后对用户输入做出反应。这是FRP试图解决的问题之一。
- en: From Functional Reactive Animation to Functional Reactive Programming
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从函数式反应动画到函数式反应编程
- en: As is often the case when it comes to functional programming, the foundations
    behind the subject at hand date back a bit. In 1997, Conal Elliott and Paul Hudak
    published a paper called *Functional Reactive Animation, or Fran*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及函数式编程时，通常情况下，所涉主题的基础有点过时。1997年，Conal Elliott和Paul Hudak发表了一篇名为*Functional
    Reactive Animation, or Fran*的论文。
- en: The main goal of Fran is to allow the modeling of animations with two concepts
    called **behaviors** and **events**. Behaviors are values based on the current
    time, and events are conditions based on external or internal stimuli. Those two
    notions allow us to represent any kind of animation at any point in time although
    the animation itself is continuous.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Fran的主要目标是使用称为**behaviors**和**events**的两个概念来建模动画。行为是基于当前时间的值，事件是基于外部或内部刺激的条件。这两个概念允许我们在任何时间点表示任何类型的动画，尽管动画本身是连续的。
- en: Instead of directly creating the representation of your animation as it is usually
    the case, you describe it using behaviors and events. The interpretation, and
    thus representation, is then left to the underlying implementation. This is similar
    to what we just described. As events such as keyboard inputs or mouse clicks can
    be encoded inside Fran, the model you are creating allows for a pure functional
    application to respond to external inputs like those.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与其直接创建动画的表示，通常情况下，你使用行为和事件来描述它。然后，解释和因此表示留给底层实现。这与我们刚刚描述的情况类似。由于Fran可以编码诸如键盘输入或鼠标点击之类的事件，你正在创建的模型允许纯函数应用程序对外部输入做出响应。
- en: Reactive programming
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反应式编程
- en: Before we go any further, let's speak a bit about what *reactive* means in the
    programming world. It's an idea that has gotten quite a lot of traction in the
    last few years.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步讨论之前，让我们稍微谈谈在编程世界中*reactive*意味着什么。这个想法在过去几年里得到了相当多的关注。
- en: 'First, there is the *Reactive Manifesto* ([http://www.reactivemanifesto.org/](http://www.reactivemanifesto.org/)),
    which presents a list of properties that are really interesting to have for any
    software. Those properties are: responsiveness, resilience, elasticity, and being
    message-driven.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，有*响应式宣言*（[http://www.reactivemanifesto.org/](http://www.reactivemanifesto.org/)），它提出了对任何软件都非常有趣的一些属性。这些属性包括：响应性、弹性、弹性和消息驱动。
- en: 'The Wikipedia ([https://en.wikipedia.org/wiki/Reactive_programming](https://en.wikipedia.org/wiki/Reactive_programming))
    definition states something quite different:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科（[https://en.wikipedia.org/wiki/Reactive_programming](https://en.wikipedia.org/wiki/Reactive_programming)）的定义表明了一些完全不同的东西：
- en: '*In computing, reactive programming is a programming paradigm oriented around
    data flows and the propagation of change. This means that it should be possible
    to express static or dynamic data flows with ease in the programming languages
    used, and that the underlying execution model will automatically propagate changes
    through the data flow.*'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在计算中，响应式编程是围绕数据流和变化传播的编程范式。这意味着应该能够在所使用的编程语言中轻松表达静态或动态数据流，并且底层执行模型将自动通过数据流传播更改。*'
- en: An example is then given of the expression *a = b + c*, where the value of `a`
    is automatically updated when any of `b` or `c` changes.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后给出了表达式*a = b + c*的示例，其中当`b`或`c`的任何一个发生变化时，`a`的值会自动更新。
- en: The JavaScript world is in effervescence about the idea, with libraries such
    as `Bacon.js` or `RxJS`. The core idea shared by all of those libraries revolves
    around events or event-streams.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript世界对这个想法很兴奋，有诸如`Bacon.js`或`RxJS`等库。所有这些库共享的核心思想都围绕事件或事件流。
- en: As we can see, there are multiple definitions of what reactive programming is.
    Sadly, none of them really quite match what we just learned about Fran. As it
    has been floating around at least since the seventies, the definition that we
    will keep for the remainder of this chapter is the academic one, which can be
    found on Wikipedia.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，关于响应式编程有多种定义。遗憾的是，它们中没有一个真正符合我们刚刚学到的有关Fran的知识。自至少上世纪七十年代以来，我们将在本章的其余部分保留的定义是学术界的定义，可以在维基百科上找到。
- en: I am not saying the other ones are invalid, just that we need to have a common
    ground here. Also, next time you speak of reactive programming with someone, first
    make sure you are on the same page concerning what the topic is.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是说其他的定义无效，只是我们需要在这里有一个共同的基础。另外，下次与他人谈论响应式编程时，首先确保您对该主题的理解是一致的。
- en: 'As a final example of reactive programming, let''s consider the following piece
    of code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为响应式编程的最后一个例子，让我们考虑以下代码片段：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In a traditional imperative language, the last line will still display 15\.
    However, if our application were to follow the rules set by reactive programming,
    the new value of `$a` would also affect the value of `$c` and the program would
    display 28.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的命令式语言中，最后一行仍然会显示15。然而，如果我们的应用程序遵循响应式编程的规则，`$a`的新值也会影响`$c`的值，程序将显示28。
- en: Functional Reactive Programming
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数式响应式编程
- en: As you can probably guess, values changing over time when other changes are
    made are far from being referentially transparent. Also, the concept of variables
    is completely missing from some functional languages. How can we reconcile reactive
    and functional programming?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能猜到的那样，当进行其他更改时，值随时间变化远非引用透明。此外，某些函数语言完全缺少变量的概念。我们如何调和响应式和函数式编程呢？
- en: The core idea is to make the time component and the previous events parameters
    of your functions when they need them. This is exactly what Fran proposed with
    behaviors and events. Both time and events are usually proposed for consumption
    as a stream. Using functional mapping and filtering, you are able to decide which
    events on the stream interest you.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 核心思想是在需要时将时间组件和先前事件参数化为函数。这正是Fran提出的行为和事件。时间和事件通常被提议作为流进行消耗。使用函数映射和过滤，您可以决定流中哪些事件对您感兴趣。
- en: Your functions take one or multiple inputs from this stream alongside the current
    state of the application. They must then return the new state of the application.
    The runtime will take care of calling the various registered functions when the
    events happen.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您的函数从此流中获取一个或多个输入以及应用程序的当前状态。然后它们必须返回应用程序的新状态。运行时将负责在事件发生时调用各个注册的函数。
- en: You might have the impression that it is similar to event-driven programming.
    In a way it is, but there is a big difference. In a traditional event-driven application,
    events are triggered, but the return value of the handlers is often of no importance;
    they need to have side-effects to perform something.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得它类似于事件驱动编程。在某种程度上是，但有一个很大的区别。在传统的事件驱动应用程序中，事件被触发，但处理程序的返回值通常并不重要；它们需要具有副作用来执行某些操作。
- en: When doing FRP, the runtime takes care of orchestrating all registered handlers.
    Keeping the current state of the application, passing it to each handler, and
    updating it with their results. This allows for the functions to be pure.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行FRP时，运行时负责编排所有已注册的处理程序。保持应用程序的当前状态，将其传递给每个处理程序，并使用它们的结果进行更新。这允许函数是纯的。
- en: 'Another programming paradigm that might be a bit closer than event-driven programming
    is the actor model. I won''t describe it here as it will be out of scope for this
    book, but for people aware of it, I will just say that there are two main differences:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 可能比事件驱动编程更接近的另一种编程范式是演员模型。我不会在这里描述它，因为这将超出本书的范围，但对于了解它的人来说，我只想说有两个主要区别：
- en: As you have pure functions instead of actors, you cannot have a private state
    influencing the way you respond to a given message, or event
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于您拥有纯函数而不是演员，因此您无法拥有私有状态影响您对给定消息或事件的响应方式。
- en: The runtime manages the event stream; there is no way for the handlers to send
    new messages to other parts of the application
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时管理事件流；处理程序无法向应用程序的其他部分发送新消息。
- en: Time traveling
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时间旅行
- en: FRP also has another benefit. If you record the sequence of events leading to
    a particular application state, you can replay them. Where it gets better is that
    you can implement what is called a **time traveling debugger**. Since your application
    is using pure functions, you can go back to any point in time and get the exact
    same state as you've had before.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: FRP还有另一个好处。如果您记录了导致特定应用程序状态的事件序列，您可以重放它们。更好的是，您可以实现所谓的**时间旅行调试器**。由于您的应用程序使用纯函数，您可以回到任何时间点，并获得与以前完全相同的状态。
- en: This kind of debugger also allows you to replay any number of steps back and
    forth until you can pinpoint exactly what is happening. Also, you can make changes
    to your code and play the same events to see how your modification affected your
    software.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这种调试器还允许您向前向后重放任意数量的步骤，直到您可以准确地确定发生了什么。此外，您可以对代码进行更改，并播放相同的事件，以查看您的修改如何影响您的软件。
- en: If you want to see such a debugger in action, you can head over to the one proposed
    by the **Elm** language, specifically their online version with a naive implementation
    of the Mario platform game ([http://debug.elm-lang.org/edit/Mario.elm](http://debug.elm-lang.org/edit/Mario.elm)).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想看到这样的调试器在实际操作中，您可以前往Elm语言提供的一个，特别是他们在线版本的一个对Mario平台游戏的天真实现（[http://debug.elm-lang.org/edit/Mario.elm](http://debug.elm-lang.org/edit/Mario.elm)）。
- en: The Elm debugger is probably one of the first of its kind. Although similar
    ideas have been implemented in traditional languages, the very nature of imperative
    programming requires us to record a lot more than just the stream of events. This
    is why it is a really costly operation, slowing down the execution of the program
    a lot.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Elm调试器可能是其种类中最早的之一。尽管类似的想法已经在传统语言中实现过，但命令式编程的本质要求我们记录的不仅仅是事件流。这就是为什么这是一个非常昂贵的操作，会大大减慢程序的执行速度。
- en: You also need to restart the program from the beginning in order to be sure
    to attain the same state. However, in a pure application, you can do this in a
    more straightforward way. Implementations more akin to the one found in Elm are
    now being created, for example, for the **React** JavaScript library.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要从头开始重新启动程序，以确保达到相同的状态。然而，在纯应用程序中，您可以以更简单的方式实现这一点。类似于Elm中发现的实现现在正在被创建，例如用于React
    JavaScript库。
- en: Disclaimer
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 免责声明
- en: 'There are FRP and FRP, but instead of paraphrasing the creator of the idea,
    let me instead quote him:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有FRP和FRP，但是我不打算改编这个想法的创造者，让我来引用他的话：
- en: '*Over the last few years, something about FRP has generated a lot of interest
    among programmers, inspiring several so-called "FRP" systems implemented in various
    programming languages. Most of these systems, however, lack both of FRP''s fundamental
    properties.*'
  id: totrans-69
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在过去几年中，FRP的某些特性引起了程序员的极大兴趣，激发了在各种编程语言中实现的所谓“FRP”系统。然而，这些系统大多缺乏FRP的两个基本属性。*'
- en: You can see the full text alongside related slides and video on GitHub ([https://github.com/conal/talk-2015-essence-and-origins-of-frp](https://github.com/conal/talk-2015-essence-and-origins-of-frp)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上看到完整的文本以及相关幻灯片和视频（[https://github.com/conal/talk-2015-essence-and-origins-of-frp](https://github.com/conal/talk-2015-essence-and-origins-of-frp)）。
- en: As often, there is some kind of divergence between the academical world and
    the usage people make of the research results. I won't dwell on the details as
    this is supposed to be only an introductory chapter. However, it is important
    that you are aware of this fact.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，学术界和人们对研究结果的使用之间存在某种分歧。我不会在细节上纠缠，因为这应该只是一个介绍性的章节。然而，你需要意识到这一点很重要。
- en: The main point of contention is the fact that FRP is about *continuous time*,
    whereas most implementations consider only *discrete events or values*. If you
    want to know more about those differences, I strongly suggest you watch the previously
    linked video, available on the GitHub repository of Elliot Conal, the creator
    of Fran and FRP.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 争议的主要点在于FRP涉及*连续时间*，而大多数实现只考虑*离散事件或值*。如果您想了解更多关于这些差异的信息，我强烈建议您观看之前链接的视频，该视频可在Fran和FRP的创建者Elliot
    Conal的GitHub存储库上找到。
- en: Going further
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更进一步
- en: There are a lot of other things to say about Functional Reactive Programming.
    In fact, whole books are dedicated to the subject. This is, however, just an introduction
    so we will stop there. If you want a general approach to the topic not tied to
    a specific language, I can recommend the newly published *Functional Reactive
    Programming* by Stephen Blackheath and Anthony Jones.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于函数式响应式编程还有很多其他事情要说。事实上，整本书都是专门讨论这个主题的。然而，这只是一个介绍，所以我们就到此为止。如果您想要一个与特定语言无关的主题的一般方法，我可以推荐Stephen
    Blackheath和Anthony Jones新出版的*Functional Reactive Programming*。
- en: On the implementation side, the **ReactiveX** project tries to federate libraries
    available on multiple projects. You can find more information on the official
    website at [http://reactivex.io/](http://reactivex.io/). At the time of writing,
    the following languages are covered; Java, Swift, Python, PHP, Scala, JavaScript,
    Ruby, Clojure, Rust, Go, C#, C++, and Lua.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现方面，ReactiveX项目试图整合多个项目中可用的库。您可以在官方网站上找到更多信息[http://reactivex.io/](http://reactivex.io/)。在撰写本文时，涵盖了以下语言：Java、Swift、Python、PHP、Scala、JavaScript、Ruby、Clojure、Rust、Go、C#、C++和Lua。
- en: As stated in the previous disclaimer, and the introduction on the ReactiveX
    website, there is currently a conflation of the academic concept of FRP as extended
    from the original Fran paper and what today's programmer means by the term. Both
    the aforementioned book and the ReactiveX libraries speak about the latter rather
    than the original meaning. It does not mean those are bad ideas, quite the contrary;
    it is just that it is not real FRP.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的免责声明和ReactiveX网站上的介绍，目前存在学术概念FRP与今天程序员所指的术语之间的混淆。前述书籍和ReactiveX库都谈到了后者而不是原始含义。这并不意味着这些都是坏主意，恰恰相反；只是这不是真正的FRP。
- en: ReactiveX primer
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ReactiveX入门
- en: 'The `Rx*` libraries made the choice of implementing the functional reactive
    paradigm by extending the classical Observer pattern into the `Observable` model.
    For a given stream of values, represented by an instance of the `Observable` model,
    you can define up to three different handlers:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rx*`库选择通过将经典的观察者模式扩展到`Observable`模型来实现函数式响应式范式。对于给定的值流，由`Observable`模型的实例表示，您可以定义最多三个不同的处理程序：'
- en: The `onNext` handler will be called each time there is a new value available
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当有新值可用时，将调用`onNext`处理程序
- en: The `onError` handler will be called when an exception arises
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当异常发生时，将调用`onError`处理程序
- en: The `onCompleted` handler will be called when the stream is closed
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当流关闭时，将调用`onCompleted`处理程序
- en: This approach makes it easy to work with multiple asynchronous events without
    having to write complex boilerplate code to manage dependencies between them.
    Contrary to the traditional Observer pattern, the ability to signal the end of
    the stream and errors is added to reconcile the interface with iterables.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法使得可以轻松处理多个异步事件，而无需编写复杂的样板代码来管理它们之间的依赖关系。与传统的观察者模式相反，信号流的结束和错误的能力被添加到与可迭代对象接口协调的接口中。
- en: ReactiveX also defines a bunch of operators to both manipulate observables and
    their values. There are helper methods to create various kinds of streams, from
    ranges to arrays, passing by infinitively repeating values and timed release events.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ReactiveX还定义了一堆操作符，用于操作可观察对象及其值。有助手方法可以创建各种类型的流，从范围到数组，通过无限重复值和定时释放事件。
- en: You can also manipulate the stream itself by mapping functions to each emitted
    value, grouping them into new observables or into arrays of values. You can also
    filter the values, skip or take a certain number of them, limit the number of
    emissions for a certain amount of time, and suppress duplicates.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将函数映射到每个发出的值，将它们分组为新的可观察对象或值数组来操作流本身。您还可以过滤值，跳过或获取一定数量的值，限制一定时间内的发射次数，并抑制重复项。
- en: The documentation ([http://reactivex.io/documentation/operators.html](http://reactivex.io/documentation/operators.html))
    has a complete list of what manipulations are available, along with a nice decision
    tree to decide which one to use based on the context.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 文档([http://reactivex.io/documentation/operators.html](http://reactivex.io/documentation/operators.html))列出了可用的所有操作，以及一个很好的决策树，根据上下文决定使用哪个操作。
- en: RxPHP
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RxPHP
- en: Before we start having a look at some examples of RxPHP, I would like to point
    out that Packt Publishing also published a complete book, *PHP Reactive Programming*,
    about the topic. You can find more information on their website at [https://www.packtpub.com/web-development/php-reactive-programming](https://www.packtpub.com/web-development/php-reactive-programming).
    This is why we will only explore some basic examples to give you a feel for how
    using the library might look. If the subject is of interest to you, I strongly
    suggest you read the dedicated book.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始查看一些RxPHP示例之前，我想指出Packt Publishing还出版了一本完整的关于这个主题的书籍，*PHP Reactive Programming*。您可以在他们的网站上找到更多信息[https://www.packtpub.com/web-development/php-reactive-programming](https://www.packtpub.com/web-development/php-reactive-programming)。这就是为什么我们只会探索一些基本示例，以让您感受一下使用该库可能会是什么样子。如果您对这个主题感兴趣，我强烈建议您阅读专门的书籍。
- en: 'After this very brief introduction to ReactiveX, let''s see how it can be used.
    First we will need to install the required library. We will use a small wrapper
    around ReachPHP''s stream library to make it usable with RxPHP so we can demonstrate
    accessing files on disk. The following `composer` invocation should install all
    needed dependencies:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在对ReactiveX进行了非常简要的介绍之后，让我们看看它如何被使用。首先，我们需要安装所需的库。我们将使用一个小的包装器来包装ReachPHP的流库，以使其可以与RxPHP一起使用，这样我们就可以演示访问磁盘上的文件。以下`composer`调用应该安装所有所需的依赖项：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that the library is installed, you can parse data from any PHP stream.
    For example, a CSV file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在库已安装，您可以从任何PHP流中解析数据。例如，CSV文件：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We first create a stream Observable for the file we want to read, then we apply
    some transformation: separating the input by line, parsing the CSV string in an
    array, and applying any other data processing you might want. As you can infer
    from the fact that we reassign the result to `$data` variable, the operation is
    not made in place, but a new instance is returned each time.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为要读取的文件创建一个流Observable，然后应用一些转换：按行分隔输入，将CSV字符串解析为数组，并应用您可能想要的任何其他数据处理。正如您可以从我们将结果重新分配给`$data`变量的事实推断出来，该操作不是就地进行的，而是每次返回一个新实例。
- en: Then, we can subscribe handlers to our stream. In our case, we simply print
    the first row of each element. Not really functional, but effective enough for
    a small example.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以订阅处理程序到我们的流。在我们的例子中，我们只是打印每个元素的第一行。不是真正的功能，但对于一个小例子来说足够有效。
- en: 'If you are using **PostgreSQL**, a package allowing you to use Rx to access
    your database exists. You can use it to retrieve data using a stream. You can
    install it using the `composer` invocation:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用**PostgreSQL**，则存在一个允许您使用Rx访问数据库的包。您可以使用它使用流检索数据。您可以使用以下`composer`调用进行安装：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Creating queries is fairly easy. It is a matter of creating a client with the
    connection credentials and then calling one of the methods on it to create an
    Observable instance on which you can subscribe:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 创建查询非常容易。只需创建一个带有连接凭据的客户端，然后在其上调用其中一个方法以创建一个Observable实例，您可以订阅该实例：
- en: '[PRE5]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is a final example demonstrating some of the more advanced filtering and
    transformation possibilities offered by Rx on the streams themselves. Try to guess
    what the output will be before running it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个最终示例，演示了Rx在流本身上提供的一些更高级的过滤和转换可能性。在运行之前，试着猜测输出会是什么：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you try to run this last piece of code, you need to have the development
    version of RxPHP, as `throttle` was only recently implemented. If your minimum
    stability parameter is set to the `dev` edition, you can install it using:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试运行这段代码的最后一部分，你需要安装 RxPHP 的开发版本，因为 `throttle` 最近才实现。如果你的最小稳定性参数设置为 `dev`
    版本，你可以使用以下命令安装它：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Achieving referential transparency
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现引用透明度
- en: As the examples demonstrated, creating streams and subscribing to them is fairly
    trivial. It is also quite easy to imagine how we can factorize handlers in a way
    that will allow reuse between multiple observable instances.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如示例所示，创建流并订阅它们是相当简单的。想象如何可以将处理程序因式分解，以便在多个可观察实例之间实现重用也是非常容易的。
- en: The issue that Rx does not solve for us, however, is the application architecture
    needed to achieve referential transparency as much as possible. It does not suffice
    creating a new database query as an Observable to be pure.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Rx 无法为我们解决的问题是实现尽可能多的引用透明度所需的应用程序架构。仅仅创建一个新的数据库查询作为 Observable 是不够纯粹的。
- en: The advice I can give you is the same you already heard in the last chapter
    that is to try to segregate all impure code in one place. In our case, this can
    be achieved by creating all streams in a unique file, like your `index.php` file,
    for example, and declaring the handlers somewhere else.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以给你的建议与上一章中听到的一样，就是尽量将所有不纯的代码隔离在一个地方。在我们的情况下，可以通过在一个唯一的文件中创建所有流来实现这一点，比如你的
    `index.php` 文件，并在其他地方声明处理程序。
- en: The various handlers can be tested in isolation and you can quickly build up
    confidence about them as they will be referentially transparent. The integration
    and functional tests will then take care of testing the streams themselves and
    the application as a whole.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 各种处理程序可以被孤立地测试，你可以很快对它们建立信心，因为它们将是引用透明的。集成和功能测试将负责测试流本身和整个应用程序。
- en: If you try to use Rx in an existing framework, you can declare streams in your
    controllers and keep the handlers separated the same way as described previously.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试在现有框架中使用 Rx，你可以在控制器中声明流，并像之前描述的那样保持处理程序分离。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Functional reactive programming allows us to reconcile pure functions with event
    management. This means it is possible to create applications requiring inputs
    from the user or access to third-party services and external data sources. This
    is especially important as more and more websites make use of web sockets and
    other such technologies to continually push data to the users.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式响应式编程使我们能够将纯函数与事件管理相协调。这意味着可以创建需要用户输入或访问第三方服务和外部数据源的应用程序。随着越来越多的网站使用 Web
    套接字和其他类似技术不断向用户推送数据，这一点尤为重要。
- en: Besides access to data sources, FRP is great when doing user interface work.
    A task is usually done with JavaScript on the Web, as PHP is mostly used to treat
    the request itself and serves an HTML response. PHP might, however, be used more
    on the desktop with initiative, such as the wrapper around **libui** available
    in beta for PHP 7 ([https://github.com/krakjoe/ui](https://github.com/krakjoe/ui)).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 除了访问数据源之外，FRP 在处理用户界面工作时非常出色。通常在 Web 上使用 JavaScript 来执行任务，因为 PHP 主要用于处理请求本身并提供
    HTML 响应。然而，PHP 可能会在桌面上更多地被使用，比如在 PHP 7 的 beta 版本中可用的 **libui** 包装器（[https://github.com/krakjoe/ui](https://github.com/krakjoe/ui)）。
- en: Desktop applications in PHP, being a fairly new topic in the community, now
    might be a great time to create some best practices around it based on state-of-the-art
    that is functional reactive programming.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 中的桌面应用程序是社区中一个相当新的话题，现在可能是一个根据最新的函数式响应式编程创建一些最佳实践的好时机。
- en: We just brushed the surface of this new way of designing applications as it
    would require a lot more than a chapter to do so fully. Both books mentioned previously
    are a great starting point if you want to learn more about the topic.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是浅尝辄止了这种新的应用程序设计方式，要完全做到这一点需要远不止一章的篇幅。如果你想更多地了解这个主题，之前提到的两本书是一个很好的起点。
- en: In this chapter, we've learned a bit about the history of FRP. We also tried
    to discover the differences between traditional reactive programming and its functional
    counterpart. We quickly spoke about time-traveling debugging and then showed a
    few examples in PHP.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 FRP 的历史。我们还试图发现传统响应式编程和其函数式对应之间的区别。我们迅速谈到了时光旅行调试，然后展示了一些 PHP 的例子。
- en: You have just finished the last chapter of this book. I hope you've had as much
    fun reading it as it was for me writing it. I also hope I was able to interest
    you in the topic of functional programming and that you will try to implement
    the various techniques we've seen in this book in your future projects. There
    would be no better reward for me than knowing I was able to get a fellow developer
    interested in this wonderful topic.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚完成了本书的最后一章。我希望你阅读它和我写作它一样有趣。我也希望我能够引起你对函数式编程的兴趣，并且你将尝试在未来的项目中实现我们在本书中看到的各种技术。对我来说，没有比知道我能够让一个同行开发者对这个美妙的主题感兴趣更好的回报了。
- en: Before we part, may I suggest you read the `Appendix`, *What are we Talking
    About When we Talk About Functional Programming*. It contains a more thorough
    definition of what functional programming is, its benefits, and its history. You
    will also find a glossary at the end explaining various terms, some of them seen
    in this book and others new.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们分别之前，我可以建议你阅读 `附录`，*我们谈论函数式编程时在谈论什么*。它包含了对函数式编程的更全面定义，它的好处以及历史。你还会在最后找到一个词汇表，解释了各种术语，其中一些在本书中看到，其他一些是新的。
- en: So long, and thanks for all the fish.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 再见，感谢所有的鱼。
