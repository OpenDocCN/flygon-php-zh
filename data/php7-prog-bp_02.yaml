- en: Chapter 2. Build a Database Class and Simple Shopping Cart
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。构建一个数据库类和简单的购物车
- en: For our previous app, which was just user profiles, we only created a simple
    **Create-Read-Update-Delete (CRUD)** database abstraction layer - basic stuff.
    In this chapter, we will create a better database abstraction layer that will
    allow us to do more than just basic database functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们以前的应用程序，只是用户配置文件，我们只创建了一个简单的**创建-读取-更新-删除（CRUD）**数据库抽象层 - 基本的东西。在本章中，我们将创建一个更好的数据库抽象层，它将允许我们做的不仅仅是基本的数据库功能。
- en: 'Aside from the simple CRUD features, we will add result manipulation into the
    mix. We''ll build the following features into our database abstraction class:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简单的CRUD功能之外，我们将在数据库抽象类中添加结果操作。我们将在我们的数据库抽象类中构建以下功能：
- en: Conversion of integers to other, more accurate numeric types
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将整数转换为其他更准确的数字类型
- en: Array to object conversion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组转对象
- en: '`firstOf()` method: Allows us to select the first of the results of a database
    query'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`firstOf()`方法：允许我们选择数据库查询结果的第一个结果'
- en: '`lastOf()` method: Allows us to select the last of the results of a database
    query'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lastOf()`方法：允许我们选择数据库查询结果的最后一个结果'
- en: '`iterate()` method: Will allow us to iterate over the results and return it
    in a format we will send to this function'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`iterate()`方法：允许我们迭代结果并以我们将发送到此函数的格式返回它'
- en: '`searchString()` method: looks for a string in a list of results'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`searchString()`方法：在结果列表中查找字符串'
- en: We may add more functions as and when we might need them. Towards the end of
    the chapter, we will apply the database abstraction layer to build a simple **Shopping
    Cart** system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会根据需要添加更多的功能。在本章的末尾，我们将应用数据库抽象层来构建一个简单的**购物车**系统。
- en: 'The Shopping Cart is simple: a user who is already logged in should be able
    to click on some items for sale, click on **add to shopping cart**, and get the
    user''s details. After the user has verified their items, they then click the
    button to purchase and we''ll transfer their Shopping Cart items into a purchase
    order where they will fill in the delivery address, and then save this into the
    database.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车很简单：已经登录的用户应该能够点击一些出售的物品，点击**添加到购物车**，并获取用户的详细信息。用户验证了他们的物品后，然后点击购买按钮，我们将把他们的购物车物品转移到购买订单中，他们将填写交货地址，然后保存到数据库中。
- en: Building the database abstraction class
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建数据库抽象类
- en: 'In PHP, when creating a class, there is a way to call a certain method every
    time that class is initialized. This is called the constructor of the class. Most
    classes have a constructor, and so we shall have our own. The constructor function
    is named with two underscores with the `construct()` keyword, like this: `function
    __construct()`. Functions with two underscores are also known as magic methods.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，创建一个类时，有一种方法可以在每次初始化该类时调用某个方法。这称为类的构造函数。大多数类都有构造函数，所以我们将有自己的构造函数。构造函数的函数名是用两个下划线和`construct()`关键字命名的，就像这样：`function
    __construct()`。两个下划线的函数也被称为魔术方法。
- en: 'In our database abstraction class we need to create a constructor to be able
    to return the `link` object generated by `mysqli`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据库抽象类中，我们需要创建一个构造函数，以便能够返回`mysqli`生成的`link`对象：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Raw query method
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始查询方法
- en: The `query` method will just execute the query of anything passed to it. We
    will just call MySQLi's `db->query` method in the `query` method.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`query`方法将执行传递给它的任何查询。我们将在`query`方法中调用MySQLi的`db->query`方法。'
- en: 'Here is what it looks like:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它是什么样子的：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create method
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建方法
- en: 'For our database layer, let''s create the `create` method. With this, we will
    insert items into a database using SQL syntax. In MySQL, the syntax is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的数据库层，让我们创建`create`方法。通过这个方法，我们将使用SQL语法将项目插入到数据库中。在MySQL中，语法如下：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We need a way to convert array values into a string with each value separated
    by commas:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种方法将数组值转换为以逗号分隔的字符串：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Read method
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取方法
- en: For our `db` layer, let's create the `read` method. With this, we will just
    query our database using SQL syntax.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`db`层，让我们创建`read`方法。通过这个方法，我们将只使用SQL语法查询我们的数据库。
- en: 'The syntax in MySQL is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL中的语法如下：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We''ll need to create a function which is able to accept the preceding parameters
    in brackets:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个能够接受括号中的前置参数的函数：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Select all method
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择所有方法
- en: Our `read` method accepts a `key` and `value` pair. However, there may be cases
    where we just need to select everything in a table. In this case, we should create
    a simple method to select all the rows in a table, which only accepts the `table`
    to select as the parameter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`read`方法接受一个`key`和`value`对。然而，可能有些情况下我们只需要选择表中的所有内容。在这种情况下，我们应该创建一个简单的方法来选择表中的所有行，它只接受要选择的`table`作为参数。
- en: 'In MySQL, you just select all the rows using the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在MySQL中，您只需使用以下命令选择所有行：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We''ll need to create a function which is able to accept the preceding parameters
    in brackets:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个能够接受括号中的前置参数的函数：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Delete method
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除方法
- en: For our `db` layer, let's create the `delete` method. With this, we will delete
    some items in a database using SQL syntax.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`db`层，让我们创建`delete`方法。通过这个方法，我们将使用SQL语法删除数据库中的一些项目。
- en: 'The MySQL syntax is simple:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL语法很简单：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We''ll also need to create a function which is able to accept the preceding
    parameters in brackets:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个能够接受括号中的前置参数的函数：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Update method
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新方法
- en: For our database layer, let's create an `update` method. With this, we will
    be able to update items in a database using SQL syntax.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的数据库层，让我们创建一个`update`方法。通过这个方法，我们将能够使用SQL语法更新数据库中的项目。
- en: 'The MySQL syntax looks like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL语法如下：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `WHERE` clause can be longer than just one key value pair, meaning
    you can add `AND` and `OR` to the statement. This means that, aside from making
    the first keys dynamic, the `WHERE` clause needs to be able to accept `AND`/`OR`
    to its parameter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`WHERE`子句可以比一个键值对更长，这意味着您可以向语句添加`AND`和`OR`。这意味着，除了使第一个键动态化之外，`WHERE`子句需要能够接受`AND`/`OR`作为其参数。
- en: 'For example, you could write the following for the `$where` parameter to select
    the person whose `firstname` is `John` and `lastname` is `Doe`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以为`$where`参数编写以下内容，以选择`firstname`为`John`且`lastname`为`Doe`的人：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is the reason why we made the condition just a string parameter in our
    function. The `update` method in our database class would finally look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们在函数中将条件作为一个字符串参数的原因。我们数据库类中的`update`方法最终将如下所示：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: first_of method
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: first_of方法
- en: 'In our database we will create a `first_of` method which will filter out the
    rest of the results and just get the very first one. We will use PHP''s `reset`
    function, which just gets the very first element in an array:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据库中，我们将创建一个`first_of`方法，它将过滤掉其余的结果，只获取第一个结果。我们将使用PHP的`reset`函数，它只获取数组中的第一个元素：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: last_of method
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: last_of方法
- en: 'The `last_of` method is similar; we can use PHP''s `end` function:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`last_of`方法类似；我们可以使用PHP的`end`函数：'
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: iterate_over method
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iterate_over方法
- en: 'The `iterate_over` method will be a function which simply adds formatting -
    before and after HTML code - to a string - for example, for every result we get
    from the database:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`iterate_over`方法将是一个简单添加格式的函数 - 在HTML代码之前和之后 - 例如，对于我们从数据库中获得的每个结果：'
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: searchString method
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: searchString方法
- en: 'Given an array of results, we will look through a certain field for something
    to search. The way to do this is to generate the SQL code that looks like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一组结果，我们将查找某个字段中的内容。这样做的方法是生成类似于以下的SQL代码：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The function would accept the table, and the field to check the search string
    `needle` in the table:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数将接受表和字段，以检查表中的搜索字符串`needle`：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using the convert_to_json method to implement a simple API
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用convert_to_json方法实现一个简单的API
- en: Sometimes we want the results of a database to be in a specific format. An example
    is when we work with the results as JSON objects instead of arrays. This is useful
    when you are building a simple API to be consumed by a mobile application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们希望数据库的结果以特定格式呈现。一个例子是当我们将结果作为JSON对象而不是数组处理时。这在您构建一个简单的API以供移动应用程序使用时非常有用。
- en: This could be possible, for example, in the case of another system that needs
    it in a certain format, for example, a JSON format, and we can feed it using the
    JSON format by converting objects to JSON and sending it off.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是可能的，例如，在另一个需要以特定格式（例如JSON格式）的系统中，我们可以将对象转换为JSON并发送它。
- en: 'In PHP, there is the `json_encode` method, which converts any array or object
    into a JSON notation. Our class'' method will just return the value passed into
    it as `json`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，有一个`json_encode`方法，它将任何数组或对象转换为JSON表示。我们类的方法将只是将传递给它的值返回为`json`：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Shopping Cart
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购物车
- en: Now we will be building a simplified Shopping Cart module which will take advantage
    of our newly built database abstraction class.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将构建一个简化的购物车模块，它将利用我们新建的数据库抽象类。
- en: 'Let''s map out the features of the Shopping Cart:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来规划一下购物车的功能：
- en: '**Shopping List page**:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**购物清单页面**：'
- en: The shopper should see several items with their names and prices
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物者应该看到几个带有名称和价格的物品
- en: The shopper should be able to click on a checkbox beside each item which adds
    it to the cart
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物者应该能够点击每个物品旁边的复选框，将其添加到购物车中
- en: '**Checkout page**:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结账页面**：'
- en: List of items and their prices
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物品清单及其价格
- en: Total
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总计
- en: '**Confirmation page**:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确认页面**：'
- en: Input the details such as the bill-to address, bill-to credit card number, and,
    of course, the name
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入详细信息，如账单地址、账单信用卡号，当然还有名字
- en: The shopper should also be able to specify which address to send the goods to
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物者还应该能够指定将商品发送到哪个地址
- en: Building the shopping items list
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建购物清单
- en: In this page, we will create basic HTML blocks to show the list of items that
    a shopper may wish to buy.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个页面中，我们将创建基本的HTML块，以显示购物者可能想要购买的物品清单。
- en: We will use the same template system which we had earlier, but instead of having
    the entire code in one page, we'll separate out the header and the footer and
    simply include them in our files using `include()`. We'll also use the same Bootstrap
    framework to make our frontend look nice.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与之前相同的模板系统，但是不再将整个代码放在一个页面中，而是将页眉和页脚分开，并简单地在我们的文件中包含它们使用`include()`。我们还将使用相同的Bootstrap框架来使我们的前端看起来漂亮。
- en: Item template rendering function
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物品模板渲染函数
- en: 'We''ll be creating the item render function which will render all our shopping
    items in `div`. The function will simply return the HTML markup of an item with
    the price, name, and picture image of the item:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个物品渲染函数，它将在`div`中渲染所有我们的购物物品。该函数将简单地返回一个带有物品价格、名称和图片的HTML标记：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, we used our freshly created `iterate_over` function,
    which formats each value of the database. The end result is we have a table of
    the items we want to buy.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用了我们新创建的`iterate_over`函数，该函数格式化数据库的每个值。最终结果是我们有了一个我们想要购买的物品的表格。
- en: 'Let''s create a simple layout structure which simply gets the header and footer
    in each page we build, and from now on, simply includes them:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的布局结构，每个页面都会得到页眉和页脚，并且从现在开始，只需包含它们：
- en: 'In `header.php`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`header.php`中：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In `footer.php`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`footer.php`中：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In `index.php`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.php`中：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now let''s create the `itemslist.php` page which will be included in the `index.php`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建`itemslist.php`页面，该页面将包含在`index.php`中：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Our functions are ready but our database does not exist yet. We also need to
    populate our database.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的函数已经准备好了，但是我们的数据库还不存在。我们还需要填充我们的数据库。
- en: 'Let''s create some shopping items by creating the `shopping_items` table in
    our MySQL database:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在我们的MySQL数据库中创建`shopping_items`表来创建一些购物物品：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s run MySQL and insert the following items into our database:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行MySQL，并将以下物品插入到我们的数据库中：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s save it in a file `insert_shopping_items.sql`. Then, in the same directory
    as the `insert_shopping_items.sql` file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存在一个名为`insert_shopping_items.sql`的文件中。然后，在与`insert_shopping_items.sql`文件相同的目录中：
- en: 'Log on to MySQL client and follow the procedure:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到MySQL客户端并按照以下步骤进行：
- en: '[PRE26]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then type `use <name of database>`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后键入`use <数据库名称>`：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Import the script by using the `source` command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`source`命令导入脚本：
- en: '[PRE28]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When we run `SELECT * FROM shopping_items`, we should see the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`SELECT * FROM shopping_items`时，我们应该看到以下内容：
- en: '![Item template rendering function](graphics/B05285_02_01.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![项目模板渲染函数](graphics/B05285_02_01.jpg)'
- en: Adding checkboxes to the Shopping List page
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向购物清单页面添加复选框
- en: 'Now let''s create the HTML checkboxes for a user to be able to select a shopping
    item. We''ll create the form to insert the data as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为用户创建HTML复选框，以便能够选择购物物品。我们将创建以下形式来插入数据：
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To do this, we''ll need to modify our `render_items` method to add a checkbox:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要修改我们的`render_items`方法以添加复选框：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: On the next page, when the user clicks on **submit**, we'll have to get all
    the IDs in an array.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一页上，当用户单击**提交**时，我们将需要获取所有ID并存储到一个数组中。
- en: 'Since we named our checkbox `item[]`, we should be able to get the values via
    `$_POST[''item'']` as an array. Basically, all the items that were checked will
    go into PHP''s `$_POST` variable as an array, which will allow us to get all the
    values for saving our data into our database. Let''s loop through the results''
    IDs and get the price for each in our database and save each item in an array
    called `itemsArray`, with the key as the name of the item and its price as the
    value of the item:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将复选框命名为`item[]`，我们应该能够通过`$_POST['item']`作为数组获取值。基本上，所有被选中的物品将作为数组存储在PHP的`$_POST`变量中，这将允许我们获取所有值以保存数据到我们的数据库中。让我们循环遍历结果的ID，并在我们的数据库中获取每个物品的价格并将每个物品保存在名为`itemsArray`的数组中，其中键是物品的名称，值是物品的价格。
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We are going to first confirm with the user about the items that were purchased.
    We will just save the items and the total amount into a cookie for now. We will
    access the values of the cookie on our checkout page, which will accept the user's
    details and save them to our database on submission of the checkout page.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先与用户确认购买的物品。现在我们只会将物品和总金额保存到cookie中。我们将在结账页面上访问cookie的值，该页面将接受用户的详细信息，并在提交结账页面时将其保存到我们的数据库中。
- en: Tip
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'PHP session versus cookies: For data which is not very sensitive, such as the
    list of items a user has purchased, we can use cookies, which actually store the
    data (in plain text!) in the browser. If you are building this application and
    using it in production, it is recommended to use sessions. To learn more about
    sessions, go to [http://php.net/manual/en/features.sessions.php](http://php.net/manual/en/features.sessions.php)
    .'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: PHP会话与cookie：对于不太敏感的数据，例如用户购买的物品清单，我们可以使用cookie，它实际上将数据（以纯文本形式！）存储在浏览器中。如果您正在构建此应用程序并在生产中使用它，建议使用会话。要了解有关会话的更多信息，请访问[http://php.net/manual/en/features.sessions.php](http://php.net/manual/en/features.sessions.php)。
- en: Cookies in PHP
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP中的Cookies
- en: In PHP, to start a cookie, you just call the `setcookie` function. To save our
    items purchased into a cookie, we must serialize the array, the reason being,
    the cookies only store values as strings.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，要启动一个cookie，只需调用`setcookie`函数。为了将我们购买的物品保存到cookie中，我们必须对数组进行序列化，原因是cookie只能将值存储为字符串。
- en: 'Here, we save the items into the cookie:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将物品保存到cookie中：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding cookie will store the items as an array in the `purchased_items`
    cookie. It will expire in 15 minutes (900 seconds). However, notice the call to
    the `time()` function, which returns the Unix timestamp of the current time. Cookies
    in PHP will expire when the time set in the last parameter has been reached.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的cookie将在`purchased_items` cookie中将物品存储为数组。它将在15分钟后过期（900秒）。但是，请注意`time()`函数的调用，它返回当前时间的Unix时间戳。在PHP中，当达到最后一个参数中设置的时间时，cookie将会过期。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Debugging your cookie-based application is sometimes frustrating. Make sure
    that the timestamp generated by `time()` is really showing the current time.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 调试基于cookie的应用程序有时会令人沮丧。确保`time()`生成的时间戳确实显示当前时间。
- en: For example, it could happen that you have recently reformatted your computer
    and for some reason was not able to set the time correctly. To test the `time()`,
    simply run a PHP script with the `time()` call and check [http://www.unixtimestamp.com/](http://www.unixtimestamp.com/)
    if they are almost the same.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可能您最近重新格式化了您的计算机，由于某种原因无法正确设置时间。要测试`time()`，只需运行一个带有`time()`调用的PHP脚本，并检查[http://www.unixtimestamp.com/](http://www.unixtimestamp.com/)是否几乎相同。
- en: Building the Checkout page
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建结账页面
- en: Finally, we'll create a form where the user can input their details after checking
    out.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将创建一个表单，用户可以在结账后输入他们的详细信息。
- en: We first need to build the database table for the customer. Let's call this
    table `purchases`. We'll need to store the customer's name, address, e-mail, credit
    card, items purchased, and the total. We should also store the time of the purchase
    transaction and use a unique primary key to index each row.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为客户建立数据库表。让我们称这个表为`purchases`。我们需要存储客户的姓名、地址、电子邮件、信用卡、购买的物品和总额。我们还应该存储购买交易的时间，并使用唯一的主键来索引每一行。
- en: 'The following is our table''s schema to be imported into our MySQL database:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要导入到我们的MySQL数据库中的表的架构：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: One way to import this is by creating a file `purchases.sql`, then logging in
    to your MySQL command-line tool.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 导入的一种方法是创建一个名为`purchases.sql`的文件，然后登录到您的MySQL命令行工具。
- en: 'Then, you can select the database you want to use with:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以选择要使用的数据库：
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, assuming you are on the same directory as `purchases.sql`, you can
    run:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，假设您在与`purchases.sql`相同的目录中，您可以运行：
- en: '[PRE35]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s finish off by creating a simple form with input fields for details such
    as the address, credit card, and name of the buyer:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过创建一个简单的表单，包括地址、信用卡和买家姓名等详细信息的输入字段来完成：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here is how it looks:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的样子：
- en: '![Building the Checkout page](graphics/B05285_02_02.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![构建结账页面](graphics/B05285_02_02.jpg)'
- en: 'Finally, we''ll save everything into another table in our database by using
    our `DB` class as usual. To calculate the total amount, we will query the database
    for the prices and use the `array_sum` of PHP to get the total:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将像往常一样将所有内容保存到我们的数据库中的另一个表中，使用我们的`DB`类。为了计算总金额，我们将查询数据库的价格，并使用PHP的`array_sum`来获得总金额：
- en: '[PRE37]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To keep things simple, as you can see in the highlighted code, we need to collect
    all the items that were bought into one long string, for saving in our database.
    Here''s how you can concatenate each item and their prices:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简单，正如您在突出显示的代码中所看到的，我们需要将所有购买的物品收集到一个长字符串中，以保存在我们的数据库中。以下是如何连接每个物品和它们的价格：
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then we can save this data into the variable `$items_text`. We will update
    the preceding highlighted code and change the text `<all the items and prices>`
    into it with  `$items_text`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将这些数据保存到变量`$items_text`中。我们将更新前面突出显示的代码，并将文本`<所有物品和价格>`更改为`$items_text`：
- en: '[PRE39]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The preceding `foreach` loop should be placed before the call to the `$db->insert`
    method in our code.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，`foreach`循环应该放在调用`$db->insert`方法之前。
- en: Thank you page
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 感谢页面
- en: Finally, we've saved the data into our  `purchased_items` table. It's time to
    say thank you to our customer and send an e-mail. In our HTML code of `thankyou.php`,
    we will just write a thank you note and let the user know that an e-mail is on
    its way regarding their purchases.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经将数据保存到我们的`purchased_items`表中。现在是时候向我们的客户说声谢谢并发送一封电子邮件了。在我们的`thankyou.php`的HTML代码中，我们将只写一张感谢便条，并让用户知道他们的购买情况即将收到一封电子邮件。
- en: 'Here''s a screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个屏幕截图：
- en: '![Thank you page](graphics/B05285_02_03.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![感谢页面](graphics/B05285_02_03.jpg)'
- en: 'We''ll name the file `thankyou.php`, and its HTML code is pretty simple:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将文件命名为`thankyou.php`，它的HTML代码非常简单：
- en: '[PRE40]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Sending an e-mail using PHP is done using the `mail()` function:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PHP发送电子邮件是使用`mail()`函数完成的：
- en: '[PRE41]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The third parameter is the message of our e-mail. In the code, we still need
    to add the details of the purchase. We shall loop through the cookie we made earlier
    and the prices, then just output the total amount, and send the message:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个参数是我们电子邮件的消息。在代码中，我们仍然需要添加购买的细节。我们将循环遍历我们之前制作的cookie和价格，然后输出总金额，并发送消息：
- en: '[PRE42]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We can add the preceding bit of code at the very end of our `thankyou.php` file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将前面的代码添加到我们的`thankyou.php`文件的最后。
- en: Installing TCPDF
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装TCPDF
- en: You can download the TCPDF library from sourceforge, [https://sourceforge.net/projects/tcpdf/](https://sourceforge.net/projects/tcpdf/)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从sourceforge下载TCPDF库，[https://sourceforge.net/projects/tcpdf/](https://sourceforge.net/projects/tcpdf/)
- en: TCPDF is a PHP class for writing PDF documents.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: TCPDF是用于编写PDF文档的PHP类。
- en: 'A sample code with a PHP example of TCPDF''s, looks as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有TCPDF示例的PHP示例代码如下：
- en: '[PRE43]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: With this example, we can now use the preceding code and modify it a bit in
    order same in order to create our own invoice. All we need is the same HTML styling
    and the values generated by our total. Let's use the same code and update the
    values to the ones we need.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个例子，我们现在可以使用前面的代码并稍微修改一下，以便创建我们自己的发票。我们只需要相同的HTML样式和我们总计生成的值。让我们使用相同的代码并更新值到我们需要的值。
- en: In this case, we will set the Author to be the site's name, `example.info`.
    And set our subject to `Invoice`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将设置作者为网站的名称`example.info`。并将我们的主题设置为`发票`。
- en: 'First, we need to acquire the main TCPDF library. If you installed it on a
    different folder, we may need to provide a relative path which points to the `tcpdf_include.php`
    file:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要获取主要的TCPDF库。如果您将其安装在不同的文件夹中，我们可能需要提供一个相对路径，指向`tcpdf_include.php`文件：
- en: '[PRE44]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This instantiates a new TCPDF object with the default orientations and default
    page formats from the class:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用类的默认方向和默认页面格式实例化一个新的TCPDF对象：
- en: '[PRE45]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, let''s use HTML to create an HTML table of the purchases of a customer:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用HTML来创建一个客户购买的HTML表格：
- en: '[PRE46]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Note
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This style of writing out multi-line strings is known as the heredoc syntax.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这种多行字符串的写法被称为heredoc语法。
- en: 'Let''s create a connection to the database by instantiating our `DB` class:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过实例化我们的`DB`类来创建与数据库的连接：
- en: '[PRE47]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In creating PDFs, it's important to note that most HTML to PDF converters are
    created simple and can interpret simple-inline CSS layouts. We used tables to
    print out each item, which is okay for table data. It provides a structure to
    the layout and makes sure that things are properly aligned.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建PDF时，重要的是要注意，大多数HTML到PDF转换器都是简单创建的，并且可以解释简单的内联CSS布局。我们使用表格打印出每个项目，这对于表格数据来说是可以的。它为布局提供了结构，并确保事物被正确对齐。
- en: Admin for managing purchases
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理购买的管理员
- en: 'We''ll be building the admin system for handling all our purchases. This is
    in order to keep track of each customer that bought something from our site. It
    will consist of two pages:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将建立管理系统来处理所有的购买。这是为了跟踪每个从我们网站购买东西的客户。它将包括两个页面：
- en: An overview of all customers who purchased something
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有购买了东西的客户的概述
- en: Being able to view the items purchased by a customer
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够查看客户购买的物品
- en: We will also be adding some features to these pages in order to make it easier
    for an admin to make changes to a customer's information.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在这些页面上添加一些功能，以便管理员更容易地更改客户的信息。
- en: We'll also create a simple  **htaccess apache rule** in order to block other
    people from accessing our admin site, because it contains highly sensitive data.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一个简单的**htaccess apache规则**，以阻止其他人访问我们的管理站点，因为它包含非常敏感的数据。
- en: 'Let''s first start selecting all the data inside our `purchases` table:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先开始选择我们`purchases`表中的所有数据：
- en: '[PRE48]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We shall now add a link to another view of our customer data. This view will
    enable the admin to see all their purchases. We can link the first page to the
    detailed view of the customer''s purchase by adding a link on the customer''s
    name, by changing the line where we''ve added the customer''s name to the `$html`
    variable to this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个链接到我们客户数据的另一个视图。这个视图将使管理员能够查看他们所有的购买。我们可以通过在客户姓名上添加一个链接，将第一个页面链接到客户购买的详细视图，方法是将我们添加客户姓名到`$html`变量的行更改为：
- en: '[PRE49]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Notice that we've made the `$row['id']` be part of the URL. We can now access
    the ID number of the data we will be getting through the `$_GET['pid']` value.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经将`$row['id']`作为URL的一部分。现在我们可以通过`$_GET['pid']`值访问我们将要获取的数据的ID号。
- en: 'Let''s create the code for viewing a customer''s purchased items in a new file
    - `view_purchases.php`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在一个新文件`view_purchases.php`中创建查看客户购买物品的代码：
- en: '[PRE50]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In the preceding code, we've used the `$_GET['id']` variable for us to look
    up the table for the exact purchases of the customer. While we could have just
    used the customer name to look up the customer's purchases from the table `purchases`, that
    would assume that the customer only purchased once through our system. Also, we
    didn't use the customer name to determine if we sometimes have customers that
    have the same name.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用了`$_GET['id']`变量来查找客户的确切购买记录。虽然我们可以只使用客户姓名来查找表`purchases`中客户的购买记录，但这将假定客户只通过我们的系统购买了一次。此外，我们没有使用客户姓名来确定我们是否有时有相同姓名的客户。
- en: By using the primary ID of the table `purchases`, in our case, selecting by
     the `id` field ensures that we are selecting that particular unique purchase.
    Note that because our database is simple, we are able to just query one table
    in our database - the `purchases` table - in our case.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用表`purchases`的主要ID，在我们的情况下，通过选择`id`字段来确保我们选择了特定的唯一购买。请注意，由于我们的数据库很简单，我们可以只查询数据库中的一个表
    - 在我们的情况下是`purchases`表。
- en: Perhaps a better implementation might be to separate the `purchases` table into
    two tables - one containing the customer's details, and another containing the
    purchased items details. This way, if the same customer returns, their details
    can be automatically filled in next time, and we just need to link the new items
    purchased to their account.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 也许一个更好的实现方法是将“购买”表分成两个表 - 一个包含客户的详细信息，另一个包含已购买物品的详细信息。这样，如果同一个客户返回，他们的详细信息可以在下次自动填写，我们只需要将新购买的物品链接到他们的账户上。
- en: The `purchases` table, in this case, would simply be called `purchased_items`
    table, and each item would be linked to a customer ID. The customer details would
    be stored in a `customers` table, containing their unique address, e-mail and
    credit card details.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，“购买”表将简单地称为“已购买物品”表，每个物品将与客户ID相关联。客户的详细信息将存储在一个包含其唯一地址、电子邮件和信用卡详细信息的“客户”表中。
- en: You would then be able to show a customer their purchase history. Each time
    the customer buys from the store, the transaction date would be recorded and you
    would have to sort the history by date and time of each entry.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将能够向客户展示他们的购买历史。每次客户从商店购买物品时，交易日期将被记录下来，您需要按照每笔交易的日期和时间对历史记录进行排序。
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Great, we're done!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，我们完成了！
- en: We just learned how to build a simple database abstraction layer, and how to
    use it for a Shopping Cart. We also learned about cookies and building an invoice
    using the TCPDF library.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学会了如何构建一个简单的数据库抽象层，以及如何将其用于购物车。我们还学习了关于cookies和使用TCPDF库构建发票。
- en: In the next chapter, we'll build a completely different thing and use sessions
    to save the current user information of a user in building a PHP-based chat system.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建一个完全不同的东西，并使用会话来保存用户的当前信息，以构建基于PHP的聊天系统。
