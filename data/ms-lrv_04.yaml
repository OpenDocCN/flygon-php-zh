- en: Chapter 4. Creating RESTful APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。创建RESTful API
- en: If there is one single core feature that demonstrates Laravel's superiority,
    it would be the ability to quickly and easily create a RESTful API. With the arrival
    of Laravel 5, several new features have been added; however, the ability to create
    application models and controllers via the Artisan command-line tool remains the
    most useful feature.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个单一的核心功能可以展示Laravel的优越性，那就是快速轻松地创建RESTful API的能力。随着Laravel 5的到来，添加了几个新功能；然而，通过Artisan命令行工具创建应用程序模型和控制器的能力仍然是最有用的功能。
- en: 'This feature is what initially encouraged me and so many others to abandon
    frameworks such as CodeIgniter, which at the time that Laravel 4 was in beta,
    did not natively have the same integrated functionality. Laravel provides the
    basic CRUD methods: create, read, update, delete, and also lists all.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能最初鼓励了我和其他许多人放弃诸如CodeIgniter之类的框架，因为在Laravel 4测试版时，它并没有原生具有相同的集成功能。Laravel提供了基本的CRUD方法：创建，读取，更新，删除，并且还列出了所有内容。
- en: Requests that arrive via HTTP to a Laravel URL are managed through their verbs
    and subsequently, the `routes.php` file, which is located at `app/Http/routes.php`.
    There are two ways in which the requests are handled. One way is that the request
    is handled directly via a closure, and the code is entirely inside the `routes`
    file. Another way is that it routes the request to a controller, where a method
    will be executed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过HTTP到达Laravel URL的请求是通过它们的动词管理的，随后是`routes.php`文件，该文件位于`app/Http/routes.php`。请求处理有两种方式。一种方式是直接通过闭包处理请求，代码完全在`routes`文件中。另一种方式是将请求路由到控制器，其中将执行一个方法。
- en: Also, the basic paradigm used is convention-over-configuration, where the method
    names are ready to handle the various requests, without too much extra effort.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用的基本范式是约定优于配置，其中方法名称已准备好处理各种请求，而无需太多额外的努力。
- en: RESTful APIs in Laravel
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel中的RESTful API
- en: 'The list of RESTful API requests handled by the RESTful API are as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由RESTful API处理的RESTful API请求列表如下：
- en: '|   | HTTP VERB | Function | URL |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|   | HTTP VERB | Function | URL |'
- en: '| --- | --- | --- | --- |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | `GET` | This lists all accommodations | `/accommodations` |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `GET` | 列出所有住宿 | `/accommodations` |'
- en: '| 2 | `GET` | This shows (reads) a single accommodation | `/accommodations/{id}`
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `GET` | 显示（读取）单个住宿 | `/accommodations/{id}` |'
- en: '| 3 | `POST` | This creates a new accommodation | `/accommodations` |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `POST` | 创建新的住宿 | `/accommodations` |'
- en: '| 4 | `PUT` | This entirely modifies (updates) an accommodation | `/accommodations/{id}`
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `PUT` | 完全修改（更新）住宿 | `/accommodations/{id}` |'
- en: '| 5 | `PATCH` | This partially modifies (updates) an accommodation | `/accommodations/{id}`
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `PATCH` | 部分修改（更新）住宿 | `/accommodations/{id}` |'
- en: '| 6 | `DELETE` | This deletes an accommodation | `/accommodations/{id}` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `DELETE` | 删除住宿 | `/accommodations/{id}` |'
- en: Most RESTful API best practices suggest using the plural form of the model name.
    Laravel's documentation uses the singular format. Most practices agree that consistent
    plural naming, that is, `/accommodations/{id}` refers to a single accommodation
    and `/accommodations` refers to more than one accommodation, both using the plural
    form are preferred over a mixed, but grammatically correct `/accommodation/{id}`
    (singular form) and `/accommodations` (plural form).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数RESTful API最佳实践建议使用模型名称的复数形式。Laravel的文档使用单数格式。大多数实践都同意一致的复数命名，即`/accommodations/{id}`指的是单个住宿，`/accommodations`指的是多个住宿，都使用复数形式，而不是混合的，但语法上正确的`/accommodation/{id}`（单数形式）和`/accommodations`（复数形式）。
- en: Essential CRUD
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本CRUD
- en: For simplicity, I have numbered each of the rows. The first and second items
    represent the *read* part of CRUD.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为简单起见，我已经对每一行进行了编号。第一和第二项代表了CRUD的“读取”部分。
- en: The first item, which is a `GET` call to the plural form of the model name,
    is rather simple; it displays all of the items. Sometimes, this is called a *list*
    to differentiate it from the *read* of a single record. Adding a *list* would
    thus expand the acronym to CRUDL. They could be paginated or require authorization.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第一项是对模型名称的复数形式进行的`GET`调用，相当简单；它显示所有项目。有时，这被称为“列表”，以区别于单个记录的“读取”。因此，添加一个“列表”将扩展首字母缩写为CRUDL。它们可以进行分页或需要授权。
- en: The second item, also a `GET` call, adds the ID of the model to the end of the
    URL, displaying a single model with that corresponding ID. This could also require
    authentication but not paging.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第二项，也是`GET`调用，将模型的ID添加到URL的末尾，显示具有相应ID的单个模型。这也可能需要身份验证，但不需要分页。
- en: The third item represents the *create* part of CRUD. It uses the `POST` verb
    to create a new model. Note that the URL format is the same as the first item;
    this demonstrates the importance of the verb to distinguish between the actions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 第三项代表了CRUD的“创建”部分。它使用`POST`动词来创建一个新的模型。请注意，URL格式与第一项相同；这展示了动词在区分操作中的重要性。
- en: The fourth, fifth, and sixth items use the new `HTTP` verbs that were not supported
    by all browsers. Whether or not the verbs are supported, JavaScript libraries
    and frameworks, such as jQuery, will send the verb in a way that Laravel can properly
    handle.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第四、第五和第六项使用了一些浏览器不支持的新的`HTTP`动词。无论这些动词是否受支持，JavaScript库和框架（如jQuery）都会以Laravel可以正确处理的方式发送动词。
- en: The fourth item is the `update` part of CRUD and updates the model using the
    `PUT` verb. Note that it has the same URL format as the second, as it needs to
    know which model to update. It is also idempotent, which means that the entire
    model must be updated.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第四项是CRUD的“更新”部分，使用`PUT`动词更新模型。请注意，它与第二项具有相同的URL格式，因为它需要知道要更新哪个模型。它也是幂等的，这意味着整个模型必须被更新。
- en: The fifth item is similar to the fourth item; it updates the model, but uses
    the `PATCH` verb. This is used to indicate that the model will be partially modified,
    which means that one or more of the model's attributes have to be changed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第五项类似于第四项；它更新模型，但使用`PATCH`动词。这用于指示模型将被部分修改，这意味着一个或多个模型的属性必须被更改。
- en: The sixth item deletes a single model and thus requires the model's ID, using
    the self-explanatory `DELETE` verb.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第六项删除一个单个模型，因此需要模型的ID，使用不言自明的 `DELETE` 动词。
- en: Bonus features
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外功能
- en: 'Laravel adds two additional methods that are not usually part of a standard
    RESTful API. A `GET` method on the model URL, adding `create` is used to display
    a form to create the model. A `GET` method on the model URL with its ID, adding
    `edit` is used to display a form to create the model. These two functions are
    useful for providing a URL that will load a form, even though this type of usage
    is not a standard RESTful:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 添加了两个通常不是标准RESTful API的额外方法。在模型URL上使用 `GET` 方法，添加 `create` 用于显示创建模型的表单。在带有ID的模型URL上使用
    `GET` 方法，添加 `edit` 用于显示创建模型的表单。这两个功能对于提供将加载表单的URL非常有用，尽管这种类型的使用不是标准的RESTful：
- en: '| HTTP VERB | Function | URL |   |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| HTTP VERB | Function | URL |   |'
- en: '| --- | --- | --- | --- |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `GET` | This displays an accommodation creation form | `/accommodations/create`
    |   |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | 这显示一个住宿创建表单 | `/accommodations/create` |   |'
- en: '| `GET` | This displays an accommodation modification/update form | `/accommodations/{id}/edit`
    |   |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | 这显示一个住宿修改/更新表单 | `/accommodations/{id}/edit` |   |'
- en: Controller creation
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器创建
- en: 'To create a controller for the accommodations, the following Artisan command
    is used:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要为住宿创建一个控制器，使用以下 Artisan 命令：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: CRUD(L) by example
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过示例进行CRUD(L)
- en: We have seen this controller before, but here are a few examples. The single
    most simple example of a RESTful call would be as shown in the following sections.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看过这个控制器，但这里有一些示例。RESTful 调用的最简单示例将如下所示。
- en: cRudl – read
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cRudl – 读取
- en: 'Create a `GET` call to `http://www.hotelwebsite.com/accommmodations/1`, where
    `1` would be the ID of the room:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `GET` 调用到 `http://www.hotelwebsite.com/accommmodations/1`，其中 `1` 将是房间的ID：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This would return a single model as a JSON-encoded object:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个单个模型作为 JSON 编码对象：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: crudL – list
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: crudL – 列表
- en: Create a GET call to `http://www.hotelwebsite.com/accommmodations`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 GET 调用到 `http://www.hotelwebsite.com/accommmodations`。
- en: 'This is similar to the preceding code, yet slightly different:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这与前面的代码类似，但略有不同：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This would return all of the models, automatically encoded as JSON objects;
    there is nothing else that is required. Formatting has been added so that the
    JSON results are more easily readable, but basically, the entire model is returned:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回所有模型，自动编码为 JSON 对象；没有其他要求。已添加格式，以便 JSON 结果更易读，但基本上整个模型都会返回：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `deleted_at` field is a soft delete or the recycle bin mechanism. It is
    either `null` for not deleted or a `date`/`time` stamp for deleted.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`deleted_at` 字段是软删除或回收站机制。对于未删除的情况，它要么是 `null`，要么是已删除的 `date`/`time` 时间戳。'
- en: Pagination
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分页
- en: 'To add pagination, simply substitute `all()` with `paginate()`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加分页，只需用 `paginate()` 替换 `all()`：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The results will now look like this. The eloquent collection array is now moved
    inside a `date` attribute:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在结果看起来像这样。Eloquent 集合数组现在移动到 `date` 属性内：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Crudl – create
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Crudl – 创建
- en: Create a `POST` call to `http://www.hotelwebsite.com/accommmodations`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `POST` 调用到 `http://www.hotelwebsite.com/accommmodations`。
- en: 'To create a new model, a `POST` call will be sent to `/accommodations`. A JSON
    would be sent from the frontend as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新模型，将发送一个 `POST` 调用到 `/accommodations`。前端将发送一个 JSON 如下：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `store` function might look something like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`store` 函数可能看起来像这样：'
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`201` is the HTTP status code (`HTTP/1.1 201 created`) for `created`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`201` 是 `created` 的 HTTP 状态码（`HTTP/1.1 201 created`）。'
- en: 'In this example, we returned the model as a JSON-encoded object. The object
    will include the ID that was inserted:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将模型作为 JSON 编码对象返回。对象将包括插入的 ID：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: crUdl – update
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: crUdl – 更新
- en: 'Create a `PUT` call to `http://www.hotelwebsite.com/accommmodations/1`, where
    `1` is the ID to be updated:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `PUT` 调用到 `http://www.hotelwebsite.com/accommmodations/1`，其中 `1` 是要更新的
    ID：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To update an existing model, the code is exactly the same as we used earlier,
    except that the following line is used to find the existing model:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新现有模型，代码与之前使用的完全相同，只是使用以下行来查找现有模型：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `PUT` verb would be sent to `/accommodations/{id}`, where `id` would be
    the numeric ID of the accommodations table.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`PUT` 动词将发送到 `/accommodations/{id}`，其中 `id` 将是住宿表的数字ID。'
- en: cruDl – delete
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: cruDl – 删除
- en: 'To delete a model, create a `DELETE` call to `http://www.hotelwebsite.com/accommmodation/1`,
    where `1` is the ID to be deleted:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除一个模型，创建一个 `DELETE` 调用到 `http://www.hotelwebsite.com/accommmodation/1`，其中
    `1` 是要删除的 ID：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There seems to be some disagreement about what the proper status code should
    be for a deleted model.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于删除模型的适当状态码似乎存在一些分歧。
- en: Model binding
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型绑定
- en: 'Now, we can use a technique called *model binding* to clean up the code even
    more:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用一种称为*模型绑定*的技术来进一步简化代码：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In `app/Providers/RouteServiceProvider.php`, add the `$router->model()` method
    that accepts the route as the first argument and the model that will be bound
    as the second argument.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app/Providers/RouteServiceProvider.php` 中，添加接受路由作为第一个参数并将要绑定的模型作为第二个参数的 `$router->model()`
    方法。
- en: Read revisited
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新访问读取
- en: 'Now, our `show` controller method looks like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 `show` 控制器方法看起来像这样：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When `/accommodations/1` is called, for example, the model that corresponds
    to that ID will be injected into the method, allowing us to substitute the find
    method.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `/accommodations/1` 时，例如，与该ID对应的模型将被注入到方法中，允许我们替换查找方法。
- en: List revisited
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新访问列表
- en: 'Similarly, for the `list` method, we inject the type-hinted model as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于 `list` 方法，我们按照类型提示的模型注入如下：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Update revisited
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新重新访问
- en: 'Likewise, the `update` method now looks like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`update` 方法现在看起来像这样：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Delete revisited
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除重新访问
- en: 'Also, the `destroy` method looks like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`destroy` 方法看起来像这样：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Moving beyond CRUD
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越CRUD
- en: 'If one of the requirements of the software application to be built is able
    to search for an accommodation, then we can easily add a search function. The
    search function will find accommodations by using a `name` string. One way to
    do this is to add a route to the `routes.php` file. This will map a `GET` call
    to search for a new `search()` function contained within `AccommodationsController`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果软件应用的一个要求是能够搜索住宿，那么我们可以很容易地添加一个搜索函数。搜索函数将使用`name`字符串查找住宿。一种方法是将路由添加到`routes.php`文件中。这将把`GET`调用映射到`AccommodationsController`中包含的新的`search()`函数：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: In this case, the `GET` method would be preferred instead of the `POST` method,
    as it can be bookmarked and recalled later.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`GET`方法比`POST`方法更可取，因为它可以被收藏并稍后调用。
- en: 'Now, we will write our search function:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写我们的搜索函数：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'There are several mechanisms here:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几种机制：
- en: The `Request` object that contains the variables from the `GET` request is type-hinted
    and then injected into the search function
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含来自`GET`请求的变量的`Request`对象被类型提示，然后注入到搜索函数中
- en: The `Accommodation` model is type-hinted and then injected into the `search`
    function
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Accommodation`模型被类型提示，然后注入到`search`函数中'
- en: The `where()` method from the fluent query builder is called on the eloquent
    model `$accommodation`
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Eloquent模型`$accommodation`上调用了`where()`方法
- en: The `name` parameter is used from the `request` object
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`request`对象中使用`name`参数
- en: The `get()` method is used to actually perform the SQL query
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`get()`方法来执行实际的SQL查询
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that some of the query builder and eloquent methods return an instance
    of the query builder, while the others execute the query and return the result.
    The `where()` method returns an instance of the query builder, while the `get()`
    method executes the query.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，查询构建器和Eloquent方法中的一些返回查询构建器的实例，而其他方法执行查询并返回结果。`where()`方法返回查询构建器的实例，而`get()`方法执行查询。
- en: The resulting eloquent collection is returned and automatically encoded into
    JSON
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回的Eloquent集合会自动编码为JSON
- en: 'The `GET` request, therefore, is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`GET`请求如下：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The resultant JSON would look something like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的JSON看起来会像这样：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Nested controllers
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套控制器
- en: Nested controllers is a new feature in Laravel 5 and is used to handle all of
    the RESTful actions that deal with relationships. For example, we can take advantage
    of this feature for the relationship between accommodations and rooms.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套控制器是Laravel 5中的一个新功能，用于处理涉及关系的所有RESTful操作。例如，我们可以利用这个功能来处理住宿和客房之间的关系。
- en: 'The relationship between accommodation and room is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 住宿和客房之间的关系如下：
- en: An accommodation may have one or more rooms (one-to-many)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个住宿可以有一个或多个房间（一对多）
- en: A room belongs to one and only one accommodation (one-to-one)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个房间只属于一个住宿（一对一）
- en: In our models, we will now write the code to enable the one-to-one and one-to-many
    relationships to be skillfully handled by Laravel.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写代码，使得我们的模型能够熟练处理Laravel的一对一和一对多关系。
- en: Accommodation hasMany rooms
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Accommodation有许多rooms
- en: 'First, we will add the code that is needed by the `Accomodation.php` file that
    represents the `accommodation` model as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加所需的代码到代表`accommodation`模型的`Accomodation.php`文件中：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `rooms()` method creates an easy way to access the relationship from inside
    the accommodation model. The relation states that "the accommodation *hasMany*
    rooms". The `hasMany` function, when residing inside the `Accommodation` class,
    without any additional parameters, expects a column named `accommodation_id` to
    exist in the `Room` model's table, which in this case is `rooms`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`rooms()`方法创建了一种从住宿模型内部访问关系的简单方法。关系说明了“住宿*有许多*房间”。`hasMany`函数，当位于`Accommodation`类内部时，没有额外的参数，期望`Room`模型的表中存在一个名为`accommodation_id`的列，这在这种情况下是`rooms`。'
- en: Room belongsTo accommodation
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Room属于accommodation
- en: 'Now, we will add the code that is needed by the `Room.php` file that represents
    the `Room` model:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加`Room.php`文件所需的代码，该文件代表`Room`模型：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code states that "a room *belongsTo* an accommodation". The *belongsTo*
    method inside the `Room` class, without any additional parameters, expects a field
    in the `room` model's table; in this case, `rooms`, named `accommodation_id`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码说明了“一个房间*属于*一个住宿”。`Room`类中的*belongsTo*方法，没有额外的参数，期望`room`模型的表中存在一个字段；在这种情况下，名为`accommodation_id`的`rooms`。
- en: Tip
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If the tables in the application database have followed the active record conventions,
    then most of the eloquent relation functionalities will automatically function.
    All of the parameters can be easily configured.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序数据库中的表遵循了活动记录约定，那么大多数Eloquent关系功能将自动运行。所有参数都可以很容易地配置。
- en: 'The command to create a nested controller is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 创建嵌套控制器的命令如下：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then, the following line would be added to the `app/Http/routes.php` file:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以下行将被添加到`app/Http/routes.php`文件中：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To display the routes created, the following command should be executed:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示创建的路由，应执行以下命令：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following table lists the HTTP verbs and their functions:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表列出了HTTP动词及其功能：
- en: '|   | HTTP verb | Function | URL |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '|   | HTTP动词 | 功能 | URL |'
- en: '| --- | --- | --- | --- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | `GET` | This shows the accommodation and room relations | `/accommodations/{accommodations}/rooms`
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `GET` | 这显示了住宿和客房的关系 | `/accommodations/{accommodations}/rooms` |'
- en: '| 2 | `GET` | This shows an accommodation and room relation | `/accommodations/{accommodations}/rooms/{rooms}`
    |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 2 | `GET` | 这显示了住宿和客房的关系 | `/accommodations/{accommodations}/rooms/{rooms}`
    |'
- en: '| 3 | `POST` | This creates a new accommodation and room relation | `/accommodations/{accommodations}/rooms`
    |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 3 | `POST` | 这创建了一个新的住宿和客房的关系 | `/accommodations/{accommodations}/rooms`
    |'
- en: '| 4 | `PUT` | This entirely modifies (updates) an accommodation and room relation
    | `/accommodations/{accommodations}/rooms/{rooms}` |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 4 | `PUT` | 这完全修改（更新）了住宿和客房的关系 | `/accommodations/{accommodations}/rooms/{rooms}`
    |'
- en: '| 5 | `PATCH` | This partially modifies (updates) an accommodation and room
    relation | `/accommodations/{accommodations}/rooms/{rooms}` |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 5 | `PATCH` | 部分修改（更新）住宿和房间关系 | `/accommodations/{accommodations}/rooms/{rooms}`
    |'
- en: '| 6 | `DELETE` | This deletes an accommodation and room relation | `/accommodations/{accommodations}/rooms/{rooms}`
    |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 6 | `DELETE` | 删除住宿和房间关系 | `/accommodations/{accommodations}/rooms/{rooms}`
    |'
- en: Eloquent relations
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 雄辩的关系
- en: A nice mechanism used to illustrate an Eloquent relation directly inside the
    controller is performed through the use of a **nested relation**, where two models
    are connected firstly through the route and secondly through their controller
    method's parameters via model dependency injection.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的机制用于直接在控制器内部说明雄辩关系，通过使用**嵌套关系**来执行，其中两个模型首先通过路由连接，然后通过它们的控制器方法的参数通过模型依赖注入连接。
- en: Nested update
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套更新
- en: 'Let''s investigate the `update`/`modify PUT` nested controller command. The
    URL looks like this: `http://www.hotelwebsite.com/accommodations/21/rooms/13`.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调查`update`/`modify PUT`嵌套控制器命令。URL看起来像这样：`http://www.hotelwebsite.com/accommodations/21/rooms/13`。
- en: 'Here, `21` would be the ID of the accommodation and `13` would be ID of the
    room. The parameters are the type-hinted models. This allows us to easily update
    the relationship as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`21`将是住宿的ID，`13`将是房间的ID。参数是类型提示的模型。这使我们可以轻松地更新关系，如下所示：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Nested create
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套创建
- en: 'Similarly, it is easy to perform the nested `create` operation with a `POST`
    body to `http://www.hotelwebsite.com/accommodations/21/rooms`. The `POST` body
    is a JSON formatted object:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，可以通过`POST`请求将嵌套的`create`操作执行到`http://www.hotelwebsite.com/accommodations/21/rooms`。`POST`请求的body是一个JSON格式的对象：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Note that there is no ID needed for the room since we are creating it:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我们正在创建房间，因此不需要房间ID：
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Eloquent model casting
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 雄辩模型转换
- en: Models are returned in the JSON format as they are represented in the database.
    Often, model attributes, which are Boolean in nature, are represented by `0` and
    `1` for `true` and `false`, respectively. It may be, in this case, more convenient
    to return a real `true` and `false` to the RESTful call's return object.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 模型以JSON格式返回，就像它们在数据库中表示的那样。通常，模型属性，其性质为布尔值，分别用`0`和`1`表示`true`和`false`。在这种情况下，更方便的是返回一个真正的`true`和`false`给RESTful调用的返回对象。
- en: 'In Laravel 4, this was done using **accessors**. If the value was `$status`,
    the method would be defined as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel 4中，这是使用**访问器**完成的。如果值是`$status`，则方法将定义如下：
- en: '[PRE30]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In Laravel 5, this process is much easier, thanks to a new feature called model
    casting. To apply this technique, simply add a protected key and a value array
    called `$casts` to the model as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel 5中，由于有了一个称为模型转换的新功能，这个过程变得更加容易。要应用这种技术，只需将一个受保护的键和一个名为`$casts`的值数组添加到模型中，如下所示：
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In this example, `room_number` is a string, but we want to return an integer.
    Status is a tiny integer, but we want to return a Boolean value. Casting these
    two values in the model will modify the resultant JSON in the following manner:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`room_number`是一个字符串，但我们想返回一个整数。状态是一个小整数，但我们想返回一个布尔值。在模型中对这两个值进行转换将以以下方式修改结果JSON：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The preceding code will now change as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码现在将改变如下：
- en: '[PRE33]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Route caching
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由缓存
- en: 'Laravel 5 has a new mechanism for caching the routes as the `routes.php` file
    can easily grow very large and will quickly slow down the request process. To
    enable the caching mechanism, type the following `artisan` command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5有一个新的机制用于缓存路由，因为`routes.php`文件很容易变得非常庞大，并且会迅速减慢请求过程。要启用缓存机制，输入以下`artisan`命令：
- en: '[PRE34]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This creates another `routes.php` file in `/storage/framework/routes.php`.
    If this file exists, then it is used instead of the `routes.php` file, which is
    located in `app/Http/routes.php`. The structure of the file is as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`/storage/framework/routes.php`中创建另一个`routes.php`文件。如果该文件存在，则会使用它，而不是位于`app/Http/routes.php`中的`routes.php`文件。文件的结构如下：
- en: '[PRE35]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Notice that an interesting technique is used here. The routes are serialized,
    then base64 is encoded. Obviously, to read the routes, the reverse is used, `base64_decode()`,
    and then `unserialize()`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里使用了一个有趣的技术。路由被序列化，然后进行base64编码。显然，要读取路由，使用相反的方法，`base64_decode()`，然后`unserialize()`。
- en: 'If the `routes.php` cached file exists, then every time a change is made to
    the `routes.php` file, the route cache `artisan` command must be executed. This
    will clear the file and then recreate it. If you later decide to no longer use
    this mechanism, then the following `artisan` command can be used to eliminate
    the file:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`routes.php`缓存文件存在，则每次对`routes.php`文件进行更改时，都必须执行路由缓存`artisan`命令。这将清除文件，然后重新创建它。如果以后决定不再使用这种机制，则可以使用以下`artisan`命令来消除该文件：
- en: '[PRE36]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Laravel is useful for building several distinctly different types of applications.
    When building traditional web applications, there is often a tight integration
    between the controllers and the views. It is also useful when building an app
    that can be used on a smartphone. In this case, the frontend will be created for
    the smartphone's operating system using another programming language and/or framework.
    In this case, only the controllers and model will most likely be used. In either
    case, however, having a well-documented RESTful API is an essential part of a
    well-designed modern software.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel对于构建几种完全不同类型的应用程序非常有用。在构建传统的Web应用程序时，控制器和视图之间通常有着紧密的集成。当构建可以在智能手机上使用的应用程序时，它也非常有用。在这种情况下，前端将使用另一种编程语言和/或框架为智能手机的操作系统创建。在这种情况下，可能只会使用控制器和模型。无论哪种情况，拥有一个良好文档化的RESTful
    API是现代软件设计的重要组成部分。
- en: Nested controllers helps developers right away to read the code—it is an easy
    way to understand that the particular controller deals with the "nesting" or the
    concept that one class is related another.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套控制器帮助开发人员立即阅读代码——这是一种理解特定控制器处理“嵌套”或一个类与另一个相关联的概念的简单方法。
- en: Type-hinting the models and objects into the controller also improves the readability
    and, at the same time, reduces the amount of code necessary to perform the basic
    operations on the objects.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中对模型和对象进行类型提示也提高了可读性，同时减少了执行对象的基本操作所需的代码量。
- en: Also, eloquent model casting creates an easy way to transform the attributes
    of a model, without having to rely on external packages or tedious accessor functions,
    as was the case in Laravel 4.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，雄辩的模型转换为模型的属性提供了一种简单的方式，无需依赖外部包或繁琐的访问器函数，就像在Laravel 4中那样。
- en: Now it is rather clear to us why Laravel is becoming the choice of many developers.
    Learning and repeating some of the steps illustrated in this chapter will allow
    a RESTful API to get created in under an hour for a small-to-medium size program.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们很清楚为什么Laravel正在成为许多开发人员的选择。学习并重复本章中所述的一些步骤将允许在一个小时内为一个中小型程序创建一个RESTful API。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: A RESTful API provides an easy way to expand the program in the future and also
    integrates with third-party programs and software that exist within a company
    that might need to communicate with the application. The RESTful API is the front-most
    shell of the inner part of the program and provides the bridge between the outside
    world and the application itself. The inner part of the program will be where
    all of the business logic and database connections will reside, so fundamentally,
    the controllers simply have the job of connecting the routes to the application.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API为将来扩展程序提供了一种简单的方式，也与公司内部可能需要与应用程序通信的第三方程序和软件集成。RESTful API是程序内部的最前端外壳，并提供了外部世界与应用程序本身之间的桥梁。程序的内部部分将是所有业务逻辑和数据库连接所在的地方，因此从根本上说，控制器只是连接路由和应用程序的工作。
- en: Laravel follows the RESTful best practices, thus documenting the API should
    be easy enough for other developers and third-party integrators to understand.
    Laravel 5 has brought a few features in to the framework to enable the code to
    be more readable.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel遵循RESTful最佳实践，因此文档化API对其他开发人员和第三方集成商来说应该足够容易理解。Laravel 5为框架引入了一些功能，使代码更易读。
- en: In future chapters, middleware will be discussed. Middleware adds various "middle"
    layers between the route and the controller. Middleware can provide features such
    as authentication. Middleware will enrich, protect, and help organize the routes
    into logical and functional groups.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的章节中，将讨论中间件。中间件在路由和控制器之间添加了各种“中间”层。中间件可以提供诸如身份验证之类的功能。中间件将丰富、保护并帮助将路由组织成逻辑和功能组。
- en: We will also discuss DocBlock annotations. Annotations, while not natively supported
    in PHP, can be enabled via a Laravel community package. Then, inside the DocBlock
    of the controller and controller functions, the routing for each controller is
    automatically created, without having to actually modify the `app/Http/routes.php`
    file. This is another great community concept that Laravel easily adapts to, in
    the same manner as phpspec and Behat.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论DocBlock注释。虽然PHP本身不支持注释，但可以通过Laravel社区包启用。然后，在控制器和控制器函数的DocBlock中，每个控制器的路由将自动创建，而无需实际修改`app/Http/routes.php`文件。这是Laravel轻松适应的另一个伟大的社区概念，就像phpspec和Behat一样。
