- en: Chapter 3. Error Handling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。错误处理
- en: Now that we have built our first application that uses PDO, we will take a closer
    look at an important aspect of user-friendly web applications—error handling.
    Not only does it inform the user about an error condition, it also limits the
    damage if an error is not detected when it occurred.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了使用PDO的第一个应用程序，我们将更仔细地研究用户友好的Web应用程序的一个重要方面——错误处理。它不仅通知用户有错误发生，而且在错误发生时没有被检测到时，它还限制了损害。
- en: 'Most web applications have rather simple error handling strategy. When an error
    occurs, the script terminates and an error page is presented. The error should
    be logged in the error log, and the developers or maintainers should check the
    logs periodically. The most common sources of errors in database-driven web applications
    are the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Web应用程序都有相当简单的错误处理策略。当发生错误时，脚本终止并显示错误页面。错误应该记录在错误日志中，开发人员或维护人员应该定期检查日志。数据库驱动的Web应用程序中最常见的错误来源如下：
- en: Server software failure or overload such as the famous "too many connections"
    error
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器软件故障或过载，比如著名的“连接过多”错误
- en: Inappropriate configuration of the application, which may happen when we use
    an incorrect connection string, a rather common mistake when an application is
    moved from one host to another
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序配置不当，当我们使用不正确的连接字符串时可能会发生，这在将应用程序从一个主机移动到另一个主机时是一个相当常见的错误
- en: Improper validation of user input, which may lead to malformed SQL and subsequent
    failure of the query
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户输入验证不当，可能导致SQL格式不正确，从而导致查询失败
- en: Inserting a record with a duplicate primary key or unique index value, which
    either results from an error in the business logic of the application or may occur
    in a controlled situation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入具有重复主键或唯一索引值的记录，这可能是应用程序业务逻辑错误导致的，也可能发生在受控情况下
- en: Syntax errors in SQL statements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL语句中的语法错误
- en: In this chapter, we will extend our application so that we can edit existing
    records as well as add new records. As we will deal with user input supplied via
    web forms, we have to take care of its validation. Also, we may add error handling
    so that we can react to non-standard situations and present the user with a friendly
    message.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将扩展我们的应用程序，以便我们可以编辑现有记录以及添加新记录。由于我们将处理通过Web表单提供的用户输入，我们必须对其进行验证。此外，我们可能会添加错误处理，以便我们可以对非标准情况做出反应，并向用户呈现友好的消息。
- en: Before we proceed, let's briefly examine the sources of errors mentioned above
    and see what error handling strategy should be applied in each case. Our error
    handling strategy will use exceptions, so you should be familiar with them. If
    you are not, you can refer to Appendix A, which will introduce you to the new
    object-oriented features of PHP5.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们简要地检查上面提到的错误来源，并看看在每种情况下应该应用什么错误处理策略。我们的错误处理策略将使用异常，所以你应该熟悉它们。如果你不熟悉，你可以参考附录A，它将向你介绍PHP5的新面向对象特性。
- en: We have consciously chosen to use exceptions, even though PDO can be instructed
    not to use them, because there is one situation where they cannot be avoided.
    The PDO constructors always throw an exception when the database object cannot
    be created, so we may as well use exceptions as our main error‑trapping method
    throughout the code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有意选择使用异常，即使PDO可以被指示不使用它们，因为有一种情况是它们无法避免的。当数据库对象无法创建时，PDO构造函数总是抛出异常，所以我们可能会将异常作为我们在整个代码中的主要错误捕获方法。
- en: Sources of Errors
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误来源
- en: To create an error handling strategy, we should first analyze where errors can
    happen. Errors can happen on every call to the database, and although this is
    rather unlikely, we will look at this scenario. But before doing so, let's check
    each of the possible error sources and define a strategy for dealing with them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个错误处理策略，我们首先应该分析错误可能发生的地方。错误可能发生在对数据库的每次调用上，尽管这可能不太可能，我们将研究这种情况。但在这样做之前，让我们检查每个可能的错误来源，并为处理它们定义一个策略。
- en: Server Software Failure or Overload
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器软件故障或过载
- en: This can happen on a really busy server, which cannot handle any more incoming
    connections. For example, there may be a lengthy update running in the background.
    The outcome is that we are unable to get any data from the database, so we should
    do the following.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能发生在一个非常繁忙的服务器上，无法处理更多的传入连接。例如，后台可能正在运行一个漫长的更新。结果是我们无法从数据库中获取任何数据，所以我们应该做以下事情。
- en: If the PDO constructor fails, we present a page displaying a message, which
    says that the user's request could not be fulfilled at this time and that they
    should try again later. Of course, we should also log this error because it may
    require immediate attention. (A good idea would be emailing the database administrator
    about the error.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果PDO构造函数失败，我们会显示一个页面，上面显示一条消息，说明用户的请求目前无法满足，他们应该稍后再试。当然，我们也应该记录这个错误，因为它可能需要立即处理。（一个好主意是通过电子邮件通知数据库管理员有关这个错误。）
- en: The problem with this error is that, while it usually manifests itself before
    a connection is established with the database (in a call to PDO constructor),
    there is a small risk that it can happen after the connection has been established
    (on a call to a method of the `PDO` or `PDOStatement` object when the database
    server is being shutdown). In this case, our reaction will be the same—present
    the user with an error message asking them to try again later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误的问题在于，虽然它通常在与数据库建立连接之前就显现出来（在调用PDO构造函数时），但有一点风险，它可能在连接建立之后发生（在调用`PDO`或`PDOStatement`对象的方法时，数据库服务器正在关闭）。在这种情况下，我们的反应将是一样的——向用户呈现一个错误消息，要求他们稍后再试。
- en: Improper Configuration of the Application
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序配置不当
- en: This error can only occur when we move the application across servers where
    database access details differ; this may be when we are uploading from a development
    server to production server, where database setups differ. This is not an error
    that can happen during normal execution of the application, but care should be
    taken while uploading as this may interrupt the site's operation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误只会在我们将应用程序从数据库访问细节不同的服务器上移动时发生；这可能是当我们从开发服务器上传到生产服务器时，数据库设置不同。这不是在应用程序正常执行期间可能发生的错误，但在上传时应该注意，因为这可能会中断网站的运行。
- en: 'If this error occurs, we can display another error message like: "This site
    is under maintenance". In this scenario, the site maintainer should react immediately,
    as without correcting, the connection string the application cannot normally operate.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生此错误，我们可以显示另一个错误消息，如：“该网站正在维护中”。在这种情况下，网站维护者应立即做出反应，因为如果不纠正连接字符串，应用程序就无法正常运行。
- en: Improper Validation of User Input
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户输入验证不正确
- en: 'This is an error which is closely related to SQL injection vulnerability. Every
    developer of database-driven applications must undertake proper measures to validate
    and filter all user inputs. This error may lead to two major consequences: Either
    the query will fail due to malformed SQL (so that nothing particularly bad happens),
    or an SQL injection may occur and application security may be compromised. While
    their consequences differ, both these problems can be prevented in the same way.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与SQL注入漏洞密切相关的错误。每个数据库驱动应用程序的开发人员都必须采取适当的措施来验证和过滤所有用户输入。这个错误可能导致两个主要后果：要么查询由于SQL格式不正确而失败（因此不会发生特别糟糕的事情），要么可能发生SQL注入并且应用程序安全可能会受到损害。虽然后果不同，但这两个问题可以以相同的方式防止。
- en: 'Let''s consider the following scenario. We accept some numeric value from a
    form and insert it into the database. To keep our example simple, assume that
    we want to update a book''s year of publication. To achieve this, we can create
    a form that has two fields: A hidden field containing the book''s ID, and a text
    field to enter the year. We will skip implementation details here, and see how
    using a poorly designed script to process this form could lead to errors and put
    the whole system at risk.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下情景。我们从表单中接受一些数值，并将其插入数据库。为了使我们的例子简单，假设我们想要更新一本书的出版年份。为了实现这一点，我们可以创建一个包含书的ID的隐藏字段和一个输入年份的文本字段的表单。我们将在这里跳过实现细节，并看看使用一个设计不良的脚本来处理这个表单可能会导致错误并将整个系统置于风险之中。
- en: 'The form processing script will examine two request variables: `$_REQUEST[''book'']`,
    which holds the book''s ID and `$_REQUEST[''year'']`, which holds the year of
    publication. If there is no validation of these values, the final code will look
    similar to this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 表单处理脚本将检查两个请求变量：`$_REQUEST['book']`，其中包含书的ID和`$_REQUEST['year']`，其中包含出版年份。如果没有对这些值进行验证，最终的代码将类似于这样：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s see what happens if the user leaves the `book` field empty. The final
    SQL would then look like:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果用户将`book`字段留空会发生什么。最终的SQL将如下所示：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This SQL is malformed and will lead to a syntax error. Therefore, we should
    ensure that both variables are holding numeric values. If they don't, we should
    redisplay the form with an error message.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个SQL是格式不正确的，会导致语法错误。因此，我们应该确保这两个变量都包含数值。如果它们不包含数值，我们应该重新显示表单并显示错误消息。
- en: 'Now, let''s see how an attacker might exploit this to delete the contents of
    the entire table. To achieve this, they could just enter the following into the
    `year` field:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看攻击者如何利用这一点来删除整个表的内容。为了实现这一点，他们可以在`year`字段中输入以下内容：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This turns a single query into three queries:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这将一个查询变成了三个查询：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Of course, the third query is malformed, but the first and second will execute,
    and the database server will report an error. To counter this problem, we could
    use simple validation to ensure that the `year` field contains four digits. However,
    if we have text fields, which can contain arbitrary characters, the field's values
    must be escaped prior to creating the SQL.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，第三个查询是格式不正确的，但第一个和第二个将执行，并且数据库服务器将报告一个错误。为了解决这个问题，我们可以使用简单的验证来确保`year`字段包含四位数字。然而，如果我们有可能包含任意字符的文本字段，字段的值在创建SQL之前必须进行转义。
- en: Inserting a Record with a Duplicate Primary Key or Unique Index Value
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入具有重复主键或唯一索引值的记录
- en: This problem may happen when the application is inserting a record with duplicate
    values for the primary key or a unique index. For example, in our database of
    authors and books, we might want to prevent the user from entering the same book
    twice by mistake. To do this, we can create a unique index of the ISBN column
    of the `books` table. As every book has a unique ISBN, any attempt to insert the
    same ISBN will generate an error. We can trap this error and react accordingly,
    by displaying an error message asking the user to correct the ISBN or cancel its
    addition.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序插入具有主键或唯一索引的重复值的记录时，可能会出现这个问题。例如，在我们的作者和书籍数据库中，我们可能希望防止用户因错误而两次输入相同的书。为此，我们可以在`books`表的ISBN列上创建一个唯一索引。由于每本书都有一个唯一的ISBN，任何尝试插入相同的ISBN都会生成一个错误。我们可以捕获这个错误，并通过显示一个错误消息要求用户纠正ISBN或取消其添加来做出相应反应。
- en: Syntax Errors in SQL Statements
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL语句中的语法错误
- en: This error may occur if we haven't properly tested the application. A good application
    must not contain these errors, and it is the responsibility of the development
    team to test every possible situation and check that every SQL statement performs
    without syntax errors.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有正确测试应用程序，可能会发生此错误。一个好的应用程序不应包含这些错误，开发团队有责任测试每种可能的情况，并检查每个SQL语句是否执行时没有语法错误。
- en: If this type of an error occurs, then we trap it with exceptions and display
    a fatal error message. The developers must correct the situation at once.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生这种错误，我们会使用异常来捕获它，并显示一个致命错误消息。开发人员必须立即纠正这种情况。
- en: Now that we have learned a bit about possible sources of errors, let's examine
    how PDO handles errors.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了可能的错误来源，让我们来看看PDO如何处理错误。
- en: Types of Error Handling in PDO
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PDO中的错误处理类型
- en: By default, PDO uses the **silent error handling mode**. This means that any
    error that arises when calling methods of the `PDO` or `PDOStatement` classes
    go unreported. With this mode, one would have to call `PDO::errorInfo(), PDO::errorCode(),
    PDOStatement::errorInfo()`, or `PDOStatement::errorCode()`, every time an error
    occurred to see if it really did occur. Note that this mode is similar to traditional
    database access—usually, the code calls `mysql_errno()` and `mysql_error()` (or
    equivalent functions for other database systems) after calling functions that
    could cause an error, after connecting to a database and after issuing a query.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PDO使用**静默错误处理模式**。这意味着调用`PDO`或`PDOStatement`类的方法时发生的任何错误都不会被报告。在这种模式下，每次发生错误时，都必须调用`PDO::errorInfo()`、`PDO::errorCode()`、`PDOStatement::errorInfo()`或`PDOStatement::errorCode()`来查看是否真的发生了错误。请注意，这种模式类似于传统的数据库访问——通常，在调用可能引起错误的函数之后，代码会调用`mysql_errno()`和`mysql_error()`（或其他数据库系统的等效函数），在连接到数据库之后和发出查询之后。
- en: Another mode is the **warning mode**. Here, `PDO` will act identical to the
    traditional database access. Any error that happens during communication with
    the database would raise an `E_WARNING` error. Depending on the configuration,
    an error message could be displayed or logged into a file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种模式是**警告模式**。在这里，`PDO`将与传统的数据库访问行为相同。与数据库通信期间发生的任何错误都会引发一个`E_WARNING`错误。根据配置，可能会显示错误消息或将其记录到文件中。
- en: Finally, PDO introduces a modern way of handling database connection errors—by
    using **exceptions**. Every failed call to any of the `PDO` or `PDOStatement`
    methods will throw an exception.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，PDO引入了一种处理数据库连接错误的现代方式——使用**异常**。对`PDO`或`PDOStatement`方法的任何失败调用都会引发异常。
- en: 'As we have previously noted, PDO uses the silent mode, by default. To switch
    to a desired error handling mode, we have to specify it by calling `PDO::setAttribute()`
    method. Each of the error handling modes is specified by the following constants,
    which are defined in the PDO class:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前注意到的，PDO默认使用静默模式。要切换到所需的错误处理模式，我们必须通过调用`PDO::setAttribute()`方法来指定它。每个错误处理模式由PDO类中定义的以下常量指定：
- en: '`PDO::ERRMODE_SILENT` - the *silent* strategy.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ERRMODE_SILENT` - *静默*策略。'
- en: '`PDO::ERRMODE_WARNING` - the *warning* strategy.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ERRMODE_WARNING` - *警告*策略。'
- en: '`PDO::ERRMODE_EXCEPTION` - use *exceptions.*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PDO::ERRMODE_EXCEPTION` - 使用*异常*。'
- en: 'To set the desired error handling mode, we have to set the `PDO::ATTR_ERRMODE`
    attribute in the following way:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置所需的错误处理模式，我们必须以以下方式设置`PDO::ATTR_ERRMODE`属性：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To see how PDO throws an exception, edit the `common.inc.php` file by adding
    the above statement after the line #46\. If you want to test what will happen
    when PDO throws an exception, change the connection string to specify a nonexistent
    database. Now point your browser to the books listing page.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看PDO如何抛出异常，请在`common.inc.php`文件中编辑，在第46行后添加上述语句。如果您想测试当PDO抛出异常时会发生什么，请更改连接字符串以指定不存在的数据库。现在将浏览器指向图书列表页面。
- en: 'You should see an output similar to:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似于以下的输出：
- en: '![Types of Error Handling in PDO](graphics/2660_03_01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![PDO中的错误处理类型](graphics/2660_03_01.jpg)'
- en: 'This is PHP''s default reaction to uncaught exceptions—they are regarded as
    fatal errors and program execution stops. The error message reveals the class
    of the exception, `PDOException`, the error description, and some debug information,
    including name and line number of the statement that threw the exception. Note
    that if you want to test SQLite, specifying a non-existent database may not work
    as the database will get created if it does not exist already. To see that it
    does work for SQLite, change the `$connStr` variable on line 10 so that there
    is an illegal character in the database name:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PHP对未捕获异常的默认反应——它们被视为致命错误，程序执行停止。错误消息显示了异常的类`PDOException`、错误描述和一些调试信息，包括抛出异常的语句的名称和行号。请注意，如果要测试SQLite，指定不存在的数据库可能不起作用，因为如果数据库不存在，它将被创建。要查看它是否适用于SQLite，请更改第10行的`$connStr`变量，以便数据库名称中有一个非法字符：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Refresh your browser and you should see something like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新您的浏览器，您应该看到类似于这样的内容：
- en: '![Types of Error Handling in PDO](graphics/2660_03_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![PDO中的错误处理类型](graphics/2660_03_02.jpg)'
- en: As you can see, a message similar to the previous example is displayed, specifying
    the cause and the location of the error in the source code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，显示了类似于上一个示例的消息，指定了错误的原因和源代码中的位置。
- en: Defining an Error Handling Function
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义错误处理函数
- en: If we know that a certain statement or block of code can throw an exception,
    we should wrap that code within the *try…catch* block to prevent the default error
    message being displayed and present a user-friendly error page. But before we
    proceed, let's create a function that will render an error message and exit the
    application. As we will be calling it from different script files, the best place
    for this function is, of course, the `common.inc.php` file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道某个语句或代码块可能会抛出异常，我们应该将该代码包装在*try...catch*块中，以防止显示默认错误消息并呈现用户友好的错误页面。但在我们继续之前，让我们创建一个函数，用于呈现错误消息并退出应用程序。由于我们将从不同的脚本文件中调用它，所以最好的地方就是`common.inc.php`文件。
- en: 'Our function, called `showError()`, will do the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的函数，名为`showError()`，将执行以下操作：
- en: Render a heading saying "Error".
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 呈现一个标题，写着“错误”。
- en: Render the error message. We will escape the text with the `htmlspecialchars()`
    function and process it with the `nl2br()` function so that we can display multi-line
    messages. (This function will convert all line break characters to`<br>` tags.)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 呈现错误消息。我们将使用`htmlspecialchars()`函数转义文本，并使用`nl2br()`函数处理它，以便我们可以显示多行消息。（此函数将所有换行字符转换为`<br>`标签。）
- en: Call the `showFooter()` function to close the opening`<html>` and`<body>` tags.
    The function will assume that the application has already called the `showHeader()`
    function. (Otherwise, we will end up with broken HTML.)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`showFooter()`函数来关闭打开的`<html>`和`<body>`标签。该函数将假定应用程序已经调用了`showHeader()`函数。（否则，我们将得到破损的HTML。）
- en: 'We will also have to modify the block that creates the connection object in
    `common.inc.php` to catch the possible exception. With all these changes, the
    new version of `common.inc.php` will look like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须修改在`common.inc.php`中创建连接对象的块，以捕获可能的异常。通过所有这些更改，`common.inc.php`的新版本将如下所示：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, the newly created function is pretty straightforward. The more
    interesting part is the *try…catch* block that we use to trap the exception. Now
    with these modifications we can test how a real exception will get processed.
    To do that, make sure your connection string is wrong (so that it specifies wrong
    database name for MySQL or contains invalid file name for SQLite). Point your
    browser to `books.php` and you should see the following window:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，新创建的函数非常简单。更有趣的部分是我们用来捕获异常的*try…catch*块。现在通过这些修改，我们可以测试真正的异常将如何被处理。为此，请确保您的连接字符串是错误的（这样它就为MySQL指定了错误的数据库名称，或者包含了SQLite的无效文件名）。将浏览器指向`books.php`，您应该会看到以下窗口：
- en: '![Defining an Error Handling Function](graphics/2660_03_03.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![定义错误处理函数](graphics/2660_03_03.jpg)'
- en: Creating the Edit Book Page
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建编辑书籍页面
- en: As we have discussed earlier, we want to extend our application so that we can
    add and edit books and authors. Also, our system should be able to protect us
    from entering the same book twice—by enforcing the unique index on the `ISBN`
    column in the books table.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，我们希望扩展我们的应用程序，以便我们可以添加和编辑书籍和作者。此外，我们的系统应该能够通过在书籍表的`ISBN`列上强制执行唯一索引来防止我们输入相同的书籍两次。
- en: 'Before we proceed with the code, we will create the index. Fire up your command
    line client and enter the following command (which is the same for MySQL and SQLite):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续进行代码之前，我们将创建索引。启动您的命令行客户端，并输入以下命令（对于MySQL和SQLite是相同的）：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will also make our edit book page serve two purposes at once—adding a new
    book and editing an existing one. The script will distinguish which action to
    take by the presence of the book ID, either in an URL or in a hidden form field.
    We will link to this new page from within `books.php`, so that we will be able
    to edit every book just by clicking on a link on the books listing page.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使我们的编辑书籍页面同时具有两个目的——添加新书和编辑现有书籍。脚本将通过书籍ID的存在来区分要采取的操作，无论是在URL中还是在隐藏的表单字段中。我们将从`books.php`中链接到这个新页面，这样我们就可以通过在书籍列表页面上点击链接来编辑每一本书。
- en: This page is more complicated than those described in the previous chapter,
    so I will provide you with the code first and then discuss it. Let's call this
    page edit `Book.php:`
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面比上一章描述的页面更复杂，所以我会先给你代码，然后再讨论它。让我们称这个页面为edit `Book.php:`
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The code is rather self-documenting, but let's briefly go through its main parts.
    Lines 12 to 23 deal with fetching the book details would be edited if the page
    was requested with the book ID. These details are stored in the `$book` variable.
    Note how we explicitly cast the request parameter `book` to `integer` so that
    no SQL injection can occur (line 13). If no book ID is provided, we set it to
    an empty array. Note how we call the `closeCursor()` function and then assign
    the `$q` variable to null. This is necessary as we are going to reuse the connection
    object.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 代码相当自我解释，但让我们简要地浏览一下它的主要部分。12到23行处理如果页面使用书籍ID请求，则会获取要编辑的书籍详情。这些细节存储在`$book`变量中。请注意，我们明确将请求参数`book`转换为`整数`，以便不会发生SQL注入（第13行）。如果没有提供书籍ID，则将其设置为空数组。请注意我们如何调用`closeCursor()`函数，然后将`$q`变量赋值为null。这是必要的，因为我们将重用连接对象。
- en: Lines 26 to 33 prepare the list of authors. As our system allows exactly one
    author per book, we will create a select box field listing all the authors.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 26到33行准备作者列表。由于我们的系统每本书只允许一个作者，我们将创建一个选择框字段列出所有作者。
- en: Line 35 checks whether there was a submission of the form. If the test is successful,
    the script validates every field (lines 37 to 68). Every failed validation is
    appended to a list of warnings. (The `$warnings` variable is initialized with
    an empty array.) We will use this list to see whether validations were successful
    and to store error messages if they weren't.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 35行检查是否提交了表单。如果测试成功，脚本将验证每个字段（37到68行）。每个失败的验证都会附加到警告列表中。（`$warnings`变量初始化为空数组。）我们将使用此列表来查看验证是否成功，并在验证失败时存储错误消息。
- en: Lines 69 to 94 build the actual SQL for update. The final SQL depends on whether
    we are updating a book (when the `$book` array will contain the **id** key), or
    adding a new one. Note how we quote every column value prior to query execution.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 69到94行构建实际的更新SQL。最终的SQL取决于我们是在更新书籍（当`$book`数组包含**id**键时），还是添加新书。请注意，在查询执行之前如何引用每个列值。
- en: Lines 95 to 112 try to execute the query. It may fail if the user has entered
    a duplicate ISBN so we wrap the code in a `try…catch` block. If an exception does
    get thrown, the `catch` block will append the corresponding warning to the `$warnings`
    array. If everything works without an error, the script redirects to the books
    listing page where you should see the changes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 95到112行尝试执行查询。如果用户输入了重复的ISBN，查询可能会失败，因此我们将代码包装在`try…catch`块中。如果确实抛出了异常，`catch`块将向`$warnings`数组附加相应的警告。如果一切正常且没有错误，脚本将重定向到书籍列表页面，您应该能看到更改。
- en: Lines 113 to 118 get executed if there was no submission of the form. Here the
    `$_POST` array gets populated with the contents of the `$books` variable. We do
    this because we will use the `$_POST` array to display form fields' values later
    in the code.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 113到118行在表单没有提交时执行。在这里，`$_POST`数组被`$books`变量的内容填充。我们这样做是因为我们将使用`$_POST`数组在代码后面显示表单字段的值。
- en: Note how we display error messages (if any) on lines 122 to 129 and the select
    box on lines 141 to 154\. (We are looking through all authors and if the author's
    ID matches this book author's ID then that author is marked as the selected option.)
    Also, the other form fields are rendered using the `htmlspecialchars()` function
    applied to the items of the `$_POST` array. Lines 189 to 191 will add a hidden
    field to the form that contains the ID of the currently edited book (if any).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们如何在122到129行显示错误消息（如果有的话），以及在141到154行显示选择框。 （我们正在浏览所有作者，如果作者的ID与此书作者的ID匹配，则将该作者标记为选定的选项。）此外，其他表单字段是使用`htmlspecialchars（）`函数应用于`$_POST`数组的项目来呈现的。
    189到191行将向表单添加一个包含当前编辑的书籍的ID的隐藏字段（如果有的话）。
- en: Modern web applications employ client-side validation in addition to server-side
    validation of user-supplied data. Though this is not in the scope of this book,
    you might consider browser-based validation in your projects to increase responsiveness
    and potentially decrease load of your web server.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web应用程序除了对用户提供的数据进行服务器端验证外，还采用了客户端验证。虽然这不在本书的范围内，但您可能会考虑在项目中使用基于浏览器的验证，以增加响应性并可能减少Web服务器的负载。
- en: 'Now, we should link to the newly created page from the `books.php` page. We
    will provide an *Edit this book* link for every listed book as well as an *Add
    book* link under the table. I will not reproduce the whole `books.php` source
    here, just the lines that should be changed. So, lines 32 to 48 should be replaced
    with the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该从`books.php`页面链接到新创建的页面。我们将为每个列出的书籍提供一个*编辑此书*链接，以及在表格下方提供一个*添加书籍*链接。我不会在这里重复整个`books.php`源代码，只是应该更改的行。因此，应该将32到48行替换为以下内容：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following should be added just before the call to the `showFooter()` function
    so that the four lines look like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 应该在调用`showFooter（）`函数之前添加以下内容，以便这四行看起来像这样：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, if you again navigate to the `books.php` page you should see the following
    window:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您再次导航到`books.php`页面，您应该看到以下窗口：
- en: '![Creating the Edit Book Page](graphics/2660_03_04.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![创建编辑书籍页面](graphics/2660_03_04.jpg)'
- en: 'To see how our edit book page looks, click on any **Edit** link in the last
    column of the table. You should see the following form:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我们的编辑书籍页面的外观，请单击表格最后一列中的任何**编辑**链接。您应该看到以下表单：
- en: '![Creating the Edit Book Page](graphics/2660_03_05.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![创建编辑书籍页面](graphics/2660_03_05.jpg)'
- en: Let's see how our form works. It is validating every form field that gets sent
    to the database. If there is any validation error, the form will not update the
    database and prompt the user to correct his submission. For example, try changing
    the author select box to the default option (labeled *Please select…)* and editing
    the ISBN to be 5 digits long.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的表单是如何工作的。它正在验证发送到数据库的每个表单字段。如果有任何验证错误，表单将不会更新数据库，并提示用户更正提交。例如，尝试将作者选择框更改为默认选项（标有*请选择...*），并将ISBN编辑为5位数。
- en: 'If you click the **Save** button, you should see that the form displays following
    error messages:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击**保存**按钮，您应该看到表单显示以下错误消息：
- en: '![Creating the Edit Book Page](graphics/2660_03_06.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![创建编辑书籍页面](graphics/2660_03_06.jpg)'
- en: Now correct the errors and try to change the ISBN to 1904811027\. This ISBN
    is already used in our database by another book, so the form will again display
    an error. You can further test the form by adding a book. You might also want
    to test how it works with SQLite.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在纠正错误，并尝试将ISBN更改为1904811027。这个ISBN已经在我们的数据库中被另一本书使用，所以表单将再次显示错误。您还可以通过添加一本书来进一步测试表单。您可能还想测试它在SQLite中的工作方式。
- en: Creating the Edit Author Page
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建编辑作者页面
- en: Our application still lacks the add/edit author functionality. This page will
    be somewhat simpler than the edit book page because it will not have the select
    box for authors and no unique index. (You may want to create a unique index on
    the author's first and last name columns to prevent duplicates there too, but
    we will leave this up to you.)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序仍然缺少添加/编辑作者功能。这个页面将比编辑书籍页面简单一些，因为它不会有作者的选择框和唯一索引。（您可能希望在作者的名字和姓氏列上创建唯一索引，以防止那里也出现重复，但我们将把这个问题留给您。）
- en: 'Let''s call this page `editAuthor.php`. Here is its source code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称这个页面为`editAuthor.php`。以下是它的源代码：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This source is built in the same way as the `editBook.php` page so you should
    be able to follow it easily.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此源代码与`editBook.php`页面以相同的方式构建，因此您应该能够轻松地跟随它。
- en: 'We will link to the `editAuthors.php` page in the same way as we linked to
    the `editBook.php` page from the `books.php` page. Edit the `authors.php` file
    and change lines 30-41 to the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以与我们从`books.php`页面链接到`editBook.php`页面相同的方式链接到`editAuthors.php`页面。编辑`authors.php`文件，并将30-41行更改为以下内容：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following line just before the last PHP block:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个PHP块之前添加以下行：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, if you refresh the `authors.php` page you will see the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您刷新`authors.php`页面，您将看到以下内容：
- en: '![Creating the Edit Author Page](graphics/2660_03_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![创建编辑作者页面](graphics/2660_03_07.jpg)'
- en: You can click the **Edit** links in the rightmost column to edit every author's
    details. You can try submitting the form with empty values to see that invalid
    submissions will be rejected. Also, you can try and add a new author to the system.
    After you successfully do this, you may want to go back to books listing and edit
    some book. You will see that newly created author is available in the **authors**
    select box.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以单击右侧列中的**编辑**链接来编辑每位作者的详细信息。您可以尝试使用空值提交表单，以查看无效提交将被拒绝。此外，您可以尝试向系统添加新作者。成功完成后，您可能希望返回到书籍列表并编辑一些书籍。您将看到新创建的作者可用于**作者**选择框。
- en: Securing against Uncaught Exceptions
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止未捕获异常
- en: 'As we have seen previously, we place the *try...catch* blocks around code that
    can throw exceptions. However, in very rare cases, there might be some unexpected
    exceptions. We can imitate such an exception by modifying one of the queries so
    that it contains some malformed SQL. For example, let''s edit `authors.php`, line
    16 to the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，我们在可能引发异常的代码周围放置了*try...catch*块。然而，在非常罕见的情况下，可能会出现一些意外的异常。我们可以通过修改其中一个查询来模拟这样的异常，使其包含一些格式不正确的SQL。例如，让我们编辑`authors.php`，将第16行修改为以下内容：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now try to navigate to `authors.php` with your browser to see that an uncaught
    exception has occurred. To correctly handle this situation, we either should create
    an exception handler or wrap every block of code that calls `PDO` or `PDOStatement`
    class methods in a *try…catch* block.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试使用浏览器导航到`authors.php`，看看是否发生了未捕获的异常。为了正确处理这种情况，我们要么创建一个异常处理程序，要么将调用`PDO`或`PDOStatement`类方法的每个代码块包装在*try...catch*块中。
- en: Let's see how we can create the exception handler. This is an easier approach
    as it does not require changing lots of code. However, for big applications this
    may be bad practice as handling exceptions, where they occur may be more secure
    and better recovery logic can be applied.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建异常处理程序。这是一种更简单的方法，因为它不需要改变大量的代码。然而，对于大型应用程序来说，这可能是一个不好的做法，因为在发生异常的地方处理异常可能更安全，并且可以应用更好的恢复逻辑。
- en: 'However, with our simple application we can use the global exception handler.
    It will just use the `showError()` function to say that the site is under maintenance:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于我们简单的应用程序，我们可以使用全局异常处理程序。它将只是使用`showError()`函数来表示网站正在维护中。
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Place this into `common.inc.php`, just before the connection creation code block.
    If you refresh the `authors.php` page now, you will see that the handler gets
    called.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段代码放入`common.inc.php`中，就在连接创建代码块之前。如果现在刷新`authors.php`页面，你会看到处理程序被调用了。
- en: It is always a good idea to have the default exception handler. As you have
    noticed, unhandled exceptions expose too much sensitive information including
    database connection details. Also, in real world applications the error pages
    should not display any information about the type of the error. (Note that our
    example application does.) The default handler should write to the error log and
    alert site maintainers about the error.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有默认的异常处理程序总是一个好主意。正如你已经注意到的，未处理的异常会暴露太多敏感信息，包括数据库连接详细信息。此外，在真实世界的应用程序中，错误页面不应显示有关错误类型的任何信息。（请注意，我们的示例应用程序是这样的。）默认处理程序应该写入错误日志，并通知网站维护人员有关错误的信息。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we examined how `PDO` handles errors and introduced exceptions.
    Also, we investigated the sources of errors and saw how to counter them.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了`PDO`如何处理错误，并介绍了异常。此外，我们调查了错误的来源，并看到了如何对抗它们。
- en: Our sample application was extended with some real-world administration functionality
    that uses data validation and is secured against SQL injection attacks. Of course,
    they should also allow database modifications only to certain users based on login
    names and passwords. However, this is beyond the scope of this book.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例应用程序已经扩展了一些真实世界的管理功能，使用了数据验证，并且受到了SQL注入攻击的保护。当然，他们还应该只允许基于登录名和密码的特定用户对数据库进行修改。然而，这超出了本书的范围。
- en: In the next chapter, we will look at another very important aspect of PDO and
    database programming in general—using prepared statements. We will see how our
    administration pages can be simplified with their help, leading to less code and
    better maintenance.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到PDO和数据库编程中另一个非常重要的方面——使用预处理语句。我们将看到如何借助它们来简化我们的管理页面，从而减少代码量并提高维护性。
