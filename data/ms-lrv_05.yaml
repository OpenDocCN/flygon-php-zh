- en: Chapter 5. Using the Form Builder
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用表单生成器
- en: 'In this chapter, you will learn how to use Laravel''s form builder. The form
    builder will be demonstrated to facilitate the building of the following elements:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用Laravel的表单生成器。表单生成器将被演示以便于构建以下元素：
- en: Form (open and close)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单（打开和关闭）
- en: Label
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签
- en: Input (text, HTML5 password, HTML5 e-mail, and so on.)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入（文本，HTML5密码，HTML5电子邮件等）
- en: Checkbox
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复选框
- en: Submit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交
- en: Anchor tags (href links)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锚标签（href链接）
- en: Finally, we'll see an example of how to use the form builder to create the month,
    date, and year selection elements for the accommodations reservation software
    form, and how to create a macro to reduce the code duplication.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将看到如何使用表单生成器为住宿预订软件表单创建月份、日期和年份选择元素的示例，以及如何创建一个宏来减少代码重复。
- en: History
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 历史
- en: 'The form builder package in Laravel 4 is called HTML. This was used to help
    you create HTML, particularly developers who also have to perform web designer
    duties but prefer to use Laravel facades and helper methods. For example, the
    following Laravel facade `select()` method, where the options for the language,
    British and American English in this example, are passed as an array parameter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 4中的表单生成器包称为HTML。这是用来帮助您创建HTML的，特别是那些还必须执行Web设计师职责但更喜欢使用Laravel门面和辅助方法的开发人员。例如，以下是Laravel门面`select()`方法的示例，其中语言的选项，例如英式和美式英语，在此示例中作为数组参数传递：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This can be used as an alternative to the standard HTML, which requires much
    more repetitious code, as shown in the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以作为标准HTML的替代方案，标准HTML需要更多重复的代码，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since frameworks are constantly evolving, they need to adapt to fulfill the
    needs of most of their users. Also, whenever possible, they should continue to
    be more efficient. In some cases, this means rewriting or refactoring pieces of
    the framework, adding features, or even *removing* them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于框架不断发展，它们需要适应满足大多数用户的需求。此外，尽可能地，它们应该继续变得更加高效。在某些情况下，这意味着重写或重构框架的部分，添加功能，甚至*删除*它们。
- en: 'As strange as it may seem, there are several valid reasons for removing the
    features. The following is a list of reasons for removing packages:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可能看起来奇怪，但删除功能有几个有效的原因。以下是删除包的原因列表：
- en: To ease the burden and quantity of packages and features that framework core
    developers need to maintain.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减轻框架核心开发人员需要维护的包和功能的负担和数量。
- en: To reduce the number of packages that are downloaded and autoloaded.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少下载和自动加载的包数量。
- en: To remove a feature that is not essential.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除一个不必要的功能。
- en: The HTML package was removed from the core of Laravel 5 and is now an external
    package. In this case, any of the previous reasons could be cited for the reason
    that this package was removed.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML包已经从Laravel 5的核心中移除，现在是一个外部包。在这种情况下，任何之前的原因都可以被引用为移除这个包的原因。
- en: HTML, which helps developers build forms, can be used if the frontend developer
    is also a backend or full-stack developer and prefers Laravel's way of doing things.
    In other situations, however, the web application HTML interface can be built
    using a JavaScript framework or a library, such as AngularJS or Backbone.js. In
    this case, the Laravel form package would not be necessary. Alternatively, as
    previously stated, Laravel can be used to create an application that is merely
    a RESTful API. In this case, including the HTML package in the framework core
    would not be necessary and thus remains auxiliary.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML有助于开发人员构建表单，如果前端开发人员也是后端或全栈开发人员，并且喜欢Laravel的做事方式，可以使用。然而，在其他情况下，Web应用的HTML界面可以使用JavaScript框架或库来构建，例如AngularJS或Backbone.js。在这种情况下，Laravel表单包就不是必需的。另外，如前所述，Laravel可以用来创建一个仅仅是RESTful
    API的应用程序。在这种情况下，将HTML包包含在框架核心中就不是必要的，因此仍然是辅助的。
- en: In this particular case, certain Laravel packages were removed to lighten up
    the overall experience and to move toward a more *component-based* approach, which
    is similar to that used in Symfony.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种特殊情况下，某些Laravel包被移除以简化整体体验，并朝着更*基于组件*的方法迈进，这与Symfony中使用的方法类似。
- en: Installing the HTML package
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装HTML包
- en: 'If you desire to use the HTML package in Laravel 5, installing it is a simple
    process. A group of developers in the Laravel community formed a repository called
    the Laravel collective, where the packages that have been removed from Laravel
    are maintained. To install the HTML package, simple use the `composer` command
    to add the package to the application as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望在Laravel 5中使用HTML包，安装它是一个简单的过程。Laravel社区的一群开发人员成立了一个名为Laravel collective的存储库，用于维护已从Laravel中移除的包。要安装HTML包，只需使用`composer`命令将包添加到应用程序中，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `illuminate/HTML` package has been deprecated.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`illuminate/HTML`包已被弃用。
- en: 'This will install the HTML package and the `composer.json` will show you the
    package added to the `require` section as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装HTML包，并且`composer.json`将显示您添加到`require`部分的包如下：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At this point, the package is installed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，包已安装。
- en: 'Now, we need to add the `HTMLServiceProvider` to the list of providers in the
    `config/app.php` file:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将`HTMLServiceProvider`添加到`config/app.php`文件中的提供者列表中：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Lastly, the `Form` and `Html` aliases need to be added to the `config/app.php`
    file, as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要将`Form`和`Html`别名添加到`config/app.php`文件中，如下所示：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Building web pages with Laravel
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Laravel构建网页
- en: Laravel's approach to building web content is flexible. As much or as little
    of Laravel can be used to create HTML. Laravel uses the `filename.blade.php` convention
    to state that the file should be parsed by the blade parser, which actually converts
    the file into plain PHP. The name blade was inspired by the .NET's razor templating
    engine, so this may be familiar to someone who has used it. Laravel 5 provides
    a working demonstration of a form in the `/resources/views/` directory. This view
    is shown when the `/home` route is requested and the user is not currently logged
    in. This form is obviously not created using the Laravel form methods.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel构建Web内容的方法是灵活的。可以使用尽可能多或尽可能少的Laravel来创建HTML。Laravel使用`filename.blade.php`约定来说明文件应该由blade解析器解析，实际上将文件转换为普通的PHP。Blade的名称受到了.NET的剃刀模板引擎的启发，因此对于曾经使用过它的人来说可能会很熟悉。Laravel
    5在`/resources/views/`目录中提供了一个表单的工作演示。当请求`/home`路由并且用户当前未登录时，将显示此视图。显然，这个表单并不是使用Laravel的表单方法创建的。
- en: 'The route is defined in the `routes` file as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 路由在`routes`文件中定义如下：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: An explanation of how this route uses middleware to check how to perform the
    user authentication will be discussed in [Chapter 7](ch07.html "Chapter 7. Filtering
    Requests with Middleware"), *Filtering Requests with Middleware*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将讨论此路由如何使用中间件来检查如何执行用户身份验证，详见[第7章](ch07.html "第7章。使用中间件过滤请求")，“使用中间件过滤请求”。
- en: The master template
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主模板
- en: 'This is the following `app` (or `master`) template:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是以下的`app`（或`master`）模板：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The Laravel 5 master template is a standard HTML5 template with the following
    features:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel 5主模板是一个具有以下特点的标准HTML5模板：
- en: 'If the browser is older than Internet Explorer 9:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果浏览器旧于Internet Explorer 9：
- en: Uses the HTML5 Shim from the CDN
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用HTML5 Shim来自CDN
- en: Uses the Respond.js JavaScript code from the CDN to retrofit media queries and
    CSS3 features
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Respond.js JavaScript代码来自CDN以适应媒体查询和CSS3特性
- en: Using `@if (Auth::guest())`, if the user is not authenticated, the login form
    is displayed; otherwise, the logout option is displayed
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`@if (Auth::guest())`，如果用户未经过身份验证，则显示登录表单；否则，显示注销选项。
- en: Twitter bootstrap 3.x is included in the CDN
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter bootstrap 3.x包含在CDN中
- en: The jQuery2.x is included in the CDN
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery2.x包含在CDN中
- en: Any template that extends this template can override the content section
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何扩展此模板的模板都可以覆盖内容部分
- en: An example page
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例页面
- en: 'The following screenshot shows you the login page:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了登录页面：
- en: '![An example page](graphics/B04559_05_01.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![示例页面](graphics/B04559_05_01.jpg)'
- en: 'The source code for the login page is as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面的源代码如下：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From static HTML to static methods
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从静态HTML到静态方法
- en: 'This login page begins with the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此登录页面以以下内容开始：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It obviously uses the object-oriented paradigm to state that the `app.blade.php`
    template will be rendered. The following line overrides the content:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，它使用面向对象的范例来说明将呈现`app.blade.php`模板。以下行覆盖了内容：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For this exercise, the form builder will be used instead of the static HTML.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，将使用表单构建器而不是静态HTML。
- en: The form tag
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表单标签
- en: 'We will convert a static `form` tag to a `FormBuilder` method. The HTML is
    as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把静态的`form`标签转换为`FormBuilder`方法。HTML如下：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The method facade that we will use is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的外观方法如下：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `FormBuilder.php` class, the `$reserved` attribute is defined as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`FormBuilder.php`类中，`$reserved`属性定义如下：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The attributes that we need to pass to an array to the `open()` method are
    class, role, method, and action. Since method and action are reserved words, it
    is necessary to pass the parameters in the following manner:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要传递给`open()`方法的属性是class、role、method和action。由于method和action是保留字，因此需要以以下方式传递参数：
- en: '| Laravel form facade method array element | HTML Form tag attribute |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| Laravel表单外观方法数组元素 | HTML表单标签属性 |'
- en: '| --- | --- |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| method | method |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 方法 |'
- en: '| url | action |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| url | action |'
- en: '| role | role |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| role | role |'
- en: '| class | class |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| class | class |'
- en: 'Thus, the method call looks like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，方法调用如下：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `{!! !!}` tags are used to start and end parsing of the form builder methods.
    The form method, `POST`, is placed first in the list of attributes in the HTML
    form tag.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`{!! !!}`标签用于开始和结束表单构建器方法的解析。`form`方法`POST`首先放置在HTML表单标签的属性列表中。'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `action` attribute actually needs to be a `url`. If the `action` parameter
    is used, then it refers to the controller action. In this case, the `url` parameter
    produces the `action` attribute of the `form` tag.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`action`属性实际上需要是一个`url`。如果使用`action`参数，则它指的是控制器动作。在这种情况下，`url`参数会生成`form`标签的`action`属性。'
- en: 'Other attributes will be passed to the array and added to the list of attributes.
    The resultant HTML will be produced as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 其他属性将传递给数组并添加到属性列表中。生成的HTML将如下所示：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The CRSF token is automatically added, as the `form` method is `POST`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: CRSF令牌会自动添加，因为`form`方法是`POST`。
- en: The text input field
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本输入字段
- en: 'To convert the input fields, a facade is used. The input field''s HTML is as
    follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要转换输入字段，使用外观。输入字段的HTML如下：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Converting the preceding input field using a façade looks like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用外观转换前面的输入字段如下：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Similarly, the text field becomes:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，文本字段变为：
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The input fields have the same signature. Of course, this can be refactored
    as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 输入字段具有相同的签名。当然，这可以重构如下：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The label tag
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标签标签
- en: 'The `label` tags are as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`label`标签如下：'
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To convert the `label` tags (`E-Mail Address` and `Password`), we will first
    create an array to hold the attributes, and then pass this array to the labels,
    as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要转换`label`标签（`E-Mail Address`和`Password`），我们首先创建一个数组来保存属性，然后将此数组传递给标签，如下所示：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here is the form label code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是表单标签代码：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Checkbox
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复选框
- en: 'To convert the checkbox to a facade, we will convert this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要将复选框转换为外观，我们将转换为：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding code is converted to the following code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码转换为以下代码：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that the PHP parameters should be sent in single quotation marks if
    there are no variables or other special characters, such as line breaks, inside
    the string to parse, while the HTML produced will have double quotes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果字符串中没有变量或其他特殊字符（如换行符），则应该用单引号发送PHP参数，而生成的HTML将使用双引号。
- en: The submit button
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交按钮
- en: 'Lastly, the submit button will be converted as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，提交按钮将被转换如下：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding code after conversion is as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后的前一行代码如下：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Tip
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the array parameter provides an easy way to provide any desired attributes,
    even those that are not among the list of standard HTML form elements.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数组参数提供了一种简单的方式来提供任何所需的属性，甚至那些不在标准HTML表单元素列表中的属性。
- en: The anchor tag with links
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有链接的锚标签
- en: 'To convert the links, a helper method is used. Consider the following line
    of code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了转换链接，使用了一个辅助方法。考虑以下代码行：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The preceding line of code after conversion becomes:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后的前一行代码如下：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `link_to_route()` method may be used to link to a route. For similar helper
    functions, visit [http://laravelcollective.com/docs/5.0/html](http://laravelcollective.com/docs/5.0/html).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`link_to_route()`方法可用于链接到一个路由。有关类似的辅助函数，请访问[http://laravelcollective.com/docs/5.0/html](http://laravelcollective.com/docs/5.0/html)。'
- en: Closing the form
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭表单
- en: To end the form, we'll convert the traditional HTML form tag `</form>` to a
    Laravel `{!! Form::close() !!}` form method.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束表单，我们将把传统的HTML表单标签`</form>`转换为Laravel的`{!! Form::close() !!}`表单方法。
- en: The resultant form
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果表单
- en: 'By putting everything together, the page now looks like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容放在一起后，页面现在看起来是这样的：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Our example
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的例子
- en: 'If we want to create a form to reserve a room in our accommodation, we can
    easily call a route from our controller:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要创建一个预订住宿的表单，我们可以轻松地从我们的控制器中调用一个路由：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now we need to create a new view that is located at `resources/views/auth/reserve.blade.php`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个位于`resources/views/auth/reserve.blade.php`的新视图。
- en: 'In this view, we can create a form to reserve a room in an accommodation where
    the user can select the start date, which comprises of the start day of the month
    and year, and the end date, which also comprises of the start day of the month
    and year:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视图中，我们可以创建一个表单来预订住宿，用户可以选择开始日期，其中包括月份和年份的开始日期，以及结束日期，也包括月份和年份的开始日期：
- en: '![Our example](graphics/B04559_05_02.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![我们的例子](graphics/B04559_05_02.jpg)'
- en: 'The form would begin as before, with a POST to `reserve-room`. Then, the form
    label would be placed next to the select input fields. Finally, the day, the month,
    and the year select form elements would be created as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 表单将如前所述开始，通过POST到`reserve-room`。然后，表单标签将放置在选择输入字段旁边。最后，日期、月份和年份选择表单元素将被创建如下：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Month select
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 月份选择
- en: 'Firstly, in the `selectMonth` method, the first parameter is the name of the
    input attribute, while the second attribute is the default value. Here, the PHP
    date method is used to extract the numeric portion of the current month—March
    in this case:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`selectMonth`方法中，第一个参数是输入属性的名称，而第二个属性是默认值。这里，PHP日期方法被用来提取当前月份的数字部分——在这种情况下是三月：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output, shown here formatted, is as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化后的输出如下：
- en: '[PRE33]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Date select
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期选择
- en: 'A similar technique is applied for the selection of the date, but using the
    `selectRange` method, the range of the days in the month are passed to the method.
    Similarly, the PHP date function is used to send the current date to the method
    as the fourth parameter:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的技术也适用于选择日期，但是使用`selectRange`方法，将月份中的日期范围传递给该方法。同样，PHP日期函数被用来将当前日期作为第四个参数传递给该方法：
- en: '[PRE34]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here is the formatted output:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是格式化后的输出：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The date that should be selected is 30, since today is March 30, 2015.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 应该选择的日期是30，因为今天是2015年3月30日。
- en: Tip
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For the months that do not have 31 days, usually a JavaScript method would be
    used to modify the number of days based on the month and/or the year.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有31天的月份，通常会使用JavaScript方法根据月份和/或年份修改天数。
- en: Year select
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 年份选择
- en: 'The same technique that is used for the date range is applied for the selection
    of the year; once again, using the `selectRange` method. The range of the years
    is passed to the method. The PHP date function is used to send the current year
    to the method as the fourth parameter:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 用于日期范围的相同技术也适用于年份的选择；再次使用`selectRange`方法。年份范围被传递给该方法。PHP日期函数被用来将当前年份作为第四个参数传递给该方法：
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here is the formatted output:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是格式化后的输出：
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Here, the current year that is selected is 2015.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，选择的当前年份是2015年。
- en: Form macros
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表单宏
- en: 'We have the same code that generates our month, date, and year selection form
    block two times: once for the start date and once for the end date. To refactor
    the code, we can apply the DRY (don''t repeat yourself) principle and create a
    form macro. This will allow us to avoid calling the form element creation method
    twice, as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有相同的代码，用于生成我们的月份、日期和年份选择表单块两次：一次用于开始日期，一次用于结束日期。为了重构代码，我们可以应用DRY（不要重复自己）原则并创建一个表单宏。这将允许我们避免两次调用表单元素创建方法，如下所示：
- en: '[PRE38]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Here, the month, date, and year generation code is placed into a macro, which
    is inside the PHP tags, and it is necessary to add `echo` to print out the result.
    The `monthDayYear` name is given to this macro method. Calling our macro two times:
    once after each label; each time adding a different suffix via the `$suffix` variable.
    Now, our form code looks like this:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，月份、日期和年份生成代码被放入一个宏中，该宏位于PHP标签内，并且需要添加`echo`来打印结果。给这个宏方法取名为`monthDayYear`。调用我们的宏两次：每个标签后调用一次；每次通过`$suffix`变量添加不同的后缀。现在，我们的表单代码看起来是这样的：
- en: '[PRE39]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Conclusion
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The choice to include the HTML form generation package in Laravel 5 can ease
    the burden of having to create numerous HTML forms. This approach allows developers
    to use methods, create reusable macros, and use a familiar Laravel approach to
    build the frontend. Once the basic methods are learned, it is very easy to simply
    copy and paste the previously created form elements, and then change their element's
    name and/or the array that is sent to them.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel 5中选择包含HTML表单生成包可以减轻创建大量HTML表单的负担。这种方法允许开发人员使用方法，创建可重用的宏，并使用熟悉的Laravel方法来构建前端。一旦学会了基本方法，就可以很容易地复制和粘贴以前创建的表单元素，然后更改它们的元素名称和/或发送给它们的数组。
- en: Depending on the size of the project, this approach may or may not be the right
    choice. For a very small application, the difference in the amount of code that
    needs to be written is not very evident, although, as is the case with the `selectMonth`
    and `selectRange` methods, the amount of code necessary is drastic.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 根据项目的大小，这种方法可能是正确的选择，也可能不是。对于非常小的应用程序，需要编写的代码量的差异并不明显，尽管，如`selectMonth`和`selectRange`方法所示，所需的代码量是
    drastc的。
- en: This technique, combined with the use of macros, makes it easy to reduce the
    occurrence of copy duplication. Also, one of the major problems with the frontend
    design is that the contents of the class of the various elements may need to change
    throughout the entire application. This would mean performing a large find and
    replace operation, where changes are required to be made to HTML, such as changing
    class attributes. By creating an array of attributes, including class, for similar
    elements, changes made to the entire form can be performed simply by modifying
    the array that those elements use.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术与宏的使用结合起来，可以轻松减少复制重复的发生。此外，前端设计的一个主要问题是各种元素的类的内容可能需要在整个应用程序中进行更改。这意味着需要执行大量的查找和替换操作，需要对HTML进行更改，例如更改类属性。通过创建包含类等属性的数组，可以通过修改这些元素使用的数组来执行对整个表单的更改。
- en: In a larger project, however, where parts of forms may be repeated throughout
    the application, the wise use of macros can easily reduce the amount of code necessary
    to be written. Not only this, but macros can isolate the code inside from changes
    that would require more than one block of code to be changed throughout multiple
    files. In the example, where the month, date, and year is to be selected, it is
    possible that this could be used up to 20 times in a large application. Any changes
    made to the desired block of HTML can be simply done to the macro and the result
    would be reflected in all of the elements that use it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在一个更大的项目中，表单的部分可能在整个应用程序中重复，明智地使用宏可以轻松减少需要编写的代码量。不仅如此，宏还可以将代码与多个文件中需要更改的更改隔离开来。在要选择月份、日期和年份的示例中，这在一个大型应用程序中可能会被使用多达20次。对所需的HTML块进行的任何更改可以简单地通过修改这个宏来反映在使用它的所有元素中。
- en: Ultimately, the choice of whether or not to use this package will reside with
    the developer and the designer. Since a designer who wants to use an alternative
    frontend design tool may not prefer, nor be competent, to work with the methods
    in the package, he or she may want to not use it.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，是否使用此包的选择将由开发人员和设计人员决定。由于想要使用替代前端设计工具的设计人员可能不喜欢也可能不熟练地使用包中的方法，因此可能不想使用它。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, the history and the installation of the HTML Laravel composer
    package was outlined. The construction of the master template was explained and
    then the form components, such as the various form input types, were shown through
    examples.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，概述了HTML Laravel composer包的历史和安装。解释了主模板的构建，然后通过示例展示了表单组件，如各种表单输入类型。
- en: Finally, the construction of a form for the room reservation, as used in the
    book's example software, was explained, as well as a "do not repeat yourself"
    form macro creation technique.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，解释了在书中示例软件中使用的房间预订表单的构建，以及“不要重复自己”的表单宏创建技术。
- en: In the next chapter, we will take a look at a way to use annotations to reduce
    the time required to create routing for the application's controllers.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一种使用注释来减少应用程序控制器创建路由所需时间的方法。
