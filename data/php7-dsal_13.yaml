- en: Functional Data Structures with PHP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP的函数式数据结构
- en: In recent years, the demand for functional programming language over object-oriented
    programming has increased. One of the core reasons is that **functional programming**
    (**FP** ) has inherent parallelism. While OOP is used widely, functional programming
    is quite significantly making a mark in recent times. As a result, languages such
    as Erlang, Elixir, Clojure, Scala, and Haskell are the most popular functional
    programming languages for programmers. PHP is not on the list, as PHP is considered
    an imperative and object-oriented language. Though PHP has lots of support for
    functional programming, it is mainly used for OOP and imperative programming.
    The core essence of FP is the lambda calculus, which denotes a formal system in
    mathematical logic and computer science for expressing computation by way of variable
    binding and substitution. It is not a framework or a new concept. In fact, functional
    programming predates all other programming paradigms. It has been there for a
    long time and will be there in the future as well, as the world is demanding for
    more concurrent computation and faster processing languages. In this chapter,
    you will learn about functional programming with PHP and how to implement data
    structures with functional programming.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，对函数式编程语言的需求超过了面向对象编程。其中一个核心原因是函数式编程具有固有的并行性。虽然面向对象编程被广泛使用，但函数式编程在近年来也有相当大的影响。因此，像
    Erlang、Elixir、Clojure、Scala 和 Haskell 这样的语言是程序员最受欢迎的函数式编程语言。PHP不在这个列表上，因为PHP被认为是一种命令式和面向对象的语言。尽管PHP对函数式编程有很多支持，但它主要用于面向对象编程和命令式编程。FP的核心精髓是
    λ 演算，它表示一种数学逻辑和计算机科学中的形式系统，用于通过变量绑定和替换来表达计算。它不是一个框架或一个新概念。事实上，函数式编程早于所有其他编程范式。它已经存在很长时间，将来也会存在，因为世界需要更多的并发计算和更快的处理语言。在本章中，您将学习如何使用PHP实现函数式编程和数据结构。
- en: Understanding functional programming with PHP
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP理解函数式编程
- en: 'Unlike any object-oriented programming language where everything is represented
    through an object, functional programming starts thinking everything in terms
    of functions. OOP and FP are not mutually exclusive. While OOP focuses on code
    maintainability and reusability by encapsulation and inheritance, functional programming,
    unlike state-oriented imperative programming, is focused on value-oriented programming,
    which considers computation as a pure mathematical evaluation and avoids mutability
    and state modification. When working with OOP, one of the challenges is that the
    object we have created can bring many extra properties or methods along with it
    whether or not we are using it in a particular case. Here are the three key characteristics
    of functional programming:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何面向对象编程语言不同，其中一切都通过对象表示，函数式编程开始思考一切都是函数。OOP 和 FP 不是相互排斥的。虽然 OOP 侧重于通过封装和继承实现代码的可维护性和可重用性，但与面向状态的命令式编程不同，函数式编程侧重于以值为导向的编程，将计算视为纯数学评估，并避免可变性和状态修改。在使用
    OOP 时，其中一个挑战是我们创建的对象可能会带来许多额外的属性或方法，无论我们是否在特定情况下使用它。以下是函数式编程的三个关键特征：
- en: Immutability
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变性
- en: Pure functions and referential transparency
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯函数和引用透明度
- en: First-class citizen functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头等公民函数
- en: Higher order function
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高阶函数
- en: Function composition (currying)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数组合（柯里化）
- en: The concept of immutability tells us that an object will not change after its
    creation. It will remain the same during its whole life cycle. It has a great
    advantage as we do not need to revalidate the object whenever we use it. Also,
    if it requires being mutable, we can create a copy of the object or create a new
    object with new properties.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变性的概念告诉我们，一个对象在创建后不会改变。它在整个生命周期内保持不变。这有一个很大的优势，因为我们在使用对象时不需要重新验证对象。此外，如果需要可变性，我们可以创建对象的副本或创建具有新属性的新对象。
- en: 'So far, in this book, we saw lots of examples of data structures and algorithms
    using code blocks, loops, and conditions. In general, this is known as imperative
    programming, where it is expected to define each step of the execution. For example,
    consider the following code block:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们看到了很多使用代码块、循环和条件的数据结构和算法的例子。一般来说，这被称为命令式编程，其中期望定义执行的每一步。例如，考虑以下代码块：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code actually sets the first character of each name to upper
    case. Logically, the code is correct and we have presented it here step-by-step,
    so that we understand what is going on. However, this can be written as a single
    line using the functional programming approach, as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码实际上将每个名称的第一个字符设置为大写。从逻辑上讲，代码是正确的，我们已经逐步呈现了它，以便我们理解发生了什么。然而，这可以使用函数式编程方法写成一行代码。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Both of these methods do the same thing, but one is a comparatively smaller
    code block than the other one. The later one is known as declarative programming.
    While imperative programming focuses on algorithms and steps, declarative programming
    focuses on input and output of the function along with recursion (not iteration).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都是做同样的事情，但一种比另一种代码块要小。后者被称为声明式编程。而命令式编程侧重于算法和步骤，声明式编程侧重于函数的输入和输出以及递归（而不是迭代）。
- en: Another important aspect of functional programming is that it is free of any
    side effects. It is an important feature to have and it ensures that a function
    will not have any implicit effects anywhere on the input. One of the common examples
    of functional programming is sorting an array in PHP. Usually, the argument is
    passed by reference and when we get the sorted array, it actually destroys the
    initial array. This is an example of side effects in a function.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程的另一个重要方面是它不受任何副作用的影响。这是一个重要的特性，它确保函数不会在输入的任何地方产生任何隐式影响。函数式编程的一个常见例子是在PHP中对数组进行排序。通常，参数是通过引用传递的，当我们得到排序后的数组时，它实际上破坏了初始数组。这是函数中副作用的一个例子。
- en: Before jumping to functional programming with PHP, let's explore some functional
    programming terms, which we will come across in the following sections.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在跳入PHP的函数式编程之前，让我们探索一些函数式编程术语，我们将在接下来的部分中遇到。
- en: First class functions
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一流函数
- en: 'A language with first-class functions allows the following behavior:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 具有一流函数的语言允许以下行为：
- en: Assign a function to a variable
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将函数分配给变量
- en: Pass them to another function as an argument
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将它们作为参数传递给另一个函数
- en: Return a function
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回一个函数
- en: PHP supports all of these behaviors and, hence, PHP functions are first-class
    functions. In our previous example, the `ucfirst` function is an example of a
    first-class function.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: PHP支持所有这些行为，因此PHP函数是一流函数。在我们之前的例子中，`ucfirst`函数就是一流函数的一个例子。
- en: Higher order functions
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高阶函数
- en: A higher order function can take one or multiple functions as an argument and
    also return a function as a result. PHP also has support for higher order functions;
    `array_map` from our previous example is a higher order function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶函数可以将一个或多个函数作为参数，并且还可以返回一个函数作为结果。PHP也支持高阶函数；我们之前的例子中的`array_map`就是一个高阶函数。
- en: Pure functions
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纯函数
- en: A pure function is a function where for an input X, the output will be always
    Y under any circumstances. The output will never change for the same input for
    a pure function. So, for pure functions, there are no side effects or dependencies
    on the runtime environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 纯函数
- en: Lambda functions
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda函数
- en: Lambda functions or anonymous functions are functions without a name. They can
    be very handy when used as first-class functions (to assign in a variable) or
    for call back functions where we can define the function in the place of a call
    back parameter. PHP has support for anonymous functions as well.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda函数或匿名函数是没有名称的函数。当作为一流函数（分配给变量）使用时，或者用于回调函数时，它们非常方便，我们可以在调用参数的位置定义函数。PHP也支持匿名函数。
- en: Closures
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 闭包
- en: A closure is very much similar to a lambda function, but the basic difference
    is that a closure has access to its outer scope variables. In PHP, we cannot access
    outer scope variables directly. In order to do so, PHP has introduced the keyword
    "use" to pass any outer scope variables to inner functions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 闭包与Lambda函数非常相似，但基本区别在于闭包可以访问其外部作用域变量。在PHP中，我们无法直接访问外部作用域变量。为了做到这一点，PHP引入了关键字"use"，以将任何外部作用域变量传递给内部函数。
- en: Currying
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 柯里化
- en: 'Currying is a technique of transforming a function that takes multiple arguments
    to a chain of functions where each function will take exactly one argument. In
    other words, if a function can be written as *f(x,y,z)* , then the currying version
    of this will be *f(x)(y)(z).* let''s consider the following example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 柯里化是一种将接受多个参数的函数转换为一系列函数的技术，其中每个函数将只接受一个参数。换句话说，如果一个函数可以写成*f(x,y,z)*，那么它的柯里化版本将是*f(x)(y)(z)*。让我们考虑以下例子：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, we have written a simple function with three parameters and when called
    with numbers, it will return *sum* of the numbers. Now, if we write this function
    as a curry, it will look like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们编写了一个带有三个参数的简单函数，当用数字调用时，它将返回数字的*和*。现在，如果我们将这个函数写成柯里化形式，它将如下所示：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now if we run the `currySum` as a currying function, we will get the result
    60 for the preceding example. This is a very useful feature for functional programming.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们将`currySum`作为柯里化函数运行，我们将得到前面例子中的结果60。这是函数式编程非常有用的特性。
- en: Earlier, it was not possible to call a function like *f(a)(b)(c)* in PHP. Since
    PHP 7.0, Uniform Variable Syntax allows immediate execution of a callable, as
    we saw in this example. However, to do this in PHP 5.4 and higher versions, we
    would have to create temporary variables in order to store the lambda functions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中以前不可能像*f(a)(b)(c)*这样调用一个函数。自PHP 7.0以来，统一变量语法允许立即执行可调用函数，就像我们在这个例子中看到的那样。然而，在PHP
    5.4和更高版本中，为了做到这一点，我们必须创建临时变量来存储Lambda函数。
- en: Partial applications
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部分应用
- en: 'A partial application or partial function application is a technique to reduce
    the number of arguments of a function or to use partial arguments and create another
    function to act on the remaining arguments in order to produce the same output
    as what we would get if it were called with all the arguments at once. If we consider
    our `sum` function to be partial, where it is expected to take three parameters,
    but we can call it with two arguments, and later on add the remaining one. Here
    is the code sample. The `sum` function used in this example is from the previous
    section:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 部分应用或部分函数应用是一种技术，可以减少函数的参数数量，或者使用部分参数并创建另一个函数来处理剩余的参数，以产生与一次性调用所有参数时相同的输出。如果我们将我们的`sum`函数视为部分应用，它预期接受三个参数，但我们可以用两个参数调用它，然后再添加剩下的一个。以下是代码示例。在这个例子中使用的`sum`函数来自前面的部分：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Sometimes, we get confused between currying and partial application even though
    they are completely different in their approaches and principles.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们会对柯里化和部分应用感到困惑，尽管它们在方法和原则上完全不同。
- en: As we can see, there are so many things to consider while dealing with functional
    programming in PHP. It will be a lengthier process to implement data structures
    using functional programming in PHP from scratch. In order to solve this problem,
    we will explore an excellent functional programming library for PHP, called **Tarsana**
    . It is open source and comes with the MIT license. We will explore this library
    and also use it as our base for functional data structure implementation in PHP.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，处理PHP中的函数式编程时需要考虑的事情很多。使用函数式编程从头开始实现数据结构将是一个更加冗长的过程。为了解决这个问题，我们将探索一个名为**Tarsana**的PHP优秀函数式编程库。它是开源的，并且使用MIT许可证。我们将探索这个库，并将其作为我们在PHP中实现函数式数据结构的基础。
- en: Getting started with Tarsana
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Tarsana
- en: Tarsana is an open source library written by Amine Ben Hammou and is available
    on GitHub for download. It is inspired from Ramda JS, a functional programming
    library for JavaScript. It does not have any dependencies and has more than 100
    predefined functions to use for different purposes. Functions in FP are spread
    over different modules and there are several modules such as functions, list,
    object, string, math, operators, and common. Tarsana can be downloaded from GitHub
    ( [https://github.com/Tarsana/functional](https://github.com/Tarsana/functional)
    ) or can be installed via composer.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Tarsana是由Amine Ben Hammou编写的开源库，可在GitHub上下载。它受到JavaScript的函数式编程库Ramda JS的启发。它没有任何依赖关系，有100多个预定义的函数可用于不同的目的。FP中的函数分布在不同的模块中，有几个模块，如函数、列表、对象、字符串、数学、运算符和常见模块。Tarsana可以从GitHub（[https://github.com/Tarsana/functional](https://github.com/Tarsana/functional)）下载，也可以通过composer安装。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the library is downloaded, we have to use it by importing the `Tarsana\Functional`
    namespace, just like the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦库被下载，我们必须通过导入`Tarsana\Functional`命名空间来使用它，就像以下代码一样：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'One of the interesting features of Tarsana is that we can convert any of our
    existing functions to a curried function. For example, if we want to use our `sum`
    function using Tarsana, then it will look like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Tarsana的一个有趣特性是，我们可以将我们现有的任何函数转换为柯里化函数。例如，如果我们想使用我们的`sum`函数使用Tarsana，那么它将如下所示：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will produce the output of 7 and 13, respectively. Tarsana also has an
    option to keep place holders using the `__()` function. The following example
    shows the array reduce and array sum of the entries provided in the placeholder:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将分别产生7和13的输出。Tarsana还有一个选项，可以使用`__()`函数来保留占位符。以下示例显示了在占位符中提供的条目的数组减少和数组求和：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Tarsana also provides a piping functionality, where we can apply a series of
    functions from left to right. The leftmost function may have any arity; the remaining
    functions must be unary. The result of piping is not curried. Let''s consider
    the following example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Tarsana还提供了管道功能，可以从左到右应用一系列函数。最左边的函数可以有任何arity；其余的函数必须是一元的。管道的结果不是柯里化的。让我们考虑以下示例：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As we have already explored some features of Tarsana, we are ready to start
    our functional data structures using Tarsana. We will also implement those data
    structures using simple PHP functions so that we have both parts covered, if we
    do not want to use functional programming. Let's get started with the implementation
    of stack.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经探索了Tarsana的一些功能，我们准备开始使用Tarsana来开始我们的函数式数据结构。我们还将使用简单的PHP函数来实现这些数据结构，这样我们两方面都覆盖到了，如果我们不想使用函数式编程。让我们开始实现堆栈。
- en: Implementing stack
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现堆栈
- en: 'We have seen the implementation of stacks in [Chapter 4](text00098.html) ,
    *Constructing Stacks and Queues* . For simplicity, we won''t discuss the whole
    stack operation again. We will jump right into the implementation of push, pop,
    and top operations using functional programming. Tarsana has lots of built-in
    functions for list operations. We will use their built-in functions to implement
    our functional operations of the stack. Here is the implementation:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第4章](text00098.html)中看到了堆栈的实现，*构建堆栈和队列*。为简单起见，我们不会再讨论整个堆栈操作。我们将直接进入使用函数式编程实现推送、弹出和顶部操作。Tarsana有许多用于列表操作的内置函数。我们将使用它们的内置函数来实现堆栈的功能。以下是实现方式：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here, we use the append function of Tarsana for the push operation, the last
    function we used here for the top operation, and the `init` function for the pop
    operation. The output of the following code is as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用Tarsana的append函数进行推送操作，在这里我们使用的是top操作的last函数，以及pop操作的`init`函数。以下代码的输出如下：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Implementing a queue
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现队列
- en: 'We can implement a queue using Tarsana and the built-in functions for list
    operations. We will use the array for queue representation as well using this
    code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Tarsana和列表操作的内置函数来实现队列。我们还将使用这段代码来使用数组表示队列：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we use the `append` function to perform enqueue, and the `head` and `tail`
    functions for the first item in the queue and dequeuer, respectively. Here is
    the output of the preceding code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`append`函数来执行入队操作，使用`head`和`tail`函数分别获取队列中的第一个项目和出队操作。以下是前面代码的输出：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we will shift our focus to implementing hierarchical data using simple
    PHP functions instead of classes and objects. Since functional programming is
    still a new topic in PHP, implementation of hierarchical data might seem challenging
    and also time consuming. Instead, we will convert our hierarchical data implementation
    using basic PHP functions along with some basic functional programming concept
    such as first-class functions and higher order functions. So, let's implement
    a binary tree.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将把重点转移到使用简单的PHP函数来实现分层数据，而不是使用类和对象。由于函数式编程在PHP中仍然是一个新话题，实现分层数据可能看起来具有挑战性，而且也很耗时。相反，我们将使用基本的PHP函数以及一些基本的函数式编程概念，如一等函数和高阶函数来转换我们的分层数据实现。因此，让我们实现一个二叉树。
- en: Implementing a tree
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现树
- en: 'We will implement a binary tree using a PHP array with a simple recursive function-based
    traversal. We are just rewriting the functionality using one function instead
    of a class. Here is the code to do this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的递归函数来使用PHP数组实现二叉树的遍历。我们只是使用一个函数重写了功能，而不是一个类。以下是实现此功能的代码：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If we look at the preceding code, we have simply modified the traversal function
    and converted it to a standalone function. It is a pure function as we are not
    modifying the actual input here, which is the `$nodes` variable. We will construct
    a string on each level and use that for the output. We can now convert most of
    our class-based structures to function-based ones.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们看一下前面的代码，我们只是修改了遍历函数，并将其转换为一个独立的函数。这是一个纯函数，因为我们在这里没有修改实际的输入，即`$nodes`变量。我们将在每个级别构造一个字符串，并将其用于输出。现在，我们可以将大部分基于类的结构转换为基于函数的结构。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Functional programming is comparatively new for PHP developers as the support
    for its prerequisites was added as of version 5.4\. The emergence of functional
    programming will require us to understand the paradigm and write pure functions
    that are free of any side effects when required. PHP has some good support for
    writing functional programming code and, with that, we can also write functional
    data structures and algorithm implementations as we have tried to show in this
    book. In the near future, it might come in handy for optimizing and improving
    our application's efficiency.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 函数式编程对于PHP开发者来说相对较新，因为对其先决条件的支持是在5.4版本中添加的。函数式编程的出现将要求我们理解这种范式，并在需要时编写没有任何副作用的纯函数。PHP对编写函数式编程代码有一定的支持，通过这种支持，我们也可以编写函数式数据结构和算法实现，正如我们在本书中尝试展示的那样。在不久的将来，优化和提高我们应用程序的效率时，这可能会派上用场。
