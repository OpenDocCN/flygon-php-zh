- en: Building and Deploying Angular Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和部署Angular测试
- en: 'In the last chapter, you learned how to install, customize, and extend a Bootstrap
    CSS framework; how to use `NgBootstrap` components; and how to connect Angular
    services with components and UI interfaces. Now, let''s look at another key point
    in Angular applications: tests.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何安装、定制和扩展Bootstrap CSS框架；如何使用`NgBootstrap`组件；以及如何将Angular服务与组件和UI界面连接起来。现在，让我们看看Angular应用程序中的另一个关键点：测试。
- en: Tests are a great way to check your application code to find issues. In this
    chapter, you will learn how to test Angular applications, how to configure application
    linters (for SCSS and TSLint files) to keep code consistency, and how to create
    `npm` build scripts. In addition, you will learn how to create a Docker image
    for a frontend application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是检查应用程序代码以查找问题的一种很好的方法。在本章中，您将学习如何测试Angular应用程序，如何配置应用程序的linter（用于SCSS和TSLint文件）以保持代码一致性，以及如何创建`npm`构建脚本。此外，您还将学习如何为前端应用程序创建Docker镜像。
- en: 'In this chapter, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Setting application linters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置应用程序linter
- en: Understanding Angular tests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Angular测试
- en: Writing unit and e2e tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写单元测试和端到端测试
- en: Application deployment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用部署
- en: Preparing the baseline code
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备基线代码
- en: 'First, we need to prepare our baseline code, a process very similar to that
    of previous chapters. Follow these steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要准备我们的基线代码，这个过程与之前的章节非常相似。按照以下步骤：
- en: Copy all of the content from the `chapter-10` folder.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制所有内容从`chapter-10`文件夹。
- en: Rename the folder `chapter-11`.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名文件夹`chapter-11`。
- en: Delete the `storage-db` folder.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`storage-db`文件夹。
- en: Now, let's make some changes to the `docker-compose.yml` file, to fit a new
    database and server containers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`docker-compose.yml`文件进行一些更改，以适应新的数据库和服务器容器。
- en: 'Open `docker-compose.yml` and replace the contents with the following code:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`docker-compose.yml`并用以下代码替换内容：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that we changed the container names, the database, and the MySQL user:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们更改了容器名称、数据库和MySQL用户：
- en: '`container_name: chapter-11-mysql`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-11-mysql`'
- en: '`container_name: chapter-11-webserver`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-11-webserver`'
- en: '`container_name: chapter-11-php-fpm`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container_name: chapter-11-php-fpm`'
- en: '`MYSQL_DATABASE=chapter-11`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_DATABASE=chapter-11`'
- en: '`MYSQL_USER=chapter-11`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_USER=chapter-11`'
- en: 'Update the `.env` file with the following connection string:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下连接字符串更新`.env`文件：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the changes that we made to the Git source control. Open Terminal window
    and type the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加我们对Git源代码所做的更改。打开终端窗口并输入以下命令：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting application linters
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用程序linter
- en: All of us want a clean and consistent code base. Independent of the programming
    language adopted, it is very common to use linters for JavaScript and other languages.
    But, when we discuss CSS or SCSS/LESS, this practice is not very common; we rarely
    use a linter for our style sheets.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都希望有一个干净和一致的代码库。无论采用的编程语言是什么，使用JavaScript和其他语言的linter是非常常见的。但是，当我们讨论CSS或SCSS/LESS时，这种做法并不常见；我们很少为我们的样式表使用linter。
- en: A **linter** is a tool that analyzes code and reports errors. We set the rules,
    and when a piece of code doesn't pass the rules defined in the linter's configuration,
    the linter reports an error. This feature is very useful when a team is growing
    and needs to keep the code base consistent.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**linter**是一种分析代码并报告错误的工具。我们设置规则，当一段代码不符合linter配置中定义的规则时，linter会报告一个错误。当团队在壮大并需要保持代码库一致性时，这个功能非常有用。'
- en: If you don't have strict rules for coding style, code can become a mess very
    quickly. Even if you work alone, it is always a good practice to keep your code
    consistent.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有严格的编码风格规则，代码很快就会变得一团糟。即使您是独自工作，保持代码一致性也是一种良好的实践。
- en: In the following sections, you will learn how to apply a linter for SCSS and
    TypeScript files.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将学习如何为SCSS和TypeScript文件应用linter。
- en: Adding stylelint for SCSS files
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为SCSS文件添加stylelint
- en: We will be using `stylelint`, a mighty, modern style sheet linter, supporting
    CSS, LESS, and SASS. `stylelint` has a lot of rules, available by default, and
    it is very easy to extend with our own rules, it's totally un-opinionated. Another
    advantage is that all rules are disabled by default, and we only enable the ones
    that we want to use. Let's see it in practice.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`stylelint`，一个强大的、现代的样式表linter，支持CSS、LESS和SASS。`stylelint`有很多默认可用的规则，并且非常容易通过我们自己的规则进行扩展，它完全没有意见。另一个优点是，所有规则默认都是禁用的，我们只启用我们想要使用的规则。让我们看看它的实际应用。
- en: 'Open Terminal window inside of the `./Client` folder, and type the following
    commands:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`./Client`文件夹内打开终端窗口，并输入以下命令：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding commands are very clear, right? We are installing the default
    configuration standard plugin, along with the SCSS plugin.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令非常清晰，对吧？我们正在安装默认配置标准插件，以及SCSS插件。
- en: You can read more about `stylelint` in the official documentation at [https://github.com/stylelint/stylelint](https://github.com/stylelint/stylelint).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方文档[https://github.com/stylelint/stylelint](https://github.com/stylelint/stylelint)中了解更多关于`stylelint`的信息。
- en: Adding new scripts to the package.json file
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向package.json文件添加新的脚本
- en: 'Open the `package.json` file at the root of the `./Client` folder and add the
    following code, right after the `lint` task:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client`文件夹中的`package.json`文件，并在`lint`任务之后添加以下代码：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that we are using the `Stylelint` from our local `node_modules` folder.
    This helps us to ensure that the whole team uses the same plugin version, avoiding
    compatibility issues.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用来自本地`node_modules`文件夹的`Stylelint`。这有助于确保整个团队使用相同的插件版本，避免兼容性问题。
- en: Adding the .stylelintrc configuration
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加.stylelintrc配置
- en: 'Let''s add our own rules, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加我们自己的规则，如下所示：
- en: Inside of `./Client`, create a new file, called `.stylelintrc`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client`文件夹内，创建一个名为`.stylelintrc`的新文件。
- en: 'Add the following rules to the `./Client/.stylelintrc` file:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下规则添加到`./Client/.stylelintrc`文件中：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that you can use whatever rules you want; there''s no right or wrong.
    It''s just a matter of taste and team preference. For example, if your team chooses
    to use only `px` pixels for the entire project, your `unit-whitelist` configuration
    will be as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，您可以使用任何您想要的规则；没有对错之分。这只是一种口味和团队偏好的问题。例如，如果您的团队选择只在整个项目中使用`px`像素，那么您的`unit-whitelist`配置将如下所示：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s perform a brief test to check that everything is going well. Open Terminal
    window at `./Client` and type the following command:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进行一个简短的测试，以确保一切进行顺利。在`./Client`中打开终端窗口，并输入以下命令：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding command reports 77 errors in our project. How is that possible?
    We only have a few lines of code, and most of them are code indentation on a `style.scss`
    file. Well, this is expected, because this is the only file with SCSS. Remember
    that we didn't add any SCSS code to our `components.scss` files.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令报告了我们项目中的77个错误。这怎么可能？我们只有几行代码，其中大部分是在`style.scss`文件中的代码缩进。这是预期的，因为这是唯一一个包含SCSS的文件。请记住，我们没有在`components.scss`文件中添加任何SCSS代码。
- en: Installing the Stylelint plugin for VS Code
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为VS Code安装Stylelint插件
- en: 'If you are using `vs.code` (and I hope you are), install the Stylelint plugin,
    as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`vs.code`（我希望您是），请按照以下步骤安装Stylelint插件：
- en: In VS Code, open the left `extensions` panel.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中，打开左侧的`extensions`面板。
- en: Type `stylelint`, on the search input field.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索输入框中输入`stylelint`。
- en: Choose `stylelint` extension.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`stylelint`扩展。
- en: Restart VS Code.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动VS Code。
- en: Setting VS Code for the new linter
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为新的linter设置VS Code
- en: 'Now, let''s configure VS Code to only use `stylelint` rules; this will prevent
    us from seeing double error messages in the VS Code integrated Terminal (if you
    are using a different code editor, don''t worry about it). The steps are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们配置VS Code仅使用`stylelint`规则；这将防止我们在VS Code集成终端中看到双重错误消息（如果您使用不同的代码编辑器，不用担心）。步骤如下：
- en: In VS Code, navigate to Code | Preferences | Settings in the top menu.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code中，导航到顶部菜单中的Code | Preferences | Settings。
- en: 'Add the following code in the right-hand panel:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧面板中添加以下代码：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To see the plugin in action, open the `style.scss` file in `./Client/src/style.scss`.
    You will see the following in the bottom panel in VS Code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看插件的效果，请在VS Code中打开`./Client/src/style.scss`文件。您将在底部面板中看到以下内容：
- en: '![](assets/a9e8bfc7-a0c5-4d6e-be18-528e9679166a.png)Errors logged by the stylelint
    extension'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a9e8bfc7-a0c5-4d6e-be18-528e9679166a.png)stylelint扩展记录的错误'
- en: These are the same output errors we saw when using the `npm run sass-lint` command,
    but here, we can navigate the files. If you are on macOS, use *Command* + mouse-click.
    If you are on Windows or Linux, use *Ctrl* *+* mouse-click.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们在使用`npm run sass-lint`命令时看到的相同输出错误，但在这里，我们可以导航文件。如果您使用的是macOS，请使用*Command*
    +鼠标点击。如果您使用的是Windows或Linux，请使用*Ctrl* +鼠标点击。
- en: Applying stylelint rules on style.scss
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在style.scss上应用stylelint规则
- en: It's pretty simple to validate the `style.scss` file. Let's read the error messages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 验证`style.scss`文件非常简单。让我们读一下错误消息。
- en: From lines 9 to 44, the errors are about indentation spaces, so let's remove
    the empty space.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从第9行到第44行，错误是关于缩进空格的，所以让我们去掉空格。
- en: Remove the space between `@import` and the left-hand side, for all Bootstrap
    imports.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 删除所有Bootstrap导入的`@import`左侧的空格。
- en: 'Now, we have 41 errors. If you are inside VS Code, click on the error link
    on the bottom panel (on the Problems tab), and open the file right in the error,
    as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有41个错误。如果您在VS Code中，点击底部面板上的错误链接（在Problems选项卡上），并按照以下截图中所示的方式打开文件：
- en: '![](assets/9c2091e1-6040-4591-9ca7-46e77deaf747.png)VS Code stylelint plugin
    errors'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9c2091e1-6040-4591-9ca7-46e77deaf747.png)VS Code stylelint插件错误'
- en: 'If you are not using VS Code, the Terminal message after running `npm run sass-lint` will
    be the same, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用VS Code，在运行`npm run sass-lint`后，终端消息将与以下截图中所示的相同：
- en: '![](assets/101a8613-1083-4a71-be1d-e3b61f9fa8f7.png)VS Code Terminal stylelint
    errors'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/101a8613-1083-4a71-be1d-e3b61f9fa8f7.png)VS Code终端stylelint错误'
- en: Fixing SCSS errors
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复SCSS错误
- en: Let's fix all of the error messages in our `style.scss` file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修复`style.scss`文件中的所有错误消息。
- en: 'Open `./Client/src/style.scss` and replace the content after `@imports` with
    the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/style.scss`，并将`@imports`后的内容替换为以下代码：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are no errors now, and our project will be safe and consistent with our
    rules. Next, let's look at how to use the built-in TypeScript linter in our project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在没有错误了，我们的项目将会安全并且符合我们的规则。接下来，让我们看看如何在项目中使用内置的TypeScript linter。
- en: Adding TSLint-angular to the package.json file
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将TSLint-angular添加到package.json文件中
- en: As we mentioned previously, code consistency is a key point for a successful
    project. By default, the Angular CLI has already added `tslint` to our project,
    as we can see in the `package.json` file and in the scripts tag, with the `ng-lint`
    command.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，代码一致性是一个成功项目的关键点。默认情况下，Angular CLI已经将`tslint`添加到了我们的项目中，我们可以在`package.json`文件和scripts标签中看到，使用`ng-lint`命令。
- en: 'However, while we were writing this chapter, the Angular CLI had a small bug
    and reported the error message twice when we used the `ng-lint` command. To avoid
    that, let''s add the following lines to our `package.json` file, right after the
    `sass-lint` script:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们编写本章时，Angular CLI出现了一个小错误，当我们使用`ng-lint`命令时报告了错误消息两次。为了避免这种情况，让我们在`package.json`文件中的`sass-lint`脚本之后添加以下行：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the previous lines, we used the local `tslint` binary from the `node_modules`
    folder. This will help us to avoid compatibility issues.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的行中，我们使用了`node_modules`文件夹中的本地`tslint`二进制文件。这将帮助我们避免兼容性问题。
- en: As we are working in an Angular project, it will be very helpful for us to follow
    Angular's official style guide, as it has been adopted throughout the developer
    community.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在一个Angular项目中工作，遵循Angular官方的样式指南对我们来说将非常有帮助，因为它已经在开发者社区中得到了采纳。
- en: You can read more about the Angular style guide in the official documentation
    at [https://angular.io/guide/styleguide](https://angular.io/guide/styleguide).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方文档中了解有关Angular样式指南的更多信息[https://angular.io/guide/styleguide](https://angular.io/guide/styleguide)。
- en: 'To help us with the style guide, we will use a package called `tslint-angular`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们遵循样式指南，我们将使用一个名为`tslint-angular`的包：
- en: 'Open Terminal window and type the following command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口并输入以下命令：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, open the `./Client/src/tslint.json` file and replace the contents with
    the following code:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`./Client/src/tslint.json`文件，并用以下代码替换内容：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that, in the previous code, we are using the `extends` property to extend
    the default configuration in `./Client/tslint.ts` and the `tslint-angular` from
    our `node_modules` folder.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的代码中，我们使用`extends`属性来扩展`./Client/tslint.ts`中的默认配置和我们的`node_modules`文件夹中的`tslint-angular`。
- en: You can read more about recommended Angular rules at [https://github.com/mgechev/codelyzer#recommended-configuration](https://github.com/mgechev/codelyzer#recommended-configuration).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/mgechev/codelyzer#recommended-configuration](https://github.com/mgechev/codelyzer#recommended-configuration)了解更多关于推荐的Angular规则的信息。
- en: Creating linter tasks in package.json
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在package.json中创建linter任务
- en: Now, we will create some tasks to run the linters that we just set up.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一些任务来运行我们刚刚设置的linters。
- en: 'Open `./Client/package.json` and add the following line before the `sasalint`
    script:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/package.json`并在`sasalint`脚本之前添加以下行：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code will execute two commands: one for `sasslint` and another
    for `tslint`. So, we are ready to start testing our application and preparing
    the deployment.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将执行两个命令：一个用于`sasslint`，另一个用于`tslint`。因此，我们已经准备好开始测试我们的应用程序并准备部署。
- en: You can read more about TSlint-angular in the official documentation at [https://github.com/mgechev/tslint-angular](https://github.com/mgechev/tslint-angular).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方文档中了解有关TSlint-angular的更多信息[https://github.com/mgechev/tslint-angular](https://github.com/mgechev/tslint-angular)。
- en: Understanding Angular tests
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Angular测试
- en: 'Tests are very important for any modern web application, and Angular includes
    some testing tools by default, such as Jasmine, Karma, and protectors for unit
    tests and end-to-end tests. Let''s look at the main focus of each tool, in order
    to see the differences:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 测试对于任何现代Web应用程序都非常重要，Angular默认包括一些测试工具，如Jasmine、Karma和用于单元测试和端到端测试的保护程序。让我们看看每个工具的主要重点，以便了解它们之间的区别：
- en: '| Unit Tests | End to End Tests |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '|单元测试|端到端测试|'
- en: '| --- | --- |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Test a single component, service, pipe, and so on. | Test the whole application
    |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '|测试单个组件、服务、管道等。|测试整个应用程序|'
- en: '| Test a single, specific behavior. | Test real-world situations |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '|测试单个特定行为。|测试真实世界的情况|'
- en: '| Require mocking the backend to test. | Test important features on complete
    applications |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '|需要模拟后端以进行测试。|测试完整应用程序上的重要功能|'
- en: '| Test edge cases on the most detailed level. | Do not test edge cases |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '|测试最详细级别的边缘情况。|不测试边缘情况|'
- en: The preceding table is simple, but we can see all of the main differences between
    unit tests and end-to-end tests, also know as **e2e tests**. Also, both tools
    use the Jasmine framework, a **behavior-driven** development framework for testing
    JavaScript code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表格很简单，但我们可以看到单元测试和端到端测试之间的所有主要区别，也称为**e2e测试**。此外，这两个工具都使用Jasmine框架，这是一个用于测试JavaScript代码的**行为驱动**开发框架。
- en: You can read more about Jasmine at [https://jasmine.github.io/](https://jasmine.github.io/).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://jasmine.github.io/](https://jasmine.github.io/)了解更多关于Jasmine的信息。
- en: As mentioned previously, both tools are installed when we use the Angular CLI
    to generate the application.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当我们使用Angular CLI生成应用程序时，这两个工具都已安装。
- en: For unit tests, we will use the Karma test runner; before we go further, let's
    look at `karma.conf.js` to better understand what we already have.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单元测试，我们将使用Karma测试运行器；在继续之前，让我们看看`karma.conf.js`以更好地了解我们已经拥有的内容。
- en: 'Open `karma.conf.js` inside the root of the `./Client` folder and check the
    `plugins` tag:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client`文件夹中的`karma.conf.js`并检查`plugins`标签：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: By default, we already have some plugins installed, as we can see on the previous
    block of code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们已经安装了一些插件，正如我们在前面的代码块中所看到的。
- en: You can read more about the Karma test runner in the official documentation
    at [https://karma-runner.github.io/2.0/index.html](https://karma-runner.github.io/2.0/index.html).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在官方文档中了解有关Karma测试运行器的更多信息[https://karma-runner.github.io/2.0/index.html](https://karma-runner.github.io/2.0/index.html)。
- en: 'We also have the configuration for the browser that will be used in the tests;
    by default, we already have Chrome installed:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有用于测试的浏览器的配置；默认情况下，我们已经安装了Chrome：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'What if you want to use a different browser to run the tests? It is very easy
    to do that; just install your favorite browser. The Karma test runner supports
    the most popular browsers, such as:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要使用不同的浏览器来运行测试怎么办？这很容易做到；只需安装您喜欢的浏览器。Karma测试运行器支持最流行的浏览器，例如：
- en: Safari
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Safari
- en: Firefox
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 火狐
- en: Internet Explorer
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Internet Explorer
- en: At this point, we are ready to start testing our application. Let's look at
    how everything works.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经准备好开始测试我们的应用程序。让我们看看一切是如何运作的。
- en: Writing unit and e2e tests
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写单元测试和端到端测试
- en: Now, you will learn how to run the tests so that you can better understand what
    happens to the application.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将学习如何运行测试，以便更好地了解应用程序发生了什么。
- en: Before we start, let's run the command to execute the tests.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，让我们运行命令来执行测试。
- en: 'Open Terminal window and type the following command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口并输入以下命令：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding code will execute all of the unit tests; after that, we will see
    all of the errors in Terminal.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码将执行所有单元测试；之后，我们将在终端中看到所有错误。
- en: 'The last line will be very similar to the following line:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行将与以下行非常相似：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Each test that fails is marked in red, and is followed by an error message,
    as you can see in the following excerpt:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 每个失败的测试都标记为红色，并且后面跟着一个错误消息，正如您在以下摘录中所看到的：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: With so many lines of output in Terminal, it is difficult to even see the tests
    that have passed. Note that there are seven of them.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输出了如此多行，甚至很难看到已通过的测试。请注意，有七个测试。
- en: 'Monitoring the tests in Terminal may not be the easiest task, so we can run
    the tests in the browser by using the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中监视测试可能不是最容易的任务，因此我们可以使用以下命令在浏览器中运行测试：
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding command will open Chrome and start the tests, but remember that
    you must have the Chrome browser installed on your machine. After the test is
    done, you can now see the results in a more effective way:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将打开Chrome并开始测试，但请记住，您必须在计算机上安装Chrome浏览器。测试完成后，您现在可以以更有效的方式查看结果：
- en: '![](assets/a926a042-84bc-4705-9cdb-a83b0b2f7d28.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a926a042-84bc-4705-9cdb-a83b0b2f7d28.png)'
- en: The Karma runner in a browser
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中的Karma运行器
- en: 'The preceding screenshot is much better than the Terminal window, right? So,
    when we click on the *Spec List* tab menu, we can see the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图比终端窗口要好得多，对吧？因此，当我们点击*Spec List*选项卡菜单时，我们可以看到以下内容：
- en: '![](assets/a07a062b-4e1a-49a5-bb05-b167005bd63e.png)Testing view'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a07a062b-4e1a-49a5-bb05-b167005bd63e.png)测试视图'
- en: Also, it is possible to click on a test suite and check all of the related tests
    from that suite. Let's look at that feature in the next section.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以单击测试套件并检查该套件中的所有相关测试。让我们在下一节中看看这个功能。
- en: Fixing unit tests
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复单元测试
- en: 'It''s time to start fixing all the tests. Let''s see how to make all green:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始修复所有测试了。让我们看看如何使所有测试都通过：
- en: 'Still in the Chrome browser, click on the first test suite, called **AppComponent
    should create the app**. You will see the following page:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在Chrome浏览器中，单击名为**AppComponent应该创建应用程序**的第一个测试套件。您将看到以下页面：
- en: '![](assets/8e02a044-95d6-4c13-ad54-f1e7cb9efde0.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8e02a044-95d6-4c13-ad54-f1e7cb9efde0.png)'
- en: AppComponent
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: AppComponent
- en: Note that, in the previous screenshot, you are only seeing the `AppComponent`
    – related tests.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上一张屏幕截图中，您只能看到与`AppComponent`相关的测试。
- en: 'Go back to the Spec List and click on **AppComponent should create the app**;
    you will see the following page:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到*Spec List*，并点击**AppComponent应该创建应用程序**；您将看到以下页面：
- en: '![](assets/d7dcfd79-88a0-4926-9a41-1785a34c3127.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d7dcfd79-88a0-4926-9a41-1785a34c3127.png)'
- en: AppComponent should create the app
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: AppComponent应该创建应用程序
- en: 'The preceding error message is very clear:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上述错误消息非常清晰：
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We have a template error, and Angular suggests two ways to deal with it. The
    first suggestion is to check `app.module.ts`, to see if we added the `app-nav`
    component import. Let''s check:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个模板错误，Angular建议两种处理方法。第一个建议是检查`app.module.ts`，看看我们是否添加了`app-nav`组件导入。让我们检查一下：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding snippet was taken from the `app.module.ts` file, and we imported
    the `NavComponent`. Our action is to add `@NgModule.schemas` to our testing specs:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的片段取自`app.module.ts`文件，并且我们导入了`NavComponent`。我们的操作是将`@NgModule.schemas`添加到我们的测试规范中：
- en: 'Open `./Client/src/app/app.component.spec.ts` and replace the contents with
    the following code:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/app.component.spec.ts`并用以下代码替换内容：
- en: '[PRE22]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Note that we added the `schemas` tag, and also our route module, so that the
    test would pass, as you can see in the next snippet:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们添加了`schemas`标签，以及我们的路由模块，以便测试通过，如下片段所示：
- en: '[PRE23]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, if we check the browser again, we will see the following results:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次检查浏览器，将会看到以下结果：
- en: '![](assets/da0317a6-22c3-4423-b967-920fcd1fc0a4.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/da0317a6-22c3-4423-b967-920fcd1fc0a4.png)'
- en: AppComponent success
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: AppComponent成功
- en: 'The next test that failed is `NavComponent should created`; let''s look at
    the error message:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来失败的测试是`NavComponent应该创建`；让我们看看错误消息：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Again, the error message is clear; we need to add `RouterTestingModule` to `nav.component.spec.ts`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，错误消息很明确；我们需要在`nav.component.spec.ts`中添加`RouterTestingModule`。
- en: 'Open `./Client/src/app/layout/nav.component.spec.ts` and replace the contents
    with the following code:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/layout/nav.component.spec.ts`并用以下代码替换内容：
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can now see that our test for `NavComponent` works, as shown in the following
    screenshot:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们的`NavComponent`测试通过了，如下图所示：
- en: '![](assets/bc872d68-33d1-41a3-bb4a-e98cde881ee2.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc872d68-33d1-41a3-bb4a-e98cde881ee2.png)'
- en: NavComponent works
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: NavComponent工作
- en: Let's take a breath and consider the next lines.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深呼吸，考虑下一行。
- en: 'The following steps are very similar to the steps that we have performed so
    far. We should mention that we are using routes in our application, so we need
    to add `RoutingTestingModule` to the `imports` tag in all of the tests, within
    the configuration of `TestBed.configureTestingModule`:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤与我们迄今为止执行的步骤非常相似。我们应该提到，我们在应用程序中使用路由，因此我们需要在所有测试的`TestBed.configureTestingModule`配置中的`imports`标签中添加`RoutingTestingModule`：
- en: '[PRE26]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In addition, we have to inject the same dependency into all of the components
    that use services (such as `BikeService` and `BuilderService`), as we did in the `components.ts`
    file.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们必须将相同的依赖项注入到所有使用服务的组件中（例如`BikeService`和`BuilderService`），就像我们在`components.ts`文件中所做的那样。
- en: In the next sections, we will replace the code of many files. Don't worry –
    when something is important, we will mention it.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将替换许多文件的代码。不用担心-当某些内容很重要时，我们会提到它。
- en: Fixing authGuard tests
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复authGuard测试
- en: 'Open `./Client/src/app/pages/auth/_guards/auth.guard.spec.ts` and replace the
    contents with the following code:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/_guards/auth.guard.spec.ts`并用以下代码替换内容：
- en: '[PRE27]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note that we are injecting `AuthService` as a provider; don't worry about that
    now. Later on in this chapter, we will explain it more thoroughly. Let's just
    focus on the test.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在将`AuthService`作为提供者注入；现在不要担心这个。在本章后面，我们将更详细地解释它。让我们专注于测试。
- en: Fixing authService tests
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复authService测试
- en: 'Open `./Client/src/app/pages/auth/_services/auth.service.spec.ts` and replace
    the contents with the following code:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/_services/auth.service.spec.ts`并用以下代码替换内容：
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Fixing login tests
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复登录测试
- en: 'Open `./Client/src/app/pages/auth/login/login.component.spec.ts` and replace
    the contents with the following code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/login/login.component.spec.ts`并用以下代码替换内容：
- en: '[PRE29]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As we mentioned previously, practically all of the error messages are related
    to whether we included dependencies, such as services or direct Angular dependencies.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，几乎所有的错误消息都与我们是否包含了依赖项有关，比如服务或直接的Angular依赖项。
- en: Fixing register tests
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复register测试
- en: 'Open `./Client/src/app/pages/auth/register/register.component.spec.ts` and
    replace the contents with the following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/register/register.component.spec.ts`并用以下代码替换内容：
- en: '[PRE30]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Fixing bike service tests
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复bike服务测试
- en: 'Open `./Client/src/app/pages/bikes/_services/bikes.service.spec.ts` and replace
    the contents with the following code:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/_services/bikes.service.spec.ts`并用以下代码替换内容：
- en: '[PRE31]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Fixing bike-detail tests
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复bike-detail测试
- en: 'Open `./Client/src/app/pages/bikes/bike-detail/bike-detail.component.spec.ts`
    and replace the contents with the following code:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/bike-detail/bike-detail.component.spec.ts`并用以下代码替换内容：
- en: '[PRE32]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Fixing bike-list tests
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复bike-list测试
- en: 'Open `./Client/src/app/pages/bikes/bike-list/bike-list.component.spec.ts` and
    replace the contents with the following code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/bike-list/bike-list.component.spec.ts`并用以下代码替换内容：
- en: '[PRE33]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Fixing bike tests
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复bike测试
- en: 'Open `./Client/src/app/pages/bikes/bikes.component.spec.ts` and replace contents
    with the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/bikes.component.spec.ts`并用以下代码替换内容：
- en: '[PRE34]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Fixing builders service tests
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复builders服务测试
- en: 'Open `./Client/src/app/pages/builders/_gservices/builders.service.spec.ts`and
    replace the contents with the following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/builders/_gservices/builders.service.spec.ts`并用以下代码替换内容：
- en: '[PRE35]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Fixing builder-detail tests
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复builder-detail测试
- en: 'Open `./Client/src/app/pages/builders/builder-detail/builder-detail.component.spec.ts`
    and replace the contents with the following code:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/builders/builder-detail/builder-detail.component.spec.ts`并用以下代码替换内容：
- en: '[PRE36]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Fixing builder-list components
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复builder-list组件
- en: 'Open `./Client/src/app/pages/builders/builder-list/builder-list.component.spec.ts`
    and replace the contents with the following code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/builders/builder-list/builder-list.component.spec.ts`并用以下代码替换内容：
- en: '[PRE37]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Fixing builders tests
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复builders测试
- en: 'Open `./Client/src/app/pages/builders/builders.component.spec.ts` and replace
    the contents with the following code:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/builders/builders.component.spec.ts`并用以下代码替换内容：
- en: '[PRE38]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Fixing home tests
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复home测试
- en: 'Open `./Client/src/app/pages/home/home.component.spec.ts` and replace the contents
    with the following code:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/home/home.component.spec.ts`并用以下代码替换内容：
- en: '[PRE39]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Fixing app tests
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复应用程序测试
- en: 'Open `./Client/src/app/app.component.spec.ts` and replace the contents with
    the following code:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/app.component.spec.ts`并用以下代码替换内容：
- en: '[PRE41]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Fixing app interceptor tests
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复应用拦截器测试
- en: 'Open `./Client/src/app/shared/_services/app-http-interceptor.service.spec.ts`
    and replace the contents with the following code:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/shared/_services/app-http-interceptor.service.spec.ts`并用以下代码替换内容：
- en: '[PRE42]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We have now fixed all of the tests, so let's add some more.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经修复了所有的测试，所以让我们再添加一些。
- en: Adding unit tests
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加单元测试
- en: We've come a long way, and now, all of the tests are passing. So, it is time
    to create some new tests.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经走了很长的路，现在所有的测试都通过了。所以，是时候创建一些新的测试了。
- en: The following lines are very simple, and we have already followed this path
    in previous examples, so, if something new comes up, we will mention it at the
    end of the code block.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行非常简单，我们在之前的示例中已经遵循了这条路径，所以，如果有新的内容出现，我们会在代码块的末尾提到它。
- en: 'Let''s create some unit tests in our application, as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在应用程序中创建一些单元测试，如下所示：
- en: 'Open `./Client/src/app/app.component.spec.ts` and add the following code:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/app.component.spec.ts`并添加以下代码：
- en: '[PRE43]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The preceding code will check the `router-outlet` tag inside of `app.component.spec.ts`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将检查`app.component.spec.ts`内的`router-outlet`标签。
- en: 'Open `./Client/src/app/pages/auth/_guards/auth.guard.spec.ts` and add the following
    code:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/auth/_guards/auth.guard.spec.ts`并添加以下代码：
- en: '[PRE44]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Note that we are creating two new tests: one to check `AuthService`, and another
    to check `AuthGuard`.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在创建两个新的测试：一个用于检查`AuthService`，另一个用于检查`AuthGuard`。
- en: 'Open `./Client/src/app/pages/bikes/bikes.component.spec.ts` and add the following
    code:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/bikes/bikes.component.spec.ts`并添加以下代码：
- en: '[PRE45]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Open `./Client/src/app/pages/builders/builders.component.spec.ts` and add the
    following code:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/builders/builders.component.spec.ts`并添加以下代码：
- en: '[PRE46]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Open `./Client/src/app/pages/home/home.component.spec.ts` and add the following
    code:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/pages/home/home.component.spec.ts`并添加以下代码：
- en: '[PRE47]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Open `./Client/src/app/app.component.spec.ts` and add the following code:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/src/app/app.component.spec.ts`并添加以下代码：
- en: '[PRE48]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We have now finished the sample unit tests. If we execute the tests using `ng
    test`, we will see the following results in Terminal:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了示例单元测试。如果我们使用`ng test`执行测试，我们将在终端中看到以下结果：
- en: '[PRE49]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Fixing e2e tests
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复e2e测试
- en: 'At this point, we are going to run the `e2e` tests, as we mentioned earlier
    in the chapter:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们将运行`e2e`测试，正如我们在本章前面提到的。
- en: 'Open `./Client/e2e/src/app.e2e-spec.ts` and replace the contents with the following
    code:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./Client/e2e/src/app.e2e-spec.ts`并用以下代码替换内容：
- en: '[PRE50]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Open Terminal window and type the following command:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口并输入以下命令：
- en: '[PRE51]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The results of the preceding command will be similar to the following screenshot:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的结果将类似于以下截图：
- en: '![](assets/8741ca4d-20b9-4cd1-8d5c-3281a2080771.png)e2e test results'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8741ca4d-20b9-4cd1-8d5c-3281a2080771.png)e2e测试结果'
- en: Remember, you need to run the Angular commands inside of the `./Client` folder;
    otherwise, you will see an error message, because the Angular CLI needs the `angular.json`
    file to execute the `ng` commands, and this file is inside of the `./Client` folder.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你需要在`./Client`文件夹内运行Angular命令；否则，你会看到一个错误消息，因为Angular CLI需要`angular.json`文件来执行`ng`命令，而这个文件在`./Client`文件夹内。
- en: Application deployment
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序部署
- en: We have now finished all of the necessary steps to test our application. The
    tests can be very comprehensive or quite simple; this will depend on the type
    of approach that you (or your team) choose.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了测试我们的应用程序的所有必要步骤。测试可以非常全面，也可以非常简单；这将取决于您（或您的团队）选择的方法类型。
- en: There are many debates about tests within the community. Some people defend
    the development-oriented tests, such as** Behavior-Driven Development **(**BDD**)
    or** Test-Driven Development **(**TDD**).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 社区内有很多关于测试的争论。有些人支持面向开发的测试，比如**行为驱动开发**（**BDD**）或**测试驱动开发**（**TDD**）。
- en: Again, we will note that the most important thing is that your code, structure,
    and tests are consistent, regardless of what type of development is adopted.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，最重要的是你的代码、结构和测试是一致的，无论采用何种类型的开发。
- en: In this last section, we will look at how we can prepare our application to
    be published in production. From the beginning of this book, we have been using
    Docker, and we would not finish the book in any other way.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节中，我们将看看如何准备我们的应用程序以在生产中发布。从本书的开始，我们一直在使用Docker，而且我们不会以其他方式结束这本书。
- en: So, let's look at how we can prepare our application, using some Docker features.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看如何使用一些Docker功能来准备我们的应用程序。
- en: Creating Docker images for frontend applications
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为前端应用程序创建Docker镜像
- en: As we discussed previously, we already have an environment configured with Docker,
    but it only covers our backend application, since we run our frontend code using
    the Angular CLI installed on our machine.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论过的，我们已经配置了一个Docker环境，但它只涵盖了我们的后端应用程序，因为我们使用我们机器上安装的Angular CLI来运行我们的前端代码。
- en: In the development environment, this is not a problem, since we need the code
    that we write in our host to update in our Docker container. However, when we
    are discussing deployment, we take into account the fact that our code is ready
    to run, without any changes to files.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发环境中，这不是一个问题，因为我们需要我们在主机上编写的代码在我们的Docker容器中更新。然而，当我们讨论部署时，我们考虑到我们的代码已经准备好运行，而不需要对文件进行任何更改。
- en: Note that we are not talking about writing on the disk or data persistence;
    we will only mention changes in the source code of the application.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不讨论写入磁盘或数据持久性；我们只会提到应用程序源代码的更改。
- en: With that in mind, let's create an image of our frontend application using a
    Dockerfile.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们使用Docker的一些功能来创建我们的前端应用程序的镜像。
- en: Creating a Dockerfile
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Dockerfile
- en: 'Create a new file called `Dockerfile` inside of the `./Client` folder, and
    add the following code:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在`./Client`中创建一个名为`Dockerfile`的新文件，并添加以下代码：
- en: '[PRE52]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The preceding code is very simple; we are using an image from `nginx:alpine`,
    a Linux distribution.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码非常简单；我们正在使用`nginx:alpine`的镜像，这是一个Linux发行版。
- en: You can read more about official Docker images at [https://hub.docker.com/explore/](https://hub.docker.com/explore/).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://hub.docker.com/explore/](https://hub.docker.com/explore/)了解更多关于官方Docker镜像的信息。
- en: Also, we are using a configuration file for the nginx server. Remember, the
    Angular application must be hosted by a web server.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们正在使用一个nginx服务器的配置文件。请记住，Angular应用程序必须由Web服务器托管。
- en: Creating an nginx file
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个nginx文件
- en: 'Create a new file called `nginx.conf` inside of the `./Client` folder, and
    add the following code:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在`./Client`中，创建一个名为`nginx.conf`的新文件，并添加以下代码：
- en: '[PRE53]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: There's nothing new here – it's just a basic nginx configuration to serve the
    Angular files.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么新鲜的东西 - 这只是一个用于提供Angular文件的基本nginx配置。
- en: Creating npm building tasks
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建npm构建任务
- en: With the Dockerfile in place, we just need to create a building process using
    the `npm` that we have available.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 有了Dockerfile，我们只需要使用我们可用的`npm`来创建一个构建过程。
- en: 'Open `./Client/package.json` and add the following code:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/package.json`并添加以下代码：
- en: '[PRE54]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Let''s explain what we did in the preceding code:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下我们在前面的代码中做了什么：
- en: 'Script tag: `docker:image` will use a bash script file to generate a Docker
    image; later, we will see this file in detail.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本标签：`docker:image`将使用一个bash脚本文件来生成一个Docker镜像；稍后，我们将详细介绍这个文件。
- en: 'Script tag: `build:docker` will execute the following steps:'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本标签：`build:docker`将执行以下步骤：
- en: Run SASS listen.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行SASS监听。
- en: Run `Tslint`.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`Tslint`。
- en: Run unit tests.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元测试。
- en: Run e2e tests.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行端到端测试。
- en: Build the application.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建应用程序。
- en: Create a Docker image.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Docker镜像。
- en: Before we go further, let's explain why we are using a bash file to create the
    Docker image.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们解释一下为什么我们要使用一个bash文件来创建Docker镜像。
- en: Bash files are very useful in many places, and aren't different in any build
    processes as we will see on the following lines to execute some Docker commands.
    To avoid more complexity in `npm` packages, we will use a call to the `create-docker-image.sh`
    file that will execute the command necessary to generate our image.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Bash文件在许多地方都非常有用，在任何构建过程中都没有什么不同，正如我们将在下面的行中看到的执行一些Docker命令。为了避免在`npm`包中增加更多的复杂性，我们将使用`create-docker-image.sh`文件的调用来执行生成我们的镜像所需的命令。
- en: Creating the bash script
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建bash脚本
- en: 'Now, we are going to add a new directory in our frontend application, to store
    all of the bash script files that our application can have. In this example, we
    will only use one, but in real-world applications, this folder can store a series
    of bash files:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在我们的前端应用程序中添加一个新的目录，用来存储我们的应用程序可能有的所有bash脚本文件。在这个例子中，我们只会使用一个，但在真实的应用程序中，这个文件夹可以存储一系列的bash文件：
- en: Inside of `./Client`, create a new folder, called `_scripts`.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client`中，创建一个名为`_scripts`的新文件夹。
- en: 'Inside of the `./Client/_scripts` folder, create a new file called `create-docker-image.sh`
    and add the following code:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./Client/_scripts`文件夹中，创建一个名为`create-docker-image.sh`的新文件，并添加以下代码：
- en: '[PRE55]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note that you can use any name for your application; we are using `angular-laravel-book` for
    the book example.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以为您的应用程序使用任何名称；我们在书的例子中使用`angular-laravel-book`。
- en: Running npm build scripts
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行npm构建脚本
- en: 'Now, let''s make a small adjustment to the `angular.json` file; remove the
    `Client` folder from the `output` tag:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`angular.json`文件进行一些小的调整；从`output`标签中删除`Client`文件夹：
- en: '[PRE56]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The last step is to run the `build` command, to test and create our application.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是运行`build`命令，以测试和创建我们的应用程序。
- en: 'Open Terminal window inside of the `./Client` folder, and type the following
    command:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在`./Client`文件夹内打开终端窗口，然后键入以下命令：
- en: '[PRE57]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The build process will take a few minutes; at the end, you will see a message
    similar to the following in Terminal:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程将需要几分钟；最后，您将在终端中看到类似以下的消息：
- en: '![](assets/62e99ca8-1ade-4e6f-b92b-a1043f84abc3.png)End-to-end testsIf you
    face errors with permissions, perform the following. Open Terminal window inside
    of the `./Client/_scripts` folder and type `chmod 755 create-docker-image.sh`.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/62e99ca8-1ade-4e6f-b92b-a1043f84abc3.png)端到端测试如果您遇到权限错误，请执行以下操作。在`./Client/_scripts`文件夹内打开终端窗口，然后键入`chmod
    755 create-docker-image.sh`。'
- en: Reviewing Docker commands
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查Docker命令
- en: 'Here are some observations for the end of this chapter:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章结束时的一些观察：
- en: At the beginning of the book, we used Docker to create the development environment.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在书的开头，我们使用Docker创建了开发环境。
- en: In this section, we created an image for our frontend application.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本节中，我们为前端应用程序创建了一个图像。
- en: So, now is the right time to check over what we've done so far.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在是检查我们迄今为止所做的工作的合适时机。
- en: From [Chapter 4](81c1b0fb-3b75-44fa-8f1b-356c9e85c1ce.xhtml), *Building the
    Baseline Application*, we have been using Docker to create the backend API application.
    In this chapter, we have been using Docker to turn the frontend Angular application
    into a Docker image. So, we can assume that we have an image for our backend with
    a server and a database, and another for the frontend application, also known
    as the client-side application.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 从[第4章](81c1b0fb-3b75-44fa-8f1b-356c9e85c1ce.xhtml)开始，*构建基线应用程序*，我们一直在使用Docker创建后端API应用程序。在本章中，我们一直在使用Docker将前端Angular应用程序转换为Docker图像。因此，我们可以假设我们有一个用于后端的图像，其中包含服务器和数据库，另一个用于前端应用程序，也称为客户端应用程序。
- en: This gives us the advantage of hosting the services separately, as we mentioned
    earlier in the book.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们有了分开托管服务的优势，正如我们在本书中早些时候提到的。
- en: Remember that our backend API is totally independent of the frontend application.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们的后端API完全独立于前端应用程序。
- en: Building the application for production
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境构建应用程序
- en: Let's make some adjustments in our `docker-compose.yml` file and add the image
    of the frontend application.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的`docker-compose.yml`文件中做一些调整，并添加前端应用程序的图像。
- en: 'Open `./Client/docker-compose.yml` and add the following code:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`./Client/docker-compose.yml`并添加以下代码：
- en: '[PRE58]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Note the commented lines. As part of the `build` command, we are using the `angular-laravel-book`
    image created with the `npm run build:docker` command. So, if you forget to run
    the build script, every time you run the `docker-compose up -d` command, the image
    will be created (if it does not already exist).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 注意注释行。作为`build`命令的一部分，我们使用了使用`npm run build:docker`命令创建的`angular-laravel-book`图像。因此，如果您忘记运行构建脚本，每次运行`docker-compose
    up -d`命令时，都会创建图像（如果尚不存在）。
- en: Testing Docker images
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Docker图像
- en: Now it is time to check the Docker containers and images.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候检查Docker容器和图像了。
- en: Attention, the next command, will erase all the Docker images and containers
    that you have in your machine. If you used Docker for other projects besides the
    book examples, we recommend that you only delete images and containers related
    to our example application.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，下一个命令将删除您机器上所有的Docker图像和容器。如果您除了本书示例之外还使用Docker进行其他项目，我们建议您只删除与我们示例应用程序相关的图像和容器。
- en: 'The following command erases all images and containers in your machine:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将删除您机器上的所有图像和容器：
- en: '[PRE59]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Let''s check the containers, as follows:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查容器，如下所示：
- en: 'Open Terminal window and type the following command:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口，然后键入以下命令：
- en: '[PRE60]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The output returned will be an empty table.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的输出将是一个空表。
- en: 'Still in Terminal, type the following command:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在终端中，键入以下命令：
- en: '[PRE61]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: At the end, you will again see an empty table.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将再次看到一个空表。
- en: 'Still Terminal, type the following command:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在终端中，键入以下命令：
- en: '[PRE62]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Congratulations! We have successfully built all of the images and containers.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已成功构建了所有图像和容器。
- en: Repeat step 1 to list all containers.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤1以列出所有容器。
- en: 'The result will be the following output:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是以下输出：
- en: '| Container ID | Image | Name |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 容器ID | 图像 | 名称 |'
- en: '| --- | --- | --- |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ContainerID | `chapter-11_php-fpm` | `chapter-11-php-fpm` |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| 容器ID | `chapter-11_php-fpm` | `chapter-11-php-fpm` |'
- en: '| ContainerID | `nginx:alpine` | `chapter-11-webserver` |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| 容器ID | `nginx:alpine` | `chapter-11-webserver` |'
- en: '| ContainerID | `mysql:5.7` | `chapter-11-mysql` |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| 容器ID | `mysql:5.7` | `chapter-11-mysql` |'
- en: '| ContainerID | `angular-laravel-book` | `chapter-11-appserver` |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| 容器ID | `angular-laravel-book` | `chapter-11-appserver` |'
- en: Note that the container names are the same as those we chose in the `docker-compose.yml`
    file.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，容器名称与我们在`docker-compose.yml`文件中选择的名称相同。
- en: 'The following images represent our application:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像代表了我们的应用程序：
- en: '**Frontend**: `angular-laravel-book`'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前端**：`angular-laravel-book`'
- en: '**Backend**: `phpdockerio/php72-fpm`'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后端**：`phpdockerio/php72-fpm`'
- en: We are now ready to deploy on the cloud.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好在云上部署。
- en: Summary
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We now have the necessary baseline code to put our application into production.
    The next steps are the most varied, because a multitude of cloud services are
    able to store Docker images for production websites and applications – and it
    often involves the use of a paid service. But we now have a robust and scalable
    application using the latest technology, namely Angular 6 and Laravel 5.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有必要的基线代码来将我们的应用程序投入生产。接下来的步骤是最多样化的，因为许多云服务都能够存储用于生产网站和应用程序的Docker图像，通常涉及使用付费服务。但是现在我们有一个使用最新技术（即Angular
    6和Laravel 5）构建的强大和可扩展的应用程序。
- en: We have come a long way since the start of this book, explaining and introducing
    advanced web development techniques. You are now able to create an application
    from scratch, all the way to deployment.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 自从本书开始以来，我们已经走了很长的路，解释和介绍了先进的Web开发技术。现在你能够从头开始创建一个应用程序，一直到部署。
- en: Make sure to always keep yourself up to date, and keep in mind that consistent
    code can always help you.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 确保始终保持自己的最新状态，并牢记一致的代码总是能帮助你。
