- en: Chapter 8. Querying the Database with the Eloquent ORM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。使用Eloquent ORM查询数据库
- en: In the previous chapters, you learned how build the basic components of an application.
    In this chapter the Eloquent ORM, another one of the best features that makes
    Laravel so popular, will be introduced.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，您学习了如何构建应用程序的基本组件。在本章中，将介绍Eloquent ORM，这是使Laravel如此受欢迎的最佳功能之一。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Basic query statements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本查询语句
- en: One-to-one, one-to-many, and many-to-many relations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一对一，一对多和多对多关系
- en: Polymorphic relations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多态关系
- en: Eager loading
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 急切加载
- en: An ORM, or object relational mapping, explained in the simplest sense, turns
    a table into a class, its columns into attributes, and its rows into instances
    of that class. It creates an abstraction layer between the developer and the database
    and allows for easier programming, since it uses the familiar object-oriented
    paradigm.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ORM，或对象关系映射，在最简单的意义上解释，将表转换为类，将其列转换为属性，并将其行转换为该类的实例。它在开发人员和数据库之间创建了一个抽象层，并允许更容易的编程，因为它使用熟悉的面向对象范式。
- en: 'We shall assume that we have a posts table with the following structure:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设有一个带有以下结构的帖子表：
- en: '| **id** | **contents** | **author_id** |   |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| **id** | **contents** | **author_id** |   |'
- en: 'To illustrate this example, the following would be the representation of a
    posts table:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个例子，以下将是帖子表的表示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To add in the `id`, `contents`, and `author_id` attributes, we will add the
    following code to the class:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加`id`，`contents`和`author_id`属性，我们将在类中添加以下代码：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This gives us an overview of how a table may be represented by a class: the
    `Post` class represents an entity that has a collection of **posts**.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们一个关于如何用类表示表的概述：`Post`类表示一个具有**posts**集合的实体。
- en: If the active record pattern was followed, then Eloquent can automatically manage
    all of the class names, key names, and their related relations. The power of Eloquent
    lies in its ability to give the programmer the ability to use object-oriented
    methods to manage the relations between the classes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遵循了活动记录模式，那么Eloquent可以自动管理所有类名、键名和它们的相关关系。Eloquent的强大之处在于它能够让程序员使用面向对象的方法来管理类之间的关系。
- en: Basic operations
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本操作
- en: We will now discuss some of the basic operations. There are virtually hundreds
    of ways to use Eloquent, and certainly every developer will use Eloquent in the
    best way for their project. The following techniques are the basic building blocks
    upon which more complex queries may be developed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将讨论一些基本操作。使用Eloquent有几乎无数种方式，当然每个开发人员都会以最适合其项目的方式使用Eloquent。以下技术是更复杂查询的基本构建块。
- en: Finding one
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找一个
- en: 'One of the most basic operations is to perform the following query:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的操作之一是执行以下查询：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is accomplished by using the `find()` method.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过使用`find()`方法实现的。
- en: 'The `Room` facade is called with the `find` method, which accepts the ID as
    an argument:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`find`方法调用`Room`外观，该方法接受ID作为参数：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since Eloquent is based on the fluent query builder, any fluent method may be
    mixed and matched. Some of the fluent methods are chainable and others execute
    the query.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Eloquent基于流畅的查询构建器，任何流畅的方法都可以混合和匹配。一些流畅的方法是可链接的，而其他方法执行查询。
- en: The `find()` method actually executes the query, so it always needs to be at
    the end of the expression.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`find()`方法实际上执行查询，因此它总是需要在表达式的末尾。'
- en: 'If the ID of the model is not found, then nothing is returned. To force a `ModelNotFoundException`,
    which can then be trapped to perform some other operation such as logging, add
    `OrFail` as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未找到模型的ID，则不返回任何内容。要强制`ModelNotFoundException`，然后可以捕获它以执行其他操作，例如记录日志，添加`OrFail`如下：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The where method
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: where方法
- en: 'To query an attribute (column) other than ID, use the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要查询除ID以外的属性（列），请使用以下命令：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Use the `where` method followed by the `get()` method:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`where`方法后跟`get()`方法：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `like` comparator may be used as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`like`比较器可以如下使用：'
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Chaining functions
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接函数
- en: 'Multiple where methods can be chained as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 多个where方法可以链接如下：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding command produces the following query:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令产生以下查询：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice that if the `where` comparator is `=` (equals), then the second parameter
    (the comparator) is not needed, and the second part of the comparison is passed
    into the function. Also, note that an `and` operation is added between the two
    `where` methods. To achieve an `or` operation, the following change has to be
    made to the code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果`where`比较器是`=`（相等），则不需要第二个参数（比较器），并且比较的第二部分传递到函数中。还要注意，在两个`where`方法之间添加了`and`操作。要实现`or`操作，必须对代码进行以下更改：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that `or` is added to the `where` creating `orWhere()`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`or`被添加到`where`创建`orWhere()`。
- en: Finding all
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找所有
- en: 'To find all of the rooms, the `all()` method is used in place of `find`. Notice
    that this method actually executes the query:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到所有房间，使用`all()`方法代替`find`。请注意，此方法实际上执行查询：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To limit the number of rooms, the `take` method is used in place of `find`.
    Since `take` is chainable, `get` is needed to execute the query:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制房间的数量，使用`take`方法代替`find`。由于`take`是可链接的，需要使用`get`来执行查询：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To achieve pagination, the following query may be used:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现分页，可以使用以下查询：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'By default, the preceding query will return a JSON object as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，上述查询将返回一个JSON对象，如下所示：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Attributes such as `total`, `per_page`, `current_page`, and `last_page` are
    used to give the developer an easy way to implement paging, while the array of
    data is returned inside of an array called `data`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 属性，如`total`，`per_page`，`current_page`和`last_page`，用于为开发人员提供一种简单的实现分页的方法，而数据数组则返回在名为`data`的数组中。
- en: Eloquent relations
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优雅的关系
- en: Relationships such as one-to-one, one-to-many (or many-to-one), and many-to-many
    are familiar to database programmers. Laravel's Eloquent has brought these concepts
    into an object-oriented environment. Additionally, Eloquent has even more powerful
    tools such as polymorphic relations, where entities can be related to more than
    one other entity. In the following examples, we will see the relationship between
    accommodations, rooms, and amenities.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如一对一、一对多（或多对一）和多对多之类的关系对于数据库程序员来说是熟悉的。Laravel的Eloquent已经将这些概念带入了面向对象的环境中。此外，Eloquent还有更强大的工具，比如多态关系，其中实体可以与多个其他实体相关联。在接下来的示例中，我们将看到住宿、房间和便利设施之间的关系。
- en: '![Eloquent relations](graphics/B04559_08_01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Eloquent关系](graphics/B04559_08_01.jpg)'
- en: One-to-one
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一对一
- en: 'The first relation is one-to-one. In our example software, we can use the example
    of a room in our accommodation. A room may only (at least easily) belong to one
    accommodation, so the room *belongs to* the accommodation. Inside the `Room` Eloquent
    model, the following code tells Eloquent that the room belongs to the `accommodation`
    function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个关系是一对一。在我们的示例软件中，我们可以使用我们住宿中的房间的例子。一个房间可能只（至少很容易）属于一个住宿，所以房间*属于*住宿。在`Room`
    Eloquent模型中，以下代码告诉Eloquent房间属于`accommodation`函数：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Sometimes, the database tables do not follow the active record pattern, especially
    if the programmer inherits a legacy database. If the database used a table called
    `bedroom` instead of `rooms`, then the class would add an attribute to indicate
    the table name:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，数据库表不遵循活动记录模式，特别是如果程序员继承了遗留数据库。如果数据库使用了一个名为`bedroom`而不是`rooms`的表，那么类将添加一个属性来指示表名：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When the following route code is executed, then the `accommodation` object
    will be returned as a JSON object:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行以下路由代码时，`accommodation`对象将以JSON对象的形式返回：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The response will be as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 响应将如下：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'One common mistake is to use the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的错误是使用以下命令：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this case, the programmer expects to return the model. This will return
    the actual `belongsTo` relation and in the context of the RESTful API, there will
    be an error thrown:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，程序员期望返回模型。这将返回实际的`belongsTo`关系，在RESTful API的上下文中，将会抛出错误：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is because Laravel can convert the JSON object to a string, but not a relationship.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Laravel可以将JSON对象转换为字符串，但不能转换为关系。
- en: 'The SQL run is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 运行的SQL如下：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Eloquent tends to favor multiple simpler queries as opposed to doing larger
    joins.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent倾向于使用多个简单的查询，而不是进行更大的连接。
- en: First the room is found. Then, `limit 1` is added because `find` is only used
    to find a single entity or row. Once the `accommodation_id` is found, the next
    query will find the accommodation with that corresponding ID and return the object.
    If the active record pattern was followed, the SQL that Eloquent produces is extremely
    readable.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先找到房间。然后，添加`limit 1`，因为`find`只用于查找单个实体或行。一旦找到`accommodation_id`，下一个查询将找到具有相应ID的住宿并返回对象。如果遵循了活动记录模式，Eloquent生成的SQL非常易读。
- en: One-to-many
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一对多
- en: The second relation is one-to-many. In our example software, we can use the
    example of an accommodation having many rooms. Since rooms may belong to one accommodation,
    then the the accommodation has *many rooms*. Inside the `Accommodation` Eloquent
    model, the following code tells Eloquent that the accommodation has many rooms.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个关系是一对多。在我们的示例软件中，我们可以使用住宿有许多房间的例子。因为房间可能属于一个住宿，那么住宿有*许多房间*。在`Accommodation`
    Eloquent模型中，以下代码告诉Eloquent住宿有许多房间。
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In a similar route, the following code is run. This time, a collection of `rooms`
    objects will be returned as JSON-formatted objects inside an array:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在类似的路由中，运行以下代码。这次，将以JSON格式的对象数组返回一组`rooms`对象：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The response will be the following array:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 响应将是以下数组：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The SQL run is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行的SQL如下：
- en: '[PRE25]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As before, the accommodation is found. The second query will find the rooms
    that belong to that accommodation. A check is added to confirm that the `accommodation_id`
    is not null.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，找到住宿。第二个查询将找到属于该住宿的房间。添加了一个检查以确认`accommodation_id`不为空。
- en: Many-to-many
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多对多
- en: 'In our example software application, the relationship between amenity and room
    is many-to-many. Each room can have many amenities, such as Internet access and
    a Jacuzzi, and each amenity is shared among many rooms: *every room in an accommodation
    could and should have internet access!* The following code, which uses a `belongsToMany`
    relationship, enables an amenity to belong to many rooms:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例软件应用程序中，便利设施和房间之间的关系是多对多的。每个房间可以有许多便利设施，比如互联网接入和按摩浴缸，每个便利设施都在许多房间之间共享：*住宿中的每个房间都可以并且应该有互联网接入！*以下代码使用`belongsToMany`关系，使便利设施可以属于许多房间：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The test route, which tells us how each room has a certain amenity, is written
    as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉我们每个房间都有某个便利设施的测试路由写成如下：
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'A list of rooms is returned:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个房间列表：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The SQL executed is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的SQL如下：
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We recall the `belongToMany` relationship that returns the rooms that have
    a particular amenity:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回忆一下`belongToMany`关系，它返回具有特定便利设施的房间：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Eloquent skillfully gives us the corresponding `belongsToMany` relationship
    to determine which amenities a particular room has. The syntax is exactly the
    same:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent巧妙地给了我们相应的`belongsToMany`关系，以确定特定房间有哪些便利设施。语法完全相同：
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The test route is virtually the same, just substituting `amenities` for `rooms`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 测试路由几乎相同，只是用`rooms`替换`amenities`：
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The result is a list of amenities for the room with ID 1:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是ID为1的房间的便利设施列表：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The query used is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的查询如下：
- en: '[PRE34]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The query, substituting `room_id` for `amenity_id` and `rooms` for `amenities`,
    is clearly parallel.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 查询，用`room_id`替换`amenity_id`，用`rooms`替换`amenities`，显然是并行的。
- en: Has-many-through
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有许多通过
- en: One great feature of Eloquent is "has-many-through". What if the requirements
    of the software change and we are asked to group some of the accommodations together
    into franchises? If an application user would like to search for a room, any of
    the rooms in any of the accommodations that belong to that franchise could be
    found. A franchises table will be added, and a nullable column to the accommodations
    table called `franchise_id` will be added. This will optionally allow for an accommodation
    to belong to a franchise. Rooms already belong to accommodations through the `accommodation_id`
    column.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent 的一个很棒的特性是“has-many-through”。如果软件的需求发生变化，并且我们被要求将一些住宿分组到特许经营店中，该怎么办？如果应用程序用户想要搜索一个房间，那么属于该特许经营店的任何住宿中的任何房间都可以被找到。将添加一个特许经营店表，并在住宿表中添加一个可空列，名为
    `franchise_id`。这将可选地允许住宿属于特许经营店。房间已经通过 `accommodation_id` 列属于住宿。
- en: A room belongs to an `accommodation` through its `accommodation_id` key, while
    an accommodation belongs to a franchise through its `franchise_id` key.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一个房间通过其 `accommodation_id` 键属于一个 `住宿`，而一个住宿通过其 `franchise_id` 键属于一个特许经营店。
- en: 'Eloquent allows us to retrieve the rooms associated to a franchise by using
    `hasManyThrough`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent 允许我们通过使用 `hasManyThrough` 来检索与特许经营店相关联的房间：
- en: '[PRE35]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `hasManyThrough` relationship takes the target or the "has" as its first
    parameter (in this case, the room) and its "through" as the second parameter (in
    this case, the accommodation).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`hasManyThrough` 关系将目标或“拥有”作为其第一个参数（在本例中是房间），将“通过”作为第二个参数（在本例中是住宿）。'
- en: 'The logic stated as a phrase is: *This franchise has many rooms through its
    accommodations*.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作为短语陈述的逻辑是：*这个特许经营店通过其住宿拥有许多房间*。
- en: 'Using the previous test route, the code is written as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用先前的测试路由，代码编写如下：
- en: '[PRE36]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The rooms are returned as an array as would be expected:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的房间是一个数组，正如预期的那样：
- en: '[PRE37]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The queries executed are as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的查询如下：
- en: '[PRE38]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Polymorphic relations
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多态关系
- en: One great feature of Eloquent is the possibility to have an entity whose relationship
    is polymorphic. The two parts of the word, *poly* and *morphic*, are from the
    Greek language. Since *poly* means *many* and *morphic* means *shape*, we can
    now easily imagine a relationship having multiple forms.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent 的一个很棒的特性是拥有一个关系是多态的实体的可能性。这个词的两个部分，*poly* 和 *morphic*，来自希腊语。由于 *poly*
    意味着 *许多*，*morphic* 意味着 *形状*，我们现在可以很容易地想象一个关系有多种形式。
- en: Amenitiable relationships
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设施关系
- en: An amenity in our example software is something that is associated with a room,
    such as a Jacuzzi. Certain amenities, such as covered parking or an airport shuttle
    service, could also relate to an accommodation itself. We could create two pivot
    tables for this, one called `amenity_room` and another called `accommodation_amenity`.
    Another great way to do this is to combine the two into one table and use a field
    to distinguish between the two types or relationship.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例软件中，一个设施是与房间相关联的东西，比如按摩浴缸。某些设施，比如有盖停车场或机场班车服务，也可能与住宿本身相关。我们可以为此创建两个中间表，一个叫做
    `amenity_room`，另一个叫做 `accommodation_amenity`。另一种很好的方法是将两者合并成一个表，并使用一个字段来区分两种类型或关系。
- en: To do this, we will need a field to distinguish between *amenity and room* and
    *amenity and room*, something we could call a relationship type. Laravel's Eloquent
    skillfully handles this automatically.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要一个字段来区分 *设施和房间* 和 *设施和房间*，我们可以称之为关系类型。Laravel 的 Eloquent 能够自动处理这一点。
- en: 'Eloquent uses the suffix `-able` to make this happen. In our example, we would
    create a table that has the following fields:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent 使用后缀 `-able` 来实现这一点。在我们的示例中，我们将创建一个具有以下字段的表：
- en: '`id`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`'
- en: '`name`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`'
- en: '`description`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`'
- en: '`amenitiable_id`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`amenitiable_id`'
- en: '`amenitiable_type`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`amenitiable_type`'
- en: The first three fields are familiar, but two new fields added. One of them will
    contain the ID of either the accommodation or the room.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个字段是熟悉的，但添加了两个新字段。其中一个将包含住宿或房间的 ID。
- en: The Amenity table structure
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设施表结构
- en: 'For example, given a room with ID 5, `amenitiable_id` will be `5` while `amenitiable_type`
    will be `Room`. Given an accommodation with ID 5, `amenitiable_id` will be `5`
    while `amenitiable_type` will be `Accommodation`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，给定 ID 为 5 的房间，`amenitiable_id` 将是 `5`，而 `amenitiable_type` 将是 `Room`。给定 ID
    为 5 的住宿，`amenitiable_id` 将是 `5`，而 `amenitiable_type` 将是 `Accommodation`：
- en: '| id | name | description | amenitiable_id | amenitiable_type |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| id | name | description | amenitiable_id | amenitiable_type |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 1 | Wireless internet | Internet conn. | 5 | Room |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 无线网络 | 网络连接 | 5 | 房间 |'
- en: '| 2 | Covered parking | Parking in garage | 5 | Accommodation |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 有盖停车场 | 车库停车 | 5 | 住宿 |'
- en: '| 3 | Sea view | Ocean view from room | 5 | Room |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 海景 | 房间内海景 | 5 | 房间 |'
- en: The Amenity model
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设施模型
- en: 'In terms of code, the `Amenity` model will now contain an "amenitiable" function:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码方面，`Amenity` 模型现在将包含一个 "amenitiable" 函数：
- en: '[PRE39]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The Accommodation model
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 住宿模型
- en: 'The `Accommodation` model will change the `amenities` method to use `morphMany`
    instead of `hasMany`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`住宿` 模型将更改 `amenities` 方法，使用 `morphMany` 而不是 `hasMany`：'
- en: '[PRE40]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The Room model
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 房间模型
- en: 'The `Room` model will contain the same `morphMany` method:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`Room` 模型将包含相同的 `morphMany` 方法：'
- en: '[PRE41]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, when the amenities are requested for a room or an accommodation, Eloquent
    will automatically distinguish between them:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当要求为房间或住宿请求设施时，Eloquent 将自动区分它们：
- en: '[PRE42]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Each of these functions returns the correct type of amenity for room and for
    accommodation.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数中的每一个都返回了房间和住宿的正确类型的设施。
- en: Many-to-many polymorphic relations
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多对多多态关系
- en: 'It is possible, though, that some amenities could be shared between a room
    and an accommodation. In this case, a many-to-many polymorphic relation is used.
    The pivot table now adds several fields:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一些设施可能在房间和住宿之间共享。在这种情况下，使用多对多多态关系。现在中间表添加了几个字段：
- en: '| amenity_id | amenitiable_id | amenitiable_type |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| amenity_id | amenitiable_id | amenitiable_type |'
- en: '| --- | --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | 5 | Room |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 5 | 房间 |'
- en: '| 1 | 5 | Accommodation |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 5 | 住宿 |'
- en: '| 2 | 5 | Room |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 5 | 房间 |'
- en: '| 2 | 5 | Accommodation |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 5 | 住宿 |'
- en: As illustrated, both the room with ID 5 and the accommodation with ID 5 have
    amenities with IDs 1 and 2.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所示，ID为5的房间和ID为5的住宿都有ID为1和2的设施。
- en: Has relationships
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有关系
- en: 'If we would like to select all of the accommodations that are associated to
    a franchise, the `has()` method is used, where the relation is passed as the parameter:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想选择与特许经营连锁店关联的所有住宿，使用`has()`方法，其中关系作为参数传递：
- en: '[PRE43]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We will get the following JSON array:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下JSON数组：
- en: '[PRE44]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Notice that the `franchise_id` value is 1, which means the accommodations have
    a franchise associated with them. Optionally, a `where` may be added to the `has`
    creating a `whereHas` function. The code is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`franchise_id`的值为1，这意味着住宿与特许经营连锁店相关联。可选地，可以在`has`中添加`where`，创建一个`whereHas`函数。代码如下：
- en: '[PRE45]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Notice that `whereHas` takes a closure as its second parameter.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`whereHas`将闭包作为其第二个参数。
- en: 'This would return only the accommodations where the description contains `Pittsburgh`,
    so the returned array would contain only results like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这将仅返回描述中包含`匹兹堡`的住宿，因此返回的数组将只包含这样的结果：
- en: '[PRE46]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Eager loading
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 贪婪加载
- en: 'Another great mechanism that Eloquent provides is eager loading. If we want
    return all of the franchises together with all of their accommodations, we simply
    need to add an `accommodations` function to our `Franchise` model as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent提供的另一个很棒的机制是贪婪加载。如果我们想要返回所有的特许经营连锁店以及它们的所有住宿，我们只需要在我们的`Franchise`模型中添加一个`accommodations`函数，如下所示：
- en: '[PRE47]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, by adding a `with` clause to the statement, the accommodations are returned
    for each franchise:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过向语句添加`with`子句，为每个特许经营连锁店返回住宿：
- en: '[PRE48]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We can also list the rooms associated with each accommodation as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以列出与每个住宿相关的房间，如下所示：
- en: '[PRE49]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If we want to return the rooms nested inside of the accommodation array, then
    the following syntax should be used:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要返回嵌套在住宿数组中的房间，则应使用以下语法：
- en: '[PRE50]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We will get the following output:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE51]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In this example, `rooms` is contained within `accommodation`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`rooms`包含在`accommodation`中。
- en: Conclusion
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Laravel's ORM is powerful. In fact, there are too many types of operations to
    list within a single book. The simplest queries can be accomplished with a few
    keystrokes.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的ORM非常强大。事实上，有太多类型的操作无法在一本书中列出。最简单的查询可以用几个按键完成。
- en: 'Laravel''s Eloquent command gets converted into fluent commands, so if something
    more complicated is desired, then the fluent syntax may be used. If a very complicated
    query needs to be performed, then the `DB::raw()` function can even be used. This
    will allow exact strings to be used inside the query builder. Here is an example:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的Eloquent命令被转换为流畅的命令，因此如果需要更复杂的操作，可以使用流畅的语法。如果需要执行非常复杂的查询，甚至可以使用`DB::raw()`函数。这将允许在查询构建器中使用精确的字符串。以下是一个例子：
- en: '[PRE52]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This returns just the number of hotels:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这将只返回酒店的数量：
- en: '[PRE53]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Learning to design the software, starting with the domain and then thinking
    about which entities are involved in that domain, will help a developer think
    in an object-oriented manner. Having a list of entities leads to the creation
    of the table, so the actual creation of the schema will be performed last. This
    approach may take some getting used to. Understanding Eloquent relationships is
    key to being able to produce expressive, readable statements that query the database
    while hiding away the complexity.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 学习设计软件，从领域开始，然后考虑该领域涉及的实体，将有助于开发人员以面向对象的方式思考。拥有实体列表会导致表的创建，因此实际的模式创建将在最后执行。这种方法可能需要一些时间来适应。理解Eloquent关系对于能够生成表达性、可读性的查询数据库语句至关重要，同时隐藏复杂性。
- en: Another reason why Eloquent is extremely useful is in the case of a legacy database.
    If the ORM is applied in a situation where the tables have nonstandard names,
    the keys are not named by the same name, or the column names are simply not easily
    understandable, Eloquent provides the developer with tools to actually help homogenize
    the table names and field names, and perform the relations by providing attribute
    getters and setters.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Eloquent极其有用的另一个原因是在遗留数据库的情况下。如果ORM应用在表名不符合标准、键名不相同或列名不易理解的情况下，Eloquent提供了开发人员工具，实际上帮助使表名和字段名同质化，并通过提供属性的getter和setter来执行关系。
- en: 'For example, if the field names are `fname1` and `fname2`, we can use a get
    attribute function inside our model, where the syntax is `get` followed by the
    desired name to use in the application and the attribute. So, in the case of `fname1`,
    the function would be added as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果字段名为`fname1`和`fname2`，我们可以在我们的模型中使用一个获取属性函数，语法是`get`后跟应用中要使用的所需名称和属性。因此，在`fname1`的情况下，函数将被添加如下：
- en: '[PRE54]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Functions such as these are Eloquent's real selling point. In this chapter,
    you learned how to find data inside your database by using entity models, limiting
    the results through the addition of `where`, relationships, powerful conventions
    such as polymorphic relationships, and auxiliary helpers such as pagination.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数是Eloquent的真正卖点。在本章中，您学会了如何通过使用实体模型在数据库中查找数据，通过添加`where`、关系、强大的约定（如多态关系）以及辅助工具（如分页）来限制结果。
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, the Eloquent ORM was demonstrated in detail. Eloquent is an
    object-oriented wrapper to what actually happens between the database and the
    code. Since the Fluent query builder is easily accessible, it is important to
    be familiar with how the queries are written. This will help in debugging and
    also cover complex cases where Eloquent is not adequate. In this chapter, most
    of the concepts of Eloquent have been discussed. However, there are many more
    methods available, so further reading is encouraged.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，详细演示了Eloquent ORM。Eloquent是一个面向对象的包装器，用于实际发生在数据库和代码之间的事情。由于Fluent查询构建器很容易访问，因此熟悉查询的编写方式非常重要。这将有助于调试，并且还涵盖了Eloquent不足的复杂情况。在本章中，讨论了大部分Eloquent的概念。然而，还有许多其他可用的方法，因此鼓励进一步阅读。
- en: In the next chapter, among other topics, you will learn how to scale the database
    to perform better on a larger scale.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，除了其他主题，您将学习如何扩展数据库以在更大规模上表现更好。
