- en: Chapter 5. Design Patterns in Laravel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 Laravel中的设计模式
- en: In this chapter, we will discuss the design patterns Laravel uses, and how and
    why are they used, with examples.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Laravel使用的设计模式，以及它们的使用方式和原因，以示例说明。
- en: 'The topics that will be discussed in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: Design patterns used in Laravel
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Laravel中使用的设计模式
- en: The reasons these patterns are used in Laravel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Laravel中使用这些模式的原因
- en: The Builder (Manager) pattern
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建造者（管理者）模式
- en: This design pattern aims to gain simpler, reusable objects. Its goal is to separate
    bigger and more convoluted object construction layers from the rest so that the
    separated layers can be used in different layers of the application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计模式旨在获得更简单、可重用的对象。其目标是将更大、更复杂的对象构建层与其余部分分离，以便分离的层可以在应用程序的不同层中使用。
- en: The need for the Builder (Manager) pattern
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建造者（管理者）模式的需求
- en: In Laravel, the `AuthManager` class needs to create some secure elements to
    reuse with selected auth storage drivers such as cookie, session, or custom elements.
    To achieve this, the `AuthManager` class needs to use storage functions such as
    `callCustomCreator()` and `getDrivers()` from the `Manager` class.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel中，`AuthManager`类需要创建一些安全元素，以便与选定的身份验证存储驱动程序（如cookie、会话或自定义元素）重用。为了实现这一点，`AuthManager`类需要使用`Manager`类的存储函数，如`callCustomCreator()`和`getDrivers()`。
- en: 'Let''s see how the Builder (Manager) pattern is used in Laravel. To see what
    happens in this pattern, navigate to the `vendor/Illuminate/Support/Manager.php`
    and `vendor/Illuminate/Auth/AuthManager.php` files, as shown in the following
    code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看建造者（管理者）模式在Laravel中的使用。要查看此模式中发生了什么，请导航到`vendor/Illuminate/Support/Manager.php`和`vendor/Illuminate/Auth/AuthManager.php`文件，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, navigate to the `/vendor/Illuminate/Auth/AuthManager.php` file, as shown
    in the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导航到`/vendor/Illuminate/Auth/AuthManager.php`文件，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we can see in the preceding code, the `AuthManager` class extends from the
    `Manager` class. Laravel ships with a basic auth mechanism. So, we need to store
    auth credentials in a database. First, the class checks our default database configuration
    with the `AuthManager::setDefaultDriver()` function. This function actually uses
    the `Manager` class for eloquent operations. All the database and auth options
    (such as cookie name) are obtained from the application's config file, except
    the auth model table name.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，`AuthManager`类是从`Manager`类继承而来的。Laravel自带基本的身份验证机制。因此，我们需要将身份验证凭据存储在数据库中。首先，该类使用`AuthManager::setDefaultDriver()`函数检查我们的默认数据库配置。这个函数实际上使用`Manager`类进行eloquent操作。除了身份验证模型表名，所有数据库和身份验证选项（如cookie名称）都是从应用程序的配置文件中获取的。
- en: 'To understand this Builder (Manager) pattern better, we can take the following
    presentation as an example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这种建造者（管理者）模式，我们可以以以下演示为例：
- en: '![The need for the Builder (Manager) pattern](Image00009.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![建造者（管理者）模式的需求](Image00009.jpg)'
- en: 'In the preceding example diagram, we assumed that we want to fetch data, for
    example, pizza, from the previous illustration. The client ordered two pizzas:
    an Asian pizza and/or a Chinese pizza. This pizza is requested through the `Waiter`
    class. The `PizzaBuilder` class (which is the `Manager` class, in our case) made
    a pizza according to the `AuthRequest` request, in our case, and delivered the
    pizza through the waiter.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例图中，我们假设我们想要从前面的示例中获取比萨等数据。客户点了两份比萨：一份亚洲比萨和/或一份中国比萨。这个比萨是通过`Waiter`类请求的。`PizzaBuilder`类（在我们的例子中是`Manager`类）根据`AuthRequest`请求制作了一份比萨，并通过服务员将比萨送到了客户那里。
- en: Also, you can navigate to `vendor/Illuminate/Session/SessionManage.php` and
    check for the use of this pattern in Laravel Framework.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以导航到`vendor/Illuminate/Session/SessionManage.php`，查看在Laravel框架中使用此模式。
- en: 读累了记得休息一会哦~
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
- en: The Factory pattern
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工厂模式
- en: In this subsection, we'll examine the Factory pattern and its usage in Laravel
    Framework. The Factory pattern is based on creating template method objects, which
    is based on defining the algorithm of a class in a subclass to implement an algorithm.
    There is a subclass, which is derived from a big superclass, in this pattern structure.
    The main class, which we may call a superclass, only holds major and generic logic;
    the subclasses are derived from this superclass. As a result, there may be more
    than one subclass inherited from this superclass, which are aimed at different
    purposes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一小节中，我们将研究工厂模式及其在Laravel框架中的使用。工厂模式是基于创建模板方法对象的，这是基于在子类中定义类的算法来实现算法。在这种模式结构中，有一个从大的超类派生出来的子类。主类，我们可以称之为超类，只包含主要和通用的逻辑；子类是从这个超类派生出来的。因此，可能会有多个子类从这个超类中继承，这些子类旨在不同的目的。
- en: Unlike other design patterns used in Laravel, the `Factory` method is more customizable.
    For an extended subclass plus main class, you don't need to set a new class, just
    a new operation. This method is beneficial if the class or its components usually
    change, or methods need to be overridden, much like initialization.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与Laravel中使用的其他设计模式不同，`Factory`方法更具可定制性。对于扩展的子类加上主类，您不需要设置一个新的类，只需要一个新的操作。如果类或其组件通常发生变化，或者需要重写方法，就像初始化一样，这种方法是有益的。
- en: While creating a design, developers usually start with using the Factory pattern
    in their applications. Such a pattern is changed into an abstract Factory, Builder,
    or Prototype pattern. Unlike the Factory pattern, the Prototype pattern requires
    initialization once. Due to the pattern's architecture, the methods of the Factory
    pattern (Factory methods) are usually called inside template methods.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建设计时，开发人员通常从在其应用程序中使用工厂模式开始。这种模式会转变为抽象工厂、建造者或原型模式。与工厂模式不同，原型模式需要初始化一次。由于模式的架构，工厂模式的方法（工厂方法）通常在模板方法内部调用。
- en: 'There are some differences between the Factory pattern and the Abstract Factory
    or Prototype pattern. They are as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂模式与抽象工厂或原型模式之间存在一些差异。它们如下：
- en: Unlike an Abstract Factory pattern, the Factory pattern can't be implemented
    using the Prototype pattern.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与抽象工厂模式不同，工厂模式不能使用原型模式实现。
- en: Unlike the Prototype pattern, the Factory pattern doesn't need an initialization,
    but it needs subclassing. This is an advantage when compared with other patterns.
    Thanks to this approach, the Factory pattern can return an injected subclass instead
    of an object.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与原型模式不同，工厂模式不需要初始化，但需要子类化。与其他模式相比，这是一个优势。由于这种方法，工厂模式可以返回一个注入的子类而不是一个对象。
- en: Since the classes designed with the Factory pattern may return subclasses directly
    for other components, no other class or component needs to know and access the
    constructor methods. Due to this, it's recommended that all constructor methods
    and variables should be protected or private.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于使用工厂模式设计的类可能直接返回子类给其他组件，因此不需要其他类或组件知道和访问构造方法。因此，建议所有构造方法和变量都应该是受保护的或私有的。
- en: There is another thing to take into consideration. As this pattern might return
    subclasses aimed for the exact need, it's not recommended to make a new instance
    of the class using this pattern using the key new.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有一件事需要考虑。由于这种模式可能返回针对确切需求的子类，因此不建议使用关键字new使用此模式的类创建新实例。
- en: The need for the Factory pattern
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工厂模式的需求
- en: Laravel ships various types of validation rules with the `Validation` class.
    When we develop applications, we usually need to validate data as we proceed.
    To do this, a common approach is to set the validation rules in the Model and
    call them from the Controller. By "rules" here, we mean both validation type and
    its range.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel使用`Validation`类提供各种类型的验证规则。当我们开发应用程序时，通常需要在进行过程中验证数据。为了做到这一点，一个常见的方法是在模型中设置验证规则，并从控制器中调用它们。这里所说的“规则”既指验证类型又指其范围。
- en: Sometimes, we need to set custom rules and custom error messages to validate
    the data. Let's examine how it works and how we are able to extend the `Validation`
    class to create custom rules. The Controller in the MVC pattern can also be described
    as a bridge between Model and View. This can best be explained with a live world
    example.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要设置自定义规则和自定义错误消息来验证数据。让我们看看它是如何工作的，以及我们如何能够扩展`Validation`类来创建自定义规则。MVC模式中的控制器也可以被描述为模型和视图之间的桥梁。这可以通过一个现实世界的例子来最好地解释。
- en: Let's assume we have a news aggregation website. In the administration panel,
    an administrator tries to delete the news item. In the SOLID design pattern, this
    happens if an admin clicks on the **Delete News** button.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个新闻聚合网站。在管理面板中，管理员试图删除新闻项目。在SOLID设计模式中，如果管理员点击**删除新闻**按钮，就会发生这种情况。
- en: 'First, as an example to check, let''s open the `vendor/Illuminate/Validation/Factory.php`
    file, as shown in the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，作为一个检查的例子，让我们打开`vendor/Illuminate/Validation/Factory.php`文件，如下所示：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As we can see in the preceding code, the `Validation Factory` class is constructed
    with the `Translator` class and an IoC container. The `addExtensions()` function
    is set after this. This method includes the user-defined extensions to a `Validator`
    instance, thus allowing us to write the template (structure) to create the `Validator`
    class''s extensions. The functions, which are public, allow us to implement the
    `Translator` class, and by this we mean that they allow us to write custom validation
    rules and messages. Refer to the following **CarFactory** diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的代码中所看到的，`Validation Factory`类是使用`Translator`类和一个IoC容器构建的。在此之后设置了`addExtensions()`函数。这个方法包括用户定义的扩展到`Validator`实例，从而允许我们编写创建`Validator`类的扩展的模板（结构）。这些公共函数允许我们实现`Translator`类，也就是说它们允许我们编写自定义验证规则和消息。参考以下**CarFactory**图表：
- en: '![The need for the Factory pattern](Image00010.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![工厂模式的需求](Image00010.jpg)'
- en: In the preceding diagram, you can see that all cars are based on **CarFactory**
    (the basics of all cars), regardless of the brand. For all brands, the main process
    is the same (all cars have an engine, tires, brakes, bulbs, gear, and so on).
    You may want either a **Suzuki** car or a **Toyota** car, and depending on this
    choice, the **SuzukiFactory** or **ToyotaFactory** creates a **Suzuki** car or
    a **Toyota** car from the **CarFactory** .
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，你可以看到所有的汽车都是基于**CarFactory**（所有汽车的基础）的，无论品牌如何。对于所有品牌，主要过程是相同的（所有汽车都有发动机、轮胎、刹车、灯泡、齿轮等等）。你可能想要一辆**Suzuki**汽车或一辆**Toyota**汽车，根据这个选择，**SuzukiFactory**或**ToyotaFactory**从**CarFactory**创建一个**Suzuki**汽车或**Toyota**汽车。
- en: The Repository pattern
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储库模式
- en: The Repository pattern is usually used to create an interface between two distinct
    layers of an application. In our case, the developers of Laravel use this pattern
    to create an abstract layer between `NamespaceItemResolver` (the class that resolves
    the namespaces and understands which file is in which namespace) and `Loader`
    (a class that requires and loads another class into the application). The `Loader`
    class simply loads the given namespace's configuration group. As you might know,
    nearly all of the Laravel Framework code is developed using namespaces.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库模式通常用于在应用程序的两个不同层之间创建接口。在我们的情况下，Laravel的开发人员使用这种模式来在`NamespaceItemResolver`（解析命名空间并了解哪个文件在哪个命名空间中）和`Loader`（需要并将另一个类加载到应用程序中的类）之间创建一个抽象层。`Loader`类简单地加载给定命名空间的配置组。正如你可能知道的，几乎所有的Laravel框架代码都是使用命名空间开发的。
- en: The need for the Repository pattern
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储库模式的需求
- en: Let's assume you're trying to fetch a product from your database using Eloquent
    ORM. The method will be something like `Product::find(1)` in your Controller.
    For abstraction purposes, this approach is not ideal. If you now put a code such
    as this, your Controller knows you're using Eloquent, which ideally shouldn't
    happen in a good and abstracted structure. If you want to contain the changes
    done to the database scheme so that the calls outside of the class do not reference
    to the fields directly but through a repository, you have to dig all codes one
    by one.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在尝试使用Eloquent ORM从数据库中获取产品。在您的控制器中，该方法将是`Product::find(1)`。出于抽象目的，这种方法并不理想。如果您现在放置这样的代码，您的控制器知道您正在使用Eloquent，这在一个良好和抽象的结构中理想情况下不应该发生。如果您想要包含对数据库方案所做的更改，以便类外的调用不直接引用字段而是通过存储库，您必须逐个查找所有代码。
- en: 'Now, let''s create an `imaginart` repository interface (a list of methods that
    will be used in the pattern) for the users. Let''s call it `UserRepository.php`
    :'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为用户创建一个`imaginart`存储库接口（将在模式中使用的方法列表）。让我们称之为`UserRepository.php`。
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, you can see that all the methods'' names used in the Model are declared
    one by one. Now, let''s create the repository and name it `EloquentUserRepository.php`
    :'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到模型中使用的所有方法名称都是逐个声明的。现在，让我们创建存储库并将其命名为`EloquentUserRepository.php`：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, this repository class implemented our `UserRepository` that
    we created earlier. Now, you need to bind the two so that when the `UserRepositoryInterface`
    interface is called, we actually acquire `EloquentUserRepository` .
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个存储库类实现了我们之前创建的`UserRepository`。现在，您需要绑定这两个，这样当调用`UserRepositoryInterface`接口时，我们实际上获得了`EloquentUserRepository`。
- en: 'This can be done either with a service provider or by a simple command, such
    as the following, in Laravel:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过服务提供商或Laravel中的简单命令来完成，例如：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, in your Controllers, you can simply use the repositories as `Use Arda\Storage\User\UserRepository
    as User` .
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您的控制器中，您可以简单地使用存储库作为`Use Arda\Storage\User\UserRepository as User`。
- en: Every time the controller uses a `User::find($id)` code, it first goes to the
    interface, and then goes to the binded repository, which is the Eloquent repository
    in our case. Through this, it goes to the Eloquent ORM. This way, it's impossible
    for the Controller to know how the data is fetched.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每当控制器使用`User::find($id)`代码时，它首先进入接口，然后进入绑定的存储库，这在我们的情况下是Eloquent存储库。通过这种方式，它进入Eloquent
    ORM。这样，控制器就不可能知道数据是如何获取的。
- en: The Strategy pattern
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略模式
- en: The best approach to describe the Strategy pattern is through a problem.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 描述策略模式的最佳方法是通过一个问题。
- en: The need for the Strategy pattern
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略模式的需求
- en: In this design pattern, the logic is extracted from complex classes into easier
    components so that they can be replaced easily with simpler methods. For example,
    you want to show popular blog posts on your website. In a classic approach, you
    will calculate the popularity, make the pagination, and list the items relative
    to the current paginated offset and popularity, and make all calculations in a
    simple class. This pattern aims to separate each algorithm into separate components
    so that they can be reused or combined in other parts of the application easily.
    This approach also brings flexibility and makes it easy to change an algorithm
    system wide.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种设计模式中，逻辑从复杂的类中提取到更简单的组件中，以便它们可以轻松地用更简单的方法替换。例如，您想在您的网站上显示热门博客文章。在传统方法中，您将计算受欢迎程度，进行分页，并列出与当前分页偏移和受欢迎程度相关的项目，并在一个简单的类中进行所有计算。这种模式旨在将每个算法分离成单独的组件，以便它们可以轻松地在应用程序的其他部分中重用或组合。这种方法还带来了灵活性，并使全局系统中更改算法变得容易。
- en: 'To understand this better, let''s take a look at the following loader interface
    located at `vendor/Illuminate/Config/LoaderInterface` :'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，让我们来看一下位于`vendor/Illuminate/Config/LoaderInterface`的以下加载器接口：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When we dig the code, the `LoaderInterface` works will follow a certain structure.
    The `getNamespaces()` function loads all namespaces defined in the `app\config\app.php`
    file. The `addNamespace()` method passes the namespaces to the `load()` function
    as grouped. If the `exist()` function returns `true` , there is at least one configuration
    group that belongs to a given namespace. For the full structure, you can refer
    to the repository section of this chapter. As a result, you can easily call the
    method that you need through an interface of the `Loader` class to load various
    configuration options. If we download a package through the composer, or implement
    a package to an application that is being authored, the pattern makes all of them
    available and loads them from their own namespaces without any conflicts, though
    they are inside different namespaces or have the same filenames.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看代码时，`LoaderInterface`的工作将遵循一定的结构。`getNamespaces()`函数加载`app\config\app.php`文件中定义的所有命名空间。`addNamespace()`方法将命名空间作为分组传递给`load()`函数。如果`exist()`函数返回`true`，则至少有一个配置组属于给定命名空间。有关完整结构，您可以参考本章的存储库部分。因此，您可以通过`Loader`类的接口轻松调用您需要的方法，以加载各种配置选项。如果我们通过composer下载一个包，或者将一个包实现到正在编写的应用程序中，该模式使所有这些包都可用，并且可以从它们自己的命名空间中加载，而不会发生冲突，尽管它们位于不同的命名空间或具有相同的文件名。
- en: The Provider pattern
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供程序模式
- en: The Provider pattern was formulated by Microsoft for use in the ASP.NET Starter
    Kits and formalized in .NET Version 2.0 ([http://en.wikipedia.org/wiki/Provider_model](http://en.wikipedia.org/wiki/Provider_model)
    ). It is a mid layer between an API class and the Business Logic/Data Abstraction
    Layer of the application. The provider is the implementation of the API separated
    from the API itself.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 提供程序模式是由微软为在ASP.NET Starter Kits中使用而制定的，并在.NET版本2.0中正式化（[http://en.wikipedia.org/wiki/Provider_model](http://en.wikipedia.org/wiki/Provider_model)）。它是API类和应用程序的业务逻辑/数据抽象层之间的中间层。提供程序是API的实现与API本身分离开来的。
- en: This pattern, its aims, and its usage are quite similar to the Strategy pattern.
    This is why many developers are already discussing whether to accept this approach
    as a design pattern.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式及其目标和用法与策略模式非常相似。这就是为什么许多开发人员已经在讨论是否接受这种方法作为一种设计模式。
- en: 'To understand these patterns better, let''s open `vendor/Illuminate/Auth/AuthServiceProvider.php`
    and `vendor/Illuminate/Hashing/HashServiceProvider.php` :'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这些模式，让我们打开`vendor/Illuminate/Auth/AuthServiceProvider.php`和`vendor/Illuminate/Hashing/HashServiceProvider.php`：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, both the classes extend `ServiceProvider` . The `AuthServiceProvider`
    class allows us to provide all services to `AuthManager` when an authentication
    request, such as checking whether a cookie and session is created or whether the
    content is invalid, is sent. After the authentication service has been requested,
    the developer can define whether a session or cookie is set through the response
    through `AuthDriver` .
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这两个类都扩展了`ServiceProvider`。`AuthServiceProvider`类允许我们在进行身份验证请求时向`AuthManager`提供所有服务，比如检查是否创建了cookie和会话，或者内容是否无效。在请求身份验证服务之后，开发人员可以通过`AuthDriver`来定义是否通过响应设置会话或cookie。
- en: However, `HashServiceProvider` provides us with the related methods when a secure
    hash request is done so that we can use, fetch, check, or do other things with
    these hashes. Both providers return the values as an array.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`HashServiceProvider`在进行安全哈希请求时为我们提供了相关的方法，这样我们就可以使用、获取、检查或对这些哈希进行其他操作。这两个提供者都将值作为数组返回。
- en: The Facade pattern
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外观模式
- en: The Facade (façade) pattern allows a developer to unite various complicated
    interfaces into a single class interface. This pattern also allows you to wrap
    various methods from various classes into a single structure.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 外观（façade）模式允许开发人员将各种复杂的接口统一到一个单一的类接口中。这种模式还允许您将来自各种类的各种方法包装成一个单一的结构。
- en: '![The Facade pattern](Image00011.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![外观模式](Image00011.jpg)'
- en: In Laravel 4, as you may already know, almost every method looks like a static
    method, for example, `Input::has()` , `Config::get()` , `URL::route()` , `View::make()`
    , and `HTML::style()` . However, they are not static methods. If they were static
    methods, it would be quite hard to make tests for them all. They are actually
    the mimics of this behavior. In the background, with the help of the IoC Container
    (a way to inject dependencies into a class), Laravel actually calls another class(es)
    through a `Facade` class. The Facade base class benefits from PHP's own `__callStatic()`
    magic method to call the required methods, such as static methods.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel 4中，你可能已经知道，几乎每个方法都看起来像一个静态方法，例如，`Input::has()`，`Config::get()`，`URL::route()`，`View::make()`和`HTML::style()`。然而，它们并不是静态方法。如果它们是静态方法，那么对它们进行测试将会非常困难。它们实际上是这种行为的模拟。在后台，借助于IoC容器（一种将依赖项注入到类中的方法），Laravel实际上通过`Facade`类调用另一个类（们）。Facade基类受益于PHP自己的`__callStatic()`魔术方法来调用所需的方法，比如静态方法。
- en: 'For example, let''s assume we have a method called `URL::to(''home'')` . Let''s
    check what the URL is and what it refers to. First, let''s open `app/config/app.php`
    . In the aliases array, there is a line like the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个名为`URL::to('home')`的方法。让我们检查一下URL是什么，它指的是什么。首先，让我们打开`app/config/app.php`。在别名数组中，有一行如下：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, if we call `URL::to('home')` , we actually call `Illuminate\Support\Facades
    \URL::to('home')` .
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们调用`URL::to('home')`，我们实际上调用的是`Illuminate\Support\Facades\URL::to('home')`。
- en: 'Now, let''s check what''s inside the file. Open the `vendor/Illuminate/Support/Facades/URL.php`
    file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看文件里面有什么。打开`vendor/Illuminate/Support/Facades/URL.php`文件：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, the class actually extends from the `Facade` class, and there
    is no static method called `to()` . Instead, there is a method called `getFacadeAccessor()`
    , which returns the string `url` . The `getFacadeAccessor()` method's purpose
    is to define what to inject. This way, Laravel understands that this class is
    looking for `$app['url']` .
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，该类实际上是从`Facade`类继承而来的，并且没有名为`to()`的静态方法。相反，有一个名为`getFacadeAccessor()`的方法，它返回字符串`url`。`getFacadeAccessor()`方法的目的是定义要注入什么。这样，Laravel就明白了这个类正在寻找`$app['url']`。
- en: 'This is defined in `vendor/Illuminate/Routing/RoutingServiceProvider.php` ,
    as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在`vendor/Illuminate/Routing/RoutingServiceProvider.php`中定义的，如下所示：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you can see, it returns a new instance of the `UrlGenerator` class in the
    same namespace, which holds the `to()` method we''re looking for:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，它返回了同一命名空间中`UrlGenerator`类的一个新实例，其中包含我们正在寻找的`to()`方法：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So each time you use a method like this, Laravel first goes to and checks the
    facade, it then checks what's injected through, and then the real method through
    the `injected` class is called.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每次你使用这样的方法时，Laravel首先去检查facade，然后检查通过注入的内容，然后通过`injected`类调用真正的方法。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about various design pattern uses in the Laravel
    PHP framework, how and why they are used, and what problems they can solve.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Laravel PHP框架中各种设计模式的用法，以及它们为什么被使用，它们可以解决什么问题。
- en: In the next chapter, we'll learn about best practices to create an application
    using Laravel using the design patterns in our code in a Laravel project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习使用设计模式在Laravel项目中的最佳实践来创建应用程序。
