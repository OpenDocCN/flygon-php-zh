- en: Chapter 11. Using Yii Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章 使用Yii模块
- en: So far we have added a lot of functionality to our TrackStar application. And
    if you recall back to [Chapter 7](ch07.html "Chapter 7. User Access Control"),
    *User Access Control*, we introduced user access controls to restrict certain
    functionalities based on a user role hierarchy. This was very helpful in restricting
    access to some of the administrative functions on a per project basis. For example,
    within a specific project, you may not want to allow all the members of the team
    to delete the project. We used a role based access control implementation to assign
    users to specific roles within a project, and then allowed/restricted access to
    the functionality based on these roles.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为我们的TrackStar应用程序添加了许多功能。如果你回想一下[第7章](ch07.html "第7章 用户访问控制")，“用户访问控制”，我们介绍了用户访问控制，根据用户角色层次结构限制某些功能。这在按项目基础限制对一些管理功能的访问上非常有帮助。例如，在特定项目中，您可能不希望允许团队的所有成员删除项目。我们使用基于角色的访问控制实现，将用户分配到项目中的特定角色，然后根据这些角色允许/限制对功能的访问。
- en: However, what we have not yet addressed are the administrative needs of the
    application as a whole. Web applications such as TrackStar often require very
    special users who have the ability to have full access to administer everything.
    One example is the ability to manage all the CRUD operations for every single
    user of the system, regardless of the project. A *full administrator* of our application
    should be able to log in and remove or update any user, any project, any issue,
    moderate all comments, and so on. Also, it is often the case that we build extra
    features that apply to the whole application, such as the ability to leave site-wide
    system messages to all the users, manage e-mail campaigns, turn on/off certain
    application features, manage the roles and permissions hierarchy itself, change
    the site theme, and others. Because the functionality exposed to the administrator
    can differ greatly from the functionality exposed to normal users, it is often
    a good idea to keep these features very separate from the rest of the application.
    We will be accomplishing this separation by building all of our administrative
    functionality in what is called a **module** in Yii.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们尚未解决的是应用程序整体的管理需求。像TrackStar这样的Web应用程序通常需要具有完全访问权限的特殊用户。一个例子是能够管理系统中每个用户的所有CRUD操作，而不管项目如何。我们应用程序的*完整管理员*应该能够登录并删除或更新任何用户、任何项目、任何问题，管理所有评论等。此外，通常情况下，我们构建适用于整个应用程序的额外功能，例如能够向所有用户留下站点范围的系统消息，管理电子邮件活动，打开/关闭某些应用程序功能，管理角色和权限层次结构本身，更改站点主题等。由于向管理员公开的功能可能与向普通用户公开的功能差异很大，因此将这些功能与应用程序的其余部分分开是一个很好的主意。我们将通过在Yii中构建所有我们的管理功能来实现这种分离，这被称为**模块**。
- en: Feature planning
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能规划
- en: 'In this chapter we will focus on the following granular development tasks:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将专注于以下细粒度的开发任务：
- en: Creating a new module to house administrative functionality
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新模块来容纳管理功能
- en: Creating the ability for administrators to add system-wide messages for application
    users, to view on the projects listing page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为管理员添加系统范围消息的能力，以在项目列表页面上查看
- en: Applying a new theme to the module
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将新主题应用于模块
- en: Creating a new database table to hold the system message data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的数据库表来保存系统消息数据
- en: Generating all CRUD functionality for our system messages
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的系统消息生成所有CRUD功能
- en: Restricting access to all functionality within the new module to admin users
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将对新模块内的所有功能的访问限制为管理员用户
- en: Displaying new system messages on the projects listing page
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目列表页面上显示新的系统消息
- en: Working with modules
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模块
- en: A **module** in Yii is very much like an entire mini-application contained within
    a larger application. It has a very similar structure, containing models, views,
    controllers, and other supporting components. However, modules cannot be deployed
    themselves as standalone applications; they must reside within an application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Yii中的**模块**非常类似于包含在较大应用程序中的整个小型应用程序。它具有非常相似的结构，包含模型、视图、控制器和其他支持组件。但是，模块本身不能作为独立应用程序部署；它们必须驻留在一个应用程序中。
- en: Modules are very useful in helping to architect your application in a modular
    fashion. Large applications can often be segmented into discrete application features
    that could be built separately using modules. Site features such as adding a user
    forum or user blogs, or site-administrator functionality, are some examples that
    could be segmented from the main site features, allowing them to be developed
    separately and having them be easily reusable in future projects. We are going
    to use a module to create a distinct place in our application to house our administrative
    functionality.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 模块在以模块化方式构建应用程序方面非常有用。大型应用程序通常可以分成离散的应用程序功能，可以使用模块分别构建。网站功能，如添加用户论坛或用户博客，或站点管理员功能，是一些可以从主要站点功能中分割出来的示例，使它们可以在将来的项目中轻松重复使用。我们将使用一个模块来在我们的应用程序中创建一个独特的位置，以容纳我们的管理功能。
- en: Creating a module
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个模块
- en: 'Creating a new module is a snap when using our good friend Gii. With our URL
    changes in place, the tool is now accessible via `http://localhost/trackstar/gii`.
    Navigate there and select the **Module Generator** option in the left-hand side
    menu. You will be presented with the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的好朋友Gii创建一个新模块非常简单。在我们的URL更改就位后，该工具现在可以通过`http://localhost/trackstar/gii`访问。导航到那里，并在左侧菜单中选择**模块生成器**选项。您将看到以下截图：
- en: '![Creating a module](graphics/8727_11_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个模块](graphics/8727_11_01.jpg)'
- en: 'We need to provide a unique name for the module. Since we are creating an admin
    module, we''ll be super creative and give it the name `admin`. Type this in the
    **Module ID** field and click on the **Preview** button. As shown in the following
    screenshot, it will present you with all of the files that it intends to generate,
    allowing you to preview each file prior to creating them:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为模块提供一个唯一的名称。由于我们正在创建一个admin模块，我们将非常有创意地给它命名为`admin`。在**Module ID**字段中输入这个名称，然后单击**Preview**按钮。如下截图所示，它将向您展示它打算生成的所有文件，允许您在创建它们之前预览每个文件：
- en: '![Creating a module](graphics/8727_11_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![创建模块](graphics/8727_11_02.jpg)'
- en: 'Click on the **Generate** button to have it create all of these files. You
    will need to ensure that your `/protected` folder is writable by the web server
    process for it to autocreate the necessary directories and files. The following
    screenshot shows the successful generation of a module:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**Generate**按钮，让它创建所有这些文件。您需要确保您的`/protected`文件夹对Web服务器进程是可写的，以便它可以自动创建必要的目录和文件。以下截图显示了成功生成模块的情况：
- en: '![Creating a module](graphics/8727_11_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![创建模块](graphics/8727_11_03.jpg)'
- en: 'Let''s take a closer look at what the module generator created for us. A module
    in Yii is organized as a directory, the name of which is the same as the unique
    name of the module. By default, all module directories reside under `protected/modules`.
    The structure of each module directory is very similar to that of our main application.
    What this command has done for us is to create the skeleton of the directory structure
    for the admin module. Since this was our first module, the top-level directory
    `protected/modules` was created, and then an `admin/` directory was created underneath
    it. The following screenshot shows all of the directories and files that were
    created when we executed the `module` command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看模块生成器为我们创建了什么。在Yii中，模块被组织为一个目录，其名称与模块的唯一名称相同。默认情况下，所有模块目录都位于`protected/modules`下。每个模块目录的结构与我们主应用程序的结构非常相似。这个命令为我们做的事情是为admin模块创建目录结构的骨架。由于这是我们的第一个模块，顶级目录`protected/modules`被创建，然后在其下创建了一个`admin/`目录。以下截图显示了执行`module`命令时创建的所有目录和文件：
- en: '![Creating a module](graphics/8727_11_16.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![创建模块](graphics/8727_11_16.jpg)'
- en: A module must have a `module` class that extends either directly or from a child
    of `CWebModule`. The module class name is created by combining the module ID (that
    is, the name we supplied when we created the module `admin`) and the string `Module`.
    The first letter of the module ID is also capitalized. So in our case, our admin
    module class file is named `AdminModule.php`. The module class serves as the central
    place for storing information that is shared within the module code. For example,
    we can use the `params` property of `CWebModule` to store module-specific parameters,
    and use its `components` property to share application components at the module
    level. This module class serves a similar role to the module as the application
    class does to the entire application. So `CWebModule` is to our module what `CWebApplication`
    is to our application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 模块必须有一个`module`类，该类直接或从`CWebModule`的子类扩展。模块类名称是通过组合模块ID（即我们创建模块`admin`时提供的名称）和字符串`Module`来创建的。模块ID的第一个字母也被大写。所以在我们的情况下，我们的admin模块类文件名为`AdminModule.php`。模块类用作存储模块代码中共享信息的中心位置。例如，我们可以使用`CWebModule`的`params`属性来存储模块特定的参数，并使用其`components`属性在模块级别共享应用程序组件。这个模块类的作用类似于应用程序类对整个应用程序的作用。所以`CWebModule`对我们的模块来说就像`CWebApplication`对我们的应用程序一样。
- en: Using a module
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模块
- en: 'Just as the successful creation message indicated, before we can use our new
    module, we need to configure the `modules` property of the main application to
    include it for use. We did this before when we added the `gii` module to our application,
    which allowed us to access the Gii code generation tool. We make this change in
    the main configuration file `protected/config/main.php`. The following highlighted
    code indicates the necessary change:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就像成功创建消息所指示的那样，在我们可以使用新模块之前，我们需要配置主应用程序的`modules`属性，以便包含它供使用。在我们向应用程序添加`gii`模块时，我们就已经这样做了，这使我们能够访问Gii代码生成工具。我们在主配置文件`protected/config/main.php`中进行了这些更改。以下突出显示的代码指示了必要的更改：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After saving this change, our new `admin` module is wired up for use. We can
    take a look at the simple index page that was created for us by visiting `http://localhost/trackstar/admin/default/index`.
    The request-routing structure for accessing the pages in our module is just like
    that for our main application pages, except that we need to include the `moduleID`
    directory in the route as well. Our routes will be of the general form `/moduleID/controllerID/actionID`.
    So the URL request `/admin/default/index` is requesting the `admin` module''s
    default controller''s index method. When we visit this page, we see something
    similar to the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这些更改后，我们的新`admin`模块已经准备好供使用。我们可以通过访问`http://localhost/trackstar/admin/default/index`来查看为我们创建的简单索引页面。用于访问我们模块中页面的请求路由结构与我们主应用程序页面的结构类似，只是我们还需要在路由中包含`moduleID`目录。我们的路由将具有一般形式`/moduleID/controllerID/actionID`。因此，URL请求`/admin/default/index`正在请求`admin`模块的默认控制器的索引方法。当我们访问这个页面时，我们会看到类似以下截图的内容：
- en: '![Using a module](graphics/8727_11_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![使用模块](graphics/8727_11_05.jpg)'
- en: Module layout
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块布局
- en: One thing we will notice is that the theme we created in the previous chapter,
    `newtheme`, is also being applied to our module. The reason for this is that our
    module controller classes are extending `protected/components/Controller.php`,
    which specifies its layout as `$layout='//layouts/column1'`. The key is the double
    slashes in front of this definition. This specifies that we use the main application
    path rather than the specific module path for finding the layout file. So we are
    getting the same layout file applied to our module as we are to the rest of our
    application. If we make this a single slash rather than double, we would see our
    `admin` module having no layout applied to it at all. Go ahead and give it a try.
    The reason for this is that now, with just the single slash, that is, `$layout='/layouts/column1'`,
    it is looking for layout files within the module rather than the parent application.
    Please go ahead and make this change, and keep the single slash definition as
    we proceed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会注意到，在上一章中创建的主题 `newtheme` 也被应用到了我们的模块上。原因是我们的模块控制器类扩展了 `protected/components/Controller.php`，它将其布局指定为
    `$layout='//layouts/column1'`。关键在于这个定义前面的双斜杠。这指定我们使用主应用程序路径而不是特定模块路径来查找布局文件。因此，我们得到的布局文件与我们的应用程序的其余部分相同。如果我们将其改为单斜杠而不是双斜杠，我们会看到我们的
    `admin` 模块根本没有应用布局。请尝试一下。原因是现在，只有单斜杠，即 `$layout='/layouts/column1'`，它正在在模块内寻找布局文件而不是父应用程序。请继续进行此更改，并在我们继续进行时保持单斜杠定义。
- en: You can configure almost everything separately in a module, including the default
    path for layout files. The default layout path for web modules is `/protected/modules/[moduleID]/views/layouts`,
    where `[moduleID]` in our case is `admin`. We can see that there are no files
    under this directory, so there is no default layout to be applied to the module.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在模块中几乎可以单独配置所有内容，包括布局文件的默认路径。Web 模块的默认布局路径是 `/protected/modules/[moduleID]/views/layouts`，在我们的情况下是
    `admin`。我们可以看到在这个目录下没有文件，因此没有默认布局可应用于模块。
- en: Since we have a theme specified, there is slightly more to the story in our
    case. We can also manage all of our module view files, including the module layout
    view files, within this theme. If we were to do that, we'd need to add to our
    theme directory structure to accommodate our new module. The directory structure
    is very much as expected. It is of a general form `/themes/[themeName]/views/[moduleID]/layouts/`
    for the layout files and `/themes/[themeName]/views/[moduleID]/[controllerID]/`
    for the controller view files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们指定了一个主题，我们的情况稍微复杂一些。我们还可以在这个主题中管理所有模块视图文件，包括模块布局视图文件。如果我们这样做，我们需要添加到我们的主题目录结构以适应我们的新模块。目录结构非常符合预期。它的一般形式是
    `/themes/[themeName]/views/[moduleID]/layouts/` 用于布局文件，`/themes/[themeName]/views/[moduleID]/[controllerID]/`
    用于控制器视图文件。
- en: 'To help clarify this, let''s walk through Yii''s decision making process when
    it is trying to decide what view files to use for our new `admin` module. As mentioned
    earlier, if we specify the layout view file with double slashes preceding it ("//"),
    it will look to the parent application to find the layout file. But let''s look
    at the case where we use a single slash and ask it to find the appropriate layout
    file within the module. In the single slash scenario, here is what is happening
    when `$this->render(''index'')` is issued in the `DefaultController.php` file
    within our `admin` module:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助澄清这一点，让我们来看一下 Yii 在尝试决定为我们的新 `admin` 模块使用哪些视图文件时的决策过程。如前所述，如果我们在布局视图文件之前使用双斜杠（"//"）指定，它将查找父应用程序以找到布局文件。但让我们看看当我们使用单斜杠并要求它在模块内找到适当的布局文件时的情况。在单斜杠的情况下，当在我们的
    `admin` 模块的 `DefaultController.php` 文件中发出 `$this->render('index')` 时，正在发生以下情况：
- en: 'Since `render()` is being called, as opposed to `renderPartial()`, it is going
    to attempt to decorate the specified `index.php` view file with a layout file.
    And since our application is currently configured to use a theme called `newtheme`,
    it is going to first look for layout files under this theme directory. Our new
    module''s `DefaultController` class extends our application component `Controller.php`,
    which has `column1` specified as its `$layout` property. This property is not
    overridden, so it is also the layout file for `DefaultController`. Finally, since
    this is all happening within the `admin` module, Yii first looks for the following
    layout file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于调用了 `render()`，而不是 `renderPartial()`，它将尝试用布局文件装饰指定的 `index.php` 视图文件。由于我们的应用程序当前配置为使用名为
    `newtheme` 的主题，它将首先在此主题目录下查找布局文件。我们的新模块的 `DefaultController` 类扩展了我们的应用程序组件 `Controller.php`，它将
    `column1` 指定为其 `$layout` 属性。这个属性没有被覆盖，所以它也是 `DefaultController` 的布局文件。最后，由于这一切都发生在
    `admin` 模块内部，Yii 首先寻找以下布局文件：
- en: '`/themes/newtheme/views/admin/layouts/column1.php`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`/themes/newtheme/views/admin/layouts/column1.php`'
- en: (Note the inclusion of the `moduleID` in this directory structure.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意在此目录结构中包含 `moduleID`。）
- en: 'This file does not exist, so it reverts to looking in the default location
    for the module. As previously mentioned, the default layout directory is specific
    to each module. So in this case it will attempt to locate the following layout
    file:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个文件不存在，所以它会回到模块的默认位置查找。如前所述，默认布局目录对每个模块都是特定的。所以在这种情况下，它将尝试定位以下布局文件：
- en: '`/protected/modules/admin/views/layouts/column1.php`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`/protected/modules/admin/views/layouts/column1.php`'
- en: 'This file also does not exist, so it will be unable to apply a layout. It will
    now simply attempt to render the specified `index.php` view file without a layout.
    However, again since we have specified the specific `newtheme` theme for this
    application, it will first look for the following view file:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个文件也不存在，所以将无法应用布局。现在它将尝试渲染指定的 `index.php` 视图文件而不使用布局。然而，由于我们已经为这个应用程序指定了特定的
    `newtheme` 主题，它将首先寻找以下视图文件：
- en: '`/themes/newtheme/views/admin/default/index.php`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`/themes/newtheme/views/admin/default/index.php`'
- en: This file also does not exist, so it will look again for this controller (`DefaultController.php`)
    in the default location within this module (`AdminModule`), namely `/protected/modules/admin/views/default/index.php`.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个文件也不存在，所以它会再次在这个模块（`AdminModule`）的默认位置内寻找这个控制器（`DefaultController.php`），即`/protected/modules/admin/views/default/index.php`。
- en: This explains why the page `http://localhost/trackstar/admin/default/index`
    is rendered without any layout (again, in the case where we are using a single
    slash to prefix the layout file declaration `$layout='/layouts/column1'`). To
    keep things completely separate and simple for now, let's manage our view files
    in the default location for our module rather than under the `newtheme` theme.
    Also, let's apply to our `admin` module the same design as our original application
    had, that is, how the application looked before we applied the new theme. In this
    way, our `admin` pages will have a very different look from our normal application
    pages, which will help remind us that we are in the special admin section, but
    we won't have to spend any time coming up with a new design.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这解释了为什么页面`http://localhost/trackstar/admin/default/index`在没有任何布局的情况下呈现（在我们使用单斜杠作为布局文件声明的前缀时，`$layout='/layouts/column1'`）。为了现在完全分开和简单，让我们将我们的视图文件管理在模块的默认位置，而不是在`newtheme`主题下。此外，让我们将我们的`admin`模块应用与我们原始应用程序相同的设计，即在应用新主题之前应用的应用程序外观。这样，我们的`admin`页面将与我们的正常应用程序页面有非常不同的外观，这将帮助我们记住我们处于特殊的管理部分，但我们不必花时间设计新的外观。
- en: Applying a layout
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用布局
- en: 'First let''s set a default layout value for our module. We set our module-wide
    configuration settings in the `init()` method within our module class `/protected/modules/AdminModule.php`.
    So open up that file and add the following highlighted code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们为我们的模块设置一个默认布局值。我们在模块类`/protected/modules/AdminModule.php`的`init()`方法中设置模块范围的配置设置。因此，打开该文件并添加以下突出显示的代码：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this way, if we have not specified a layout file at a more granular level,
    such as in a controller class, all of the module views will be decorated by the
    layout file `main.php` located in the default layout directory for our module,
    namely `/protected/modules/admin/views/layouts/`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果我们没有在更细粒度的级别上指定布局文件，比如在控制器类中，所有模块视图都将由模块默认布局目录`/protected/modules/admin/views/layouts/`中的`main.php`布局文件装饰。
- en: Now of course, we need to create this file. Make a copy of the two layout files
    `/protected/views/layouts/main.php` and `/protected/views/layouts/column1.php`
    from the main application, and place them both in the `/protected/modules/admin/views/layouts/`
    directory. After you have copied these files over to the new location, we need
    to make a few small changes to both of them.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当然，我们需要创建这个文件。从主应用程序中复制两个布局文件`/protected/views/layouts/main.php`和`/protected/views/layouts/column1.php`，并将它们都放在`/protected/modules/admin/views/layouts/`目录中。在将这些文件复制到新位置后，我们需要对它们进行一些小的更改。
- en: 'First let''s alter `column1.php`. Remove the explicit reference to `//layouts/main`
    in the call `beginContent()`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们修改`column1.php`。在调用`beginContent()`时删除对`//layouts/main`的显式引用：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Not specifying an input file when calling `beginContent()` will result in it
    using the default layout for our module, which we just set to be our newly copied
    `main.php` file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`beginContent()`时不指定输入文件将导致它使用我们模块的默认布局，我们刚刚设置为我们新复制的`main.php`文件。
- en: 'Now let''s make a few changes to our `main.php` layout file. We are going to
    add **Admin Console** to our application header text to emphasize that we are
    in a separate part of the application. We will also alter our menu items to have
    a link to the **Admin** home page, as well as a link to go back to the main site.
    We can remove the **About** and **Contact** links from this menu as we don''t
    need to repeat those options in our **Admin** section. The additions to the file
    are highlighted as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们对`main.php`布局文件进行一些更改。我们将在应用程序标题文本中添加**管理控制台**，以强调我们处于应用程序的一个独立部分。我们还将修改菜单项，添加一个链接到**管理**首页，以及一个链接返回到主站点。我们可以从菜单中删除**关于**和**联系**链接，因为我们不需要在**管理**部分重复这些选项。文件的添加如下所示：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can leave the rest of the file unchanged. Now if we visit our `admin` module
    page `http://localhost/trackstar/admin/default/index`, we see something like the
    following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以保持文件的其余部分不变。现在，如果我们访问我们的`admin`模块页面`http://localhost/trackstar/admin/default/index`，我们会看到以下截图：
- en: '![Applying a layout](graphics/8727_11_04.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: 应用布局
- en: And if we click on the **Back To Main Site** link, we see that we are taken
    back to the newly themed version of our main application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击**返回主站点**链接，我们会看到我们被带回了主应用程序的新主题版本。
- en: Restricting admin access
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制管理员访问
- en: One problem you may have already noticed is that anyone, including guest users,
    can access our new `admin` module. We are building this admin module to expose
    application functionality that should only be accessible to users with administrative
    access. So we need to address this issue.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到的一个问题是，任何人，包括访客用户，都可以访问我们的新`admin`模块。我们正在构建这个管理模块来暴露应用程序功能，这些功能只能让具有管理权限的用户访问。因此，我们需要解决这个问题。
- en: Luckily, we have already implemented an RBAC access model in our application,
    back in [Chapter 7](ch07.html "Chapter 7. User Access Control"), *User Access
    Control*. All we need to do now is extend it to include a new role for administrators
    and have new permissions available for that role.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们已经在应用程序中实现了RBAC访问模型，在[第7章](ch07.html "第7章 用户访问控制")中，*用户访问控制*。现在我们需要做的就是扩展它，包括一个新的管理员角色，并为该角色提供新的权限。
- en: 'If you recall from [Chapter 7](ch07.html "Chapter 7. User Access Control"),
    *User Access Control* , we used a Yii `console` command to implement our RBAC
    structure. We need to add to that. So open up the file `/protected/commands/shell/RbacCommand.php`
    containing that `console` command, and add the following code where we created
    the `owner` role:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得[第7章](ch07.html "第7章。用户访问控制")中的内容，*用户访问控制*，我们使用了Yii的`console`命令来实现我们的RBAC结构。我们需要添加到其中。因此，打开包含该`console`命令的文件`/protected/commands/shell/RbacCommand.php`，并在我们创建`owner`角色的地方添加以下代码：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This creates a new task called `adminManagement` and a new role called `admin`.
    It then adds the `owner`, `reader`, and `member` roles along with the `adminManagement`
    task as children, so that the `admin` role inherits permissions from all of these.
    Finally, it assigns the `admin` role to the first user in our system to ensure
    that we have at least one admin to access our admin module.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`adminManagement`的新任务和一个名为`admin`的新角色。然后，它将添加`owner`、`reader`和`member`角色以及`adminManagement`任务作为子级，以便`admin`角色从所有这些角色继承权限。最后，它将分配`admin`角色给我们系统中的第一个用户，以确保我们至少有一个管理员可以访问我们的管理模块。
- en: 'Now we have to rerun our command to update the database with these changes.
    To do so, just run the `yiic` command-line tool with the `rbac` command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须重新运行命令以更新数据库的这些更改。要这样做，只需使用`rbac`命令运行`yiic`命令行工具：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: With this additional role being added, we should also update the text in the
    message that is displayed when prompted, to continue to indicate that a fourth
    role will be created. We will leave this as an exercise for the reader. This change
    has been made in the downloadable code files for your reference.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 随着添加了这个额外的角色，我们还应该更新在提示时显示的消息文本，以继续指示将创建第四个角色。我们将把这留给读者来练习。这些更改已经在可下载的代码文件中进行了更改，供您参考。
- en: 'With these changes to our RBAC model in place, we can add an access check to
    the `AdminModule::beforeControllerAction()` method so that nothing within the
    `admin` module will be executed unless the user is in the `admin` role:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些对我们的RBAC模型的更改，我们可以在`AdminModule::beforeControllerAction()`方法中添加对`admin`模块的访问检查，以便除非用户处于`admin`角色，否则不会执行`admin`模块中的任何内容：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With this in place, if a user who has not been assigned the `admin` role now
    attempts to visit any page within the **Admin** module, they will receive an HTTP
    403 authorization error page. For example, if you are not logged in and you attempt
    to visit the **Admin** page, you will receive the following result:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，如果一个尚未被分配`admin`角色的用户现在尝试访问**管理**模块中的任何页面，他们将收到一个HTTP 403授权错误页面。例如，如果您尚未登录并尝试访问**管理**页面，您将收到以下结果：
- en: '![Restricting admin access](graphics/8727_11_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![限制管理员访问](graphics/8727_11_06.jpg)'
- en: And the same holds true for any user that has not been assigned to the `admin`
    role.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何尚未分配给`admin`角色的用户也是如此。
- en: 'Now we can conditionally add a link to the **Admin** section of the site to
    our main application menu. In this way, users with administrative access won''t
    have to remember a cumbersome URL to navigate to the **Admin** console. As a reminder,
    our main application menu is located in our application''s theme default application
    layout file `/themes/newtheme/views/layouts/main.php`. Open up that file and add
    the following highlighted code to the menu section:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以有条件地将**管理**部分的链接添加到我们主应用程序菜单中。这样，具有管理访问权限的用户就不必记住繁琐的URL来导航到**管理**控制台。提醒一下，我们的主应用程序菜单位于应用程序的主题默认应用程序布局文件`/themes/newtheme/views/layouts/main.php`中。打开该文件并将以下突出显示的代码添加到菜单部分：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now upon logging into the application as a user with `admin` access (we set
    this to be `user id = 1`, "**User One**" in our case), we will see a new link
    in our top navigation that will take us to our newly added **Admin** section of
    the site.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当以具有`admin`访问权限的用户（在我们的情况下，我们将其设置为`user id = 1`，“**用户一**”）登录到应用程序时，我们将在顶部导航中看到一个新的链接，该链接将带我们进入我们新添加的站点**管理**部分。
- en: '![Restricting admin access](graphics/8727_11_07.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![限制管理员访问](graphics/8727_11_07.jpg)'
- en: Adding a system-wide message
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加系统范围的消息
- en: A **module** can be thought of as a mini-application itself, and adding functionality
    to a module is really the same process as adding functionality to the main application.
    Let's add some new functionality just for administrators; we will add the ability
    to manage system-wide messages displayed to users when they first log in to the
    application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块**可以被视为一个小型应用程序本身，向模块添加功能实际上与向主应用程序添加功能的过程相同。让我们为管理员添加一些新功能；我们将添加管理用户首次登录到应用程序时显示的系统范围消息的功能。'
- en: Creating the database table
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库表
- en: 'As is often the case with brand new functionality, we need a place to house
    our data. We need to create a new table to store our system-wide messages. For
    the purpose of our examples, we can keep this very simple. Here is the definition
    for our table:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，对于全新的功能，我们需要一个地方来存储我们的数据。我们需要创建一个新表来存储我们的系统范围消息。对于我们的示例，我们可以保持这个非常简单。这是我们表的定义：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We'll of course create a new database migration to manage our changes when adding
    this new table.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，当添加这个新表时，我们将创建一个新的数据库迁移来管理我们的更改。
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: These commands create a new migration file under the `protected/migrations/`
    directory. The contents of this file can be obtained from the downloadable code
    or the standalone code snippet that is available at [https://gist.github.com/3785282](https://gist.github.com/3785282).
    (We did not include the class name; remember that the name of your file and corresponding
    class will have a different timestamp prefix.)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令在`protected/migrations/`目录下创建一个新的迁移文件。这个文件的内容可以从可下载的代码或可在[https://gist.github.com/3785282](https://gist.github.com/3785282)上找到的独立代码片段中获取。（我们没有包括类名；请记住，您的文件名和相应的类将具有不同的时间戳前缀。）
- en: 'Once this file is in place, we can run our migration to add this new table:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个文件就位，我们就可以运行我们的迁移来添加这个新表：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating our model and CRUD scaffolding
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的模型和CRUD脚手架
- en: 'Now that we have our table created, our next step is to generate the `model`
    class using our favorite tool, the Gii code generator. We''ll first use the **Model
    Generator** option to create the `model` class and the **Crud Generator** option
    to create our basic scaffolding to quickly interact with this model. Go ahead
    and navigate to the Gii tool form for creating a new model (`http://localhost/trackstar/gii/model`).
    This time, since we are doing this within the context of a module, we need to
    explicitly specify the model path. Fill out the form with the values depicted
    in the following screenshot (though of course your **Code Template** path value
    should be specific to your local setup):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了表，下一步是使用我们喜爱的工具Gii代码生成器生成`model`类。我们将首先使用**Model Generator**选项创建`model`类，然后使用**Crud
    Generator**选项创建基本的脚手架，以便快速与这个模型进行交互。前往Gii工具表单以创建新的模型(`http://localhost/trackstar/gii/model`)。这一次，由于我们是在模块的上下文中进行操作，我们需要明确指定模型路径。填写表单中的值，如下面截图所示（当然，你的**Code
    Template**路径值应该根据你的本地设置具体而定）：
- en: '![Creating our model and CRUD scaffolding](graphics/8727_11_08.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的模型和CRUD脚手架](graphics/8727_11_08.jpg)'
- en: Note that we changed the **Model Path** textbox to `application.modules.admin.models`.
    Go ahead and generate the **Model Class** value by clicking on the **Generate**
    button.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们将**Model Path**文本框更改为`application.modules.admin.models`。点击**Generate**按钮生成**Model
    Class**值。
- en: 'Now we can create the CRUD scaffolding in much the same way. Again, the only
    real difference between what we have done previously and what we are doing now
    is our specification that the location of the `model` class is in the `admin`
    module. After choosing the **Crud Generator** option from the Gii tool, fill out
    the **Model Class** and **Controller ID** form fields as shown in the following
    screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以以类似的方式创建CRUD脚手架。我们之前所做的和现在要做的唯一真正的区别是我们要指定`model`类的位置在`admin`模块中。从Gii工具中选择**Crud
    Generator**选项后，填写**Model Class**和**Controller ID**表单字段，如下截图所示：
- en: '![Creating our model and CRUD scaffolding](graphics/8727_11_09.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的模型和CRUD脚手架](graphics/8727_11_09.jpg)'
- en: This alerts the tool to the fact that our `model` class is under the `admin`
    module, and that our controller class as well as all other files related to this
    code generation should be placed within the `admin` module as well.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉工具我们的`model`类在`admin`模块下，我们的控制器类以及与此代码生成相关的所有其他文件也应该放在`admin`模块中。
- en: 'Complete the creation by first clicking on the **Preview** button and then
    on **Generate**. The following screenshot shows a list of all of the files that
    are created by this action:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 首先点击**Preview**按钮，然后点击**Generate**完成创建。下面的截图显示了此操作创建的所有文件列表：
- en: '![Creating our model and CRUD scaffolding](graphics/8727_11_10.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的模型和CRUD脚手架](graphics/8727_11_10.jpg)'
- en: Adding a link to our new functionality
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加到我们新功能的链接
- en: 'Let''s add a new menu item within the main `admin` module navigation that links
    to our newly created message functionality. Open up the file `/protected/modules/admin/views/layouts/main.php`
    that contains the main menu navigation for our module, and add the following `array`
    item to the menu widget:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在主`admin`模块导航中添加一个新的菜单项，链接到我们新创建的消息功能。打开包含我们模块主菜单导航的文件`/protected/modules/admin/views/layouts/main.php`，并向菜单小部件添加以下`array`项：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If we take a look new system message at `http://localhost/trackstar/admin/sysMessage/create`,
    we see the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在`http://localhost/trackstar/admin/sysMessage/create`查看新的系统消息，我们会看到以下内容：
- en: '![Adding a link to our new functionality](graphics/8727_11_11.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![添加到我们新功能的链接](graphics/8727_11_11.jpg)'
- en: 'The autocreated controller and view files for our new system message functionality
    were created to use the two-column layout file from the main application. If you
    take a look inside the `SysMessageController.php` class file, you will see the
    layout defined as such:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新系统消息功能的自动生成控制器和视图文件是使用主应用程序的两列布局文件创建的。如果你查看`SysMessageController.php`类文件，你会看到布局定义如下：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice the double slashes in front. So we can see that our newly added admin
    functionality is not using our `admin` module layout files. We could alter the
    `controller` class to use our existing, single-column layout file in the `admin`
    module, or we can add a two-column layout file to our module layout files. The
    latter is going to be slightly easier and will also look better, as all of the
    view files are created to have their submenu items (that is the links to all the
    CRUD functionality) be displayed in a second right-hand column. We also need to
    alter our newly created model class and corresponding form to remove some unneeded
    form fields. The following is all that we have to do:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前面的双斜杠。所以我们可以看到我们新添加的admin功能没有使用我们`admin`模块的布局文件。我们可以修改`controller`类以使用我们现有的单列布局文件，或者我们可以在我们的模块布局文件中添加一个两列布局文件。后者会稍微容易一些，而且看起来也更好，因为所有的视图文件都被创建为在第二个右侧列中显示它们的子菜单项（即链接到所有CRUD功能）。我们还需要修改我们新创建的模型类和相应的表单，以删除一些不需要的表单字段。以下是我们需要做的全部内容：
- en: Copy the two-column layout from our main application over to our module, that
    is, copy `/protected/views/layouts/column2.php` over to `/protected/modules/admin/views/layouts/column2.php`.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主应用程序中的两列布局复制到我们的模块中，即将`/protected/views/layouts/column2.php`复制到`/protected/modules/admin/views/layouts/column2.php`。
- en: Remove `//layouts/main` as the input to the `beginContent()` method call on
    the first line, in the newly copied `column2.php` file.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新复制的`column2.php`文件的第一行，将`//layouts/main`作为`beginContent()`方法调用的输入删除。
- en: Alter the `SysMessage` model class to extend `TrackstarActiveRecord`. (If you
    recall, this adds the code to automatically update our `create_time/user and update_time/user`
    properties.)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`SysMessage`模型类以扩展`TrackstarActiveRecord`。（如果你记得的话，这会自动更新我们的`create_time/user`和`update_time/user`属性。）
- en: Alter the `SysMessageController` controller class to use the new `column2.php`
    layout file from within the module directory and not the one from the main application.
    The autogenerated code has specified `$layout='//layouts/column2'`, but we need
    this to simply be `$layout='/layouts/column2'`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`SysMessageController`控制器类，以使用模块目录中的新`column2.php`布局文件，而不是主应用程序中的文件。自动生成的代码已经指定了`$layout='//layouts/column2'`，但我们需要将其简单地改为`$layout='/layouts/column2'`。
- en: 'Since we are extending `TrackstarActiveRecord`, we can remove the unnecessary
    fields from our autogenerated, sys-messages creation form and remove their associated
    rules from the model class. For example, remove the following form fields from
    the `modules/admin/views/sysMessage/_form.php`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们正在扩展`TrackstarActiveRecord`，我们可以从自动生成的sys-messages创建表单中删除不必要的字段，并从模型类中删除它们的相关规则。例如，从`modules/admin/views/sysMessage/_form.php`中删除以下表单字段：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then change these two rules from the `SysMessage::rules()` method:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后从`SysMessage::rules()`方法中更改这两条规则：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It is important to only specify the rules for those fields that the user can
    input. Any fields that have rules defined can be set in a bulk manner from a `POST`
    or `GET` request, and leaving in rules for fields you do not want users to have
    access to can lead to security issues.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是只为用户可以输入的那些字段指定规则。对于已定义规则的字段，可以从`POST`或`GET`请求中以批量方式设置，并且保留不希望用户访问的字段的规则可能会导致安全问题。
- en: 'One last change we should make is to update our simple access rules to reflect
    the requirement that only the users in the `admin` role can access our action
    methods. This is mostly for illustrative purposes since we already took care of
    the access using our RBAC model approach in the `AdminModule::beforeControlerAction`
    method itself. We could actually just remove the `accessRules()` method entirely.
    However, let''s update them to reflect the requirement so you can see how that
    would work using the access rule approach. In the `SysMessageController::accessRules()`
    method, change the entire content to the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该做的最后一次更改是更新我们简单的访问规则，以反映只有`admin`角色的用户才能访问我们的操作方法的要求。这主要是为了说明目的，因为我们已经在`AdminModule::beforeControlerAction`方法中使用我们的RBAC模型方法处理了访问。实际上，我们可以完全删除`accessRules()`方法。但是，让我们更新它们以反映要求，以便您可以看到使用访问规则方法将如何工作。在`SysMessageController::accessRules()`方法中，将整个内容更改为以下内容：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Okay, with all of this in place, if we now access our new message input form
    by visiting `http://localhost/trackstar/admin/sysMessage/create`, we are presented
    with something similar to the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，有了所有这些，现在如果我们访问`http://localhost/trackstar/admin/sysMessage/create`来访问我们的新消息输入表单，我们将看到类似以下截图的内容：
- en: '![Adding a link to our new functionality](graphics/8727_11_12.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![添加到我们的新功能的链接](graphics/8727_11_12.jpg)'
- en: 'Fill out this form with the message `Hello Users! This is your admin speaking...`
    and click on **Create**. The application will redirect you to the details listing
    page for this newly created message, as shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 填写此表单，消息为`Hello Users! This is your admin speaking...`，然后单击**Create**。应用程序将重定向您到这条新创建消息的详细列表页面，如下截图所示：
- en: '![Adding a link to our new functionality](graphics/8727_11_13.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![添加到我们的新功能的链接](graphics/8727_11_13.jpg)'
- en: Displaying the message to users
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向用户显示消息
- en: Now that we have a message in our system, let's display it to the user on the
    application home page.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的系统中有一条消息，让我们在应用程序主页上向用户显示它。
- en: Importing the new model class for application-wide access
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入新的模型类以进行应用程序范围的访问
- en: 'In order to access the newly created model from anywhere in our application,
    we need to import it as part of the application configuration. Alter `protected/config/main.php`
    to include the new `admin module models` folder:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从应用程序的任何地方访问新创建的模型，我们需要将其作为应用程序配置的一部分导入。修改`protected/config/main.php`以包括新的`admin
    module models`文件夹：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Selecting the most recently updated message
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择最近更新的消息
- en: 'We''ll restrict the display to just one message, and we''ll choose the most
    recently updated message based on the `update_time` column in the table. Since
    we want to add this to the main projects listing page, we need to alter the `ProjectController::actionIndex()
    method`. Alter that method by adding the following highlighted code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将限制显示只有一条消息，并且我们将根据表中的`update_time`列选择最近更新的消息。由于我们想要将其添加到主项目列表页面，我们需要修改`ProjectController::actionIndex()`方法。通过添加以下突出显示的代码来修改该方法：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we need to alter our view file to display this new bit of content. Add
    the following code to `views/project/index.php`, just above the `<h1>Projects</h1>`
    header text:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要修改我们的视图文件来显示这个新的内容。将以下代码添加到`views/project/index.php`，就在`<h1>Projects</h1>`标题文本上方：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now when we visit our projects listing page (that is our application''s homepage),
    we can see it displayed as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们访问我们的项目列表页面（即我们应用程序的主页）时，我们可以看到它显示如下截图所示：
- en: '![Selecting the most recently updated message](graphics/8727_11_14.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![选择最近更新的消息](graphics/8727_11_14.jpg)'
- en: Adding a little design tweak
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一点设计调整
- en: 'Okay, this does what we wanted it to do, but this message does not really stand
    out to the user very well. Let''s change that by adding a little snippet to our
    main CSS file (`/themes/newtheme/css/main.css`):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这做到了我们想要的，但是这条消息对用户来说并不是很突出。让我们通过向我们的主CSS文件(`/themes/newtheme/css/main.css`)添加一小段代码来改变这一点：
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With this in place, our message now really stands out on the page. The following
    screenshot shows the message with these changes in place:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们的消息现在在页面上真的很突出。以下截图显示了具有这些更改的消息：
- en: '![Adding a little design tweak](graphics/8727_11_15.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![添加一点设计调整](graphics/8727_11_15.jpg)'
- en: One might argue that this design tweak went a little too far. Users might get
    a headache if they have to stare at those message colors all day. Rather than
    toning down the colors, let's use a little JavaScript to fade the message out
    after 5 seconds. Since we will be displaying the message every time the user visits
    this **Home** page, it might be nice to prevent them from having to stare at it
    for too long.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能会认为这个设计调整有点过分。用户可能会因为不得不整天盯着这些消息颜色而感到头疼。与其淡化颜色，不如使用一点JavaScript在5秒后淡出消息。由于我们将在用户访问这个**主页**时每次显示消息，防止他们盯着它太久可能会更好。
- en: We'll make things easy on ourselves and take advantage of the fact that Yii
    comes shipped with the powerful JavaScript framework jQuery. **jQuery** is an
    open source, JavaScript library that simplifies the interaction between the HTML
    **Document Object Model** (the **DOM**) and JavaScript. It is outside the scope
    of this book to dive into the details of jQuery. It is well worth visiting its
    documentation to become a little more acquainted with its features. Since Yii
    comes shipped with jQuery, you can simply register jQuery code in the view files,
    and Yii will take care of including the core jQuery library for you.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简化操作，并利用Yii随附的强大JavaScript框架jQuery。**jQuery**是一个开源的JavaScript库，简化了HTML **文档对象模型**（**DOM**）和JavaScript之间的交互。深入了解jQuery的细节超出了本书的范围。值得访问其文档以更加了解其特性。由于Yii随附了jQuery，您可以在视图文件中简单地注册jQuery代码，Yii将为您包含核心jQuery库。
- en: We'll also use the application helper component `CClientScript` to register
    our jQuery JavaScript code for us in the resulting web page. It will make sure
    that it has been placed in the appropriate place, and has been properly tagged
    and formatted.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用应用程序助手组件`CClientScript`来为我们在生成的网页中注册jQuery JavaScript代码。它将确保它已被放置在适当的位置，并已被正确标记和格式化。
- en: 'So let''s alter what we previously added to include a snippet of JavaScript
    that will fade out the message. Replace what we just added to `views/project/index.php`
    with the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们修改之前添加的内容，包括一个JavaScript片段来淡出消息。用以下内容替换我们刚刚添加到`views/project/index.php`的内容：
- en: '[PRE20]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now if we reload our main projects listing page, we see the message fade out
    after 5 seconds. For more information on cool jQuery effects that you can easily
    add to your pages, take a look at the JQuery API documentation available at [http://api.jquery.com/category/effects/](http://api.jquery.com/category/effects/).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们重新加载主项目列表页面，我们会看到消息在5秒后淡出。有关您可以轻松添加到页面的酷炫jQuery效果的更多信息，请查看[http://api.jquery.com/category/effects/](http://api.jquery.com/category/effects/)上提供的JQuery
    API文档。
- en: Finally, to convince yourself that everything is working as expected, you can
    add another system-wide message. Since this newer message will have a more recent
    `update_time` property, it will be the one to display on the projects listing
    page.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了确信一切都按预期工作，您可以添加另一条系统范围的消息。由于这条更新时间更近的消息将显示在项目列表页面上。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have introduced the concept of a Yii module, and demonstrated
    its practicality by using one to create an administrative section of the site.
    We demonstrated how to create a new module, how to change the layout and theme
    of a module, how to add application functionality within the module, and even
    how to take advantage of an existing RBAC model, to apply authorization access
    controls to functionality within a module. We also demonstrated how to use jQuery
    to add a dash of UI flare to our application.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Yii模块的概念，并通过使用一个模块来创建站点的管理部分来演示了它的实用性。我们演示了如何创建一个新模块，如何更改模块的布局和主题，如何在模块内添加应用程序功能，甚至如何利用现有的RBAC模型，将授权访问控制应用于模块内的功能。我们还演示了如何使用jQuery为我们的应用程序增添一些UI效果。
- en: With the addition of this administrative interface, we now have all of the major
    pieces of the application in place. Though the application is incredibly simple,
    we feel it is time to get it ready for production. The next chapter will focus
    on preparing our application for production deployment.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加这个管理界面，我们现在已经把应用程序的所有主要部分都放在了适当的位置。虽然应用程序非常简单，但我们觉得现在是时候为其准备投入生产了。下一章将重点介绍如何为我们的应用程序准备生产部署。
