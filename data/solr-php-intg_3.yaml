- en: Chapter 3. Select Query on Solr and Query Modes (DisMax/eDisMax)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。在Solr上执行选择查询和查询模式（DisMax/eDisMax）
- en: 'This chapter will cover how to execute a basic select query on the Solr index
    using PHP and the Solarium library. We will be specifying different query parameters
    such as number of rows to fetch, fetching specific fields, sorting, and some other
    parameters in the Solarium query. We will discuss what query modes (query parsers)
    in Solr are and will also go through the different query modes available in Solr
    and their usage. We will look at different features to improve the results from
    our query or get more specific results from our query. The topics that will be
    covered are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何使用PHP和Solarium库在Solr索引上执行基本的select查询。我们将指定不同的查询参数，如要获取的行数，获取特定字段，排序以及Solarium查询中的一些其他参数。我们将讨论Solr中的查询模式（查询解析器）是什么，并且还将介绍Solr中可用的不同查询模式及其用法。我们将查看不同的功能，以改进我们的查询结果或从我们的查询中获得更具体的结果。将涵盖的主题如下：
- en: Creating a basic select query with sorting and return fields
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个带有排序和返回字段的基本select查询
- en: Running queries using select configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用select配置运行查询
- en: Re-using queries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复使用查询
- en: DisMax and eDisMax query modes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DisMax和eDisMax查询模式
- en: Component-based architecture of Solarium
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solarium的基于组件的架构
- en: Executing queries using DisMax and eDisMax
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DisMax和eDisMax执行查询
- en: Date boosting in eDisMax
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在eDisMax中对日期进行提升
- en: Advanced tuning parameters
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级调整参数
- en: Creating a basic select query with sorting and return fields
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个带有排序和返回字段的基本select查询
- en: 'Using the following query, let us look for all the books in our index and return
    the top five results in JSON format:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下查询，让我们搜索索引中的所有书籍，并以JSON格式返回前五个结果：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As seen earlier, we can form a query URL and use cURL to fire the query via
    PHP. Decode the JSON response and use it as result.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们可以形成一个查询URL并使用cURL通过PHP发出查询。解码JSON响应并将其用作结果。
- en: 'Let us look at the Solarium code to execute `select` queries on Solr. Create
    a `select` query from the Solarium client as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下Solarium代码，以在Solr上执行`select`查询。从Solarium客户端创建一个`select`查询，如下所示：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a query to search for all books:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个搜索所有书籍的查询：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Suppose we show three results per page. So on the second page, we will start
    from four and display the next three results.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们每页显示三个结果。因此在第二页，我们将从第四个开始显示接下来的三个结果。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Set which fields should be returned using the following code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码设置应返回哪些字段：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: PHP 5.4 users can use square brackets to construct an array instead of the earlier
    `array(...)` construct.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 5.4用户可以使用方括号构造数组，而不是之前的`array(...)`构造。
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let us sort the result by price using the following query:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下查询按价格对结果进行排序：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, execute the following `select` query and get the result:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，执行以下`select`查询并获取结果：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The resultset contains an array of documents. And each document is an object
    containing fields and values. For a multivalued field in Solr, all values will
    be returned as an array. We will need to handle the values accordingly. In addition
    to the four fields that we retrieved using our query, we also get the score of
    the document. The document score is a number calculated by Lucene to rank the
    documents based on their relevance with respect to the input query. We will talk
    in depth about scoring in later chapters. Let us iterate over the resultset and
    display the fields.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 结果集包含一个文档数组。每个文档都是一个包含字段和值的对象。对于Solr中的多值字段，所有值都将作为数组返回。我们需要相应地处理这些值。除了使用查询检索的四个字段之外，我们还会得到文档的分数。文档分数是由Lucene计算的一个数字，用于根据其与输入查询相关性对文档进行排名。我们将在后面的章节中深入讨论评分。让我们遍历结果集并显示字段。
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'From the resultset, we can also get the number of documents found using the
    `getNumFound()` function as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从结果集中，我们还可以使用`getNumFound()`函数获取找到的文档数量，如下所示：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Internally, the parameters that we set are used to form a Solr query and the
    same query is executed on Solr. We can check the query being executed from the
    Solr logs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，我们设置的参数用于形成一个Solr查询，并且相同的查询在Solr上执行。我们可以从Solr日志中检查正在执行的查询。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Solr logs are located in the `<tomcat_home>/logs` folder in the `catalina.out`
    file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Solr日志位于`<tomcat_home>/logs`文件夹中的`catalina.out`文件中。
- en: 'The executed query looks as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的查询如下所示：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The parameter for the `setQuery()` function should be equal to the `q` parameter
    in our Solr query. If we want to search on multiple fields in our Solr index,
    we will have to create the search query with the required fields. For example,
    if we want to search for `Author` as `Martin` and `Category` as `book`, our `setQuery()`
    function will be as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`setQuery()`函数的参数应该等于我们Solr查询中的`q`参数。如果我们想要在Solr索引中搜索多个字段，我们将不得不使用所需字段创建搜索查询。例如，如果我们想要搜索`Author`为`Martin`和`Category`为`book`，我们的`setQuery()`函数将如下所示：'
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Running a query using select configuration
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用select配置运行查询
- en: 'In addition to building the `select` query through functions, it is also possible
    to build a `select` query using an array of key-value pairs. Here is a `selectconfig`
    query with parameters for the preceding query:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过函数构建`select`查询之外，还可以使用键值对数组构建`select`查询。以下是带有前述查询参数的`selectconfig`查询：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can also add multiple sorting fields as an array using the `addSorts(array
    $sorts)` function. To sort by price and then by score, we can use the following
    parameters in the `addSorts()` function:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`addSorts(array $sorts)`函数将多个排序字段作为数组添加。要按价格排序，然后按分数排序，我们可以在`addSorts()`函数中使用以下参数：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We can use the `getQuery()` function to get the query parameter. And the `getSorts()`
    function to get the sorting parameter from our select query. We can also use the
    `removeField($fieldStr)` and `removeSort($sortStr)` functions to remove parameters
    from the fields list and sort list of our query.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`getQuery()`函数获取查询参数。使用`getSorts()`函数从我们的select查询中获取排序参数。我们还可以使用`removeField($fieldStr)`和`removeSort($sortStr)`函数从查询的字段列表和排序列表中删除参数。
- en: We can use the `setQueryDefaultField(String $field)` and `setQueryDefaultOperator(String
    $operator)` functions to change the default query field and default operator in
    our Solr query. If the functions are not provided, the default query field and
    default query operator are picked up from the Solr configuration. The default
    search field is picked up from the `df` parameter in `solrconfig.xml`. The default
    operator is `OR` if not provided. It can be overwritten by passing the `q.op`
    parameter in the query.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`setQueryDefaultField(String $field)`和`setQueryDefaultOperator(String
    $operator)`函数来更改Solr查询中的默认查询字段和默认运算符。如果没有提供这些函数，则默认的查询字段和默认的查询运算符将从Solr配置中获取。默认搜索字段从`solrconfig.xml`中的`df`参数中获取。如果没有提供，默认运算符为`OR`。可以通过在查询中传递`q.op`参数来覆盖它。
- en: Re-using queries
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重用查询
- en: In most cases, the queries that you build as a part of the application can be
    reused. It would make more sense to re-use the queries instead of creating them
    again. The functions provided by the Solarium interface help in modifying the
    Solarium query for re-use. Let us see an example for re-using queries.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，作为应用程序的一部分构建的查询可以被重用。重用查询而不是再次创建它们会更有意义。Solarium接口提供的函数有助于修改Solarium查询以便重用。让我们看一个重用查询的例子。
- en: Suppose we form a complex query based on input parameters. For pagination purposes,
    we would like to use the same query but change the `start` and `rows` parameters
    to fetch the next or previous page. Another case where a query could be reused
    is sorting. Suppose we would like to sort by price in ascending order and later
    by descending order.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们根据输入参数形成了一个复杂的查询。出于分页目的，我们希望使用相同的查询但更改`start`和`rows`参数以获取下一页或上一页。另一个可以重用查询的情况是排序。假设我们想按价格升序排序，然后再按降序排序。
- en: Let us first define and create an alias for Solarium namespaces we will be using
    in our code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义并创建我们在代码中将要使用的Solarium命名空间的别名。
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, create a class that extends the Solarium query interface:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个扩展Solarium查询接口的类：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Inside the class we will create the `init()` function, which will override
    the same function in the `parent` class and add our default query parameters there
    as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在类内部，我们将创建`init()`函数，它将覆盖`parent`类中的相同函数并在那里添加我们的默认查询参数，如下所示：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`RESULTSPERPAGE` is a private variable that can be declared as `5`. Create
    a separate function to set the query.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`RESULTSPERPAGE`是一个私有变量，可以声明为`5`。创建一个单独的函数来设置查询。'
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a function to reset the sorting. A reset would mean removing all previous
    sorting parameters.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个函数来重置排序。重置意味着删除所有先前的排序参数。
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Changing sorting parameters includes resetting the current sort and adding a
    new sorting parameter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 更改排序参数包括重置当前排序和添加新的排序参数。
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A function to add additional sorting parameters is used as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 添加额外排序参数的函数如下所示：
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A function to change the page is used as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 更改页面的函数如下所示：
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Once the class is defined, we can create an instance of the class and set our
    initial query. This will give us results from the first page.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦类被定义，我们可以创建类的实例并设置我们的初始查询。这将给我们来自第一页的结果。
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To go to any other page, simply call the `goToPage()` function that we have
    created with the page we want to go to. It will alter the Solarium query, and
    change the `Start` parameter to coincide with results for the page.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要前往任何其他页面，只需调用我们创建的`goToPage()`函数并传入我们想要前往的页面。它将改变Solarium查询，并将`Start`参数更改为与页面结果相符。
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The complete code is available as part of downloads. What we have done here
    is extend the query interface and add our own functions to change the query, reset
    and add sorting parameters, and for pagination. Once we have an object of the
    `myQuery` class, all we have to do is keep on altering the parameters as required
    and keep on executing the query with the altered parameters.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可以作为下载的一部分。我们在这里所做的是扩展查询接口并添加我们自己的函数来更改查询、重置和添加排序参数以及分页。一旦我们有了`myQuery`类的对象，我们所要做的就是根据需要不断改变参数并使用更改后的参数执行查询。
- en: DisMax and eDisMax query modes
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DisMax和eDisMax查询模式
- en: '**DisMax** (**Disjunction Max**)and **eDisMax** (**Extended Disjunction Max**)
    are query modes in Solr. They define the way how Solr parses user input to query
    different fields and with different relevance weights. eDisMax is an improvement
    over the DisMax query mode. DisMax and eDisMax are by default enabled in our Solr
    configuration. To switch the query type we need to specify `defType=dismax` or
    `defType=edismax` in our Solr query.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**DisMax**（**Disjunction Max**）和**eDisMax**（**Extended Disjunction Max**）是Solr中的查询模式。它们定义了Solr如何解析用户输入以查询不同字段和不同相关权重。eDisMax是对DisMax查询模式的改进。DisMax和eDisMax默认启用在我们的Solr配置中。要切换查询类型，我们需要在我们的Solr查询中指定`defType=dismax`或`defType=edismax`。'
- en: 'Let us add some more books to our index. Execute the following command in our
    `<solr dir>/example/exampledocs` folder (`books.csv` is available in code downloads):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的索引中添加一些更多的书籍。在我们的`<solr dir>/example/exampledocs`文件夹中执行以下命令（`books.csv`在代码下载中可用）：
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: DisMax handles most queries. But there are still some cases where DisMax is
    unable to provide results. It is advisable to use eDisMax in those cases. The
    DisMax query parser does not support the default Lucene query syntax. But that
    syntax is supported in eDisMax. Let us check it out.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: DisMax处理大多数查询。但仍有一些情况下DisMax无法提供结果。建议在这些情况下使用eDisMax。DisMax查询解析器不支持默认的Lucene查询语法。但该语法在eDisMax中得到支持。让我们来看看。
- en: 'To search for `books` in `cat`, let us execute the following query:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`cat`中搜索`books`，让我们执行以下查询：
- en: '[PRE25]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will be getting zero results because the query `q=cat:book` is not supported
    by DisMax. To execute this query in DisMax, we will have to specify an additional
    query parameter `qf` (query fields) as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到零结果，因为`q=cat:book`查询在DisMax中不受支持。要在DisMax中执行此查询，我们将不得不指定额外的查询参数`qf`（查询字段），如下所示：
- en: '[PRE26]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'But `q=cat:book` will work on eDisMax:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 但`q=cat:book`将在eDisMax上起作用：
- en: '[PRE27]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To understand how the Solarium library can be used for executing DisMax and
    eDisMax queries, we need to introduce the concept of **components**. Solr query
    has lots of options. Putting all options in a single query model can cause decreased
    performance. So, additional functionality is broken down into components. The
    query model of Solarium handles basic queries, and additional functionality can
    be added to the query by using components. Components are only loaded when used
    thus improving performance. The component structure allows for easy addition of
    more components.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Solarium库如何用于执行DisMax和eDisMax查询，我们需要介绍**组件**的概念。Solr查询有很多选项。将所有选项放在单个查询模型中可能会导致性能下降。因此，额外的功能被分解为组件。Solarium的查询模型处理基本查询，并且可以通过使用组件向查询添加附加功能。组件仅在使用时加载，从而提高性能。组件结构允许轻松添加更多组件。
- en: Executing queries using DisMax and eDisMax
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DisMax和eDisMax执行查询
- en: 'Let us explore how to execute DisMax and eDisMax queries using the Solarium
    library. First, get a DisMax component from our select query using the following
    code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨如何使用Solarium库执行DisMax和eDisMax查询。首先，使用以下代码从我们的选择查询中获取一个DisMax组件：
- en: '[PRE28]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Boosting is used in Solr to alter the score of some documents in a resultset,
    so that certain documents are ranked higher than others based on their content.
    A boost query is a raw query string that is inserted along with the user's query
    to boost certain documents in the result. We can set a boost on `author = martin`.
    This query will boost results where author contains `martin` by `2`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Solr中使用Boosting来改变结果集中某些文档的得分，以便基于其内容对某些文档进行排名。增强查询是一个原始查询字符串，它与用户的查询一起插入以提高结果中的某些文档。我们可以在`author
    = martin`上设置一个增强。这个查询将通过`2`来增强包含`martin`的作者的结果。
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Query fields specify the fields to query with certain boosts. The query string
    passed in `setQuery` function is matched against text in these fields. When a
    field is boosted, a match for a query text in that field is given more importance
    and so that document is ranked higher. In the following function, matches in the
    author field are boosted by `3`, where as matches in name are boosted by `2` and
    the `cat` field has no boost. So during search, the document in which the input
    query text matches with that in author is ranked higher compared to documents
    where text is found in the `name` or `cat` fields.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 查询字段指定要使用某些增强进行查询的字段。传递给`setQuery`函数的查询字符串与这些字段中的文本进行匹配。当字段被增强时，对于该字段中的查询文本的匹配更加重要，因此该文档排名更高。在下面的函数中，作者字段中的匹配被增强了`3`，而名称中的匹配被增强了`2`，而`cat`字段没有增强。因此，在搜索期间，与作者中的输入查询文本匹配的文档将比在`name`或`cat`字段中找到文本的文档排名更高。
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: By default, all clauses in the default Solr query are treated as optional, unless
    they are specified by a `+` or `-` sign. Optional clauses are interpreted as any
    one of the clauses in the query should match with the text in the specified fields
    in the document to consider that document to be a part of the search result. When
    dealing with optional clauses, the minimum match parameter says that some minimum
    number of clauses must match. The minimum number of clauses can be a number or
    a percentage. In case of a number irrespective of the number of clauses in the
    query the minimum specified must match. In case of a percentage, a number is computed
    from the available number of clauses and the percentage and it is rounded down
    to the nearest integer and then used.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，默认Solr查询中的所有子句都被视为可选的，除非它们由`+`或`-`符号指定。可选子句被解释为查询中的任何一个子句应该与文档中指定字段中的文本匹配，以便将该文档视为搜索结果的一部分。在处理可选子句时，最小匹配参数表示必须匹配一些最小数量的子句。子句的最小数量可以是一个数字或一个百分比。在数字的情况下，不管查询中的子句数量如何，都必须匹配指定的最小数量。在百分比的情况下，从可用的子句数量和百分比计算出一个数字，然后将其向下舍入到最接近的整数，然后使用它。
- en: '[PRE31]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Phrase query fields are used to boost the score of documents in case the terms
    in the query parameter appear in close proximity. The closer the query terms are
    in the Phrase query field, the higher is the score of the document. In the following
    code, this score is being boosted by `5` giving higher relevance to these documents:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 短语查询字段用于在查询参数中的术语在靠近的情况下提高文档的得分。短语查询字段中的查询术语越接近，文档的得分就越高。在下面的代码中，通过`5`来增强这个分数，从而提高了这些文档的相关性：
- en: '[PRE32]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Phrase slop is the number of positions a token has to be moved in relation to
    another token in order to match a phrase specified in the query. During indexing
    the input text is analyzed and broken into smaller words or phrases that are known
    as **tokens**. Similarly during search, the input query is broken into tokens
    that are matched with tokens in the index. This is used in conjunction to the
    `Phrase` fields to specify the slop to apply to queries with the `Phrase` fields
    set.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 短语斜率是一个标记相对于另一个标记必须移动的位置数，以匹配查询中指定的短语。在索引期间，输入文本被分析并分解为更小的单词或短语，称为**标记**。同样，在搜索期间，输入查询被分解为与索引中的标记匹配的标记。这与`Phrase`字段一起使用，用于指定要应用于具有设置`Phrase`字段的查询的斜率。
- en: '[PRE33]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Query slop specifies the slop permitted in phrases in the user's input query.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 查询斜率指定用户输入查询中短语中允许的斜率。
- en: '[PRE34]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: eDisMax has all features of the DisMax parser and extends it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: eDisMax具有DisMax解析器的所有功能并对其进行了扩展。
- en: 'All of the preceding mentioned functions will also work with eDisMax queries.
    All we have to do is get the eDisMax component and call these functions on the
    eDisMax component. To get the eDisMax component, call the `getEDisMax()` function
    as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前述提到的功能也适用于eDisMax查询。我们所要做的就是获取eDisMax组件，并在eDisMax组件上调用这些功能。要获取eDisMax组件，请调用`getEDisMax()`函数如下：
- en: '[PRE35]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In addition to this, field-based queries similar to that supported by the basic
    Solr query parser are also supported in eDisMax and they give us better flexibility
    in creating our search query.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，eDisMax还支持基本Solr查询解析器支持的基于字段的查询，并且在创建我们的搜索查询时给我们更好的灵活性。
- en: eDisMax provides us with the option of applying a boost function with multiplicative
    effect. We can use the `setBoostFunctionsMult()` function to provide a boost function
    that will multiply with the score. The DisMax parser on the other hand provides
    the `setBoostFunctions()` function, which can influence the score by adding the
    resultant boost of the function to the score of the query.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: eDisMax为我们提供了应用具有乘法效应的增强函数的选项。我们可以使用`setBoostFunctionsMult()`函数来提供一个将与分数相乘的增强函数。另一方面，DisMax解析器提供了`setBoostFunctions()`函数，它可以通过将函数的结果增强添加到查询的分数中来影响分数。
- en: eDisMax provides some other functions such as `setPhraseBigramFields()`, which
    chops the user query into bigrams and queries the fields specified with the related
    boost. For example, if the user has entered `hello world solr`, it will be broken
    into `hello world` and `world solr` and executed on the fields specified in these
    functions. Similarly, another `setPhraseTrigramFields()` function can be used
    to break the user input into trigrams instead of bigrams. Trigrams would contain
    three-word phrases instead of the two-word phrases we saw earlier in bigrams.
    eDisMax also provides functions such as `setPhraseBigramSlop()` and `setPhraseTrigramSlop()`
    to specify custom slop with respect to the bigram and trigram fields during search.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: eDisMax提供了一些其他函数，例如`setPhraseBigramFields()`，它将用户查询切成二元组，并查询指定的字段与相关的增强。例如，如果用户输入了`hello
    world solr`，它将被分解为`hello world`和`world solr`，并在这些函数中指定的字段上执行。类似地，另一个`setPhraseTrigramFields()`函数可以用于将用户输入分解为三元组，而不是二元组。三元组将包含三个词组，而不是我们之前在二元组中看到的两个词组。eDisMax还提供了函数，如`setPhraseBigramSlop()`和`setPhraseTrigramSlop()`，用于在搜索期间指定与二元组和三元组字段相关的自定义slop。
- en: '**Slop** is the number of positions a token has to be moved with respect to
    another to get a match. A slop of `5` between tokens `t1` and `t2` would mean
    that `t1` should occur within five tokens of `t2`.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Slop**是一个标记必须相对于另一个标记移动的位置数。标记`t1`和`t2`之间的`slop`为`5`意味着`t1`应该在`t2`的五个标记内出现。'
- en: Let us look at the Solr query logs for DisMax and eDisMax queries.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看DisMax和eDisMax查询的Solr查询日志。
- en: '[PRE36]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We can see that in addition to the normal parameters of Solr query, there is
    a `defType` parameter that specifies the type of query. In the preceding case,
    we can see that `defType` is DisMax or eDisMax depending on the type of query
    we executed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，除了Solr查询的常规参数之外，还有一个`defType`参数，用于指定查询的类型。在前面的情况下，我们可以看到`defType`是DisMax或eDisMax，具体取决于我们执行的查询类型。
- en: Date boosting in an eDisMax query
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在eDisMax查询中的日期增强
- en: Let us use eDisMax to boost the results of a search based on date so that the
    most recent book appears on top. We will use the `setBoostFunctionsMult()` function
    to specify the boost on `modified_date`, which in our case stores the date when
    the record was last added or updated.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用eDisMax根据日期增强搜索结果，以便最近的书籍出现在顶部。我们将使用`setBoostFunctionsMult()`函数来指定对`modified_date`的增强，在我们的情况下，它存储了记录最后添加或更新的日期。
- en: '[PRE37]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here we are searching for all books where the author is not named Martin (`martin`).
    The `–` (negative sign) is meant for *not query*. And we have added a multiplicative
    boost on the reciprocal of the date between today and last modified date. The
    `recip` function provided by Solr is defined as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在搜索所有作者不是Martin（`martin`）的书籍。`-`（负号）用于*非查询*。我们还对今天和上次修改日期之间的倒数进行了乘法增强。Solr提供的`recip`函数定义如下：
- en: '[PRE38]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here `m`, `a`, and `b` are constants, `x` can be any numeric value or complex
    function. In our case, `x` is the number of milliseconds between `NOW` and `last_modified`.
    We are adding `1` in the denominator to avoid errors in cases where `last_modified`
    is not present. This shows that as the difference between `NOW` and `last_modified`
    increases the boost for that document decreases. Recent documents have higher
    `last_modified` and so the difference with respect to `NOW` is less and so boost
    is more. Let us check the Solr logs for the query.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`m`，`a`和`b`是常数，`x`可以是任何数值或复杂函数。在我们的情况下，`x`是`NOW`和`last_modified`之间的毫秒数。我们在分母中添加`1`以避免在`last_modified`不存在的情况下出现错误。这表明随着`NOW`和`last_modified`之间的差异增加，该文档的增强减少。最近的文档具有更高的`last_modified`，因此与`NOW`相关的差异较小，因此增强更多。让我们检查查询的Solr日志。
- en: '[PRE39]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Copy and paste the parameters from the query in Solr log and append to the Solr
    `select` URL. Also change `wt=json` to `wt=csv`. This will give a comma separated
    view of the results.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 复制并粘贴Solr日志中的查询参数，并附加到Solr `select` URL。还将`wt=json`更改为`wt=csv`。这将给出结果的逗号分隔视图。
- en: '[PRE40]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![Date boosting in an eDisMax query](graphics/4920_03_01.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![在eDisMax查询中的日期增强](graphics/4920_03_01.jpg)'
- en: The URL can be altered further to tune/modify the query as per our requirement.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 可以进一步修改URL以根据我们的要求调整/修改查询。
- en: Advanced query parameters
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级查询参数
- en: Alternative queries are used when the query parameter is either blank or not
    specified. Solarium by default sets the query parameter as `*:*`. Alternative
    queries can be used to get all documents from an index for faceting purposes.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 备用查询在查询参数为空或未指定时使用。Solarium默认将查询参数设置为`*:*`。备用查询可用于从索引中获取所有文档以进行分面目的。
- en: '[PRE41]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: For selecting all documents in DisMax/eDisMax, the normal query syntax `*:*`
    does not work. To select all documents, set the default query value in Solarium
    query to empty string. This is required as the default query in Solarium is `*:*`.
    Also set the alternative query to `*:*`. DisMax/eDisMax normal query syntax does
    not support `*:*`, but the alternative query syntax does.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于选择所有DisMax/eDisMax中的文档，正常的查询语法`*:*`不起作用。要选择所有文档，请将Solarium查询中的默认查询值设置为空字符串。这是因为Solarium中的默认查询是`*:*`。还将备用查询设置为`*:*`。DisMax/eDisMax正常查询语法不支持`*:*`，但备用查询语法支持。
- en: Summary
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We were able to execute select queries on Solr using the Solarium library. We
    explored the basic parameters for the `select` query. We saw how to use a configuration
    array to create a Solarium query. We were able to iterate through the results
    after executing a query. We extended the query class to re-use queries. We were
    able to do pagination on our existing query and were able to change the sorting
    parameters without recreating the complete query again. We saw DisMax and eDisMax
    query modes in Solr. We also got an idea of the component based structure of Solarium
    library. We explored the query parameters for DisMax and eDisMax queries. We also
    saw how to use an eDisMax query to do "recent first" date boosting on Solr. Finally,
    we saw some advanced query parameters for DisMax and eDisMax in Solarium.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够使用Solarium库在Solr上执行选择查询。我们探索了“select”查询的基本参数。我们看到如何使用配置数组来创建Solarium查询。我们能够在执行查询后遍历结果。我们扩展了查询类以重复使用查询。我们能够对现有查询进行分页，并能够在不重新创建完整查询的情况下更改排序参数。我们在Solr中看到了DisMax和eDisMax查询模式。我们还对Solarium库的基于组件的结构有了一些了解。我们探索了DisMax和eDisMax查询的查询参数。我们还看到了如何使用eDisMax查询在Solr上进行“最近优先”日期提升。最后，我们在Solarium中看到了一些高级查询参数，用于DisMax和eDisMax。
- en: In the next chapter, we will go deeper into advanced queries based on different
    criteria from our query result.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究基于查询结果不同标准的高级查询。
