- en: Chapter 7. Write Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。编写测试
- en: At this point, our legacy application has been partially modernized so that
    we have all existing classes in a central location. Those classes now enjoy freedom
    from `global` and `new` using dependency injection. The proper thing to do now
    is to write tests for these classes so that, if we ever need to change them, we
    know that their pre-existing behavior remains intact.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的遗留应用程序已经部分现代化，以至于我们所有现有的类都在一个中心位置。这些类现在使用依赖注入摆脱了`global`和`new`。现在应该为这些类编写测试，以便如果我们需要更改它们，我们知道它们的现有行为仍然完好无损。
- en: Fighting test resistance
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对抗测试的抵抗
- en: We are probably not eager to spend time writing tests right now. We don't want
    to lose the forward momentum we are feeling. Just as we believe we are making
    some real progress, stopping to write tests feels like make-work. It takes away
    from the joy of making yet another series of improvements to the awful codebase
    that we have been suffering under for so long.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能不急于现在花时间编写测试。我们不想失去我们正在感受到的前进动力。正当我们相信我们正在取得一些真正的进展时，停下来编写测试感觉就像是在做无用功。这会削弱我们对长期以来一直受苦的糟糕代码库进行一系列改进的乐趣。
- en: The resistance to writing tests is understandable. I myself was only a slow
    convert to automated testing. If one is not used to it, the act of writing tests
    feels alien, unfamiliar, challenging, and unproductive. It is very easy to say,
    I can see the code is working, because the application is working.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不愿意编写测试的抵抗是可以理解的。我自己也是一个对自动化测试转变缓慢的人。如果一个人不习惯编写测试，那么编写测试的行为会感到陌生、不熟悉、具有挑战性和无效。很容易说，我可以看到代码是有效的，因为应用程序是有效的。
- en: 'And yet if we do not write tests, we are condemning ourselves to continued
    rounds of suffering later. We are enabling a particular kind of awfulness in our
    legacy application: that feeling of dread we feel when we change one part of the
    application, not knowing what other parts of the application are going to break
    as a result.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们不编写测试，我们就注定要在以后不断地遭受痛苦。我们正在使我们的遗留应用程序变得更糟：当我们更改应用程序的某一部分时，我们会感到恐惧，因为我们不知道更改会导致应用程序的其他部分出现什么问题。
- en: So while it may be true that writing tests sucks, it is also true that "having
    written tests" is awesome. It is awesome because, as we make changes to our classes,
    we can run an automated test suite, and it will tell us immediately if anything
    has broken after a change.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，尽管编写测试可能很糟糕，但“已编写测试”也是很棒的。这很棒，因为当我们对类进行更改时，我们可以运行自动化测试套件，它会立即告诉我们在更改后是否有任何问题。
- en: The way of Testivus
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试之道
- en: 'Even if we are already familiar with writing tests, all of the dogma that surrounds
    testing can be intimidating:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们已经熟悉编写测试，围绕测试的所有戒律也可能令人生畏：
- en: Do not interact with the file system; build a virtual file system instead.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要与文件系统交互；而是构建一个虚拟文件系统。
- en: Do not interact with the database; build a set of data fixtures instead.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要与数据库交互；而是构建一组数据夹具。
- en: Rewrite your classes to use interfaces instead of concrete classes, and write
    test doubles for all the dependencies.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写你的类，使用接口而不是具体类，并为所有依赖项编写测试替身。
- en: These are the kinds of dogmatic commands that make testing seem like an insurmountable
    challenge. Surely we can build our tests later when everything else is done! The
    problem is that there will never be a point when everything else is done, and
    so the tests will never come into being.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是使测试看起来像是一个不可逾越的挑战的教条命令。当其他事情都做完时，当然我们可以稍后再构建我们的测试！问题是，永远不会有一刻是其他事情都做完了，因此测试永远不会出现。
- en: As an antidote to the dogma of testing commandments, I suggest following *The
    Way Of Testivus* ([http://www.artima.com/weblogs/viewpost.jsp?thread=203994](http://www.artima.com/weblogs/viewpost.jsp?thread=203994))
    instead. The core message of *The Way of Testivus* is More testing karma, less
    testing dogma.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对测试戒律的解药，我建议遵循*测试之道*（[http://www.artima.com/weblogs/viewpost.jsp?thread=203994](http://www.artima.com/weblogs/viewpost.jsp?thread=203994)）。*测试之道*的核心信息是更多的测试因果报应，少一些测试戒律。
- en: 'These are the major points we need to take from *Testivus* in regard to modernizing
    our legacy application:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们需要从*测试之道*中了解的关于现代化我们的遗留应用程序的主要观点：
- en: The best time to test is when the code is fresh.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试的最佳时机是在代码刚写好的时候。
- en: Write the test that needs to be written.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写需要编写的测试。
- en: An imperfect test today is better than a perfect test someday.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 今天的不完美测试比将来某一天的完美测试更好。
- en: Write the test you can today.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 今天写你能写的测试。
- en: The code in the classes is stale. That code is part of a legacy application,
    after all. But now that we have spent so much time reorganizing the classes and
    removing their `global` and `new` keywords in favor of dependency injection, the
    code in those classes has been made fresh again in our minds. Now is the time
    to write the tests for these classes, while their operation is still in recent
    memory.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 类中的代码已经陈旧。毕竟，那些代码是遗留应用程序的一部分。但是现在，我们已经花了很多时间重新组织类，并使用依赖注入来替换它们的`global`和`new`关键字，这些类中的代码在我们的思想中又变得新鲜起来。现在是写这些类的测试的时候了，因为它们的操作仍然在最近的记忆中。
- en: 'We should not get hung up on writing proper unit tests that adhere to every
    commandment of testing dogma. Instead, we should write the best test we can, even
    if the test is imperfect:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不应该被困扰于编写符合测试戒律的适当单元测试。相反，我们应该尽力编写最好的测试，即使测试不完美：
- en: If we can write a characterization test that only checks the output as-it-is,
    then we should do so.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们可以编写一个表征测试，只检查输出如何，那么我们应该这样做。
- en: If we can write a functional or integration test that interacts with the database,
    network, or file system, then we should do so.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们可以编写与数据库、网络或文件系统交互的功能或集成测试，那么我们应该这样做。
- en: If we can write a loose unit test that combines concrete classes, then we should
    do so.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们可以编写一个松散的单元测试，结合具体类，那么我们应该这样做。
- en: If we can write a strict unit test that uses test doubles to fully isolate the
    tested class, then we should do so.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们可以编写严格的单元测试，使用测试替身完全隔离被测试的类，那么我们应该这样做。
- en: An imperfect test can be perfected as we become more adept at testing. A test
    that does not exist cannot be perfected at all.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在测试中变得更加熟练，一个不完美的测试可以得到完善。一个不存在的测试根本无法得到完善。
- en: We will write the tests we can, while we can, as soon as we can. Waiting to
    write tests will only increase the inertia against writing tests. The code will
    grow more stale in our mind, making the tests harder to write. Writing tests today
    will give us a sense of accomplishment and increase our inertia in favor of writing
    tests.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尽可能快地编写我们可以编写的测试。等待编写测试只会增加反对编写测试的惯性。代码在我们的脑海中会变得更加陈旧，使得编写测试变得更加困难。今天编写测试将给我们一种成就感，并增加我们编写测试的惯性。
- en: Setting up a test suite
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置测试套件
- en: It is not within the scope of this book to fully explain the technique and methodology
    of writing tests. Instead, we will review a very brief summary of the process
    involved in setting up the automated test suite and writing a simple test. For
    a more thorough treatment of testing in PHP, refer to *The Grumpy Programmer's
    PHPUnit Cookbook* ([http://grumpy-phpunit.com/](http://grumpy-phpunit.com/))by
    *Chris Hartjes*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的范围并不包括完全解释编写测试的技术和方法。相反，我们将简要总结设置自动化测试套件和编写简单测试所涉及的过程。有关PHP测试的更全面的处理，请参阅*The
    Grumpy Programmer's PHPUnit Cookbook*（[http://grumpy-phpunit.com/](http://grumpy-phpunit.com/)）by
    *Chris Hartjes*。
- en: Install PHPUnit
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装PHPUnit
- en: There are many different testing systems in PHP land, but the most commonly
    used one is PHPUnit. We need to install PHPUnit on our development and testing
    servers in order to write and execute our tests. The full installation instructions
    are at the PHPUnit site.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: PHP领域有许多不同的测试系统，但最常用的是PHPUnit。我们需要在开发和测试服务器上安装PHPUnit，以便编写和执行我们的测试。完整的安装说明在PHPUnit网站上。
- en: 'One easy way to install PHPUnit is via Composer:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Composer安装PHPUnit的一种简单方法是：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another way is to install a `.phar` of PHPUnit directly:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是直接安装PHPUnit的`.phar`：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create a tests/ directory
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个tests/目录
- en: Once we have PHPUnit installed, we need to create a `tests/` directory in our
    legacy application. The name and location do not matter so much as the fact that
    the purpose and place are obvious. The most obvious place is probably at the root
    of the legacy application, though it should not be directly accessible by browsers.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安装PHPUnit后，我们需要在我们的遗留应用程序中创建一个`tests/`目录。名称和位置并不那么重要，重要的是目的和位置是明显的。最明显的地方可能是在遗留应用程序的根目录，尽管它不应该直接被浏览器访问。
- en: Within the `tests/` directory, we need to create a subdirectory named for our
    central class directory location. If all our application classes are in a directory
    named `classes/`, then we should have a `tests/classes/` directory. The idea is
    for our testing structure to mimic the structure of our application classes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tests/`目录中，我们需要创建一个以我们的中心类目录位置命名的子目录。如果我们所有的应用程序类都在一个名为`classes/`的目录中，那么我们应该有一个`tests/classes/`目录。我们的测试结构的想法是模仿我们的应用程序类的结构。
- en: 'In addition to the `tests/classes/` subdirectory, the `tests/` directory should
    contain two files. The first is a `bootstrap.php` file that PHPUnit will execute
    when it runs. Its purpose is to help set up the execution environment for the
    tests. By default, PHPUnit will not use the application autoloader code, so creating
    and registering the autoloader is a classic use for the `bootstrap.php` file.
    Here is an example using the autoloader from an earlier chapter:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`tests/classes/`子目录之外，`tests/`目录还应包含两个文件。第一个是`bootstrap.php`文件，PHPUnit在运行时将执行该文件。它的目的是帮助设置测试的执行环境。默认情况下，PHPUnit不会使用应用程序的自动加载器代码，因此创建和注册自动加载器是`bootstrap.php`文件的经典用法。以下是一个使用之前章节中的自动加载器的示例：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also in the `tests/` directory, we need to create a `phpunit.xml` file. This
    tells PHPUnit how to bootstrap itself and where the tests are located:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 还在`tests/`目录中，我们需要创建一个`phpunit.xml`文件。这告诉PHPUnit如何引导自己以及测试的位置：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After creating the `tests/` directory and its contents, our legacy application
    directory structure should look something like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`tests/`目录及其内容后，我们的遗留应用程序目录结构应该如下所示：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Pick a class to test
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一个要测试的类
- en: Now that we have a `tests/` directory in place, we can actually write a test
    for one of our application classes. The easiest way to get started is to pick
    a class that has no dependencies. We should be familiar enough with the codebase
    at this point that we know which classes have dependencies and which do not. If
    we cannot find a class that has no dependencies, we should pick the one with the
    fewest dependencies, or with the least-complex dependencies.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了一个`tests/`目录，我们实际上可以为我们的应用程序类之一编写一个测试。开始的最简单方法是选择一个没有依赖项的类。此时，我们应该对代码库足够熟悉，以至于知道哪些类有依赖项，哪些没有。如果找不到没有依赖项的类，我们应该选择依赖项最少或依赖项最简单的类。
- en: 'What we want to do here is *start small* and get some early wins. Each win
    will give us the drive and motivation to continue with larger, more complex tests.
    These smaller wins will accumulate into a final big win: a fully-tested set of
    classes.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要在这里*从小处着手*并取得一些早期的成功。每一次成功都会给我们继续进行更大、更复杂的测试的动力和动机。这些小的成功将累积成最终的大成功：一组经过全面测试的类。
- en: Write a test case
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写一个测试用例
- en: Let's say we have picked a class named `Foo` that has no dependencies, and that
    it has a method called `doSomething()`. We are now going to write a test for this
    class method.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们选择了一个名为`Foo`的类，它没有依赖项，并且有一个名为`doSomething()`的方法。现在我们将为这个类的方法编写一个测试。
- en: 'First, we create a skeleton test file in our `tests/classes/` directory. Its
    location should mimic the location of the class being tested. We add `Test` to
    the end of the class name, and extend `PHPUnitFramework_TestCase_` so that we
    have access to the various `assert*()` methods in the testing class:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的`tests/classes/`目录中创建一个骨架测试文件。它的位置应该模仿被测试的类的位置。我们在类名后面添加`Test`，并扩展`PHPUnitFramework_TestCase_`，以便我们可以访问测试类中的各种`assert*()`方法：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we try to run our tests now with `phpunit`, the test will fail because it
    has no test methods in it:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在尝试用 `phpunit` 运行测试，测试将会失败，因为它里面没有测试方法：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Believe it or not, this is just fine! As *The Way Of Testivus* tells us, we
    rejoice when our tests pass, and we rejoice when they fail. The failure here tells
    us that PHPUnit has successfully found our test class, but did not find any tests
    in that class. That tells us what to do next.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，这都没问题！正如《测试之道》所告诉我们的那样，我们在测试通过时感到高兴，测试失败时也同样如此。这里的失败告诉我们 PHPUnit 成功找到了我们的测试类，但在该类中没有找到任何测试。这告诉我们接下来该做什么。
- en: 'The next step is to add a test method for a public method of the class being
    tested. All test methods begin with the word `test`, so we will test the `doSomething()`
    method using a method named `testDoSomething()`. In it, we will create an instance
    of the `_Foo_` class, invoke its public `doSomething()` method, and assert that
    its actual output is the same as what we expect it to be:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为被测试类的公共方法添加一个测试方法。所有测试方法都以单词 `test` 开头，因此我们将使用名为 `testDoSomething()` 的方法来测试
    `doSomething()` 方法。在其中，我们将创建一个 `_Foo_` 类的实例，调用它的公共 `doSomething()` 方法，并断言它的实际输出与我们期望的输出相同：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we can run our test suite again with `phpunit`. As long as the `doSomething()`
    method returns the string `Did the thing!` then our test will pass.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以再次用 `phpunit` 运行我们的测试套件。只要 `doSomething()` 方法返回字符串 `Did the thing!`，我们的测试就会通过。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We rejoice because our tests have passed!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的测试通过而感到高兴！
- en: If `doSomething()` ever returns anything different, then the test will fail.
    This means that if we change `doSomething()` in the course of our following work,
    we will know that its behavior has changed. We will rejoice in its failure, knowing
    that we have caught a bug before it went into production, and then fix the code
    until all the tests pass.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `doSomething()` 返回任何不同的东西，那么测试将会失败。这意味着如果我们在后续工作中更改了 `doSomething()`，我们将知道它的行为已经改变。我们会为它的失败感到高兴，知道我们在进入生产之前就捕捉到了一个
    bug，然后修复代码，直到所有测试都通过。
- en: Do ... While
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 做……当
- en: After we write a passing test, we commit it to revision control and push it
    to our central repository. We continue writing tests for each public method in
    the application class, committing and pushing as we go. When all the public methods
    in the application class have passing tests, we pick another class to test, and
    begin again with a new test class.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写通过的测试后，我们将其提交到版本控制并推送到我们的中央仓库。我们继续为应用程序类中的每个公共方法编写测试，一边编写一边提交和推送。当应用程序类中的所有公共方法都有通过的测试时，我们选择另一个类进行测试，并从头开始一个新的测试类。
- en: Common Questions
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: Can we skip this step and do it later?
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们可以跳过这一步，以后再做吗？
- en: No.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不。
- en: Come On, Really, Can We Do This Later?
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 真的吗，我们可以以后再做这个吗？
- en: Look, I get it. I really do. Testing feels unrewarding at this point in our
    modernization process. If the entire rest of the chapter has not convinced you
    of the benefit of tests, then there's not much else I can say to convince you
    now. If you want to skip this step, you're going to skip it no matter what advice
    you read here.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我明白。我真的明白。在我们现代化过程的这一点上，测试似乎没有回报。如果整个章节都没有说服你测试的好处，那么我现在也没什么别的可以说服你的了。如果你想跳过这一步，无论你在这里读到什么建议，你都会跳过它。
- en: 'So let us assume that our reasons for avoiding tests at this point are perfectly
    sensible and well-adjusted to our particular context. With that in mind, let''s
    take a look at some things we can do to get those tests done, if not now then
    over the course of the project. Go on to the next chapter (unadvisedly!) but then
    commit to one or more of the following options:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们假设我们在这一点上避免测试的理由是完全合理的，并且与我们特定的情境相适应。考虑到这一点，让我们看看如果现在做不到，那么在项目过程中我们可以做些什么来完成这些测试。继续下一章（不建议！），然后承诺执行以下一个或多个选项：
- en: Complete at least one new test class per day.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每天至少完成一个新的测试类。
- en: Each time we use a method in the codebase, check to see if there is a test for
    it. If there is not, write one before using the method.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次在代码库中使用一个方法时，都要检查是否有针对它的测试。如果没有，就在使用该方法之前编写一个测试。
- en: As we fix a bug or build a feature, create a list of methods used over the course
    of the task, then write tests for those methods when the task is complete.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在修复 bug 或构建功能时，创建一个在任务过程中使用的方法列表，然后在任务完成后为这些方法编写测试。
- en: When we add a new class method, write a corresponding test for it.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们添加一个新的类方法时，为其编写相应的测试。
- en: Delegate the writing of tests to another developer, perhaps a junior developer.
    Then we can have the "fun" of modernizing, and the junior developer can have the
    perceived boring work of writing tests, but beware ... pretty soon, the junior
    developer will know more about the codebase than we do.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试编写的工作委托给另一个开发人员，也许是一名初级开发人员。然后我们可以享受现代化的“乐趣”，而初级开发人员可以承担编写测试的看似无聊的工作，但要小心……很快，初级开发人员将比我们更了解代码库。
- en: These options allow us to build up a test suite and still feel like we are making
    progress elsewhere. Creating an automated test suite is a non-negotiable aspect
    of modernizing our legacy application. Write tests now, or write them as we go,
    but write them, sooner rather than later.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项让我们能够建立一个测试套件，并且仍然感觉自己在其他方面取得了进展。创建一个自动化测试套件是现代化遗留应用程序的一个不可妥协的方面。现在就编写测试，或者在进行过程中编写，但尽早编写，而不是晚些时候。
- en: What about hard-to-test classes?
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那些难以测试的类怎么办？
- en: 'Even with dependency injection in place, some of the classes in the legacy
    application are going to be hard to write tests for. There are lots of ways in
    which the classes can be hard to test and I cannot do the solutions justice in
    this book. Instead, please refer to these works:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 即使依赖注入已经就位，遗留应用程序中的一些类仍然很难编写测试。类的测试可能会有很多难点，我无法在本书中充分解决这些问题。请参考以下作品：
- en: '*Working Effectively With Legacy Code* by *Michael Feathers*. The examples
    throughout are in Java, but the situations are similar to those in PHP. Feathers
    shows how to break dependencies, introduce seams, and otherwise improve the testability
    of legacy classes.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Michael Feathers*的*与遗留代码有效工作*。书中的示例都是用Java编写的，但情况与PHP中的情况类似。Feathers展示了如何打破依赖关系，引入接缝，以及改进遗留类的可测试性。'
- en: Refactoring by Fowler et al. This one also uses Java in the examples, but thanks
    to Adam Culp, we have the same examples converted to PHP. As with Fowler's Patterns
    of Enterprise Application Architecture, the Refactoring book will give you a vocabulary
    to describe things you probably already know how to do, as well as introduce you
    to new techniques.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fowler等人的重构。这本书也使用Java作为示例，但由于Adam Culp的贡献，我们将相同的示例转换为了PHP。与Fowler的《企业应用架构模式》一样，重构书将为您提供一种词汇来描述您可能已经知道如何做的事情，同时还会向您介绍新的技术。
- en: The information in these publications will help us improve the quality of our
    classes without changing the behavior of the classes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些出版物中的信息将帮助我们改进我们的类的质量，而不改变类的行为。
- en: What about our earlier characterization tests?
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们之前的特性测试呢？
- en: The tests we write as a result of this chapter are probably not a replacement
    for any existing characterization tests from the chapter on Prerequisites. Having
    the two sets of tests is likely to be a blessing, not a curse. At some point,
    the characterization tests may end up being converted to acceptance tests for
    use by the QA team. Until then, run both sets of tests from time to time.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据本章写的测试可能不是替代先决条件章节中现有特性测试的替代品。拥有两组测试很可能是一种祝福，而不是诅咒。在某个时候，特性测试可能会被转换为供QA团队使用的验收测试。在那之前，不妨偶尔运行两组测试。
- en: Should we test private and protected methods?
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们应该测试私有和受保护的方法吗？
- en: 'Probably not. There are dogmatic reasons for this that I will not go into here,
    but the short version is this: tests that inspect too deeply the internal workings
    of a class become difficult to work with.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可能不会。这其中有一些教条主义的原因，我在这里不会详细说明，但简而言之：检查类的内部工作过于深入的测试会变得难以处理。
- en: Instead, we should test only the public methods on our classes. Any behavior
    exposed by these methods is likely to be the only behavior we care about. There
    are some exceptions to this rule, but at this stage in our testing career, the
    exceptions are less important than the rule.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们应该只测试我们类的公共方法。这些方法暴露的任何行为可能是我们关心的唯一行为。这个规则有一些例外，但在我们的测试生涯的这个阶段，例外不如规则重要。
- en: Can we change a test after we write it?
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们写完测试后可以更改测试吗？
- en: The time will come when we need to change the existing behavior of an application
    class method. In these cases, it is all right to change the related test to suit
    the new behavior. However, when we do so, we must be sure to run the entire test
    suite, not just the tests for that application class. Running the entire test
    suite will help us make sure that the change does not break behavior in other
    classes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有一天，我们需要改变应用程序类方法的现有行为。在这些情况下，修改相关的测试以适应新行为是可以的。但是，当我们这样做时，我们必须确保运行整个测试套件，而不仅仅是该应用程序类的测试。运行整个测试套件将帮助我们确保更改不会破坏其他类的行为。
- en: Do we need to test Third-party libraries?
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们需要测试第三方库吗？
- en: If our legacy application uses third-party libraries, they may already come
    with tests. We should run these from time to time.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的遗留应用程序使用第三方库，它们可能已经附带了测试。我们应该不时地运行这些测试。
- en: If the third-party libraries do not come with tests, we may choose to write
    some, depending on our priorities. If we are dependent on the library behaving
    the same way between upgrades, it would be wise to write some tests of our own
    to make sure that the expected behaviors remain in place.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第三方库没有附带测试，我们可能会根据我们的优先级选择编写一些测试。如果我们依赖于库在升级之间表现相同，编写一些我们自己的测试来确保预期的行为保持不变是明智的。
- en: Building tests for a third-party library may be difficult if it is not written
    in an easily-testable way. If the library is free software or open source, perhaps
    this is an opportunity to contribute back to the project. However, our main priority
    is probably our own legacy application, not third-party libraries.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为第三方库构建测试可能很困难，如果它没有以易于测试的方式编写。如果该库是自由软件或开源软件，也许这是一个为项目做出贡献的机会。然而，我们的主要优先事项可能是我们自己的遗留应用程序，而不是第三方库。
- en: What about code coverage?
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码覆盖率呢？
- en: Code coverage is a report given by PHPUnit to tell us how many lines of code
    we have tested. (Strictly speaking, it tells us the number of statements that
    have been tested).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率是PHPUnit提供的报告，告诉我们测试了多少行代码。（严格来说，它告诉我们测试了多少语句）。
- en: A particular case may only test part of a class, or part of a method, and leave
    some of the code untested. The parts that are tested are called the covered portions
    of the code and the parts that are not tested are uncovered.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 特定情况可能只测试类的一部分，或者方法的一部分，并留下一些未经测试的代码。被测试的部分称为代码的覆盖部分，而未经测试的部分称为未覆盖部分。
- en: It is mostly the uncovered parts of the codebase that we need to worry about.
    If anything in the uncovered code changes, the tests won't detect it, and so we
    may be open to bugs and other regressions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要需要担心的是代码库中未覆盖的部分。如果未覆盖的代码发生任何变化，测试将无法检测到，因此我们可能会面临错误和其他退化。
- en: If we can, we should discover the code coverage of our tests early and often.
    These coverage reports will help us determine what needs to be tested next, and
    which parts of the codebase need to be refactored so they are easier to test.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可以的话，我们应该尽早并经常发现我们测试的代码覆盖率。这些覆盖率报告将帮助我们确定下一步需要测试什么，以及代码库的哪些部分需要重构，以便更容易测试。
- en: More code coverage is better. However, reaching 100% line coverage is probably
    not feasible (and, indeed, is not the final goal, that being 100% condition/decision
    coverage among other things). If we can reach 100% coverage, though, we should.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 更多的代码覆盖率是更好的。然而，达到100%的行覆盖率可能是不可行的（而且实际上也不是最终目标，最终目标是100%的条件/决策覆盖率等）。不过，如果我们能够达到100%的覆盖率，那就应该努力去做。
- en: For more on this topic, please review the PHPUnit documentation on code coverage
    at [https://phpunit.de/manual/3.7/en/code-coverage-analysis.html](https://phpunit.de/manual/3.7/en/code-coverage-analysis.html).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个话题的更多信息，请查阅PHPUnit关于代码覆盖率的文档[https://phpunit.de/manual/3.7/en/code-coverage-analysis.html](https://phpunit.de/manual/3.7/en/code-coverage-analysis.html)。
- en: Review and next steps
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: When we have completed writing our tests, as briefly outlined in this chapter,
    we will have created a great trap for future bugs. Each time we run our tests,
    any changes to the expected behavior will stand out as failures for us to correct.
    This ensures that as we continue refactoring, we will be doing more good than
    harm to our legacy codebase as a whole.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成了本章中简要概述的测试编写时，我们将为未来的错误创建了一个很好的陷阱。每当我们运行测试时，对预期行为的任何更改都会作为失败突出，以便我们进行更正。这确保了在我们继续重构时，我们对整个旧代码库所做的贡献将比伤害更多。
- en: In addition, because we now have a working test suite, we can add tests for
    any new behavior extracted from our legacy codebase into our application classes.
    Each time we create a new application class method, we will also create a passing
    test for that method. Each time we modify an application class method, we will
    run the test suite so that we can find bugs and breaks before they make it into
    production. We will rejoice when our tests pass, and we will rejoice when they
    fail; each outcome is a positive sign when it comes to modernizing our legacy
    application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，因为我们现在有了一个可用的测试套件，我们可以为从旧代码库中提取出的任何新行为添加测试到我们的应用程序类中。每当我们创建一个新的应用程序类方法时，我们也会为该方法创建一个通过的测试。每当我们修改一个应用程序类方法时，我们将运行测试套件，以便在它们进入生产环境之前找到错误和破坏。当我们的测试通过时，我们会感到高兴，当它们失败时，我们也会感到高兴；每一种结果对于现代化我们的旧应用程序来说都是一个积极的迹象。
- en: With that, we can continue our modernization process. The next step is to extract
    our data retrieval and persistence behaviors from the page scripts and into a
    series of classes. Generally, this means moving all our SQL calls to a separate
    layer.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以继续我们的现代化进程。下一步是将数据检索和持久化行为从页面脚本中提取出来，放入一系列类中。通常，这意味着将所有的SQL调用移动到一个单独的层中。
