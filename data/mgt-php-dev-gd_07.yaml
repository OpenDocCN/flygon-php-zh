- en: Chapter 7. Testing and Quality Assurance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。测试和质量保证
- en: 'So far, we have covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了：
- en: The Magento fundamentals
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Magento基础知识
- en: Frontend development
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端开发
- en: Backend development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端开发
- en: Extending and working with the API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展和使用API
- en: 'However, we omitted a critical step of the development of any extension or
    custom code: testing and quality assurance.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们忽略了任何扩展或自定义代码开发的关键步骤：测试和质量保证。
- en: Despite the fact that Magento is a very complex and large platform, there is
    no included/integrated unit test suite on versions previous to Magento2.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Magento是一个非常复杂和庞大的平台，但在Magento2之前的版本中没有包含/集成的单元测试套件。
- en: For that reason, proper testing and quality assurance is often overlooked by
    most Magento developers either by lack of information or because of the large
    overhead of some of the testing tools, and while there are not many tools available
    for running a proper test with Magento, the ones that exist are of very high quality.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，适当的测试和质量保证经常被大多数Magento开发人员忽视，要么是因为缺乏信息，要么是因为一些测试工具的大量开销，虽然没有太多可用于运行Magento的适当测试的工具，但现有的工具质量非常高。
- en: In this chapter, we will take a look at the different options available for
    testing our Magento code, and we will also build some very basic tests for our
    custom extension.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看测试Magento代码的不同选项，并为我们的自定义扩展构建一些非常基本的测试。
- en: 'So let''s go over the topics covered in this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们来看看本章涵盖的主题：
- en: The different testing frameworks and tools available for Magento
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Magento可用的不同测试框架和工具
- en: The importance of testing our Magento code
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试我们的Magento代码的重要性
- en: How to set up, install, and use Ecomdev PHPUnit extension
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置、安装和使用Ecomdev PHPUnit扩展
- en: How to set up, install, and use Magento Mink for running functional tests
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置、安装和使用Magento Mink来运行功能测试
- en: Testing Magento
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Magento
- en: Before we start writing any test, it is important that we understand the concepts
    related to testing and more particularly to each of the available methodologies.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写任何测试之前，重要的是我们了解与测试相关的概念，尤其是每种可用方法论。
- en: Unit testing
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: The idea behind unit testing is writing tests for certain areas (units) of our
    code, so we can verify that the code works as expected and that function is returning
    expected values.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试的理念是为我们代码的某些区域（单元）编写测试，以便我们可以验证代码是否按预期工作，并且函数是否返回预期值。
- en: '*Unit testing is a method by which individual units of source code, sets of
    one or more computer program modules together with associated control data, usage
    procedures, and operating procedures, are tested to determine if they are fit
    for use.*'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*单元测试是一种方法，通过该方法测试源代码的单个单元，以确定它们是否适合使用，其中包括一个或多个计算机程序模块以及相关的控制数据、使用程序和操作程序。*'
- en: Another advantage of writing unit tests is that by performing the test, so we
    are more likely to write code that is easier to test.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试的另一个优势是，通过执行测试，我们更有可能编写更容易测试的代码。
- en: This means our code tends to be broken down into smaller but more specialized
    functions as we continue to write more and more tests. We start building a test
    suite that can be run against our codebase every time we introduce changes or
    functionalities; this is known as regression testing.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着随着我们不断编写更多的测试，我们的代码往往会被分解成更小但更专业的功能。我们开始构建一个测试套件，可以在引入更改或功能时针对我们的代码库运行；这就是回归测试。
- en: Regression testing
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回归测试
- en: Regression testing mostly refers to the practice of re-running existing test
    suites after making code changes to check whether a new functionality is not also
    introducing new bugs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 回归测试主要是指在进行代码更改后重新运行现有测试套件的做法，以检查新功能是否也引入了新错误。
- en: '*Regression testing is any type of software testing that seeks to uncover new
    software bugs, or regressions, in existing functional and non-functional areas
    of a system after changes, such as enhancements, patches, or configuration changes,
    have been made to them.*'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 回归测试是一种软件测试，旨在在对现有系统的功能和非功能区域进行更改（如增强、补丁或配置更改）后，发现新的软件错误或回归。
- en: In the particular case of a Magento store or any e-commerce site, we want to
    perform regression testing on critical features of the store such as checkout,
    customer registration, adding to the cart, and so on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Magento商店或任何电子商务网站的特定情况下，我们希望对商店的关键功能进行回归测试，例如结账、客户注册、添加到购物车等。
- en: Functional tests
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能测试
- en: Functional testing is more concerned with testing that the application returns
    the appropriate output based on a specific input, rather than what happens internally.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试更关注的是根据特定输入返回适当输出的应用程序，而不是内部发生的情况。
- en: '*Functional testing is a type of black-box testing that bases its test cases
    on the specifications of the software component under test. Functions are tested
    by feeding them input and examining the output, and internal program structure
    is rarely considered.*'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*功能测试是一种基于被测试软件组件的规范的黑盒测试类型。通过向它们提供输入并检查输出来测试功能，很少考虑内部程序结构。*'
- en: This is especially important for e-commerce websites like ours where we want
    to test the site as the customer would experience it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于像我们这样的电子商务网站尤为重要，我们希望测试网站与客户的体验一致。
- en: TDD
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TDD
- en: One testing methodology that has gained popularity in recent years and that
    is now coming to Magento is known as **Test-driven development** (**TDD**).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来变得越来越受欢迎的一种测试方法，现在也正在Magento中出现，被称为**测试驱动开发**（**TDD**）。
- en: '*Test-driven development (TDD) is a software development process that relies
    on the repetition of a very short development cycle: first the developer writes
    an (initially failing) automated test case that defines a desired improvement
    or new function, then produces the minimum amount of code to pass that test and
    finally refactors the new code to acceptable standards.*'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*测试驱动开发（TDD）是一种依赖于非常短的开发周期重复的软件开发过程：首先开发人员编写一个（最初失败的）自动化测试用例，定义所需的改进或新功能，然后生成最少量的代码来通过该测试，最后将新代码重构为可接受的标准。*'
- en: The basic concept behind TDD is to first write a failing test and then write
    code to pass the test; this generates very short development cycles and helps
    to streamline the code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: TDD背后的基本概念是首先编写一个失败的测试，然后编写代码来通过测试；这会产生非常短的开发周期，并有助于简化代码。
- en: Ideally, you want to start the development of your modules and extensions by
    using TDD in Magento. We omitted this in previous chapters due to the fact that
    it would add unnecessary complexity and confuse the reader.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，您希望通过在Magento中使用TDD来开始开发您的模块和扩展。我们在之前的章节中省略了这一点，因为这会增加不必要的复杂性并使读者困惑。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a full tutorial on TDD with Magento from scratch, visit `http://magedevguide.com/getting-started-with-tdd`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有关从头开始使用Magento进行TDD的完整教程，请访问`http://magedevguide.com/getting-started-with-tdd`。
- en: Tools and testing frameworks
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具和测试框架
- en: 'As mentioned before, there are several frameworks and tools available for testing
    PHP code and Magento code. Let''s get to know each one of them a little better:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，有几个框架和工具可用于测试PHP代码和Magento代码。让我们更好地了解每一个：
- en: '`Ecomdev_PHPUnit`: This extension is just amazing; the developers at Ecomdev
    created an extension that integrates PHPUnit with Magento and also adds Magento-specific
    assertions to PHPUnit, all without having to modify core files or affect the database.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ecomdev_PHPUnit`：这个扩展真是太棒了；Ecomdev的开发人员创建了一个集成了PHPUnit和Magento的扩展，还向PHPUnit添加了Magento特定的断言，而无需修改核心文件或影响数据库。'
- en: '`Magento_Mink`: Mink is a PHP library for the Behat framework that allows you
    to write functional and acceptance tests; Mink allows writing tests that simulate
    user behavior and browser interaction.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento_Mink`：Mink是Behat框架的PHP库，允许您编写功能和验收测试；Mink允许编写模拟用户行为和浏览器交互的测试。'
- en: '`Magento_TAF`: `Magento_TAF` stands for Magento Test Automation Framework,
    which is the official testing tool provided by Magento. `Magento_TAF` includes
    over 1,000 functional tests and is very powerful. Unfortunately, it has a major
    drawback; it has a large overhead and steep learning curve.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Magento_TAF`：`Magento_TAF`代表Magento测试自动化框架，这是Magento提供的官方测试工具。`Magento_TAF`包括超过1,000个功能测试，非常强大。不幸的是，它有一个主要缺点；它有很大的开销和陡峭的学习曲线。'
- en: Unit testing with PHPUnit
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用PHPUnit进行单元测试
- en: Before `Ecomdev_PHPUnit`, testing Magento with PHPUnit was problematic and really
    not very practical from the different methods that were available. Almost all
    required core code modifications or developers had to jump through hoops to set
    up basic PHPUnits.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Ecomdev_PHPUnit`之前，使用PHPUnit测试Magento是有问题的，而且从可用的不同方法来看，实际上并不实用。几乎所有都需要核心代码修改，或者开发人员必须费力地设置基本的PHPUnits。
- en: Installing Ecomdev_PHPUnit
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Ecomdev_PHPUnit
- en: 'The easiest way to install `Ecomdev_PHPUnit` is to grab a copy directly from
    the GitHub repository. Let''s write the following command on our console:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`Ecomdev_PHPUnit`的最简单方法是直接从GitHub存储库获取副本。让我们在控制台上写下以下命令：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now copy the file over to your Magento root folder.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将文件复制到您的Magento根目录。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Composer and Modman are alternative options available for installation. For
    more information on each, please visit [http://magedevguide.com/module-managers](http://magedevguide.com/module-managers).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Composer和Modman是可用于安装的替代选项。有关每个选项的更多信息，请访问[http://magedevguide.com/module-managers](http://magedevguide.com/module-managers)。
- en: Finally, we need to set the configuration to instruct the PHPUnit extension
    which database to use; `local.xml.phpunit` is a new file added by `Ecomdev_PHPUnit`.
    This file holds all the extension-specific configuration and specifies the name
    of the test database.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要设置配置，指示PHPUnit扩展使用哪个数据库；`local.xml.phpunit`是`Ecomdev_PHPUnit`添加的新文件。这个文件包含所有特定于扩展的配置，并指定测试数据库的名称。
- en: 'The file location is `app/etc/local.xml.phpunit`. Refer to the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/etc/local.xml.phpunit`。参考以下代码：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will need to create a new database for running tests and replace the example
    configuration values in the `local.xml.phpunit` file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为运行测试创建一个新的数据库，并在`local.xml.phpunit`文件中替换示例配置值。
- en: By default, this extension does not allow you to run the test on the same database;
    keeping the test database separate from the development and production allows
    us to run our test with confidence.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个扩展不允许您在同一个数据库上运行测试；将测试数据库与开发和生产数据库分开允许我们有信心地运行我们的测试。
- en: Setting up the configuration for our extension
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为我们的扩展设置配置
- en: 'Now that we have the PHPUnit extension installed and set up, we need to prepare
    our gift registry extension for running unit tests. Follow these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并设置了PHPUnit扩展，我们需要准备我们的礼品注册扩展来运行单元测试。按照以下步骤进行：
- en: Open the Gift Registry extension, `config.xml` file
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开礼品注册扩展的`config.xml`文件
- en: 'Add the following code (the file location is `app/code/local/Mdg/Giftregistry/etc/config.xml`):'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码（文件位置为`app/code/local/Mdg/Giftregistry/etc/config.xml`）：
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This new configuration node allows the PHPUnit extension to recognize the extension
    and run the matching tests.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的配置节点允许PHPUnit扩展识别扩展并运行匹配的测试。
- en: We also need to create a new directory called `Test` that we will use to place
    all our test files. One of the advantages about using `Ecomdev_PHPUnit` over previous
    methods is that this extension follows the Magento standards.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要创建一个名为`Test`的新目录，我们将用它来放置所有的测试文件。使用`Ecomdev_PHPUnit`相比以前的方法的一个优点是，这个扩展遵循Magento的标准。
- en: 'This means we have to keep the same module directory structure inside the `Test`
    folder:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们必须在`Test`文件夹内保持相同的模块目录结构：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Based on that, the naming convention for each `Test` case class would be `[Namespace]_[Module
    Name]_Test_[Group Directory]_[Entity Name]`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此，每个`Test`案例类的命名约定将是`[Namespace]_[Module Name]_Test_[Group Directory]_[Entity
    Name]`。
- en: 'Each `Test` class must extend one of the following three base `Test` classes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`Test`类必须扩展以下三个基本`Test`类中的一个：
- en: '`EcomDev_PHPUnit_Test_Case`: This class is used for testing helpers, models,
    and blocks'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EcomDev_PHPUnit_Test_Case`：这个类用于测试助手、模型和块'
- en: '`EcomDev_PHPUnit_Test_Case_Config`: This class is used for testing the module
    configuration'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EcomDev_PHPUnit_Test_Case_Config`：这个类用于测试模块配置'
- en: '`EcomDev_PHPUnit_Test_Case_Controller`: This class is used for testing the
    layout rendering process and the controller logic'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EcomDev_PHPUnit_Test_Case_Controller`：这个类用于测试布局渲染过程和控制器逻辑'
- en: Anatomy of a Test case
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试案例的解剖
- en: 'Before jumping ahead and trying to create our first test, let''s break down
    one of the examples provided by `Ecomdev_PHPUnit`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在跳入并尝试创建我们的第一个测试之前，让我们分解`Ecomdev_PHPUnit`提供的一个示例：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The first important thing to notice in the example `test` class is the comment
    annotations:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例`test`类中要注意的第一件重要的事情是注释注释：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'These annotations are used by the PHPUnit extension to identify which of the
    class functions are tests, and also, they allow us to set up specific settings
    for running each test. Let''s take a look at some of the available annotations:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注释被PHPUnit扩展用来识别哪些类函数是测试，它们还允许我们为运行每个测试设置特定的设置。让我们来看一下一些可用的注释：
- en: '`@test`: This annotation identifies a class function as a PHPUnit test'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@test`：这个注释将一个类函数标识为PHPUnit测试'
- en: '`@loadFixture`: This annotation specifies the use of fixtures'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@loadFixture`：这个注释指定了固定的使用'
- en: '`@loadExpectation`: This annotation specifies the use of expectations'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@loadExpectation`：这个注释指定了期望的使用'
- en: '`@doNotIndexAll`: By adding this annotation, we are telling the PHPUnit tests
    that they should not run any index after loading the fixtures'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@doNotIndexAll`：通过添加这个注释，我们告诉PHPUnit测试在加载固定后不应该运行任何索引'
- en: '`@doNotIndex [index_code]`: By adding this annotation, we can instruct PHPUnit
    not to run a specific index'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@doNotIndex [index_code]`：通过添加这个注释，我们可以指示PHPUnit不运行特定的索引'
- en: So now, you are probably a bit confused. Fixtures? Expectations? What are they?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在，你可能有点困惑。固定？期望？它们是什么？
- en: 'Following is a little description on Fixtures and Expectations:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对固定和期望的简要描述：
- en: '**Fixtures**: Fixtures are **yet another markup language** (**YAML**) files
    that represent database or configuration entities'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定**：固定是**另一种标记语言**（**YAML**）文件，代表数据库或配置实体'
- en: '**Expectations**: Expectations are useful if we don''t want to have hard-coded
    values in our tests and are also specified in YAML values'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**期望**：期望对我们的测试中不想要硬编码的值很有用，也是在YAML值中指定的'
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about the YAML markup, visit `http://magedevguide.com/resources/yaml`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 有关YAML标记的更多信息，请访问`http://magedevguide.com/resources/yaml`。
- en: So, as we see, fixtures provide the data for the tests to process, and the expectations
    are used to check if the results returned by the test are what we are expecting
    to see.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，正如我们所看到的，固定提供了测试处理的数据，期望用于检查测试返回的结果是否是我们期望看到的。
- en: Fixtures and expectations are stored inside each `Test` type directory. Following
    the example earlier, we would have a new directory called `Product/`. Inside it,
    we need a new directory for expectations and one for our fixtures.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 固定和期望存储在每个`Test`类型目录中。按照之前的例子，我们将有一个名为`Product/`的新目录。在里面，我们需要一个期望的新目录和一个我们的固定的新目录。
- en: 'Let''s take a look at the revised folder structure:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下修订后的文件夹结构：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Anatomy of a Test case](graphics/3060OS_07_01.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![测试案例的解剖](graphics/3060OS_07_01.jpg)'
- en: Creating a unit test
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个单元测试
- en: For our first UnitTest, let's create a very basic test that allows us to test
    the Gift Registry Models that we previously created.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个单元测试，让我们创建一个非常基本的测试，允许我们测试之前创建的礼品注册模型。
- en: 'As we mentioned before, `Ecomdev_PHPUnit` uses a separate database for running
    all the tests; for this, we need to create a new fixture that will provide all
    the data for our test case. Follow these steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，`Ecomdev_PHPUnit`使用一个单独的数据库来运行所有的测试；为此，我们需要创建一个新的固定，为我们的测试用例提供所有的数据。按照以下步骤：
- en: Open the `Test/Model` folder.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Test/Model`文件夹。
- en: Create a new folder called `Registry`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Registry`的新文件夹。
- en: Inside the `Registry` folder, create a new folder called `fixtures`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Registry`文件夹中，创建一个名为`fixtures`的新文件夹。
- en: 'Create a new file called `registryList.yaml` and paste the following code in
    it (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/fixtures/registryList.yaml`):'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`registryList.yaml`的新文件，并将以下代码粘贴到其中（文件位置为`app/code/local/Mdg/Giftregistry/Test/Model/fixtures/registryList.yaml`）：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It might not look like it, but we add a lot of information with this fixture.
    We will create the following fixture data:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能看起来不像，但我们通过这个固定添加了很多信息。我们将创建以下固定数据：
- en: A website scope
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网站范围
- en: A store group
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个商店组
- en: A store view
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个商店视图
- en: A customer record
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个客户记录
- en: Two gift registries
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个礼品注册
- en: By using fixtures, we are creating data on the fly that will be available for
    our test case. This gives us the consistency of running the test multiple times
    against the same data and the flexibility to easily change it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用固定，我们正在创建可用于我们的测试用例的数据。这使我们能够多次运行相同的数据测试，并灵活地进行更改。
- en: Now, you might be wondering how the PHPUnit extension knows how to pair a `Test`
    case with a specific fixture.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想知道PHPUnit扩展如何将`Test`案例与特定的固定配对。
- en: 'There are two ways the extension loads fixtures: one is by specifying the fixture
    inside the comment annotations, or if the fixture name is not specified, the extension
    will search a fixture with same name as the `Test` case function being executed.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展加载固定有两种方式：一种是在注释注释中指定固定，或者如果没有指定固定名称，扩展将搜索与正在执行的`Test`案例函数相同名称的固定。
- en: 'Knowing that, let''s create our first `Test` case:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 知道这一点，让我们创建我们的第一个`Test`案例：
- en: Navigate to the `Test/Model` folder.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Test/Model`文件夹。
- en: Create a new `Test` class called `Registry.php`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Registry.php`的新`Test`类。
- en: 'Add the following base code (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`):'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下基本代码（文件位置为`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`）：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We just created the base function, but we haven't added any logic yet. Before
    doing that, let's take a look at what actually constitutes a `Test` case.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了基本函数，但还没有添加任何逻辑。在这之前，让我们先看看什么构成了一个`Test`案例。
- en: 'A `Test` case works by using assertions to evaluate and test our code. Assertions
    are special functions that our `Test` cases inherit from the parent `TestCase`
    class. Among the default assertions available, we have:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`Test`案例通过使用断言来评估和测试我们的代码。断言是我们的`Test`案例从父`TestCase`类继承的特殊函数。在默认可用的断言中，我们有：
- en: '`assertEquals()`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEquals()`'
- en: '`assertGreaterThan()`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertGreaterThan()`'
- en: '`assertGreaterThanOrEqual()`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertGreaterThanOrEqual()`'
- en: '`assertLessThan()`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertLessThan()`'
- en: '`assertLessThanOrEqual()`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertLessThanOrEqual()`'
- en: '`assertTrue()`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertTrue()`'
- en: Now, these default assertions are great if we want to check variable's values;
    search for an array key, check attributes, and so on. But testing Magento code,
    using only these types of assertions, can prove difficult or even impossible.
    This is where `Ecomdev_PHPUnit` comes to the rescue.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们只使用这些类型的断言来测试Magento代码，可能会变得困难甚至不可能。这就是`Ecomdev_PHPUnit`发挥作用的地方。
- en: 'Not only has this extension integrated PHPUnit with Magento cleanly, by following
    their standards, it also adds Magento-specific assertions to the PHPUnit tests.
    Let''s take a look at some of the assertions added by the extension:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展不仅将PHPUnit与Magento整合得很好，遵循他们的标准，还在PHPUnit测试中添加了Magento特定的断言。让我们来看看扩展添加的一些断言：
- en: '`assertEventDispatched()`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEventDispatched()`'
- en: '`assertBlockAlias()`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertBlockAlias()`'
- en: '`assertModelAlias()`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertModelAlias()`'
- en: '`assertHelperAlias()`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertHelperAlias()`'
- en: '`assertModuleCodePool()`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertModuleCodePool()`'
- en: '`assertModuleDepends()`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertModuleDepends()`'
- en: '`assertConfigNodeValue()`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertConfigNodeValue()`'
- en: '`assertLayoutFileExists()`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertLayoutFileExists()`'
- en: Those are only a few of the assertions available, and as you can see, they give
    a lot of power for building comprehensive tests.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是可用的一些断言，正如你所看到的，它们为构建全面的测试提供了很大的力量。
- en: 'Now that we know a little more about how PHPUnit `Test` cases work, let''s
    proceed to creating our first Magento `Test` case:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对PHPUnit的`Test`案例有了更多了解，让我们继续创建我们的第一个Magento `Test`案例：
- en: Navigate to the `Registry.php` test case class that we created before.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到之前创建的`Registry.php`测试案例类。
- en: 'Add the following code inside the `registryList()` function (the file location
    is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`):'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`registryList()`函数内添加以下代码（文件位置为`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`）：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is a very basic test; the only thing that we are doing is loading a registry
    collection. In this case, all the registries are available, and then they run
    an assertion to check if the collection count matches.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常基本的测试；我们所做的就是加载一个注册表集合。在这种情况下，所有的注册表都是可用的，然后他们运行一个断言来检查集合计数是否匹配。
- en: 'However, this is not very useful. It would be even better if we were able to
    load only the registries that belong to a specific user (our test user) and check
    that collection size. That said, let''s change the code a little bit:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这并不是很有用。如果我们能够只加载属于特定用户（我们的测试用户）的注册表，并检查集合大小，那将更好。因此，让我们稍微改变一下代码：
- en: 'The file location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`.
    Refer to the following code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`。参考以下代码：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Just by changing a few lines of code, we created a test that allows checking
    whether our registry collections are working properly and if they are correctly
    linked to a customer record.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅通过改变几行代码，我们创建了一个测试，可以检查我们的注册表集合是否正常工作，并且是否正确地链接到客户记录。
- en: 'Run the following command in your shell:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的shell中运行以下命令：
- en: '[PRE11]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If everything went as expected, we should see the following output:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切如预期般进行，我们应该看到以下输出：
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also run `$phpunit`—colors for a nicer output.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以运行`$phpunit`—colors以获得更好的输出。
- en: 'Now, we only need a test to verify that the registry items are working properly:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要一个测试来验证注册表项是否正常工作：
- en: Navigate to the `Registry.php` test case class that we created before.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到之前创建的`Registry.php`测试案例类。
- en: 'Add the following code inside the `registryItemsList()` function (the file
    location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`):'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`registryItemsList()`函数内添加以下代码（文件位置为`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`）：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will also need a new fixture for our new `Test` case:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个新的fixture来配合我们的新`Test`案例：
- en: Navigate to the `Test/Model` folder.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Test/Model`文件夹。
- en: Open the `Registry` folder.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Registry`文件夹。
- en: 'Create a new file called `registryItemsList.yaml` (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/fixtures/
    registryItemsList.yaml`):'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`registryItemsList.yaml`的新文件（文件位置为`app/code/local/Mdg/Giftregistry/Test/Model/fixtures/
    registryItemsList.yaml`）：
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s run our test suite:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行我们的测试套件：
- en: '[PRE15]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We should see both tests passing:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到两个测试都通过了：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, let''s replace our hard-coded variables with proper expectations:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们用正确的期望值替换我们的硬编码变量：
- en: Navigate to the `Module Test/Model` folder.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Module Test/Model`文件夹。
- en: Open the `Registry` folder.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Registry`文件夹。
- en: Inside the `Registry` folder, create a new folder called `expectations`.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Registry`文件夹内，创建一个名为`expectations`的新文件夹。
- en: Create a new file called `registryList.yaml` (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryList.yaml`).
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`registryList.yaml`的新文件（文件位置为`app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryList.yaml`）。
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Wasn''t that easy? Well, it was so easy that we will do it again for the `registryItemsList`
    test case:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 是不是很容易？好吧，它是如此容易，以至于我们将再次为`registryItemsList`测试案例做同样的事情：
- en: Navigate to the `Module Test/Model` folder.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Module Test/Model`文件夹。
- en: Open the `Registry` folder.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Registry`文件夹。
- en: 'Create a new file called `registryItemsList.yaml` inside the `expectations`
    folder (the file location is `app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryItemsList.yaml`):'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`expectations`文件夹中创建一个名为`registryItemsList.yaml`的新文件（文件位置为`app/code/local/Mdg/Giftregistry/Test/Model/expectations/registryItemsList.yaml`）：
- en: '[PRE18]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, the last thing that we need to do is to update our `Test` case class
    to use the expectations. Make sure the update file has the following code (the
    file location is `app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要做的最后一件事是更新我们的`Test`案例类以使用期望。确保更新文件具有以下代码（文件位置为`app/code/local/Mdg/Giftregistry/Test/Model/Registry.php`）：
- en: '[PRE19]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The only change here is that we are replacing the hard-coded value inside our
    assertions with the expectations, values. If we ever need to make any changes,
    we don't need to change our code; we can just update the expectations and the
    fixtures.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里唯一的变化是，我们用期望值替换了断言中的硬编码值。如果我们需要进行任何更改，我们不需要更改我们的代码；我们只需更新期望和固定装置。
- en: Functional tests with Mink
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Mink进行功能测试
- en: So far, we have learned how to run unit tests against our code, and while unit
    tests are great for testing individual parts of our code and the logic, when it
    comes to large applications such as Magento, it is important to test from the
    user's perspective.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学会了如何对我们的代码运行单元测试，虽然单元测试非常适合测试代码和逻辑的各个部分，但对于像Magento这样的大型应用程序来说，从用户的角度进行测试是很重要的。
- en: Note
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Functional testing mostly involves black-box testing and is not concerned about
    the source code of the application.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 功能测试主要涉及黑盒测试，不关心应用程序的源代码。
- en: 'In order to do that, we can use Mink. Mink is a simple PHP library that can
    virtualize a web browser. Mink works by using different drivers. Out of the box,
    it supports the following drivers:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们可以使用Mink。Mink是一个简单的PHP库，可以虚拟化Web浏览器。Mink通过使用不同的驱动程序来工作。它支持以下驱动程序：
- en: '`GoutteDriver`: This is a pure-PHP headless browser written by the creator
    of Symfony framework'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GoutteDriver`：这是Symfony框架的创建者编写的纯PHP无头浏览器'
- en: '`SahiDriver`: This is a new JS browser controller that is quickly replacing
    Selenium'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SahiDriver`：这是一个新的JS浏览器控制器，正在迅速取代Selenium'
- en: '`ZombieDriver`: This is a browser emulator written in `Node.js` and currently
    is only limited to one browser (Chromium)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ZombieDriver`：这是一个在`Node.js`中编写的浏览器仿真器，目前只限于一个浏览器（Chromium）'
- en: '`SeleniumDriver`: This is currently the most popular browser driver; the original
    version relies on a third-party server for running the tests'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SeleniumDriver`：这是目前最流行的浏览器驱动程序；原始版本依赖于第三方服务器来运行测试'
- en: '`Selenium2Driver`: The current version of Selenium is fully supported in Python,
    Ruby, Java, and C#'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Selenium2Driver`：Selenium的当前版本在Python、Ruby、Java和C#中得到了充分支持'
- en: Magento Mink installation and setup
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Magento Mink安装和设置
- en: Using Mink with Magento is extremely easy, thanks to Johann Reinke, who created
    a Magento extension that facilitates Mink integration with Magento.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Mink与Magento非常容易，这要归功于Johann Reinke，他创建了一个Magento扩展，方便了Mink与Magento的集成。
- en: We will install this extension using Modgit, a module manager inspired by Modman.
    Modgit allows us to deploy Magento extensions directly from a GitHub repository
    without creating symlinks.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Modgit来安装这个扩展，Modgit是一个受Modman启发的模块管理器。Modgit允许我们直接从GitHub存储库部署Magento扩展，而无需创建符号链接。
- en: 'Installing Modgit can be achieved with three lines of code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Modgit只需三行代码即可完成：
- en: '[PRE20]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Wasn''t that easy? Now we can proceed to install Magento Mink, for which we
    should thank Modgit that it is even easier:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 是不是很容易？现在我们可以继续安装Magento Mink，我们应该感谢Modgit，因为这样甚至更容易：
- en: Move to the Magento root directory.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Magento根目录。
- en: 'Run the following commands:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE21]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: That's it. Modgit will take care of installing the file for us directly from
    the GitHub repository.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。Modgit将负责直接从GitHub存储库安装文件。
- en: Creating our first test
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个测试
- en: '`Mink` tests are also stored inside the `Test` folder. Let''s create the base
    skeleton of our `Mink` test class:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mink`测试也存储在`Test`文件夹中。让我们创建`Mink`测试类的基本骨架：'
- en: Navigate to the `Test` folder on our module root.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到我们模块根目录下的`Test`文件夹。
- en: Create a new directory called `Mink`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Mink`的新目录。
- en: Inside the `Mink` directory, create a new PHP class called `Registry.php`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Mink`目录中，创建一个名为`Registry.php`的新PHP类。
- en: 'Copy the following code (the file location is `app/code/local/Mdg/Giftregistry/Test/Mink/Registry.php`):'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制以下代码（文件位置为`app/code/local/Mdg/Giftregistry/Test/Mink/Registry.php`）：
- en: '[PRE22]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Just at first glance, you can tell that this functional test is quite different
    from the unit tests that we built previously, and although it seems like a lot
    of code is quite simple. The previous test has been down in code blocks. Let''s
    break down what the previous test is doing:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅乍一看，你就可以看出这个功能测试与我们之前构建的单元测试有很大不同，尽管看起来代码很多，但实际上很简单。之前的测试已经在代码块中完成了。让我们分解一下之前的测试在做什么：
- en: Set up the browser driver and the current store
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置浏览器驱动程序和当前商店
- en: Go to the home page and check for a valid category link
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到主页并检查有效的类别链接
- en: Try to log in as a test user
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试以测试用户身份登录
- en: Go to a category page
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到类别页面
- en: Open the first product on that category
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开该类别上的第一个产品
- en: Try to add the product to the customer's gift registry
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试将产品添加到客户的礼品注册表
- en: Note
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This test makes few assumptions and is expecting a valid customer within an
    existing gift registry.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试做了一些假设，并期望在现有的礼品注册表中有一个有效的客户。
- en: 'There are some considerations that we have to keep in mind when creating `Mink`
    tests:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Mink`测试时，我们必须牢记一些考虑因素：
- en: Each test class must extend `JR_Mink_Test_Mink`
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个测试类必须扩展`JR_Mink_Test_Mink`
- en: Each test function must start with the test keyword
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个测试函数必须以test关键字开头
- en: 'Finally, the only thing that we have to perform is run our tests. We can do
    this by going to the command line and running the following command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们唯一需要做的就是运行我们的测试。我们可以通过进入命令行并运行以下命令来实现这一点：
- en: '[PRE23]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If everything was successful, we should see something similar to the following
    output:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该看到类似以下输出：
- en: '[PRE24]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went over the basics of Magento testing. The purpose of
    this chapter was not to build complex tests or go in too deep, but rather get
    our feet wet and get a clear idea of what we can do to test our extensions.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Magento测试的基础知识。本章的目的不是构建复杂的测试或深入讨论，而是让我们初步了解并清楚地了解我们可以做些什么来测试我们的扩展。
- en: We covered several important topics in this chapter, and by having proper test
    suites and tools, it can save us from future headaches and improve the quality
    of our code.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们涵盖了几个重要的主题，通过拥有适当的测试套件和工具，可以帮助我们避免未来的头痛，并提高我们代码的质量。
- en: In the next and final chapter, we will learn how to package and distribute custom
    code and extensions.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何打包和分发自定义代码和扩展。
