- en: Chapter 1. Building a Foundation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。打下基础
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: PHP 7 installation considerations
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 7安装注意事项
- en: Using the built-in PHP web server
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置的PHP Web服务器
- en: Defining a test MySQL database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个测试MySQL数据库
- en: Installing PHPUnit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装PHPUnit
- en: Implementing class autoloading
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现类自动加载
- en: Hoovering a website
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 悬停在网站上
- en: Building a deep web scanner
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建深网扫描器
- en: Creating a PHP 5 to PHP 7 code converter
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个PHP 5到PHP 7代码转换器
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter is designed as a *quick start* that will get you up and running
    on PHP 7 so that you can start implementing the recipes right away. The underlying
    assumption for this book is that you already have a good knowledge of PHP and
    programming. Although this book will not go into detail about the actual installation
    of PHP, given that PHP 7 is relatively new, we will do our best to point out the
    quirks and *gotchas* you might encounter during a PHP 7 installation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在作为一个*快速入门*，让您立即开始在PHP 7上运行并实施配方。本书的基本假设是您已经对PHP和编程有很好的了解。虽然本书不会详细介绍PHP的实际安装，但考虑到PHP
    7相对较新，我们将尽力指出您在PHP 7安装过程中可能遇到的怪癖和*陷阱*。
- en: PHP 7 installation considerations
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP 7安装注意事项
- en: 'There are three primary means of acquiring PHP 7:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种主要获取PHP 7的方法：
- en: Downloading and installing directly from the source code
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接从源代码下载和安装
- en: Installing *pre-compiled* binaries
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装*预编译*二进制文件
- en: Installing a *AMP package (that is, XAMPP, WAMP, LAMP, MAMP, and so on)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装*AMP包（即XAMPP，WAMP，LAMP，MAMP等）
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: The three methods are listed in order of difficulty. However, the first approach,
    although tedious, will give you the most finite control over extensions and options.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种方法按难度顺序列出。然而，第一种方法虽然繁琐，但可以让您对扩展和选项有最精细的控制。
- en: Installing directly from source
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接从源代码安装
- en: In order to utilize this approach, you will need to have a C compiler available.
    If you are running Windows, **MinGW** is a free compiler that has proven popular.
    It is based on the **GNU Compiler Collection** (**GCC)** compiler provided by
    the **GNU** project. Non-free compilers include the classic **Turbo C** compiler
    from Borland, and, of course, the compiler that is preferred by Windows developers
    is **Visual Studio**. The latter, however, is designed mainly for C++ development,
    so when you compile PHP, you will need to specify C mode.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这种方法，您需要有一个C编译器。如果您使用Windows，**MinGW**是一个广受欢迎的免费编译器。它基于**GNU**项目提供的**GNU
    Compiler Collection**（**GCC**）编译器。非免费的编译器包括Borland的经典**Turbo C**编译器，当然，Windows开发人员首选的编译器是**Visual
    Studio**。然而，后者主要设计用于C++开发，因此在编译PHP时，您需要指定C模式。
- en: When working on an Apple Mac, the best solution is to install the **Apple Developer
    Tools**. You can use the **Xcode IDE** to compile PHP 7, or run `gcc` from a terminal
    window. In a Linux environment, from a terminal window, run `gcc`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在苹果Mac上工作时，最好的解决方案是安装**Apple Developer Tools**。您可以使用**Xcode IDE**编译PHP 7，或者从终端窗口运行`gcc`。在Linux环境中，从终端窗口运行`gcc`。
- en: 'When compiling from a terminal window or command line, the normal procedure
    is as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口或命令行编译时，正常的程序如下：
- en: '`configure`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configure`'
- en: '`make`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`制作`'
- en: '`make test`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make test`'
- en: '`make install`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make install`'
- en: 'For information on configuration options (that is, when running `configure`),
    use the `help` option:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置选项（即运行`configure`时）的信息，请使用`help`选项：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Errors you might encounter during the configuration stage are mentioned in
    the following table:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置阶段可能遇到的错误在下表中提到：
- en: '| Error | Fix |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 错误 | 修复 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `configure: error: xml2-config not found. Please check your libxml2 installation`
    | You just need to install `libxml2`. For this error, please refer to the following
    link:[http://superuser.com/questions/740399/how-to-fix-php-installation-when-xml2-config-is-missing](http://superuser.com/questions/740399/how-to-fix-php-installation-when-xml2-config-is-missing)
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `configure: error: xml2-config not found. Please check your libxml2 installation`
    | 您只需要安装`libxml2`。有关此错误，请参阅以下链接：[http://superuser.com/questions/740399/how-to-fix-php-installation-when-xml2-config-is-missing](http://superuser.com/questions/740399/how-to-fix-php-installation-when-xml2-config-is-missing)
    |'
- en: '| `configure: error: Please reinstall readline - I cannot find readline.h`
    | Install `libreadline-dev` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `configure: error: Please reinstall readline - I cannot find readline.h`
    | 安装`libreadline-dev` |'
- en: '| `configure: WARNING: unrecognized options: --enable-spl, --enable-reflection,
    --with-libxml` | Not a big deal. These options are defaults and don''t need to
    be included. For more details, please refer to the following link:[http://jcutrer.com/howto/linux/how-to-compile-php7-on-ubuntu-14-04](http://jcutrer.com/howto/linux/how-to-compile-php7-on-ubuntu-14-04)
    |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `configure: WARNING: unrecognized options: --enable-spl, --enable-reflection,
    --with-libxml` | 没关系。这些选项是默认的，不需要包含在内。有关更多详细信息，请参阅以下链接：[http://jcutrer.com/howto/linux/how-to-compile-php7-on-ubuntu-14-04](http://jcutrer.com/howto/linux/how-to-compile-php7-on-ubuntu-14-04)
    |'
- en: Installing PHP 7 from pre-compiled binaries
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从预编译的二进制文件安装PHP 7
- en: As the title implies, **pre-compiled** binaries are a set of binary files that
    somebody else has kindly compiled from PHP 7 source code and has made available.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如标题所示，**预编译**二进制文件是一组由他人从PHP 7源代码编译而成并提供的二进制文件。
- en: In the case of Windows, go to [http://windows.php.net/](http://windows.php.net/).
    You will find a good set of tips in the left column that pertain to which version
    to choose, **thread safe** versus **non-read safe**, and so forth. You can then
    click on **Downloads** and look for the ZIP file that applies to your environment.
    Once the ZIP file has been downloaded, extract the files into the folder of your
    choice, add `php.exe` to your path, and configure PHP 7 using the `php.ini` file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows的情况下，转到[http://windows.php.net/](http://windows.php.net/)。您将在左栏找到一些关于选择哪个版本、**线程安全**与**非线程安全**等的提示。然后您可以点击**Downloads**并查找适用于您环境的ZIP文件。下载ZIP文件后，将文件解压到您选择的文件夹中，将`php.exe`添加到您的路径，并使用`php.ini`文件配置PHP
    7。
- en: 'To install the pre-compiled binaries on a Mac OS X system, it is best to involve
    a package management system. The ones recommended for PHP include the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Mac OS X系统上安装预编译的二进制文件，最好使用包管理系统。PHP推荐的包括以下内容：
- en: MacPorts
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MacPorts
- en: Liip
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Liip
- en: Fink
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fink
- en: Homebrew
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homebrew
- en: In the case of Linux, the packaging system used depends on which Linux distribution
    you are using. The following table, organized by Linux distribution, summarizes
    where to look for the PHP 7 package.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux的情况下，使用的打包系统取决于您使用的Linux发行版。以下表格按Linux发行版组织，总结了查找PHP 7包的位置。
- en: '| Distribution | Where to find PHP 7 | Notes |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 分发 | PHP 7在哪里找到 | 注释 |'
- en: '| --- | --- | --- |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Debian | `packages.debian.org/stable/php``repos-source.zend.com/zend-server/early-access/php7/php-7*DEB*`
    | Use this command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '| Debian | `packages.debian.org/stable/php``repos-source.zend.com/zend-server/early-access/php7/php-7*DEB*`
    | 使用此命令：'
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Alternatively, you can use a graphical package management tool such as **Synaptic**.Make
    sure you select **php7** (and not php5). |
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用图形包管理工具，如**Synaptic**。确保选择**php7**（而不是php5）。 |
- en: '| Ubuntu | `packages.ubuntu.com``repos-source.zend.com/zend-server/early-access/php7/php-7*DEB*`
    | Use this command:`sudo apt-get install php7`Be sure to choose the right version
    of Ubuntu.Alternatively, you can use a graphical package management tool such
    as **Synaptic**. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Ubuntu | `packages.ubuntu.com``repos-source.zend.com/zend-server/early-access/php7/php-7*DEB*`
    | 使用此命令：`sudo apt-get install php7`确保选择正确的Ubuntu版本。或者，您可以使用图形包管理工具，如**Synaptic**。
    |'
- en: '| Fedora / Red Hat | `admin.fedoraproject.org/pkgdb/packages``repos-source.zend.com/zend-server/early-access/php7/php-7*RHEL*`
    | Make sure you are the root user:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '| Fedora / Red Hat | `admin.fedoraproject.org/pkgdb/packages``repos-source.zend.com/zend-server/early-access/php7/php-7*RHEL*`
    | 确保您是root用户：'
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Use this command:**dnf install php7**Alternatively, you can use a graphical
    package management tool such as the GNOME Package Manager. |
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令：**dnf install php7**或者，您可以使用图形包管理工具，如GNOME包管理器。 |
- en: '| OpenSUSE | `software.opensuse.org/package/php7` | Use this command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '| OpenSUSE | `software.opensuse.org/package/php7` | 使用此命令：'
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Alternatively, you can run `zypper`, or use **YaST** as a graphical tool. |
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以运行`zypper`，或者使用**YaST**作为图形工具。 |
- en: Installing a *AMP package
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装*AMP包
- en: '**AMP** refers to **Apache**, **MySQL**, and **PHP** (also **Perl** and **Python**).
    The ***** refers to Linux, Windows, Mac, and so on (that is, LAMP, WAMP, and MAMP).
    This approach is often the easiest, but gives you less control over the initial
    PHP installation. On the other hand, you can always modify the `php.ini` file
    and install additional extensions to customize your installation as needed. The
    following table summarizes a number of popular *AMP packages:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**AMP**指的是**Apache**，**MySQL**和**PHP**（还包括**Perl**和**Python**）。*****指的是Linux、Windows、Mac等（即LAMP、WAMP和MAMP）。这种方法通常是最简单的，但是您对初始PHP安装的控制较少。另一方面，您可以随时修改`php.ini`文件并安装其他扩展来自定义您的安装。以下表格总结了一些流行的*AMP包：'
- en: '| Package | Where is it found | Free? | Supports* |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| Package | 找到它在哪里 | 免费？ | 支持* |'
- en: '| --- | --- | --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `XAMPP` | [www.apachefriends.org/download.html](http://www.apachefriends.org/download.html)
    | Y | WML |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `XAMPP` | [www.apachefriends.org/download.html](http://www.apachefriends.org/download.html)
    | Y | WML |'
- en: '| `AMPPS` | [www.ampps.com/downloads](http://www.ampps.com/downloads) | Y |
    WML |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `AMPPS` | [www.ampps.com/downloads](http://www.ampps.com/downloads) | Y |
    WML |'
- en: '| `MAMP` | [www.mamp.info/en](http://www.mamp.info/en) | Y | WM |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `MAMP` | [www.mamp.info/en](http://www.mamp.info/en) | Y | WM |'
- en: '| `WampServer` | [sourceforge.net/projects/wampserver](http://sourceforge.net/projects/wampserver)
    | Y | W |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `WampServer` | [sourceforge.net/projects/wampserver](http://sourceforge.net/projects/wampserver)
    | Y | W |'
- en: '| `EasyPHP` | [www.easyphp.org](http://www.easyphp.org) | Y | W |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `EasyPHP` | [www.easyphp.org](http://www.easyphp.org) | Y | W |'
- en: '| `Zend Server` | [www.zend.com/en/products/zend_server](http://www.zend.com/en/products/zend_server)
    | N | WML |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `Zend Server` | [www.zend.com/en/products/zend_server](http://www.zend.com/en/products/zend_server)
    | N | WML |'
- en: In the preceding table, we've enlisted the *AMP packages where ***** is replaced
    by **W** for Windows, **M** for Mac OS X, and **L** for Linux.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上表中，我们列出了**W**替换为**W**的*AMP包，**M**替换为Mac OS X，**L**替换为Linux。
- en: There's more...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When you install a pre-compiled binary from a package, only `core` extensions
    are installed. Non-core PHP extensions must be installed separately.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从软件包安装预编译的二进制文件时，只安装了`core`扩展。非核心PHP扩展必须单独安装。
- en: It's worth noting that PHP 7 installation on cloud computing platforms will
    often follow the installation procedure outlined for pre-compiled binaries. Find
    out if your cloud environment uses Linux, Mac, or Windows virtual machines, and
    then follow the appropriate procedure as mentioned in this recipe.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，云计算平台上的PHP 7安装通常会遵循预编译二进制文件的安装过程。了解您的云环境是否使用Linux、Mac或Windows虚拟机，然后按照本文中提到的适当过程进行操作。
- en: It's possible that PHP 7 hasn't yet reached your favorite repository for pre-compiled
    binaries. You can always install from source, or consider installing one of the
    *AMP packages (see the next section). An alternative for Linux-based systems is
    to use the **Personal Package Archive** (**PPA**) approach. Because PPAs have
    not undergone a rigorous screening process, however, security could be a concern.
    A good discussion on security considerations for PPAs is found at [http://askubuntu.com/questions/35629/are-ppas-safe-to-add-to-my-system-and-what-are-some-red-flags-to-watch-out-fo](http://askubuntu.com/questions/35629/are-ppas-safe-to-add-to-my-system-and-what-are-some-red-flags-to-watch-out-fo).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可能PHP 7尚未到达您喜欢的预编译二进制文件存储库。您可以始终从源代码安装，或者考虑安装其中一个*AMP包（请参阅下一节）。对于基于Linux的系统，另一种选择是使用**个人软件包存档**（**PPA**）方法。但是，由于PPA尚未经过严格的筛选过程，安全性可能是一个问题。有关PPA安全考虑的良好讨论可在[http://askubuntu.com/questions/35629/are-ppas-safe-to-add-to-my-system-and-what-are-some-red-flags-to-watch-out-fo](http://askubuntu.com/questions/35629/are-ppas-safe-to-add-to-my-system-and-what-are-some-red-flags-to-watch-out-fo)找到。
- en: See also
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: General installation considerations, as well as instructions for each of the
    three major OS platforms (Windows, Mac OS X, and Linux), can be found at [http://php.net/manual/en/install.general.php](http://php.net/manual/en/install.general.php).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[http://php.net/manual/en/install.general.php](http://php.net/manual/en/install.general.php)找到一般安装注意事项，以及针对三个主要操作系统平台（Windows、Mac
    OS X和Linux）的说明。
- en: The website for MinGW is [http://www.mingw.org/](http://www.mingw.org/).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: MinGW的网站是[http://www.mingw.org/](http://www.mingw.org/)。
- en: Instructions on how to compile a C program using Visual Studio can be found
    at [https://msdn.microsoft.com/en-us/library/bb384838](https://msdn.microsoft.com/en-us/library/bb384838).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用Visual Studio编译C程序的说明，请访问[https://msdn.microsoft.com/en-us/library/bb384838](https://msdn.microsoft.com/en-us/library/bb384838)。
- en: 'Another possible way to test PHP 7 is by using a virtual machine. Here are
    a couple of tools with their links, which might prove useful:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 测试PHP 7的另一种可能的方法是使用虚拟机。以下是一些工具及其链接，可能会有用：
- en: '**Vagrant**: [https://github.com/rlerdorf/php7dev](https://github.com/rlerdorf/php7dev)
    (php7dev is a Debian 8 Vagrant image that is preconfigured for testing PHP apps
    and developing extensions across many versions of PHP)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vagrant**：[https://github.com/rlerdorf/php7dev](https://github.com/rlerdorf/php7dev)（php7dev是一个预先配置用于测试PHP应用程序和在许多PHP版本上开发扩展的Debian
    8 Vagrant映像）'
- en: '**Docker**: [https://hub.docker.com/r/coderstephen/php7/](https://hub.docker.com/r/coderstephen/php7/)
    (it contains a PHP7 Docker container)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**：[https://hub.docker.com/r/coderstephen/php7/](https://hub.docker.com/r/coderstephen/php7/)（其中包含一个PHP7
    Docker容器）'
- en: Using the built-in PHP web server
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内置的PHP Web服务器
- en: Aside from unit testing and running PHP directly from the command line, the
    obvious way to test your applications is to use a web server. For long-term projects,
    it would be beneficial to develop a virtual host definition for a web server that
    most closely mirrors the one used by your customer. Creating such definitions
    for the various web servers (that is, Apache, NGINX, and so on) is beyond the
    scope of this book. Another quick and easy-to-use alternative (which we have room
    to discuss here) is to use the built-in PHP 7 web server.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了单元测试和直接从命令行运行PHP之外，测试应用程序的明显方法是使用Web服务器。对于长期项目，为了开发与客户使用的Web服务器最接近的虚拟主机定义将是有益的。为各种Web服务器（如Apache、NGINX等）创建这样的定义超出了本书的范围。另一个快速且易于使用的替代方法（我们在这里有讨论的空间）是使用内置的PHP
    7 Web服务器。
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To activate the PHP web server, first change to the directory that will serve
    as the base for your code.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要激活PHP Web服务器，首先切换到将用作代码基础的目录。
- en: 'You then need to supply the hostname or IP address and, optionally, a port.
    Here is an example you can use to run the recipes supplied with this book:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要提供主机名或IP地址，以及可选的端口。以下是您可以使用来运行本书提供的示例的示例：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will see output on your screen that looks something like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在屏幕上看到类似以下内容的输出：
- en: '![How to do it...](graphics/B05314_01_01.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B05314_01_01.jpg)'
- en: As the built-in web server continues to service requests, you will also see
    access information, HTTP status codes, and request information.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随着内置的Web服务器继续服务请求，您还将看到访问信息、HTTP状态代码和请求信息。
- en: If you need to set the web server document root to a directory other than the
    current one, you can use the `-t` flag. The flag must then be followed by a valid
    directory path. The built-in web server will treat this directory as if it were
    the web document root, which is useful for security reasons. For security reasons,
    some frameworks, such as Zend Framework, require that the web document root is
    different from where your actual source code resides.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要将Web服务器文档根目录设置为当前目录以外的目录，可以使用`-t`标志。然后，该标志必须跟随有效的目录路径。内置的Web服务器将把这个目录视为Web文档根目录，这对安全原因很有用。出于安全原因，一些框架（如Zend
    Framework）要求Web文档根目录与实际源代码所在的位置不同。
- en: 'Here is an example using the `-t` flag:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`-t`标志的示例：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is an example of the output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出的示例：
- en: '![How to do it...](graphics/B05314_01_02.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](graphics/B05314_01_02.jpg)'
- en: Defining a test MySQL database
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一个测试MySQL数据库
- en: For test purposes, along with the source code for the book, we've provided an
    SQL file with sample data at [https://github.com/dbierer/php7cookbook](https://github.com/dbierer/php7cookbook).
    The name of the database used in the recipes for this book is `php7cookbook`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试目的，除了本书的源代码，我们还提供了一个带有示例数据的SQL文件，位于[https://github.com/dbierer/php7cookbook](https://github.com/dbierer/php7cookbook)。本书中用于示例的数据库名称是`php7cookbook`。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Define a MySQL database, `php7cookbook`. Also assign rights to the new database
    to a user called `cook` with the password `book`. The following table summarizes
    these settings:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个MySQL数据库，`php7cookbook`。还将新数据库的权限分配给名为`cook`的用户，密码为`book`。以下表总结了这些设置：
- en: '| Item | Notes |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 项目 | 注释 |'
- en: '| --- | --- |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Database name | `php7cookbook` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 数据库名称 | `php7cookbook` |'
- en: '| Database user | `cook` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 数据库用户 | `cook` |'
- en: '| Database user password | `book` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 数据库用户密码 | `book` |'
- en: 'Here is an example of SQL needed to create the database:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是创建数据库所需的SQL示例：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Import the sample values into the new database. The import file, `php7cookbook.sql`,
    is located at [https://github.com/dbierer/php7cookbook/blob/master/php7cookbook.sql](https://github.com/dbierer/php7cookbook/blob/master/php7cookbook.sql).
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例值导入新数据库。导入文件`php7cookbook.sql`位于[https://github.com/dbierer/php7cookbook/blob/master/php7cookbook.sql](https://github.com/dbierer/php7cookbook/blob/master/php7cookbook.sql)。
- en: Installing PHPUnit
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PHPUnit
- en: Unit testing is arguably the most popular means of testing PHP code. Most developers
    will agree that a solid suite of tests is a requirement for any properly developed
    project. Few developers actually write these tests. A lucky few have an independent
    testing group that writes the tests for them! After months of skirmishing with
    the testing group, however, the remains of the lucky few tend to grumble and complain.
    In any event, any book on PHP would not be complete without at least a nod and
    a wink towards testing.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试可以说是测试PHP代码的最流行方式。大多数开发人员都会同意，一个完善的测试套件是任何正确开发项目的必备条件。但是很少有开发人员实际编写这些测试。幸运的是，有一些独立的测试组为他们编写测试！然而，经过数月与测试组的战斗后，幸运的人往往会抱怨和抱怨。无论如何，任何一本关于PHP的书都不会完整，如果没有至少对测试的一点点提及。
- en: 'The place to find the latest version of **PHPUnit** is [https://phpunit.de/](https://phpunit.de/).
    PHPUnit5.1 and above support PHP 7\. Click on the link for the desired version,
    and you will download a `phpunit.phar` file. You can then execute commands using
    the archive, as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 找到**PHPUnit**的最新版本的地方是[https://phpunit.de/](https://phpunit.de/)。PHPUnit5.1及以上版本支持PHP
    7。单击所需版本的链接，然后下载`phpunit.phar`文件。然后可以使用存档执行命令，如下所示：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `phar` command stands for **PHP Archive**. The technology is based on `tar`,
    which itself was used in UNIX. A `phar` file is a collection of PHP files that
    are packed together into a single file for convenience.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`phar`命令代表**PHP Archive**。这项技术基于`tar`，`tar`本身是在UNIX中使用的。`phar`文件是一组PHP文件，它们被打包到一个单个文件中以方便使用。'
- en: Implementing class autoloading
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现类自动加载
- en: When developing PHP using an **object-oriented programming** (**OOP**) approach,
    the recommendation is to place each class in its own file. The advantage of following
    this recommendation is the ease of long-term maintenance and improved readability.
    The disadvantage is that each class definition file must be included (that is,
    using `include` or its variants). To address this issue, there is a mechanism
    built into the PHP language that will *autoload* any class that has not already
    been specifically included.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用**面向对象编程**（**OOP**）方法开发PHP时，建议将每个类放在自己的文件中。遵循这个建议的好处是长期维护和提高可读性的便利。缺点是每个类定义文件必须被包含（即使用`include`或其变体）。为了解决这个问题，PHP语言内置了一个机制，可以*自动加载*任何尚未被特别包含的类。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The minimum requirement for PHP autoloading is to define a global `__autoload()`
    function. This is a *magic* function called automatically by the PHP engine when
    a class is requested but where said class has not been included. The name of the
    requested class will appear as a parameter when `__autoload()` is invoked (assuming
    that you have defined it!). If you are using PHP namespaces, the full namespaced
    name of the class will be passed. Because `__autoload()` is a *function*, it must
    be in the global namespace; however, there are limitations on its use. Accordingly,
    in this recipe, we will make use of the `spl_autoload_register()` function, which
    gives us more flexibility.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: PHP自动加载的最低要求是定义一个全局的`__autoload()`函数。这是一个*魔术*函数，当PHP引擎自动调用时，会请求一个类，但该类尚未被包含。请求的类的名称将在调用`__autoload()`时作为参数出现（假设您已经定义了它！）。如果您使用PHP命名空间，将传递类的完整命名空间名称。因为`__autoload()`是一个*函数*，它必须在全局命名空间中；但是，对其使用有限制。因此，在本篇中，我们将使用`spl_autoload_register()`函数，这给了我们更多的灵活性。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作方法...
- en: The class we will cover in this recipe is `Application\Autoload\Loader`. In
    order to take advantage of the relationship between PHP namespaces and autoloading,
    we name the file `Loader.php` and place it in the `/path/to/cookbook/files/Application/Autoload`
    folder.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在本篇中介绍的类是`Application\Autoload\Loader`。为了利用PHP命名空间和自动加载之间的关系，我们将文件命名为`Loader.php`，并将其放置在`/path/to/cookbook/files/Application/Autoload`文件夹中。
- en: 'The first method we will present simply loads a file. We use `file_exists()`
    to check before running `require_once()`. The reason for this is that if the file
    is not found, `require_once()` will generate a fatal error that cannot be caught
    using PHP 7''s new error handling capabilities:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将介绍的第一种方法是简单地加载一个文件。我们使用`file_exists()`在运行`require_once()`之前进行检查。这样做的原因是，如果文件未找到，`require_once()`将生成一个无法使用PHP
    7的新错误处理功能捕获的致命错误：
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can then test the return value of `loadFile()` in the calling program and
    loop through a list of alternate directories before throwing an `Exception` if
    it's ultimately unable to load the file.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以在调用程序中测试`loadFile()`的返回值，并在无法加载文件时抛出`Exception`之前循环遍历备用目录列表。
- en: Tip
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You will notice that the methods and properties in this class are static. This
    gives us greater flexibility when registering the autoloading method, and also
    lets us treat the `Loader` class like a **Singleton**.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到这个类中的方法和属性都是静态的。这使我们在注册自动加载方法时更加灵活，并且还可以将`Loader`类视为**单例**。
- en: 'Next, we define the method that calls `loadFile()` and actually performs the
    logic to locate the file based on the namespaced classname. This method derives
    a filename by converting the PHP namespace separator `\` into the directory separator
    appropriate for this server and appending `.php`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义调用`loadFile()`并实际执行基于命名空间类名定位文件的逻辑的方法。该方法通过将PHP命名空间分隔符`\`转换为适合该服务器的目录分隔符并附加`.php`来派生文件名：
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next, the method loops through an array of directories we call `self::$dirs`,
    using each directory as a starting point for the derived filename. If not successful,
    as a last resort, the method attempts to load the file from the current directory.
    If even that is not successful, an `Exception` is thrown.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，该方法循环遍历我们称之为`self::$dirs`的目录数组，使用每个目录作为派生文件名的起点。如果不成功，作为最后的手段，该方法尝试从当前目录加载文件。如果甚至这样也不成功，就会抛出一个`Exception`。
- en: 'Next, we need a method that can add more directories to our list of directories
    to test. Notice that if the value provided is an array, `array_merge()` is used.
    Otherwise, we simply add the directory string to the `self::$dirs` array:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个可以将更多目录添加到我们要测试的目录列表中的方法。请注意，如果提供的值是一个数组，则使用`array_merge()`。否则，我们只需将目录字符串添加到`self::$dirs`数组中：
- en: '[PRE10]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we come to the most important part; we need to register our `autoload()`
    method as a **Standard PHP Library** (**SPL**) autoloader. This is accomplished
    using `spl_autoload_register()` with the `init()` method:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们来到最重要的部分；我们需要将我们的`autoload()`方法注册为**标准PHP库**（**SPL**）自动加载程序。这是使用`spl_autoload_register()`和`init()`方法来实现的：
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'At this point, we can define `__construct()`, which calls `self::init($dirs)`.
    This allows us to also create an instance of `Loader` if desired:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们可以定义`__construct()`，它调用`self::init($dirs)`。这使我们也可以创建`Loader`的实例（如果需要的话）。
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to use the autoloader class that we just defined, you will need to
    `require Loader.php`. If your namespace files are located in a directory other
    than the current one, you should also run `Loader::init()` and supply additional
    directory paths.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用我们刚刚定义的自动加载程序类，您需要`require Loader.php`。如果您的命名空间文件位于当前目录之外的目录中，您还应该运行`Loader::init()`并提供额外的目录路径。
- en: 'In order to make sure the autoloader works, we''ll also need a test class.
    Here is a definition of `/path/to/cookbook/files/Application/Test/TestClass.php`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保自动加载程序正常工作，我们还需要一个测试类。这是`/path/to/cookbook/files/Application/Test/TestClass.php`的定义：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now create a sample `chap_01_autoload_test.php` code file to test the autoloader:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个样本`chap_01_autoload_test.php`代码文件来测试自动加载程序：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, get an instance of a class that has not already been loaded:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，获取一个尚未加载的类的实例：
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, try to get a `fake` class that does not exist. Note that this will
    throw an error:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，尝试获取一个不存在的`fake`类。请注意，这将引发错误：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Hoovering a website
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理网站
- en: Very frequently, it is of interest to scan a website and extract information
    from specific tags. This basic mechanism can be used to trawl the web in search
    of useful bits of information. At other times you need to get a list of `<IMG>`
    tags and the `SRC` attribute, or `<A>` tags and the corresponding `HREF` attribute.
    The possibilities are endless.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 经常有兴趣扫描网站并从特定标签中提取信息。这种基本机制可以用来在网络中搜索有用的信息。有时需要获取`<IMG>`标签和`SRC`属性的列表，或者`<A>`标签和相应的`HREF`属性。可能性是无限的。
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First of all, we need to grab the contents of the target website. At first
    glance it seems that we should make a cURL request, or simply use `file_get_contents()`.
    The problem with these approaches is that we will end up having to do a massive
    amount of string manipulation, most likely having to make inordinate use of the
    dreaded regular expression. In order to avoid all of this, we''ll simply take
    advantage of an already existing PHP 7 class `DOMDocument`. So we create a `DOMDocument`
    instance, setting it to **UTF-8**. We don''t care about whitespace, and use the
    handy `loadHTMLFile()` method to load the contents of the website into the object:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要获取目标网站的内容。乍一看，似乎我们应该发出cURL请求，或者简单地使用`file_get_contents()`。这些方法的问题是，我们最终将不得不进行大量的字符串操作，很可能不得不大量使用可怕的正则表达式。为了避免所有这些，我们将简单地利用已经存在的PHP
    7类`DOMDocument`。因此，我们创建一个`DOMDocument`实例，将其设置为**UTF-8**。我们不关心空格，并使用方便的`loadHTMLFile()`方法将网站的内容加载到对象中：
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that we precede the call to the `loadHTMLFile()` method with an `@`. This
    is not done to obscure bad coding (`!`) as was often the case in PHP 5! Rather,
    the `@` suppresses notices generated when the parser encounters poorly written
    HTML. Presumably, we could capture the notices and log them, possibly giving our
    `Hoover` class a diagnostic capability as well.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在调用`loadHTMLFile()`方法之前，我们在其前面加上了`@`。这不是为了掩盖糟糕的编码（`!`），这在PHP 5中经常发生！相反，`@`抑制了解析器在遇到编写不良的HTML时生成的通知。据推测，我们可以捕获通知并记录它们，可能还给我们的`Hoover`类提供诊断能力。
- en: 'Next, we need to extract the tags which are of interest. We use the `getElementsByTagName()`
    method for this purpose. If we wish to extract *all* tags, we can supply `*` as
    an argument:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要提取感兴趣的标签。我们使用`getElementsByTagName()`方法来实现这个目的。如果我们希望提取*所有*标签，我们可以提供`*`作为参数：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It might also be of interest to extract certain attributes rather than tags.
    Accordingly, we define another method for this purpose. In this case, we need
    to parse through all tags and use `getAttribute()`. You''ll notice that there
    is a parameter for the DNS domain. We''ve added this in order to keep the scan
    within the same domain (if you''re building a web tree, for example):'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取特定属性而不是标签可能也是有趣的。因此，我们为此定义另一个方法。在这种情况下，我们需要遍历所有标签并使用`getAttribute()`。您会注意到有一个用于DNS域的参数。我们添加了这个参数，以便在同一个域内保持扫描（例如，如果您正在构建一个网页树）：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to use the new `Hoover` class, initialize the autoloader (described
    previously) and create an instance of the `Hoover` class. You can then run the
    `Hoover::getTags()` method to produce an array of tags from the URL you specify
    as an argument.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用新的`Hoover`类，初始化自动加载程序（如前所述）并创建`Hoover`类的实例。然后可以运行`Hoover::getTags()`方法，以产生您指定为参数的URL的标签数组。
- en: 'Here is a block of code from `chap_01_vacuuming_website.php` that uses the
    `Hoover` class to scan the O''Reilly website for `<A>` tags:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自`chap_01_vacuuming_website.php`的一段代码，它使用`Hoover`类来扫描O'Reilly网站的`<A>`标签：
- en: '[PRE20]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output will look something like this:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将看起来像这样：
- en: '![How it works...](graphics/B05314_01_03.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/B05314_01_03.jpg)'
- en: See also
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more information on DOM, see the PHP reference page at [http://php.net/manual/en/class.domdocument.php](http://php.net/manual/en/class.domdocument.php).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 有关DOM的更多信息，请参阅PHP参考页面[http://php.net/manual/en/class.domdocument.php](http://php.net/manual/en/class.domdocument.php)。
- en: Building a deep web scanner
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建深层网络扫描器
- en: Sometimes you need to scan a website, but go one level deeper. For example,
    you want to build a web tree diagram of a website. This can be accomplished by
    looking for all `<A>` tags and following the `HREF` attributes to the next web
    page. Once you have acquired the child pages, you can then continue scanning in
    order to complete the tree.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您需要扫描一个网站，但要深入一级。例如，您想要构建一个网站的Web树图。这可以通过查找所有`<A>`标签并跟踪`HREF`属性到下一个网页来实现。一旦您获得了子页面，您可以继续扫描以完成树。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'A core component of a deep web scanner is a basic `Hoover` class, as described
    previously. The basic procedure presented in this recipe is to scan the target
    website and hoover up all the `HREF` attributes. For this purpose, we define a
    `Application\Web\Deep` class. We add a property that represents the DNS domain:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 深层网络扫描仪的核心组件是一个基本的`Hoover`类，如前所述。本配方中介绍的基本过程是扫描目标网站并清理所有`HREF`属性。为此，我们定义了一个`Application\Web\Deep`类。我们添加一个表示DNS域的属性：
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we define a method that will hoover the tags for each website represented
    in the scan list. In order to prevent the scanner from trawling the entire **World
    Wide Web** (**WWW**), we''ve limited the scan to the target domain. The reason
    why `yield from` has been added is because we need to yield the entire array produced
    by `Hoover::getTags()`. The `yield from` syntax allows us to treat the array as
    a sub-generator:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个方法，将为扫描列表中表示的每个网站的标签进行清理。为了防止扫描器在整个**万维网**（**WWW**）上进行搜索，我们将扫描限制在目标域上。添加`yield
    from`的原因是因为我们需要产生`Hoover::getTags()`生成的整个数组。`yield from`语法允许我们将数组视为子生成器：
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The use of `yield from` turns the `scan()` method into a PHP 7 delegating generator.
    Normally, you would be inclined to store the results of the scan into an array.
    The problem, in this case, is that the amount of information retrieved could potentially
    be massive. Thus, it's better to immediately yield the results in order to conserve
    memory and to produce immediate results. Otherwise, there would be a lengthy wait,
    which would probably be followed by an out of memory error.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`yield from`将`scan()`方法转换为PHP 7委托生成器。通常，您会倾向于将扫描结果存储在数组中。然而，在这种情况下，检索到的信息量可能会非常庞大。因此，最好立即产生结果，以节省内存并产生即时结果。否则，将会有一个漫长的等待，可能会导致内存不足错误。
- en: 'In order to keep within the same domain, we need a method that will return
    the domain from the URL. We use the convenient `parse_url()` function for this
    purpose:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保持在同一个域中，我们需要一个方法，将从URL中返回域。我们使用方便的`parse_url()`函数来实现这个目的：
- en: '[PRE23]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First of all, go ahead and define the `Application\Web\Deep` class defined previously,
    as well as the `Application\Web\Hoover` class defined in the previous recipe.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，继续定义之前定义的`Application\Web\Deep`类，以及前一个配方中定义的`Application\Web\Hoover`类。
- en: 'Next, define a block of code from `chap_01_deep_scan_website.php` that sets
    up autoloading (as described earlier in this chapter):'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义一个代码块，来自`chap_01_deep_scan_website.php`，设置自动加载（如本章前面描述的）：
- en: '[PRE24]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, get an instance of our new class:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，获取我们新类的一个实例：
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'At this point, you can retrieve URL and tag information from URL parameters.
    The PHP 7 `null coalesce` operator is useful for establishing fallback values:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可以从URL参数中检索URL和标签信息。PHP 7的`null coalesce`运算符对于建立回退值非常有用：
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Some simple HTML will display results:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一些简单的HTML将显示结果：
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: See also
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more information on generators and `yield from`, please see the article
    at [http://php.net/manual/en/language.generators.syntax.php](http://php.net/manual/en/language.generators.syntax.php).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 有关生成器和`yield from`的更多信息，请参阅[http://php.net/manual/en/language.generators.syntax.php](http://php.net/manual/en/language.generators.syntax.php)上的文章。
- en: Creating a PHP 5 to PHP 7 code converter
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个PHP 5到PHP 7代码转换器
- en: For the most part, PHP 5.x code can run unchanged on PHP 7\. There are a few
    changes, however, that are classified as *backwards incompatible*. What this means
    is that if your PHP 5 code is written in a certain way, or uses functions that
    have been removed, your code will break, and you'll have a nasty error on your
    hands.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，PHP 5.x代码可以在PHP 7上不经修改地运行。然而，有一些更改被归类为*向后不兼容*。这意味着，如果您的PHP 5代码以某种方式编写，或者使用了已删除的函数，您的代码将会出错，您将会遇到一个令人讨厌的错误。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The *PHP 5 to PHP 7 Code Converter* does two things:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '*PHP 5到PHP 7代码转换器*执行两项任务：'
- en: Scans your code file and converts PHP 5 functionality that has been removed
    to its equivalent in PHP 7
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描您的代码文件，并将已删除的PHP 5功能转换为PHP 7中的等效功能
- en: Adds comments with `//` `WARNING` where changes in language usage have occurred,
    but where a re-write is not possible
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更改语言使用的地方添加了`//` `WARNING`注释，但不可能进行重写
- en: Note
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that after running the converter, your code is *not* guaranteed
    to work in PHP 7\. You will still have to review the `//` `WARNING` tags added.
    At the least, this recipe will give you a good head start converting your PHP
    5 code to work in PHP 7.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在运行转换器之后，不能保证您的代码在PHP 7中能够正常工作。您仍然需要查看添加的`//` `WARNING`标签。至少，这个方法将为您提供一个很好的起点，将您的PHP
    5代码转换为在PHP 7中运行。
- en: The core of this recipe is the new PHP 7 `preg_replace_callback_array()` function.
    What this amazing function allows you to do is to present an array of regular
    expressions as keys, with the value representing an independent callback. You
    can then pass the string through a series of transformations. Not only that, the
    subject of the array of callbacks can *itself* be an array.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法的核心是新的PHP 7 `preg_replace_callback_array()`函数。这个神奇的函数允许您将一系列正则表达式作为键呈现，并将值表示为独立的回调。然后，您可以通过一系列转换来传递字符串。不仅如此，回调数组的主题本身也可以是一个数组。
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In a new class `Application\Parse\Convert`, we begin with a `scan()` method,
    which accepts a filename as an argument. It checks to see if the file exists.
    If so, it calls the PHP `file()` function, which loads the file into an array,
    with each array element representing one line:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的类`Application\Parse\Convert`中，我们从一个`scan()`方法开始，该方法接受一个文件名作为参数。它检查文件是否存在。如果存在，它调用PHP的`file()`函数，该函数将文件加载到一个数组中，其中每个数组元素代表一行：
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, we start passing a series of key/value pairs. The key is a regular expression,
    which is processed against the string. Any matches are passed to the callback,
    which is represented as the value part of the key/value pair. We check for opening
    and closing tags that have been removed from PHP 7:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们开始传递一系列键/值对。键是一个正则表达式，它针对字符串进行处理。任何匹配项都会传递给回调函数，该回调函数表示为键/值对的值部分。我们检查已从PHP
    7中删除的开放和关闭标签：
- en: '[PRE29]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next is a series of warnings when certain operations are detected and there
    is a potential code-break between how they''re handled in PHP 5 versus PHP 7\.
    In all these cases, the code is not re-written. Instead, an inline comment with
    the word `WARNING` is added:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是一系列警告，当检测到某些操作并且在PHP 5与PHP 7中处理它们之间存在潜在的代码中断时。在所有这些情况下，代码都不会被重写。而是添加了一个带有`WARNING`单词的内联注释：
- en: '[PRE30]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Any attempts to use `<<` or `>>` with a negative operator, or beyond 64, is
    wrapped in a `try { xxx } catch() { xxx }` block, looking for an `ArithmeticError`
    to be thrown:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何尝试使用`<<`或`>>`与负操作符或超过64的操作都会被包裹在`try { xxx } catch() { xxx }`块中，寻找`ArithmeticError`的抛出：
- en: '[PRE31]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: PHP 7 has changed how errors are handled. In some cases, errors are moved into
    a similar classification as exceptions, and can be caught! Both the `Error` and
    the `Exception` class implement the `Throwable` interface. If you want to catch
    either an `Error` or an `Exception`, catch `Throwable`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 7已更改了错误处理方式。在某些情况下，错误被移动到与异常类似的分类中，并且可以被捕获！`Error`类和`Exception`类都实现了`Throwable`接口。如果要捕获`Error`或`Exception`，请捕获`Throwable`。
- en: 'Next, the converter rewrites any usage of `call_user_method*()`, which has
    been removed in PHP 7\. These are replaced with the equivalent using `call_user_func*()`:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转换器会重写任何使用`call_user_method*()`的用法，这在PHP 7中已被移除。这些将被替换为使用`call_user_func*()`的等效用法：
- en: '[PRE32]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, any attempt to use `preg_replace()` with the `/e` modifier is rewritten
    using a `preg_replace_callback()`:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，任何尝试使用带有`/e`修饰符的`preg_replace()`都会被重写为使用`preg_replace_callback()`：
- en: '[PRE33]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To use the converter, run the following code from the command line. You'll need
    to supply the filename of the PHP 5 code to be scanned as an argument.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用转换器，请从命令行运行以下代码。您需要提供要作为参数扫描的PHP 5代码的文件名。
- en: 'This block of code, `chap_01_php5_to_php7_code_converter.php`, run from the
    command line, calls the converter:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码块`chap_01_php5_to_php7_code_converter.php`，从命令行运行，调用转换器：
- en: '[PRE34]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: See also
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more information on backwards incompatible changes, please refer to [http://php.net/manual/en/migration70.incompatible.php](http://php.net/manual/en/migration70.incompatible.php).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 有关不兼容的更多信息，请参考[http://php.net/manual/en/migration70.incompatible.php](http://php.net/manual/en/migration70.incompatible.php)。
