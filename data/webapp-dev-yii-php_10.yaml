- en: Chapter 10. Making It Look Good
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。让它看起来不错
- en: In the previous chapter, we started to add a little beauty to our application
    by making our URLs more attractive to both the user and to search engine bots
    that crawl the site. In this chapter, we are going to turn our focus more to the
    look and feel of our application by covering the topics of layouts and themes
    in Yii. We will be focusing on the approach one takes and the tools available
    to help design the frontend of a Yii application rather than the design itself.
    So this chapter will focus more on how to make your applications look good, rather
    than spending a lot of time specifically designing our TrackStar application to
    actually be good-looking.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们通过使我们的URL对用户和搜索引擎爬虫更具吸引力，为我们的应用程序增添了一些美感。在本章中，我们将更多地关注我们应用程序的外观和感觉，涵盖Yii中布局和主题的主题。我们将专注于一个人采取的方法和可用的工具，以帮助设计Yii应用程序的前端，而不是设计本身。因此，本章将更多地关注如何使您的应用程序看起来不错，而不是花费大量时间专门设计我们的TrackStar应用程序以实际看起来不错。
- en: Feature planning
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能规划
- en: This chapter aims to focus on the frontend. We want to create a new look for
    our site that is reusable and able to be implemented dynamically. We also want
    to accomplish this without overwriting or otherwise removing our current design.
    Finally, we are going to dig into the internationalization features of Yii to
    better understand how to accommodate users from different geographic regions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在专注于前端。我们希望为我们的网站创建一个可重用且能够动态实现的新外观。我们还希望在不覆盖或删除当前设计的情况下实现这一点。最后，我们将深入研究Yii的国际化功能，以更好地了解如何适应来自不同地理区域的用户。
- en: 'The following is a list of high-level tasks that we will need to complete in
    order to achieve these goals:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们需要完成的高级任务列表，以实现这些目标：
- en: To create a new theme for our application by creating a new layout, CSS, and
    other asset files needed to provide the application with a new frontend design
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过创建新的布局、CSS和其他资产文件来为我们的应用程序创建一个新的前端设计
- en: To use the internationalization and localization features of Yii to help translate
    a portion of our application to a new language
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Yii的国际化和本地化功能来帮助将应用程序的一部分翻译成新语言
- en: Designing with layouts
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用布局进行设计
- en: One thing that you may have noticed is that we have added a lot of functionality
    to our application without adding any explicit navigation to access this functionality.
    Our home page has not yet changed from the default application we built. We still
    have the same navigation items as we did when we first created our new application.
    We need to change our basic navigation to better reflect the underlying functionality
    present in the application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到的一件事是，我们在不添加任何显式导航以访问此功能的情况下向我们的应用程序添加了大量功能。我们的主页尚未从我们构建的默认应用程序更改。我们的新应用程序创建时的导航项与我们创建新应用程序时的导航项相同。我们需要更改我们的基本导航，以更好地反映应用程序中存在的基本功能。
- en: Thus far, we have not fully covered how our application is using all of the
    view files responsible for displaying the content. We know that our view files
    are responsible for our data display and for housing the HTML sent back in response
    to each page request. When we create new controller actions, we often create new
    views to handle the display of the returned content from these action methods.
    Most of these views are very specific to the action methods they support and are
    not used across multiple pages. However there are some things, such as the main
    menu navigation, that are used across multiple pages throughout the site. These
    types of UI components are better suited to reside in what are called layout files.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们尚未完全涵盖我们的应用程序如何使用负责显示内容的所有视图文件。我们知道我们的视图文件负责显示我们的数据和承载响应每个页面请求的返回的HTML。当我们创建新的控制器操作时，我们经常创建新的视图来处理这些操作方法返回的内容的显示。这些视图中的大多数都非常特定于它们支持的操作方法，并且不会跨多个页面使用。但是，有一些东西，例如主菜单导航，可以在整个站点的多个页面上使用。这些类型的UI组件更适合驻留在所谓的布局文件中。
- en: A **layout** in Yii is a special view file used to decorate other view files.
    Layouts typically contain markup or other user interface components that are common
    across multiple view files. When using a layout to render a view file, Yii embeds
    the view file into the layout.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Yii中的**布局**是用于装饰其他视图文件的特殊视图文件。布局通常包含跨多个视图文件共同的标记或其他用户界面组件。当使用布局来呈现视图文件时，Yii会将视图文件嵌入布局中。
- en: Specifying a layout
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定布局
- en: 'There are two main places where a layout can be specified. One is the property
    called `$layout` of the `CWebApplication` itself. This defaults to `protected/views/layouts/main.php`.
    As is the case with all application settings, this can be overridden in the main
    configuration file `protected/config/main.php`. For example, if we created a new
    layout file `protected/views/layouts/newlayout.php` and wanted to use this new
    file as our application-wide layout file, we could alter our main `config.php`
    file to set the layout property as such:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定布局的两个主要位置。一个是`CWebApplication`本身的`$layout`属性。这默认为`protected/views/layouts/main.php`。与所有应用程序设置一样，这可以在主配置文件`protected/config/main.php`中被覆盖。例如，如果我们创建了一个新的布局文件`protected/views/layouts/newlayout.php`，并希望将此新文件用作我们的应用程序范围的布局文件，我们可以修改我们的主`config.php`文件来设置布局属性如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The filename is specified without the `.php` extension and is relative to the
    `$layoutPath` property of `CWebApplication`, which defaults to `Webroot/protected/views/layouts`
    (which itself could be overridden in a similar manner if this location does not
    suit your application's needs).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名不带`.php`扩展名，并且相对于`CWebApplication`的`$layoutPath`属性指定，该属性默认为`Webroot/protected/views/layouts`（如果此位置不适合您的应用程序需求，则可以类似地覆盖它）。
- en: The other place to specify the layout is by setting the `$layout` property of
    the controller class. This allows for more granular control of the layout on a
    controller-by-controller basis. This is the way it was specified when we generated
    the initial application. Using the `yiic` tool to create our initial application
    automatically created a controller base class `Webroot/protected/components/Controller.php`,
    from which all of our other controller classes extend. Opening up this file reveals
    that the `$layout` property has been set to `column1`. Setting the layout file
    at the more granular controller level will override the setting in the `CWebApplication`
    class.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个指定布局的地方是通过设置控制器类的`$layout`属性。这允许更细粒度地控制每个控制器的布局。这是在生成初始应用程序时指定的方式。使用`yiic`工具创建我们的初始应用程序时，自动创建了一个控制器基类`Webroot/protected/components/Controller.php`，所有其他控制器类都是从这个类继承的。打开这个文件会发现`$layout`属性已经设置为`column1`。在更细粒度的控制器级别设置布局文件将覆盖`CWebApplication`类中的设置。
- en: Applying and using a layout
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用和使用布局
- en: The use of a layout file is implicit in the call to the `CController::render()`
    method. That is, when you make the call to the `render()` method to render a view
    file, Yii will embed the contents of the view file into the layout file specified
    in either the controller class or the one specified at the application level.
    You can avoid applying any layout decoration of the rendered view file by calling
    the `CController::renderPartial()` method instead.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`CController::render()`方法时，布局文件的使用是隐含的。也就是说，当您调用`render()`方法来渲染一个视图文件时，Yii将把视图文件的内容嵌入到控制器类中指定的布局文件中，或者嵌入到应用程序级别指定的布局文件中。您可以通过调用`CController::renderPartial()`方法来避免对渲染的视图文件应用任何布局装饰。
- en: 'As previously mentioned, a layout file is typically used to decorate other
    view files. One example use of a layout is to provide a consistent header and
    footer layout to each and every page. When the `render()` method is called, what
    happens behind the scenes is that a call is first sent to `renderPartial()` on
    the specified view file. The output of this is stored in a variable called `$content`,
    which is then made available to the layout file. So a very simple layout file
    might look like the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，布局文件通常用于装饰其他视图文件。布局的一个示例用途是为每个页面提供一致的页眉和页脚布局。当调用`render()`方法时，幕后发生的是首先将调用发送到指定视图文件的`renderPartial()`。这个输出存储在一个名为`$content`的变量中，然后可以在布局文件中使用。因此，一个非常简单的布局文件可能如下所示：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In fact let''s try this out. Create a new file called `newlayout.php` and place
    it in the default directory for layout files, called `/protected/views/layouts/`.
    Add the preceding HTML content to this file and save it. Now we''ll put this to
    use by altering our site controller to use this new layout. Open up `SiteController.php`
    and override the layout property set in the base class by explicitly adding it
    to this class, as such:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上让我们试一试。创建一个名为`newlayout.php`的新文件，并将其放在布局文件的默认目录`/protected/views/layouts/`中。将前面的HTML内容添加到此文件中并保存。现在我们将通过修改我们的站点控制器来使用这个新布局。打开`SiteController.php`并通过在这个类中显式添加它来覆盖基类中设置的布局属性，如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will set the layout file to `newlayout.php`, but only for this controller.
    Now every time we make the call to the `render()` method within `SiteController`,
    the `newlayout.php` layout file will be used.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把布局文件设置为`newlayout.php`，但仅适用于这个控制器。现在，每当我们在`SiteController`中调用`render()`方法时，将使用`newlayout.php`布局文件。
- en: 'One page that `SiteController` is responsible for rendering is the login page.
    Let''s take a look at that page to verify these changes. If we navigate to `http://localhost/trackstar/site/login`
    (assuming we are not already logged in), we now see something similar to the following
    screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`SiteController`负责渲染的一个页面是登录页面。让我们来看看该页面，以验证这些更改。如果我们导航到`http://localhost/trackstar/site/login`（假设我们还没有登录），我们现在看到类似以下截图的东西：'
- en: '![Applying and using a layout](graphics/8727_10_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![应用和使用布局](graphics/8727_10_01.jpg)'
- en: If we simply comment out the `$layout` attribute we just added and refresh the
    login page again, we'll be back to using the original `main.php` layout and our
    page will now be back to what it looked like earlier.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们简单地注释掉我们刚刚添加的`$layout`属性并再次刷新登录页面，我们将回到使用原始的`main.php`布局，并且我们的页面现在将恢复到之前的样子。
- en: Deconstructing the main.php layout file
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解构main.php布局文件
- en: So far, all of our application pages have been using the `main.php` layout file
    to provide the primary layout markup. Before we start making changes to our page
    layout and design, it would serve us well to take a closer look at this main layout
    file. You can view it in its entirety from the downloadable code for this chapter,
    or view the standalone file at [https://gist.github.com/3781042](https://gist.github.com/3781042).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用程序页面都使用`main.php`布局文件来提供主要的布局标记。在开始对我们的页面布局和设计进行更改之前，最好先仔细查看一下这个主要布局文件。您可以从本章的可下载代码中完整查看它，或者在[https://gist.github.com/3781042](https://gist.github.com/3781042)上查看独立文件。
- en: 'The first five lines will probably look somewhat familiar to you:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行到第五行可能会让你觉得有些熟悉：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These lines define a standard, HTML document-type declaration, followed by a
    starting `<html>` element and then the start of our `<head>` element. Within the
    `<head>` tag, we first have a `<meta>` tag to declare the standard `XHTML-compliant
    uft-8` character encoding, followed by another `<meta>` tag that specifies `English`
    as the primary language in which the website is written.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行定义了一个标准的HTML文档类型声明，后面是一个开始的`<html>`元素，然后是我们的`<head>`元素的开始。在`<head>`标记内，我们首先有一个`<meta>`标记来声明标准的`XHTML-compliant
    uft-8`字符编码，然后是另一个`<meta>`标记，指定`English`作为网站编写的主要语言。
- en: Introducing the Blueprint CSS framework
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Blueprint CSS框架
- en: The next several lines beginning with the comment `<!—blueprint CSS framework
    -->` may be less familiar to you. Another great thing about Yii is that it utilizes
    other best-in-breed frameworks when appropriate, and the Blueprint CSS framework
    is one such example.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行以注释`<!—blueprint CSS framework -->`开头，可能对您来说不太熟悉。Yii的另一个很棒的地方是，在适当的时候，它利用其他最佳框架，Blueprint
    CSS框架就是一个例子。
- en: The Blueprint CSS framework was included in the application as a by-product
    of using the `yiic` tool when we initially created our application. It is included
    to help standardize the CSS development. Blueprint is a CSS Grid framework. It
    helps standardize your CSS, provides cross-browser compatibility, and provides
    consistency in HTML element placement, helping reduce CSS errors. It comes with
    many screen- and print-friendly layout definitions and helps jumpstart your design
    by providing all of the CSS that you need, to get something that looks good and
    is in place. For more on the Blueprint framework, visit [http://www.blueprintcss.org/](http://www.blueprintcss.org/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Blueprint CSS框架是在我们最初创建应用程序时使用`yiic`工具时作为副产品包含在应用程序中的。它包含在内是为了帮助标准化CSS开发。Blueprint是一个CSS网格框架。它有助于标准化您的CSS，提供跨浏览器兼容性，并在HTML元素放置方面提供一致性，有助于减少CSS错误。它提供了许多屏幕和打印友好的布局定义，并通过提供您所需的所有CSS来快速启动设计，使您的设计看起来不错并且位置正确。有关Blueprint框架的更多信息，请访问[http://www.blueprintcss.org/](http://www.blueprintcss.org/)。
- en: 'So the following lines of code are required and specific to the Blueprint CSS
    framework:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，以下代码行是Blueprint CSS框架所必需的和特定的：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The call to `Yii::app()->request->baseUrl;` is used here to get the relative
    URL to the application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`Yii::app()->request->baseUrl;`在这里用于获取应用程序的相对URL。
- en: Understanding the Blueprint installation
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解Blueprint安装
- en: Yii by no means requires the use of Blueprint. However since the default application
    generated does include the framework, understanding its installation and use will
    be beneficial.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Yii绝不要求使用Blueprint。但是，由于默认应用程序生成包括该框架，了解其安装和使用将是有益的。
- en: 'The typical installation of Blueprint involves first downloading the framework
    files and then placing three of its `.css` files into the Yii application''s main
    `css` directory. If we take a peek under the main `Webroot/css` directory within
    our TrackStar application, we already see the inclusion of these three files:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Blueprint的典型安装首先涉及下载框架文件，然后将其三个`.css`文件放入Yii应用程序的主`css`目录中。如果我们在TrackStar应用程序的主`Webroot/css`目录下查看，我们已经看到包含了这三个文件：
- en: '`ie.css`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ie.css`'
- en: '`print.css`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print.css`'
- en: '`screen.css`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screen.css`'
- en: So luckily for us, the basic installation has already been completed. In order
    to take advantage of the framework, the previous `<link>` tags need to be placed
    under the `<head>` tag for each web page. This is why these declarations are made
    in the layout file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以幸运的是，基本安装已经完成。为了利用该框架，先前的`<link>`标签需要放置在每个网页的`<head>`标签下。这就是为什么这些声明是在布局文件中进行的。
- en: 'The next two `<link>` tags are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个`<link>`标签如下：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These `<link>` tags define some custom `css` definitions used to provide layout
    declarations in addition to the ones specified in the Blueprint files. You should
    always place any custom definitions below the ones provided by Blueprint so that
    your custom declarations take precedence.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些`<link>`标签定义了一些自定义的`css`定义，用于提供布局声明，除了Blueprint文件中指定的声明之外。您应该始终将任何自定义定义放在Blueprint提供的定义下面，以便您的自定义声明优先。
- en: Setting the page title
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置页面标题
- en: 'Setting a specific and meaningful page title on a per page basis is important
    for indexing your website pages in search engines, and helpful to users who want
    to bookmark specific pages of your site. The next line in our main layout file
    specifies the page title in the browser:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据每个页面设置特定且有意义的页面标题对于搜索引擎索引您网站页面和希望将您网站特定页面加为书签的用户来说非常重要。我们主要布局文件中的下一行指定了浏览器中的页面标题：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Remember that `$this` in a view file refers to the controller class instance
    that initially rendered the view. The `$pageTitle` attribute is defined down in
    Yii's `CController` base class and will default to the action name followed by
    the controller name. This is easily customized in the specific controller class
    or even within each specific view file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在视图文件中，`$this`指的是最初呈现视图的控制器类实例。`$pageTitle`属性在Yii的`CController`基类中定义，并将默认为动作名称，后跟控制器名称。这在特定控制器类中甚至在每个特定视图文件中都可以轻松自定义。
- en: Defining a page header
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义页面页眉
- en: 'It is often the case that websites are designed to have consistent header content
    repeated across many pages. The next few lines in our main layout file define
    the area for a page header:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，网站被设计为在许多页面上重复具有一致的页眉内容。我们主要布局文件中的接下来几行定义了页面页眉的区域：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first `<div>` tag with a class of `container` is required by the Blueprint
    framework in order to display the content as a grid.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个带有`container`类的`<div>`标签是Blueprint框架所必需的，以便将内容显示为网格。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Again, using the Blueprint CSS Grid framework or any other CSS framework is
    not at all a requirement of Yii. It is just there to help you jumpstart your design
    layout if desired.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，使用Blueprint CSS Grid框架或任何其他CSS框架并不是Yii的要求。它只是为了帮助您在需要时快速启动设计布局。
- en: The next three lines lay out the first of the main content we see on these pages.
    They display the name of the application in large letters. So far this has been
    displaying the text **My Web Application**. I am sure that it has been driving
    some of you crazy. Although we may change this later to use a logo image, let's
    go ahead and change this to the real name of our application, **TrackStar**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三行布置了我们在这些页面上看到的主要内容的第一部分。它们显示了应用程序的名称。到目前为止，它一直显示文本**My Web Application**。我相信这让你们中的一些人感到疯狂。尽管我们以后可能会更改为使用标志图像，但让我们继续将其更改为我们应用程序的真实名称**TrackStar**。
- en: We could hardcode this name right here in the HTML. However, if we alter our
    application configuration to reflect our new name, the changes will be propagated
    everywhere throughout the site, wherever `Yii::app()->name` is being used. I am
    sure that you could make this simple change in your sleep at this point. Simply
    open up the main `config.php` file `/protected/config/main.php` where our application
    configuration settings are defined, and change the value of the `name` property
    from `'name'=>'My Web Application',` to the new value `'name'=>'TrackStar',`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在HTML中直接硬编码这个名称。然而，如果我们修改应用程序配置以反映我们的新名称，这些更改将在整个网站的任何地方传播，无论`Yii::app()->name`在哪里使用。我相信你现在可以轻松地在睡梦中做出这个简单的改变。只需打开主`config.php`文件`/protected/config/main.php`，在那里我们定义了应用程序配置设置，并将`name`属性的值从`'name'=>'My
    Web Application'`更改为新值`'name'=>'TrackStar'`。
- en: 'Save the file, refresh your browser, and the header on the home page should
    now look something similar to the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，刷新浏览器，主页的标题现在应该看起来类似于以下截图：
- en: '![Defining a page header](graphics/8727_10_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![定义页面标题](graphics/8727_10_02.jpg)'
- en: One thing we immediately notice in the previous screenshot is that the change
    has been made in two places. It just so happens that the view file responsible
    for our home page content, `/protected/views/site/index.php`, also uses the application
    name property. Since we made the change in the application configuration file,
    our change is reflected in both places.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们立即注意到在上一个截图中已经在两个地方进行了更改。恰好我们的主页内容的视图文件`/protected/views/site/index.php`也使用了应用程序名称属性。由于我们在应用程序配置文件中进行了更改，我们的更改在两个地方都得到了反映。
- en: 'Since the name property is something you may decide to change at some point,
    it is good practice to also define the application `id` property. This property
    is used by the framework to create unique signed keys as a prefix to access session
    variables, cached data, and other tokens. If there is no `id` property specified,
    the `name` property will be used. So changing it could render this data invalid.
    Let''s also define an `id` property for our application. This is added to `protected/config/main.php`,
    just as we did for the `name` property. We can use the same value for this as
    we are using for our name:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于名称属性是您可能决定在某个时候更改的内容，因此也定义应用程序`id`属性是一个好习惯。这个属性被框架用来创建唯一的签名键作为访问会话变量、缓存数据和其他令牌的前缀。如果没有指定`id`属性，则将使用`name`属性。因此更改它可能会使这些数据无效。让我们也为我们的应用程序定义一个`id`属性。这是添加到`protected/config/main.php`中的，就像我们为`name`属性所做的那样。我们可以使用与我们的名称相同的值：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Displaying menu navigation items
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示菜单导航项
- en: 'The main site''s navigation controls are often repeated across multiple pages
    in a web application, and housing this in a layout makes it very easy to re-use.
    The next block of markup and code in our main layout file defines the top-level
    menu items:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 主站点的导航控件通常在Web应用程序的多个页面上重复出现，并且将其放在布局中使得重复使用非常容易。我们主要布局文件中的下一个标记和代码块定义了顶级菜单项：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here we see that one of the Zii components called `CMenu` is being used. We
    introduced Zii back in [Chapter 8](ch08.html "Chapter 8. Adding User Comments"),
    *Adding User Comments*. To jog your memory, the Zii extension library is a set
    of extensions developed by the Yii developer team. This library comes packaged
    with the core Yii framework. Any of these extensions can easily be used within
    a Yii application, simply by referring to the desired extension class file using
    a path alias in the form of `zii.path.to.ClassName`. The root alias `zii` is predefined
    by the application and the rest of the path is relative to this framework directory.
    Since this Zii menu extension resides on your filesystem at `YiiRoot/zii/widgets/CMenu.php`,
    we can simply use `zii.widgets.CMenu` when referring to this in our application
    code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到Zii组件之一称为`CMenu`正在被使用。我们在[第8章](ch08.html "第8章。添加用户评论")中介绍了Zii，*添加用户评论*。为了唤起你的记忆，Zii扩展库是Yii开发团队开发的一组扩展。这个库与核心Yii框架一起打包。任何这些扩展都可以在Yii应用程序中轻松使用，只需通过使用路径别名引用所需的扩展类文件，形式为`zii.path.to.ClassName`。根别名`zii`由应用程序预定义，其余路径相对于这个框架目录。由于这个Zii菜单扩展位于您的文件系统上的`YiiRoot/zii/widgets/CMenu.php`，所以我们可以在应用程序代码中简单地使用`zii.widgets.CMenu`来引用它。
- en: '`CMenu` takes in an array of associative arrays that provide the menu items.
    Each item array consists of a `label` that will be displayed, a URL to which that
    item should be linked, and an optional third value `visible`, which is a `boolean`
    value indicating whether or not that menu item should be displayed. This is used
    here when defining the **Login** and **Logout** menu items. We only want the **Login**
    menu item to be displayed as a clickable link if the user is not already logged
    in. And conversely, we would only want the **Logout** menu link to be displayed
    if the user is already logged in. The use of the visible element in the array
    allows us to display these links dynamically based on whether the user is logged
    in or not. The use of `Yii::app()->user->isGuest` is for this. This returns `true`
    if the user is not logged in and `false` if the user is logged in. I am sure that
    you have already noticed that the **Login** option turns into a **Logout** option
    in our application''s main menu whenever you are logged in, and vice versa.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`CMenu`接受一个提供菜单项的关联数组。每个项目数组包括一个将要显示的`label`，一个该项目应链接到的URL，以及一个可选的第三个值`visible`，它是一个`boolean`值，指示是否应该显示该菜单项。在这里，当定义**登录**和**注销**菜单项时使用了这个。我们只希望**登录**菜单项在用户尚未登录时显示为可点击链接。反之，我们只希望**注销**菜单链接在用户已经登录时显示。数组中的visible元素的使用允许我们根据用户是否已登录动态显示这些链接。使用`Yii::app()->user->isGuest`是为了这个目的。如果用户未登录，则返回`true`，如果用户已登录，则返回`false`。我相信你已经注意到，**登录**选项在您登录时会变成应用程序主菜单中的**注销**选项，反之亦然。'
- en: 'Let''s update our menu to provide the users with a way to navigate to our specific
    TrackStar functionality. First off, we don''t want anonymous users to be able
    to access any real functionality except the login. So we need to make sure that
    the login page is more or less the home page for anonymous users. Also, the main
    home page for logged-in users should just be a listing of their projects. We''ll
    achieve this by making the following changes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们的菜单，为用户提供导航到我们特定的TrackStar功能的方法。首先，我们不希望匿名用户能够访问任何真正的功能，除了登录。因此，我们需要确保登录页面更多或更少地成为匿名用户的主页。此外，已登录用户的主页应该只是他们项目的列表。我们将通过进行以下更改来实现这一点：
- en: Changing our default home URL for the application to be the project listing
    page rather than just `site/index`, as it is now.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们应用程序的默认主页URL更改为项目列表页面，而不仅仅是`site/index`。
- en: Changing the default action within our default controller `SiteController` to
    be the login action. In this way, any anonymous user that visits the top-level
    URL `http://localhost/trackstar/` will be redirected to the login page.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认控制器`SiteController`中的默认操作更改为登录操作。这样，任何访问顶级URL `http://localhost/trackstar/`
    的匿名用户都将被重定向到登录页面。
- en: Altering our `actionLogin()` method to redirect the user to the project listing
    page if they are already logged in.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改我们的`actionLogin()`方法，如果用户已经登录，则将用户重定向到项目列表页面。
- en: Changing the **Home** menu item to read **Projects**, and changing the URL to
    be the project listing page.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**主页**菜单项更改为**项目**，并将URL更改为项目列表页面。
- en: 'These are simple changes that we need to make. Starting at the top, we can
    change the home URL application property in our main application `config.php`
    file. Open up `protected/config/main.php` and add the following `name=>value`
    pair to the returned array:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是我们需要做出的简单更改。从顶部开始，我们可以在主应用程序`config.php`文件中更改主页URL应用程序属性。打开`protected/config/main.php`并将以下`name=>value`对添加到返回的数组中：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is all that is needed to make that change.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是需要做出的所有更改。
- en: 'For the next change, open up `protected/controllers/SiteController.php` and
    add the following to the top of the controller class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个更改，打开`protected/controllers/SiteController.php`并将以下内容添加到控制器类的顶部：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This sets the default action to be login. Now if you visit your top-level URL
    `http://localhost/trackstar/` for the application, you should be taken to the
    login page. The only issue with this is that you will continue to be taken to
    the login page from this top-level URL regardless of whether you are already logged
    in or not. Let''s fix this by implementing step 3 of the previous list. Change
    the `actionLogin()` method within `SiteController` to include the following code
    at the beginning of the method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将默认操作设置为登录。现在，如果您访问应用程序的顶级URL `http://localhost/trackstar/`，您应该被带到登录页面。唯一的问题是，无论您是否已经登录，您都将继续从这个顶级URL被带到登录页面。让我们通过实施上一个列表的第3步来解决这个问题。在`SiteController`中的`actionLogin()`方法中添加以下代码：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will redirect all the logged-in users to the application `homeUrl`, which
    we just previously set to be the project listing page.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把所有已登录用户重定向到应用程序的`homeUrl`，我们刚刚将其设置为项目列表页面。
- en: 'Finally let''s alter the input array to our `CMenu` widget, to change the specification
    for the **Home** menu item. Alter that block of code in the `main.php` layout
    file and replace the line `array(''label''=>''Home'', ''url''=>array(''/site/index'')),`
    with the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们修改`CMenu`小部件的输入数组，以更改**主页**菜单项的规范。在`main.php`布局文件中更改该代码块，并用以下内容替换`array('label'=>'Home',
    'url'=>array('/site/index')),`这一行：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With this replacement, all of our previously outlined changes are in place.
    If we now visit the TrackStar application as an anonymous user, we are directed
    to the login page. If we click on the **Projects** link, we are still directed
    to the login page. We can still access the **About** and **Contact** pages, which
    is fine for an anonymous user. If we log in, we are directed to the project listing
    page. Now if we click on the **Projects** link, we are allowed to see the project
    listings.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个替换，我们之前概述的所有更改都已经就位。现在，如果我们以匿名用户身份访问TrackStar应用程序，我们将被引导到登录页面。如果我们点击**项目**链接，我们仍然会被引导到登录页面。我们仍然可以访问**关于**和**联系**页面，这对于匿名用户来说是可以的。如果我们登录，我们将被引导到项目列表页面。现在，如果我们点击**项目**链接，我们将被允许查看项目列表。
- en: Creating a breadcrumb navigation
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建面包屑导航
- en: 'Turning back to our `main.php` layout file, the three lines of code that follow
    our menu widget define another Zii extension widget called `CBreadcrumbs`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的`main.php`布局文件，跟随菜单小部件之后的三行代码定义了另一个Zii扩展小部件，称为`CBreadcrumbs`：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is another Zii widget that can be used to display a list of links indicating
    the position of the current page, relative to the other pages in the whole website.
    For example, a linked navigation list of the format **Projects >> Project 1 >
    > Edit** indicates that the user is viewing an edit page for project number one.
    This is helpful for the user to find their way back to where they started, which
    is a listing of all the projects, as well as easily see where they are in the
    website-page hierarchy. This is why it is referred to as a **breadcrumb** . Many
    websites implement this type of UI navigational component in their design.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个Zii小部件，可用于显示指示当前页面位置的链接列表，相对于整个网站中的其他页面。例如，格式为**项目 >> 项目1 >> 编辑**的链接导航列表表示用户正在查看项目1的编辑页面。这对用户找回起点（即所有项目的列表）以及轻松查看他们在网站页面层次结构中的位置非常有帮助。这就是为什么它被称为**面包屑**。许多网站在其设计中实现了这种类型的UI导航组件。
- en: 'To use this widget, we need to configure its `links` property, which specifies
    the links that are to be displayed. The expected value for this property is an
    array that defines the `breadcrumb` path from a starting point, down to the specific
    page being viewed. Using our previous example, we could specify the `links` array
    as such:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此小部件，我们需要配置其`links`属性，该属性指定要显示的链接。此属性的预期值是定义从起始点到正在查看的特定页面的`面包屑`路径的数组。使用我们之前的示例，我们可以将`links`数组指定如下：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `breadcrumbs` widget, by default, adds the very top-level **Home** link
    automatically, based on the application configuration setting `homeUrl`. So what
    would be generated from the previous code snippet would be a breadcrumb like the
    following:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`breadcrumbs`小部件默认情况下会根据应用程序配置设置`homeUrl`自动添加顶级**主页**链接。因此，从前面的代码片段生成的面包屑将如下所示：'
- en: '**Home >> Projects >> Project 1 >> Edit**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**主页 >> 项目 >> 项目1 >> 编辑**'
- en: 'Since we explicitly set our application `$homeUrl` property to be the project
    listings page, our first two links are the same in this case. The code in the
    layout file sets the link property to be the `$breadcrumbs` property of the controller
    class that is rendering the view. You can see this explicitly being set in the
    several view files that were autogenerated for us when we created our controller
    files using the Gii code generation tool. For example, if you take a look at `protected/views/project/update.php`,
    you will see the following code snippet at the very top of that file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们明确将应用程序的`$homeUrl`属性设置为项目列表页面，所以在这种情况下我们的前两个链接是相同的。布局文件中的代码将链接属性设置为呈现视图的控制器类的`$breadcrumbs`属性。您可以在使用Gii代码生成工具创建控制器文件时为我们自动生成的几个视图文件中明确看到这一点。例如，如果您查看`protected/views/project/update.php`，您将在该文件的顶部看到以下代码片段：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And if we navigate to that page in the website, we will see the following navigational
    breadcrumb generated just below the main navigation:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在网站上导航到该页面，我们将看到主导航栏下方生成的以下导航面包屑：
- en: '![Creating a breadcrumb navigation](graphics/8727_10_03.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![创建面包屑导航](graphics/8727_10_03.jpg)'
- en: Specifying the content being decorated by the layout
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定被布局装饰的内容
- en: 'The next line in the layout file shows where the content of the view file that
    is being decorated by this layout file is placed:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 布局文件中的下一行显示了被该布局文件装饰的视图文件的内容放置位置：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This was discussed earlier in the chapter. When you use `$this->render()` in
    a controller class to display a certain view file, the use of a layout file is
    implied. Part of what this method does is to place all of the content in the specific
    view file being rendered into a special variable called `$content`, which is then
    made available to the layout file. So if we take our project update view file
    as an example again, the contents of `$content` would be the rendered content
    contained in the file `protected/views/project/update.php`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这在本章的前面已经讨论过。当您在控制器类中使用`$this->render()`来显示特定的视图文件时，隐含了使用布局文件。这个方法的一部分是将呈现的特定视图文件中的所有内容放入一个名为`$content`的特殊变量中，然后将其提供给布局文件。因此，如果我们再次以项目更新视图文件为例，`$content`的内容将是包含在文件`protected/views/project/update.php`中的呈现内容。
- en: Defining the footer
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义页脚
- en: 'Just as with the *header* area, it is often the case that websites are designed
    to have consistent *footer* content repeated across many pages. The final few
    lines of our `main.php` layout file define a consistent `footer` for every page:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与*页眉*区域一样，通常情况下网站被设计为在许多页面上重复显示一致的*页脚*内容。我们的`main.php`布局文件的最后几行定义了每个页面的一致`页脚`：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Nothing special going on here, but we should go ahead and update it to reflect
    our specific website. We can leave the **Powered by Yii Framework.** line in there
    to help promote this great framework. We can simply change `My Company` in the
    previous code snippet to `TrackStar` and we''re done. Refreshing the pages in
    the website will now reveal our footer as depicted in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么特别的，但我们应该继续更新它以反映我们特定的网站。我们可以将前面的代码片段中的`My Company`简单地更改为`TrackStar`，然后完成。刷新网站中的页面现在将显示我们的页脚，如下面的截图所示：
- en: '![Defining the footer](graphics/8727_10_04.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![定义页脚](graphics/8727_10_04.jpg)'
- en: Nesting the layouts
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套布局
- en: 'Though it is true that the original layout we have been seeing on our pages
    is utilizing the file `protected/layouts/main.php`, this is not the whole story.
    When our initial application was created, all of the controllers were created
    to extend from the base controller located at `protected/components/Controller.php`.
    If we take a peek into this file, we see that there is a layout property explicitly
    defined. But it does not specify the main layout file. Rather it specifies `column1`
    as the default layout file for all the child classes. You may have already noticed
    that when the new application was created, there were a few layout files generated
    for us as well, all in the `protected/views/layouts/` directory:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在页面上看到的原始布局确实使用了文件`protected/layouts/main.php`，但这并不是全部。当我们的初始应用程序创建时，所有控制器都被创建为扩展自位于`protected/components/Controller.php`的基础控制器。如果我们偷看一下这个文件，我们会看到布局属性被明确定义。但它并没有指定主布局文件。相反，它将`column1`指定为所有子类的默认布局文件。您可能已经注意到，当新应用程序创建时，还为我们生成了一些布局文件，全部位于`protected/views/layouts/`目录中：
- en: '`column1.php`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column1.php`'
- en: '`column2.php`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column2.php`'
- en: '`main.php`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.php`'
- en: So unless explicitly overridden in a child class, our controllers are defining
    `column1.php` as the primary layout file and not `main.php`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，除非在子类中明确覆盖，否则我们的控制器将`column1.php`定义为主要布局文件，而不是`main.php`。
- en: So why did we spend all that time going through `main.php`, you ask? Well it
    turns out that the `column1.php` layout file is itself decorated by the `main.php`
    layout file. So not only can normal view files be decorated by layout files, but
    layout files themselves can be decorated by other layout files forming a hierarchy
    of nested layout files. This allows for great flexibility in design and also greatly
    minimizes the need for any repeated markup in the view files. Let's take a closer
    look at `column1.php` to see how this is achieved.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么我们要花那么多时间去了解`main.php`呢？嗯，事实证明，`column1.php`布局文件本身也被`main.php`布局文件装饰。因此，不仅可以通过布局文件装饰普通视图文件，而且布局文件本身也可以被其他布局文件装饰，形成嵌套布局文件的层次结构。这样可以极大地提高设计的灵活性，也极大地减少了视图文件中的重复标记的需要。让我们更仔细地看看`column1.php`，看看是如何实现这一点的。
- en: 'The contents of that file are as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的内容如下：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here we see the use of a couple of methods that we have not seen before. The
    base controller methods `beginContent()` and `endContent()` are being used to
    decorate the enclosed content with the specified view. The view being specified
    here is our main layout page `'//layouts/main'`. The `beginContent()` method actually
    makes use of the built-in Yii widget `CContentDecorator`, whose primary purpose
    is to allow for nested layouts. So whatever content is between the calls `beginContent()`
    and `endContent()` will be decorated with the view specified in the call `beginContent()`.
    If nothing is specified, it will use the default layout specified at the controller
    level, or if not specified at the controller level, at the application level.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到了一些以前没有见过的方法的使用。基本控制器方法`beginContent()`和`endContent()`被用来用指定的视图装饰封闭的内容。这里指定的视图是我们的主布局页面`'//layouts/main'`。`beginContent()`方法实际上使用了内置的Yii小部件`CContentDecorator`，其主要目的是允许嵌套布局。因此，`beginContent()`和`endContent()`之间的任何内容都将使用在`beginContent()`调用中指定的视图进行装饰。如果未指定任何内容，它将使用在控制器级别指定的默认布局，或者如果在控制器级别未指定，则使用应用程序级别的默认布局。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the preceding code snippet, we see the view file being specified with double
    slashes '`//`'. In this case, the view will be searched for under the application's
    view path rather than in the currently active modules view path. This forces it
    to use the main application view path rather than the module's view path. Modules
    are the subject of the next chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们看到视图文件被双斜杠`'//'`指定。在这种情况下，将在应用程序的视图路径下搜索视图，而不是在当前活动模块的视图路径下搜索。这迫使它使用主应用程序视图路径，而不是模块的视图路径。模块是下一章的主题。
- en: The rest works just as a normal layout file. All of the markup in the specific
    view file will be contained in the variable `$content` when this `column1.php`
    layout file is rendered, and then the other markup contained in this layout file
    will be contained again in the variable `$content` made available for the final
    rendering of the main parent layout file `main.php`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 其余部分就像普通的布局文件一样。当呈现此`column1.php`布局文件时，特定视图文件中的所有标记都将包含在变量`$content`中，然后此布局文件中包含的其他标记将再次包含在变量`$content`中，以供最终呈现主父布局文件`main.php`使用。
- en: 'Let''s walk through an example. Take the rendering of the login view as an
    example, that is the following code in the `SiteController::actionLogin()` method:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来走一遍。以登录视图的呈现为例，即`SiteController::actionLogin()`方法中的以下代码：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Behind the scenes the following steps are being performed:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，正在执行以下步骤：
- en: Render all of the content in the specific view file `/protected/views/site/login.php`,
    and make that content available via the variable `$content` to the layout file
    specified in the controller, which in this case is `column1.php`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 呈现特定视图文件`/protected/views/site/login.php`中的所有内容，并通过变量`$content`将该内容提供给控制器中指定的布局文件，在这种情况下是`column1.php`。
- en: Since `column1.php` is itself being decorated by the layout `main.php`, the
    content between the `beingContent()` and `endContent()` calls is again rendered
    and made available to the `main.php` file, again via the `$content` variable.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`column1.php`本身被布局`main.php`装饰，所以在`beingContent()`和`endContent()`调用之间的内容再次被呈现，并通过`$content`变量再次提供给`main.php`文件。
- en: The layout file `main.php` is rendered and returned back to the user, incorporating
    both the content from the specific view file for the login page as well as the
    "nested" layout file `column1.php`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 布局文件`main.php`被呈现并返回给用户，包含了登录页面的特定视图文件的内容以及“嵌套”布局文件`column1.php`的内容。
- en: 'Another layout file that was autogenerated when we initially created the application
    is `column2.php`. You probably won''t be surprised to discover that this file
    lays out a two-column design. We can see this used in the project pages where
    we have a little submenu **Operations** widget displayed along the right-hand
    side. The contents of this layout are as follows, and we can see that the same
    approach is being used to achieve the nested layout as well:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们最初创建应用程序时，自动生成的另一个布局文件是`column2.php`。您可能不会感到惊讶地发现，该文件布局了一个两列设计。我们可以在项目页面中看到这个布局的使用，其中右侧显示了一个小子菜单**操作**小部件。该布局的内容如下，我们可以看到也使用了相同的方法来实现嵌套布局。
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Creating themes
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建主题
- en: Themes provide a systematic way of customizing the design layout of a web application.
    One of the many benefits of an MVC architecture is the separation of the presentation
    from the rest of the "backend" stuff. Themes make great use of this separation
    by allowing you to easily and dramatically change the overall look and feel of
    a web application during runtime. Yii allows for an extremely easy application
    of themes to provide greater flexibility in your web application design.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 主题提供了一种系统化的方式来定制Web应用程序的设计布局。 MVC架构的许多好处之一是将演示与其他“后端”内容分离。主题通过允许您在运行时轻松而显着地改变Web应用程序的整体外观和感觉，充分利用了这种分离。
    Yii允许极其简单地应用主题，以提供Web应用程序设计的更大灵活性。
- en: Building themes in Yii
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Yii中构建主题
- en: In Yii, each theme is represented as a directory consisting of view files, layout
    files, and relevant resource files, such as images, CSS files, and JavaScript
    files. The name of a theme is the same as its directory name. By default, all
    themes reside under the same directory `WebRoot/themes`. Of course, as is the
    case with all other application settings, this default directory can be configured
    to be a different one. To do so, simply alter the `basePath` properties and the
    `baseUrl` properties of the `themeManager` application component.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中，每个主题都表示为一个目录，包含视图文件、布局文件和相关资源文件，如图像、CSS文件和JavaScript文件。主题的名称与其目录名称相同。默认情况下，所有主题都位于相同的`WebRoot/themes`目录下。当然，与所有其他应用程序设置一样，可以配置默认目录为其他目录。要这样做，只需修改`themeManager`应用程序组件的`basePath`属性和`baseUrl`属性。
- en: Contents under a theme directory should be organized in the same way as those
    under the application base path. So all the view files are located under a `views/`
    directory, layout view files under `views/layouts/`, and system view files under
    `views/system/`. For example, if we have created a new theme called `custom` and
    want to replace the update view of our `ProjectController` with a new view under
    this theme, we need to create a new `update.php` view file and save it in our
    application project as `themes/custom/views/project/update.php`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 主题目录下的内容应该以与应用程序基本路径下相同的方式进行组织。因此，所有视图文件都位于`views/`目录下，布局视图文件位于`views/layouts/`下，系统视图文件位于`views/system/`下。例如，如果我们创建了一个名为`custom`的新主题，并且想要用这个主题下的新视图替换`ProjectController`的更新视图，我们需要创建一个新的`update.php`视图文件，并将其保存在我们的应用项目中，路径为`themes/custom/views/project/update.php`。
- en: Creating a theme
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主题
- en: Let's take this for a spin to give our TrackStar application a little facelift.
    We need to name our new theme and create a directory under the `Webroot/themes`
    directory with this same name. We'll exercise our extreme creativity and call
    our new theme `newtheme`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试看，给我们的TrackStar应用程序做一点小改变。我们需要给我们的新主题命名，并在`Webroot/themes`目录下创建一个同名的目录。我们将发挥我们的极端创造力，将我们的新主题命名为`newtheme`。
- en: Create a new directory to hold this new theme that is located at `Webroot/themes/newtheme`.
    Then under this newly created directory, create two other new directories called
    `css/` and `views/`. The former is not required by the theming system but helps
    us keep our CSS organized. The latter is required if we are going to make any
    alterations to our default view files, which we are. Since we are going to change
    the `main.php` layout file just a little, we need yet another directory under
    this newly created `views/` directory called `layouts/` (remember that the directory
    structure needs to mirror that in the default `Webroot/protected/views/` directory).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Webroot/themes/newtheme`位置创建一个新目录来保存这个新主题。然后在这个新创建的目录下，创建另外两个新目录，分别叫做`css/`和`views/`。前者不是主题系统所必需的，但有助于我们组织CSS。后者是必需的，如果我们要对默认视图文件进行任何修改，而我们是要修改的。因为我们要稍微改变`main.php`布局文件，所以在这个新创建的`views/`目录下需要再创建一个名为`layouts/`的目录（记住目录结构需要与默认的`Webroot/protected/views/`目录中的相同）。
- en: Now let's make some changes. Since our view file markup is already referencing
    the `css` class and `id` names currently defined in the `Webroot/css/main.css`
    file, the fastest path to a new face of the application is to use this as a starting
    point and make changes to it as needed. Of course this is not a requirement, as
    we could recreate every single view file of our application in the new theme.
    However to keep things simple, we'll create our new theme by making a few changes
    to the `main.css` file that was autogenerated for us when we created the application,
    as well as the primary layout file `main.php`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们做一些改变。由于我们的视图文件标记已经引用了`Webroot/css/main.css`文件中当前定义的`css`类和`id`名称，所以最快的路径到应用程序的新外观是以此为起点，并根据需要进行更改。当然，这不是必需的，因为我们可以在新主题中重新创建应用程序的每个视图文件。但是为了保持简单，我们将通过对为我们创建应用程序时自动生成的`main.css`文件以及主要布局文件`main.php`进行一些更改来创建我们的新主题。
- en: To begin with, let's make a copy of these two files and place them in our new
    theme directory. Copy the file `Webroot/css/main.css` to a new location `Webroot/themes/newtheme/css/main.css`,
    and also copy the file `Webroot/protected/views/layouts/main.php` to a new location
    `Webroot/themes/newtheme/views/layouts/main.php`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们复制这两个文件并将它们放在我们的新主题目录中。将文件`Webroot/css/main.css`复制到新位置`Webroot/themes/newtheme/css/main.css`，并将文件`Webroot/protected/views/layouts/main.php`复制到新位置`Webroot/themes/newtheme/views/layouts/main.php`。
- en: Now we can open up the newly copied version of the `main.css` file, remove the
    contents, and add in the necessary styles for our new theme. For the purpose of
    our example, we will use the CSS available from the downloadable code for this
    chapter, or the standalone file available at [https://gist.github.com/3779729](https://gist.github.com/3779729).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以打开新复制的`main.css`文件，删除内容，并添加必要的样式来创建我们的新主题。为了我们的示例，我们将使用本章可下载代码中提供的CSS，或者在[https://gist.github.com/3779729](https://gist.github.com/3779729)上提供的独立文件。
- en: You may have noticed that some of these changes are referencing the image files
    that do not yet exist in our project. We have added an `images/background.gif`
    image reference in the body declaration, a new `images/bg2.gif` image is referenced
    in the `#mainmenu` ID declaration, and a new `images/header.jpg` image in the
    `#header` ID declaration. These are available in the downloadable source code.
    We'll place these new images into an image directory within the `css/` directory,
    namely `Webroot/themes/newtheme/css/images/`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，一些更改引用了我们项目中尚不存在的图像文件。我们在body声明中添加了一个`images/background.gif`图像引用，`#mainmenu`
    ID声明中引用了一个新的`images/bg2.gif`图像，以及`#header` ID声明中引用了一个新的`images/header.jpg`图像。这些都可以在可下载的源代码中找到。我们将把这些新图像放在`css/`目录中的一个图像目录中，即`Webroot/themes/newtheme/css/images/`。
- en: 'After these changes are in place, we need to make a couple of small adjustments
    to our `main.php` layout file in this new theme. For one, we need to alter the
    markup in the `<head>` element to properly reference our new `main.css` file.
    Currently the `main.css` file is being pulled in via this line:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改生效后，我们需要对新主题中的`main.php`布局文件进行一些小的调整。首先，我们需要修改`<head>`元素中的标记，以正确引用我们的新`main.css`文件。目前，`main.css`文件是通过以下行引入的：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This references the application request `baseUrl` property to construct the
    relative path to the CSS file. However, we want to use our new `main.css` file
    located in our new theme. For this, we can lean on the theme manager application
    component defined by default to use the Yii built-in `CThemeManager.php` class.
    We access the theme manager in the same way that we access other application components.
    So rather than using the request base URL, we should use the base URL defined
    by the theme manager, which knows what theme the application is using at any given
    time. Alter the previously mentioned code in `/themes/newtheme/views/layouts/main.php`,
    as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这引用了应用程序请求的`baseUrl`属性来构建到CSS文件的相对路径。然而，我们想要使用我们新主题中的`main.css`文件。为此，我们可以依靠主题管理器应用程序组件，默认定义使用Yii内置的`CThemeManager.php`类。我们访问主题管理器的方式与访问其他应用程序组件的方式相同。因此，我们应该使用主题管理器定义的基本URL，它知道应用程序在任何给定时间使用的主题。修改前面提到的`/themes/newtheme/views/layouts/main.php`中的代码如下：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Once we configure our application to use our new theme (something we have not
    yet done), this `baseUrl` will resolve to the relative path to where our theme
    directory resides.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们配置应用程序使用我们的新主题（这是我们尚未完成的），这个`baseUrl`将解析为我们的主题目录所在的相对路径。
- en: 'The other small change that we need to make is to remove the display of the
    application title from the header. Since we altered our CSS to use a new image
    file to provide our header and logo information, we don''t need to display the
    application name in this section. So in `/themes/newtheme/views/layouts/main.php`
    again, we simply need to change the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的另一个小改变是从头部中移除应用程序标题的显示。由于我们修改了CSS以使用新的图像文件来提供我们的头部和标志信息，我们不需要在这个部分显示应用程序名称。因此，在`/themes/newtheme/views/layouts/main.php`中，我们只需要改变以下代码：
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Alter the previous code as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码修改如下：
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We have put in a comment to remind us where our header image is defined.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经放置了一个注释来提醒我们头部图像的定义位置。
- en: Now once we configure the application to use our new theme, it will first look
    for a `main.php` layout in the themes directory and use that file if it exists.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一旦我们配置应用程序使用我们的新主题，它将首先在主题目录中查找`main.php`布局文件，如果存在的话就使用该文件。
- en: Configuring the application to use a theme
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置应用程序使用主题
- en: 'Okay, with our `newtheme` theme that we now created and have in place, we need
    to tell the application to use this theme. Doing so is very easy. Just alter the
    main application''s `theme` property setting by changing the main application
    configuration file. By now we will have become old pros at doing this. Simply
    add the following `name=>value` pair to the returned array in the `/protected/config/main.php`
    file:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，有了我们现在创建并放置好的`newtheme`主题，我们需要告诉应用程序使用这个主题。这样做非常容易。只需通过改变主应用程序配置文件来修改主应用程序的`theme`属性设置。到目前为止，我们已经成为了这样做的老手。只需在`/protected/config/main.php`文件中的返回数组中添加以下`name=>value`对：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Once this is saved, our application is now using our newly created theme and
    has a brand new face. When we take a look at the login page, which is also our
    default home page if not logged in, we now see what is depicted in the following
    screenshot:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦保存了这个更改，我们的应用程序现在使用我们新创建的主题，并且有了全新的外观。当我们查看登录页面时，也就是我们的默认主页（如果没有登录），我们现在看到了以下截图中所示的内容：
- en: '![Configuring the application to use a theme](graphics/8727_10_05.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![配置应用程序使用主题](graphics/8727_10_05.jpg)'
- en: This, of course, is not a huge change. We have kept the changes fairly minimal,
    but they do illustrate the process of creating a new theme. The application will
    first look for view files in this new theme and use them if they exist, otherwise
    it will pull them from the default location. You see how easy it is to give the
    application a new look and feel. You could create a new theme for each season
    or based on your different moods, and then change the application to fit the season
    or mood quickly and easily, as desired.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并不是一个巨大的改变。我们保持了改动相当小，但它们确实展示了创建新主题的过程。应用程序首先会在这个新主题中查找视图文件，如果存在的话就使用它们，否则会从默认位置获取。你可以看到给应用程序赋予新的外观和感觉是多么容易。你可以为每个季节或基于不同的心情创建一个新主题，然后根据需要快速轻松地改变应用程序以适应季节或心情。
- en: Translating the site to other languages
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将网站翻译成其他语言
- en: 'Before we close this chapter, we are going to talk about internationalization
    (`i18n`) and localization (`l10n`) in Yii. **Internationalization** refers to
    the process of designing software applications in such a manner that they can
    be adapted to various languages without having to make underlying engineering
    changes. **Localization** refers to the process of adapting internationalized
    software applications for a specific geographic location or language, by adding
    locale-dependent formatting and translating text. Yii provides support for these
    in the following ways:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本章之前，我们将讨论Yii中的国际化（`i18n`）和本地化（`l10n`）。**国际化**指的是以一种可以适应各种语言而无需进行基础工程更改的方式设计软件应用程序的过程。**本地化**指的是将国际化的软件应用程序适应特定地理位置或语言的过程，通过添加与地区相关的格式化和翻译文本。Yii以以下方式支持这些功能：
- en: It provides the locale data for nearly every language and region
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为几乎每种语言和地区提供了地区数据
- en: It provides services to assist in the translation of text message strings and
    files
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了辅助翻译文本消息字符串和文件的服务
- en: It provides locale-dependent date and time formatting
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了与地区相关的日期和时间格式化
- en: It provides locale-dependent number formatting
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了与地区相关的数字格式化
- en: Defining locale and language
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义地区和语言
- en: '**Locale** refers to a set of parameters that define the user''s language,
    country, and any other user-interface preferences that may be relevant to a user''s
    location. It is typically identified by a composite `ID` consisting of a language
    identifier and a region identifier. For example, a locale ID of `en_us` stands
    for the English language in the region of the United States. For consistency,
    all locale IDs in Yii are standardized to the format of either `LanguageID` or
    `LanguageID_RegionID` in lowercase (for example, `en` or `en_us`).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**区域**是指定义用户语言、国家和可能与用户位置相关的任何其他用户界面首选项的一组参数。它通常由一个语言标识符和一个区域标识符组成的复合`ID`来标识。例如，`en_us`的区域ID代表美国地区的英语。为了保持一致，Yii中的所有区域ID都标准化为小写的`LanguageID`或`LanguageID_RegionID`格式（例如，`en`或`en_us`）。'
- en: 'In Yii, locale data is represented as an instance of the `CLocale` class or
    a child class thereof. It provides locale-specific information including currency
    and numeric symbols for currency, number, date, and time formats, and date-related
    names such as months, days of the week, and others. Given a locale ID, one can
    get the corresponding `CLocale` instance by either using the static method `CLocale::getInstance($localeID)`
    or using the application. The following example code creates a new instance based
    on the `en_us` locale identifier using the application component:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在Yii中，区域数据表示为`CLocale`类的实例或其子类。它提供特定于区域的信息，包括货币和数字符号、货币、数字、日期和时间格式，以及月份、星期几等日期相关名称。通过区域ID，可以通过使用静态方法`CLocale::getInstance($localeID)`或使用应用程序来获取相应的`CLocale`实例。以下示例代码使用应用程序组件基于`en_us`区域标识符创建一个新实例：
- en: '[PRE27]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Yii comes with locale data for nearly every language and region. The data comes
    from the Common Locale Data Repository ([http://cldr.unicode.org/](http://cldr.unicode.org/)),
    and is stored in files that are named according to their respective locale ID,
    and located in the Yii framework directory `framework/i18n/data/`. So in the previous
    example of creating a new `CLocale` instance, the data used to populate the attributes
    came from the file `framework/i18n/data/en_us.php`. If you look under this directory,
    you will see datafiles for many languages and regions.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Yii几乎为每种语言和地区提供了区域数据。这些数据来自通用区域数据存储库（[http://cldr.unicode.org/](http://cldr.unicode.org/)），存储在根据各自区域ID命名的文件中，并位于Yii框架目录`framework/i18n/data/`中。因此，在上一个示例中创建新的`CLocale`实例时，用于填充属性的数据来自文件`framework/i18n/data/en_us.php`。如果您查看此目录，您将看到许多语言和地区的数据文件。
- en: 'Going back to our example, if we wanted to get the names of the months in English
    that is specific to the US region, we could execute the following code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的例子，如果我们想要获取特定于美国地区的英语月份名称，我们可以执行以下代码：
- en: '[PRE28]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output of which would produce the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 其输出将产生以下结果：
- en: '![Defining locale and language](graphics/8727_10_08.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![定义区域和语言](graphics/8727_10_08.jpg)'
- en: 'If we wanted the same month names for the Italian language, we could do the
    same but create a different `CLocale` instance:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要意大利语的相同月份名称，我们可以执行相同的操作，但创建一个不同的`CLocale`实例：
- en: '[PRE29]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now our output would produce the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的输出将产生以下结果：
- en: '![Defining locale and language](graphics/8727_10_09.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![定义区域和语言](graphics/8727_10_09.jpg)'
- en: The first instance is based on the data file `framework/i18n/data/en_us.php`
    and the latter on `framework/i18n/data/it.php`. If desired, the application's
    `localeDataPath` property can be configured in order to specify a custom directory
    in which you can add your custom locale data files.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个实例基于数据文件`framework/i18n/data/en_us.php`，后者基于`framework/i18n/data/it.php`。如果需要，可以配置应用程序的`localeDataPath`属性，以指定一个自定义目录，您可以在其中添加自定义区域设置数据文件。
- en: Performing language translation
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行语言翻译
- en: Perhaps the most desired feature of `i18n` is language translation. As mentioned
    previously, Yii provides both message translation and view file translation. The
    former translates a single text message to a desired language, and the latter
    translates an entire file to the desired language.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 也许“i18n”最受欢迎的功能是语言翻译。如前所述，Yii提供了消息翻译和视图文件翻译。前者将单个文本消息翻译为所需的语言，后者将整个文件翻译为所需的语言。
- en: A translation request consists of the object that is to be translated (either
    a string of text or a file), the source language that the object is in, and the
    target language to which the object is to be translated. A Yii application makes
    a distinction between its target language and its source language. The **target**
    language is the language (or locale) that we are targeting for the user, whereas
    the **source** language refers to the language in which the application files
    are written. So far, our TrackStar application has been written in English and
    is also targeted for users of the English language. Our target and source languages
    thus far have been the same. The internationalization features of Yii, which include
    translation, are only applicable when these two languages are different.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译请求包括要翻译的对象（文本字符串或文件）、对象所在的源语言以及要将对象翻译为的目标语言。Yii应用程序区分其目标语言和源语言。**目标**语言是我们针对用户的语言（或区域），而**源**语言是指应用程序文件所写的语言。到目前为止，我们的TrackStar应用程序是用英语编写的，也是针对英语用户的。因此，到目前为止，我们的目标语言和源语言是相同的。Yii的国际化功能，包括翻译，仅在这两种语言不同时适用。
- en: Performing message translation
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行消息翻译
- en: 'Message translation is performed by calling the following application method:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用以下应用程序方法执行消息翻译：
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This method translates the message from the source language to the target language.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法将消息从源语言翻译为目标语言。
- en: When translating a message, the category must be specified to allow a message
    to be translated differently under different categories (contexts). The category
    `Yii` is reserved for the messages used by the Yii framework core code.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在翻译消息时，必须指定类别，以便允许消息在不同类别（上下文）下进行不同的翻译。类别`Yii`保留用于Yii框架核心代码使用的消息。
- en: 'Messages can also contain parameter placeholders that will be replaced with
    the actual parameter values upon calling `Yii::t()`. The following example depicts
    the translation of an error message. This message translation request would replace
    the `{errorCode}` placeholder in the original message with the actual `$errorCode`
    value:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 消息也可以包含参数占位符，这些占位符在调用`Yii::t()`时将被实际参数值替换。以下示例描述了错误消息的翻译。这个消息翻译请求将在原始消息中用实际的`$errorCode`值替换`{errorCode}`占位符：
- en: '[PRE31]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The translated messages are stored in a repository called **message source**.
    A message source is represented as an instance of `CMessageSource` or a child
    class thereof. When `Yii::t()` is invoked, it will look for the message in the
    message source and return its translated version if it is found.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译消息存储在称为**消息源**的存储库中。消息源表示为`CMessageSource`的实例或其子类的实例。当调用`Yii::t()`时，它将在消息源中查找消息，并在找到时返回其翻译版本。
- en: 'Yii comes with the following types of message sources:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Yii提供以下类型的消息源：
- en: '**CPhpMessageSource**: This is the default message source. The message translations
    are stored as key-value pairs in a PHP array. The original message is the key
    and the translated message is the value. Each array represents the translations
    for a particular category of messages, and is stored in a separate PHP script
    file whose name is the category name. The PHP translation files for the same language
    are stored under the same directory named as the locale ID. And all these directories
    are located under the directory specified by `basePath`.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPhpMessageSource**：这是默认的消息源。消息翻译存储为PHP数组中的键值对。原始消息是键，翻译后的消息是值。每个数组表示特定类别消息的翻译，并存储在一个单独的PHP脚本文件中，文件名为类别名。相同语言的PHP翻译文件存储在以区域ID命名的相同目录下。所有这些目录都位于由`basePath`指定的目录下。'
- en: '**CGettextMessageSource**: The message translations are stored as `GNU Gettext`
    files.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CGettextMessageSource**：消息翻译存储为`GNU Gettext`文件。'
- en: '**CDbMessageSource**: The message translations are stored in database tables.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CDbMessageSource**：消息翻译存储在数据库表中。'
- en: A message source is loaded as an application component. Yii predeclares an application
    component named `messages` to store the messages that are used in a user application.
    By default, the type of this message source is `CPhpMessageSource` and the base
    path for storing the PHP translation files is `protected/messages`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 消息源作为应用程序组件加载。Yii预先声明了一个名为`messages`的应用程序组件，用于存储用户应用程序中使用的消息。默认情况下，此消息源的类型是`CPhpMessageSource`，用于存储PHP翻译文件的基本路径是`protected/messages`。
- en: 'An example will go a long way to help bring all of this together. Let''s translate
    the form field labels on our **Login** form into a fictitious language that we''ll
    call `Reversish`. **Reversish** is written by taking an English word or phrase
    and writing it in reverse. So here are the Reversish translations of our login
    form field labels:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例将有助于将所有这些内容整合在一起。让我们将**登录**表单上的表单字段标签翻译成一个我们称为`Reversish`的虚构语言。**Reversish**是通过将英语单词或短语倒转来书写的。所以这里是我们登录表单字段标签的Reversish翻译：
- en: '| English | Reversish |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 英文 | Reversish |'
- en: '| --- | --- |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Username | Emanresu |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 用户名 | Emanresu |'
- en: '| Password | Drowssap |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 密码 | Drowssap |'
- en: '| Remember me next time | Emit txen em rebmemer |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| Remember me next time | Emit txen em rebmemer |'
- en: 'We''ll use the default `CPhpMessageSource` implementation to house our message
    translations. So the first thing we need to do is create a PHP file containing
    our translations. We''ll make the locale ID `rev`, and we''ll just call the category
    `default` for now. We need to create a new file under the messages base directory
    that follows the format `/localeID/CategoryName.php`. So we need to create a new
    file located at `/protected/messages/rev/default.php` and then add the following
    translation array to this file:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用默认的`CPhpMessageSource`实现来存储我们的消息翻译。所以我们需要做的第一件事是创建一个包含我们翻译的PHP文件。我们将把区域ID设置为`rev`，并且现在只是称为类别`default`。我们需要在消息基本目录下创建一个遵循格式`/localeID/CategoryName.php`的新文件。所以我们需要在`/protected/messages/rev/default.php`下创建一个新文件，然后在该文件中添加以下翻译数组：
- en: '[PRE32]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next we need to set the application target language to be Reversish. We can
    do this in the application configuration file so that it will impact the entire
    site. Simply add the following `name=>value` pair to the returned array in the
    `/protected/config/main.php` file:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将应用程序目标语言设置为Reversish。我们可以在应用程序配置文件中执行此操作，以便影响整个站点。只需在`/protected/config/main.php`文件中的返回数组中添加以下`name=>value`对：
- en: '[PRE33]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now the last thing we need to do is to make our calls to `Yii::t()` so that
    our login form field labels are sent through the translation. These form field
    labels are defined in the `LoginForm::attributeLabels()` method. Replace that
    entire method with the following code:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要做的最后一件事是调用`Yii::t()`，以便我们的登录表单字段标签通过翻译发送。这些表单字段标签在`LoginForm::attributeLabels()`方法中定义。用以下代码替换整个方法：
- en: '[PRE34]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now if we visit our **Login** form again, we see a new Reversish version as
    depicted in the following screenshot:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次访问我们的**登录**表单，我们将看到一个新的Reversish版本，如下面的截图所示：
- en: '![Performing message translation](graphics/8727_10_06.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![执行消息翻译](graphics/8727_10_06.jpg)'
- en: Performing file translation
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行文件翻译
- en: Yii also provides the ability to use different files based on the target locale
    ID setting of the application. File translation is accomplished by calling the
    application method `CApplication::findLocalizedFile()`. This method takes in the
    path to a file and will look for that file with the same name, but under a directory
    that has been named with the same name as the target locale ID. The target locale
    ID is specified either as an explicit input to the method or as what is specified
    in the application configuration.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Yii 还提供了根据应用程序的目标区域设置使用不同文件的能力。文件翻译是通过调用应用程序方法 `CApplication::findLocalizedFile()`
    来实现的。该方法接受文件的路径，并将在具有与目标区域 ID 相同名称的目录下查找具有相同名称的文件。目标区域 ID 要么作为方法的显式输入指定，要么作为应用程序配置中指定的内容。
- en: Let's try this out. All we really need to do is create the appropriate translation
    file. We'll stick with translating the login form. So we create a new view file
    `/protected/views/site/rev/login.php` and then add our translated content. Again,
    this is too long to list in its entirety, but you can view this in the downloadable
    code files or the standalone content at [https://gist.github.com/3779850](https://gist.github.com/3779850).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试。我们真正需要做的就是创建适当的翻译文件。我们将继续翻译登录表单。因此，我们创建一个新的视图文件 `/protected/views/site/rev/login.php`，然后添加我们的翻译内容。同样，这太长了，无法完整列出，但您可以在可下载的代码文件或独立内容中查看
    [https://gist.github.com/3779850](https://gist.github.com/3779850)。
- en: 'We are already setting the target language for the application in the main
    configuration file, and the call to get the localized file will be taken care
    of for us behind the scenes when calling `render(''login'')`. So with this file
    in place, our login form now looks as shown in the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在主配置文件中为应用程序设置了目标语言，并在调用 `render('login')` 时，获取本地化文件的调用将在幕后为我们处理。因此，有了这个文件，我们的登录表单现在看起来如下截图所示：
- en: '![Performing file translation](graphics/8727_10_07.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![执行文件翻译](graphics/8727_10_07.jpg)'
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how a Yii application allows you to quickly and
    easily polish up the design. We were introduced to the concept of layout files,
    and walked through how to use these in an application to lay out content and design
    that needs to be implemented in a similar manner across many different web pages.
    This also introduced us to the `CMenu` and `CBreadcrumbs` built-in widgets that
    provide very easy to use UI navigational constructs on each page.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们已经看到 Yii 应用程序如何让您快速轻松地改进设计。我们介绍了布局文件的概念，并介绍了如何在应用程序中使用这些文件来布置需要在许多不同的网页上以类似方式实现的内容和设计。这也向我们介绍了
    `CMenu` 和 `CBreadcrumbs` 内置小部件，它们在每个页面上提供了非常易于使用的 UI 导航结构。
- en: We then introduced the idea of a theme within web applications and how you can
    create them in Yii. We saw that themes allow you to easily put a new face on an
    existing web application, and allow you to redesign your application without rebuilding
    any of the functionality or "backend".
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们介绍了 Web 应用程序中主题的概念以及如何在 Yii 中创建它们。我们看到主题允许您轻松地为现有的 Web 应用程序提供新的外观，并允许您重新设计应用程序，而无需重建任何功能或“后端”。
- en: Finally, we looked at changing the face of the application through the lens
    of `i18n` and language translation. We learned how to set the target locale of
    the application to enable localization settings and language translations.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过 `i18n` 和语言翻译的视角来看应用程序的面貌变化。我们学会了如何设置应用程序的目标区域，以启用本地化设置和语言翻译。
- en: We have made a few references in this and past chapters to "modules", but have
    yet to dive into what exactly these are within a Yii application. That is going
    to be the focus of the next chapter.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和之前的章节中，我们已经多次提到“模块”，但尚未深入了解它们在 Yii 应用程序中的具体内容。这将是下一章的重点。
