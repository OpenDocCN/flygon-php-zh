- en: Chapter 11. Extract Action Logic to Controllers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。将动作逻辑提取到控制器中
- en: 'Thus far, we have extracted our model domain logic and our view presentation
    logic. Only two kinds of logic remain in our page scripts:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经提取了我们的模型领域逻辑和视图呈现逻辑。我们的页面脚本中只剩下两种逻辑：
- en: Dependency logic, which uses the application settings to create objects
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用应用程序设置创建对象的依赖逻辑
- en: Action logic (sometimes called business logic) which uses those objects to perform
    the page actions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用这些对象执行页面动作的动作逻辑（有时称为业务逻辑）
- en: In this chapter, we will extract a layer of `Controller` classes from our page
    scripts. These will handle the remaining action logic in our legacy application
    separately from our dependency-creation logic.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从我们的页面脚本中提取出一层`Controller`类。这些类将单独处理我们遗留应用程序中的剩余动作逻辑，与我们的依赖创建逻辑分开。
- en: Embedded action logic
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入式动作逻辑
- en: For an example of embedded action logic mixed with dependency logic, we can
    look at the ending example code from the last chapter in [Appendix G](apg.xhtml
    "Appendix G. Code after Response View File"), *Code after Response View File*.
    Therein, we do a little setup work, then we check some conditions and call different
    parts of our domain `Transactions`, and at the end we put together a `Response`
    object to send our response to the client.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为嵌入式动作逻辑与依赖逻辑混合的示例，我们可以查看上一章末尾的示例代码，在[附录G](apg.xhtml "附录 G. 响应视图文件后的代码")中可以找到，*响应视图文件后的代码*。在其中，我们做了一些设置工作，然后检查一些条件并调用我们领域`Transactions`的不同部分，最后我们组合了一个`Response`对象来将我们的响应发送给客户端。
- en: As was the problem with mixed-in presentation logic, we cannot test the action
    logic separately from rest of the page script. Similarly, we cannot easily change
    the dependency creation logic to make the page script more testable.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与混合呈现逻辑的问题一样，我们无法单独测试动作逻辑，而无法轻松更改依赖创建逻辑以使页面脚本更易于测试。
- en: We solve the problem of embedded action logic as we did with embedded presentation
    logic. We must extract the action code to a class of its own to separate the various
    remaining concerns of our page script. This will also allow us to test the action
    logic independently from the rest of the application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解决了嵌入式动作逻辑的问题，就像解决嵌入式呈现逻辑一样。我们必须将动作代码提取到自己的类中，以将页面脚本的各种剩余关注点分开。这也将使我们能够独立于应用程序的其余部分测试动作逻辑。
- en: The Extraction Process
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取过程
- en: Extracting the action logic from our page scripts should be a relatively easy
    task for us now. Because the domain layer has been extracted, along with the presentation
    layer, the action logic should be obvious. The work itself still rewards attention
    to detail, in that the main issue will be picking apart the dependency setup portions
    from the action logic itself.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从我们的页面脚本中提取动作逻辑应该对我们来说是一个相对容易的任务。因为领域层已经被提取出来，以及呈现层，动作逻辑应该是显而易见的。工作本身仍然需要注意细节，因为主要问题将是从动作逻辑本身中分离出依赖设置部分。
- en: 'In general, the process is as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，流程如下：
- en: Find a page script where action logic is still mixed in with the rest of the
    code.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到一个页面脚本，其中动作逻辑仍然与其余代码混合在一起。
- en: In that page script, rearrange the code so that all action logic is in its own
    central block. Spot check the rearranged code to make sure it still works properly.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该页面脚本中，重新排列代码，使所有动作逻辑位于其自己的中心块中。抽查重新排列的代码，确保它仍然正常工作。
- en: Extract the central block of action logic to a new `Controller` class, and modify
    the page script to use the new `Controller`. Spot check the page script with the
    *Controller* in place.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将动作逻辑的中心块提取到一个新的`Controller`类中，并修改页面脚本以使用新的`Controller`。使用*Controller*对页面脚本进行抽查。
- en: Write a unit test for the new `Controller` class and spot check again.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为新的`Controller`类编写单元测试，并再次进行抽查。
- en: Commit the new code and tests, push them to the common repository, and notify
    QA.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交新代码和测试，将它们推送到共享存储库，并通知质量保证团队。
- en: Find another page script with embedded action logic and start again; when all
    page scripts use `Controller` objects, we are done.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找另一个包含嵌入式动作逻辑的页面脚本，并重新开始；当所有页面脚本都使用`Controller`对象时，我们就完成了。
- en: Search for Embedded Action Logic
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索嵌入式动作逻辑
- en: At this point, we should be able to find action logic without having to use
    our project-wide search facility. Every page script in our legacy application
    probably has at least a little bit of action logic left in it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该能够找到动作逻辑，而无需使用项目范围的搜索功能。我们遗留应用程序中的每个页面脚本可能都至少有一点动作逻辑。
- en: Rearrange the Page Script and Spot Check
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新排列页面脚本并进行抽查
- en: When we have a candidate page script, we proceed to rearrange the code so that
    all setup and dependency-creation work is at the top, all the action logic is
    in the middle, and the `$response->send()` call is at the bottom. For our starting
    example here, we will use the code from the end of the last chapter as found in
    [Appendix G](apg.xhtml "Appendix G. Code after Response View File"), *Code after
    Response View File*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有一个候选页面脚本时，我们继续重新排列代码，使所有设置和依赖创建工作位于顶部，所有动作逻辑位于中间，`$response->send()`调用位于底部。在这里，我们将使用上一章末尾的代码作为起始示例，该代码可以在[附录G](apg.xhtml
    "附录 G. 响应视图文件后的代码")中找到，*响应视图文件后的代码*。
- en: Identify Code Blocks
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 识别代码块
- en: First, we go to the very top of the script and place a `/* DEPENDENCY */` comment
    on the first line (or perhaps after the inclusion of a setup script). Then we
    go to the very end of the script, to the `$response->send()` line, and place a
    `/* FINISHED */` comment above it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们转到脚本的顶部，在第一行（或者在包含设置脚本之后）放置一个`/* 依赖 */`注释。然后我们转到脚本的最末尾，到`$response->send()`行，并在其上方放置一个`/*
    完成 */`注释。
- en: Now we reach a point where we must use our professional judgment. On some line
    after the setup and dependency work in the page script, we will see that the code
    begins to perform some sort of action logic. Our assessment of just where this
    transition occurs may be somewhat arbitrary, since the action logic and setup
    logic are likely to still be intertwined. Even so, we must pick a point at which
    we believe the action logic really gets started, and place a `/* CONTROLLER */`
    comment there.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们达到了一个必须使用我们的专业判断的时刻。在页面脚本中设置和依赖工作之后的某一行，我们会发现代码开始执行某种动作逻辑。我们对这个转变发生的确切位置的评估可能有些随意，因为动作逻辑和设置逻辑很可能仍然交织在一起。即便如此，我们必须选择一个我们认为动作逻辑真正开始的时间点，并在那里放置一个`/*
    控制器 */`注释。
- en: Move Code to Its Related Block
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将代码移动到相关块
- en: Once we have identified these three blocks in the page script, we begin rearranging
    the code so that only setup and dependency-creation work occurs between `/* DEPENDENCY
    */` and `/* CONTROLLER */`, and only action logic occurs between `/* CONTROLLER
    */` and `/* FINISHED */`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在页面脚本中确定了这三个块，我们就开始重新排列代码，以便只有设置和依赖创建工作发生在`/* 依赖 */`和`/* 控制器 */`之间，只有动作逻辑发生在`/*
    控制器 */`和`/* 完成 */`之间。
- en: In general, we should avoid conditions or loops in the dependency block, and
    avoid object creation in the controller block. The code in the dependency block
    should only create objects, and the code in the controller block should only operate
    on objects that have been created in the dependency block.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们应该避免在依赖块中使用条件或循环，并且避免在控制器块中创建对象。依赖块中的代码应该只创建对象，控制器块中的代码应该只操作在依赖块中创建的对象。
- en: Given our starting code in [Appendix G](apg.xhtml "Appendix G. Code after Response
    View File"), *Code after Response View File*, we can see the result of an example
    rearrangement in [Appendix H](aph.xhtml "Appendix H. Code after Controller Rearrangement"),
    *Code after Controller Rearrangement*. Of note, we moved the `$user_id` declaration
    down to the controller block, and we moved the `Response` object creation up to
    the dependency block. The original action logic in the central controller block
    remains otherwise unchanged.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们在[附录G](apg.xhtml "附录G.响应视图文件后的代码")中的起始代码，*响应视图文件后的代码*，我们可以在[附录H](aph.xhtml
    "附录H.控制器重新排列后的代码")中看到一个示例重新排列的结果，*控制器重新排列后的代码*。值得注意的是，我们将`$user_id`声明移到了控制器块，将`Response`对象创建移到了依赖块。中央控制器块中的原始动作逻辑在其他方面保持不变。
- en: Spot Check the Rearranged Code
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽查重新排列后的代码
- en: Finally, after rearranging the page script, we need to spot check our changes
    to make sure everything still works properly. If we have characterization tests,
    we should run those. Otherwise, we should browse to or otherwise invoke the page
    script. If it does not work correctly, we need to undo and redo our rearrangement
    so that we fix whatever errors we have introduced.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在重新排列页面脚本之后，我们需要抽查我们的更改，以确保一切仍然正常工作。如果我们有特征测试，我们应该运行这些测试。否则，我们应该浏览或以其他方式调用页面脚本。如果它没有正确工作，我们需要撤消并重新进行重新排列，以修复我们引入的任何错误。
- en: When our spot check runs are successful, we may wish to commit our changes so
    far. This will give us a known-working state to which we can revert if future
    changes go bad.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的抽查运行成功时，我们可能希望提交到目前为止的更改。这将给我们一个已知工作的状态，如果将来的更改出现问题，我们可以回滚到这个状态。
- en: Extract a Controller Class
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提取一个控制器类
- en: Now that we have a rearranged page script that works properly, we can extract
    the central controller block to a class of its own. This is not difficult, but
    we will do it in several sub-steps to make sure everything goes smoothly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个正确工作的重新排列页面脚本，我们可以将中央控制器块提取到一个独立的类中。这并不困难，但我们将分几个子步骤来确保一切顺利进行。
- en: Pick a Class Name
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择一个类名
- en: Before we can extract to a class, we need to pick a name for the class we will
    extract to.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以提取到一个类之前，我们需要为我们将要提取到的类选择一个名称。
- en: With our domain-layer classes, we chose the top-level namespace *Domain*. Because
    this is a controller layer, we will use the top-level namespace *Controller*.
    The namespace we use is not as important as consistently using the same namespace
    for all controllers. Personally, I prefer *Controller* because it is broad enough
    to encompass different kinds of controllers, such as Application Controller.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的领域层类，我们选择了顶层命名空间*Domain*。因为这是一个控制器层，我们将使用顶层命名空间*Controller*。我们使用的命名空间并不像一致地为所有控制器使用相同的命名空间那样重要。就个人而言，我更喜欢*Controller*，因为它足够广泛，可以包含不同类型的控制器，比如应用控制器。
- en: The class name within that namespace should reflect where the page script is
    in the URL hierarchy, with namespace separators where there are directory separators
    in the path. This approach makes it obvious what the original page script directory
    path was, and keeps the subdirectories organized nicely in the class structure.
    We also suffix the class name with `Page` to indicate it is a Page Controller.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该命名空间中的类名应该反映页面脚本在URL层次结构中的位置，其中在路径中有目录分隔符的地方使用命名空间分隔符。这种方法可以清楚地显示原始页面脚本目录路径，并且可以在类结构中很好地组织子目录。我们还在类名后缀加上`Page`以表明它是一个页面控制器。
- en: For example, if the page script is at `/foo/bar/baz.php`, the class name should
    be `Controller\Foo\Bar\BazPage`. The class file itself would then be placed in
    our central classes directory under `classes/Controller/Foo/Bar/BazPage.php`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果页面脚本位于`/foo/bar/baz.php`，那么类名应该是`Controller\Foo\Bar\BazPage`。然后，类文件本身将被放置在我们的中央类目录下的`classes/Controller/Foo/Bar/BazPage.php`。
- en: Create a Skeleton Class File
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个骨架类文件
- en: 'Once we have a class name, we can create a skeleton class file for it. We add
    two empty methods as placeholders for later: the `__invoke()` method will receive
    the action logic from the page script, and the constructor will eventually receive
    dependencies for the class.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了一个类名，我们就可以为其创建一个骨架类文件。我们添加两个空方法作为以后的占位符：`__invoke()`方法将接收页面脚本的动作逻辑，构造函数最终将接收类的依赖项。
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Why __invoke()?**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么是__invoke()?**'
- en: Personally, I enjoy co-opting the `__invoke()` magic method for this purpose,
    but you may wish to use `exec()` or some other appropriate term to indicate we
    are executing or otherwise running the controller. Whatever method name we choose,
    we should use it consistently.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就我个人而言，我喜欢利用`__invoke()`魔术方法来实现这个目的，但您可能希望使用`exec()`或其他适当的术语来指示我们正在执行或以其他方式运行控制器。无论我们选择什么方法名，我们都应该保持一致使用。
- en: Move the Action Logic and Spot Check
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动动作逻辑并进行抽查
- en: Now we are ready to extract the action logic to our new `Controller` class.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备将动作逻辑提取到我们的新`Controller`类中。
- en: First, we cut the controller block from the page script, and paste it into the
    `__invoke()` method as-is. We add one line to the end of the action logic, `return
    $response`, to send the *Response* object back to the calling code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从页面脚本中剪切控制器块，并将其原样粘贴到`__invoke()`方法中。我们在动作逻辑的末尾添加一行`return $response`，将*Response*对象发送回调用代码。
- en: Next, we go back to the page script. In the place of the extracted action logic,
    we create an instance of our new `Controller` and call its `__invoke()` method,
    getting back a *Response* object.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们回到页面脚本。在提取的动作逻辑的位置，我们创建一个新的`Controller`实例并调用其`__invoke()`方法，得到一个*Response*对象。
- en: We should `always` use the same variable name for the *Controller* object in
    all of our page scripts. All the examples here will use the name `$controller`.
    This is not because the name `$controller` is special, but because this level
    of consistency will be very important in a later chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在所有页面脚本中`始终`使用相同的变量名来表示*Controller*对象。这里的所有示例都将使用名称`$controller`。这不是因为名称`$controller`很特别，而是因为在后面的章节中，这种一致性将非常重要。
- en: At this point, we have successfully decoupled the action logic from the page
    script. However, this decoupling fundamentally breaks the action logic, because
    the *Controller* depends on variables from the page script.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经成功地将动作逻辑与页面脚本解耦。然而，这种解耦基本上破坏了动作逻辑，因为*Controller*依赖于页面脚本中的变量。
- en: With that in mind, we begin a spot-check-and-modify cycle. We browse to or otherwise
    invoke the page script and discover that a particular variable is not available
    to the *Controller*. We add it to the `__invoke()` method signature, and spot
    check again. We continue adding variables to the `__invoke()` method until the
    *Controller* has everything it needs and our spot check runs become completely
    successful.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们开始进行抽查和修改循环。我们浏览或以其他方式调用页面脚本，发现特定变量对*Controller*不可用。我们将其添加到`__invoke()`方法签名中，并再次进行抽查。我们继续向`__invoke()`方法添加变量，直到*Controller*拥有所需的一切，我们的抽查运行完全成功。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For this part of the process, it would be best if we set `error_reporting(E_ALL)`.
    That way we will get a PHP notice for every uninitialized variable in the action
    logic.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程的这一部分，最好设置`error_reporting(E_ALL)`。这样我们将得到每个动作逻辑中未初始化变量的PHP通知。
- en: 'Given our rearranged page script in [Appendix H](aph.xhtml "Appendix H. Code
    after Controller Rearrangement"), *Code after Controller Rearrangement*, the result
    of our initial extraction to a *Controller* can be seen in [Appendix I](api.xhtml
    "Appendix I. Code after Controller Extraction"), *Code after Controller Extraction*.
    It turns out that the extracted action logic needed four variables: `$request`,
    `$response`, `$user`, and `$article_transactions`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在[附录H](aph.xhtml "附录H. Controller重排后的代码")中给出了我们重新排列的页面脚本，*Controller重排后的代码*，我们初始提取到*Controller*的结果可以在[附录I](api.xhtml
    "附录I. Controller提取后的代码")中看到，*Controller提取后的代码*。原来提取的动作逻辑需要四个变量：`$request`、`$response`、`$user`和`$article_transactions`。
- en: Convert Controller to Dependency Injection and Spot Check
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Controller转换为依赖注入并进行抽查。
- en: Once we have a working block of action logic in the `__invoke()` method, we
    will convert the method parameters into constructor parameters so that the *Controller*
    can use dependency injection.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在`__invoke()`方法中有一个可用的动作逻辑块，我们将把方法参数转换为构造函数参数，以便*Controller*可以使用依赖注入。
- en: First, we cut the `__invoke()` parameters and paste them as a whole into the
    `__construct()` parameters. We then edit the class definition and `__construct()`
    method to retain the parameters as properties.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们剪切`__invoke()`参数，并将它们整体粘贴到`__construct()`参数中。然后编辑类定义和`__construct()`方法以将参数保留为属性。
- en: Next, we modify the `__invoke()` method to use the class properties instead
    of the method parameters. That means prefixing each of the needed variables with
    `$this->`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们修改`__invoke()`方法，使用类属性而不是方法参数。这意味着在每个所需变量前加上`$this->`。
- en: Then, we go back to the page script. We cut the arguments to the `__invoke()`
    call, and paste them into the *Controller* instantiation.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们回到页面脚本。我们剪切`__invoke()`调用的参数，并将它们粘贴到*Controller*的实例化中。
- en: Now that we have converted the *Controller* to dependency injection, we need
    to spot check the page script again to make sure everything works properly. If
    it does not, we need to undo and redo our conversion until our tests pass.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将*Controller*转换为依赖注入，我们需要再次抽查页面脚本，确保一切正常运行。如果不正常，我们需要撤销并重新进行转换，直到测试通过。
- en: At this point, we can remove the `/* DEPENDENCY */`, `/* CONTROLLER */`, and
    `/* FINISHED */` comments. They have served their purpose and are no longer needed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以删除`/* DEPENDENCY */`、`/* CONTROLLER */`和`/* FINISHED */`注释。它们已经达到了它们的目的，不再需要。
- en: Given the `__invoke()` usage in [Appendix I](api.xhtml "Appendix I. Code after
    Controller Extraction"), *Code after Controller Extraction*, we can see what converting
    the *Controller* to dependency injection looks like in [Appendix J](apj.xhtml
    "Appendix J. Code after Controller Dependency Injection"), *Code after Controller
    Dependency Injection*. We have moved the *Controller* `__invoke()` parameters
    up to `__construct()`, retained them as properties, used the new properties in
    the `__invoke()` method body, and modified the page script to pass the needed
    variables at `new` time instead of `__invoke()` time.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于[附录I](api.xhtml "附录I. 控制器提取后的代码")中对`__invoke()`的使用，我们可以看到在[附录J](apj.xhtml
    "附录J. 控制器依赖注入后的代码")中将*Controller*转换为依赖注入的样子。我们将*Controller*的`__invoke()`参数移到`__construct()`中，将它们保留为属性，在`__invoke()`方法体中使用新属性，并修改页面脚本以在`new`时而不是`__invoke()`时传递所需的变量。
- en: Once we have a working page script, we may wish to commit our work yet again
    so that we have a known correct state to which we can revert later, if needed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有一个可工作的页面脚本，我们可能希望再次提交我们的工作，以便我们有一个已知正确的状态，以便以后可以恢复。
- en: Write a Controller Test
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写Controller测试
- en: Even though we have tested our page script, we need to write a unit test for
    our extracted *Controller* logic. When we write the test, we will need to inject
    all the needed dependencies into our *Controller*, preferably as test doubles
    like fakes or mocks so we can isolate the *Controller* from the rest of the system.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们已经测试了我们的页面脚本，我们仍需要为我们提取的*Controller*逻辑编写单元测试。当我们编写测试时，我们需要将所有所需的依赖项注入到我们的*Controller*中，最好是作为测试替身，如伪造对象或模拟对象，这样我们就可以将*Controller*与系统的其余部分隔离开来。
- en: When we make assertions, they should probably be against the *Response* object
    returned from the `__invoke()` method. We can use `getView()` to make sure the
    right view file is set, `getVars()` to inspect the variables to be used in the
    view, and `getLastCall()` to see if the final callable (if any) has been set properly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行断言时，它们可能应该针对从`__invoke()`方法返回的*Response*对象。我们可以使用`getView()`来确保设置了正确的视图文件，使用`getVars()`来检查要在视图中使用的变量，使用`getLastCall()`来查看最终可调用的（如果有的话）是否已经正确设置。
- en: Commit, Push, Notify QA
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提交，推送，通知QA
- en: Once we have a passing unit test, and our tests of the original page script
    also pass, we can commit our new code and tests. Then we push to the common repository
    and notify QA that we are ready for them to review our work.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们通过了单元测试，并且我们对原始页面脚本的测试也通过了，我们就可以提交我们的新代码和测试。然后我们推送到公共存储库，并通知质量保证团队，让他们审查我们的工作。
- en: Do ... While
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Do ... While
- en: Now we go on to the next page script that has embedded action logic and begin
    the extraction process over again. When all of our page scripts use dependency-injected
    *Controller* objects, we are done.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们继续下一个包含嵌入式动作逻辑的页面脚本，并重新开始提取过程。当我们所有的页面脚本都使用依赖注入的*Controller*对象时，我们就完成了。
- en: Common Questions
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: Can we pass parameters to the Controller method?
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们可以向Controller方法传递参数吗？
- en: In the examples, we remove all parameters from the `__invoke()` method. However,
    sometimes we will want to pass a parameter to that method as last-minute information
    for the controller logic.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们从`__invoke()`方法中删除了所有参数。但是，有时我们希望将参数作为最后一刻的信息传递给控制器逻辑。
- en: In general, we should avoid doing so at this point in our modernization process.
    This is not because it is a poor practice, but because we need a very high level
    of consistency in our controller invocations for a later modernization step. The
    most-consistent thing is for there to be no `__invoke()` parameters at all.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，在我们的现代化过程中，我们应该避免这样做。这不是因为这是一种不好的做法，而是因为我们需要在稍后的现代化步骤中对我们的控制器调用具有非常高的一致性水平。最一致的做法是`__invoke()`根本不带参数。
- en: If we need to pass extra information to the *Controller*, we should do so via
    the constructor. This is especially the case when we are passing request values.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要向*Controller*传递额外的信息，我们应该通过构造函数来实现。特别是当我们要传递请求值时。
- en: 'For example, instead of this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，而不是这样：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We could do this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样做：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `__invoke()` method body would then use `$this->request->get['item_id']`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`__invoke()`方法体将使用`$this->request->get[''item_id'']`。'
- en: Can a Controller have Multiple actions?
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个Controller可以有多个动作吗？
- en: In the examples, our *Controller* objects perform a single action. However,
    it is often the case that a page controller encompasses multiple actions, such
    as both inserting and updating a database record.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们的*Controller*对象执行单个动作。但是，通常情况下，页面控制器可能包含多个动作，例如插入和更新数据库记录。
- en: Our first pass at extracting action logic from the page script should keep the
    code pretty much intact, making allowances for properties instead of local variables
    and so on. Once the code is in the class, though, it is perfectly reasonable to
    split the logic into separate action methods. Then the `__invoke()` method can
    become little more than a `switch` statement that picks the correct action method.
    If we do so, we should be sure to update our *Controller* tests, and continue
    to spot check the page script to make sure our changes do not break anything.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首次提取页面脚本中的动作逻辑应该保持代码基本完整，允许使用属性而不是局部变量等。但是，一旦代码在类中，将逻辑拆分为单独的动作方法是完全合理的。然后`__invoke()`方法可以变得不过是一个选择正确动作方法的`switch`语句。如果我们这样做，我们应该确保更新我们的*Controller*测试，并继续抽查页面脚本，以确保我们的更改不会破坏任何东西。
- en: Note that if we create additional *Controller* action methods, we need to avoid
    calling them from our page script. For the sake of the consistency needed in a
    later modernization step, the `__invoke()` method should be the only *Controller*
    method our page script calls in its controller block.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果我们创建额外的*Controller*动作方法，我们需要避免从我们的页面脚本中调用它们。为了在稍后的现代化步骤中需要的一致性，`__invoke()`方法应该是页面脚本在其控制器块中调用的唯一*Controller*方法。
- en: What If the Controller contains include Calls?
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果Controller包含include调用怎么办？
- en: Unfortunately, as we go about rearranging a page script, we are likely to discover
    that we still have several `include` calls in the controller block. (Calls to
    `include` for setup and dependency purposes are not such a big deal, especially
    if they are the same in every page script.)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，当我们重新排列页面脚本时，我们可能会发现我们的控制器块中仍然有几个`include`调用。（为设置和依赖目的而进行的`include`调用并不是什么大问题，特别是如果它们在每个页面脚本中都是相同的。）
- en: Having `include` calls in the controller block is an artifact of the include-oriented
    architecture with which our legacy application began. It is a particularly difficult
    problem to solve. We want to encapsulate action logic in classes, not in files
    that execute behavior the moment we `include` them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器块中使用`include`调用是我们遗留应用开始时采用的基于包含的架构的遗留物。这是一个特别难以解决的问题。我们希望将动作逻辑封装在类中，而不是在我们`include`它们时立即执行行为的文件中。
- en: For now, we must submit ourselves to the idea that `include` calls in the controller
    block of our page scripts are ugly but necessary. We should avert our eyes if
    needed and copy them into the `Controller` class with the rest of the controller
    code from the page script.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们必须接受在页面脚本的控制器块中使用`include`调用是丑陋但必要的想法。如果需要的话，我们应该避开视线，并将它们与页面脚本中的其余控制器代码一起复制到`Controller`类中。
- en: As consolation, we will solve the problem of these embedded `include` calls
    in the next chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 作为安慰，我们将在下一章解决这些嵌入的`include`调用的问题。
- en: Review and next steps
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾和下一步
- en: 'The extraction of the action logic to a layer of *Controllers* completes a
    huge modernization goal for our legacy application. We now have a full Model View
    Controller system in place: a domain layer for models, a presentation layer for
    views, and a controller layer that connects the two.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将动作逻辑提取到*Controllers*层完成了我们遗留应用的一个巨大的现代化目标。现在我们已经建立了一个完整的模型视图控制器系统：模型的领域层，视图的表示层，以及连接两者的控制器层。
- en: We should feel very satisfied about our modernization progress. The code that
    remains in each page script is a shadow of its original self. Most of the logic
    is wiring code that creates a *Controller* with its dependencies. The remaining
    logic is the same across all page scripts; it invokes the *Controller* and sends
    the returned *Response* object.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该对我们的现代化进展感到非常满意。每个页面脚本中剩下的代码都是其原始形式的阴影。大部分逻辑是创建带有其依赖关系的*Controller*的连接代码。剩下的逻辑在所有页面脚本中都是相同的；它调用*Controller*并发送返回的*Response*对象。
- en: However, there is a major legacy artifact for us to deal with. To finish a full
    extraction and encapsulation of controller logic, we need to remove any remaining
    `include` calls embedded in our *Controller* classes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要处理一个重要的遗留物件。为了完成对控制器逻辑的完全提取和封装，我们需要移除在我们的*Controller*类中嵌入的任何剩余的`include`调用。
