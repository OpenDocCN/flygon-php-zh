- en: Chapter 6. Stress/Load Testing PHP Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。压力/负载测试PHP应用程序
- en: After an application is developed, tested, debugged and then profiled, it is
    time to bring it to production. However, before going to production, it is best
    practice to stress/load test the application. This test will give us an approximate
    result of how many requests at a certain time can be handled by our server running
    the application. Using these results, we can optimize the application, web server,
    database, and our caching tools to get a better result and process more requests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序开发、测试、调试和分析之后，是时候将其投入生产了。但是，在投入生产之前，最好的做法是对应用程序进行压力/负载测试。这项测试将为我们提供一个关于服务器在运行应用程序时可以处理多少请求的大致结果。利用这些结果，我们可以优化应用程序、Web服务器、数据库和缓存工具，以获得更好的结果并处理更多的请求。
- en: In this chapter, we will load test different open source tools on both PHP 5.6
    and PHP 7 and compare these applications' performance for both versions of PHP.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将对PHP 5.6和PHP 7上的不同开源工具进行负载测试，并比较这些应用程序在PHP的两个版本上的性能。
- en: 'We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Apache JMeter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache JMeter
- en: ApacheBench (ab)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ApacheBench (ab)
- en: Seige
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Seige
- en: Load testing Magento 2 on PHP 5.6 and PHP 7
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PHP 5.6和PHP 7上对Magento 2进行负载测试
- en: Load testing WordPress on PHP 5.6 and PHP 7
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PHP 5.6和PHP 7上对WordPress进行负载测试
- en: Load testing Drupal 8 on PHP 5.6 and PHP 7
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PHP 5.6和PHP 7上对Drupal 8进行负载测试
- en: Apache JMeter
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache JMeter
- en: Apache JMeter is a graphical and open source tool used to load test a server's
    performance. JMeter is completely written in Java, so it is compatible with all
    operating systems that have Java installed. JMeter has a complete set of extensive
    tools for every kind of load testing, from static content to dynamic resources
    and web services.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Apache JMeter是一个图形化的开源工具，用于对服务器的性能进行负载测试。JMeter完全由Java编写，因此与安装了Java的所有操作系统兼容。JMeter拥有一套完整的广泛工具，可用于各种负载测试，从静态内容到动态资源和Web服务。
- en: Its installation is simple. We need to download it from the JMeter website and
    then just run the application. As mentioned before, it will require Java to be
    installed on the machine.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 安装很简单。我们需要从JMeter网站下载它，然后运行应用程序。如前所述，它将需要在计算机上安装Java。
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JMeter can test FTP servers, mail servers, database servers, queries, and more.
    In this book, we can't cover all these topics, so we will only load test web servers.
    Apache JMeter's list of features can be found at [http://jmeter.apache.org/](http://jmeter.apache.org/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JMeter可以测试FTP服务器、邮件服务器、数据库服务器、查询等等。在本书中，我们无法涵盖所有这些主题，因此我们只会对Web服务器进行负载测试。Apache
    JMeter的功能列表可以在[http://jmeter.apache.org/](http://jmeter.apache.org/)找到。
- en: 'When we run the application at first, we will see the following window:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们首次运行应用程序时，将看到以下窗口：
- en: '![Apache JMeter](graphics/B05225_06_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_01.jpg)'
- en: 'To run any kind of test, you need to first create a test plan. A test plan
    has all the components required to execute this test. By default, JMeter has a
    test plan called Test Plan. Let''s name it to our own plan, `Packt Publisher Test
    Plan`, as shown in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行任何类型的测试，首先需要创建一个测试计划。测试计划包含执行此测试所需的所有组件。默认情况下，JMeter有一个名为Test Plan的测试计划。让我们将其命名为我们自己的计划，`Packt
    Publisher Test Plan`，如下面的屏幕截图所示：
- en: '![Apache JMeter](graphics/B05225_06_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_02.jpg)'
- en: Now, save the test plan, and JMeter we will create a `.jmx` file. Save it in
    an appropriate place.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存测试计划，JMeter将创建一个`.jmx`文件。将其保存在适当的位置。
- en: 'The next step is to add a thread group. *A thread group defines some basic
    properties for the test plan, which can be common among all types of tests*. To
    add a thread group, right-click on the plan in the left panel, then navigate to
    **Add** | **Threads (Users)** | **Thread Group**. The following window will be
    displayed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是添加一个线程组。*线程组定义了测试计划的一些基本属性，这些属性可以在所有类型的测试中通用*。要添加线程组，请右键单击左侧面板中的计划，然后导航到**Add**
    | **Threads (Users)** | **Thread Group**。将显示以下窗口：
- en: '![Apache JMeter](graphics/B05225_06_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_03.jpg)'
- en: 'The thread group has the following important properties:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 线程组具有以下重要属性：
- en: '**Number of Threads**: This is the number of virtual users.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线程数**：这是虚拟用户的数量。'
- en: '**The Ramp-Up period**: This tells JMeter how long it should take to ramp up
    to the full capacity of the number of threads. For example, in the preceding screenshot,
    we have 40 threads and 80 seconds of ramp-up time; here, JMeter will take 80 seconds
    to completely fire up 40 threads, and it will take 2 seconds for each of the three
    to start.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渐进周期**：这告诉JMeter它应该花多长时间才能达到线程数的最大容量。例如，在前面的屏幕截图中，我们有40个线程和80秒的渐进时间；在这里，JMeter将花80秒的时间完全启动40个线程，每个线程启动需要2秒。'
- en: '**Loop Count**: This tells JMeter how much time it should take to run this
    thread group.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环计数**：这告诉JMeter运行此线程组需要多长时间。'
- en: '**Scheduler**: This is used to schedule the execution of the thread group for
    a later time.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度程序**：这用于安排稍后执行线程组。'
- en: 'Now, we will need to add the HTTP request defaults. Right-click on **Packt
    Thread Group** and then go to **Add** | **Config Element** | **HTTP Request Defaults**.
    A window similar to the following will appear:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加HTTP请求默认值。右键单击**Packt Thread Group**，然后转到**Add** | **Config Element**
    | **HTTP Request Defaults**。将出现类似以下的窗口：
- en: '![Apache JMeter](graphics/B05225_06_04.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_04.jpg)'
- en: In the preceding window, we have to just enter the URL of the application or
    the IP address. If the web server uses cookies, we can add HTTP Cookie Manager
    too, in which we can add user-defined cookies with all the data, such as the name,
    value, domain, path, and so on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的窗口中，我们只需输入应用程序的URL或IP地址。如果Web服务器使用cookie，我们还可以添加HTTP Cookie Manager，在其中可以添加用户定义的cookie及其所有数据，如名称、值、域、路径等。
- en: 'Next, we will add an HTTP request by right-clicking and navigating to **Packt
    Thread Group** | **Add** | **Sampler** | **HTTP Request**, and the following window
    will appear:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过右键单击并导航到**Packt Thread Group** | **Add** | **Sampler** | **HTTP Request**来添加一个HTTP请求，然后将出现以下窗口：
- en: '![Apache JMeter](graphics/B05225_06_05.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_05.jpg)'
- en: The important field here is **Path**. We want to run the test only against the
    home page, so for this HTTP request, we will just add a slash (`/`) in the **Path**
    field. If we want to test another path, such as "Contact us", we will need to
    add another HTTP request sampler, as in the preceding screenshot. Then, in the
    path, we will add `path/contact-us`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的重要字段是**路径**。我们只想针对主页运行测试，所以对于这个HTTP请求，我们只需在**路径**字段中添加一个斜杠（`/`）。如果我们想测试另一个路径，比如"联系我们"，我们需要添加另一个HTTP请求采样器，如上面的屏幕截图所示。然后，在路径中，我们将添加`path/contact-us`。
- en: The HTTP Request sampler can be used to test forms too, where POST requests
    can be sent to the URL by selecting the POST method in the **Method** field. Also,
    file upload can be simulated.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求采样器也可以用于测试表单，可以通过在**方法**字段中选择POST方法来向URL发送POST请求。还可以模拟文件上传。
- en: 'The next step is to add some listeners. *Listeners provide some powerful views
    to display results*. The results can be displayed in a table view and different
    kinds of graphs can be saved in a file. For this thread group, we will add three
    listeners: View Results in Table, Response Time Graph, and Graph Results. Each
    listener view displays a different kind of data. Add all the preceding listeners
    by right-clicking on **Packt Thread Group** and then navigating to **Add** | **Listeners**.
    We will have a complete list of all the available listeners. Add all the three
    listeners one by one. Our final **Packt Publisher Test Plan** panel on the left-hand
    side of JMeter will look similar to the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是添加一些监听器。*监听器提供了一些强大的视图来显示结果*。结果可以显示在表格视图中，并且不同类型的图表可以保存在文件中。对于这个线程组，我们将添加三个监听器：在表中查看结果，响应时间图和图表结果。每个监听器视图显示不同类型的数据。通过右键单击**Packt
    Thread Group**，然后导航到**添加** | **监听器**来添加所有前面的监听器。我们将有一个所有可用监听器的完整列表。逐个添加所有三个监听器。我们左侧的JMeter上的最终**Packt
    Publisher Test Plan**面板将类似于以下内容：
- en: '![Apache JMeter](graphics/B05225_06_06.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_06.jpg)'
- en: 'Now, we are ready to run our test plan by clicking on the **Start** button
    in the upper tool bar, as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过点击上方工具栏中的**开始**按钮来运行我们的测试计划，如下面的屏幕截图所示：
- en: '![Apache JMeter](graphics/B05225_06_07.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_07.jpg)'
- en: 'As soon as we click on the **Start** button (the green arrow pointing to the
    right-hand side), JMeter will start our test plan. Now, if we click on the **View
    Results in Table** listener on the left panel, we will see data for each request
    in a table, as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击**开始**按钮（指向右侧的绿色箭头），JMeter将启动我们的测试计划。现在，如果我们在左侧面板上点击**在表中查看结果**监听器，我们将看到每个请求的数据在表中显示，如下面的屏幕截图所示：
- en: '![Apache JMeter](graphics/B05225_06_08.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_08.jpg)'
- en: The preceding screenshot shows some interesting data, such as sample time, status,
    bytes, and latency.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上述屏幕截图显示了一些有趣的数据，如样本时间、状态、字节和延迟。
- en: '**Sample time** is the number of milliseconds in which the server served the
    complete request. **Status** is the status of the request. It can be either a
    success, warning, or error. **Bytes** is the number of bytes received for the
    request. **Latency** is the number of milliseconds in which JMeter received the
    initial response from the server.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**样本时间**是服务器提供完整请求所用的毫秒数。**状态**是请求的状态。它可以是成功、警告或错误。**字节**是请求接收的字节数。**延迟**是JMeter从服务器接收到初始响应所用的毫秒数。'
- en: 'Now, if we click on **Response Time Graph**, we will see a visual graph for
    the response time, which is similar to the one that follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们点击**响应时间图**，我们将看到响应时间的可视图表，类似于以下内容：
- en: '![Apache JMeter](graphics/B05225_06_09.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_09.jpg)'
- en: 'Now, if we click on **Graph Results**, we will see the response time data along
    with graphs for average, median, deviation, and throughput graphs, as shown in
    the following graph:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们点击**图表结果**，我们将看到响应时间数据以及平均值、中位数、偏差和吞吐量图表，如下图所示：
- en: '![Apache JMeter](graphics/B05225_06_10.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Apache JMeter](graphics/B05225_06_10.jpg)'
- en: Apache JMeter provides very powerful tools to load test our web servers by simulating
    users. It can provide us with data regarding the amount of load that makes our
    web server's response slow, and using this data, we can optimize our web server
    and application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Apache JMeter提供了非常强大的工具，可以通过模拟用户来对我们的Web服务器进行负载测试。它可以为我们提供关于使我们的Web服务器响应变慢的负载量的数据，并且使用这些数据，我们可以优化我们的Web服务器和应用程序。
- en: ApacheBench (ab)
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ApacheBench (ab)
- en: ApacheBench (ab) is also provided by Apache and is a command-line tool. It is
    a lovely tool for command line lovers. This tool is normally installed on most
    Linux flavors by default. Also, it is installed with Apache, so if you have Apache
    installed, you will probably have ab installed too.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: ApacheBench (ab)也由Apache提供，是一个命令行工具。这是一个非常适合命令行爱好者的工具。这个工具通常默认安装在大多数Linux发行版上。此外，它也随Apache一起安装，所以如果你安装了Apache，你可能也会安装ab。
- en: 'The basic syntax for an ab command is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: ab命令的基本语法如下：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s discuss what each part of the preceding command means:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论上述命令的每个部分的含义：
- en: '`n`: This is the number of requests for test.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：这是测试的请求数。'
- en: '`c`: This is concurrency, which is the number of simultaneous requests at a
    time.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`：这是并发数，即同时发出的请求数。'
- en: '`Address`: This is either the application URL or IP address of the web server.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`地址`：这是Web服务器的应用程序URL或IP地址。'
- en: '`Port`: This is the port number at which the application is running.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`端口`：这是应用程序运行的端口号。'
- en: '`Path`: This is the web path of the application that we can use to test. A
    slash (`/`) is used for the home page.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`路径`：这是我们可以用来测试的应用程序的Web路径。斜杠（`/`）用于主页。'
- en: 'Now, let''s conduct a test using the ab tool by issuing the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过发出以下命令使用ab工具进行测试：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As the default port for the web server is 80, it is not required to mention
    it. Note the slash at the end; this is required to place it there because it is
    the path's part.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Web服务器的默认端口是80，因此不需要提及它。请注意末尾的斜杠；这是必需的，因为它是路径的一部分。
- en: 'After executing the preceding command, we will have an output that looks similar
    to the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，我们将获得类似以下内容的输出：
- en: '![ApacheBench (ab)](graphics/B05225_06_11.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![ApacheBench (ab)](graphics/B05225_06_11.jpg)'
- en: We can see some useful information here, including the number of requests per
    second, which is **490.3**; the total time taken for the test, which is **1.020
    seconds**; the shortest request, which is **20 ms**; and the longest request,
    which is **52 ms**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在这里看到一些有用的信息，包括每秒请求的数量，为**490.3**；测试所用的总时间，为**1.020秒**；最短请求为**20毫秒**；最长请求为**52毫秒**。
- en: The server load limit can be found by increasing the number of requests and
    concurrency level and checking the web server's performance.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过增加请求数量和并发级别并检查Web服务器的性能来找到服务器负载限制。
- en: Siege
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Siege
- en: Siege is another command-line open source tool to test load and performance.
    Siege is an HTTP/FTP load tester and benchmarking utility. It is designed for
    developers and administrators to measure the performance of their applications
    under load. It can send a configurable number of simultaneous requests to a server
    and those requests that place the server under a siege.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Siege是另一个命令行开源工具，用于测试负载和性能。Siege是一个HTTP/FTP负载测试工具和基准测试实用程序。它旨在供开发人员和管理员在负载下测量其应用程序的性能。它可以向服务器发送可配置数量的并发请求，并且这些请求会使服务器处于围攻状态。
- en: 'Its installation is simple and easy. For Linux and Mac OS X, first download
    Siege by issuing the following command in the terminal:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它的安装简单而容易。对于Linux和Mac OS X，首先通过在终端中发出以下命令来下载Siege：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It will download the Siege TAR compressed file. Now, uncompress it by issuing
    the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 它将下载Siege TAR压缩文件。现在，通过发出以下命令来解压缩它：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, all the files will be in the `siege-3.1.4` folder. Build and install it
    by issuing the following commands one by one in the terminal:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有文件都将位于`siege-3.1.4`文件夹中。通过在终端中依次发出以下命令来构建和安装它：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, Siege is installed. To confirm this, issue the following command to check
    the Siege version:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Siege已安装。要确认这一点，请发出以下命令以检查Siege版本：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If it displays the version with some other information, then Siege is installed
    successfully.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果显示带有其他信息的版本，则Siege已成功安装。
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As of writing this book, the current Siege stable version is 3.1.4\. Also, Siege
    does not support Windows natively, and, of course, Windows servers can be tested
    and benchmarked using Siege.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，当前的Siege稳定版本是3.1.4。此外，Siege不原生支持Windows，当然，可以使用Siege测试和基准测试Windows服务器。
- en: 'Now, let''s have a load test. A basic load test can be executed by running
    the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进行一次负载测试。可以通过运行以下命令来执行基本的负载测试：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Siege will then start the test. We have to enter the application URL or server
    IP that we want to load test. To stop the test, press *Ctrl* + *C*, and we will
    have an output similar to the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后Siege将开始测试。我们必须输入要进行负载测试的应用程序URL或服务器IP。要停止测试，请按*Ctrl* + *C*，然后我们将获得类似以下内容的输出：
- en: '![Siege](graphics/B05225_06_12.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Siege](graphics/B05225_06_12.jpg)'
- en: In the preceding screenshot we can see **Transactions**, **Response time**,
    and **Transaction rate** along with **Longest transaction** and **Shortest transaction**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述屏幕截图中，我们可以看到**事务**、**响应时间**和**事务速率**，以及**最长事务**和**最短事务**。
- en: 'By default, Siege creates 15 concurrent users. This can be changed by using
    the `–c` option, which is done by making the following alteration in the command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Siege创建15个并发用户。可以通过使用`-c`选项进行更改，方法是在命令中进行以下更改：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'However, Siege has a limitation for the concurrent users, which may be different
    for each OS. This can be set in the Siege configuration file. To find out the
    `config` file location and concurrent user limit, issue the following command
    in terminal:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Siege对并发用户有限制，对于每个操作系统可能不同。这可以在Siege配置文件中设置。要找出`config`文件位置和并发用户限制，请在终端中发出以下命令：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A list of the configuration options will be displayed. Also the resource file
    or `config` file location will be displayed. Open that file and find the config
    concurrent and set its value to an appropriate required value.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示配置选项列表。还将显示资源文件或`config`文件位置。打开该文件，找到配置并将其值设置为适当的值。
- en: 'Another important feature of Siege is that a file that has all the URLs that
    need to be tested can be used. The file should have a single URL in each line.
    The `–f` flag is used with Siege as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Siege的另一个重要功能是可以使用包含所有需要测试的URL的文件。该文件每行应包含一个URL。使用`-f`标志与Siege一起使用如下：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Siege will load the file and start load testing each URL.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Siege将加载文件并开始对每个URL进行负载测试。
- en: 'Another interesting feature of Siege is the internet mode, which can be entered
    using the `–i` flag in the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Siege的另一个有趣的功能是互联网模式，可以使用以下命令中的`-i`标志进入：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the internet mode, each URL is hit randomly and mimics a real-life situation,
    in which it can't be predicted which URL will be hit.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网模式下，每个URL都会随机访问，并模拟真实生活中无法预测哪个URL会被访问的情况。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Siege has lots of useful flags and features. A detailed list can be found in
    the official documentation at [https://www.joedog.org/siege-manual/](https://www.joedog.org/siege-manual/).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Siege有很多有用的标志和功能。详细列表可以在官方文档中找到[https://www.joedog.org/siege-manual/](https://www.joedog.org/siege-manual/)。
- en: Load testing real-world applications
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载测试真实应用
- en: We studied three tools in this chapter to load test. Now, it is time to load
    test some real-world applications. In this section, we will test Magento 2, Drupal
    8, and WordPress 4\. All these open source tools will have their default data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了三种工具进行负载测试。现在，是时候对一些真实世界的应用进行负载测试了。在本节中，我们将测试Magento 2、Drupal 8和WordPress
    4。所有这些开源工具都将使用它们的默认数据。
- en: We have three VPS configured with NGINX as the web server. One VPS has PHP 5.5-FPM,
    the second has PHP 5.6-FPM, and the third has PHP 7-FPM installed. The hardware
    specs for all the three VPS are same, and all applications we will test will have
    the same data and the same versions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个配置了NGINX作为Web服务器的VPS。一个VPS安装了PHP 5.5-FPM，第二个安装了PHP 5.6-FPM，第三个安装了PHP 7-FPM。所有三个VPS的硬件规格相同，我们将测试的所有应用程序都将具有相同的数据和相同的版本。
- en: This way, we will benchmark these applications with PHP 5.5, PHP 5.6, and PHP
    7 and take a look at how fast these applications can run on different versions
    of PHP.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们将使用PHP 5.5、PHP 5.6和PHP 7对这些应用程序进行基准测试，并查看它们在不同版本的PHP上运行的速度。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this topic, we won't cover configuring the servers with NGINX, PHP, and the
    databases. We will assume that the VPS are configured and that Magento 2, Drupal
    8, and WordPress 4 are installed on them.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本主题中，我们不会涉及配置带有NGINX、PHP和数据库的服务器。我们将假设VPS已配置，并且在其上安装了Magento 2、Drupal 8和WordPress
    4。
- en: Magento 2
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Magento 2
- en: 'Magento 2 is installed on all VPS, and all the caches are enabled for Magento.
    PHP OPcache is also enabled. After running the tests, we got an average result
    for all the three Magento 2 installations, as shown in the following graphs:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Magento 2安装在所有VPS上，并且为Magento启用了所有缓存。还启用了PHP OPcache。在运行测试后，我们得到了所有三个Magento
    2安装的平均结果，如下图所示：
- en: '![Magento 2](graphics/B05225_06_13.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Magento 2](graphics/B05225_06_13.jpg)'
- en: In the preceding chart, the vertical line, or Y-axis, shows the transactions
    per second. As can be seen in the charts, Magento 2 on PHP 7 has 29 transactions
    per second, while the same Magento 2 installation on the same hardware with PHP
    5.6 has 12 transactions per second. Also, on PHP 5.5, the same Magento installation
    has 9 transactions per second. So, in this case, Magento runs about 241% faster
    on PHP 7 than PHP 5.6 and about 320% faster than in PHP 5.5\. This is a very huge
    improvement of PHP 7 on both PHP 5.6 and PHP 5.5.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，垂直线或Y轴显示每秒事务数。如图所示，Magento 2在PHP 7上每秒有29个事务，而在相同硬件上使用PHP 5.6的同一Magento
    2安装每秒有12个事务。此外，在PHP 5.5上，相同的Magento安装每秒有9个事务。因此，在这种情况下，Magento在PHP 7上的运行速度比在PHP
    5.6上快约241%，比在PHP 5.5上快约320%。这是PHP 7在PHP 5.6和PHP 5.5上的非常巨大的改进。
- en: WordPress 4
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WordPress 4
- en: WordPress is installed on all of the three VPS. Unfortunately, there is no default
    cache embedded into WordPress, and we will not install any third-party modules,
    so no cache is used. The results are still good, as can be seen in the following
    graphs. PHP OPcache is enabled.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress安装在所有三个VPS上。不幸的是，WordPress中没有默认缓存，我们也不会安装任何第三方模块，因此不使用缓存。结果仍然很好，如下图所示。启用了PHP
    OPcache。
- en: '![WordPress 4](graphics/B05225_06_14.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![WordPress 4](graphics/B05225_06_14.jpg)'
- en: As can be seen in the preceding graph, WordPress runs 135% faster in PHP 7 than
    in PHP 5.6 and 182% faster than in PHP 5.5.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，WordPress在PHP 7上运行速度比在PHP 5.6上快135%，比在PHP 5.5上快182%。
- en: Drupal 8
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Drupal 8
- en: 'We used the same VPS for PHP 5.5, PHP 5.6, and PHP 7\. The default Drupal 8
    cache is enabled. After load testing the default home of Drupal 8, we got the
    following results:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在同一台VPS上使用了PHP 5.5、PHP 5.6和PHP 7。默认启用了Drupal 8缓存。在对Drupal 8的默认主页进行负载测试后，我们得到了以下结果：
- en: '![Drupal 8](graphics/B05225_06_15.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Drupal 8](graphics/B05225_06_15.jpg)'
- en: The preceding graph shows that Drupal 8 runs 178% faster in PHP 7 than in PHP
    5.6 and 205% faster than in PHP 5.5.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示，Drupal 8在PHP 7上的运行速度比在PHP 5.6上快178%，比在PHP 5.5上快205%。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the preceding graphs, all these values are approximate values. If a low-power
    hardware is used, then smaller values will be generated. If we use a more powerful
    multiprocessor-dedicated server with the web server and database optimizations,
    we will get higher values. The point to consider is that we will always get better
    performance for PHP 7 than PHP 5.6.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述图表中，所有这些值都是近似值。如果使用低性能硬件，则会生成较小的值。如果我们使用具有Web服务器和数据库优化的更强大的多处理器专用服务器，我们将获得更高的值。需要考虑的一点是，我们在PHP
    7上始终会获得比PHP 5.6更好的性能。
- en: 'A combined graph is shown here, which displays the performance improvements
    for different applications in PHP 7 over PHP 5.5 and PHP 5.6:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了一个合并的图表，显示了不同应用程序在PHP 7上相对于PHP 5.5和PHP 5.6的性能改进：
- en: '![Drupal 8](graphics/B05225_06_16.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![Drupal 8](graphics/B05225_06_16.jpg)'
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed a few load testing and benchmarking tools, such
    as JMeter, ApacheBench (ab), and Siege. We used each tool to load test, and discussed
    the output and what it means. Finally, we load tested three famous open source
    applications, Magento 2, WordPress 4, and Drupal 8, and created graphs for each
    application's transactions per second in both PHP 7 and PHP 5.6.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些负载测试和基准测试工具，如JMeter、ApacheBench（ab）和Siege。我们使用每个工具进行负载测试，并讨论了输出及其含义。最后，我们对三个著名的开源应用程序进行了负载测试，分别是Magento
    2、WordPress 4和Drupal 8，并为每个应用程序在PHP 7和PHP 5.6中的每秒事务创建了图表。
- en: In the next chapter, we will discuss best practices for PHP development. These
    practices are not limited only to PHP and can be used for any programming language.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论PHP开发的最佳实践。这些实践不仅限于PHP，还可以用于任何编程语言。
