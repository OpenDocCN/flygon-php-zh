- en: Chapter 6. Displaying Your Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。显示您的视图
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating and using a basic view
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和使用基本视图
- en: Passing data into a view
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据传递到视图
- en: Loading a view into another view/nested views
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将视图加载到另一个视图/嵌套视图中
- en: Adding assets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加资产
- en: Creating a view using Blade
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Blade创建视图
- en: Using TWIG templates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TWIG模板
- en: Utilizing advanced Blade usage
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用高级Blade用法
- en: Creating localization of content
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建内容的本地化
- en: Creating menus in Laravel
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Laravel中创建菜单
- en: Integrating with Bootstrap
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Bootstrap集成
- en: Using named views and view composers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名视图和视图组件
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In a Model-View-Controller setup, our **views** hold all the HTML and styles
    so we can display our data. In Laravel, our views can use either regular PHP files
    or we can use Laravel's Blade templating. Laravel is also extensible enough to
    allow us to use any templating engine we may want to include.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Model-View-Controller设置中，我们的**视图**保存所有的HTML和样式，以便我们可以显示我们的数据。在Laravel中，我们的视图可以使用常规的PHP文件，也可以使用Laravel的Blade模板。Laravel还可以扩展到允许我们使用任何我们想要包含的模板引擎。
- en: Creating and using a basic view
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和使用基本视图
- en: In this recipe, we'll see some basic **view** functionality and how we can include
    views in our app.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将看到一些基本的**视图**功能，以及我们如何在我们的应用程序中包含视图。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to complete the recipe:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成这个步骤：
- en: In the `app/views` directory, create a folder name `myviews`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views`目录中，创建一个名为`myviews`的文件夹。
- en: 'In the new `myviews` directory, create two files: `home.php` and `second.php`.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的`myviews`目录中，创建两个文件：`home.php`和`second.php`。
- en: 'Open `home.php` and add the following code in HTML:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`home.php`并在HTML中添加以下代码：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Open the `second.php` file and add the following code in HTML:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`second.php`文件并在HTML中添加以下代码：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In our `app/routes.php` file, add the routes that will return these views:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/routes.php`文件中，添加将返回这些视图的路由：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Test the views by going to `http://{your-server}/home` (where `your-server`
    is our URL) and clicking on the link.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://{your-server}/home`（其中`your-server`是我们的URL）并单击链接来测试视图。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: All of the views in Laravel are kept in the `app/views` directory. We start
    by creating two files that will hold our HTML. In this example, we're creating
    static pages, with each view holding its own full HTML markup.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel中的所有视图都保存在`app/views`目录中。我们首先创建两个文件，用于保存我们的HTML。在这个例子中，我们正在创建静态页面，每个视图都包含自己的完整HTML标记。
- en: In our routes file, we then return `View::make()`, with the name of the view
    passed in. Since our views are in a subdirectory of the views directory, we use
    the dot notation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的路由文件中，然后返回`View::make()`，并传入视图的名称。由于我们的视图在视图目录的子目录中，我们使用点表示法。
- en: Passing data into a view
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据传递到视图
- en: In our web app, we will usually need to display some kind of data from our database
    or other data store. In Laravel, we can easily pass that data into our views.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Web应用程序中，我们通常需要显示来自数据库或其他数据存储的某种数据。在Laravel中，我们可以轻松地将这些数据传递到我们的视图中。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have completed the *Creating and using a basic view*
    recipe .
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要完成*创建和使用基本视图*步骤。
- en: How to do it…
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: 'Open the `routes.php` and replace our home and second routes to include the
    following data:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`routes.php`并将我们的主页和第二个路由替换为包含以下数据：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the `view/myviews` directory, open `home.php` and replace the code with
    the following code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`view/myviews`目录中，打开`home.php`并用以下代码替换代码：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `views/myviews` directory, open the `second.php` file and replace the
    code with the following code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/myviews`目录中，打开`second.php`文件，并用以下代码替换代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Test the views by going to `http://{your-server}/home` (where `your-server`
    is our URL) and then clicking on the link.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://{your-server}/home`（其中`your-server`是我们的URL）来测试视图，然后单击链接。
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If we want to get data into our views, Laravel offers various ways to accomplish
    this. We start by updating our first route by passing a single variable to the
    view, by chaining the `with()` method to `View::make()`. Then, in the view file,
    we can access the variable by using whichever name we chose.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要将数据传递到我们的视图中，Laravel提供了各种方法来实现这一点。我们首先通过将单个变量传递给视图来更新我们的第一个路由，通过将`with()`方法链接到`View::make()`。然后，在视图文件中，我们可以通过使用我们选择的任何名称来访问变量。
- en: In our next route, we assign `View::make()` to a variable, and then assign values
    as the object's properties. We can then access those properties as variables in
    our view. To display the view, we simply return the object variable.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一个路由中，我们将`View::make()`分配给一个变量，然后将值分配为对象的属性。然后我们可以在视图中将这些属性作为变量访问。要显示视图，我们只需返回对象变量。
- en: There's more...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'One other way to add data to our views is similar to the way in our second
    route; however we use an array instead of an object. So our code would look similar
    to the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 向视图添加数据的另一种方法类似于我们第二个路由中的方法；但是我们使用数组而不是对象。因此，我们的代码看起来类似于以下内容：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Loading a view into another view/nested views
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将视图加载到另一个视图/嵌套视图中
- en: Very often, our web pages will have a similar layout and HTML structure. To
    help separate out the repeated HTML, we can use **nested views** in Laravel.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网页往往会有类似的布局和HTML结构。为了帮助分离重复的HTML，我们可以在Laravel中使用**嵌套视图**。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have completed the *Creating and using a basic view*
    recipe.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要完成*创建和使用基本视图*步骤。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: In the `app/view` directory, add a new folder named `common`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/view`目录中，添加一个名为`common`的新文件夹。
- en: 'In the `common` directory, create a file named `header.php` and add the following
    code to it:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`common`目录中，创建一个名为`header.php`的文件，并将以下代码添加到其中：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `common` directory, create a file named `footer.php` and add the following
    code to it:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`common`目录中，创建一个名为`footer.php`的文件，并将以下代码添加到其中：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `common` directory, create a file named `userinfo.php` and add the following
    code to it:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`common`目录中，创建一个名为`userinfo.php`的文件，并添加以下代码：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `routes.php` file, update the home and second route to include the following
    nested views:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，更新主页和第二个路由，包括以下嵌套视图：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `views/myviews` directory, open the `home.php` file and add the following
    code to it:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/myviews`目录中，打开`home.php`文件，并添加以下代码：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `views/myviews` directory, open the `second.php` file and add the following
    code to it:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/myviews`目录中，打开`second.php`文件，并添加以下代码：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Test the views by going to `http://{your-server}/home` (where `your-server`
    is our URL) and then clicking on the link.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://{your-server}/home`（其中`your-server`是我们的URL），然后点击链接来测试视图。
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To begin, we need to separate out our header and footer code from our views.
    Since these will be the same on every page, we create a subdirectory in our `views`
    folder to hold our common files. The first file is our header, which will hold
    everything up until the `<body>` tag. Our second file is our footer, which will
    hold the HTML at the bottom of our page.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将头部和页脚代码从我们的视图中分离出来。由于这些将在每个页面上都是相同的，我们在我们的`views`文件夹中创建一个子目录来保存我们的公共文件。第一个文件是我们的页眉，它将包含直到`<body>`标签的所有内容。第二个文件是我们的页脚，它将包含页面底部的HTML。
- en: Our third file is a `userinfo` view. Very often, if we have user accounts with
    profiles, we may want to include the user's data in a sidebar or header. So that
    we can keep that one piece of our view separate, we create the `userinfo` view
    with some data that we will pass to it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第三个文件是一个`userinfo`视图。如果我们有用户帐户和个人资料，我们经常希望在侧边栏或页眉中包含用户的数据。为了保持视图的一部分单独，我们创建了`userinfo`视图，并传递了一些数据给它。
- en: For our home route, we will use our home view and nest in the header and footer.
    The first parameter in the `nest()` method is the name we will use in the main
    view and the second parameter is the location of the view. For this example, our
    views are on the common subdirectory, so we use the dot notation to reference
    them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的主页路由，我们将使用我们的主页视图，并嵌套头部和页脚。`nest()`方法中的第一个参数是我们将在主视图中使用的名称，第二个参数是视图的位置。在这个例子中，我们的视图在common子目录中，所以我们使用点表示法来引用它们。
- en: In our home view, to display the nested views, we print out the variable name
    we used in our route.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主页视图中，为了显示嵌套视图，我们打印出了我们在路由中使用的变量名。
- en: For our second route, we nest in the header and footer as well but we also want
    to add in the `userinfo` view. For this, we pass in a third parameter to the `nest()`
    method, which is an array of the data we want to send to the view. Then, in our
    main view, when we print out the `userinfo` view, it will automatically have the
    variables included.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第二个路由，我们嵌套了头部和页脚，但我们还想添加`userinfo`视图。为此，我们向`nest()`方法传入了第三个参数，这是我们要发送到视图的数据数组。然后，在我们的主视图中，当我们打印出`userinfo`视图时，它将自动包含这些变量。
- en: See also
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Passing data into a view* recipe
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将数据传递到视图*的方法'
- en: Adding assets
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加资产
- en: A dynamic website almost requires the use of CSS and JavaScript. Using a Laravel
    asset package provides an easy way to manage these assets and include them in
    our views.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 动态网站几乎需要使用CSS和JavaScript。使用Laravel资产包提供了一种简单的方法来管理这些资产并将它们包含在我们的视图中。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need to use the code created in the *Loading a view into
    another view/nested views* recipe.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个方法，我们需要使用*加载视图到另一个视图/嵌套视图*方法中创建的代码。
- en: How to do it...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个方法，按照以下步骤进行：
- en: 'Open the `composer.json` file and add the `asset` package to the `require`
    section, so it looks similar to the following:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`composer.json`文件，并将`asset`包添加到`require`部分，使其看起来类似于以下内容：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the command line, run composer update to download the package as follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，运行composer update来下载包，如下所示：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open the `app/config/app.php` file and add `ServiceProvider` to the end of
    the providers array as follows:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/config/app.php`文件，并在提供者数组的末尾添加`ServiceProvider`，如下所示：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the same file, in the `aliases` array, add the alias for the package as
    follows:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在相同的文件中，在`aliases`数组中，添加包的别名，如下所示：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `app/filters.php` file, add a custom filter for our assets as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/filters.php`文件中，添加一个自定义过滤器来处理我们的资产，如下所示：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `views/common` directory, open `header.php` and use this code as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/common`目录中，打开`header.php`文件，并按照以下代码使用：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the `views/common` directory, open `footer.php` and use the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/common`目录中，打开`footer.php`文件，并使用以下代码：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Test the views by going to `http://{your-server}/home` (where `your-server`
    is our URL), clicking on the link, and viewing the source of the page to see the
    assets included.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://{your-server}/home`（其中`your-server`是我们的URL），点击链接并查看页面源代码来测试视图，以查看包含的资产。
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `asset` package makes it very easy to add CSS and JavaScript files to our
    HTML. To begin, we need to "register" each asset with the routes. To make things
    a bit simpler, we'll add the assets in a filter that will be called before our
    routes. That way, we only have the code in one place and making changes will be
    easy. For our purposes, we'll use jQuery, jQueryUI, and bootstrap CSS from a CDN
    source.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`asset`包使向我们的HTML添加CSS和JavaScript文件变得非常容易。首先，我们需要在路由中“注册”每个资产。为了使事情变得更简单一些，我们将在一个在路由之前调用的过滤器中添加这些资产。这样，我们只需在一个地方编写代码，而且更改也会很容易。为了我们的目的，我们将使用来自CDN源的jQuery、jQueryUI和bootstrap
    CSS。'
- en: The first parameter of the `add()` method is the name we're giving the asset.
    The second parameter is the URL of the asset; it could either be a relative path
    or a full URL. The third, optional parameter is the dependency of the asset. In
    our example, jQueryUI requires that jQuery already be loaded, so we pass in the
    name of our jQuery asset in the third parameter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`add()`方法的第一个参数是我们给资产的名称。第二个参数是资产的URL；它可以是相对路径或完整的URL。第三个可选参数是资产的依赖关系。在我们的例子中，jQueryUI要求jQuery已经被加载，所以我们在第三个参数中传入了我们的jQuery资产的名称。'
- en: We then update our routes to add the filter. If we add or remove any assets
    in our filter, it will automatically be reflected in each of our routes.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们更新我们的路由以添加过滤器。如果我们在我们的过滤器中添加或删除任何资产，它将自动反映在我们的每个路由中。
- en: Since we're using nested views, we only need to add the assets to our header
    and footer views. Our CSS files are called by the `styles()` method and the JavaScript
    is called by the `scripts()` method. Laravel checks the file extensions of the
    assets and automatically puts them in the right place. If we look at the source
    code, we'll notice that Laravel has also made sure to add the jQuery script before
    jQueryUI, since we set it as a dependency.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了嵌套视图，我们只需要将资产添加到我们的页眉和页脚视图中。我们的CSS文件是通过`styles()`方法调用的，JavaScript是通过`scripts()`方法调用的。Laravel检查资产的文件扩展名，并自动将它们放在正确的位置。如果我们查看源代码，我们会注意到Laravel还确保在jQueryUI之前添加了jQuery脚本，因为我们将其设置为依赖项。
- en: See also
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using a filter on the route* recipe in [Chapter 5](ch05.html "Chapter 5. Using
    Controllers and Routes for URLs and APIs"), *Using Controllers and Routes for
    URLs and APIs*
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html "第5章。使用控制器和路由处理URL和API")中的*在路由上使用过滤器*食谱，*使用控制器和路由处理URL和API*'
- en: Creating a view using Blade
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Blade创建视图
- en: PHP has many templating libraries available and Laravel's Blade is one of the
    best. This recipe will show an easily extendable way to get up-and-running with
    Blade templates, and quickly.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: PHP有许多可用的模板库，Laravel的Blade是其中之一。这个食谱将展示一个易于扩展的方法来使用Blade模板，并快速上手。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个食谱，请按照以下步骤进行：
- en: 'In the `routes.php` file, create new routes for our pages as follows:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，创建新的路由，如下所示：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the `views` directory, create a new folder named `layout`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`layout`的新文件夹。
- en: 'In the `views/layout` directory, create a file named `index.blade.php` and
    add the following code to it:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/layout`目录中，创建一个名为`index.blade.php`的文件，并将以下代码添加到其中：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the `views` directory, create a folder named `blade`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`blade`的文件夹。
- en: 'In the `views/blade` directory, create a file named `home.blade.php` and add
    the following code to it:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/blade`目录中，创建一个名为`home.blade.php`的文件，并将以下代码添加到其中：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `views/blade` directory, create a file named `second.blade.php`, and
    add the following code to it:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/blade`目录中，创建一个名为`second.blade.php`的文件，并将以下代码添加到其中：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Test the views by going to `http://{your-server}/blade-home` (where `your-server`
    is our URL) and then clicking on the link, and viewing the source of the page
    to see the Blade layout included.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://{your-server}/blade-home`（其中`your-server`是我们的URL），然后单击链接，查看页面源代码，以查看包含的Blade布局。
- en: How it works...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To start, we create two simple routes that will return our Blade views. By using
    the dot notation, we can see that we'll be putting the files in the `blade` subdirectory
    of our `views` folder.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建两个简单的路由，它们将返回我们的Blade视图。通过使用点表示法，我们可以看到我们将把文件放在我们的`views`文件夹的`blade`子目录中。
- en: 'Our next step is to create a Blade layout view. This will be the skeleton of
    our pages and will be put in the layout subdirectory of our `views` folder, and
    it must have `blade.php` as the file extension. This view is simple HTML, with
    two exceptions: the `@section()` and `@yield()` areas. This content is what will
    be replaced or added to in our views.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是创建一个Blade布局视图。这将是我们页面的骨架，并将放在我们的`views`文件夹的布局子目录中，文件扩展名必须是`blade.php`。这个视图是简单的HTML，有两个例外：`@section()`和`@yield()`区域。这些内容是我们的视图中将被替换或添加的内容。
- en: In our routes' views, we begin the file by declaring which Blade layout to use,
    which for our case is `@extends('layout.index')`. Then we can add and alter the
    content sections we declared in our layout. For the `page_title` section, we want
    to display the text in the layout, but we want to add in some extra text to the
    end. To accomplish that, we call `@parent` as the first thing in that content
    area, and then put in any of our own content.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的路由视图中，我们首先声明要使用哪个Blade布局文件，对于我们的情况是`@extends('layout.index')`。然后我们可以添加和修改我们在布局中声明的内容部分。对于`page_title`部分，我们想要显示布局中的文本，但我们想要在末尾添加一些额外的文本。为了实现这一点，我们在内容区域的第一件事就是调用`@parent`，然后放入我们自己的内容。
- en: In `@section('content')`, there was no default text in the layout, so everything
    will be added. Using Blade, we can also use the `{{ }}` braces to print out any
    PHP we need. In our case, we're using the `HTML::link()` of Laravel to display
    a link. Now, when we go to the page, all the content area is put in the correct
    place in the layout.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在`@section('content')`中，布局中没有默认文本，所以一切都将被添加。使用Blade，我们还可以使用`{{ }}`大括号来打印出我们需要的任何PHP。在我们的情况下，我们使用Laravel的`HTML::link()`来显示一个链接。现在，当我们转到页面时，所有的内容区域都被放在了布局的正确位置。
- en: Using TWIG templates
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TWIG模板
- en: Laravel's Blade templates may be nice but there are times when we need another
    PHP template library. A popular one is Twig. This recipe will show how to incorporate
    Twig templates into our Laravel application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的Blade模板可能很好，但有时我们需要另一个PHP模板库。一个流行的选择是Twig。这个食谱将展示如何将Twig模板整合到我们的Laravel应用程序中。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll just need a standard Laravel installation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们只需要一个标准的Laravel安装。
- en: How to do it…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow these steps to complete this recipe:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成这个食谱：
- en: 'Open the `composer.json` file and add the following line to the `require` section:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`composer.json`文件，并在`require`部分添加以下行：
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the command line, update composer to install the package:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，更新composer以安装包：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the `app/config/app.php` file and, in the `providers` array, add Twig
    ServiceProvider at the end as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/config/app.php`文件，并在`providers`数组中添加Twig ServiceProvider，如下所示：
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the command line, run the following command to create our config file:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行中，运行以下命令来创建我们的配置文件：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In `routes.php`, create a route as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，创建一个路由如下：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `views` directory, create a file named `twiglayout.twig` and add the
    following code to it:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`twiglayout.twig`的文件，并将以下代码添加到其中：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `views` directory, create a file named `twig.twig`, and add the following
    code to it:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`twig.twig`的文件，并将以下代码添加到其中：
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Test the views by going to `http://your-server/twigview` (where `your-server`
    is our URL) and view the source of the page to see the twig layout included.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://your-server/twigview`（其中`your-server`是我们的URL）来测试视图，并查看页面源代码以查看包含的twig布局。
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To start, we're going to install the `TwigBranch` package into our application.
    This package also installs the `Twig` library. After the package is installed,
    we create its configuration file using `artisan`, and add its service provider.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在我们的应用程序中安装`TwigBranch`包。该包还安装了`Twig`库。安装包后，我们使用`artisan`创建其配置文件，并添加其服务提供程序。
- en: In our route, we'll use the same syntax as Laravel's built-in view library,
    and call view. We're also creating a simple link, saving it to a variable, and
    passing that variable into the view.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的路由中，我们将使用与Laravel内置视图库相同的语法，并调用视图。我们还创建了一个简单的链接，将其保存到一个变量中，并将该变量传递到视图中。
- en: Next, we create our layout. All Twig view files must have the `.twig` extension,
    so our layout is named `twiglayout.twig`. Inside the layout is a standard HTML
    skeleton, but we've added two Twig content blocks. The `page_title` block has
    some default content, while the `content` block is empty.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建我们的布局。所有Twig视图文件都必须具有`.twig`扩展名，因此我们的布局命名为`twiglayout.twig`。布局中包含一个标准的HTML框架，但我们添加了两个Twig内容块。`page_title`块具有一些默认内容，而`content`块为空。
- en: For our route's view, we begin by extending the layout view. For our `page_title`
    block, we start by printing out the default by using `{{ parent()}}` and then
    adding in our own content. Then our content block is added and will display the
    link we passed in as a variable. Using Twig, we don't need to use `$` for our
    variables, and if we pass in HTML, Twig will automatically escape it. So in our
    view, since we want to display the link, we need to make sure to add in the raw
    parameter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们路由的视图，我们首先通过扩展布局视图来开始。对于我们的`page_title`块，我们首先通过使用`{{ parent()}}`打印出默认内容，然后添加我们自己的内容。然后添加我们的内容块，并显示我们作为变量传递的链接。使用Twig，我们不需要为我们的变量使用`$`，如果我们传入HTML，Twig会自动转义它。因此在我们的视图中，由于我们想要显示链接，我们需要确保添加原始参数。
- en: Now, if we go to our page in the browser, we'll see all our content in its correct
    place.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们在浏览器中打开我们的页面，我们将看到所有内容都在正确的位置上。
- en: Utilizing advanced Blade usage
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用高级的Blade用法
- en: Using Laravel's Blade templating system, we have access to some powerful features
    that make our development much quicker. For this recipe, we'll pass some data
    to our blade views and loop through it, along with some conditionals.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Laravel的Blade模板系统，我们可以访问一些强大的功能，使我们的开发速度更快。对于这个示例，我们将向我们的blade视图传递一些数据，并循环遍历它，以及一些条件语句。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll need the code created in the *Creating a view using Blade*
    recipe .
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将需要在*使用Blade创建视图*示例中创建的代码。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to complete this recipe:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤完成这个示例：
- en: 'Open the `routes.php` file and update the `blade-home` and `blade-second` routes
    as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`routes.php`文件，并按以下方式更新`blade-home`和`blade-second`路由：
- en: '[PRE31]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the `views/blade` directory, update the `home.blade.php` file with the following
    code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/blade`目录中，使用以下代码更新`home.blade.php`文件：
- en: '[PRE32]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the `views/blade` directory, update the `second.blade.php` file with the
    following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/blade`目录中，使用以下代码更新`second.blade.php`文件：
- en: '[PRE33]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the `views/blade` directory, create a new file named `info.blade.php` and
    add the following code to it:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/blade`目录中，创建一个名为`info.blade.php`的新文件，并将以下代码添加到其中：
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Test the views by going to `http://{your-server}/blade-home` (where `your-server`
    is our URL) and click on the links to see the views work.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到`http://{your-server}/blade-home`（其中`your-server`是我们的URL）来测试视图，并单击链接以查看视图的工作。
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: For this recipe, we'll be passing some data to our Blade views, looping through
    it, and adding in some conditionals. Typically, we would use this with results
    from a database but, for our purposes, we'll create a simple data array in our
    routes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将向我们的Blade视图传递一些数据，循环遍历它，并添加一些条件语句。通常，我们会将其与数据库中的结果一起使用，但是为了我们的目的，我们将在我们的路由中创建一个简单的数据数组。
- en: Our first route contains an array of movies, with their year and a slug that
    we can use for the URL. Our second route will create an array with the slug as
    a key and accept the slug in the URL. We then pass in the details of a single
    movie into the view, by calling the movie that has the slug as a key.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个路由包含一个电影数组，其中包含它们的年份和我们可以用于URL的slug。我们的第二个路由将创建一个包含slug作为键并接受URL中的slug的数组。然后，通过调用具有slug作为键的电影，我们将电影的详细信息传递到视图中。
- en: In our first view, we create a `@foreach` loop, to run through also the data
    in the array. We've also included a simple `@if` statement that checks for a specific
    movie and then prints out some extra information. As we loop through, we display
    links to the second route, with the slug added on.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个视图中，我们创建了一个`@foreach`循环，以遍历数组中的所有数据。我们还包含了一个简单的`@if`语句，用于检查特定的电影，然后打印出一些额外的信息。当我们循环遍历时，我们显示链接到第二个路由，并添加slug。
- en: The second view displays the name of the movie, but all includes another Blade
    view by using `@include()` in the content block. This way, all the data is also
    available in the included view; thus, for our `info` view, we can just use the
    same variables that we set in our route.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个视图显示电影的名称，但是还通过在内容块中使用`@include()`包含另一个Blade视图。这样，所有数据也可以在包含的视图中使用；因此，对于我们的`info`视图，我们可以直接使用我们在路由中设置的相同变量。
- en: Creating localization of content
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建内容的本地化
- en: If our app is going to be used by people in different countries, or who speak
    different languages, we'll need to localize the content. Laravel provides an easy
    way to do this.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序将被不同国家或说不同语言的人使用，我们需要对内容进行本地化。Laravel提供了一种简单的方法来实现这一点。
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we just need a standard installation of Laravel.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们只需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'For this recipe, follow these steps:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，请按照以下步骤进行：
- en: 'In the `app/lang` directory, add three new directories (if they aren''t already
    there) : `en`, `es`, and `de`.'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/lang`目录中，添加三个新目录（如果尚未存在）：`en`，`es`和`de`。
- en: 'In the `en` directory, create a file named `localized.php` and add the following
    code to it:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`en`目录中，创建一个名为`localized.php`的文件，并添加以下代码：
- en: '[PRE35]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the `es` directory, create a file named `localized.php` and add the following
    code to it:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`es`目录中，创建一个名为`localized.php`的文件，并添加以下代码：
- en: '[PRE36]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In the `de` directory, create a file named `localized.php` and add the following
    code to it:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`de`目录中，创建一个名为`localized.php`的文件，并添加以下代码：
- en: '[PRE37]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In our `routes.php` file, create four routes as follows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，创建四个路由如下：
- en: '[PRE38]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the `views` directory, create a folder named `language`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`language`的文件夹。
- en: 'In `views/language`, create the file `choose.php` and add the following code
    to it:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/language`中，创建名为`choose.php`的文件，并添加以下代码：
- en: '[PRE39]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the `views/language` directory, create a file named `localized.php` and
    add the following code to it:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/language`目录中，创建一个名为`localized.php`的文件，并添加以下代码：
- en: '[PRE40]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the `views/language` directory, create a file named `localized-german.php`
    and add the following code to it:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views/language`目录中，创建一个名为`localized-german.php`的文件，并添加以下代码：
- en: '[PRE41]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the browser, go to `http://{your-server}/choose` (where `your-server` is
    our URL), submit the form, and test the localization.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到`http://{your-server}/choose`（其中`your-server`是我们的URL），提交表单，并测试本地化。
- en: How it works...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For this recipe, we begin by setting up our language directories in the `app/lang`
    directory. We'll be using `en` for our English files, `es` for our Spanish files,
    and `de` for our German files. Inside each directory, we create a file using the
    exact same name, and add in an array, using the exact same keys.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们首先在`app/lang`目录中设置我们的语言目录。我们将使用`en`作为英语文件，`es`作为西班牙语文件，`de`作为德语文件。在每个目录中，我们创建一个使用完全相同名称的文件，并添加一个数组，使用完全相同的键。
- en: Our first route is going to be a language selector page. On this page, we can
    choose either English or Spanish. When we submit, it will `POST` to the route,
    create a new session, add the choice, and redirect to the page to display the
    text in the chosen language.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个路由将是一个语言选择器页面。在此页面上，我们可以选择英语或西班牙语。当我们提交时，它将`POST`到路由，创建一个新会话，添加选择，并重定向到页面以显示所选语言的文本。
- en: Our localized route takes the session and passes the choice to `App::setLocale()`.
    We also have a default value of English if there was no session set.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的本地化路由获取会话并将选择传递给`App::setLocale()`。如果没有设置会话，我们还有一个默认值为英语。
- en: In our localized view, we print out the text using `Lang::get()`. In the first
    line of our language file, we also included the `:name` placeholder, so we can
    pass in an array with the placeholder name as the key when we call the language
    file.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的本地化视图中，我们使用`Lang::get()`打印出文本。在我们的语言文件的第一行中，我们还包含了`:name`占位符，因此当我们调用语言文件时，我们可以传递一个包含占位符名称的数组作为键。
- en: Our last route shows how we can statically set the language default in our route.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一个路由显示了我们如何在路由中静态设置语言默认值。
- en: Creating menus in Laravel
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Laravel中创建菜单
- en: Menus are a common facet of most websites. In this recipe, we'll create menus
    using Laravel's nested views and change the default "state" of the menu item,
    depending on which page we're on.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单是大多数网站的常见组成部分。在这个教程中，我们将使用Laravel的嵌套视图创建菜单，并根据我们所在的页面更改菜单项的默认“状态”。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this menu, we need a standard installation of Laravel.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜单，我们需要一个标准的Laravel安装。
- en: How to do it...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We need to follow these steps to complete the recipe:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要按照以下步骤完成这个教程：
- en: 'In the `routes.php` file, create three routes as follows:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，创建三个路由如下：
- en: '[PRE42]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the views directory, create a file named menu-layout.php and add the following
    code to it:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视图目录中，创建一个名为`menu-layout.php`的文件，并添加以下代码：
- en: '[PRE43]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In the `views` directory, create a file named `menu-menu.php` and add the following
    code to it:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`menu-menu.php`的文件，并添加以下代码：
- en: '[PRE44]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In the `views` directory, create three view files with the names `menu-one.php`,
    `menu-two.php`, and `menu-three.php`.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建三个视图文件，分别命名为`menu-one.php`，`menu-two.php`和`menu-three.php`。
- en: 'For `menu-one.php`, use the following code:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`menu-one.php`，使用以下代码：
- en: '[PRE45]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'For `menu-two.php`, use the following code:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`menu-two.php`，使用以下代码：
- en: '[PRE46]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'For `menu-three.php`, use the following code:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`menu-three.php`，使用以下代码：
- en: '[PRE47]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: In the browser, go to `http://{your-server}/menu-one` (where `your-server` is
    our URL) and click through the menu links.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到`http://{your-server}/menu-one`（其中`your-server`是我们的URL），并通过菜单链接进行点击。
- en: How it works...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We begin by making three routes to hold our three pages. Each route will use
    a single layout view, and nest in a menu view and a content view that are specific
    to the route.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建三个路由来保存我们的三个页面。每个路由将使用单个布局视图，并嵌入一个特定于路由的菜单视图和内容视图。
- en: Our layout view is a basic HTML skeleton with some on-page CSS. Since we want
    to highlight the menu item of the current page, one of the class selectors is
    named `active` and will be added to our menu list item.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的布局视图是一个基本的HTML骨架，带有一些页面CSS。由于我们想要突出显示当前页面的菜单项，一个类选择器被命名为`active`，并将添加到我们的菜单列表项中。
- en: Next, we create our menu view. We're using an unordered list, with links to
    each page. To add in the `active` class to our current page item, we use `Request::segment(1)`
    of Laravel to get the route we're on. If it's the same as the list item, we add
    the `active` class and otherwise leave it blank. Then we use the `HTML::link()`
    of Laravel to add in the links to our pages.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建我们的菜单视图。我们使用无序列表，其中包含到每个页面的链接。为了在当前页面项目中添加“active”类，我们使用Laravel的`Request::segment(1)`来获取我们所在的路由。如果它与列表项相同，我们添加“active”类，否则留空。然后我们使用Laravel的`HTML::link()`来添加链接到我们的页面。
- en: The other three views are just very simple content, with a header and a few
    words. Now, when we go to the page in our browser, we'll see the menu item of
    the page we're on is highlighted, while the others are not. If we click on a link,
    that item will then be highlighted and the others will not.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 其他三个视图只是非常简单的内容，有一个标题和几个单词。现在，当我们在浏览器中查看页面时，我们会看到我们所在页面的菜单项被突出显示，而其他页面没有。如果我们单击链接，那个项目将被突出显示，其他项目将不会被突出显示。
- en: Integrating with Bootstrap
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Bootstrap集成
- en: The Bootstrap CSS framework has become very popular recently. This recipe will
    show how we can use the framework with Laravel.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap CSS框架最近变得非常流行。这个示例将展示我们如何在Laravel中使用这个框架。
- en: Getting ready
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation. We'll also need to
    have the `assets` package installed, as demonstrated in the *Adding assets* recipe.
    Optionally, we could download the Bootstrap files and save them locally.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个标准的Laravel安装。我们还需要安装`assets`包，就像*添加资产*示例中演示的那样。可选地，我们可以下载Bootstrap文件并将其保存在本地。
- en: How to do it...
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'In the `routes.php` file, create a new route as follows:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，创建一个新的路由，如下所示：
- en: '[PRE48]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the `views` directory, create a file named `boot.php` add the following
    code to it:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，创建一个名为`boot.php`的文件，并向其中添加以下代码：
- en: '[PRE49]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In the browser, go to `http://your-server/boot` (where `your-server` is our
    URL) and click through the tabs.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到`http://your-server/boot`（其中`your-server`是我们的URL），并单击选项卡。
- en: How it works...
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For this recipe, we'll be creating a single route and switch content using Bootstrap
    tabs. To get our route to respond to any request, we use `Route::any()` and pass
    in our closure. To add in the CSS and JavaScript, we could use a filter as with
    in the one in the *Adding assets* recipe; however, for a single route, we'll just
    include it in the closure. So we don't have to download them, we'll just use the
    CDN versions of Bootstrap and jQuery.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将创建一个单一的路由，并使用Bootstrap选项卡切换内容。为了使我们的路由响应任何请求，我们使用`Route::any()`并传入我们的闭包。要添加CSS和JavaScript，我们可以使用一个过滤器，就像*添加资产*示例中的过滤器一样；然而，对于一个单一的路由，我们将把它包含在闭包中。因此，我们不必下载它们，我们将只使用Bootstrap和jQuery的CDN版本。
- en: Next in our route, we need some data. This would be a good place to tie in a
    database but, for our purposes, we'll use a simple array, with the names of some
    super heroes. We then pass that array into our view.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在我们的路由中，我们需要一些数据。这将是绑定数据库的好地方，但是出于我们的目的，我们将使用一个简单的数组，其中包含一些超级英雄的名字。然后将该数组传递到我们的视图中。
- en: We start the view with an HTML skeleton and include our styles in the head and
    the scripts just before the closing `</body>` tag. At the top of the page, we
    use Bootstrap's navigation styles and data attributes to create our tab links.
    Then in our body, we use three different tab panes, with IDs that correspond to
    the `<a href>` tag in our menu.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个HTML骨架开始查看，并在头部包含我们的样式，在关闭`</body>`标签之前包含脚本。在页面顶部，我们使用Bootstrap的导航样式和数据属性来创建我们的选项卡链接。然后在我们的正文中，我们使用三个不同的选项卡窗格，其ID对应于我们菜单中的`<a
    href>`标签。
- en: When we view the page, we'll see the first pane showing and everything else
    hidden. By clicking on the other tabs, we switch which tab pane is shown.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看页面时，我们会看到第一个窗格显示，其他所有内容都被隐藏。通过单击其他选项卡，我们可以切换显示哪个选项卡窗格。
- en: See also
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Adding assets* recipe
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*添加资产*示例'
- en: Using named views and view composers
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命名视图和视图组件
- en: This recipe will show how to use Laravel's named views and view composers to
    simplify some of our routes' code.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将展示如何使用Laravel的命名视图和视图组件来简化一些我们路由代码。
- en: Getting ready
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll be using the code created in the *Creating menus in Laravel*
    recipe. We'll also need the `assets` package installed in the *Adding assets*
    recipe.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用*在Laravel中创建菜单*示例中创建的代码。我们还需要在*添加资产*示例中安装`assets`包。
- en: How to do it...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'In the `routes.php` file, add a file named `view`, and add the following code
    to it:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`文件中，添加一个名为`view`的文件，并向其中添加以下代码：
- en: '[PRE50]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In `routes.php`, add a view composer as follows:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，添加一个视图组件，如下所示：
- en: '[PRE51]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In `routes.php`, update the menu routes as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中，更新菜单路由如下：
- en: '[PRE52]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In the `views` directory, update the `menu-layout.php` file with the following
    code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views`目录中，使用以下代码更新`menu-layout.php`文件：
- en: '[PRE53]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the browser, go to `http://{your-server}/menu-one` (where `your-server` is
    our URL) and click through the menu links.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，转到`http://{your-server}/menu-one`（其中`your-server`是我们的URL），并单击菜单链接。
- en: How it works...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We begin the recipe by creating a name for one of our views. If we have views
    with long or complicated filenames or directory structures, this will allow us
    to create a simple alias in our routes. It will also let us change our view filename
    in the future; additionally, if we're using it in more than one place, we only
    need to change one line.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过为我们的视图创建一个名称来开始这个示例。如果我们的视图文件名或目录结构很长或复杂，这将允许我们在我们的路由中创建一个简单的别名。这也将允许我们在将来更改我们的视图文件名；此外，如果我们在多个地方使用它，我们只需要更改一行。
- en: 'Next, we create a view composer. Any code in the composer will automatically
    be called when you create the view. In our example, we''re including three things
    every time our view is created: an asset containing a Bootstrap CSS file, a nested
    view, and a variable to pass to the view.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个视图组件。当您创建视图时，组件中的任何代码都将自动调用。在我们的示例中，每次创建视图时，我们都包含三个内容：包含Bootstrap
    CSS文件的资产，一个嵌套视图和一个传递给视图的变量。
- en: For our three routes, instead of `View::make('menu-layout')`, we'll use the
    name we created, call `View::of('layout')`, and nest it in our content. Since
    our layout view has a composer, it will automatically nest in our menu, add the
    CSS, and pass in a page title.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的三个路由，我们将使用我们创建的名称，调用`View::of('layout')`，并将其嵌套在我们的内容中，而不是`View::make('menu-layout')`。由于我们的布局视图有一个composer，它将自动嵌套我们的菜单，添加CSS，并传递页面标题。
- en: See also
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating menus in Laravel* recipe
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Laravel中创建菜单*示例'
