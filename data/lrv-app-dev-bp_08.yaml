- en: Chapter 8. Building a Q&A Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。构建问答Web应用程序
- en: 'In this chapter we are going to create a Q&A web application. First, we will
    learn to remove the public segment from Laravel, to be able to use some shared
    hosting solutions. Then, we will use a third-party extension for authentication
    and process access rights. Finally, we will make a question system which will
    allow commenting and answering questions, a tag system, upvoting and downvoting,
    and choosing the best answer. We will use pivot tables for question tags. We will
    also benefit from the jQuery Ajax requests at various places. The following are
    the topics that will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个问答Web应用程序。首先，我们将学习如何从Laravel中移除public段，以便能够使用一些共享主机解决方案。然后，我们将使用第三方扩展进行认证和访问权限处理。最后，我们将创建一个问题系统，允许评论和回答问题，一个标签系统，点赞和踩，以及选择最佳答案。我们将使用中间表来处理问题标签。我们还将在各个地方受益于jQuery
    Ajax请求。以下是本章将涉及的主题：
- en: Removing the public segment from Laravel 4
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Laravel 4中移除public段
- en: Installing Sentry 2 and an authentication library, and setting access rights
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Sentry 2和一个认证库，并设置访问权限
- en: Creating custom filters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义过滤器
- en: Creating our registration and login forms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的注册和登录表单
- en: Creating our questions table and model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的问题表和模型
- en: Creating our tags table with a pivot table
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个中间表创建我们的标签表
- en: Creating and processing our question form
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和处理我们的问题表单
- en: Creating our questions list page
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的问题列表页面
- en: Creating our question page
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的问题页面
- en: Creating our answers table and resources
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的答案表和资源
- en: Searching questions by tags
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按标签搜索问题
- en: Removing the public segment from Laravel 4
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Laravel 4中移除public段
- en: 'In some real-world cases, you may have to stick with badly configured, shared
    web hosting solutions, which don''t have a `www`, `public_html`, or a similar
    folder. In that case, you would want to remove the public segment from your Laravel
    4 installation. To remove this public segment, there are some easy steps to follow:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些现实情况下，你可能不得不坚持使用配置不良的共享Web主机解决方案，它们没有`www`、`public_html`或类似的文件夹。在这种情况下，你会想要从你的Laravel
    4安装中移除public段。要移除这个public段，有一些简单的步骤要遵循：
- en: First, make sure you have a running Laravel 4 instance.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先确保你有一个正在运行的Laravel 4实例。
- en: Then, move everything inside the `public` folder into the parent folder (where
    `app`, `bootstrap`, `vendor`, and other folders are present), and then delete
    the blank public folder.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`public`文件夹中的所有内容移动到父文件夹中（其中包括`app`、`bootstrap`、`vendor`和其他文件夹），然后删除空的public文件夹。
- en: 'Next, open the `index.php` file (which we had just moved from the public folder),
    and find the following line:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`index.php`文件（我们刚刚从public文件夹中移动过来），找到以下行：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Replace the previous line with the following line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下行替换上一行：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, find this line in the `index.php` file:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`index.php`文件中找到这行：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Replace the previous line with the following line:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下行替换上一行：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, open the `paths.php` file under the `bootstrap` folder, and find this
    line:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`bootstrap`文件夹下的`paths.php`文件，并找到这行：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Replace the previous line with the following line:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下行替换上一行：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you are using a virtual host, don't forget to change the directory settings
    and restart your web server.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用虚拟主机，请不要忘记更改目录设置并重新启动你的Web服务器。
- en: In the previous steps, we first moved everything from the `public` folder to
    the `parent` folder since we won't be using the `parent` segment anymore. Then
    we altered the `index.php` file to identify the proper paths of `autoload.php`
    and `start.php`, so that the framework can run. If everything went okay, you won't
    see any issues whatsoever when you refresh your page, and this means you have
    successfully removed the public segment from your Laravel 4 installation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我们首先将所有内容从`public`文件夹移动到`parent`文件夹，因为我们将不再使用`parent`段。然后我们修改了`index.php`文件，以识别`autoload.php`和`start.php`的正确路径，以便框架可以运行。如果一切顺利，当你刷新页面时不会看到任何问题，这意味着你已成功从Laravel
    4安装中移除了public段。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Not to forget that this method will make all your code available in the public
    web root, and this may bring security issues on your project. In that case, you
    should prevent using this method, or you should find a better web hosting solution.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，这种方法会使你的所有代码都可以在公共Web根目录中使用，这可能会给你的项目带来安全问题。在这种情况下，你应该避免使用这种方法，或者你应该找到一个更好的Web主机解决方案。
- en: Installing Sentry 2 and an authentication library and setting access rights
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Sentry 2和一个认证库，并设置访问权限
- en: In this section, we will be installing a third-party library for user authentication
    and access rights called Sentry 2, made available by **Cartalyst** . Cartalyst
    is a developer centric, open source company with a strong focus on documentation,
    community support, and framework. In this section, we will be following the Sentry's
    official Laravel 4 installation steps, with a simple extra step, which is currently
    available at [http://docs.cartalyst.com/sentry-2/installation/laravel-4](http://docs.cartalyst.com/sentry-2/installation/laravel-4).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将安装一个第三方库用于用户认证和访问权限，名为Sentry 2，由**Cartalyst**提供。Cartalyst是一个以开发者为中心的开源公司，专注于文档、社区支持和框架。在这一部分，我们将按照Sentry官方的Laravel
    4安装步骤进行操作，还有一个简单的额外步骤，目前可以在[http://docs.cartalyst.com/sentry-2/installation/laravel-4](http://docs.cartalyst.com/sentry-2/installation/laravel-4)找到。
- en: 'First, open your `composer.json` file, and add the following line to the `require`
    attribute:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开你的`composer.json`文件，并在`require`属性中添加以下行：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, run the composer update command to fetch the package:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，运行composer update命令来获取包：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, open your `app.php` file under `app/config`, and add the following line
    to the `providers` array:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`app/config`下的`app.php`文件，并在`providers`数组中添加以下行：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, add the following line to your `aliases` array in `app.php`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`app.php`中的`aliases`数组中添加以下行：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, run the following command to install the required tables (or users) to
    the database:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行以下命令来安装所需的表（或用户）到数据库中：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we need to publish the configuration file of Sentry 2 to our `app` folder,
    so that we can manage throttling or other settings if we want to. Run the following
    command from your terminal:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将Sentry 2的配置文件发布到我们的`app`文件夹中，这样我们就可以管理节流或其他设置（如果需要的话）。从终端运行以下命令：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we should alter the default User model to be able to use it with Sentry
    2\. Open your `User.php` file under `app/models`, and replace all its contents
    with the following code:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们应该修改默认的用户模型，以便能够在Sentry 2中使用它。打开`app/models`目录下的`User.php`文件，并用以下代码替换所有内容：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Lastly, we should create our admin user. Add the following code to your `routes.php`
    file under the `app` folder and run it once. Comment out or delete the code after
    that. We are practically assigning the admin ID=1 for our system, with an access
    right called `admin`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们应该创建我们的管理员用户。将以下代码添加到`app`文件夹下的`routes.php`文件中，并运行一次。之后注释或删除该代码。我们实际上为我们的系统分配了ID=1的管理员，具有名为`admin`的访问权限。
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Doing this, you've successfully created a user with `admin@admin.com` as an
    e-mail address and `password` as the password. The password will be automatically
    hashed upon creation by Sentry 2, so we won't have to hash and salt the password
    before creation. We have set the admin's name as `John` and the surname as `Doe`.
    Also, we've set a permission for the user that we've just generated called `admin`
    to check the access right before the request processes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，您已成功创建了一个以`admin@admin.com`作为电子邮件地址和`password`作为密码的用户。密码将在Sentry 2创建时自动进行哈希处理，因此我们无需在创建之前对密码进行哈希和盐处理。我们将管理员的名字设置为`John`，姓氏设置为`Doe`。此外，我们为刚刚生成的用户设置了一个名为`admin`的权限，以在请求处理之前检查访问权限。
- en: You're now all set. If everything went okay and you check your database, you
    should see the migrations table generated by Laravel 4 (which you had to manually
    set before the first migration in Laravel 3) and the tables generated by Sentry
    2\. In the `users` table, you should see an entry for the user generated by our
    closure method.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经准备就绪。如果一切顺利，并且您检查您的数据库，您应该会看到由Laravel 4生成的迁移表（在Laravel 3中您必须在第一次迁移之前手动设置），以及由Sentry
    2生成的表。在`users`表中，您应该会看到我们的闭包方法生成的用户条目。
- en: Now that our user authentication system is ready, we need to generate our filters,
    and then create registration and login forms.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的用户认证系统已经准备就绪，我们需要生成我们的过滤器，然后创建注册和登录表单。
- en: Creating custom filters
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义过滤器
- en: Custom filters will help us filter requests and help us make some prechecks
    beforehand. Benefiting from the Sentry 2's built-in methods, we can define custom
    filters easily. But first we need to define some routes, which will be used in
    our project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义过滤器将帮助我们过滤请求，并在请求之前进行一些预检查。利用Sentry 2内置的方法，我们可以轻松定义自定义过滤器。但首先，我们需要定义一些在项目中将要使用的路由。
- en: 'Add the following code to your `routes.php` file under the `app` folder:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`app`文件夹下的`routes.php`文件中：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In these named resources, the names are defined with the key `as` in the array,
    and the filters are set with the key `before`. As you can see, there are some
    `before` parameters, such as `is_guest` and `user`. These filters will run before
    any request is made by the user, and even call the controller. The key `uses`
    sets the controller that will be executed when the resource is called. We will
    write the code for those controllers later. As a result, for example, a user can't
    even try to post to the login form. If the user tries that, our filter will run
    and do the filtering before the request is made by the user.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些命名资源中，名称是在数组中用键`as`定义的，过滤器是用键`before`设置的。正如您所看到的，有一些`before`参数，比如`is_guest`和`user`。这些过滤器将在用户发出任何请求之前运行，甚至调用控制器。键`uses`设置了在调用资源时将执行的控制器。我们稍后将为这些控制器编写代码。因此，例如，用户甚至无法尝试提交登录表单。如果用户尝试这样做，我们的过滤器将在用户发出请求之前运行并进行过滤。
- en: 'Now that our routes are ready, we can add the filters. To add the filters,
    open your `filters.php` file under the `app` folder and add the following code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的路由已经准备就绪，我们可以添加过滤器。要添加过滤器，请打开`app`文件夹下的`filters.php`文件，并添加以下代码：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The method `Route::filter()` allows us to create our own filters. The first
    parameter is the filter's name and the second parameter is a closure function,
    which itself takes at least two parameters. If you need to provide a parameter
    to the filter, you can add this as a third parameter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Route::filter()`方法允许我们创建自己的过滤器。第一个参数是过滤器的名称，第二个参数是一个闭包函数，它本身至少需要两个参数。如果需要向过滤器提供参数，可以将其添加为第三个参数。'
- en: The `check()` helper function of Sentry 2 returns a Boolean value whether the
    user is logged in or not. If it returns true, it means the user is logged in,
    else the user browsing the web page is currently not logged in. In our custom
    filter `user` and `is_guest`, we check exactly this. The passing clause of your
    filter can be left blank. But if the user fails to satisfy the filter's conditions,
    appropriate action can be taken. In our example, we are redirecting the user to
    our `index` route.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Sentry 2的`check()`辅助函数返回一个布尔值，用于判断用户是否已登录。如果返回true，表示用户已登录，否则正在浏览网页的用户尚未登录。在我们的自定义过滤器`user`和`is_guest`中，我们正是在检查这一点。您的过滤器的通过条件可以留空。但如果用户未满足过滤器的条件，可以采取适当的行动。在我们的示例中，我们将用户重定向到我们的`index`路由。
- en: However, our third filter `access_check` is a little bit more complicated. As
    you can see, we've added a third parameter called `$right`, which we will pass
    through the calling filter. This filter checks two conditions. First, it checks
    whether the user is logged in by using the `Sentry::check()` method. Then, it
    checks whether the user has access to the `$right` section (which we will see
    when we define filters) by using the `hasAccess()` method. But this method requires
    a current logged in user first. For this, we will validate the current user's
    information by using the `getUser()` method of Sentry 2.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们的第三个过滤器`access_check`有点复杂。正如你所看到的，我们添加了一个名为`$right`的第三个参数，我们将通过调用过滤器传递它。这个过滤器检查两个条件。首先，它使用`Sentry::check()`方法检查用户是否已登录。然后，它使用`hasAccess()`方法检查用户是否有访问`$right`部分的权限（我们将在定义过滤器时看到）。但是这个方法首先需要一个当前登录的用户。为此，我们将使用Sentry
    2的`getUser()`方法验证当前用户的信息。
- en: To pass parameter(s) while calling a filter, you can use `filter_name:parameter1,
    parameter2`. In our example, we will check whether the user is an admin, using
    the filter `access_check:admin`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用过滤器时传递参数，可以使用`filter_name:parameter1, parameter2`。在我们的示例中，我们将使用过滤器`access_check:admin`来检查用户是否是管理员。
- en: To use multiple filters in the `before` parameter, add a `|` character between
    the parameters. In our example, our login post and sign up resources' filters
    are defined as `csrf|guest` (csrf is predefined in our `filters.php` file by Laravel
    itself).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在`before`参数中使用多个过滤器，可以在参数之间添加`|`字符。在我们的示例中，我们的登录提交和注册资源的过滤器被定义为`csrf|guest`（csrf在Laravel的`filters.php`文件中是预定义的）。
- en: Creating our registration and login forms
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的注册和登录表单
- en: Before creating our registration and login forms, we need a template to set
    the sections. I'll be using a custom HTML/CSS template that I've generated for
    this chapter, which is inspired by the **Snow** theme of the open source Q&A script,
    **Question2Answer**.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的注册和登录表单之前，我们需要一个模板来设置这些部分。我将使用我为本章生成的自定义HTML/CSS模板，这个模板受到开源问答脚本**Question2Answer**的**Snow**主题的启发。
- en: 'We perform the following steps to create our registration and login forms:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤来创建我们的注册和登录表单：
- en: First, copy everything in the `assets` folder of the provided example code,
    to your project folder's root (where the `app`, `bootstrap`, and other folders
    are located), because we had removed the public folder segment in the first section
    of this chapter.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将提供的示例代码中`assets`文件夹中的所有内容复制到项目文件夹的根目录（`app`、`bootstrap`和其他文件夹所在的位置），因为我们在本章的第一节中删除了public文件夹部分。
- en: 'Next, add the following code to your `template_masterpage.blade.php` file under
    `app/views`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`app/views`下的`template_masterpage.blade.php`文件中添加以下代码：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s dig the code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看代码：
- en: If we load a view with a `title` attribute, the `<title>` tag will include the
    title; else it will just display our website's name.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们使用`title`属性加载视图，`<title>`标签将包含标题；否则它将只显示我们网站的名称。
- en: The `style()` method of the `HTML` class will help us add CSS files to our template
    easily. Also, the `script()` method of the `HTML` class allows us to add JavaScript
    to our output HTML file.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTML`类的`style()`方法将帮助我们轻松地向我们的模板添加CSS文件。此外，`HTML`类的`script()`方法允许我们向输出的HTML文件添加JavaScript。'
- en: We have included another file to our `template_masterpage.blade.php` file using
    the `@include()` method of the Blade template engine. We will describe its sections
    in the next step.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用Blade模板引擎的`@include()`方法将另一个文件包含到我们的`template_masterpage.blade.php`文件中。我们将在下一步中描述它的部分。
- en: The `route()` method of the `URL` class will return a link to a named route.
    This is pretty handy actually, because if we change the URL structure we won't
    need to dig into all the template files and edit all our links.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`URL`类的`route()`方法将返回一个命名路由的链接。这实际上非常方便，因为如果我们更改URL结构，我们不需要深入所有模板文件并编辑所有链接。'
- en: The `image()` method of the `HTML` class allows us to add the `<img>` tag to
    our template.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTML`类的`image()`方法允许我们向我们的模板添加`<img>`标签。'
- en: In filters, we redirected to the route pages using the `with()` method with
    the parameter `error`. If we loaded pages (`View::make()`) using `with()`, the
    parameters would be variables. But because we have redirected the user to a page,
    these parameters passed with `with()` will be a session flashdata, which will
    only be available once. To check whether these sessions are set, we use the `has()`
    method of the `Session` class. `Session::has('sessionName')` will return a Boolean
    value to identify whether a session is set or not. If it's set, we can use the
    `get()` method of the `Session` class to use it in our views, controllers, and
    other places as well.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在过滤器中，我们使用`with()`方法和参数`error`重定向到路由页面。如果我们使用`with()`加载页面（`View::make()`），参数将是变量。但是因为我们已经将用户重定向到一个页面，通过`with()`传递的这些参数将是会话flashdata，只能使用一次。为了检查这些会话是否设置，我们使用`Session`类的`has()`方法。`Session::has('sessionName')`将返回一个布尔值，以确定会话是否设置。如果设置了，我们可以使用`Session`类的`get()`方法在视图、控制器和其他地方使用它。
- en: The `@yield()` method of the Blade template engine fetches the data present
    in `@section()`, and parses it to the master template page.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blade模板引擎的`@yield()`方法获取`@section()`中的数据，并将其解析到主模板页面。
- en: 'In the previous section, we included another view by calling the `@include()`
    method as `@include(''template.topmenu'')`. Now save the following code as `topmenu.blade.php`
    under `app/views/template`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一节中，我们通过调用`@include()`方法包含了另一个视图，如`@include('template.topmenu')`。现在将以下代码保存为`topmenu.blade.php`，放在`app/views/template`下：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let''s dig the code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看代码：
- en: In our template we have two error messages of which the first one is totally
    reserved for the login area that will be shown at the top. I've named it as `error_top`.
    With the methods `has()` and `get()` that we've just learned, we check whether
    an error is present, and display it.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的模板中，有两个错误消息，其中第一个完全保留给将在顶部显示的登录区域。我将其命名为`error_top`。使用我们刚学到的`has()`和`get()`方法，我们检查是否存在错误，并显示它。
- en: The top menu will depend on whether a user is logged in or not. So we create
    an `if` clause using the user checking method `check()` of Sentry 2 and check
    if the user is logged in. If the user is not logged in (guest), we show the login
    form that we've made using the `Form` class, else we show the user `infobar` with
    a profile and a **logout** button.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部菜单将取决于用户是否已登录。因此，我们使用Sentry 2的用户检查方法`check()`创建一个`if`子句来检查用户是否已登录。如果用户未登录（访客），我们将显示使用`Form`类制作的登录表单，否则我们将显示用户`infobar`，其中包含个人资料和**注销**按钮。
- en: 'Now, we need a registration form page. We''ve already defined its methods in
    our `routes.php` file under the `app` folder earlier:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个注册表单页面。我们之前已经在`app`文件夹下的`routes.php`文件中定义了它的方法：
- en: '[PRE18]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'According to the route resource we''ve created, we need a controller named
    `AuthController`, having two methods called `getSignup()` and `postSignup()`.
    Now let''s first create the controller. Open your terminal and type the following
    command:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据我们创建的路由资源，我们需要一个名为`AuthController`的控制器，其中包含两个名为`getSignup()`和`postSignup()`的方法。现在让我们首先创建控制器。打开你的终端并输入以下命令：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The previous command will create a new file, `AuthController.php` under `app/controllers`
    with some default methods. Delete the code present inside the `AuthController`
    class and add the following code inside that class, to make the sign up form:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一个命令将在`app/controllers`文件夹下创建一个名为`AuthController.php`的新文件，并带有一些默认方法。删除`AuthController`类内的现有代码，并添加以下代码到该类内，以创建注册表单：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We now need a view file to make the form. Save the following code as `signup.blade.php`
    under `app/views/qa`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要一个视图文件来制作表单。将以下代码保存为`signup.blade.php`，放在`app/views/qa`文件夹下：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you have done everything correctly, when you navigate to `chapter8.dev/signup`,
    you should see the following form:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经正确完成了所有步骤，当你导航到`chapter8.dev/signup`时，你应该会看到以下表单：
- en: '![Creating our registration and login forms](graphics/2111OS_08_01.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的注册和登录表单](graphics/2111OS_08_01.jpg)'
- en: Validating and processing the form
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证和处理表单
- en: 'Now, we need to validate and process the form. We first need to define our
    validation rules. Add the following code to the `User` class in your `user.php`
    file under `app/models`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要验证和处理表单。我们首先需要定义我们的验证规则。将以下代码添加到`app/models`文件夹下的`user.php`文件中的`User`类中：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The rules mentioned in the previous code will make all the fields `required`.
    We set the `first_name` and `last_name` columns as `required`, and we set a minimum
    length of two characters. We set the `email` field to be in a valid e-mail format,
    and the code will check the `users` table (which is created upon installing Sentry
    2) for unique e-mail addresses. We set the `password` field to be `required`,
    and its length should be a minimum of six characters. We also set the `re_password`
    field to match the `password` field, so that we can make sure that the password
    is typed correctly.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码中提到的规则将使所有字段都为`required`。我们将`first_name`和`last_name`列设置为`required`，并设置最小长度为两个字符。我们将`email`字段设置为有效的电子邮件格式，并且代码将检查`users`表（在安装Sentry
    2时创建）中的唯一电子邮件地址。我们将`password`字段设置为`required`，并且其长度应至少为六个字符。我们还将`re_password`字段设置为与`password`字段匹配，以确保密码输入正确。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Sentry 2 can also throw a unique e-mail checking exception, upon an attempt
    to log in a user.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Sentry 2也可以在尝试登录用户时抛出唯一电子邮件检查异常。
- en: 'Before processing the form, we need a dummy index page to return the user after
    signing up successfully. We will create a temporary index page by performing the
    following steps:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理表单之前，我们需要一个虚拟的索引页面来在成功注册后返回用户。我们将通过以下步骤创建一个临时的索引页面：
- en: 'First, run the following command to create a new controller:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，运行以下命令来创建一个新的控制器：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, remove all methods that auto inserted, and add the following method inside
    the class:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，删除所有自动插入的方法，并在类内添加以下方法：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, save this view file as `index.blade.php` under `app/views/qa`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将此视图文件保存为`index.blade.php`，放在`app/views/qa`文件夹下：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we need a controller method (which we defined in `routes.php`) to process
    the `signup` form''s `post` request. To do this, add the following code to your
    `AuthController.php` file under `app/controllers`:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个控制器方法（我们在`routes.php`中定义的）来处理`signup`表单的`post`请求。为此，将以下代码添加到`app/controllers`文件夹下的`AuthController.php`文件中：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, let''s dig the code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看代码：
- en: First, we check the form items using Laravel's built-in form validation class
    using the rules we've defined in the model.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用Laravel内置的表单验证类来检查表单项，使用我们在模型中定义的规则。
- en: We check whether the form validation passes, using the `passes()` method. We
    could also check the exact opposite situation using the `fails()` method.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`passes()`方法来检查表单验证是否通过。我们也可以使用`fails()`方法来检查相反的情况。
- en: If the validation fails, we return the user to the **Sign Up** form with given
    credentials using `withInput()` . But by using `Input::except()`, we filter some
    columns such as `password` and `re_password`, so that the value in those fields
    are not returned. Also, by passing a parameter using `with`, the form validation's
    error message is returned. `$validation->errors()->first()` returns the first
    error message string after the form validation step.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证失败，我们将使用`withInput()`将用户返回到**注册**表单，并使用`Input::except()`过滤一些列，如`password`和`re_password`，以便这些字段的值不会返回。此外，通过使用`with`传递参数，将返回表单验证的错误消息。`$validation->errors()->first()`在表单验证步骤后返回第一个错误消息字符串。
- en: '![Validating and processing the form](graphics/2111OS_08_02.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![验证和处理表单](graphics/2111OS_08_02.jpg)'
- en: If the validation passes, we create a new user using the provided credentials.
    We have set the column `activated` to `1`, so that the sign up process would not
    require an e-mail validation in our example.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证通过，我们将使用提供的凭据创建一个新用户。我们将`activated`列设置为`1`，这样在我们的示例中注册过程不需要电子邮件验证。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Sentry 2 also uses a try/catch clause to catch errors. Don't forget to check
    the documentation of Sentry 2, to learn how to catch unusual errors.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Sentry 2还使用try/catch子句来捕获错误。不要忘记查看Sentry 2的文档，了解如何捕获异常错误。
- en: Since we are not using an e-mail validation system, we could simply authenticate
    and sign in the user using the `authenticate()` method of Sentry 2, right after
    signing up. The first parameter takes an array of `email` and `password` (with
    `key => value` matching) and the optional second parameter takes a Boolean value
    as an input, to check whether the user is to be remembered or not (the `remember
    me` button).
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们没有使用电子邮件验证系统，我们可以简单地使用Sentry 2的`authenticate()`方法对用户进行身份验证和登录，就在注册后。第一个参数接受一个`email`和`password`的数组（与`key
    => value`匹配），可选的第二个参数接受一个布尔值作为输入，以检查用户是否要被记住（`记住我`按钮）。
- en: After the authentication, we simply redirect the user to our `index` route with
    a success message, as shown in the following screenshot:![Validating and processing
    the form](graphics/2111OS_08_03.jpg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 身份验证后，我们只需将用户重定向到我们的`index`路由，并显示成功消息，如下图所示：
- en: Processing the login and logout requests
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理登录和注销请求
- en: 'Now that our registration system is ready, we need to process login and logout
    requests. Since our login form is already prepared, we can directly go ahead and
    process it. To process login and logout requests, we perform the following steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的注册系统已经准备好了，我们需要处理登录和注销请求。由于我们的登录表单已经准备好了，我们可以直接进行处理。要处理登录和注销请求，我们执行以下步骤：
- en: 'First, we need the login form validation rules. Add the following code to your
    `User.php` file under `app/models`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要登录表单验证规则。将以下代码添加到`app/models`目录下的`User.php`文件中：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we need a controller method to process the login request. Add the following
    code to your `AuthController.php` file under `app/controllers`:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个控制器方法来处理登录请求。在`app/controllers`目录下的`AuthController.php`文件中添加以下代码：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, let''s dig the code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看代码：
- en: First, we check the form items via Laravel's built-in form validation class,
    using the rules we've defined in the model.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用Laravel内置的表单验证类检查表单项，使用我们在模型中定义的规则。
- en: Then we check whether the form validation has failed using the `fails()` method
    of the form validation class. If the form validation fails, we return the user
    to the `index` route with the first form validation error.![Processing the login
    and logout requests](graphics/2111OS_08_04.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用表单验证类的`fails()`方法检查表单验证是否失败。如果表单验证失败，我们将用户返回到`index`路由，并显示第一个表单验证错误。
- en: The `else` clause in the previous code holds the events that will be done if
    the form validation passes. In this, we authenticate a user using the try/catch
    clauses of Sentry 2, catch all the exceptions, and return an error message according
    to the type of exception.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上面代码中的`else`子句包含了如果表单验证通过将要执行的事件。在这里，我们使用Sentry 2的try/catch子句对用户进行身份验证，捕获所有的异常，并根据异常的类型返回错误消息。
- en: We don't need all the exceptions in our example application, but as an example
    we tried to show all the exceptions, just in case you needed to do something different
    while following up.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例应用程序中，我们不需要所有的异常，但是作为一个示例，我们尝试展示所有的异常，以防您需要在跟进时做一些不同的事情。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All these try/catch exceptions are documented on the website of Sentry 2.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些try/catch异常都在Sentry 2的网站上有记录。
- en: If no exceptions were thrown by Sentry 2, we return to the index page with a
    success message.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Sentry 2没有抛出任何异常，我们将返回到带有成功消息的索引页面。
- en: 'Now, the only thing remaining regarding authentication is the logout button.
    To create one, add the following code to the `AuthController.php` file under `app/controllers`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，关于身份验证，唯一剩下的事情就是注销按钮。要创建一个，将以下代码添加到`app/controllers`目录下的`AuthController.php`文件中：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now let''s dig the code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看代码：
- en: First, we call the `logout()` method of Sentry 2, which logs the user out.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们调用Sentry 2的`logout()`方法，将用户注销。
- en: Then, we simply return the user (who is currently a guest) to the `index` route
    with a success message, telling that they have successfully logged out.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们只需将当前是访客的用户重定向到`index`路由，并显示成功消息，告诉他们已成功注销。
- en: Now that our authentication system is ready, we are ready to create our questions
    table.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的身份验证系统已经准备好了，我们准备创建我们的问题表。
- en: Creating our questions table and model
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的问题表和模型
- en: Now that we have a fully working authentication system, we are ready to create
    our `questions` table. To create our `questions` table, we will be using a database
    migration.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个完全可用的身份验证系统，我们准备创建我们的`questions`表。为了创建我们的`questions`表，我们将使用数据库迁移。
- en: 'To create a migration, run the following command in your terminal:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个迁移，请在终端中运行以下命令：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The previous command will create a new migration under `app/database/migrations`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令将在`app/database/migrations`下创建一个新的迁移。
- en: For questions, we will be needing a question title, question details, the question's
    poser, the question's date, how many times a question has been viewed, total sum
    of votes, and the question's tags.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于问题，我们将需要一个问题标题，问题详情，问题的提问者，问题的日期，问题被查看的次数，投票的总和以及问题的标签。
- en: 'Now, open the migration that you''ve just created and replace its content with
    the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开您刚刚创建的迁移，并用以下代码替换其内容：
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: For tags, we will be using a pivot table, that's why they are not present in
    our current schema. For votes, in this example, we are simply holding an integer
    (that can be positive or negative). In a real-world application, you would want
    to use a second pivot table to keep users' votes, to prevent double voting, and
    to get a more accurate result.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标签，我们将使用一个数据透视表，这就是为什么它们不在我们当前的模式中。对于投票，在这个例子中，我们只是持有一个整数（可以是正数或负数）。在现实世界的应用中，您会想要使用第二个数据透视表来保留用户的投票，以防止重复投票，并获得更准确的结果。
- en: 'Now that your schema is ready, run the migration using the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的模式已经准备好了，请使用以下命令运行迁移：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After successfully migrating the schema, we now need a model to benefit from
    Eloquent. Save the following code as `Question.php` under `app/models`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功迁移模式后，我们现在需要一个模型来从Eloquent中受益。将以下代码保存为`Question.php`，放在`app/models`目录下：
- en: '[PRE33]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we need the database relations to match tables. First, add the following
    code to your `User.php` file under `app/models`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要数据库关系来匹配表。首先，将以下代码添加到`app/models`文件夹下的`User.php`文件中：
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, add the following code to your `Question.php` file under `app/models`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下代码添加到`app/models`文件夹下的`Question.php`文件中：
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Since a user may have more than one question, we have used the `hasMany()` method
    for the relation in our `User` model. Also, since all the questions are owned
    by the users, we have used the `belongsTo()` method to match questions to users.
    In these methods, the first parameter is the model name, which in our case is
    `Question` and `User`. The second parameter is the column name in that model to
    match the tables, which in our case is `userID`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户可能有多个问题，我们在我们的`User`模型中使用了`hasMany()`方法来进行关联。同样，由于所有的问题都是用户拥有的，我们使用`belongsTo()`方法来将问题与用户匹配。在这些方法中，第一个参数是模型名称，在我们的例子中是`Question`和`User`。第二个参数是该模型中用来匹配表的列名，在我们的例子中是`userID`。
- en: Creating our tags table with a pivot table
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的标签表和枢轴表
- en: First, we should understand why we need pivot tables for tags. In a real world
    situation, a question may have more than one tag; also, a tag may have more than
    one question. In such situations (many to many relationships), where both the
    tables may have more than one of each other to match them properly, we should
    create and use a third pivot table.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该理解为什么我们需要标签的枢轴表。在现实世界的情况下，一个问题可能有多个标签；同样，一个标签可能有多个问题。在这种情况下（多对多关系），两个表都可能有多个相互匹配的情况，我们应该创建并使用第三个枢轴表。
- en: 'First, we should create a new tags table using schema. Open your terminal and
    run the following command to create our pivot table schema:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们应该使用架构创建一个新的标签表。打开您的终端并运行以下命令来创建我们的枢轴表架构：
- en: '[PRE36]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now we need to fill the table''s contents. In our example, we just need the
    tag name and tag''s friendly URL name. Replace the schema''s `up` function contents
    with the following code:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要填充表的内容。在我们的例子中，我们只需要标签名称和标签的友好URL名称。用以下代码替换架构的`up`函数内容：
- en: '[PRE37]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We have the `id` column to match questions with tags in the pivot table. We
    have a string field `tag`, which will be the title of the tag, and the column
    `tagFriendly` is what will be shown as a URL. I have also kept timestamps, so
    that, in future, it can give us information about when the tag was created.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有`id`列来匹配问题和枢轴表中的标签。我们有一个字符串字段`tag`，它将是标签的标题，列`tagFriendly`是将显示为URL的内容。我还保留了时间戳，这样，将来它可以为我们提供标签创建的信息。
- en: 'Lastly, run the following command in your terminal to run the migration and
    install the table:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在您的终端中运行以下命令来运行迁移并安装表：
- en: '[PRE38]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, we need a model for the `tags` table. Save the following file as `Tag.php`
    under `app/models`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个`tags`表的模型。将以下文件保存为`Tag.php`，放在`app/models`文件夹下：
- en: '[PRE39]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Now, we need to create our pivot table. As a good practice, its name should
    be `modelname1_modelname2`, and its content sorted alphabetically. In our example,
    we have the `questions` and `tags` table, so we will set the pivot table's name
    as `question_tags` (this is not forced, you can give any name to your pivot table).
    As you may guess, its schema will have two columns to match the two tables and
    two foreign keys for these columns. You can even add additional columns to the
    pivot table.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建我们的枢轴表。作为一个良好的实践，它的名称应该是`modelname1_modelname2`，并且内容按字母顺序排序。在我们的例子中，我们有`questions`和`tags`表，所以我们将枢轴表的名称设置为`question_tags`（这不是强制的，您可以给您的枢轴表任何名称）。正如您可能猜到的那样，它的架构将有两列来匹配两个表和这两个列的外键。您甚至可以向枢轴表添加额外的列。
- en: 'To create the migration file, run the following command in your terminal:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建迁移文件，请在终端中运行以下命令：
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, open the schema that we''ve generated in the `migrations` folder under
    `app/database` and alter its `up()` method contents with the following code:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开我们在`app/database`的`migrations`文件夹中生成的架构，并用以下代码修改其`up()`方法的内容：
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We need two columns, and its name structure should be `modelname_id`. In our
    migration, they are `question_id` and `tag_id`. Also, we've set the foreign keys
    to match them in our database.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两列，其名称结构应为`modelname_id`。在我们的迁移中，它们是`question_id`和`tag_id`。此外，我们已经设置了外键来匹配它们在我们的数据库中。
- en: 'Now, run the migration and install the table:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行迁移并安装表：
- en: '[PRE42]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, we need to add methods to describe to Eloquent that we are using a pivot
    table. To teach the pivot information to the question model, add the following
    code to the `Question.php` file under `app/models`:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加方法来描述Eloquent我们正在使用一个枢轴表。将以下代码添加到`app/models`文件夹下的`Question.php`文件中：
- en: '[PRE43]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'To describe the pivot information to the tag model, add the following code
    to the `Tag.php` file under `app/models`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 描述枢轴信息到标签模型，将以下代码添加到`app/models`文件夹下的`Tag.php`文件中：
- en: '[PRE44]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The first parameter in the `belongsToMany()` method is the model name, and
    the second parameter is the pivot table''s name. Using `withTimestamps()` (which
    brings us the pivot data''s creation and updation dates) is optional. Also, if
    we had some extra data to be added to the pivot table, we could call it using
    the method `withPivot()`. Consider the following example code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`belongsToMany()`方法中的第一个参数是模型名称，第二个参数是枢轴表的名称。使用`withTimestamps()`（它为我们带来了枢轴数据的创建和更新日期）是可选的。此外，如果我们有一些额外的数据要添加到枢轴表中，我们可以使用`withPivot()`方法来调用它。考虑以下示例代码：'
- en: '[PRE45]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Now that our pivot table structure is ready, in the later chapters, we can easily
    fetch both the question's tags and all questions tagged with $`tagname` easily.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的枢轴表结构准备好了，在后面的章节中，我们可以轻松地获取问题的标签和所有标记为`$tagname`的问题。
- en: Creating and processing our question form
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和处理我们的问题表单
- en: Now that our structure is ready, we can proceed to create and process our question
    form.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的结构准备好了，我们可以继续创建和处理我们的问题表单。
- en: Creating our questions form
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的问题表单
- en: 'We perform the following steps to create our question form:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们执行以下步骤来创建我们的问题表单：
- en: 'First, we need a new route resource for the question form. Open your `routes.php`
    file in the `app` folder and add the following code:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为问题表单创建一个新的路由资源。打开`app`文件夹中的`routes.php`文件，并添加以下代码：
- en: '[PRE46]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now that our resource is defined, we need to add the resource to our top menu
    for navigation. Open your `topmenu.blade.php` file under `app/views/template`,
    and find the following line:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的资源已经定义，我们需要将资源添加到顶部菜单以进行导航。打开`app/views/template`目录下的`topmenu.blade.php`文件，并找到以下行：
- en: '[PRE47]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the previous line above the following line:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下行的上方添加上述行：
- en: '[PRE48]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, we need the controller file to handle the resources. Run the following
    command in your terminal:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要控制器文件来处理资源。在您的终端中运行以下命令：
- en: '[PRE49]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, open the newly created `QuestionsController.php` file under `app/controllers`
    and delete all the methods inside the class. Then add the following code:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`app/controllers`目录下新创建的`QuestionsController.php`文件，并删除类中的所有方法。然后添加以下代码：
- en: '[PRE50]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, we need to create the view we''ve just assigned. Save the following code
    as `ask.blade.php` under `app/views/qa`:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要创建我们刚刚分配的视图。将以下代码保存为`ask.blade.php`，放在`app/views/qa`目录下：
- en: '[PRE51]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In addition to the previous views we had created, in this view we added a JavaScript
    code to the footer by filling the `footer_assets` section, which we defined earlier
    in our master page.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前创建的视图之外，在这个视图中，我们通过填充`footer_assets`部分向页脚添加了JavaScript代码，这是我们在主页面中之前定义的。
- en: If you have done everything correctly, when you navigate to `site.com/ask`,
    you will see a form styled like the following screenshot:![Creating our questions
    form](graphics/2111OS_08_05.jpg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经正确完成了所有操作，当您导航到`site.com/ask`时，您将看到一个类似以下截图的样式化表单：![创建我们的问题表单](graphics/2111OS_08_05.jpg)
- en: Now that our question form is ready, we are ready to process the form.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的问题表单已经准备好，我们可以开始处理表单了。
- en: Processing our questions form
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理我们的问题表单
- en: To process the form, we need some validation rules and the controller method.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理表单，我们需要一些验证规则和控制器方法。
- en: 'First, add the following form validation rules to your `Question.php` file
    under `app/models`:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下表单验证规则添加到`app/models`目录下的`Question.php`文件中：
- en: '[PRE52]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'After saving the question successfully, we would like to provide the question''s
    permalink to the user, so the user can access the question easily. But to do this,
    we first need to define a route to create this link. Add the following line into
    your `routes.php` file in the `app` folder:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功保存问题后，我们希望向用户提供问题的永久链接，以便用户可以轻松访问问题。但是，为了做到这一点，我们首先需要定义一个创建此链接的路由。将以下行添加到`app`文件夹中的`routes.php`文件中：
- en: '[PRE53]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: We set two parameters into this route, `id` and `title`. The `id` parameter
    has to be a positive integer, whereas `title` should contain only alphanumeric
    characters, score, and underscore.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个参数设置到这个路由中，`id`和`title`。`id`参数必须是正整数，而`title`应该只包含字母数字字符、分数和下划线。
- en: 'Now, we are ready to process the question form. Add the following code to your
    `QuestionsController.php` file under `app/controllers`:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备处理问题表单。将以下代码添加到`app/controllers`目录下的`QuestionsController.php`文件中：
- en: '[PRE54]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now, let''s dig the code:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看代码：
- en: First, we run the form validation class to check whether the values are valid.
    If the validation has failed, we return the user to the question page with the
    old inputs he had provided, and with the first validation error message.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们运行表单验证类来检查数值是否有效。如果验证失败，我们将用户带回问题页面，并显示用户之前提供的旧输入以及第一个验证错误消息。
- en: If the validation passes, we continue processing the form. We first create and
    add the question, add a new row to the database, and then we fetch the row that
    we've just created. To get the current user's ID, we use the `id` object of the
    `getUser()` method by Sentry 2, which returns the info of the current logged in
    user.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果验证通过，我们继续处理表单。我们首先创建并添加问题，向数据库添加一行，然后获取我们刚刚创建的行。为了获取当前用户的ID，我们使用Sentry 2的`getUser()`方法的`id`对象，该方法返回当前登录用户的信息。
- en: After creating the question, we check the length of the `tags` field. If the
    field is not empty, we split the string at the commas and make a raw `tags` array.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建问题后，我们检查`tags`字段的长度。如果字段不为空，我们将字符串在逗号处分割，并创建一个原始的`tags`数组。
- en: After that, we loop through each of the tags that we had split, and make their
    friendly URL version using Laravel 4's `slug()` method of the `String` class.
    If the slugged version has a length, it's a valid tag.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们循环遍历我们分割的每个标签，并使用Laravel 4的`String`类的`slug()`方法创建它们的友好URL版本。如果生成的版本长度大于0，则是有效的标签。
- en: After finding all the valid tags, we check the database to find whether there
    is a tag already created. If so, we get its ID. If the tag is new to the system,
    then we create a new tag. So, in this way, we avoid unnecessary multiple tags
    in our system.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在找到所有有效的标签之后，我们检查数据库是否已经创建了标签。如果是，我们获取它的ID。如果标签是系统中的新标签，那么我们就创建一个新的标签。这样，我们就避免了系统中不必要的多个标签。
- en: After that, we use the method `attach()` to create a new tag in the pivot table.
    To attach a new relation, we first need to find the ID, which we want to attach,
    and then go to the model of the attachment and use the `attach()` method.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们使用`attach()`方法在中间表中创建一个新的标签关系。要附加一个新的关系，我们首先需要找到要附加的ID，然后转到附加的模型并使用`attach()`方法。
- en: In our example, we need to attach the question to the tag(s). So we find the
    question, which needs to be attached, use a many-to-many relation to show that
    tags will be attached to the question, and attach the tag's `id` to the question.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们需要将问题附加到标签上。因此，我们找到需要附加的问题，使用多对多关系来显示标签将附加到问题，并将标签的`id`附加到问题上。
- en: If everything goes without any problem, you should be redirected back to the
    question page with a success message and a permalink to your question.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该会被重定向回问题页面，并显示一个成功消息和问题的永久链接。
- en: Also, if you check your `question_tags` table, you will see the relation data
    filled.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另外，如果您检查`question_tags`表，您会看到填充的关系数据。
- en: Note
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Always validate and filter the contents coming from forms, and make sure you
    are not accepting any unwanted content.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 始终验证和过滤来自表单的内容，并确保你不接受任何不需要的内容。
- en: 'After successfully adding the question, you should see a page like the following
    screenshot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 成功添加问题后，你应该会看到一个如下截图的页面：
- en: '![Processing our questions form](graphics/2111OS_08_06.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![处理我们的问题表单](graphics/2111OS_08_06.jpg)'
- en: Creating our questions list page
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的问题列表页面
- en: 'Now that we can create questions, it''s time to fill our dummy index page with
    actual question data. To do this, open your `MainController.php` file under `app/controllers`,
    and alter the function `getIndex()` with the following code:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建问题了，是时候用实际的问题数据填充我们的虚拟索引页面了。为此，打开`app/controllers`下的`MainController.php`文件，并用以下代码修改`getIndex()`函数：
- en: '[PRE55]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In this method, we loaded the same page, but we added two variables named `title`
    and `questions`. The `title` variable is the dynamic title of our application,
    and the `questions` variable holds the last two questions, with pagination. Instead
    of `get()`, if you use `paginate($number)`, you can get a ready-to-use pagination
    system. Also, using the method `with()`, we eagerly loaded the `users` and `tags`
    relations directly with the questions collection, for better performance.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们加载了相同的页面，但添加了两个名为`title`和`questions`的变量。`title`变量是我们应用程序的动态标题，`questions`变量保存了最后两个问题，带有分页。如果使用`paginate($number)`而不是`get()`，你可以获得一个准备就绪的分页系统。此外，使用`with()`方法，我们直接预加载了`users`和`tags`关系，以获得更好的性能。
- en: 'In the view, we will have a crude upvote/downvote option for the questions,
    and a route link for the questions tagged with `$tag`. For this, we will need
    some new routes. Add the following code to your `routes.php` file under the `app`
    folder:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图中，我们将为问题提供一个简单的点赞/踩选项，以及一个标记为`$tag`的问题的路由链接。为此，我们需要一些新的路由。将以下代码添加到`app`文件夹下的`routes.php`文件中：
- en: '[PRE56]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now open your `index.blade.php` file under `app/views/qa`, and alter the whole
    file with the following code:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开`app/views/qa`下的`index.blade.php`文件，并用以下代码修改整个文件：
- en: '[PRE57]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Since we've set the relations, we can directly use `$question->users` to access
    the poser, or `$question->tags` to access the question's tags directly.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经设置了关系，我们可以直接使用`$question->users`来访问提问者，或者`$question->tags`来直接访问问题的标签。
- en: The method `links()` brings Laravel's built-in pagination system. The system
    is ready to be used with Bootstrap. Also we can alter its appearance from the
    `view.php` file under `app/config`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`links()`方法带来了Laravel内置的分页系统。该系统已准备好与Bootstrap一起使用。此外，我们可以从`app/config`下的`view.php`文件中修改其外观。'
- en: 'If you followed up until here, when you navigate to your index page, after
    inserting some new questions, you will see a view like the following screenshot:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直跟到这里，当你导航到你的索引页面，在插入一些新问题后，你会看到一个如下截图的视图：
- en: '![Creating our questions list page](graphics/2111OS_08_07.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的问题列表页面](graphics/2111OS_08_07.jpg)'
- en: Now, we need to add functionality to the upvote and downvote buttons.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为点赞和踩按钮添加功能。
- en: Adding upvote and downvote functionality
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加点赞和踩功能
- en: The upvote and downvote buttons will be on almost every page in our project,
    so adding them to the master page is a better practice instead of adding and cloning
    them into each template more than once.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 点赞和踩按钮将出现在我们项目的几乎每个页面上，因此将它们添加到主页面是一个更好的做法，而不是在每个模板中多次添加和克隆它们。
- en: 'To do this, open your `template_masterpage.php` file under `app/views`, and
    find the following line:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，打开`app/views`下的`template_masterpage.php`文件，并找到以下行：
- en: '[PRE58]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Add the following code below the previous code:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一段代码下面添加以下代码：
- en: '[PRE59]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In the previous code, we check whether the user is logged in, and whether the
    user has navigated either to the index or the details page. Then we use JavaScript
    to prevent the user from clicking on the link, and we alter the click event to
    be an Ajax `get()` request. In the next code we will fill the vote's value with
    the result, which will come from the `Ajax()` request.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们检查用户是否已登录，以及用户是否已导航到索引或详细页面。然后我们使用JavaScript防止用户点击链接，并修改点击事件为Ajax
    `get()`请求。在下一段代码中，我们将用来自`Ajax()`请求的结果来填充投票的值。
- en: 'Now we need to write the vote update method to make it work correctly. For
    this, open your `QuestionsController.php` file under `app/controllers`, and add
    the following code:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写投票更新方法，使其正常工作。为此，打开`app/controllers`下的`QuestionsController.php`文件，并添加以下代码：
- en: '[PRE60]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The `getVote()` method checks whether the question is valid, and if it's valid,
    it increases or decreases its vote count by one. We didn't validate the parameter
    `$direction` here, because we've already prefiltered using regular expression
    at the resource that the value of `$direction` should either be `up` or `down`.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`getVote()`方法检查问题是否有效，如果有效，它会增加或减少一个投票计数。我们在这里没有验证参数`$direction`，因为我们已经在资源的正则表达式中预先过滤了，`$direction`的值应该是`up`或`down`。'
- en: Note
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In real-world cases, you should even store the votes in a new table and check
    whether the users' votes are unique. You should also make sure that a user votes
    only once.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界的情况下，你甚至应该将投票存储在一个新的表中，并检查用户的投票是否唯一。你还应该确保用户只投一次票。
- en: Now that our index page is ready and functioning, we can proceed to the next
    step.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的索引页面已经准备就绪并运行，我们可以继续下一步了。
- en: Creating our questions page
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的问题页面
- en: 'In the details page, we need to show the full question to the user. Also there
    will be a place for the answers. To create our question page, we perform the following
    steps:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细页面中，我们需要向用户展示完整的问题。还会有一个答案的地方。为了创建我们的问题页面，我们执行以下步骤：
- en: 'First, we need to add the details method what we''ve defined on our route earlier.
    Add the following code to your `QuesionsController.php` file under `app/controllers`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要添加我们之前在路由中定义的详细方法。将以下代码添加到`app/controllers`下的`QuesionsController.php`文件中：
- en: '[PRE61]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: We first try to fetch the question information using tags and the poser's information.
    If the question is found, we increase the view count by one, and we simply load
    the view, and add the title and the question information to the view.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先尝试使用标签和发布者的信息来获取问题信息。如果找到问题，我们将浏览次数增加一次，然后简单地加载视图，并将标题和问题信息添加到视图中。
- en: 'Before displaying the view, we first need some extra routes to delete the question
    and reply to the post. To add these, add the following code to your `routes.php`
    file in the `app` folder:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在显示视图之前，我们首先需要一些额外的路由来删除问题和回复帖子。要添加这些，将以下代码添加到`app`文件夹中的`routes.php`文件中：
- en: '[PRE62]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now that the controller method and the routes required in the view are ready,
    we need the view to show the data to the end user. Follow the steps and add all
    the code provided further, by parts, to the `details.blade.php` file under `app/views/qa`:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在控制器方法和视图中所需的路由已经准备好，我们需要视图来向最终用户显示数据。按照步骤，逐部分将所有提供的代码添加到`app/views/qa`目录下的`details.blade.php`文件中：
- en: '[PRE63]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: In the first section of the view, we extend the view file to our master page
    `template_masterpage`. Then we start to fill the code for the section `content`.
    We made two links using named routes for upvoting and downvoting that will be
    handled using Ajax. Also, since we have different styles for each voting state
    (green for a positive vote and red for a negative vote), we used an `if` clause
    and altered the opening `<div>` tag.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图的第一部分，我们将视图文件扩展到我们的主页面`template_masterpage`。然后我们开始填写`content`部分的代码。我们使用命名路由创建了两个链接，用于投票和反对票，这将使用Ajax处理。此外，由于每种投票状态都有不同的样式（正面投票为绿色，负面投票为红色），我们使用`if`子句并修改了开放的`<div>`标签。
- en: 'Now add the following code to `details.blade.php`:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将以下代码添加到`details.blade.php`中：
- en: '[PRE64]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In this section, we are showing the question itself, and checking whether there
    are tags. If the `tags` object is not null (tags are present), we make a link
    with a named route for each tag, to show the questions tagged with `$tag`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们展示问题本身，并检查是否有标签。如果`tags`对象不为空（存在标签），我们为每个标签使用命名路由创建一个链接，以显示带有`$tag`标签的问题。
- en: 'Now add the following code to `details.blade.php`:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将以下代码添加到`details.blade.php`中：
- en: '[PRE65]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: In this section, if the end user is an admin, we show buttons to answer and
    delete questions.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，如果最终用户是管理员，我们会显示回答和删除问题的按钮。
- en: 'Now add the following code to `details.blade.php`:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将以下代码添加到`details.blade.php`中：
- en: '[PRE66]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In this section, we are adding the answering block to the question itself, benefitting
    from Laravel 4's built-in `Form` class. This form will only be available for logged
    in users (and for the admins, since they are also logged in users). We finish
    the section content using `@stop`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将向问题本身添加回答块，利用Laravel 4内置的`Form`类。这个表单只对已登录的用户可用（也对管理员可用，因为他们也是已登录用户）。我们使用`@stop`来完成这一部分的内容。
- en: 'Now add the following code to `details.blade.php`:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将以下代码添加到`details.blade.php`中：
- en: '[PRE67]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: In this section, we fill the `footer_assets` section to add some JavaScript
    to show/hide the answer field to the users, and a confirmation box is displayed
    to the admin before deleting the question.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们填充`footer_assets`部分以添加一些JavaScript来向用户显示/隐藏答案字段，并在删除问题之前向管理员显示确认框。
- en: 'If all the steps are performed, you should have a view like the following screenshot:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有步骤都已完成，您应该有一个如下截图所示的视图：
- en: '![Creating our questions page](graphics/2111OS_08_08.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的问题页面](graphics/2111OS_08_08.jpg)'
- en: 'Lastly, we need a method to delete the question. Add the following code to
    your `QuestionsController.php` file under `app/controllers`:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个删除问题的方法。将以下代码添加到`app/controllers`目录下的`QuestionsController.php`文件中：
- en: '[PRE68]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Since we've set the related tables to cascade on deletion, we won't have to
    worry about deleting the answers and the tags while deleting a question.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经设置了相关表在删除时级联删除，我们不必担心删除答案和标签。
- en: Now that we are ready to post answers, we should create the answers table and
    process our answers.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备发布答案，我们应该创建答案表并处理我们的答案。
- en: Creating our answers table and resources
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的答案表和资源
- en: 'Our answers table will be very similar to the current questions table, only
    that it will have fewer columns. Our answers can also be voted, and an answer
    can be marked as the best answer either by a question''s poser or an admin. To
    create our answers table and resources, we perform the following steps:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的答案表将与当前的问题表非常相似，只是它将有更少的列。我们的答案也可以被投票，一个答案可以被问题的发布者或管理员标记为最佳答案。为了创建我们的答案表和资源，我们执行以下步骤：
- en: 'First, let''s create the database table. Run the following command in the terminal:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建数据库表。在终端中运行以下命令：
- en: '[PRE69]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now, open the migration, which is created under `app/database/migrations`,
    and replace the `up()` function''s contents with the following code:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开迁移文件，它创建在`app/database/migrations`目录下，并用以下代码替换`up()`函数的内容：
- en: '[PRE70]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Now, to benefit from the Eloquent ORM and its relations, we need a model for
    the `answers` table. Add the following code as `Answer.php` under `app/models`:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了从Eloquent ORM及其关系中受益，我们需要为`answers`表创建一个模型。将以下代码添加为`app/models`目录下的`Answer.php`文件：
- en: '[PRE71]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The answers are children of both users and questions, that's why in our model,
    we should use `belongsTo()` for users and questions to relate their tables.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是用户和问题的子级，这就是为什么在我们的模型中，我们应该使用`belongsTo()`来关联他们的表。
- en: 'Since a question may have more than one answer, we should also add a relation
    from the `questions` table to the `answers` table (to get the data about the answers
    to your question, all of the answers to your questions, or all of my upvoted questions''
    answers). To do this, open your `Question.php` file under `app/models` and add
    the following code:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于一个问题可能有多个答案，我们还应该从`questions`表到`answers`表添加一个关系（以获取关于问题的答案数据，您问题的所有答案，或我赞过的问题的所有答案）。为此，打开`app/models`目录下的`Question.php`文件，并添加以下代码：
- en: '[PRE72]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Finally, we need a controller to process the requests related to answers. Run
    the following command in the terminal to make a controller for the answers:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要一个控制器来处理与答案相关的请求。在终端中运行以下命令以为答案创建一个控制器：
- en: '[PRE73]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: This command will create a file `AnswersController.php` under `app/controllers`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将在`app/controllers`目录下创建一个`AnswersController.php`文件。
- en: Now that our answers' resource is ready, we can process the answers.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的答案资源已经准备好，我们可以处理答案了。
- en: Processing the answers
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理答案
- en: 'In the previous section, we successfully created a question with tags, and
    our answers form. We now have to process the answers and add them to the database.
    There are some simple steps to follow for this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们成功地创建了一个带有标签的问题和我们的答案形式。现在我们需要处理答案并将它们添加到数据库中。有一些简单的步骤需要遵循：
- en: 'First, we need the controller form to process the answers and add them to the
    table. To do this, open your freshly created `AnswersController.php` file under
    `app/controllers`, remove every autogenerated method inside the class, and add
    the following code inside the class definition:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要一个控制器表单来处理答案并将其添加到表中。为此，请打开`app/controllers`目录下新创建的`AnswersController.php`文件，删除类内部的每个自动生成的方法，并在类定义内添加以下代码：
- en: '[PRE74]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The `postReply()` method simply checks whether the question is valid, runs a
    form validation, adds an answer owned by the question and the user to the database,
    and returns the user back to the questions page.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`postReply()`方法简单地检查问题是否有效，运行表单验证，将一个答案添加到数据库，并将用户返回到问题页面。'
- en: Now in the questions page, we also need to include the answers and the number
    of answers. But before that, we need to fetch them. There are some steps to do
    this.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在问题页面中，我们还需要包括答案和答案数量。但在此之前，我们需要先获取它们。有一些步骤需要完成。
- en: 'First, open your `QuestionsController.php` file under `app/controllers`, and
    find the following line:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`app/controllers`目录下的`QuestionsController.php`文件，并找到以下行：
- en: '[PRE75]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Replace the previous line with the following line:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下行替换上一行：
- en: '[PRE76]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Now, find the following line in the `MainController.php` file under `app/controllers`,
    and find this line:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`app/controllers`目录下的`MainController.php`文件中找到以下行：
- en: '[PRE77]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Replace the previous line with the following line:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下行替换上一行：
- en: '[PRE78]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Now open your `index.blade.php` file under `app/views/qa`, and find the following
    code:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`app/views/qa`目录下的`index.blade.php`文件，并找到以下代码：
- en: '[PRE79]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Replace the previous code with the following code:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换上一段代码：
- en: '[PRE80]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: In this alteration, we added a PHP code and a loop, checking each answer if
    it's an accepted one. And if it is, we change the `div` holder class. Also we
    added a feature to show the number of answers.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个修改中，我们添加了一个PHP代码和一个循环，检查每个答案是否被接受。如果是，我们就改变`div`的容器类。此外，我们还添加了一个显示答案数量的功能。
- en: 'Next, we need the route resources defined to answer upvoting and downvoting
    and choose the best answer. Add the following code into your `routes.php` file
    under the `app` folder:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义路由资源来处理答案的点赞和踩和选择最佳答案。将以下代码添加到`app`文件夹下的`routes.php`文件中：
- en: '[PRE81]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Now we need to display the answers in the question details page so that the
    users can see the answers. To do this, open the `details.blade.php` file under
    `app/views/qa`, and perform the following steps:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要在问题详情页面中显示答案，以便用户可以看到答案。为此，请打开`app/views/qa`目录下的`details.blade.php`文件，并执行以下步骤：
- en: 'First, find the following line:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，找到以下行：
- en: '[PRE82]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Replace the previous line with the following line:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下行替换上一行：
- en: '[PRE83]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Now find the following code:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在找到以下代码：
- en: '[PRE84]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Add the following code above the previous code:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一行上面添加以下代码：
- en: '[PRE85]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The current structure of answers is very close to the questions structure, which
    we had created earlier in this chapter. In addition, we have a button to choose
    the best answer, which is shown only to the poser of the question and to the admin.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 答案的当前结构与我们在本章前面创建的问题结构非常接近。此外，我们有一个按钮可以选择最佳答案，只有提问者和管理员才能看到。
- en: 'Now, we need a confirmation button in the same view. For this, add the following
    code to the `footer_assets` section:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在同一个视图中添加一个确认按钮。为此，请将以下代码添加到`footer_assets`部分：
- en: '[PRE86]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Now, we need a method to increase or decrease the votes of the answers. Add
    the following code to your `AnswersController.php` file under `app/controllers`:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个方法来增加或减少答案的投票数。将以下代码添加到`app/controllers`目录下的`AnswersController.php`文件中：
- en: '[PRE87]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The `getVote()` method is exactly the same as the questions voting method. The
    only difference here is that, instead of the question, the answers are affected.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`getVote()`方法与问题投票方法完全相同。这里唯一的区别是，影响的是答案而不是问题。'
- en: Choosing the best answer
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择最佳答案
- en: 'We need a processing method to choose a selected answer as the best answer.
    To choose the best answer, we perform the following steps:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个处理方法来选择最佳答案。为了选择最佳答案，我们执行以下步骤：
- en: 'Open your `AnswersController.php` file under `app/controllers`, and add the
    following code:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/controllers`目录下的`AnswersController.php`文件，并添加以下代码：
- en: '[PRE88]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: In the previous code, we first check whether the answer is a valid answer. Then,
    we check whether the user who has clicked on the **best answer** button is either
    the poser of the question or the application's administrator. After that, we mark
    all the answers of the question as unchecked (we erase all the best answer information
    to the answers of the question), and mark the chosen answer as the best answer.
    And finally, we return the form with a success message.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们首先检查答案是否有效。然后，我们检查点击**最佳答案**按钮的用户是否是问题的提问者或应用程序的管理员。之后，我们将问题的所有答案标记为未选中（清除问题的所有最佳答案信息），并将选择的答案标记为最佳答案。最后，我们返回带有成功消息的表单。
- en: 'Now, we need a method to delete the answers. For this, first we need a route.
    Open your `routes.php` file under `app` and add the following code:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个方法来删除答案。首先，我们需要一个路由。打开`app`目录下的`routes.php`文件，并添加以下代码：
- en: '[PRE89]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Next, find the following code in the `details.blade.php` file under `app/views/qa`:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`app/views/qa`下的`details.blade.php`文件中找到以下代码：
- en: '[PRE90]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Add the following code below the previous code:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码下面添加以下代码：
- en: '[PRE91]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Now, we need the controller method to delete an answer. Add the following code
    to the `AnswersController.php` file under `app/controllers`:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个控制器方法来删除答案。在`app/controllers`下的`AnswersController.php`文件中添加以下代码：
- en: '[PRE92]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'If you have done everything correctly, the final version of our details page
    would look like the following screenshot:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经做了一切正确，我们详情页面的最终版本将会像下面的截图一样：
- en: '![Choosing the best answer](graphics/2111OS_08_09.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![选择最佳答案](graphics/2111OS_08_09.jpg)'
- en: Now that everything is ready to ask questions, answer, mark the best answer,
    and delete, only one thing is missing in our application, tag searching. As you
    know, we've made all the tags as links, so we should now process their routes.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切准备就绪，可以提问、回答、标记最佳答案和删除，我们应用中只缺少一个功能，即标签搜索。正如你所知，我们已经将所有标签都做成了链接，所以现在我们应该处理它们的路由。
- en: Searching questions by the tags
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过标签搜索问题
- en: 'In our main page and details page, we''ve given all the tags a special link.
    We will perform the following steps to search questions by the tags:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主页面和详情页面中，我们给所有标签都加了一个特殊链接。我们将执行以下步骤来通过标签搜索问题：
- en: 'First, open your `QuestionsController.php` file under `app/controllers`, and
    add the following code:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，打开`app/controllers`下的`QuestionsController.php`文件，并添加以下代码：
- en: '[PRE93]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: What this code does is, it first searches for a tag using the column `tagFriendly`,
    which gives a unique result. So, we can safely return the first result using `first()`.
    Then we check whether the tag is present in our system. If not, we return the
    user to the index page with an error message stating that the tag has not been
    found.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的作用是，首先使用列`tagFriendly`搜索标签，这会得到一个唯一的结果。因此，我们可以安全地使用`first()`返回第一个结果。然后我们检查标签是否存在于我们的系统中。如果没有，我们会返回用户到索引页面，并显示一个错误消息，说明未找到该标签。
- en: If the tag is found, using the relations we've defined, we catch all the questions
    tagged using that tag, and we use eager loading to load the users, tags (all of
    the tags of the questions), and answers (although we don't show the answers on
    this page, we need a count of them to display it on the page). Our view would
    be exactly the same as the index page's view. So instead of creating a new one,
    we've directly used that view.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找到了标签，我们使用我们定义的关系捕获所有使用该标签标记的问题，并使用急加载来加载用户、标签（所有问题的标签）和答案（尽管我们在这个页面上不显示答案，但我们需要它们的计数来在页面上显示）。我们的视图将与索引页面的视图完全相同。因此，我们直接使用了那个视图，而不是创建一个新的。
- en: We've kept the pagination limit to two, just to show that it works.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分页限制保持为两，只是为了展示它的工作原理。
- en: 'Finally, to allow JavaScript assets on the page (such as enabling Ajax upvoting
    and downvoting), open your `template_masterpage.php` file under `app/views`, and
    find the following line:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了允许页面上的JavaScript资源（例如启用Ajax投票和取消投票），打开`app/views`下的`template_masterpage.php`文件，并找到以下行：
- en: '[PRE94]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Replace the previous code with the following code:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下代码替换之前的代码：
- en: '[PRE95]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: This way, we allow these Ajax events even on pages having the route named `tagged`.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们甚至可以在具有名称为“tagged”的路由的页面上允许这些Ajax事件。
- en: 'If you have done everything correctly, and if you click on a tag''s name, a
    page like this will appear:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经做了一切正确，当你点击标签的名称时，会出现如下页面：
- en: '![Searching questions by the tags](graphics/2111OS_08_10.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![通过标签搜索问题](graphics/2111OS_08_10.jpg)'
- en: Summary
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've used various features of Laravel 4\. We've learned to
    remove the public segment, to make Laravel work on some of the shared hosting
    solutions. We've also learned the basics of Sentry 2, a powerful authentication
    class. We've learned how to use many-to-many relationships and pivot tables. We've
    also used the belongs-to and has-any relationships using Eloquent ORM. We defined
    all our URLs, form actions, and links with routes using resources. So if you need
    to change the application's URL structure (let's say you need to change your website
    to German, and the German for question is frage), you only need to edit `routes.php`.
    So this way, you won't have to dig each file to fix the links. We've used the
    pagination class to navigate through records, and we've also used the Laravel
    Form Builder Class.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了Laravel 4的各种功能。我们学会了去除公共部分，使Laravel可以在一些共享主机解决方案上运行。我们还学会了Sentry 2的基础知识，这是一个强大的身份验证类。我们学会了如何使用多对多关系和中间表。我们还使用了Eloquent
    ORM来定义属于和拥有任何关系。我们使用资源来定义所有的URL、表单操作和链接。因此，如果你需要更改应用程序的URL结构（比如你需要将你的网站更改为德语，而德语中的问题是“frage”），你只需要编辑`routes.php`。这样一来，你就不需要深入每个文件来修复链接。我们使用分页类来浏览记录，还使用了Laravel表单构建器类。
- en: In the next chapter, we will be developing a fully featured e-commerce website
    using everything we've learned so far.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用我们到目前为止学到的一切来开发一个功能齐全的电子商务网站。
