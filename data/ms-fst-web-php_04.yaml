- en: Envisioning the Future with Asynchronous PHP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用异步PHP构想未来
- en: In this chapter, we will learn how to determine what are the best strategies
    when coping with I/O calls and how to implement these strategies. We will see
    what distinguishes multithreading from multitasking, when to implement one or
    the other, and how to do it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何确定在处理I/O调用时什么是最佳策略，以及如何实施这些策略。我们将看到多线程与多任务处理的区别，何时实施其中一个，以及如何实施。
- en: Also, we will learn how to use the `ReactPHP` library and how to benefit from
    event-driven programming when dealing with asynchronous I/O calls.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将学习如何使用`ReactPHP`库，并在处理异步I/O调用时如何从事件驱动编程中受益。
- en: 'Thus, in this chapter, we will cover the following points:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下几点：
- en: Optimizing I/O calls with asynchronous non-blocking code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用异步非阻塞代码优化I/O调用
- en: Multithreading with the `POSIX Threads` library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`POSIX Threads`库进行多线程
- en: Implementing a `ReactPHP` solution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施`ReactPHP`解决方案
- en: Asynchronous non-blocking I/O calls
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 异步非阻塞I/O调用
- en: As we have seen in the previous chapters of this book, I/O calls will always
    offer the worst performance due to the underlying latency of establishing, using
    and closing streams and sockets. Since PHP is basically a synchronous language
    that waits for a called function to return before resuming code execution, I/O
    calls are especially problematic if the called function has to wait for a stream
    to close before returning to the calling code. This becomes even worse when a
    PHP application has thousands of I/O calls to do every few minutes for example.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书的前几章中所看到的，由于建立、使用和关闭流和套接字的基础延迟，I/O调用始终会提供最差的性能。由于PHP基本上是一种同步语言，它在恢复代码执行之前等待被调用的函数返回，因此如果被调用的函数必须等待流关闭才能返回到调用代码，I/O调用尤其成问题。当一个PHP应用程序例如每隔几分钟需要进行数千次I/O调用时，情况会变得更糟。
- en: 'Since PHP 5.3, it has become possible to interrupt PHP''s normal flow of execution
    by using generators and thus, to execute code asynchronously. As we have seen
    previously, even if dynamic structures can be less performant in general, they
    can still be useful in speeding up blocking code. This is particularly true for
    I/O calls that usually have very high latency. In order to better grasp the orders
    of magnitude of I/O latency, we can consult the following well-known graph published
    by Google:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自PHP 5.3以来，通过使用生成器中断PHP的正常执行流程成为可能，从而异步执行代码。正如我们之前所看到的，即使动态结构在一般情况下可能性能较差，它们仍然可以用于加速阻塞代码。这对于通常具有非常高延迟的I/O调用尤其如此。为了更好地掌握I/O延迟的数量级，我们可以查看谷歌发布的以下著名图表：
- en: '| Latency Comparison Numbers--------------------------L1 cache reference 0.5
    nsBranch mispredict 5 nsL2 cache reference 7 ns 14x L1 cacheMutex lock/unlock
    25 nsMain memory reference 100 ns 20x L2 cache, 200x L1 cacheCompress 1K bytes
    with Zippy 3,000 ns 3 usSend 1K bytes over 1 Gbps network 10,000 ns 10 usRead
    4K randomly from SSD* 150,000 ns 150 us ~1GB/sec SSDRead 1 MB sequentially from
    memory 250,000 ns 250 usRound trip within same data center 500,000 ns 500 usRead
    1 MB sequentially from SSD* 1,000,000 ns 1,000 us 1 ms ~1GB/sec SSD, 4X memoryDisk
    seek 10,000,000 ns 10,000 us 10 ms 20x data center roundtripRead 1 MB sequentially
    from disk 20,000,000 ns 20,000 us 20 ms 80x memory, 20X SSDSend packet CA->Netherlands->CA
    150,000,000 ns 150,000 us 150 msNotes-----1 ns = 10^-9 seconds1 us = 10^-6 seconds
    = 1,000 ns1 ms = 10^-3 seconds = 1,000 us = 1,000,000 nsCredit------By Jeff Dean:
    [http://research.google.com/people/jeff/](http://research.google.com/people/jeff/)Originally
    by Peter Norvig: [http://norvig.com/21-days.html#answers](http://norvig.com/21-days.html#answers)Contributions-------------Some
    updates from: [https://gist.github.com/2843375](https://gist.github.com/2843375)"Humanized"
    comparison: [https://gist.github.com/2843375](https://gist.github.com/2843375)Visual
    comparison chart: [http://i.imgur.com/k0t1e.png](http://i.imgur.com/k0t1e.png)Animated
    presentation: [http://prezi.com/pdkvgys-r0y6/latency-numbers-for-programmers-web-development/latency.txt](http://prezi.com/pdkvgys-r0y6/latency-numbers-for-programmers-web-development/latency.txt)[https://gist.github.com/jboner/2841832](https://gist.github.com/jboner/2841832)[https://gist.github.com/andrewscaya/2f9e68d4b41f9d747b92fb26b1b60d9f](https://gist.github.com/andrewscaya/2f9e68d4b41f9d747b92fb26b1b60d9f)
    |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 延迟比较数字--------------------------L1缓存引用0.5 ns分支错误预测5 nsL2缓存引用7 ns 14倍L1缓存互斥锁定/解锁25
    ns主存储器引用100 ns 20倍L2缓存，200倍L1缓存使用Zippy压缩1K字节3,000 ns 3 us通过1 Gbps网络发送1K字节10,000
    ns 10 us从SSD*随机读取4K150,000 ns 150 us 〜1GB/秒SSD从内存顺序读取1 MB250,000 ns 250 us在同一数据中心的往返500,000
    ns 500 us从SSD*顺序读取1 MB1,000,000 ns 1,000 us 1 ms 〜1GB/秒SSD，4倍内存磁盘查找10,000,000
    ns 10,000 us 10 ms 20倍数据中心往返从磁盘顺序读取1 MB20,000,000 ns 20,000 us 20 ms 80倍内存，20倍SSD发送数据包CA->荷兰->CA150,000,000
    ns 150,000 us 150 ms注释-----1 ns = 10^-9秒1 us = 10^-6秒 = 1,000 ns1 ms = 10^-3秒
    = 1,000 us = 1,000,000 ns来源------Jeff Dean：[http://research.google.com/people/jeff/](http://research.google.com/people/jeff/)Peter
    Norvig原作：[http://norvig.com/21-days.html#answers](http://norvig.com/21-days.html#answers)贡献-------------来自：[https://gist.github.com/2843375](https://gist.github.com/2843375)"人性化"比较：[https://gist.github.com/2843375](https://gist.github.com/2843375)可视化比较图表：[http://i.imgur.com/k0t1e.png](http://i.imgur.com/k0t1e.png)动画演示：[http://prezi.com/pdkvgys-r0y6/latency-numbers-for-programmers-web-development/latency.txt](http://prezi.com/pdkvgys-r0y6/latency-numbers-for-programmers-web-development/latency.txt)[https://gist.github.com/jboner/2841832](https://gist.github.com/jboner/2841832)[https://gist.github.com/andrewscaya/2f9e68d4b41f9d747b92fb26b1b60d9f](https://gist.github.com/andrewscaya/2f9e68d4b41f9d747b92fb26b1b60d9f)
    |'
- en: It comes as no great surprise that reading from disk is always slower than memory
    and that network I/O calls remain the slowest of them all.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，从磁盘读取始终比从内存读取慢，网络I/O调用仍然是最慢的。
- en: 'Let''s delve a little deeper by having a look at some code that makes a series
    of I/O calls. Our first example will use `cURL`. Let''s have a look at the following
    code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入一点，看一下一些进行一系列I/O调用的代码。我们的第一个例子将使用`cURL`。让我们看一下以下代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s execute the PHP script. We should now see the following results:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们执行PHP脚本。我们现在应该看到以下结果：
- en: '![](assets/041f22c2-984d-4212-8917-08acaed35201.png)Time elapsed and memory
    consumed when running the blocking code script'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行阻塞代码脚本时经过的时间和消耗的内存
- en: This code takes a long time to complete because of the high latency associated
    with accessing the network.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于访问网络的高延迟，这段代码需要很长时间才能完成。
- en: 'If we profile the previous code using `Blackfire.io`, we can see that the 10
    calls to `cURL` take over a second to complete:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`Blackfire.io`对先前的代码进行性能分析，我们会看到10次`cURL`调用需要超过一秒才能完成：
- en: '![](assets/6c3b80dd-fb42-4039-8ffe-7d89fd600ce5.png)Profiling the code shows
    us that the 10 calls to cURL make up the greater part of the script''s total execution
    time'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对代码进行性能分析显示，10次cURL调用占据了脚本总执行时间的大部分
- en: 'Let''s modify our PHP script in order to use asynchronous code to run our `cURL`
    requests simultaneously. Here is the new version of the previous PHP code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改我们的PHP脚本，以使用异步代码同时运行我们的`cURL`请求。以下是先前PHP代码的新版本：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After executing the code, we now get the following results:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 执行代码后，我们现在得到了以下结果：
- en: '![](assets/50c5d212-bd0b-4736-8287-512eddb64286.png)Time elapsed and memory
    consumed when running the non-blocking code script'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行非阻塞代码脚本时经过的时间和消耗的内存
- en: 'As expected, the PHP script is faster as it no longer has to wait for the I/O
    calls to complete before continuing to execute the rest of the code. What is actually
    happening under the hood is multitasking within the same thread. The code''s flow
    of execution is in fact interrupted in order to allow for concurrent execution
    of the many I/O calls. This is possible due to non-blocking code that will yield
    control back to the caller code while waiting for some task to complete, and possibly
    call a callback function when done. If we profile the previous code using `Blackfire.io`,
    we will see this looping in action—the yielding function is actually called more
    than 45,000 times in order to complete all 10 requests:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，PHP脚本更快，因为它不再需要等待I/O调用完成后才能继续执行其余的代码。实际上，在幕后发生的是在同一线程内的多任务处理。事实上，代码的执行流程实际上被中断，以允许许多I/O调用的并发执行。这是由于非阻塞代码会在等待某个任务完成时将控制权交还给调用者代码，并在完成时可能调用回调函数。如果我们使用`Blackfire.io`对先前的代码进行性能分析，我们将看到这种循环的执行——为了完成所有10个请求，yielding函数实际上被调用了45000多次：
- en: '![](assets/69d0a7a5-8fc4-4e0a-aecc-acc8658e1584.png)The yielding function is
    called more than 45,000 times in order to complete all 10 cURL requests'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成所有10个cURL请求，yielding函数被调用了45000多次
- en: Introduced in PHP 5.5, generators allow for what seems to be simultaneous execution
    of different parts of the code and thus easier asynchronous programming. A generator
    is actually an invokable object that implements the iterator interface. The underlying
    principle is therefore to have a loop that will repeatedly call a generator function
    that will, in turn, yield control back to the loop until there is nothing left
    to process, in which case the generator function will return definitely.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP 5.5中引入的生成器允许代码的不同部分似乎同时执行，从而更容易进行异步编程。生成器实际上是一个实现了迭代器接口的可调用对象。其基本原则是有一个循环，将重复调用一个生成器函数，然后将控制权交还给循环，直到没有东西可处理为止，此时生成器函数将返回。
- en: 'Now, let''s dig a little deeper into asynchronous programming with a simple
    code example. To do so, let''s program a basic car race using the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个简单的代码示例深入了解异步编程。为此，让我们使用以下代码编写一个基本的汽车比赛：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, the runner function, which is the main loop, processes the
    three generator functions in random order until none of them have anything left
    to process. The end result is that we never know which car is going to win the
    race, although some of these cars seem to be going faster than others! Let''s
    run this code three times. Here are the results for the first run:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，主循环中的runner函数以随机顺序处理三个生成器函数，直到它们没有任何东西可处理为止。最终结果是，我们永远不知道哪辆车会赢得比赛，尽管其中一些车似乎比其他车快！让我们运行这段代码三次。以下是第一次运行的结果：
- en: '![](assets/ec329fa0-43c6-471b-a0dd-cf765d695fa6.png)Car 2 wins the race!'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车2赢得了比赛！
- en: 'Here are the results for the second run:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第二次运行的结果：
- en: '![](assets/dff2210f-16df-48f2-8bfc-b7e5e66e63f0.png)Car 3 wins the race!'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车3赢得了比赛！
- en: 'Here are the results for the third and final run:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是第三次也是最后一次运行的结果：
- en: '![](assets/aed09156-4ab1-4595-b31d-1406c6b68970.png)Car 1 wins the race!'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车1赢得了比赛！
- en: The end result is what seems to be the simultaneous execution of three different
    functions within the same thread. This is what asynchronous programming is all
    about in its essential principle. Indeed, it is easy to understand how multitasking
    can, for example, be used to help mitigate the effects of a heavy workload on
    a single PHP script by interrupting the script's execution in order to queue some
    tasks using third-party software, like RabbitMQ and Redis. Thus, it becomes possible
    to delay the processing of these tasks until such time as processing is deemed
    appropriate.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是似乎在同一线程内同时执行三个不同函数。这正是异步编程的基本原则。事实上，很容易理解多任务处理是如何被用来帮助减轻单个PHP脚本的重负，通过中断脚本的执行来使用第三方软件（如RabbitMQ和Redis）排队一些任务，从而延迟处理这些任务，直到适当的时候。
- en: Now that we have had a look at multitasking, let's have a look at multithreading.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过了多任务处理，让我们来看看多线程处理。
- en: Multithreading with pthreads
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pthreads进行多线程
- en: '`POSIX Threads`, better known as `pthreads`, is a library that allows a computer
    program to execute multiple processes or threads concurrently by forking child
    processes from its parent process. The `pthreads` library can be used in PHP,
    making it therefore possible to fork processes in the background while executing
    something else simultaneously. Thus, multithreading is another way to cope with
    latency in I/O calls. In order to accomplish this, we will need a thread-safe
    version of PHP with the `pthreads` extension enabled. In our case, we will use
    a Linux for PHP container that is running a **Zend thread-safe** (**ZTS**) version
    of PHP 7.0.29\. Open a new Terminal window, `cd` into the project''s directory
    and enter the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`POSIX Threads`，更为人所知的是`pthreads`，是一个允许计算机程序通过从其父进程分叉子进程来同时执行多个进程或线程的库。`pthreads`库可以在PHP中使用，因此可以在执行其他操作的同时在后台分叉进程。因此，多线程是另一种处理I/O调用延迟的方法。为了实现这一点，我们需要一个带有`pthreads`扩展启用的线程安全版本的PHP。在我们的情况下，我们将使用运行**Zend线程安全**（**ZTS**）版本的PHP
    7.0.29的Linux for PHP容器。打开一个新的终端窗口，`cd`到项目的目录，并输入以下命令：'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you are done entering this command, you should see the following information
    if you enter the `php -v` command in the CLI:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 输入此命令后，如果在CLI中输入`php -v`命令，您应该会看到以下信息：
- en: '![](assets/c9c89704-5a3c-487f-aa71-c3d8db23b34c.png)The ZTS container''s command-line
    interface (CLI)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: ZTS容器的命令行界面（CLI）
- en: 'This message confirms we are using a thread-safe (ZTS) version of PHP. Then,
    on the container''s CLI, enter these commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息确认我们正在使用线程安全（ZTS）版本的PHP。然后，在容器的CLI中，输入这些命令：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can now check that the `pthreads` extension is properly installed by entering
    the command `php -i`. The last command should allow you to see the extension''s
    version number. If this is the case, then the extension was installed correctly:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过输入命令`php -i`来检查`pthreads`扩展是否已正确安装。最后一个命令应该让您看到扩展的版本号。如果是这样，那么扩展已正确安装：
- en: '![](assets/b96c3395-6a96-4d2c-9b65-d33ab7230bad.png)Version 3.1.6 of the pthreads
    extension is now installed'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: pthread扩展的3.1.6版本现已安装
- en: 'Now that the `pthreads` library is installed and enabled, let''s proceed to
    use it by trying to create multiple threads that will truly execute simultaneously
    on the computer''s CPUs. To do so, we will use the following source code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`pthreads`库已安装并启用，让我们继续使用它，尝试在计算机的CPU上创建多个线程，这些线程将真正同时执行。为此，我们将使用以下源代码：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once executed, we obtain the following output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，我们获得以下输出：
- en: '![](assets/e355a456-01b0-4f24-a56a-2311798b9121.png)Threads were executed simultaneously'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 线程同时执行
- en: The results clearly show that the threads were executed simultaneously as the
    total elapsed time for the script was 10 seconds even though each thread slept
    for at least a few seconds. If this synchronous blocking code was executed without
    multithreading, it would have taken approximately 40 seconds in all to complete
    execution. Multitasking would not have been an appropriate solution in this case,
    as the blocking calls to the `sleep()` function would have prevented each generator
    from yielding control to the main loop.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 结果清楚地表明，线程是同时执行的，因为脚本的总经过时间为10秒，即使每个线程至少睡了几秒。如果没有使用多线程执行此同步阻塞代码，完成执行可能需要大约40秒。在这种情况下，多任务处理不是一个合适的解决方案，因为对`sleep()`函数的阻塞调用将阻止每个生成器将控制权让给主循环。
- en: Now that we have seen both multitasking via asynchronous programming and multithreading
    via the `POSIX Threads` library, we will turn our attention to a PHP library that
    can be very useful when it comes to programming asynchronously, namely the `ReactPHP`
    library.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了通过异步编程进行多任务处理和通过`POSIX Threads`库进行多线程处理，我们将把注意力转向一个在编程异步时非常有用的PHP库，即`ReactPHP`库。
- en: Using the ReactPHP library
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ReactPHP库
- en: '`ReactPHP` is an event-driven, non-blocking I/O library. This library relies
    essentially on an event loop that polls file descriptors, uses timers and defers
    callbacks by registering and executing outstanding ticks on each iteration of
    the loop.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactPHP`是一个事件驱动的、非阻塞I/O库。这个库基本上依赖于一个事件循环，它轮询文件描述符，使用定时器，并通过在每次循环迭代中注册和执行未完成的tick来推迟回调。'
- en: '`ReactPHP` is based on the Reactor pattern which, according to Douglas C. Schmidt,
    is a "*design pattern that handles service requests that are delivered concurrently
    to an application by one or more clients. Each service in an application may consist
    of several methods and is represented by a separate event handler that is responsible
    for dispatching service-specific requests. Dispatching of event handlers is performed
    by an initiation dispatcher, which manages the registered event handlers. Demultiplexing
    of service requests is performed by a synchronous event demultiplexer.*" In Schmidt’s
    original paper *Reactor: An Object Behavioral Pattern for Demultiplexing and Dispatching
    Handles for Synchronous Events*, we can find this UML representation of this pattern:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReactPHP`基于Reactor模式，根据Douglas C. Schmidt的说法，Reactor模式是“*一种处理一个或多个客户端并发传递给应用程序的服务请求的设计模式。应用程序中的每个服务可能由多个方法组成，并由一个单独的事件处理程序表示，负责分派特定于服务的请求。事件处理程序的分派由一个初始化分派器执行，该分派器管理注册的事件处理程序。服务请求的多路复用由同步事件多路复用器执行*。”在Schmidt的原始论文*Reactor:
    An Object Behavioral Pattern for Demultiplexing and Dispatching Handles for Synchronous
    Events*中，我们可以找到这种模式的UML表示：'
- en: '![](assets/68abe73f-bedb-4e6b-81ed-91e79c423c02.png)The Reactor pattern according
    to Douglas C. Schmidt'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Douglas C. Schmidt的说法，Reactor模式
- en: 'Let’s start exploring this asynchronous programming library by installing it
    in our code repository. On the container’s CLI, enter the following commands:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在我们的代码库中安装它来开始探索这个异步编程库。在容器的CLI中，输入以下命令：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once the library is installed through Composer, you can try any of the example
    scripts that you can find in the examples directory. These code examples come
    from *ReactPHP*''s main code repository. In our case, we will start by having
    a look at the `parallel-download.php` script. Here is its source code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦库通过Composer安装，你可以尝试examples目录中找到的任何示例脚本。这些代码示例来自*ReactPHP*的主代码库。在我们的例子中，我们将首先看一下`parallel-download.php`脚本。以下是它的源代码：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Essentially, this script creates two streams, sets them to the non-blocking
    mode and registers the streams with the loop. A timer is added to the loop in
    order to echo a message every 5 seconds. Finally, it runs the loop.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这个脚本创建了两个流，将它们设置为非阻塞模式，并将这些流注册到循环中。定时器被添加到循环中，以便每5秒回显一条消息。最后，它运行了循环。
- en: 'Let''s have a look at this script in action using the following command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下命令来看一下这个脚本的运行情况：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here are the results:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![](assets/ff636036-744b-4547-a6ee-a5cb40ad8c40.png)The two packages are downloaded
    asynchronously'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/ff636036-744b-4547-a6ee-a5cb40ad8c40.png)这两个包是异步下载的'
- en: As you can see, the downloads were executed in a parallel, asynchronous and
    reactive way.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，下载是以并行、异步和反应式的方式执行的。
- en: 'Let''s continue our short journey into the world of ReactPHP by having a little
    bit of fun with the `tcp-chat.php` script that is included in the code examples.
    Here is the source code of this code example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续通过在代码示例中包含的`tcp-chat.php`脚本来继续我们对ReactPHP世界的短暂旅程。以下是这个代码示例的源代码：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The script creates a socket server that listens on port 4000 and is informed
    by the loop of incoming connections by listening for a connection event. Upon
    notification of the event, the socket server injects the connection object into
    the handler. The connection object then starts listening for the data event which
    will trigger it to do something with the data received from the socket server's
    client. In the case of this chat script, the connection object will trigger the
    write methods of all registered connection objects found in the `SplObjectStorage` object,
    thus effectively sending the message to all currently connected chat clients.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本创建了一个在4000端口监听的套接字服务器，并通过监听连接事件被循环通知有新连接。在收到事件通知后，套接字服务器将连接对象注入处理程序。连接对象然后开始监听数据事件，这将触发它对从套接字服务器客户端接收的数据进行处理。在这个聊天脚本的情况下，连接对象将触发`SplObjectStorage`对象中所有注册连接对象的写入方法，从而有效地将消息发送给当前连接的所有聊天客户端。
- en: 'First, start the chat server by running the script:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过运行脚本启动聊天服务器：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, open three new Terminal windows and connect to our *Linux for PHP* *Docker*
    container by entering the following commands in each window:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开三个新的终端窗口，并通过在每个窗口中输入以下命令来连接到我们的*Linux for PHP* *Docker*容器：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On each container''s CLI, enter the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个容器的CLI中，输入以下命令：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once connected through `telnet`, just have fun sending messages back and forth
    from one Terminal window to the other:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`telnet`连接后，只需在一个终端窗口和另一个终端窗口之间来回发送消息，玩得开心：
- en: '![](assets/5ef175eb-8d2b-4bf4-b304-06c76043129b.png)Sending messages from one
    terminal window to the others'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/5ef175eb-8d2b-4bf4-b304-06c76043129b.png)从一个终端窗口向其他终端窗口发送消息'
- en: Obviously, what has been done here using Terminal windows within the same container
    could have been done using Terminal windows on different computers through networking.
    This example shows us just how powerful asynchronous programming can be.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，通过同一个容器内的终端窗口所做的工作也可以通过网络连接到不同计算机上的终端窗口来完成。这个例子向我们展示了异步编程有多么强大。
- en: 'Let''s complete our survey of *ReactPHP*''s code examples by having a look
    at the `scalability.php` script. Here is its source code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看`scalability.php`脚本来完成我们对*ReactPHP*代码示例的调查。以下是它的源代码：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The script creates a socket server which is then attached to the main event
    loop in order to call a lambda function when a request is sent to the server.
    The lambda function then executes the code that will send the answer back to the
    client by writing it to the accepted stream socket.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本创建了一个套接字服务器，然后将其附加到主事件循环中，以便在向服务器发送请求时调用一个lambda函数。然后，lambda函数执行将答复发送回客户端的代码，通过将其写入接受的流套接字。
- en: 'Let''s run this code with the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下命令运行这段代码：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, open another Terminal window and connect it to our *Linux for PHP* *Docker*
    container:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开另一个终端窗口，并将其连接到我们的*Linux for PHP* *Docker*容器：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, query the server using `wget`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`wget`查询服务器：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once done, you should get the following responses for each request:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你应该得到每个请求的以下响应：
- en: '![](assets/9153e175-979f-4747-bf75-1a6799310991.png)Connecting to each available
    port of the web server'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9153e175-979f-4747-bf75-1a6799310991.png)连接到Web服务器的每个可用端口'
- en: 'This is what you should see on the server side:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在服务器端应该看到的：
- en: '![](assets/1e99bfc2-3c61-4949-8724-c490a238df88.png)The server confirms having
    served all these requests on all these ports'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1e99bfc2-3c61-4949-8724-c490a238df88.png)服务器确认已在所有这些端口上为所有这些请求提供服务'
- en: Again, you can see how powerful *ReactPHP* can be, as only a few lines of code
    are enough to create a scalable web server.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，你可以看到*ReactPHP*有多么强大，只需几行代码就足以创建一个可扩展的Web服务器。
- en: Moreover, we highly recommend that all the files from the *ReactPHP* project
    that are included in our repository be explored and tried out so you can fully
    appreciate what this library can do for you as a developer when it comes to asynchronous
    programming.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们强烈建议探索并尝试我们存储库中包含的*ReactPHP*项目的所有文件，这样你就可以充分体会到这个库在异步编程方面为开发者能做些什么。
- en: Also, there are other great asynchronous PHP libraries that can help you as
    you master this new way to develop and speed up high latency I/O applications.
    One such library is *Amp* ([https://amphp.org/](https://amphp.org/)). It is well
    worth the time to explore these very useful libraries while mastering the art
    of asynchronous programming.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有其他出色的异步PHP库可以帮助您掌握这种新的开发方式，并加速高延迟I/O应用程序。其中一个这样的库是*Amp*（[https://amphp.org/](https://amphp.org/)）。在掌握异步编程艺术的过程中，探索这些非常有用的库是非常值得的。
- en: Finally, for more information on asynchronous programming in PHP, you can listen
    to a great presentation given on this topic by *Christopher Pitt* at *Nomad PHP*
    ([https://nomadphp.com/asynchronous-php/](https://nomadphp.com/asynchronous-php/)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要了解有关PHP异步编程的更多信息，您可以听*Christopher Pitt*在*Nomad PHP*上关于这个主题的精彩演讲（[https://nomadphp.com/asynchronous-php/](https://nomadphp.com/asynchronous-php/)）。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to determine the best strategies to cope
    with I/O calls and how to implement these strategies. Moreover, we have seen how
    to use the `ReactPHP` library and how to benefit from event-driven programming
    when dealing with asynchronous I/O calls.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何确定应对I/O调用的最佳策略以及如何实施这些策略。此外，我们还了解了如何使用`ReactPHP`库以及在处理异步I/O调用时如何从事件驱动编程中获益。
- en: In the next chapter, we will learn how to measure database performance, ranging
    from applying simple measurement techniques to using advanced benchmarking tools.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何测量数据库性能，从应用简单的测量技术到使用高级基准测试工具。
