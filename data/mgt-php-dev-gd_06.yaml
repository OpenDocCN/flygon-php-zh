- en: Chapter 6. The Magento API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。Magento API
- en: In the previous chapter, we extended the Magento backend and learned how to
    use some of the backend components so that store owners can manage and manipulate
    the gift registry data of each customer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们扩展了Magento后端，并学习了如何使用一些后端组件，以便商店所有者可以管理和操作每个客户的礼品注册数据。
- en: 'In this chapter we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The Magento Core API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Magento核心API
- en: The multiple API protocols available (REST, SOAP, XML-RPC)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的多个API协议（REST、SOAP、XML-RPC）
- en: How to use the Core API
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用核心API
- en: How to extend the API to implement new functionality
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何扩展API以实现新功能
- en: How to restrict parts of the API to specific web user roles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将API的部分限制为特定的Web用户角色
- en: While the backend provides an interface for day-to-day operations, sometimes
    we will need to access and/or transmit data from and to third-party systems. Magento
    already provides API functionality for most of the core features, but for our
    custom gift registry extension, we will need to extend the `Mage_Api` functionality.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然后端提供了日常操作的界面，但有时我们需要访问和/或传输来自第三方系统的数据。Magento已经为大多数核心功能提供了API功能，但对于我们的自定义礼品注册扩展，我们需要扩展`Mage_Api`功能。
- en: The Core API
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 核心API
- en: Often while talking about the API, I heard developers talking about the Magento
    SOAP API or the Magento XML-RPC API or the RESTful API. But the important fact
    is that these are not separate APIs for each of these protocols; instead, Magento
    has a single Core API.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论API时，我经常听到开发人员谈论Magento SOAP API或Magento XML-RPC API或RESTful API。但重要的事实是，这些并不是针对每个协议的单独API；相反，Magento有一个单一的核心API。
- en: As you might notice, Magento is built mostly around abstraction and configuration
    (mostly XML), and the Magento API is no exception. We have a single core API and
    adapters for each of the different protocol types. This is incredibly flexible,
    and if we want to, we can implement our own adapter for another protocol.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能注意到的，Magento主要建立在抽象和配置（主要是XML）周围，Magento API也不例外。我们有一个单一的核心API和每种不同协议类型的适配器。这是非常灵活的，如果我们愿意，我们可以为另一个协议实现自己的适配器。
- en: 'The core Magento API gives us the ability to manage products, categories, attributes,
    orders, and invoices. This is done by exposing three of the core modules:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 核心Magento API使我们能够管理产品、类别、属性、订单和发票。这是通过暴露三个核心模块来实现的：
- en: '`Mage_Catalog`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage_Catalog`'
- en: '`Mage_Sales`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage_Sales`'
- en: '`Mage_Customer`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Mage_Customer`'
- en: 'The API supports three different types: SOAP, XML-RPC, and REST. Now, if you
    have done web development outside Magento and with other APIs, it is most likely
    that those APIs have been RESTful APIs.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: API支持三种不同类型：SOAP、XML-RPC和REST。现在，如果您在Magento之外进行了Web开发并使用了其他API，那么很可能那些API是RESTful
    API。
- en: Before we jump into the specifics of the Magento API architecture, it is important
    that we understand the differences between each of the supported API types.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究Magento API架构的具体细节之前，重要的是我们了解每种支持的API类型之间的区别。
- en: XML-RPC
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XML-RPC
- en: XML-RPC was one of the first protocols supported by Magento and it is the oldest
    of them all. This protocol has a single endpoint on which all the functions are
    called and accessed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: XML-RPC是Magento支持的第一个协议，也是最古老的协议。该协议有一个单一的端点，所有功能都在此端点上调用和访问。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**XML-RPC** is a **remote procedure call** (**RPC**) protocol that uses XML
    to encode its calls and HTTP as a transport mechanism.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**XML-RPC**是一种使用XML编码其调用和HTTP作为传输机制的**远程过程调用**（**RPC**）协议。'
- en: Since there is only a single endpoint, XML-RPC is easy to use and maintain;
    its purpose is to be a simple and effective protocol for sending and receiving
    data. The implementation uses straightforward XML to encode and decode a remote
    procedure call along with the parameters.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于只有一个单一的端点，XML-RPC易于使用和维护；它的目的是成为发送和接收数据的简单有效的协议。实现使用简单的XML来编码和解码远程过程调用以及参数。
- en: 'However, this comes at a cost, and there are several problems with the whole
    XML-RPC protocol:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这是有代价的，整个XML-RPC协议存在几个问题：
- en: Lack of discoverability and documentation.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现性和文档不足。
- en: Parameters are anonymous and XML-RPC relies on the order of the parameters to
    differentiate them.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数是匿名的，XML-RPC依赖于参数的顺序来区分它们。
- en: Simplicity is the greatest strength and the greatest issue with XML-RPC. While
    most of the tasks can easily be achieved with XML-RPC, some tasks will require
    you to bend over backwards to achieve something that should be straightforward
    to implement.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单性是XML-RPC的最大优势，也是最大问题所在。虽然大多数任务可以很容易地通过XML-RPC实现，但有些任务需要您费尽周折才能实现应该很简单的事情。
- en: SOAP was designed to address XML-RPC limitations and provide a more robust protocol.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP旨在解决XML-RPC的局限性并提供更强大的协议。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about XML-RPC you can go to the following link:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有关XML-RPC的更多信息，您可以访问以下链接：
- en: '[http://en.wikipedia.org/wiki/XML-RPC](http://en.wikipedia.org/wiki/XML-RPC)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/XML-RPC](http://en.wikipedia.org/wiki/XML-RPC)'
- en: SOAP
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SOAP
- en: The SOAP v1 was one of the first protocols supported by Magento along with XML-RPC
    since Magento 1.3 SOAP v2.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 自Magento 1.3以来，SOAP v1是Magento支持的第一个协议，与XML-RPC一起。
- en: Note
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**SOAP**, originally defined as **Simple Object Access Protocol**, is a protocol
    specification for exchanging structured information in the implementation of web
    services in computer networks.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**SOAP**最初定义为**简单对象访问协议**，是用于在计算机网络中实现Web服务的结构化信息交换的协议规范。'
- en: A **SOAP request** is basically an HTTP POST request containing a SOAP envelope,
    a header, and a body.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**SOAP请求**基本上是一个包含SOAP信封、头和主体的HTTP POST请求。'
- en: 'The core of SOAP is **Web Services Description Language** (**WSDL**), which
    is basically XML. WSDL is used to describe the functionality of a web service,
    in this case our API methods. This is achieved by using the following series of
    predetermined objects:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP的核心是**Web服务描述语言**（**WSDL**），基本上是XML。WSDL用于描述Web服务的功能，这里是我们的API方法。这是通过使用以下一系列预定的对象来实现的：
- en: '**Types**: These are used to describe the data transmitted with the API; types
    are defined using XML Schema, a special language for this purpose'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：用于描述与API传输的数据；类型使用XML Schema进行定义，这是一种专门用于此目的的语言'
- en: '**Message**: This is used to specify the information needed to perform each
    one of the operations; in the case of Magento, our API methods will always use
    request and respond messages'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息**：用于指定执行每个操作所需的信息；在Magento的情况下，我们的API方法将始终使用请求和响应消息'
- en: '**Port type**: These are used to define the operations that can be performed
    and their corresponding messages'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口类型**：用于定义可以执行的操作及其相应的消息'
- en: '**Port**: This is used to define the connection point; in the case of Magento,
    a simple string is used'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口**：用于定义连接点；在Magento的情况下，使用简单的字符串'
- en: '**Service**: This is used to specify which functions are exposed through the
    API'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：用于指定通过API公开的功能'
- en: '**Bindings**: They are used to define the operations and the interface with
    the SOAP protocol'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定**：用于定义与SOAP协议的操作和接口'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For more information about the SOAP protocol you can refer to the following
    website:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SOAP协议的更多信息，请参考以下网站：
- en: '[http://en.wikipedia.org/wiki/SOAP](http://en.wikipedia.org/wiki/SOAP)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/SOAP](http://en.wikipedia.org/wiki/SOAP)'
- en: 'All the WSDL configuration is contained inside each module `wsdl.xml` file;
    for example, let''s take a look at an excerpt of the Catalog Product API:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有WSDL配置都包含在每个模块的`wsdl.xml`文件中；例如，让我们看一下目录产品API的摘录：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/etc/wsdl.xml`。
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By using WSDL we can document, list, and support more complex data types.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用WSDL，我们可以记录、列出和支持更复杂的数据类型。
- en: RESTful API
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RESTful API
- en: The RESTful API is the new addition to the family of protocols supported by
    Magento and is only available on Magento CE 1.7 or older.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API是Magento支持的协议家族的新成员，仅适用于Magento CE 1.7或更早版本。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A **RESTful web** **service** (also called a **RESTful web API**) is a web service
    implemented using HTTP and the principles of REST.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**RESTful web** **service**（也称为**RESTful web API**）是使用HTTP和REST原则实现的Web服务。'
- en: 'A RESTful API can be defined by the following three aspects:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API可以通过以下三个方面来定义：
- en: It makes usage of the standard of HTTP methods, such as GET, POST, DELETE, and
    PUT
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用标准的HTTP方法，如GET、POST、DELETE和PUT
- en: Its exposed URIs are formatted in a directory-like structure
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其公开的URI以目录结构的形式进行格式化
- en: It uses JSON or XML to transfer information
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用JSON或XML来传输信息
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The REST API supports the response in two formats, which are XML and JSON.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: REST API支持两种格式的响应，即XML和JSON。
- en: One of the advantages that REST has over SOAP and XML-RPC is that all interaction
    with the REST API is done through the HTTP protocol, meaning it can be used by
    any programming language virtually.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: REST相对于SOAP和XML-RPC的优势之一是，与REST API的所有交互都是通过HTTP协议完成的，这意味着它几乎可以被任何编程语言使用。
- en: 'The Magento REST API has the following characteristics:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Magento REST API具有以下特点：
- en: Resources are accessed by making an HTTP request to the Magento API service
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过向Magento API服务发出HTTP请求来访问资源
- en: The service replies with the data for the request or a status indicator or even
    both
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务回复请求的数据或状态指示器，甚至两者都有
- en: All resources can be accessed through `https://magento.localhost.com/api/rest/`
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有资源都可以通过`https://magento.localhost.com/api/rest/`访问
- en: Resources return HTTP status codes, such as `HTTP Status Code 200`, to indicate
    success on a response, or `HTTP Status Code 400` to indicate a bad request
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源返回HTTP状态码，例如`HTTP状态码200`表示响应成功，或`HTTP状态码400`表示错误请求
- en: Request to a particular resource is done by adding a particular path to the
    base URL (`https://magento.localhost.com/api/rest/`)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将特定路径添加到基本URL（`https://magento.localhost.com/api/rest/`）来请求特定资源
- en: 'REST uses **HTTP verbs** to manage the states of resources. In the Magento
    implementation four verbs are available: GET, POST, PUT, and DELETE. For this
    reason, using the RESTful API is trivial in most cases.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: REST使用**HTTP动词**来管理资源的状态。在Magento实现中，有四个动词可用：GET、POST、PUT和DELETE。因此，在大多数情况下，使用RESTful
    API是微不足道的。
- en: Using the API
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API
- en: Now that we have clarified each of the available protocols, let's explore what
    we can do with the Magento API and how to do it with each of the available protocols.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经澄清了每个可用协议，让我们探索一下Magento API可以做什么，以及如何使用每个可用协议进行操作。
- en: We will use the product endpoint as an example for accessing and working with
    the different API protocols.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用产品端点作为访问和处理不同API协议的示例。
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The examples are provided in PHP and these use three different protocols. For
    complete examples in PHP and to see examples in other programming languages visit
    [http://magedevguide.com](http://magedevguide.com).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 示例是用PHP提供的，并且使用了三种不同的协议。要获取PHP的完整示例并查看其他编程语言的示例，请访问[http://magedevguide.com](http://magedevguide.com)。
- en: Setting up the API credentials for XML-RPC/SOAP
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为XML-RPC/SOAP设置API凭据
- en: Before we get started, we need to create a set of web service credentials in
    order to access the API functions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要创建一组Web服务凭据，以便访问API功能。
- en: The first thing we need to set up is the API user role. **Roles** control the
    permissions for the API by using **Access Control Lists** (**ACL**). By implementing
    this design pattern, Magento is able to restrict certain parts of its API to specific
    users.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置API用户角色。**角色**通过使用**访问控制列表**（**ACL**）来控制API的权限。通过实施这种设计模式，Magento能够限制其API的某些部分只对特定用户开放。
- en: 'Later in this chapter, we will learn how we can add our custom functions to
    the ACL and secure our custom extensions'' API methods. For now, we just need
    to create a role with full permissions by executing the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们将学习如何将自定义函数添加到ACL并保护自定义扩展的API方法。现在，我们只需要通过执行以下步骤创建一个具有完全权限的角色：
- en: Go to the Magento backend.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Magento后端。
- en: Go to **System** | **Web Services** | **Roles** from the main navigation menu.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主导航菜单转到**系统** | **Web服务** | **角色**。
- en: Click on the **Add New Role** button.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**添加新角色**按钮。
- en: As shown in the following screenshot, you will be requested to provide a role
    name and specify the role resources:![Setting up the API credentials for XML-RPC/SOAP](graphics/3060OS_06_02.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，您将被要求提供角色名称并指定角色资源：![为XML-RPC/SOAP设置API凭据](graphics/3060OS_06_02.jpg)
- en: By default, the **Resources Access** option is set to **Custom** and no resources
    are selected. In our case, we will change the **Resource Access** option by selecting
    **All** from the drop-down menu.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，**资源访问**选项设置为**自定义**，未选择任何资源。在我们的情况下，我们将通过从下拉菜单中选择**全部**来更改**资源访问**选项。
- en: Click on the **Save Role** button.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**保存角色**按钮。
- en: 'Now that we have a valid role in our store, let''s proceed to create a web
    API user:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在商店中有一个有效的角色，让我们继续创建Web API用户：
- en: Go to the Magento backend.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Magento后端。
- en: Go to **System** | **Web Services** | **Users** from the main navigation menu.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主导航菜单转到**系统** | **Web服务** | **用户**。
- en: Click on the **Add New User** button.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**添加新用户**按钮。
- en: Next, we will be asked for the user information as shown in the following screenshot:![Setting
    up the API credentials for XML-RPC/SOAP](graphics/3060OS_06_01.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将被要求提供用户信息，如下截图所示：![为XML-RPC/SOAP设置API凭据](graphics/3060OS_06_01.jpg)
- en: In the **API Key** and **API Key Confirmation** fields enter your desired password.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**API密钥**和**API密钥确认**字段中输入您想要的密码。
- en: Click on the **User Role** tab.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**用户角色**选项卡。
- en: Select the user role that we just created.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们刚创建的用户角色。
- en: Click on the **Save User** button.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**保存用户**按钮。
- en: The reason that we need to create a username and role for accessing the API
    is that every single API function requires a session token to be passed as a parameter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为访问API创建用户名和角色的原因是，每个API函数都需要传递会话令牌作为参数。
- en: For that reason, every time we need to use the API, the first call that we have
    to make is to the `login` function, which will return a valid session token ID.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每次我们需要使用API时，我们必须首先调用`login`函数，该函数将返回有效的会话令牌ID。
- en: Setting up the REST API credentials
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置REST API凭据
- en: The new RESTful API is slightly different in terms of authentication; instead
    of using the traditional Magento web service users, it uses a three-legged OAuth
    1.0 protocol to provide authentication.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 新的RESTful API在身份验证方面略有不同；它不是使用传统的Magento网络服务用户，而是使用三足OAuth 1.0协议来提供身份验证。
- en: 'OAuth works by asking the user to authorize its application. When the user
    registers an application, he/she needs to fill in the following fields:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth通过要求用户授权其应用程序来工作。当用户注册应用程序时，他/她需要填写以下字段：
- en: '**User**: This is a customer, who has an account with Magento and can use the
    services with the API.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：这是一个客户，他在Magento上有帐户，并可以使用API的服务。'
- en: '**Consumer**: This is a third-party application that uses OAuth to access the
    Magento API.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者**：这是使用OAuth访问Magento API的第三方应用程序。'
- en: '**Consumer Key**: This is a unique value used to identify a user with Magento.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者密钥**：这是用于识别Magento用户的唯一值。'
- en: '**Consumer Secret**: This is a secret used by the customer to guarantee the
    ownership of the consumer key. This value is never passed in the request.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费者密钥**：这是客户用来保证消费者密钥所有权的秘密。此值永远不会在请求中传递。'
- en: '**Request Token**: This value is used by the consumer (application) to obtain
    authorization from the user to access the API resources.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求令牌**：此值由消费者（应用程序）用于从用户那里获取授权以访问API资源。'
- en: '**Access Token**: This is returned in exchange of the request token and on
    successful authentication.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问令牌**：这是在成功认证时以请求令牌交换返回的。'
- en: 'Let''s proceed to register our application by going to **System** | **Web Services**
    | **REST - OAuth Consumers** and selecting **Add New** in the **Admin** panel:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续通过转到**系统** | **Web服务** | **REST - OAuth消费者**并在**管理**面板中选择**添加新**来注册我们的应用程序：
- en: '![Setting up the REST API credentials](graphics/3060OS_06_03.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![设置REST API凭据](graphics/3060OS_06_03.jpg)'
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One important thing to notice is that a callback URL must be defined, to which
    the user will be redirected after successfully authorizing the application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一件重要的事情是必须定义回调URL，用户在成功授权应用程序后将被重定向到该URL。
- en: Our first step is to learn how to get this session token ID on each of the available
    API protocols.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是学习如何在每个可用的API协议中获取此会话令牌ID。
- en: 'To get session token ID in XML-RPC, we need to execute the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要在XML-RPC中获取会话令牌ID，我们需要执行以下代码：
- en: '[PRE1]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To get a session token ID in SOAP v2, we need to execute the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SOAP v2中获取会话令牌ID，我们需要执行以下代码：
- en: '[PRE2]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To get a session token ID in REST, we need to execute the following steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要在REST中获取会话令牌ID，我们需要执行以下步骤：
- en: '[PRE3]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Loading and reading data
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载和读取数据
- en: 'The `Mage_Catalog` module product endpoint has the following exposed methods
    that we can use to manage products:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`Mage_Catalog`模块产品端点具有以下公开方法，我们可以使用这些方法来管理产品：'
- en: '`catalog_product.currentStore`: This sets/gets the current store view'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.currentStore`：设置/获取当前商店视图'
- en: '`catalog_product.list`: This retrieves products list using filters'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.list`：使用过滤器检索产品列表'
- en: '`catalog_product.info`: This retrieves a product'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.info`：检索产品'
- en: '`catalog_product.create`: This creates a new product'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.create`：创建新产品'
- en: '`catalog_product.update`: This updates a product'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.update`：更新产品'
- en: '`catalog_product.setSpecialPrice`: This sets a special price for a product'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.setSpecialPrice`：为产品设置特殊价格'
- en: '`catalog_product.getSpecialPrice`: This gets a special price for a product'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.getSpecialPrice`：获取产品的特殊价格'
- en: '`catalog_product.delete`: This deletes a product'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`catalog_product.delete`：删除产品'
- en: Right now, the functions that are of particular interest for us are `catalog_product.list`
    and `catalog_product.info`. Let's see how we can use the API to retrieve product
    data from our staging store.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们特别感兴趣的功能是`catalog_product.list`和`catalog_product.info`。让我们看看如何使用API从我们的暂存商店中检索产品数据。
- en: 'To retrieve product data from our staging store in XML-RPC, execute the following
    code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的暂存商店中以XML-RPC检索产品数据，请执行以下代码：
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To retrieve product data from our staging store in SOAPv2, execute the following
    code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的暂存商店中以SOAPv2检索产品数据，请执行以下代码：
- en: '[PRE5]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To retrieve product data from our staging store in REST, execute the following
    code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的暂存商店中以REST检索产品数据，请执行以下代码：
- en: '[PRE6]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Regardless of the protocol, we will get back a list of all the products' SKUs,
    but what if we want to filter that product list based on an attribute? Well, Magento
    lists functions that allow us to filter the product list based on an attribute
    by passing a parameter. Having said that, let's see how we can add filters to
    our product list call.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种协议，我们都将得到所有产品的SKU列表，但是如果我们想根据属性筛选产品列表呢？Magento列出了允许我们根据属性筛选产品列表的功能，通过传递参数。话虽如此，让我们看看如何为我们的产品列表调用添加过滤器。
- en: 'To add filters to our product list call in XML-RPC, execute the following code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要在XML-RPC中为我们的产品列表调用添加过滤器，请执行以下代码：
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To add filters to our product list call in SOAPv2, execute the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SOAPv2中为我们的产品列表调用添加过滤器，请执行以下代码：
- en: '[PRE8]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With REST, things are not that simple and it is not possible to retrieve a
    product collection filtered by an attribute. However, we are able to retrieve
    all the products that belong to a specific category by executing the following
    code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用REST，事情并不那么简单，无法按属性检索产品集合。但是，我们可以通过执行以下代码来检索属于特定类别的所有产品：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Updating data
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新数据
- en: Now that we are able to retrieve product information from the Magento API, we
    can start updating the content of each product.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够从Magento API中检索产品信息，我们可以开始更新每个产品的内容。
- en: The `catalog_product.update` method will allow us to modify any of the product
    attributes; the function call takes the following parameters.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`catalog_product.update`方法将允许我们修改任何产品属性；函数调用需要以下参数。'
- en: 'For updating data in XML-RPC, execute the following code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要在XML-RPC中更新数据，请执行以下代码：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For updating data in SOAPv2, execute the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SOAPv2中更新数据，请执行以下代码：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For updating data in REST, execute the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要在REST中更新数据，请执行以下代码：
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Deleting a product
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除产品
- en: Deleting products by using the API is very simple and probably one of the most
    common operations.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用API删除产品非常简单，可能是最常见的操作之一。
- en: 'For deleting products in XML-RPC, execute the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要在XML-RPC中删除产品，请执行以下代码：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For deleting products in SOAPv2, execute the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要在SOAPv2中删除产品，请执行以下代码：
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For deleting the code in REST, execute the following code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除REST中的代码，请执行以下代码：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Extending the API
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展API
- en: 'Now that we have a basic understanding of how to use the Magento Core API,
    we can proceed to extend and add our own custom functionality. In order to add
    new API functionality, we have to modify/create the following files:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经基本了解了如何使用Magento Core API，我们可以继续扩展并添加我们自己的自定义功能。为了添加新的API功能，我们必须修改/创建以下文件：
- en: '`wsdl.xml`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wsdl.xml`'
- en: '`api.xml`'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api.xml`'
- en: '`api.php`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api.php`'
- en: 'In order to make our registries accessible for third-party systems, we need
    to create and expose the following functions:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的注册表可以被第三方系统访问，我们需要创建并公开以下功能：
- en: '`giftregistry_registry.list`: This retrieves a list of all the registry IDs
    and takes an optional customer ID parameter'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giftregistry_registry.list`：这将检索所有注册表ID的列表，并带有可选的客户ID参数'
- en: '`giftregistry_registry.info`: This retrieves all the registry information and
    takes a required `registry_id` parameter'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giftregistry_registry.info`：这将检索所有注册表信息，并带有必需的`registry_id`参数'
- en: '`giftregistry_item.list`: This retrieves a list of all the registry item IDs
    associated to a registry and takes a required `registry_id` parameter'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giftregistry_item.list`：这将检索与注册表关联的所有注册表项ID的列表，并带有必需的`registry_id`参数'
- en: '`giftregistry_item.info`: This retrieves the product and detailed information
    of a registry item and takes one required `item_id` parameter'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giftregistry_item.info`：这将检索注册表项的产品和详细信息，并带有一个必需的`item_id`参数'
- en: So far, we have only added reading operations. Let's now try to include API
    methods for updating, deleting, and creating registries and registry items.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只添加了读取操作。现在让我们尝试包括用于更新、删除和创建注册表和注册表项的API方法。
- en: Tip
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To see the answer with the complete code and full breakdown, visit [http://www.magedevguide.com/](http://www.magedevguide.com/).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整代码和详细说明的答案，请访问[http://www.magedevguide.com/](http://www.magedevguide.com/)。
- en: 'Our first step is to implement the API class and the required functions:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是实现API类和所需的功能：
- en: Navigate to the `Model` directory.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`Model`目录。
- en: 'Create a new class called `Api.php` and place the following placeholder content
    inside it:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Api.php`的新类，并将以下占位符内容放入其中：
- en: The file location is `app/code/local/Mdg/Giftregistry/Model/Api.php`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/Model/Api.php`。
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Create a new directory called `Api/`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Api/`的新目录。
- en: 'Inside `Api/` create a new class called `V2.php` and place the following placeholder
    content inside it:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Api/`内创建一个名为`V2.php`的新类，并将以下占位符内容放入其中：
- en: The file location is `app/code/local/Mdg/Giftregistry/Model/Api/V2.php`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/Model/Api/V2.php`。
- en: '[PRE17]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The first thing you might notice is that the `V2.php` file is extending the
    `API` class we just created. The only difference is that the `V2` class is used
    by the `SOAP_v2` protocol, while the regular `API` class is used for all other
    requests.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能注意到的第一件事是`V2.php`文件正在扩展我们刚刚创建的`API`类。唯一的区别是`V2`类由`SOAP_v2`协议使用，而常规的`API`类用于所有其他请求。
- en: 'Let''s update the `API` class with the following working code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下有效代码更新`API`类：
- en: The file location is `app/code/local/Mdg/Giftregistry/Model/Api.php`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/Model/Api.php`。
- en: '[PRE18]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As we can see from the preceding code, we are not doing anything new. Each function
    is in charge of loading either a collection of Magento objects or a specific object
    based on the required parameters.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中可以看到，我们并没有做任何新的事情。每个函数负责加载Magento对象的集合或基于所需参数加载特定对象。
- en: 'In order to expose this new function to the Magento API, we need to configure
    the XML files we created before. Let''s start by updating the `api.xml` file:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这个新功能暴露给Magento API，我们需要配置之前创建的XML文件。让我们从更新`api.xml`文件开始：
- en: Open the `api.xml` file.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`api.xml`文件。
- en: 'Add the following XML code:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下XML代码：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/api.xml`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/etc/api.xml`。
- en: '[PRE19]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'There is one more file we need to update to make sure the SOAP adapters pick
    up our new API functions:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个文件需要更新，以确保SOAP适配器接收到我们的新API函数：
- en: Open the `wsdl.xml` file.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`wsdl.xml`文件。
- en: 'Since the `wsdl.xml` file is normally very long in extent, we will break it
    down in several places. Let''s start by defining the skeleton of the `wsdl.xml`
    file:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`wsdl.xml`文件通常非常庞大，我们将在几个地方分解它。让我们从定义`wsdl.xml`文件的框架开始：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/etc/wsdl.xml`。
- en: '[PRE20]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is the basic placeholder. We have all the main nodes that we defined at
    the beginning of the chapter. The first thing that we have to define is the custom
    data types that our API will use:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是基本的占位符。我们有本章开头定义的所有主要节点。我们首先要定义的是我们的API将使用的自定义数据类型：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/etc/wsdl.xml`。
- en: '[PRE21]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Complex data types allow us to map which attributes and objects are transmitted
    through the API.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂数据类型允许我们映射通过API传输的属性和对象。
- en: 'Messages allow us to define which of the complex types are transmitted on each
    API call request and response. Let''s proceed to add the respective messages in
    our `wsdl.xml`:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息允许我们定义在每个API调用请求和响应中传输的复杂类型。让我们继续在我们的`wsdl.xml`中添加相应的消息：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/etc/wsdl.xml`。
- en: '[PRE22]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'One important thing to notice is that each request message will always include
    a `sessionId` property that is used to validate and authenticate each request,
    whereas the response is used to specify which complied data types or values are
    returned:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个重要的事情要注意的是，每个请求消息将始终包括一个`sessionId`属性，用于验证和认证每个请求，而响应用于指定返回的编译数据类型或值：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/etc/wsdl.xml`。
- en: '[PRE23]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The next thing that is required for properly adding the new API endpoints is
    to define the bindings, which are used to specify which methods are exposed:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了正确添加新的API端点，下一个需要的是定义绑定，用于指定哪些方法是公开的：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/wsdl.xml`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/etc/wsdl.xml`。
- en: '[PRE24]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can see the complete `wsdl.xml` in one piece at `http://magedevguide.com/chapter6/wsdl`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`http://magedevguide.com/chapter6/wsdl`上看到完整的`wsdl.xml`。
- en: Even after we broke it down, the WSDL code can still seem overwhelming, and
    to be honest, it took me some time to get used to such a massive XML file. So
    if you feel or are feeling it is too much, just take it one step at a time.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们把它分解了，WSDL代码仍然可能令人不知所措，老实说，我花了一些时间才习惯这样一个庞大的XML文件。所以如果你觉得或者感觉它太多了，就一步一步来吧。
- en: Extending the REST API
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展REST API
- en: So far, we have only worked on extending the SOAP and XML-RPC parts of the API.
    The process involved in extending the RESTful API is slightly different.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是在扩展API的SOAP和XML-RPC部分上工作。扩展RESTful API的过程略有不同。
- en: Note
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The REST API was introduced with Magento Community Edition 1.7 and Enterprise
    Edition 1.12.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: REST API是在Magento Community Edition 1.7和Enterprise Edition 1.12中引入的。
- en: 'In order to expose the new API methods to the REST API, we need to create a
    new file called `api2.xml`. The configuration on this file is a little more complex
    than the normal `api.xml`, so we will break it down after adding the full code:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将新的API方法暴露给REST API，我们需要创建一个名为`api2.xml`的新文件。这个文件的配置比普通的`api.xml`复杂一些，所以我们将在添加完整代码后对其进行分解：
- en: Create a new file called `api2.xml` under the `etc/` folder.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`etc/`文件夹下创建一个名为`api2.xml`的新文件。
- en: Open `api2.xml`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`api2.xml`。
- en: 'Copy the following code:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制以下代码：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/api2.xml`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/etc/api2.xml`。
- en: '[PRE25]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: One important thing to notice is that we are defining a route node inside this
    configuration file. This is treated by Magento as a frontend route and it is used
    to access the RESTful `api` function. Also notice that we don't need to create
    a new controller for this to work.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的事情要注意的是，我们在这个配置文件中定义了一个路由节点。这被Magento视为前端路由，用于访问RESTful `api`函数。还要注意的是，我们不需要为此创建一个新的控制器。
- en: 'Now, we also need to include a new class to handle the REST requests, and implement
    each of the defined privileges:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还需要包括一个新的类来处理REST请求，并实现每个定义的权限：
- en: Create a new class called `V1.php` under `Model/Api/Registry/Rest/Admin`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Model/Api/Registry/Rest/Admin`下创建一个名为`V1.php`的新类。
- en: 'Open the `V1.php` class and copy the following code:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`V1.php`类并复制以下代码：
- en: The file location is `app/code/local/Mdg/Giftregistry/Model/Api/Registry/Rest/Admin/V1.php`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置是`app/code/local/Mdg/Giftregistry/Model/Api/Registry/Rest/Admin/V1.php`。
- en: '[PRE26]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Securing the API
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护API
- en: Securing our API is already a part of the process of creating our module and
    it is also handled by the configuration. The way Magento restricts access to its
    API is by using ACL.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 保护我们的API已经是创建模块过程的一部分，也由配置处理。Magento限制对其API的访问方式是使用ACL。
- en: 'As we learned before, these ACL allow us to set up roles with access to different
    parts of the API. Now, what we have to do is make our new custom functions available
    to the ACL:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前学到的，这些ACL允许我们设置具有访问API不同部分权限的角色。现在，我们要做的是使我们的新自定义功能对ACL可用：
- en: Open the `api.xml` file.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`api.xml`文件。
- en: 'Add the following code after the `</v2>` node:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`</v2>`节点之后添加以下代码：
- en: The file location is `app/code/local/Mdg/Giftregistry/etc/api.xml`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 文件位置为`app/code/local/Mdg/Giftregistry/etc/api.xml`。
- en: '[PRE27]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Summary
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In previous chapters, we learned how to extend Magento to add new functionality
    for both store owners and customers; knowing how to extend and work with the Magento
    API opens a world of possibilities.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们学会了如何扩展Magento以为商店所有者和客户添加新功能；了解如何扩展和使用Magento API为我们打开了无限的可能性。
- en: By using the API, we can integrate Magento with third-party systems like ERP
    and points of sale; both by importing and exporting data.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用API，我们可以将Magento与ERP和销售点等第三方系统集成；既可以导入数据，也可以导出数据。
- en: In the next chapter we will learn how to properly build a test for all the code
    we have built so far, and we will also explore multiple testing frameworks.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何为我们迄今为止构建的所有代码正确构建测试，并且我们还将探索多个测试框架。
