- en: Understanding the Core Concepts of Laravel 5
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Laravel 5的核心概念
- en: As the title of this chapter suggests, we will be providing a general overview
    of the Laravel framework, covering the main concepts related to the development
    of web applications using a web services architecture. More precisely, we will
    use a RESTful architecture in this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章的标题所暗示的，我们将提供Laravel框架的概述，涵盖与使用Web服务架构开发Web应用程序相关的主要概念。更确切地说，我们将在本书中使用RESTful架构。
- en: We assume that you already have a basic understanding of the RESTful architecture
    and how web services (here, we call them **Application Programming Interface** (**API**)
    endpoints) work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经对RESTful架构以及Web服务（这里我们称之为**应用程序编程接口**（**API**）端点）的工作原理有基本了解。
- en: However, if you are new in this concept, don't worry. We will help you get started.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您对这个概念还很陌生，不用担心。我们将帮助您入门。
- en: The Laravel framework will be a helpful tool because with it, all of the data
    inside our controllers will be converted to the JSON format, by default.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel框架将是一个有用的工具，因为使用它，我们控制器中的所有数据将默认转换为JSON格式。
- en: The Laravel framework is a powerful tool for the development of web applications,
    using the paradigm *convention over configuration*. Out of the box, Laravel has
    all of the features that we need to build modern web applications, using the **Model
    View Controller** (**MVC**). Also, the Laravel framework is one of the most popular
    PHP frameworks for developing web applications today.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel框架是开发Web应用程序的强大工具，使用“约定优于配置”的范式。 Laravel开箱即用具有构建现代Web应用程序所需的所有功能，使用**模型视图控制器**（**MVC**）。此外，Laravel框架是当今最受欢迎的PHP框架之一，用于开发Web应用程序。
- en: From now until the end of this book, we will refer to the Laravel framework
    simply as Laravel.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在到本书结束，我们将简称Laravel框架为Laravel。
- en: The Laravel ecosystem is absolutely incredible. Tools such as Homestead, Valet,
    Lumen, and Spark further enrich the experience of web software development using
    PHP.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel生态系统绝对令人难以置信。诸如Homestead、Valet、Lumen和Spark之类的工具进一步丰富了使用PHP进行Web软件开发的体验。
- en: There are many ways to start developing web applications using Laravel, meaning
    that there are many ways to configure your local environment or your production
    server. This chapter does not favor any specific way; we understand that each
    developer has his or her own preferences, acquired over time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以使用Laravel开始开发Web应用程序，这意味着有许多方法可以配置您的本地环境或生产服务器。本章不偏向任何特定方式；我们理解每个开发人员随着时间的推移都有自己的偏好。
- en: Regardless of your preferences for tools, servers, virtual machines, databases,
    and so on, we will focus on the main concepts, and we will not assume that a certain
    way is right or wrong. This first chapter is just to illustrate the main concepts
    and the actions that need to be performed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您对工具、服务器、虚拟机、数据库等有何偏好，我们将专注于主要概念，并不假设某种方式是对还是错。本章仅用于说明主要概念和需要执行的操作。
- en: Keep in mind that regardless of the methods you choose (using Homestead, WAMP,
    MAMP, or Docker), Laravel has some dependencies (or server requirements) that
    are extremely necessary for the development of web applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，无论您选择哪种方法（使用Homestead、WAMP、MAMP或Docker），Laravel都有一些极其必要的依赖项（或服务器要求），这对于开发Web应用程序非常重要。
- en: You can find more useful information in the official Laravel documentation at [https://laravel.com/docs/5.6](https://laravel.com/docs/5.6).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方Laravel文档中找到更多有用的信息：[https://laravel.com/docs/5.6](https://laravel.com/docs/5.6)。
- en: 'In this chapter, we will cover the following points:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Setting up the environment
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搭建环境
- en: The basic architecture of a Laravel application
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Laravel应用程序的基本架构
- en: The Laravel application life cycle
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Laravel应用程序生命周期
- en: Artisan CLI
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Artisan CLI
- en: MVC and routes
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC和路由
- en: Connecting with the database
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与数据库连接
- en: Setting up the environment
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建环境
- en: Remember, no matter how you have configured your environment to develop web
    applications with PHP and Laravel, keep the main server requirements in mind,
    and you will be able to follow the examples in this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，无论您如何配置环境来使用PHP和Laravel开发Web应用程序，牢记主要的服务器要求，您将能够跟随本章的示例。
- en: 'It is important to note that some operating systems do not have PHP installed.
    As this is the case with Windows machines, here are some alternatives for you
    to create your development environment:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，某些操作系统没有安装PHP。例如Windows机器，这里有一些替代方案供您创建开发环境：
- en: HOMESTEAD (recommended by Laravel documentation): [https://laravel.com/docs/5.6/homestead](https://laravel.com/docs/5.6/homestead)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HOMESTEAD（Laravel文档推荐）：[https://laravel.com/docs/5.6/homestead](https://laravel.com/docs/5.6/homestead)
- en: MAMP: [https://www.mamp.info/en/](https://www.mamp.info/en/)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MAMP: [https://www.mamp.info/en/](https://www.mamp.info/en/)'
- en: XAMPP: [https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XAMPP：[https://www.apachefriends.org/index.html](https://www.apachefriends.org/index.html)
- en: WAMP SERVER (only for Windows OS): [http://www.wampserver.com/en/](http://www.wampserver.com/en/)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WAMP SERVER（仅适用于Windows操作系统）：[http://www.wampserver.com/en/](http://www.wampserver.com/en/)
- en: PHPDOCKER: [https://www.docker.com/what-docker](https://www.docker.com/what-docker)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PHPDOCKER: [https://www.docker.com/what-docker](https://www.docker.com/what-docker)'
- en: Installing Composer package manager
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Composer包管理器
- en: 'Laravel uses **Composer**, a dependency manager for PHP, very similar to **Node
    Package Manager** **(NPM)** for Node.js projects, PIP for Python, and Bundler
    for Ruby. Let''s see what the official documentation says about it:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel使用**Composer**，这是PHP的依赖管理器，与Node.js项目的**Node Package Manager**（NPM）、Python的PIP和Ruby的Bundler非常相似。让我们看看官方文档对此的说法：
- en: '"A Composer is a tool for dependency management in PHP. It allows you to declare
    the libraries your project depends on and it will manage (install/update) them
    for you."'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “Composer是PHP中的依赖管理工具。它允许您声明项目所依赖的库，并将为您管理（安装/更新）它们。”
- en: 'So, let''s install Composer, as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们按照以下步骤安装Composer：
- en: Go to [https://getcomposer.org/download/](https://getcomposer.org/download/)
    and follow the instructions for your platform.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 转到[https://getcomposer.org/download/](https://getcomposer.org/download/)并按照您的平台的说明进行操作。
- en: You can get more information at [https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://getcomposer.org/doc/00-intro.md](https://getcomposer.org/doc/00-intro.md)上获取更多信息。
- en: Note that you can install Composer on your machine locally or globally; don't
    worry about it right now. Choose what is easiest for you.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以在本地或全局安装Composer；现在不用担心。选择对您来说最容易的方式。
- en: 'All PHP projects that use Composer have a file called `composer.json` at the
    root project, which looks similar to the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所有使用Composer的PHP项目在根项目中都有一个名为`composer.json`的文件，看起来类似于以下内容：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is also very similar to the `package.json` file on Node.js and Angular
    applications, as we will see later in this book.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这也与Node.js和Angular应用程序上的`package.json`文件非常相似，我们将在本书后面看到。
- en: Here's a helpful link about the basic commands: [https://getcomposer.org/doc/01-basic-usage.md](https://getcomposer.org/doc/01-basic-usage.md)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于基本命令的有用链接：[https://getcomposer.org/doc/01-basic-usage.md](https://getcomposer.org/doc/01-basic-usage.md)
- en: Installing Docker
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker
- en: We will use Docker in this chapter. Even though the official documentation of
    Laravel suggests the use of Homestead with virtual machines and Vagrant, we chose
    to use Docker because it's fast and easy to start, and our main focus is on Laravel's
    core concepts.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中使用Docker。尽管Laravel的官方文档建议使用带有虚拟机和Vagrant的Homestead，但我们选择使用Docker，因为它启动快速且易于使用，我们的主要重点是Laravel的核心概念。
- en: You can find more information about Docker at [https://www.docker.com/what-docker](https://www.docker.com/what-docker).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.docker.com/what-docker](https://www.docker.com/what-docker)上找到有关Docker的更多信息。
- en: 'As the Docker documentation states:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Docker文档的说法：
- en: Docker is the company driving the container movement and the only container
    platform provider to address every application across the hybrid cloud. Today’s
    businesses are under pressure to digitally transform, but are constrained by existing
    applications and infrastructure while rationalizing an increasingly diverse portfolio
    of clouds, datacenters, and application architectures. Docker enables true independence
    between applications and infrastructure and developers and IT ops to unlock their
    potential and creates a model for better collaboration and innovation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是推动容器运动的公司，也是唯一一个能够应对混合云中的每个应用程序的容器平台提供商。今天的企业面临着数字转型的压力，但受到现有应用程序和基础设施的限制，同时需要合理化日益多样化的云、数据中心和应用程序架构组合。Docker实现了应用程序和基础设施以及开发人员和IT运营之间的真正独立，释放了它们的潜力，并创造了更好的协作和创新模式。
- en: 'Let''s install Docker, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤安装Docker：
- en: Go to [https://docs.docker.com/install/](https://docs.docker.com/install/).
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://docs.docker.com/install/](https://docs.docker.com/install/)。
- en: Choose your platform and follow the installation steps.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的平台并按照安装步骤进行操作。
- en: If you have any trouble, check the getting started link at [https://docs.docker.com/get-started/](https://docs.docker.com/get-started/).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你遇到任何问题，请查看[https://docs.docker.com/get-started/](https://docs.docker.com/get-started/)上的入门链接。
- en: 'As we are using Docker containers and images to start our application and won''t
    get into how Docker works behind the scenes, here is a short list of some Docker
    commands:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用Docker容器和镜像来启动我们的应用程序，并且不会深入探讨Docker在幕后的工作原理，这里是一些Docker命令的简短列表：
- en: '| **Command**: | **Description**: |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **命令**： | **描述**： |'
- en: '| `docker ps` | Show running containers |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `docker ps` | 显示正在运行的容器 |'
- en: '| `docker ps -a` | Show all containers |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `docker ps -a` | 显示所有容器 |'
- en: '| `docker start` | Start a container |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `docker start` | 启动容器 |'
- en: '| `docker stop` | Stop a container |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `docker stop` | 停止容器 |'
- en: '| `docker-compose up -d` | Start containers in background |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `docker-compose up -d` | 在后台启动容器 |'
- en: '| `docker-compose stop` | Stop all containers on `docker-compose.yml` file
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `docker-compose stop` | 停止`docker-compose.yml`文件上的所有容器 |'
- en: '| `docker-compose start` | Start all containers on `docker-compose.yml` file
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `docker-compose start` | 启动`docker-compose.yml`文件上的所有容器 |'
- en: '| `docker-compose kill` | Kill all containers on `docker-compose.yml` file
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `docker-compose kill` | 杀死`docker-compose.yml`文件上的所有容器 |'
- en: '| `docker-compose logs` | Log all containers on `docker-compose.yml` file |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `docker-compose logs` | 记录`docker-compose.yml`文件上的所有容器 |'
- en: You can check the whole list of Docker commands at [https://docs.docker.com/engine/reference/commandline/docker/](https://docs.docker.com/engine/reference/commandline/docker/).
    And Docker-compose commands at [https://docs.docker.com/compose/reference/overview/#command-options-overview-and-help](https://docs.docker.com/compose/reference/overview/#command-options-overview-and-help).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.docker.com/engine/reference/commandline/docker/](https://docs.docker.com/engine/reference/commandline/docker/)上查看完整的Docker命令列表。以及在[https://docs.docker.com/compose/reference/overview/#command-options-overview-and-help](https://docs.docker.com/compose/reference/overview/#command-options-overview-and-help)上查看Docker-compose命令。
- en: Configuring PHPDocker.io
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置PHPDocker.io
- en: 'PHPDocker.io is a simple tool that helps us to build PHP applications using
    the Docker/Container concept with Compose. It''s very easy to understand and use;
    so, let''s look at what we need to do:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: PHPDocker.io是一个简单的工具，它帮助我们使用Compose构建PHP应用程序的Docker/容器概念。它非常易于理解和使用；因此，让我们看看我们需要做什么：
- en: Go to [https://phpdocker.io/](https://phpdocker.io/).
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://phpdocker.io/](https://phpdocker.io/)。
- en: Click on the Generator link.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击生成器链接。
- en: Fill out the information, as in the following screenshot.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写信息，如下截图所示。
- en: 'Click on the Generate project archive button and save the folder:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“生成项目存档”按钮并保存文件夹：
- en: '![](assets/0bfba06b-93cf-41eb-baa6-1162b0f4fe5d.png)PHPDocker interface'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0bfba06b-93cf-41eb-baa6-1162b0f4fe5d.png)PHPDocker界面'
- en: 'The database configuration is as per the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库配置如下截图所示：
- en: '![](assets/3d363633-a23b-4ed5-a8cf-d49b15f3eea7.png)Database configurationNote
    that we are using the latest version of the MYSQL database in the preceding configuration,
    but you can choose whatever version you prefer. In the following examples, the
    database version will not matter.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/3d363633-a23b-4ed5-a8cf-d49b15f3eea7.png)数据库配置请注意，我们在前面的配置中使用了MYSQL数据库的最新版本，但您可以选择任何您喜欢的版本。在接下来的示例中，数据库版本将不重要。'
- en: Setting up PHPDocker and Laravel
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置PHPDocker和Laravel
- en: Now that we have filled in the previous information and downloaded the file
    for our machine, let's begin setting up our application so as to delve deeper
    into the directory structure of a Laravel application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经填写了之前的信息并为我们的机器下载了文件，让我们开始设置我们的应用程序，以便更深入地了解Laravel应用程序的目录结构。
- en: 'Execute the following steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Open `bash/Terminal/cmd`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`bash/Terminal/cmd`。
- en: Go to `Users/yourname` on Mac and Linux, or `C:/` on Windows.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Mac和Linux上转到`Users/yourname`，或者在Windows上转到`C:/`。
- en: 'Open your Terminal inside the folder and type the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件夹内打开您的终端并输入以下命令：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'At the end of your Terminal window, you will see the following result:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的终端窗口底部，您将看到以下结果：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the Terminal window, type:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中，输入：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The results will be as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: '![](assets/460a8a5e-ccea-4297-8b42-84a7d4ce6066.png)Terminal window output'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/460a8a5e-ccea-4297-8b42-84a7d4ce6066.png)终端窗口输出'
- en: Congratulations! You have your first Laravel application, built with the `Composer`
    package manager.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您有了您的第一个Laravel应用程序，使用了`Composer`包管理器构建。
- en: Now, it's time to join our application with the file downloaded from PHPDocker
    (our PHP/MySQL Docker screenshot). To do so, follow the next steps.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候将我们的应用程序与从PHPDocker（我们的PHP/MySQL Docker截图）下载的文件连接起来了。要做到这一点，请按照以下步骤进行操作。
- en: Grab the downloaded archive, `hands-on-full-stack-web-development-with-angular-6-and-laravel-5.zip`,
    and unzip it.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取下载的存档`hands-on-full-stack-web-development-with-angular-6-and-laravel-5.zip`，并解压缩它。
- en: Copy all of the folder content (a `phpdocker` folder and a file, `docker-compose.yml`).
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制所有文件夹内容（一个`phpdocker`文件夹和一个名为`docker-compose.yml`的文件）。
- en: Open the `chapter-01` folder and paste the content.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`chapter-01`文件夹并粘贴内容。
- en: 'Now, inside the `chapter-01` folder, we will see the following files:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`chapter-01`文件夹内，我们将看到以下文件：
- en: '![](assets/002f2cd2-0736-445b-a096-510ba7b07fba.png)chapter-01 folder structure'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/002f2cd2-0736-445b-a096-510ba7b07fba.png)chapter-01文件夹结构'
- en: Let's check to make sure that everything will go well with our configuration.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下，确保一切都会顺利进行我们的配置。
- en: 'Open your Terminal window and type the following command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It's important to remember that at this point, you need to have Docker up and
    running on your machine. If you are completely new to how to run Docker on your
    machine, you can find more information at [https://github.com/docker/labs/tree/master/beginner/](https://github.com/docker/labs/tree/master/beginner/).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，在这一点上，您需要在您的机器上启动和运行Docker。如果您完全不知道如何在您的机器上运行Docker，您可以在[https://github.com/docker/labs/tree/master/beginner/](https://github.com/docker/labs/tree/master/beginner/)找到更多信息。
- en: 'Note that this command may take more time to create and build all of the containers.
    The results will be as follows:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，此命令可能需要更多时间来创建和构建所有的容器。结果将如下所示：
- en: '![](assets/d7931a7a-4c40-47eb-9e03-b8d66cb23a7e.png)Docker containers up and
    running'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/d7931a7a-4c40-47eb-9e03-b8d66cb23a7e.png)Docker容器已启动'
- en: 'The preceding screenshot indicates that we have started all containers successfully:
    `memcached`, `webserver` (Nginx), `mysql`, and `php-fpm`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图表明我们已成功启动了所有容器：`memcached`，`webserver`（Nginx），`mysql`和`php-fpm`。
- en: Open your browser and type `http://localhost:8081`; you should see the welcome
    page for Laravel.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的浏览器并输入`http://localhost:8081`；您应该看到Laravel的欢迎页面。
- en: At this point, it is time to open our sample project in a text editor and check
    all of the Laravel folders and files. You can choose the editor that you are used
    to, or, if you prefer, you can use the editor that we will describe in the next
    section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，是时候在文本编辑器中打开我们的示例项目，并检查所有的Laravel文件夹和文件。您可以选择您习惯使用的编辑器，或者，如果您愿意，您可以使用我们将在下一节中描述的编辑器。
- en: Installing VS Code text editor
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装VS Code文本编辑器
- en: For this chapter, and throughout the book, we will be using **Visual Studio
    Code** (**VS Code**), a free and highly configurable multiplatform text editor.
    It is also very useful for working with projects in Angular and TypeScript.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和整本书中，我们将使用**Visual Studio Code**（**VS Code**），这是一个免费且高度可配置的多平台文本编辑器。它也非常适用于在Angular和TypeScript项目中使用。
- en: 'Install VS Code as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装VS Code：
- en: Go to the download page and choose your platform at [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download).
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到下载页面，并在[https://code.visualstudio.com/Download](https://code.visualstudio.com/Download)选择您的平台。
- en: Follow the installation steps for your platform.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照您的平台的安装步骤进行操作。
- en: VS Code has a vibrant community with tons of extensions. You can research and
    find extensions at [https://marketplace.visualstudio.com/VSCode](https://marketplace.visualstudio.com/VSCode).
    In the next chapters, we will install and use some of them.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code拥有一个充满活力的社区，有大量的扩展。您可以在[https://marketplace.visualstudio.com/VSCode](https://marketplace.visualstudio.com/VSCode)上研究并找到扩展。在接下来的章节中，我们将安装并使用其中一些扩展。
- en: For now, just install VS Code icons from [https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons](https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需从[https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons](https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons)安装VS
    Code图标。
- en: The basic architecture of Laravel applications
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel应用程序的基本架构
- en: As mentioned previously, Laravel is an MVC framework for the development of
    modern web applications. It is a software architecture standard that separates
    the representation of information from users' interaction with it. The architectural
    standard that it has adopted is not so new; it has been around since the mid-1970s.
    It remains current, and a number of frameworks still use it today.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '正如之前提到的，Laravel是用于开发现代Web应用程序的MVC框架。它是一种软件架构标准，将信息的表示与用户对其的交互分开。它采用的架构标准并不是很新；它自上世纪70年代中期以来就一直存在。它仍然很流行，许多框架今天仍在使用它。 '
- en: You can read more about the MVC pattern at [https://en.wikipedia.org/wiki/Model-view-controller](https://en.wikipedia.org/wiki/Model-view-controller).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://en.wikipedia.org/wiki/Model-view-controller](https://en.wikipedia.org/wiki/Model-view-controller)中了解更多关于MVC模式的信息。
- en: Laravel directory structure
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel目录结构
- en: 'Now, let''s look at how this pattern is implemented within an application with
    Laravel:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在Laravel应用程序中实现这种模式：
- en: Open the VS Code editor.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开VS Code编辑器。
- en: If this is the first time you are opening VS Code, click on the top menu and
    navigate to File | Open.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果这是您第一次打开VS Code，请点击顶部菜单，然后导航到文件 | 打开。
- en: Search for the `chapter-01` folder, and click Open**.**
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`chapter-01`文件夹，并点击打开**。**
- en: Expand the `app` folder at the left-hand side of VS Code.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS Code的左侧展开`app`文件夹。
- en: 'The application files are as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序文件如下：
- en: '![](assets/f0eff070-8dd1-4a97-8c20-710ab5b5afc5.png)Laravel root folderThe
    `phpdocker` folder and `docker-compose.yml` files are not part of the Laravel
    framework; we added these files manually, earlier in this chapter.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f0eff070-8dd1-4a97-8c20-710ab5b5afc5.png)Laravel根文件夹`phpdocker`文件夹和`docker-compose.yml`文件不是Laravel框架的一部分；我们在本章的前面手动添加了这些文件。'
- en: The MVC flow
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC流程
- en: 'In a very basic MVC workflow, when a user interacts with our application, the
    steps in the following screenshot are performed. Imagine a simple web application
    about books, with a search input field. When the user types a book name and presses
    *Enter*, the following flow cycle will occur:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个非常基本的MVC工作流中，当用户与我们的应用程序交互时，将执行以下截图中的步骤。想象一个简单的关于书籍的Web应用程序，有一个搜索输入框。当用户输入书名并按下*Enter*时，将发生以下流程循环：
- en: '![](assets/1bf73eab-92c2-4a84-978c-c5fae90f9155.png)MVC flow'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1bf73eab-92c2-4a84-978c-c5fae90f9155.png)MVC流程'
- en: 'The MVC is represented by the following folders and files:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: MVC由以下文件夹和文件表示：
- en: '| **MVC Architecture** | **Application Path** |  | **File** |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| **MVC架构** | **应用程序路径** |  | **文件** |'
- en: '| Model | `app/` |  | `User.php` |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 模型 | `app/` |  | `User.php` |'
- en: '| View | `resources/views` |  | `welcome.blade.php` |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 视图 | `resources/views` |  | `welcome.blade.php` |'
- en: '| Controller | `app/Http/Controllers` |  | `Auth/AuthController.php` `Auth/PasswordController.php`
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 控制器 | `app/Http/Controllers` |  | `Auth/AuthController.php` `Auth/PasswordController.php`
    |'
- en: Note that the application models are at the root of the `app` folder, and the
    application already has at least one file for MVC implementation.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，应用程序模型位于`app`文件夹的根目录，并且应用程序已经至少有一个文件用于MVC实现。
- en: 'Also note that the `app` folder contains all of the core files for our application. The
    other folders have very intuitive names, such as the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，`app`文件夹包含我们应用程序的所有核心文件。其他文件夹的名称非常直观，例如以下内容：
- en: '| Bootstrap | Cache, autoload, and bootstrap applications |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 引导 | 缓存，自动加载和引导应用程序 |'
- en: '| Config | Application''s configuration |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 配置 | 应用程序配置 |'
- en: '| Database | Factory, migrations, and seeds |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 数据库 | 工厂，迁移和种子 |'
- en: '| Public | JavaScript, CSS, fonts, and images |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 公共 | JavaScript，CSS，字体和图像 |'
- en: '| Resource | Views, SASS/LESS, and localization |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 资源 | 视图，SASS/LESS和本地化 |'
- en: '| Storage | This folder has separated apps, frameworks, and logs |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 存储 | 此文件夹包含分离的应用程序，框架和日志 |'
- en: '| Tests | Unit tests using PHPunit |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 测试 | 使用PHPunit进行单元测试 |'
- en: '| Vendor | Composer dependencies |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 供应商 | Composer依赖项 |'
- en: Now, let's see how things work in the Laravel structure.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看Laravel结构是如何工作的。
- en: Laravel application life cycle
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel应用程序生命周期
- en: In a Laravel application, the flow is almost the same as in the previous example,
    but a little more complex. When the user triggers an event in a browser, the request
    arrives on a web server (Apache/Nginx), where we have our web application running.
    So, the server redirects the request into `public/index.php`, the starting point
    for the entire framework. In the `bootstrap` folder, the `autoloader.php` is started
    and loads all of the files generated by the composer retrieving an instance to
    the Laravel application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel应用程序中，流程与前面的示例几乎相同，但稍微复杂一些。当用户在浏览器中触发事件时，请求到达Web服务器（Apache/Nginx），我们的Web应用程序在那里运行。因此，服务器将请求重定向到`public/index.php`，整个框架的起点。在`bootstrap`文件夹中，启动`autoloader.php`并加载由composer生成的所有文件，检索Laravel应用程序的实例。
- en: 'Let''s look at the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下的截图：
- en: '![](assets/cb7f983b-d19f-46a1-b284-0c317a4c3ee8.png)Laravel application cycle'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/cb7f983b-d19f-46a1-b284-0c317a4c3ee8.png)Laravel应用程序生命周期'
- en: 'The diagram is complex enough for our first chapter, so we will not get into
    all of the steps performed by the user''s request. Instead, we will go on to another
    very important feature that is a main concept in Laravel: the Artisan **command-line
    interface (CLI)**.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 该图表对于我们的第一章来说已经足够复杂了，因此我们不会详细介绍用户请求执行的所有步骤。相反，我们将继续介绍Laravel中的另一个非常重要的特性，即Artisan
    **命令行界面（CLI）**。
- en: You can read more about the request life cycle in Laravel in the official documentation
    at [https://laravel.com/docs/5.2/lifecycle](https://laravel.com/docs/5.2/lifecycle).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方文档的[https://laravel.com/docs/5.2/lifecycle](https://laravel.com/docs/5.2/lifecycle)中了解更多关于Laravel请求生命周期的信息。
- en: Artisan command-line interface
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Artisan命令行界面
- en: Nowadays, it is common practice to create web applications by using the command
    line; and, with the evolution of web development tools and technologies, this
    has become very popular.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过使用命令行创建Web应用程序是一种常见的做法；随着Web开发工具和技术的发展，这变得非常流行。
- en: We will mention that NPM is one of the most popular. However, for the development
    of applications using Laravel, we have an advantage. The Artisan CLI is automatically
    installed when we create a Laravel project.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提到NPM是最受欢迎的之一。但是，对于使用Laravel开发应用程序，我们有一个优势。当我们创建Laravel项目时，Artisan CLI会自动安装。
- en: 'Let''s look at what the official documentation of Laravel says about the Artisan
    CLI:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Laravel官方文档对Artisan CLI的说法：
- en: Artisan is the name of the command-line interface included with Laravel. It
    provides a number of helpful commands for your use while developing your application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Artisan是Laravel附带的命令行界面的名称。它为您在开发应用程序时使用的一些有用的命令提供了帮助。
- en: Inside of the `chapter-01` folder, we find the Artisan bash file. It's responsible
    for running all of the commands available on the CLI, and there are many of them,
    to create classes, controllers, seeds, and much more.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在`chapter-01`文件夹中，我们找到了Artisan bash文件。它负责在CLI上运行所有可用的命令，其中有许多命令，用于创建类、控制器、种子等等。
- en: 'After this small introduction to the Artisan CLI, there would be nothing better
    than looking at some practical examples. So, let''s get hands on, and don''t forget
    to start Docker:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在对Artisan CLI进行了简要介绍之后，最好的事情莫过于看一些实际的例子。所以，让我们动手操作，不要忘记启动Docker：
- en: 'Open your Terminal window inside the `chapter-01` folder, and type the following
    command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-01`文件夹中打开您的终端窗口，并键入以下命令：
- en: '[PRE5]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s get inside the `php-fpm container` and type the following:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进入`php-fpm容器`并键入以下内容：
- en: '[PRE6]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We now have all of the Artisan CLI commands available in the Terminal.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在终端中有所有Artisan CLI命令可用。
- en: 'This is the simplest way to interact with the Teminal within our Docker container.
    If you are using another technique to run the Laravel application, as mentioned
    at the beginning of the chapter, you do not need to use the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与我们的Docker容器内的Teminal进行交互的最简单方式。如果您正在使用其他技术来运行Laravel应用程序，正如本章开头所提到的，您不需要使用以下命令：
- en: '[PRE7]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can just type the same commands from the next steps into the Terminal.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在终端中键入下一步的相同命令。
- en: 'Still in the Terminal, type the following command:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在终端中，键入以下命令：
- en: '[PRE8]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You will see the framework version and a list of all available commands:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到框架版本和所有可用命令的列表：
- en: '[PRE9]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, the list of commands is very large. Note that the above code
    snippet, we did not put all the options available with the `php artisan list`
    command, but we will see some combinations on next lines.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，命令列表非常长。请注意，上面的代码片段中，我们没有列出`php artisan list`命令的所有选项，但我们将在下面看到一些组合。
- en: 'In your Terminal, type the following combination:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中，键入以下组合：
- en: '[PRE10]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output will explain exactly what the `migrate` command can do and what
    options we have, as seen in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将详细解释`migrate`命令可以做什么以及我们有哪些选项，如下面的屏幕截图所示：
- en: '![](assets/81c6afbf-151a-4ae5-80f1-f7871a674726.png)Output of php artisan -h
    migrate'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/81c6afbf-151a-4ae5-80f1-f7871a674726.png)输出php artisan -h migrate'
- en: It's also possible to see what options we have for the `migrate` command.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以看到我们对`migrate`命令有哪些选项。
- en: 'Still in the Terminal, type the following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在终端中，键入以下命令：
- en: '[PRE11]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You will see the following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](assets/62d6573a-0b93-4cce-acd0-6e1fd7526b49.png)Output of php artisan -h
    make:controller'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/62d6573a-0b93-4cce-acd0-6e1fd7526b49.png)输出php artisan -h make:controller'
- en: Now, let's look at how to create the MVC in the Laravel application, using the
    Artisan CLI.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何在Laravel应用程序中使用Artisan CLI创建MVC。
- en: MVC and routes
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC和路由
- en: 'As mentioned earlier, we will now create a component each of the model, view,
    and controller, using the Artisan CLI. However, as our heading suggests, we will
    include another important item: the routes. We have already mentioned them in
    this chapter (in our diagram of the request life cycle in Laravel, and also in
    the example diagram of the MVC itself).'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们现在将使用Artisan CLI分别创建模型、视图和控制器。但是，正如我们的标题所暗示的，我们将包括另一个重要项目：路由。我们已经在本章中提到过它们（在我们的Laravel请求生命周期图表中，以及在MVC本身的示例图表中）。
- en: In this section, we will focus on creating the file, and checking it after it
    has been created.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于创建文件，并在创建后检查它。
- en: Creating models
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模型
- en: 'Let''s get hands on:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们动手操作：
- en: 'Open your Terminal window inside the `chapter-01` folder, and type the following
    command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-01`文件夹中打开您的终端窗口，并键入以下命令：
- en: '[PRE12]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After the command, you should see a success message in green, stating: Model
    created successfully.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令之后，您应该看到一个绿色的成功消息，指出：模型成功创建。
- en: 'Go back to your code editor; inside the `app` folder, you will see the `Band.php`
    file, with the following code:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的代码编辑器；在`app`文件夹中，您将看到`Band.php`文件，其中包含以下代码：
- en: '[PRE13]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating controllers
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器
- en: 'Now it is time to use the artisan to generate our controller, let''s see how
    we can do that:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是使用artisan生成我们的控制器的时候了，让我们看看我们可以如何做到：
- en: 'Go back to the Terminal window, and type the following command:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到终端窗口，并键入以下命令：
- en: '[PRE14]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After the command, you should see a message in green, stating: Controller created
    successfully.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令之后，您应该看到一个绿色的消息，指出：控制器成功创建。
- en: 'Now, inside `app/Http/Controllers`, you will see `BandController.php`, with
    the following content:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`app/Http/Controllers`中，您将看到`BandController.php`，其中包含以下内容：
- en: '[PRE15]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As a good practice, always create your controller with the suffix `<Somename>Controller`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个良好的实践，始终使用后缀`<Somename>Controller`创建您的控制器。
- en: Creating views
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'As we can see earlier when using the `php artisan list` command,  we do not
    have any alias command to create the application views automatically. So we need
    to create the views manually:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前在使用`php artisan list`命令时所看到的，我们没有任何别名命令可以自动创建应用程序视图。因此，我们需要手动创建视图：
- en: Go back to your text editor, and inside the `resources/views` folder, create
    a new file, named `band.blade.php`.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的文本编辑器，并在`resources/views`文件夹中创建一个名为`band.blade.php`的新文件。
- en: 'Place the following code inside the `band.blade.php` file:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码放入`band.blade.php`文件中：
- en: '[PRE16]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating routes
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建路由
- en: The routes within Laravel are responsible for directing all HTTP traffic coming
    from the user's requests, so the routes are responsible for the entire inflow
    in a Laravel application, as we saw in the preceding diagrams.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel中的路由负责指导来自用户请求的所有HTTP流量，因此路由负责Laravel应用程序中的整个流入，正如我们在前面的图表中看到的那样。
- en: In this section, we will briefly look at the types of routes available in Laravel,
    and how to create a simple route for our MVC component.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍Laravel中可用的路由类型，以及如何为我们的MVC组件创建一个简单的路由。
- en: At this point, it is only necessary to look at how the routes work. Later in
    the book, we will get deeper into application routing.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，只需要看一下路由是如何工作的。在本书的后面，我们将深入研究应用程序路由。
- en: 'So, let''s look at what we can use to handle routes in Laravel:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看在Laravel中可以用来处理路由的内容：
- en: '| Code | HTTP &#124; METHOD &#124;Verb |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 代码 | HTTP &#124; 方法 &#124;动词 |'
- en: '| `Route::get($uri, $callback);` | GET |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `Route::get($uri, $callback);` | 获取 |'
- en: '| `Route::post($uri, $callback);` | POST |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `Route::post($uri, $callback);` | 发布 |'
- en: '| `Route::put($uri, $callback);` | PUT |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: 路由::放置（$uri，$callback）; | 放置 |
- en: '| `Route::patch($uri, $callback);` | PATCH |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `Route::patch($uri, $callback);` | 补丁 |'
- en: '| `Route::delete($uri, $callback);` | DELETE |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `Route::delete($uri, $callback);` | 删除 |'
- en: '| `Route::options($uri, $callback);` | OPTIONS |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `Route::options($uri, $callback);` | 选项 |'
- en: 'Each of the routes available is responsible for handling one type of HTTP request
    method. Also, we can combine more than one method in the same route, as in the
    following code. Do not be too concerned with this now; we''ll see how to deal
    with this type of routing later in the book:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 每个可用的路由都负责处理一种类型的HTTP请求方法。此外，我们可以在同一个路由中组合多种方法，就像下面的代码一样。现在不要太担心这个问题；我们将在本书的后面看到如何处理这种类型的路由：
- en: '[PRE17]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let''s create our first route:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的第一个路由：
- en: 'On your text editor, open `web.php` inside the `routes` folder, and add the
    following code, right after the `welcome view`:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中，打开`routes`文件夹中的`web.php`，并在`welcome view`之后添加以下代码：
- en: '[PRE18]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open your browser to `http://localhost:8081/band`, and you will see the following
    message:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:8081/band`，您将看到以下消息：
- en: Hi i'm a view
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 嗨，我是一个视图
- en: Don't forget to start all Docker containers using the `docker-compose up -d`
    command. If you followed the previous examples, you will already have everything
    up and running.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用`docker-compose up -d`命令启动所有Docker容器。如果您遵循了前面的示例，您将已经拥有一切都在正常运行。
- en: Bravo! We have created our first route. It is a simple example, but we have
    all of the things in place and working well. In the next section, we'll look at
    how to integrate a model with a controller and render the view.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已经创建了我们的第一个路由。这是一个简单的例子，但我们已经把所有东西都放在了正确的位置，并且一切都运行良好。在下一节中，我们将看看如何将模型与控制器集成并呈现视图。
- en: Connecting with a database
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: As we saw previously, the controllers are activated by the routes and transmit
    information between the model/database and the view. In the preceding example,
    we used static content inside the view, but in larger applications, we will almost
    always have content coming from a database, or generated within the controller
    and passed to the view.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，控制器由路由激活，并在模型/数据库和视图之间传递信息。在前面的示例中，我们在视图中使用静态内容，但在更大的应用程序中，我们几乎总是会有来自数据库的内容，或者在控制器内生成并传递给视图的内容。
- en: In the next example, we will see how to do this.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，我们将看到如何做到这一点。
- en: Setting up the database inside a Docker container
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Docker容器内设置数据库
- en: 'It''s now time to configure our database. If you use Homestead, you probably
    have your database connection configured and working well. To check, open your
    Terminal and type the following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候配置我们的数据库了。如果您使用Homestead，您可能已经配置并且数据库连接正常工作。要检查，请打开终端并输入以下命令：
- en: '[PRE19]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If everything goes well, you will see the following message:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您将看到以下消息：
- en: '![](assets/993a52c8-b364-46ff-9cb1-aa0283760ff7.png)Database connection message'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/993a52c8-b364-46ff-9cb1-aa0283760ff7.png)数据库连接消息'
- en: 'For this example, however, we are using Docker, and we need to do some configuration
    to accomplish this task:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于这个例子，我们正在使用Docker，我们需要做一些配置来完成这个任务：
- en: 'Inside of the root project, open the `.env` file and look at line 8 (the database
    connection), which looks as follows:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目内，打开`.env`文件并查看第8行（数据库连接），如下所示：
- en: '[PRE20]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, replace the preceding code with the following lines:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，用以下行替换前面的代码：
- en: '[PRE21]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note that we need to change a bit to get the Docker MySQL container directions;
    if you don't remember what you chose in the `PHPDocker.io` generator, you can
    copy it from the container configuration.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们需要稍微更改一下以获取Docker MySQL容器的指示；如果您不记得在`PHPDocker.io`生成器中选择了什么，可以从容器配置中复制它。
- en: Open `docker-compose.yml` at the root directory.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根目录打开`docker-compose.yml`。
- en: 'Copy the environment variables from the MySQL container setup:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从MySQL容器设置中复制环境变量：
- en: '[PRE22]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, it's time to test our connection.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候测试我们的连接了。
- en: 'In your Terminal window, type the following command:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端窗口中，输入以下命令：
- en: '[PRE23]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, let''s check our connection; type the following command:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们检查一下我们的连接；输入以下命令：
- en: '[PRE24]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You should see the same message as the previous screenshot. Then, you will have
    everything you need to go ahead with the example.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到与上一个截图相同的消息。然后，您将拥有继续进行示例所需的一切。
- en: Creating a migrations file and database seed
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建迁移文件和数据库种子
- en: '**Migration** files are very common in some MVC frameworks, such as Rails,
    Django, and, of course, Laravel. It is through this type of file that we can keep
    our database consistent with our application, since we cannot versioning the database schemes .
    Migration files help us to store each change in our database, so that we can version
    these files and keep the project consistent.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移**文件在一些MVC框架中非常常见，例如Rails，Django和当然，Laravel。通过这种类型的文件，我们可以使我们的数据库与我们的应用程序保持一致，因为我们无法对数据库方案进行版本控制。迁移文件帮助我们存储数据库中的每个更改，以便我们可以对这些文件进行版本控制，并保持项目的一致性。'
- en: '**Database seeds** serveto populate the tables of a database with an initial
    batch of records; this is extremely useful when we are developing web applications
    from the beginning. The data of the initial load can be varied, from tables of
    users to administration objects such as passwords and tokens, and everything else
    that we require.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据库种子**用于在数据库的表中填充一批初始记录；当我们从头开始开发Web应用程序时，这非常有用。初始加载的数据可以是各种各样的，从用户表到管理对象，如密码和令牌，以及我们需要的其他所有内容。'
- en: 'Let''s look at how we can create a migration file for the `Bands` model in
    Laravel:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在Laravel中为`Bands`模型创建迁移文件：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE25]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Open the `database/migrations` folder, and you will see a file called`<timestamp>create_bands_table.php`.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`database/migrations`文件夹，您将看到一个名为`<timestamp>create_bands_table.php`的文件。
- en: 'Open this file and paste the following code inside `public function up()`:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开此文件，并在`public function up()`中粘贴以下代码：
- en: '[PRE26]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Paste the following code inside `public function down()`:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码粘贴到`public function down()`中：
- en: '[PRE27]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The final result will be the following code:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终结果将是以下代码：
- en: '[PRE28]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Inside of the `database/factories` folder, open the `ModalFactory.php` file
    and add the following code, right after the `User Factory`. Note that we are using
    a PHP library called `faker` inside a `factory` function, in order to generate
    some data:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`database/factories`文件夹中，打开`ModalFactory.php`文件，并在`User Factory`之后添加以下代码。请注意，我们在`factory`函数中使用了一个名为`faker`的PHP库，以生成一些数据：
- en: '[PRE29]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Go back to your Terminal window and create a database seed. To do this, type
    the following command:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的终端窗口并创建一个数据库种子。要做到这一点，请输入以下命令：
- en: '[PRE30]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the `database/seeds` folder, open the `BandsTableSeeder.php` file and type
    the following code, inside `public function run()`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`database/seeds`文件夹中，打开`BandsTableSeeder.php`文件，并在`public function run()`中输入以下代码：
- en: '[PRE31]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, in the `database/seeds` folder, open the `DatabaseSeeder.php` file and
    add the following code, inside `public function run()`:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`database/seeds`文件夹中，打开`DatabaseSeeder.php`文件，并在`public function run()`中添加以下代码：
- en: '[PRE32]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can read more about Faker PHP at [https://github.com/fzaninotto/Faker](https://github.com/fzaninotto/Faker).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/fzaninotto/Faker](https://github.com/fzaninotto/Faker)上阅读更多关于Faker
    PHP的信息。
- en: Before we go any further , we need to do a small refactoring on the `Band` model.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要对`Band`模型进行一些小的重构。
- en: 'Inside of the app root, open the `Band.php` file and add the following code,
    inside the `Band` class:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序根目录中，打开`Band.php`文件并在`Band`类中添加以下代码：
- en: '[PRE33]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Go back to your Terminal and type the following command:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的终端并输入以下命令：
- en: '[PRE34]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After the command, you will see the following message in the Terminal window:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令之后，您将在终端窗口中看到以下消息：
- en: '[PRE35]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The preceding command was just to populate the database with our seed.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令只是用来填充我们的种子数据库。
- en: 'Go back to your Terminal and type the following command:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的终端并输入以下命令：
- en: '[PRE36]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We now have five items ready to use in our database.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有五个项目可以在我们的数据库中使用。
- en: Let's check whether everything will go smoothly.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一切是否会顺利进行。
- en: 'Inside of your Terminal, to exit `php-fpm container`, type the following command:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中，要退出`php-fpm容器`，请输入以下命令：
- en: '[PRE37]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, in the application root folder, type the following command in your Terminal:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在应用程序根文件夹中，在终端中输入以下命令：
- en: '[PRE38]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The preceding command will give you access to the MySQL console inside `mysql
    Docker container`, almost exactly the same as how we gained access to `php-fpm
    container`.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将使您可以在`mysql Docker容器`中访问MySQL控制台，几乎与我们如何访问`php-fpm容器`相同。
- en: 'Inside of the Terminal, type the following command to see all of the databases:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，输入以下命令以查看所有数据库：
- en: '[PRE39]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As you can see, we have two tables: `information_schema` and `laravel-angular-book`.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有两个表：`information_schema`和`laravel-angular-book`。
- en: 'Let''s access the `laravel-angular-book` table; type the following command:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们访问`laravel-angular-book`表；输入以下命令：
- en: '[PRE40]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'And now, let''s check our tables, as follows:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查我们的表，如下所示：
- en: '[PRE41]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, let''s `SELECT` all records from the `bands` tables:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们从`bands`表中`SELECT`所有记录：
- en: '[PRE42]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We will see something similar to the following screenshot:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到类似以下截图的内容：
- en: '![](assets/6aa9f6e1-dbe6-4289-87db-c7c57e97568b.png)Database bands table'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6aa9f6e1-dbe6-4289-87db-c7c57e97568b.png)数据库bands表'
- en: 'Now, exit the MySQL console with the following command:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下命令退出MySQL控制台：
- en: '[PRE43]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Using the resource flag to create CRUD methods
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用资源标志创建CRUD方法
- en: Let's see another feature of the Artisan CLI, creating all of the **Create**,
    **Read**, **Update**, **and** **Delete** (**CRUD**) operations using a single
    command.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Artisan CLI的另一个功能，使用单个命令创建所有的**创建**、**读取**、**更新**和**删除**（CRUD）操作。
- en: 'First, in the `app/Http/Controllers` folder, delete the `BandController.php`
    file:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`app/Http/Controllers`文件夹中，删除`BandController.php`文件：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并输入以下命令：
- en: '[PRE44]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This action will create the same file again, but now, it includes the CRUD
    operations, as shown in the following code:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这个动作将再次创建相同的文件，但现在它包括CRUD操作，如下面的代码所示：
- en: '[PRE45]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'For this example, we will write only two methods: one to list all of the records,
    and another to get a specific record. Don''t worry about the other methods; we
    will cover all of the methods in the upcoming chapters.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将只编写两种方法：一种用于列出所有记录，另一种用于获取特定记录。不要担心其他方法；我们将在接下来的章节中涵盖所有方法。
- en: 'Let''s edit `public function index()` and add the following code:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`public function index()`并添加以下代码：
- en: '[PRE46]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, edit `public function show()` and add the following code:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编辑`public function show()`并添加以下代码：
- en: '[PRE47]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Add the following line, right after `App\Http\Requests`:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App\Http\Requests`之后添加以下行：
- en: '[PRE48]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Update the `routes.php` file, inside the routes folder, to the following code:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`routes.php`文件，将其更改为以下代码：
- en: '[PRE49]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Open your browser and go to `http://localhost:8081/bands`, where you will see
    the following content:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，转到`http://localhost:8081/bands`，您将看到以下内容：
- en: '[PRE50]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Don't worry if your data is different from the previous code; this is due to
    Faker generating random data. Note that we are returning a JSON directly to the
    browser, instead of returning the data to the view. This is a very important feature
    of Laravel; it serializes and deserializes data, by default.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的数据与之前的代码不同，不要担心；这是由于 Faker 生成了随机数据。请注意，我们直接将 JSON 返回给浏览器，而不是将数据返回给视图。这是
    Laravel 的一个非常重要的特性；它默认序列化和反序列化数据。
- en: Creating the Blade template engine
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建刀片模板引擎
- en: 'Now, it''s time to create another view component. This time, we will use the
    Blade template engine to show some records from our database. Let''s look at what
    the official documentation says about Blade:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建另一个视图组件了。这一次，我们将使用刀片模板引擎来显示数据库中的一些记录。让我们看看官方文档对刀片的说法：
- en: <q>Blade is the simple, yet powerful, templating engine provided with Laravel.
    Unlike other popular PHP templating engines, Blade does not restrict you from
    using plain PHP code in your views. All Blade views are compiled into plain PHP
    code and cached until they are modified, meaning Blade adds essentially zero overhead
    to your application.</q>
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: <q>刀片是 Laravel 提供的简单而强大的模板引擎。与其他流行的 PHP 模板引擎不同，刀片不限制您在视图中使用纯 PHP 代码。所有刀片视图都会被编译成纯
    PHP 代码并缓存，直到被修改，这意味着刀片对您的应用基本上没有额外开销。</q>
- en: 'Now, it''s time to see this behavior in action:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候看到这个行为的实际效果了：
- en: Go back to the code editor and create another folder inside `resources/views`,
    called `bands`.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到代码编辑器，在`resources/views`内创建一个名为`bands`的文件夹。
- en: 'Create a file, `show.blade.php`, inside `resources/views/bands`, and place
    the following code in it:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`resources/views/bands`内创建一个名为`show.blade.php`的文件，并将以下代码放入其中：
- en: '[PRE51]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You can find out more about Blade at [https://laravel.com/docs/5.2/blade](https://laravel.com/docs/5.2/blade).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://laravel.com/docs/5.2/blade](https://laravel.com/docs/5.2/blade)了解更多关于刀片的信息。
- en: 'Open your browser to `http://localhost:8081/bands/1`. You will see the template
    in action, with results similar to the following:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://localhost:8081/bands/1`。你会看到模板在运行中，结果类似以下：
- en: '![](assets/88d7abed-5777-4c77-9327-8a4d51b376b6.png)View of the template engine'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/88d7abed-5777-4c77-9327-8a4d51b376b6.png)模板引擎的视图'
- en: Note that here, we are using the Blade template engine to show a record from
    our database. Now, let's create another view to render all of the records.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里我们使用刀片模板引擎来显示数据库中的记录。现在，让我们创建另一个视图来渲染所有的记录。
- en: 'Create another file, called `index.blade.php`, inside `resources/views/bands`,
    and place the following code in it:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`resources/views/bands`内创建一个名为`index.blade.php`的文件，并将以下代码放入其中：
- en: '[PRE52]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Go back to your browser and visit `http://localhost:8081/bands/`, where you
    will see a result similar to the following:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到你的浏览器，访问`http://localhost:8081/bands/`，你会看到类似以下的结果：
- en: '![](assets/0e5fd10e-9e6a-492e-8aee-6b1f25f78916.png)View template engine'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0e5fd10e-9e6a-492e-8aee-6b1f25f78916.png)视图模板引擎'
- en: Summary
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have finally finished the first chapter, and we have covered many of the
    core concepts of the Laravel framework. Even with the simple examples that we
    discussed in this chapter, we have provided a relevant basis for all of Laravel's
    functionality. It would be possible to create incredible applications with only
    this knowledge. However, we intend to delve deeper into some concepts that deserve
    separate chapters. Throughout the book, we will create an entire application,
    using a RESTful API, Angular, and some other tools, such as TypeScript, which
    we will look at in the next chapter.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于完成了第一章，并涵盖了 Laravel 框架的许多核心概念。即使在本章讨论的简单示例中，我们也为 Laravel 的所有功能提供了相关的基础。只凭这些知识就可以创建令人难以置信的应用。但是，我们打算深入探讨一些值得单独章节的概念。在整本书中，我们将使用
    RESTful API、Angular 和一些其他工具创建一个完整的应用，比如 TypeScript，我们将在下一章中讨论。
