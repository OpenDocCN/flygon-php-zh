- en: Chapter 4. Data Operations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。数据操作
- en: In the previous chapter, we learned about functions and classes. We covered
    how to define and call functions. We also covered how to define classes and use
    classes and functions together.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了函数和类。我们讨论了如何定义和调用函数。我们还讨论了如何定义类并将类和函数一起使用。
- en: In this chapter, we will focus on handling input from users and printing outcomes
    back to them, handling errors gracefully, and learning the basics of using the
    MySQL database.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于处理用户的输入并将结果打印回给他们，优雅地处理错误，并学习使用MySQL数据库的基础知识。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Identify how to accept input from the user and print it to the screen
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定如何接受用户输入并将其打印到屏幕上
- en: Implement the basics of using MySQL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现使用MySQL的基础知识
- en: Inputting and Outputting Data
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输入和输出数据
- en: Being able to accept input from a user is a major requirement when moving from
    building websites with PHP to building web applications with PHP. Typically, input
    comes from HTML forms.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 能够接受用户输入是从使用PHP构建网站转向使用PHP构建Web应用程序时的一个主要要求。通常，输入来自HTML表单。
- en: 'Let''s create a simple contact form:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的联系表单：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding contact form, we see input for a user's name, email, and a
    message. The method that we are going to use to submit this form is called a `POST`
    request.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述联系表单中，我们看到了用户姓名、电子邮件和消息的输入。我们将使用的提交此表单的方法称为`POST`请求。
- en: 'To read the data that is being submitted, we are going to add some PHP to the
    top of the form, which will read and render data from our `POST` request:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了读取正在提交的数据，我们将在表单顶部添加一些PHP代码，这些代码将从我们的`POST`请求中读取并呈现数据：
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, it's easy to accept input from our application's user. In the
    preceding code example, we use a special variable, `$_POST` array, to access all
    of the data that is submitted via a `POST` request. The `$_POST` variable, an
    associative array, and the content can be accessed via the names you specify in
    the input elements.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，接受应用程序用户的输入很容易。在上面的代码示例中，我们使用了一个特殊变量`$_POST`数组，来访问通过`POST`请求提交的所有数据。`$_POST`变量是一个关联数组，可以通过您在输入元素中指定的名称来访问内容。
- en: Another request type that you can use is `GET` request. `GET` requests are used
    more often than you might think; `GET` is the request type that you use when you
    navigate to a website or perform a search on Google. The input for a `GET` request
    is done via a query string.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用的另一种请求类型是`GET`请求。`GET`请求比您想象的更常用；当您导航到网站或在Google上进行搜索时，就会使用`GET`请求。`GET`请求的输入是通过查询字符串完成的。
- en: 'A query string is a string that is attached to the end of a URL, prepended
    with a question mark, as seen here: [https://www.example.com?name=Michael&age=12](https://www.example.com?name=Michael&age=12):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查询字符串是附加到URL末尾的字符串，以问号开头，如下所示：[https://www.example.com?name=Michael&age=12](https://www.example.com?name=Michael&age=12)：
- en: '![Inputting and Outputting Data](graphics/4_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![输入和输出数据](graphics/4_01.jpg)'
- en: In the preceding example, you can see that we have two keys that are separated
    with an ampersand. Just like in the `POST` method, there is a special variable
    for a `GET` request, and that is the `$_GET` variable (which is an associative
    array, as well).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，您可以看到我们有两个用和号分隔的键。就像在`POST`方法中一样，`GET`请求也有一个特殊的变量，那就是`$_GET`变量（它是一个关联数组）。
- en: 'If we want to get the name from the previous query string, you can use this
    line of code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要从之前的查询字符串中获取名称，可以使用这行代码：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can use the `GET` request with the form, as well. Let''s revisit the form
    element that we saw before:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在表单中使用`GET`请求。让我们重新访问之前看到的表单元素：
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the form's method attribute, we changed it to `GET`, swapping the `$_POST`
    variable with the `$_GET` variable.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单的方法属性中，我们将其更改为`GET`，用`$_GET`变量替换了`$_POST`变量。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When accepting user input, it's sometimes necessary to clean up the input before
    doing anything with it. Some input requires cleaning any whitespace from the beginning
    and end. This is where PHP's `trim` function comes in to play. The `trim` function
    will clean whitespace, and other similar characters, from both sides of the user's
    input. If you want to remove from either the left or right side, you can use the
    `ltrim` and `rtrim` functions, respectively.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接受用户输入时，有时需要在对其进行任何操作之前清理输入。某些输入需要清除开头和结尾的任何空格。这就是PHP的`trim`函数发挥作用的地方。`trim`函数将清除用户输入的两侧的空格和其他类似字符。如果要从左侧或右侧删除，可以分别使用`ltrim`和`rtrim`函数。
- en: Building a Form for Our User List
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为我们的用户列表构建一个表单
- en: 'We are going to start off by building a form for our user list. At the end
    of this section, you will have a form that will accept your `firstname`, `lastname`,
    and `email`. It will have a submit button at the end, to submit the information:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先构建一个用户列表的表单。在本节结束时，您将拥有一个表单，可以接受您的`firstname`、`lastname`和`email`。它将在最后有一个提交按钮，用于提交信息：
- en: Create a new directory and call it `users_list`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`users_list`的新目录。
- en: In the new directory, create an `index.php` file.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新目录中创建一个`index.php`文件。
- en: 'Open the `index.php` file in your text editor, and add the form code:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`index.php`文件，并添加表单代码：
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that we have our form, we want to be able to view the data submitted to
    the form:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了表单，我们希望能够查看提交给表单的数据：
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, to see our form in action, we will open the working directory in the Terminal
    and run the following command:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了看到我们的表单起作用，我们将在终端中打开工作目录并运行以下命令：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With any web application, you are going to need to have a way to store data.
    The service that permits you to persist your current state in MySQL database is
    known as persistence. If variables allow you to store data temporarily, persistence
    allows you to store the data in databases long term.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何Web应用程序，您都需要一种存储数据的方式。允许您将当前状态持久保存在MySQL数据库中的服务称为持久性。如果变量允许您暂时存储数据，持久性允许您长期存储数据在数据库中。
- en: The primary database type that is used in PHP is MySQL. MySQL databases are
    known as relational-based databases that are organized into tables.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: PHP中主要使用的数据库类型是MySQL。MySQL数据库被称为关系型数据库，它们被组织成表格。
- en: In this section, we will cover how to use a MySQL database with PHP, and how
    to perform various operations with it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何在PHP中使用MySQL数据库以及如何执行各种操作。
- en: Connect to a Database
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: The first step for using a database is to connect to one. In this chapter, we
    are going to focus on using the PDO, or PHP Data Object, style of usage.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据库的第一步是连接到数据库。在本章中，我们将专注于使用PDO（PHP数据对象）风格的用法。
- en: 'To connect to a database, use the following lines of code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到数据库，请使用以下代码行：
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: MySQL Basics
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL基础知识
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code, you can see that we have a good chunk of new code. We
    start off by defining four new variables to hold the credential values for our
    database: one for the host URL, one for the username, one for the password, and
    finally, one for the name of the database that we are connecting to. Next, we
    wrap the database connection code within a `try` block; this will `catch` any
    errors that come up when we connect to the database and run queries. Within the
    `try` block, we initiate a new instance of the PDO class by using the credential
    variables we defined earlier, assigning it to the `$conn` variable. We then set
    the error mode to ensure that it triggers our `catch` block if any errors occur.
    Lastly, in the `try` section, we `echo` out a successful connection message. In
    the `catch` section of the try/catch block, we simply echo out the error message
    that was triggered.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，您可以看到我们有一大块新代码。我们首先定义四个新变量来保存数据库的凭据值：一个用于主机URL，一个用于用户名，一个用于密码，最后一个用于我们连接的数据库的名称。接下来，我们将数据库连接代码包装在`try`块中；这将在连接到数据库并运行查询时`catch`任何错误。在`try`块中，我们通过使用我们之前定义的凭据变量来初始化PDO类的新实例，将其分配给`$conn`变量。然后，我们设置错误模式以确保如果出现任何错误，它会触发我们的`catch`块。最后，在`try`部分，我们`echo`出一个成功的连接消息。在try/catch块的`catch`部分中，我们只是`echo`出触发的错误消息。
- en: Create a Database Table
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库表
- en: 'We will now create a table using an SQL query:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用SQL查询创建一个表：
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To create a table, we use the `CREATE TABLE` command, followed by the name of
    the table. Then, inside a pair of parentheses, we define the fields for the table.
    The table that we created in the query will create a user's table, which will
    hold the user's ID (the primary key of this table) and will auto-increment a user's
    name of the type `varchar,` with a maximum of 60 characters. The table will also
    hold an email address of the type `varchar`, with a maximum of 30 characters.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表格时，我们使用`CREATE TABLE`命令，后面跟着表格的名称。然后，在一对括号内，我们定义表格的字段。我们在查询中创建的表将创建一个用户表，其中将保存用户的ID（此表的主键），并将自动递增用户名称，类型为`varchar`，最多60个字符。表还将保存一个电子邮件地址，类型为`varchar`，最多30个字符。
- en: Insert a Record into the Database
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向数据库插入记录
- en: 'We now have a table in our database, and we can add data to it. We add data
    using an `insert` query. After we connect to the database and set the error mode,
    we can define our query. The `Insert` query starts with the `INSERT INTO` command,
    followed by the name of the table that we are inserting data into. In a pair of
    parentheses, we define the fields that we are going to write to. Right after the
    fields, we define the values that we want to enter into the table:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的数据库中有一个表，我们可以向其中添加数据。我们使用`insert`查询添加数据。连接到数据库并设置错误模式后，我们可以定义我们的查询。`Insert`查询以`INSERT
    INTO`命令开始，后面跟着我们要插入数据的表的名称。在一对括号内，我们定义要写入的字段。在字段之后，我们定义要输入表格的值：
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Fetch a Single Row from a Database Table
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从数据库表中获取单行数据
- en: 'If you want to fetch a user from the database, you use a `SELECT` query. In
    this case, we want to get the new user that we inserted in the previous code block.
    We''ll use the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要从数据库中获取用户，可以使用`SELECT`查询。在这种情况下，我们要获取前一个代码块中插入的新用户。我们将使用以下代码：
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using the `$conn` variable, we prepare a `SELECT` query, indicating that we
    want to pull information from the users table; we then use the `WHERE` clause
    to define the conditions for the desired information. To finally run the query,
    we execute the prepared statement, passing an `array` with the required email
    address. Since we want to have an associative array returned to us, we set the
    fetch model to `FETCH_ASSOC`, getting the single record by using the fetch method.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`$conn`变量，我们准备一个`SELECT`查询，指示我们要从用户表中提取信息；然后我们使用`WHERE`子句来定义所需信息的条件。最后，我们执行准备好的语句，传递一个带有所需电子邮件地址的`array`。由于我们希望得到一个关联数组返回给我们，我们将获取模型设置为`FETCH_ASSOC`，通过使用fetch方法获取单个记录。
- en: To render the user array, we use the `PRINT` command in between the open and
    close `pre tags`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染用户数组，我们在开放和关闭的`pre`标签之间使用`PRINT`命令。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`pre tags` beautifies an array that has been printed. This is typically used
    to debug what is contained within an array.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`pre`标签美化了已打印的数组。这通常用于调试数组中包含的内容。'
- en: Fetch Multiple Rows from a Database Table
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从数据库表中获取多行
- en: 'If we want to fetch all of the users in a table, we do away with the prepared
    statements and run a query directly. This time around, we remove the `WHERE` clause.
    Instead of using the fetch function, we use the `fetch_all` function:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要获取表中的所有用户，我们可以放弃准备好的语句并直接运行查询。这一次，我们去掉了`WHERE`子句。我们不再使用fetch函数，而是使用`fetch_all`函数：
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Update a Record in a Database Table
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新数据库表中的记录
- en: Now that we understand how to add and fetch data from a database table, we can
    start to edit individual records. In MySQL, we update data by using an `UPDATE`
    query. To run an `UPDATE` query, we go back to our prepared statements and start
    our query with the command `UPDATE,` followed by the name of the table (in this
    case, the users table). Next, we use the `SET` command to start the process of
    defining the fields and the values that need to be updated, and then we add a
    `WHERE` clause to isolate the specific record(s) that we want to have the new
    values. To add a bit of feedback to how the query went, echo out the count via
    the row count function.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何向数据库表中添加和获取数据，我们可以开始编辑单个记录。在MySQL中，我们使用`UPDATE`查询来更新数据。要运行`UPDATE`查询，我们回到我们的准备好的语句，并以`UPDATE`命令开头，后跟表的名称（在本例中为用户表）。接下来，我们使用`SET`命令开始定义需要更新的字段和值的过程，然后我们添加`WHERE`子句来隔离我们希望具有新值的特定记录。为了对查询的执行情况进行一些反馈，通过行计数函数回显计数。
- en: Let's change our user's email address to `test123@email.com:`
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将用户的电子邮件地址更改为`test123@email.com`：
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Delete a Record in a Database Table
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从数据库表中删除记录
- en: 'Our final section in MySQL will be removing data from a database. To remove
    data, we use the `DELETE` query. The `DELETE` query starts with `DELETE FROM,`
    followed by the name of the table you are looking to remove data from; finish
    the query with a `WHERE` clause, to further specify the record you wish to delete.
    We place this query in a prepared statement, then execute it by passing the value
    of the `WHERE` clause:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在MySQL中的最后一部分将是从数据库中删除数据。要删除数据，我们使用`DELETE`查询。`DELETE`查询以`DELETE FROM`开头，后跟您要从中删除数据的表的名称；使用`WHERE`子句完成查询，以进一步指定要删除的记录。我们将此查询放在准备好的语句中，然后通过传递`WHERE`子句的值来执行它：
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating an employee Table
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建员工表
- en: 'Our final project will be to store the input that we get from the users within
    a database table. Before we get into writing the code to add the data to the database, we
    need to create a database, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终项目将是将我们从用户那里获得的输入存储在数据库表中。在编写将数据添加到数据库的代码之前，我们需要创建一个数据库，如下所示：
- en: Open the Terminal.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Connect to MySQL using the following command:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令连接到MySQL：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, create the `packt_database` database:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建`packt_database`数据库：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Tell MySQL to use the newly created database:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉MySQL使用新创建的数据库：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, create the users table:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建用户表：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, we can close our Terminal and get started finishing our app.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以关闭我们的终端并开始完成我们的应用程序。
- en: Adding Users to a Database
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向数据库添加用户
- en: In this section, we are going to add users to our database using PHP. We then
    create a form where we accept the `INSERT` query from the user.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用PHP向数据库添加用户。然后，我们创建一个表单，接受用户的`INSERT`查询。
- en: 'To perform this, perform these steps:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此操作，请执行以下步骤：
- en: Reopen the `users_list` directory in your text editor.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中重新打开`users_list`目录。
- en: 'Within the second `if` statement, connect to your database:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个`if`语句中，连接到您的数据库：
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, go ahead and use an `INSERT` query to add the input that you receive
    from the user to the database:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，继续使用`INSERT`查询将用户输入添加到数据库中：
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the full code snippet, refer to the `Lesson 4.php` file in the code files
    folder.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 4.php`文件。
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, you''re ready to test out the simple app. Open the `user_list` directory
    in the Terminal and use the following command to serve your app:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您已经准备好测试简单的应用程序。在终端中打开`user_list`目录，并使用以下命令来启动您的应用程序：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have reached the end of this chapter. In this chapter, we learned how to
    accept a user's input, and how to access it via PHP. Finally, we learned the basics
    of using MySQL databases, and applied all of the principles into a mini app that
    adds users to a database via a web form.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了本章的结尾。在本章中，我们学习了如何接受用户的输入，以及如何通过PHP访问它。最后，我们学习了使用MySQL数据库的基础知识，并将所有原则应用到一个通过Web表单向数据库添加用户的迷你应用程序中。
- en: In the next chapter, we will cover the basics of building a PHP web application
    using Object Oriented Programming principles such as namespaces, use statements,
    access modifiers, and so on. We will also cover how to structure an application
    properly using MVC design concepts.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍使用面向对象编程原则构建PHP Web应用程序的基础知识，例如命名空间、使用语句、访问修饰符等。我们还将介绍如何使用MVC设计概念正确地构建应用程序。
