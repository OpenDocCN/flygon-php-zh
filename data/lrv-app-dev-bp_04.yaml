- en: Chapter 4. Building a Personal Blog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。构建个人博客
- en: 'In this chapter, we''ll code a simple personal blog with Laravel. We''ll also
    cover Laravel''s built-in authentication, paginate mechanism, and named routes.
    We''ll elaborate some rapid development methods, which come with Laravel, such
    as creating route URLs. The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Laravel编写一个简单的个人博客。我们还将介绍Laravel内置的身份验证、分页机制和命名路由。我们将详细介绍一些快速开发方法，这些方法是Laravel自带的，比如创建路由URL。本章将涵盖以下主题：
- en: Creating and migrating the posts database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和迁移帖子数据库
- en: Creating a posts model
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个帖子模型
- en: Creating and migrating the authors database
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和迁移作者数据库
- en: Creating a members-only area
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个仅限会员的区域
- en: Saving a blog post
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存博客帖子
- en: Assigning blog posts to users
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将博客帖子分配给用户
- en: Listing articles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出文章
- en: Paginating the content
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对内容进行分页
- en: Creating and migrating the posts database
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移帖子数据库
- en: 'We assume that you have already defined database credentials in the `app/config/database.php`
    file. For this application, we need a database. You can simply create and run
    the following SQL command or basically you can use your database administration
    interface, something like phpMyAdmin:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设你已经在`app/config/database.php`文件中定义了数据库凭据。对于这个应用程序，我们需要一个数据库。你可以简单地创建并运行以下SQL命令，或者基本上你可以使用你的数据库管理界面，比如phpMyAdmin：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After successfully creating the database for the application, first we need
    to create a posts table and install it in the database. To do this, open up your
    terminal, navigate through your project folder, and run this command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 成功创建应用程序的数据库后，首先我们需要创建一个帖子表并将其安装在数据库中。要做到这一点，打开你的终端，导航到你的项目文件夹，并运行这个命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command will generate a migration file under `app/database/migrations`
    for generating a new MySQL table named `posts` in our `laravel_blog` database.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将在`app/database/migrations`下生成一个迁移文件，用于在我们的`laravel_blog`数据库中生成一个名为`posts`的新MySQL表。
- en: 'To define our table columns and specifications, we need to edit this file.
    After editing the migration file, it should look like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义我们的表列和规范，我们需要编辑这个文件。编辑迁移文件后，它应该看起来像这样：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After saving the file, we need to use a simple `artisan` command to execute
    migrations:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，我们需要使用一个简单的`artisan`命令来执行迁移：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If no error occurs, check the `laravel_blog` database for the `posts` table
    and columns.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误发生，请检查`laravel_blog`数据库中的`posts`表和列。
- en: Creating a posts model
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个帖子模型
- en: As you know, for anything related to database operations on Laravel, using models
    is the best practice. We will benefit from the Eloquent ORM.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，对于Laravel上的任何与数据库操作相关的事情，使用模型是最佳实践。我们将受益于Eloquent ORM。
- en: 'Save this code in a file named as `Posts.php` under `app/models/`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将这段代码保存在一个名为`Posts.php`的文件中，放在`app/models/`下：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We have set the database table name with the protected `$table` variable. We
    have also set editable columns with the `$fillable` variable and timestamps with
    the `$timestamps` variable as we've already seen and used in previous chapters.
    The variables which are defined in the model are enough for using Laravel's Eloquent
    ORM. We'll cover the public `Author()` function in the *Assigning blog posts to
    users* section of this chapter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用受保护的`$table`变量设置了数据库表名。我们还使用了`$fillable`变量设置可编辑的列，并使用了`$timestamps`变量设置时间戳，就像我们在之前的章节中已经看到并使用过的那样。在模型中定义的变量足以使用Laravel的Eloquent
    ORM。我们将在本章的*将博客帖子分配给用户*部分介绍公共的`Author()`函数。
- en: Our posts model is ready. Now we need an authors model and database to assign
    blog posts to authors. Let's investigate Laravel's built-in authentication mechanism.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的帖子模型已经准备好了。现在我们需要一个作者模型和数据库来将博客帖子分配给作者。让我们研究一下Laravel内置的身份验证机制。
- en: Creating and migrating the authors database
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和迁移作者数据库
- en: 'Contrary to most of the PHP frameworks, Laravel has a basic authentication
    class. The authentication class is very helpful in rapidly developing applications.
    First, we need a secret key for our application. The application secret key is
    very important for our application''s security because all data is hashed salting
    this key. The artisan command can generate this key for us with a single command
    line:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数PHP框架相反，Laravel有一个基本的身份验证类。身份验证类在快速开发应用程序方面非常有帮助。首先，我们需要一个应用程序的秘钥。应用程序的秘钥对于我们应用程序的安全非常重要，因为所有数据都是使用这个秘钥进行哈希加盐的。`artisan`命令可以用一个单一的命令行为我们生成这个秘钥：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If no error occurs, you will see a message that tells you that the key is generated
    successfully. After key generation, if you face problems with opening your Laravel
    application, simply clear your browser cache and try again. Next, we should edit
    the authentication class''s configuration file. For using Laravel''s built-in
    authentication class, we need to edit the configuration file, which is located
    at `app/config/auth.php`. The file contains several options for the authentication
    facilities. If you need to change the table name, and so on, you can make the
    changes under this file. By default, Laravel comes with the `User` model. You
    can see the `User.php` file, which is located at `app/models/`. With Laravel 4,
    we need to define which fields are fillable in our `Users` model. Let''s edit
    `User.php` located at `app/models/` and add the "fillable" array:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误发生，你将看到一条消息，告诉你秘钥已经成功生成。在生成秘钥后，如果你在打开Laravel应用程序时遇到问题，只需清除浏览器缓存，然后重试。接下来，我们应该编辑身份验证类的配置文件。为了使用Laravel内置的身份验证类，我们需要编辑位于`app/config/auth.php`的配置文件。该文件包含了身份验证设施的几个选项。如果你需要更改表名等，你可以在这个文件下进行更改。默认情况下，Laravel自带`User`模型。你可以看到位于`app/models/`下的`User.php`文件。在Laravel
    4中，我们需要定义`Users`模型中哪些字段是可填充的。让我们编辑位于`app/models/`下的`User.php`并添加"fillable"数组：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Basically, we need three columns for our authors. These are:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '基本上，我们需要为我们的作者有三列。这些是： '
- en: '`email`: This column stores author''s e-mails'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`：这一列存储作者的电子邮件'
- en: '`password`: This column stores authors'' passwords'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password`：这一列存储作者的密码'
- en: '`name`: This column stores the authors'' names and surnames'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这一列存储作者的名字和姓氏'
- en: 'Now we need several migration files to create the `users` table and add an
    author to our database. To create a migration file, give a command such as the
    following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要几个迁移文件来创建`users`表并向我们的数据库添加作者。要创建一个迁移文件，可以给出以下命令：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open the migration file, which was created recently and located at `app/database/migrations/`.
    We need to edit the `up()` function as the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 打开最近创建的迁移文件，位于`app/database/migrations/`。我们需要编辑`up()`函数如下：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After editing the migration file, run the `migrate` command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑迁移文件后，运行`migrate`命令：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you know, the command creates the `users` table and its columns. If no error
    occurs, check the `laravel_blog` database for the `users` table and the columns.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，该命令创建了`users`表及其列。如果没有错误发生，请检查`laravel_blog`数据库中的`users`表和列。
- en: 'Now we need to create a new migration file for adding some authors to the database.
    We can do so by running the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个新的迁移文件，向数据库中添加一些作者。我们可以通过运行以下命令来实现：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open up the migration file and edit the `up()` function as the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 打开迁移文件并编辑`up()`函数如下：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We used a new class in the `up()` function, which is named `Hash`. Laravel has
    a hash maker/checker class, which is based on secure **Bcrypt**. Bcrypt is an
    accepted, secure hashing method for important data such as passwords.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`up()`函数中使用了一个新的类，名为`Hash`。Laravel有一个基于安全**Bcrypt**的哈希制造/检查类。Bcrypt是一种被接受的、安全的哈希方法，用于重要数据，如密码。
- en: 'The class for which we have created an application key with the artisan tool
    at the beginning of this chapter is used for salting. So, to apply migration,
    we need to migrate with the following artisan command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章开头使用artisan工具创建应用程序密钥的类用于加盐。因此，要应用迁移，我们需要使用以下artisan命令进行迁移：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, check the `users` table for a record. If you check the `password` column,
    you will see a record stored as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查`users`表是否有记录。如果你检查`password`列，你会看到记录存储如下：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It is very important to securely store your user's passwords and their critical
    data. Do not forget that if you change the application key, all the existing hashed
    records will be unusable because the `Hash` class uses the application key as
    the salting key when validating and storing given data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 安全地存储用户的密码和关键数据非常重要。不要忘记，如果你更改应用程序密钥，所有现有的哈希记录将无法使用，因为`Hash`类在验证和存储给定数据时使用应用程序密钥作为盐键。
- en: Creating a members-only area
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个仅会员可访问的区域
- en: As you know, our blog system is member based. Because of that we need some areas
    to be accessible by members only, for adding new posts to the blog. We have two
    different methods to do this. The first one is the route filter method, which
    we will elaborate in the next chapters. The second is the template-based authorization
    check. This method is a more effective way of understanding the use of the `Auth`
    class with the **Blade template system**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的博客系统是基于会员的。因此，我们需要一些区域只能会员访问，以便添加新的博客文章。我们有两种不同的方法来实现这一点。第一种是路由过滤器方法，我们将在接下来的章节中详细介绍。第二种是基于模板的授权检查。这种方法是更有效地理解`Auth`类与**Blade模板系统**的使用方式。
- en: 'With the `Auth` class we can check the authorization status of a visitor by
    just a single line of code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Auth`类，我们可以通过一行代码来检查访问者的授权状态：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `check()` function, which is based on the `Auth` class, always returns `true`
    or `false`. So, that means we can easily use the function in an `if/else` statement
    in our code. As you know from previous chapters, with the blade template system
    we were able to use that kind of PHP statement in the template files.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 基于`Auth`类的`check()`函数总是返回`true`或`false`。这意味着我们可以在我们的代码中轻松地在`if/else`语句中使用该函数。如你从之前的章节所知，使用blade模板系统，我们能够在模板文件中使用这种类型的PHP语句。
- en: 'Before creating the template files we need to write our routes. We need four
    routes for our application. These are:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建模板文件之前，我们需要编写我们的路由。我们的应用程序需要四个路由。它们是：
- en: A login route to process login requests
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个登录路由来处理登录请求
- en: A new post route to process new post requests
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个处理新文章请求的新文章路由
- en: An admin route to show a new post form and a login form
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于显示新文章表单和登录表单的管理路由
- en: An index route to list posts
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于列出文章的索引路由
- en: 'Named routing is another amazing feature of the Laravel framework for rapid
    development. Named routes allow referring to routes when generating redirects
    or URLs more comfortably. You may specify a name for a route as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 命名路由是Laravel框架的另一个令人惊叹的特性，用于快速开发。命名路由允许在生成重定向或URL时更舒适地引用路由。你可以按以下方式为路由指定名称：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You may also specify route names for controllers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以为控制器指定路由名称：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Thanks to the named routes, we can easily create URLs for our application:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于命名路由，我们可以轻松地为我们的应用程序创建URL：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can also use the named routes to redirect:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用命名路由进行重定向：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Open the route configuration file, which is located at `app/routes.php` and
    add the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打开路由配置文件，位于`app/routes.php`，并添加以下代码：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now we need to write the code for the controller side and templates of our
    application. First, we can start coding from our admin area. Let''s create a file
    under `app/views/` with the name `addpost.blade.php`. Our admin template should
    look like the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写应用程序的控制器端和模板的代码。首先，我们可以从我们的管理区域开始编码。让我们在`app/views/`下创建一个名为`addpost.blade.php`的文件。我们的管理模板应该如下所示：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see in the code, we use `if`/`else` statements in a template to
    check a user''s login credentials. We know already from the beginning of this
    section that we use the `Auth::check()` function to check the login status of
    a user. Also, we''ve used a new method to get the currently logged in user''s
    name:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在代码中所看到的，我们在模板中使用`if`/`else`语句来检查用户的登录凭据。我们从本节的开头就已经知道，我们使用`Auth::check()`函数来检查用户的登录状态。此外，我们还使用了一种新的方法来获取当前登录用户的名称：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can get any information about the current user with the `user` method:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`user`方法获取关于当前用户的任何信息：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The template code first checks the login status of the visitor. If the visitor
    has logged in, the template shows a new post form; else it shows a login form.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 模板代码首先检查访问者的登录状态。如果访问者已登录，则模板显示一个新文章表单；否则显示一个登录表单。
- en: 'Now we have to code the controller side of our blog application. Let''s start
    from our users controller. Create a file under `app/controller/`, which is named
    `UsersContoller.php`. The final code of the controller should be as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写博客应用程序的控制器端。让我们从我们的用户控制器开始。在 `app/controller/` 下创建一个名为 `UsersContoller.php`
    的文件。控制器的最终代码应如下所示：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The controller has two functions: the first is the `postLogin()` function.
    This function basically checks the posted form data for user login and then redirects
    the visitor to the `add_new_post` route to show the new post form. The second
    function processes the logout request and redirects to the `index` route.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器有两个函数：第一个是 `postLogin()` 函数。该函数基本上检查用户登录的表单数据，然后将访问者重定向到 `add_new_post` 路由以显示新文章表单。第二个函数处理注销请求，并重定向到
    `index` 路由。
- en: Saving a blog post
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存博客文章
- en: 'Now we need one more controller for our blog posts. So, create a file under
    `app/controller/`, that is named `PostsContoller.php`. The final code of the controller
    should be as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为我们的博客文章创建一个控制器。因此，在 `app/controller/` 下创建一个名为 `PostsContoller.php` 的文件。控制器的最终代码应如下所示：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Assigning blog posts to users
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将博客文章分配给用户
- en: 'The `postAdd()` function processes the new blog post create request on the
    database. As you can see, we can get the author''s ID with a previously mentioned
    method:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`postAdd()` 函数处理数据库上的新博客文章创建请求。正如您所看到的，我们可以使用先前提到的方法获取作者的 ID：'
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With this method, we can assign the current user with a blog post. As you will
    see, we have a new method in the query:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，我们可以为当前用户分配一个博客文章。正如您将看到的，我们在查询中有一个新方法：
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If you remember, we''ve defined a public `Author ()` function in our `Posts`
    model:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您记得，我们在我们的 `Posts` 模型中定义了一个公共的 `Author()` 函数：
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `belongsTo()` method is an `Eloquent` function to create relations between
    tables. Basically the function needs one required variable and one optional variable.
    The first variable (required) defines the target `Model`. The second and optional
    variable is to define the source column of the current model's table. If you don't
    define the optional variable, the `Eloquent` class searches the `targetModelName_id`
    column. In the `posts` table, we store the authors' IDs in the `author_id` column,
    not in the column named `user_id`. Because of this, we need to define a second
    optional variable in the function. With this method, we can pass our blog posts
    and all its authors' information to the template file. You can think of the method
    as some kind of a SQL join method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`belongsTo()` 方法是一个 `Eloquent` 函数，用于创建表之间的关系。基本上，该函数需要一个必需的变量和一个可选的变量。第一个变量（必需）定义了目标
    `Model`。第二个可选变量用于定义当前模型表的源列。如果不定义可选变量，`Eloquent` 类会搜索 `targetModelName_id` 列。在
    `posts` 表中，我们将作者的 ID 存储在 `author_id` 列中，而不是在名为 `user_id` 的列中。因此，我们需要在函数中定义第二个可选变量。使用这种方法，我们可以将博客文章及其所有作者的信息传递到模板文件中。您可以将该方法视为某种
    SQL 连接方法。'
- en: 'When we want to use these relation functions in queries, we can easily call
    them as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想在查询中使用这些关系函数时，我们可以轻松地调用它们如下所示：
- en: '[PRE28]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: It is easy to manage the template files with fewer variables. Now we have just
    one variable to pass the template file, which is combined with all the necessary
    data. So, we need the second template file to list our blog posts. This template
    will work at our blog's frontend.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用较少的变量管理模板文件很容易。现在我们只需要一个变量来传递模板文件，其中包含所有必要的数据。因此，我们需要第二个模板文件来列出我们的博客文章。这个模板将在我们博客的前端工作。
- en: Listing articles
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出文章
- en: 'In the previous sections of this chapter, we''ve learned to use PHP `if/else`
    statements within blade template files. Laravel passes data to the template file
    as an array. So we need to use the `foreach` loop to parse data into the template
    file. We can also use a `foreach` loop in template files. So create a file under
    `app/views/` named `index.blade.php`. The code should look as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前几节中，我们已经学会了在 blade 模板文件中使用 PHP `if/else` 语句。Laravel 将数据作为数组传递到模板文件中。因此，我们需要使用
    `foreach` 循环将数据解析到模板文件中。我们还可以在模板文件中使用 `foreach` 循环。因此，在 `app/views/` 下创建一个名为 `index.blade.php`
    的文件。代码应如下所示：
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s dig the code. We''ve used a `foreach` loop inside the template file
    to parse all blog post data. Also, we see the combined author data usage in the
    `foreach` loop. As you may remember, we get the author information with the `belongsTo()`
    method in the model side. The whole relational data parsing is done inside an
    array, which is named the relation function name. For example, if we had a second
    relation function, which is named `Categories()`, the query would be something
    as follows on the controller side:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码。我们在模板文件中使用了 `foreach` 循环来解析所有博客文章数据。此外，我们还在 `foreach` 循环中看到了组合作者数据的使用。正如您可能记得的那样，我们在模型端使用
    `belongsTo()` 方法获取作者信息。整个关系数据解析都在一个名为关系函数名称的数组中完成。例如，如果我们有一个名为 `Categories()`
    的第二个关系函数，那么在控制器端查询将如下所示：
- en: '[PRE30]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `foreach` loop would look as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`foreach` 循环如下所示：'
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Paginating the content
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对内容进行分页
- en: 'Eloquent''s `get()` method, which we''ve used in the controller side in the
    `Eloquent` query, fetches all the data from the database with a given condition.
    Often we need to paginate the content for a user-friendly frontend or less page
    loads and optimizations. The `Eloquent` class has a helpful method to do this
    quickly, which is called `paginate()`. This method fetches the data paginated
    and generates paginate links in the template with just a single line of code.
    Open the `app/controllers/PostsController.php` file and change the query as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`Eloquent` 的 `get()` 方法在控制器端的 `Eloquent` 查询中使用，从数据库中获取所有数据。通常，我们需要对内容进行分页，以便用户友好的前端或减少页面加载和优化。`Eloquent`
    类有一个快速执行此操作的有用方法，称为 `paginate()`。该方法获取分页数据并在模板中生成分页链接，只需一行代码。打开 `app/controllers/PostsController.php`
    文件，并将查询更改为如下所示：'
- en: '[PRE32]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `paginate()` method paginates the data with the given numeric value. So,
    the blog posts will be paginating each page into `5` blog posts. We have to also
    change our template to show pagination links. Open `app/views/index.blade.php`
    and add the following code after the `foreach` loop:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`paginate()` 方法使用给定的数字值对数据进行分页。因此，博客文章将每页分页为 `5` 篇博客文章。我们还需要更改我们的模板以显示分页链接。打开
    `app/views/index.blade.php`，并在 `foreach` 循环之后添加以下代码：'
- en: '[PRE33]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The section in the template, which has the İD as `"main",` should look as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 模板中具有 ID 为 "main" 的部分应如下所示：
- en: '[PRE34]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `links()` function will generate pagination links automatically, if there
    is enough data to paginate. Else, the function shows nothing.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`links()` 函数将自动生成分页链接，如果有足够的数据进行分页。否则，该函数不显示任何内容。'
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've created a simple blog with Laravel's built-in functions
    and the Eloquent database driver. We've learned how to paginate the data and Eloquent's
    basic data relation mechanism. Also we've covered Laravel's built-in authentication
    mechanism. In the next chapters, we'll learn how to work with more complex tables
    and relational data.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 Laravel 的内置函数和 Eloquent 数据库驱动程序创建了一个简单的博客。我们学习了如何对数据进行分页以及 Eloquent
    的基本数据关系机制。同时，我们也介绍了 Laravel 的内置身份验证机制。在接下来的章节中，我们将学习如何处理更复杂的表格和关联数据。
