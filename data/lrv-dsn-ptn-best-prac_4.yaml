- en: Chapter 4. Controllers in MVC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。MVC中的控制器
- en: Throughout this chapter, we will be discussing what a Controller is, its structure,
    what its purpose is in the MVC pattern, and its usage in Laravel's extended design
    pattern and structure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论控制器是什么，它的结构是什么，它在MVC模式中的作用是什么，以及它在Laravel的扩展设计模式和结构中的使用。
- en: 'The topics that will be discussed in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: What is a Controller?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是控制器？
- en: The Controller's purpose in the MVC design pattern
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器在MVC设计模式中的作用
- en: The Controller's interaction with other components of the MVC design pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器与MVC设计模式的其他组件的交互
- en: How Laravel handles the Controller in its design pattern
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Laravel如何处理其设计模式中的控制器
- en: What is a Controller?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是控制器？
- en: The Controller is a part of the Model-View-Controller (MVC) design pattern that
    we can simply describe as the logical layer of our application. It understands
    the requests that come from the other end (a user or an API request), makes calls
    to the corresponding methods, performs primary checks, handles the logic of the
    request, and then returns the data to the corresponding View or redirects the
    end user to another route.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器是模型-视图-控制器（MVC）设计模式的一部分，我们可以简单地描述它为应用程序的逻辑层。它理解来自另一端（用户或API请求）的请求，调用相应的方法，执行主要检查，处理请求的逻辑，然后将数据返回给相应的视图或将最终用户重定向到另一个路由。
- en: The purpose of the Controller
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器的目的
- en: 'The following are some of the major roles of the Controller in an MVC structure:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是控制器在MVC结构中的一些主要角色：
- en: Holding the logic of the application and defining which event should be fired
    upon actions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制应用程序的逻辑并定义在操作时应该触发哪个事件
- en: Being the intermediary step between the Model, View, and other components of
    the application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为模型、视图和应用程序的其他组件之间的中间步骤
- en: Translating actions and responses that come from the View and Model that can
    be understood by them and sending them to other layers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 翻译来自视图和模型的动作和响应，使它们可以理解，并将它们发送到其他层
- en: Making a bridge between other components of the application and facilitating
    communication between them
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序的其他组件之间建立桥梁，并促进它们之间的通信
- en: Making primary permission checks in construct methods before any action
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行任何操作之前，在构造方法中进行主要权限检查
- en: This can best be explained with a real-world example.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过一个现实世界的例子来最好地解释。
- en: 'Let''s assume we have a user management website, and in the administration
    panel, an administrator tries to delete a user. In design patterns that follow
    SOLID principles, the following things happen if an admin clicks on the delete
    user button:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个用户管理网站，在管理面板中，管理员试图删除一个用户。在遵循SOLID原则的设计模式中，如果管理员点击删除用户按钮，将发生以下事情：
- en: From the View, the admin sends a request to the corresponding Controller to
    delete the news item.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从视图中，管理员发送请求到相应的控制器以删除新闻项目。
- en: The Controller understands this request and performs primary checks. First,
    it checks if the requester (the administrator, in our case) is really an administrator
    and has permissions to delete this user.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制器理解这个请求并进行主要检查。首先，它检查请求者（在我们的例子中是管理员）是否真的是管理员，并且有权限删除这个用户。
- en: After the primary checks, the Controller tells the Model to delete the user.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行主要检查后，控制器告诉模型删除用户。
- en: The Model performs some checks of its own and either deletes the user and tells
    the Controller that the user is deleted, or tells the Controller that the user
    is not available (maybe the user is already deleted).
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模型进行了一些自己的检查，要么删除了用户并告诉控制器用户已被删除，要么告诉控制器用户不可用（也许用户已经被删除）。
- en: After the response comes from the Model, the Controller either tells the View
    to tell the administrator the user is deleted or redirects to another page with
    a response like a 404 not found page.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模型得到响应后，控制器要么告诉视图告诉管理员用户已被删除，要么重定向到另一个页面，比如404页面未找到。
- en: As you can see from the preceding example, for all interactions, the Controller
    holds the major role for the communication between the components of the application.
    In an MVC pattern that follows SOLID principles, without the Controller, the View
    cannot interact with the Model and vice versa. Although there are some derivations
    to this architectural pattern, like where View interacts with Model(s) directly,
    in a perfect SOLID design architecture, the Controller should always be the intermediate
    element for all interactions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的例子中可以看出，对于所有的交互，控制器在应用程序的组件之间起着重要的沟通作用。在遵循SOLID原则的MVC模式中，没有控制器，视图无法与模型进行交互，反之亦然。虽然有一些对这种架构模式的派生，比如视图直接与模型进行交互，在一个完美的SOLID设计架构中，控制器应该始终是所有交互的中间元素。
- en: The Controller can also be considered as a translator. It gets input from the
    View in various ways and converts it to request(s) that can be understood by the
    Model(s), and vice versa.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器也可以被视为一个翻译器。它以各种方式从视图中获取输入，并将其转换为模型可以理解的请求，反之亦然。
- en: '![The purpose of the Controller](Image00008.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![控制器的目的](Image00008.jpg)'
- en: Controllers in Laravel
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Laravel中的控制器
- en: In Laravel 4, the Controllers are simple PHP classes with their filenames and
    classnames ending with the suffix `Controller` (not forced, but highly recommended;
    it's a standard between developers), which extends the class `BaseController`
    , and are stored in the folder `app/controllers` as default. This folder structure
    is defined in the `composer.json` file's `classmap` key and is not forced. Thanks
    to the Composer, as long as you define where the Controllers are stored in your
    application's structure, you can put them in any folder you like.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel 4中，控制器是简单的PHP类，它们的文件名和类名以后缀`Controller`结尾（不是强制的，但强烈建议；这是开发人员之间的标准），它们扩展了`BaseController`类，并存储在`app/controllers`文件夹中。这个文件夹结构在`composer.json`文件的`classmap`键中定义，不是强制的。由于Composer，只要你定义了控制器存储在应用程序结构中的位置，你可以把它们放在任何你喜欢的文件夹中。
- en: 'The following is a very simple Controller for Laravel 4:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Laravel 4 的一个非常简单的控制器：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Controller holds all the action methods for actions that are defined in
    `routes.php` , in which all the actions (every link that the users interact with)
    are set in Laravel 4.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器保存了在 `routes.php` 中定义的所有动作方法，其中在 Laravel 4 中设置了所有动作（用户与之交互的每个链接）。
- en: In Laravel 3, the developers had to prefix methods with either `GET` or `POST`
    so as to understand the corresponding request's type. If your request was a `GET`
    request, your method's name would have to be `get_profile` , and if the request
    was a `POST` request, it'd have to be like `post_profile` . Thanks to Laravel
    4, it's now not forced, and you can name your methods any way you like.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Laravel 3 中，开发人员必须使用 `GET` 或 `POST` 作为前缀来理解相应请求的类型。如果您的请求是 `GET` 请求，您的方法名称必须是
    `get_profile`，如果请求是 `POST` 请求，它必须类似于 `post_profile`。感谢 Laravel 4，现在不再强制，您可以按自己的喜好命名方法。
- en: A question now crops up. How do we access this method of the Controller? As
    we mentioned earlier, we'll be using routes to do this.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在出现了一个问题。我们如何访问控制器的这个方法？正如我们之前提到的，我们将使用路由来做到这一点。
- en: Routes
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由
- en: 'Routes are a set of rules defined in `app/routes.php` that tell Laravel, upon
    receiving an incoming request, which closure functions and/or Controller methods
    are being called based on the requested URL. There are various ways to define
    a route. Three of these are explained as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是在 `app/routes.php` 中定义的一组规则，告诉 Laravel 在收到传入请求时，根据请求的 URL 调用哪些闭包函数和/或控制器方法。有多种定义路由的方法。其中三种如下所述：
- en: 'You can use closure functions and set the logic for the action directly from
    `app/routes.php` . Have a look at the following code:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用闭包函数并直接从 `app/routes.php` 设置动作的逻辑。看一下以下代码：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we've called the `get()` method because we want this route to be a `GET`
    request. The first parameter is the path of the action, so if we call `http://ourwebsite.com/hello`
    , this route action will be called. The second parameter can be from various selections.
    It can either be an array that holds the name, filter and action, a string that
    defines the Controller's method for action, or a closure function which holds
    the logic directly. In our example, we've put a closure function and returned
    a string directly to the end user. So if the user navigates to `http://ourwebsite.com/hello`
    , the end user will see the message **Ahoy, everyone!** directly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们调用了 `get()` 方法，因为我们希望此路由成为 `GET` 请求。第一个参数是动作的路径，因此如果我们调用 `http://ourwebsite.com/hello`，将调用此路由动作。第二个参数可以来自各种选择。它可以是一个包含名称、过滤器和动作的数组，一个定义控制器方法的字符串，或者直接包含逻辑的闭包函数。在我们的示例中，我们放置了一个闭包函数并直接向最终用户返回了一个字符串。因此，如果用户导航到
    `http://ourwebsite.com/hello`，最终用户将直接看到消息**Ahoy, everyone!**。
- en: 'The second way to set a route is to pass a second parameter as a string, define
    which Controller it is passed to, and the action to be called. Have a look at
    the following code:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置路由的第二种方法是将第二个参数作为字符串传递，定义它传递到哪个控制器，并调用哪个动作。看一下以下代码：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the string `ProfileController@hello` tells Laravel that the method `hello`
    will be called from the Controller named `ProfileController` . We've separated
    them using the character `@` .
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，字符串 `ProfileController@hello` 告诉 Laravel 方法 `hello` 将从名为 `ProfileController`
    的控制器中调用。我们使用字符 `@` 将它们分开。
- en: 'The third way is to set an array as a second parameter, which gets various
    keys and values. Have a look at the following code:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三种方法是将数组作为第二个参数，其中包含各种键和值。看一下以下代码：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The array can have more than one parameter that define the route''s name, the
    filter that''ll be applied before calling the action, and which Controller and
    its method(s) will be used. The following are the three different keys:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以有多个参数，定义路由的名称、在调用动作之前将应用的过滤器，以及将使用哪个控制器及其方法。以下是三个不同的键：
- en: The `before` key defines the filter before calling the action, so you can set
    some filtering parameters before calling each action. For example, if you have
    a members-only area and you don't want guests to access that resource, you can
    pass filters by using the `before` parameter in your route.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`before` 键定义了在调用动作之前的过滤器，因此您可以在调用每个动作之前设置一些过滤参数。例如，如果您有一个仅限会员的区域，您不希望访客访问该资源，您可以使用路由中的
    `before` 参数传递过滤器。'
- en: The `as` key defines the name of the route. This is quite beneficial. Let's
    say you need to change the URL structure of your application. Classically, if
    you change the route's action path, you need to change every URL or redirections
    for this action through your application. Instead, if you set the links and redirections
    with names, you only need to change the path once, and all links and redirections
    will be magically fixed.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as` 键定义了路由的名称。这非常有益。假设您需要更改应用程序的 URL 结构。传统上，如果更改路由的动作路径，您需要更改应用程序中此动作的每个 URL
    或重定向。相反，如果使用名称设置链接和重定向，您只需要更改一次路径，所有链接和重定向都会神奇地修复。'
- en: The `uses` key has the exact same structure as our second example. It holds
    the name of the Controller and its method(s) upon calling.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uses` 键的结构与我们的第二个示例完全相同。它保存了调用时控制器的名称和方法。'
- en: 'In all these examples, the route did not get any parameters, and we didn''t
    pass any parameters. Think like this: we have accessed the profiles area by using
    routes, but in these examples, we didn''t set a way to access a specific user.
    How would we set a parameter to these routes? For this, we''ll have to set the
    parameters in curly brackets.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些示例中，路由没有获取任何参数，我们也没有传递任何参数。想象一下：我们通过路由访问了配置文件区域，但在这些示例中，我们没有设置访问特定用户的方式。我们如何为这些路由设置参数？为此，我们必须在花括号中设置参数。
- en: 'Run the following to set a parameter to a route:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码以为路由设置参数：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The parameter(s) in curly brackets become a variable name directly in closure
    methods. This approach also offers us a way to filter these parameters before
    the Controller''s method runs. Using `where()` , you can filter these parameters.
    Have a look at the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号中的参数会直接成为闭包方法中的变量名。这种方法还为我们提供了一种在控制器方法运行之前过滤这些参数的方式。使用`where()`，您可以过滤这些参数。看一下以下代码：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The method `where()` is either an array with keys and values, or two parameters,
    in which the first is the name in curly brackets, and the second is a regular
    expression to filter the parameter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`where()`方法可以是一个带有键和值的数组，也可以是两个参数，其中第一个是花括号中的名称，第二个是用于过滤参数的正则表达式。'
- en: In our example, we've filtered the parameter ID with a regular expression to
    match only numbers, so in this way, we will be distinguishing different kinds
    of data to overload the endpoint.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用正则表达式过滤参数ID，以匹配仅数字，因此，这样，我们将区分不同类型的数据以重载端点。
- en: Also, there is another benefit to this approach. If a person tries to navigate
    to `http://ourwebsite.com/users/xssSqlInjection` , Laravel will throw a 404 error
    even before going to the Controller's method.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法还有另一个好处。如果有人尝试导航到`http://ourwebsite.com/users/xssSqlInjection`，Laravel甚至在转到控制器方法之前就会抛出404错误。
- en: If we follow this structure, we need to set each action one by one for each
    `GET` , `POST` , `PUT` , and `DELETE` requests. If you want to use the RESTful
    structure for your actions, instead of setting each route one by one, you can
    use the `controller()` method of the `Route` class.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们遵循这种结构，我们需要为每个`GET`，`POST`，`PUT`和`DELETE`请求设置每个操作。如果您想为您的操作使用RESTful结构，而不是逐个设置每个路由，您可以使用`Route`类的`controller()`方法。
- en: 'Certain steps need to be followed to set the routes of a RESTful Controller.
    For a user Controller, the following are the steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 需要遵循一定的步骤来设置RESTful控制器的路由。对于用户控制器，以下是步骤：
- en: You first need to make a new Controller named `UserController` and set your
    RESTful methods such as `index()` , `create()` , `store()` , `show($id)` , `edit($id)`
    , `update($id)` , and `destroy($id)` .
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个名为`UserController`的新控制器，并设置您的RESTful方法，如`index()`，`create()`，`store()`，`show($id)`，`edit($id)`，`update($id)`和`destroy($id)`。
- en: 'Then you need to set the RESTful Controller in `app/routes.php` by running
    the following:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要在`app/routes.php`中设置RESTful控制器，方法是运行以下命令：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Laravel offers a faster way to create Resourceful Controllers. These are called
    Resource Controllers by Laravel. Follow these steps to set the routes of a Resourceful
    Controller:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel提供了一种更快的方法来创建资源控制器。这些被Laravel称为资源控制器。遵循以下步骤来设置资源控制器的路由：
- en: 'You first need to make a new Controller with Resourceful methods using Laravel''s
    PHP client, `artisan` . Have a look at the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要使用Laravel的PHP客户端`artisan`创建一个具有资源方法的新控制器。看一下以下代码：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: With this command, a new file named `NewsController.php` is automatically generated
    in the `app/controllers` folder with all the Resourceful methods already defined
    inside it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，将在`app/controllers`文件夹中自动生成一个名为`NewsController.php`的新文件，并在其中已经定义了所有资源方法。
- en: 'Then you need to set the Resourceful Controller in `app/routes.php` by running
    the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您需要通过运行以下命令在`app/routes.php`中设置资源控制器：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: While setting the Resourceful Controller, you can set what actions are to be
    included or excluded by setting a third parameter to this `Route` definition.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置资源控制器时，您可以通过将第三个参数设置为此`Route`定义来设置要包含或排除的操作。
- en: 'To include actions that will be defined in the Resourceful Controller (kind
    of like a whitelist), you use the `only` key as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要包含将在资源控制器中定义的操作（类似于白名单），您可以使用`only`键，如下所示：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To exclude actions that will be defined in the Resourceful Controller (kind
    of like a blacklist), you use the `except` key as follows:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要排除将在资源控制器中定义的操作（类似于黑名单），您可以使用`except`键，如下所示：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'All Resource Controller actions have defined route names. You may also want
    to override action names in some cases, and this can be done by setting up a third
    parameter called `names` as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有资源控制器操作都有定义的路由名称。在某些情况下，您可能还想覆盖操作名称，可以通过设置第三个参数`names`来实现，如下所示：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you have gone through the previous chapter, you may remember we had filters
    in routes, but we didn''t use the key `before` in RESTful and Resourceful Controllers.
    To use the key `before` , we can perform the steps we the previously followed
    or set filters in Controllers. These can be set in the `__construct()` method
    of the Controller (if there is none, create one) as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经阅读了上一章，您可能还记得我们在路由中有过滤器，但我们没有在RESTful和资源控制器中使用`before`键。要使用`before`键，我们可以执行之前遵循的步骤或在控制器中设置过滤器。这些可以在控制器的`__construct()`方法中设置（如果没有，则创建一个），如下所示：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, we've set filters using the `beforeFilter()` and `afterFilter()`
    methods. These methods either get a closure function or the name of the filter
    as a first parameter and an optional second parameter, as an array, to define
    where these filters work.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们使用`beforeFilter()`和`afterFilter()`方法设置了过滤器。这些方法可以接受闭包函数或过滤器名称作为第一个参数，以及一个可选的第二个参数，作为数组，用于定义这些过滤器的工作位置。
- en: In this example, we've firstly set CSRF (Cross-site Request Forgery, which is
    a method to forge a trusted request and to inject malicious code into the application
    through this forged request) protection filters to all the `POST` actions; after
    that, we've defined a filter in a closure function and used the `afterFilter`
    method to log all `fooAction` and `barAction` events' statuses.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们首先为所有`POST`操作设置了CSRF（跨站点请求伪造，这是一种通过伪造请求来注入恶意代码到应用程序中的方法）保护过滤器；之后，我们在闭包函数中定义了一个过滤器，并使用`afterFilter`方法记录了所有`fooAction`和`barAction`事件的状态。
- en: 'The following table is a list of actions that Laravel''s Resource Controller
    handles:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格是Laravel的资源控制器处理的操作列表：
- en: '| Verb | Path | Action | Route name |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 动词 | 路径 | 操作 | 路由名称 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `GET` | `/resource` | Index | `resource.index` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/resource` | Index | `resource.index` |'
- en: '| `GET` | `/resource/create` | Create | `resource.create` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/resource/create` | Create | `resource.create` |'
- en: '| `POST` | `/resource` | Store | `resource.store` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `POST` | `/resource` | Store | `resource.store` |'
- en: '| `GET` | `/resource/{resource}` | Show | `resource.show` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/resource/{resource}` | Show | `resource.show` |'
- en: '| `GET` | `/resource/{resource}/edit` | Edit | `resource.edit` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `GET` | `/resource/{resource}/edit` | Edit | `resource.edit` |'
- en: '| `PUT` /`PATCH` | `/resource/{resource}` | Update | `resource.update` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `PUT` /`PATCH` | `/resource/{resource}` | Update | `resource.update` |'
- en: '| `DELETE` | `/resource/{resource}` | Destroy | `resource.destroy` |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `DELETE` | `/resource/{resource}` | Destroy | `resource.destroy` |'
- en: Using Controllers inside folders
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在文件夹中使用控制器
- en: In some cases, you may want to group Controllers inside a folder, and have them
    in a more hierarchical structure. There are two ways to achieve this.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能希望将控制器分组到一个文件夹中，并以更具层次结构的方式进行组织。有两种方法可以实现这一点。
- en: 'Before explaining these methods, let''s assume we have a `UserController.php`
    file inside an `app/controllers/admin` folder, which we''ve just created for admin-related
    Controller files. There is a question that crops up here: how do we make both
    Laravel and the Controller files understand where the Controllers are? Namespaces
    are used for such requirements. Namespaces are simple ways to encapsulate and
    group items.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释这些方法之前，让我们假设我们在`app/controllers/admin`文件夹中有一个`UserController.php`文件，我们刚刚为管理相关的控制器文件创建了这个文件夹。这里出现了一个问题：我们如何让Laravel和控制器文件知道控制器在哪里？命名空间用于这样的需求。命名空间是封装和分组项目的简单方式。
- en: 'Let''s say you have the `app/controllers/UserController.php` and `app/controllers/admin/UserController.php`
    files. How do we call a specific one? Namespaces come in handy here. Save the
    following file as `app/controllers/admin/UserController.php` :'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有`app/controllers/UserController.php`和`app/controllers/admin/UserController.php`文件。我们如何调用特定的文件？命名空间在这里很方便。将以下文件保存为`app/controllers/admin/UserController.php`：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we define the route as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们按照以下方式定义路由：
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we''ve added some new additions to this Controller. They are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为这个控制器添加了一些新的内容。它们如下：
- en: The first one is `namespace admin;` . This simply defines that this file is
    inside a folder called `admin` .
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种是`namespace admin;`。这简单地定义了这个文件在一个名为`admin`的文件夹中。
- en: 'The second one is `use View;` . If our Controller is under a folder or a defined
    `namespace` unless we import them, all the classes we''ll be calling will be like
    `namespace\class` . If we didn''t add this line, the `View::make()` function would
    throw an error saying `Class admin\View not found` . To understand this better,
    you can think of this like HTML''s assets calling. Let''s assume you are browsing
    `admin/users.html` , and inside it there is an image whose path is defined in
    this format: `<img src= "assets/img/avatar.png" />` . As you may imagine, the
    image will be requested from `admin/assets/img/avatar.png` because it is inside
    a folder called `assets` . This is exactly the same situation.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个是`use View;`。如果我们的控制器在一个文件夹或一个定义的`namespace`下，除非我们导入它们，否则我们调用的所有类都将像`namespace\class`一样。如果我们没有添加这一行，`View::make()`函数将会抛出一个错误，说`Class
    admin\View not found`。为了更好地理解这一点，你可以把它想象成HTML的资源调用。假设你正在浏览`admin/users.html`，里面有一张图片，其路径定义为这种格式：`<img
    src= "assets/img/avatar.png" />`。正如你可以想象的那样，图片将被请求从`admin/assets/img/avatar.png`，因为它在一个名为`assets`的文件夹中。这正是同样的情况。
- en: We've added a `\` (backslash) character while we're extending from the `BaseController`
    class. This will signify that it will be called from root. If we didn't add `use
    View;` to our class and wanted to make `View::make()` work, we should modify it
    to `\View::make()` (with a leading backslash) so that the correct class will be
    requested.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们从`BaseController`类继承时，我们添加了一个`\`（反斜杠）字符。这将表示它将从根目录调用。如果我们没有在我们的类中添加`use View;`并且想要使`View::make()`工作，我们应该将它修改为`\View::make()`（带有一个前导反斜杠），这样正确的类将被请求。
- en: If there is a totally new folder structure, it can be defined in two ways. Either
    add each folder path into the `autoload/classmap` object in the `composer.json`
    file or define a `psr-0` autoload. Let's assume we have a new `app/myApp` folder,
    and inside it is a Controller located at `app/myApp/controllers/admin/UserController.php`
    .
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一个全新的文件夹结构，可以通过两种方式来定义。要么将每个文件夹路径添加到`composer.json`文件中的`autoload/classmap`对象中，要么定义一个`psr-0`自动加载。假设我们有一个新的`app/myApp`文件夹，里面有一个位于`app/myApp/controllers/admin/UserController.php`的控制器。
- en: 'Add a `classmap` object to the Controller as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 向控制器添加一个`classmap`对象，如下所示：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now add a `psr-0` autoload to the code as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下方式向代码添加`psr-0`自动加载：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then run `composer dump-autoload` from the terminal to regenerate autoload classes.
    By this `psr-0` autoload, we've taught our Composer project to autoload everything
    recursively inside the `myApp` folder, which is inside the `app` folder. Another
    way is to prefix the classname with the namespace folders and use `underscores
    (_)` between each folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后从终端运行`composer dump-autoload`来重新生成自动加载类。通过这种`psr-0`自动加载，我们教会了我们的Composer项目递归地自动加载`app`文件夹中的`myApp`文件夹内的所有内容。另一种方法是在类名前缀中添加命名空间文件夹，并在每个文件夹之间使用`underscores
    (_)`。
- en: 'Let''s assume we have a Controller, `app/controllers/foo/bar/BazController.php`
    . Save the following inside this folder:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个控制器，`app/controllers/foo/bar/BazController.php`。将以下内容保存在这个文件夹中：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we define the route as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们按照以下方式定义路由：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, we navigate to `http://yourwebsite/foobarbaz` . It will work automatically
    even without namespacing or including classes using `use` .
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们导航到`http://yourwebsite/foobarbaz`。即使没有使用命名空间或包含`use`来包含类，它也会自动工作。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned the role of the Controller in the MVC pattern and
    how you can use Controllers and set routes in Laravel 4\. We also learned about
    filters and RESTful and Resourceful Controllers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了MVC模式中控制器的角色，以及如何在Laravel 4中使用控制器和设置路由。我们还学习了过滤器、RESTful和Resourceful控制器。
- en: For more information, you can refer to the official documentation page, located
    at [http://laravel.com/docs/controllers](http://laravel.com/docs/controllers)
    . In the next chapter, we'll learn about Laravel's unique design pattern, and
    how it uses Repositories, Facades, and the Factory pattern.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参考位于[http://laravel.com/docs/controllers](http://laravel.com/docs/controllers)的官方文档页面。在下一章中，我们将学习关于Laravel独特的设计模式，以及它如何使用Repositories、Facades和工厂模式。
