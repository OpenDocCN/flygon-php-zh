- en: Chapter 6. Optimization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。优化
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Caching of objects
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的缓存
- en: Getting optimization tips with YSlow
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用YSlow获取优化提示
- en: Speeding up JavaScript delivery through automatic compression and browser caching
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过自动压缩和浏览器缓存加快JavaScript交付
- en: Triggering JavaScript early/on DOM load
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提前触发JavaScript/在DOM加载时
- en: Lazy-loading of images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像的延迟加载
- en: Optimizing Ajax applications automagically through Apache modules/Google mod_pagespeed
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Apache模块/Google mod_pagespeed自动优化Ajax应用程序
- en: As JavaScript developers, we often face performance issues—slow loading of pages,
    poorly responsive pages, freezing of browser windows, and so on. Mostly, all these
    happen because of the bottlenecks in the script or the approach/algorithm we have
    taken. In this chapter, let's discuss possible approaches to solve these issues.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为JavaScript开发人员，我们经常面临性能问题——页面加载缓慢、页面响应不佳、浏览器窗口冻结等。大多数情况下，这些问题都是由于脚本中的瓶颈或我们采取的方法/算法引起的。在本章中，让我们讨论解决这些问题的可能方法。
- en: Caching of objects
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象缓存
- en: As JavaScript code has to run on client machines, the code-level optimizations
    are very important. The most important of these is caching or buffering of calculations
    and objects. This basic optimization is often overlooked.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript代码必须在客户端机器上运行，所以代码级的优化非常重要。其中最重要的是缓存或缓冲计算和对象。这种基本的优化经常被忽视。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll need to identify the repetitive function calls to cache the results; that
    will speed up the code performance.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要识别重复的函数调用以缓存结果；这将加快代码的性能。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, in this case, we repeatedly calculate the same `sqrt(10)` and store it
    in different variables. This is overkill; as you know, it could be written as
    follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们反复计算相同的`sqrt(10)`并将其存储在不同的变量中。这是多余的；正如你所知，它可以写成如下形式：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Similarly, especially in the world of selector-based frameworks, it''s advisable
    to cache or buffer the selector objects. For example, consider the following HTML
    markup:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在基于选择器的框架中，建议缓存或缓冲选择器对象。例如，考虑以下HTML标记：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here''s the jQuery code that hides the container initially; when the trigger
    link is clicked, it shows the container as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是隐藏容器的jQuery代码；当点击触发链接时，它显示容器如下：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'As you can see in the preceding code snippet, we have used `$(''#container'')`
    twice; this means we''re running `$()` twice for the same purpose. If you look
    at jQuery code, the `$()` call has other functions and it''s eventually an overkill.
    So, it''s advisable to cache the `$(''#container'')` to another variable and use
    it as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前面的代码片段中所看到的，我们两次使用了`$('#container')`；这意味着我们为相同的目的运行了两次`$()`。如果你看一下jQuery代码，`$()`调用有其他函数，最终是多余的。因此，建议将`$('#container')`缓存到另一个变量中，并按如下方式使用：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In certain cases, caching of objects (as shown in the preceding code snippet)
    could increase the page responsiveness to double. An increase in speed can easily
    be felt when caching is applied to slow/complex selectors such as `$('div p a')`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，对象的缓存（如前面的代码片段所示）可以将页面的响应速度提高一倍。当将缓存应用于缓慢/复杂的选择器（如`$('div p a')`）时，速度的提高很容易感受到。
- en: Getting optimization tips with YSlow
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用YSlow获取优化提示
- en: When we're hitting performance issues, we need to know what to do. **YSlow**,
    from Yahoo!, is a speed diagnostic tool that quickly lists down suggestions based
    on various factors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们遇到性能问题时，我们需要知道该怎么做。来自Yahoo!的**YSlow**是一个速度诊断工具，它可以根据各种因素快速列出建议。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll require a Firefox browser with the Firebug plugin installed. YSlow is
    an add-on for Firebug that also needs to be installed to get optimization tips.
    When installed, it adds another tab inside Firebug, as shown in the following
    screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用安装了Firebug插件的Firefox浏览器。YSlow是Firebug的一个附加组件，也需要安装才能获取优化提示。安装后，它会在Firebug内添加另一个选项卡，如下图所示：
- en: '![Getting ready](graphics/3081_06_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](graphics/3081_06_01.jpg)'
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: When executed on any page, YSlow gives a page-specific report with tips on optimization.
    It's also bundled with a few optimization tools that will help us quickly fix
    performance issues. Since it's a browser-based tool, it cannot make a suggestion
    for server-side code—it can only suggest server settings like `gzip` and `expire`
    headers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何页面上执行时，YSlow都会给出一个特定于页面的优化建议报告。它还捆绑了一些优化工具，可以帮助我们快速解决性能问题。由于它是基于浏览器的工具，它无法对服务器端代码提出建议——它只能建议服务器设置，如`gzip`和`expire`头。
- en: When installing YSlow, it is a good practice to turn its autorun mode off. Otherwise,
    it will get executed for every page and that would slow down the browsing experience
    for other pages.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装YSlow时，最好将其自动运行模式关闭。否则，它将为每个页面执行，这将减慢其他页面的浏览体验。
- en: Here is a sample screenshot of the report when executed on [http://developer.yahoo.com/yslow/:](http://    http://developer.yahoo.com/yslow/:)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://developer.yahoo.com/yslow/:](http://    http://developer.yahoo.com/yslow/:)上执行时的报告示例截图如下：
- en: '![How to do it...](graphics/3081_06_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](graphics/3081_06_03.jpg)'
- en: 'The report is based on the following 22 rules:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 报告基于以下22条规则：
- en: 'Minimize HTTP Requests:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最小化HTTP请求：
- en: When the page has lots of stylesheet and JavaScript references, its loading
    time will be affected. Each file needs to be downloaded individually. The solution
    here is to combine all JavaScript code into a single file and all stylesheets
    into a single file. As for the numerous CSS background images, we could employ
    a technique called CSS Sprites. This way, we can minimize HTTP requests. YSlow
    helps us to identify numerous such HTTP requests and gives us suggestions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面有大量样式表和JavaScript引用时，加载时间会受到影响。每个文件都需要单独下载。解决方法是将所有JavaScript代码合并到一个文件中，将所有样式表合并到一个文件中。至于众多的CSS背景图片，我们可以使用一种称为CSS
    Sprites的技术。这样，我们可以最小化HTTP请求。YSlow帮助我们识别了许多这样的HTTP请求，并给出了建议。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**CSS Sprites**—is a technique through which we form a single CSS background
    image called *sprite*, from a number of CSS background images, by adjusting the
    CSS style properties to use the same *sprite* image. We refer to each image in
    `sprite`, through the `background-position` property.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS Sprites**—是一种技术，通过它我们可以从多个CSS背景图形成一个称为*sprite*的单个CSS背景图像，通过调整CSS样式属性来使用相同的*sprite*图像。我们通过`background-position`属性在`sprite`中引用每个图像。'
- en: 'Use a Content Delivery Network:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用内容交付网络：
- en: A **Content Delivery Network (CDN)** is a third-party hosting solution to serve
    static content and images, the delivery speed of which will be higher compared
    to the normal server setup, as it's operated on a cloud setup. YSlow identifies
    CDN usage and, if we haven't used any CDN, it suggests that we use a CDN for better
    performance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容交付网络（CDN）**是一个第三方托管解决方案，用于提供静态内容和图像，其交付速度将比普通服务器设置更高，因为它是在云设置上运行的。YSlow识别CDN的使用，如果我们没有使用任何CDN，它建议我们为更好的性能使用CDN。'
- en: 'Add an `Expires` or a `Cache-Control` header:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`Expires`或`Cache-Control`头：
- en: If we cache static content in a browser, it will improve the loading speed as
    this content doesn't have to be downloaded again. We have to ensure that we don't
    apply browser caching for dynamic content. When we have single JavaScript and
    single CSS files, to avoid HTTP requests, we can at least cache them at browser
    level. For that, we can use the `Expires` or `Cache-Control` HTTP headers. YSlow
    recognizes the HTTP headers and suggests that we use browser caching headers,
    when not used.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在浏览器中缓存静态内容，将会提高加载速度，因为这些内容不需要再次下载。我们必须确保不对动态内容应用浏览器缓存。当我们有单个JavaScript和单个CSS文件时，为了避免HTTP请求，我们至少可以在浏览器级别对它们进行缓存。为此，我们可以使用`Expires`或`Cache-Control`
    HTTP头。YSlow识别HTTP头并建议我们在没有使用时使用浏览器缓存头。
- en: '`Gzip` components:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Gzip`组件：'
- en: It's highly recommended to `gzip` page contents—possible through PHP or Apache.
    Apache's `mod_deflate` is preferable as it's easy to configure and can compress
    on the fly during delivery. YSlow can recognize `gzip` usage and suggests that
    we use `gzip` when not used.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议通过PHP或Apache进行页面内容的`gzip`—Apache的`mod_deflate`更可取，因为它易于配置，并且可以在交付过程中实时压缩。YSlow可以识别`gzip`的使用，并建议我们在没有使用时使用`gzip`。
- en: 'Put stylesheets at the top:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将样式表放在顶部：
- en: As per browser behavior, if stylesheets are referenced at the top, users will
    have better loading experiences. If they're referenced at the bottom, the user
    will see slow application of styles, depending upon their download speed. YSlow
    grades the page, depending upon the stylesheet references.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据浏览器行为，如果样式表在顶部引用，用户将有更好的加载体验。如果它们在底部引用，用户将根据其下载速度看到样式的应用速度较慢。YSlow根据样式表引用对页面进行评分。
- en: 'Put scripts at the bottom:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本放在底部：
- en: When the scripts are placed at the top, they'll block the loading of the page.
    This is important when we're to link external scripts, such as Google Analytics,
    Facebook libraries, and so on. Those scripts can be referenced before the end
    of the `</body>` tag. Another solution is to use the `async` attribute when linking
    external scripts. YSlow grades the page depending upon where we have linked the
    scripts and helps us to improve the speed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本放在顶部时，它们会阻塞页面的加载。这在我们要链接外部脚本时非常重要，比如谷歌分析、Facebook库等等。这些脚本可以在`</body>`标签结束之前被引用。另一个解决方案是在链接外部脚本时使用`async`属性。YSlow根据我们链接脚本的位置对页面进行评分，并帮助我们提高速度。
- en: 'Avoid CSS expressions:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免CSS表达式：
- en: CSS expressions are Internet Explorer's provision to mix JavaScript with CSS,
    up to version 8\. As per research, expressions often get triggered and lead to
    slowness in page responsiveness. YSlow detects the usage and grades the page.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: CSS表达式是Internet Explorer在8版本之前将JavaScript与CSS混合的提供。根据研究，表达式经常被触发，并导致页面响应速度变慢。YSlow检测到使用并对页面进行评分。
- en: 'Make JavaScript and CSS external:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使JavaScript和CSS外部化：
- en: It is better to keep the JavaScript and CSS files external instead of keeping
    them as inline and internal. This way, the external files can be cached at the
    browser level, for speedy loading of the pages. Separation of scripts to an external
    file is the primary concern of **Unobtrusive JavaScript** and selector-based JavaScript
    frameworks, such as, jQuery, YUI, and so on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最好将JavaScript和CSS文件保持外部化，而不是内联和内部化。这样，外部文件可以在浏览器级别进行缓存，以便页面加载更快。将脚本分离到外部文件是**不显眼的JavaScript**和基于选择器的JavaScript框架（如jQuery、YUI等）的主要关注点。
- en: 'Reduce DNS lookups:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减少DNS查找：
- en: If the site refers to images, stylesheets, and JavaScript from different domains,
    the DNS lookup increases. Though the DNS lookups are cached, the site's loading
    time will increase when many domains are referenced. YSlow identifies different
    hostname references in URLs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网站从不同的域引用图像、样式表和JavaScript，DNS查找次数会增加。尽管DNS查找被缓存，但当引用了许多域时，网站的加载时间会增加。YSlow识别URL中不同主机名的引用。
- en: 'Minify JavaScript and CSS:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 压缩JavaScript和CSS：
- en: As explained in the next recipe, minified JavaScript and CSS files can download
    faster due to reduction in file size. YSlow also has an option/tool to minify
    JavaScript and CSS files.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如下一条建议所述，由于文件大小减小，经过压缩的JavaScript和CSS文件可以更快地下载。YSlow还有一个选项/工具来压缩JavaScript和CSS文件。
- en: 'Avoid redirects:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免重定向：
- en: Unnecessary page redirection will impact the loading speed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 不必要的页面重定向会影响加载速度。
- en: Remove duplicate scripts
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除重复的脚本
- en: Unnecessary duplicated scripts are overkill.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 不必要的重复脚本是多余的。
- en: 'Configure ETags:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置ETags：
- en: An **ETag** is similar to other browser caching options. Though it can avoid
    an unnecessary round-trip, it is not consistent across servers. So, it's better
    to disable it altogether, to reduce HTTP request header size.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**ETag**类似于其他浏览器缓存选项。虽然它可以避免不必要的往返，但在服务器之间不一致。因此，最好彻底禁用它，以减少HTTP请求头大小。'
- en: 'Make Ajax cacheable:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使Ajax可缓存：
- en: Even Ajax requests can be cached at the browser end. By doing so, the application's
    responsiveness will increase.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至Ajax请求也可以在浏览器端进行缓存。这样做可以增加应用的响应速度。
- en: 'Use `GET` for Ajax requests:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对Ajax请求使用`GET`：
- en: The Yahoo! team has noted that, for Ajax requests, the `POST` operation is a
    two-step process and `GET` requests require only one TCP packet. As per HTTP specs,
    the `GET` operation is for retrieving content and POST is for posting or updating.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 雅虎团队指出，对于Ajax请求，“POST”操作是一个两步过程，“GET”请求只需要一个TCP数据包。根据HTTP规范，“GET”操作用于检索内容，而POST用于发布或更新。
- en: 'Reduce the number of DOM elements:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减少DOM元素的数量：
- en: If we try to apply JavaScript effects or events when the page is rendered with
    lots of HTML tags, it will slow down due the fact that the JavaScript code has
    to iterate through every DOM element. YSlow suggests that we keep the DOM element
    count to minimum.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在页面呈现时尝试应用JavaScript效果或事件，而页面包含大量HTML标记，那么由于JavaScript代码必须遍历每个DOM元素，页面速度会变慢。YSlow建议我们将DOM元素数量保持在最小限度。
- en: 'No 404s:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有404：
- en: Broken links cause unnecessary requests. They usually happen due to a typo or
    bug in the referenced link. YSlow identifies the broken links and grades the page.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 损坏的链接会导致不必要的请求。它们通常是由于引用链接中的拼写错误或错误引起的。YSlow会识别损坏的链接并对页面进行评分。
- en: 'Reduce cookie size:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减少cookie大小：
- en: Cookies are always getting sent across the HTTP requests. So, if a lot of information
    is stored in cookies, it will affect the HTTP request-response time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie总是在HTTP请求中发送。因此，如果有很多信息存储在cookie中，它将影响HTTP请求-响应时间。
- en: 'Use cookie-free domains for components:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为组件使用无cookie的域：
- en: There's no need to refer to cookies to deliver static content. So, it would
    be wiser to keep all static contents referenced through some subdomain and avoid
    setting cookies for that domain.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要引用cookie来传递静态内容。因此，更明智的做法是通过某个子域引用所有静态内容，并避免为该域设置cookie。
- en: 'Avoid filters:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免使用过滤器：
- en: It's common to use filters in Internet Explorer to handle PNG files, but the
    use of filters usually slows down the page. The solution would be to use PNG8
    files that are already supported in IE.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Internet Explorer中使用过滤器来处理PNG文件是很常见的，但是使用过滤器通常会减慢页面速度。解决方案是使用IE已经支持的PNG8文件。
- en: 'Do not scale images in HTML:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要在HTML中缩放图像：
- en: Using big images and scaling them down, using the `height` and `width` attributes,
    is not the wiser option. This forces the browser to load big images even though
    they have to be displayed in smaller dimensions. The solution is to resize the
    image at the server level.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用大图像并将其缩小，使用“高度”和“宽度”属性并不是明智的选择。这会迫使浏览器加载大图像，即使它们必须以较小的尺寸显示。解决方案是在服务器级别调整图像大小。
- en: 'Make the `favicon.ico` icon small and cacheable:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使“favicon.ico”图标小且可缓存：
- en: Similar to images, the favicon icon has to be small in size and cacheable.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与图像类似，favicon图标的大小必须小且可缓存。
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'YSlow has built-in support for JavaScript code minification and image compression
    through Yahoo!''s Smush. It is a web service. It also has a code beautification
    tool that can help us to view the JavaScript source in a formatted view, as seen
    in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: YSlow内置支持JavaScript代码最小化和通过Yahoo！的Smush进行图像压缩。这是一个网络服务。它还有一个代码美化工具，可以帮助我们以格式化的方式查看JavaScript源代码，如下面的屏幕截图所示：
- en: '![How it works...](graphics/3081_06_02.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/3081_06_02.jpg)'
- en: 'The report with its helpful tips helps us to look for performance infrastructure
    like CDN, static content delivery without cookies, and so on. Caveat: it requires
    additional effort from the developer to fix things.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 报告及其有用的提示帮助我们寻找性能基础设施，如CDN、无cookie的静态内容传递等。注意：这需要开发人员额外的努力来修复问题。
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Google''s Page Speed extension, available for download at [http://code.google.com/speed/page-speed/docs/extension.html](http://code.google.com/speed/page-speed/docs/extension.html),
    offers similar speed diagnosis and automatic suggestions. In the following screenshot,
    we can see how it has been executed on the website [http://www.packtpub.com/](http://www.packtpub.com/),
    where it offers speed scores and suggestions:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌的Page Speed扩展可以在[http://code.google.com/speed/page-speed/docs/extension.html](http://code.google.com/speed/page-speed/docs/extension.html)下载，它提供类似的速度诊断和自动建议。在下面的屏幕截图中，我们可以看到它是如何在[http://www.packtpub.com/](http://www.packtpub.com/)网站上执行的，它提供了速度得分和建议：
- en: '![There''s more...](graphics/3081_06_04.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](graphics/3081_06_04.jpg)'
- en: Google's initiative on such speed diagnosis is no surprise, as the page speed
    might affect its search engine crawler; remember the site speed is one of the
    determining factors in Google's PageRankTM. YSlow grades the page from A to F
    whereas Page Speed provides a score out of 100\. Both plugins use similar rulesets
    to offer optimization tips.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌在速度诊断方面的倡议并不令人意外，因为页面速度可能会影响其搜索引擎爬虫；请记住，网站速度是谷歌PageRankTM中的决定性因素之一。YSlow对页面进行从A到F的评分，而Page
    Speed提供一个0到100的分数。这两个插件使用类似的规则集来提供优化建议。
- en: Speeding up JavaScript delivery through automatic compression and browser caching
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过自动压缩和浏览器缓存加快JavaScript交付速度
- en: JavaScript was originally an interpreted language, but V8 and JIT compilers
    are now replacing the interpreters. V8 JavaScript engine, originally introduced
    in Google Chrome and Chromium is a trendsetter; it compiles JavaScript to native
    machine code. As the Web keeps on evolving, there will probably be more powerful
    JavaScript compilers coming up sooner or later.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript最初是一种解释语言，但V8和JIT编译器现在正在取代解释器。V8 JavaScript引擎最初是在Google Chrome和Chromium中引入的，它将JavaScript编译为本机机器代码。随着Web的不断发展，可能会有更强大的JavaScript编译器出现。
- en: 'Whether the browser has compiler or interpreter, the JavaScript code has to
    be downloaded in the client machine before it gets executed. This necessitates
    quicker download, which in turn means less code size. The quickest and most common
    approaches to achieve less code space and quicker loading are:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 无论浏览器是否具有编译器或解释器，JavaScript代码都必须在客户端机器上下载后才能执行。这需要更快的下载，这反过来意味着更少的代码大小。实现更少的代码空间和更快加载的最快和最常见的方法是：
- en: Strip off whitespaces, newlines, and comments—this is possible through minification
    tools such as JSMin, Packer, Google Closure compiler, and so on.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 去除空格、换行和注释——这可以通过JSMin、Packer、Google Closure编译器等最小化工具实现。
- en: Code compression through `gzip`—all modern browsers support `gzip` content encoding
    and this allows the content to be transferred in compressed format from server
    to client; this in turn reduces the number of bytes to be downloaded and improves
    the loading time.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`gzip`进行代码压缩——所有现代浏览器都支持`gzip`内容编码，这允许内容以压缩格式从服务器传输到客户端；这反过来减少了需要下载的字节数，并提高了加载时间。
- en: Browser caching to avoid scripts being getting downloaded on each request—we
    may force the static scripts to be cached in the browser for some duration. This
    will avoid unnecessary roundtrips.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器缓存以避免每次请求都下载脚本——我们可以强制将静态脚本在浏览器中缓存一段时间。这将避免不必要的往返。
- en: In this recipe, we'll quickly compare the JavaScript minification tools and
    then we'll see how to apply them.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将快速比较JavaScript最小化工具，然后看看如何应用它们。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'For comparison, we''ll require the following minification tools:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较，我们需要以下最小化工具：
- en: '**JSMin** by Dougl as Crockford: [http://www.crockford.com/javascript/jsmin.html](http://www.crockford.com/javascript/jsmin.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSMin**由Douglas Crockford：[http://www.crockford.com/javascript/jsmin.html](http://www.crockford.com/javascript/jsmin.html)'
- en: '**JSMin+** by Tweakers.net (based on the Narcissus JavaScript engine): [http://crisp.tweakblogs.net/blog/cat/716](http://crisp.tweakblogs.net/blog/cat/716)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSMin+**由Tweakers.net（基于Narcissus JavaScript引擎）：[http://crisp.tweakblogs.net/blog/cat/716](http://crisp.tweakblogs.net/blog/cat/716)'
- en: '**Packer** by Dean Edwards: [http://dean.edwards.name/packer/](http://dean.edwards.name/packer/)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Packer**由Dean Edwards：[http://dean.edwards.name/packer/](http://dean.edwards.name/packer/)'
- en: '**YUI Compressor:**[http://developer.yahoo.com/yui/compressor/](http://developer.yahoo.com/yui/compressor/)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YUI Compressor:**[http://developer.yahoo.com/yui/compressor/](http://developer.yahoo.com/yui/compressor/)'
- en: '**Google Closure Compiler:**[http://closure-compiler.appspot.com/](http://closure-compiler.appspot.com/)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Closure Compiler:**[http://closure-compiler.appspot.com/](http://closure-compiler.appspot.com/)'
- en: '**UglifyJS:** [https://github.com/mishoo/UglifyJS](https://github.com/mishoo/UglifyJS)
    (PHP version: [https://github.com/kbjr/UglifyJS.php](http://https://github.com/kbjr/UglifyJS.php))'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UglifyJS:** [https://github.com/mishoo/UglifyJS](https://github.com/mishoo/UglifyJS)（PHP版本：[https://github.com/kbjr/UglifyJS.php](http://https://github.com/kbjr/UglifyJS.php)）'
- en: For automatic minification of JavaScript and CSS, we'll use the Minify PHP application
    from [https://github.com/mrclay/minify](http://https://github.com/mrclay/minify).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JavaScript和CSS的自动最小化，我们将使用Minify PHP应用程序来自[https://github.com/mrclay/minify](http://https://github.com/mrclay/minify)。
- en: 'To compare the minification tools, let''s take the following piece of code
    that weighs `931` bytes. Note that this code has comments, whitespaces, newlines,
    and lengthy variable and function names:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较最小化工具，让我们看看以下代码片段，重量为`931`字节。请注意，此代码包含注释、空格、换行和较长的变量和函数名称：
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: JSMin by Dougl as Crockford.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSMin由Douglas Crockford创建。
- en: 'Output:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: JSMin+ by Tweakers.net (based on Narcissus JavaScript engine).
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSMin+由Tweakers.net（基于Narcissus JavaScript引擎）。
- en: 'Output:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Packer by Dean Edwards.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dean Edwards的Packer。
- en: 'Output:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Output with Base62 encode option (obfuscates the code):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Base62编码选项输出（混淆代码）：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: YUI Compressor.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: YUI Compressor。
- en: 'Output:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Google Closure Compiler.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Google Closure Compiler。
- en: 'Output:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: UglifyJS.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UglifyJS。
- en: 'Output:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE12]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The tabularized results for `931` bytes JavaScript code are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 931字节JavaScript代码的表格化结果如下：
- en: '| Tool | Removes unreachable code | Compressed Size (bytes) | Code Saving |
      |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 工具 | 删除无法到达的代码 | 压缩大小（字节） | 代码节省 |   |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| JSMin by Douglas Crockford | No | 446 | 52.09% |   |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| JSMin由Douglas Crockford | 否 | 446 | 52.09% |   |'
- en: '| JSMin+ by Tweakers.net | No | 437 | 53.06% |   |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| JSMin+由Tweakers.net | 否 | 437 | 53.06% |   |'
- en: '| Packer by Dean Edwards Normal | No | 328 | 64.77% |   |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| Packer由Dean Edwards Normal | 否 | 328 | 64.77% |   |'
- en: '| with Base62 encode | No | 515 | 44.68% |   |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 使用Base62编码 | 否 | 515 | 44.68% |   |'
- en: '| YUI Compressor | No | 328 | 64.77% |   |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| YUI Compressor | 否 | 328 | 64.77% |   |'
- en: '| Google Closure Compiler | Yes | 303 | 67.45% |   |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| Google Closure Compiler | 是 | 303 | 67.45% |   |'
- en: '| UglifyJS | Yes | 310 | 66.70% |   |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| UglifyJS | 是 | 310 | 66.70% |   |'
- en: All these tools strip off whitespaces, newlines, and unnecessary comments, to
    reduce the JavaScript size. Dean Edwards' Packer has both a code obfuscation and
    a minification component. Its Base62 encoding, or code obfuscation, is not recommended,
    as the unpacking has to be done in the browser and thus has significant overhead.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些工具都会去除空格、换行和不必要的注释，以减少JavaScript的大小。Dean Edwards的Packer既有代码混淆又有最小化组件。它的Base62编码或代码混淆不建议使用，因为解包必须在浏览器中进行，因此会有很大的开销。
- en: YUI Compressor's compression is relatively good, as it uses Java Rhino engine
    to analyze the code. Google Closure Compiler looks very promising as it has a
    built-in compiler that could detect unreachable code and could optimize the code
    further. UglifyJS is faster as it's written in `Node.js`. As shown in the preceding
    text, both UglifyJS and Google Closure Compiler could remove unreachable code
    to improve code minification.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: YUI Compressor的压缩相对较好，因为它使用Java Rhino引擎来分析代码。Google Closure Compiler看起来非常有前途，因为它有一个内置的编译器，可以检测到无法到达的代码，并进一步优化代码。UglifyJS更快，因为它是用`Node.js`编写的。如前文所示，无论是UglifyJS还是Google
    Closure Compiler都可以删除无法到达的代码以改善代码最小化。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'The **Minify** application from [https://github.com/mrclay/minify](http://https://github.com/mrclay/minify)
    can be used for automation of the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[https://github.com/mrclay/minify](http://https://github.com/mrclay/minify)的**Minify**应用程序可用于自动化以下操作：
- en: Code minification
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码最小化
- en: Compression through `gzip`
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`gzip`压缩
- en: Browser caching through `Last-Modified` or `ETag` HTTP headers
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`Last-Modified`或`ETag` HTTP头进行浏览器缓存
- en: 'We have to place the `min` folder of the Minify application in the document
    root. This folder contains the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须将Minify应用程序的`min`文件夹放在文档根目录下。该文件夹包含以下内容：
- en: '`index.php:` The frontend script that delivers the minified code'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.php：` 交付最小化代码的前端脚本'
- en: '`config.php:` The settings file for the Minify application'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.php：`Minify应用程序的设置文件'
- en: '`groupConfig.php:` The settings file that names the group of files that can
    be minified easily'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupConfig.php：`命名可以轻松压缩的文件组的设置文件'
- en: 'In `config.php`, we have to specify our choice of minification tools as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在`config.php`中，我们必须指定我们选择的压缩工具，如下所示：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The settings shown in the preceding code snippet will first try to use Google's
    Closure Compiler and, on any error, will use the JSMinPlus library.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码片段中显示的设置将首先尝试使用Google的Closure编译器，在任何错误时将使用JSMinPlus库。
- en: 'With these configurations, it''s enough to change the JavaScript, including
    syntax, from:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些配置，只需从以下更改JavaScript，包括语法：
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'to:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 到：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will achieve the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这将实现以下目标：
- en: Combine `script1.js, script2.js`, and `script3.js`
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合`script1.js，script2.js`和`script3.js`
- en: Minify the combined script
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩组合脚本
- en: Handle `gzip` content encoding automatically
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动处理`gzip`内容编码
- en: Handle browser caching automatically
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动处理浏览器缓存
- en: 'When there are lots of files to minify, we can make use of `groupConfig.php`
    and group the files into a key, as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当有大量文件需要压缩时，我们可以利用`groupConfig.php`将文件分组到一个键中，如下所示：
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can simply refer them to the `g` query string through the key name, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过键名简单地将它们引用到`g`查询字符串中，如下所示：
- en: '[PRE17]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The frontend `index.php` script receives the files to be minified, through
    query string `g`. The comma-separated files are then combined and minified through
    the minifier library of our choice:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 前端`index.php`脚本通过查询字符串`g`接收要压缩的文件。然后，逗号分隔的文件通过我们选择的压缩库进行合并和压缩：
- en: '[PRE18]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In order to improve the performance of future delivery, the Minify application
    stores the following versions into its cache:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高未来交付的性能，Minify应用程序将以下版本存储到其缓存中：
- en: Combined minified JavaScript file
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并压缩的JavaScript文件
- en: gzipped version of combined minified JavaScript file
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并压缩的JavaScript文件的gzip版本
- en: Files stored in its caches are used to avoid repetitive processing of JavaScript
    files over the minifier library. The application also handles `Accept-Encoding`
    HTTP headers and thereby detects the client browser's preference on `gzip`, deflates
    and delivers respective contents.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在其缓存中的文件用于避免在压缩库上重复处理JavaScript文件。该应用程序还处理`Accept-Encoding` HTTP标头，从而检测客户端浏览器对`gzip`、deflate和传递相应内容的偏好。
- en: Another useful feature of this application is setting `Last-Modified` or `ETag`
    HTTP headers. This will enable caching of the script at the browser end. The web
    server will serve the complete script to the browser only when there is any change
    in the timestamp or content. Thus, it saves lot of downloads, especially on static
    JavaScript file contents.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的另一个有用功能是设置`Last-Modified`或`ETag` HTTP标头。这将使脚本在浏览器端进行缓存。只有在时间戳或内容发生变化时，Web服务器才会向浏览器提供完整的脚本。因此，它节省了大量下载，特别是静态JavaScript文件内容。
- en: 'Note that jQuery''s Ajax method avoids caching of Ajax requests by default
    for scripts and `jsonp` data types. To do so, it appends `_=[timestamp]` in the
    query string. When we want to force caching, we have to enable it explicitly,
    and that will disable timestamp appending. This is done as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，jQuery的Ajax方法默认情况下避免对脚本和`jsonp`数据类型的Ajax请求进行缓存。为此，它在查询字符串中附加了`_=[timestamp]`。当我们想要强制缓存时，我们必须显式启用它，这将禁用时间戳附加。操作如下：
- en: '[PRE19]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There's more...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We have a few more services and applications for checking and speeding up delivery
    options.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一些用于检查和加速交付选项的服务和应用程序。
- en: Comparing JavaScript minification tools
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较JavaScript压缩工具
- en: The web-based service found at [http://compressorrater.thruhere.net/](http://compressorrater.thruhere.net/)
    can be used to compare many minification tools and, thereby, we may choose the
    appropriate tool for our code.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[http://compressorrater.thruhere.net/](http://compressorrater.thruhere.net/)上找到的基于Web的服务来比较许多压缩工具，从而我们可以为我们的代码选择合适的工具。
- en: Automatic speed up tools
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动加速工具
- en: 'For automatic speeding up, we may use:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自动加速，我们可以使用：
- en: The PHP Speedy library from [http://aciddrop.com/php-speedy/](http://aciddrop.com/php-speedy/);
    it is similar to the Minify application.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[http://aciddrop.com/php-speedy/](http://aciddrop.com/php-speedy/)的PHP Speedy库；它类似于Minify应用程序。
- en: The `mod_pagespeed` Apache module from Google. It is explained in the *Optimizing
    Ajax applications automagically through Apache modules/Google mod_pagespeed* recipe
    in this chapter.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Google的`mod_pagespeed` Apache模块。在本章的*通过Apache模块/Google mod_pagespeed自动优化Ajax应用程序*中有解释。
- en: Triggering JavaScript early/on DOM load
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尽早触发JavaScript/在DOM加载时
- en: In Web 2.0 websites that have containers and animations, we'd want the JavaScript
    code to get executed as quickly as possible, so that the users won't see a flickering
    effect when we apply hide, show, or animation effects. Also, when we handle any
    events through JavaScript or JavaScript frameworks, we'd want the events such
    as click, change, and so on get applied to the DOM as quickly as possible.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有容器和动画的Web 2.0网站中，我们希望JavaScript代码尽快执行，以便用户在应用隐藏、显示或动画效果时不会看到闪烁效果。此外，当我们通过JavaScript或JavaScript框架处理任何事件时，我们希望诸如单击、更改等事件尽快应用于DOM。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Earlier, JavaScript developers mixed JavaScript and HTML together. This practice
    is called *inline scripting*. As the Web was evolving, more standards and practices
    came up. *Unobtrusive JavaScript* practice generally means that JavaScript code
    is separated from markup code and JavaScript is handled in an *unobtrusive* manner.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 早期，JavaScript开发人员将JavaScript和HTML混合在一起。这种做法称为*内联脚本*。随着Web的发展，出现了更多的标准和实践。*不侵入式JavaScript*实践通常意味着JavaScript代码与标记代码分开，并且JavaScript以*不侵入式*的方式处理。
- en: 'Here''s some quick code written to alert the user with the message `Enter your
    name!`, when the name field is clicked:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些快速编写的代码，用于在单击名称字段时向用户发出消息`输入您的姓名！`：
- en: '[PRE20]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As seen in the preceding code, the JavaScript is written and mixed inside the
    `input` tag.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，JavaScript是在`input`标记内部编写和混合的。
- en: 'There are some problems with the inline JavaScript approach, such as:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 内联JavaScript方法存在一些问题，例如：
- en: The JavaScript code cannot be cached. If we use a single JavaScript file (a
    file that is minified, `gzipped`, and has proper HTTP headers to cache it in the
    browser), we can feel the speed increase.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript代码无法被缓存。如果我们使用单个JavaScript文件（一个被压缩、`gzipped`并具有适当的HTTP标头以在浏览器中缓存的文件），我们可以感受到速度的提升。
- en: Code cannot easily be maintained, especially if many programmers are working
    on the same project. For every JavaScript feature, the HTML code has to be changed.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码不能轻易维护，特别是如果有许多程序员在同一个项目上工作。对于每个JavaScript功能，HTML代码都必须更改。
- en: The site may have accessibility issues, since the JavaScript code may block
    the functionality on non-JavaScript devices.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站可能存在可访问性问题，因为JavaScript代码可能会阻止非JavaScript设备上的功能。
- en: The HTML script size increases. If the HTML should not be cached for some reason
    such as dynamic content, it will affect the speed of the page.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML脚本大小增加。如果由于动态内容等原因HTML不应该被缓存，这将影响页面的速度。
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Separation of JavaScript is possible by moving the JavaScript code to the`<head>`
    tag. It's better to move the JavaScript code to a separate external file and link
    it in the`<head>` tag.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将JavaScript代码移动到`<head>`标记来实现JavaScript的分离。最好将JavaScript代码移动到一个单独的外部文件中，并在`<head>`标记中进行链接。
- en: 'Here, in the following code, we try to separate the JavaScript code from the
    previous listing as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们尝试将JavaScript代码与前面的清单分离如下：
- en: '[PRE21]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the JavaScript code, we add the following code snippet:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript代码中，我们添加了以下代码片段：
- en: '[PRE22]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As shown in the preceding code snippet, we've attached the `click` event by
    referring to the element through `document.getElementById('name')`. Note that
    we have also wrapped that under `window.onload`; otherwise, `document.getElementById('name')`
    wouldn't be available. This is due to the fact that the script in the`<head>`
    tag executes first, before the DOM is ready. `window.onload` ensures that the
    code gets executed when the document is completely downloaded and available.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码片段所示，我们通过`document.getElementById('name')`引用元素来附加了`click`事件。请注意，我们还将其包装在`window.onload`下；否则，`document.getElementById('name')`将不可用。这是因为`<head>`标记中的脚本在DOM准备就绪之前首先执行。`window.onload`确保在文档完全下载并可用时执行代码。
- en: How it works...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The problem with the `onload` event is that it will fire only when the document
    and related files such as CSS and images get downloaded. When the page contains
    any large image files or content, it will slow down the triggering of the JavaScript
    code considerably. So, when we have to attach any event to any element (as shown
    in the preceding code), or if we have to hide any `div` containers during the
    loading of the page, it won't work as expected. Users will see an unresponsive
    or flickering website, based on their download speed.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`onload`事件的问题在于它只会在文档和相关文件（如CSS和图像）下载完成时触发。当页面包含任何大型图像文件或内容时，它会显著减慢JavaScript代码的触发速度。因此，当我们必须将任何事件附加到任何元素（如前面的代码所示），或者在页面加载期间隐藏任何`div`容器时，它不会按预期工作。用户将根据其下载速度看到一个无响应或闪烁的网站。'
- en: DOMContentLoaded and workarounds
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DOMContentLoaded和解决方法
- en: Fortunately, Gecko-based browsers, such as Mozilla Firefox, have a special event
    called `DOMContentLoaded`. This event will get fired when the DOM is ready, before
    images, stylesheets, and subframes are completely downloaded. Wrapping the JavaScript
    code in the `DOMContentLoaded` event will improve the user experience as JavaScript
    will be triggered as soon as the DOM is ready.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，基于Gecko的浏览器，如Mozilla Firefox，有一个特殊的事件称为`DOMContentLoaded`。该事件将在DOM准备就绪时触发，而在图像、样式表和子框架完全下载之前。将JavaScript代码包装在`DOMContentLoaded`事件中将改善用户体验，因为JavaScript将在DOM准备就绪时立即触发。
- en: 'The modified code that uses the `DOMContentLoaded` event is as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DOMContentLoaded`事件的修改后的代码如下：
- en: '[PRE23]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `DOMContentLoaded` event was first introduced in Mozilla with version 1
    and, recently, other browsers (including Internet Explorer version 9) have started
    supporting it. As it has also been part of the HTML5 specification, more browsers
    might start supporting it soon. Till then, there are a lot of workarounds for
    `DOMContentLoaded`. For instance, jQuery''s `ready` function is an effort to support
    many browsers. The following code shows how the preceding code could be rewritten
    (in jQuery) with browser compatibility:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`DOMContentLoaded`事件首次在Mozilla的版本1中引入，最近其他浏览器（包括Internet Explorer版本9）也开始支持它。由于它也是HTML5规范的一部分，更多的浏览器可能很快开始支持它。在那之前，有很多`DOMContentLoaded`的解决方法。例如，jQuery的`ready`函数是为了支持许多浏览器而做出的努力。以下代码显示了如何使用浏览器兼容性（在jQuery中）重新编写前面的代码：'
- en: '[PRE24]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: There's more...
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Even when we use browser-compatible hacks for the `DOMContentLoaded` event,
    there may be some circumstances where the hacks may not work as expected. In that
    case, we can trigger the `load` function by placing the initializing scripts just
    before the`</body>` tag.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们对`DOMContentLoaded`事件使用了与浏览器兼容的hack，也可能存在一些情况，这些hack可能无法按预期工作。在这种情况下，我们可以通过将初始化脚本放置在`</body>`标记之前来触发`load`函数。
- en: Lazy-loading of images
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像的延迟加载
- en: When lots of images are getting loaded, it will slow down the client browser;
    too many image requests will even slow down the web server. One common approach
    is to split the pages and distribute images and content equally. Another approach
    is to exploit JavaScript's power and avoid unnecessary image requests at the client
    level. The latter technique is called **lazy-loading**. In lazy-loading, the image
    requests are blocked until the image gets under the browser viewport, that is,
    until the user has physical view of the image.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载大量图像时，它会减慢客户端浏览器；太多的图像请求甚至会减慢Web服务器。一个常见的方法是分割页面并平均分配图像和内容。另一种方法是利用JavaScript的功能，并在客户端级别避免不必要的图像请求。后一种技术称为**延迟加载**。在延迟加载中，图像请求被阻止，直到图像进入浏览器视口，也就是说，直到用户实际看到图像。
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll require a lengthy image gallery page to see how a lot of images on the
    page affects loading experience. We'll then have to decide between different approaches
    of lazy-loading implementation.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个较长的图像库页面来查看页面上大量图像对加载体验的影响。然后，我们必须在懒加载实现的不同方法之间做出决定。
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We can address lazy-loading through the following methods:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方法解决懒加载问题：
- en: Pure JavaScript
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纯JavaScript
- en: Mangled HTML markup
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 篡改的HTML标记
- en: Pure JavaScript approach
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 纯JavaScript方法
- en: 'In this approach, images won''t be referenced in HTML; they''ll only be referenced
    in JavaScript—either hardcoded or loaded from the JSON URL. The image elements
    will be dynamically formed, as shown in the following code:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，图像不会在HTML中引用；它们只会在JavaScript中引用——要么是硬编码的，要么是从JSON URL加载的。图像元素将会动态形成，如下面的代码所示：
- en: '[PRE25]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The problem with this approach is that the images are not defined in HTML markup
    and, thus, will not work in devices that don't support JavaScript. So, this eventually
    breaks the accessibility criteria. Pure JavaScript applications have issues getting
    indexed by search engines and, if the application's marketing is based on the
    **SEO** aka **Search Engine Optimization**, this approach fails to take off.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的问题在于图像在HTML标记中没有定义，因此在不支持JavaScript的设备上无法工作。因此，这最终违反了可访问性标准。纯JavaScript应用程序在搜索引擎中难以索引，如果应用程序的营销基于**SEO**（即搜索引擎优化），这种方法将无法起作用。
- en: Mangled HTML markup
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 篡改的HTML标记
- en: 'Another approach is to keep the actual image in `rel` or `alt` attributes and
    form the `src` attribute dynamically. This is done when the image has to be displayed
    after setting the value from `rel` or `alt`. Part of the HTML markup and JavaScript
    is as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是将实际图像放在`rel`或`alt`属性中，并动态形成`src`属性。当图像必须在从`rel`或`alt`设置值后显示时，才会执行此操作。部分HTML标记和JavaScript如下：
- en: '[PRE26]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note that the mangled HTML markup approach is still not a neat and accessible
    approach.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，篡改的HTML标记方法仍然不是一种整洁和可访问的方法。
- en: How it works...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The preceding approaches aren''t compliant with the progressive enhancement
    principles and they stop displaying images when the JavaScript engine isn''t available
    or is turned off. According to the progressive enhancement approach, the HTML
    markup should not be changed. When the DOM is ready, the `src` attribute of images
    outside the viewport is dynamically mangled so that the images won''t get downloaded.
    Part of the code that mangles up the image `src` attribute to stop downloading
    is as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法不符合渐进增强原则，并且在JavaScript引擎不可用或关闭时停止显示图像。根据渐进增强方法，HTML标记不应更改。当DOM准备就绪时，图像视口外的`src`属性将被动态篡改，以使图像不会被下载。篡改图像`src`属性以停止下载的部分代码如下：
- en: '[PRE27]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'When the images have to be loaded the following code snippet is used:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要加载图像时，使用以下代码片段：
- en: '[PRE28]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Though (so far) this is the best approach, and though it's easy to introduce
    lazy-loading through any JavaScript snippets, some of the latest browsers start
    downloading images much before the DOM is ready. Therefore, this approach doesn't
    work in all of the latest browsers. As the Web is evolving, this functionality
    might be added directly to browsers in the near future.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管（到目前为止）这是最好的方法，尽管很容易通过任何JavaScript片段引入懒加载，但一些最新的浏览器在DOM准备好之前就开始下载图像。因此，这种方法并不适用于所有最新的浏览器。随着Web的发展，这种功能可能会在不久的将来直接添加到浏览器中。
- en: There's more...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We have many plugins for lazy-loading. We may also adopt a similar method—the
    deferred script loading technique—to load external scripts.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有许多懒加载插件。我们还可以采用类似的方法——延迟脚本加载技术——来加载外部脚本。
- en: Lazy-loading plugins
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 懒加载插件
- en: 'Some of the image lazy-loading plugins that are available for popular JavaScript
    frameworks are as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 一些流行JavaScript框架可用的图像懒加载插件如下：
- en: 'Image Loader for YUI: [http://developer.yahoo.com/yui/3/imageloader/](http://developer.yahoo.com/yui/3/imageloader/)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YUI的图像加载器：[http://developer.yahoo.com/yui/3/imageloader/](http://developer.yahoo.com/yui/3/imageloader/)
- en: 'Lazy Load for jQuery: [http://www.appelsiini.net/projects/lazyload](http://www.appelsiini.net/projects/lazyload)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery的Lazy Load：[http://www.appelsiini.net/projects/lazyload](http://www.appelsiini.net/projects/lazyload)
- en: 'LazyLoad for MooTools: [http://www.davidwalsh.name/lazyload](http://www.davidwalsh.name/lazyload)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MooTools的LazyLoad：[http://www.davidwalsh.name/lazyload](http://www.davidwalsh.name/lazyload)
- en: 'LazierLoad for Prototype: [http://www.bram.us/projects/js_bramus/lazierload/](http://www.bram.us/projects/js_bramus/lazierload/)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prototype的LazierLoad：[http://www.bram.us/projects/js_bramus/lazierload/](http://www.bram.us/projects/js_bramus/lazierload/)
- en: Lazy/deferred script loading
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 懒惰/延迟脚本加载
- en: Though lazy/deferred script loading is not directly related to the image lazy-loading
    functionality, it may be combined with the above techniques to get a better loading
    experience. When JavaScript files are normally linked in the`<head>` tag, the
    web browser will pause parsing of HTML code when the script is executed. This
    behavior will halt the browser for some time, and so the user will experience
    slow speeds. The previous suggestion was to place script linking just before the
    closing`</body>` tag. HTML5 has introduced the `async` attribute for the `script`
    tag; when it is used, the browser will continue parsing HTML code and will execute
    the script once it's downloaded. Script loading is asynchronous.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然懒惰/延迟脚本加载与图像懒加载功能并不直接相关，但可以与上述技术结合，以获得更好的加载体验。当JavaScript文件通常链接在`<head>`标签中时，当脚本被执行时，Web浏览器将暂停解析HTML代码。这种行为会使浏览器暂停一段时间，因此用户会感受到速度变慢。之前的建议是将脚本链接放在`</body>`标签之前。HTML5引入了`script`标签的`async`属性；当使用时，浏览器将继续解析HTML代码，并在下载后执行脚本。脚本加载是异步的。
- en: 'As the `async` attribute is supported in Gecko- and WebKit-based browsers,
    the following syntax works:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Gecko和基于WebKit的浏览器支持`async`属性，因此以下语法有效：
- en: '[PRE29]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For other browsers, `async` works only when injected through DOM. Here is the
    Google Analytics code that uses DOM injection to make asynchronous loading workable
    in all browsers:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他浏览器，`async`仅在通过DOM注入时起作用。这是使用DOM注入的Google Analytics代码，以使所有浏览器中的异步加载可行：
- en: '[PRE30]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When used for external scripts, such as Google Analytics, Facebook libraries,
    and so on, this will improve the loading speed.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 当用于外部脚本时，例如Google Analytics、Facebook库等，这将提高加载速度。
- en: Optimizing Ajax applications automagically through Apache modules/Google mod_pagespeed
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Apache模块/Google mod_pagespeed自动优化Ajax应用程序
- en: Optimizing Ajax applications automagically—without manual effort— is the most
    wanted tool for any developer. There are a few tools invented for that purpose.
    In this recipe, we'll see a few such automatic tools.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 自动优化Ajax应用程序-无需手动努力-是任何开发人员最想要的工具。为此目的发明了一些工具。在这个配方中，我们将看到一些这样的自动工具。
- en: Getting ready
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We''ll require a web application running over an Apache web server. For automatic
    optimization, we need the following Apache modules:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个在Apache Web服务器上运行的Web应用程序。对于自动优化，我们需要以下Apache模块：
- en: '`mod_deflate`, available at [http://httpd.apache.org/docs/2.0/mod/mod_deflate.html](http://httpd.apache.org/docs/2.0/mod/mod_deflate.html)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mod_deflate`，可在[http://httpd.apache.org/docs/2.0/mod/mod_deflate.html](http://httpd.apache.org/docs/2.0/mod/mod_deflate.html)上找到'
- en: '`mod_expires`, available at [http://httpd.apache.org/docs/2.0/mod/mod_expires.html](http://httpd.apache.org/docs/2.0/mod/mod_expires.html)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mod_expires`，可在[http://httpd.apache.org/docs/2.0/mod/mod_expires.html](http://httpd.apache.org/docs/2.0/mod/mod_expires.html)上找到'
- en: '`mod_pagespeed`, available at [http://code.google.com/p/modpagespeed/](http://code.google.com/p/modpagespeed/)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mod_pagespeed`，可在[http://code.google.com/p/modpagespeed/](http://code.google.com/p/modpagespeed/)上找到'
- en: How to do it...
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We have to install these modules and then set up the configurations for them
    to automatically handle the requests. We''ll see the configurations for each module:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须安装这些模块，然后为它们设置配置，以自动处理请求。我们将看到每个模块的配置：
- en: '`mod_deflate:`'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mod_deflate:`'
- en: 'To enable automatic gzip handling for JavaScript, CSS, and HTML code, we can
    use AddOutputFilterByType and specify their MIME type:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用JavaScript、CSS和HTML代码的自动gzip处理，我们可以使用AddOutputFilterByType并指定它们的MIME类型：
- en: '[PRE31]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`mod_expires:`'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mod_expires:`'
- en: 'To enable automatic browser caching on static content, such as, JavaScript,
    CSS, image files, SWF files, and favicons, we can specify their MIME type and
    expiration time, as shown next:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要在静态内容上启用自动浏览器缓存，例如JavaScript、CSS、图像文件、SWF文件和favicon，我们可以指定它们的MIME类型和过期时间，如下所示：
- en: '[PRE32]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the preceding code snippet, we have registered a MIME type for icon files
    and, using the MIME type, we have set an expiration time of three months. This
    is mostly for favicon files. For static content, we can safely set an expiration
    time of 1 to 6 months, or more. The preceding code will handle the browser caching
    through the `Last-Modified` header rather than through ETag, as we have disabled
    ETag support. YSlow advises us to disable ETag altogether, in order to reduce
    the HTTP request header size.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码片段中，我们已经为图标文件注册了一个MIME类型，并且使用了MIME类型，我们已经设置了三个月的过期时间。这主要是针对favicon文件。对于静态内容，我们可以安全地设置1到6个月或更长的过期时间。上述代码将通过`Last-Modified`标头处理浏览器缓存，而不是通过ETag，因为我们已经禁用了ETag支持。YSlow建议我们完全禁用ETag，以减少HTTP请求标头的大小。
- en: Note
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**ETag** is now reportedly misused to uniquely identify users, as many users
    disable cookies for privacy reasons. So, there are efforts to disable ETag in
    browsers.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**ETag**据称现在被误用来唯一标识用户，因为许多用户出于隐私原因禁用了cookie。因此，有努力在浏览器中禁用ETag。'
- en: '`mod_pagespeed:`'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mod_pagespeed:`'
- en: The `mod_pagespeed` Apache module is Google's page speed initiative. Google's
    initiative started with the Page Speed Firefox extension, which is similar to
    YSlow. It is a page speed diagnostic tool intended to find bottlenecks and make
    suggestions. Currently, the Page Speed extension is available for Chrome, too.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_pagespeed` Apache模块是Google的页面速度倡议。Google的倡议始于Page Speed Firefox扩展，类似于YSlow。这是一个旨在找出瓶颈并提出建议的页面速度诊断工具。目前，Page
    Speed扩展也适用于Chrome。'
- en: The Page Speed diagnostic tool is now available as a web-based service at [http://pagespeed.googlelabs.com/](http://pagespeed.googlelabs.com/),
    so we can find out speed diagnostics without installing browser plugins.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Page Speed诊断工具可以作为基于Web的服务在[http://pagespeed.googlelabs.com/](http://pagespeed.googlelabs.com/)上使用，因此我们可以在不安装浏览器插件的情况下进行速度诊断。
- en: An example of Google's remarkable effort in this domain is the invention of
    the `mod_pagespeed` Apache extension that automatically performs speed suggestions
    by rewriting HTML content by optimizing resources. When properly configured, it
    minifies, gzips, converts CSS sprites, and handles many other suggestions that
    the Page Speed browser extension would provide.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Google在这个领域的杰出努力的一个例子是发明了`mod_pagespeed` Apache扩展，通过优化资源通过重写HTML内容自动执行速度建议。当正确配置时，它可以最小化、gzip、转换CSS精灵，并处理Page
    Speed浏览器扩展提供的许多其他建议。
- en: When we enable instrumentation in PageSpeed, it will inject tracker JavaScript
    code and will track through the beacon image that's dynamically added by `mod_pagespeed`.
    By accessing the `/mod_pagespeed_statistics` page in the server, we can find statistics
    about usage.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在PageSpeed中启用仪器时，它将注入跟踪器JavaScript代码，并将通过`mod_pagespeed`动态添加的信标图像进行跟踪。通过访问服务器中的`/mod_pagespeed_statistics`页面，我们可以找到有关使用情况的统计信息。
- en: 'Here is the quick configuration code to be placed in the `pagespeed.conf` file
    for `pagespeed_module`:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是要放置在`pagespeed.conf`文件中的`pagespeed_module`的快速配置代码：
- en: '[PRE33]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Being modules of Apache, these modules handle optimization at the Apache level.
    That means we don't have to modify any of our PHP or JavaScript code.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Apache的模块，这些模块在Apache级别处理优化。这意味着我们不必修改任何PHP或JavaScript代码。
- en: '`mod_deflate:`'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mod_deflate:`'
- en: '`mod_deflate` acts upon the specified content types. Whenever the application
    hits a specified content type, it processes the file and gzips it, based on browser
    request.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`mod_deflate`作用于指定的内容类型。每当应用程序命中指定的内容类型时，它会处理文件并根据浏览器请求进行gzip处理。'
- en: '`mod_expires:`'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mod_expires:`'
- en: This module also acts upon the configuration settings. It can process based
    on content type or file extension. When configured properly, it will add the `Last-Modified`
    header to avoid caching of resources. Based on the overall hits per day, it can
    significantly avoid downloading of static content resources to speed up the site
    loading.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块还根据配置设置进行操作。它可以根据内容类型或文件扩展名进行处理。配置正确后，它将添加`Last-Modified`标头以避免缓存资源。根据每天的总点击量，它可以显着避免下载静态内容资源以加快站点加载速度。
- en: '`mod_pagespeed:`'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mod_pagespeed：`'
- en: 'As this module optimizes the HTML code by rewriting it, it needs to cache the
    files at the server. The path has to be configured in the `pagespeed.conf` configuration
    file. The rewriting setting is adjusted through ModPagespeedRewriteLevel, which
    is set to `CoreFilters` by default. With CoreFilters, the following filters are
    enabled automatically:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此模块通过重写来优化HTML代码，因此需要在服务器上缓存文件。路径必须在`pagespeed.conf`配置文件中配置。重写设置通过`ModPagespeedRewriteLevel`进行调整，默认设置为`CoreFilters`。使用CoreFilters，以下过滤器将自动启用：
- en: '`add_head:` Adds a`<head>` element to the document, if not already present.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add_head：`如果尚未存在，则向文档添加`<head>`元素。'
- en: '`combine_css:` Combines multiple CSS elements into one.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`combine_css：`将多个CSS元素合并为一个。'
- en: '`rewrite_css:` Rewrites CSS files to remove excess whitespace and comments.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rewrite_css：`重写CSS文件以删除多余的空白和注释。'
- en: '`rewrite_javascript:` Rewrites JavaScript files to remove excess whitespace
    and comments.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rewrite_javascript：`重写JavaScript文件以删除多余的空白和注释。'
- en: '`inline_css:` Inlines small CSS files into the HTML.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inline_css：`将小的CSS文件嵌入到HTML中。'
- en: '`inline_javascript` Inlines small JavaScript files into the HTML.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inline_javascript`将小的JavaScript文件嵌入到HTML中。'
- en: '`rewrite_images:` Optimizes images, re-encoding them, removing excess pixels,
    and inlines small images.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rewrite_images：`优化图像，重新编码它们，删除多余的像素，并将小图像嵌入。'
- en: '`insert_image:` Dimensions implied by `rewrite_images`. Adds width and height
    attributes to`<img>` tags that lack them.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert_image：`由`rewrite_images`隐含。向缺少宽度和高度属性的`<img>`标签添加宽度和高度属性。'
- en: '`inline_images:` Implied by `rewrite_images`. Replaces small images with data
    urls inline data.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inline_images：`由`rewrite_images`隐含。用内联数据替换小图像。'
- en: '`recompress_images:` Implied by `rewrite_images`. Recompresses images, removing
    excess metadata and transforming GIF images into PNGs.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recompress_images：`由`rewrite_images`隐含。重新压缩图像，删除多余的元数据，并将GIF图像转换为PNG。'
- en: '`resize_images:` Implied by `rewrite_images`. Resizes images when the corresponding`<img>`
    tag specifies a smaller width and height than the image size.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resize_images：`由`rewrite_images`隐含。当相应的`<img>`标签指定的宽度和高度小于图像大小时，调整图像大小。'
- en: '`extend_cache:` Extends cache lifetime of all resources by signing URLs with
    content hash.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extend_cache：`通过使用内容哈希签名URL，延长所有资源的缓存寿命。'
- en: '`trim_urls:` Shortens URLs by making them relative to the base URL.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trim_urls：`通过使它们相对于基本URL来缩短URL。'
- en: There are a few other filters that are not enabled in `CoreFilters:`
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他未在`CoreFilters`中启用的过滤器：
- en: '`combine_heads:` Combines multiple`<head>` elements found in the document into
    one.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`combine_heads：`将文档中找到的多个`<head>`元素合并为一个。'
- en: '`strip_scripts:` Removes all script tags from the document to help run experiments.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strip_scripts：`从文档中删除所有脚本标记，以帮助运行实验。'
- en: '`outline_css:` Externalizes large blocks of CSS into a cacheable file.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outline_css：`将大块的CSS外部化为可缓存的文件。'
- en: '`outline_javascript:` Externalizes large blocks of JavaScript into a cacheable
    file.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outline_javascript：`将大块的JavaScript外部化为可缓存的文件。'
- en: '`move_css_to_head:` Moves all CSS elements into the`<head>` tag.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`move_css_to_head：`将所有CSS元素移动到`<head>`标记中。'
- en: '`make_google_analytics_async:` Converts synchronous use of Google Analytics
    API to asynchronous.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make_google_analytics_async：`将Google Analytics API的同步使用转换为异步使用。'
- en: '`combine_javascript:` Combines multiple script elements into one.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`combine_javascript：`将多个脚本元素合并为一个。'
- en: '`convert_jpeg_to_webp:` Serves WebP rather than JPEG to compatible browsers.
    **WebP**, pronounced ''weppy'', is an image format from Google that produces better
    compression than JPEG without compromising on quality.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`convert_jpeg_to_webp：`向兼容的浏览器提供WebP而不是JPEG。**WebP**，发音为''weppy''，是谷歌推出的一种图像格式，它比JPEG具有更好的压缩效果而不会影响质量。'
- en: '`remove_comments:` Removes comments in HTML files, though not inline JS or
    CSS.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove_comments：`删除HTML文件中的注释，但不包括内联JS或CSS。'
- en: '`collapse_whitespace:` Removes excess whitespace in HTML files other than inside`<pre>,
    <script>, <style>`, and`<textarea>`.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collapse_whitespace：`除了`<pre>, <script>, <style>`和`<textarea>`内部之外，删除HTML文件中的多余空白。'
- en: '`elide_attributes:` Removes attributes that are not significant according to
    the HTML specs.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`elide_attributes：`根据HTML规范删除不重要的属性。'
- en: '`rewrite_domains:` Rewrites the domains of resources not otherwise touched
    by `mod_pagespeed`, based on `ModPagespeedMapRewriteDomain` and `ModPagespeedShardDomain`
    settings in `pagespeed.conf`.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rewrite_domains：`根据`pagespeed.conf`中的`ModPagespeedMapRewriteDomain`和`ModPagespeedShardDomain`设置，重写`mod_pagespeed`未触及的资源的域。'
- en: '`remove_quotes:` Removes quotes around HTML attributes that are not lexically
    required.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove_quotes：`删除不是词法上必需的HTML属性周围的引号。'
- en: '`add_instrumentation:` Adds JavaScript to page to measure latency and send
    back to the server.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add_instrumentation：`向页面添加JavaScript以测量延迟并发送回服务器。'
- en: These filters can be enabled through `ModPagespeedEnableFilters`. Similarly,
    any filters that are enabled in CoreFilters can be disabled through `ModPagespeedDisableFilters`.
    We have to note that there will be a slight overhead in the server as this module
    rewrites all pages. We can selectively disable the filters and modify our HTML
    code manually in the way that it rewrites.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`ModPagespeedEnableFilters`启用这些过滤器。同样，可以通过`ModPagespeedDisableFilters`禁用在CoreFilters中启用的任何过滤器。我们必须注意，由于此模块重写所有页面，服务器会有轻微的开销。我们可以选择性地禁用过滤器，并手动修改我们的HTML代码，以便进行重写。
- en: If all our pages are static, over a period of time, we may replace the HTML
    files with the rewritten HTML code available from the cache. We may then disable
    this module totally to avoid CPU overhead. This module is also a good learning
    tool, whereby we can learn what changes are needed in HTML, JavaScript, and CSS
    for improved performance.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们所有的页面都是静态的，随着时间的推移，我们可以用缓存中可用的重写HTML代码替换HTML文件。然后我们可以完全禁用这个模块，以避免CPU开销。这个模块也是一个很好的学习工具，我们可以学习需要在HTML、JavaScript和CSS中进行哪些改变以提高性能。
- en: There's more...
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In order to check if we have correctly configured the modules, or to check performance,
    there are a few online services available.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查我们是否正确配置了模块，或者检查性能，有一些在线服务可用。
- en: Testing HTTP headers
  id: totrans-314
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试HTTP头
- en: 'To ensure the `gzip` and browser caching that we have enabled are working correctly,
    we may use:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们启用的`gzip`和浏览器缓存正常工作，我们可以使用：
- en: The Net tab of the Firefox extension, Firebug, to analyze the HTTP headers manually
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Firefox扩展Firebug的Net标签来手动分析HTTP头
- en: The YSlow and PageSpeed extensions to check grade/score
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用YSlow和PageSpeed扩展来检查等级/分数
- en: A web-based service, available at [http://www.webpagetest.org/](http://www.webpagetest.org/),
    that gives suggestions similar to YSlow and Page Speed
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个基于网页的服务，可在[http://www.webpagetest.org/](http://www.webpagetest.org/)上使用，提供类似于YSlow和Page
    Speed的建议
- en: A web-based service, available at [http://redbot.org/](http://redbot.org/),
    to analyze the HTTP headers, which might be the easiest choice.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个基于网页的服务，可在[http://redbot.org/](http://redbot.org/)上使用，用于分析HTTP头，可能是最简单的选择。
- en: Testing mod_pagespeed without installing
  id: totrans-320
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在不安装mod_pagespeed的情况下进行测试
- en: Using the online service available at [http://www.webpagetest.org/compare](http://www.webpagetest.org/compare),
    we can quickly test the speed improvement we may gain by installing `mod_pagespeed`.
    The video feature gives us real-time feedback about the difference.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[http://www.webpagetest.org/compare](http://www.webpagetest.org/compare)上的在线服务，我们可以快速测试通过安装`mod_pagespeed`可能获得的速度改进。视频功能可以实时反馈差异。
- en: Page Speed Service
  id: totrans-322
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 页面速度服务
- en: Google offers page speed services over the Web. We don't have to install `mod_pagespeed`
    in our server, if we use this service. The only change required in the server
    is to point the `DNS CNAME` entry to `ghs.google.com`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌提供了网页速度服务。如果我们使用这项服务，就不需要在服务器上安装`mod_pagespeed`。服务器上唯一需要更改的是将`DNS CNAME`条目指向`ghs.google.com`。
