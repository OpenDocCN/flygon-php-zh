- en: Building the Baseline Backend Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建基线后端应用程序
- en: Now, we will start building the baseline of our application. In this chapter,
    we are going to create a Laravel application using the RESTful architecture. As
    we saw in the previous chapter, Laravel will provide us with the necessary infrastructure
    to build a solid and scalable application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将开始构建我们应用程序的基线。在本章中，我们将使用RESTful架构创建一个Laravel应用程序。正如我们在上一章中看到的，Laravel将为我们提供构建坚实和可扩展的应用程序所需的基础设施。
- en: We will take a closer look at some points that we mentioned briefly in [Chapter
    1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding the Core Concepts
    of Laravel 5*, such as using Docker containers to configure our environment, and
    also how to keep our database always populated, even by using the MySQL Docker
    container.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更仔细地看一些我们在[第1章](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml)中简要提到的点，*理解Laravel
    5的核心概念*，例如使用Docker容器来配置我们的环境，以及如何保持我们的数据库始终填充，即使使用MySQL Docker容器。
- en: As we mentioned before, it is entirely possible to use a different configuration
    for your development environment, and we mentioned some ways in [Chapter 1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding
    the Core Concepts of Laravel 5.* However, we strongly recommend that you use Docker.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，完全可以在开发环境中使用不同的配置，并且我们在[第1章](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml)中提到了一些方法，*理解Laravel
    5的核心概念*。然而，我们强烈建议您使用Docker。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Additional notes about Laravel with Docker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Laravel与Docker的一些额外说明
- en: Using PHP Composer to scaffold a Laravel application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP Composer来搭建一个Laravel应用程序
- en: Setting up a MySQL database
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置MySQL数据库
- en: Migrations and database seed
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移和数据库种子
- en: API documentation with the Swagger framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Swagger框架进行API文档化
- en: Additional notes about Laravel with Docker
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Laravel与Docker的一些额外说明
- en: In this section, we will use the same infrastructure we created in [Chapter
    1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding the Core Concepts
    of Laravel 5*. Using the `PHPDocker.io` generator, we will customize it in order
    to understand a little more about what is happening inside the Docker container.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用我们在[第1章](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml)中创建的相同基础设施，*理解Laravel
    5的核心概念*。使用`PHPDocker.io`生成器，我们将对其进行自定义，以便更多地了解Docker容器内部发生了什么。
- en: So, let's go into a more detailed explanation, and there's nothing better than
    getting our hands dirty.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们进行更详细的解释，没有比亲自动手更好的了。
- en: Creating the Docker Compose foundation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Docker Compose基础
- en: First, we are going to create the foundation (`Dockerfile`, `docker-compose`)
    files for the application, different from the way we did in the first chapter.
    Instead, we will create the files manually, but based on the files we used in
    [Chapter 1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding the Core
    Concepts of Laravel 5*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为应用程序创建基础（`Dockerfile`，`docker-compose`）文件，与我们在第一章中所做的方式不同。相反，我们将手动创建文件，但基于我们在[第1章](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml)中使用的文件，*理解Laravel
    5的核心概念*。
- en: Follow these steps*:*
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行*：*
- en: Create a folder called `chapter-04`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chapter-04`的文件夹。
- en: Inside the `chapter-04` folder, create a folder called `phpdocker`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-04`文件夹中，创建一个名为`phpdocker`的文件夹。
- en: Inside the `phpdocker` folder, add two folders, one called `nginx`, and another
    called `php-fpm`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`phpdocker`文件夹中，添加两个文件夹，一个名为`nginx`，另一个名为`php-fpm`。
- en: Configuring nginx
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置nginx
- en: Now, it's time to create the configuration files for the `nginx` and `php-fpm`
    servers, so we will be using the nginx reverse proxy to serve our PHP files to
    the web.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候为`nginx`和`php-fpm`服务器创建配置文件了，因此我们将使用nginx反向代理来为Web提供我们的PHP文件。
- en: 'Inside the `nginx` folder, create a new file called `nginx.conf` and add the
    following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在`nginx`文件夹中，创建一个名为`nginx.conf`的新文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The previous file set port `80` as the default port for our web server and set
    port `9000` to `php-fpm`, which means that our containers in nginx will communicate
    with `php-fpm` through port `9000`, and, for communicating with the web, will
    use the public view through port `80`. Later on, in `docker-compose.yml`, we will
    configure the internal Docker container ports to the outside world, which, in
    this case, is our host machine.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个文件将端口`80`设置为我们的Web服务器的默认端口，并将端口`9000`设置为`php-fpm`，这意味着我们的nginx容器将通过端口`9000`与`php-fpm`通信，并且为了与Web通信，将通过端口`80`使用公共视图。稍后，在`docker-compose.yml`中，我们将配置内部Docker容器端口到外部世界，这种情况下是我们的主机机器。
- en: Configuring php-fpm
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置php-fpm
- en: 'In order to configure `php-fpm`, follow these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置`php-fpm`，请按照以下步骤进行：
- en: 'Inside the `php-fpm` folder, create a file called `Dockerfile` and add the
    following lines:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`php-fpm`文件夹中，创建一个名为`Dockerfile`的文件，并添加以下行：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, it is time to create our override `php.ini` file, which is the `PHP.ini`
    where we can manually override PHP settings that run on the server.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建我们的覆盖`php.ini`文件了，这是我们可以手动覆盖运行在服务器上的PHP设置的`PHP.ini`文件。
- en: In the case of Apache servers, it only runs once when the server is started,
    in our case, as we use nginx with php-fpm. In regards to this, we are using a
    `fastCgi` environment, and this file is read with every server invocation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apache服务器的情况下，仅在服务器启动时运行一次，在我们的情况下，我们使用nginx与php-fpm。关于这一点，我们使用了`fastCgi`环境，并且该文件在每次服务器调用时都会被读取。
- en: 'Some advantages to using `fastCgi` environment rather than the traditional
    Apache evironment are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`fastCgi`环境而不是传统的Apache环境有一些优势：
- en: Adaptive process growth
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自适应过程增长
- en: Basic statistics (similar to Apache `mod_status`)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本统计信息（类似于Apache `mod_status`）
- en: Advanced process management with graceful start/stop
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有优雅的启动/停止的高级进程管理
- en: The ability to start workers with different `uid`, `gid`, `chroot`, `environment`,
    and `php.ini` (replaces `safe_mode`)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动具有不同`uid`、`gid`、`chroot`、`environment`和`php.ini`（替换`safe_mode`）的工作进程的能力
- en: It creates logs for `stdout` and `stderr`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为`stdout`和`stderr`创建日志
- en: Emergency restart in case of accidental code destruction (cache)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 紧急重启以防意外代码破坏（缓存）
- en: Supports accelerated upload
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持加速上传
- en: Several improvements to your facet FastCGI
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对您的FastCGI进行了几项改进
- en: 'Other ways to use PHP on servers are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 其他在服务器上使用PHP的方法如下：
- en: Apache module (`mod_php`)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache模块（`mod_php`）
- en: CGI
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CGI
- en: FastCGI
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FastCGI
- en: PHP – **FastCGI Process Manager** (**FPM** )
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP - **FastCGI进程管理器**（**FPM**）
- en: '**Command lines** (**CLI**)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行**（**CLI**）'
- en: 'Inside the `php-fpm` folder, create a new file called `php-ini-overrides.ini`
    and add the following code:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`php-fpm`文件夹中，创建一个名为`php-ini-overrides.ini`的新文件，并添加以下代码：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that we are only setting up Xdebug here, which is a PHP extension to debug
    PHP applications.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们这里只是设置Xdebug，这是一个用于调试PHP应用程序的PHP扩展。
- en: Creating a docker-compose configuration file
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个docker-compose配置文件
- en: 'Now, it''s time to configure our compose file and mount all the containers
    that we will use in our application. We will build this file step by step, so
    the first thing to do is create the file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候配置我们的组合文件并挂载我们应用程序中将使用的所有容器了。我们将逐步构建这个文件，所以首先要做的是创建文件：
- en: Inside the root, the `chapter-04` folder creates a file called `docker-compose.yml`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根目录下，`chapter-04`文件夹创建一个名为`docker-compose.yml`的文件。
- en: 'Inside `docker-compose.yml`, add the following piece of code:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`docker-compose.yml`中，添加以下代码：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first block of code here is to configure the MySQL server. We are using
    the official MySQL image from Docker. We are setting the environment variables
    and ports, but note that on the host machine, we are accessing MySQL using port
    `8083` and, inside the container, we are using the `3306` default port. Later
    on in this chapter, we will see how to connect a MySQL client to our MySQL container.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的第一个代码块是用来配置MySQL服务器的。我们使用Docker的官方MySQL镜像。我们设置了环境变量和端口，但请注意，在主机机器上，我们使用端口`8083`访问MySQL，在容器内部，我们使用`3306`默认端口。在本章的后面，我们将看到如何将MySQL客户端连接到我们的MySQL容器。
- en: You can find out more information from the official Docker website from at [https://hub.docker.com/explore/](https://hub.docker.com/explore/)
    and at [https://store.docker.com/](https://store.docker.com/).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从官方Docker网站上找到更多信息，网址是：[https://hub.docker.com/explore/](https://hub.docker.com/explore/)和[https://store.docker.com/](https://store.docker.com/)。
- en: Note that we are using a pretty simple password just for the example. In the
    production environment, we will use global environment variables.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们只是为了示例使用了一个非常简单的密码。在生产环境中，我们将使用全局环境变量。
- en: Let's add a new block of code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个新的代码块。
- en: 'Still on the `docker-compose.yml` file, add the following code right after
    the first block:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`docker-compose.yml`文件中，在第一个代码块之后添加以下代码：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the previous code, configure our `nginx` container using the internal port
    80 as we saw earlier and port `8081` on our host machine. We will also set `nginx.conf`
    inside the container. Here, we are using the `nginx/alpine` Docker image.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，使用内部端口80配置我们的`nginx`容器，就像我们之前看到的那样，并在我们的主机机器上使用端口`8081`。我们还将在容器内设置`nginx.conf`。在这里，我们使用`nginx/alpine`
    Docker镜像。
- en: You can read more about the alpine image here, at the following Docker website: [https://store.docker.com/images/alpine](https://store.docker.com/images/alpine).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里阅读有关alpine镜像的更多信息，网址是：[https://store.docker.com/images/alpine](https://store.docker.com/images/alpine)。
- en: 'Last but not least, let''s configure `php-fpm`. Add the following block of
    code right after the web server configuration block:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的是，让我们配置`php-fpm`。在web服务器配置块之后添加以下代码块：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we just set up `php-ini-overrides.ini` from our machine in the `php-fpm`
    configuration directory inside the Docker container.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是在Docker容器内的`php-fpm`配置目录中设置`php-ini-overrides.ini`。
- en: Building the application container
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用程序容器
- en: Now, it's time to check whether everything is working as we planned. Let's create
    the containers that we will use in our application. In [Chapter 1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), 
    *Understanding the Core Concepts of Laravel 5*, we already saw some very useful
    Docker commands, and now we are going to use them again. Let's see.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候检查一切是否按我们计划的那样工作了。让我们创建我们应用程序中将使用的容器。在[第1章](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml)中，*理解Laravel
    5的核心概念*，我们已经看到了一些非常有用的Docker命令，现在我们将再次使用它们。让我们看看。
- en: First, we will stop any container that is still running from the previous chapter,
    or on your machine.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将停止前一章仍在运行的任何容器，或者您的机器上的任何容器。
- en: Don't forget that you need to have your Docker Daemon up and running on your
    local machine.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记您需要在本地机器上启动并运行Docker守护程序。
- en: 'Open your Terminal window and type the following command:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，输入以下命令：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you are using Docker for the first time on your machine, you will see something
    similar to the following output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次在您的机器上使用Docker，您将看到类似以下输出：
- en: '![](assets/b93b5cce-b45b-4c23-a00f-846b529b3db5.png)Listed Docker containers'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/b93b5cce-b45b-4c23-a00f-846b529b3db5.png)列出的Docker容器'
- en: But, if you've used Docker on your machine before, the previous command will
    list all Docker containers on your machine. In this case, be careful with *step
    2*, because the command will stop and delete all the containers on your machine.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您之前在您的机器上使用过Docker，前面的命令将列出您机器上的所有Docker容器。在这种情况下，请注意*步骤2*，因为该命令将停止并删除您机器上的所有容器。
- en: 'So, if you want to keep your previous container, we recommend that you just
    stop and delete the containers created by this book''s tutorial using the following
    command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您想保留以前的容器，我们建议您只停止并删除使用本书教程创建的容器，使用以下命令：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also use the following command instead of the commands that were executed
    in *steps 2* and* 3*:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用以下命令来代替*步骤2*和*3*中执行的命令：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Type the following command to stop all containers:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以停止所有容器：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s delete all the containers by typing the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令来删除所有容器：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Well done! Now, we can create the image that we need to run our application.
    Let's test the settings we established in the previous session.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在，我们可以创建我们需要运行应用程序的镜像。让我们测试我们在上一节中建立的设置。
- en: 'Inside the `chapter-04` folder, type the following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-04`文件夹中，键入以下命令：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'At the end of the Terminal window, we will see an output similar to the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端窗口的末尾，我们将看到类似于以下的输出：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous output tells us that we created a new Docker image called `chapter-04_php-fpm:latest`,
    so now, let's create the application container.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出告诉我们，我们创建了一个名为`chapter-04_php-fpm:latest`的新Docker镜像，现在，让我们创建应用程序容器。
- en: 'Inside the `chapter-04` folder, on your Terminal, type the following command:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-04`文件夹中，在您的终端上，键入以下命令：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output of the previous command will give us the status of all three Docker
    containers that we set up before, similar to the following output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出将给我们所有三个我们之前设置的Docker容器的状态，类似于以下输出：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we can check the new container that''s been created with the following
    command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令检查新创建的容器：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output on the Terminal will be very similar to the following message:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 终端上的输出将非常类似于以下消息：
- en: '![](assets/53b558d6-2199-482f-991c-ee718a71c16d.png)Docker containers running'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/53b558d6-2199-482f-991c-ee718a71c16d.png)Docker容器正在运行'
- en: Note that we don't have any application code inside the `chapter-04` folder
    yet, so if we try to access the server using the `http://localhost:8081/` address,
    we will see a File Not Found message. This is perfectly expected because we don't
    really have any applications running on our servers yet.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在`chapter-04`文件夹中还没有任何应用程序代码，因此，如果我们尝试使用`http://localhost:8081/`地址访问服务器，我们将看到一个文件未找到的消息。这是完全预期的，因为我们实际上还没有在我们的服务器上运行任何应用程序。
- en: Using PHP Composer to scaffold a Laravel application
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PHP Composer来创建Laravel应用程序的脚手架
- en: We have created a solid base on our servers. The PHP image we used already has
    all the dependencies that Laravel needs to run the application, including Composer.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已在我们的服务器上创建了一个坚实的基础。我们使用的PHP镜像已经具有Laravel运行应用程序所需的所有依赖项，包括Composer。
- en: Therefore, we will use the Composer that we have inside the `php-fpm` containers
    instead of using what we installed globally onto our machine.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用`php-fpm`容器内的Composer，而不是使用我们在机器上全局安装的Composer。
- en: 'This is the safest way to avoid conflicts between versions. Let''s check what
    we have inside the `php-fpm` container:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是避免版本冲突的最安全方式。让我们检查一下`php-fpm`容器内有什么：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，并键入以下命令：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that we are inside the `php-fpm` bash/terminal, let''s check the composer
    version with the following command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们在`php-fpm` bash/终端中，让我们使用以下命令检查Composer版本：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will see the following output on the Terminal:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在终端上看到以下输出：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Congratulations! We have been able to configure all of our environment and we
    are ready to start building our application.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经能够配置我们的所有环境，并且准备开始构建我们的应用程序。
- en: Creating the application scaffold
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序脚手架
- en: In order to maintain the consistency between this book's application and the
    moment in when you will use the example code, we will fix the Laravel version
    that will be installed in your environment.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持本书应用程序与您将使用示例代码的时刻之间的一致性，我们将修复将在您的环境中安装的Laravel版本。
- en: 'So, let''s continue with the following steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续以下步骤：
- en: 'Open your Terminal window and type the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口，并键入以下命令：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: At the time of writing this book, we have installed version 5.6.12 of Laravel.
    Although we should have no problem installing a more current version, we strongly
    recommend that you keep the version in 5.6\. *.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，我们已安装了Laravel 5.6.12版本。尽管我们应该没有问题安装更新的版本，但我们强烈建议您保持在5.6版本。*。
- en: 'After using the previous command, you will see the following message on your
    Terminal window:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的命令后，您将在终端窗口上看到以下消息：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This means that everything went well.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着一切都进行得很顺利。
- en: 'Note that we create the Laravel application inside a directory called `project`.
    This way, we will have the following application structure:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在名为`project`的目录中创建了Laravel应用程序。这样，我们将拥有以下应用程序结构：
- en: '![](assets/5b225857-3596-422e-a801-5b2cdb59856c.png)Application folder structure'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/5b225857-3596-422e-a801-5b2cdb59856c.png)应用程序文件夹结构'
- en: Notice that we have separated the content of the Laravel application from the
    Docker configuration folder. This practice is highly recommended since we can
    make any kind of changes within the project folder without damaging any Docker
    or `docker-compose` files accidentally.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已将Laravel应用程序的内容与Docker配置文件夹分开。这种做法是非常推荐的，因为我们可以在项目文件夹内进行任何类型的更改，而不会意外损坏任何Docker或`docker-compose`文件。
- en: But with this minor change, we need to adjust the `docker-compose.yml` file
    in order to fit the new path that's been created.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，由于这个小改动，我们需要调整`docker-compose.yml`文件，以适应新创建的路径。
- en: 'Open `docker-compose.yml` and let''s adjust the `php-fpm` volumes tag with
    the new path, as in the following block of code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`docker-compose.yml`，让我们调整`php-fpm`卷标的新路径，如以下代码块所示：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Running the application
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'For the change we just made to take effect, we need to stop and restart our
    containers:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们刚刚做出的更改生效，我们需要停止并重新启动我们的容器：
- en: On your Terminal, type `exit` to exit the `php-fpm` bash.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端上，键入`exit`以退出`php-fpm` bash。
- en: 'Now, at the root of the `chapter-04` folder, still in the Terminal, type the
    following command:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`chapter-04`文件夹的根目录中，仍然在终端中，键入以下命令：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You will see the following output message:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出消息：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'On your Terminal, type the following command to run the containers again:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端上，键入以下命令以再次运行容器：
- en: '[PRE24]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, we can see that the `php-fpm` container was recreated and will reflect
    our changes:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到`php-fpm`容器已被重新创建，并将反映我们的更改：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It is highly recommended that you repeat this procedure whenever you make any
    changes to the `nginx` or `php-fpm` servers.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议您在对`nginx`或`php-fpm`服务器进行任何更改时重复此过程。
- en: Now, let's check the Laravel installation and configuration. Open your default
    browser and go to the link `http://localhost:8081/`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查Laravel的安装和配置。打开您的默认浏览器，转到链接`http://localhost:8081/`。
- en: 'We will see the welcome screen from the Laravel framework, as shown in the
    following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 Laravel 框架中看到欢迎屏幕，如下截图所示：
- en: '![](assets/2323abf2-890e-4555-9e7b-6d74ac8d1f89.png)Laravel welcome screen'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2323abf2-890e-4555-9e7b-6d74ac8d1f89.png)Laravel欢迎屏幕'
- en: Setting up a MySQL database
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置MySQL数据库
- en: So far, we have come a long way and built a solid foundation for our RESTful
    application, though we must take a few more steps to finally be able to begin
    with development.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经走了很长的路，为我们的RESTful应用程序建立了坚实的基础，尽管我们还必须采取一些步骤才能最终开始开发。
- en: In this step, we will configure our MySQL database for our application and perform
    some alterations in our Docker MySQL container in order to make the data of our
    application persist in our database, even when we disconnect or stop our MySQL
    container.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们将为我们的应用程序配置MySQL数据库，并对我们的Docker MySQL容器进行一些更改，以使我们的应用程序的数据在我们断开连接或停止MySQL容器时仍然存在于我们的数据库中。
- en: Adding a storage folder
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个存储文件夹
- en: A local folder to store MySQL data is very important since our `docker-compose.yml`
    file does not contain any volume that's been configured to store the data created
    in our database yet.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 存储MySQL数据的本地文件夹非常重要，因为我们的`docker-compose.yml`文件中没有包含任何已配置用于存储数据库中创建的数据的卷。
- en: Remember, we are using Docker, and our MySQL container is based on an image
    of a database. This way, every time we finish the container process, our database
    is erased and the next time we start it, our database will be empty.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们正在使用Docker，我们的MySQL容器是基于数据库镜像的。这样，每当我们完成容器进程时，我们的数据库就会被删除，下次启动时，我们的数据库将为空。
- en: 'Open the `docker-compose.yml` file and add `- ./storage-db:/var/lib/mysql`
    right after the application volumes on the MySQL configuration block, as shown
    in the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`docker-compose.yml`文件，并在MySQL配置块的应用程序卷之后添加`- ./storage-db:/var/lib/mysql`，如下面的代码所示：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The previous code sets the `storage-db` folder on our project/machine to store
    all the MySQL data from the MySQL container. Later in this section, we will see
    the result of these changes, but for now, let's configure our database.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将`storage-db`文件夹设置在我们的项目/机器上，以存储来自MySQL容器的所有MySQL数据。稍后在本节中，我们将看到这些更改的结果，但现在，让我们配置我们的数据库。
- en: Configuring the .env file
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置.env文件
- en: 'Open the `.env` file at the root of the `project` folder and replace the database
    configuration with the following lines:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project`文件夹根目录下的`.env`文件，并用以下行替换数据库配置：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Let's check the connection.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查连接。
- en: 'Inside the Terminal window, type the following command:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中，输入以下命令：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Inside the `php-fpm` bash, type the following command:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`php-fpm` bash中，输入以下命令：
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, type the following command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，输入以下命令：
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You will see something similar to the following output:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到类似以下输出：
- en: '[PRE31]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This means that everything has gone well. Congratulations! We have a database.
    Now, it is time to generate our local database folder called `storage-db`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着一切都进行得很顺利。恭喜！我们有了一个数据库。现在是时候生成我们的本地数据库文件夹`storage-db`了。
- en: If you are still inside the `php-fpm` bash, type the `exit` command to get out
    of it and return to the Terminal.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然在`php-fpm` bash中，请输入`exit`命令以退出并返回到终端。
- en: 'On your Terminal window, type the following command:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端窗口中，输入以下命令：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s remove the MySQL container that we created previously:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们删除之前创建的MySQL容器：
- en: '[PRE33]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And now, let''s recreate the container so that it has the changes up and running.
    Type the following command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们重新创建容器，使其具有更新并运行的更改。输入以下命令：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You will see the following output on your Terminal:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在终端上看到以下输出：
- en: '[PRE35]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Note that the MySQL container has been created with the `storage-db` folder
    properly configured. Our project will have the following structure:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，MySQL 容器已经创建，并且`storage-db`文件夹已经正确配置。我们的项目将具有以下结构：
- en: '![](assets/35dcc3a3-aa15-4d9b-9d80-e11e5fb92baa.png)Project folder structure'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/35dcc3a3-aa15-4d9b-9d80-e11e5fb92baa.png)项目文件夹结构'
- en: Using a MySQL external client
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MySQL外部客户端
- en: Managing a database entirely using the command line may not be an easy task,
    and, visually speaking, it is not. To assist us in this process, all databases
    have a tool for this task, and MySQL is no different.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 仅使用命令行管理数据库可能并不容易，从视觉上讲也不容易。为了帮助我们进行此过程，所有数据库都有一个用于此任务的工具，MySQL也不例外。
- en: There are several open source and multi-platform tools that help us in this
    process, and MySQL has its own tool called **Workbench**.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种开源和多平台工具可以帮助我们进行此过程，MySQL也有自己的工具称为**Workbench**。
- en: You can read more about the Workbench at the official MySQL documentation at [https://www.mysql.com/products/workbench/](https://www.mysql.com/products/workbench/).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方MySQL文档的Workbench部分阅读更多信息[https://www.mysql.com/products/workbench/](https://www.mysql.com/products/workbench/)。
- en: In this session, we will see how to use a tool with the graphical interface
    to access our database that is inside the Docker container.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用具有图形界面的工具来访问我们的Docker容器中的数据库。
- en: Go to [https://dev.mysql.com/downloads/workbench/](https://dev.mysql.com/downloads/workbench/),
    choose your platform, and follow the installation steps.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://dev.mysql.com/downloads/workbench/](https://dev.mysql.com/downloads/workbench/)，选择您的平台，并按照安装步骤进行安装。
- en: Open Workbench, click on the Database top menu, and click on Connect to Database.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Workbench，单击顶部的Database菜单，然后单击连接到数据库。
- en: 'You will see the following screen:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下屏幕：
- en: '![](assets/c6d5387b-1f7e-421a-9a46-512826846884.png)Workbench connection screen'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c6d5387b-1f7e-421a-9a46-512826846884.png)Workbench连接屏幕'
- en: 'Remember that the Workbench is running on the host machine and not inside the
    MySQL Docker container. Add the following information to it:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请记住，工作台正在主机机器上运行，而不是在MySQL Docker容器内部运行。向其中添加以下信息：
- en: 'Hostname: `127.0.0.1` Port: `8083` Username: `chapter-04` Password: `123456`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 主机名：`127.0.0.1` 端口：`8083` 用户名：`chapter-04` 密码：`123456`
- en: Note that we are using the same configuration that we used on the Laravel `.env`
    file.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在使用与Laravel`.env`文件中相同的配置。
- en: 'Click the OK button. Now, we are connected to the MySQL database running inside
    the Docker container. You will see something similar to the following screenshot:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”按钮。现在，我们连接到在Docker容器内运行的MySQL数据库。您将看到类似于以下屏幕截图的内容：
- en: '![](assets/a5bd455d-4c37-4235-806a-1b41ab66026f.png)Workbench welcome screen'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 工作台欢迎界面
- en: 'Notice the left Schema panel. We already have our database created by Docker
    container and we are ready to use it. At this moment, it is still empty, as can
    be seen in the following screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意左侧模式面板。我们已经通过Docker容器创建了我们的数据库，并且准备好使用它。此时，它仍然是空的，如下面的屏幕截图所示：
- en: '![](assets/844b4bbe-5541-4a97-bac1-9b86e7692d30.png)Schema left panel'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/844b4bbe-5541-4a97-bac1-9b86e7692d30.png)模式左侧面板'
- en: Migrations and database seed
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移和数据库种子
- en: Now, let's exercise some commands that we briefly saw in the first chapter and
    create our migrations and seeds in a different way.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们练习一些我们在第一章中简要看到的命令，并以不同的方式创建我们的迁移和种子。
- en: 'Open your Terminal window on the `chapter-04` folder and type the following
    command:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter-04`文件夹上打开您的终端窗口并键入以下命令：
- en: '[PRE36]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Inside the container root bash, type the following command:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在容器根bash内，键入以下命令：
- en: '[PRE37]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Note that we are using the `-m` flag to create the migration file together
    with the creation of Bike Model. So now, we have two new files in our application:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用了`-m`标志来创建迁移文件以及创建Bike模型。所以现在，我们的应用程序中有两个新文件：
- en: '`project/app/Bike.php`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project/app/Bike.php`'
- en: '`project/database/migrations/XXXX_XX_XX_XXXXXX_create_bikes_table.php`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project/database/migrations/XXXX_XX_XX_XXXXXX_create_bikes_table.php`'
- en: Creating the migration boilerplate
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建迁移样板
- en: As we saw previously, the new files only have the boilerplate code that's been
    created by the Laravel engine. Let's add some content to the **Bike** model and
    migration file.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，新文件只有Laravel引擎创建的样板代码。让我们向**Bike**模型和迁移文件添加一些内容。
- en: 'Open `project/app/Bike.php` and add the following code inside the Bike model
    function:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Bike.php`并在Bike模型函数内添加以下代码：
- en: '[PRE38]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, we need to add the same properties to the migration file we created previously.
    Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_bikes_table.php` and
    add the following code inside the `up()` function:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要向之前创建的迁移文件添加相同的属性。打开`project/database/migrations/XXXX_XX_XX_XXXXXX_create_bikes_table.php`并在`up()`函数内添加以下代码：
- en: '[PRE39]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Congratulations! You have created our first migration file, and it is time to
    execute the following command to feed our database.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经创建了我们的第一个迁移文件，现在是时候执行以下命令来填充我们的数据库了。
- en: 'Open your Terminal window and type the following command:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并键入以下命令：
- en: '[PRE40]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output of the previous command will be similar to the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出将类似于以下内容：
- en: '[PRE41]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, on the Workbench schema, we can see our new table filled by the `migrate`
    command, as shown in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在工作台模式下，我们可以看到我们的新表格由`migrate`命令填充，如下面的屏幕截图所示：
- en: '![](assets/320bbbf1-563c-4125-ba7c-b38f5924bf6b.png)Workbench schema panel'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/320bbbf1-563c-4125-ba7c-b38f5924bf6b.png)工作台模式面板'
- en: Creating our first database seed
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个数据库种子
- en: In the previous steps, we basically followed the same procedure as in [Chapter
    1](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml), *Understanding the Core Concepts
    of Laravel 5*, so now we are not going to use the Faker library to create our
    data. Faker is a very useful tool as it's easy to use and quick to create data
    during the development of applications with Laravel.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我们基本上遵循了与[第1章](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml)相同的程序，*理解Laravel
    5的核心概念*，所以现在我们不会使用Faker库来创建我们的数据。Faker是一个非常有用的工具，因为它在使用Laravel开发应用程序期间易于使用且快速创建数据。
- en: In this example, we want to keep the data we have created more consistent with
    the application we are creating, so we will use an external JSON file with the
    data we want to insert into our database.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们希望保持我们创建的数据与我们正在创建的应用程序更一致，因此我们将使用一个外部JSON文件，其中包含我们要插入到数据库中的数据。
- en: Inside the `project/database` folder, create a new folder called `data-sample`.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`project/database`文件夹内，创建一个名为`data-sample`的新文件夹。
- en: 'Inside the `project/database/data-sample` folder, create a new file called `bikes.json`
    and add the following code:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`project/database/data-sample`文件夹内，创建一个名为`bikes.json`的新文件并添加以下代码：
- en: '[PRE42]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Notice that we keep some placeholder text and an image path. Don't worry about
    this for now; later on in this book, we will replace all of this data using our
    frontend application.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们保留了一些占位文本和图像路径。现在不要担心这个问题；在本书的后面，我们将使用我们的前端应用程序替换所有这些数据。
- en: 'Now, it''s time to create our seed file. On your Terminal window, type the
    following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候创建我们的种子文件了。在您的终端窗口中，键入以下命令：
- en: '[PRE43]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The previous command added a new file called `BikesTableSeeder.php` inside the `project/database/seeds`
    folder.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令在`project/database/seeds`文件夹内添加了一个名为`BikesTableSeeder.php`的新文件。
- en: 'Open `project/database/seeds/BikesTableSeeder.php` and replace the code inside
    it with the following:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/database/seeds/BikesTableSeeder.php`并用以下代码替换其中的代码：
- en: '[PRE44]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note that in the first line, we are using the Eloquent ORM shortcut function
    (`DB::table()`) to delete the bike tables and are using the `Bike::create()` function
    to create our records. In the next chapter, we will look deeper at Eloquent ORM,
    but for now, let's focus on creating our first seed.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在第一行中，我们使用了Eloquent ORM快捷方式函数（`DB::table()`）来删除自行车表，并使用`Bike::create()`函数来创建我们的记录。在下一章中，我们将更深入地了解Eloquent
    ORM，但现在让我们专注于创建我们的第一个种子。
- en: 'Open `project/database/seeds/DatabaseSeeder.php` and add the following line
    of code, right after the `UsersTableSeeder` comment:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/database/seeds/DatabaseSeeder.php`并在`UsersTableSeeder`注释之后添加以下代码行：
- en: '[PRE45]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Now, it is time to run our seed and fill the database. We can do this in two
    ways. We can either run the `BikeSeeder` command `php artisan db:seed --class=BikesTableSeeder`
    individually, or use the `php artisan db:seed` command, which will run all of
    the seeds in our application.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候运行我们的seed并填充数据库了。我们可以以两种方式进行。我们可以单独运行`BikeSeeder`命令`php artisan db:seed
    --class=BikesTableSeeder`，也可以使用`php artisan db:seed`命令，这将运行我们应用程序中的所有seed。
- en: As we are at the beginning of our development, we will execute the command to
    load all the seeds.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '由于我们现在处于开发的开始阶段，我们将执行命令以加载所有seed。 '
- en: 'Open your Terminal window and type the following command:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端窗口并键入以下命令：
- en: '[PRE46]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'At the end of the previous command, we will see a success message, `Seeding:
    BikesTableSeeder`, on our Terminal. Bravo! Now, we have our first records on the `chapter-04`
    database.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '在上一个命令的末尾，我们将在终端上看到一个成功的消息，“Seeding: BikesTableSeeder”。太棒了！现在，我们在`chapter-04`数据库上有了我们的第一条记录。'
- en: Exploring the Workbench table view
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Workbench表视图
- en: 'Now, we will use the visual interface of the Workbench to visualize the data
    that we have just placed inside our database. To do this, open the Workbench and
    perform the following steps:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用Workbench的可视界面来查看我们刚刚放入数据库中的数据。为此，请打开Workbench并执行以下步骤：
- en: On the right-hand schema panel, click on the Tables menu item.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧模式面板上，单击“Tables”菜单项。
- en: Right click on bikes and click Select Rows – Limit 1000.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击bikes并单击选择行 - 限制1000。
- en: 'We will see a new panel on the right-hand side, as in the following screenshot:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在右侧看到一个新面板，如下截图所示：
- en: '![](assets/30b1edef-d9fa-4b6d-948f-0a8e21f76edf.png)Bike tables on the Workbench
    interface'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/30b1edef-d9fa-4b6d-948f-0a8e21f76edf.png)Workbench界面上的Bike表'
- en: Note that we now have five records on our database inside the bike table, which
    is the same data that we created in the `bike.json` file.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们现在在bike表中的数据库中有五条记录，这是我们在`bike.json`文件中创建的相同数据。
- en: API documentation with the Swagger framework
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Swagger框架进行API文档编制
- en: 'Let''s take a break and tackle an extremely important topic in the development
    of RESTful applications: documentation on how to use the API endpoints.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们休息一下，解决RESTful应用程序开发中一个非常重要的主题：如何使用API端点的文档。
- en: Although we have not created any controller or route to be able to view the
    data of our API in the browser, we will introduce a new tool that will help us
    develop our frontend application, called the Swagger framework.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们还没有创建任何控制器或路由来在浏览器中查看我们的API数据，但我们将介绍一个新工具，它将帮助我们开发我们的前端应用程序，称为Swagger框架。
- en: Swagger is an open source language-agnostic framework for describing, documenting,
    consuming, and visualizing REST APIs.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger是一个开源的语言无关框架，用于描述、记录、消费和可视化REST API。
- en: It is very common today to use public and private APIs for creating frontend
    web applications, and we are familiar with several APIs, such as Twitter, LinkedIn,
    and many others.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，使用公共和私有API来创建前端Web应用程序非常常见，我们熟悉多个API，如Twitter、LinkedIn等。
- en: Documenting your application is an important part of the development process.
    Every API needs to be documented in order to make it easier to use and test, either
    by your in-house team or by a third-party developer.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 文档化您的应用程序是开发过程中的重要部分。每个API都需要进行文档编制，以便更容易地由内部团队或第三方开发人员使用和测试。
- en: The easiest way to do this is at the beginning of the development process.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的最简单方法是在开发过程的开始阶段。
- en: You can read more about the Swagger framework at the official website: [https://swagger.io/](https://swagger.io/).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方网站上阅读有关Swagger框架的更多信息：[https://swagger.io/](https://swagger.io/)。
- en: Installing the L5-Swagger library
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装L5-Swagger库
- en: 'In this section, we are going to use the L5-Swagger project. A wrapper for
    Swagger-PHP and Swagger-UI are going to be used with the Laravel 5 framework:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用L5-Swagger项目。将使用Swagger-PHP和Swagger-UI的包装器与Laravel 5框架一起使用：
- en: 'Still on your Terminal window, type the following command:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口上，键入以下命令：
- en: '[PRE47]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: You can read more about L5-Swagger at the official GitHub repository at [https://github.com/DarkaOnLine/L5-Swagger](https://github.com/DarkaOnLine/L5-Swagger).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方GitHub存储库上阅读有关L5-Swagger的更多信息：[https://github.com/DarkaOnLine/L5-Swagger](https://github.com/DarkaOnLine/L5-Swagger)。
- en: 'At the end of the command line, we will see the following output:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行的末尾，我们将看到以下输出：
- en: '![](assets/ff990243-0aa9-4450-bba0-7eee97748df2.png)Composer L5-Swagger installation
    process'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/ff990243-0aa9-4450-bba0-7eee97748df2.png)Composer L5-Swagger安装过程'
- en: 'Open the `project/config/app.php` file and add the following code at the end
    of package the `ServiceProvider` comment:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/config/app.php`文件，并在`ServiceProvider`注释的末尾添加以下代码：
- en: '[PRE48]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Type the following command to publish the package:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入以下命令以发布该软件包：
- en: '[PRE49]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The output of the previous command will create some new files on our application,
    as shown in the following screenshot:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令的输出将在我们的应用程序上创建一些新文件，如下截图所示：
- en: '![](assets/a39dabeb-6a38-490d-94b5-0fff5d7d8a1a.png)L5-Swagger UI'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a39dabeb-6a38-490d-94b5-0fff5d7d8a1a.png)L5-Swagger UI'
- en: Creating the application API controller
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序API控制器
- en: By way of good practice, we will create a new controller in our application
    just to serve as the basis for the API documentation and hold some basic API information
    with a Swagger annotation.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 作为良好的实践方式，我们将在我们的应用程序中创建一个新的控制器，用作API文档的基础，并使用Swagger注释保存一些基本的API信息。
- en: 'On your Terminal window, type the following command to create a new controller:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端窗口上，键入以下命令以创建一个新的控制器：
- en: '[PRE50]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Open `project/app/Http/Controllers/ApiController.php` and replace `Class ApiController
    comments` with the following comments:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Http/Controllers/ApiController.php`并用以下注释替换`Class ApiController
    comments`：
- en: '[PRE51]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Generating and publishing the API documentation
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成和发布API文档
- en: Now, it is time to publish our documentation and access it through a web browser.
    So, let's do so in the following steps.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候发布我们的文档并通过Web浏览器访问它了。因此，让我们按照以下步骤来做。
- en: 'Still on your Terminal window, type the following command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在您的终端窗口上，输入以下命令：
- en: '[PRE52]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Well done! Now, we have our API documentation ready to be implemented.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！现在，我们的API文档已经准备好实施了。
- en: 'Go to `http://localhost:8081/api/documentation` and you will see a result similar
    to the following screenshot:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 转到`http://localhost:8081/api/documentation`，您将看到类似以下截图的结果：
- en: '![](assets/8f4d6a6d-c304-4849-9ff3-5a50d84c0b9c.png)Swagger UI'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8f4d6a6d-c304-4849-9ff3-5a50d84c0b9c.png)Swagger UI'
- en: The Swagger framework is up and running on our local machine.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger框架已经在我们的本地机器上运行起来了。
- en: Adding Swagger definitions
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Swagger定义
- en: Swagger generates the documentation for our notations that use API, a kind of
    self-writing of the framework itself, where, through tags, we can define what
    each element does. Let's start building our API documentation.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger为使用API的我们的注释生成文档，这是框架本身的一种自我编写，通过标签，我们可以定义每个元素的作用。让我们开始构建我们的API文档。
- en: The first step is to add some definitions to the `Bike` model we just created
    in the previous steps.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是为我们在之前创建的`Bike`模型添加一些定义。
- en: 'Open the `project/app/Bike.php` model file and replace the code with the following
    lines:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`project/app/Bike.php`模型文件，并用以下代码替换原有代码：
- en: '[PRE53]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The previous annotation is pretty self-explanatory; we just describe each model
    field and set the data type with a useful example on how to use it.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的注释非常简单明了；我们只是描述了每个模型字段，并使用有用的示例设置了数据类型。
- en: 'Go back to your Terminal window and type the following command to generate
    the documentation:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的终端窗口，并输入以下命令来生成文档：
- en: '[PRE54]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now, let''s check our documentation URL and see what happens. Go to `http://localhost:8081/api/documentation`
    and we will see that our first model has been documented, as shown in the following
    screenshot:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查我们的文档URL并看看发生了什么。转到`http://localhost:8081/api/documentation`，我们将看到我们的第一个模型已经被记录下来，如下面的截图所示：
- en: '![](assets/7596980f-2bde-4fba-a143-c42923c5db9a.png)Swagger UI'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7596980f-2bde-4fba-a143-c42923c5db9a.png)Swagger UI'
- en: 'Note that we have all the model properties explained inside an object, each
    one with a data type, description, and an example. This was possible due to the `Swagger
    @SWG\Property` definition:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经在一个对象内解释了所有的模型属性，每个属性都有数据类型、描述和示例。这是由于`Swagger @SWG\Property`的定义：
- en: '[PRE55]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: As our application grows, we will add all the documentation we need to use our
    APIs.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的应用程序的增长，我们将添加所有需要使用我们的API的文档。
- en: You can find out more information about Swagger's visual interface at the following
    link [https://swagger.io/swagger-ui/](https://swagger.io/swagger-ui/).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到有关Swagger可视化界面的更多信息：[https://swagger.io/swagger-ui/](https://swagger.io/swagger-ui/)。
- en: Summary
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have come to the end of another chapter. We put in a lot of hard work here
    and did a lot of things, such as configuring Docker to maintain the data we are
    going to create in our MySQL database. We also created a large application and
    configured the database, and learned how to use the Workbench to view the data
    loaded by the application.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经来到了另一个章节的结束。我们在这里付出了很多努力，做了很多事情，比如配置Docker来维护我们将在MySQL数据库中创建的数据。我们还创建了一个大型应用程序并配置了数据库，并学会了如何使用Workbench查看应用程序加载的数据。
- en: We created our first model and its migration file, and we also created a seed
    to perform an initial data load in our database. Finally, we built a solid foundation
    to scale our RESTful API.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了我们的第一个模型及其迁移文件，并且还创建了一个种子来在我们的数据库中进行初始数据加载。最后，我们建立了一个坚实的基础来扩展我们的RESTful
    API。
- en: In the next chapter, we will go into more depth in terms of how to create controllers,
    routes, and relationships between tables using the Eloquent ORM, among other things.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地讨论如何使用Eloquent ORM创建控制器、路由和表之间的关系，以及其他内容。
