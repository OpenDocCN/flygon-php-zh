- en: Chapter 6. Best Practices in Laravel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 Laravel最佳实践
- en: In this chapter, we will see examples of various previously-described design
    patterns used in Laravel.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到在Laravel中使用各种先前描述的设计模式的示例。
- en: 'The topics that will be discussed in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论的主题如下：
- en: Basic and advanced practices
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本和高级实践
- en: Real-life examples of design patterns used in Laravel
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Laravel中使用的设计模式的现实生活示例
- en: The reasons why these design patterns are used in the examples
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些设计模式在示例中使用的原因
- en: Basic practices
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本实践
- en: As a developer, when you are working on an application, there should be a systematic
    order to things to prevent confusion and allow flexibility. For example, in an
    MVC architecture, Controller should only hold the logic and Model should only
    hold dataflow-related stuff. You should not write database queries in View files.
    This way, anyone working on the project can find what they are looking for easily
    and can change, fork, or improve it with greater ease. If this is not followed,
    the project will turn into a mess as it gets bigger and bigger.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，当您在应用程序上工作时，应该有一种系统化的顺序，以防止混乱并允许灵活性。例如，在MVC架构中，控制器应该只包含逻辑，模型应该只包含与数据流相关的内容。您不应该在视图文件中编写数据库查询。这样，任何在项目上工作的人都可以轻松找到他们正在寻找的内容，并可以更轻松地进行更改、分支或改进。如果不遵循这一点，随着项目的不断扩大，项目将变得一团糟。
- en: 'A basic good practice would be to avoid repeating yourself. If you''re using
    a code snippet or a condition a number of times, it''d be better for you to prepare
    a method or a scope for that action. This way, you wouldn''t have to repeat yourself
    over and over. For example, let''s say we have an imaginary Controller as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的良好实践是避免重复。如果您多次使用代码片段或条件，最好为该操作准备一个方法或范围。这样，您就不必一遍又一遍地重复自己。例如，假设我们有一个虚构的控制器如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the `where()` condition checks if `active` is repeated twice.
    In real-world examples, it would be used even more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`where()`条件检查`active`是否重复两次。在现实世界的例子中，它可能会被更多地使用。
- en: 'To prevent this, in Laravel, you can use query scopes. Query scopes are single
    functions that help you reuse the logic in Models. Let''s define a query scope
    in Model and change the Controller method as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，在Laravel中，您可以使用查询范围。查询范围是帮助您在模型中重用逻辑的单个函数。让我们在模型中定义一个查询范围，并将控制器方法更改如下：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, we've defined a method called `scopeActive()` in Model, which
    is prefixed with the word `scope` and CamelCased. This way, Laravel can understand
    that it's a query scope, and you can use that scope directly. As you can see,
    the conditions in the Controller have also changed. They have changed from `where('active',
    1)` to `active()` .
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在模型中定义了一个名为`scopeActive()`的方法，它以`scope`开头并使用驼峰命名法。这样，Laravel可以理解它是一个查询范围，并且您可以直接使用该范围。如您所见，控制器中的条件也已更改。它们已从`where('active',
    1)`更改为`active()`。
- en: Design patterns are advanced practices and can be used to keep the code tidy
    and systematic using various approaches.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式是高级实践，可以使用各种方法使代码整洁和系统化。
- en: Advanced practices
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级实践
- en: In this subsection, we will see various design patterns' usage in Laravel. If
    you test the custom classes that include the design patterns, which are provided
    within the book, they should be autoloaded in your application. This can be done
    either by adding them to the `ClassLoader::addDirectories()` array of the `global.php`
    file (which can be found by navigating to `app/start` ) or the `start.php` file
    in the `bootstrap` folder. Alternatively, we can add a `psr-0` autoload in `composer.json`
    .
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将看到Laravel中各种设计模式的使用。如果您测试包含在本书中提供的设计模式的自定义类，它们应该会自动加载到您的应用程序中。这可以通过将它们添加到`global.php`文件的`ClassLoader::addDirectories()`数组中（可以通过导航到`app/start`找到）或`bootstrap`文件夹中的`start.php`文件中来完成。或者，我们可以在`composer.json`中添加一个`psr-0`自动加载。
- en: 'To add directories from `app/start/global.php` , first find the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`app/start/global.php`中添加目录，首先找到以下代码：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then add your folders below. The resulting code will look as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在下面添加您的文件夹。生成的代码将如下所示：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you want to autoload classes or files from the `composer.json` file using
    the `psr-0` autoload, you have to add the namespace and directory into `composer.json`
    . The key will be the namespace and the value will be the path of the folder that
    holds the files and classes to be autoloaded. Have a look at the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用`psr-0`自动加载从`composer.json`文件中自动加载类或文件，您必须将命名空间和目录添加到`composer.json`中。键将是命名空间，值将是包含要自动加载的文件和类的文件夹的路径。看一下以下代码：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, if our `composer.json` file doesn't have a `psr-0` object,
    first we'll create it and then add the namespace and the path values inside. You
    can see we have a namespace called `Acme` , which is under the folder `app/lib`
    .
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，如果我们的`composer.json`文件没有一个`psr-0`对象，首先我们会创建它，然后在里面添加命名空间和路径值。您可以看到我们有一个名为`Acme`的命名空间，它位于`app/lib`文件夹下。
- en: If you don't want to autoload a whole folder but only a few single files, you
    can also use the `files` object in `composer.json` . It's a single object that
    only holds the paths of files.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想自动加载整个文件夹，而只想加载一些单个文件，您也可以在`composer.json`中使用`files`对象。这是一个只包含文件路径的单个对象。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After adding these values, you need to dump the autoload files and make Laravel
    understand them. To do this, after editing the `composer.json` file, simply run
    the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些值后，您需要转储自动加载文件并让Laravel理解它们。要做到这一点，在编辑`composer.json`文件后，只需运行以下命令：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also run the following command if the composer is not installed in
    your environment:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的环境中没有安装composer，您也可以运行以下命令：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After this, the classes or files that you've just added will be autoloaded and
    available for your project.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，您刚刚添加的类或文件将被自动加载，并可用于您的项目。
- en: The Factory pattern
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工厂模式
- en: 'As you might recollect from [Chapter 5](text00032.html#page "Chapter 5. Design
    Patterns in Laravel") , *Design Patterns in Laravel* , the Factory pattern is
    based on creating template method objects to implement an algorithm. Let''s assume
    we are developing the following application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能从[第5章](text00032.html#page "第5章 Laravel中的设计模式")中所记得的，工厂模式是基于创建模板方法对象来实现算法的。假设我们正在开发以下应用程序：
- en: '![The Factory pattern](Image00012.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![工厂模式](Image00012.jpg)'
- en: 'Let''s assume the **Toyota** brand only produces C-class red cars, and the
    **Suzuki** brand only produces B-class green cars. Let''s assume we have a Model
    for this purpose that is defined as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设**Toyota**品牌只生产C级红色汽车，而**Suzuki**品牌只生产B级绿色汽车。假设我们有一个为此目的定义的模型，如下所示：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, in this approach, the same `carFactory()` class is called for
    both `Suzuki` and `Toyota` because in this example both brands would have the
    same processes to create the core of the car. The quality-class and color are
    set after the core of the car is produced. After this is set, for the color and
    quality-class choices, we can directly call the corresponding class with its brand.
    Let''s say we are going to buy a B-class car. Now, because the code knows which
    brand produces B-class cars, it will directly call `Suzuki` . This Model can have
    a Controller like the one seen in the following code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，在这种方法中，相同的`carFactory()`类被用于`Suzuki`和`Toyota`，因为在这个例子中，这两个品牌都会有相同的流程来创建汽车的核心。质量类和颜色是在汽车核心生产后设置的。设置了这些之后，对于颜色和质量类的选择，我们可以直接调用相应品牌的类。假设我们要购买B级车。现在，因为代码知道哪个品牌生产B级车，它将直接调用`Suzuki`。这个模型可以有一个控制器，就像下面的代码中所看到的那样：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The three different routes of this approach are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的三条不同路线如下：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In such situations, in addition to the Factory pattern, having an approach like
    these three routes would be a good practice for URL richness, ease of use, and
    improved search engine optimization of the website.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，除了工厂模式，像这三条路线一样的方法对于URL的丰富性，易用性和网站的搜索引擎优化都是很好的实践。
- en: The Builder pattern
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建造者模式
- en: We discussed in [Chapter 5](text00032.html#page "Chapter 5. Design Patterns
    in Laravel") , *Design Patterns in Laravel* , that, in a way, the Builder pattern
    is an approach to separate bigger objects into smaller ones and make them available
    for reuse.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](text00032.html#page "第5章 Laravel中的设计模式")中讨论了* Laravel中的设计模式*，在某种程度上，建造者模式是将较大的对象分解为较小对象并使它们可重用的一种方法。
- en: 'In this subsection, as in the example in [Chapter 5](text00032.html#page "Chapter 5. Design
    Patterns in Laravel") , *Design Patterns in Laravel* , let''s assume we are baking
    a pizza that has certain properties, such as Italian and small/big:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个小节中，就像在[第5章](text00032.html#page "第5章 Laravel中的设计模式")的例子中一样，让我们假设我们正在烘烤一种具有特定属性的比萨，比如意大利比萨和小/大比萨：
- en: '![The Builder pattern](Image00013.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![建造者模式](Image00013.jpg)'
- en: 'Let''s assume we have an autoloaded class as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个自动加载的类如下：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, we have injected a builder, the `PizzaBuilder` class, which
    includes two chefs: one is an Italian pizza maker and the other is an Asian pizza
    maker. The `PizzaBuilder` class in this approach can be coded as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们注入了一个建造者，`PizzaBuilder`类，其中包括两位厨师：一个是意大利比萨制作人，另一个是亚洲比萨制作人。在这种方法中，`PizzaBuilder`类可以编码如下：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can see, it holds all the basic stuff to bake a pizza, but the properties
    are defined outside the class, through the Model using methods such as `setType()`
    and `setSize()` . With this approach, by only defining the properties and without
    thinking about the rest, we can build and get our pizza directly from the waiter
    (`PizzaDelivery` ). If we need to get an Asian pizza, we''d call the following
    code anywhere in our application:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它包含了烘烤比萨所需的所有基本材料，但属性是通过模型类外部定义的，使用诸如`setType()`和`setSize()`之类的方法。通过这种方法，只需定义属性，而不用考虑其他方面，我们就可以直接从服务员(`PizzaDelivery`)那里制作并获得我们的比萨。如果我们需要获得亚洲比萨，我们可以在应用程序的任何地方调用以下代码：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The Strategy pattern
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略模式
- en: As you might recall from [Chapter 5](text00032.html#page "Chapter 5. Design
    Patterns in Laravel") , *Design Patterns in Laravel* , the Strategy pattern is
    used to divide the logic into smaller parts according to their tasks so that these
    parts can be reused.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能从[第5章](text00032.html#page "第5章 Laravel中的设计模式")中所记得的，策略模式用于根据其任务将逻辑分成较小的部分，以便这些部分可以被重用。
- en: 'In the sample application we''ll code for this approach, we will make a package
    shipment calculation application for different package carriers. Let''s assume
    we have a class like the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为这种方法编写的示例应用程序中，我们将为不同的包裹承运人制作一个包裹运输计算应用程序。假设我们有一个如下所示的类：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see in the code, in the `Shipping` class, we have injected `ShippingPriceStrategy`
    . This Strategy pattern has features for each carrier (`shipmentPrice()` in our
    case). With this approach, for different shipping carriers, we can show different
    delivery prices and include them in our shipping process, which will be defined
    in our `Shipping` class. This way, we've used the prices set in the Strategy pattern
    both when showing the shipping price and counting a sum total for the shipping
    process.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在代码中所看到的，在`Shipping`类中，我们已经注入了`ShippingPriceStrategy`。这种策略模式对于每个承运人（在我们的例子中是`shipmentPrice()`）都有特点。通过这种方法，对于不同的运输承运人，我们可以显示不同的运输价格，并将它们包括在我们的运输过程中，这将在我们的`Shipping`类中定义。这样，我们在显示运输价格和计算运输过程的总和时都使用了策略模式中设置的价格。
- en: 'By assuming that the class is autoloaded, we can use the class that has the
    Strategy pattern in an example like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 假设类是自动加载的，我们可以在示例中使用具有策略模式的类，如下所示：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, for the same shipping process (the `Shipping` class), by injecting
    different shipping strategies for the two brands, we've managed to gain different
    shipping prices due to the difference in their strategies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，对于相同的运输过程（`Shipping`类），通过为两个品牌注入不同的运输策略，我们成功地因为策略的不同而获得了不同的运输价格。
- en: The Repository pattern
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储库模式
- en: The main reason to use a Repository pattern is to provide abstraction and flexibility.
    For example, let's say you are fetching a product from the database. By default,
    in Laravel, the usual way is to use Eloquent ORM in Controller and to pass it
    to the View. This way, your Controller knows that you are using Eloquent ORM to
    fetch data from the data source / database. For small applications, this should
    be no problem, but in bigger applications, an issue might occur. In future, for
    some reason, you might want to drop MySQL using Eloquent ORM and might need to
    use another ORM in MongoDB. When this happens, because the Controller knows that
    you are using Eloquent ORM, you'll have to dig each Controller (or any other layer)
    one by one and change them. Another limitation is that you cannot unit test this
    code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用存储库模式的主要原因是提供抽象和灵活性。例如，假设你要从数据库中获取产品。在Laravel中，默认情况下，在控制器中使用Eloquent ORM，并将其传递给视图。这样，你的控制器知道你正在使用Eloquent
    ORM从数据源/数据库中获取数据。对于小型应用程序，这应该没有问题，但在更大的应用程序中，可能会出现问题。将来，由于某种原因，你可能想要放弃使用Eloquent
    ORM的MySQL，并可能需要在MongoDB中使用另一个ORM。当发生这种情况时，因为控制器知道你正在使用Eloquent ORM，你将不得不逐个查找每个控制器（或任何其他层）并进行更改。另一个限制是你无法对这段代码进行单元测试。
- en: This would not happen if you had used repositories. If you do this, the Controller
    would connect only with the repository, and the repository would handle the other
    regarding layers. Therefore, the Controller wouldn't know how the data was fetched
    (abstraction). This way, on bigger applications, managing stuff or testing stuff
    should be much easier.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用存储库，这种情况就不会发生。如果你这样做，控制器将只与存储库连接，而存储库将处理其他相关层。因此，控制器不会知道数据是如何获取的（抽象）。这样，在更大的应用程序中，管理或测试应该更容易。
- en: 'To understand this approach, first let''s assume we have the `ProductsController`
    and `Product` models, and we want to fetch a product with a given ID and another
    method to dump all products. The Controller would look something like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这种方法，首先假设我们有`ProductsController`和`Product`模型，并且我们想要获取给定ID的产品以及另一个方法来转储所有产品。控制器会看起来像这样：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There is a flaw in this approach. If you are testing code that is written like
    this and there is an error, you can't directly detect what the source of the error
    is unless `Whoops` (the error handler library used in Laravel) is active. Repositories
    are helpful in situations like this because they extract the logic. To inject
    a repository, one way is to define and set it in a constructor method of the Controller.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法存在一个缺陷。如果你正在测试这样编写的代码，并且出现错误，除非`Whoops`（Laravel中使用的错误处理程序库）处于活动状态，否则你无法直接检测错误的来源。在这种情况下，存储库是有帮助的，因为它们提取了逻辑。注入存储库的一种方法是在控制器的构造方法中定义并设置它。
- en: 'Let''s name this repository `EloquentProductRepository` , which is part of
    the `\Acme\Repositories` namespace. Our Controller would change into something
    like the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个存储库命名为`EloquentProductRepository`，它是`\Acme\Repositories`命名空间的一部分。我们的控制器将变成以下内容：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note that instead of making `orderBy(''id'', ''desc'')->get()` , we have given
    a new method name, `getNewest()` . Now let''s create this repository. Let''s assume
    we have a file called `EloquentProductRepository.php` inside the `namespace Acme\Repositories`
    folder. Have a look at the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不再使用`orderBy('id', 'desc')->get()`，而是给出了一个新的方法名`getNewest()`。现在让我们创建这个存储库。假设我们在`Acme\Repositories`文件夹中有一个名为`EloquentProductRepository.php`的文件。看一下以下代码：
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: For each method that is used, you need to define functions once you are in the
    repositories. A major advantage of this approach is that it brings flexibility.
    Let's say you will be using mocks, or you'll switch from Eloquent ORM to another
    one in future that has totally different method names. To switch your application's
    database layer from Eloquent to MongoDB, if you've used repositories, you only
    need to change the used repository in your Controllers, nothing else. You won't
    need to dig all of your Controllers, Models, or other components.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用的每个方法，一旦在存储库中，你需要定义函数。这种方法的一个主要优势是它带来了灵活性。假设你将使用模拟，或者将来从Eloquent ORM切换到具有完全不同方法名称的其他ORM。如果你使用了存储库，只需要在控制器中更改使用的存储库，其他什么都不需要改变。你不需要深入所有的控制器、模型或其他组件。
- en: There is still a feature lacking here. Our Controller still knows that we are
    using an Eloquent-specific repository. For a better approach and abstraction,
    our Controller should not know what kind of repository we are using. To ensure
    this, we will have to code an interface for this.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里仍然存在一个缺陷。我们的控制器仍然知道我们正在使用特定于Eloquent的存储库。为了更好的方法和抽象，我们的控制器不应该知道我们正在使用什么样的存储库。为了确保这一点，我们将不得不为此编写一个接口。
- en: 'Now, let''s create an interface in the same namespace path (it is not forced;
    you may create it anywhere as long as it''s loaded) as `ProductInterface` . Our
    Controller would then look like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在相同的命名空间路径中创建一个接口（不是强制的；只要加载了就可以创建在任何地方），名为`ProductInterface`。然后我们的控制器会像这样：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Instead of the repository, the interface is injected and used. Now let''s code
    the `ProductInterface` interface:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接口被注入并使用，而不是存储库。现在让我们编写`ProductInterface`接口：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see, the interface holds the method names, which are actually the
    methods available to the implemented repository. Now let''s implement this interface
    to our repository to connect them:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，接口保存了方法名称，这些方法实际上是实现存储库的可用方法。现在让我们将这个接口实现到我们的存储库中来连接它们：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This implementation has an advantage. Let's assume that you've implemented an
    interface in the repository and it is missing the `getNewest()` custom method.
    Thanks to this implementation, the interface will directly let you know that it
    needs that specific method and it's missing.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现有一个优势。假设您在存储库中实现了一个接口，但缺少`getNewest()`自定义方法。由于这种实现，接口将直接告诉您它需要特定的方法并且缺少它。
- en: Lastly, we need to bind the interface to the repository. One of the ways to
    do this is to use Laravel's built-in `App:bind();` method. To bind the repository
    that we've just created to the interface, add this line into your `app/routes.php`
    file or any other file that's autoloaded.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将接口绑定到存储库。其中一种方法是使用Laravel内置的`App:bind();`方法。要将我们刚刚创建的存储库绑定到接口，将这行代码添加到您的`app/routes.php`文件或任何其他自动加载的文件中。
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Another way to bind these two is to create a service provider. Let''s write
    a service provider as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种将这两者绑定在一起的方法是创建一个服务提供者。让我们编写一个如下的服务提供者：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We've assumed that this provider is in the `namespace Acme\Repositories` folder.
    We've also used `Illuminate\Support\ServiceProvider` to extend our class from
    it. In the public method register, we've binded the interface to our product repository.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设这个提供者在`namespace Acme\Repositories`文件夹中。我们还使用了`Illuminate\Support\ServiceProvider`来扩展我们的类。在公共方法register中，我们将接口绑定到我们的产品存储库。
- en: In future, if you want to switch to MongoDB or any other interface that you've
    coded, all you have to do is switch `EloquentRepositoryInterface` to the new one.
    It will be updated everywhere in the application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将来，如果您想切换到MongoDB或您编码的任何其他接口，您只需将`EloquentRepositoryInterface`切换到新的接口。它将在应用程序的所有位置进行更新。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw examples of basic and advanced practices of design patterns
    and architectures that are used both in Laravel and in general development processes.
    We have learned the advantages of various design patterns while citing real-world
    examples for each one of them.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了在Laravel和一般开发过程中使用的设计模式和架构的基本和高级实践示例。我们学习了各种设计模式的优点，并为每一种设计模式引用了真实世界的例子。
- en: Design patterns are there to make your life easier. If development is done without
    following any pattern or architecture, as the application grows, both refactoring
    and implementing features would be harder after each refactoring. Also, if another
    developer joins the project, he or she first needs to understand what's where.
    This will possibly cause bloating, bad performance, inflexibility, and a variety
    of errors that are hard to fix. The application would be a time-bomb ready to
    explode. Design and architectural patterns are there to help you prevent these
    issues. Not only in your Laravel application, but in anything that you're developing,
    as the application grows, to keep everything under control, you must use a design
    pattern or a combination of them. In the end, there will be a day you'll thank
    yourself for using these patterns.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式的存在是为了让你的生活更轻松。如果开发没有遵循任何模式或架构，随着应用程序的增长，每次重构和实现功能都会变得更加困难。此外，如果另一个开发人员加入项目，他或她首先需要了解各个方面。这可能会导致膨胀、性能不佳、缺乏灵活性以及一系列难以修复的错误。应用程序将成为一个随时准备爆炸的定时炸弹。设计和架构模式的存在是为了帮助您预防这些问题。不仅在您的Laravel应用程序中，在您开发的任何东西中，随着应用程序的增长，为了保持一切都在控制之下，您必须使用设计模式或它们的组合。最终，总有一天你会感谢自己使用这些模式。
- en: 读累了记得休息一会哦~
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
