- en: Chapter 8. Building a Contacts Management System
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。构建联系人管理系统
- en: In the previous chapter, we have completed building functionality onto the framework,
    which allows for the management of users. We have performed the inclusion of Bootstrap
    to give some basic-level styling to our application. We have also implemented
    a password recovery mechanism in our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们已经完成了在框架上构建功能，允许管理用户。我们已经执行了引入Bootstrap，为我们的应用程序提供了一些基本级别的样式。我们还在我们的应用程序中实现了密码恢复机制。
- en: In this chapter, we will build a contacts CRUD (Create, Read, Update, and Delete)
    section, which will have a view page to view an individual contact. The view page
    comments can be recorded against the contact. We will also be building the comments
    system for our contact application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个联系人CRUD（创建、读取、更新和删除）部分，其中将有一个查看页面来查看单个联系人。查看页面的评论可以记录在联系人上。我们还将为我们的联系人应用程序构建评论系统。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Implement CRUD functionality in our contacts application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的联系人应用程序中实现CRUD功能
- en: Build a comments system in our contacts application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的联系人应用程序中构建评论系统
- en: Overview CMS
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述CMS
- en: 'A framework is an abstraction in software which provides multiple software
    that can be used by writing custom user code. The flow of control in a framework
    is not decided like in other libraries:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 框架是软件中的抽象，通过编写自定义用户代码，可以提供多个软件。框架中的控制流不像其他库中那样被决定：
- en: '![Overview CMS](graphics/8_01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![概述CMS](graphics/8_01.jpg)'
- en: The dashboard of the application
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的仪表板
- en: 'Here is the dashboard — the page users land on when logging in. From here,
    they can navigate to the section of the application where they will be able to
    manage content:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是仪表板-用户登录时着陆的页面。从这里，他们可以导航到应用程序的部分，从而能够管理内容：
- en: '![Overview CMS](graphics/8_02.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![概述CMS](graphics/8_02.jpg)'
- en: The contacts index page
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 联系人索引页面
- en: This is the `contacts` index, where users view all of the contacts stored in
    the contacts table.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是“联系人”索引，用户可以在其中查看联系人表中存储的所有联系人。
- en: This is the knowledge of the application built on top of the framework.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是建立在框架之上的应用程序的知识。
- en: The user can see the name of the contact as well as the email address address
    and telephone number related to each contact.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以看到联系人的姓名以及与每个联系人相关的电子邮件地址和电话号码。
- en: The user is unable to see the contact ID, but this ID is still generated, and
    forms part of the URL for the view, edit, and delete; so, when a functionality
    is triggered by clicking on one of these buttons, it already knows which record
    in the contacts table to draw its knowledge from.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用户无法看到联系人ID，但是该ID仍然会生成，并且构成查看、编辑和删除的URL的一部分；因此，当通过点击其中一个按钮触发功能时，它已经知道从联系人表中绘制其知识的记录。
- en: '![Overview CMS](graphics/8_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![概述CMS](graphics/8_03.jpg)'
- en: Viewing an individual contact
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查看单个联系人
- en: This is the contact page.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是联系人页面。
- en: 'This page displays all of the information in a single record. The record in
    this application is the data of a unique contact, which is represented by an `ID`.
    The `ID` is unique, so only the information of one single contact will ever be
    displayed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面显示单个记录中的所有信息。该应用程序中的记录是唯一联系人的数据，由“ID”表示。该“ID”是唯一的，因此只会显示一个单个联系人的信息：
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Caution**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: The word unique here is used because it is a separate `ID`. If it is stored
    as a separate `ID`, then it is considered a unique record by the application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用“唯一”一词，因为它是一个单独的“ID”。如果它被存储为一个单独的“ID”，那么它被应用程序视为一个唯一的记录。
- en: '![Overview CMS](graphics/8_04.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![概述CMS](graphics/8_04.jpg)'
- en: The add contact page
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 添加联系人页面
- en: This is the page where the form is displayed which allows a user to add a completely
    new contact.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示表单的页面，允许用户添加一个全新的联系人。
- en: This page, when loading, requires no parameters as it does not need to load
    any pre-populated data in its fields.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面在加载时不需要任何参数，因为它不需要在其字段中加载任何预填充的数据。
- en: 'When submitting, assuming there are no errors, a new contact will be added:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 提交时，假设没有错误，将添加新的联系人：
- en: '![Overview CMS](graphics/8_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![概述CMS](graphics/8_05.jpg)'
- en: The edit contact page
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑联系人页面
- en: This is the page where a form is displayed which allows a user to edit a contact.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示表单的页面，允许用户编辑联系人。
- en: The difference in this page is that the data stored in relation to a contact
    record is pre-populated in the form.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面的不同之处在于与联系人记录相关的数据在表单中是预先填充的。
- en: The reason it is possible to do this is that the edit page is loaded with the
    contact `ID` passed as a parameter. This `ID` tells the system which record it
    should be loading into this page.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以可能这样做，是因为编辑页面加载时传递了联系人“ID”作为参数。这个“ID”告诉系统应该加载哪个记录到这个页面中。
- en: CRUD, the Contact Application
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CRUD，联系人应用程序
- en: 'In this section, users will create the functionality to CRUD the contact application.
    Users will:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，用户将创建CRUD联系人应用程序的功能。用户将：
- en: Create new `contact` records
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的“联系人”记录
- en: View all the `contact` records
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看所有“联系人”记录
- en: View individual `contact` records
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看单个“联系人”记录
- en: Update the `contact` records
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新“联系人”记录
- en: Delete the `contact` records
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除“联系人”记录
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You may find this very similar to building the user management functionality
    and would be right to do so.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现这与构建用户管理功能非常相似，并且这样做是正确的。
- en: CRUD lies at the heart of all applications, and functionality is extended from
    there.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD是所有应用程序的核心，功能从那里扩展。
- en: '![CRUD, the Contact Application](graphics/8_6.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![CRUD，联系人应用程序](graphics/8_6.jpg)'
- en: This is an example of pagination
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是分页的例子
- en: '![CRUD, the Contact Application](graphics/8_7.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![CRUD，联系人应用程序](graphics/8_7.jpg)'
- en: This is an example of filtering
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个筛选的例子
- en: Inserting CRUD functionality in Our Contacts Application
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的联系人应用程序中插入CRUD功能
- en: In this section, we'll try to insert CRUD functionality in our Contacts application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将尝试在我们的联系人应用程序中插入CRUD功能。
- en: 'Have a look at the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下的屏幕截图：
- en: '![Inserting CRUD functionality in Our Contacts Application](graphics/8_8.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的联系人应用程序中插入CRUD功能](graphics/8_8.jpg)'
- en: The outcome of this section
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的结果
- en: 'Here are the steps to insert CRUD functionality in our Contacts application:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在我们的联系人应用程序中插入CRUD功能的步骤：
- en: 'In the database, we need a `contacts` table (remove one if you have it from
    earlier chapters):'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库中，我们需要一个`contacts`表（如果您在之前的章节中有一个，请删除它）：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `contacts` table stores a unique `ID` of each contact, the contact's name,
    email address, and telephone number.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`contacts`表存储每个联系人的唯一`ID`，联系人的姓名，电子邮件地址和电话号码。'
- en: 'Next, we need a `comments` table:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个`comments`表：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The comments must have the `contact_id` and `user_id` fields. These are foreign
    keys to link a comment back to a contact and a user who posted the comment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 评论必须具有`contact_id`和`user_id`字段。这些是外键，用于将评论链接回联系人和发布评论的用户。
- en: 'The comment will be added to the body field, and a `created_at` column is used
    to note when a record was created. This column is set with a timestamp with a
    default `CURRENT_TIMESTAMP`. This means the date and time will automatically be
    inserted when a new record is added:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 评论将被添加到正文字段中，并且`created_at`列用于记录记录创建的时间。此列设置为带有默认`CURRENT_TIMESTAMP`的时间戳。这意味着在添加新记录时，日期和时间将自动插入：
- en: Since we've experimented with contacts in earlier chapters, let's start by doing
    some cleanups. Delete the `app/views/contacts` folder.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们在之前的章节中已经尝试过联系人，让我们从一些清理开始。删除`app/views/contacts`文件夹。
- en: 'Open `app/views/layouts/nav.php` and add a contacts menu item that points to
    `/contacts`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/views/layouts/nav.php`并添加一个指向`/contacts`的联系人菜单项：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open `app/Models/Contacts.php`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/Models/Contacts.php`。
- en: 'Remove this code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除这段代码：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, replace it with this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用这个替换它：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we need a method to load a single contact, where the `ID` belongs to
    the contact:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个加载单个联系人的方法，其中`ID`属于联系人：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will also need `insert`, `update`, and `delete` methods:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要`insert`，`update`和`delete`方法：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The full model looks like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的模型如下：
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 8.php`文件。
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, open `app/Controllers/Contacts.php`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开`app/Controllers/Contacts.php`。
- en: 'Import the `Session` and URL helpers:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`Session`和URL助手：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Replace the following code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 替换以下代码：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 用这个：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Like our `Users` controller, this will ensure you are logged in before being
    able to access the contacts, and sets up the `$contact` model, collecting the
    contacts and loading up a `contacts` view.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的`Users`控制器一样，这将确保您在能够访问联系人之前已登录，并设置`$contact`模型，收集联系人并加载`contacts`视图。
- en: We also need `add`, `edit`, and `delete` methods. This is done in the same way
    the `Users` methods are set up.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要`add`，`edit`和`delete`方法。这与设置`Users`方法的方式相同。
- en: 'If the form has been submitted, collect the form data, perform validation,
    and providing there are no errors, insert it into the database, set a message,
    and redirect:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果表单已经提交，收集表单数据，执行验证，并且如果没有错误，将其插入数据库，设置消息，并重定向：
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 8.php`文件。
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we need to create the views for these methods. Create a `contacts` folder
    inside `app/views/admin` and create these views:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为这些方法创建视图。在`app/views/admin`文件夹内创建一个`contacts`文件夹，并创建这些视图：
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 8.php`文件。
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Activity: Executing our Application'
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动：执行我们的应用程序
- en: We have implemented the CRUD functionality into our contacts application. Let's
    try it out by executing our application.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将CRUD功能实现到我们的联系人应用程序中。让我们通过执行我们的应用程序来尝试一下。
- en: The aim of this activity is to verify that the CRUD functionality works properly
    with our application.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个活动的目的是验证CRUD功能在我们的应用程序中是否正常工作。
- en: 'At this point, we can list, add, edit, and delete contacts:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以列出，添加，编辑和删除联系人：
- en: 'To show this, open your application:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了显示这个，打开你的应用程序：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Load up `http://localhost:8000/contacts`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`http://localhost:8000/contacts`。
- en: All contacts in the database will be listed. You can add a new one by clicking
    on `Add Contact`. After submitting the form, you will be taken back to the user
    list where you can see the new contact, and a confirmation message will be displayed.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库中将列出所有联系人。您可以通过点击“添加联系人”来添加新联系人。提交表单后，您将被带回用户列表，您可以看到新联系人，并显示确认消息。
- en: The same thing will happen for editing. Deleting will confirm the action to
    then delete the contact.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑也会发生同样的事情。删除将确认动作，然后删除联系人。
- en: Comments, Joins, and Date Formatting
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评论，连接和日期格式化
- en: 'In this section, we will learn:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习：
- en: How to build a comment system
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建评论系统
- en: How to join data stored in two different tables
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何连接存储在两个不同表中的数据
- en: How to format dates
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何格式化日期
- en: The system as it is currently built can be improved. This can be done by building
    a comment feature so that a user can log activity against a contact.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当前构建的系统可以进行改进。可以通过构建评论功能来实现，以便用户可以记录对联系人的活动。
- en: They may want to note that they called the contact on Monday and was asked to
    call them again on Friday. Users may be working together to call a list of contacts,
    and it would be useful to know who made that comment and when.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 他们可能想要注意，他们在星期一打电话给联系人，并被要求在星期五再打电话。用户可能正在一起工作来打电话给一系列联系人，了解谁何时做出了评论将是有用的。
- en: Another way the system can be improved is ensuring that the dates and times
    are displayed in an easy-to-read format. The database table stores such information
    in a way that is not so human-friendly.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 系统可以改进的另一种方式是确保日期和时间以易于阅读的格式显示。数据库表以一种不太人性化的方式存储这些信息。
- en: When creating comments, it is essential to create `joins`. There is almost an
    unlimited amount of comments that a user can post against a contact.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建评论时，创建`joins`是至关重要的。用户可以对联系人发布几乎无限量的评论。
- en: It would be impossible to cater for this when building the contacts field, and
    the comments would have to be limited. There would need to be a field in the contacts
    table to cater for every possible comment, who the comment was made by, and when.
    This would be extremely difficult to manage and tedious to build for the developer.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建联系人字段时，要满足这一点是不可能的，评论将不得不受限制。联系人表中需要有一个字段来满足每条可能的评论，评论是由谁发表的，以及何时发表的。这将极其难以管理，对于开发人员来说构建起来也会非常繁琐。
- en: Instead of having a finite amount of comments, the developer should instead
    create a separate table with the purpose of storing comments.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员不应该限制评论的数量，而应该创建一个单独的表来存储评论的目的。
- en: But how will the developer link the comments to the contact?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 但是开发人员如何将评论链接到联系人呢？
- en: This is where `joins` become useful. Each contact has an `ID`. Each comment
    has a comment `ID`. Each comment also has additional information, such as the
    text content of the comment, who made the comment, and the time and date the comment
    was made.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`joins`变得有用的地方。每个联系人都有一个`ID`。每条评论都有一个评论`ID`。每条评论还有其他信息，比如评论的文本内容，谁发表的评论，以及评论的时间和日期。
- en: When the comment is made by the system, it needs to be able to recognize that
    it is made against a specific contact and have that contact stored in that record
    as the contact ID.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统发表评论时，需要能够识别它是针对特定联系人发表的，并将该联系人存储在该记录中作为联系人ID。
- en: For example, if the contact David has an ID of 1 and has three comments, then
    each of those comments will be stored in the table that has a contact ID of 1\.
    They will all have unique IDs of their own, namely, 1, 2, and 3.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果联系人David的ID为1，并且有三条评论，那么每条评论都将存储在具有ID为1的联系人的表中。它们都有自己的唯一ID，分别为1、2和3。
- en: The same is applied to users so it is possible to know which user made the comment.
    This would be the user ID. The `join` is required because the comment only has
    limited knowledge of the user that made it and the contact it belongs to. It merely
    knows that the contact ID of the contact it is related to and the user ID of the
    user that created it.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的方法也适用于用户，以便知道是哪个用户发表了评论。这将是用户ID。`join`是必需的，因为评论只对创建它的用户和它所属的联系人有限的了解。它只知道与其相关的联系人的联系人ID和创建它的用户的用户ID。
- en: This is fine for a computer, but a human user needs more information than this.
    They will want to see the name of that user, not just their ID on the system.
    Joining together two or three tables with all the relevant information is required
    to achieve this. This is an example of how the database feeds the system. A few
    simple PHP functions can easily reformat this data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于计算机来说是可以的，但是人类用户需要比这更多的信息。他们希望看到该用户的姓名，而不仅仅是系统上的ID。需要将两个或三个表中的所有相关信息连接在一起才能实现这一点。这是数据库如何向系统提供数据的一个例子。一些简单的PHP函数可以轻松地重新格式化这些数据。
- en: 'Database that is fed to the system:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给系统的数据库：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'PHP can reformat this to:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: PHP可以重新格式化为：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Creating a View Page and Building the Comments System
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个视图页面并构建评论系统
- en: The purpose of this section is to show the contacts of the CRUD in operation.
    The following screenshot shows you what we're planning to accomplish by the end
    of this section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的目的是展示CRUD操作中的联系人。以下截图展示了我们在本节结束时计划要完成的内容。
- en: '![Creating a View Page and Building the Comments System](graphics/8_9.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![创建视图页面和构建评论系统](graphics/8_9.jpg)'
- en: The comments system
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 评论系统
- en: 'To make our contacts section more useful, let''s add a `view` page where we
    can see an individual contact. The `view` page is also a perfect place to build
    a comments system to add comments against the contact:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的联系人部分更有用，让我们添加一个`view`页面，可以在该页面中查看单个联系人。`view`页面也是构建评论系统以对联系人进行评论的理想场所：
- en: Open your `Contacts` controller and create a new method called `view($id)`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的`Contacts`控制器并创建一个名为`view($id)`的新方法。
- en: Check that the `$id` is numeric and then load the contact from `get_contact($id)`.
    If `$contact` is empty, redirect to a 404 page.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`$id`是否为数字，然后从`get_contact($id)`加载联系人。如果`$contact`为空，重定向到404页面。
- en: 'Set the page title and load the view:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置页面标题并加载视图：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In `app/views/admin/contacts`, create `view.php`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views/admin/contacts`中创建`view.php`。
- en: 'Load the layout files, then create a table to display the content, ensuring
    the variables are wrapped inside `htmlentities()`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载布局文件，然后创建一个表格来显示内容，确保变量被包裹在`htmlentities()`中：
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参考代码文件夹中的`Lesson 8.php`文件。
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, to start working on the comments, first we need a form to enter a comment
    and submit it. After the table but before the footer layout, create a heading
    called `Comments` and create a form with a single text area. Give the text area
    a name of body:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要开始处理评论，首先我们需要一个表单来输入评论并提交它。在表格之后但在页脚布局之前，创建一个名为`Comments`的标题，并创建一个带有单个文本区域的表单。给文本区域一个名为body的名称：
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When this form is submitted, the `view` method needs to process the request.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当提交这个表单时，`view`方法需要处理请求。
- en: Before we can go any further, we need a Comment model to interact with the `comments`
    table in the database.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要一个评论模型来与数据库中的`comments`表进行交互。
- en: 'In `app/Models`, create a new model called `Comment.php`. For now, it will
    have one method, called `insert($data)`, which will create a new record in the
    comments table when called:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/Models`中，创建一个名为`Comment.php`的新模型。目前，它将有一个名为`insert($data)`的方法，当调用时将在评论表中创建一条新记录：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, go to your `Contacts` controller.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到你的`Contacts`控制器。
- en: 'Import the new `Comment` model at the top of the file:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部导入新的`Comment`模型：
- en: '[PRE20]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the `view($id)` method, create a new instance of the Comment model.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`view($id)`方法中，创建一个Comment模型的新实例。
- en: As this comment model will only be used in this method, we don't need to assign
    it to a class property. A local variable is fine, in this case, $comment.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个评论模型只会在这个方法中使用，我们不需要将它分配给一个类属性。在这种情况下，一个局部变量就可以了，比如$comment。
- en: Next, check for the form submission and collect the `$body` post data.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查表单提交并收集“$body”提交的数据。
- en: If the comment is not empty, then create a `$data` array containing the body
    but also the `contact_id`, which is the `$id`, and the `user_id`, which is the
    ID of the logged-in in user which is stored in a session.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果评论不为空，则创建一个包含正文但也包含“contact_id”的`$data`数组，这是`$id`，以及“user_id”，这是存储在会话中的已登录用户的ID。
- en: 'Pass the `$data` to the `insert($data)` method to create the comment, and then
    set a message and redirect back to the view page of the contact:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`$data`传递给`insert($data)`方法以创建评论，然后设置消息并重定向回联系人的查看页面：
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Activity: Loading the Application'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动：加载应用程序
- en: We have built the page and implemented the comments system. We will now load
    the application. After loading the application, you will notice that there is
    an edit and delete button, but there is no way to see that contact. We will fix
    this.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经构建了页面并实现了评论系统。我们现在将加载应用程序。加载应用程序后，您会注意到有一个编辑和删除按钮，但没有办法查看联系人。我们将解决这个问题。
- en: 'We''ll look at enabling visibility of contacts in our application by following
    these steps:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤来启用应用程序中联系人的可见性：
- en: 'Load up the application:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载应用程序：
- en: '[PRE22]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Have you noticed that there is an edit and delete button for each contact but
    no way to see the contact? Let's fix that.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您是否注意到每个联系人都有编辑和删除按钮，但没有办法查看联系人？让我们解决这个问题。
- en: Open `app/views/admin/contacts/index.php`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/views/admin/contacts/index.php`。
- en: 'Add a new link above the edit link. In this case, I''ve given the button a
    different class, `btn-info`, to make the button blue so it''s different to the
    edit:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑链接上方添加一个新链接。在这种情况下，我给按钮一个不同的类“btn-info”，使按钮变蓝，这样它就不同于编辑按钮：
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save and reload the page in the browser and you will see the view button. Click
    the view button and you will see a view page showing the contact and a form to
    enter a comment.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中保存并重新加载页面，您将看到查看按钮。单击查看按钮，您将看到一个显示联系人和输入评论的表单的查看页面。
- en: Enter a comment and press `Add Comment`. The page will reload and you will see
    a success message. The comment has been inserted into the database, but you won't
    see it yet.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入评论并按“添加评论”。页面将重新加载，您将看到一个成功的消息。评论已插入到数据库中，但您还看不到它。
- en: Open your Comment model.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的评论模型。
- en: Create a new method called `get_comments($id)`. The `$id` passed will be the
    ID of the contact.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`get_comments($id)`的新方法。传递的`$id`将是联系人的ID。
- en: For this query, we need to do a `join`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个查询，我们需要做一个“join”。
- en: Note
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A join is where you join two or more database tables together to get information
    out of them.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 连接是将两个或多个数据库表连接在一起以从中获取信息的地方。
- en: We need a join to get the username of the user who added the comment. In the
    comments table, we store a `user_id`. This can be used to for getting anything
    we need from the users table.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个连接来获取添加评论的用户的用户名。在评论表中，我们存储了“user_id”。这可以用于从用户表中获取我们需要的任何内容。
- en: The syntax for a `join` is to select the columns required, prefixed with the
    table name and followed by the comment.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: “join”的语法是选择所需的列，以表名为前缀，后跟评论。
- en: So the user's username says go to the users table and fetch the `username` column.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，用户的用户名说去用户表并获取“username”列。
- en: In the `from` section, specify the table to load, and in the where section,
    specify the criteria.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“from”部分，指定要加载的表，在where部分，指定条件。
- en: 'We want to load all comments where the comments `user_id` column matches the
    user''s ID column, and where the `contact_id` matches the provided `$id`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望加载所有评论，其中评论的“user_id”列与用户的ID列匹配，并且“contact_id”与提供的“$id”匹配：
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save this model and go to the `view` method of the `Contacts` controller.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存此模型并转到“Contacts”控制器的“view”方法。
- en: 'After the form has been processed, make a call to the `get_comments($id)` method
    we just created:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表单处理完毕后，调用我们刚刚创建的`get_comments($id)`方法：
- en: '[PRE25]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This loads the comments; the next step is to add comments to the compact function:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将加载评论；下一步是将评论添加到紧凑功能中：
- en: '[PRE26]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The full method looks like this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的方法如下：
- en: Note
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full code snippet, refer to `Lesson 8.php` file in the code files folder.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 有关完整的代码片段，请参阅代码文件夹中的“Lesson 8.php”文件。
- en: '[PRE27]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The final step is to display the comments. Open `app/views/admin/contacts/view.php`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是显示评论。打开`app/views/admin/contacts/view.php`。
- en: 'After the form, add:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单之后添加：
- en: '[PRE28]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This loops through the comments. Each loop creates a new `div` with a class
    for a bit of styling. Inside the div, it prints out the comment. On the next line,
    the username is displayed. The username is only available due to the join we set
    up in the Comment model.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这将循环遍历评论。每次循环都会创建一个新的带有一些样式的`div`。在div内部，它打印出评论。在下一行，用户名被显示。由于我们在评论模型中设置的连接，用户名仅可用。
- en: When the comment was added, the `created_at` field was populated. The default
    format is YYYY-MM-DD H:M:S, which is not very readable, so we can use date() to
    specify the date format, and as a second param use `strtotime()` and pass in the
    `created_at` field.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当评论被添加时，“created_at”字段被填充。默认格式为YYYY-MM-DD H:M:S，这不太可读，因此我们可以使用date()指定日期格式，并作为第二个参数使用`strtotime()`并传入`created_at`字段。
- en: Note
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`strtotime` converts the time into seconds. The end result is a user-friendly
    date.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`strtotime`将时间转换为秒。最终结果是一个用户友好的日期。'
- en: Now, go back to a contact in your browser and add a comment. You will then see
    the new comment and any previous comments displayed on the page.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到浏览器中的联系人并添加评论。然后，您将在页面上看到新评论和任何先前的评论。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered how to build CRUD sections that interact with
    forms, pass data from page to page and format dates. We have also added a comments
    system in our contacts application which can enable the users to add comments
    and record them.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了如何构建与表单交互的CRUD部分，如何在页面之间传递数据和格式化日期。我们还在我们的联系人应用程序中添加了一个评论系统，可以使用户添加评论并记录它们。
- en: We covered all the concepts which are required for developing a good and secure
    PHP application.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们涵盖了开发良好且安全的PHP应用程序所需的所有概念。
- en: This concludes the book. In this book, we've learned all the basics of PHP like
    variables, arrays, loops, and so on. We have also learnt how to develop a PHP
    framework in an OOP environment while building the contacts application. We covered
    how the structure of a framework looks and how to properly format the error reporting
    technique using Whoops. Along with the framework development, we covered the authentication
    and user management in a framework developing environment and, finally, we covered
    how to CRUD our contacts application.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本书的结尾。在本书中，我们学习了PHP的所有基础知识，如变量、数组、循环等。我们还学习了如何在面向对象编程环境中开发PHP框架，同时构建联系人应用程序。我们介绍了框架的结构以及如何使用Whoops正确格式化错误报告技术。除了框架开发，我们还介绍了在框架开发环境中的身份验证和用户管理，最后，我们介绍了如何对我们的联系人应用程序进行CRUD操作。
