- en: Load and Resolve with Composer, an Evolutionary
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Composer进行加载和解析，一个进化
- en: Composer is not only a package manager, but also a dependency manager in PHP.
    In PHP, if you want to reuse an open source component, the standard way to do
    it is to use an open source package through Composer, as Composer has become a
    standard for making packages, installing packages, and auto-loading. Here, we
    have discussed a few new terms, such as package manager, dependency manager, and
    auto-loading. In this chapter, we will go into detail of what they are and what
    Composer provides for them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Composer不仅是一个包管理器，也是PHP中的依赖管理器。在PHP中，如果你想要重用一个开源组件，标准的做法是通过Composer使用开源包，因为Composer已经成为了制作包、安装包和自动加载的标准。在这里，我们讨论了一些新术语，比如包管理器、依赖管理器和自动加载。在本章中，我们将详细讨论它们是什么，以及Composer为它们提供了什么。
- en: The preceding paragraph explains what Composer mainly does, but Composer is
    more than that.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的段落解释了Composer主要的功能，但Composer不仅仅是这样。
- en: 'In this chapter, we will look at the following things:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到以下内容：
- en: Introduction to Composer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer简介
- en: Installation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装
- en: Usage of Composer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Composer
- en: Composer as a package and dependency manager
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer作为包和依赖管理器
- en: Installing packages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装包
- en: How Composer works
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer的工作原理
- en: Composer commands
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer命令
- en: The `composer.json` file
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`composer.json`文件'
- en: The `composer.lock` file
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`composer.lock`文件'
- en: Composer as an autoloader
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Composer作为自动加载程序
- en: Introduction to Composer
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer简介
- en: The PHP community is a sort of divided one and there are lot of different frameworks
    and libraries. Since there are different frameworks available, a plugin or package
    written for one framework cannot be used in another. So, there should be a standard
    way to write and install packages. Here comes Composer. Composer is a standard
    way to write, distribute, and install packages. Composer is inspired by **npm**
    (**Node Package Manager**) from the `node.js` ecosystem.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: PHP社区有点分裂，有很多不同的框架和库。由于有不同的框架可用，为一个框架编写的插件或包不能在另一个框架中使用。因此，应该有一种标准的方法来编写和安装包。这就是Composer的作用。Composer是编写、分发和安装包的标准方法。Composer受到了`node.js`生态系统中的**npm**（**Node
    Package Manager**）的启发。
- en: In fact, most developers use Composer to install the different packages they
    use. This is also because using Composer to install a package is convenient because
    packages installed through Composer can also be easily auto-loaded through Composer.
    We will look into auto-loading later in this chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，大多数开发人员使用Composer来安装他们使用的不同包。这也是因为使用Composer安装包很方便，因为通过Composer安装的包也可以很容易地通过Composer进行自动加载。我们将在本章后面讨论自动加载。
- en: As stated before, Composer is not just a package manager, but also a dependency
    manager. This means if a package needs something, Composer will install those
    dependencies for it and it will then auto-load accordingly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Composer不仅是一个包管理器，也是一个依赖管理器。这意味着如果一个包需要某些东西，Composer将为其安装这些依赖项，然后相应地进行自动加载。
- en: Installation
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: Composer requires PHP 5.3.2+ to run. Here is how you can install Composer on
    different platforms.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Composer需要PHP 5.3.2+才能运行。以下是你可以在不同平台上安装Composer的方法。
- en: Installation on Windows
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上安装
- en: 'On Windows, installing Composer is very easy, so we will not go into much detail.
    You just need to download and execute the Composer setup from [getcomposer.org](http://getcomposer.org).
    Here is the link: [https://getcomposer.org/Composer-Setup.exe](https://getcomposer.org/Composer-Setup.exe).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，安装Composer非常容易，所以我们不会详细介绍。你只需要从[getcomposer.org](http://getcomposer.org)下载并执行Composer安装程序。这是链接：[https://getcomposer.org/Composer-Setup.exe](https://getcomposer.org/Composer-Setup.exe)。
- en: Installation on Linux/Unix/OS X
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux/Unix/OS X上安装
- en: 'There are two ways to install Composer, they are locally and globally. You
    can simply install Composer through the following commands:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Composer有两种方式，分别是本地安装和全局安装。你可以通过以下命令简单地安装Composer：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding four commands perform the following tasks respectively:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的四个命令分别执行以下任务：
- en: Downloads the Composer setup PHP file
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Composer安装PHP文件
- en: Verifies the Installer by checking SHA-384
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查SHA-384验证安装程序
- en: Runs the Composer setup to install Composer
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Composer安装程序安装Composer
- en: Removes the downloaded Composer setup file
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除已下载的Composer安装文件
- en: If you are curious about what this Composer setup does, then leave the fourth
    command. As you can see, the setup file is a PHP file named `composer-setup.php`;
    you can simply open this file and read the code. What it mainly does is check
    several PHP extensions and settings and creates the `composer.phar` file. This
    `composer.phar` will be responsible for performing Composer tasks. We are going
    to look at what Composer does and what actions or tasks it performs in this chapter
    shortly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个Composer安装做了什么很好奇，那就留下第四个命令。你可以看到，安装文件是一个名为`composer-setup.php`的PHP文件；你可以简单地打开这个文件并阅读代码。它主要是检查几个PHP扩展和设置，并创建`composer.phar`文件。这个`composer.phar`将负责执行Composer的任务。我们将很快在本章中看一下Composer的功能以及它执行的操作或任务。
- en: Using the aforementioned commands, we have installed Composer locally. By default,
    it will install Composer in the current directory by installing Composer, which
    means by placement of the `composer.phar` file, because this `composer.phar` file
    performs Composer functionality.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述命令，我们已经在本地安装了Composer。默认情况下，它会在当前目录安装Composer，这意味着通过安装Composer来放置`composer.phar`文件，因为这个`composer.phar`文件执行Composer功能。
- en: 'If you wish to install Composer (placing `composer.phar`) in a specific directory
    or change the `composer.phar` name to something else, you can simply run the install
    with different parameters, such as:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在特定目录中安装Composer（放置`composer.phar`）或将`composer.phar`名称更改为其他名称，你可以简单地使用不同的参数运行安装，比如：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are many other parameters, which you can see at [https://getcomposer.org/download/](https://getcomposer.org/download/)
    under "Installer Options".
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他参数，你可以在[https://getcomposer.org/download/](https://getcomposer.org/download/)的“安装程序选项”下看到。
- en: 'If you have installed Composer locally and the filename is `composer.phar`,
    you can simply run it through PHP by saying:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在本地安装了Composer，并且文件名为`composer.phar`，您可以通过以下方式简单地通过PHP运行它：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will run Composer. If `composer.phar` is not in the same directory as before
    `composer.phar`, you need to append the path of the directory where the `composer.phar`
    file is. This is because we have installed Composer locally. So, let's see how
    we can install it globally.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行Composer。如果`composer.phar`不在之前`composer.phar`的相同目录中，则需要附加`composer.phar`文件所在目录的路径。这是因为我们已经在本地安装了Composer。因此，让我们看看如何全局安装它。
- en: Global Installation
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局安装
- en: To install and access Composer globally from anywhere, we need to place it in
    a directory that is added in the system's `PATH` directory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要在任何地方安装和访问Composer，我们需要将其放在系统的`PATH`目录中添加的目录中。
- en: 'To do that, we can run the following command to move `composer.phar` to a place
    from where we can access it globally:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们可以运行以下命令将`composer.phar`移动到一个我们可以全局访问的位置：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now you will simply be able to access Composer by running command, `composer`
    and it will work; nothing else will be required. So, if you say:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您只需通过运行命令`composer`就可以访问Composer，并且它将正常工作；不需要其他任何东西。所以，如果您说：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It will return something like the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它将返回类似以下的内容：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can run this command from anywhere, since we have Composer installed globally.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从任何地方运行此命令，因为我们已经全局安装了Composer。
- en: Usage of Composer
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer的用法
- en: Composer is a dependency manager and has other different uses. Composer is used
    to install packages while resolving dependencies. Composer is also very good at
    auto-loading. There are more uses of Composer as well. Here, we will discuss the
    different uses of Composer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是一个依赖管理器，还有其他不同的用途。Composer用于在解决依赖关系的同时安装软件包。Composer在自动加载方面也非常出色。Composer还有更多的用途。在这里，我们将讨论Composer的不同用途。
- en: Composer as a dependency manager
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer作为依赖管理器
- en: Composer is a dependency manager. Now you can package your code in a way that
    you don't need to ship third-party dependencies with it. You just need to tell
    its dependencies. In fact, your package dependencies can have more dependencies,
    and those dependencies can also have more dependencies. So, resolving all those
    dependencies while making a package or bundle could be really tiresome. But it
    is not, thanks to Composer.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是一个依赖管理器。现在，您可以以一种不需要将第三方依赖项与其一起提供的方式打包您的代码。您只需要告诉它的依赖关系。实际上，您的软件包依赖关系可能有更多的依赖关系，而这些依赖关系也可能有更多的依赖关系。因此，在制作软件包或捆绑包时解决所有这些依赖关系可能会非常繁琐。但是，由于Composer的存在，这并不是问题。
- en: Since Composer is also a dependency manager, dependencies are not a problem
    anymore. We can just specify dependencies in a JSON file, and those dependencies
    are resolved by Composer. We will look into that JSON file shortly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Composer也是一个依赖管理器，因此依赖关系不再是问题。我们只需在一个JSON文件中指定依赖关系，Composer就会解决这些依赖关系。我们将很快看一下该JSON文件。
- en: Installing packages
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装软件包
- en: If we have dependencies (other packages on which our work depends or is going
    to depend) in a JSON file named `composer.json`, then we can install them through
    Composer.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在名为`composer.json`的JSON文件中有依赖关系（我们的工作依赖或将要依赖的其他软件包），那么我们可以通过Composer安装它们。
- en: There are a lot of good packages in PHP and most of the stuff related to our
    daily work is available, so who would want to reinvent the wheel and create everything
    again? So, to start a project, we can simply install different packages through
    Composer and reuse a lot of code that is already there.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: PHP中有很多好的软件包，我们日常工作相关的大部分内容都是可用的，那么谁会想要重新发明轮子并重新创建所有东西呢？因此，要启动一个项目，我们可以通过Composer简单地安装不同的软件包，并重用已经存在的大量代码。
- en: Now, the question is, what is the source from where Composer can be installed?
    Can it be anything anywhere on the internet? Or are there some fixed places from
    where Composer installs packages? Actually, there can be multiple sources. The
    one default place from where Composer installs a package is Packagist [https://packagist.org/](https://packagist.org/).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，问题是，Composer可以从哪里安装？它可以是互联网上的任何地方吗？还是有一些固定的地方可以安装Composer软件包？实际上，可以有多个来源。Composer安装软件包的一个默认位置是Packagist
    [https://packagist.org/](https://packagist.org/)。
- en: 'So, we are going to install a package from Packagist. Let''s say we want to
    install a PHP unit testing framework package from Packagist. It is available here:
    [https://packagist.org/packages/phpunit/phpunit](https://packagist.org/packages/phpunit/phpunit).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将从Packagist安装一个软件包。假设我们想要从Packagist安装一个PHP单元测试框架软件包。它在这里可用：[https://packagist.org/packages/phpunit/phpunit](https://packagist.org/packages/phpunit/phpunit)。
- en: 'So, let''s install it with the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们使用以下命令进行安装：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You will see that this package installation will also result in the installation
    of a lot of dependencies as well. Here, `require` is a Composer command, while
    `phpunit/phpunit` is the name with which this package is registered on Packagist.
    Note, we just discussed about a `composer.json` file but we didn't need the `composer.json`
    file, to install this PHP unit package. Actually, the `composer.json` file is
    useful if we already have some dependencies. If we just need to install some packages
    right now, then we can simply use the `composer require` command. And this `composer
    require` will also create a `composer.json` file and update it with the `phpunit/phpunit`
    package.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到此软件包安装还将导致许多依赖项的安装。在这里，`require`是Composer命令，而`phpunit/phpunit`是此软件包在Packagist上注册的名称。请注意，我们刚刚讨论了`composer.json`文件，但我们不需要`composer.json`文件来安装此PHP单元软件包。实际上，如果我们已经有一些依赖关系，`composer.json`文件是有用的。如果我们现在只需要安装一些软件包，那么我们可以简单地使用`composer
    require`命令。而且这个`composer require`还会创建一个`composer.json`文件，并将其更新为`phpunit/phpunit`软件包。
- en: 'Here is the content of the `composer.json` file that will be created after
    running the preceding command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在运行上述命令后将创建的`composer.json`文件的内容：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see in the require object, it has the key of package name and then,
    after the colon, there is `"^6.2"`, which represents the package version. Here,
    the package version is given in a regular expression stating that the package
    version is starting from 6.2, but this isn't the actual version that is installed.
    After packages and their dependencies are installed, their exact version is written
    in the `composer.lock` file. This file, `composer.lock` , has significant importance,
    so we will look into it in detail shortly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 require 对象中看到，它具有包名称的键，然后在冒号后面是 `"^6.2"`，表示包版本。在这里，包版本以正则表达式给出，表示包版本从6.2开始，但这并不是实际安装的版本。安装包及其依赖项后，它们的确切版本将写入
    `composer.lock` 文件中。这个文件 `composer.lock` 具有重要意义，所以我们很快将详细了解它。
- en: After running this command, you will be able to see another directory in the
    directory where you ran the Composer require command. This other directory is
    the `vendor` directory. In the vendor directory, all packages are installed. If
    you look into it, not only is the PHP unit present in the vendor directory, but
    also all of its dependencies and dependencies of dependencies are installed in
    the vendor directory.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，您将能够在运行 Composer require 命令的目录中看到另一个目录。这个目录是 `vendor` 目录。在 vendor 目录中，安装了所有的包。如果您查看它，您会发现不仅
    PHP 单元存在于 vendor 目录中，而且所有的依赖项和依赖项的依赖项都安装在 vendor 目录中。
- en: Installing using composer.json
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 composer.json 进行安装
- en: 'Instead of using `composer require`, we can also install a package through
    another command if we have a `composer.json` file. To do so, go into another directory.
    We can simply make a `composer.json` file having a list of packages with the following
    content:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 `composer require`，如果有一个 `composer.json` 文件，我们还可以通过另一个命令安装包。为此，进入另一个目录。我们可以简单地创建一个包含以下内容的
    `composer.json` 文件：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So, once you have a file named `composer.json` and have this content in it,
    you can simply install these two packages with their dependencies based on this
    version information by running this command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一旦您有一个名为 `composer.json` 的文件，并且其中包含这些内容，您可以通过运行此命令根据这些版本信息安装这两个包及其依赖项：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will do the same thing that Composer require did. However, if both `composer.json`
    and `composer.lock` files are present, it will read information from the `composer.lock`
    file and will install that exact version and ignore `composer.json`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行与 Composer require 相同的操作。但是，如果同时存在 `composer.json` 和 `composer.lock` 文件，它将从
    `composer.lock` 文件中读取信息，并安装该确切版本，忽略 `composer.json`。
- en: 'If you want to ignore the `composer.lock` file and install based on information
    in the `composer.json` file, you can either delete the `composer.lock` file and
    use the `composer install` or you can run:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要忽略 `composer.lock` 文件并根据 `composer.json` 文件中的信息进行安装，可以删除 `composer.lock`
    文件并使用 `composer install`，或者运行：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note, the `composer update` command will also update the `composer.lock` file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`composer update` 命令也会更新 `composer.lock` 文件。
- en: If a package or library isn't available on Packagist, you can still install
    that package through other sources, and to do so you will need to enter different
    information in the `composer.json` file. You can read detailed information about
    other sources here [https://getcomposer.org/doc/05-repositories.md](https://getcomposer.org/doc/05-repositories.md).
    However, note that Packagist is the recommended source because of its convenience.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个包或库在 Packagist 上不可用，您仍然可以通过其他来源安装该包，为此，您需要在 `composer.json` 文件中输入不同的信息。您可以在这里阅读有关其他来源的详细信息
    [https://getcomposer.org/doc/05-repositories.md](https://getcomposer.org/doc/05-repositories.md)。但是，请注意，由于其便利性，Packagist
    是推荐的来源。
- en: The composer.json in detail
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 详细了解 composer.json
- en: 'The `composer.json` file that we have seen is minimal. To see what a typical
    `composer.json` file looks like, here is the `composer.json` file of my favorite
    PHP MVC framework Laravel:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的 `composer.json` 文件是最小的。要了解典型的 `composer.json` 文件是什么样的，这里是我最喜欢的 PHP MVC
    框架 Laravel 的 `composer.json` 文件：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We will not go into obvious parts of this file, such as name, description, and
    so on. We will look into complex and more important attributes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入研究此文件的明显部分，比如名称、描述等。我们将研究复杂和更重要的属性。
- en: The require object
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: require 对象
- en: You have already seen that `require` has dependencies and version information
    which are installed by the `composer install` command.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经看到 `require` 具有依赖项和版本信息，这些信息由 `composer install` 命令安装。
- en: The require-dev object
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: require-dev 对象
- en: In `require-dev` , only those packages which are required during the development
    phase are listed. We used an example, of `phpunit/phpunit` in the Composer install
    example but actually, packages like `phpunit` and `phpspec` are only required
    in development and not in production. Also, if there are any packages required
    related to debugging, they can also be included in the `require-dev` object. And
    the `composer install` command will install all the packages which are in `require-dev`,
    as well as under `require` object.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `require-dev` 中，只列出了在开发阶段需要的那些包。在 Composer install 示例中，我们使用了 `phpunit/phpunit`
    的示例，但实际上，像 `phpunit` 和 `phpspec` 这样的包只在开发阶段需要，而不是在生产中需要。此外，如果有任何与调试相关的包需要，也可以包含在
    `require-dev` 对象中。`composer install` 命令将安装所有在 `require-dev` 中以及 `require` 对象下的包。
- en: 'However, if we want to only install packages which are required in production,
    they can be installed with:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们只想安装生产环境中需要的包，可以使用以下命令进行安装：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the aforementioned example, `composer.json`, `laravel/tinker` and `laravel/laravel`
    are in the `require` object, but `phpunit`, `mockery` , and `faker` are the packages
    mentioned in the `require-dev` object, so those will not be installed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，`composer.json` 中的 `laravel/tinker` 和 `laravel/laravel` 在 `require` 对象中，但
    `phpunit`、`mockery` 和 `faker` 是在 `require-dev` 对象中提到的包，因此它们不会被安装。
- en: The autoload and autoload-dev
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: autoload 和 autoload-dev
- en: This autoload option is there to autoload either a namespace or group of classes
    under one directory or simply a class. It is a PHP autoloader alternative that
    Composer provides. This is what tells Composer which directory to look into while
    auto-loading a class.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个autoload选项是用来自动加载一个命名空间或一组类到一个目录下，或者简单地加载一个类。这是Composer提供的PHP自动加载程序的替代方案。这告诉Composer在自动加载类时要查找哪个目录。
- en: The auto-load property has two more properties, that is `classmap` and `psr-4`.
    PSR4 is a standard that describes specifications for auto-loading classes from
    file paths. You can read more about it at [http://www.php-fig.org/psr/psr-4/.](http://www.php-fig.org/psr/psr-4/)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 自动加载属性还有两个属性，即`classmap`和`psr-4`。PSR-4是一种描述从文件路径自动加载类的规范。您可以在[http://www.php-fig.org/psr/psr-4/.](http://www.php-fig.org/psr/psr-4/)上阅读更多信息。
- en: Here, PSR-4 is specifying a namespace and from where this namespace should be
    loaded. Here, in preceding the example, the `App` namespace should be getting
    content from the `app` directory.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，PSR-4指定了一个命名空间，以及这个命名空间应该从哪里加载。在前面的示例中，`App`命名空间应该从`app`目录获取内容。
- en: Another property is `classmap`. This is used to auto-load libraries which don't
    support PSR-4 or PSR-0\. PSR-0 is another standard for auto-loading, however,
    PSR-4 is newer and is the recommended one. PSR-0 is already deprecated.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个属性是`classmap`。这用于自动加载不支持PSR-4或PSR-0的库。PSR-0是另一种自动加载的标准，但是PSR-4是更新的，是推荐的。PSR-0已经被弃用。
- en: Just as `require-dev` is similar to `require`, `autoload-dev` is similar to
    `autoload`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`require-dev`类似于`require`一样，`autoload-dev`类似于`autoload`。
- en: The scripts
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本
- en: 'Scripts basically have scripts in arrays against different events. All those
    properties of script objects are sort of events, and scripts specified in values
    executed at specific events. Different properties represent different events,
    such as `post-install-cmd` means after installing packages it will execute scripts
    in an array against the `post-install-cmd` property. It''s the same with other
    events. On this URL in the Composer documentation, you can find details of all
    these events: [https://getcomposer.org/doc/articles/scripts.md#command-events](https://getcomposer.org/doc/articles/scripts.md#command-events).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本基本上在不同事件的数组中具有脚本。脚本对象的所有这些属性都是事件，以及在特定事件上执行的值指定的脚本。不同的属性代表不同的事件，例如`post-install-cmd`表示在安装包后，它将执行`post-install-cmd`属性下的数组中的脚本。其他事件也是一样。在Composer文档的此URL中，您可以找到所有这些事件的详细信息：[https://getcomposer.org/doc/articles/scripts.md#command-events](https://getcomposer.org/doc/articles/scripts.md#command-events)。
- en: The composer.lock
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: composer.lock
- en: The main purpose of `composer.lock` is to lock dependencies.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`composer.lock`的主要目的是锁定依赖项。'
- en: As discussed, the `composer.lock` file is very important. This is because when
    a specific exact version is not specified in `composer.json` or a package is installed
    through `composer require` without version information, Composer installs the
    package and, after installing, adds information regarding that package installation
    including the exact version (that is installed).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如讨论的那样，`composer.lock`文件非常重要。这是因为当`composer.json`中没有指定特定的确切版本，或者通过`composer
    require`安装包时没有版本信息时，Composer会安装该包，并在安装后添加关于该包安装的信息，包括确切的版本。
- en: If, package is already in `composer.lock`, then most probably you have the package
    listed in `composer.json` as well. In that case, you normally install the package
    through `composer install` and Composer will read the package details and version
    information from `composer.lock` and install exactly that version because that
    is what Composer does, locking dependencies with the exact version.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果包已经在`composer.lock`中，那么很可能您也在`composer.json`中列出了该包。在这种情况下，您通常通过`composer install`安装该包，Composer将从`composer.lock`中读取包详细信息和版本信息，并安装确切的版本，因为这就是Composer锁定依赖项的方式。
- en: If there is no `composer.lock` file in your code base, `composer install` or
    `composer require` will install package(s) which will create the `composer.lock`
    file as well.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码库中没有`composer.lock`文件，`composer install`或`composer require`将安装包，这些包将创建`composer.lock`文件。
- en: If the `composer.lock` file is already there, then it will make sure that Composer
    install will install the exact version written in `composer.lock` file and it
    will ignore `composer.json`. However, as mentioned earlier, if you want to update
    your dependencies and want to update that in the `composer.lock` file, then you
    can run `composer update`. This is not recommended, because once your application
    is running on specific dependencies and you don't want to update, then the `composer.lock`
    file is useful. So, if you want to lock down dependencies, don't run the `composer
    update` command.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`composer.lock`文件已经存在，那么Composer安装将确保安装`composer.lock`文件中写入的确切版本，并且它将忽略`composer.json`。然而，如前所述，如果您想要更新依赖项并想要在`composer.lock`文件中更新它，那么您可以运行`composer
    update`。这是不推荐的，因为一旦您的应用程序在特定的依赖项上运行，并且您不想更新，那么`composer.lock`文件就很有用。因此，如果您想锁定依赖项，请不要运行`composer
    update`命令。
- en: If you are working in a team, you must commit the `composer.lock` file as well,
    so that other team members in your team can have the exact same packages and versions.
    So, committing the `composer.lock` file is highly recommended and not a matter
    for discussion.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在团队中工作，您必须提交`composer.lock`文件，以便您的团队中的其他成员可以拥有完全相同的包和版本。因此，强烈建议提交`composer.lock`文件，这不是讨论的问题。
- en: We are not going to discuss `composer.lock` in detail, as this is most of what
    we need to know about `composer.lock`. However, I would recommend you open and
    read `composer.lock` once. Understanding everything is not necessary, but it will
    give you some idea.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细讨论`composer.lock`，因为这就是我们需要了解的大部分内容。但是，我建议您打开并阅读一次`composer.lock`。不必理解所有内容，但这会给您一些想法。
- en: It basically has package information that is installed with the exact version
    that is installed and its dependencies.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上包含已安装的包信息及其依赖项的确切版本。
- en: Composer as an auto-loader
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Composer作为自动加载程序
- en: As you have seen, there is auto-loading related information available in the
    `composer.json` file because Composer is also responsible for auto-loading. In
    fact, even without that auto-load property specified, Composer can be used to
    auto-load files.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，`composer.json`文件中有与自动加载相关的信息，因为Composer也负责自动加载。实际上，即使没有指定自动加载属性，Composer也可以用于自动加载文件。
- en: Previously, we were using `require` or `include` to load every file separately.
    You don't need to `require` or `include` each and every file separately. You just
    need to require or include one file, that is `./vendor/autoload.php`. This `vendor`
    directory is Composer's vendor directory, where all packages are placed. So, this
    `autoload.php` file will auto-load everything without worrying about including
    all files with their dependencies in order.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，我们使用`require`或`include`来单独加载每个文件。您不需要单独`require`或`include`每个文件。您只需要要求或包含一个文件，即`./vendor/autoload.php`。这个`vendor`目录是Composer的供应商目录，所有的包都放在那里。因此，这个`autoload.php`文件将自动加载所有内容，而不必担心按顺序包含所有文件及其依赖关系。
- en: Example
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例子
- en: 'Let''s say we have a `composer.json` file like this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个像这样的`composer.json`文件：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With that `composer.json` file, if we run `composer install`, it will install
    all these packages, then, to load all those packages and all the classes in:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有了那个`composer.json`文件，如果我们运行`composer install`，它将安装所有这些包，然后加载所有这些包和所有类：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will need to just include one file, like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要包含一个文件，就像这样：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And this will make all those packages available in your code. So, all these
    packages, and our own `classes/traits` within `app/Models` and `app/Traits`, will
    be available even though while we didn't include all those packages separately.
    So, Composer works as an auto-loader as well.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使所有这些包在您的代码中可用。因此，所有这些包，以及我们自己在`app/Models`和`app/Traits`中的`classes/traits`，即使我们没有单独包含所有这些包，也将可用。因此，Composer也可以作为自动加载程序。
- en: Composer for creating a project
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于创建项目的Composer
- en: 'We can also use Composer to create a new project from an existing package.
    This is equivalent to performing two steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用Composer从现有包创建一个新项目。这相当于执行两个步骤：
- en: Cloning a repository
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆存储库
- en: Running `composer install` in that
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在那里运行`composer install`
- en: 'That means it will clone a project and install its dependencies. It can be
    done with the following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它将克隆一个项目并安装它的依赖项。可以使用以下命令完成：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It is very useful if we want to start a project from a code base. Note, the
    path on the filesystem and version number is not required, but optional.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要从一个代码库开始一个项目，这是非常有用的。请注意，文件系统上的路径和版本号不是必需的，但是可选的。
- en: Example
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 例子
- en: 'To install a framework named Laravel, you can simply run:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个名为Laravel的框架，您可以简单地运行：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, `laravel/laravel` is the package. As you can see from this, the path on
    the filesystem or version is not mentioned here. This is because those parameters
    are optional.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`laravel/laravel`是包。从这可以看出，文件系统上的路径或版本在这里没有提到。这是因为这些参数是可选的。
- en: 'With those parameters, this command will look like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些参数，该命令将如下所示：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Composer is a standard way to make and use reusable components. Nowadays, a
    lot of stuff has already been done and can be reused. For this reason, in PHP,
    Composer is a standard method. In this chapter, we have seen how Composer works,
    what it''s usages are, how can one install packages through it, and a lot more.
    However, one thing that we haven''t touched on in this chapter is how we can make
    packages for Composer. This is because our focus was on how we can reuse already
    available Composer packages. If you want to learn how to a create Composer package,
    then start from here: [https://getcomposer.org/doc/02-libraries.md](https://getcomposer.org/doc/02-libraries.md).'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Composer是一种制作和使用可重用组件的标准方法。如今，已经做了很多事情，可以被重用。因此，在PHP中，Composer是一种标准方法。在本章中，我们已经看到了Composer的工作原理，它的用途是什么，如何通过它安装包等等。然而，在本章中我们没有涉及的一件事是如何为Composer制作包。这是因为我们的重点是如何重用已经可用的Composer包。如果您想学习如何创建Composer包，那么就从这里开始：[https://getcomposer.org/doc/02-libraries.md](https://getcomposer.org/doc/02-libraries.md)。
- en: 'If you want to know more about Composer, you can:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于Composer的信息，您可以：
- en: Go and read Composer documentation at [https://getcomposer.org/doc/](https://getcomposer.org/doc/).
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去阅读Composer文档[https://getcomposer.org/doc/](https://getcomposer.org/doc/)。
- en: Open and start reading important files. You can open and read different Composer
    files, such as `composer.json` and `composer.lock` , from different packages.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并开始阅读重要文件。您可以打开并阅读不同的Composer文件，比如`composer.json`和`composer.lock`，来自不同的包。
- en: Till now, we have seen how we can reuse Composer components to avoid writing
    everything on our own. In the next chapter, we will start using such components
    or projects to make our RESTful web service better.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何重用Composer组件，以避免自己编写所有内容。在下一章中，我们将开始使用这些组件或项目来使我们的RESTful web服务更好。
