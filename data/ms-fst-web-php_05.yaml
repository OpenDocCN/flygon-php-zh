- en: Measuring and Optimizing Database Performance
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量和优化数据库性能
- en: In the first chapter of this book, we used the `mysqlslap` tool to learn how
    to do basic MySQL benchmarking. In this chapter, we will use this tool and others
    to do more advanced benchmarking with our MariaDB (MySQL) server. But, first,
    we will learn query optimization techniques that will use some of MySQL's built-in
    features in order to better analyze our SQL queries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第一章中，我们使用mysqlslap工具学习了如何进行基本的MySQL基准测试。在本章中，我们将使用这个工具和其他工具来对我们的MariaDB（MySQL）服务器进行更高级的基准测试。但首先，我们将学习查询优化技术，这些技术将使用MySQL的一些内置功能，以便更好地分析我们的SQL查询。
- en: Thus, we will learn how to measure and optimize database performance through
    the use of simple measurement techniques such as query optimization. Also, we
    will see how to use advanced database benchmarking tools, such as **DBT2** and
    **SysBench**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将学习如何通过使用简单的测量技术来测量和优化数据库性能，例如查询优化。此外，我们将看到如何使用高级数据库基准测试工具，如DBT2和SysBench。
- en: 'Therefore, we will cover the following points:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将涵盖以下几点：
- en: Measuring and optimizing SQL query performance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量和优化SQL查询性能
- en: Installing, configuring and using advanced database benchmarking tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装、配置和使用高级数据库基准测试工具
- en: SQL query performance
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL查询性能
- en: In order to better understand SQL query performance, we must first understand
    what indexes are and how they are built.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解SQL查询性能，我们必须首先了解索引是什么以及它们是如何构建的。
- en: The structure of indexes
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引的结构
- en: 'An index is an ordered list of table elements. These elements are first stored
    in a physically unordered doubly linked list. The list is doubly linked to the
    table through pointers to the table entries and to a second structure that stores
    the index values in a logical order, a balanced tree or b-tree. Thus, indexes
    have an algorithmic complexity that is logarithmic—`O(log n)`—for read operations
    on average, which means that the database engine should maintain speed even if
    there is a significant number of entries in the table. Indeed, an index lookup
    implies three steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 索引是表元素的有序列表。这些元素首先存储在物理上无序的双向链表中。该列表通过指向表条目和存储索引值的第二个结构的指针双向链接到表，以逻辑顺序、平衡树或b树存储索引值。因此，索引具有对数算法复杂度，平均读操作为O(log
    n)，这意味着即使表中有大量条目，数据库引擎也应该保持速度。实际上，索引查找涉及三个步骤：
- en: The tree traversal
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树遍历
- en: Searching the leaf node chain
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索叶节点链
- en: Fetching the data from the table
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从表中获取数据
- en: Thus, an index lookup is great when reading from the b-tree only, as you avoid
    the linear—`O(n)`—full table scan, for example. That being said though, you can
    never avoid the overhead complexity caused by keeping the index up to date when
    writing to the table.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当仅从b树中读取时，索引查找是很好的，因为你避免了线性的O(n)完整表扫描。尽管如此，你永远无法避免由于在写入表时保持索引最新而引起的开销复杂性。
- en: 'This brings us to our first consideration about query optimization: what is
    the final purpose of the table''s data? Are we simply logging information or are
    we storing a user''s shopping cart items? Are we querying a table that is mostly
    read from or written to? This is important, as optimizing one `SELECT` query might
    slow down a whole series of other `INSERT` or `UPDATE` queries to the same table.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这带我们来到了关于查询优化的第一个考虑因素：表的数据的最终目的是什么？我们只是记录信息还是存储用户的购物车商品？我们查询的表大多是读取还是写入？这很重要，因为优化一个SELECT查询可能会减慢对同一表的整个系列其他INSERT或UPDATE查询的速度。
- en: A second consideration would be the nature of the table's data. Are we trying
    to index values that generate equivocity for example, thus forcing the database
    engine to do further lookups in the leaf nodes of the b-tree in order to determine
    all the values that truly fulfill the expectations of a specific query? When equivocity
    is an issue, we might end up with a "slow index" or what is often called the "degenerated
    index".
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个考虑因素是表的数据的性质。例如，我们是否试图索引生成等价性的值，从而迫使数据库引擎在b树的叶节点中进行进一步查找，以确定真正满足特定查询期望的所有值？当等价性是一个问题时，我们可能会得到一个“慢索引”或者通常被称为“退化索引”。
- en: A third consideration is the economy of efficiency surrounding the act of querying
    the table. How powerful is the underlying computer? How many users are querying
    the table at a given time on average? Is scalability important?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个考虑因素是围绕查询表的效率的经济性。底层计算机有多强大？平均有多少用户在给定时间查询表？可伸缩性重要吗？
- en: One last consideration is the storage size of the data. It is important to know
    that, as a general rule, indexes grow, on average, to about 10% of the original
    table's size. Therefore, when tables are large in size, it is expected that the
    table's indexes will be bigger in size also. And, of course, the bigger the index,
    the longer you will be waiting due to I/O latency.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个考虑因素是数据的存储大小。重要的是要知道，一般规则是，索引的大小平均增长到原始表大小的约10%。因此，当表的大小很大时，预计表的索引也会更大。当然，索引越大，由于I/O延迟，等待的时间就越长。
- en: These considerations will determine which query to optimize and how to optimize
    it. Sometimes, optimizing is doing nothing.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些考虑因素将决定要优化哪个查询以及如何优化它。有时，优化就是什么都不做。
- en: Now that we better understand indexes, let's start analyzing simple SQL queries
    in order to understand database engine execution plans.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更好地理解了索引，让我们开始分析简单的SQL查询，以了解数据库引擎执行计划。
- en: The execution plan
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行计划
- en: 'We will begin understanding the execution plan by analyzing simple `WHERE`
    clauses. To do so, we will use our first Linux for PHP Docker container. In the
    first chapter, we loaded the Sakila database into the MariaDB (MySQL) server.
    We will now use it to learn how an execution plan works and when to use query
    optimization techniques. Once on the container''s CLI, enter the following commands:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过分析简单的`WHERE`子句来开始理解执行计划。为此，我们将使用我们的第一个Linux for PHP Docker容器。在第一章中，我们将Sakila数据库加载到MariaDB（MySQL）服务器中。现在我们将使用它来学习执行计划的工作原理以及何时使用查询优化技术。在容器的CLI上，输入以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These commands should yield the following results:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令应该产生以下结果：
- en: '![](assets/c6ff4e46-8bc9-4631-a7e4-89980e967449.png)The result of the SELECT
    statement'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c6ff4e46-8bc9-4631-a7e4-89980e967449.png)SELECT语句的结果'
- en: 'At first glance, this query seems to be fine with an execution time of 0.00
    seconds. But, is this truly the case? To further analyze this query, we will have
    to have a look at the database engine''s execution plan. To do so, enter the keyword
    `EXPLAIN` at the beginning of the query:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这个查询似乎很好，执行时间为0.00秒。但是，这真的是这样吗？要进一步分析这个查询，我们需要查看数据库引擎的执行计划。为此，在查询开头输入关键字`EXPLAIN`：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following results give us some information on the execution plan:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下结果为我们提供了一些执行计划的信息：
- en: '![](assets/1958748c-a572-4ccb-b21f-ed4b2bf1d60b.png)The execution plan of the
    same SELECT statement'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1958748c-a572-4ccb-b21f-ed4b2bf1d60b.png)相同SELECT语句的执行计划'
- en: 'Let''s take the time to define each column of this result set:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花时间来定义结果集的每一列：
- en: The `id` column tells us in what order tables were joined. In this case, there
    is only one table.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`列告诉我们表的连接顺序。在这种情况下，只有一个表。'
- en: The `select_type` is `SIMPLE`, which means that there were no subqueries, unions,
    or dependent query types done to execute this query.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select_type`是`SIMPLE`，这意味着执行此查询时没有子查询、联合或依赖查询类型。'
- en: The `table` column gives us the name of the table that was the object of the
    query. If it had been a temporary materialized table, we would have seen the expression
    `<subquery#>` in this column.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table`列给出了查询对象的表的名称。如果它是一个临时物化表，我们会在这一列看到表达式`<subquery#>`。'
- en: The `type` column is very important for query optimization. It gives us information
    on table access and how rows are found and retrieved from the table. In this case,
    a red flag is raised because we can see that the value of this column is `ALL`.
    To read further on the different possible values of this very important column,
    please consult the MariaDB manual at [https://mariadb.com/kb/en/library/explain/](https://mariadb.com/kb/en/library/explain/).
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`列对于查询优化非常重要。它提供了关于表访问以及如何从表中找到和检索行的信息。在这种情况下，我们看到这一列的值是`ALL`，这是一个警告信号。要进一步了解这个非常重要的列的不同可能值，请参阅MariaDB手册[https://mariadb.com/kb/en/library/explain/](https://mariadb.com/kb/en/library/explain/)。'
- en: The `possible_keys` column informs us of keys in the table that could be used
    to answer the query. In this example, the value is `NULL`.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`possible_keys`列通知我们表中可以用来回答查询的键。在这个例子中，值为`NULL`。'
- en: The `key` column indicates the key that was actually used. Here, again, the
    value is `NULL`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`列指示实际使用的键。在这里，值再次为`NULL`。'
- en: A value in the `key_len` column would mean that only a certain number of bytes
    of a multi-column key was used to complete the query lookup.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_len`列中的值表示完成查询查找所使用的多列键的特定字节数。'
- en: The `ref` column tells us which columns or constants are used to compare against
    the used index. Of course, since no index was used to execute this query, the
    value of this column is `NULL` also.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ref`列告诉我们用于与使用的索引进行比较的列或常量。当然，由于没有使用索引来执行此查询，因此这一列的值也是`NULL`。'
- en: The `rows` column indicates the number of rows the database engine will have
    to examine in order to complete its execution plan. In this example, the engine
    has to go through the 200 rows. If the table was large and had to be joined to
    a previous table, performance would drop fairly quickly.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rows`列表示数据库引擎需要检查的行数以完成其执行计划。在这个例子中，引擎需要检查200行。如果表很大并且必须与前一个表连接，性能会迅速下降。'
- en: The last column is the `Extra` column. This column will give us more information
    on the execution plan. In this example, the database engine uses the `WHERE` clause
    as it has to do a full table scan.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一列是`Extra`列。这一列将为我们提供有关执行计划的更多信息。在这个例子中，数据库引擎使用`WHERE`子句，因为它必须进行全表扫描。
- en: Basic query optimization
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本查询优化
- en: In order to start optimizing this query, we must go through what I have called
    previously *initial considerations* of query optimization. For the sake of this
    example, let's say that this table will be the object of `READ` queries more than
    `WRITE` queries because the data will remain fairly static once written to the
    table. Also, it is important to note that creating an index on the `first_name` column
    of the `actor` table will make the index prone to generating equivocity due to
    non-unique values in this column. Moreover, let's say that scalability is important
    because we intend on having many users querying this table every hour and that
    the table size should remain manageable on a long-term period.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始优化这个查询，我们必须经历我之前所说的查询优化的*初始考虑*。举例来说，让我们假设这个表将成为`READ`查询的对象，而不是`WRITE`查询，因为一旦写入表中，数据将保持相当静态。此外，重要的是要注意，在`actor`表的`first_name`列上创建索引将使索引容易产生由于该列中的非唯一值而产生的模糊性。此外，让我们假设可伸缩性很重要，因为我们打算每小时让许多用户查询这个表，并且表的大小应该在长期内保持可管理。
- en: 'This being given and known, we will therefore proceed to create an index on
    the `first_name` column of the `actor` table:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这一点，我们将在`actor`表的`first_name`列上创建一个索引：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once done, MariaDB confirms the creation of the index:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，MariaDB确认了索引的创建：
- en: '![](assets/da6584c8-040d-4242-aecf-9778747dbeb5.png)Confirmation that the index
    was created'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/da6584c8-040d-4242-aecf-9778747dbeb5.png)确认索引已创建'
- en: 'Now that the index has been created, we obtain this result when asking the
    database engine to `EXPLAIN` its execution plan:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在索引已创建，当我们要求数据库引擎“解释”其执行计划时，我们得到了这个结果：
- en: '![](assets/46556c09-fbd4-42ff-87f7-a4b6be3f25f7.png)The execution plan is now
    optimized'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 执行计划现在已经优化
- en: 'The `type` column''s value is now `ref`, `possible_keys` is `idx_first_name`,
    `key` is `idx_first_name`, `ref` is `const`, `rows` is `1` and `Extra` is `Using
    index condition`. As we can see, the engine has now identified our newly created
    index as a possible key to use and then proceeds to use it. It uses the constant
    value given in our query to perform the lookup in the index and considers only
    one row when accessing the table. All of this is great but, as we expected in
    our initial considerations, the index is composed of non-unique values. The possible
    equivocity amongst values of the table column might lead to a degenerated index over
    time, hence the access type of `ref` and the extra information indicating that
    the engine is `Using index condition`, which means that the `WHERE` clause is
    pushed down to the table engine for optimization at the index level. In this example,
    with the admitted initial considerations, this is, in the absolute sense, the
    best query optimization that we can do, as it is impossible to get unique values
    in the `first_name` column of the actor table. But, in fact, there is a possible
    optimization depending on the domain use case. If we only wish to use the actor''s
    first name, then we could further optimize the `Using index condition` in the
    `Extra` column by only selecting the appropriate column, thus allowing the database
    engine to only access the index:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: “type”列的值现在是“ref”，“possible_keys”是“idx_first_name”，“key”是“idx_first_name”，“ref”是“const”，“rows”是“1”，“Extra”是“Using
    index condition”。正如我们所看到的，引擎现在已经将我们新创建的索引识别为可能使用的关键，并继续使用它。它使用查询中给定的常量值在索引中执行查找，并在访问表时只考虑一行。所有这些都很好，但正如我们在最初的考虑中所期望的那样，索引由非唯一值组成。表列的值之间可能的等价性可能会导致随着时间的推移出现退化的索引，因此访问类型为“ref”，额外信息指示引擎正在“使用索引条件”，这意味着“WHERE”子句被推送到表引擎以在索引级别进行优化。在这个例子中，根据我们最初的考虑，这是在绝对意义上我们可以做的最佳查询优化，因为在“actor”表的“first_name”列中不可能获得唯一值。但实际上，根据领域使用情况，可能存在一种优化。如果我们只希望使用演员的名字，那么我们可以通过只选择适当的列来进一步优化“Extra”列中的“Using
    index condition”，从而允许数据库引擎只访问索引：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The database engine then confirms that it is only using the index in the `Extra` column:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库引擎随后确认它只在“Extra”列中使用索引：
- en: '![](assets/ebc4a318-7c49-4160-a4d4-d36a39a6c763.png)The ''Extra'' column now
    contains the information "Using where; Using index"'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “Extra”列现在包含信息“使用where; 使用索引”
- en: And, how does all of this translate into overall performance? Let's run a few
    benchmark tests in order to measure the effects of our changes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切又如何转化为整体性能呢？让我们运行一些基准测试，以衡量我们的更改的影响。
- en: 'First, we will run a benchmark test without the index. On the container''s
    CLI, run the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在没有索引的情况下运行基准测试。在容器的CLI上运行以下命令：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here are the results without the index:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不使用索引的结果：
- en: '![](assets/cd474d43-c861-4658-ac3f-cc890426f7cb.png)The results of the benchmark
    test WITHOUT the use of the index'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用索引的基准测试结果
- en: 'And, the results with the index:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以及，使用索引的结果：
- en: '![](assets/f1911b9c-74cb-4ee2-913a-1d78acbef8a8.png)The results of the benchmark
    test WITH the use of the index'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引的基准测试结果
- en: 'And, finally, let''s run the same command while only selecting the appropriate
    column, thus limiting the lookup to the index only:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们只选择适当的列运行相同的命令，从而将查找限制为仅使用索引：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here are the results of this last benchmark test:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最后一个基准测试的结果：
- en: '![](assets/2da239cc-d059-4f8d-bab9-fb0901f6b289.png)The results of the benchmark
    test WITH the use of the index ONLY'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引的基准测试结果
- en: The benchmark test results clearly show that our query optimization did indeed
    satisfy our initial scalability assumption, especially if we were to see the table
    grow in size and our database become more popular with a growing number of users
    over time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试结果清楚地显示，我们的查询优化确实满足了我们最初的可扩展性假设，特别是如果我们看到表的大小增长，随着时间的推移，我们的数据库变得更受欢迎，用户数量也在增长。
- en: The performance schema and advanced query optimization
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能模式和高级查询优化
- en: The art of query optimization can be pushed a little further still by using
    MariaDB's (MySQL) performance schema to profile queries. Query profiling allows
    us to see what is happening under the hood and to further optimize complex queries.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 查询优化的艺术可以通过使用MariaDB（MySQL）的性能模式来进一步推进。查询分析允许我们看到发生在幕后的情况，并进一步优化复杂的查询。
- en: 'To begin, let''s enable the performance schema on our database server. To do
    so, enter these commands on the Linux for PHP container''s CLI:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在数据库服务器上启用性能模式。为此，请在Linux的PHP容器的CLI上输入以下命令：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The database engine will confirm that some rows were modified in the `performance_schema` database:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库引擎将确认在“performance_schema”数据库中已修改了一些行：
- en: '![](assets/ee3f513b-60ad-470a-bb21-119e8e4a32f0.png)The ''performance_schema''
    database has been modified'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “performance_schema”数据库已被修改
- en: 'We can now check that the performance schema is now enabled:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以检查性能模式是否已启用：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The database engine should return the following result:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库引擎应返回以下结果：
- en: '![](assets/d20cb158-9530-418a-970e-b1e9ccedfaba.png)Confirmation that the performance
    schema is now enabled'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 确认性能模式现已启用
- en: 'Now that profiling is enabled and ready, let''s run a complex query on the
    Sakila database. Using subqueries with the `NOT IN` clause often forces the engine
    to iteratively make an extra check against the main query. These queries can be
    optimized using `JOIN` statements. We will take the following query and run it
    on our database server:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，性能分析已经启用并准备就绪，让我们在Sakila数据库上运行一个复杂的查询。在使用`NOT IN`子句的子查询时，引擎通常会迭代地对主查询进行额外的检查。这些查询可以使用`JOIN`语句进行优化。我们将使用以下查询在我们的数据库服务器上运行：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running the query yields the following result:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 运行查询会产生以下结果：
- en: '![](assets/7ced38ee-b513-43a5-8826-a37ad6f6ecc5.png)The result of the SELECT
    statement'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT语句的结果
- en: 'And, here are the results when using the `EXPLAIN` statement on the previous
    query:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，在上一个查询上使用`EXPLAIN`语句时的结果如下：
- en: '![](assets/86930d8f-4d59-483e-b63c-d88e17888a41.png)The execution plan of the
    same SELECT statement'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 同一SELECT语句的执行计划
- en: 'As we can see, the engine is doing a full table scan and uses a materialized
    subquery to complete its lookup. To see what is happening under the hood, we will
    have to see what events the profiler has recorded concerning this query. To do
    so, enter the following query:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，引擎正在进行全表扫描，并使用一个物化子查询来完成其查找。要了解底层发生了什么，我们将不得不查看分析器记录的有关此查询的事件。为此，请输入以下查询：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once this query is run, you will obtain the original query''s unique identifier:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此查询后，您将获得原始查询的唯一标识符：
- en: '![](assets/d55d0b65-ef49-4bbe-9e7c-2803b6098f18.png)The original query''s identifier'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 原始查询的标识符
- en: 'This information allows us to run the following query in order to get the list
    of the underlying events that took place when we ran our original query:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息允许我们运行以下查询，以获取运行原始查询时发生的底层事件列表：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is what we find in MariaDB''s performance schema concerning our original
    query:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是MariaDB性能模式中关于我们原始查询的内容：
- en: '![](assets/607a03e2-2260-4f04-9cb8-6248030c084d.png)The query''s profile reveals
    one particularly long operation'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 查询的概要显示了一个特别长的操作
- en: This result shows that the `NOT IN` clause caused the database engine to create
    a materialized subquery, as the inner query was optimized as a semi-join subquery.
    Thus, the engine had to do a few optimization operations before running the query
    and the materialized subquery. Moreover, the result shows that the materialized
    subquery was the most costly operation.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果显示`NOT IN`子句导致数据库引擎创建了一个物化子查询，因为内部查询被优化为半连接子查询。因此，在运行查询和物化子查询之前，引擎必须进行一些优化操作。此外，结果显示物化子查询是最昂贵的操作。
- en: 'The easiest way to optimize these subqueries is to replace them with proper
    `JOIN` statements in the main query, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 优化这些子查询的最简单方法是将它们替换为主查询中的适当`JOIN`语句，如下所示：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'By running this query, we obtain the same results from the database, but the
    `EXPLAIN` statement reveals a whole new execution plan in order to get the exact
    same results:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行此查询，我们从数据库中获得相同的结果，但是`EXPLAIN`语句揭示了一个全新的执行计划，以获得完全相同的结果：
- en: '![](assets/dded5339-419e-4b6b-8567-1c783240e7c0.png)The new execution plan
    shows only ''SIMPLE'' select types'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 新的执行计划只显示了“SIMPLE”选择类型
- en: 'The subqueries have disappeared and have become simple queries. Let''s see
    what the performance schema recorded this time:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 子查询已经消失，变成了简单的查询。让我们看看性能模式这次记录了什么：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The profiler recorded the following results:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器记录了以下结果：
- en: '![](assets/b8d72d82-9786-4c81-8cfb-fe6a09fbe834.png)The new query''s profile
    reveals considerable performance improvements'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 新查询的概要显示了相当大的性能改进
- en: The results clearly show that fewer optimization operations occurred in the
    initialization phases of the execution plan and that query execution as such was
    approximately seven times faster. Not all materialized subqueries can be optimized
    in this way but, when optimizing queries, a materialized subquery, a dependent
    subquery or an uncacheable subquery should always inspire us to ask ourselves
    if we can do any better.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 结果清楚地显示，在执行计划的初始化阶段发生的优化操作较少，并且查询执行本身大约快了七倍。并非所有物化子查询都可以以这种方式进行优化，但是，在优化查询时，物化子查询、依赖子查询或不可缓存的子查询应该总是激励我们问自己是否可以做得更好。
- en: For further information on query optimization, you can listen to a great presentation
    given on this topic by Michael Moussa at *Nomad PHP* ([https://nomadphp.com/product/mysql-analysis-understanding-optimization-queries/](https://nomadphp.com/product/mysql-analysis-understanding-optimization-queries/)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有关查询优化的更多信息，您可以收听Michael Moussa在*Nomad PHP*上关于此主题的出色演示（[https://nomadphp.com/product/mysql-analysis-understanding-optimization-queries/](https://nomadphp.com/product/mysql-analysis-understanding-optimization-queries/)）。
- en: Advanced benchmarking tools
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级基准测试工具
- en: 'Until now we have used the `mysqlslap` benchmarking tool. But, if you need
    to test your database server more thoroughly, other more advanced benchmarking
    tools do exist. We will have a quick look at two of these tools: DBT2 and SysBench.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了`mysqlslap`基准测试工具。但是，如果您需要更彻底地测试数据库服务器，还存在其他更高级的基准测试工具。我们将简要介绍其中两个工具：DBT2和SysBench。
- en: DBT2
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DBT2
- en: This benchmarking tool is used in order to run automated benchmarking tests
    against a MySQL server. It allows you to mimic large amounts of data warehouses.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基准测试工具用于针对MySQL服务器运行自动化基准测试。它允许您模拟大量的数据仓库。
- en: 'To download, compile and install DBT2, please enter the following commands
    on the container''s CLI:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载、编译和安装DBT2，请在容器的CLI上输入以下命令：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once the data warehouses have been created, you should see the following messages:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据仓库被创建，您应该看到以下消息：
- en: '![](assets/7cb92b53-f9a6-4766-9c52-1f26c9d3510a.png)Confirmation that the database
    warehouses have been created'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 确认数据库仓库已经创建。
- en: 'You will now have to modify the file `scripts/mysql/mysql_load_db.sh` using
    the vi editor:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要使用vi编辑器修改文件`scripts/mysql/mysql_load_db.sh`：
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once inside the editor, type `/LOAD DATA` and press *Enter*. Position your
    cursor at the end of this line, press `*I*` and enter the word `IGNORE` in uppercase.
    Your file should look like this once you are done editing it:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 进入编辑器后，输入`/LOAD DATA`并按*Enter*。将光标定位在此行的末尾，按`*I*`并输入大写的`IGNORE`。编辑完成后，您的文件应该是这样的：
- en: '![](assets/eaf14be8-ed22-41b0-8fa6-7e582f14ca29.png)Inserting the string "IGNORE"
    on the "LOAD DATA" line of the ''mysql_load_db.sh'' script'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/eaf14be8-ed22-41b0-8fa6-7e582f14ca29.png)在''mysql_load_db.sh''脚本的''LOAD
    DATA''行上插入字符串"Ignore"'
- en: Once done, press the *Esc *key and then type `:wq`. This will save the changes
    and close the vi editor.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，按*Esc*键，然后输入`:wq`。这将保存更改并关闭vi编辑器。
- en: 'Now, enter the following command to load the test data into the database:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入以下命令将测试数据加载到数据库中：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the data has been loaded into the database, you should see the following
    messages:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据加载到数据库中，您应该会看到以下消息：
- en: '![](assets/a892a632-2f5b-4892-8cce-6008167b2eb8.png)Confirmation that the data
    is being loaded into the database'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a892a632-2f5b-4892-8cce-6008167b2eb8.png)确认数据正在加载到数据库中'
- en: 'To launch the test, enter this command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动测试，输入以下命令：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once you have entered the command, you will first see this message:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 输入命令后，您将首先看到这条消息：
- en: '![](assets/e1b03e63-3a1a-4d00-8d98-029e48929aac.png)Confirmation that the tests
    have begun'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e1b03e63-3a1a-4d00-8d98-029e48929aac.png)确认测试已开始'
- en: 'You will also get the following messages:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会收到以下消息：
- en: '![](assets/c7de45f4-984c-4ee5-876c-e1da8f1af596.png)Confirmation that the tests
    are running'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c7de45f4-984c-4ee5-876c-e1da8f1af596.png)确认测试正在运行'
- en: 'After approximately five minutes, you will get the results of the benchmark
    tests:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 大约五分钟后，您将得到基准测试的结果：
- en: '![](assets/c43b7135-035f-4634-b870-c451b74939a6.png)Confirmation that the tests
    are completed'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c43b7135-035f-4634-b870-c451b74939a6.png)确认测试已完成'
- en: As we can see from the given results, we can have a good idea of our database
    server's performance in the context of large data warehouses. Additional tests
    could easily confirm the server's limits through edge-case testing. Let's run
    one such test using SysBench.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的结果中，我们可以看到在大型数据仓库的背景下，我们可以对数据库服务器的性能有一个很好的了解。通过边缘案例测试，额外的测试可以轻松确认服务器的极限。让我们使用SysBench运行这样的测试。
- en: SysBench
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SysBench
- en: SysBench is another very popular open source benchmark testing tool. This tool
    not only allows you to test open source RDBMSs, but also your hardware (CPU, I/O,
    and so on).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: SysBench是另一个非常流行的开源基准测试工具。这个工具不仅允许您测试开源RDBMS，还可以测试您的硬件（CPU、I/O等）。
- en: 'To download, compile and install SysBench, please enter the following commands
    inside the Linux for PHP Docker container:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载、编译和安装SysBench，请在Linux for PHP Docker容器中输入以下命令：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, enter the following command to create a table with 1 million rows as the
    test data into the database:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输入以下命令将创建一个包含100万行的表作为测试数据加载到数据库中：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once the data has been loaded into the database, you should see the following
    messages:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据加载到数据库中，您应该会看到以下消息：
- en: '![](assets/0eb6eee6-2020-4ae0-8e10-7ac10fbe7a04.png)Confirmation that the test
    data has been loaded into the database'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0eb6eee6-2020-4ae0-8e10-7ac10fbe7a04.png)确认测试数据已加载到数据库中'
- en: 'Now, to run the test, enter this command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行测试，输入以下命令：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once you have entered the previous command, you will first get the following
    message:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 输入上一个命令后，您将首先收到以下消息：
- en: '![](assets/69a93d24-c499-4d1e-ae12-1e31dbf2de7d.png)Confirmation that the tests
    are running'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/69a93d24-c499-4d1e-ae12-1e31dbf2de7d.png)确认测试正在运行'
- en: 'After a few minutes, you should get results similar to these:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，您应该会得到类似于以下结果：
- en: '![](assets/9914961f-d1d6-405e-9167-a12a46df3bb6.png)The results of the SysBench
    tests'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9914961f-d1d6-405e-9167-a12a46df3bb6.png)SysBench测试结果'
- en: The results show that the MariaDB server on my computer can handle approximately
    2,300 transactions per second and 33,000 read/write requests per second. These
    edge-case tests can give us a very good idea of the general performance level
    that we can expect from our hardware and our database server.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，我的计算机上的MariaDB服务器大约可以处理每秒约2300次事务和每秒约33000次读/写请求。这些边缘案例测试可以让我们对硬件和数据库服务器的一般性能水平有一个很好的了解。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to measure and optimize database performance
    through the use of simple measurement techniques such as query optimization. Also,
    we have seen how to use advanced database benchmarking tools such as DBT2 and
    SysBench.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学会了如何通过简单的测量技术（如查询优化）来衡量和优化数据库性能。此外，我们还看到了如何使用高级数据库基准测试工具，如DBT2和SysBench。
- en: In the next chapter, we will see how to use modern SQL techniques in order to
    optimize very complex SQL queries.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用现代SQL技术来优化非常复杂的SQL查询。
