- en: Chapter 4. Storing and Using Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。存储和使用数据
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating data tables using migrations and schemas
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用迁移和模式创建数据表
- en: Querying using raw SQL statements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原始SQL语句查询
- en: Querying using Fluent
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Fluent查询
- en: Querying using Eloquent ORM
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eloquent ORM查询
- en: Using automatic validation in models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模型中使用自动验证
- en: Using advanced Eloquent and relationships
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级Eloquent和关系
- en: Creating a CRUD system
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建CRUD系统
- en: Importing a CSV using Eloquent
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Eloquent导入CSV
- en: Using RSS as a data source
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RSS作为数据源
- en: Using attributes to change table column names
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性更改表列名称
- en: Using a non-Eloquent ORM in Laravel
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Laravel中使用非Eloquent ORM
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: One of the backbones of any web application is the use and manipulation of data.
    Laravel comes with many handy ways to interact with databases and display their
    information. In this chapter, we'll begin with some simple database interactions.
    Then we'll use other, non-databases for our data source, and then work on some
    customizations for our Laravel application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Web应用程序的支柱之一是使用和操作数据。Laravel提供了许多方便的方法来与数据库交互并显示它们的信息。在本章中，我们将从一些简单的数据库交互开始。然后，我们将使用其他非数据库作为我们的数据源，然后对我们的Laravel应用程序进行一些自定义。
- en: Creating data tables using migrations and schemas
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用迁移和模式创建数据表
- en: Using Laravel, we can easily create our data model using schemas and migrations.
    In this recipe, we'll see some basic functionality of how Laravel accomplishes
    this.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Laravel，我们可以轻松地使用模式和迁移创建我们的数据模型。在这个配方中，我们将看到Laravel如何实现这些基本功能。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation, as well as a MySQL
    database configured in our database config file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个标准的Laravel安装，以及在我们的数据库配置文件中配置的MySQL数据库。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，请按照以下步骤进行：
- en: 'Install our migrations table from the command prompt, using `artisan`:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`artisan`从命令提示符中安装我们的迁移表：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a migration to hold our Schema code for creating a new table:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个迁移以保存我们的模式代码来创建一个新表：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In our `app/database/migrations` directory, locate the file that should be
    named similar to `2012_01_01_222551_create_shows_table.php`. Add the schema to
    create our table and add the columns:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/database/migrations`目录中，找到一个名为`2012_01_01_222551_create_shows_table.php`的类似文件。添加用于创建表和添加列的模式：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the migration to add the table to the database, using the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行迁移以将表添加到数据库，使用以下命令：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create another migration so we can add a column to our table:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个迁移，以便我们可以向我们的表中添加一列：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `app/database/migrations` directory, find the file that has a name similar
    to `2012_01_01_222551_add_actor_to_shows_table.php`. Add the column to our schema:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/database/migrations`目录中，找到一个类似于`2012_01_01_222551_add_actor_to_shows_table.php`的文件。向我们的模式中添加列：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the migration in the command prompt to add the column to our table:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中运行迁移，以向我们的表中添加列：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Using Laravel's Artisan command-line tool, we run the command to create a migrations
    table. This will track any migrations and schema changes we make. Then we use
    Artisan to create a migrations file that will hold the schema for our `shows`
    table.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Laravel的Artisan命令行工具，运行命令来创建一个迁移表。这将跟踪我们进行的任何迁移和模式更改。然后我们使用Artisan创建一个将保存我们`shows`表模式的迁移文件。
- en: In the `shows` schema, we create a simple table to hold a list of TV shows,
    and how we rate them. The name of the show is set as a string, the rating as an
    integer, and we use Laravel's default mechanism for creating timestamps. When
    we run the migration, our table will be created for us.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`shows`模式中，我们创建一个简单的表来保存电视节目的列表以及我们对它们的评分。节目的名称设置为字符串，评分设置为整数，并且我们使用Laravel的默认机制来创建时间戳。当我们运行迁移时，我们的表将被创建。
- en: If we decide we want to add another column in our table, we just create another
    migration file using Artisan. In this case, we'll be adding a column to hold an
    actor's name. Our schema will get the table we already created and add the column
    to it. When we rerun the migration, everything will be updated in the database.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定要在表中添加另一列，我们只需使用Artisan创建另一个迁移文件。在这种情况下，我们将添加一个列来保存演员的姓名。我们的模式将获取我们已经创建的表，并向其添加列。当我们重新运行迁移时，数据库中的所有内容都将得到更新。
- en: There's more…
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'We could also have some more boilerplate code created for us by using a couple
    of command-line switches with Artisan. For example, to create the shows table,
    we could run this command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用Artisan的一些命令行开关为我们创建一些更多的样板代码。例如，要创建shows表，我们可以运行以下命令：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Running that command will produce a migration file that includes the following
    code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该命令将生成一个包含以下代码的迁移文件：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Querying using raw SQL statements
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原始SQL语句查询
- en: Laravel provides many ways to access our database. If we have existing queries
    that we've used before, or if we need something a bit more complicated, we can
    use raw SQL to access our database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel提供了许多访问数据库的方式。如果我们有以前使用过的现有查询，或者如果我们需要一些更复杂的东西，我们可以使用原始SQL来访问我们的数据库。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll be using the table created in the *Creating data tables
    using migrations and schema* recipe.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用*使用迁移和模式创建数据表*配方中创建的表。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个配方，请按照以下步骤进行：
- en: 'In the command prompt, create a migration so we can add some data:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，创建一个迁移，以便我们可以添加一些数据：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In our `app/database/migrations` directory, find a file similar to `2012_01_01_222551_add_data_to_shows_table.php`,
    and add some data using raw SQL:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/database/migrations`目录中，找到一个类似于`2012_01_01_222551_add_data_to_shows_table.php`的文件，并使用原始SQL添加一些数据：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the migration in the command prompt to add the data:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中运行迁移以添加数据：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In our `app/models` directory, create a file named `Show.php` and add a method
    to get the shows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/models`目录中，创建一个名为`Show.php`的文件，并添加一个获取节目的方法：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In our `routes.php` file, create a `Show` route to display the information
    from the model:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，创建一个`Show`路由来显示模型中的信息：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To populate some data in our `shows` table, we first need to create a migration
    using the Artisan command-line tool. In the migration file's `up` method, we create
    a simple SQL insert command, and pass in three parameters. We then create three
    arrays, with the values in the same order as columns in our query. Then we pass
    the SQL statement variable and array of values to Laravel's `DB::insert()` command.
    For our `down` method, we use a SQL delete statement, searching by the show's
    name. Once we run the migration, our data will populate into the table.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的`shows`表中填充一些数据，我们首先需要使用Artisan命令行工具创建一个迁移。在迁移文件的`up`方法中，我们创建一个简单的SQL插入命令，并传入三个参数。然后我们创建三个数组，数组中的值与查询中的列的顺序相同。然后我们将SQL语句变量和值数组传递给Laravel的`DB::insert()`命令。对于我们的`down`方法，我们使用了一个SQL删除语句，通过节目名称进行搜索。一旦我们运行迁移，我们的数据将填充到表中。
- en: Next, we create a model to interact with the database in the frontend. Our model
    has one method to display all the shows in our table, with optional parameters
    if we'd like to re-order how they're displayed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在前端创建一个与数据库交互的模型。我们的模型有一个方法来显示表中的所有节目，还可以使用可选参数来重新排序它们的显示方式。
- en: Our route instantiates the Show model and runs the `allShows()` method. To display
    the results, we use Laravel's `dd()` helper function. At this point, we could
    pass the data to a view and loop through it to display.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的路由实例化Show模型并运行`allShows()`方法。为了显示结果，我们使用Laravel的`dd()`辅助函数。在这一点上，我们可以将数据传递到视图中，并循环遍历以显示。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating data tables using migrations and schema* recipe
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用迁移和模式创建数据表*示例'
- en: Querying using Fluent
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Fluent进行查询
- en: Laravel provides many ways to access databases. If we choose not to write raw
    SQL statements, we can use the Fluent query builder to make things easier.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel提供了许多访问数据库的方式。如果我们选择不编写原始的SQL语句，我们可以使用Fluent查询构建器来简化操作。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll be using the table created in the *Creating data tables
    using migrations and schemas* recipe.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用在*使用迁移和模式创建数据表*示例中创建的表。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'In the command prompt, create a migration so we can add some data:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，创建一个迁移以便我们添加一些数据：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In our `app/database/migrations` directory, find a file similar to `2012_01_01_222551_add_data_to_shows_table.php`,
    and add some data using the Fluent query builder:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/database/migrations`目录中，找到一个类似于`2012_01_01_222551_add_data_to_shows_table.php`的文件，并使用Fluent查询构建器添加一些数据：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the migration to add the data:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行迁移以添加数据：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In our `app/models` directory, create a file named `Show.php` and add a method
    to get the shows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/models`目录中，创建一个名为`Show.php`的文件，并添加一个获取节目的方法：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In our `routes.php` file, create a `Show` route to display the information
    from the model:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，创建一个`Show`路由来显示模型中的信息：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To populate some data in our `shows` table, we first need to create a migration
    using the Artisan command-line tool. In the migration file's `up` method, we create
    three arrays that hold our values, using the column names as keys. Those arrays
    are then put into an array and passed to the Fluent `insert` function. The `down`
    method uses the `where()` and `orWhere()` functions to locate records by their
    name, and deletes them. Once we run the migration, our data will populate into
    the table.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的`shows`表中填充一些数据，我们首先需要使用Artisan命令行工具创建一个迁移。在迁移文件的`up`方法中，我们创建三个数组来保存我们的值，使用列名作为键。然后将这些数组放入一个数组中，并传递给Fluent的`insert`函数。`down`方法使用`where()`和`orWhere()`函数来定位记录的名称，并删除它们。一旦我们运行迁移，我们的数据将填充到表中。
- en: Next, we create a model to interact with the database in the frontend. Our model
    has one method to display all the shows in our table, with optional parameters
    if we'd like to reorder how they're displayed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在前端创建一个与数据库交互的模型。我们的模型有一个方法来显示表中的所有节目，还可以使用可选参数来重新排序它们的显示方式。
- en: Our route instantiates the Show model and runs the `allShows()` method. To display
    the results, we use Laravel's `dd()` helper function. We could also create a view
    and pass the data there to loop through.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的路由实例化Show模型并运行`allShows()`方法。为了显示结果，我们使用Laravel的`dd()`辅助函数。我们也可以创建一个视图，并将数据传递到那里进行循环。
- en: There's more...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Many more fluent methods can be found in Laravel's documentation at [http://laravel.com/docs/queries](http://laravel.com/docs/queries).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Laravel的文档中可以找到更多流畅的方法[http://laravel.com/docs/queries](http://laravel.com/docs/queries)。
- en: See also
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating data tables using migrations and schemas* recipe
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用迁移和模式创建数据表*示例'
- en: Querying using Eloquent ORM
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Eloquent ORM进行查询
- en: Laravel provides many ways to interact with databases. One of the easiest ways
    is using the Eloquent ORM. It provides a simple and intuitive way to work with
    data.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel提供了许多与数据库交互的方式。其中最简单的一种方式是使用Eloquent ORM。它提供了一种简单直观的方式来处理数据。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll be using the table created in the *Creating data tables
    using migrations and schemas* recipe.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用在*使用迁移和模式创建数据表*示例中创建的表。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'In the command prompt, create a migration so we can add some data:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，创建一个迁移以便我们添加一些数据：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In our `app/database/migrations` directory, find a file similar to `2012_01_01_222551_add_data_to_shows_table.php`,
    and add some data using the Fluent query builder:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/database/migrations`目录中，找到一个类似于`2012_01_01_222551_add_data_to_shows_table.php`的文件，并使用Fluent查询构建器添加一些数据：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the migration to add the data:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行迁移以添加数据：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In our `app/models` directory, create a file named `Show.php` that extends
    `Eloquent`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/models`目录中，创建一个名为`Show.php`的文件，它继承自`Eloquent`：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In our `routes.php` file, create a show route to display the information from
    the model:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，创建一个show路由来显示模型中的信息：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To populate some data in our `shows` table, we first need to create a migration
    using the Artisan command-line tool. In the migration file's `up` method, we create
    three arrays that hold our values, using the column names as keys. Those arrays
    are then put into an array and passed to the Fluent `insert` function. The `down`
    method uses the `where()` and `orWhere()` functions to locate records by their
    name, and deletes them. Once we run the migration, our data will populate into
    the table.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的`shows`表中填充一些数据，我们首先需要使用Artisan命令行工具创建一个迁移。在迁移文件的`up`方法中，我们创建了三个包含我们的值的数组，使用列名作为键。然后，这些数组被放入一个数组中，并传递给Fluent的`insert`函数。`down`方法使用`where()`和`orWhere()`函数通过它们的名称来定位记录，并删除它们。一旦我们运行迁移，我们的数据将填充到表中。
- en: Next, we create a model to interact with the database in the frontend. For this
    recipe, all we need to do is extend `Eloquent` and the ORM will automatically
    take care of everything else. We also add in a method that will return all of
    the top shows.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个模型来在前端与数据库交互。对于这个示例，我们只需要扩展`Eloquent`，ORM将自动处理其他所有事情。我们还添加了一个方法，它将返回所有顶级节目。
- en: Our route calls the `all()` method for our Show ORM object; this will put all
    the data into the `$shows` variable. Then we do a simple loop through the records
    and display the fields we want. Next, we get a filtered list by calling the method
    in the Show model, by only getting records with a rating greater than 5 and ordered
    by rating.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的路由调用了Show ORM对象的`all()`方法；这将把所有数据放入`$shows`变量中。然后我们通过记录进行简单的循环，并显示我们想要的字段。接下来，我们通过在Show模型中调用方法来获取一个经过筛选的列表，只获取评分大于5的记录，并按评分排序。
- en: There's more...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we're displaying all the data inside the route. Ideally, we'd
    pass the data into a view and display it there.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们在路由中显示所有数据。理想情况下，我们会将数据传递到视图中并在那里显示。
- en: See also
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating data tables using migrations and schemas* recipe
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用迁移和模式创建数据表*示例'
- en: Using automatic validation in models
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模型中使用自动验证
- en: When validating data that's being sent to the database, ideally we should put
    the rules and validation in our model. In this recipe we'll see one way to accomplish
    this.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证发送到数据库的数据时，理想情况下我们应该将规则和验证放在我们的模型中。在这个示例中，我们将看到一种实现这一点的方法。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation with a configured MySQL
    database. We also need our migrations table set up by running the Artisan command
    `php artisan migrate:install`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个配置了MySQL数据库的标准Laravel安装。我们还需要通过运行Artisan命令`php artisan migrate:install`来设置我们的迁移表。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'In the command prompt, create a migration for a simple `users` table:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，创建一个简单的`users`表的迁移：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create the schema in the migration file. The file is located in the `app/database/migrations`
    directory and will be named something like `2012_01_01_222551_create_users_table.php`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在迁移文件中创建模式。该文件位于`app/database/migrations`目录中，名称类似于`2012_01_01_222551_create_users_table.php`：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the migration:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行迁移：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a file named `User.php` in our `app/models` directory. If there''s already
    a file named `User.php`, we can just rename it:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/models`目录中创建一个名为`User.php`的文件。如果已经有一个名为`User.php`的文件，我们可以简单地重命名它：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Make a route that loads the ORM and tries to save some data:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个加载ORM并尝试保存一些数据的路由：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To begin, we create a migration for a basic `users` table. In our schema, we
    set up a table with an ID, username, e-mail ID, and timestamps. Then run the migration
    to create the table in the database.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为一个基本的`users`表创建一个迁移。在我们的模式中，我们设置了一个带有ID、用户名、电子邮件ID和时间戳的表。然后运行迁移，在数据库中创建表。
- en: Next, we set up our User model and extend `Eloquent`. We need to create our
    rules, using a private variable named as `$rules` that contains an array of the
    validation rules we want to check. In our model, we create a `validate` method.
    This will run our input through Laravel's `Validator` using the rules we have
    just set up.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置了我们的用户模型并扩展了`Eloquent`。我们需要创建我们的规则，使用一个名为`$rules`的私有变量，其中包含我们想要检查的验证规则数组。在我们的模型中，我们创建了一个`validate`方法。这将通过Laravel的`Validator`运行我们的输入，使用我们刚刚设置的规则。
- en: In our route, we create a new user and add some values. Before we save, we run
    the input through the `validate` method; if it fails, we can loop through the
    validation error messages. If it passes, we could then save the input to our database
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的路由中，我们创建了一个新用户并添加了一些值。在保存之前，我们通过`validate`方法运行输入；如果失败，我们可以循环遍历验证错误消息。如果通过，我们可以将输入保存到我们的数据库中。
- en: There's more...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a few other ways to validate our data using models. One way is to
    use a package that will handle most of the validation work for us. One great package
    to use is Ardent, which can be found at [https://github.com/laravelbook/ardent](https://github.com/laravelbook/ardent).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他验证数据的方法。一种方法是使用一个可以为我们处理大部分验证工作的包。一个很好的包是Ardent，可以在[https://github.com/laravelbook/ardent](https://github.com/laravelbook/ardent)找到。
- en: Using advanced Eloquent and relationships
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高级Eloquent和关系
- en: One of the great things about using Laravel's Eloquent ORM is the ease with
    which we can interact with multiple tables that have foreign keys and pivot tables.
    In this recipe, we'll see how easy it is to set up our models and run queries
    against joined tables.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Laravel的Eloquent ORM的一个很棒的地方是，我们可以轻松地与具有外键和中间表的多个表进行交互。在这个示例中，我们将看到设置我们的模型并针对连接的表运行查询有多么容易。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll be using the `shows` and `users` tables created in the
    previous recipes *Creating data tables using migrations and schemas* and *Using
    automatic validation in models*.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用在之前的示例*使用迁移和模式创建数据表*和*在模型中使用自动验证*中创建的`shows`和`users`表。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，请按照以下步骤进行：
- en: 'In the command prompt, create a migration for a new pivot table:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，创建一个新的中间表的迁移：
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Open the migrations file in the `app/database/migrations` directory and add
    the schema:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`app/database/migrations`目录中的迁移文件，并添加模式：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run the migration:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行迁移：
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a `User.php` file in the `app/model` directory:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/model`目录中创建一个`User.php`文件：
- en: '[PRE32]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create a `Show.php` file in our `app/model` directory:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`app/model`目录中创建一个`Show.php`文件：
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Make a route in `routes.php` to add a new user and attach two shows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中创建一个路由来添加一个新用户并附加两个节目：
- en: '[PRE34]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Make a route to get all the users attached to a show:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由来获取与一个节目关联的所有用户：
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our first task is to create a pivot table that will join our `users` tables
    with our `shows` table. In our migration's schema, we need to add columns for
    our `user_id` and a `show_id`. We then run the migration to get the table set
    up in our database.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个任务是创建一个将我们的`users`表与我们的`shows`表连接的中间表。在我们的迁移模式中，我们需要为我们的`user_id`和`show_id`添加列。然后我们运行迁移，以在我们的数据库中设置表。
- en: To set up our models, we need to create a function that will return our many-to-many
    relationship. In our User model, we create the `shows()` function that points
    to our Show model for the relationship. In the Show model, we create a function
    named `users()` that points to our User model. With this set up, we can now run
    queries against both tables with ease.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置我们的模型，我们需要创建一个函数，该函数将返回我们的多对多关系。在我们的User模型中，我们创建了指向我们Show模型的关系的`shows()`函数。在Show模型中，我们创建了一个名为`users()`的函数，指向我们的User模型。有了这个设置，我们现在可以轻松地对两个表运行查询。
- en: Next, we create a route that will add in a new user. Once we save the user,
    we create the relationship with the shows by using the `attach()` method, and
    pass in the ID of the show we want to attach. After this, if we were to look in
    our `show_user` table, we'd see two records—one with our new user's ID and the
    show ID `1`, and another with the show ID of `3`. By running the `get()` method
    in our route, we can loop through the records and see which show names are joined
    to our user.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个路由来添加一个新用户。一旦我们保存了用户，我们使用`attach()`方法来创建与节目的关系，并传入我们想要附加的节目的ID。之后，如果我们查看我们的`show_user`表，我们会看到两条记录——一条是我们新用户的ID和节目ID`1`，另一条是节目ID`3`。通过在我们的路由中运行`get()`方法，我们可以循环遍历记录，并查看哪些节目名称与我们的用户关联。
- en: Our next route will take a show and get all the users that are joined. In our
    case, we get the show with the ID of `1`, and then get all of the users. Using
    Laravel's `dd()` helper, we can see our results.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个路由将获取与一个节目关联的所有用户。在我们的情况下，我们获取ID为`1`的节目，然后获取所有用户。使用Laravel的`dd()`助手，我们可以看到我们的结果。
- en: There's more...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Database relationships can get fairly complicated and this recipe merely scratches
    the surface of what can be done. To learn more about how Laravel's Eloquent ORM
    uses relationships, view the documentation at [http://laravel.com/docs/eloquent#many-to-many](http://laravel.com/docs/eloquent#many-to-many).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库关系可能变得非常复杂，这个教程只是初步介绍了一些操作。要了解更多关于Laravel的Eloquent ORM如何使用关系，请查看文档[http://laravel.com/docs/eloquent#many-to-many](http://laravel.com/docs/eloquent#many-to-many)。
- en: Creating a CRUD system
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建CRUD系统
- en: To interact with our database, we might need to create a CRUD (create, read,
    update, and delete) system. That way, we add and alter our data without needing
    a separate database client. This recipe will be using a RESTful controller for
    our CRUD system.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与我们的数据库交互，我们可能需要创建一个CRUD（创建、读取、更新和删除）系统。这样，我们可以添加和修改数据，而不需要单独的数据库客户端。这个教程将使用一个RESTful控制器来实现我们的CRUD系统。
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll be building on the User tables created in the recipe
    *Using automatic validation in models*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将在*在模型中使用自动验证*的教程中创建的User表上进行扩展。
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个教程，请按照以下步骤进行：
- en: 'In the `app/controllers` directory, create a file named as `UsersController.php`
    and add the following code:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/controllers`目录中，创建一个名为`UsersController.php`的文件，并添加以下代码：
- en: '[PRE36]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In our `routes.php` file, add a route to the controller:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，添加一个指向控制器的路由：
- en: '[PRE37]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the `app/views` directory, create another directory named as `users`, create
    a file named `index.php` in that, and add the following code:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views`目录中，创建一个名为`users`的新目录，在其中创建一个名为`index.php`的文件，并添加以下代码：
- en: '[PRE38]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `app/views/users` directory, create a new file named `create.php` and
    the form as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views/users`目录中，创建一个名为`create.php`的新文件，并添加以下表单：
- en: '[PRE39]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the `app/views/users` directory, add a file named `record.php` and use the
    following form:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/views/users`目录中，添加一个名为`record.php`的文件，并使用以下表单：
- en: '[PRE40]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In our controller, our method names can be prepended with the HTTP verb we want
    to use. We then add in the route in our routes file, so it points to the correct
    place.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的控制器中，我们的方法名称可以以我们想要使用的HTTP动词为前缀。然后我们在我们的路由文件中添加路由，使其指向正确的位置。
- en: Our first method will generate a list of all our users. We pass the users to
    our view, and then loop through them and display them in a simple table.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个方法将生成所有用户的列表。我们将用户传递给我们的视图，然后循环遍历它们，并在一个简单的表中显示它们。
- en: Under that table, we have a link to our second method to add a new user. Our
    `getRreate()` method displays a simple form, and that form gets posted and saved.
    After saving, we're redirected back to the list page.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在该表下面，我们有一个链接到我们的第二个方法来添加一个新用户。我们的`getRreate()`方法显示一个简单的表单，然后该表单被发布并保存。保存后，我们将被重定向回列表页面。
- en: To edit a record, we create a `getRecord()` method that gets the record's ID
    passed to it. Our view is a form that is automatically filled in with the values
    of the user for the ID that was passed in. Since we're doing an update, we want
    to use the `put` verb; to accomplish this, we need a hidden field with the name
    `_method` and the value of the request we want to use. When the form is submitted,
    Laravel will send it to the `putRecord()` method, and update the information.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑一条记录，我们创建一个`getRecord()`方法，该方法获取传递给它的记录的ID。我们的视图是一个表单，自动填充了传入的ID的用户的值。由于我们正在进行更新，我们想要使用`put`动词；为了实现这一点，我们需要一个隐藏字段，名称为`_method`，值为我们想要使用的请求。当表单提交时，Laravel将其发送到`putRecord()`方法，并更新信息。
- en: Finally, to delete a record, we create a simple form that has the hidden field
    named `_method` and the value `DELETE`. When submitted, Laravel will send it to
    the `deleteRecord()` method, and the user will be removed from the database.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要删除一条记录，我们创建一个简单的表单，其中包含隐藏字段名为`_method`和值为`DELETE`。当提交时，Laravel将其发送到`deleteRecord()`方法，并将用户从数据库中删除。
- en: There's more...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Please be aware that this is the most basic of CRUD systems. For a full system,
    we'd need to add validation and error checking any time we add or edit our data.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是最基本的CRUD系统。对于一个完整的系统，我们需要在每次添加或编辑数据时添加验证和错误检查。
- en: Importing a CSV using Eloquent
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Eloquent导入CSV
- en: When working with data, there are many different sources and file types that
    we may encounter. A common type is a CSV, or comma separated value, file. In this
    recipe, we'll take a CSV file's contents and insert them into our database.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理数据时，我们可能会遇到许多不同的来源和文件类型。一个常见的类型是CSV，即逗号分隔值文件。在这个示例中，我们将获取CSV文件的内容并将其插入到我们的数据库中。
- en: Getting ready
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To get started, we need to have a standard Laravel installation that's configured
    with a MySQL database. We also need to have our migrations table created by running
    the Artisan command, `php artisan migrate:install`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要一个配置了MySQL数据库的标准Laravel安装。我们还需要通过运行Artisan命令`php artisan migrate:install`来创建我们的迁移表。
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，按照以下步骤操作：
- en: 'In a text editor, create a file named `scifi.csv`, save it to your application''s
    `public` folder. Add in the following data:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器中创建一个名为`scifi.csv`的文件，将其保存到应用程序的`public`文件夹中。添加以下数据：
- en: '[PRE41]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the command prompt, create a migration:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中创建一个迁移：
- en: '[PRE42]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Open the migration file that was just created and add in our schema:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开刚刚创建的迁移文件，并添加我们的模式：
- en: '[PRE43]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Run the migration to create the table:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行迁移以创建表：
- en: '[PRE44]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a model in the `app/models` directory named as `Scifi.php`:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/models`目录中创建一个名为`Scifi.php`的模型：
- en: '[PRE45]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Create a new route to process our CSV and save the results:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的路由来处理我们的CSV并保存结果：
- en: '[PRE46]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our first step is to create a simple CSV file, with the names of some science
    fiction characters and the movies in which they appeared. Then we create a migration
    and a schema that will add a `scifi` table with fields we want to save.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是创建一个简单的CSV文件，其中包含一些科幻角色的名称以及他们出现的电影。然后我们创建一个迁移和一个模式，将添加一个`scifi`表和我们想要保存的字段。
- en: For our model, we extend `Eloquent` and add in a protected variable named `$table`
    that is set to our table's name. Since we're not pluralizing `scifi` for our table's
    name, we need to let Eloquent know which table to use.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的模型，我们扩展`Eloquent`并添加一个名为`$table`的受保护变量，该变量设置为我们表的名称。由于我们不会为我们的表名复数化`scifi`，我们需要让Eloquent知道使用哪个表。
- en: In our route, we open the file and loop through the data using PHP's built-in
    functions `fopen()` and `fgetcsv()` respectively. In each loop, we create a new
    `Scifi` object, then set the values to the data we get from the CSV file. After
    looping, we close the file.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的路由中，我们打开文件并使用PHP的内置函数`fopen()`和`fgetcsv()`循环遍历数据。在每次循环中，我们创建一个新的`Scifi`对象，然后将值设置为我们从CSV文件中获取的数据。循环结束后，我们关闭文件。
- en: To see our data, we call the `all()` method on our `Scifi` object and return
    it to display all the data.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我们的数据，我们在`Scifi`对象上调用`all()`方法并返回它以显示所有数据。
- en: Using RSS as a data source
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RSS作为数据源
- en: Many blogs and news sites offer RSS feeds of their content. Using Laravel, we
    can get those feeds and display them as a feed reader, or even save them in our
    own database.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 许多博客和新闻网站提供其内容的RSS源。使用Laravel，我们可以获取这些源并将它们显示为一个订阅阅读器，甚至将它们保存在我们自己的数据库中。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we just need a standard Laravel installation, and RSS URL to
    use.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们只需要一个标准的Laravel安装和要使用的RSS URL。
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow this step:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，按照以下步骤操作：
- en: 'Create a new route in our `routes.php` file to read in the RSS:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中创建一个新的路由来读取RSS：
- en: '[PRE47]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We create a route to hold our RSS reader. Then we set our `$source` variable
    to whichever RSS feed we want to consume.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个路由来保存我们的RSS阅读器。然后我们将我们的`$source`变量设置为我们想要使用的任何RSS源。
- en: To make sure our source is still active, we use the PHP function `get_headers()`,
    and grab the response code. If the code is `404`, then the URL doesn't work.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们的源仍然活跃，我们使用PHP函数`get_headers()`，并获取响应代码。如果代码是`404`，则URL不起作用。
- en: Next, we get the contents from the URL, and use the `simplexml_load_string()`
    function to process the XML in the feed. If that feed actually has data, we can
    loop through it and display the information. We could also save it to our database
    as we loop.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从URL获取内容，并使用`simplexml_load_string()`函数处理源中的XML。如果该源实际上有数据，我们可以循环遍历它并显示信息。我们也可以在循环中将其保存到我们的数据库中。
- en: Using attributes to change table column names
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用属性更改表列名称
- en: Sometimes we may be working with a database that was created using less-than-logical
    column names. In those cases, we can use Laravel's Eloquent ORM to allows us to
    interact with the table using more standardized names, without having to make
    database changes.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们可能会使用使用不太合乎逻辑的列名创建的数据库。在这种情况下，我们可以使用Laravel的Eloquent ORM来使用更标准化的名称与表交互，而无需进行数据库更改。
- en: Getting ready
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need a standard Laravel installation, a properly configured
    MySQL database, and our migrations table set up by running the command `php artisan
    migrate:install`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们需要一个标准的Laravel安装，一个正确配置的MySQL数据库，并且通过运行命令`php artisan migrate:install`设置我们的迁移表。
- en: How to do it...
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个示例，按照以下步骤操作：
- en: 'Create a migration for our table with the column name `odd`, in the command
    prompt:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的表创建一个名为`odd`的列的迁移，在命令提示符中：
- en: '[PRE48]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create a migration to add some data to the table, in the command prompt:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个迁移以向表中添加一些数据，在命令提示符中：
- en: '[PRE49]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the `app/database/migrations` folder, open the `create_odd_table` migration
    and add the schema:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/database/migrations`文件夹中，打开`create_odd_table`迁移并添加模式：
- en: '[PRE50]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the `app/database/migrations` directory, open the `add_data_to_odd_table`
    file and add some data:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/database/migrations`目录中，打开`add_data_to_odd_table`文件并添加一些数据：
- en: '[PRE51]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the command prompt, run the migration:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，运行迁移：
- en: '[PRE52]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In the `app/models` directory, create a new file named as `Odd.php` and create
    the getters:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/models`目录中，创建一个名为`Odd.php`的新文件并创建getter：
- en: '[PRE53]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Make a new route in `routes.php` to access the table using the regular column
    name:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中创建一个新的路由来访问表，使用常规的列名：
- en: '[PRE54]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Make another route, using the more standard column names:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个路由，使用更标准的列名：
- en: '[PRE55]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How it works...
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To begin, we create two migration files. One file will actually create the tables
    with the non-standard column name, and the other will populate the data.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建两个迁移文件。一个文件将实际创建具有非标准列名的表，另一个将填充数据。
- en: For our model, we extend `Eloquent` and add a few `get` methods. Inside each
    `get` method, set our attributes, which tells Eloquent which column name we want
    to use. Now, since we have the `getUsernameAttribute()` method in our model, whenever
    we try access the username in our object, it will actually access the column name
    we defined.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的模型，我们扩展`Eloquent`并添加一些`get`方法。在每个`get`方法内，设置我们的属性，告诉Eloquent我们想要使用哪个列名。现在，由于我们在模型中有`getUsernameAttribute()`方法，每当我们尝试在对象中访问用户名时，它实际上会访问我们定义的列名。
- en: Then, we create a route that will pull all of the records from our `odd` table,
    and loop through. For our first route, we access the column using their real names.
    In our second route, we use the new names. If we access both of these routes,
    we would see the exact same information.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个路由，将从我们的`odd`表中提取所有记录，并循环遍历。对于我们的第一个路由，我们使用它们的真实名称访问列。在我们的第二个路由中，我们使用新的名称。如果我们访问这两个路由，我们将看到完全相同的信息。
- en: Using a non-Eloquent ORM in Laravel
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Laravel中使用非Eloquent ORM
- en: Laravel's Eloquent ORM is easy-to-use and very efficient. However, there are
    many different PHP ORMs and we may decide we prefer another ORM. In this recipe,
    we'll install the RedBean ORM and use it for our data.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Laravel的Eloquent ORM易于使用且非常高效。但是，有许多不同的PHP ORM，我们可能决定我们更喜欢另一个ORM。在这个步骤中，我们将安装RedBean
    ORM并将其用于我们的数据。
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we'll be using the RedBean ORM. You'll need to download it
    from [http://www.redbeanphp.com/manual/installing](http://www.redbeanphp.com/manual/installing),
    and unzip the file. Then move the file `rb.php` to the `app/libraries` directory
    of your app.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们将使用RedBean ORM。您需要从[http://www.redbeanphp.com/manual/installing](http://www.redbeanphp.com/manual/installing)下载它，并解压文件。然后将文件`rb.php`移动到您的应用程序的`app/libraries`目录中。
- en: How to do it...
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行：
- en: 'In the `composer.json` file, make our autoloader load our `libraries` directory.
    The `autoload` section should look similar to this:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`composer.json`文件中，使我们的自动加载器加载我们的`libraries`目录。`autoload`部分应该类似于这样：
- en: '[PRE56]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In the command prompt, dump our autoloader:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，转储我们的自动加载器：
- en: '[PRE57]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'In our `routes.php` file, we''ll add a simple configuration:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`routes.php`文件中，我们将添加一个简单的配置：
- en: '[PRE58]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Create a route that will add some data and then display it:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由，将添加一些数据然后显示它：
- en: '[PRE59]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works...
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: After adding the RedBean file to our `libraries` directory, we need to update
    our composer file's autoloader so that it will load the `rb.php` file.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在将RedBean文件添加到我们的`libraries`目录后，我们需要更新我们的composer文件的自动加载器，以便它将加载`rb.php`文件。
- en: Setting up the database configuration can be done in various places but, for
    this recipe, we'll set it up at the top of our routes file. So we can keep our
    database information in one place, we use Laravel's database configuration to
    get it set up.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 设置数据库配置可以在各个地方完成，但是对于这个步骤，我们将在我们的路由文件的顶部设置它。因此，我们可以将我们的数据库信息保存在一个地方，我们使用Laravel的数据库配置来设置它。
- en: Once all that is done, we're ready to use RedBean in our application. In our
    route, we're creating three superheroes and adding them to the `superheroes` table.
    With RedBean, if the table doesn't exist, it will automatically create it for
    you and add in the relevant columns.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些后，我们准备在我们的应用程序中使用RedBean。在我们的路由中，我们正在创建三个超级英雄并将它们添加到`superheroes`表中。使用RedBean，如果表不存在，它将自动为您创建它并添加相关列。
- en: Finally, we get three records and can loop through them to display the information.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们得到了三条记录，可以循环遍历它们以显示信息。
- en: There's more...
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: RedBeans has many features that might be useful as a replacement ORM. To see
    all the features, visit its official manual at [http://redbeanphp.com/manual/](http://redbeanphp.com/manual/).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: RedBeans有许多功能，可能作为替代ORM很有用。要查看所有功能，请访问其官方手册[http://redbeanphp.com/manual/](http://redbeanphp.com/manual/)。
