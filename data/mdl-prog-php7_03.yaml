- en: Chapter 3. SOLID Design Principles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章 SOLID设计原则
- en: 'Building modular software requires strong knowledge of the class design. There
    are numerous guidelines out there, addressing the way we name our classes, number
    of variables they should have, what the size of methods should be, and so on.
    The PHP ecosystem managed to pack these into official PSR standard, more precisely
    **PSR-1: Basic Coding Standard** and **PSR-2: Coding Style Guide**. These are
    all general programming guidelines that keep our code readable, understandable,
    and maintainable.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建模块化软件需要对类设计有很强的了解。有许多指南，涉及我们如何命名我们的类，它们应该有多少变量，方法的大小应该是多少等等。PHP生态系统成功地将这些打包成官方的PSR标准，更确切地说是PSR-1：基本编码标准和PSR-2：编码风格指南。这些都是保持我们的代码可读、可理解和可维护的一般编程指南。
- en: Aside from programming guidelines, there are more specific design principles
    that we can apply during the class design. Ones that address the notions of low
    coupling, high cohesion, and strong encapsulation. We call them SOLID design principles,
    a term coined by Robert Cecil Martin in the early 2000s.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了编程指南，我们还可以在类设计过程中应用更具体的设计原则。这些原则涉及低耦合、高内聚和强封装的概念。我们称之为SOLID设计原则，这是罗伯特·塞西尔·马丁在21世纪初提出的一个术语。
- en: '**SOLID** is an acronym for the following five principles:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SOLID是以下五个原则的首字母缩写：
- en: '**S**: Single responsibility principle (**SRP**)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: S：单一职责原则（SRP）
- en: '**O**: Open/closed principle (**OCP**)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: O：开放/封闭原则（OCP）
- en: '**L**: Liskov substitution principle (**LSP**)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: L：里氏替换原则（LSP）
- en: '**I**: Interface Segregation Principle (**ISP**)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I：接口隔离原则（ISP）
- en: '**D**: Dependency inversion principle (**DIP**)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D：依赖倒置原则（DIP）
- en: Over a decade old, the idea of SOLID principles is far from obsolete, as they
    are at the heart of good class design. Throughout this chapter, we will look into
    each of these principles, getting to understand them by observing some of the
    obvious violations that break them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 十多年前，SOLID原则的概念远未过时，因为它们是良好类设计的核心。在本章中，我们将深入研究这些原则，通过观察一些明显违反原则的违规行为来了解它们。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Single responsibility principle
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单一职责原则
- en: Open/closed principle
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开放/封闭原则
- en: Liskov substitution principle
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 里氏替换原则
- en: Interface Segregation Principle
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口隔离原则
- en: Dependency inversion principle
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖倒置原则
- en: Single responsibility principle
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单一职责原则
- en: 'The *single responsibility principle* deals with classes that try to do too
    much. The responsibility in this context refers to reason to change. As per the
    Robert C. Martin definition:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 单一职责原则处理试图做太多事情的类。这里的责任指的是改变的原因。根据罗伯特·C·马丁的定义：
- en: '*"A class should have only one reason to change."*'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “一个类应该只有一个改变的原因。”
- en: 'The following is an example of a class that violates the SRP:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个违反SRP的类的示例：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `Ticket` class deals with validation and saving of the `ticket` entity to
    the database. These two responsibilities are its two reasons to change. Whenever
    the requirements change regarding the ticket validation, or regarding the saving
    of the ticket, the `Ticket` class will have to be modified. To address the SRP
    violation here, we can use the assisting classes and interfaces to split the responsibilities.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ticket`类处理`ticket`实体的验证和保存。这两个责任是它改变的原因。每当关于票证验证或保存的要求发生变化时，`Ticket`类都必须进行修改。为了解决这里的SRP违规问题，我们可以使用辅助类和接口来分割责任。'
- en: 'The following is an example of refactored implementation, which complies with
    SRP:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是符合SRP的重构实现的示例：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we introduced a simple `KeyValuePersistentMembers` interface with a single
    `toArray` method, which is then used with both `EntityManager` and `Validator`
    classes, both of which take on a single responsibility now. The `Ticket` class
    became a simple data holding model, whereas client now controls *instantiation*,
    *validation*, and *save* as three different steps. While this is certainly no
    universal formula of how to separate responsibilities, it does provide a simple
    and clear example of how to approach it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们引入了一个简单的`KeyValuePersistentMembers`接口，其中有一个`toArray`方法，然后将其用于`EntityManager`和`Validator`类，这两个类现在都承担了单一职责。`Ticket`类变成了一个简单的数据持有模型，而客户端现在控制*实例化*、*验证*和*保存*作为三个不同的步骤。虽然这当然不是如何分离责任的通用公式，但它提供了一个简单明了的例子来解决这个问题。
- en: Designing with the single responsibilities principle in mind yields smaller
    classes with greater readability and easier to test code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑单一职责原则的情况下进行设计会产生更小、更易读和更易测试的代码。
- en: Open/closed principle
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开放/封闭原则
- en: 'The **open/closed principle** states that a class should be open for extension
    but closed for modification, as per the definition found on Wikipedia:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 开放/封闭原则规定一个类应该对扩展开放，但对修改封闭，根据维基百科上的定义：
- en: '*"software entities (classes, modules, functions, etc.) should be open for
    extension, but closed for modification"*'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “软件实体（类、模块、函数等）应该对扩展开放，但对修改封闭”
- en: The open for extension part means that we should design our classes so that
    new functionality can be added if needed. The closed for modification part means
    that this new functionality should fit in without modifying the original class.
    The class should only be modified in case of a bug fix, not for adding new functionality.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于扩展开放的部分意味着我们应该设计我们的类，以便在需要时可以添加新功能。对于修改封闭的部分意味着这个新功能应该适合而不修改原始类。类只应在修复错误时进行修改，而不是添加新功能。
- en: 'The following is an example of a class that violates the open/closed principle:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个违反开放/封闭原则的类的示例：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here we have two concrete classes, `CsvExporter` and `XmlExporter`, each with
    a single responsibility. Then we have a `GenericExporter` with its `exportToFormat`
    method that actually triggers the `export` function on a proper instance type.
    The problem here is that we cannot add a new type of exporter to the mix without
    modifying the `GenericExporter` class. To put it in other words, `GenericExporter`
    is not open for extension and closed for modification.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有两个具体类，`CsvExporter`和`XmlExporter`，每个都有一个单一的职责。然后我们有一个`GenericExporter`，其`exportToFormat`方法实际上触发了适当实例类型上的`export`函数。问题在于我们无法在不修改`GenericExporter`类的情况下添加新类型的导出器。换句话说，`GenericExporter`对扩展不开放，对修改封闭。
- en: 'The following is an example of refactored implementation, which complies with
    OCP:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是符合OCP的重构实现的一个例子：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we added two interfaces, `ExporterFactoryInterface` and `ExporterInterface`.
    We then modified the `CsvExporter` and `XmlExporter` to implement that interface.
    The `ExporterFactory` was added, implementing the `ExporterFactoryInterface`.
    Its main role is defined by the `buildForFormat` method, which returns the exporter
    as a callback function. Finally, the `GenericExporter` was rewritten to accept
    the `ExporterFactoryInterface` via its constructor, and its `exportToFormat` method
    now builds the exporter by use of an exporter factory and calls the `execute`
    method on it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了两个接口，`ExporterFactoryInterface`和`ExporterInterface`。然后修改了`CsvExporter`和`XmlExporter`以实现该接口。添加了`ExporterFactory`，实现了`ExporterFactoryInterface`。它的主要作用由`buildForFormat`方法定义，该方法返回导出器作为回调函数。最后，`GenericExporter`被重写以通过其构造函数接受`ExporterFactoryInterface`，其`exportToFormat`方法现在通过导出器工厂构建导出器并调用其`execute`方法。
- en: The client itself has taken a more robust role now, by first instantiating the
    `ExporterFactory` and adding two exporters to it, which it then passed onto `GenericExporter`.
    Adding a new export format to `GenericExporter` now, no longer requires modifying
    it, therefore making it open for extension and closed for modification. Again,
    this is by no means a universal formula, rather a concept of possible approach
    towards satisfying the OCP.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端本身现在扮演了更加强大的角色，首先实例化了`ExporterFactory`并向其中添加了两个导出器，然后将其传递给`GenericExporter`。现在向`GenericExporter`添加新的导出格式不再需要修改它，因此使其对扩展开放，对修改封闭。这绝不是一个通用的公式，而是一种可能的满足OCP的方法概念。
- en: Liskov substitution principle
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 里氏替换原则
- en: 'The **Liskov substitution principle** talks about inheritance. It specifies
    how we should design our classes so that client dependencies can be replaced by
    subclasses without the client seeing the difference, as per the definition found
    on Wikipedia:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**里氏替换原则**讨论了继承。它指定了我们应该如何设计我们的类，以便客户端依赖项可以被子类替换而客户端看不到差异，根据维基百科上的定义：'
- en: '*"objects in a program should be replaceable with instances of their subtypes
    without altering the correctness of that program"*'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “程序中的对象应该能够被其子类型的实例替换，而不会改变程序的正确性”
- en: While there might be some specific functionality added to the subclass, it has
    to conform to the same behavior as its base class. Otherwise the Liskov principle
    is violated.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然子类可能添加了一些特定的功能，但它必须符合与其基类相同的行为。否则，违反了里氏原则。
- en: 'When it comes to PHP and sub-classing, we have to look beyond simple concrete
    classes and differentiate: concrete class, abstract class, and interface. Each
    of the three can be put in the context of a base class, while everything extending
    or implementing it can be looked at as a derived class.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及PHP和子类化时，我们必须超越简单的具体类，并区分：具体类、抽象类和接口。这三者都可以放在基类的上下文中，而扩展或实现它的所有内容都可以被视为派生类。
- en: 'The following is an example of LSP violation, where the derived class does
    not have an implementation for all methods:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是LSP违规的一个例子，派生类没有实现所有方法：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we see an `employee` class which does not implement the `getName` method
    enforced by the interface. We could have easily used an abstract class instead
    of the interface and abstract method type for the `getName` method, the effect
    would have been the same. Luckily, the PHP would throw an error in this case,
    warning us that we haven't really implemented the interface fully.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到一个`employee`类，它没有实现接口强制执行的`getName`方法。我们本可以使用抽象类而不是接口和抽象方法类型来代替`getName`方法，效果将是相同的。幸运的是，在这种情况下，PHP会抛出错误，警告我们并没有完全实现接口。
- en: 'The following is an example of Liskov principle violation, where different
    derived classes return things of different types:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是违反里氏原则的一个例子，不同的派生类返回不同类型的东西：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we see a simple example of an edge case. Calling `getUsers` on both derived
    classes will return a result we can loop through. However, PHP developers tend
    to use the `count` method often on array structures, and using it on `Employees`
    instances the `getUsers` result will not work. This is because the `Employees`
    class returns `UsersCollection` which implements `Iterator`, not the actual array
    structure. Since `UsersCollection` does not implement `Countable`, we cannot use
    `count` on it, which leads to potential bugs down the line.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到一个边缘案例的简单例子。在两个派生类上调用`getUsers`将返回一个我们可以循环遍历的结果。然而，PHP开发人员倾向于经常在数组结构上使用`count`方法，并且在`Employees`实例上使用`getUsers`结果将不起作用。这是因为`Employees`类返回实现了`Iterator`的`UsersCollection`，而不是实际的数组结构。由于`UsersCollection`没有实现`Countable`，我们无法在其上使用`count`，这可能会导致潜在的错误。
- en: 'We can further spot LSP violations in cases where the derived class behaves
    less permissively with regard to method arguments. These can usually be spotted
    by use of the instance of `type` operator, as shown in the following example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在派生类对方法参数的处理上发现LSP违规的情况。这些通常可以通过使用`type`运算符的实例来发现，如下例所示：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the derived class `Processor` puts restrictions on method arguments, while
    it should accept everything conforming to the `LoggerInterface`. By being less
    permissive, it alters the behavior implied by the base class, in this case `LoggerInterface`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，派生类`Processor`对方法参数施加了限制，而它应该接受符合`LoggerInterface`的一切。通过变得不那么宽容，它改变了基类implied的行为，在这种情况下是`LoggerInterface`。
- en: The outlined examples are merely a fragment of what constitutes a violation
    of LSP. To satisfy the principle, we need to make sure that derived classes do
    not, in any way, alter the behavior imposed by the base class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所述示例仅仅是构成LSP违规的一部分。为了满足这一原则，我们需要确保派生类不以任何方式改变基类所施加的行为。
- en: Interface Segregation Principle
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口隔离原则
- en: 'The **Interface Segregation Principle** states that clients should only implement
    interfaces they actually use. They should not be forced to implement interfaces
    they do not use. As per the definition found on Wikipedia:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**接口隔离原则**规定客户端只应实现它们实际使用的接口。它们不应被强制实现它们不使用的接口。根据维基百科上的定义：'
- en: '*"many client-specific interfaces are better than one general-purpose interface"*'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"许多特定于客户端的接口比一个通用接口更好"*'
- en: What this means is that we should split large and fat interfaces into several
    small and lighter ones, segregating it so that smaller interfaces are based on
    groups of methods, each serving one specific functionality.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们应该将大而臃肿的接口分割成几个小而轻的接口，将其分离，使得较小的接口基于一组方法，每个方法提供一种特定的功能。
- en: 'Let''s take a look at the following leaky abstraction that violates the ISP:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个违反ISP的漏洞抽象：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we have an interface setting requirements for several appliance related
    methods. Then we have several classes implementing that interface. The problem
    is quite obvious; not all appliances can be squeezed into the same interface.
    It makes no sense for a washing machine to be forced to implement bake and mix
    methods. These methods need to be split each into its own interface. That way
    concrete appliance classes get to implement only the methods that actually make
    sense.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个接口为几个与电器相关的方法设置要求。然后我们有几个实现该接口的类。问题是非常明显的；并非所有的电器都可以被挤进同一个接口。强迫洗衣机实现烘烤和混合方法是没有意义的。这些方法需要分别分成自己的接口。这样具体的电器类只需要实现实际有意义的方法。
- en: Dependency inversion principle
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖反转原则
- en: 'The **dependency inversion principle** states that entities should depend on
    abstractions and not on concretions. That is, a high level module should not depend
    on a low level module, rather the abstraction. As per the definition found on
    Wikipedia:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖反转原则**规定实体应该依赖于抽象而不是具体实现。也就是说，高级模块不应该依赖于低级模块，而应该依赖于抽象。根据维基百科上的定义：'
- en: '*"One should depend upon abstractions. Do not depend upon concretions."*'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"一个应该依赖于抽象。不要依赖于具体实现。"*'
- en: This principle is important as it plays a major role in decoupling our software.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原则很重要，因为它在解耦我们的软件中起着重要作用。
- en: 'The following is an example of a class that violates the DIP:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个违反DIP的类的示例：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here we can see a `notify` method within the `NotifySubscriber` class coding
    in a dependency towards the `Mailer` class. This makes for tightly coupled code,
    which is what we are trying to avoid. To rectify the problem, we can pass the
    dependency through the class constructor, or possibly via some other method. Furthermore,
    we should move away from concrete class dependency towards an abstracted one,
    as shown in the rectified example shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`NotifySubscriber`类中的`notify`方法编写了对`Mailer`类的依赖。这导致了紧密耦合的代码，这正是我们试图避免的。为了纠正问题，我们可以通过类构造函数传递依赖，或者可能通过其他方法。此外，我们应该远离具体类依赖，转向抽象类依赖，就像在这里所示的纠正示例中所示的那样：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here we see a dependency being injected through the constructor. The injection
    is abstracted by a type hinting interface, and the actual concrete class. This
    makes our code loosely coupled. The DIP can be used anytime a class needs to call
    a method of another class, or shall we say send a message to it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到一个依赖通过构造函数注入。注入是通过类型提示接口和实际的具体类来抽象的。这使得我们的代码耦合度较低。DIP可以在任何时候使用，当一个类需要调用另一个类的方法，或者我们应该说向其发送消息时。
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: When it comes to modular development, extensibility is something to constantly
    think about. Writing a code that locks itself in will likely result in a future
    failure to integrate it with other projects or libraries. While SOLID design principles
    might look like an overreach for some of the parts, actively applying these principles
    is likely to result in components that are easy to maintain and extend over time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块化开发方面，可扩展性是需要不断考虑的事情。编写一个将自己锁定的代码很可能会导致将来无法将其与其他项目或库集成。虽然SOLID设计原则可能看起来有些过分，但积极应用这些原则很可能会导致组件易于在时间上进行维护和扩展。
- en: Embracing the SOLID principles for class design prepares our code for future
    changes. It does so by localizing and minimizing these changes within our classes,
    so any integration using it does not feel the significant impact of the change.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 采用SOLID原则进行类设计，可以使我们的代码为未来的变化做好准备。它通过将这些变化局部化和最小化在我们的类中，使得使用它的任何集成都不会感受到变化的重大影响。
- en: Moving forward, in the next chapter, we will look into defining our application
    specification which we will build across all other chapters.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将研究定义我们的应用程序规范，我们将在所有其他章节中构建它。
