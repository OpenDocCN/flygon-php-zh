- en: Chapter 11. Building the Sales Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。构建销售模块
- en: The Sales module is the final one in the series of modules we will build in
    order to deliver a simple yet functional web shop application. We will do so by
    adding the cart and the checkout features on top of the catalog. The checkout
    itself will finally make use of the shipping and payment services defined throughout
    the previous chapters. The overall focus here will be on absolute basics, since
    the real shopping cart application would take a far more robust approach. However,
    understanding how to tie it all together in a simple way is the first step toward
    opening up a door for more robust web shop application implementations later on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 销售模块是我们将构建的一系列模块中的最后一个，以便提供一个简单但功能齐全的网络商店应用程序。我们将在目录的基础上添加购物车和结账功能来实现这一点。结账本身最终将利用在前几章中定义的运输和付款服务。这里的整体重点将放在绝对基础上，因为真正的购物车应用程序会采用更加健壮的方法。然而，了解如何以简单的方式将所有内容联系在一起是打开以后实现更加健壮的网络商店应用程序的第一步。
- en: 'In this chapter, we will be covering the following topics of the Sales module:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍销售模块的以下主题：
- en: Requirements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求
- en: Dependencies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖关系
- en: Implementation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施
- en: Unit testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Functional testing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试
- en: Requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求
- en: Application requirements, defined in [Chapter 4](ch04.html "Chapter 4. Requirement
    Specification for a Modular Web Shop App"), *Requirement Specification for Modular
    Web Shop App*, give us some wireframes relating to the cart and checkout. Based
    on these wireframes, we can speculate about what type of entities we need to create
    in order to deliver on functionality.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 应用要求，在[第4章](ch04.html "第4章。模块化网络商店应用的需求规范")中定义，*模块化网络商店应用的需求规范*，为我们提供了一些关于购物车和结账的线框图。基于这些线框图，我们可以推测出我们需要创建哪些类型的实体来实现功能。
- en: 'The following is a list of required module entities:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所需模块实体的列表：
- en: Cart
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物车
- en: Cart Item
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物车项目
- en: Order
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单
- en: Order Item
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单项目
- en: 'The `Cart` entity includes the following properties and their data types:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cart`实体包括以下属性及其数据类型：'
- en: '`id`: integer, auto-increment'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：整数，自动递增'
- en: '`customer_id`: string'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customer_id`：字符串'
- en: '`created_at`: datetime'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_at`：日期时间'
- en: '`modified_at`: datetime'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modified_at`：日期时间'
- en: 'The `Cart Item` entity includes the following properties:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cart Item`实体包括以下属性：'
- en: '`id`: integer, auto-increment'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：整数，自动递增'
- en: '`cart_id`: integer, foreign key that references the category `table id` column'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cart_id`：整数，外键，引用类别`表id`列'
- en: '`product_id`: integer, foreign key that references product `table id` column'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`product_id`：整数，外键，引用产品`表id`列'
- en: '`qty`: string'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qty`：字符串'
- en: '`unit_price`: decimal'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unit_price`：十进制'
- en: '`created_at`: datetime'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_at`：日期时间'
- en: '`modified_at`: datetime'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modified_at`：日期时间'
- en: 'The `Order` entity includes the following properties:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`Order`实体包括以下属性：'
- en: '`id`: integer, auto-increment'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：整数，自动递增'
- en: '`customer_id`: integer, foreign key that references the customer `table id`
    column'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customer_id`：整数，外键，引用客户`表id`列'
- en: '`items_price`: decimal'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`items_price`：十进制'
- en: '`shipment_price`: decimal'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shipment_price`：十进制'
- en: '`total_price`: decimal'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`total_price`：十进制'
- en: '`status`: string'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`状态`：字符串'
- en: '`customer_email`: string'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customer_email`：字符串'
- en: '`customer_first_name`: string'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customer_first_name`：字符串'
- en: '`customer_last_name`: string'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customer_last_name`：字符串'
- en: '`address_first_name`: string'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_first_name`：字符串'
- en: '`address_last_name`: string'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_last_name`：字符串'
- en: '`address_country`: string'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_country`：字符串'
- en: '`address_state`: string'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_state`：字符串'
- en: '`address_city`: string'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_city`：字符串'
- en: '`address_postcode`: string'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_postcode`：字符串'
- en: '`address_street`: string'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_street`：字符串'
- en: '`address_telephone`: string'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address_telephone`：字符串'
- en: '`payment_method`: string'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`payment_method`：字符串'
- en: '`shipment_method`: string'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shipment_method`：字符串'
- en: '`created_at`: datetime'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_at`：日期时间'
- en: '`modified_at`: datetime'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modified_at`：日期时间'
- en: 'The `Order Item` entity includes the following properties:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`Order Item`实体包括以下属性：'
- en: '`id`: integer, auto-increment'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：整数，自动递增'
- en: '`sales_order_id`: integer, foreign key that references the order `table id`
    column'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sales_order_id`：整数，外键，引用订单`表id`列'
- en: '`product_id`: integer, foreign key that references product `table id` column'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`product_id`：整数，外键，引用产品`表id`列'
- en: '`title`: string'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：字符串'
- en: '`qty`: int'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qty`：整数'
- en: '`unit_price`: decimal'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unit_price`：十进制'
- en: '`total_price`: decimal'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`total_price`：十进制'
- en: '`created_at`: datetime'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_at`：日期时间'
- en: '`modified_at`: datetime'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modified_at`：日期时间'
- en: Aside from just adding these entities and their CRUD pages, we also need to
    override a core module service responsible for building the category menu and
    on-sale items.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加这些实体和它们的CRUD页面之外，我们还需要覆盖一个负责构建类别菜单和特价商品的核心模块服务。
- en: Dependencies
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖关系
- en: The Sales module will have several dependencies across the code. These dependencies
    are directed toward customer and catalog modules.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 销售模块将在代码中有几个依赖项。这些依赖项指向客户和目录模块。
- en: Implementation
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施
- en: 'We start by creating a new module called `Foggyline\SalesBundle`. We do so
    with the help of the console, by running the command as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为`Foggyline\SalesBundle`的新模块。我们可以通过控制台运行以下命令来实现：
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The command triggers an interactive process, asking us several questions along
    the way, as shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令触发一个交互式过程，在此过程中向我们提出了几个问题，如下所示：
- en: '![Implementation](graphics/B05460_11_01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![实施](graphics/B05460_11_01.jpg)'
- en: 'Once done, the `app/AppKernel.php` and `app/config/routing.yml` files get modified
    automatically. The `registerBundles` method of an `AppKernel` class has been added
    to the following line under the `$bundles` array:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，`app/AppKernel.php`和`app/config/routing.yml`文件将自动修改。`AppKernel`类的`registerBundles`方法已添加到`$bundles`数组下的以下行：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `routing.yml` file has been updated with the following entry:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`routing.yml`文件已更新，添加了以下条目：'
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In order to avoid collision with the core application code, we need to change
    `prefix: /` into `prefix: /sales/`.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '为了避免与核心应用程序代码发生冲突，我们需要将`prefix: /`更改为`prefix: /sales/`。'
- en: Creating a Cart entity
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建购物车实体
- en: 'Let''s go ahead and create a `Cart` entity. We do so by using the console,
    as shown here:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个`Cart`实体。我们可以通过控制台来实现，如下所示：
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This triggers the interactive generator as shown in the following sreenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 触发交互式生成器，如下所示的屏幕截图：
- en: '![Creating a Cart entity](graphics/B05460_11_02.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![创建购物车实体](graphics/B05460_11_02.jpg)'
- en: 'This creates the `Entity/Cart.php` and `Repository/CartRepository.php` files
    within the `src/Foggyline/SalesBundle/` directory. After this, we need to update
    the database, so it pulls in the `Cart` entity, by running the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`src/Foggyline/SalesBundle/`目录中创建`Entity/Cart.php`和`Repository/CartRepository.php`文件。之后，我们需要更新数据库，以便通过运行以下命令引入`Cart`实体：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With the `Cart` entity in place, we can go ahead and generate the `CartItem`
    entity.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`Cart`实体，我们可以继续生成`CartItem`实体。
- en: Creating the cart item entity
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建购物车项目实体
- en: 'Let''s go ahead and create a `CartItem` entity. We do so by using the now well-known
    `console` command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建`CartItem`实体。我们通过使用现在众所周知的`console`命令来完成：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This triggers the interactive generator as shown in the following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 触发交互式生成器，如下所示的屏幕截图：
- en: '![Creating the cart item entity](graphics/B05460_11_03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![创建购物车项目实体](graphics/B05460_11_03.jpg)'
- en: 'This creates `Entity/CartItem.php` and `Repository/CartItemRepository.php`
    within the `src/Foggyline/SalesBundle/` directory. Once the auto generate has
    done its work, we need to go back and edit the `CartItem` entity to update the
    `cart` field relation as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`src/Foggyline/SalesBundle/`目录中创建`Entity/CartItem.php`和`Repository/CartItemRepository.php`。自动生成完成后，我们需要返回并编辑`CartItem`实体，以更新`cart`字段关系如下：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we have defined the so-called *bidirectional one-to-many* association.
    The foreign key in a one-to-many association is being defined on the many side,
    which in this case is the `CartItem` entity. The bidirectional mapping requires
    the `mappedBy` attribute on the `OneToMany` association and the `inversedBy` attribute
    on the `ManyToOne` association. The `OneToMany` side in this case is the `Cart`
    entity, so we go back to the `src/Foggyline/SalesBundle/Entity/Cart.php` file
    and add the following to it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了所谓的*双向一对多*关联。一对多关联中的外键在这种情况下是在多方上定义的，也就是`CartItem`实体。双向映射需要在`OneToMany`关联上使用`mappedBy`属性，在`ManyToOne`关联上使用`inversedBy`属性。在这种情况下，`OneToMany`方是`Cart`实体，因此我们返回`src/Foggyline/SalesBundle/Entity/Cart.php`文件，并添加以下内容：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We then need to update the database, so it pulls in the `CartItem` entity,
    by running the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要更新数据库，以便通过运行以下命令引入`CartItem`实体：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With the `CartItem` entity in place, we can go ahead and generate the `Order`
    entity.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`CartItem`实体，我们可以继续生成`Order`实体。
- en: Creating an Order entity
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建订单实体
- en: 'Let''s go ahead and create an `Order` entity. We do so by using the console,
    as shown here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建`Order`实体。我们通过控制台这样做：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we tried to provide `FoggylineSalesBundle:Order` as an entity shortcut name,
    the generated output would throw an error as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试提供`FoggylineSalesBundle:Order`作为实体快捷方式名称，生成的输出将会抛出错误，如下所示的屏幕截图：
- en: '![Creating an Order entity](graphics/B05460_11_04.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![创建订单实体](graphics/B05460_11_04.jpg)'
- en: 'Instead, we will use `SensioGeneratorBundle:SalesOrder` for the entity shortcut
    name, and follow the generator through as shown here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们将使用`SensioGeneratorBundle:SalesOrder`作为实体快捷方式名称，并按照以下方式跟随生成器：
- en: '![Creating an Order entity](graphics/B05460_11_05.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![创建订单实体](graphics/B05460_11_05.jpg)'
- en: 'This is followed by the rest of the customer-information-related fields. To
    get a better idea, look at the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是与客户信息相关的其余字段。要更好地了解，请查看以下屏幕截图：
- en: '![Creating an Order entity](graphics/B05460_11_06.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![创建订单实体](graphics/B05460_11_06.jpg)'
- en: 'This is followed by the rest of the order-address-related fields as shown here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是与订单地址相关的其余字段，如下所示：
- en: '![Creating an Order entity](graphics/B05460_11_07.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![创建订单实体](graphics/B05460_11_07.jpg)'
- en: It is worth noting that normally we would like to extract the address information
    in its own table, that is make it its own entity. However, to keep things simple,
    we will proceed by keeping it as part of the `SalesOrder` entity.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，通常我们希望将地址信息提取到自己的表中，即将其作为自己的实体。但是，为了保持简单，我们将继续将其作为`SalesOrder`实体的一部分。
- en: 'Once done, this creates `Entity/SalesOrder.php` and `Repository/SalesOrderRepository.php`
    files within the `src/Foggyline/SalesBundle/` directory. After this, we need to
    update the database, so it pulls in the `SalesOrder` entity, by running the following
    command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，在`src/Foggyline/SalesBundle/`目录中创建`Entity/SalesOrder.php`和`Repository/SalesOrderRepository.php`文件。之后，我们需要更新数据库，以便通过运行以下命令引入`SalesOrder`实体：
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With the `SalesOrder` entity in place, we can go ahead and generate the `SalesOrderItem`
    entity.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`SalesOrder`实体，我们可以继续生成`SalesOrderItem`实体。
- en: Creating a SalesOrderItem entity
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建SalesOrderItem实体
- en: 'Let''s go ahead and create a `SalesOrderItem` entity. We start the code generator
    by using the following `console` command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建`SalesOrderItem`实体。我们通过使用以下`console`命令启动代码生成器：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When asked for the entity shortcut name, we provide `FoggylineSalesBundle:SalesOrderItem`,
    and then follow the generator field definitions as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当要求实体快捷方式名称时，我们提供`FoggylineSalesBundle:SalesOrderItem`，然后按照以下屏幕截图中显示的生成器字段定义：
- en: '![Creating a SalesOrderItem entity](graphics/B05460_11_08.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![创建SalesOrderItem实体](graphics/B05460_11_08.jpg)'
- en: 'This creates `Entity/SalesOrderItem.php` and `Repository/SalesOrderItemRepository.php`
    files within the `src/Foggyline/SalesBundle/` directory. Once the auto-generate
    has done its work, we need to go back and edit the `SalesOrderItem` entity to
    update the `SalesOrder` field relation as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`src/Foggyline/SalesBundle/`目录中创建`Entity/SalesOrderItem.php`和`Repository/SalesOrderItemRepository.php`文件。自动生成完成后，我们需要返回并编辑`SalesOrderItem`实体，以更新`SalesOrder`字段关系如下：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we have defined two types of relations. The first one, relating to `$salesOrder`,
    is the bidirectional one-to-many association, which we saw in the `Cart` and `CartItem`
    entities. The second one, relating to `$product`, is the unidirectional one-to-one
    association. The reference is said to be unidirectional because `CartItem` references
    `Product`, while P`roduct` won't be referencing `CartItem`, as we do not want
    to change something that is part of another module.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了两种类型的关系。第一种是与`$salesOrder`相关的双向一对多关联，这是我们在`Cart`和`CartItem`实体中看到的。第二种是与`$product`相关的单向一对一关联。引用被称为单向，因为`CartItem`引用`Product`，而`Product`不会引用`CartItem`，因为我们不想改变属于另一个模块的东西。
- en: 'We still need to go back to the `src/Foggyline/SalesBundle/Entity/SalesOrder.php`
    file and add the following to it:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要回到`src/Foggyline/SalesBundle/Entity/SalesOrder.php`文件，并添加以下内容：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We then need to update the database, so it pulls in the `SalesOrderItem` entity,
    by running the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要更新数据库，以便通过运行以下命令引入`SalesOrderItem`实体：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With the `SalesOrderItem` entity in place, we can go ahead and start building
    the cart and checkout pages.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有了`SalesOrderItem`实体，我们现在可以开始构建购物车和结账页面。
- en: Overriding the add_to_cart_url service
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖`add_to_cart_url`服务
- en: The `add_to_cart_url` service was originally declared in `FoggylineCustomerBundle`
    with dummy data. This is because we needed a way to build Add to Cart URLs on
    products before sales functionality was available. While certainly not ideal,
    it is one possible way of doing it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_to_cart_url`服务最初是在`FoggylineCustomerBundle`中声明的，带有虚拟数据。这是因为在销售功能可用之前，我们需要一种构建产品的添加到购物车URL的方法。虽然肯定不是理想的方式，但这是一种可能的方式。'
- en: 'Now we are going to override that service with the one declared in our Sales
    module in order to provide correct Add to Cart URLs. We start off by defining
    the service within `src/Foggyline/SalesBundle/Resources/config/services.xml`,
    by adding the following service element under the services as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用我们在销售模块中声明的服务来覆盖该服务，以提供正确的添加到购物车URL。我们首先通过在`src/Foggyline/SalesBundle/Resources/config/services.xml`中定义服务来开始，如下所示：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We then create `src/Foggyline/SalesBundle/Service/AddToCartUrl.php` with content
    as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建`src/Foggyline/SalesBundle/Service/AddToCartUrl.php`，内容如下：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `router` service here expects the route named `foggyline_sales_cart_add`,
    which still does not exist. We create the route by adding the following entry
    under the `routes` element of the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    file as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`router`服务期望名为`foggyline_sales_cart_add`的路由，但这个路由还不存在。我们通过在`src/Foggyline/SalesBundle/Resources/config/routing.xml`文件的`routes`元素下添加以下条目来创建该路由，如下所示：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Route definition expects to find the `addAction` function within the cart controller
    in the `src/Foggyline/SalesBundle/Controller/CartController.php` file, which we
    define as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 路由定义期望在`src/Foggyline/SalesBundle/Controller/CartController.php`文件中的购物车控制器中找到`addAction`函数，我们定义如下：
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: There is quite a bit of logic going on here in the `addAction` method. We are
    first checking whether the current user already has a cart entry in the database;
    if not, we create a new one. We then add or update the existing cart item.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在`addAction`方法中有相当多的逻辑。我们首先检查当前用户是否已经在数据库中有购物车条目；如果没有，我们就创建一个新的。然后添加或更新现有的购物车条目。
- en: 'In order for our new `add_to_cart` service to actually override the one from
    the `Customer`module, we still need to add a compiler. We do so by defining the
    `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`file
    with content as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的新`add_to_cart`服务实际上覆盖`Customer`模块中的服务，我们仍然需要添加一个编译器。我们通过定义`src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`文件来实现这一点，内容如下：
- en: '[PRE19]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Later on, we will add the rest of the overrides to this file. In order to tie
    things up for the moment, and make the `add_to_cart` service override kick in,
    we need to register the *compiler pass* within the `build` method of our `src/Foggyline/SalesBundle/FoggylineSalesBundle.php`
    file as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将在此文件中添加其余的覆盖。为了暂时解决问题，并使`add_to_cart`服务覆盖生效，我们需要在`src/Foggyline/SalesBundle/FoggylineSalesBundle.php`文件的`build`方法中注册*编译器*，如下所示：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The override should now be in effect, and our `Sales` module should now be providing
    valid Add to Cart links.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖现在应该生效了，我们的`Sales`模块现在应该提供有效的添加到购物车链接。
- en: Overriding the checkout_menu service
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖`checkout_menu`服务
- en: The checkout menu service defined in the `Customer` module has a simple purpose
    which is to provide a link to the cart and the first step of the checkout process.
    Since the Sales module was unknown at the time, the `Customer` module provided
    a dummy link, which we will now override.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`Customer`模块中定义的结账菜单服务有一个简单的目的，即提供到购物车和结账流程的第一步的链接。由于当时还不知道销售模块，`Customer`模块提供了一个虚拟链接，现在我们将覆盖它。'
- en: 'We start by adding the following service entry under the `services` element
    of the `src/Foggyline/SalesBundle/Resources/config/services.xml` file as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在`src/Foggyline/SalesBundle/Resources/config/services.xml`文件的`services`元素下添加以下服务条目：
- en: '[PRE21]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We then add the `src/Foggyline/SalesBundle/Service/CheckoutMenu.php` file with
    content as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加`src/Foggyline/SalesBundle/Service/CheckoutMenu.php`文件，内容如下：
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The service expects two routes, `foggyline_sales_cart` and `foggyline_sales_checkout`,
    so we need to amend the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    by file adding the following route definitions to it:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务期望两个路由，`foggyline_sales_cart`和`foggyline_sales_checkout`，因此我们需要通过向`src/Foggyline/SalesBundle/Resources/config/routing.xml`文件添加以下路由定义来修改它：
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The newly added routes expect the `cart` and `checkout` controller. The `cart`
    controller is already in place, so we just need to add the `indexAction` to it.
    At this point, let''s just add an empty one as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 新添加的路由期望`cart`和`checkout`控制器。`cart`控制器已经就位，所以我们只需要添加`indexAction`。此时，让我们添加一个空的如下：
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Similarly, let''s create a `src/Foggyline/SalesBundle/Controller/CheckoutController.php`
    file with content as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，让我们创建一个`src/Foggyline/SalesBundle/Controller/CheckoutController.php`文件，内容如下：
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Later on, we will revert back to these two `indexAction` methods and add proper
    method body implementations.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将回到这两个`indexAction`方法，并添加适当的方法体实现。
- en: 'To conclude the service override, we now amend the previously created `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file, by replacing the `// Override ''checkout_menu''` service comment with the
    following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成服务覆盖，我们现在通过用以下内容替换`src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`文件中先前创建的`//
    Override 'checkout_menu'`服务注释来修改它：
- en: '[PRE26]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Our newly defined service should now override the one defined in the `Customer`
    module, thus providing the right checkout and cart (with items in the cart count)
    URL.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新定义的服务现在应该覆盖`Customer`模块中定义的服务，从而提供正确的结账和购物车（带有购物车中的商品数量）URL。
- en: Overriding the customer orders service
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖客户订单服务
- en: The `foggyline_customer.customer_orders` service was to provide a collection
    of previously created orders for currently logged-in customers. The `Customer`
    module defined a dummy service for this purpose, just so we can move forward with
    building up the **My Orders** section under **My Account** page. We now need to
    override this service, making it return proper orders.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`foggyline_customer.customer_orders`服务是为当前登录的客户提供以前创建的订单集合。`Customer`模块为此目的定义了一个虚拟服务，这样我们就可以继续构建**我的账户**页面下的**我的订单**部分。现在我们需要覆盖此服务，使其返回正确的订单。'
- en: 'We start by adding the following `service` element under the services of the
    `src/Foggyline/SalesBundle/Resources/config/services.xml` file as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`src/Foggyline/SalesBundle/Resources/config/services.xml`文件的服务下添加以下`service`元素：
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We then add the `src/Foggyline/SalesBundle/Service/CustomerOrders.php` file
    with content as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加`src/Foggyline/SalesBundle/Service/CustomerOrders.php`文件，内容如下：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `route generate` method expects to find two routes, `foggyline_sales_order_cancel`
    and `foggyline_sales_order_print`, which are not yet created.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`route generate`方法期望找到两个路由，`foggyline_sales_order_cancel`和`foggyline_sales_order_print`，这两个路由尚未创建。'
- en: 'Let''s go ahead and create them by adding the following under the `route` element
    of the `src/Foggyline/SalesBundle/Resources/config/routing.xml` file:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续通过在`src/Foggyline/SalesBundle/Resources/config/routing.xml`文件的`route`元素下添加以下内容来创建它们：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The routes definition, in turn, expects `SalesOrderController` to be defined.
    Since our application will require an admin user to be able to list and edit the
    orders, we will use the following Symfony command to auto-generate the CRUD for
    our `Sales Order`entity:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 路由定义又期望`SalesOrderController`被定义。由于我们的应用程序需要管理员用户能够列出和编辑订单，我们将使用以下Symfony命令自动生成我们的`Sales
    Order`实体的CRUD：
- en: '[PRE30]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When asked for the entity shortcut name, we simply provide `FoggylineSalesBundle:SalesOrder`
    and proceed, allowing for creation of write actions. At this point, several files
    have been created for us, as well as a few entries outside of the `Sales` bundle.
    One of these entries is the route definition within the `app/config/routing.yml`
    file, as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当要求实体快捷名称时，我们只需提供`FoggylineSalesBundle:SalesOrder`并继续，允许创建写操作。此时，已经为我们创建了几个文件，以及`Sales`包之外的一些条目。其中一个条目是`app/config/routing.yml`文件中的路由定义，如下所示：
- en: '[PRE31]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We should already have a `foggyline_sales` entry in there as well. The difference
    being that `foggyline_sales` points to our `router.xml` file and the newly created
    `foggyline_sales_sales_order` points to the exact newly created `SalesOrderController`.
    For the sake of simplicity, we can keep them both.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该已经在那里有一个`foggyline_sales`条目。不同之处在于`foggyline_sales`指向我们的`router.xml`文件，而新创建的`foggyline_sales_sales_order`指向刚创建的`SalesOrderController`。为了简单起见，我们可以保留它们两者。
- en: The auto-generator also created a `salesorder` directory under the `app/Resources/views/`
    directory, which we need to move over into our bundle as the `src/Foggyline/SalesBundle/Resources/views/Default/salesorder/`
    directory.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 自动生成器还在`app/Resources/views/`目录下创建了一个`salesorder`目录，我们需要将其移动到我们的包中，作为`src/Foggyline/SalesBundle/Resources/views/Default/salesorder/`目录。
- en: 'We can now address our print and cancel actions by adding the following into
    the `src/Foggyline/SalesBundle/Controller/SalesOrderController.php` file as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过将以下内容添加到`src/Foggyline/SalesBundle/Controller/SalesOrderController.php`文件中来处理我们的打印和取消操作：
- en: '[PRE32]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `cancelAction` method merely checks whether the order in question belongs
    to the currently logged-in customer; if so, a change of order status is allowed.
    The `printAction` method merely loads the order if it belongs to the currently
    logged-in customer, and passes it on to a `print.html.twig` template.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`cancelAction`方法仅仅检查所涉及的订单是否属于当前登录的客户；如果是，允许更改订单状态。`printAction`方法仅仅加载订单，如果它属于当前登录的客户，并将其传递给`print.html.twig`模板。'
- en: 'We then create the `src/Foggyline/SalesBundle/Resources/views/Default/salesorder/print.html.twig`
    template with content as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建了`src/Foggyline/SalesBundle/Resources/views/Default/salesorder/print.html.twig`模板，内容如下：
- en: '[PRE33]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Obviously, this is just a simplified output, which we can further customize
    to our needs. The important bit is that we have passed along the `order` object
    to our template, and can now extract any piece of information needed from it.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这只是一个简化的输出，我们可以根据需要进一步自定义。重要的是，我们已经将`order`对象传递给我们的模板，并且现在可以从中提取所需的任何信息。
- en: 'Finally, we replace the `// Override ''foggyline_customer.customer_orders''`
    service comment within the `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file with code as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将`src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`文件中的`//
    Override 'foggyline_customer.customer_orders'`服务注释替换为以下代码：
- en: '[PRE34]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This will make the service override kick in, and pull in all of the changes
    we just made.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使服务覆盖生效，并引入我们刚刚进行的所有更改。
- en: Overriding the bestsellers service
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖畅销服务
- en: The `bestsellers` service defined in the `Customer` module was supposed to provide
    dummy data for the bestsellers feature shown on the homepage. The idea is to showcase
    five of the bestselling products in the store. The `Sales` module now needs to
    override this service in order to provide the right implementation, where actual
    sold product quantities will affect the content of the bestsellers shown.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Customer`模块中定义的`bestsellers`服务应该为首页显示的畅销产品提供虚拟数据。其目的是展示商店中五个畅销产品。`Sales`模块现在需要覆盖此服务，以便提供正确的实现，实际销售的产品数量将影响所显示的畅销产品的内容。
- en: 'We start off by adding the following definition under the `service` element
    of the `src/Foggyline/SalesBundle/Resources/config/services.xml` file:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`src/Foggyline/SalesBundle/Resources/config/services.xml`文件的`service`元素下添加以下定义：
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We then define the `src/Foggyline/SalesBundle/Service/BestSellers.php` file
    with content as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们按以下内容定义`src/Foggyline/SalesBundle/Service/BestSellers.php`文件：
- en: '[PRE36]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here, we are fetching the instance of the `SalesOrderItemRepository` class
    and calling the `getBestsellers` method on it. This method still has not been
    defined. We do so by adding it to file `src/Foggyline/SalesBundle/Repository/SalesOrderItemRepository.php`
    file as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们获取`SalesOrderItemRepository`类的实例，并在其上调用`getBestsellers`方法。这个方法还没有被定义。我们通过将其添加到`src/Foggyline/SalesBundle/Repository/SalesOrderItemRepository.php`文件中来定义它：
- en: '[PRE37]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here, we are using **Doctrine Query Language** (**DQL**) in order to build
    a list of the five bestselling products. Finally, we need to replace the `// Override
    ''bestsellers''` service comment from within the `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file with code as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用**Doctrine查询语言**（**DQL**）来构建五个畅销产品的列表。最后，我们需要用以下代码替换`src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`文件中的`//
    Override 'bestsellers'`服务注释：
- en: '[PRE38]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: By overriding the `bestsellers` service, we are exposing the actual sales-based
    list of bestselling products for other modules to fetch.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过覆盖`bestsellers`服务，我们公开了基于实际销售的畅销产品列表，供其他模块获取。
- en: Creating the Cart page
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建购物车页面
- en: 'The cart page is where the customer gets to see a list of products added to
    the cart via **Add to Cart** buttons, from either the homepage, a category page,
    or a product page. We previously created `CartController` and an empty `indexAction`
    function. Now let''s go ahead and edit the `indexAction` function as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车页面是顾客可以通过首页、分类页面或产品页面的**加入购物车**按钮看到已添加到购物车的产品列表的地方。我们之前创建了`CartController`和一个空的`indexAction`函数。现在让我们继续编辑`indexAction`函数如下：
- en: '[PRE39]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here, we are checking whether the user is logged in; if they are, we are showing
    them the cart with all their items. The non-logged-in user is redirected to a
    customer login URL. The `indexAction` function is expecting the `src/Foggyline/SalesBundle/Resources/views/Default/cart/index.html.twig`
    file, whose content we define as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在检查用户是否已登录；如果是，我们会向他们显示带有所有项目的购物车。未登录用户将被重定向到客户登录URL。`indexAction`函数期望`src/Foggyline/SalesBundle/Resources/views/Default/cart/index.html.twig`文件，我们定义其内容如下：
- en: '[PRE40]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: When rendered, the template will show quantity input elements under each added
    product, alongside the **Update Cart** button. The **Update Cart** button submits
    the form, whose action is pointing to the `foggyline_sales_cart_update` route.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 模板渲染时，将在每个添加的产品下显示数量输入元素，以及**更新购物车**按钮。**更新购物车**按钮提交表单，其操作指向`foggyline_sales_cart_update`路由。
- en: 'Let''s go ahead and create `foggyline_sales_cart_update`, by adding the following
    entry under the `route` element of the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    file as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建`foggyline_sales_cart_update`，通过在`src/Foggyline/SalesBundle/Resources/config/routing.xml`文件的`route`元素下添加以下条目：
- en: '[PRE41]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The newly defined route expects to find an `updateAction` function under the
    `src/Foggyline/SalesBundle/Controller/CartController.php` file, which we add as
    follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 新定义的路由期望在`src/Foggyline/SalesBundle/Controller/CartController.php`文件中找到一个`updateAction`函数，我们添加如下：
- en: '[PRE42]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: To remove a product from the cart, we simply insert `0` as the quantity value
    and click the **Update Cart** button. This completes our simple cart page.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要从购物车中删除产品，我们只需将数量值插入为`0`，然后点击**更新购物车**按钮。这完成了我们简单的购物车页面。
- en: Creating the Payment service
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建支付服务
- en: In order to move from cart to checkout, we need to sort out payment and shipment
    services. The previous `Payment` and `Shipment` modules exposed some of their
    `Payment` and `Shipment` services, which we now need to aggregate into a single
    `Payment` and `Shipment` service that our checkout process will use.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从购物车到结账的过程中，我们需要解决支付和运输服务的问题。先前的`Payment`和`Shipment`模块公开了它们的一些`Payment`和`Shipment`服务，现在我们需要将它们聚合成一个单一的`Payment`和`Shipment`服务，供我们的结账流程使用。
- en: 'We start by replacing the previously added `// Pickup/parse ''payment_method''`
    services comment under the `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file with code as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始用以下代码替换`src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`文件中先前添加的`//
    Pickup/parse 'payment_method'`服务注释：
- en: '[PRE43]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `findTaggedServiceIds` method returns a key-value list of all the services
    tagged with `payment_method`, which we then pass on as argument to our `foggyline_sales.payment`
    service. This is the only way to fetch the list of services in Symfony during
    the compilation time.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`findTaggedServiceIds`方法返回一个带有`payment_method`标签的所有服务的键值列表，然后我们将其作为参数传递给我们的`foggyline_sales.payment`服务。这是在Symfony编译时获取服务列表的唯一方法。'
- en: 'We then edit the `src/Foggyline/SalesBundle/Resources/config/services.xml`
    file by adding the following under the `service` element:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们通过在`service`元素下添加以下内容来编辑`src/Foggyline/SalesBundle/Resources/config/services.xml`文件：
- en: '[PRE44]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, we create the `Payment` class under the `src/Foggyline/SalesBundle/Service/Payment.php`
    file as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们按以下方式在`src/Foggyline/SalesBundle/Service/Payment.php`文件中创建`Payment`类：
- en: '[PRE45]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In compliance with the service definition in the `services.xml` file, our service
    accepts two parameters, one being `$container` and the second one being `$methods`.
    The `$methods` argument is passed during compilation time, where we are able to
    fetch a list of all the `payment_method` tagged services. This effectively means
    our `getAvailableMethods` is now capable of returning all `payment_method` tagged
    services, from any module.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`services.xml`文件中的服务定义，我们的服务接受两个参数，一个是`$container`，另一个是`$methods`。`$methods`参数在编译时传递，我们能够获取所有`payment_method`标记的服务列表。这有效地意味着我们的`getAvailableMethods`现在能够返回任何模块中标记为`payment_method`的服务。
- en: Creating the Shipment service
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建装运服务
- en: 'The `Shipment` service is implemented much like the `Payment` service. The
    overall idea is similar, with merely a few differences along the way. We start
    by replacing the previously added `// Pickup/parse shipment_method''` services
    comment under the `src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`
    file with code as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shipment`服务的实现方式与`Payment`服务类似。总体思路是相似的，只是在途中有一些不同。我们首先用以下代码替换之前添加的`// Pickup/parse
    shipment_method''`服务注释，放在`src/Foggyline/SalesBundle/DependencyInjection/Compiler/OverrideServiceCompilerPass.php`文件中：'
- en: '[PRE46]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We then edit the `src/Foggyline/SalesBundle/Resources/config/services.xml`
    file by adding the following under the `service` element:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过在`src/Foggyline/SalesBundle/Resources/config/services.xml`文件的`service`元素下添加以下内容来编辑：
- en: '[PRE47]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Finally, we create the `Shipment` class under the `src/Foggyline/SalesBundle/Service/Shipment.php`
    file as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们按照以下方式在`src/Foggyline/SalesBundle/Service/Shipment.php`文件中创建`Shipment`类：
- en: '[PRE48]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We are now able to fetch all the `Payment` and `Shipment` services via our unified
    `Payment` and `Shipment` service, thus making the checkout process easy.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们能够通过我们统一的`Payment`和`Shipment`服务获取所有的`Payment`和`Shipment`服务，从而使结账流程变得简单。
- en: Creating the Checkout page
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建结账页面
- en: The checkout page will be constructed out of two checkout steps, the first one
    being shipment information gathering, and the second one being payment information
    gathering.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 结账页面将由两个结账步骤构成，第一个是收集装运信息，第二个是收集支付信息。
- en: 'We start off with a shipment step, by changing our `src/Foggyline/SalesBundle/Controller/CheckoutController.php`
    file and its `indexAction` as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从装运步骤开始，通过更改`src/Foggyline/SalesBundle/Controller/CheckoutController.php`文件及其`indexAction`如下：
- en: '[PRE49]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Here, we are fetching the currently logged-in customer cart and passing it onto
    a `checkout/index.html.twig` template, alongside several other variables needed
    for the shipment step. The `getAddressForm` method simply builds an address form
    for us. There is also a call toward our newly created the `foggyline_sales.shipment`
    service, which enables us to fetch a list of all available shipment methods.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们获取当前登录的客户购物车，并将其传递到`checkout/index.html.twig`模板，还有其他几个在装运步骤中需要的变量。`getAddressForm`方法简单地为我们构建了一个地址表单。还有一个调用我们新创建的`foggyline_sales.shipment`服务，它使我们能够获取所有可用的装运方式列表。
- en: 'We then create `src/Foggyline/SalesBundle/Resources/views/Default/checkout/index.html.twig`
    with content as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建`src/Foggyline/SalesBundle/Resources/views/Default/checkout/index.html.twig`，内容如下：
- en: '[PRE50]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The template lists all of the address-related form fields, alongside available
    shipment methods. The JavaScript part handles the **Next** button click, which
    basically submits the form to the `foggyline_sales_checkout_payment` route.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 模板列出了所有与地址相关的表单字段，以及可用的装运方式。JavaScript部分处理了**下一步**按钮的点击，基本上是将表单提交到`foggyline_sales_checkout_payment`路由。
- en: 'We then define the `foggyline_sales_checkout_payment` route by adding the following
    entry under the `routes` element of the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    file:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过在`src/Foggyline/SalesBundle/Resources/config/routing.xml`文件的`routes`元素下添加以下条目来定义`foggyline_sales_checkout_payment`路由：
- en: '[PRE51]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The route entry expects to find a `paymentAction` within `CheckoutController`,
    which we define as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 路由条目期望在`CheckoutController`中找到`paymentAction`，我们定义如下：
- en: '[PRE52]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The preceding code fetches the submission made from the shipment step of the
    checkout process, stores the relevant values into the session, fetches the variables
    required for the payment step and renders back the `checkout/payment.html.twig`
    template.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码从结账流程的装运步骤中获取提交的内容，将相关数值存储到会话中，获取支付步骤所需的变量，并渲染`checkout/payment.html.twig`模板。
- en: 'We define the `src/Foggyline/SalesBundle/Resources/views/Default/checkout/payment.html.twig`
    file with content as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`src/Foggyline/SalesBundle/Resources/views/Default/checkout/payment.html.twig`文件的内容如下：
- en: '[PRE53]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Similar to the shipment step, we have a rendering of available payment methods
    here, alongside a **Place Order** button which is handled by JavaScript as the
    button is located outside of the submission form. Once an order is placed, the
    POST submission is made onto the `foggyline_sales_checkout_process` route, which
    we defined under the `routes` element of the `src/Foggyline/SalesBundle/Resources/config/routing.xml`
    file as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 与装运步骤类似，这里还有可用支付方式的渲染，以及一个由JavaScript处理的**下订单**按钮，因为按钮位于提交表单之外。下订单后，提交将发送到`foggyline_sales_checkout_process`路由，我们在`src/Foggyline/SalesBundle/Resources/config/routing.xml`文件的`routes`元素下定义如下：
- en: '[PRE54]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The route points to the `processAction` function within `CheckoutController`,
    which we define as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 路由指向`CheckoutController`中的`processAction`函数，我们定义如下：
- en: '[PRE55]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Once the POST submission hits the controller, a new order with all of the related
    items gets created. At the same time, the cart and cart items are cleared. Finally,
    the customer is redirected to the order success page.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提交到控制器，就会创建一个新订单以及所有相关的项目。同时，购物车和购物车项目将被清除。最后，客户将被重定向到订单成功页面。
- en: Creating the order success page
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建订单成功页面
- en: The order success page has an important role in full-blown web shop applications.
    This is where we get to thank the customer for their purchase and possibly present
    some more related or cross-related shopping options, alongside some optional discounts.
    Though our application is simple, it's worth building a simple order success page.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 订单成功页面在完整的网络商店应用程序中起着重要作用。这是我们感谢客户购买并可能提供一些更多相关或交叉相关的购物选项，以及一些可选的折扣的地方。虽然我们的应用程序很简单，但构建一个简单的订单成功页面是值得的。
- en: 'We start by adding the following route definition under the `routes` element
    of the `src/Foggyline/SalesBundle/Resources/config/routing.xml` file:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`src/Foggyline/SalesBundle/Resources/config/routing.xml`文件的`routes`元素下添加以下路由定义：
- en: '[PRE56]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The route points to a `successAction` function within `CheckoutController`,
    which we define as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 路由指向`CheckoutController`中的`successAction`函数，我们定义如下：
- en: '[PRE57]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Here, we are simply fetching the last created order ID for the currently logged-in
    customer and passing the full order object to the `src/Foggyline/SalesBundle/Resources/views/Default/checkout/success.html.twig`
    template as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是简单地获取当前登录客户的最后创建的订单ID，并将完整的订单对象传递给`src/Foggyline/SalesBundle/Resources/views/Default/checkout/success.html.twig`模板，内容如下：
- en: '[PRE58]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: With this, we finalize the entire checkout process for our web shop. Though
    it is an absolutely simplistic one, it sets the foundation for more robust implementations.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一步，我们为我们的网络商店完成了整个结账流程。虽然它非常简单，但它为更强大的实现奠定了基础。
- en: Creating a store manager dashboard
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建商店管理仪表板
- en: Now that we have finalized the checkout `Sales` module, let's revert quickly
    to our core module, `AppBundle`. As per our application requirements, let's go
    ahead and create a simple store manager dashboard.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了结账`Sales`模块，让我们快速回到我们的核心模块`AppBundle`。根据我们的应用程序要求，让我们继续创建一个简单的商店管理仪表板。
- en: 'We start by adding the `src/AppBundle/Controller/StoreManagerController.php`
    file with content as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先添加`src/AppBundle/Controller/StoreManagerController.php`文件，内容如下：
- en: '[PRE59]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The `indexAction` function simply returns the `src/AppBundle/Resources/views/default/store_manager.html.twig`
    file, whose content we define as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`indexAction`函数简单地返回`src/AppBundle/Resources/views/default/store_manager.html.twig`文件，我们定义其内容如下：'
- en: '[PRE60]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The template merely renders the category, product, customer, and order management
    links. The actual access to these links is controlled by the firewall, as explained
    in previous chapters.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 模板仅仅渲染类别、产品、客户和订单管理链接。对这些链接的实际访问由防火墙控制，如前几章所述。
- en: Unit testing
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: The `Sales` module is far more robust than any of the previous modules. There
    are several things we can unit test. However, we won't be covering full unit testing
    as part of this chapter. We will simply turn our attention to a single unit test,
    the one for the `CustomerOrders` service.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sales`模块比以前的任何模块都更强大。有几件事情我们可以进行单元测试。但是，作为本章的一部分，我们不会涵盖完整的单元测试。我们只会把注意力转向单个单元测试，即`CustomerOrders`服务的单元测试。'
- en: 'We start off by adding the following line under the `testsuites` element of
    our `phpunit.xml.dist` file:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`phpunit.xml.dist`文件的`testsuites`元素下添加以下行：
- en: '[PRE61]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: With that in place, running the `phpunit` command from the root of our shop
    should pick up any test we have defined under the `src/Foggyline/SalesBundle/Tests/`
    directory.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，从商店的根目录运行`phpunit`命令应该会执行我们在`src/Foggyline/SalesBundle/Tests/`目录下定义的任何测试。
- en: 'Now, let''s go ahead and create a test for our `CustomerOrders` service. We
    do so by defining the `src/Foggyline/SalesBundle/Tests/Service/CustomerOrdersTest.php`
    file with content as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续为我们的`CustomerOrders`服务创建一个测试。我们通过定义`src/Foggyline/SalesBundle/Tests/Service/CustomerOrdersTest.php`文件并填写以下内容来实现这一点：
- en: '[PRE62]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Here, we are using the `UsernamePasswordToken` function in order to simulate
    a customer login. The password token is then passed on to the `CustomerOrders`
    service. The `CustomerOrders` service then internally checks whether token storage
    has a token assigned, flagging it as a logged-in user and returning the list of
    its orders. Being able to simulate customer login is essential for any other tests
    we might be writing for our sales module.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`UsernamePasswordToken`函数来模拟客户登录。然后将密码令牌传递给`CustomerOrders`服务。`CustomerOrders`服务然后在内部检查令牌存储是否分配了令牌，将其标记为已登录用户并返回其订单列表。能够模拟客户登录对于我们可能为销售模块编写的任何其他测试都是必不可少的。
- en: Functional testing
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能测试
- en: Similar to unit testing, we will only focus on a single functional test, as
    doing anything more robust would be out of the scope of this chapter. We will
    write a simple code that adds a product to the cart and accesses the checkout
    page. In order to add an item to the cart, here we also need to simulate the user
    login.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 与单元测试类似，我们只关注单个功能测试，因为做任何更强大的测试都超出了本章的范围。我们将编写一个简单的代码，将产品添加到购物车并访问结账页面。为了将商品添加到购物车，我们还需要模拟用户登录。
- en: 'We write the `src/Foggyline/SalesBundle/Tests/Controller/CartControllerTest.php`
    test as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照以下方式编写`src/Foggyline/SalesBundle/Tests/Controller/CartControllerTest.php`测试：
- en: '[PRE63]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Once run, the test will simulate the customer login, add an item to the cart,
    and try to access the checkout page. Depending on the actual customers we have
    in our database, we might need to change the customer e-mail provided in the preceding
    test.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行，测试将模拟客户登录，将商品添加到购物车，并尝试访问结账页面。根据我们数据库中实际的客户，我们可能需要更改前面测试中提供的客户电子邮件。
- en: Running the `phpunit` command now should successfully execute our tests.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行`phpunit`命令应该成功执行我们的测试。
- en: Summary
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we built a simple yet functional `Sales` module. With just
    four simple entities (`Cart`, `CartItem`, `SalesOrder`, and `SalesOrderItem`),
    we managed to implement simple cart and checkout features. By doing so, we empowered
    customers to actually make a purchase, instead of just browsing the product catalog.
    The sales module made use of the payment and shipment services defined in previous
    chapters. While the payment and shipment services are implemented as imaginary,
    dummy ones, they do provide a basic skeleton that we can use for real payment
    and shipment API implementations.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们构建了一个简单但功能齐全的“销售”模块。仅使用四个简单的实体（`Cart`、`CartItem`、`SalesOrder`和`SalesOrderItem`），我们成功实现了简单的购物车和结账功能。通过这样做，我们赋予了客户实际购买产品的能力，而不仅仅是浏览产品目录。销售模块利用了前几章定义的付款和发货服务。虽然付款和发货服务是作为虚构的、虚拟的实现的，但它们提供了一个基本的框架，我们可以用于真正的付款和发货API实现。
- en: Furthermore, in this chapter, we addressed the admin dashboard, by making a
    simple interface that merely aggregates a few of the existing CRUD interfaces.
    Access to the dashboard and the management links is protected by entries in `app/config/security.yml`,
    and allowed only for `ROLE_ADMIN`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在本章中，我们通过创建一个简单的界面来处理管理员仪表板，该界面仅仅聚合了一些现有的CRUD界面。对仪表板和管理链接的访问受到`app/config/security.yml`中的条目的保护，只允许`ROLE_ADMIN`访问。
- en: Together, the modules written so far make up a simplified application. Writing
    robust web shop applications would normally include tens of other features found
    in modern e-commerce platforms such as Magento. These include multiple language,
    currency, and website support; robust category, product, and product inventory
    management; shopping cart and catalog sales rules; and many others. Modularizing
    our application makes development and maintenance processes easier.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们编写的模块构成了一个简化的应用程序。编写健壮的网络商店应用程序通常会包括现代电子商务平台中发现的数十种其他功能，例如Magento。这些功能包括多语言、货币和网站支持；健壮的类别、产品和产品库存管理；购物车和目录销售规则；以及许多其他功能。模块化我们的应用程序使开发和维护过程更加简单。
- en: Moving forward, in the final chapter, we will look into distributing our modules.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将探讨如何分发我们的模块。
