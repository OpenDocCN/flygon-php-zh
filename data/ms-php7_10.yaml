- en: Common Design Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的设计模式
- en: Those new to software development tend to focus their efforts on mastering the
    programming language. Once that barrier is passed, it is time to embrace **design
    patterns**, as writing high-quality and complex software is hardly possible without
    them. Mostly attributed to experienced developer use, design patterns represent
    a well established solution to common challenges faced in our applications. Successfully
    applying design patterns is likely to lead to more extensible, reusable, maintainable,
    and adaptable code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 那些刚接触软件开发的人往往把精力集中在掌握编程语言上。一旦突破了这个障碍，就是时候拥抱**设计模式**了，因为写高质量和复杂的软件几乎不可能没有它们。设计模式主要是由经验丰富的开发者使用，它们代表了在我们的应用程序中面临的常见挑战的一种成熟的解决方案。成功应用设计模式很可能会导致更具可扩展性、可重用性、可维护性和可适应性的代码。
- en: The examples within this chapter are not meant to be copied and pasted. They
    merely serve a purpose of representing one possible implementation of design patterns.
    After all, real-life applications are all about details. Furthermore, there are
    plenty of other design patterns out there, with new ones being invented as technology
    and programming paradigms shift.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例并不是要被复制粘贴的。它们只是用来代表设计模式的一种可能实现。毕竟，现实生活中的应用程序都是关于细节的。此外，还有许多其他设计模式，随着技术和编程范式的转变，还会不断有新的设计模式被发明出来。
- en: 'In this chapter, we will take a look at a few possible implementations of design
    patterns in PHP:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下在PHP中设计模式的几种可能实现：
- en: Base patterns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本模式
- en: The registry pattern
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册表模式
- en: Creational patterns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建模式
- en: The singleton pattern
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单例模式
- en: The prototype pattern
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型模式
- en: The abstract factory pattern
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象工厂模式
- en: The builder pattern
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建造者模式
- en: The object pool pattern
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象池模式
- en: Behavioral patterns
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为模式
- en: The strategy pattern
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略模式
- en: The observer pattern
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察者模式
- en: The lazy initialization pattern
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 懒初始化模式
- en: The chain of responsibility pattern
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 责任链模式
- en: Structural patterns
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构模式
- en: The decorator pattern
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装饰者模式
- en: Base patterns
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本模式
- en: 'In the coming section, we will take a look at the base pattern: the registry
    pattern.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将看一下基本模式：注册表模式。
- en: The registry pattern
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册表模式
- en: The registry pattern is an interesting one. It allows us to store and retrieve
    objects for later use. The process of storing and retrieving is based on the keys
    we define. Depending on the data scope, the association of keys and objects is
    made global across a process, thread, or a session, allowing us to retrieve the
    objects from anywhere within the data scope.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表模式是一个有趣的模式。它允许我们存储和检索对象以供以后使用。存储和检索的过程是基于我们定义的键。根据数据范围的不同，键和对象的关联是全局的，跨进程、线程或会话，允许我们在数据范围内的任何地方检索对象。
- en: 'The following example demonstrates a possible registry pattern implementation:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了可能的注册表模式实现：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Our `Registry` class implementation has three key methods: `get()`, `set()`,
    `remove()`. The `set()` method allows graceful behavior based on the `$graceful`
    parameter; otherwise, it triggers the `RuntimeException` for the existing key.
    We also defined a `__destruct` method, as a sort of a cleanup mechanism that removes
    each item in the registry when the `$registry` instance is destroyed.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Registry`类实现有三个关键方法：`get()`、`set()`、`remove()`。`set()`方法允许基于`$graceful`参数进行优雅的行为；否则，它会为现有的键触发`RuntimeException`。我们还定义了一个`__destruct`方法，作为一种清理机制，当`$registry`实例被销毁时，它会移除注册表中的每个项目。
- en: Creational patterns
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建模式
- en: In this section, we will take a look at the creational patterns, such as the
    singleton, prototype, abstract factory, and builder patterns.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看一下创建模式，比如单例、原型、抽象工厂和构建者模式。
- en: The singleton pattern
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单例模式
- en: The singleton is among the first design patterns most developers learn. The
    goal of this design pattern is to limit the number of class instantiations to
    only one. What this means is that using the `new` keyword on a class will always
    return one and the same object instance. This is a powerful concept that allows
    us to implement all sorts of application-wide objects, such as loggers, mailers,
    registries, and other bits of functionality that we may want to act as singletons.
    However, as we will soon see, we will avoid the `new` keyword altogether, and
    instantiate an object via the static class method.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 单例模式是大多数开发人员学习的第一个设计模式。这个设计模式的目标是将类实例化的次数限制为只有一个。这意味着对类使用`new`关键字将始终返回一个相同的对象实例。这是一个强大的概念，它允许我们实现各种应用程序范围的对象，比如记录器、邮件发送器、注册表和其他功能的单例。然而，正如我们很快会看到的，我们将完全避免使用`new`关键字，并通过静态类方法实例化对象。
- en: 'The following example demonstrates a possible singleton pattern implementation:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了可能的单例模式实现：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Logger` class uses the static member `$instance` to keep an instance of
    one `self`, as per the implementation of the `getInstance()` method. We defined `__construct` as
    `protected` in order to prevent new instance creation via the `new` operator.
    The `__clone()` method was defined as `private` in order to prevent instance cloning
    via the `clone` operator. Similarly, the `__wakeup()` method was also defined
    as private, in order to prevent instance unserializing via the `unserialize()`
    function. These few simple restrictions make for a class that acts as a singleton.
    In order to fetch an instance, all it takes is calling the `getInstance()` class
    method.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Logger`类使用静态成员`$instance`来保持一个`self`的实例，根据`getInstance()`方法的实现。我们将`__construct`定义为`protected`，以防止通过`new`操作符创建新实例。`__clone()`方法被定义为`private`，以防止通过`clone`操作符进行实例克隆。同样，`__wakeup()`方法也被定义为private，以防止通过`unserialize()`函数进行实例反序列化。这些简单的限制使得该类作为单例。要获取一个实例，只需调用`getInstance()`类方法。'
- en: The prototype pattern
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型模式
- en: The prototype pattern is about creating new objects by means of cloning them.
    This is quite a concept, as we are no longer using the `new` keyword to create
    new objects. The PHP language provides a special `clone` keyword to assist with
    object cloning.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 原型模式是通过克隆来创建新对象的。这是一个相当有意思的概念，因为我们不再使用`new`关键字来创建新对象。PHP语言提供了一个特殊的`clone`关键字来辅助对象克隆。
- en: 'The following example demonstrates a possible prototype pattern implementation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了可能的原型模式实现：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Normally, all it takes to clone an object is to use an expression such as `$clonedObj
    = clone $obj;`. This, however, does not give us any control over the cloning process.
    PHP objects can be heavy, with lots of members and references. Sometimes, we would
    like to impose certain limitations on the cloned object. This is where the magic `__clone()`
    method comes in handy. The `__clone()` method triggers after the cloning process
    is done, which is something to keep in mind for possible cleanup code implementations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，克隆对象只需使用表达式`$clonedObj = clone $obj;`。然而，这并不会让我们对克隆过程有任何控制。PHP对象可能很重，有很多成员和引用。有时，我们希望对克隆对象施加一定的限制。这就是魔术`__clone()`方法派上用场的地方。`__clone()`方法在克隆过程完成后触发，这是可能清理代码实现时需要记住的事情。
- en: The abstract factory pattern
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象工厂模式
- en: Abstract factory encapsulates a group of individual factories that have a common
    functionality. It does so without specifying their concrete classes. This makes
    it easier to write portable code, because clients can interchange concrete implementations
    without changing the code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象工厂封装了具有共同功能的一组单独工厂，而不指定它们的具体类。这样可以更容易地编写可移植的代码，因为客户端可以在不更改代码的情况下交换具体实现。
- en: 'The following example demonstrates a possible abstract factory pattern implementation:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了可能的抽象工厂模式实现：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We started off by creating two simple interfaces, `Button` and `FormFactory`.
    The `Button` interface defines a single `render()` method, which we then implement
    through two concrete class implementations, `LoginButton` and `RegisterButton`.
    The two `FormFactory` implementations, `LoginFactory` and `RegisterFactory`, then
    instantiate the corresponding button classes as part of their `createButton()`
    method implementation. The client uses only the `LoginFactory` and `RegisterFactory`
    instances, thus avoiding directly instantiating concrete button classes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了两个简单的接口，`Button`和`FormFactory`。`Button`接口定义了一个`render()`方法，然后我们通过两个具体类实现`LoginButton`和`RegisterButton`来实现它。两个`FormFactory`实现，`LoginFactory`和`RegisterFactory`，然后在其`createButton()`方法实现中实例化相应的按钮类。客户端只使用`LoginFactory`和`RegisterFactory`实例，从而避免直接实例化具体按钮类。
- en: The builder pattern
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建造者模式
- en: The builder pattern is quite a handy one, especially when it comes to large applications.
    It separates the construction of a complex object from its representation. This
    makes it possible for the same construction process to create numerous representations.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 建造者模式是一个非常方便的模式，特别是在处理大型应用程序时。它将复杂对象的构建与其表示分离。这使得相同的构建过程可以创建多种表示。
- en: 'The following example demonstrates a possible *builder *pattern implementation
    using the `Image` class as an example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了可能的建造者模式实现，以`Image`类为例：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We started off with a simple Image class that provides width and height properties
    and corresponding getters and setters. We then created the `ImageBuilderInterface`
    interface, which defines the image width and height setter methods, along with
    the `getResult()` method. We then created an `ImageBuilder` concrete class that
    implements the `ImageBuilderInterface` interface. The client instantiates the `ImageBuilder` class.
    Another concrete class, `ImageBuildDirector`, wraps the creation or builder code
    within its `build()` method by working with the instance of `ImageBuilder` passed through
    its constructor.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个简单的Image类，提供了宽度和高度属性以及相应的getter和setter。然后创建了`ImageBuilderInterface`接口，定义了图像宽度和高度的setter方法，以及`getResult()`方法。然后创建了一个实现`ImageBuilderInterface`接口的`ImageBuilder`具体类。客户端实例化`ImageBuilder`类。另一个具体类`ImageBuildDirector`通过其`build()`方法将创建或构建代码包装在其构造函数中传递的`ImageBuilder`实例中。
- en: The object pool pattern
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象池模式
- en: The object pool pattern manages class instances--objects. It is used in situations
    where we would like to limit unnecessary class instantiation due to resource-intense
    operations. The object pool acts much like a registry for objects, from which
    clients can pick up necessary objects later on.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对象池模式管理类实例--对象。它用于希望由于资源密集型操作而限制不必要的类实例化的情况。对象池的作用类似于对象的注册表，客户端可以随后获取必要的对象。
- en: 'The following example demonstrates a possible object pool pattern implementation:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了可能的对象池模式实现：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Using nothing but an array and two methods, we were able to implement a simple object
    pool. The `save()` method adds the object to the `$instances` array, while the
    `load()` method returns it to the client. The client, in this case, is in charge
    of keeping track of the key under which the object is saved. Objects themselves
    aren't destroyed after their use, as they remain in the pool.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 只使用数组和两种方法，我们就能够实现一个简单的对象池。`save()`方法将对象添加到`$instances`数组中，而`load()`方法将其返回给客户端。在这种情况下，客户端负责跟踪保存对象的键。对象本身在使用后并不被销毁，因为它们仍然留在池中。
- en: Behavioral patterns
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行为模式
- en: In this section, we will go through the behavioral patterns such as strategy,
    observer, lazy initialization, and chain of responsibility.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将介绍行为模式，如策略、观察者、延迟初始化和责任链。
- en: The strategy pattern
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略模式
- en: The strategy pattern comes in handy where we have multiple chunks of code performing
    similar operations. It defines an encapsulated and interchangeable family of algorithms. Imagine
    an order checkout process where we want to implement different shipment providers,
    such as UPS and FedEx.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 策略模式在我们有多个代码块执行类似操作的情况下非常有用。它定义了一组封装和可互换的算法。想象一下订单结账流程，我们想要实现不同的运输提供商，比如UPS和FedEx。
- en: 'The following example demonstrates a possible strategy pattern implementation:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了可能的策略模式实现：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We started off by defining a `ShipmentStrategy` interface with a `calculate()`
    method. We then defined the `UPSShipment` and `FedExShipment` classes which implement
    the `ShipmentStrategy` interface. With these two concrete shipment classes in
    place, we made a `Checkout` class that encapsulates the two shipment options in
    its `estimateShipment()` method. The client then calls the `estimateShipment()`
    method on the `Checkout` instance. Depending on the amount passed on, a different
    shipment calculation kicks in. Using this pattern, we are free to add new shipment
    calculations without changing the client.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义了一个带有`calculate()`方法的`ShipmentStrategy`接口。然后我们定义了`UPSShipment`和`FedExShipment`类，它们实现了`ShipmentStrategy`接口。有了这两个具体的运输类，我们创建了一个`Checkout`类，它在其`estimateShipment()`方法中封装了这两种运输选项。然后客户端调用`Checkout`实例的`estimateShipment()`方法。根据传递的金额，不同的运输计算会启动。使用这种模式，我们可以在不改变客户端的情况下自由添加新的运输计算。
- en: The observer pattern
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察者模式
- en: The observer pattern is quite a popular one. It allows for an event subscription type
    of behavior. We differentiate the subject and observer(s) type of objects. The
    observer is an object subscribed to subject object state change. When the subject
    changes its state, it notifies all of its observers automatically.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 观察者模式非常受欢迎。它允许事件订阅类型的行为。我们区分主题和观察者类型的对象。观察者是订阅主题对象状态变化的对象。当主题改变其状态时，它会自动通知所有观察者。
- en: 'The following example demonstrates a possible observer pattern implementation:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了可能的观察者模式实现：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The PHP `\SplSubject` and `\SplObserver` interfaces allow an observer pattern
    implementation. Our checkout success example uses these interfaces to implement `CheckoutSuccess`
    as a class for the subject type of object, and `Mailer` and `Logger` as classes
    for the observer type of object. Using the `attach()` method of a `CheckoutSuccess`
    instance, we attached both observers to the subject. Once the subject `notify()`
    method is called, the individual observer `update()` methods get triggered. The
    `getSalesOrder()` method calls might come as a surprise, as there is no actual
    `getSalesOrder()` method on direct instances of the `SplSubject` object. However,
    the two `update(\SplSubject $subject)` method calls in our example will be receiving
    an instance of `CheckoutSuccess`. Otherwise, type-casting the `$subject` argument
    directly to `CheckoutSuccess` would give us a PHP fatal error as follows.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: PHP的`\SplSubject`和`\SplObserver`接口允许观察者模式的实现。我们的结账成功示例使用这些接口来实现`CheckoutSuccess`作为主题类型对象的类，以及`Mailer`和`Logger`作为观察者类型对象的类。使用`CheckoutSuccess`实例的`attach()`方法，我们将两个观察者附加到主题上。一旦调用主题的`notify()`方法，就会触发各个观察者的`update()`方法。在我们的示例中，`getSalesOrder()`方法的调用可能会让人感到意外，因为在`SplSubject`对象的直接实例上实际上没有`getSalesOrder()`方法。然而，在我们的示例中，两个`update(\SplSubject
    $subject)`方法调用将接收到一个`CheckoutSuccess`的实例。否则，直接将`$subject`参数强制转换为`CheckoutSuccess`将导致PHP致命错误。
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The lazy initialization pattern
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延迟初始化模式
- en: The lazy initialization pattern is useful for addressing objects whose instantiation
    is likely to be resource-intense. The idea is to delay the actual resource intense
    operation until its result is actually required. The PDF generation is an example
    of a light to moderately resource-intense operation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟初始化模式对于处理实例化可能消耗大量资源的对象非常有用。其思想是延迟实际的资源密集型操作，直到实际需要其结果为止。PDF生成是一个轻度到中度资源密集型操作的例子。
- en: 'The following example demonstrates a possible lazy initialization pattern implementation
    based on PDF generation:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了基于PDF生成的可能的延迟初始化模式实现：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Depending on how the class is constructed, it might trigger the actual generation
    right after we call the `new` keyword, as we have done with the `new Pdf(...)`
    expression.  `new ProxyPdf(...)` expression behaves differently because it wraps
    around the `Pdf` class implementing the same `PdfInterface`, but providing a different `__construct()`
    method implementation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据类的构造方式，它可能会在我们调用`new`关键字后立即触发实际的生成，就像我们使用`new Pdf(...)`表达式一样。`new ProxyPdf(...)`表达式的行为不同，因为它包装了实现相同`PdfInterface`的`Pdf`类，但提供了不同的`__construct()`方法实现。
- en: The chain of responsibility pattern
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 责任链模式
- en: The chain of responsibility pattern allows us to chain code in a sender-receiver manner,
    while the two are decoupled from each other. This makes it possible to have more
    than one object handle incoming requests.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 责任链模式允许我们以发送者-接收者的方式链接代码，同时两者彼此解耦。这使得可以有多个对象处理传入的请求。
- en: 'The following example demonstrates a possible chain of responsibility pattern
    implementation using the logger functionality as an example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了使用日志记录功能作为示例的可能的责任链模式实现：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We started off by creating an abstract `Logger` class with three methods: `logNext()`,
    `push()`, and `log()`. The `log()` method was defined as abstract, which means
    the implementation is left to child classes. The `logNext()` method is the key
    ingredient as it moves the objects down the chain. We then created three concrete
    implementations of the `Logger` class: `SystemLogger`, `ElasticLogger`, and `MailLogger`.
    We then instantiated one of the concrete logger classes and passed the other two
    instances down the chain using the `logNext()` method. Finally, we called the
    `push()` method to trigger the chain.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建了一个抽象的`Logger`类，其中包含三个方法：`logNext()`、`push()`和`log()`。`log()`方法被定义为抽象，这意味着实现留给子类。`logNext()`方法是关键因素，因为它将对象传递到链中。然后我们创建了`Logger`类的三个具体实现：`SystemLogger`、`ElasticLogger`和`MailLogger`。然后我们实例化了其中一个具体的记录器类，并使用`logNext()`方法将另外两个实例传递到链中。最后，我们调用了`push()`方法来触发链。
- en: Structural patterns
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构模式
- en: 'In this section, we will take a look at a structural pattern: the decorator
    pattern.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将看一下一个结构模式：装饰器模式。
- en: The decorator pattern
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 装饰器模式
- en: The decorator pattern is a simple one. It allows us to add new behavior to object
    instances without affecting other instances of the same class. It basically acts
    as a decorating wrapper around our object. We can imagine a simple use case with
    a Logger class instance, where we have a simple logger class that we would like
    to occasionally decorate, or wrap into a more specific error, warning, and notice
    level logger.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器模式很简单。它允许我们在不影响同一类的其他实例的情况下，为对象实例添加新的行为。它基本上充当了我们对象的装饰包装器。我们可以想象一个简单的用例，使用Logger类的实例，我们有一个简单的记录器类，我们希望偶尔装饰，或者包装成更具体的错误、警告和通知级别的记录器。
- en: 'The following example demonstrates a possible decorator pattern implementation:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了可能的装饰器模式实现：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, we started off by defining a `LoggerInterface` interface and a concrete
    `Logger` class that implements that interface. We then created an `abstract` `LoggerDecorator`
    class that also implements  `LoggerInterface`. `LoggerDecorator` does not really
    implement the `log()` method itself; it defines it as `abstract` for future child
    classes to implement. Finally, we defined the concrete error, warning, and notice
    decorator classes. We can see their `log()` methods decorate the output according
    to their roles. The resulting output is shown as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先定义了一个`LoggerInterface`接口和一个实现该接口的具体`Logger`类。然后我们创建了一个`abstract` `LoggerDecorator`类，它也实现了`LoggerInterface`。`LoggerDecorator`实际上并没有实现`log()`方法；它将其定义为`abstract`，以便未来的子类来实现。最后，我们定义了具体的错误、警告和通知装饰器类。我们可以看到它们的`log()`方法根据其角色装饰输出。结果输出如下：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we took an introductory hands-on approach with some
    of the most common design patterns used in PHP applications. The list is far from
    final, as there are other design patterns available. While some design patterns
    are quite general, others might be more suitable for GUIs or other areas of application
    programming. Understanding how to use and apply design patterns makes our code
    more extensible, reusable, maintainable, and adaptable.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们以实际操作的方式介绍了PHP应用程序中最常用的一些设计模式。这个列表还远未完成，因为还有其他设计模式可用。虽然有些设计模式非常通用，但其他可能更适合GUI或应用程序编程的其他领域。了解如何使用和应用设计模式使我们的代码更具可扩展性、可重用性、可维护性和适应性。
- en: Moving forward, we will take a closer look at building web services using SOAP,
    REST, and Apache Thrift.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更仔细地研究使用SOAP、REST和Apache Thrift构建Web服务。
